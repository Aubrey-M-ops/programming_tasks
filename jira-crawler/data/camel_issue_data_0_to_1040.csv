,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-20352,Bug,Minor,4.3.0,,"
None
",Open,Unresolved,None,Unassigned,Yury Kartsev,0,1,2024-01-19 22:13:41+00:00,2024-01-20 07:11:43+00:00,"Some time ago a new property was added to Apache Camel in CAMEL-10421, called ""includeNonSingletons"". It was configured via ""camel.springboot.includeNonSingletons"" property. Now it looks like `org.apache.camel.main.DefaultRoutesCollector.collectRoutesFromRegistry` finds all RouteBuilder in its `findByType(camelContext, RoutesBuilder.class);` method, regardless of whether they're prototypes or not by calling Spring's .`org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(@Nullable Class<T> type)`, which hard-codes `includeNonSingletons` to `true`. Â 


In older Camel versions `org.apache.camel.spring.boot.RoutesCollector` class would run method `onApplicationEvent` and it would not touch prototypes due to this: ""applicationContext.getBeansOfType(RoutesBuilder.class, configurationProperties.isIncludeNonSingletons(), true).values()"".


This issue causes our code to fail because we have a RouteBuilder prototype with only constructor to set URI and routeId dynamically for each builder. But we don't need Camel to do it automatically, because it does not know what to pass to that constructor.",
0,CAMEL-20351,Bug,Major,4.3.0,,"
None
",Open,Unresolved,None,Federico Mariani,Marco Carletti,0,1,2024-01-19 16:35:25+00:00,2024-01-19 16:36:37+00:00,"execution from remote doesn't load routes, example:




$ camel run https://github.com/apache/camel-kamelets-examples/tree/main/jbang/hello-java
2024-01-19 17:31:38.855  INFO 255708 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 4.3.0 is starting
2024-01-19 17:31:39.061  INFO 255708 --- [           main] org.apache.camel.main.MainSupport   : Using Java 17.0.9 with PID 255708. Started by marco in /tmp/aaa
2024-01-19 17:31:39.652  INFO 255708 --- [           main] mel.cli.connector.LocalCliConnector : Management from Camel JBang enabled
2024-01-19 17:31:39.705  INFO 255708 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 4.3.0 (CamelJBang) is starting
2024-01-19 17:31:39.895  INFO 255708 --- [           main] el.impl.engine.AbstractCamelContext : Routes startup (started:0)
2024-01-19 17:31:39.895  INFO 255708 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 4.3.0 (CamelJBang) started in 190ms (build:0ms init:0ms start:190ms)




or




$ camel run https://gist.github.com/davsclaus/477ddff5cdeb1ae03619aa544ce47e92
2024-01-19 17:33:44.098  INFO 255974 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 4.3.0 is starting
2024-01-19 17:33:44.301  INFO 255974 --- [           main] org.apache.camel.main.MainSupport   : Using Java 17.0.9 with PID 255974. Started by marco in /tmp/aaa
2024-01-19 17:33:44.805  INFO 255974 --- [           main] mel.cli.connector.LocalCliConnector : Management from Camel JBang enabled
2024-01-19 17:33:44.836  INFO 255974 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 4.3.0 (CamelJBang) is starting
2024-01-19 17:33:44.963  INFO 255974 --- [           main] el.impl.engine.AbstractCamelContext : Routes startup (started:0)
2024-01-19 17:33:44.963  INFO 255974 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 4.3.0 (CamelJBang) started in 127ms (build:0ms init:0ms start:127ms)",
0,CAMEL-20350,Bug,Minor,None,4.4.0,"
None
",Open,Unresolved,4.4.0,Unassigned,Claus Ibsen,0,1,2024-01-19 10:37:20+00:00,2024-01-19 11:13:18+00:00,https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Micrometer.20Observation,
0,CAMEL-20349,Bug,Major,4.1.0,,"
None
",Open,Unresolved,None,Unassigned,Lorenzo Benvenuti,0,1,2024-01-19 10:19:29+00:00,2024-01-19 10:23:50+00:00,"Hi,


I've noticed an issue when camel-salesforce retries a request after a 401; the component is able to fetch another access token, but then an exception is thrown:




[SalesforceHttpClient@1d75e7af-24] INFO org.eclipse.jetty.client.ResponseNotifier - Exception while notifying listener org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1@77a6eac7
java.lang.ClassCastException: class org.eclipse.jetty.client.HttpRequest cannot be cast to class org.apache.camel.component.salesforce.internal.client.SalesforceHttpRequest (org.eclipse.jetty.client.HttpRequest and org.apache.camel.component.salesforce.internal.client.SalesforceHttpRequest are in unnamed module of loader 'app')
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:221)
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:213)
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:205)
	at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:492)
	at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:472)
	at org.eclipse.jetty.client.HttpReceiver.responseSuccess(HttpReceiver.java:435)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.messageComplete(HttpReceiverOverHTTP.java:386)
	at org.eclipse.jetty.http.HttpParser.handleContentMessage(HttpParser.java:586)
	at org.eclipse.jetty.http.HttpParser.parseContent(HttpParser.java:1727)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1556)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.parse(HttpReceiverOverHTTP.java:221)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:160)
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:91)
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:90)
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:194)
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:314)
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:100)
	at org.eclipse.jetty.io.SelectableChannelEndPoint$1.run(SelectableChannelEndPoint.java:53)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.runTask(AdaptiveExecutionStrategy.java:421)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.consumeTask(AdaptiveExecutionStrategy.java:390)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.tryProduce(AdaptiveExecutionStrategy.java:277)
	at org.eclipse.jetty.util.thread.strategy.AdaptiveExecutionStrategy.run(AdaptiveExecutionStrategy.java:199)
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:411)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:969)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.doRunJob(QueuedThreadPool.java:1194)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1149)
	at java.base/java.lang.Thread.run(Thread.java:833)





I've reproduced the error using a camel-salesforce test, RawPayloadTest. The test has been updated to return a 401 for the first request, and then return a 200 (I used a boolean for this, I'm not familiar with MockWebServer and IDK if it provides some API to implement a ""state machine"" like Wiremock). With these changes, the test hangs (see https://github.com/lorenzobenvenuti/camel/blob/reproduce-issue-4.1/components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/RawPayloadTest.java). 


The same test works with version 4.4 (https://github.com/lorenzobenvenuti/camel/blob/reproduce-issue-4.4/components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/RawPayloadTest.java).


The discrepancy between 4.1 and 4.4 could be related to the changes made for CAMEL-20248, when SalesforceHttpRequest was removed.


Thanks,


lorenzo",
0,CAMEL-20348,Improvement,Major,4.4.0,None,"

help-wanted

",Open,Unresolved,4.x,Unassigned,Otavio Rodolfo Piske,0,1,2024-01-19 10:18:00+00:00,2024-01-19 10:19:24+00:00,"As part of CAMEL-20297, we adjusted the code to avoid swallowing interrupted exceptions. However, in many cases, the code was adjusted so to retain the previous behavior of throwing an exception and the changes only added the code to restore the interrupt status. 
It is possible that in many of these cases we can implement a more elegant handling of the interrupt exception.
The purpose of this task is to investigate and implement such improvement.",
0,CAMEL-20347,Task,Major,None,None,"
None
",Closed,Invalid,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2024-01-19 10:10:39+00:00,2024-01-19 10:18:43+00:00,"There are many components currently swallowing the interrupted exceptions. This is considered a bad practice and can prevent proper cleanup of resources, increase shutdown time and other problems. 


We should ensure we notify the parent threads when an interruption occur. 


Full list is available here: https://sonarcloud.io/project/issues?resolved=false&rules=java%3AS2142&types=BUG&id=apache_camel",orpiske:1705630723:2024-01-19T10:18:43.160+0000:1705630723:2024-01-19T10:18:43.160+0000:Invalid task. Jira timed out while cloning the task. 
0,CAMEL-20346,Improvement,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2024-01-18 19:06:27+00:00,2024-01-19 08:05:24+00:00,No Desc,
0,CAMEL-20345,Improvement,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Unassigned,Claus Ibsen,0,1,2024-01-18 12:43:52+00:00,2024-01-18 12:50:50+00:00,"The parser should better detect the binary operator
https://github.com/apache/camel/pull/12821",
0,CAMEL-20344,Dependency upgrade,Major,None,4.4.0,"
None
",Open,Unresolved,4.4.0,Unassigned,Claus Ibsen,0,1,2024-01-18 10:08:03+00:00,2024-01-18 10:08:03+00:00,No Desc,
0,CAMEL-20343,Dependency upgrade,Major,None,4.0.4,"
None
",Open,Unresolved,4.0.4,Unassigned,Claus Ibsen,0,1,2024-01-18 10:07:43+00:00,2024-01-18 10:07:43+00:00,No Desc,
0,CAMEL-20342,Bug,Major,None,"4.0.4, 4.4.0","
None
",Resolved,Fixed,"4.0.4, 4.4.0",Claus Ibsen,Claus Ibsen,0,1,2024-01-18 09:54:57+00:00,2024-01-18 09:56:28+00:00,https://stackoverflow.com/questions/77798511/error-generating-openapi-from-camel-rest-dsl,
0,CAMEL-20341,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-17 19:47:44+00:00,2024-01-17 20:27:17+00:00,"Observed on Debian 11 (bullseye) and MacOS 14.2.1 (Sonoma)


Running the command mvn test -fae on the base Camel build produces the following test failures in camel-core:


Â 


[ERROR] Â  FileConsumerDirectoryFilterTest.testFilterFilesWithARegularFile mock://result Body of message: 0. Expected: <Hello World> but was: <>


Â 


[ERROR] Â  StopRouteAbortAfterTimeoutTest.testStopRouteWithAbortAfterTimeoutTrue:56 mock://result Received message count. Expected: <10> but was: <5>


Â 


[ERROR] Â  DefaultTimeoutMapTest.testExecutor Â» CamelExecution Exception occurred during execution on the exchange: Exchange[F25528BD82D76B4-0000000000000009]


Â 


[ERROR] Â  ThrottlingExceptionRoutePolicyHalfOpenHandlerSedaTest.testHalfOpenCircuit Â» CamelExecution Exception occurred during execution on the exchange: Exchange[E758332F9382739-0000000000000009]",
0,CAMEL-20340,Bug,Minor,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claudio Miranda,0,1,2024-01-17 18:36:47+00:00,2024-01-17 20:28:41+00:00,"The ""camel dependency list"" worked nice with java dsl, but the yaml dsl throws an error




Caused by: java.lang.ClassCastException: class org.apache.camel.main.stub.StubDataFormat cannot be cast to class org.apache.camel.component.jacksonxml.JacksonXMLDataFormat (org.apache.camel.main.stub.StubDataFormat is in unnamed module of loader 'app'; org.apache.camel.component.jacksonxml.JacksonXMLDataFormat is in unnamed module of loader org.apache.camel.main.download.DependencyDownloaderClassLoader @4a8a60bc)




The yaml route




- route:
Â  Â  from:
Â  Â  Â  uri: rest:post:/
Â  Â  Â  steps:
Â  Â  Â  Â  - unmarshal:
Â  Â  Â  Â  Â  Â  jackson-xml:
Â  Â  Â  Â  Â  Â  Â  unmarshalType: java.util.Map
Â  Â  Â  Â  - to:
Â  Â  Â  Â  Â  Â  uri: log:info",
0,CAMEL-20339,Bug,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2024-01-17 18:31:35+00:00,2024-01-18 10:01:33+00:00,https://github.com/apache/camel-karavan/issues/1055,"davsclaus:1705488393:2024-01-17T18:46:33.591+0000:1705488393:2024-01-17T18:46:33.591+0000:Saga EIP is the only EIP that has a special List for this, and the deprecated ServiceCall EIPs. "
0,CAMEL-20338,New Feature,Minor,3.x,,"
None
",Open,Unresolved,None,Unassigned,Ephemeris Lappis,0,1,2024-01-17 17:27:46+00:00,2024-01-17 17:27:46+00:00,"When a route sends JMS messages with a dynamic recipient (toD or recipient list for example), the producer component should add headers that identify the real computed destination name. The same way the file component does to identify the produced file path, JMS (or ActiveMQ) producers should provide ""CamelJmsDestinationNameProduced"" (for example) to distinguish a possible JMS input header.


Some other headers, if available, may also be useful (message ID for example).",
0,CAMEL-20337,Bug,Minor,3.20.9,,"
None
",Resolved,Not A Bug,None,Unassigned,Raymond,0,2,2024-01-17 10:44:00+00:00,2024-01-17 11:15:50+00:00,"I have the following Simple expression:




${header.randomString} !='' 



When I check this expression with the following code:




public ValidationErrorMessage validate(Expression expression){
    try {
        SimpleLanguage.simple(expression.getExpression());
    } catch (SimpleIllegalSyntaxException e) {
        if(expression.getName() == null) {
            return new ValidationErrorMessage(e.getMessage());
        }

        return new ValidationErrorMessage(""["" + expression.getName() + ""]: "" + e.getMessage());
    }

    return null;
} 



It returns OK without a syntax error.


When I use it in the following route:




  Â  <route id=""setheader"">
Â  Â  Â  Â  <from uri=""direct:in""/>
Â  Â  Â  Â  <setHeader headerName=""header"">
Â  Â  Â  Â  Â  Â  <simple>${header.randomString} !=''</simple>
Â  Â  Â  Â  </setHeader>
Â  Â  Â  Â  <to uri=""direct:out""/>
Â  Â  </route> 



It also goes well.


But when I use it in a route with a filter:




  Â  <route id=""routewithfilter"">
Â  Â  Â  Â  <from uri=""direct:in""/>
Â  Â  Â  Â  <filter>
Â  Â  Â  Â  Â  Â  <simple>${header.randomString} !=''</simple>
Â  Â  Â  Â  Â  Â  <to uri=""direct:out""/>
Â  Â  Â  Â  </filter>
Â  Â  </route> 



Then I get a syntax error on installation:




Failed to create route routewithfilter at: >>> Filter[simple{${header.randomString} !=''} -> [To[direct:in]]] <<< in route: Route(routewithfilter ...because of expected symbol whiteSpace but was singleQuote at location 25\n${header.randomString} !=''\n Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  *\n 



The error is easily solved by adding the expected whitespace:




 Â  <simple>${header.randomString} != ''</simple> 



My question is, why doesn't work everywhere the same? Is there an explanation for this or is it a bug?","davsclaus:1705459712:2024-01-17T10:48:32.997+0000:1705459712:2024-01-17T10:48:32.997+0000:Not a bug. 
predicate vs expression is not the same for some languages like simple.

davsclaus:1705459802:2024-01-17T10:50:02.879+0000:1705459802:2024-01-17T10:50:02.879+0000:See camel-catalog, it has APIs for checking expression vs predicate mode
skin27:1705460227:2024-01-17T10:57:07.050+0000:1705460227:2024-01-17T10:57:07.050+0000:OK, thanks, will look into it.
skin27:1705460408:2024-01-17T11:00:08.260+0000:1705460408:2024-01-17T11:00:08.260+0000:BTW I thought that I was using it as expression, as this is the name of the option in the filter EIP.

https://camel.apache.org/components/4.0.x/eips/filter-eip.html
skin27:1705461350:2024-01-17T11:15:50.324+0000:1705461350:2024-01-17T11:15:50.324+0000:As I understand it:

Running this statement as simple expression:


${header.randomString} !='' 

Then it only checks the syntax of the simple expression part:


{code:java}
${header.randomString}Â {code}

While evaluating it as a predicate, it checks the complete statement:


{code:java}
${header.randomString} !='' {code}"
0,CAMEL-20336,New Feature,Minor,None,None,"
None
",In Progress,Unresolved,4.x,Luca Burgazzoli,Luca Burgazzoli,0,1,2024-01-17 09:10:25+00:00,2024-01-17 09:10:46+00:00,I made a little POC to create a WebAssembly component and I think it would be nice to include it in the official camel repo,
0,CAMEL-20335,Task,Major,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Nicolas Filotto,AurÃ©lien Pupier,0,1,2024-01-15 11:56:06+00:00,2024-01-16 08:11:51+00:00,"[ERROR] [ERROR] Could not find the selected project in the reactor: components/camel-spring-xml/target/sources/camel-api/META-INF/maven/org.apache.camel/camel-api @ 
[ERROR] Could not find the selected project in the reactor: components/camel-spring-xml/target/sources/camel-api/META-INF/maven/org.apache.camel/camel-api -> [Help 1]
org.apache.maven.MavenExecutionException: Could not find the selected project in the reactor: components/camel-spring-xml/target/sources/camel-api/META-INF/maven/org.apache.camel/camel-api
	at org.apache.maven.graph.DefaultGraphBuilder.trimSelectedProjects(DefaultGraphBuilder.java:148)
	at org.apache.maven.graph.DefaultGraphBuilder.reactorDependencyGraph(DefaultGraphBuilder.java:110)
	at org.apache.maven.graph.DefaultGraphBuilder.build(DefaultGraphBuilder.java:78)
	at org.apache.maven.DefaultMaven.buildGraph(DefaultMaven.java:448)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:197)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
	at org.apache.maven.cli.DaemonMavenCli.execute(DaemonMavenCli.java:694)
	at org.apache.maven.cli.DaemonMavenCli.doMain(DaemonMavenCli.java:240)
	at org.apache.maven.cli.DaemonMavenCli.main(DaemonMavenCli.java:217)
	at org.mvndaemon.mvnd.daemon.Server.handle(Server.java:612)
	at org.mvndaemon.mvnd.daemon.Server.client(Server.java:288)
	at org.mvndaemon.mvnd.daemon.Server.lambda$accept$2(Server.java:250)
	at java.base/java.lang.Thread.run(Thread.java:840)",
0,CAMEL-20334,Bug,Major,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Andrea Cosentino,Christoph Deppisch,1,2,2024-01-12 10:10:52+00:00,2024-01-12 13:00:47+00:00,"Having aÂ KameletÂ /Â Pipe, such as:


Â 
apiVersion: camel.apache.org/v1kind: Pipemetadata:  name: aws-s3-source-pipeannotations:    trait.camel.apache.org/camel.runtime-version: 3.6.0spec:  integration:    dependencies:



""camel:cloudevents""source:    ref:      kind: KameletapiVersion: camel.apache.org/v1name: aws-s3-sourceproperties:      ... some secretsdataTypes:      out:        scheme: aws2-s3format: application-cloudeventssink:    dataTypes:      in:        scheme: httpformat: application-cloudeventsref:      kind: BrokerapiVersion: eventing.knative.dev/v1name: kamelet
Â 
I get the following exception from Quarkus Funqy, when trying to process the emitted Cloudevents:

2024-01-11 16:09:51,563 ERROR [io.qua.ver.htt.run.QuarkusErrorHandler] (executor-thread-1) HTTP Request to / failed, error id: af846418-99ec-4a1a-a4af-ec9192906b2f-1: io.quarkus.funqy.runtime.ApplicationException: java.lang.RuntimeException: Don't know how to get event data (dataContentType: 'null', javaType: 'functions.Input').
test-four-00001-deployment-6b5d6c7f69-flk8p user-container Â  Â  at io.quarkus.funqy.runtime.FunctionInvoker.invoke(FunctionInvoker.java:136)
test-four-00001-deployment-6b5d6c7f69-flk8p user-container Â  Â  at io.quarkus.funqy.runtime.bindings.knative.events.VertxRequestHandler.dispatch(VertxRequestHandler.java:571)

I see similar then I have a different (e.g.Â go) receiver that prints the request:

test-three-00001-deployment-54dc897c99-2qgzk user-container Received request
test-three-00001-deployment-54dc897c99-2qgzk user-container POST / HTTP/1.1 test-three.default.svc.cluster.local
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Id: 8B49F74E586030C-0000000000000009
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Specversion: 1.0
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  X-Forwarded-For: 10.244.0.23, 10.244.0.18
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  User-Agent: Go-http-client/1.1
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Subject: IMG_3339.jpg
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Time: 2024-01-11T15:08:42.013Z
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Forwarded: for=10.244.0.23;proto=http
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Prefer: reply
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Accept-Encoding: gzip
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Type: org.apache.camel.event.....
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  X-Request-Id: 2946fb28-f697-4406-9e71-80fb30e3b99a
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Content-Length: 883527
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Knativearrivaltime: 2024-01-11T15:08:42.188499068Z
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Ce-Source: .bucket.foobar
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  K-Proxy-Request: activator
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Kn-Namespace: default
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  Traceparent: 00-7ce27116bb576a804f841c7892e8f245-d3e77ecd9906bffa-00
test-three-00001-deployment-54dc897c99-2qgzk user-container Â  X-Forwarded-Proto: http","christophd:1705025542:2024-01-12T10:12:22.301+0000:1705025542:2024-01-12T10:12:22.301+0000:Initially raised on Kamelets https://github.com/apache/camel-kamelets/issues/1828
christophd:1705025645:2024-01-12T10:14:05.904+0000:1705025645:2024-01-12T10:14:05.904+0000:The cloudevents data type transformers need to set proper CamelCloudEventDataContentType header with the Content-Type of the data being processed"
0,CAMEL-20333,New Feature,Major,None,None,"
None
",Open,Unresolved,None,Unassigned,Ivan Mashtak,0,1,2024-01-11 21:09:21+00:00,2024-01-16 20:18:25+00:00,"This issue is holder for proposal of new Kotlin API for Camel. Description of proposal is located at this github gist.


This issue represents first part of this feature:



to wrap existing *Definition classes into Kotlin functions-builders
to make Kotlin-ish Endpoint DSL
to write some extension functions and infix operators to make code of Camel route more prettier



Rework of exsting Kotlin DSL is not a part of this issue.","imashtak:1704978659:2024-01-11T21:10:59.125+0000:1704978659:2024-01-11T21:10:59.125+0000:In progress, for now i made generation of Endpoint DSL via KotlinPoet library."
0,CAMEL-20332,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:10:54+00:00,2024-01-17 05:59:02+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


core/camel-support/src/test/java/org/apache/camel/support/task/BackgroundTaskTest.java
core/camel-support/src/test/java/org/apache/camel/support/task/ForegroundTaskTest.java",
0,CAMEL-20331,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:09:57+00:00,2024-01-17 05:59:39+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


core/camel-management/src/test/java/org/apache/camel/management/ManagedRouteStopWithAbortAfterTimeoutTest.java",
0,CAMEL-20330,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:09:02+00:00,2024-01-17 05:59:48+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-zookeeper/src/test/java/org/apache/camel/component/zookeeper/cloud/integration/ZooKeeperServiceRegistrationWithRoutePolicyAndMetadataIT.java
components/camel-zookeeper/src/test/java/org/apache/camel/component/zookeeper/cloud/integration/ZooKeeperServiceRegistrationWithRoutePolicyFactoryIT.java
components/camel-zookeeper/src/test/java/org/apache/camel/component/zookeeper/cloud/integration/ZooKeeperServiceRegistrationWithRoutePolicyIT.java
components/camel-zookeeper/src/test/java/org/apache/camel/component/zookeeper/cloud/integration/ZooKeeperServiceRegistrationWithServiceComponentIT.java
components/camel-zookeeper/src/test/java/org/apache/camel/component/zookeeper/cluster/SpringZooKeeperClusteredRouteConfigurationIT.java",
0,CAMEL-20329,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:08:12+00:00,2024-01-17 05:59:56+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-test/camel-test-main-junit5/src/test/java/org/apache/camel/test/main/junit5/annotation/TestInstancePerClassTest.java",
0,CAMEL-20328,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:06:58+00:00,2024-01-17 06:00:05+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-spring-xml/pom.xml
components/camel-spring-xml/src/test/java/org/apache/camel/spring/SpringTestSupport.java",
0,CAMEL-20327,Test,Major,4.x,None,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:06:07+00:00,2024-01-17 06:00:30+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-smb/src/test/java/org/apache/camel/component/smb/SmbComponentIT.java",
0,CAMEL-20326,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:05:11+00:00,2024-01-17 06:00:40+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-paho-mqtt5/src/test/java/org/apache/camel/component/paho/mqtt5/PahoMqtt5ReconnectAfterFailureTest.java",
0,CAMEL-20325,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:04:20+00:00,2024-01-17 06:00:44+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchBulkIT.java
components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchClusterIndexIT.java
components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchGetSearchDeleteExistsUpdateIT.java
components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchIndexIT.java
components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchPingIT.java
components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchScrollSearchIT.java
components/camel-opensearch/src/test/java/org/apache/camel/component/opensearch/integration/OpensearchSizeLimitIT.java",
0,CAMEL-20324,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:03:18+00:00,2024-01-17 06:00:48+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-openapi-java/src/test/java/org/apache/camel/openapi/RestOpenApiReaderTest.java",
0,CAMEL-20323,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:02:20+00:00,2024-01-17 06:00:52+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbAggregateOperationIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbBigDecimalConverterIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbBulkWriteOperationIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbChangeStreamsConsumerIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbConnectionBeansIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbConversionsIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbCredentialsFromUriConnectionIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbDynamicityIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbExceptionHandlingIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbHeaderHandlingIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbIndexIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbInsertBatchIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbOperationsIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbOutputTypeIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbReadPreferenceOptionIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbSpringDslOperationsIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbStopEndpointIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/integration/MongoDbTailableCursorConsumerIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/meta/integration/MongoDbMetaExtensionIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/processor/idempotent/integration/MongoDbIdempotentRepositoryIT.java
components/camel-mongodb/src/test/java/org/apache/camel/component/mongodb/verifier/integration/MongoDbVerifierExtensionIT.java",
0,CAMEL-20322,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:00:58+00:00,2024-01-17 06:00:57+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-mllp/src/test/java/org/apache/camel/component/mllp/TcpClientProducerEndOfDataAndValidationTestSupport.java",
0,CAMEL-20321,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 19:00:22+00:00,2024-01-17 06:01:02+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-mail/src/test/java/org/apache/camel/component/mail/MailIdempotentRepositoryDuplicateTest.java",
0,CAMEL-20320,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:59:39+00:00,2024-01-17 06:01:07+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorOffUsingKafkaManualCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorReplayOldMessagesIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorSeekIssueIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorWithBatchUsingAsynchCommitManagerIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorWithBatchUsingKafkaManualCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorWithBatchUsingKafkaManualCommitRetryIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaBreakOnFirstErrorWithBatchUsingSynchCommitManagerIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerAsyncManualCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerAutoInstResumeRouteStrategyIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerBatchSizeIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerFullIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerIdempotentGroupIdIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerIdempotentIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerIdempotentWithCustomSerializerIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerIdempotentWithProcessorIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerLastRecordHeaderIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerRebalanceIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerStopIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaConsumerTopicIsPatternIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaProducerFullIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaSagaIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaToDIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/KafkaTransactionIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/commit/KafkaConsumerAsyncCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/commit/KafkaConsumerAsyncWithOffsetRepoCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/commit/KafkaConsumerNoopCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/commit/KafkaConsumerSyncCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/commit/KafkaConsumerSyncWithOffsetRepoCommitIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/pause/KafkaPausableConsumerCircuitBreakerIT.java
components/camel-kafka/src/test/java/org/apache/camel/component/kafka/integration/pause/KafkaPausableConsumerIT.java
components/camel-kafka/src/test/java/org/apache/camel/processor/idempotent/kafka/KafkaIdempotentRepositoryEagerIT.java
components/camel-kafka/src/test/java/org/apache/camel/processor/idempotent/kafka/KafkaIdempotentRepositoryNonEagerIT.java
components/camel-kafka/src/test/java/org/apache/camel/processor/idempotent/kafka/KafkaIdempotentRepositoryPersistenceIT.java",
0,CAMEL-20319,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:58:31+00:00,2024-01-17 06:01:36+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-jms/pom.xml
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsMultipleConsumersTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/JmsTopicDurableSharedTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsLifecycleIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsMQSpecialHeaderTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsMessageHeaderContentBasedRouterTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsMutateMessageTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsMutateRemoveHeaderMessageTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyEndUserIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyEndpointTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsPassThroughtJmsKeyFormatStrategyUsingJmsConfigurationTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsReplyToLoopIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsRoutingSlipIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsToFileMessageIdTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/JmsTypeConverterIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/LarsIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/MQSeriesHeaderTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/issues/TempReplyToIssueTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/polling/JmsPollingConsumerNoWaitTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/polling/JmsPollingConsumerWaitTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/polling/JmsPollingHighTimeOutTest.java
components/camel-jms/src/test/java/org/apache/camel/component/jms/temp/TemporaryQueueRouteTest.java",
0,CAMEL-20318,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:57:35+00:00,2024-01-17 06:01:40+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-jetty/src/test/java/org/apache/camel/component/jetty/HttpsAsyncRouteTest.java
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/JettySuspendWhileInProgressTest.java
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/async/JettyAsyncContinuationTimeoutTest.java
components/camel-jetty/src/test/java/org/apache/camel/component/jetty/file/JettyHttpFileCacheTest.java",
0,CAMEL-20317,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:56:41+00:00,2024-01-17 06:01:45+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-infinispan/camel-infinispan-embedded/src/test/java/org/apache/camel/component/infinispan/embedded/cluster/InfinispanEmbeddedClusteredMasterTest.java",
0,CAMEL-20316,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:55:32+00:00,2024-01-17 06:01:49+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchBulkIT.java
components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchClusterIndexIT.java
components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchGetSearchDeleteExistsUpdateIT.java
components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchIndexIT.java
components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchPingIT.java
components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchScrollSearchIT.java
components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchSizeLimitIT.java",
0,CAMEL-20315,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:54:03+00:00,2024-01-17 06:01:53+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-elasticsearch-rest-client/src/test/java/org/apache/camel/component/elasticsearch/rest/client/integration/ElasticsearchRestClientComponentTest.java",
0,CAMEL-20314,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:49:48+00:00,2024-01-17 06:01:57+00:00,"Tests fail when running mvn clean install. Temporarily disabled by CAMEL-20291 until fixed. Affected files:


components/camel-cxf/camel-cxf-spring-soap/src/test/java/org/apache/camel/component/cxf/CxfPayloadWsdlWithoutSEITest.java
components/camel-cxf/camel-cxf-spring-soap/src/test/java/org/apache/camel/component/cxf/CxfRecipientListTest.java
components/camel-cxf/camel-cxf-spring-soap/src/test/java/org/apache/camel/component/cxf/CxfRecipientListWithUrlParamsTest.java",
0,CAMEL-20313,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:48:11+00:00,2024-01-17 06:02:01+00:00,Tests in `components/camel-cxf/camel-cxf-spring-rest/src/test/java/org/apache/camel/component/cxf/jaxrs/CxfRsConsumerTest.java` fail when running `mvn clean install`. Temporarily disabled by CAMEL-20291 until fixed.,
0,CAMEL-20312,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:46:27+00:00,2024-01-17 06:02:05+00:00,Tests in `components/camel-couchdb/src/test/java/org/apache/camel/component/couchdb/integration/CouchDbCrudIT.java` fail when running `mvn clean install`. Temporarily disabled by CAMEL-20291 until fixed.,
0,CAMEL-20311,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:45:30+00:00,2024-01-17 06:02:09+00:00,Tests in `components/camel-consul/src/test/java/org/apache/camel/component/consul/ConsulHealthIT.java` fail when running `mvn clean install`. Temporarily disabled by CAMEL-20291 until fixed.,
0,CAMEL-20310,Test,Major,4.x,,"
None
",Open,Unresolved,None,Unassigned,Craig Ziesman,0,1,2024-01-11 18:44:30+00:00,2024-01-17 06:02:13+00:00,Tests in `components/camel-coap/src/test/java/org/apache/camel/coap/CoAPCORSTest.java` fail randomly when running `mvn clean install`. Temporarily disabled by CAMEL-20291 until fixed.,
0,CAMEL-20309,Task,Minor,4.3.0,,"
None
",Open,Unresolved,None,Unassigned,AurÃ©lien Pupier,0,1,2024-01-11 09:06:14+00:00,2024-01-11 09:06:14+00:00,"[ERROR] [ERROR] Could not find the selected project in the reactor: components/camel-olingo2/camel-olingo2-component/target/olingo2-my-car-service @ 
[ERROR] Could not find the selected project in the reactor: components/camel-olingo2/camel-olingo2-component/target/olingo2-my-car-service -> [Help 1]
org.apache.maven.MavenExecutionException: Could not find the selected project in the reactor: components/camel-olingo2/camel-olingo2-component/target/olingo2-my-car-service
	at org.apache.maven.graph.DefaultGraphBuilder.trimSelectedProjects(DefaultGraphBuilder.java:148)
	at org.apache.maven.graph.DefaultGraphBuilder.reactorDependencyGraph(DefaultGraphBuilder.java:110)
	at org.apache.maven.graph.DefaultGraphBuilder.build(DefaultGraphBuilder.java:78)
	at org.apache.maven.DefaultMaven.buildGraph(DefaultMaven.java:448)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:197)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:173)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:101)
	at org.apache.maven.cli.DaemonMavenCli.execute(DaemonMavenCli.java:694)
	at org.apache.maven.cli.DaemonMavenCli.doMain(DaemonMavenCli.java:240)
	at org.apache.maven.cli.DaemonMavenCli.main(DaemonMavenCli.java:217)
	at org.mvndaemon.mvnd.daemon.Server.handle(Server.java:612)
	at org.mvndaemon.mvnd.daemon.Server.client(Server.java:288)
	at org.mvndaemon.mvnd.daemon.Server.lambda$accept$2(Server.java:250)
	at java.base/java.lang.Thread.run(Thread.java:840)",
0,CAMEL-20308,Improvement,Major,4.4.0,4.4.0,"
None
",Open,Unresolved,4.4.0,Thomas Cunningham,Thomas Cunningham,0,2,2024-01-10 20:26:07+00:00,2024-01-19 08:05:56+00:00,"I'd like to suggest changing the order of camel-spring-boot-bom and spring-boot-dependencies in <dependencyManagement/> - currently spring-boot-dependencies is listed first, but the camel-parent many times contains updated dependencies with CVE fixes.Â  Â  Â In the event of the two BOMs containing a <dependencyManagement> entry for the same artifact, listing camel-spring-boot-bom first would mean that the versions from the camel-parent take precedence over spring-boot-dependencies versions and may mean a safer experience.","davsclaus:1705538297:2024-01-18T08:38:17.540+0000:1705538297:2024-01-18T08:38:17.540+0000:We also need to update the 4.4 upgrade guide docs
https://github.com/apache/camel/blob/main/docs/user-manual/modules/ROOT/pages/camel-4x-upgrade-guide-4_4.adoc

Also in the CSB docs such as
https://github.com/apache/camel-spring-boot/blob/main/docs/spring-boot/modules/ROOT/pages/index.adoc
davsclaus:1705622756:2024-01-19T08:05:56.714+0000:1705622756:2024-01-19T08:05:56.714+0000:[~tcunning] can you send a PR to add a note about this change in the 4.4 guide
https://github.com/apache/camel/blob/main/docs/user-manual/modules/ROOT/pages/camel-4x-upgrade-guide-4_4.adoc"
0,CAMEL-20307,Bug,Minor,2.25.2,4.4.0,"
None
",Resolved,Invalid,4.4.0,Unassigned,AjayPatil2611,0,2,2024-01-10 08:57:35+00:00,2024-01-17 10:41:19+00:00,"Our application is connected to Fedissa Broker via a camel application. So whenever we place an order to Fedissa for multiple quantities (sometimes bulk orders), we are getting ""Queue Full"" error in camel application (PFA).Â  Also note that we are using Seda and wireTap in the application to connect each internal endpoint in the routes.","acosentino:1704848401:2024-01-10T09:00:01.815+0000:1704848506:2024-01-10T09:01:46.549+0000:If you need help, please write on zulip chat or in the mailing list. The JIRA issue tracker is for real issues and not for questions.
AjayPatil2611:1704848613:2024-01-10T09:03:33.689+0000:1704848711:2024-01-10T09:05:11.253+0000:Sorry, it's not a question, and it seems to be an issue in the quick-fix component."
0,CAMEL-20306,Improvement,Major,None,"3.21.4, 3.22.1, 3.x, 4.0.4, 4.4.0","
None
",Resolved,Fixed,"3.21.4, 3.22.1, 3.x, 4.0.4, 4.4.0",Andrea Cosentino,Andrea Cosentino,0,1,2024-01-09 13:29:10+00:00,2024-01-17 08:54:53+00:00,No Desc,
0,CAMEL-20305,Task,Major,"3.21.3, 3.22.0, 4.0.3, 4.3.0","3.21.4, 3.22.1, 4.0.4, 4.4.0","
None
",Resolved,Fixed,"3.21.4, 3.22.1, 4.0.4, 4.4.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2024-01-09 12:20:09+00:00,2024-01-09 12:21:43+00:00,No Desc,
0,CAMEL-20304,Dependency upgrade,Minor,4.3.0,None,"
None
",Open,Unresolved,None,Unassigned,AurÃ©lien Pupier,0,1,2024-01-09 11:03:08+00:00,2024-01-09 11:03:08+00:00,"There are API break and compilation is failing when upgrading. Specific work is needed.
see https://github.com/apache/camel/pull/1712


Note: camel-nitrite component is missing in JIRa project",
0,CAMEL-20303,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.21.4, 3.22.1, 3.x, 4.0.4, 4.4.0",Andrea Cosentino,Andrea Cosentino,0,1,2024-01-08 17:50:41+00:00,2024-01-15 08:32:43+00:00,No Desc,
0,CAMEL-20272,Improvement,Major,None,None,"
None
",Open,Unresolved,4.4.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-21 10:51:22+00:00,2023-12-21 10:51:22+00:00,No Desc,
0,CAMEL-20271,Improvement,Major,None,None,"
None
",Resolved,Fixed,4.4.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-21 09:08:40+00:00,2023-12-21 10:36:32+00:00,No Desc,
0,CAMEL-20270,New Feature,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Christoph Deppisch,Christoph Deppisch,0,2,2023-12-21 07:16:20+00:00,2023-12-23 12:34:46+00:00,"Camel JBang continues to emerge and grow with new features. This is great but we need to find a way to modularize the capabilities. The module camel-jbang-core is quite huge already and more and more features add dependencies and complexity.


We should investigate in a plugin mechanism, where sub-commands are added on demand. Each plugin comes with a separate Maven module so the dependencies are not added to camel-jbang-core OOTB but when the user enables the plugin.


Potential candidates as Camel JBang plugin are:



camel-k
hawtio
sbom
jolokia","davsclaus:1703289503:2023-12-23T07:58:23.123+0000:1703289503:2023-12-23T07:58:23.123+0000:TODO: Update doc about how to use jbang plugins
TODO: hawtio and jolokia can be in same plugin (hawtio)
"
0,CAMEL-20269,Test,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-21 00:49:44+00:00,2024-01-04 12:58:39+00:00,"Greater concurrency seems to be causing embedded Artemis initialization to fail.




37   â 2023-12-20 21:36:36,118 [Pool-1-worker-6] ERROR server                         - AMQ224000: Failure in initialisation
  38   â java.lang.IllegalArgumentException: AMQ229062: Acceptor with id 0 already registered
  39   â     at org.apache.activemq.artemis.core.remoting.impl.invm.InVMRegistry.registerAcceptor(InVMRegistry.java:32) ~[artemis-server-2.31.2.jar:2.31.2]
  40   â     at org.apache.activemq.artemis.core.remoting.impl.invm.InVMAcceptor.start(InVMAcceptor.java:136) ~[artemis-server-2.31.2.jar:2.31.2]
  41   â     at org.apache.activemq.artemis.core.remoting.server.impl.RemotingServiceImpl.startAcceptors(RemotingServiceImpl.java:316) ~[artemis-server-2.31.2.jar:2.31.2]
  42   â     at org.apache.activemq.artemis.core.server.impl.ActiveMQServerImpl.completeActivation(ActiveMQServerImpl.java:3580) ~[artemis-server-2.31.2.jar:2.31.2]
  43   â     at org.apache.activemq.artemis.core.server.impl.LiveOnlyActivation.run(LiveOnlyActivation.java:80) ~[artemis-server-2.31.2.jar:2.31.2]
  44   â     at org.apache.activemq.artemis.core.server.impl.ActiveMQServerImpl.internalStart(ActiveMQServerImpl.java:720) ~[artemis-server-2.31.2.jar:2.31.2]
  45   â     at org.apache.activemq.artemis.core.server.impl.ActiveMQServerImpl.start(ActiveMQServerImpl.java:610) ~[artemis-server-2.31.2.jar:2.31.2]
  46   â     at org.apache.activemq.artemis.core.server.embedded.EmbeddedActiveMQ.start(EmbeddedActiveMQ.java:134) ~[artemis-server-2.31.2.jar:2.31.2]
  47   â     at org.apache.camel.test.infra.artemis.services.AbstractArtemisEmbeddedService.initialize(AbstractArtemisEmbeddedService.java:106) ~[camel-test-infra-artemis-4.4.0-SNAPSHOT-tests.jar:4.4.0-SNAPSHOT]",orpiske:1704329470:2024-01-04T08:51:10.865+0000:1704329470:2024-01-04T08:51:10.865+0000:Fixed with the linked PR.
0,CAMEL-20268,Task,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Craig Ziesman,Craig Ziesman,0,2,2023-12-20 20:25:02+00:00,2023-12-21 05:24:21+00:00,"After a fresh checkout, running mvn install -DskipTests causes several files to be reformatted. This is not serious, but it is annoying and causes pull issues when getting the latest updates from main, and merge issues when attempting to commit. Here are the files that are modified as of today:


components/camel-csv/src/main/java/org/apache/camel/dataformat/csv/CsvRecordConverter.java
components/camel-cxf/camel-cxf-rest/src/main/java/org/apache/camel/component/cxf/jaxrs/DefaultCxfRsBinding.java
components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/FtpSoTimeoutTest.java
components/camel-http-base/src/main/java/org/apache/camel/http/base/HttpHelper.java
components/camel-jackson-avro/src/test/java/org/apache/camel/component/jackson/avro/transform/AvroPojoDataTypeTransformerTest.java
components/camel-jasypt/src/test/java/org/apache/camel/component/jasypt/JasytPropertiesParserCustomAlgTest.java
components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaComponent.java
components/camel-micrometer/src/main/java/org/apache/camel/component/micrometer/messagehistory/MicrometerMessageHistory.java
components/camel-rest-openapi/src/test/java/org/apache/camel/component/rest/openapi/WireMockJettyServerFactory.java
components/camel-stream/src/main/java/org/apache/camel/component/stream/StreamConsumer.java
components/camel-thrift/src/main/java/org/apache/camel/component/thrift/server/ThriftMethodHandler.java
components/camel-vertx/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpEndpoint.java
docs/components/modules/others/nav.adoc
dsl/camel-componentdsl/src/generated/java/org/apache/camel/builder/component/dsl/AzureStorageQueueComponentBuilderFactory.java
dsl/camel-endpointdsl/src/generated/java/org/apache/camel/builder/endpoint/dsl/CosmosDbEndpointBuilderFactory.java
dsl/camel-endpointdsl/src/generated/java/org/apache/camel/builder/endpoint/dsl/DataLakeEndpointBuilderFactory.java
dsl/camel-endpointdsl/src/generated/java/org/apache/camel/builder/endpoint/dsl/EventHubsEndpointBuilderFactory.java
dsl/camel-endpointdsl/src/generated/java/org/apache/camel/builder/endpoint/dsl/FilesEndpointBuilderFactory.java
dsl/camel-endpointdsl/src/generated/java/org/apache/camel/builder/endpoint/dsl/QueueEndpointBuilderFactory.java
dsl/camel-endpointdsl/src/generated/java/org/apache/camel/builder/endpoint/dsl/ServiceBusEndpointBuilderFactory.java
etc/scripts/sign.sh
tests/camel-itest/src/test/java/org/apache/camel/itest/nettyhttp/NettyHttpClientChunkedResponseTest.java


These reformatted files should just be merged.",davsclaus:1703107457:2023-12-21T05:24:17.683+0000:1703107457:2023-12-21T05:24:17.683+0000:A jira for this kind of stuff is not needed
0,CAMEL-20267,Task,Major,"4.3.0, 4.4.0",4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-20 16:36:33+00:00,2023-12-20 19:25:01+00:00,Throttler and SamplingThrottler classes use System.currentTimeMillis to compute rates. It could use the StopWatch.,orpiske:1703071501:2023-12-20T19:25:01.247+0000:1703071501:2023-12-20T19:25:01.247+0000:Fixed with the linked PR.
0,CAMEL-20266,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-12-20 16:07:24+00:00,2023-12-20 16:07:30+00:00,Instead of low-level client that is reactor flux based  then use the high level that has HA built-in and take care of reconnecting on error and much more.,
0,CAMEL-20265,Improvement,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,1,2,2023-12-20 13:46:14+00:00,2023-12-20 13:46:14+00:00,"As Camel JBang is receiving more and more attention from our community, it's widely loved by the community and is seeing increased adoption.


As a result, we have been faced with many circumstances where it makes sense to add features that are specific to the sub-projects. However, because Camel JBang is a part of the Camel Core project, there are some risks and limitations to what we can do. 


Specifically: 



We have limited ability to reuse code from the sub-projects, because we cannot introduce cyclic dependencies
Our inability to reuse code, may lead to situations where the code is simply copy/pasted, thus increasing the maintenance effort across the projects, slowing down progress and decreasing the overall code/project quality.
It slightly increases build and test time for the Camel Core project
It makes contribution harder for beginners - as it is part of a much larger project, that is harder to build and setup
It decreases the cohesion of the Camel Core project
It slows down the evolution of Camel JBang, as releasing it depends on releasing a new Camel Core version.",
0,CAMEL-20264,Task,Major,4.3.0,4.4.0,"

easy
help-wanted

",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-20 13:29:42+00:00,2024-01-10 09:27:52+00:00,"The AvailablePortFinder is present in multiple places and, in all of them, basically doing the same thing: trying to find an available port. 


We should move it to camel-support and consolidate all uses into a single one.",orpiske:1704850072:2024-01-10T09:27:52.687+0000:1704850072:2024-01-10T09:27:52.687+0000:Fixed with the linked PR via community contributions! 
0,CAMEL-20263,Bug,Major,3.20.8,,"
None
",Resolved,Not A Bug,None,Unassigned,Bruno GonÃ§alves,0,2,2023-12-20 13:06:05+00:00,2023-12-20 14:09:20+00:00,"I have the following route running on Camel3 (3.20.8), and I'm experience some ExchangesCompleted increment each time the routine runs (quartz), even when there's no messages to process.


On Camel2 (2.23.4), with the same route structure, I don't see the increment when there's no processing messages.


Do you know if quartz component on Camel3, may trigger a Camel route even if there are no messages to process?




<route id=""e4282f9d-f0be-4dbd-93ec-9eef9b2aae0b_throttling"">
Â  <from uri=""quartz://e4282f9d-f0be-4dbd-93ec-9eef9b2aae0b_timer?trigger.repeatCount=-1&amp;trigger.repeatInterval=2000&amp;trigger.timeZone=Europe/Amsterdam""/>
  <setProperty propertyName=""AssimblyQueueName"">
Â  Â  <constant>ID_6581d1205827223f1f00000e_test_e4282f9d-f0be-4dbd-93ec-9eef9b2aae0b_throttling</constant>
Â  </setProperty>
Â  <process ref=""QueueMessageChecker""/>
  <filter>
Â  Â  <simple>${exchangeProperty.AssimblyQueueHasMessages} == true</simple>
Â  Â  <log message=""Inside first filter""/>
    <loop copy=""true"">
Â  Â  Â  <log message=""Inside loop""/>
Â  Â  Â  <constant>1</constant>
      <setProperty propertyName=""Enrich-Type"">
Â  Â  Â  Â  <simple>application/override</simple>
Â  Â  Â  </setProperty>
Â  Â  Â  <setProperty propertyName=""AssimblyAggregateNoExceptionOnNull"">
Â  Â  Â  Â  <simple resultType=""java.lang.Boolean"">true</simple>
Â  Â  Â  </setProperty>
Â  Â  Â  <pollEnrich strategyRef=""CurrentEnrichStrategy"" timeout=""5000"">
Â  Â  Â  Â  <constant>activemq:ID_6581d1205827223f1f00000e_test_e4282f9d-f0be-4dbd-93ec-9eef9b2aae0b_throttling</constant>
Â  Â  Â  </pollEnrich>
      <filter>
Â  Â  Â  Â  <simple>${body} != null</simple>
Â  Â  Â  Â  <log message=""Inside second filter""/>
Â  Â  Â  Â  <removeHeaders pattern=""fireTime|jobRunTime|nextFireTime|previousFireTime|refireCount|scheduledFireTime|triggerGroup|triggerName|jobDetail|jobInstance|mergedJobDataMap|result|scheduler|trigger"" excludePattern=""breadcrumbId""/>
Â  Â  Â  Â  <to uri=""direct-vm:ID_6581d1205827223f1f00000e_test_e4282f9d-f0be-4dbd-93ec-9eef9b2aae0b?exchangePattern=InOnly""/>
Â  Â  Â  </filter>
Â  Â  </loop>
Â  </filter>
</route>","davsclaus:1703051022:2023-12-20T13:43:42.346+0000:1703051022:2023-12-20T13:43:42.346+0000:every time quartz is triggering (every 2 sec in your example) and exchange is created and event is triggered.
brunovg:1703052560:2023-12-20T14:09:20.191+0000:1703052560:2023-12-20T14:09:20.191+0000:So, it works differently on Camel2, right?

Because I don't see this increment on Camel2, when quartz triggers and there's no messages to process."
0,CAMEL-20262,Bug,Major,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Giacomo Carnevale,0,2,2023-12-20 10:46:14+00:00,2023-12-21 10:17:59+00:00,"With TomcatEmbeddedWebappClassLoader (Spring Boot 3.2.0), the getResources method returns 'jar:nested:...' instead of 'jar:file:...' and throws a FileNotFoundException.","davsclaus:1703040618:2023-12-20T10:50:18.846+0000:1703040618:2023-12-20T10:50:18.846+0000:Do you have a sample project to reproduce this. As camel-spring-boot has its own SB specific resolver and code fixes should ideally be there
carnevalegiacomo:1703121464:2023-12-21T09:17:44.248+0000:1703121573:2023-12-21T09:19:33.549+0000:[https://github.com/imolainformatica/camel-spring-boot-examples/tree/main/mapstruct]

_mvn clean install_

The test is successfully executed with both Spring Boot 3.2.0 and Spring Boot 3.1.6.

Â 

*If I run the JAR instead*

*3.2.0*
_java -jar target/camel-example-spring-boot-mapstruct-4.4.0-SNAPSHOT.jar_
{color:#de350b}org.apache.camel.InvalidPayloadException: No body available of type: org.apache.camel.example.model.Beverage but has type: org.apache.camel.example.model.Beer on: Message. Caused by: No type converter available to convert from type: org.apache.camel.example.model.Beer to the required type: org.apache.camel.example.model.Beverage. Exchange[F31868F13D33CB4-0000000000000000]. Caused by: [org.apache.camel.NoTypeConversionAvailableException - No type converter available to convert from type: org.apache.camel.example.model.Beer to the required type: org.apache.camel.example.model.Beverage]{color}

If I enable debug logging level
{color:#de350b}2023-12-21T10:16:27.883+01:00 DEBUG 14006 â [Â  Â  Â  Â  Â  Â main] .a.c.i.e.DefaultPackageScanClassResolver : Cannot read entries in url: jar:nested:/home/giacomo/Progetti/camel-spring-boot-examples/mapstruct/target/camel-example-spring-boot-mapstruct-4.4.0-SNAPSHOT.jar/!BOOT-INF/classes/!/sample/camel/mapper/{color}
Â 
{color:#de350b}java.io.FileNotFoundException: nested:/home/giacomo/Progetti/camel-spring-boot-examples/mapstruct/target/camel-example-spring-boot-mapstruct-4.4.0-SNAPSHOT.jar (File o directory non esistente){color}
{color:#de350b}at java.base/java.io.FileInputStream.open0(Native Method) ~[na:na]{color}
{color:#de350b}at java.base/java.io.FileInputStream.open(FileInputStream.java:216) ~[na:na]{color}
{color:#de350b}at java.base/java.io.FileInputStream.<init>(FileInputStream.java:157) ~[na:na]{color}
{color:#de350b}at org.apache.camel.impl.engine.DefaultPackageScanClassResolver.find(DefaultPackageScanClassResolver.java:215) ~[camel-base-engine-4.4.0-SNAPSHOT.jar!/:4.4.0-SNAPSHOT]{color}
Â 

*3.1.6*
_<spring-boot-version>3.1.6</spring-boot-version>_ in pom.xml
_java -jar target/camel-example-spring-boot-mapstruct-4.4.0-SNAPSHOT.jar_
{color:#00875a}*OK*{color}

Â 

Â 
davsclaus:1703123558:2023-12-21T09:52:38.478+0000:1703123558:2023-12-21T09:52:38.478+0000:Yeah but camel spring boot should use FatJarPackageScanClassResolver and not DefaultPackageScanClassResolver
davsclaus:1703125079:2023-12-21T10:17:59.069+0000:1703125079:2023-12-21T10:17:59.069+0000:Thanks for reporting and providing the sample"
0,CAMEL-20261,Task,Minor,None,"4.0.4, 4.4.0","
None
",Resolved,Fixed,"4.0.4, 4.4.0",John Poth,John Poth,0,1,2023-12-20 10:11:45+00:00,2023-12-20 12:36:54+00:00,httpcomponents-client has changed the cookieSpec option values. We should update our docs to reflect this. We should also make it more explicit that the option only affects cookies managed through the CookieStore; not the ones directly set in the header.,
0,CAMEL-20260,Task,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-20 10:00:33+00:00,2023-12-20 11:36:16+00:00,No Desc,
0,CAMEL-20259,Task,Major,None,None,"
None
",Resolved,Fixed,4.4.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-20 10:00:14+00:00,2023-12-20 10:53:36+00:00,No Desc,
0,CAMEL-20258,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Ricardo Martinez,0,1,2023-12-19 20:08:54+00:00,2023-12-20 06:34:26+00:00,"The `camel-cron` could add `camel-quartz` as well. During runtime, using quarkus will use quarkus extensions, otherwise in Springboot will use springboot starter instead.",
0,CAMEL-20257,Task,Major,"4.3.0, 4.4.0",4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-19 17:36:49+00:00,2023-12-21 13:04:06+00:00,The CamelContext uses System.currentTimeMillis to compute uptime.,orpiske:1703135046:2023-12-21T13:04:06.553+0000:1703135046:2023-12-21T13:04:06.553+0000:Fixed with the linked PR.
0,CAMEL-20256,Task,Major,"4.3.0, 4.4.0",4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-19 15:24:07+00:00,2023-12-20 16:36:33+00:00,Throughput logger uses System.currentTimeMillis to compute duration. It should use the StopWatch.,orpiske:1703061281:2023-12-20T16:34:41.147+0000:1703061281:2023-12-20T16:34:41.147+0000:Fixed with the linked PR.
0,CAMEL-20255,Task,Major,"4.3.0, 4.4.0",4.5.0,"
None
",Open,Unresolved,4.5.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-19 13:48:34+00:00,2024-01-04 08:46:42+00:00,"Remove timestamp-based methods from MessageHistory, MessageHistoryFactories, CamelContext and others. 


The methods are deprecated as of 4.4.0.",orpiske:1702964950:2023-12-19T13:49:10.742+0000:1702964950:2023-12-19T13:49:10.742+0000:This needs to be done after the next LTS release.
0,CAMEL-20254,Bug,Minor,4.2.0,"4.0.4, 4.4.0","
None
",Resolved,Fixed,"4.0.4, 4.4.0",Claus Ibsen,Billy Jaime Beltran,0,2,2023-12-19 13:28:39+00:00,2023-12-20 11:57:33+00:00,"Background:


When setting setAuthenticationPreemptiveon to true on an http endpoint, basic authentication ceases to work


Â 


Error:


Â 



org.apache.hc.client5.http.ClientProtocolException: No credentials for preemptive authentication
Â  Â  Â  Â  at org.apache.hc.client5.http.impl.classic.InternalHttpClient.doExecute(InternalHttpClient.java:173) ~[httpclient5-5.2.1.jar:5.2.1]
Â  Â  Â  Â  at org.apache.hc.client5.http.impl.classic.CloseableHttpClient.execute(CloseableHttpClient.java:245) ~[httpclient5-5.2.1.jar:5.2.1]
Â  Â  Â  Â  at org.apache.camel.component.http.HttpProducer.executeMethod(HttpProducer.java:487) ~[camel-http-4.2.0.jar:4.2.0]
Â  Â  Â  Â  at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:269) ~[camel-http-4.2.0.jar:4.2.0]
Â  Â  Â  Â  at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:65) [camel-support-4.2.0.jar:4.2.0]



Â 




httpEndpoint.setAuthMethod(""Basic"");
httpEndpoint.setAuthUsername(""admin"");
httpEndpoint.setAuthPassword(""admin"");
/* enable or disable this line and the program works/does not work */		httpEndpoint.setAuthenticationPreemptive(true);
 



Â 


Â 


I attach a sample project with run instructions and a small shell python web server with basic auth configured.","davsclaus:1703039534:2023-12-20T10:32:14.384+0000:1703039534:2023-12-20T10:32:14.384+0000:Thanks for reporting and with the sample project


~/Downloads/camel-auth-example â¯ curl -i localhost:8080/proxy
HTTP/1.1 200 OK
Server: Jetty(12.0.5)
Content-Type: text/plain
Accept: */*
Last-Modified: Fri, 15 Dec 2023 15:46:57 GMT
Server: SimpleHTTP/0.6 Python/3.11.6
Transfer-Encoding: chunked

hello world!"
0,CAMEL-20253,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,3,2023-12-19 09:33:42+00:00,2024-01-19 18:13:04+00:00,"We should add support for the new jolokia 2.0.


And we should make it possible to have it exposed over http via camel-platform-http-main, so you can from jbang do


/q/jolokia","ikulaga:1704500938:2024-01-06T08:28:58.689+0000:1704500938:2024-01-06T08:28:58.689+0000:Hello! Is this issue relevant? I would like to work on it.
claudio4j:1704716237:2024-01-08T20:17:17.121+0000:1704716237:2024-01-08T20:17:17.121+0000:Yes, feel free to work on it and discuss any impediment in the mailing list or zulip chat."
0,CAMEL-20252,Task,Major,None,4.4.0,"

easy
help-wanted

",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-18 16:41:32+00:00,2023-12-18 17:12:45+00:00,"There are a few ""performance"" tests that are rather old test that was written in a way that is inadequate for testing JVM-based code (JIT inlining, DCE and a lot more).



CamelSimpleExpressionPerfTestRunner
SedaDisruptorCompareTest



This test should either be removed or rewritten using JMH and moved to camel-performance-tests repository.",orpiske:1702890758:2023-12-18T17:12:38.887+0000:1702890758:2023-12-18T17:12:38.887+0000:Resolved with the linked PR.
0,CAMEL-20251,New Feature,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Christoph Deppisch,Christoph Deppisch,0,1,2023-12-18 13:39:47+00:00,2023-12-23 12:34:22+00:00,"Camel JBang is the best way to start and develop with Apache Camel these days.


We should encourage users to further use this Camel JBang tooling also for 2nd day operations such as configuring and running the Camel routes on Kubernetes.


Basically we should contribute the kamel CLI tooling functionality to Camel JBang in the long run so that users can use the very same tooling for all Camel developing. The kamel run command may be a good start for this.",
0,CAMEL-20250,Bug,Major,"3.21.3, 4.3.0",4.4.0,"
None
",Resolved,Fixed,4.4.0,Unassigned,Otavio Rodolfo Piske,0,1,2023-12-18 13:23:23+00:00,2023-12-19 10:41:47+00:00,"Quoting https://github.com/abendton the pull request #12462: 



the shardId is not available in the exchange. The shardId is required to properly configure the GetShardIteratorRequest in the resume scenario (AWS doc)
the KinesisResumeAdapter API does not allow to pass in the shardId.
When consuming multiple shards the KinesisResumeAdapter will potentially be used by multiple threads concurrently. With the current API, this could cause concurrency issues",
0,CAMEL-20249,Improvement,Major,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-18 10:00:48+00:00,2023-12-19 12:30:50+00:00,In --dev mode we should remove old routes on reload.,davsclaus:1702886413:2023-12-18T16:00:13.496+0000:1702886413:2023-12-18T16:00:13.496+0000:Hmm something weird is happening with micrometer when adding meters again on reload then they somehow are not active in scrape.
0,CAMEL-20248,Bug,Major,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Jeremy Ross,Jeremy Ross,0,3,2023-12-17 21:25:47+00:00,2024-01-19 10:21:24+00:00,Seems to be related to the Jetty 12 upgrade.,"davsclaus:1703047068:2023-12-20T12:37:48.229+0000:1703047068:2023-12-20T12:37:48.229+0000:Thanks Jeremy for helping with this. We need this done by end of January so we have it ready for the next LTS release.
jeremyross:1703059977:2023-12-20T16:12:57.422+0000:1703059977:2023-12-20T16:12:57.422+0000:No problem. I have most things working now. Doing extensive testing.
lbenvenu:1705566554:2024-01-18T16:29:14.747+0000:1705566554:2024-01-18T16:29:14.747+0000:Hi, sorry to comment a closed issue; I arrived here from [this change|https://github.com/apache/camel/blame/c9f86dad06d886c84838afd0ef4ed1216f2e3d40/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java#L230].

We updated Quarkus to version 3.5 (using Camel 4.1) and we're seeing this error:

{code}
java.lang.ClassCastException: class org.eclipse.jetty.client.HttpRequest cannot be cast to class org.apache.camel.component.salesforce.internal.client.SalesforceHttpRequest (org.eclipse.jetty.client.HttpRequest and org.apache.camel.component.salesforce.internal.client.SalesforceHttpRequest are in unnamed module of loader 'app')
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:221)
{code}

That cast was removed in [this commit|https://github.com/apache/camel/commit/8490563ba768674b0e866d3f9577884540b4a4f3] which points to this story... I don't know if it's the same issue, but they seem related: any plans to backport this fix to Camel 4.0 (which is an LTS)? In that case we could try to use camel-quarkus 3.5 (or 3.6) and force camel-quarkus-salesforce 4.0.

Thanks,

lorenzo

jeremyross:1705567109:2024-01-18T16:38:29.001+0000:1705567109:2024-01-18T16:38:29.001+0000:SalesforceHttpRequest was removed in 4.4. If you're using Camel 4.1, [it should still be there|https://github.com/apache/camel/blob/camel-4.1.x/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/SalesforceHttpRequest.java].Â 
lbenvenu:1705570382:2024-01-18T17:33:02.440+0000:1705570382:2024-01-18T17:33:02.440+0000:Yeah the problem is that it's causing the error above, so I thought that the 4.4 fix could be backported. 
jeremyross:1705575475:2024-01-18T18:57:55.588+0000:1705575475:2024-01-18T18:57:55.588+0000:This issue relates to changes introduced in 4.3. The reason the cast was removed in 4.4 as part of this issue is because SalesforceHttpRequest was removed as part of this change. I think you're seeing a completely different issue. If so, please create a new issue, ideally with a test case to reproduce.
lbenvenu:1705630884:2024-01-19T10:21:24.668+0000:1705630884:2024-01-19T10:21:24.668+0000:Hi, I've created https://issues.apache.org/jira/browse/CAMEL-20349. I was able to reproduce the issue tweaking a {{camel-salesforce}} test; the same test works in main.

Thanks,

lorenzo"
0,CAMEL-20247,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Steve Storck,Steve Storck,0,2,2023-12-17 18:39:34+00:00,2023-12-28 11:32:43+00:00,"As a result of a user bringing a bug to my attention, plus discussion during a recent merge request for the Dynamic Router EIP component, I want to rework the component to achieve a few objectives:



Fix URI subscription issues.Â  Subscribing by using URI parameters caused problems, since the URI parameters would change with each subscription, but the component URI was not dynamic, and it would essentially ignore any URI subscription after the first one.
Utilize the existing Recipient List processor instead of re-implementing Multicast or RecipientList processor logic
The component should focus on managing the dynamic rule base as its primary function, and utilize as much of the existing Camel-provided code as possible.
Enhance the documentation so that users have a better idea of how to use this component, and the use cases that this component is well equipped to handle.","davsclaus:1703289343:2023-12-23T07:55:43.301+0000:1703289343:2023-12-23T07:55:43.301+0000:If you did not already do it, it would be good to add a note in the 4.4 upgrade guide about this EIP has been reworked
Steve973:1703313285:2023-12-23T14:34:45.281+0000:1703313285:2023-12-23T14:34:45.281+0000:I will do that.Â  I am currently modifying the documentation for the spring boot examples.Â  That will be my next pull request.Â  Immediately after that, I will add the entry for the upgrade guide.Â  I plan to have all of this done within the next couple of days.
Steve973:1703319203:2023-12-23T16:13:23.975+0000:1703319203:2023-12-23T16:13:23.975+0000:[~davsclaus] Would you mind letting me know where the upgrade guide is located, please?
davsclaus:1703326102:2023-12-23T18:08:22.182+0000:1703326102:2023-12-23T18:08:22.182+0000:https://github.com/apache/camel/blob/main/docs/user-manual/modules/ROOT/pages/camel-4x-upgrade-guide-4_4.adoc
davsclaus:1703639134:2023-12-27T09:05:34.107+0000:1703639134:2023-12-27T09:05:34.107+0000:Thanks is all work done and if so this ticket can be resolved
Steve973:1703734347:2023-12-28T11:32:27.104+0000:1703734347:2023-12-28T11:32:27.104+0000:[~davsclaus] yes.Â  All work is complete for this round.Â  I'll resolve this ticket."
0,CAMEL-20246,Improvement,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-17 13:55:14+00:00,2023-12-18 09:39:37+00:00,"This is only needed for special EIPs that create sub exchanges such as split, multicast etc.",
0,CAMEL-20245,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-17 07:11:43+00:00,2023-12-17 07:12:22+00:00,The summary is not logged when using supervised as Camel is already started.,
0,CAMEL-20244,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-12-17 06:59:54+00:00,2023-12-17 06:59:59+00:00,"See CAMEL-20242


And this example
https://github.com/apache/camel-kamelets-examples/tree/main/jbang/route-controller


You need to turn on 2 options to make the controller report DOWN for routes that are failing to startup or failed after X attempts.


This is more intuitive. Users that need to do as before or some other reason can turn these options off.",
0,CAMEL-20243,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-17 06:34:23+00:00,2024-01-05 12:04:06+00:00,"We should consider moving those 10+ options into its own group like we have for other stuff today. 


camel.main.routeControllerUnhealthyOnExhausted = true


->


camel.routeController.unhealthyOnExhausted = true",
0,CAMEL-20242,Improvement,Major,4.1.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Rinaldo Pitzer JÃºnior,0,2,2023-12-15 17:35:34+00:00,2023-12-17 07:00:41+00:00,"The default status for the camel-routes health checks is UP, and it is used if none of the routes is reporting DOWN.


When using the Supervising route controller, if the health check endpoint is called before the routes are started, the default status UP is reported.


This means that the application reports as Ready even before the routes were attempted to be started.


Even in scenarios where the route is certainly going to fail to startup, like this one,Â there is a brief period where the application reports as Ready.


This brief period is long enough for Camel K to occasionally report an Integration as Ready before it really is, which also makes some tests flaky .


Possible solutions:



Don't report UP as the default camel-routes status: if the routes health check is enabled and there are no routes reporting yet, should this really default to UP?
Have a health check specifically check if the route controller is Ready: if routes weren't even attempted to be started, then the supervising route controller could report itself as DOWN.
?","davsclaus:1702691462:2023-12-16T09:51:02.190+0000:1702691462:2023-12-16T09:51:02.190+0000:Yes its better to have a special health check for route controller that are DOWN from beginning, and are only UP when the route startup phase is complete. For the supervising route controller this means the first phase of starting routes. If you schedule a route to be restarted N times with X delay between, then the controller may be UP but the given route is DOWN.


davsclaus:1702715943:2023-12-16T16:39:03.683+0000:1702765741:2023-12-17T06:29:01.932+0000:TODO: camel-spring-boot add new option *DONE*

davsclaus:1702765956:2023-12-17T06:32:36.445+0000:1702765956:2023-12-17T06:32:36.445+0000:Okay there is a new option you need to turn on, to have it DOWN during restarting phase: routeControllerUnhealthyOnExhausted

If using jbang then its something ala:

 camel run foo.java --health --console --prop=camel.main.routeControllerSuperviseEnabled=true --prop=camel.main.routeControllerUnhealthyOnRestarting=true --prop=camel.main.routeControllerBackOffMaxAttempts=10 --prop=camel.main.routeControllerUnhealthyOnExhausted=true

davsclaus:1702767473:2023-12-17T06:57:53.811+0000:1702767473:2023-12-17T06:57:53.811+0000:There is an example at
https://github.com/apache/camel-kamelets-examples/tree/main/jbang/route-controller
davsclaus:1702767641:2023-12-17T07:00:41.633+0000:1702767641:2023-12-17T07:00:41.633+0000:Having to enable 2 options to make it DOWN for faulty routes is a bit confusing, so I created a ticket to see if we can flip the default values for these options. See linked JIRA ticket"
0,CAMEL-20241,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-15 15:03:15+00:00,2023-12-15 15:18:38+00:00,No Desc,
0,CAMEL-20240,Bug,Major,4.3.0,None,"
None
",Resolved,Not A Bug,None,Unassigned,Thomas Cunningham,0,2,2023-12-15 13:37:08+00:00,2023-12-15 13:42:40+00:00,"Tried running the Routes Configuration example in camel-spring-boot-examples with camel 4.3.0, getting errors with both openjdk17 and openjdk21 :
Â 
[INFO] -< org.apache.camel.springboot.example:camel-example-spring-boot-routes-configuration >-
[INFO] Building Camel SB Examples :: Spring Boot :: Routes Configuration 4.3.0 [51/72]
[INFO]Â  Â from routes-configuration/pom.xml
[INFO] -------------------------------[ jar ]--------------------------------
[INFO]
[INFO] â clean:3.2.0:clean (default-clean) @ camel-example-spring-boot-routes-configuration â
[INFO] Deleting /private/tmp/camel-spring-boot-examples/routes-configuration/target
[INFO]
[INFO] â enforcer:3.3.0:enforce (enforce-maven-version) @ camel-example-spring-boot-routes-configuration â
[INFO]
[INFO] â enforcer:3.3.0:enforce (enforce-java-version) @ camel-example-spring-boot-routes-configuration â
[INFO]
[INFO] â resources:3.3.1:resources (default-resources) @ camel-example-spring-boot-routes-configuration â
[INFO] Copying 6 resources from src/main/resources to target/classes
[INFO]
[INFO] â camel-package:4.3.0:prepare-example (default) @ camel-example-spring-boot-routes-configuration â
[WARNING]Â  Parameter 'filter' (user property 'filter') is read-only, must not be used in configuration
[INFO]
[INFO] â compiler:3.11.0:compile (default-compile) @ camel-example-spring-boot-routes-configuration â
[INFO] Changes detected - recompiling the module! :source
[INFO] Compiling 3 source files with javac [debug target 17] to target/classes
[WARNING] system modules path not set in conjunction with -source 17
[INFO]
[INFO] â resources:3.3.1:testResources (default-testResources) @ camel-example-spring-boot-routes-configuration â
[INFO] skip non existing resourceDirectory /private/tmp/camel-spring-boot-examples/routes-configuration/src/test/resources
[INFO]
[INFO] â compiler:3.11.0:testCompile (default-testCompile) @ camel-example-spring-boot-routes-configuration â
[INFO] Changes detected - recompiling the module! :dependency
[INFO] Compiling 1 source file with javac [debug target 17] to target/test-classes
[WARNING] system modules path not set in conjunction with -source 17
[INFO]
[INFO] â surefire:3.1.2:test (default-test) @ camel-example-spring-boot-routes-configuration â
[INFO] Using auto detected provider org.apache.maven.surefire.junitplatform.JUnitPlatformProvider
[INFO]
[INFO] -------------------------------------------------------
[INFO]Â  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running sample.camel.MyCamelApplicationJUnit5Test
08:35:11.142 [main] INFO org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener â CamelSpringBootExecutionListener preparing: class sample.camel.MyCamelApplicationJUnit5Test
08:35:11.149 [main] INFO org.apache.camel.test.spring.junit5.CamelAnnotationsHandler â Enabling Camel JMX as camel-debug has been found in the classpath.
Â 
Â  .Â  Â ____Â  Â  Â  Â  Â  _Â  Â  Â  Â  Â  Â  __ _ _
Â / / __' __ _ ()_ __Â  __ _ \ \ \ \
( ( )___ | '_ | '| | ' \/ _` | \ \ \ \
Â /Â  __)| |)| | | | | || (_| |Â  ) ) ) )
Â  'Â  |___| .|| ||| |_, | / / / /
Â =========||==============|_/=////
Â :: Spring Boot ::Â  Â  Â  Â  Â  Â  Â  Â  (v3.2.0)
Â 
2023-12-15T08:35:11.438-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] s.camel.MyCamelApplicationJUnit5TestÂ  Â  Â : Starting MyCamelApplicationJUnit5Test using Java 21 with PID 91663 (started by tcunning in /private/tmp/camel-spring-boot-examples/routes-configuration)
2023-12-15T08:35:11.439-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] s.camel.MyCamelApplicationJUnit5TestÂ  Â  Â : No active profile set, falling back to 1 default profile: ""default""
2023-12-15T08:35:12.245-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.camel.util.concurrent.ThreadTypeÂ  Â  Â : The type of thread detected is PLATFORM
2023-12-15T08:35:12.739-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] s.camel.MyCamelApplicationJUnit5TestÂ  Â  Â : Started MyCamelApplicationJUnit5Test in 1.566 seconds (process running for 2.411)
2023-12-15T08:35:12.744-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Setting shutdown timeout to [10 SECONDS] on CamelContext with name [camelContext].
2023-12-15T08:35:12.753-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener before: class sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
2023-12-15T08:35:12.754-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : Initialized CamelSpringBootExecutionListener now ready to start CamelContext
2023-12-15T08:35:12.754-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Starting CamelContext with name [camelContext].
2023-12-15T08:35:12.783-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.impl.engine.AbstractCamelContextÂ  Â : Detected: camel-debug JAR (Enabling Camel Debugging)
2023-12-15T08:35:12.982-05:00Â  WARN 91663 â [Â  Â  Â  Â  Â  Â main] o.s.test.context.TestContextManagerÂ  Â  Â  : Caught exception while invoking 'beforeTestMethod' callback on TestExecutionListener [org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener] for test method [public void sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages() throws java.lang.Exception] and test instance [sample.camel.MyCamelApplicationJUnit5Test@7f4a1cac]
Â 
org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:76) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:724) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:590) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2364) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.service.BaseService.init(BaseService.java:78) ~[camel-api-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2000) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.service.BaseService.start(BaseService.java:105) ~[camel-api-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2019) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:119) ~[camel-spring-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.lambda$handleCamelContextStartup$1(CamelAnnotationsHandler.java:403) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:108) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.handleCamelContextStartup(CamelAnnotationsHandler.java:400) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener.beforeTestMethod(CamelSpringBootExecutionListener.java:105) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:299) ~[spring-test-6.1.1.jar:6.1.1]
at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240) ~[spring-test-6.1.1.jar:6.1.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:120) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.1.2.jar:3.1.2]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:845) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:745) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:45) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:870) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:610) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:213) ~[camel-core-reifier-4.3.0.jar:4.3.0]
... 72 common frames omitted
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:302) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:191) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:811) ~[camel-base-engine-4.3.0.jar:4.3.0]
... 79 common frames omitted
Â 
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
WARNING: A Java agent has been loaded dynamically (/Users/tcunning/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.10/byte-buddy-agent-1.14.10.jar)
WARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning
WARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information
WARNING: Dynamic loading of agents will be disallowed by default in a future release
2023-12-15T08:35:13.750-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener after: class sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.953 s <<< FAILURE! â in sample.camel.MyCamelApplicationJUnit5Test
[ERROR] sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages â Time elapsed: 1.009 s <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217)
at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:76)
at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49)
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:724)
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:590)
at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2364)
at org.apache.camel.support.service.BaseService.init(BaseService.java:78)
at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2000)
at org.apache.camel.support.service.BaseService.start(BaseService.java:105)
at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2019)
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208)
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:119)
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.lambda$handleCamelContextStartup$1(CamelAnnotationsHandler.java:403)
at org.apache.camel.test.spring.junit5.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:108)
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.handleCamelContextStartup(CamelAnnotationsHandler.java:400)
at org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener.beforeTestMethod(CamelSpringBootExecutionListener.java:105)
at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:299)
at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:845)
at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:745)
at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123)
at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:45)
at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37)
at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:870)
at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:610)
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:213)
... 19 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:302)
at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:191)
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:811)
... 26 more
Â 
[INFO] Running sample.camel.MyCamelApplicationJUnit5Test
2023-12-15T08:35:13.785-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener preparing: class sample.camel.MyCamelApplicationJUnit5Test
2023-12-15T08:35:13.786-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Enabling Camel JMX as camel-debug has been found in the classpath.
2023-12-15T08:35:13.786-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Setting shutdown timeout to [10 SECONDS] on CamelContext with name [camelContext].
2023-12-15T08:35:13.787-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener before: class sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
2023-12-15T08:35:13.788-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : Initialized CamelSpringBootExecutionListener now ready to start CamelContext
2023-12-15T08:35:13.788-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Starting CamelContext with name [camelContext].
2023-12-15T08:35:13.794-05:00Â  WARN 91663 â [Â  Â  Â  Â  Â  Â main] o.s.test.context.TestContextManagerÂ  Â  Â  : Caught exception while invoking 'beforeTestMethod' callback on TestExecutionListener [org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener] for test method [public void sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages() throws java.lang.Exception] and test instance [sample.camel.MyCamelApplicationJUnit5Test@6b751cb1]
Â 
org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:76) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:724) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:590) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2364) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.service.BaseService.init(BaseService.java:78) ~[camel-api-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2000) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.service.BaseService.start(BaseService.java:105) ~[camel-api-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2019) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:119) ~[camel-spring-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.lambda$handleCamelContextStartup$1(CamelAnnotationsHandler.java:403) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:108) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.handleCamelContextStartup(CamelAnnotationsHandler.java:400) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener.beforeTestMethod(CamelSpringBootExecutionListener.java:105) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:299) ~[spring-test-6.1.1.jar:6.1.1]
at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240) ~[spring-test-6.1.1.jar:6.1.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:162) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:120) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.1.2.jar:3.1.2]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:845) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:745) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:45) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:870) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:610) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:213) ~[camel-core-reifier-4.3.0.jar:4.3.0]
... 71 common frames omitted
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:302) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:191) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:811) ~[camel-base-engine-4.3.0.jar:4.3.0]
... 78 common frames omitted
Â 
2023-12-15T08:35:13.796-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener after: class sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.021 s <<< FAILURE! â in sample.camel.MyCamelApplicationJUnit5Test
[ERROR] sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages â Time elapsed: 0.011 s <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217)
at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:76)
at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49)
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:724)
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:590)
at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2364)
at org.apache.camel.support.service.BaseService.init(BaseService.java:78)
at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2000)
at org.apache.camel.support.service.BaseService.start(BaseService.java:105)
at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2019)
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208)
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:119)
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.lambda$handleCamelContextStartup$1(CamelAnnotationsHandler.java:403)
at org.apache.camel.test.spring.junit5.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:108)
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.handleCamelContextStartup(CamelAnnotationsHandler.java:400)
at org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener.beforeTestMethod(CamelSpringBootExecutionListener.java:105)
at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:299)
at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:845)
at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:745)
at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123)
at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:45)
at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37)
at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:870)
at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:610)
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:213)
... 19 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:302)
at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:191)
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:811)
... 26 more
Â 
[INFO] Running sample.camel.MyCamelApplicationJUnit5Test
2023-12-15T08:35:13.813-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener preparing: class sample.camel.MyCamelApplicationJUnit5Test
2023-12-15T08:35:13.813-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Enabling Camel JMX as camel-debug has been found in the classpath.
2023-12-15T08:35:13.813-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Setting shutdown timeout to [10 SECONDS] on CamelContext with name [camelContext].
2023-12-15T08:35:13.814-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener before: class sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
2023-12-15T08:35:13.815-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : Initialized CamelSpringBootExecutionListener now ready to start CamelContext
2023-12-15T08:35:13.815-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] o.a.c.t.s.j.CamelAnnotationsHandlerÂ  Â  Â  : Starting CamelContext with name [camelContext].
2023-12-15T08:35:13.820-05:00Â  WARN 91663 â [Â  Â  Â  Â  Â  Â main] o.s.test.context.TestContextManagerÂ  Â  Â  : Caught exception while invoking 'beforeTestMethod' callback on TestExecutionListener [org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener] for test method [public void sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages() throws java.lang.Exception] and test instance [sample.camel.MyCamelApplicationJUnit5Test@ce2eaa7]
Â 
org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:76) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:724) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:590) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2364) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.service.BaseService.init(BaseService.java:78) ~[camel-api-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2000) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.service.BaseService.start(BaseService.java:105) ~[camel-api-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2019) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208) ~[camel-core-engine-4.3.0.jar:4.3.0]
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:119) ~[camel-spring-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.lambda$handleCamelContextStartup$1(CamelAnnotationsHandler.java:403) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:108) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.handleCamelContextStartup(CamelAnnotationsHandler.java:400) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener.beforeTestMethod(CamelSpringBootExecutionListener.java:105) ~[camel-test-spring-junit5-4.3.0.jar:4.3.0]
at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:299) ~[spring-test-6.1.1.jar:6.1.1]
at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240) ~[spring-test-6.1.1.jar:6.1.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeEachCallbacks$2(TestMethodTestDescriptor.java:167) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeBeforeMethodsOrCallbacksUntilExceptionOccurs$6(TestMethodTestDescriptor.java:203) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeMethodsOrCallbacksUntilExceptionOccurs(TestMethodTestDescriptor.java:203) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeBeforeEachCallbacks(TestMethodTestDescriptor.java:166) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69) ~[junit-jupiter-engine-5.10.1.jar:5.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596) ~[na:na]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54) ~[junit-platform-engine-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47) ~[junit-platform-launcher-1.10.1.jar:1.10.1]
at org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:162) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:120) ~[surefire-junit-platform-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507) ~[surefire-booter-3.1.2.jar:3.1.2]
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495) ~[surefire-booter-3.1.2.jar:3.1.2]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:845) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:745) ~[camel-base-engine-4.3.0.jar:4.3.0]
at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:45) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:870) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:610) ~[camel-core-reifier-4.3.0.jar:4.3.0]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:213) ~[camel-core-reifier-4.3.0.jar:4.3.0]
... 71 common frames omitted
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:302) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:191) ~[camel-support-4.3.0.jar:4.3.0]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:811) ~[camel-base-engine-4.3.0.jar:4.3.0]
... 78 common frames omitted
Â 
2023-12-15T08:35:13.822-05:00Â  INFO 91663 â [Â  Â  Â  Â  Â  Â main] c.t.s.j.CamelSpringBootExecutionListener : CamelSpringBootExecutionListener after: class sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.016 s <<< FAILURE! â in sample.camel.MyCamelApplicationJUnit5Test
[ERROR] sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages â Time elapsed: 0.009 s <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217)
at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:76)
at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49)
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:724)
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:590)
at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2364)
at org.apache.camel.support.service.BaseService.init(BaseService.java:78)
at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2000)
at org.apache.camel.support.service.BaseService.start(BaseService.java:105)
at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2019)
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208)
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:119)
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.lambda$handleCamelContextStartup$1(CamelAnnotationsHandler.java:403)
at org.apache.camel.test.spring.junit5.CamelSpringTestHelper.doToSpringCamelContexts(CamelSpringTestHelper.java:108)
at org.apache.camel.test.spring.junit5.CamelAnnotationsHandler.handleCamelContextStartup(CamelAnnotationsHandler.java:400)
at org.apache.camel.test.spring.junit5.CamelSpringBootExecutionListener.beforeTestMethod(CamelSpringBootExecutionListener.java:105)
at org.springframework.test.context.TestContextManager.beforeTestMethod(TestContextManager.java:299)
at org.springframework.test.context.junit.jupiter.SpringExtension.beforeEach(SpringExtension.java:240)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:845)
at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:745)
at org.apache.camel.support.CamelContextHelper.resolveEndpoint(CamelContextHelper.java:123)
at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:45)
at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37)
at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:870)
at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:610)
at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:213)
... 19 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:302)
at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:191)
at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:811)
... 26 more
Â 
[INFO]
[INFO] Results:
[INFO]
[ERROR] Errors:
[ERROR] sample.camel.MyCamelApplicationJUnit5Test.shouldProduceMessages
[ERROR]Â  Â Run 1: MyCamelApplicationJUnit5Test.shouldProduceMessages Â» FailedToCreateRoute Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
[ERROR]Â  Â Run 2: MyCamelApplicationJUnit5Test.shouldProduceMessages Â» FailedToCreateRoute Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
[ERROR]Â  Â Run 3: MyCamelApplicationJUnit5Test.shouldProduceMessages Â» FailedToCreateRoute Failed to create route route3 at: >>> To[log:yaml?showBodyType=false&showEchangePattern=false] <<< in route: Route(route3)[From[timer:yaml?period=3s] -> [OnException[[ja... because of Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: Failed to resolve endpoint: log://yaml?showBodyType=false&showEchangePattern=false due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[\{showEchangePattern=false}]
[INFO]
[INFO]
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0",davsclaus:1702618960:2023-12-15T13:42:40.044+0000:1702618960:2023-12-15T13:42:40.044+0000:It was a typo in the example. I have fixed that
0,CAMEL-20239,Bug,Major,"4.0.3, 4.2.0, 4.3.0",4.4.0,"
None
",Open,Unresolved,4.4.0,Unassigned,Andrea Cosentino,0,1,2023-12-15 10:55:52+00:00,2023-12-20 12:38:28+00:00,No Desc,
0,CAMEL-20238,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,John Poth,John Poth,0,1,2023-12-15 09:26:16+00:00,2023-12-15 11:36:48+00:00,"I think it would be cool to add spring-boot-starter-jdbc as a dependency to our camel-spring-jdbc-starter. 
This would bring in the Hikari connection pool and would create a pooled datasource by default instead of having the need to set 'spring.datasource.type' correctly and not having connection pooling out of the box by default.


I think this is more inline with the opinionated SpringBoot way and there are probably other camel starters that could benefit from this logic.",
0,CAMEL-20237,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-12-15 05:44:32+00:00,2023-12-20 19:48:27+00:00,"When running Camel standalone we need a way to configure http auth for secured, and this means looking at how to do this via camel-platform-http-vertx, and make it configurable more easily.","davsclaus:1702591428:2023-12-15T06:03:48.518+0000:1702627787:2023-12-15T16:09:47.787+0000:https://vertx.io/docs/vertx-web/java/#_authentication_authorization
https://vertx.io/docs/vertx-web/java/#_oauth2authhandler_handler
https://vertx.io/docs/vertx-web/java/#_hsts_handler
https://vertx.io/blog/easy-sso-for-vert-x-with-keycloak/"
0,CAMEL-20236,Improvement,Minor,4.2.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Unassigned,Jeremy Ross,0,1,2023-12-14 21:05:08+00:00,2023-12-22 18:10:04+00:00,"There are some missing properties of the Job class that can be addeded. e.g., assignmentRuleId, errorMessage.Â 


Â 


https://developer.salesforce.com/docs/atlas.en-us.api_asynch.meta/api_asynch/get_job_info.htm",
0,CAMEL-20235,Task,Major,4.3.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-14 14:22:49+00:00,2023-12-14 16:10:59+00:00,The behavior of using a NoopCommitManager by default is different if the configuration is done via component instead of via endpoint. In the component-based configuration it uses a SyncCommitManager instead of a NoopCommitManager as written in the documentation.,orpiske:1702541459:2023-12-14T16:10:59.052+0000:1702541459:2023-12-14T16:10:59.052+0000:Fixed with the linked PR.
0,CAMEL-20234,Task,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-13 18:31:28+00:00,2024-01-04 10:16:43+00:00,"We have lots of constructors in AbstractExchange, DefaultExchange and the DefaultPooledExchange. Investigate potential cleanups and simplify the code.",orpiske:1704334603:2024-01-04T10:16:43.258+0000:1704334603:2024-01-04T10:16:43.258+0000:Fixed with the linked PR. 
0,CAMEL-20233,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-13 13:09:37+00:00,2023-12-13 13:28:32+00:00,No Desc,
0,CAMEL-20232,Bug,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-13 11:34:15+00:00,2023-12-13 13:19:33+00:00,"See CAMEL-16823


We may need to do something similar in Enrich and PollEnrich EIPs",
0,CAMEL-20231,Improvement,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Federico Mariani,Federico Mariani,0,2,2023-12-13 10:39:55+00:00,2024-01-10 08:41:12+00:00,SaltGenerator and IvGenerator should be configurable on JasyptPropertiesParser,davsclaus:1702445374:2023-12-13T13:29:34.271+0000:1702445374:2023-12-13T13:29:34.271+0000:Not sure if SB -starter has a way of configuring jasypt then this may needed to be added there too
0,CAMEL-20230,Improvement,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-13 10:09:20+00:00,2023-12-13 12:18:40+00:00,"See CAMEL-14891


If you do a poll enrich with the same component then we should init this like we do in toD.",
0,CAMEL-20229,New Feature,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-13 08:38:56+00:00,2023-12-13 09:07:18+00:00,No Desc,
0,CAMEL-20228,Improvement,Major,4.2.0,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Claudio Miranda,0,2,2023-12-13 00:37:32+00:00,2023-12-13 12:18:46+00:00,"Given an integration that uses a component in pollEnrich, the camel-jbang command ""camel dependency list"" doesn't recognize the ""aws2-s3"" component


Â 




import java.lang.Exception;
import java.lang.Override;
import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;

public class RouteDeps extends RouteBuilder {Â  Â  @Override
Â  Â  public void configure() throws Exception {
Â  Â  Â  Â  String params = ""random_string"";
Â  Â  Â  Â  from(""telegram:"" + params)
Â  Â  Â  Â  Â  Â  .setHeader(""test"",simple(""${in.header.fileName}""))
Â  Â  Â  Â  Â  Â  .pollEnrich()
Â  Â  Â  Â  Â  Â  Â  Â  .simple(""aws2-s3://data?fileName=${in.header.fileName}&deleteAfterRead=false"")
Â  Â  Â  Â  Â  Â  Â  Â  .timeout(3000)
Â  Â  Â  Â  Â  Â  .end();
Â  Â  }
}","davsclaus:1702432243:2023-12-13T09:50:43.558+0000:1702432243:2023-12-13T09:50:43.558+0000:Thanks its because of the simple that are evaluated dynamic, so we need to find a special way in jbang
davsclaus:1702437165:2023-12-13T11:12:45.923+0000:1702437165:2023-12-13T11:12:45.923+0000:$ camel dependency list RouteDeps.java
org.apache.camel:camel-main:4.3.0-SNAPSHOT
org.apache.camel:camel-aws2-s3:4.3.0-SNAPSHOT
org.apache.camel:camel-debug:4.3.0-SNAPSHOT
org.apache.camel:camel-health:4.3.0-SNAPSHOT
org.apache.camel:camel-rest:4.3.0-SNAPSHOT
org.apache.camel:camel-telegram:4.3.0-SNAPSHOT"
0,CAMEL-20227,Bug,Major,3.21.2,,"
None
",Open,Unresolved,None,Unassigned,Preetam Panchaksharaiah,0,1,2023-12-12 16:45:20+00:00,2023-12-13 12:00:30+00:00,"Kafka offset advances when using Pausable kafka consumer and messages are lost when resumed.Â 


Attached is the sample code


Also tried withÂ 


KafkaManualCommit manual = exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);
Â  Â  Â  Â  Â  Â  manual.commit();","preetam.ap:1702440030:2023-12-13T12:00:30.698+0000:1702440030:2023-12-13T12:00:30.698+0000:Reviewing the latest docs, probably this is more of suspend and resume functionality. Since the Â camel-vertx-kafka is removed from latest versionsÂ "
0,CAMEL-20226,Bug,Minor,3.14.10,,"
None
",Open,Unresolved,None,Unassigned,SilkyAlex,0,1,2023-12-12 13:45:21+00:00,2023-12-12 13:45:21+00:00,"my route like that:




from(""direct:start"").to(""myroute:test2?secretKey=RAW(test!@#$%-+./test)"");



and when camel callback createEndpoint function, I received uri param is:




myroute://test2?secretKey=RAW(test!@%23$%25-+./test)



found that # and % has been url encoded
and it will pass to new Endpoint
when I invoke DefaultConsumerTemplate.receive(endpoint)
the code will get the wrong secretKey by calling 




endpoint.getEndpointUri()



Â 
I try it on 4.2.0, this problem can also be reproduced.",
0,CAMEL-20225,Task,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-12-12 12:55:32+00:00,2024-01-19 18:01:13+00:00,"We have many places in the code where do perform logic that mixes operations between monotonic and real time clocks. 


For instance, we have instances with code like this: 




long elapsed = System.currentTimeMillis() - exchange.getCreated();




The problem with this code is that it can provide incorrect data in some circumstances, because it computes the duration from a real time clock (which, for instance, can go back in time in some cases). 


We need to rework this to create interfaces for computing both duration as well as pointing the specific point in time in which it was created.",orpiske:1704329180:2024-01-04T08:46:20.678+0000:1704329180:2024-01-04T08:46:20.678+0000:Fixed with the linked PRs.
0,CAMEL-20224,Task,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-12-12 12:35:14+00:00,2023-12-13 06:05:18+00:00,"Quoting rhuanrocha on CAMEL-19734: 


""... The constructor StopWatch(long timeMillis) can induce the developer to use it with the System.currentTimeMillis [Ex.: StopWatch(System.currentTimeMillis())] and generate a side effect. I think the better approach is to redefine the StopWatch to work just with nanoTime, and remove the timeMillis ...""",
0,CAMEL-20223,New Feature,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-12 11:07:14+00:00,2023-12-12 12:35:47+00:00,See CAMEL-20220,
0,CAMEL-20192,New Feature,Major,4.2.0,4.3.0,"
None
",Closed,Invalid,4.3.0,Unassigned,Lars Heinemann,0,2,2023-12-05 23:30:52+00:00,2023-12-06 06:50:51+00:00,Provide source and sink for AMQPS protocol (see https://qpid.apache.org/releases/qpid-jms-0.61.0/docs/index.html#ssl-transport-configuration-options),"davsclaus:1701811758:2023-12-06T05:29:18.268+0000:1701811758:2023-12-06T05:29:18.268+0000:You should report this at
https://github.com/apache/camel-kamelets
lhein:1701816636:2023-12-06T06:50:36.499+0000:1701816636:2023-12-06T06:50:36.499+0000:Thank you, Claus. Will do that."
0,CAMEL-20191,Improvement,Minor,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,1,1,2023-12-05 13:18:15+00:00,2023-12-07 20:01:52+00:00,"In camel-catalog - enableCORS
In CamelYamlDSL -> enableCors


jaxb properties
In camel-catalog - ignoreJAXBElement and mustBeJAXBElement
In CamelYamlDSL -> ignoreJaxbElement and mustBeJaxbElement


crypto properties
In camel-catalog - shouldAppendHMAC
In CamelYamlDSL -> shouldAppendHmac","davsclaus:1701944963:2023-12-07T18:29:23.688+0000:1701944963:2023-12-07T18:29:23.688+0000:We need to change the generated model classes to use camelCase

@YamlProperty(name = ""should-append-hmac"", type = ""boolean"")"
0,CAMEL-20190,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-12-05 12:14:17+00:00,2023-12-06 09:38:59+00:00,No Desc,
0,CAMEL-20189,Improvement,Minor,4.0.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Guillaume N.,0,2,2023-12-05 10:03:51+00:00,2023-12-07 11:14:01+00:00,"Hi,


(copied from Zulip: https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/HealthCheck.20behavior.20for.20a.20large.20file.20SFTP.20consumer)


I'm using a SFTP component to process large files. The application uses Quarkus and is natively built and deployed on OpenShift. And I'm using the health checks for readiness and liveness probes.


I'm facing an edge case regarding the status:



If there is a file on the remote SFTP when the application starts, the status will remain DOWN until after the large file has been processed.
If there is no file, the status is immediately UP.



Basically, the status is reporting two different states:



If there is a file: the UP status means the first polling listed the available files and completed an exchange (the exchange can fail)
If there is no file: the UP status means the first polling listed the available files (and there was none).



Consequently, there is a lot of variability in the status availability, hence the OpenShift probe configuration must be set to the worst case to avoid killing the pod if there's a file during startup.


Turning off the health checks for consumers is a dirty workaround.


I would like to be able to report a UP status after the first polling was able to list the available files and before it starts an exchange.


Thanks","davsclaus:1701840818:2023-12-06T13:33:38.047+0000:1701840818:2023-12-06T13:33:38.047+0000:We pushed 4.3 for next week, so lets see if we can take a look at this as FTP is still used a lot today ;)
davsclaus:1701913669:2023-12-07T09:47:49.547+0000:1701914683:2023-12-07T10:04:43.804+0000:Okay its not only ftp that can benefit from this, but other scheduled consumer / scheduled batch consumers

- aws
- azure
- jpa
- mail
- ironmq
- ftp
- minio
- sql
- mybatis
- jooq
- splunk
- slack
- google
- api-consumer
- couchbase"
0,CAMEL-20188,Task,Minor,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-05 08:54:10+00:00,2023-12-05 09:49:08+00:00,Only a few EIPs should have them. We have this correct in the model json files. But the yaml schema is wrong.,"davsclaus:1701739591:2023-12-05T09:26:31.847+0000:1701739591:2023-12-05T09:26:31.847+0000:        // we want to skip inheritErrorHandler which is only applicable for
        // the load-balancer
        boolean loadBalancer = ""LoadBalanceDefinition"".equals(originalClassType.getSimpleName());
        if (!loadBalancer && ""inheritErrorHandler"".equals(name)) {
            return true;
        }"
0,CAMEL-20187,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Nicolas Filotto,Nicolas Filotto,0,2,2023-12-04 18:26:16+00:00,2023-12-07 15:55:36+00:00,The idea is to provide basic support for virtual threads.,"nfilotto:1701834214:2023-12-06T11:43:34.150+0000:1701834214:2023-12-06T11:43:34.150+0000:The corresponding PR https://github.com/apache/camel/pull/12292. Let's wait for the result of a Jenkins build before merging it

Note that It doesn't cover the replacement of synchronized blocks with reentrant locks nor the review of all thread locals.

davsclaus:1701839728:2023-12-06T13:15:28.106+0000:1701839728:2023-12-06T13:15:28.106+0000:Would you create another JIRA with the thoughts you have for outstanding work needed for more complete virtual thread support.

nfilotto:1701843135:2023-12-06T14:12:15.831+0000:1701843135:2023-12-06T14:12:15.831+0000:Here it is https://issues.apache.org/jira/browse/CAMEL-20199"
0,CAMEL-20186,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-04 18:04:27+00:00,2023-12-05 08:49:15+00:00,"So you can do


camel init foo.java
camel dependency update foo.java


Then it will update the java source file. It can maybe also work for groovy and kotlin source files.",
0,CAMEL-20185,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Matthias Bechtold,0,1,2023-12-04 18:01:05+00:00,2023-12-05 12:09:34+00:00,"We are building an end to end test with Camel and want to read the .jobTemplate.spec field from a k8s CronJob.
Since there is (apparently) no CronJob component like there isÂ ""kubernetes-job"", we ended up building it the hard way using fabric8's k8s client.


What we have done so far, could be greatly simplified by having a ""kubernetes-cronjob"" Camel component, with an operation ""getCronJob"", which would retrieve the CronJob manifest from k8s and put it into a message header or body.",
0,CAMEL-20184,Bug,Minor,3.14.10,,"
None
",Open,Unresolved,None,Unassigned,Paul McCulloch,0,2,2023-12-04 14:21:48+00:00,2023-12-04 18:58:08+00:00,"The call to init() was added in 3.1 with the comment ""OsgiDefaultCamelContext should init like camel-blueprint does"" (https://github.com/apache/camel/commit/a1c4b82a31108cd23409d0ee6ca4edc5b809b291)


At that time that was the case. However in 3.2 the Blueprint context was changed to use build() (https://github.com/apache/camel-karaf/commit/bb1f5042042fbb3e122cb533eddbc3207c3d8efe)


No equaivalent change was made to OsgiDefaultCamelContext.


The symptoms are that routes dont't get added to the context in some circumstances. In my case I was trying to use a local copy of https://github.com/apache/camel/blob/camel-2.x/components/camel-scr/src/main/java/org/apache/camel/scr/AbstractCamelRunner.java too migrate a 2.x project to 3.x.Â 


I can probably create a simple test case to recreate if required.",davsclaus:1701687488:2023-12-04T18:58:08.645+0000:1701687488:2023-12-04T18:58:08.645+0000:You are welcome to send a PR against camel-3.x branch for review
0,CAMEL-20183,Improvement,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-12-04 10:00:27+00:00,2023-12-05 13:42:53+00:00,"Body      (ArrayList) (size: 5 bytes: 224)
 [[Jack Dalton,  115,  mad at Averell], [Joe Dalton,  105,  calming Joe], [William Dalton,  105,  keeping Joe from killing Averell], [Averell Dalton,  80,
 playing with Rantanplan], [Lucky Luke,  120,  capturing the Daltons]]


There are 5 elements, and they should be separated so its prettier",
0,CAMEL-20182,Improvement,Minor,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-04 08:35:14+00:00,2023-12-04 09:10:37+00:00,"In this example
https://github.com/apache/camel-kamelets-examples/blob/main/jbang/xslt-transform/banks.camel.yaml#L15


You may want to paste the full url from a web browser
httpUri: https://random-data-api.com/api/v2/banks?response_type=xml


But that does not work and you need to remove https://
httpUri: random-data-api.com/api/v2/banks?response_type=xml",
0,CAMEL-20181,Improvement,Major,4.2.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Zheng Feng,Zheng Feng,0,1,2023-12-04 05:44:02+00:00,2023-12-06 08:35:10+00:00,"After resolving CAMEL-18963, camel-openapi-java should support both OpenAPI 3.0 and 3.1, but currently our tests look like only against 3.0. Then it need to check for 3.0 vs 3.1 in RestOpenApiSupport mthods renderResourceListing() and getJsonFromOpenAPI()",
0,CAMEL-20180,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-03 09:05:04+00:00,2023-12-03 11:11:38+00:00,"Some of the stats are in human format as ""3m17s"" (eg using ago) but we should have the value as raw numeric. And then in jbang do the translation to ago syntax via TimeUtils.",
0,CAMEL-20179,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-03 08:56:22+00:00,2023-12-03 10:01:40+00:00,"This makes it easier to know for how long camel, route, processor has been idle",
0,CAMEL-20178,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-02 17:54:11+00:00,2023-12-04 12:06:46+00:00,"See CAMEL-20153


Currently languages is only supported. But there are some components like xslt, velocity, and dataformats like json that would be good to support also.","davsclaus:1701593170:2023-12-03T16:46:10.947+0000:1701655010:2023-12-04T09:56:50.465+0000:TODO: components *DONE* (you cannot provide query parameters and its only intended for components that does message transformation)
TODO: dataformats *DONE*
davsclaus:1701655109:2023-12-04T09:58:29.853+0000:1701662803:2023-12-04T12:06:43.001+0000:TODO: allow to specify options for component,dataformats,languages *DONE*"
0,CAMEL-20177,Bug,Minor,4.0.3,,"

help-wanted

",Resolved,Cannot Reproduce,None,Unassigned,JJ,0,2,2023-12-02 17:02:11+00:00,2023-12-24 15:04:54+00:00,"I have a simple timer route which collects data from a http request. However after upgrading to camel-4.0.3 this no longer works, no body is fetched and the message is sent to the DLQ. Using camel-3.21.1 it works as expected with no errors and the messages body appears on the correct topic for consumption.




<route id=""solar_pull"">
Â  <from uri=""timer:nationalSolar?fixedRate=true&period=300000"" />}}
Â  <to uri=""https://api.solar.sheffield.ac.uk/pvlive/api/v4/pes/0?httpClient.cookieSpec=ignoreCookies"" />}}
Â  <to uri=""localAMQ:topic:Solar""/>}}
</route>




It simply fetches some json data as shown below;




{""data"":[[0,""2023-11-27T23:00:00Z"",0.0]],""meta"":[""pes_id"",""datetime_gmt"",""generation_mw""]}



With Camel 4.0.3 the following strange error is logged in full debug mode;
java.lang.IllegalArgumentException: Invalid Proxy




DEBUG | >>>> https://api.solar.sheffield.ac.uk/pvlive/api/v4/pes/0?httpClient.cookieSpec=ignoreCookies Exchange[]
DEBUG | ex-0000000001 preparing request execution
DEBUG | ex-0000000001 target auth state: UNCHALLENGED
DEBUG | ex-0000000001 proxy auth state: UNCHALLENGED
DEBUG | ex-0000000001 acquiring connection with route {s}->https://api.solar.sheffield.ac.uk:443
DEBUG | ex-0000000001 acquiring endpoint (3 MINUTES)
DEBUG | ex-0000000001 endpoint lease request (3 MINUTES) [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 0 of 20; total allocated: 0 of 200]
DEBUG | ex-0000000001 endpoint leased [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 1 of 20; total allocated: 1 of 200]
DEBUG | ex-0000000001 acquired ep-0000000001
DEBUG | ex-0000000001 acquired endpoint ep-0000000001
DEBUG | ex-0000000001 opening connection {s}->https://api.solar.sheffield.ac.uk:443
DEBUG | ep-0000000001 connecting endpoint (null)
DEBUG | ep-0000000001 connecting endpoint to https://api.solar.sheffield.ac.uk:443 (3 MINUTES)
DEBUG | api.solar.sheffield.ac.uk resolving remote address
DEBUG | api.solar.sheffield.ac.uk resolved to [api.solar.sheffield.ac.uk/143.167.1.47]
DEBUG | http-outgoing-0 close connection IMMEDIATE
DEBUG | ep-0000000001 endpoint closed
DEBUG | ep-0000000001 discarding endpoint
DEBUG | ep-0000000001 releasing endpoint
DEBUG | ep-0000000001 connection is not kept alive
DEBUG | ep-0000000001 connection released [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 0 of 20; total allocated: 0 of 200]
DEBUG | Failed delivery for (MessageId: F2235F0F816E9CF-0000000000000000 on ExchangeId: F2235F0F816E9CF-0000000000000000). On delivery attempt: 0 caught: java.lang.IllegalArgumentException: Invalid Proxy
DEBUG | >>>> localAMQ://queue:DLQ-Camel Exchange[F2235F0F816E9CF-0000000000000000]



I've been through the docs but can't see anything obvious as to what's changed. I've also checked the migration doc.


Have I missed or misunderstood something or have I found a bug?
What is the correct way to migrate this route to Camel >4 ?


Appears to be broken in all versions from camel-http-4.0.0-M3.jar and above","davsclaus:1701510463:2023-12-02T17:47:43.711+0000:1701510463:2023-12-02T17:47:43.711+0000:I think there was a bug in the http client, try upgrading it or use 4.0.2 or older 4.0.x version.
jj-amq:1701512321:2023-12-02T18:18:41.152+0000:1701520812:2023-12-02T20:40:12.861+0000:Tried with (just) camel-http-4.0.2 same error and 4.0.0 as well.

For fun I also tried older httpclient-4.5.13.jar & httpcore-4.4.15.jar
davsclaus:1701651853:2023-12-04T09:04:13.812+0000:1701651853:2023-12-04T09:04:13.812+0000:There must be more error details and a stacktrace or something more. 
jj-amq:1701657768:2023-12-04T10:42:48.482+0000:1701657768:2023-12-04T10:42:48.482+0000:Sorry. let me have a look now I have a little more time today. A very quick glance just showed the same error and I'm not great with java so let me see what I can find out, and let me see if I can find a working version as well.
jj-amq:1701660040:2023-12-04T11:20:40.635+0000:1701660730:2023-12-04T11:32:10.355+0000:Have tested with camel-http all the way up to current 4.2.0 from 4.0.0 all show same error below; camel-http-3.21.2 does work. It also works in {{camel-http-4.0.0-M2.jar}} and below but {{M3}} is the one that breaks it!
{code:java}
DEBUG | >>>> https://api.solar.sheffield.ac.uk/pvlive/api/v4/pes/0?httpClient.cookieSpec=ignoreCookies Exchange[]
DEBUG | ex-0000000001 preparing request execution
DEBUG | ex-0000000001 target auth state: UNCHALLENGED
DEBUG | ex-0000000001 proxy auth state: UNCHALLENGED
DEBUG | ex-0000000001 acquiring connection with route {s}->https://api.solar.sheffield.ac.uk:443
DEBUG | ex-0000000001 acquiring endpoint (3 MINUTES)
DEBUG | ex-0000000001 endpoint lease request (3 MINUTES) [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 0 of 20; total allocated: 0 of 200]
DEBUG | ex-0000000001 endpoint leased [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 1 of 20; total allocated: 1 of 200]
DEBUG | ex-0000000001 acquired ep-0000000001
DEBUG | ex-0000000001 acquired endpoint ep-0000000001
DEBUG | ex-0000000001 opening connection {s}->https://api.solar.sheffield.ac.uk:443
DEBUG | ep-0000000001 connecting endpoint (null)
DEBUG | ep-0000000001 connecting endpoint to https://api.solar.sheffield.ac.uk:443 (3 MINUTES)
DEBUG | api.solar.sheffield.ac.uk resolving remote address
DEBUG | api.solar.sheffield.ac.uk resolved to [api.solar.sheffield.ac.uk/143.167.1.47]
DEBUG | http-outgoing-0 close connection IMMEDIATE
DEBUG | ep-0000000001 endpoint closed
DEBUG | ep-0000000001 discarding endpoint
DEBUG | ep-0000000001 releasing endpoint
DEBUG | ep-0000000001 connection is not kept alive
DEBUG | ep-0000000001 connection released [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 0 of 20; total allocated: 0 of 200]
DEBUG | Failed delivery for (MessageId: C842DF4C1E470E5-0000000000000000 on ExchangeId: C842DF4C1E470E5-0000000000000000). On delivery attempt: 0 caught: java.lang.IllegalArgumentException: Invalid Proxy
{code}
I'm running embedded log4j2 with {{rootLogger.level=DEBUG}} set so not sure if I need to enable anything else to get you some more details. This should be easy to replicate though and the url used in the example is a free to access url so you should be able to build the route yourself and try it.

Â 

Here is a working debug from 3.21.2;
{code:java}
DEBUG | >>>> https://api.solar.sheffield.ac.uk/pvlive/api/v4/pes/0?httpClient.cookieSpec=ignoreCookies Exchange[]
DEBUG | Executing http GET method: https://api.solar.sheffield.ac.uk/pvlive/api/v4/pes/0
DEBUG | CookieSpec selected: ignoreCookies
DEBUG | Auth cache not set in the context
DEBUG | Connection request: [route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 0 of 20; total allocated: 0 of 200]
DEBUG | Connection leased: [id: 0][route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 0; route allocated: 1 of 20; total allocated: 1 of 200]
DEBUG | Opening connection {s}->https://api.solar.sheffield.ac.uk:443
DEBUG | Connecting to api.solar.sheffield.ac.uk/143.167.1.47:443
DEBUG | Connecting socket to api.solar.sheffield.ac.uk/143.167.1.47:443 with timeout 0
DEBUG | Enabled protocols: [TLSv1.3, TLSv1.2]
DEBUG | Enabled cipher suites:[TLS_AES_256_GCM_SHA384, TLS_AES_128_GCM_SHA256, TLS_CHACHA20_POLY1305_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_128_GCM_SHA256, TLS_DHE_DSS_WITH_AES_128_GCM_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_RSA_WITH_AES_256_CBC_SHA256, TLS_DHE_DSS_WITH_AES_256_CBC_SHA256, TLS_DHE_RSA_WITH_AES_128_CBC_SHA256, TLS_DHE_DSS_WITH_AES_128_CBC_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA, TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_RSA_WITH_AES_256_CBC_SHA, TLS_DHE_DSS_WITH_AES_256_CBC_SHA, TLS_DHE_RSA_WITH_AES_128_CBC_SHA, TLS_DHE_DSS_WITH_AES_128_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA, TLS_ECDH_RSA_WITH_AES_256_CBC_SHA, TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA, TLS_ECDH_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA256, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_RSA_WITH_AES_256_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA, TLS_EMPTY_RENEGOTIATION_INFO_SCSV]
DEBUG | Starting handshake
DEBUG | Secure session established
DEBUG | Â negotiated protocol: TLSv1.3
DEBUG | Â negotiated cipher suite: TLS_AES_256_GCM_SHA384
DEBUG | Â peer principal: CN=www.solar.sheffield.ac.uk, O=University of Sheffield, ST=South Yorkshire, C=GB
DEBUG | Â peer alternative names: [www.solar.sheffield.ac.uk, api.solar.shef.ac.uk, api.solar.sheffield.ac.uk, api0.solar.shef.ac.uk, api0.solar.sheffield.ac.uk, staging.solar.shef.ac.uk, staging.solar.sheffield.ac.uk, www.solar.shef.ac.uk]
DEBUG | Â issuer principal: CN=GEANT OV RSA CA 4, O=GEANT Vereniging, C=NL
DEBUG | Connection established 172.16.0.2:59794<->143.167.1.47:443
DEBUG | Executing request GET /pvlive/api/v4/pes/0 HTTP/1.1
DEBUG | Target auth state: UNCHALLENGED
DEBUG | Proxy auth state: UNCHALLENGED
DEBUG | http-outgoing-0 >> GET /pvlive/api/v4/pes/0 HTTP/1.1
DEBUG | http-outgoing-0 >> firedTime: Mon Dec 04 11:21:19 GMT 2023
DEBUG | http-outgoing-0 >> Host: api.solar.sheffield.ac.uk
DEBUG | http-outgoing-0 >> Connection: Keep-Alive
DEBUG | http-outgoing-0 >> User-Agent: Apache-HttpClient/4.5.14 (Java/18.0.2)
DEBUG | http-outgoing-0 >> Accept-Encoding: gzip,deflate
DEBUG | http-outgoing-0 >> ""GET /pvlive/api/v4/pes/0 HTTP/1.1[\r][\n]""
DEBUG | http-outgoing-0 >> ""firedTime: Mon Dec 04 11:21:19 GMT 2023[\r][\n]""
DEBUG | http-outgoing-0 >> ""Host: api.solar.sheffield.ac.uk[\r][\n]""
DEBUG | http-outgoing-0 >> ""Connection: Keep-Alive[\r][\n]""
DEBUG | http-outgoing-0 >> ""User-Agent: Apache-HttpClient/4.5.14 (Java/18.0.2)[\r][\n]""
DEBUG | http-outgoing-0 >> ""Accept-Encoding: gzip,deflate[\r][\n]""
DEBUG | http-outgoing-0 >> ""[\r][\n]""
DEBUG | http-outgoing-0 << ""HTTP/1.1 200 OK[\r][\n]""
DEBUG | http-outgoing-0 << ""Server: nginx/1.22.0 (Ubuntu)[\r][\n]""
DEBUG | http-outgoing-0 << ""Date: Mon, 04 Dec 2023 11:21:19 GMT[\r][\n]""
DEBUG | http-outgoing-0 << ""Content-Type: application/json; charset=utf-8[\r][\n]""
DEBUG | http-outgoing-0 << ""Content-Length: 95[\r][\n]""
DEBUG | http-outgoing-0 << ""Connection: keep-alive[\r][\n]""
DEBUG | http-outgoing-0 << ""Permissions-Policy: browsing-topics=()[\r][\n]""
DEBUG | http-outgoing-0 << ""X-Frame-Options: SAMEORIGIN[\r][\n]""
DEBUG | http-outgoing-0 << ""X-Content-Type-Options: nosniff[\r][\n]""
DEBUG | http-outgoing-0 << ""Content-Security-Policy: default-src 'self'; connect-src 'self' region1.google-analytics.com; font-src 'self' cdnjs.cloudflare.com; form-action 'self'; frame-ancestors 'self'; frame-src 'self' www.google.com; img-src 'self' data: cdnjs.cloudflare.com region1.google-analytics.com www.googletagmanager.com 'nonce-tP9QwwlWPqrLZFn8c_dPXkar3TBZXr_t'; script-src 'self' cdnjs.cloudflare.com cdn.jsdelivr.net code.jquery.com www.google.com www.googletagmanager.com www.gstatic.com region1.google-analytics.com 'nonce-tP9QwwlWPqrLZFn8c_dPXkar3TBZXr_t'; style-src 'self' cdnjs.cloudflare.com cdn.jsdelivr.net 'nonce-tP9QwwlWPqrLZFn8c_dPXkar3TBZXr_t'[\r][\n]""
DEBUG | http-outgoing-0 << ""Strict-Transport-Security: max-age=31556926; includeSubDomains[\r][\n]""
DEBUG | http-outgoing-0 << ""Referrer-Policy: strict-origin-when-cross-origin[\r][\n]""
DEBUG | http-outgoing-0 << ""Access-Control-Allow-Origin: https://staging.solar.sheffield.ac.uk[\r][\n]""
DEBUG | http-outgoing-0 << ""Vary: Origin, Accept-Encoding, Cookie[\r][\n]""
DEBUG | http-outgoing-0 << ""X-Content-Type-Options: nosniff[\r][\n]""
DEBUG | http-outgoing-0 << ""X-XSS-Protection: 1; mode=block[\r][\n]""
DEBUG | http-outgoing-0 << ""X-Frame-Options: DENY[\r][\n]""
DEBUG | http-outgoing-0 << ""[\r][\n]""
DEBUG | http-outgoing-0 << ""{""data"":[[0,""2023-12-04T11:00:00Z"",418.008]],""meta"":[""pes_id"",""datetime_gmt"",""generation_mw""]}[\n]""
DEBUG | http-outgoing-0 << HTTP/1.1 200 OK
DEBUG | http-outgoing-0 << Server: nginx/1.22.0 (Ubuntu)
DEBUG | http-outgoing-0 << Date: Mon, 04 Dec 2023 11:21:19 GMT
DEBUG | http-outgoing-0 << Content-Type: application/json; charset=utf-8
DEBUG | http-outgoing-0 << Content-Length: 95
DEBUG | http-outgoing-0 << Connection: keep-alive
DEBUG | http-outgoing-0 << Permissions-Policy: browsing-topics=()
DEBUG | http-outgoing-0 << X-Frame-Options: SAMEORIGIN
DEBUG | http-outgoing-0 << X-Content-Type-Options: nosniff
DEBUG | http-outgoing-0 << Content-Security-Policy: default-src 'self'; connect-src 'self' region1.google-analytics.com; font-src 'self' cdnjs.cloudflare.com; form-action 'self'; frame-ancestors 'self'; frame-src 'self' www.google.com; img-src 'self' data: cdnjs.cloudflare.com region1.google-analytics.com www.googletagmanager.com 'nonce-tP9QwwlWPqrLZFn8c_dPXkar3TBZXr_t'; script-src 'self' cdnjs.cloudflare.com cdn.jsdelivr.net code.jquery.com www.google.com www.googletagmanager.com www.gstatic.com region1.google-analytics.com 'nonce-tP9QwwlWPqrLZFn8c_dPXkar3TBZXr_t'; style-src 'self' cdnjs.cloudflare.com cdn.jsdelivr.net 'nonce-tP9QwwlWPqrLZFn8c_dPXkar3TBZXr_t'
DEBUG | http-outgoing-0 << Strict-Transport-Security: max-age=31556926; includeSubDomains
DEBUG | http-outgoing-0 << Referrer-Policy: strict-origin-when-cross-origin
DEBUG | http-outgoing-0 << Access-Control-Allow-Origin: https://staging.solar.sheffield.ac.uk
DEBUG | http-outgoing-0 << Vary: Origin, Accept-Encoding, Cookie
DEBUG | http-outgoing-0 << X-Content-Type-Options: nosniff
DEBUG | http-outgoing-0 << X-XSS-Protection: 1; mode=block
DEBUG | http-outgoing-0 << X-Frame-Options: DENY
DEBUG | Connection can be kept alive indefinitely
DEBUG | Http responseCode: 200
DEBUG | Connection [id: 0][route: {s}->https://api.solar.sheffield.ac.uk:443] can be kept alive indefinitely
DEBUG | http-outgoing-0: set socket timeout to 0
DEBUG | Connection released: [id: 0][route: {s}->https://api.solar.sheffield.ac.uk:443][total available: 1; route allocated: 1 of 20; total allocated: 1 of 200]
DEBUG | StaxConverter pool size: 20
DEBUG | >>>> localAMQ://queue:Solar Exchange[ED5DF2236A1E6E3-0000000000000000] {code}
jj-amq:1701678284:2023-12-04T16:24:44.992+0000:1701678284:2023-12-04T16:24:44.992+0000:[CAMEL-18995|https://issues.apache.org/jira/browse/CAMEL-18995] is the only thing that stands out in diff
davsclaus:1701683378:2023-12-04T17:49:38.317+0000:1701683378:2023-12-04T17:49:38.317+0000:The http client has indeed been upgrade from v4 to v5. Not sure what you do that causes your problem, but in general it works fine for everyone else.
Mind that some of the TLS/SSL protocol has been removed such as LTS 1.1 as part of Camel 3 -> 4. But in general your issues is around the http client upgrade itself.

You can use some of the other http clients, like camel-vertx-http
jj-amq:1701781313:2023-12-05T21:01:53.565+0000:1701781313:2023-12-05T21:01:53.565+0000:No idea either sadly. I'm wondering if I have some weird dependency conflict somewhere. Once I get some more time in a couple of weeks I'll see if I can figure out where/what.

For the moment I'd rather not use vertx as I don't need all the additional deps that brings. For the moment I'll use M2 in test (as I've other stuff I need to get tested for production anyway)

Java and I don't really play well together which doesn't help!
davsclaus:1702787948:2023-12-17T12:39:08.371+0000:1702787948:2023-12-17T12:39:08.371+0000:Okay if you find time later about this issue then comment here again. 


davsclaus:1702788002:2023-12-17T12:40:02.145+0000:1702788002:2023-12-17T12:40:02.145+0000:Also try without httpClient.cookieSpec=ignoreCookies as the http client has a major upgrade and it may be that cookieSpec is not a known option anymore
jj-amq:1703400733:2023-12-24T14:52:13.846+0000:1703400781:2023-12-24T14:53:01.771+0000:I had tried without httpClient.cookieSpec=ignoreCookies but that was the same error.

Anyway I've had time to build a fresh test system and everything works out of the box as expected, so my problem above is caused by some odd lib conflict in my original class path. Sadly I don't have the Java skills to see where/what was causing it, but presuming everything works in test I'll just use that same set of deps in live to avoid any surprises.

Thanks for you help.
davsclaus:1703401494:2023-12-24T15:04:54.514+0000:1703401494:2023-12-24T15:04:54.514+0000:Thanks for reporting the status and happy Christmas"
0,CAMEL-20176,New Feature,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-12-02 08:14:07+00:00,2023-12-02 08:14:07+00:00,"We should have some kind of EIP that makes it easier to define custom metrics and how they are collected/aggregated. And that these metrics can then also be exposed via micrometer for external systems to collect such as via prometheus.


This requires some more thought and experiment.


Today you can do this via camel-micrometer and build a custom message with the metric to send, but an EIP makes it easier and stand out in the routes.


The data should also be able to grab details from the message, such as an purchase order, where you want to grab the total dollar amount.  Or some customer data where you collect country of customer etc.",
0,CAMEL-20175,Test,Major,None,4.3.0,"
None
",Resolved,Cannot Reproduce,4.3.0,Unassigned,Claus Ibsen,0,1,2023-12-02 06:54:37+00:00,2023-12-08 12:31:48+00:00,"https://ci-builds.apache.org/job/Camel/job/Camel%20JDK17/job/main/lastCompletedBuild/testReport/org.apache.camel.component.salesforce/PubSubApiTest/testReconnectOnErrorAfterReplayIdNonNull/


Failing after
https://ci-builds.apache.org/job/Camel/job/Camel%20JDK17/job/main/1412/",
0,CAMEL-20174,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Luigi De Masi,Luigi De Masi,0,1,2023-12-01 17:50:54+00:00,2023-12-02 17:47:57+00:00,No Desc,
0,CAMEL-20173,Bug,Major,4.2.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-12-01 11:50:00+00:00,2023-12-01 18:07:59+00:00,"https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/.E2.9C.94.20Camel.20JBang.20Dependency.20Resolver


Reproducer
https://github.com/mbechto/camel-jbang-download-bug-reproducer","davsclaus:1701421150:2023-12-01T16:59:10.237+0000:1701421150:2023-12-01T16:59:10.237+0000:Okay for download=false, we still need to have some part of maven involved. But somehow turn any remote repo off. 
davsclaus:1701424004:2023-12-01T17:46:44.031+0000:1701424004:2023-12-01T17:46:44.031+0000:Okay so jbang itself downloads some JARs to bootstrap itself so its required that these are already present (otherwise jbang will just download them).
"
0,CAMEL-20172,New Feature,Minor,4.2.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Benjamin Graf,Benjamin Graf,0,1,2023-11-30 19:15:19+00:00,2023-12-02 08:04:15+00:00,Add new feature to automatically create and upload checksum files after upload of business file.,
0,CAMEL-20171,Task,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Federico Mariani,0,1,2023-11-30 14:15:42+00:00,2023-11-30 14:15:42+00:00,"During the upgrade to jetty 12, the following code https://github.com/apache/camel/pull/12208/files#diff-729ca1c0fa2bbb1790fbbbc3076620428756a4bf74f07e59d737981d9614f501R92 was commented since out, since seems like that is not possible to remove headers from the request anymore.


We should investigate if that piece of code is really needed, and somehow restore or remove it",
0,CAMEL-20170,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-30 13:26:41+00:00,2023-11-30 13:45:55+00:00,"Reported on chat room
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/.E2.9C.94.20Camel.20JBang.20Dependency.20Resolver


Today it was a bit misleading as it may say downloading/downloaded when it was just resolved. We have a better way to track this so lets do that.",
0,CAMEL-20169,Task,Major,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Jeremy Ross,Federico Mariani,0,1,2023-11-30 11:14:37+00:00,2023-12-22 18:10:28+00:00,"During the upgrade of camel-salesforce from jetty 11 to jetty 12, the following code was commented out https://github.com/apache/camel/pull/12208/files/773c7a5af15227d706cbf25fd464118f157a63e6#diff-beb77a3a75e20588da444f7eccb0f19c39170b564609aa2172de3de3eb6da521R53 given that there is no direct replacement for ResponseNotifier.",
0,CAMEL-20168,Dependency upgrade,Major,4.3.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2023-11-30 09:53:56+00:00,2023-11-30 12:01:02+00:00,"Jaxb-impl-version was updated in commit.


However the change caused, that camel-xml-jaxb brings two versions of jaxb-core 4.0.3 & 4.0.4




Dependency convergence error for com.sun.xml.bind:jaxb-core:4.0.3 paths to dependency are:
+-org.apache.camel.quarkus:camel-quarkus-xml-jaxb:3.7.0-SNAPSHOT
  +-org.apache.camel:camel-xml-jaxb:4.3.0-SNAPSHOT
    +-com.sun.xml.bind:jaxb-core:4.0.3
and
+-org.apache.camel.quarkus:camel-quarkus-xml-jaxb:3.7.0-SNAPSHOT
  +-org.apache.camel:camel-xml-jaxb:4.3.0-SNAPSHOT
    +-com.sun.xml.bind:jaxb-impl:4.0.4
      +-com.sun.xml.bind:jaxb-core:4.0.4",
0,CAMEL-20167,Improvement,Minor,4.2.0,,"
None
",Open,Unresolved,None,Unassigned,AurÃ©lien Pupier,0,1,2023-11-29 17:11:09+00:00,2023-11-29 21:09:09+00:00,"currently the 4 CoAp component have the same description. And 3 of them have the same title. it is making it not easy to differentiate at first sight in tools providing a list of the components.


Technical: there is a single class and annotation for the 4 components (and a single syntax, how can it be working?)",
0,CAMEL-20166,New Feature,Major,None,None,"
None
",Resolved,Fixed,4.3.0,Zineb Bendhiba,Zineb Bendhiba,0,2,2023-11-29 12:58:46+00:00,2023-12-11 11:45:38+00:00,"Create an Apache Camel component for ElasticSearch with Low level client. The main reasons, I would like to have this additional component are



Lightweight: a component that is lighter than the existing Java client for ElasticSearch.
Retroactive Compatibility: Ensure backward compatibility with older versions of ElasticSearch servers, considering that APIs don't change significantly.
Versatility: Design the component to integrate seamlessly with alternative servers, specifically OpenSearch



Â 


To avoid confusion, between the one leveraging Java client and the dropped old component leveraging high level client, I propose to name it : camel-elasticsearch-rest-client","davsclaus:1702245767:2023-12-11T06:02:47.579+0000:1702247545:2023-12-11T06:32:25.338+0000:TODO: spring-boot starter for this *DONE*
davsclaus:1702266338:2023-12-11T11:45:38.859+0000:1702266338:2023-12-11T11:45:38.859+0000:We can do more work after the 4.3 release"
0,CAMEL-20165,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-29 12:08:19+00:00,2023-12-04 18:04:37+00:00,"Reported on chat room
https://camel.zulipchat.com/#narrow/stream/352237-camel-jbang/topic/How.20to.20import.20dependencies.20correctly.3F


We can look at adding support for JBang dependency style as code comments with their


// DEPS xxxx


We have something similar with the camel-k style
https://github.com/apache/camel/tree/main/dsl/camel-dsl-modeline",
0,CAMEL-20164,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-28 19:39:23+00:00,2023-11-29 15:00:50+00:00,"Consumers are the entry point in Camel and it would be good to have a dev console that can show detailed information for the consumers.


Some are special like the scheduled consumers, others are specific like kafka / jms / timer / quartz etc. 


We should also add a camel-jbang command


camel get consumer","davsclaus:1701215884:2023-11-29T07:58:04.029+0000:1701241247:2023-11-29T15:00:47.004+0000:TODO: timer consumer as managed mbean *DONE*
TODO: stats in json *DONE*
TODO: quartz *DONE*
TODO: camel-jbang command *DONE*
davsclaus:1701238914:2023-11-29T14:21:54.883+0000:1701238914:2023-11-29T14:21:54.883+0000:Will do the jbang command in a new PR later"
0,CAMEL-20163,Task,Major,None,4.3.0,"
None
",Closed,Fixed,4.3.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-11-28 12:14:32+00:00,2023-12-05 14:53:26+00:00,"There seems to be quite a few duplicated code between camel-platform-http, camel-platform-http-vertx, camel-netty-http, camel-undertow, camel-http-base, camel-http-common and others. 


We should consolidate this code.


Note that code may not be transferrable to camel-http, camel-http-base and/or camel-http-common as they are not fully transparent and may bring dependencies that can affect other modules. 


We should move truly generic HTTP code to camel-support and, possibly, work in the future to cleanup the base/common code so it could be reused among others.","davsclaus:1701754994:2023-12-05T13:43:14.138+0000:1701754994:2023-12-05T13:43:14.138+0000:Is this work complete
orpiske:1701759187:2023-12-05T14:53:07.551+0000:1701759187:2023-12-05T14:53:07.551+0000:Yeah, we can mark this one as done. Let me close it.
orpiske:1701759206:2023-12-05T14:53:26.438+0000:1701759206:2023-12-05T14:53:26.438+0000:Fixed with the linked PRs."
0,CAMEL-20162,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-28 10:47:05+00:00,2023-11-28 12:16:16+00:00,No Desc,
0,CAMEL-20161,Task,Major,None,None,"

help-wanted

",Resolved,Fixed,4.3.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-11-27 13:14:48+00:00,2023-11-27 15:26:42+00:00,"We have some code using names such as ""record"", ""Record"" and others. With newer versions of Java, some of these names are restricted and should not be used.",orpiske:1701070002:2023-11-27T15:26:42.030+0000:1701070002:2023-11-27T15:26:42.030+0000:Resolved with the linked PR.
0,CAMEL-20160,New Feature,Major,None,None,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-27 12:21:06+00:00,2023-11-28 09:01:47+00:00,No Desc,
0,CAMEL-20159,New Feature,Major,None,None,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-27 12:20:54+00:00,2023-11-29 10:00:07+00:00,Localstack supports AWS Config in its community version,
0,CAMEL-20158,Test,Major,4.3.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Jono Morris,Claus Ibsen,0,3,2023-11-27 11:29:22+00:00,2023-12-02 08:04:46+00:00,"[ERROR] Failures:
[ERROR]   ThrottlerTest.testConfigurationWithChangingHeaderExpression:95->sendMessagesWithHeaderExpression:180 expected: <true> but was: <false>
[ERROR]   ThrottlerTest.testConfigurationWithConstantExpression:74 expected: <true> but was: <false>
[ERROR]   ThrottlerTest.testConfigurationWithHeaderExpression:84->sendMessagesWithHeaderExpression:180 expected: <true> but was: <false>
[INFO]
[ERROR] Tests run: 7201, Failures: 3, Errors: 0, Skipped: 38


Also fix the tests in camel-spring-xml","orpiske:1701137564:2023-11-28T10:12:44.437+0000:1701137564:2023-11-28T10:12:44.437+0000:I disabled this tests temporarily, as they are creating a lot of noise on the CI results: https://github.com/apache/camel/pull/12229
davsclaus:1701209649:2023-11-29T06:14:09.898+0000:1701209649:2023-11-29T06:14:09.898+0000:The core tests now passes, so we need to update the spring-xml tests (they are disabled currently)
davsclaus:1701264139:2023-11-29T21:22:19.476+0000:1701264139:2023-11-29T21:22:19.476+0000:The core throttler test does not shutdown nicely and you have WARN logs about thread interrupted
jono:1701407161:2023-12-01T13:06:01.708+0000:1701407161:2023-12-01T13:06:01.708+0000:I just noticed in that last pr [https://github.com/apache/camel/pull/12273,] that in an attempt to prevent thread interruption warnings I call `awaitTermination` before calling `shutdown`, which isn't quite right.Â  Let me fix that."
0,CAMEL-20157,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-27 10:52:34+00:00,2023-11-28 10:06:43+00:00,"https://aws.amazon.com/config/


With a component related to this, we can add/create rule to ensure compliancy to specific rules on AWS Resources created.",
0,CAMEL-20156,Bug,Minor,"3.21.2, 4.0.2, 4.2.0",4.3.0,"
None
",Resolved,Fixed,4.3.0,Zheng Feng,James Netherton,0,1,2023-11-27 09:06:00+00:00,2023-11-30 11:16:40+00:00,"There is some logic in the openapi-java component to handle different array types:


https://github.com/apache/camel/blob/main/components/camel-openapi-java/src/main/java/org/apache/camel/openapi/RestOpenApiReader.java#L498-L534


If you provide a set of allowable values, then you end up in method convertAndSetItemsEnum:


https://github.com/apache/camel/blob/main/components/camel-openapi-java/src/main/java/org/apache/camel/openapi/RestOpenApiReader.java#L705


The problem is that the code attempts to invoke static method valueOf. This will only be present for types that are standard JDK types (Integer, Float, Double etc). For types like ByteArraySchema, BinarySchema etc, no such method exists hence Camel startup will fail with NoSuchMethodException.",
0,CAMEL-20155,Bug,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-26 16:02:59+00:00,2023-11-27 14:06:59+00:00,"If you use nodePrefixId with a route(s) then the ids that camel get processor uses does not take the prefix into account, and therefore the list is empty","davsclaus:1700985822:2023-11-26T16:03:42.913+0000:1701054608:2023-11-27T11:10:08.070+0000:TODO: add getNodePrefixId() method to route mbean *DONE*
davsclaus:1701060922:2023-11-27T12:55:22.147+0000:1701065216:2023-11-27T14:06:56.340+0000:TODO: camel get processor (remove nodeIdPrefix from id as its noisy) *DONE*"
0,CAMEL-20154,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-26 12:25:31+00:00,2023-11-26 13:42:02+00:00,No Desc,
0,CAMEL-20153,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-26 10:52:01+00:00,2023-12-02 17:54:18+00:00,"To make it possible to execute a message transformation using camel languages with input and see output in real time.


This can be used to assist during coding those templates for transforming data between formats such as xml, json, etc.",
0,CAMEL-20152,Bug,Major,3.21.2,"3.20.9, 3.21.3, 3.22.0, 4.0.4, 4.3.0","
None
",Resolved,Fixed,"3.20.9, 3.21.3, 3.22.0, 4.0.4, 4.3.0",Nicolas Filotto,michael elbaz,0,3,2023-11-25 22:30:36+00:00,2023-11-29 14:25:31+00:00,"I don't now if is related to jetty (maybe) but when i use camel with jetty and i upload a big file using multipart i get:




// espace r23:28:50.262 WARN [qtp1616084922-291] /email/myservice
java.lang.IllegalStateException: java.lang.OutOfMemoryError: Java heap space
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartFormInputStream.throwIfError(MultiPartFormInputStream.java:517) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartFormInputStream.getParts(MultiPartFormInputStream.java:470) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.getParts(MultiParts.java:74) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.Request.getParts(Request.java:2450) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.Request.getParts(Request.java:2420) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.apache.camel.component.jetty.MultiPartFilter.doFilter(MultiPartFilter.java:52) ~[?:?]
Â  Â  Â  Â  at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:49) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1626) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:552) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1440) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:505) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1355) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.Server.handle(Server.java:516) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:487) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:732) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:479) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:277) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:883) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1034) [!/:9.4.52.v20230823]
Â  Â  Â  Â  at java.lang.Thread.run(Thread.java:833) [?:?]
Caused by: java.lang.OutOfMemoryError: Java heap space
Â  Â  Â  Â  at java.util.Arrays.copyOf(Arrays.java:3537) ~[?:?]
Â  Â  Â  Â  at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:100) ~[?:?]
Â  Â  Â  Â  at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:130) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartFormInputStream$MultiPart.write(MultiPartFormInputStream.java:178) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartFormInputStream$Handler.content(MultiPartFormInputStream.java:741) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartParser.parseOctetContent(MultiPartParser.java:645) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartParser.parse(MultiPartParser.java:214) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartFormInputStream.parse(MultiPartFormInputStream.java:587) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.http.MultiPartFormInputStream.getParts(MultiPartFormInputStream.java:469) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.MultiParts$MultiPartsHttpParser.getParts(MultiParts.java:74) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.Request.getParts(Request.java:2450) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.Request.getParts(Request.java:2420) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.apache.camel.component.jetty.MultiPartFilter.doFilter(MultiPartFilter.java:52) ~[?:?]
Â  Â  Â  Â  at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:49) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1626) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:552) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1440) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:505) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1355) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.Server.handle(Server.java:516) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:487) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel$$Lambda$828/0x00000007c0935678.dispatch(Unknown Source) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:732) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:479) ~[!/:9.4.52.v20230823]
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:277) ~[?:?]
Â  Â  Â  Â  at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311) ~[?:?]Ã©servÃ© du code




Here the simple route:




public class InputHttpRoute extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from(http()) Â  Â  Â  Â  Â  Â  Â  Â  Â 
                .noStreamCaching()
Â  Â  Â  Â  Â  Â  Â  Â  .process(e -> {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  e.getIn(AttachmentMessage.class).getAttachments()
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .forEach((s, dataHandler) -> {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  InputStream files = null;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  files = dataHandler.getInputStream();
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  byte[] buffer = new byte[10500];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  int b;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  while ((b = files.read(buffer)) != -1) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // Convert byte to character
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  String data = new String(buffer, 0, b);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  System.err.println(data);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } catch (IOException ex) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  throw new RuntimeException(ex);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  });;
    }

    private static String http() {
        return new StringBuilder(""jetty:http://0.0.0.0:8787/myservice"")
                .append(""?httpMethodRestrict="")
                .append(""POST"")
                .toString();
    }
}// espace rÃ©servÃ© du code




Â 


The file is fully loaded in memory before i can access it this is a unwanted behavior and it will be nice if it will be possible to start processing the file during the upload in streaming fashion modeÂ 


Â 


More about this => https://camel.zulipchat.com/#narrow/stream/257295-general/topic/camel-jetty.20Large.20file.20upload.20streaming.20mode","nfilotto:1701132206:2023-11-28T08:43:26.127+0000:1701132206:2023-11-28T08:43:26.127+0000:Thanks for reporting, I confirm there is a bug, let me propose a bug fix
michael992:1701134919:2023-11-28T09:28:39.463+0000:1701134919:2023-11-28T09:28:39.463+0000:[~nfilotto] Ok perfect thanks you, also i think it will be very useful to be able to choose between
 # in memory + theshold
 # in directory + path to the directory
 ## delete the file at end or not
 # streaming processing that mean once the content available process it immediately without waiting for the whole upload (file or memory) like this => https://commons.apache.org/proper/commons-fileupload/streaming.html Â 
acosentino:1701137048:2023-11-28T10:04:08.709+0000:1701137048:2023-11-28T10:04:08.709+0000:These are new features and they couldn't be add to 3.21.x, maybe they could go on Camel 4 or Camel 3.22.0 if there is capacity and if they are not invasive.
michael992:1701148845:2023-11-28T13:20:45.484+0000:1701148845:2023-11-28T13:20:45.484+0000:Hello [~acosentino]Â  You right, but i think the 2 first point is the initial expected behavior, not a new features (maybe i'm wrong) thanksÂ 
nfilotto:1701153439:2023-11-28T14:37:19.799+0000:1701160957:2023-11-28T16:42:37.030+0000:Here is the PR [https://github.com/apache/camel/pull/12240]

After a deeper analysis, it is due to the fact that the [{{fileSizeThreshold}} is set to 0|https://github.com/apache/camel/blob/main/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java#L1153] by default to have the content stored on disk like [it is mentioned in the Jakarta Javadoc|https://github.com/jakartaee/servlet/blob/master/api/src/main/java/jakarta/servlet/MultipartConfigElement.java#L109-L110] but it is not what the Jetty code does, indeed the [Jetty code expects a value strictly higher than 0|https://github.com/jetty/jetty.project/blob/jetty-11.0.x/jetty-server/src/main/java/org/eclipse/jetty/server/MultiPartFormInputStream.java#L188].Â 
michael992:1701153873:2023-11-28T14:44:33.182+0000:1701153873:2023-11-28T14:44:33.182+0000:Look good thanks you !
nfilotto:1701154859:2023-11-28T15:00:59.844+0000:1701225317:2023-11-29T10:35:17.364+0000:[~acosentino] I don't know what you think of the fix proposal but I think that it could be backported into the 3.x branch. For 3.20 and 3.21, what I can propose as a fix is to simply set {{fileSizeThreshold}} to a different default value, high enough to limit the regressions but not too high to avoid OOME, something like 10 MB, WDYT?
acosentino:1701162329:2023-11-28T17:05:29.253+0000:1701162329:2023-11-28T17:05:29.253+0000:Sounds good to me
acosentino:1701162337:2023-11-28T17:05:37.714+0000:1701162337:2023-11-28T17:05:37.714+0000:Thanks
nfilotto:1701169939:2023-11-28T19:12:19.358+0000:1701169939:2023-11-28T19:12:19.358+0000:The corresponding ticket in the Jetty project https://github.com/jetty/jetty.project/issues/10936
nfilotto:1701226918:2023-11-29T11:01:58.445+0000:1701226918:2023-11-29T11:01:58.445+0000:The corresponding PRs:

* 4.3 https://github.com/apache/camel/pull/12240 (bug fixed by configuration)
* 3.22 https://github.com/apache/camel/pull/12249 (bug fixed by configuration)
* 3.21 https://github.com/apache/camel/pull/12252 (bug fixed by using a default threshold)
* 3.20 https://github.com/apache/camel/pull/12255 (bug fixed by using a default threshold)
* 4.0 https://github.com/apache/camel/pull/12256 (bug fixed by using a default threshold)"
0,CAMEL-20151,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-24 14:21:52+00:00,2023-11-24 15:30:54+00:00,"So you can do some basic templating building XML docs when you have basic need, and just want something basic from Camel.


For powerful XML then there is xslt and others that however is a beast to learn and master.",
0,CAMEL-20150,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-24 09:03:45+00:00,2023-11-24 09:53:21+00:00,"We should load the built-in functions once and prepare a root scope for re-use
https://github.com/eiiches/jackson-jq/blob/develop/1.x/jackson-jq/src/test/java/examples/Usage.java


And then each expression init by camel can share the root scope to avoid each of them loading built-in functions from classpath (overhead).",
0,CAMEL-20149,Task,Major,None,None,"
None
",Resolved,Fixed,4.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-23 17:15:11+00:00,2023-12-06 10:50:05+00:00,"We had this discussion and discovered we are not uploading the SBOMs to dist/release


The release guide needs to be updated for Camel and Camel Spring Boot.",
0,CAMEL-20148,Dependency upgrade,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Federico Mariani,Claus Ibsen,1,4,2023-11-23 15:20:21+00:00,2023-12-08 17:58:15+00:00,Also see CAMEL-19631,"acosentino:1700786946:2023-11-24T08:49:06.843+0000:1700786946:2023-11-24T08:49:06.843+0000:
{code:java}
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.11.0:compile (default-compile) on project camel-micrometer-starter: Compilation failure: Compilation failure: 
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-micrometer-starter/src/main/java/org/apache/camel/component/micrometer/springboot/MicrometerTagsAutoConfiguration.java:[30,60] package org.springframework.boot.actuate.metrics.web.servlet does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-micrometer-starter/src/main/java/org/apache/camel/component/micrometer/springboot/MicrometerTagsAutoConfiguration.java:[31,60] package org.springframework.boot.actuate.metrics.web.servlet does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/components-starter/camel-micrometer-starter/src/main/java/org/apache/camel/component/micrometer/springboot/MicrometerTagsAutoConfiguration.java:[54,5] cannot find symbol
[ERROR]   symbol:   class WebMvcTagsProvider
[ERROR]   location: class org.apache.camel.component.micrometer.springboot.MicrometerTagsAutoConfiguration
[ERROR] -> [Help 1]
{code}


davsclaus:1701037788:2023-11-27T06:29:48.868+0000:1701037788:2023-11-27T06:29:48.868+0000:This may need some changes in the fat-jar resolver
https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2-Release-Notes#nested-jar-support
fmariani:1701045302:2023-11-27T08:35:02.073+0000:1701045302:2023-11-27T08:35:02.073+0000:yes, I already addressed these upgrades, let me create a draft PR.
davsclaus:1701048549:2023-11-27T09:29:09.932+0000:1701048549:2023-11-27T09:29:09.932+0000:I think FatJarPackageScanClassResolver and FatJarPackageScanResourceResolver may need some minor changes to adjust for their changes in that previous link.

eg you should be able to run SB as far jar via

java -jar myapp.jar


gardellajuanpablo:1701322879:2023-11-30T13:41:19.481+0000:1701325747:2023-11-30T14:29:07.408+0000:I found an issue yesterday related to the upgrade. I have this on properties file:
{code:java}
camel.springboot.routes-include-pattern=classpath:camel/**/*.xml {code}
and the application is unable to find the routes. The workaround is use CLASSIC loader implementation:
{code:xml}
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<configuration>
						<layout>ZIP</layout>
						<loaderImplementation>CLASSIC</loaderImplementation>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>repackage</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
{code}
fmariani:1701331327:2023-11-30T16:02:07.784+0000:1701331327:2023-11-30T16:02:07.784+0000:Thanks for reporting this [~davsclaus] and [~gardellajuanpablo], this https://github.com/apache/camel-spring-boot/pull/1028 should fix the issue
gardellajuanpablo:1701862524:2023-12-06T19:35:24.639+0000:1701862524:2023-12-06T19:35:24.639+0000:[~Federico Mariani] could you check if {{camel-datasonnet}} should be also updated? It is still failing although I used {{loaderImplementation}} {{CLASSIC}} in the plugin with spring boot 3.2.0. Below the exception.


{code:java}
Caused by: java.lang.IllegalStateException: Datasonnet expression not initialized
Â  Â  at org.apache.camel.language.datasonnet.DatasonnetExpression.lambda$doEvaluate$0(DatasonnetExpression.java:132)
Â  Â  at java.base/java.util.Optional.orElseThrow(Optional.java:403)
Â  Â  at org.apache.camel.language.datasonnet.DatasonnetExpression.doEvaluate(DatasonnetExpression.java:132)
Â  Â  at org.apache.camel.language.datasonnet.DatasonnetExpression.evaluate(DatasonnetExpression.java:89) {code}
After downgrade to Spring Boot 3.1.5 it worked. I am testing with Camel 4.2.0.

Â 
fmariani:1701918771:2023-12-07T11:12:51.335+0000:1701918771:2023-12-07T11:12:51.335+0000:Hello [~gardellajuanpablo], do you have a reproducer? I created a really simple project that uses camel-datasonnet-starter and a .ds file in the resource folder and a route like this works as expected

{code:java}
from(""direct:datasonnet"")
                .setProperty(""test"", constant(""HelloWorld""))
                .setProperty(""count"", simple(""1"", Integer.class))
                .setProperty(""isActive"", simple(""true"", Boolean.class))
                .setProperty(""1. Full Name"", constant(""DataSonnet""))
                .transform(datasonnet(""resource:classpath:simpleMapping.ds"", String.class,
                MediaTypes.APPLICATION_JSON_VALUE, MediaTypes.APPLICATION_JSON_VALUE))
                .to(""mock:direct:datasonnet"");
{code}
 
am I missing something? I mvn installed the project and run via _java -jar_
gardellajuanpablo:1702014902:2023-12-08T13:55:02.602+0000:1702014902:2023-12-08T13:55:02.602+0000:[~Federico Mariani] I tried to reproduce it again without success. I will let you know if I see the problem again.
gardellajuanpablo:1702029495:2023-12-08T17:58:15.805+0000:1702029495:2023-12-08T17:58:15.805+0000:[~Federico Mariani] I confirm no issue with spring boot. It is something related to LRU cache.


{code:java}
@Language(""datasonnet"")
public class DatasonnetLanguage extends TypedLanguageSupport implements PropertyConfigurer {
...
    // Cache used to stores the Mappers
    // See: {@link GroovyLanguage}
    private final Map<String, Mapper> mapperCache = LRUCacheFactory.newLRUSoftCache(16, 1000, true);

{code}

It seems the expression is removed. Probably related to CAMEL-20039 or CAMEL-20038. The issue does not happen immediately, only after some time.



Â 

Â "
0,CAMEL-20147,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.0.4,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-23 13:43:39+00:00,2023-12-06 10:54:41+00:00,No Desc,
0,CAMEL-20146,Dependency upgrade,Major,None,"3.20.9, 3.21.3, 3.22.0","
None
",Resolved,Fixed,"3.20.9, 3.21.3, 3.22.0",Unassigned,Claus Ibsen,0,1,2023-11-23 13:35:29+00:00,2023-12-06 08:56:20+00:00,No Desc,
0,CAMEL-20145,Improvement,Major,4.3.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,1,1,2023-11-22 17:47:45+00:00,2023-11-22 18:15:39+00:00,Routes are created before  micrometer-promtethehus is started that then add route policty. But its too late.,
0,CAMEL-20144,Dependency upgrade,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-21 19:09:34+00:00,2023-11-22 08:35:59+00:00,"We use 6.6.0 but there is a 7.1.0 release
https://github.com/OpenAPITools/openapi-generator/releases",
0,CAMEL-20143,Bug,Minor,4.2.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-21 18:34:31+00:00,2023-11-23 13:30:45+00:00,"Reported on chat
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/No.20more.20sourceLineNumber.20and.20sourceLocation.20for.20Java.20DSL",
0,CAMEL-20112,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-14 07:55:28+00:00,2023-11-15 13:33:36+00:00,"This code




import org.apache.camel.builder.RouteBuilder;

public class hello extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        // Write your routes here, for example:
        from(""kamelet:timer-source?message=hi&period=1234"")
            .setBody()
                .simple(""Hello Camel from ${routeId}"")
            .log(""${body}"");
    }
}




The debugger should not step inside kamelets but only in the route.",davsclaus:1700013255:2023-11-15T09:54:15.193+0000:1700026416:2023-11-15T13:33:36.821+0000:TODO: kamelet sink at end *DONE*
0,CAMEL-20111,Bug,Major,None,None,"
None
",Resolved,Invalid,None,Unassigned,Dietrich Schulten,0,2,2023-11-13 19:24:10+00:00,2023-11-13 19:44:22+00:00,"We just realized that the ServiceCall EIP is deprecated while planning the next upgrade to Camel.


https://issues.apache.org/jira/browse/CAMEL-18453 has deprecated the ServiceCall EIP, and the documentation https://camel.apache.org/components/4.0.x/eips/serviceCall-eip.html states that it has been removed as of V.4, but the 3->4 migration guide does not mention the removal and gives no advice what users should do who rely on service discovery.


Unfortunately, we use ServiceCall a lot in our microservice landscape, so this will be a major migration issue.


In the code I still see the implementation classes of ServiceCall in https://github.com/apache/camel/tree/main/core/camel-cloud/src/main/java/org/apache/camel/impl/cloud, and the Camel DSL .serviceCall step is still there, albeit deprecated.


So I have a faint hope that it might not be too late to keep the serviceCall EIP in the product. Or learn why it is no longer necessary and superceded by a better approach.


You could read this a possible documentation bug: the docs say it is gone, but it is still there, and there is no migration guide which discusses what users should do instead, once the ServiceCall code will really be removed. Secretly hoping that you reverse the deprecation","davsclaus:1699875588:2023-11-13T19:39:48.462+0000:1699875588:2023-11-13T19:39:48.462+0000:Its deprecated and to be removed
davsclaus:1699875811:2023-11-13T19:43:31.253+0000:1699875811:2023-11-13T19:43:31.253+0000:Camel can do alot but not everything, and we cannot maintain all those cloud abstractions and calling services in kubernetes based platforms is better to their native way.
davsclaus:1699875862:2023-11-13T19:44:22.749+0000:1699875862:2023-11-13T19:44:22.749+0000:I am updating the doc page to say in future Came releases. The removing is touching many files and by having it deprecated for a while in 4.x allows users time to migrate."
0,CAMEL-20110,Improvement,Minor,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-13 16:17:19+00:00,2023-11-13 19:38:13+00:00,"We should add option to set idleTimeout on jetty
https://github.com/apache/camel/blob/90390b7e0faf426c7aa968fc5be272d09b2c6ced/components/camel-jetty/src/main/java/org/apache/camel/component/jetty11/JettyHttpComponent11.java#L62",
0,CAMEL-20109,Bug,Minor,4.0.2,"4.0.3, 4.3.0","
None
",Resolved,Fixed,"4.0.3, 4.3.0",Claus Ibsen,Peter Nowak,0,2,2023-11-13 15:43:34+00:00,2023-11-14 07:44:21+00:00,"The changes from issue 19987 to optimize endpoint matching also updated the logic how the AbstractCamelContext removes a single endpoint (""removeEndpoint"" method) which now breaks the removal of endpoints containing ""#"" symbols (maybe even more special chars) like used in the ""spring-redis component"" when specifying a redistemplate bean in the uri.


Â 


I do not have a fix (except that the old code calling ""removeEndpoints"" worked), but i attached 2 unit test cases for ""camel-spring-redis"" which show the problem.


Â 


With 4.0.1 they are green, with 4.0.2 they fail because the endpoint containing the ""#"" (which is normalized and url escaped to ""%23"") does not get removed.


Â 


Please revert the changes made for 4.0.2 or fix it in some other way. As shown it also happens when trying to remove such a route, that not all endpoints get cleared up causing a potential memory leak if you create and remove routes dynamically during runtime or also has maybe other side effects","davsclaus:1699876970:2023-11-13T20:02:50.159+0000:1699876970:2023-11-13T20:02:50.159+0000:Thanks for the unit test, I wonder if you can send the tests as a github PR against main branch
davsclaus:1699915101:2023-11-14T06:38:21.847+0000:1699915101:2023-11-14T06:38:21.847+0000:Thanks I have applied your patch, so no need for GH
nukulami:1699916825:2023-11-14T07:07:05.090+0000:1699916825:2023-11-14T07:07:05.090+0000:(y)"
0,CAMEL-20108,Task,Minor,4.2.0,4.3.0,"
None
",Resolved,Fixed,4.3.0,AurÃ©lien Pupier,AurÃ©lien Pupier,0,2,2023-11-13 13:30:05+00:00,2023-12-07 15:53:50+00:00,for instance https://github.com/apache/camel-examples/blob/f9b2ae276b746ef44bb2da72d85fbabc0048895f/routeloader/src/main/resources/myroutes/my-yaml-route.yaml#L22,"davsclaus:1699913493:2023-11-14T06:11:33.846+0000:1699913493:2023-11-14T06:11:33.846+0000:Can you look at the spring-boot examples also
davsclaus:1701935630:2023-12-07T15:53:50.855+0000:1701935630:2023-12-07T15:53:50.855+0000:SB updated also"
0,CAMEL-20107,Improvement,Minor,"4.0.2, 4.1.0, 4.2.0","4.0.4, 4.3.0","
None
",Resolved,Fixed,"4.0.4, 4.3.0",James Netherton,James Netherton,0,1,2023-11-13 09:26:44+00:00,2023-11-16 11:24:10+00:00,"When using Salesforce Pub / Sub with pubSubDeserializeType POJO, it's possible that the POJO class will not get loaded correctly on some platforms.


https://github.com/apache/camel/blob/main/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/PubSubApiConsumer.java#L65


It'd be better if the class loading logic used the Camel ClassResolver or ObjectHelper.loadClass so that the class is attempted to be loaded from the correct set of ClassLoaders.",
0,CAMEL-20106,Improvement,Major,None,4.3.0,"
None
",Resolved,Won't Do,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-12 09:29:45+00:00,2023-11-12 09:56:51+00:00,"There is a duplicate file conflict with core errorHandler and spring errorHandler in the model. We should avoid this so the spring XSD is generated with its error handler in the XSD. 


This can be tricky to fix due to JAXB",davsclaus:1699754211:2023-11-12T09:56:51.282+0000:1699754211:2023-11-12T09:56:51.282+0000:This is causing too much pain and the spring-xml is legacy and to be deprecated for the xml-io DSL instead.
0,CAMEL-20105,New Feature,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,1,1,2023-11-11 16:04:35+00:00,2023-11-17 08:54:44+00:00,You have to configure this via Java code today. But we should make it possible to configure in application.properties (like you can do for SB),"davsclaus:1699773071:2023-11-12T15:11:11.885+0000:1699773071:2023-11-12T15:11:11.885+0000:We should make it possible to scrape prometheus and output that from camel-main
https://micrometer.io/docs/registry/prometheus
davsclaus:1700118719:2023-11-16T15:11:59.184+0000:1700182069:2023-11-17T08:47:49.970+0000:TODO: generate list of known metrics from micrometer for docs / tooling *DONE*
TODO: integrate seamless with camel-jbang *DONE*
TODO: example *DONE*"
0,CAMEL-20104,Improvement,Minor,None,,"
None
",In Progress,Unresolved,None,Steve Storck,Steve Storck,0,1,2023-11-11 12:45:17+00:00,2023-11-11 13:07:40+00:00,"User Story:


As a routing participant that sends a message to the dynamic router, I need a way to know that a message that I have sent was not sent to any routing participants so that I can react/respond in an appropriate way, as deemed by my function in the system.


Â 


Description:


The dynamic router eip component currently has an option for notification when a message is dropped if there are no routing participants that have registered rules that allow any of them to receive a message â it can log a message at the debug level by default, or it can be configured to log as a warning.Â  Since this is not ideal for notifying the sender of this issue, it would be helpful to let the message sender know that no recipients were available to receive the message.


Â 


Approach:


The logging level for dropped messages is still probably useful, so that option can remain.Â  It would be a good idea to create another configuration option that allows the user to toggle returning an exception on the exchange when there are no appropriate routing participants to receive the message.",
0,CAMEL-20103,Bug,Critical,"4.0.0, 4.0.1, 4.0.2, 4.1.0, 4.2.0","4.0.3, 4.3.0","
None
",Resolved,Fixed,"4.0.3, 4.3.0",Otavio Rodolfo Piske,Peter Nowak,0,2,2023-11-11 10:22:22+00:00,2023-11-14 10:22:02+00:00,"as already posted on the dev mailing list the DefaultProducerCache can return a wrong ProducerTemplate under high concurrency load which leads to misrouted exchanges and therefor errors in the application and workflow.


Â 


The improvement in the DefaultProducerCache from issue 19058 introduced a severe concurrency issue with that change.Â 


While writing to the ""lastUsed"" fields in ""acquireProducers"" is synchronised, so that they are updated together, the read at the beginning of the method is not synchronised at all with the writes and therefor can be read at every time, even between the synced update to the fields which can lead to wrong producer templates being returned under high concurrency load. This then leads to exchanges being delivered to wrong endpoints causing severe malfunctions and errors.


Â 


i have created a patch (and also a branch in my forked camel repo) including the fix and a unit test reproduces the problem with returning the wrong producer template for the requested endpoint when accessing from multiple threads","nukulami:1699669480:2023-11-11T10:24:40.208+0000:1699669480:2023-11-11T10:24:40.208+0000:my pull request (containing the same changes as the attached patch) https://github.com/apache/camel/pull/11971
orpiske:1699928522:2023-11-14T10:22:02.733+0000:1699928522:2023-11-14T10:22:02.733+0000:This should have been fixed by the linked PR 11971 by [~nukulami] which I backported to 4.0.x.
"
0,CAMEL-20102,Improvement,Minor,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-10 18:24:43+00:00,2023-11-10 18:28:13+00:00,"https://github.com/apache/camel-karavan/issues/986#issuecomment-1806018894


We should add enums for those values so tooling knows.",
0,CAMEL-20101,Improvement,Minor,"3.x, 4.x",4.3.0,"
None
",Resolved,Fixed,4.3.0,Unassigned,Steven DÃ¼rrenmatt,0,2,2023-11-10 13:24:33+00:00,2023-11-11 17:09:56+00:00,"The allowContextMapAll query parameter is not present in the code, and the allowTemplateFromHeader parameter is used instead. By default the input context map is null if allowTemplateFromHeader is false, so no context will be passed to the Jolt transform at all. If allowTemplateFromHeader is true, the input context map will have full access.


Documentation for allowContextMapAll says: ""Sets whether the context map should allow access to all details. By default only the message body and headers can be accessed"", so Jolt transforms should have access to message headers by default. It is not clear whether this option should actually restrict the context map to headers, or just disallow the use of a context map.","steven.durrenmath:1699595616:2023-11-10T13:53:36.683+0000:1699595616:2023-11-10T13:53:36.683+0000:I could provide a fix but I need to know what this option is supposed to do.
davsclaus:1699612650:2023-11-10T18:37:30.990+0000:1699612650:2023-11-10T18:37:30.990+0000:This is because it inherits from ResourceEndpoint

So you need to add to the endpoint class
@Metadata(excludeProperties = ""allowContextMapAll"")


davsclaus:1699693796:2023-11-11T17:09:56.542+0000:1699693796:2023-11-11T17:09:56.542+0000:Thanks for reporting and the PR"
0,CAMEL-20100,Bug,Minor,4.1.0,"4.0.3, 4.3.0","
None
",Resolved,Fixed,"4.0.3, 4.3.0",Claus Ibsen,Damir Palinic,0,2,2023-11-10 12:53:42+00:00,2023-11-12 17:50:26+00:00,"When json response is received from the external REST endpoint using camel-http component, it fails to read missing json value, although DEFAULT_PATH_LEAF_TO_NULL option is set.


This can be reproduced using mockable.io service, but we noticed this behavior when calling many other REST endpoints (from real implementations).Â 


How to reproduce:



Create mocked POST REST endpoint using mockable.io
For example, our looks like following:
`POST http://demo0405481.mockable.io/camel` 
Response: {""errorcode"":0,""errormessage"":""""}
Create integration where REST endpoint from step 2. is called using camel-http
Read missing summary field using Set Property and Jsonpath with DEFAULT_PATH_LEAF_TO_NULL enabled
Observe the error ""Cannot read message body as supported JSON value. ""



Actual result:




org.apache.camel.ExpressionEvaluationException: org.apache.camel.CamelExchangeException: Cannot read message body as supported JSON value. 



Expected result:




${exchangeProperty.summary} to be null




YAML DSL to reproduce:




- route:
Â  Â  nodePrefixId: route-7e2
Â  Â  id: route-dafc
Â  Â  from:
Â  Â  Â  uri: scheduler
Â  Â  Â  id: from-64dc
Â  Â  Â  parameters:
Â  Â  Â  Â  name: scheduler
Â  Â  Â  Â  repeatCount: 2
Â  Â  Â  steps:
Â  Â  Â  Â  - setHeader:
Â  Â  Â  Â  Â  Â  name: Content-Type
Â  Â  Â  Â  Â  Â  expression:
Â  Â  Â  Â  Â  Â  Â  simple:
Â  Â  Â  Â  Â  Â  Â  Â  expression: application/json
Â  Â  Â  Â  Â  Â  Â  Â  id: simple-dc79
Â  Â  Â  Â  Â  Â  id: setHeader-2f26
Â  Â  Â  Â  - setBody:
Â  Â  Â  Â  Â  Â  expression:
Â  Â  Â  Â  Â  Â  Â  simple:
Â  Â  Â  Â  Â  Â  Â  Â  expression: |-
Â  Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ""some"": ""value""
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  id: simple-bfca
Â  Â  Â  Â  Â  Â  id: setBody-243c
Â  Â  Â  Â  - to:
Â  Â  Â  Â  Â  Â  uri: http
Â  Â  Â  Â  Â  Â  id: to-2cfa
Â  Â  Â  Â  Â  Â  parameters:
Â  Â  Â  Â  Â  Â  Â  httpUri: demo0405481.mockable.io/camel
Â  Â  Â  Â  Â  Â  Â  httpMethod: POST
Â  Â  Â  Â  - setProperty:
Â  Â  Â  Â  Â  Â  name: summary
Â  Â  Â  Â  Â  Â  expression:
Â  Â  Â  Â  Â  Â  Â  jsonpath:
Â  Â  Â  Â  Â  Â  Â  Â  expression: $.summary
Â  Â  Â  Â  Â  Â  Â  Â  option: DEFAULT_PATH_LEAF_TO_NULL
Â  Â  Â  Â  Â  Â  Â  Â  id: jsonpath-54df
Â  Â  Â  Â  Â  Â  id: setProperty-0d81
Â  Â  Â  Â  - log:
Â  Â  Â  Â  Â  Â  message: 'Value: ${exchangeProperty.summary}'
Â  Â  Â  Â  Â  Â  id: log-6839
 



Additional notes:



Please create your own mock using mockable.io and create some POST REST endpoint and return any json you want
In case summary field exists, it reads it normally
In case body is set using Set Body component, instead of reading it from from REST endpoint, everything works fine",davsclaus:1699773807:2023-11-12T15:23:27.119+0000:1699773807:2023-11-12T15:23:27.119+0000:Thanks for the sample project. 
0,CAMEL-20099,Bug,Major,"4.0.2, 4.1.0","4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Claus Ibsen,Damir Palinic,0,2,2023-11-10 10:49:12+00:00,2023-11-23 11:10:58+00:00,"In case Content-Type header has "";charset=UTF-8"" suffix, camel-http component creates Content-Encoding: UTF-8 header which is invalid by RFC specification.


If you try to send request with Content-Encoding: UTF-8 to SAP systems for example, they will reject it due to invalid header.Â 


YAML DSL to reproduce the issue:


Â 




- route:
Â  Â  nodePrefixId: route-7e2
Â  Â  id: route-dafc
Â  Â  from:
Â  Â  Â  uri: scheduler
Â  Â  Â  id: from-64dc
Â  Â  Â  parameters:
Â  Â  Â  Â  name: scheduler
Â  Â  Â  steps:
Â  Â  Â  Â  - setHeader:
Â  Â  Â  Â  Â  Â  name: Content-Type
Â  Â  Â  Â  Â  Â  expression:
Â  Â  Â  Â  Â  Â  Â  simple:
Â  Â  Â  Â  Â  Â  Â  Â  expression: application/json;charset=UTF-8
Â  Â  Â  Â  Â  Â  Â  Â  id: simple-dc79
Â  Â  Â  Â  Â  Â  id: setHeader-2f26
Â  Â  Â  Â  - setBody:
Â  Â  Â  Â  Â  Â  expression:
Â  Â  Â  Â  Â  Â  Â  simple:
Â  Â  Â  Â  Â  Â  Â  Â  expression: |-
Â  Â  Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ""some"": ""value""
Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  id: simple-bfca
Â  Â  Â  Â  Â  Â  id: setBody-243c
Â  Â  Â  Â  - to:
Â  Â  Â  Â  Â  Â  uri: http
Â  Â  Â  Â  Â  Â  id: to-2cfa
Â  Â  Â  Â  Â  Â  parameters:
Â  Â  Â  Â  Â  Â  Â  httpUri: >-
Â  Â  Â  Â  Â  Â  Â  Â  01het4h4zq3gvtecszbv5rpx3y00-4f92b8ba4ea1459ece69.requestinspector.com
Â  Â  Â  Â  Â  Â  Â  httpMethod: POST
 



Additional notes:



If you remove "";charset=UTF-8"" part from the Content-Type header, and call one more http request after the first one, it gets appended automatically for some reason, even if you remove Content-Type header and set it again manually (possible another bug) between two calls
Same behavior is for the https traffic","davsclaus:1699920754:2023-11-14T08:12:34.117+0000:1699920754:2023-11-14T08:12:34.117+0000:I cannot see this happening on 4.2.0 when debugging
!Screenshot 2023-11-14 at 09.12.12.png! 
davsclaus:1699921153:2023-11-14T08:19:13.326+0000:1699921153:2023-11-14T08:19:13.326+0000:And with DEBUG logging level enabled (--logging-level=DEBUG) if you run via camel-jbang

{code}
 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> POST / HTTP/1.1
2023-11-14 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> Accept-Encoding: gzip, x-gzip, deflate
2023-11-14 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> Content-Length: 21
2023-11-14 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> Content-Type: application/json; charset=UTF-8
2023-11-14 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> Host: 01het4h4zq3gvtecszbv5rpx3y00-4f92b8ba4ea1459ece69.requestinspector.com
2023-11-14 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> Connection: keep-alive
2023-11-14 09:16:31.896 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 >> User-Agent: Apache-HttpClient/5.2.1 (Java/17.0.5)
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""POST / HTTP/1.1[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Accept-Encoding: gzip, x-gzip, deflate[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Content-Length: 21[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Content-Type: application/json; charset=UTF-8[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Host: 01het4h4zq3gvtecszbv5rpx3y00-4f92b8ba4ea1459ece69.requestinspector.com[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Connection: keep-alive[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""User-Agent: Apache-HttpClient/5.2.1 (Java/17.0.5)[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""[\r][\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""{[\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""  ""some"": ""value""[\n]""
2023-11-14 09:16:31.897 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""}""
2023-11-14 09:16:32.120 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""HTTP/1.1 200 OK[\r][\n]""
2023-11-14 09:16:32.120 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""Date: Tue, 14 Nov 2023 08:16:32 GMT[\r][\n]""
2023-11-14 09:16:32.120 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""Content-Type: text/plain; charset=utf-8[\r][\n]""
2023-11-14 09:16:32.120 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""Content-Length: 2[\r][\n]""
2023-11-14 09:16:32.120 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""Connection: keep-alive[\r][\n]""
2023-11-14 09:16:32.121 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""X-Limits-Limit: 100[\r][\n]""
2023-11-14 09:16:32.121 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""X-Limits-Remaining: 99[\r][\n]""
2023-11-14 09:16:32.121 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""X-Limits-Reset: 1699949795[\r][\n]""
2023-11-14 09:16:32.122 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""CF-Cache-Status: DYNAMIC[\r][\n]""
2023-11-14 09:16:32.122 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""Report-To: {""endpoints"":[{""url"":""https:\/\/a.nel.cloudflare.com\/report\/v3?s=ArHC7v3ft6r6yVSQGPjUDGdbdNAZHOyEdVCJZUd%2B7ysJ7rEugl47EeW8jX3iMQddBaJ5YM3yXwbob1DlDDr%2BksPKD%2BqeVQPGBNkGcY2qIG2tsA075CK0n6gwZm6j0FWI9un8VGcZ4pvravNXSLGF6JlJmZWXw58ofNZhuchPnTDr1wOjIA5Q55qKE%2FkCmK3gtwsVZAwWc1xS""}],""group"":""cf-nel"",""max_age"":604800}[\r][\n]""
2023-11-14 09:16:32.123 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""NEL: {""success_fraction"":0,""report_to"":""cf-nel"",""max_age"":604800}[\r][\n]""
2023-11-14 09:16:32.123 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""Server: cloudflare[\r][\n]""
2023-11-14 09:16:32.123 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""CF-RAY: 825dd017899ab523-OSL[\r][\n]""
2023-11-14 09:16:32.123 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""alt-svc: h3="":443""; ma=86400[\r][\n]""
2023-11-14 09:16:32.123 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""[\r][\n]""
2023-11-14 09:16:32.123 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 << ""OK""
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << HTTP/1.1 200 OK
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << Date: Tue, 14 Nov 2023 08:16:32 GMT
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << Content-Type: text/plain; charset=utf-8
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << Content-Length: 2
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << Connection: keep-alive
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << X-Limits-Limit: 100
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << X-Limits-Remaining: 99
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << X-Limits-Reset: 1699949795
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << CF-Cache-Status: DYNAMIC
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << Report-To: {""endpoints"":[{""url"":""https:\/\/a.nel.cloudflare.com\/report\/v3?s=ArHC7v3ft6r6yVSQGPjUDGdbdNAZHOyEdVCJZUd%2B7ysJ7rEugl47EeW8jX3iMQddBaJ5YM3yXwbob1DlDDr%2BksPKD%2BqeVQPGBNkGcY2qIG2tsA075CK0n6gwZm6j0FWI9un8VGcZ4pvravNXSLGF6JlJmZWXw58ofNZhuchPnTDr1wOjIA5Q55qKE%2FkCmK3gtwsVZAwWc1xS""}],""group"":""cf-nel"",""max_age"":604800}
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << NEL: {""success_fraction"":0,""report_to"":""cf-nel"",""max_age"":604800}
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << Server: cloudflare
2023-11-14 09:16:32.127 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << CF-RAY: 825dd017899ab523-OSL
2023-11-14 09:16:32.128 DEBUG 14893 --- [ler://scheduler] org.apache.hc.client5.http.headers  : http-outgoing-0 << alt-svc: h3="":443""; ma=86400
{code}
davsclaus:1699921249:2023-11-14T08:20:49.821+0000:1699921249:2023-11-14T08:20:49.821+0000:And yes I can see the bug in 4.1.0 when using --camel-version=4.1.0

{code}
 09:19:30.032 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""POST / HTTP/1.1[\r][\n]""
2023-11-14 09:19:30.032 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Accept-Encoding: gzip, x-gzip, deflate[\r][\n]""
2023-11-14 09:19:30.032 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Content-Length: 21[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Content-Type: application/json; charset=UTF-8[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Content-Encoding: UTF-8[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Host: 01het4h4zq3gvtecszbv5rpx3y00-4f92b8ba4ea1459ece69.requestinspector.com[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""Connection: keep-alive[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""User-Agent: Apache-HttpClient/5.2.1 (Java/17.0.5)[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""[\r][\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""{[\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""  ""some"": ""value""[\n]""
2023-11-14 09:19:30.033 DEBUG 14935 --- [ler://scheduler] org.apache.hc.client5.http.wire     : http-outgoing-0 >> ""}""
{code}

So this is fixed in 4.2.0 onwards. 
davsclaus:1699921365:2023-11-14T08:22:45.818+0000:1699921365:2023-11-14T08:22:45.818+0000:And its a bug in 4.0.2 still
davsclaus:1699928888:2023-11-14T10:28:08.355+0000:1699928888:2023-11-14T10:28:08.355+0000:Okay so it seems fixed in 4.0.3 and 4.2.0 onwards."
0,CAMEL-20098,Test,Minor,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,1,2023-11-10 08:44:31+00:00,2023-11-13 20:03:56+00:00,"I have seen this a few times
https://ci-builds.apache.org/job/Camel/job/Camel%20JDK21/job/main/lastCompletedBuild/testReport/org.apache.camel.support.jsse/KeyManagersParametersTest/testPropertyPlaceholders/


I suspect its due to AbstractJsseParametersTest is used by other tests and it may be concurrently in use, and this class creates a hardcoded file with configuration: file:./target/jsse-test.properties


So maybe we need to make this file dynamic or run the tests in isolation.","davsclaus:1699577088:2023-11-10T08:44:48.931+0000:1699577088:2023-11-10T08:44:48.931+0000:Failed
org.apache.camel.support.jsse.KeyManagersParametersTest.testPropertyPlaceholders (from org.apache.camel.util.DumpModelAsXmlRouteTemplateTest)

Failing for the past 1 build (Since #139 )
Took 65 ms.
Error Message
Error parsing property value: {{keyManagersParameters.algorithm}}
Stacktrace
org.apache.camel.RuntimeCamelException: Error parsing property value: {{keyManagersParameters.algorithm}}
	at org.apache.camel.support.jsse.JsseParameters.parsePropertyValue(JsseParameters.java:74)
	at org.apache.camel.support.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:82)
	at org.apache.camel.support.jsse.KeyManagersParametersTest.testPropertyPlaceholders(KeyManagersParametersTest.java:76)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:387)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1312)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1843)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1808)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:188)
Caused by: java.lang.IllegalArgumentException: Property with key [keyManagersParameters.algorithm] not found in properties from text: {{keyManagersParameters.algorithm}}
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:373)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:232)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParseNested(DefaultPropertiesParser.java:169)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:118)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:70)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:320)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:171)
	at org.apache.camel.impl.engine.DefaultCamelContextExtension.resolvePropertyPlaceholders(DefaultCamelContextExtension.java:315)
	at org.apache.camel.impl.engine.AbstractCamelContext.resolvePropertyPlaceholders(AbstractCamelContext.java:1546)
	at org.apache.camel.support.jsse.JsseParameters.parsePropertyValue(JsseParameters.java:72)
	... 9 more"
0,CAMEL-20097,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-11-10 08:19:41+00:00,2023-11-10 08:21:24+00:00,This was recently added and supported in the vertx implementation that is used by Quarkus and Camel Main. But it would be good to see if it somehow can be used by spring boot also.,
0,CAMEL-20096,Task,Minor,3.20.8,,"
None
",Closed,Won't Fix,None,Unassigned,Karen Lease,0,2,2023-11-08 14:56:28+00:00,2023-11-22 21:13:23+00:00,"After I committed to the 3.20.x branch, the reformat and build workflow failed. Also the previous workflow on this branch to merge the 3.20.8 release failed.
I think the issue is that this workflow tries to update the regen_bot branch which is based on main. So any changes to components which where deleted in Camel 4 cause conflicts.",davsclaus:1699505414:2023-11-09T12:50:14.209+0000:1699505414:2023-11-09T12:50:14.209+0000:3.20.x is EOL by end of this year
0,CAMEL-20095,New Feature,Major,None,None,"
None
",In Progress,Unresolved,None,Zineb Bendhiba,Zineb Bendhiba,0,3,2023-11-08 10:24:53+00:00,2024-01-10 14:59:04+00:00,"Investigate on the Java library langchain4j, to create a component that can integrate to OpenAI, HugginFace and more via langchain


Â 


This is the link to the project : https://github.com/langchain4j/langchain4j


Â 


the attached video is a first POC playing with Camel telegram and OpenAI


Â 


telegram-openAPI.mp4","acosentino:1701843004:2023-12-06T14:10:04.673+0000:1701843004:2023-12-06T14:10:04.673+0000:In terms of structure, I think we should think about having a middle folder called camel-ai and inside creating the related component to deal with. Maybe only azure-open-ai should go in camel-azure middle folder. Are you working on a particular one right now?
acosentino:1704864214:2024-01-10T13:23:34.526+0000:1704864214:2024-01-10T13:23:34.526+0000:[~zbendhiba] what component of langchain you're looking at now?
zbendhiba:1704865129:2024-01-10T13:38:49.675+0000:1704865129:2024-01-10T13:38:49.675+0000:Hey [~acosentino] , I was thinking of lanchain4j.Â 

When you say middle folder called camel-ai, do you mean to create a group as for camel-azure ?
acosentino:1704865430:2024-01-10T13:43:50.671+0000:1704865430:2024-01-10T13:43:50.671+0000:Yes, something like that...

Langchain4j got multiple modules: https://github.com/langchain4j/langchain4j

So it would maybe make sense to focus on one module at the time, for example adding the azure-open-ai one in camel-azure and maybe the chatgpt in the camel-ai middle folder.
zbendhiba:1704869944:2024-01-10T14:59:04.814+0000:1704869944:2024-01-10T14:59:04.814+0000:Oh I have my tokens for both HugginFace and OpenAI. I went with openAI (so chatGPT), and maybe also HuggingFace.

I'm starting with chatGPT and so I will create a camel-ai.Â "
0,CAMEL-20094,Task,Major,"3.21.2, 4.1.0","3.20.9, 3.21.3, 3.22.0, 4.0.3, 4.3.0","

help-wanted

",Resolved,Fixed,"3.20.9, 3.21.3, 3.22.0, 4.0.3, 4.3.0",Claus Ibsen,Otavio Rodolfo Piske,0,3,2023-11-08 09:56:52+00:00,2023-11-13 14:48:28+00:00,"There is something on the build that causes it to keep generating the camel-spring.xsd file. This is very annoying as it makes bisect automation harder, requires constant cleanups when rebasing and synchronizing branches.


We should investigate why this is happening and fix it accordingly.","klease78:1699602605:2023-11-10T15:50:05.734+0000:1699602605:2023-11-10T15:50:05.734+0000:The reason for this is that in camel-spring-xml there is a class org.apache.camel.spring.xml.SpringErrorHandlerDefinition which contains the following code
{code:java}
/**
 * Error handler settings
 */
@Metadata(label = ""spring,configuration,error"")
@XmlRootElement(name = ""errorHandler"")
{code}
This conflicts with the core org.apache.camel.model.ErrorHandlerDefinition
{code:java}
/**
 * Camel error handling.
 */
@Metadata(label = ""configuration,error"")
@XmlRootElement(name = ""errorHandler"") 
{code}
Both generate an errorHandler.json file. The EipDocumentationEnricherMojo plugin which adds the documentation to the generated schema files only uses one of these files, apparently randomly, causing the description to change since the javadoc is different.
Changing the javadoc will get rid of this issue but in fact, this conflict also causes an incorrect schema since the errorHandler element 
{code:java}
<xs:element name=""errorHandler"" nillable=""true"" type=""xs:anyType"">
{code}
does not reference the errorHandlerDefinition type even though it exists in the schema.
It's not clear to me if the specific SpringErrorHandlerDefinition is actually needed!


davsclaus:1699754297:2023-11-12T09:58:17.817+0000:1699754297:2023-11-12T09:58:17.817+0000:Yes SpringErrorHandlerDefinition is needed for legacy spring xml via jaxb (camel-spring-xml) that is to be deprecated and removed in the future. The XML DSL is to be xml-io DSL based.
We need to keep it as-is to keep both of them working. But we should make the EIP doc enricher skip the errorHandler part so it does not change the keep changing the file on random.
davsclaus:1699851316:2023-11-13T12:55:16.871+0000:1699851316:2023-11-13T12:55:16.871+0000:Pushed a fix to skip the spring errorHandler.json so it uses the same core file allways.
orpiske:1699851761:2023-11-13T13:02:41.222+0000:1699851761:2023-11-13T13:02:41.222+0000:[~klease78] thanks for the details and thanks [~davsclaus] for the fix! 

It looks like a small fix so I am wondering whether we should backport this to 3.x, 3.21.x, etc ... I offer to do the job if you are busy [~davsclaus]. 
orpiske:1699852159:2023-11-13T13:09:19.472+0000:1699852159:2023-11-13T13:09:19.472+0000:Oh, and BTW, the fix is working. I have just tested here and the `camel-spring.xsd` file is not generated anymore. 
davsclaus:1699853833:2023-11-13T13:37:13.452+0000:1699853833:2023-11-13T13:37:13.452+0000:Okay let me try to backport"
0,CAMEL-20093,Improvement,Minor,"4.1.0, 4.2.0",4.x,"

help-wanted

",Open,Unresolved,4.x,Nikita_Konovalov,Otavio Rodolfo Piske,0,1,2023-11-08 09:39:40+00:00,2023-11-16 18:40:02+00:00,"There's a pretty large amount of duplicated code within camel-catalog. It would be good to clean it up, create common components, helpers an utilities that serve all of the code in there. 


As an additional improvement, documenting the code and ensuring it's easy to maintain would be good as well.",
0,CAMEL-20092,Bug,Major,3.21.2,"3.21.3, 3.22.0, 4.0.3, 4.2.0","
None
",Resolved,Fixed,"3.21.3, 3.22.0, 4.0.3, 4.2.0",Simon Rasmussen,Simon Rasmussen,0,1,2023-11-08 07:50:56+00:00,2023-11-09 11:31:57+00:00,"We have had the following scenario happen to us on a SQS consumer with greedy=true:


poll 1: fails with exception, causing error count to increase to 1 (due to sqs problem)


poll 2: successfully poll, and since greedy, continues with the next poll. This continued for 1 hour as the queue it polled from had many messages


Since the error count wasn't updated, then our readiness check remained DOWN for a full hour even though the application actually processed messages of the queue.",
0,CAMEL-20091,Improvement,Minor,3.21.0,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Tanay Agarwal,0,2,2023-11-08 03:27:57+00:00,2023-11-10 08:21:06+00:00,"As we are in the Transition phase from camel-rabbitmq to camel-spring-rabbitmq, one major dependency during the development phase is the auto declaration of exchanges, queues and bindings.


As per the Spring Rabbit MQ Documentation, the ""autoDeclare"" property is only enabled for Consumers in contrast to the ""declare"" property that is common for both Producers and Consumers.


If it is Planned for Camel 4, I request you to please port it in Camel 3 as well as not everyone can move to Camel 4 right away.",davsclaus:1699575655:2023-11-10T08:20:55.216+0000:1699575655:2023-11-10T08:20:55.216+0000:You need to research this more yourself and help if you can. It may be that spring rabbitmq and auto declare is something you setup in the connection factory. I suggest to look in their docs and examples and report back here.
0,CAMEL-20090,Bug,Minor,3.20.8,,"
None
",Open,Unresolved,None,Unassigned,Raymond,0,1,2023-11-07 19:01:11+00:00,2023-11-09 12:03:24+00:00,"As discussed on the mailing list:


https://lists.apache.org/thread/gkzpjsrdxwrc2jsh82vp92dzdlympjtf


Sometimes when unzipping a zip file I get an error:




org.apache.camel.StreamCacheException: Error during type conversion
from type: org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper
 to the required type: org.apache.camel.StreamCache with value
org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper@10538c67
due to org.apache.camel.TypeConversionException: Error during type
conversion from type:
org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper
 to the required type: org.apache.camel.StreamCache with value
org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper@10538c67 due
to java.io.IOException: Stream closed 



I don't know how far this is related to other issue with ZipFile:


https://issues.apache.org/jira/browse/CAMEL-19849


The strange thing is that is seems to work in some environments and fails in others. 


I tested it with Camel 3.20.8 / JDK


For example:


1. Local (build from source / Windows 11) --> Works
2. Local (Docker image / Docker Desktop) --> Works
3. Local (build from source / MacOS) --> Works
4. AWS (Docker image running on Ubuntu) --> Fails


I tried to copy the source of ZipFile to my own program to get some more information, but it seems that the error is more related to the Camel Support module. Nevertheless I got some more logging out of it.


My route:




<route id=""zip"">
Â  Â  <from uri=""direct:zip_in""/>
Â  Â  <unmarshal>
Â  Â  Â  Â  <zipFile usingIterator=""true""/>
Â  Â  </unmarshal>
Â  Â  <split streaming=""true"">
Â  Â  Â  Â  <simple>${body}</simple>
Â  Â  Â  Â  <to uri=""zip_out""/>
Â  Â  </split>
</route> 



The log:




2023-11-07 17:41:41.400 ERROR 1 --- [p1242793343-101] o.a.d.b.e.ID_6537e1053fad4b0013000109 Â  Â : Failed delivery for (MessageId: A531BE75947BFB1-000000000000037D on ExchangeId: A531BE75947BFB1-000000000000037D). Exhausted after delivery attempt: 1 caught: org.apache.camel.StreamCacheException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@3e6184af due to org.apache.camel.TypeConversionException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache withvalue org.assimbly.archive.ZipInputStreamWrapper@3e6184af due to java.io.IOException: Stream closed. Processed by failure processor: FatalFallbackErrorHandler[Channel[setExchangePattern76]]Message History
---------------------------------------------------------------------------------------------------------------------------------------
Source Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ID Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Processor Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Elapsed (ms)
xml:2 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ID_6537e1053fad4b0013000109-6d from[direct-vm://ID_654a65bc741e4f00070007da_test_ Â  Â  40341190
xml:8 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ID_6537e1053fad4b0013000109-6d direct-vm:ID_654a65bc741e4f00070007da_test_6df7e1e Â  Â  Â  Â  Â  Â 0
xml:5 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â onException138/setExchangePatt setExchangePattern[InOnly] Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 0Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
Â  Â  Â  Â  Id Â  Â  Â  Â  Â  Â  Â  Â  Â A531BE75947BFB1-000000000000037D
Â  Â  Â  Â  Headers Â  Â  Â  Â  Â  Â  {Accept=*/*, breadcrumbId=A531BE75947BFB1-000000000000037B, CamelFileName=enrich3.txt, CamelRedelivered=false, CamelRedeliveryCounter=0, CamelServletContextPath=/regressiontests/ArchiveUnpack, Connection=close, Content-Length=1070, Content-Type=application/zip, Host=assimbly-test:9001, User-Agent=curl/7.84.0, zipFileName=enrich3.txt}
Â  Â  Â  Â  BodyType Â  Â  Â  Â  Â  Â org.assimbly.archive.ZipInputStreamWrapper
Â  Â  Â  Â  Body Â  Â  Â  Â  Â  Â  Â  Â [Body is instance of java.io.InputStream]
]Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.StreamCacheException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@3e6184af due to org.apache.camel.TypeConversionException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@3e6184af due to java.io.IOException:Stream closed
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:936)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:887)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:335)
Â  Â  Â  Â  at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:829)
Â  Â  Â  Â  at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:737)
Â  Â  Â  Â  at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
Â  Â  Â  Â  at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
Â  Â  Â  Â  at org.apache.camel.processor.Pipeline.process(Pipeline.java:165)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392)
Â  Â  Â  Â  at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:245)
Â  Â  Â  Â  at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:130)
Â  Â  Â  Â  at javax.servlet.http.HttpServlet.service(HttpServlet.java:590)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:799)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1656)
Â  Â  Â  Â  at org.apache.camel.component.jetty.MultiPartFilter.doFilter(MultiPartFilter.java:50)
Â  Â  Â  Â  at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:49)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1626)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:552)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1440)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:505)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1355)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
Â  Â  Â  Â  at org.eclipse.jetty.server.Server.handle(Server.java:516)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:487)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:732)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:479)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:277)
Â  Â  Â  Â  at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
Â  Â  Â  Â  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
Â  Â  Â  Â  at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.onFillable(SslConnection.java:555)
Â  Â  Â  Â  at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:410)
Â  Â  Â  Â  at org.eclipse.jetty.io.ssl.SslConnection$2.succeeded(SslConnection.java:164)
Â  Â  Â  Â  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
Â  Â  Â  Â  at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:409)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:883)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1034)
Â  Â  Â  Â  at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@3e6184af due to java.io.IOException: Stream closed
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.convertTo(StreamCacheBulkConverterLoader.java:60)
Â  Â  Â  Â  at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:462)
Â  Â  Â  Â  at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:358)
Â  Â  Â  Â  at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:202)
Â  Â  Â  Â  at org.apache.camel.impl.engine.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:222)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:929)
Â  Â  Â  Â  ... 46 common frames omitted
Caused by: java.io.IOException: Stream closed
Â  Â  Â  Â  at java.base/java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:176)
Â  Â  Â  Â  at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:342)
Â  Â  Â  Â  at java.base/java.io.FilterInputStream.read(FilterInputStream.java:107)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copy(IOHelper.java:193)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copy(IOHelper.java:161)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copy(IOHelper.java:156)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:229)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:225)
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(StreamCacheConverter.java:54)
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.doConvertTo(StreamCacheBulkConverterLoader.java:78)
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.convertTo(StreamCacheBulkConverterLoader.java:51)
Â  Â  Â  Â  ... 51 common frames omitted2023-11-07 17:41:41.411 Â WARN 1 --- [ dispatcher 447] org.elasticsearch.client.RestClient Â  Â  Â : request [POST http://flux-es-test:9200/logs/_doc] returned 1 warnings: [299 Elasticsearch-7.17.3-5ad023604c8d7416c9eb6c0eadb62b14e766caff ""Elasticsearch built-in security features are not enabled. Without authentication, your cluster could beaccessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.""]
2023-11-07 17:41:41.420 Â WARN 1 --- [ dispatcher 451] org.elasticsearch.client.RestClient Â  Â  Â : request [POST http://flux-es-test:9200/transactions/_doc] returned 1 warnings: [299 Elasticsearch-7.17.3-5ad023604c8d7416c9eb6c0eadb62b14e766caff ""Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.""]
2023-11-07 17:41:41.421 ERROR 1 --- [p1242793343-101] o.a.d.b.e.ID_6537e1053fad4b0013000109 Â  Â : Failed delivery for (MessageId: A531BE75947BFB1-000000000000037E on ExchangeId: A531BE75947BFB1-000000000000037E). Exhausted after delivery attempt: 1 caught: org.apache.camel.StreamCacheException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@40da9800 due to org.apache.camel.TypeConversionException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache withvalue org.assimbly.archive.ZipInputStreamWrapper@40da9800 due to java.io.IOException: Stream closed. Processed by failure processor: FatalFallbackErrorHandler[Channel[setExchangePattern76]]Message History
---------------------------------------------------------------------------------------------------------------------------------------
Source Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ID Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Processor Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â Elapsed (ms)
xml:2 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ID_6537e1053fad4b0013000109-6d from[direct-vm://ID_654a65bc741e4f00070007da_test_ Â  Â  40341210
xml:8 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ID_6537e1053fad4b0013000109-6d direct-vm:ID_654a65bc741e4f00070007da_test_6df7e1e Â  Â  Â  Â  Â  Â 0
xml:5 Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â onException138/setExchangePatt setExchangePattern[InOnly] Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â 0Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
Â  Â  Â  Â  Id Â  Â  Â  Â  Â  Â  Â  Â  Â A531BE75947BFB1-000000000000037E
Â  Â  Â  Â  Headers Â  Â  Â  Â  Â  Â  {Accept=*/*, breadcrumbId=A531BE75947BFB1-000000000000037B, CamelFileName=enrich2.txt, CamelRedelivered=false, CamelRedeliveryCounter=0, CamelServletContextPath=/regressiontests/ArchiveUnpack, Connection=close, Content-Length=1070, Content-Type=application/zip, Host=assimbly-test:9001, User-Agent=curl/7.84.0, zipFileName=enrich2.txt}
Â  Â  Â  Â  BodyType Â  Â  Â  Â  Â  Â org.assimbly.archive.ZipInputStreamWrapper
Â  Â  Â  Â  Body Â  Â  Â  Â  Â  Â  Â  Â [Body is instance of java.io.InputStream]
]Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------org.apache.camel.StreamCacheException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@40da9800 due to org.apache.camel.TypeConversionException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@40da9800 due to java.io.IOException:Stream closed
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:936)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:887)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:335)
Â  Â  Â  Â  at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:829)
Â  Â  Â  Â  at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:737)
Â  Â  Â  Â  at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
Â  Â  Â  Â  at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
Â  Â  Â  Â  at org.apache.camel.processor.Pipeline.process(Pipeline.java:165)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392)
Â  Â  Â  Â  at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:245)
Â  Â  Â  Â  at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:130)
Â  Â  Â  Â  at javax.servlet.http.HttpServlet.service(HttpServlet.java:590)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:799)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler$ChainEnd.doFilter(ServletHandler.java:1656)
Â  Â  Â  Â  at org.apache.camel.component.jetty.MultiPartFilter.doFilter(MultiPartFilter.java:50)
Â  Â  Â  Â  at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:49)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.FilterHolder.doFilter(FilterHolder.java:193)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler$Chain.doFilter(ServletHandler.java:1626)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:552)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:233)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1440)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:188)
Â  Â  Â  Â  at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:505)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:186)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1355)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
Â  Â  Â  Â  at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:127)
Â  Â  Â  Â  at org.eclipse.jetty.server.Server.handle(Server.java:516)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.lambda$handle$1(HttpChannel.java:487)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.dispatch(HttpChannel.java:732)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:479)
Â  Â  Â  Â  at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:277)
Â  Â  Â  Â  at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311)
Â  Â  Â  Â  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
Â  Â  Â  Â  at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.onFillable(SslConnection.java:555)
Â  Â  Â  Â  at org.eclipse.jetty.io.ssl.SslConnection.onFillable(SslConnection.java:410)
Â  Â  Â  Â  at org.eclipse.jetty.io.ssl.SslConnection$2.succeeded(SslConnection.java:164)
Â  Â  Â  Â  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:105)
Â  Â  Â  Â  at org.eclipse.jetty.io.ChannelEndPoint$1.run(ChannelEndPoint.java:104)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:338)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:315)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:173)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:131)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:409)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:883)
Â  Â  Â  Â  at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:1034)
Â  Â  Â  Â  at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: org.assimbly.archive.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.assimbly.archive.ZipInputStreamWrapper@40da9800 due to java.io.IOException: Stream closed
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.convertTo(StreamCacheBulkConverterLoader.java:60)
Â  Â  Â  Â  at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:462)
Â  Â  Â  Â  at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:358)
Â  Â  Â  Â  at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:202)
Â  Â  Â  Â  at org.apache.camel.impl.engine.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:222)
Â  Â  Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:929)
Â  Â  Â  Â  ... 46 common frames omitted
Caused by: java.io.IOException: Stream closed
Â  Â  Â  Â  at java.base/java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:176)
Â  Â  Â  Â  at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:342)
Â  Â  Â  Â  at java.base/java.io.FilterInputStream.read(FilterInputStream.java:107)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copy(IOHelper.java:193)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copy(IOHelper.java:161)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copy(IOHelper.java:156)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:229)
Â  Â  Â  Â  at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:225)
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(StreamCacheConverter.java:54)
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.doConvertTo(StreamCacheBulkConverterLoader.java:78)
Â  Â  Â  Â  at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.convertTo(StreamCacheBulkConverterLoader.java:51)
Â  Â  Â  Â  



If you need more input or testing let me know.",
0,CAMEL-20089,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-11-07 10:05:09+00:00,2023-11-07 17:08:46+00:00,"We have a very high incidence of problems in the camel-kafka component that are related to the breakOnFirstError flag.


Looking at the tickets related to this issue it seems to me that different uses have different expectations about how the component should behave in terms of polling, rolling back, and/or future processing. 


In short: this flag is leading to a lot of confusion and we should investigate how we can flexibilize the behavior of the Kafka component under those circumstances and let the users choose more freely the behavior that is suitable to their needs.","g1antfan:1699335700:2023-11-07T13:41:40.281+0000:1699335838:2023-11-07T13:43:58.317+0000:I do think it is important for Camel to have a flag to allow a route stop moving forward thru the messages in a partition when an error occurs (or to keep going). This flag does that. What is interesting is that it tries to do more than that.Â 

One observation regarding _breakOnFirstError_ is that it does attempt to retry the message automatically (at least once). In the current implementation there doesn't seem to be a way to override that behavior and it seems to have created several issues.

I propose that if Â _breakOnFirstError && allowManualCommit_Â that Camel would do just unsubscribe and resubscribe. This would delegate how to handle the error (retry or no retry) to the Camel route and how the implementation commits or doesn't commit the offset.Â 

Perhaps a 2nd flag ({_}breakOnFirstErrorWithRetry{_}) could be added if that isn't the way to go. Then the _KafkaRecordProcessor_ could do a check like _breakOnFirstError &&_Â _breakOnFirstErrorWithRetry_ before forcing the commit which causes the retry
orpiske:1699348070:2023-11-07T17:07:50.720+0000:1699348126:2023-11-07T17:08:46.085+0000:So, what I am thinking here is how we can give the users the same flexibility without an explosion of flags and/or flags combinations. 

I am considering - and this is by all means, just a an idea for now - whether we could replace some of these combinations with an error policy (or something like that) so that users can ""plug"" their own handler. Naturally, we would provide a few of those with the legacy behaviors, but users in need of more complex behaviors, could have just that. 

So, instead of having a flag {{breakOnFirstError}} we would have something like {{onError=BreakOnFirstPolicy}} or {{onError=ResubscribePolicy}} or {{onError=#bean:CustomErrorPolicyBean}}, etc.  "
0,CAMEL-20088,New Feature,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-07 08:39:19+00:00,2023-11-07 09:53:55+00:00,"In Camel-Kamelets we have a particular class to deal with the authentication of Azure Schema Registry. Instead of polluting the Camel-Kamelets repository, we should start to create specialized components (like camel-headersmap, so non-classical component) for Schema Registries, so we could simply re-use some logic in the Kamelets and in other flavors if needed.",
0,CAMEL-20087,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Christoph Deppisch,Christoph Deppisch,0,3,2023-11-07 08:02:22+00:00,2023-11-09 11:55:45+00:00,"The camel-kamelets-utils library (https://github.com/apache/camel-kamelets/tree/main/library/camel-kamelets-utils/src/main/java/org/apache/camel/kamelets/utils/format/converter) provides several data type implementations that can be used as declarative data transformations.


Data types are not bound to Kamelets anymore but can be used in all Camel routes. We should move these implementations to the respective Camel components in the Camel repository in order to also leverage the automatic meta data generation for these data types.","davsclaus:1699500784:2023-11-09T11:33:04.974+0000:1699500784:2023-11-09T11:33:04.974+0000:Is there more PRs on the way?
acosentino:1699502145:2023-11-09T11:55:45.313+0000:1699502145:2023-11-09T11:55:45.313+0000:This is done. With [~christophd] we would like to move also the bits related to kafka transformation and processors, directly in kafka component, but it could be for 4.3.0 LTS."
0,CAMEL-20086,Bug,Minor,4.1.0,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Christoph Deppisch,Christoph Deppisch,0,2,2023-11-07 07:43:38+00:00,2023-11-09 12:58:19+00:00,"Camel JBang allows to specify a custom Camel version with camel-version setting. When the user at the same time specifies a custom --kamelets-version setting this setting is lost while applying the custom Camel version.


We need to make sure to not loose the custom kamelets-version setting in this scenario.",davsclaus:1699321247:2023-11-07T09:40:47.158+0000:1699321247:2023-11-07T09:40:47.158+0000:Can you backport to 4.0.x branch
0,CAMEL-20085,Improvement,Major,3.21.1,4.2.0,"
None
",Resolved,Fixed,4.2.0,Simon Rasmussen,Simon Rasmussen,0,2,2023-11-06 12:39:26+00:00,2023-11-09 11:32:34+00:00,"We have observed that SQS based consumers throws an exception which is not handled by the exception handler, this causes a verbose error in the logs. We should catch that exception directly and print a warn using the error handler which can then be bridged as any other exception.




2023-11-04 12:10:20.351Â  WARN 11 --- [ebhook_incoming] o.apache.camel.support.UnitOfWorkHelperÂ  : [] Exception occurred during onCompletion. This exception will be ignored. software.amazon.awssdk.core.exception.SdkClientException: Unable to execute HTTP request: Connection reset by peer at software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:111) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.exception.SdkClientException.create(SdkClientException.java:47) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.utils.RetryableStageHelper.setLastException(RetryableStageHelper.java:223) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:83) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:36) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:56) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:36) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(ApiCallTimeoutTrackingStage.java:80) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:60) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:42) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(ApiCallMetricCollectionStage.java:48) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(ApiCallMetricCollectionStage.java:31) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:37) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:26) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(AmazonSyncHttpClient.java:193) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(BaseSyncClientHandler.java:103) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(BaseSyncClientHandler.java:171) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.lambda$execute$1(BaseSyncClientHandler.java:82) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.measureApiCallSuccess(BaseSyncClientHandler.java:179) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:76) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:56) ~[aws-core-2.20.99.jar:na] at software.amazon.awssdk.services.sqs.DefaultSqsClient.deleteMessage(DefaultSqsClient.java:652) ~[sqs-2.20.99.jar:na] at org.apache.camel.component.aws2.sqs.Sqs2Consumer.processCommit(Sqs2Consumer.java:254) ~[camel-aws2-sqs-3.21.1.jar:3.21.1] at org.apache.camel.component.aws2.sqs.Sqs2Consumer$2.onComplete(Sqs2Consumer.java:217) ~[camel-aws2-sqs-3.21.1.jar:3.21.1] at org.apache.camel.support.UnitOfWorkHelper.doneSynchronization(UnitOfWorkHelper.java:98) ~[camel-support-3.21.1.jar:3.21.1] at org.apache.camel.support.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:87) ~[camel-support-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.DefaultUnitOfWork.done(DefaultUnitOfWork.java:266) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.support.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:55) ~[camel-support-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:782) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:717) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.CamelInternalProcessor$AsyncAfterTask.done(CamelInternalProcessor.java:255) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.AsyncCallback.run(AsyncCallback.java:44) ~[camel-api-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.processor.Pipeline.process(Pipeline.java:165) ~[camel-core-processor-3.21.1.jar:3.21.1] at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:390) ~[camel-base-engine-3.21.1.jar:3.21.1] at org.apache.camel.component.aws2.sqs.Sqs2Consumer.processBatch(Sqs2Consumer.java:233) ~[camel-aws2-sqs-3.21.1.jar:3.21.1] at org.apache.camel.component.aws2.sqs.Sqs2Consumer.poll(Sqs2Consumer.java:123) ~[camel-aws2-sqs-3.21.1.jar:3.21.1] at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202) ~[camel-support-3.21.1.jar:3.21.1] at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116) ~[camel-support-3.21.1.jar:3.21.1] at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) ~[na:na] at java.base/java.util.concurrent.FutureTask.runAndReset(Unknown Source) ~[na:na] at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source) ~[na:na] at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) ~[na:na] at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) ~[na:na] at java.base/java.lang.Thread.run(Unknown Source) ~[na:na] Suppressed: software.amazon.awssdk.core.exception.SdkClientException: Request attempt 1 failure: Unable to execute HTTP request: Connection reset by peer Suppressed: software.amazon.awssdk.core.exception.SdkClientException: Request attempt 2 failure: Unable to execute HTTP request: Connection reset by peer Suppressed: software.amazon.awssdk.core.exception.SdkClientException: Request attempt 3 failure: Unable to execute HTTP request: Connection reset by peerCaused by: java.net.SocketException: Connection reset by peer at java.base/sun.nio.ch.NioSocketImpl.implWrite(Unknown Source) ~[na:na] at java.base/sun.nio.ch.NioSocketImpl.write(Unknown Source) ~[na:na] at java.base/sun.nio.ch.NioSocketImpl$2.write(Unknown Source) ~[na:na] at java.base/java.net.Socket$SocketOutputStream.write(Unknown Source) ~[na:na] at java.base/sun.security.ssl.SSLSocketOutputRecord.flush(Unknown Source) ~[na:na] at java.base/sun.security.ssl.HandshakeOutStream.flush(Unknown Source) ~[na:na] at java.base/sun.security.ssl.ClientHello$ClientHelloKickstartProducer.produce(Unknown Source) ~[na:na] at java.base/sun.security.ssl.SSLHandshake.kickstart(Unknown Source) ~[na:na] at java.base/sun.security.ssl.ClientHandshakeContext.kickstart(Unknown Source) ~[na:na] at java.base/sun.security.ssl.TransportContext.kickstart(Unknown Source) ~[na:na] at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source) ~[na:na] at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(Unknown Source) ~[na:na] at org.apache.http.conn.ssl.SSLConnectionSocketFactory.createLayeredSocket(SSLConnectionSocketFactory.java:436) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.conn.ssl.SSLConnectionSocketFactory.connectSocket(SSLConnectionSocketFactory.java:384) ~[httpclient-4.5.14.jar:4.5.14] at software.amazon.awssdk.http.apache.internal.conn.SdkTlsSocketFactory.connectSocket(SdkTlsSocketFactory.java:65) ~[apache-client-2.20.99.jar:na] at org.apache.http.impl.conn.DefaultHttpClientConnectionOperator.connect(DefaultHttpClientConnectionOperator.java:142) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.connect(PoolingHttpClientConnectionManager.java:376) ~[httpclient-4.5.14.jar:4.5.14] at software.amazon.awssdk.http.apache.internal.conn.ClientConnectionManagerFactory$DelegatingHttpClientConnectionManager.connect(ClientConnectionManagerFactory.java:86) ~[apache-client-2.20.99.jar:na] at org.apache.http.impl.execchain.MainClientExec.establishRoute(MainClientExec.java:393) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:236) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83) ~[httpclient-4.5.14.jar:4.5.14] at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.14.jar:4.5.14] at software.amazon.awssdk.http.apache.internal.impl.ApacheSdkHttpClient.execute(ApacheSdkHttpClient.java:72) ~[apache-client-2.20.99.jar:na] at software.amazon.awssdk.http.apache.ApacheHttpClient.execute(ApacheHttpClient.java:254) ~[apache-client-2.20.99.jar:na] at software.amazon.awssdk.http.apache.ApacheHttpClient.access$500(ApacheHttpClient.java:104) ~[apache-client-2.20.99.jar:na] at software.amazon.awssdk.http.apache.ApacheHttpClient$1.call(ApacheHttpClient.java:231) ~[apache-client-2.20.99.jar:na] at software.amazon.awssdk.http.apache.ApacheHttpClient$1.call(ApacheHttpClient.java:228) ~[apache-client-2.20.99.jar:na] at software.amazon.awssdk.core.internal.util.MetricUtils.measureDurationUnsafe(MetricUtils.java:63) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.MakeHttpRequestStage.executeHttpRequest(MakeHttpRequestStage.java:77) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.MakeHttpRequestStage.execute(MakeHttpRequestStage.java:56) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.MakeHttpRequestStage.execute(MakeHttpRequestStage.java:39) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(ApiCallAttemptTimeoutTrackingStage.java:72) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(ApiCallAttemptTimeoutTrackingStage.java:42) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(TimeoutExceptionHandlingStage.java:78) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(TimeoutExceptionHandlingStage.java:40) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(ApiCallAttemptMetricCollectionStage.java:52) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(ApiCallAttemptMetricCollectionStage.java:37) ~[sdk-core-2.20.99.jar:na] at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:81) ~[sdk-core-2.20.99.jar:na] ... 46 common frames omitted","davsclaus:1699318125:2023-11-07T08:48:45.174+0000:1699318125:2023-11-07T08:48:45.174+0000:You are welcome to send a PR
smox:1699400806:2023-11-08T07:46:46.566+0000:1699400806:2023-11-08T07:46:46.566+0000:I looked into this issue, and it turns out that my original description was incorrect. I will make a PR to just catch this exception and let the error handler in the consumer deal with it. I also changed this from a bug to an improvement as I see no need to backport this as there is nothing functionally incorrect about how it works now.
davsclaus:1699500754:2023-11-09T11:32:34.920+0000:1699500754:2023-11-09T11:32:34.920+0000:ok"
0,CAMEL-20084,Task,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-06 09:21:18+00:00,2023-11-21 08:49:48+00:00,No Desc,
0,CAMEL-20083,New Feature,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-05 10:21:37+00:00,2023-11-11 16:04:43+00:00,You have to configure this via Java code today. But we should make it possible to configure in application.properties (like you can do for SB),
0,CAMEL-20082,New Feature,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-05 09:22:31+00:00,2023-11-09 11:44:29+00:00,"We need to make it easier to have javaagents supported with jbang export so users can more easily have OTel and other agents included.


For example the official doc for OTel
https://opentelemetry.io/docs/instrumentation/java/automatic/",
0,CAMEL-20081,Improvement,Minor,None,4.2.0,"

camel-dynamic-router-eip-component

",Resolved,Fixed,4.2.0,Steve Storck,Steve Storck,0,2,2023-11-04 13:36:21+00:00,2023-11-11 15:52:57+00:00,"When the dynamic router sends a message to one or more routing participants, it currently uses a custom implementation that was intended to be a simplified version of the multicast processor.Â  It would be better to make use of the existing multicast processor so that the dynamic router component can benefit from changes and improvements made to that core processor.","davsclaus:1699577326:2023-11-10T08:48:46.562+0000:1699577326:2023-11-10T08:48:46.562+0000:Steve, can you send a PR to update the doc at
https://github.com/apache/camel/blob/main/docs/user-manual/modules/ROOT/pages/camel-4x-upgrade-guide-4_2.adoc

with some details about camel-dynamic-router has been refactored and what end users may be aware of when upgrading.
Steve973:1699677430:2023-11-11T12:37:10.080+0000:1699677430:2023-11-11T12:37:10.080+0000:[~davsclaus] It's there now, as requested."
0,CAMEL-20080,Improvement,Minor,4.0.0,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Raymond,0,2,2023-11-04 10:44:20+00:00,2023-11-09 13:06:23+00:00,"Based on this thread on the mailing list:


https://lists.apache.org/thread/gkzpjsrdxwrc2jsh82vp92dzdlympjtf


I create this issue to improve the migration guide from Camel 3.0 to 4.0


In Camel 3 this code could be used:




ManagedCamelContext managed = context.getExtension(ManagedCamelContext.class);



The ""getExtension()"" method is however not part of the CamelContext class in Camel 4. This is not documented in the migration code to Camel4, as well as what alternative can be used.


I think the following does the same (not sure):




ManagedCamelContext managed = context.getCamelContextExtension().getContextPlugin(ManagedCamelContext.class);



To be honest it would nice if the ManagedCamelContext could either be accessible directly from the CamelContext (similar to getCamelContextExtension) or the PluginHelper. Something like:




context.getManagedCamelContext();




or




PluginHelper.getManagedCamelContext(); 



Another note as mentioned on the mailing list. The API changes in the migration guide could be improved for removed/add/changed methods. It may be clearer to put them in a table, with one column (add / removed /changed), a column with old syntax and a column with the new syntax (if applicable).","davsclaus:1699144254:2023-11-05T08:30:54.521+0000:1699144254:2023-11-05T08:30:54.521+0000:You are welcome to help improve the doc and send a PR
skin27:1699147333:2023-11-05T09:22:13.618+0000:1699149582:2023-11-05T09:59:42.663+0000:Happy to do it, but can you check the new syntax for this in Camel4. Is this correct?
{code:java}
ManagedCamelContext managed = context.getCamelContextExtension().getContextPlugin(ManagedCamelContext.class);
{code}
I thought of this solution myself, but not sure. I don't want to put a wrong alternative in the migration guide.
davsclaus:1699324844:2023-11-07T10:40:44.492+0000:1699324844:2023-11-07T10:40:44.492+0000:Yes that is correct, you get the ""thing"" asking via its class name like above.

davsclaus:1699506383:2023-11-09T13:06:23.518+0000:1699506383:2023-11-09T13:06:23.518+0000:Thanks for the help - updated the doc a bit more.

More PRs is welome, just send them without creating a JIRA"
0,CAMEL-20079,Bug,Minor,"4.0.1, 4.1.0","3.20.9, 3.21.3, 3.22.0, 4.0.3, 4.2.0","
None
",Resolved,Fixed,"3.20.9, 3.21.3, 3.22.0, 4.0.3, 4.2.0",Karen Lease,Karen Lease,0,2,2023-11-03 21:01:50+00:00,2023-11-07 15:12:41+00:00,"The method addHeaderNameMethod() removes the ""Camel"" prefix from the header name which it uses for the method name, for example ""fileName()"". But it also returns this value as the header name which is not correct.","nfilotto:1699235675:2023-11-06T09:54:35.552+0000:1699235675:2023-11-06T09:54:35.552+0000:Thx for reporting this issue and submitting a PR for it. Would you mind proposing a backport for all LTS versions (4.0, 3.22, 3.21, 3.20)?
klease78:1699239415:2023-11-06T10:56:55.718+0000:1699239415:2023-11-06T10:56:55.718+0000:Sure, I can do that."
0,CAMEL-20078,New Feature,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-03 17:33:52+00:00,2023-11-03 18:38:02+00:00,To make it easy to do Camel route debugging from jbang,
0,CAMEL-20077,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-03 09:18:35+00:00,2023-11-03 18:48:55+00:00,"When using message history to capture the path a message is taking, then it should be captured after the debugger, otherwise if debugging and using breakpoints, then the end user delay is affecting the message history elapsed time. As a user you want the processing time and not the include the user wait time until he/she press continue in the debugger.",
0,CAMEL-20076,Bug,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-03 08:09:45+00:00,2023-11-04 16:37:29+00:00,https://github.com/apache/camel-karavan/issues/724#issuecomment-1791296444,davsclaus:1699087049:2023-11-04T16:37:29.840+0000:1699087049:2023-11-04T16:37:29.840+0000:This has already been implemented
0,CAMEL-20075,Dependency upgrade,Minor,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Claus Ibsen,0,1,2023-11-02 15:10:53+00:00,2023-11-02 17:31:13+00:00,No Desc,
0,CAMEL-20074,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-02 14:29:37+00:00,2023-11-02 17:30:53+00:00,No Desc,
0,CAMEL-20073,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-02 14:28:02+00:00,2023-11-02 17:31:01+00:00,No Desc,
0,CAMEL-20072,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-02 14:25:43+00:00,2023-11-02 17:31:04+00:00,No Desc,
0,CAMEL-20071,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-02 14:19:47+00:00,2023-11-03 18:38:13+00:00,"Currently ids are assigned later, and this causes the backlog debugger to not be able to setup breakpoints on startup.",
0,CAMEL-20070,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-11-02 12:16:53+00:00,2023-11-03 14:46:28+00:00,"In some cases, we can eagerly determine that some types are not convertible. This can happen when both the from and the that from types are the same, but their to's don't, because we only use the from types to compute the match.


This should save a few cycles when dealing with the worst case scenarios.",
0,CAMEL-20069,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-11-02 09:29:05+00:00,2023-11-02 17:31:08+00:00,No Desc,
0,CAMEL-20068,Bug,Minor,3.20.6,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,John Yin,0,2,2023-11-01 17:22:52+00:00,2023-12-28 22:23:06+00:00,"We have experienced this issue intermittently.Â  The location header from a CXF response is dropped before the message is passed to a Camel processor.Â  We can see the header in the log written by CXF, but by the time our Camel processor tries to retrieve it, it is not there anymore.Â  This only happens intermittently.Â  For most messages, the location header is not dropped.


Here is a sample (first is the response logged by CXF, then the log written by the Camel processor):


2023-10-31 09:08:04.309 [default-workqueue-3] LoggingInInterceptor - Inbound Message
----------------------------
ID: 45410
Response-Code: 201
Encoding: ISO-8859-1
Content-Type:Â 
Headers: {connection=[keep-alive], Content-Length=[0], content-security-policy=[frame-ancestors 'self'], date=[Tue, 31 Oct 2023 13:08:04 GMT], expires=[Thu, 01 Jan 1970 00:00:00 GMT], location=https://xxxxxxxxx.yyyyyy.com/api/arsys/v1/entry/HPD:IncidentInterface_Create/000000014986719, set-cookie=[route=1698757683.652.47992.895817; Path=/; HttpOnly, _cacheId=10924818, onbmc_pool=!Y0P+L7SOcB8UZmgyj6MhDh3vM3mAVYyEh7V+2//DSUv/YDSD/RBP7XekWn3xkkSBaZ8EZbs3xRZhzw==; path=/; Httponly], status=[200], x-ar-tr-core-id=[Ekke3dbjQSakiDkQGwsGDg], x-ar-tr-counter=[1], x-content-type-options=[nosniff], x-frame-options=[SAMEORIGIN], x-xss-protection=[1; mode=block]}


2023-10-31 09:08:04.310 [default-workqueue-3] ProcessAndStoreCustRespProc - ---INFO--- location header:Â 


Â 


But the processor immediately after the return of the HTTP call in the route could not find the location header in the Camel message headers.Â 


Â 


We are using Camel 3.20.6 with CXF 3.6.2.


Â 


Thanks in advance for looking into this.","davsclaus:1698838316:2023-11-01T19:31:56.562+0000:1698838316:2023-11-01T19:31:56.562+0000:Can you put together a reproducer or something that is more practical - otherwise its hard to help you.

bocamel:1698860273:2023-11-02T01:37:53.195+0000:1698860273:2023-11-02T01:37:53.195+0000:I attached a project rest-cxf.7z (modeled after the Camel rest-cxf example) to help to illustrate the issue.Â  The project has one CXFRS endpoint to receive HTTP POST in one route.Â  The route returns HTTP 201 with a location header.Â  The project has another route that sends HTTP POST requests repeatedly to the endpoint and checks for the location header in the response.Â  If the location header is missing, it will throw an exception.Â  I was not able to use this to reproduce the issue (after sending the message a few hundreds of times), as the issue is intermittent and happens once every few days in a heavy traffic production environment.Â  I was hoping that someone had seen something similar to this before.
davsclaus:1703376861:2023-12-24T08:14:21.032+0000:1703376861:2023-12-24T08:14:21.032+0000:Okay I am sorry we cannot reproduce this either, and dont have time to deep investigations. You can try with newer versions of CXF and Camel. Camel 3.x is winding down, and we focus on 4.x now.
bocamel:1703773386:2023-12-28T22:23:06.039+0000:1703773386:2023-12-28T22:23:06.039+0000:Thanks for taking time reviewing this!Â  I will try 4.0.3 and report the result.

Â 

Happy New Year!"
0,CAMEL-20067,Improvement,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Claus Ibsen,Claus Ibsen,0,1,2023-11-01 07:31:30+00:00,2023-11-17 14:20:37+00:00,"We have a standby option for tracing. We could consider having the same for debugging, that makes it easier to enable the debugger on demand on an existing running integration.
There is a little overhead of having it standby - like a tracer would be.","davsclaus:1700187957:2023-11-17T10:25:57.517+0000:1700202037:2023-11-17T14:20:37.326+0000:TODO: add option to spring boot *DONE*
TODO: docs *DONE*"
0,CAMEL-20066,Task,Minor,None,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Claus Ibsen,Aneta Cadova,0,1,2023-10-31 12:53:13+00:00,2023-11-06 08:39:04+00:00,"We are missing example codes in camel-language component.


The section where the examples are missing:


https://camel.apache.org/components/next/language-component.html#_loading_scripts_from_resources",
0,CAMEL-20065,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-31 12:49:14+00:00,2023-11-03 18:49:15+00:00,"To separate the impl from the api, its better to make it a SPI that makes debugging better for tooling",
0,CAMEL-20064,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-31 08:02:33+00:00,2023-11-03 18:38:26+00:00,"To configure the debugger, you can only turn it on or off. But it has more options, and it would be good to make it first-class to configure them via camel-main with a new camel.debug.xxx group.",
0,CAMEL-20063,Dependency upgrade,Minor,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Claus Ibsen,0,1,2023-10-31 07:41:54+00:00,2023-10-31 18:02:34+00:00,No Desc,
0,CAMEL-20032,Bug,Minor,4.0.1,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Claus Ibsen,Claus Ibsen,0,1,2023-10-23 13:00:21+00:00,2023-10-23 13:14:23+00:00,No Desc,
0,CAMEL-20031,Bug,Minor,None,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Claus Ibsen,Ricardo Martinez,0,1,2023-10-23 09:43:12+00:00,2023-10-23 10:01:27+00:00,"the Camel YAML DSL two properties with the same title:





Property
Title
Description


id
Id
Sets the id of this node


description
Id
Sets the id of this node





Â 


whereas `description` should have an appropriate title and description.",
0,CAMEL-20030,Task,Minor,None,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Unassigned,Lucia DrozdovÃ¡,0,1,2023-10-23 07:40:47+00:00,2023-10-23 14:51:56+00:00,The link to Saxon doc in https://camel.apache.org/components/next/xslt-saxon-component.html#_using_saxon_extension_functions is not working.,
0,CAMEL-20029,Task,Minor,None,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Unassigned,Lucia DrozdovÃ¡,0,2,2023-10-23 07:23:58+00:00,2023-10-31 13:01:33+00:00,"We are missing example codes in camel-language component.


The sections where the examples are missing:


https://camel.apache.org/components/next/language-component.html#_examples


https://camel.apache.org/components/next/language-component.html#_loading_scripts_from_resources",
0,CAMEL-20028,Bug,Minor,"3.20.7, 3.21.1, 4.0.1, 4.1.0","3.20.8, 3.21.3, 3.22.0, 4.0.3, 4.2.0","
None
",Resolved,Fixed,"3.20.8, 3.21.3, 3.22.0, 4.0.3, 4.2.0",Claus Ibsen,Benjamin Graf,0,2,2023-10-23 07:19:09+00:00,2023-10-23 18:19:33+00:00,Fix from CAMEL-6045 seems to be broken again. Filename != null and disposition == null is evaluated to skip attaching mail attachment to Exchange.,"davsclaus:1698017642:2023-10-23T07:34:02.070+0000:1698017642:2023-10-23T07:34:02.070+0000:You are welcome to send a PR to attempt to fix this, and if possible with unit test
davsclaus:1698017686:2023-10-23T07:34:46.080+0000:1698017686:2023-10-23T07:34:46.080+0000:Also test with v4 if you can
graben:1698019061:2023-10-23T07:57:41.001+0000:1698019061:2023-10-23T07:57:41.001+0000:I'm working on it :)
graben:1698031090:2023-10-23T11:18:10.949+0000:1698031090:2023-10-23T11:18:10.949+0000:Patch pull request is committed. Some test seems flaky on my local machine.
davsclaus:1698038428:2023-10-23T13:20:28.005+0000:1698038428:2023-10-23T13:20:28.005+0000:PR for camel-3.x is appreciated. We have applied this for v4 branches."
0,CAMEL-20027,Improvement,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-10-21 10:43:08+00:00,2023-10-21 10:43:13+00:00,"The changed that causes some problems has been reverted. See CAMEL-20023.


For users that want the ""new broken behaviour"" we could have a new option to set a minimum-wait-time.


This can be needed for users that copy files with preserve old timestamp, and the copy operation is slow and still in progress.


Then the minimum-wait-time can be used to keep cycling and detecting file changes (size) as the timestamp is preserved and stay constant.",
0,CAMEL-20026,Improvement,Minor,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,1,2023-10-21 09:59:00+00:00,2023-10-21 10:10:02+00:00,We have hardcoded version in the template files. We should allow to configure the version from application.properties,davsclaus:1697854202:2023-10-21T10:10:02.260+0000:1697854202:2023-10-21T10:10:02.260+0000:See the camel-jbang docs for details
0,CAMEL-20025,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Claus Ibsen,0,1,2023-10-20 19:08:54+00:00,2023-10-24 16:24:17+00:00,"All the aws components has to set region as option. Its a string type.
But the AWS client requests to map this to a Region enum class, that has hardcoded all known regions in the AWS SDK. There is about 40 regions in total.


We could make region a Region instead of String in the code, then it will be an enum automatic with those values. 


This makes tooling more friendly as they would show a list of enums to choose among.","davsclaus:1698056015:2023-10-23T18:13:35.314+0000:1698056015:2023-10-23T18:13:35.314+0000:Okay I think its better to just set enum = X, Y, Z in the metadata so tooling knows the list of possible. 
davsclaus:1698099296:2023-10-24T06:14:56.372+0000:1698099296:2023-10-24T06:14:56.372+0000:Yeah for the regen, we could have a little jbang script that calls Region.getRegions() and then lower-case and replace dot with dash, and then ,space with comma.


davsclaus:1698099330:2023-10-24T06:15:30.229+0000:1698099330:2023-10-24T06:15:30.229+0000:Yeah if you want then you are welcome to work on that, and add the enum to all the components, thanks."
0,CAMEL-20024,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-20 18:58:38+00:00,2023-10-21 09:57:58+00:00,"We should add docs for the new methods like factory method / constructors etc.
eg the model classes in the app package.","davsclaus:1697851166:2023-10-21T09:19:26.115+0000:1697851166:2023-10-21T09:19:26.115+0000:This requires some additional changes to how model files are generated and what we put in camel-catalog, to make this available for tooling and avoid clashes/problems with XML XSD generator for camel-spring-xml and camel-xml-io-dsl / camel-yaml-dsl"
0,CAMEL-20023,Bug,Major,"4.0.0, 4.0.1","4.0.2, 4.2.0","
None
",Resolved,Fixed,"4.0.2, 4.2.0",Claus Ibsen,Claus Ibsen,0,1,2023-10-20 15:06:22+00:00,2023-10-21 10:43:13+00:00,"https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/Camel-file-starter.20and.20readLockMinAge


There was a change that made something worse. We should revert to how it was before.",
0,CAMEL-20022,Task,Minor,None,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Tomohisa Igarashi,Tomohisa Igarashi,0,1,2023-10-20 14:45:58+00:00,2023-10-25 09:51:46+00:00,"kebab-case will be removed from runtime at some point, see CAMEL-20018


In the meantime, we can add WARN log when it detects the kebab-case in YAML DSL, and suggest to use camelCase.",
0,CAMEL-20021,Dependency upgrade,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-10-20 11:58:43+00:00,2023-10-20 11:58:43+00:00,"We have to much junk and stuff in parent/pom.xml for 3rd party dependencies. 


Some are only util dependencies used in a few components for some special testing etc.


parent is not a dumping place. Some dependencies like jackson, netty, loggers, and the likes are good to have.",
0,CAMEL-20020,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-10-20 11:55:09+00:00,2023-10-20 11:55:09+00:00,"There is already a bunch of methods for expectedXXX, and message.xxx.


Instead of some ad-hoc here and there in contributor PRs, then a general work must be done to look at what APIs can be added to benefit some use-cases where Camel users can do body/header checks from custom Java code via Lambdas or supplier etcs.


https://github.com/apache/camel/pull/11785",
0,CAMEL-20019,New Feature,Major,None,4.x,"
None
",Open,Unresolved,4.x,Jono Morris,Claus Ibsen,0,1,2023-10-20 11:07:44+00:00,2024-01-06 11:30:00+00:00,"Either we need to do something like we do with camel-base-http and the CookieHandler.
This also seems to be using the CookieManager from java.net. I am not sure if vertx uses that at all.


So its likely better to see what vertx-http have for cookie and use that
https://vertx.io/docs/vertx-web/java/#_handling_cookies",
0,CAMEL-20018,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-10-20 10:06:03+00:00,2023-10-25 09:50:08+00:00,"We only want to support same case for DSLs in YAML, XML, Java etc. Yaml DSL is the only special that had kebab-case and camelCase. However this is causing problems.","davsclaus:1697784027:2023-10-20T14:40:27.413+0000:1697784027:2023-10-20T14:40:27.413+0000:Lets see if we can detect runtime if kebab-case is in use and log a WARN about the migration need, and get this into 4.0.x patch releases and 4.2 onwards.
davsclaus:1697787053:2023-10-20T15:30:53.766+0000:1697787053:2023-10-20T15:30:53.766+0000:Kamelets need to be migrated also
https://github.com/apache/camel-kamelets/issues/1698
davsclaus:1698198608:2023-10-25T09:50:08.164+0000:1698198608:2023-10-25T09:50:08.164+0000:Lets keep WARN for a while and remove when we have migrated kamelets and whatelse"
0,CAMEL-20017,Bug,Minor,4.1.0,4.2.0,"
None
",Resolved,Fixed,4.2.0,Tomohisa Igarashi,Claus Ibsen,0,2,2023-10-20 06:57:02+00:00,2023-10-25 11:00:15+00:00,"The schema has it listed 2 times
https://github.com/apache/camel/blob/main/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/schema/camelYamlDsl.json#L854","davsclaus:1697764730:2023-10-20T09:18:50.417+0000:1697764730:2023-10-20T09:18:50.417+0000:Its because we still support the old dash style and its the only language that is affected

                    @YamlProperty(name = ""exchangeProperty"", type = ""object:org.apache.camel.model.language.ExchangePropertyExpression"", oneOf = ""expression""),
                    @YamlProperty(name = ""exchange-property"", type = ""object:org.apache.camel.model.language.ExchangePropertyExpression"", oneOf = ""expression""),

davsclaus:1698190291:2023-10-25T07:31:31.660+0000:1698190291:2023-10-25T07:31:31.660+0000:Is the fix easy to backport to 4.0.x ?
igarashitm:1698202815:2023-10-25T11:00:15.132+0000:1698202815:2023-10-25T11:00:15.132+0000:It turned out this exact problem (duplicate exchangeProperty) doesn't exist in 4.0.x branch. It was introduced with either one of several schema fixes which was done in 4.1, e.g. remove a kebab-case schema file, introducing `oneOf` for expressions, added `additionalProperties: false`."
0,CAMEL-20016,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Johannes BoÃle,0,1,2023-10-19 17:16:59+00:00,2023-10-19 18:02:55+00:00,"Saga processing with a lra-coordinator like narayana works completely async and in various different threads.


There are situations, where you need to retrieve some context information like an authentication token to communicate to the coordinator.Â Currently that is not possible, since there is no way, where one could hook in to access Exchange in the LRAClient and read some context information.Â 


One concrete idea to implement this, is to pass on the Exchange object to the LRAClient. This refactoring will involve interface changes to org.apache.camel.saga.CamelSagaService and org.apache.camel.saga.CamelSagaCoordinator, and their respective implementations and the callers.


Another idea that was tried, is to introduce a SagaCustomizer, which could wrap those calls, but this approach was not followed further, since calls in LRASagaCoordinator are actually hard to wrap, without changing nearly the same interfaces as in approach 1.",johbossle:1697707033:2023-10-19T17:17:13.149+0000:1697707773:2023-10-19T17:29:33.326+0000:Please see also [https://github.com/apache/camel/pull/11779]
0,CAMEL-20015,Improvement,Major,None,,"
None
",Open,Unresolved,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-10-19 09:19:27+00:00,2023-10-19 09:19:44+00:00,"As part of CAMEL-15105 we decoupled the ExtendedExchange from the AbstractExchange. This helped us reduce the incidence of type polution problems, cleanup and simplify the code. 


However, there's still many cases of cyclic dependencies between these two types. We should move the handling of the internal APIs fully to the extension class.",
0,CAMEL-20014,Task,Major,None,4.x,"
None
",Open,Unresolved,4.x,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-10-19 09:15:19+00:00,2023-10-19 09:16:16+00:00,Remove methods marked as deprecated during CAMEL-19998.,orpiske:1697678176:2023-10-19T09:16:16.450+0000:1697678176:2023-10-19T09:16:16.450+0000:I'll remove these after the next LTS. 
0,CAMEL-20013,Improvement,Minor,4.1.0,"4.0.2, 4.2.0","
None
",Resolved,Fixed,"4.0.2, 4.2.0",Claus Ibsen,Cott Lang,0,2,2023-10-18 13:59:56+00:00,2023-10-18 14:25:11+00:00,"in org.apache.camel.builder.AdviceWith#doAdviceWith, ModelToXMLDumper is created whether or not logRoutesAsXml is set, which seems to make camel-xml-io required whenever AdviceWith is used.


This wasn't the case in 3.x.


Thanks!",davsclaus:1697609786:2023-10-18T14:16:26.134+0000:1697609786:2023-10-18T14:16:26.134+0000:You can turn off logging logRouteAsXml=false
0,CAMEL-20012,Task,Minor,None,,"

help-wanted

",Open,Unresolved,None,Nikita_Konovalov,Nikita_Konovalov,0,1,2023-10-18 13:17:43+00:00,2023-11-14 13:38:36+00:00,"For some reasons testScheduledStartRoutePolicyWithTwoRoutes() in CronScheduledRoutePolicy.java is crashing when replacing Thread.sleep() with Awaitility/latches and can't create a consumer.


Â 


The problem may be caused by ScheduledRoutePolicy class.",
0,CAMEL-20011,Improvement,Minor,None,None,"
None
",Resolved,Fixed,4.2.0,James Netherton,James Netherton,0,2,2023-10-18 12:41:12+00:00,2023-10-19 11:56:41+00:00,"In Vert.x 4.5.5, the method signature that we use in various components for Vertx.executeBlocking became deprecated. E.g


executeBlocking(Handler<Promise<T>> blockingCodeHandler)


Is deprecated in favor of:


executeBlocking(Callable<T> blockingCodeHandler)


It'd be good to migrate the following components to use the preferred signature if possible.



camel-knative-http (See KnativeHttpConsumer & KnativeHttpTest)
camel-platform-http-vertx (See VertxPlatformHttpConsumer)
camel-reactive-executor-vertx (See VertXReactiveExecutor)
camel-threadpoolfactory-vertx (See VertXThreadPoolFactory)
camel-vertx-websocket (See VertxWebsocketConsumer & VertxWebsocketClientConsumer)","jamesnetherton:1697605000:2023-10-18T12:56:40.965+0000:1697605000:2023-10-18T12:56:40.965+0000:[~davsclaus]Â would a change like this be ok?

https://github.com/jamesnetherton/camel/commit/2248a6d5398251326bfd2d6e90734a51746434bb

I.e switch from getAsyncProcessor to getProcessor. Either way you have to wait in the Callable block until the processing is done. I wasn't sure if maybe it'd impact performance or something using the non-async processor.
davsclaus:1697605416:2023-10-18T13:03:36.728+0000:1697605416:2023-10-18T13:03:36.728+0000:Yeah in this situation vertx is blocking anyway, so even if camel could do async, then vertx would still block until the completion callback. And the Camel thread is from vertx anyway so it cannot do something else anyway.
"
0,CAMEL-20010,Bug,Major,"3.21.1, 4.0.1, 4.1.0","3.20.8, 3.21.2, 3.22.0, 4.0.2, 4.2.0","
None
",Resolved,Fixed,"3.20.8, 3.21.2, 3.22.0, 4.0.2, 4.2.0",Unassigned,Bruno Mendola,0,2,2023-10-18 10:33:34+00:00,2023-10-19 06:06:03+00:00,"If I want to use JdbcMessageIdRepository and add the schema name as prefix to the CAMEL_MESSAGEPROCESSED table name, I can do something like this:




idempotentRepository.setTableName(""myschema.CAMEL_MESSAGEPROCESSED"");




(the idempotentRepository is registered as bean in the CamelContext).


But when using the idempotentRepository with an idempotentConsumer in a route, I get the following error:




org.apache.camel.RuntimeCamelException: org.springframework.jdbc.UncategorizedSQLException: StatementCallback; uncategorized SQLException for SQL [SELECT 1 FROM myschema.myschema.CAMEL_MESSAGEPROCESSED WHERE 1 = 0]; SQL state [0A000]; error code [0]; ERROR: cross-database references are not implemented: ""myschema.myschema.camel_messageprocessed"" Â  Position: 15; nested exception is org.postgresql.util.PSQLException: ERROR: cross-database references are not implemented: ""myschema.myschema.camel_messageprocessed"" Â  Position: 15





The query is generated with a double schema name prefix (myschema.myschema.camel_messageprocessed).


JdbcMessageIdRepository is designed to replace the CAMEL_MESSAGEPROCESSED substring in the queries with the custom table name in the onInit() function, but looks like this function is called multiple times and it keeps replacing the substring that is present also in the custom table name.","davsclaus:1697597294:2023-10-18T10:48:14.021+0000:1697597294:2023-10-18T10:48:14.021+0000:Thanks you are welcome to send a PR
Mendola:1697606953:2023-10-18T13:29:13.899+0000:1697606953:2023-10-18T13:29:13.899+0000:[~davsclaus] done! :)Â 


[https://github.com/apache/camel/pull/11759]

Â 

Thank you
Mendola:1697608474:2023-10-18T13:54:34.953+0000:1697608474:2023-10-18T13:54:34.953+0000:[~davsclaus] would you backport this fix to Camel 3.21.x?
davsclaus:1697615400:2023-10-18T15:50:00.729+0000:1697615400:2023-10-18T15:50:00.729+0000:Thanks for reporting and the PR"
0,CAMEL-20009,Task,Major,None,None,"
None
",Open,Unresolved,Future,Unassigned,AurÃ©lien Pupier,0,1,2023-10-18 08:57:04+00:00,2023-10-18 11:52:53+00:00,"several components are still using getOut which was deprecated in Camel 3.
The documentation is still using getOut https://camel.apache.org/manual/faq/using-getin-or-getout-methods-on-exchange.html


tests should have been migrated CAMEL-14020 already",apupier:1697601139:2023-10-18T11:52:19.691+0000:1697601139:2023-10-18T11:52:19.691+0000:plans is to live with that until Camel 5 https://github.com/apache/camel/pull/11752#issuecomment-1768234494
0,CAMEL-20008,Sub-task,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Unassigned,AurÃ©lien Pupier,0,1,2023-10-18 08:21:16+00:00,2023-10-23 06:57:54+00:00,"several error of this kind:



mismatch [0] ==> expected: <<child some_attr='a' anotherAttr='a' xmlns='' xmlns:c='urn:c' xmlns:g='urn:g'></child>> but was: <<child some_attr='a' anotherAttr='a' xmlns='' xmlns:g='urn:g' xmlns:c='urn:c'></child>>




--> it sounds like the order of attributes is not the same. But is it a real problem, Isn't the semantic kept and just that we need to improve the test assertion?","apupier:1697775963:2023-10-20T12:26:03.176+0000:1697775963:2023-10-20T12:26:03.176+0000:PR is available for one test class: https://github.com/apache/camel/pull/11754

for other failing tests, provided solutions are not accepted https://github.com/apache/camel/pull/11785 https://github.com/apache/camel/pull/11756"
0,CAMEL-20007,Sub-task,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,AurÃ©lien Pupier,0,2,2023-10-18 08:18:29+00:00,2023-10-23 07:04:47+00:00,"Several tests failing with this kind of stacktrace



java.lang.RuntimeException: jdk.internal.misc.JavaNioAccess class is unavailable.
Please add the following parameters to JVM startup settings and restart the application: {parameters: --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED
--add-exports=java.base/sun.nio.ch=ALL-UNNAMED
--add-exports=java.management/com.sun.jmx.mbeanserver=ALL-UNNAMED
--add-exports=jdk.internal.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED
--add-exports=java.base/sun.reflect.generics.reflectiveObjects=ALL-UNNAMED
--add-opens=jdk.management/com.sun.management.internal=ALL-UNNAMED
--illegal-access=permit
}
See https://apacheignite.readme.io/docs/getting-started#section-running-ignite-with-java-9-10-11 for more information.
	at org.apache.ignite.internal.util.GridUnsafe.javaNioAccessObject(GridUnsafe.java:1627)
	at org.apache.ignite.internal.util.GridUnsafe.<clinit>(GridUnsafe.java:175)
	at org.apache.ignite.internal.util.IgniteUtils.<clinit>(IgniteUtils.java:893)
	at org.apache.ignite.spi.IgniteSpiAdapter.<init>(IgniteSpiAdapter.java:121)
	at org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi.<init>(TcpDiscoverySpi.java:241)
	at org.apache.camel.test.infra.ignite.services.IgniteEmbeddedService.createConfiguration(IgniteEmbeddedService.java:70)
	at org.apache.camel.component.ignite.AbstractIgniteTest.createConfiguration(AbstractIgniteTest.java:54)
	at org.apache.camel.component.ignite.IgniteCacheContinuousQueryTest.createComponent(IgniteCacheContinuousQueryTest.java:81)
	at org.apache.camel.component.ignite.AbstractIgniteTest.createCamelContext(AbstractIgniteTest.java:49)




or 



java.lang.NullPointerException: Cannot invoke ""org.apache.camel.CamelContext.getCamelContextExtension()"" because ""camelContext"" is null
	at org.apache.camel.support.PluginHelper.getBeanPostProcessor(PluginHelper.java:70)
	at org.apache.camel.test.junit5.CamelTestSupport.applyCamelPostProcessor(CamelTestSupport.java:693)
	at org.apache.camel.test.junit5.CamelTestSupport.postProcessTest(CamelTestSupport.java:678)
	at org.apache.camel.test.junit5.CamelTestSupport.setUp(CamelTestSupport.java:370)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	Suppressed: java.lang.NullPointerException: Cannot invoke ""org.apache.camel.model.ModelCamelContext.getComponent(String, java.lang.Class)"" because ""this.context"" is null
		at org.apache.camel.component.ignite.AbstractIgniteTest.ignite(AbstractIgniteTest.java:63)
		at org.apache.camel.component.ignite.IgniteCacheTest.deleteCaches(IgniteCacheTest.java:265)","apupier:1697607559:2023-10-18T13:39:19.014+0000:1697608397:2023-10-18T13:53:17.181+0000:Apache Ignite is not yet compatible with Java 21: coming with https://github.com/apache/ignite/commit/d2af35b9320b0acc227b61c4614b22debc554635 based on https://github.com/apache/ignite/issues/10954

Note that it will also require to add --add-opens=java.base/jdk.internal.access=ALL-UNNAMED when launchign the test, so here: https://github.com/apache/camel/blob/90c76c8b4b09c232ee67f57c23ada7c8709b6d16/components/camel-ignite/pom.xml#L35
davsclaus:1697776902:2023-10-20T12:41:42.584+0000:1697776902:2023-10-20T12:41:42.584+0000:Thanks for the research. So lets wait for Ignite release that supports Java 21, and we can add in the release notes for 4.2.0 that its not Java 21 compatible
apupier:1698015887:2023-10-23T07:04:47.048+0000:1698015887:2023-10-23T07:04:47.048+0000:Release schedule proposal for Apache ignite: https://lists.apache.org/thread/3nqy8chd0xyopvvhk6o19g2z3p10smzb

Scope Freeze: November 6, 2023
Code Freeze: November 13, 2022
Voting Date: November 20, 2022
Release Date: November 27, 2022"
0,CAMEL-20006,Dependency upgrade,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-10-18 07:49:20+00:00,2023-10-18 11:05:09+00:00,No Desc,
0,CAMEL-20005,Dependency upgrade,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-10-18 07:48:49+00:00,2023-10-18 09:34:11+00:00,No Desc,
0,CAMEL-20004,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Federico Mariani,Claus Ibsen,0,2,2023-10-18 07:48:16+00:00,2023-10-21 11:34:37+00:00,"This makes it possible to auto-generate the META-INF marker files like we do for other stuff like @Component @HealthCheck and so on.


We have a few components that have impl of this annotation, and they can have those manual marker files deleted in src/main/resources/META-INF, and then let Camel auto generate this like all other stuff.",Federico Mariani:1697779010:2023-10-20T13:16:50.408+0000:1697779010:2023-10-20T13:16:50.408+0000:https://github.com/jboss-fuse/camel-spring-boot/pull/288
0,CAMEL-20003,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-10-18 07:48:13+00:00,2023-10-18 08:36:24+00:00,No Desc,
0,CAMEL-20002,Improvement,Minor,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,James Netherton,James Netherton,0,1,2023-10-18 07:18:40+00:00,2023-10-18 08:38:40+00:00,"Motivated by a change I made in Camel Quarkus to resolve TypeConverters from the CDI bean registry:


https://github.com/apache/camel-quarkus/issues/5429",
0,CAMEL-20001,Bug,Minor,"3.21.1, 4.1.0",4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Jose Montoya,0,2,2023-10-17 23:49:41+00:00,2023-10-21 14:30:55+00:00,"DefaultPropertiesParser#parseUri ends up with DefaultPropertiesParser.java#L461 delegating to the #parseProperty implementation, even if the current found value comes from an override in DefaultPropertiesParser.java#L439 andÂ DefaultPropertiesLookup.java#L74


An implementation like Spring's SpringPropertiesParser.java#L35 is not aware of where the value comes from and ignores it.


In our case this breaks functionality where we're doing context.getPropertiesComponent().setOverrideProperties(props) which we based onÂ CamelTestSupport#useOverridePropertiesWithPropertiesComponent CamelTestSupport.java#L656 and CamelTestSupport.java#L487


If it helps any, this used to work ""correctly"" in Camel 3.7.1","davsclaus:1697579683:2023-10-18T05:54:43.642+0000:1697579683:2023-10-18T05:54:43.642+0000:Can you provide a reproducer / test-case or sample code what you do
davsclaus:1697867238:2023-10-21T13:47:18.234+0000:1697867238:2023-10-21T13:47:18.234+0000:Ah okay, so we should only lookup in spring-boot if we have not found the value in regular camel first
jam01:1697868152:2023-10-21T14:02:32.112+0000:1697868152:2023-10-21T14:02:32.112+0000:Yes. Not sure if that breaks existing functionality, or if we can look up in spring when the found value is not from a camel override.
davsclaus:1697868946:2023-10-21T14:15:46.687+0000:1697868946:2023-10-21T14:15:46.687+0000:Yeah we need to hook spring-boot in a better position that it does now, and then only lookup if not already found"
0,CAMEL-20000,Bug,Minor,4.1.0,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Zeljko Tesic,0,1,2023-10-17 09:48:36+00:00,2023-10-18 14:44:05+00:00,"GIVEN comma delimited set of records


AND unmarshal using flatpack data format


AND process the resulting DataSetList once


AND split the DataSetLISt


THEN split finds no records


Â 


In earlier versions iterator() method of DataSetList was calling dataSet.goTop() to reset iterator position. That line is gone in 4.1.0. As a quick fix we should consider bringing it back back. However, we might do some redesign of DataSet iterators to make it more thread safe in some future release.",
0,CAMEL-19999,Improvement,Minor,None,"4.0.3, 4.2.0","
None
",Resolved,Fixed,"4.0.3, 4.2.0",Claus Ibsen,Claus Ibsen,0,1,2023-10-17 09:29:12+00:00,2023-10-24 11:03:31+00:00,"The cache is 1000 and its soft reference. But in some low memory environments you may want to have lower cache size. And also be able to clear cache on-demand with a method on bean component.


https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Camel.20Bean.20and.20LRU.20Cache",
0,CAMEL-19998,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-10-16 15:07:18+00:00,2023-10-19 11:22:56+00:00,"As part of CAMEL-15105 we decoupled the ExtendedCamelContext from the AbstractCamelContext. This helped us reduce the incidence of type polution problems, cleanup and simplify the code. 


However, there's still many cases of cyclic dependencies between these two types. We should move the handling of the internal APIs fully to the extension class.",orpiske:1697685776:2023-10-19T11:22:56.110+0000:1697685776:2023-10-19T11:22:56.110+0000:Fixed with the linked PRs. 
0,CAMEL-19997,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.22.0, 4.2.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,4,2023-10-16 14:36:32+00:00,2023-11-21 12:46:39+00:00,Implement a component for interacting with the SMB (aka CIFS) protocol using the SMBJ project.,"orpiske:1698993890:2023-11-03T14:44:50.950+0000:1698993890:2023-11-03T14:44:50.950+0000:Initial implementation was merged.
nfilotto:1700201591:2023-11-17T14:13:11.289+0000:1700201591:2023-11-17T14:13:11.289+0000:[~orpiske] do you know if this component can be added to Camel 3 too?
orpiske:1700202054:2023-11-17T14:20:54.494+0000:1700202054:2023-11-17T14:20:54.494+0000:[~nfilotto] I think it could. I don't remember using anything that was specific to Camel 4 or any Java 17 feature that would be hard to replace. 
davsclaus:1700202324:2023-11-17T14:25:24.084+0000:1700202324:2023-11-17T14:25:24.084+0000:Camel 3 goes end of active developed by end of this year when we released 3.22 as the last release - so anything to be added must be quick
nfilotto:1700447338:2023-11-20T10:28:58.187+0000:1700447338:2023-11-20T10:28:58.187+0000:The PR to backport it https://github.com/apache/camel/pull/12093"
0,CAMEL-19996,Bug,Major,4.1.0,"3.20.8, 3.21.2, 3.22.0, 4.0.2, 4.2.0","
None
",Resolved,Fixed,"3.20.8, 3.21.2, 3.22.0, 4.0.2, 4.2.0",Unassigned,Johannes BoÃle,0,2,2023-10-16 14:19:33+00:00,2023-10-16 15:15:46+00:00,"There is a NullpointerException occurring, when



you start a new saga (required, automatic completion)
your configured lra is not valid (e.g. you get some arbitrary page from this url)



As a result, the request never ends and runs infinite.



org.apache.camel.service.lra.LRAClient.newLRA()
  is calling org.apache.camel.service.lra.LRAClient.toURL(Object)
    -> throw new RuntimeCamelException(ex);
--> this is kind of expected, but now the error is handled

the call was initiated by 

org.apache.camel.processor.saga.RequiredSagaProcessor.process(Exchange, AsyncCallback)

and ends up finally in 

org.apache.camel.processor.saga.SagaProcessor.ifNotException(Throwable, Exchange, boolean, CamelSagaCoordinator, CamelSagaCoordinator, AsyncCallback, Runnable) {
            if (ex != null) {
               exchange.setException(ex);
            if (handleCompletion) {
                handleSagaCompletion(exchange, coordinator, previousCoordinator, callback);
            } else {

Since org.apache.camel.processor.saga.SagaProcessor.handleSagaCompletion(Exchange, CamelSagaCoordinator, CamelSagaCoordinator, AsyncCallback) is called 
with completionMode == SagaCompletionMode.AUTO
            if (exchange.getException() != null) {
                coordinator.compensate().whenComplete(...
  coordinator is always null, because newSaga was not yet (sucessfully) executed



Since the NPE occurs during the errorHandling of the invalid URL itself, it is retried to infinity or something else happens, which never retunrs in awaitable time.


Â 


Proposal Fix


A coordinator should only be null, if there is no saga present yet. So in this case it would be safe to callÂ 



callback.done(false)



instead of trying to call some methods of the coordinator to rollback.","davsclaus:1697438843:2023-10-16T14:47:23.480+0000:1697438843:2023-10-16T14:47:23.480+0000:You are welcome to send a PR
davsclaus:1697440546:2023-10-16T15:15:46.893+0000:1697440546:2023-10-16T15:15:46.893+0000:Thanks for reporting and the PR"
0,CAMEL-19995,New Feature,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-16 09:19:50+00:00,2023-10-16 09:20:30+00:00,No Desc,
0,CAMEL-19994,New Feature,Minor,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-16 08:16:04+00:00,2023-10-17 19:40:09+00:00,"In servlet components you can get access to HttpServletRequest. However vertx is not servlet, but it has its own API abstraction.


We should allow end users access to that object instance for advanced use-cases.


We may do as in camel-servlet components to wrap that into a HttpMessage object that has getter for that, instead of using DefaultMessage.",
0,CAMEL-19993,Test,Major,None,4.2.0,"

help-wanted

",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,1,2023-10-16 07:39:03+00:00,2023-10-23 07:01:01+00:00,"https://ci-builds.apache.org/job/Camel/job/Camel%20JDK21/job/main/lastCompletedBuild/testReport/org.apache.camel.language.xtokenizer/


It seems its the XML parser that dumps XML in a slight different order.",
0,CAMEL-19992,Dependency upgrade,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,1,2023-10-16 07:20:32+00:00,2023-10-16 18:56:10+00:00,"Caused by: java.lang.IllegalArgumentException: Java 21 (65) is not supported by the current version of Byte Buddy which officially supports Java 20 (64) - update Byte Buddy or set net.bytebuddy.experimental as a VM property
	at net.bytebuddy.utility.OpenedClassReader.of(OpenedClassReader.java:96)


[INFO] +- org.assertj:assertj-core:jar:3.24.2:test
[INFO] |  - net.bytebuddy:byte-buddy:jar:1.12.21:test",davsclaus:1697423862:2023-10-16T10:37:42.260+0000:1697423862:2023-10-16T10:37:42.260+0000:Lets see CI build tomorrow
0,CAMEL-19991,Dependency upgrade,Major,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Federico Mariani,Claus Ibsen,0,5,2023-10-16 06:40:35+00:00,2023-12-17 21:29:35+00:00,"We use 11.x and there is 12.0.x now.
At some time we should upgrade. But there are some components that can use Jetty that needs to work with this too, such as cxf, cometd, salesforce, etc.","ruslan.hryn25:1697440992:2023-10-16T15:23:12.228+0000:1697441624:2023-10-16T15:33:44.332+0000:[~davsclaus]Â 

Do you have an approximate date of delivery? Because Spring Boot 3.2 will be released soon and it brings Jetty 12
acosentino:1697441865:2023-10-16T15:37:45.013+0000:1697441865:2023-10-16T15:37:45.013+0000:No ETA at this stage. Because we don't know the impact. You're welcome to investigate and give feedback or wrote a report
davsclaus:1700029744:2023-11-15T14:29:04.837+0000:1700029744:2023-11-15T14:29:04.837+0000:Camel 4.3 onwards is planned for spring boot 3.2 support. You are welcome to help with this upgrade.
Federico Mariani:1700810123:2023-11-24T15:15:23.615+0000:1700810123:2023-11-24T15:15:23.615+0000:cometd that dependens on jetty 12 is on beta version, https://mvnrepository.com/artifact/org.cometd.java/cometd-java-server-http-jakarta/8.0.0.beta0
davsclaus:1701683263:2023-12-04T17:47:43.888+0000:1701683263:2023-12-04T17:47:43.888+0000:We should maybe add a note in the 4.3 upgrade page that camel-jetty has been upgrade from 11 to 12, as this can affect end users in their upgrade as well.
davsclaus:1701935457:2023-12-07T15:50:57.417+0000:1701935457:2023-12-07T15:50:57.417+0000:I update the migration guide a little bit
fmariani:1701935569:2023-12-07T15:52:49.195+0000:1701935569:2023-12-07T15:52:49.195+0000:thanks [~davsclaus] may you share the PR? I do not know where to find migration guide and release notes
davsclaus:1701935795:2023-12-07T15:56:35.582+0000:1701935795:2023-12-07T15:56:35.582+0000:https://github.com/apache/camel/commit/e304a5c99498b835f6bc2dc8d96b3831a25fd5e5"
0,CAMEL-19990,Dependency upgrade,Major,4.0.1,"4.0.2, 4.2.0","
None
",Resolved,Fixed,"4.0.2, 4.2.0",Andrea Cosentino,Claus Ibsen,0,1,2023-10-15 15:59:53+00:00,2023-10-21 11:20:35+00:00,No Desc,
0,CAMEL-19989,Dependency upgrade,Major,"3.20.7, 3.21.1","3.20.8, 3.21.2, 3.22.0","
None
",Resolved,Fixed,"3.20.8, 3.21.2, 3.22.0",Andrea Cosentino,Claus Ibsen,0,1,2023-10-15 15:59:29+00:00,2023-10-23 08:05:08+00:00,No Desc,
0,CAMEL-19988,Improvement,Major,None,"4.0.2, 4.2.0","
None
",Resolved,Fixed,"4.0.2, 4.2.0",Claus Ibsen,Claus Ibsen,0,1,2023-10-14 07:36:03+00:00,2023-10-21 11:31:39+00:00,"Related to CAMEL-19914


This makes it a bit harder to known why setting a value failed if the caused exception message is hidden.",
0,CAMEL-19987,Improvement,Major,None,"4.0.2, 4.2.0","
None
",Resolved,Fixed,"4.0.2, 4.2.0",Claus Ibsen,Claus Ibsen,0,1,2023-10-13 16:47:43+00:00,2023-10-15 07:21:24+00:00,"See chat
https://camel.zulipchat.com/#narrow/stream/257301-camel-spring-boot/topic/Performance.20issue.20in.20endpoint.20cache.3F","davsclaus:1697252588:2023-10-14T11:03:08.711+0000:1697252588:2023-10-14T11:03:08.711+0000:TODO: API for removeEndpoints with no pattern
TODO: Unit test / performance test
davsclaus:1697253565:2023-10-14T11:19:25.236+0000:1697253565:2023-10-14T11:19:25.236+0000:Okay we can optimize removeEndpoint(endpoint) to avoid the pattern all together."
0,CAMEL-19986,Task,Major,None,4.2.0,"

easy
easy-fix
help-wanted

",Resolved,Fixed,4.2.0,Nikita_Konovalov,Otavio Rodolfo Piske,0,1,2023-10-13 10:11:08+00:00,2023-11-08 17:26:51+00:00,"In many parts of our tests we use sleeps to throttle the test execution (i.e.: like sending those at a certain interval). In some cases, such as overloaded nodes, they may not behave as predictably as we would like.


It would be better to, first isolate this throttling in a separate method and later research if we can implement something that adapts to the system. 


This ticket is about consolidating that code in a separate utility. 


For instance, to print some message 10 times, every 1 second, we could do something like this:




execute(10).slowly( 1, TimeUnit.SECONDS, () -> System.out.prinln(""Executes every 1 second""));",orpiske:1699435611:2023-11-08T17:26:51.329+0000:1699435611:2023-11-08T17:26:51.329+0000:Resolved with the linked PRs.
0,CAMEL-19985,New Feature,Major,None,None,"

help-wanted

",Open,Unresolved,4.x,Unassigned,Claus Ibsen,1,4,2023-10-13 08:54:26+00:00,2023-11-10 09:33:58+00:00,"This project is now ASF2 licensed
https://github.com/smooks/smooks


We used to have a camel-smooks component (camel-extra) in v1 many years ago.


We should add this component again, so users can use smooks for EDI data mapping","orpiske:1699580038:2023-11-10T09:33:58.396+0000:1699580038:2023-11-10T09:33:58.396+0000:I added a few labels to this one, so it appears on the reports for tickets where we would like to receive help. "
0,CAMEL-19984,Task,Minor,3.10.0,"3.20.8, 3.21.2, 3.22.0","
None
",Resolved,Fixed,"3.20.8, 3.21.2, 3.22.0",Nicolas Filotto,Nicolas Filotto,0,2,2023-10-13 08:47:01+00:00,2023-10-13 09:34:37+00:00,"The feature was removed by CAMEL-16422 due to a DSE import package that was missing because the artifact native-protocol did not export the version expected by java-driver-core, it is no longer the case so it can be added back","acosentino:1697158915:2023-10-13T09:01:55.704+0000:1697158915:2023-10-13T09:01:55.704+0000:There are already PRs for this [~jbonofre]
nfilotto:1697160809:2023-10-13T09:33:29.182+0000:1697160809:2023-10-13T09:33:29.182+0000:The corresponding PRs:
* 3.22 https://github.com/apache/camel-karaf/pull/248
* 3.21 https://github.com/apache/camel-karaf/pull/247
* 3.20 https://github.com/apache/camel-karaf/pull/246"
0,CAMEL-19983,Task,Minor,4.2.0,4.2.0,"
None
",Resolved,Fixed,4.2.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2023-10-13 06:44:56+00:00,2023-10-13 13:48:37+00:00,There several occurrences of `spring` mentioned in the examples. All of them should be solved as the first example in the doc -> showing version for CDI and for spring boot.,
0,CAMEL-19952,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-05 06:03:33+00:00,2023-10-05 08:06:20+00:00,"Like in kamelets, then we make it possible to create the bean with inlined script (groovy, etc.) that gives more power and flexibility in some advanced use-cases.",
0,CAMEL-19951,Wish,Major,3.20.7,None,"
None
",Resolved,Information Provided,None,Unassigned,Raymond,0,2,2023-10-04 18:04:33+00:00,2023-10-07 16:14:54+00:00,"I really like the tracer:


https://camel.apache.org/manual/tracer.html


I wish it could be enhanced, so it becomes more flexible to use for more uses. 


Some ideas:


1. Enable tracing on route level


Currently, tracing can only be enabled on the CamelContext. When there are hundreds of routes, this quickly becomes cluttered. This could be enabled like as follows:




Tracer tracer = context.getTracer();
tracer.setByRouteId(""routeid"");



or




Route route = context.getRoute(""routeid"");
route.setTracer(true);



or




<route id=""someroute"" tracer=""true"">
Â  Â  <from uri=""direct:someroute""/>
Â  Â  <to uri=""log:justsomeroute""/>
</route>



2. Event Notifier


Instead of writing it to the log I would rather use it in the EventNotifier:




Tracer tracer = context.getTracer();
tracer.sendToEventNotifier(true);
tracer.sendToLog(false);



The EventNotifier could receive a ""TraceEvent"" (or MessageEvent?). There could also be sub TraceEvents (similar to ExchangeEvent that has a subevent ExchangeCreatedEvent):


TraceEvent
Â Â Â Â  TraceRouteEvent
Â Â Â Â Â Â Â Â Â Â Â Â  TraceRouteInputEvent
Â Â Â Â Â Â Â Â Â Â Â Â  TraceRouteOutputEvent
Â Â Â Â  TraceNodeEvent


3. Trace Event object


The Trace Event object that is used by the event notifier could contain:


Timestamp
BreadcrumpId (MessageId)
RouteId (or Route object)
Direction (input or output)
Type: (Route or Node)
Name: (name of route or node)
Node (id / number of node)
Exchange


It would also be nice if the object can be serialized to a json.




CamelEvent.TracerEvent tracerEvent = (CamelEvent.TracerEvent) event;
traceEvent.toJson();



Â 
4. Filters


Sometimes you only want to trace a part of the exchange




Tracer tracer = context.getTracer();
tracer.includeProperties(false);
tracer.includeHeaders(true);
tracer.includeBody(false);
tracer.includeBodyType(true);



Â 


Hopefully these wishes/feedback about the tracer are useful.","davsclaus:1696637024:2023-10-07T08:03:44.604+0000:1696637024:2023-10-07T08:03:44.604+0000:You can enable tracer per route

                from(""direct:start"").tracing()
                        .to(""mock:foo"").id(""foo"")
                        .to(""mock:bar"").id(""bar"");

Also take a look at backlog tracer - it collects a backlog of the trace details which you can access on-demand, and can be dumped to xml or json.
Camel JBang and other tools uses this.

The ""old legacy tracer"" that you refer to not a priority and is there only for logging, but we want to deprecate and remove it in the future.
skin27:1696666494:2023-10-07T16:14:54.664+0000:1696666494:2023-10-07T16:14:54.664+0000:Thanks, the backlog tracer sounds interesting. 

As I understand, there is:

1. Legacy tracer

Â Â Â Â Â  a. set on context level
Â Â Â Â Â  b. set on route level (not documented)
2. Backlog tracer
Â Â Â Â Â Â  a. set on context level
Â Â Â Â Â Â  b. Cannot or doesn't need to set on route level?

I have looked at the backlogtracer before but it was unclear to me how to use it.

The documentation says only something about enabling:

{{camelContext.setBacklogTracing(true);}}

{{1. It's not clear how to set the options and operations.}}
{{2. It's not clear how to read out the backlog queue. (internal queue)}}

{{More info in the documetation and an example at [https://github.com/apache/camel-examples] would really be helpful.}}

Maybe it would be good to also show the backlog tracer in traditional way (log to console/file). When the backlog tracer can do everything the legacy tracer can do then I would be better to note that the backlog tracer is the preferred way for tracing. Now it's all a bit confusing. {{}}"
0,CAMEL-19950,Improvement,Minor,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Nicolas Filotto,Claus Ibsen,0,2,2023-10-04 11:31:41+00:00,2023-10-05 15:03:56+00:00,"We have one last part where we use grape for downloading camel-report-maven-plugin, it uses camel-catalog-maven-grape. We may be able to drop that and use the new camel-tooling-maven instead and there is also camel-grape - which is an old component - it can maybe be changed or we can consider deprecating and removing it",nfilotto:1696486593:2023-10-05T14:16:33.873+0000:1696486593:2023-10-05T14:16:33.873+0000:The corresponding PR https://github.com/apache/camel/pull/11655
0,CAMEL-19949,Improvement,Minor,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Nicolas Filotto,Claus Ibsen,0,2,2023-10-04 11:30:43+00:00,2023-10-05 08:20:33+00:00,"We use 4004 as hardcoded value, but it would be nice to make it configurable.


For example 5005 is default in IDEA so its quicker to just use that.


You can then set 5005 via camel config set","davsclaus:1696400786:2023-10-04T14:26:26.941+0000:1696400786:2023-10-04T14:26:26.941+0000:Ah this requires jbang to support this too
nfilotto:1696401347:2023-10-04T14:35:47.523+0000:1696401347:2023-10-04T14:35:47.523+0000:JBang supports it but there is a small regression that is fixed in the main branch by https://github.com/jbangdev/jbang/pull/1690 but it is not yet released 
davsclaus:1696401999:2023-10-04T14:46:39.644+0000:1696402016:2023-10-04T14:46:56.850+0000:Sorry I got curious and investigated and have a PR in the works
https://github.com/apache/camel/pull/11644

We could maybe improved it so its not a boolean, so you can just say

--debug
--debug=5005

But I dont know how to do that
nfilotto:1696402189:2023-10-04T14:49:49.494+0000:1696402189:2023-10-04T14:49:49.494+0000:Yeah it is what I'm doing
nfilotto:1696413561:2023-10-04T17:59:21.457+0000:1696413561:2023-10-04T17:59:21.457+0000:Here is PR proposal https://github.com/apache/camel/pull/11645 that reuses the existing parameter {{--jvm-debug}} but with the ability to set an integer as value to define a custom port"
0,CAMEL-19948,Improvement,Minor,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Unassigned,Claus Ibsen,0,1,2023-10-04 07:45:39+00:00,2023-10-04 07:49:02+00:00,"~/workspace/deleteme/blue-csv â¯ camel transform                                                                                                     â INT 3m 20s
Cannot run because null.properties file does not exist or camel.main.routesIncludePattern is not configured",
0,CAMEL-19947,Dependency upgrade,Minor,3.18.5,,"
None
",Resolved,Information Provided,None,Unassigned,Sami Peltola,0,2,2023-10-04 07:17:52+00:00,2023-10-07 08:04:35+00:00,"Issue


Trying to PoC using camel-google-bigquery with a camel-app deployed in Karaf. Requires the installation of feature camel-google-bigquery to satisfy the dependencies.


Â 


Attempted workflow



Install camel-google-bigquery:
	
feature:install camel-google-bigquery


com.google.cloud.Service-class from ""com.google.cloud/google-cloud-core/2.7.1"" is missing after install
	
""find-class"" command shows nothing for ""find-class Â com.google.cloud.Service""
If you install the bundle ""com.google.cloud/google-cloud-core/2.7.1"" separately, the class is found, but during feature installation, some conflict erases it and other classes with the namespace com.google.cloud


Trying to deploy a camel-app that uses camel-google-bigquery results in:



...
Caused by: java.lang.NoClassDefFoundError: com/google/cloud/Service
...
Caused by: java.lang.ClassNotFoundException: com.google.cloud.Service not found by wrap_file_home_dildev.m2_repository_com_google_api_grpc_proto-google-common-protos_2.8.3_proto-google-common-protos-2.8.3.jar [298]


Even if you install all the bundles from the feature one at a time, you'll end up with missing dependencies and bundles that refuse to resolve all the classes required at runtime.


Versions


Karaf: 4.37


camel-google-bigquery: 3.18.5",davsclaus:1696376077:2023-10-04T07:34:37.837+0000:1696376077:2023-10-04T07:34:37.837+0000:Camel 3.18.x is EOL. You need to use 3.20.x or better
0,CAMEL-19946,New Feature,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-10-04 06:37:18+00:00,2023-10-04 06:37:18+00:00,"In the classic XML DSL we have 


		<endpoint id=""result1Queue"" uri=""jms:queue:result1""/>
		<endpoint id=""result2Queue"" uri=""jms:queue:result2""/>


		<endpoint id=""basicInQueue"" uri=""jms:queue:basicInQueue""/>
		<endpoint id=""basicInTopic"" uri=""jms:topic:basicInTopic""/>


Which you can then refer to in routes


			<from uri=""ref:basicInQueue""/>


This allows to define endpoints in one place (and they can have many options) and then refer to them in your routes for reuse and also to keep the routes smaller.


We should consider adding this to the model for XML and YAML DSL.",
0,CAMEL-19945,New Feature,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,1,2023-10-03 16:50:03+00:00,2023-10-11 07:58:00+00:00,"So you can invoke a method on a bean to return a value to use as a property placeholder.


Something ala


from(""kafka:bean:topicService.system"")
   .to(""..."")


This will lookup a bean with id topicService and invoke the system method (cannot take parameters as there is no exchange). The returned value is then used in the uri.",
0,CAMEL-19944,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-10-03 12:38:19+00:00,2023-10-03 13:17:23+00:00,No Desc,
0,CAMEL-19943,Bug,Trivial,4.1.0,,"
None
",Resolved,Won't Fix,None,Unassigned,AurÃ©lien Pupier,0,2,2023-10-03 11:41:59+00:00,2023-10-04 12:11:54+00:00,"When camel-catalog module is opened as a project in the IDE, the test is failing with exit code equal to 1.
By putting a breakpoint and checking the internal project in .camel-jbang/export, I noticed that the org.apache.camel:camel-maven-plugin has a missing plugin version. When launchign the similar mvn command manually, we have:



(base) [apupier@localhost export]$ mvn dependency:copy-dependencies -DincludeScope=compile -DexcludeGroupIds=org.fusesource.jansi,org.apache.logging.log4j -DoutputDirectory=/tmp/junit8410026249734626260
[INFO] Scanning for projects...
[ERROR] [ERROR] Some problems were encountered while processing the POMs:
[FATAL] 'build.plugins.plugin.(groupId:artifactId)' version of a plugin must be defined.  @ line 88, column 21
 @ 
[ERROR] The build could not read 1 project -> [Help 1]
[ERROR]   
[ERROR]   The project org.apache.camel:camel-jbang-dummy:1.0 (/home/apupier/git/camel3/dsl/camel-jbang/camel-jbang-core/.camel-jbang/export/pom.xml) has 1 error
[ERROR]     'build.plugins.plugin.(groupId:artifactId)' version of a plugin must be defined.  @ line 88, column 21
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException




th eproblem is that the DefaultCamelCatalog return s an empty string version","davsclaus:1696379673:2023-10-04T08:34:33.414+0000:1696379673:2023-10-04T08:34:33.414+0000:What do you mean by camel-catalog is opened as a project ?
apupier:1696380006:2023-10-04T08:40:06.803+0000:1696380006:2023-10-04T08:40:06.803+0000:In Eclipse IDe, we can open several Maven Module as projects at the same time.
When the camel-catalog project is opened, the camel version from the catalog is not resolved anymore. i think it is because the file META-INF/maven/org.apache.camel/camel-catalog/pom.properties is not automatically generated https://github.com/apache/camel/blob/7ca9cf1e9ac1d3fd0244bb46f5d84c48543078fa/catalog/camel-catalog/src/main/java/org/apache/camel/catalog/VersionHelper.java#L37
davsclaus:1696392714:2023-10-04T12:11:54.895+0000:1696392714:2023-10-04T12:11:54.895+0000:This is not something end users do.

What matters is that camel jbang projects works with its commands"
0,CAMEL-19942,Improvement,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-10-03 09:47:40+00:00,2023-10-03 10:03:22+00:00,No Desc,
0,CAMEL-19941,New Feature,Major,None,None,"
None
",Open,Unresolved,None,Unassigned,Federico Mariani,0,1,2023-10-03 09:27:56+00:00,2023-10-03 09:27:56+00:00,"Kiota is a library that generates Java classes from OpenAPI files. The architecture of the generated classes by Kiota is interesting, and I hope it can be leveraged by Camel probably by creating a new component.


I did some experiments using Camel bean, ex.




from(""timer:getById?period={{timer.period}}"").routeId(""getById"")
                .bean(apiClient().posts().byPostId(5), ""get()"")
                .marshal().json(JsonLibrary.Jackson) // marshal for visualization
                .log(""getById -- ${body}"");

from(""timer:post?period={{timer.period}}"").routeId(""post"")
                .setBody(constant(newPost))
                .bean(apiClient().posts(), ""post(${body})"")
                .marshal().json(JsonLibrary.Jackson) // marshal for visualization
                .log(""post -- ${body}"");




Kiota ApiBuilder returns a CompletableFuture, which works well with bean(..).


But I think the integration can be improved since you can configure the request (ex. custom additional headers), therefore, what I'd like to achieve is something similar to the HTTP component, and to have something like




from(""timer:post?period={{timer.period}}"").routeId(""post"")
                .setHeader(""CUSTOM_HEADER"", simple(""CUSTOM_VALUE""))
                .setBody(constant(...))
                .to(""kiota??:..."")
                .marshal().json(JsonLibrary.Jackson) // marshal for visualization
                .log(""post -- ${body}"");




Kiota has a nice request builder, and I think users may want to use it, therefore, I'd like some input here.



Do you think it is worth to have a component in Camel? or another sort of integration with Camel
Do you know how this can be used with XML/YAML DSL?",
0,CAMEL-19940,Improvement,Minor,None,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Nicolas Filotto,Claus Ibsen,0,1,2023-10-03 07:15:26+00:00,2023-10-03 16:40:51+00:00,"This folder makes it easier for tooling to know its a camel jbang ""project"".",
0,CAMEL-19939,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Nicolas Filotto,Claus Ibsen,0,1,2023-10-03 07:07:54+00:00,2023-10-04 12:10:57+00:00,"Instead of export and invoking mvn copy dependency plugin, then we can see if we can use camels own camel-tooling-maven, and resolve dependencies, and gather urls to the local m2 files, which we can then copy directly from.


We need to include transitive dependencies, to ensure all JARs are included.",
0,CAMEL-19938,Bug,Minor,4.0.0,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Federico Mariani,Salvatore Mongiardo,0,4,2023-10-02 11:51:04+00:00,2023-10-04 07:48:57+00:00,"During the execution of `camel run ... ` in Windows environments (e.g. tested on Win 2019) we get the exception reported in the attached file, basically:


Â 




ERROR StatusConsoleListener FileManager (C:\Users\hudson/.camel/${sys:pid}.log) java.io.IOException: The filename, directory name, or volume label syntax is incorrect 



It sounds like a logging configuration issue in resolving ${sys:pid} placeholder coded in log4j properties file","Federico Mariani:1696220139:2023-10-02T12:15:39.650+0000:1696220139:2023-10-02T12:15:39.650+0000:We can try replacing _appender.file.fileName = ${sys:user.home}/.camel/${sys:pid}.log_ with _appender.file.fileName = ${sys:user.home}${sys:file.separator}.camel${sys:file.separator}${sys:pid}.log_
Federico Mariani:1696223215:2023-10-02T13:06:55.161+0000:1696223215:2023-10-02T13:06:55.161+0000:https://github.com/apache/camel/pull/11624
apupier:1696375914:2023-10-04T07:31:54.029+0000:1696375936:2023-10-04T07:32:16.328+0000:I do not understand the link between the fix and the reported issue. You mentioned that the problem is the resolution of ${sys:pid} but we still have that in the proposed solution and Pull Request. Can you clarify a bit more?
fmariani:1696376937:2023-10-04T07:48:57.507+0000:1696376937:2023-10-04T07:48:57.507+0000:sure thing, the issue is not related to _sys:pid_ that works on windows, but the file separator _/_ itself"
0,CAMEL-19937,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-02 11:10:01+00:00,2023-10-02 12:28:48+00:00,This is needed for tooling to ignore placeholders which cannot be resolved but we should continue to startup Camel to resolve route models and whatnot.,
0,CAMEL-19936,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-10-02 10:12:04+00:00,2023-10-02 14:34:54+00:00,"XML IO should have better parsing error for unknown elements and whatnot. That is needed for migration to Camel v4 for users of legacy Karaf.


~/wo/camel-karaf-examples/examples/camel-example-olingo4-blueprint main ?1 â¯ camel transform src/main/resources/OSGI-INF/blueprint/odata.xml                           â INT
org.apache.camel.RuntimeCamelException: org.apache.camel.xml.io.XmlPullParserException: Unexpected element '

{http://www.osgi.org/xmlns/blueprint/v1.0.0}

string'
	at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:66)
	at org.apache.camel.main.RoutesConfigurer.configureModeline(RoutesConfigurer.java:314)
	at org.apache.camel.main.BaseMainSupport.modelineRoutes(BaseMainSupport.java:561)
	at org.apache.camel.main.BaseMainSupport.autoconfigure(BaseMainSupport.java:434)
	at org.apache.camel.main.MainSupport.autoconfigure(MainSupport.java:73)
	at org.apache.camel.main.KameletMain.autoconfigure(KameletMain.java:592)
	at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:639)
	at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:339)
	at org.apache.camel.main.KameletMain.doInit(KameletMain.java:306)
	at org.apache.camel.support.service.BaseService.init(BaseService.java:78)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:105)
	at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:929)
	at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:708)
	at org.apache.camel.dsl.jbang.core.commands.Run.runTransform(Run.java:294)
	at org.apache.camel.dsl.jbang.core.commands.Transform.doCall(Transform.java:94)
	at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:71)
	at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
	at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
	at picocli.CommandLine.access$1500(CommandLine.java:148)
	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
	at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
	at picocli.CommandLine.execute(CommandLine.java:2170)
	at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:163)
	at main.CamelJBang.main(CamelJBang.java:36)",
0,CAMEL-19935,Test,Major,4.1.0,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Freeman Yue Fang,Claus Ibsen,0,2,2023-10-01 07:18:25+00:00,2023-10-04 14:18:42+00:00,"org.apache.camel.component.cxf.jaxws.CxfProducerContextTest.testInvokingAWrongServer	43 ms	4
 org.apache.camel.component.cxf.jaxws.CxfProducerOperationTest.testInvokingAWrongServer	29 ms	4
 org.apache.camel.component.cxf.jaxws.CxfProducerTest.testInvokingAWrongServer	29 ms	4
 org.apache.camel.component.cxf.ssl.SslTest.testInvokingNoTrustRoute	0.25 sec	4","davsclaus:1696116071:2023-10-01T07:21:11.106+0000:1696116071:2023-10-01T07:21:11.106+0000:changelog
https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12310511&version=12353310
davsclaus:1696323302:2023-10-03T16:55:02.409+0000:1696323302:2023-10-03T16:55:02.409+0000:[~ffang] if you ever get a chance to take a look then this is appreciated. 
ffang:1696323986:2023-10-03T17:06:26.410+0000:1696323986:2023-10-03T17:06:26.410+0000:[~davsclaus], sure, I will take a close look
ffang:1696335517:2023-10-03T20:18:37.974+0000:1696335517:2023-10-03T20:18:37.974+0000:Fixed. 

The IOException for CXF client (Conduit) now is wrapped in org.apache.cxf.interceptor.Fault.

The new behaviour is introduced by
https://github.com/apache/cxf/commit/1e9e61a3765318c7706a1886733fd45fe2f2f977
davsclaus:1696373110:2023-10-04T06:45:10.393+0000:1696373110:2023-10-04T06:45:10.393+0000:Thanks [~ffang] would you backport this to 4.0.x branch
ffang:1696400294:2023-10-04T14:18:14.713+0000:1696400294:2023-10-04T14:18:14.713+0000:Hi [~davsclaus],

Sure, done!

Cheers
Freeman"
0,CAMEL-19934,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-29 14:34:54+00:00,2023-09-30 07:53:39+00:00,"In some use-cases you want to start Camel without doing validation on bean/method call whether a given configured method exists.


This is needed by tooling to be able to resolve dependencies / migrate etc where no all java code is correct / compiled",
0,CAMEL-19933,Improvement,Major,None,4.1.0,"
None
",Resolved,Won't Fix,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-29 13:49:11+00:00,2023-10-02 11:10:07+00:00,"We can run in stub mode for jbang, which is used during export to gather all dependencies and whatnot.


However for bean/processors that you want to migrate from older Camel projects, then we need to be able to still load up routes (XML files etc) and not care about bean/processors and then need to stub those.


As the goal is not to run but to transform",davsclaus:1696209099:2023-10-02T09:11:39.201+0000:1696209099:2023-10-02T09:11:39.201+0000:Found a bit different solution. We disable all EIP processors so they don't need any bean/processors and stub is not needed.
0,CAMEL-19932,New Feature,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-29 12:14:23+00:00,2023-10-03 10:57:59+00:00,"To help migrate then it may be good if we can run/transform from an existing maven based folder structure.


For example some of the camel-examples on github. Especially for legacy OSGi users on blueprint, to migrate to modern Camel.",
0,CAMEL-19931,Bug,Major,4.0.1,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-09-29 10:48:46+00:00,2023-09-29 12:08:00+00:00,"2023-09-29 12:47:48.442  WARN 38709 â [rReloadStrategy] t.FileWatcherResourceReloadStrategy : Error reloading routes from file: dummy/foo.yaml due to Failed to create route route2: Route(route2)[From[kamelet:bank-source?period=1000] -> [Log[... because of Failed to resolve endpoint: kamelet://bank-source?period=1000 due to: Cannot find Kamelet with name: bank-source. Did you mean: slack-source, beer-source, splunk-source, webhook-source, ceph-source. This exception is ignored.
org.apache.camel.FailedToCreateRouteException: Failed to create route route2: Route(route2)[From[kamelet:bank-source?period=1000] -> [Log[... because of Failed to resolve endpoint: kamelet://bank-source?period=1000 due to: Cannot find Kamelet with name: bank-source. Did you mean: slack-source, beer-source, splunk-source, webhook-source, ceph-source","davsclaus:1695960480:2023-09-29T12:08:00.355+0000:1695960480:2023-09-29T12:08:00.355+0000:This is when you use --source-dir such as

camel run --dev --console --source-dir=."
0,CAMEL-19930,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,"4.0.2, 4.1.0",Andrea Cosentino,Andrea Cosentino,0,2,2023-09-29 09:25:17+00:00,2023-09-29 11:04:53+00:00,No Desc,"davsclaus:1695954455:2023-09-29T10:27:35.608+0000:1695954455:2023-09-29T10:27:35.608+0000:Can you backport to 4.0.x branch
acosentino:1695956693:2023-09-29T11:04:53.943+0000:1695956693:2023-09-29T11:04:53.943+0000:Done."
0,CAMEL-19929,Improvement,Major,None,"4.0.2, 4.1.0","
None
",Resolved,Won't Fix,"4.0.2, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-09-28 14:23:11+00:00,2023-09-28 19:42:35+00:00,"Uploads are to source dir only, but there is need to be able to upload to a sub folder, especially for kamelets","davsclaus:1695883639:2023-09-28T14:47:19.149+0000:1695883639:2023-09-28T14:47:19.149+0000:File reloaded should handle folders, and skip those, we now have

2023-09-28 16:43:58.827  WARN 28732 --- [rReloadStrategy] t.FileWatcherResourceReloadStrategy : Error reloading routes from file: dummy/mysub due to Unable to determine file extension for resource: file:dummy/mysub. This exception is ignored.
java.lang.IllegalArgumentException: Unable to determine file extension for resource: file:dummy/mysub
	at org.apache.camel.impl.engine.DefaultRoutesLoader.resolveRoutesBuilderLoader(DefaultRoutesLoader.java:293) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:124) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:101) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultRoutesLoader.updateRoutes(DefaultRoutesLoader.java:270) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.support.RouteWatcherReloadStrategy.onRouteReload(RouteWatcherReloadStrategy.java:289) ~[camel-support-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.support.RouteWatcherReloadStrategy.lambda$doStart$1(RouteWatcherReloadStrategy.java:154) ~[camel-support-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.support.FileWatcherResourceReloadStrategy$WatchFileChangesTask.run(FileWatcherResourceReloadStrategy.java:304) [camel-support-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at java.lang.Thread.run(Thread.java:833) [?:?]
davsclaus:1695887866:2023-09-28T15:57:46.031+0000:1695887866:2023-09-28T15:57:46.031+0000:2023-09-28 16:54:24.139  WARN 29090 --- [rReloadStrategy] t.FileWatcherResourceReloadStrategy : Error reloading routes from file: dummy/mysub/beer2.camel.yaml due to Error while compiling unit org.apache.camel.dsl.java.joor.CompilationUnit@6d23fca9. This exception is ignored.
org.joor.ReflectException: Error while compiling unit org.apache.camel.dsl.java.joor.CompilationUnit@6d23fca9
	at org.apache.camel.dsl.java.joor.MultiCompile.compileUnit(MultiCompile.java:214) ~[camel-java-joor-dsl-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.dsl.java.joor.MultiCompile.compileUnit(MultiCompile.java:75) ~[camel-java-joor-dsl-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.dsl.java.joor.JavaRoutesBuilderLoader.compileResources(JavaRoutesBuilderLoader.java:179) ~[camel-java-joor-dsl-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.dsl.java.joor.JavaRoutesBuilderLoader.preParseRoutes(JavaRoutesBuilderLoader.java:86) ~[camel-java-joor-dsl-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:152) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:101) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultRoutesLoader.updateRoutes(DefaultRoutesLoader.java:270) ~[camel-base-engine-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.support.RouteWatcherReloadStrategy.onRouteReload(RouteWatcherReloadStrategy.java:289) ~[camel-support-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.support.RouteWatcherReloadStrategy.lambda$doStart$1(RouteWatcherReloadStrategy.java:154) ~[camel-support-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at org.apache.camel.support.FileWatcherResourceReloadStrategy$WatchFileChangesTask.run(FileWatcherResourceReloadStrategy.java:307) [camel-support-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) [?:?]
	at java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]
	at java.lang.Thread.run(Thread.java:833) [?:?]
Caused by: java.lang.IllegalStateException: error: no source files
	at com.sun.tools.javac.main.Arguments.reportDiag(Arguments.java:893) ~[jdk.compiler:?]
	at com.sun.tools.javac.main.Arguments.validate(Arguments.java:463) ~[jdk.compiler:?]
	at com.sun.tools.javac.api.JavacTaskImpl.prepareCompiler(JavacTaskImpl.java:194) ~[jdk.compiler:?]
	at com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:101) ~[jdk.compiler:?]
	at com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152) ~[jdk.compiler:?]
	at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100) ~[jdk.compiler:?]
	at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94) ~[jdk.compiler:?]
	at org.apache.camel.dsl.java.joor.MultiCompile.compileUnit(MultiCompile.java:141) ~[camel-java-joor-dsl-4.1.0-SNAPSHOT.jar:4.1.0-SNAPSHOT]
	... 14 more
davsclaus:1695901355:2023-09-28T19:42:35.385+0000:1695901355:2023-09-28T19:42:35.385+0000:Was not needed with sub folders, and it also causes more pain. But found some other bugs with reloading and triggering java dsl to compile when no files was needed to compile."
0,CAMEL-19928,Test,Trivial,4.1.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,AurÃ©lien Pupier,0,2,2023-09-28 10:16:13+00:00,2023-09-28 11:47:59+00:00,"org.apache.camel.FailedToStartRouteException: Failed to start route route1 because of Illegal char <:> at index 6: ${file:parent}\.camel\${file:onlyname}
	at org.apache.camel.impl.engine.RouteService.setUp(RouteService.java:131)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doWarmUpRoutes(InternalRouteStartupManager.java:305)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:189)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:240)
	at org.apache.camel.impl.engine.AbstractCamelContext.startRouteService(AbstractCamelContext.java:3079)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:725)
	at org.apache.camel.impl.DefaultModel.addRouteDefinitions(DefaultModel.java:251)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:283)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:790)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:619)
	at org.apache.camel.impl.engine.AbstractCamelContext.addRoutes(AbstractCamelContext.java:1016)
	at org.apache.camel.component.seda.FileSedaShutdownCompleteAllTasksTest.testShutdownCompleteAllTasks(FileSedaShutdownCompleteAllTasksTest.java:47)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
Caused by: java.nio.file.InvalidPathException: Illegal char <:> at index 6: ${file:parent}\.camel\${file:onlyname}
	at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
	at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
	at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
	at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
	at java.base/java.nio.file.Path.of(Path.java:147)
	at java.base/java.nio.file.Paths.get(Paths.java:69)
	at org.apache.camel.component.file.strategy.FileProcessStrategyFactory.getDefaultCommitRenamer(FileProcessStrategyFactory.java:101)
	at org.apache.camel.component.file.strategy.FileProcessStrategyFactory.createGenericFileProcessStrategy(FileProcessStrategyFactory.java:93)
	at org.apache.camel.component.file.FileEndpoint.createGenericFileStrategy(FileEndpoint.java:230)
	at org.apache.camel.component.file.FileEndpoint.newFileConsumer(FileEndpoint.java:216)
	at org.apache.camel.component.file.FileEndpoint.createConsumer(FileEndpoint.java:122)
	at org.apache.camel.component.file.FileEndpoint.createConsumer(FileEndpoint.java:1)
	at org.apache.camel.impl.engine.DefaultRoute.gatherRootServices(DefaultRoute.java:636)
	at org.apache.camel.impl.engine.DefaultRoute.gatherServices(DefaultRoute.java:620)
	at org.apache.camel.impl.engine.DefaultRoute.initializeServices(DefaultRoute.java:205)
	at org.apache.camel.impl.engine.RouteService.doSetup(RouteService.java:150)
	at org.apache.camel.impl.engine.RouteService.setUp(RouteService.java:129)
	... 18 more





it seems that it has been introduced with this PR https://github.com/apache/camel/pull/11499 related to the issue CAMEL-19877",davsclaus:1695872412:2023-09-28T11:40:12.712+0000:1695872545:2023-09-28T11:42:25.453+0000:Yeah that CAMEL-19877 was wrong I am fixing this now
0,CAMEL-19927,Task,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-28 08:40:39+00:00,2023-09-28 09:16:34+00:00,"If you already have the options in your original route, the export will export automatically the parameters. The flags were intended, in case you want to add the needed parameters and introducing the secret refresh feature.. but it's logically incorrect for the export command, it's a 1-to-1 export.",
0,CAMEL-19926,Improvement,Major,4.1.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-28 07:57:14+00:00,2023-09-28 08:15:33+00:00,This is needed to parse OSGi blueprint files as part of jbang tooling for migration,
0,CAMEL-19925,Bug,Minor,3.20.5,,"
None
",Resolved,Information Provided,None,Karen Lease,Rami,0,2,2023-09-27 17:40:55+00:00,2023-12-13 14:27:27+00:00,"I am trying to migrate API documentation from Swagger2.x to OpenApi 3.


The documentation works fine except the url server and scheme, in the url it shows only the base path .


Here is the API documentation in Swagger:


Â 




{
Â Â Â Â ""swagger"":Â ""2.0"",
Â Â Â Â ""info"":Â {
Â Â Â Â Â Â Â Â ""version"":Â ""1.0.0"",
 Â Â Â Â Â Â Â ""title"": ""title""
Â Â Â Â },Â Â Â Â 
    ""host"": ""localhost:8080"",
 Â Â Â ""basePath"": ""/root-context/api"",
Â Â Â Â ""schemes"": [
Â Â Â Â Â Â Â Â ""http"",
Â Â Â Â Â Â Â Â ""https""Â Â Â Â 
     ],
Â Â Â Â ""paths"": { 
....}



Â 


Â 


While In OpenAPI:


Â 




{
Â Â Â Â ""openapi"":Â ""3.0.2"",
 Â Â Â ""info"":Â {
 Â Â Â Â Â Â ""title"": ""title"",
Â Â Â Â Â Â  ""version"":Â ""1.0.0""
Â Â Â Â },
Â Â Â Â ""servers"":Â [
Â Â Â Â Â Â Â Â {
 Â Â Â Â Â Â Â Â Â Â Â ""url"": ""/root-context/api""
Â Â Â Â Â Â Â Â }
Â Â Â Â ],
Â Â Â Â ""paths"":Â { 
         ....
    }



Â 


Â 


Rest Cofiguration:


Â 




 restConfiguration()
                .component(camelComponent)
                .enableCORS(apiEnableCors)
                .corsHeaderProperty(""Access-Control-Allow-Methods"", ""POST"")
                .port(env.getProperty(""server.port"", ""8080""))
                .contextPath(contextPath)
                .apiContextPath(apiDocsPath)
                .apiProperty(""schemes"", ""http,https"")
                .apiProperty(""api.title"", apiDocsTitle)
                .apiProperty(""api.version"", apiDocsVersion)
                .apiProperty(""cors"", apiEnableCors.toString())
                .bindingMode(RestBindingMode.json)
                .dataFormatProperty(""prettyPrint"", ""true"");
    }","klease78:1696251500:2023-10-02T20:58:20.342+0000:1696253570:2023-10-02T21:32:50.182+0000:[~rami15]Â I think this might be due to the way the X-Forwarded-Header is handled for OpenAPI 3.0, if no X-Forwarded-Proto header is present in the request.
Could you please try adding
{code} .useXForwardHeaders(false){code}
to your restConfiguration and see if that resolves the issue.
I do think there is a bug but this might be a workaround.

Another point is that in OpenAPI 3, the URL may be relative. According to the ""Server Object"" section in the [spec|https://swagger.io/specification/]:
{quote}This URL supports Server Variables and MAY be relative, to indicate that the host location is relative to the location where the OpenAPI document is being served. {quote}
rami15:1696260516:2023-10-02T23:28:36.826+0000:1696297224:2023-10-03T09:40:24.064+0000:[~klease78], you are absolutely right, i already have tried your suggestion and discovered that setting *useXForwardHeaders*Â to false and set scheme, host and port manually would solve the problem.

However in my case where I deploy the service on JBoss eap would represent a challenge because you could deploy the application without knowing if the scheme is http or not, the port, ....

Â 
{code:java}
restConfiguration()
.component(camelComponent)
.enableCORS(apiEnableCors)
.corsHeaderProperty(""Access-Control-Allow-Methods"", ""POST"")
.useXForwardHeaders(false)
.scheme(""http,https"")
.host(""localhost"")
.port(env.getProperty(""server.port"", ""8080""))
.contextPath(contextPath)
.apiContextPath(apiDocsPath)
.apiProperty(""schemes"", ""http,https"")
.apiProperty(""api.title"", apiDocsTitle)
.apiProperty(""api.version"", apiDocsVersion)
.apiProperty(""cors"", apiEnableCors.toString())
.bindingMode(RestBindingMode.json)
.dataFormatProperty(""prettyPrint"", ""true"");
}{code}
Â 
{code:java}
{
 Â Â Â ""openapi"":Â ""3.0.2"",
 Â Â Â ""info"":Â {
 Â Â Â Â Â Â ""title"": ""title"",
 Â Â Â Â Â Â  ""version"":Â ""1.0.0""
 Â Â Â Â },
 Â Â Â Â ""servers"":Â [
 Â Â Â Â Â Â Â Â {
 Â Â Â Â Â Â Â Â Â Â Â ""url"": ""http://localhost:8080/root-context/api""
 Â Â Â Â Â Â Â Â }
 Â Â Â Â ],
 Â Â Â Â ""paths"":Â { .... }{code}
Â 

Â 

I agree about the second point. But for context, I need to configure the microservice with an API gateway using openapi so it is necessary to provide [http://host:port] for the service definition within the API gateway.
klease78:1696320134:2023-10-03T16:02:14.424+0000:1696320134:2023-10-03T16:02:14.424+0000:[~rami15] I agree that's a problem. Looking at the code for the 3.20.5 Camel release, the generated url for the OpenAPI 3 spec *should* have the scheme, host & port *if* the header X-Forwarded-Proto is present in the request sent to generate the API. If it isn't then only the basePath is used. In OpenAPI 2, if there is no X-Forwarded-Proto, the host field still uses the Host or X-Forwarded-Host headers if present.

These request headers should be set if your jboss is behind a proxy server. They can be forwarded to the application by setting the following attribute on the undertow http-listener or https-listener.
{code:java}
proxy-address-forwarding=true {code}
But if you're not behind a proxy, then this won't help.
If your API is on specific host which could be different from your deployed service, then you could use something like
{code:java}
.apiHost(""myApiHost:8888""){code}
in your restConfiguration instead of setting host and port, and combine that with the option not to use the XForwardedHeaders.
klease78:1701308823:2023-11-30T09:47:03.378+0000:1701308823:2023-11-30T09:47:03.378+0000:Hi [~rami15]. Did you find a solution for your problem? If so, then let's close the issue."
0,CAMEL-19924,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-27 14:30:10+00:00,2023-09-27 15:05:22+00:00,"Some components load classes like camel-mybatis (and others, have seen something in camel-kafka too).


We should make the dynamic compiled classes from Java DSL available for these components, that rely on TCCL and standard ClassLoader from JDK.",
0,CAMEL-19923,Bug,Minor,4.0.1,4.1.0,"
None
",Resolved,Fixed,4.1.0,AurÃ©lien Pupier,AurÃ©lien Pupier,0,2,2023-09-27 13:43:16+00:00,2023-10-04 13:32:20+00:00,"when using:



jbang camel@apache/camel dependency copy MyValidRouteBuilder.java




it gives the error:



java.io.IOException: Cannot run program ""mvn"" (in directory "".camel-jbang\export""): CreateProcess error=2, The system cannot find the file specified
        at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1143)
        at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1073)
        at java.base/java.lang.Runtime.exec(Runtime.java:594)
        at java.base/java.lang.Runtime.exec(Runtime.java:418)
        at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.export(DependencyCopy.java:61)
        at org.apache.camel.dsl.jbang.core.commands.ExportBaseCommand.doCall(ExportBaseCommand.java:215)
        at org.apache.camel.dsl.jbang.core.commands.Export.doCall(Export.java:28)
        at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.doCall(DependencyCopy.java:46)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:71)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:159)
        at main.CamelJBang.main(CamelJBang.java:36)
Caused by: java.io.IOException: CreateProcess error=2, The system cannot find the file specified
        at java.base/java.lang.ProcessImpl.create(Native Method)
        at java.base/java.lang.ProcessImpl.<init>(ProcessImpl.java:499)
        at java.base/java.lang.ProcessImpl.start(ProcessImpl.java:158)
        at java.base/java.lang.ProcessBuilder.start(ProcessBuilder.java:1110)
        ... 19 more","davsclaus:1695794972:2023-09-27T14:09:32.119+0000:1695794972:2023-09-27T14:09:32.119+0000:You need to have maven installed and accessible as `mvn` command - jbang just calls `mvn`
apupier:1695803959:2023-09-27T16:39:19.927+0000:1695803959:2023-09-27T16:39:19.927+0000:I have Maven installed locally and available on system command line.

the reported problem is no tmissin gmvn but missing directory which is used as base directory
davsclaus:1695872289:2023-09-28T11:38:09.583+0000:1695872289:2023-09-28T11:38:09.583+0000:Added note in docs about requirement
https://github.com/apache/camel/commit/c85356e0ddbeec32e5dd09793a366f819532afe7
apupier:1695872688:2023-09-28T11:44:48.213+0000:1695872688:2023-09-28T11:44:48.213+0000:I will repeat myself but the problem occurs even with mvn on system path
apupier:1695879853:2023-09-28T13:44:13.653+0000:1695879853:2023-09-28T13:44:13.653+0000:I think I have a fix, I will prepare a Pull request
davsclaus:1695881042:2023-09-28T14:04:02.956+0000:1695881042:2023-09-28T14:04:02.956+0000:Yeah that is very good as you have a windows system to try and test
apupier:1696397540:2023-10-04T13:32:20.737+0000:1696397540:2023-10-04T13:32:20.737+0000:Fixed with https://github.com/apache/camel/pull/11643"
0,CAMEL-19922,Bug,Minor,4.0.1,4.1.0,"
None
",Resolved,Fixed,4.1.0,Unassigned,AurÃ©lien Pupier,0,2,2023-09-27 13:39:53+00:00,2023-10-04 13:33:50+00:00,"jbang camel@apache/camel dependency copy --output-directory=""c:\Users\Aurelien Pupier\AppData\Roaming\Code\User\globalStorage\redhat.vscode-camelk\java-dependencies"" ""c:\git\vscode-camelk\test Fixture with speci@l chars\MyValidRouteBuilder.java""




gives error:



java.nio.file.InvalidPathException: Illegal char <      > at index 18: c:gitvscode-camelk       est Fixture with speci@l charsMyValidRouteBuilder.java
        at java.base/sun.nio.fs.WindowsPathParser.normalize(WindowsPathParser.java:182)
        at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:153)
        at java.base/sun.nio.fs.WindowsPathParser.parse(WindowsPathParser.java:77)
        at java.base/sun.nio.fs.WindowsPath.parse(WindowsPath.java:92)
        at java.base/sun.nio.fs.WindowsFileSystem.getPath(WindowsFileSystem.java:232)
        at java.base/java.io.File.toPath(File.java:2387)
        at org.apache.camel.dsl.jbang.core.commands.ExportBaseCommand.copySourceFiles(ExportBaseCommand.java:458)
        at org.apache.camel.dsl.jbang.core.commands.ExportCamelMain.copySourceFiles(ExportCamelMain.java:337)
        at org.apache.camel.dsl.jbang.core.commands.ExportCamelMain.export(ExportCamelMain.java:102)
        at org.apache.camel.dsl.jbang.core.commands.Export.export(Export.java:130)
        at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.doExport(DependencyCopy.java:115)
        at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.export(DependencyCopy.java:51)
        at org.apache.camel.dsl.jbang.core.commands.ExportBaseCommand.doCall(ExportBaseCommand.java:215)
        at org.apache.camel.dsl.jbang.core.commands.Export.doCall(Export.java:28)
        at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.doCall(DependencyCopy.java:46)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:71)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:159)
        at main.CamelJBang.main(CamelJBang.java:36)




potential workarounds for this part (even if still failing due to this other problem CAMEL-19923):



use forward slash:

jbang camel@apache/camel dependency copy --output-directory=""c:\Users\Aurelien Pupier\AppData\Roaming\Code\User\globalStorage\redhat.vscode-camelk\java-dependencies"" ""c:/git/vscode-camelk/test Fixture with speci@l chars/MyRouteBuilderWithAdditionalDependencies.java""


escape backslash:

jbang camel@apache/camel dependency copy --output-directory=""c:\Users\Aurelien Pupier\AppData\Roaming\Code\User\globalStorage\redhat.vscode-camelk\java-dependencies"" ""c:\\git\\vscode-camelk\\test Fixture with speci@l chars\\MyValidRouteBuilder.java""





note: the run is working fine with absolute path using the Windows path


it was working fine with kamel local for which Camel jbang copy dependency is the replacement.","apupier:1695969863:2023-09-29T14:44:23.310+0000:1695969863:2023-09-29T14:44:23.310+0000:I think it comes from https://github.com/apache/camel/blob/f2e3577c39952ed202aaa2e862b716a2fdb43ecc/dsl/camel-jbang/camel-jbang-core/src/main/java/org/apache/camel/dsl/jbang/core/commands/Run.java#L1221-L1233
it is writing in the properties file directly without using the Java Properties file. Consequently, the special characters are not encoded. In our case, the backslash. When reading back from it, we are using the properties API which is removing the special character backslash.

I will continue next week.
apupier:1696220896:2023-10-02T12:28:16.200+0000:1696221616:2023-10-02T12:40:16.855+0000:Unfortunately, no tonly a mater of using Java Properties API to write the file because the file is read in different places. Sometimes with Java Properties API and sometimes not.
To be investigated more but it sounds like the properties file generated can have several times the same key, which is not a valid java properties file. (this seems to be used to specify ""dependency"")

branch using Java Properties API to write: https://github.com/apupier/camel/tree/19922-fixAbsolutePathOnWindows with tests revealing that it not working on Windows due to Properties file not read with Java properties on other place
apupier:1696379851:2023-10-04T08:37:31.376+0000:1696379851:2023-10-04T08:37:31.376+0000:There is a mix of using Java properties APi and reading directly in a lot of places and there are no automated tests. I'm not familiar enough to the codebase to do the change in a safe way and there is a workaround so I won't investigate more on this issue.
davsclaus:1696392774:2023-10-04T12:12:54.681+0000:1696392774:2023-10-04T12:12:54.681+0000:camel dependency copy has been improved to use another way of resolving and copying. So try with latest code (rebuild code first)
apupier:1696396817:2023-10-04T13:20:17.360+0000:1696396964:2023-10-04T13:22:44.510+0000:Unless I mistype something, there is a different error now:

{noformat}
C:\Users\Aurelien Pupier\testJbang>jbang --fresh -Dcamel.jbang.version=4.1.0-SNAPSHOT camel@apache/camel copy dependency --output-directory=""C:\Users\Aurelien Pupier\testJbang\lib"" ""C:\Users\Aurelien Pupier\testJbang\hello.xml""
[jbang] Resolving dependencies...
[jbang]    org.apache.camel:camel-bom:4.1.0-SNAPSHOT@pom
[jbang]    org.apache.camel:camel-jbang-core:4.1.0-SNAPSHOT
[jbang]    org.apache.camel.kamelets:camel-kamelets:4.0.1
[jbang] Dependencies resolved
[jbang] Building jar for CamelJBang.java...
Unknown options: '--output-directory=C:\Users\Aurelien Pupier\testJbang\lib', 'C:\Users\Aurelien Pupier\testJbang\hello.xml'
{noformat}

EDIT: pfouh... copy dependency <--> dependency copy
apupier:1696397381:2023-10-04T13:29:41.397+0000:1696397381:2023-10-04T13:29:41.397+0000:{noformat}
C:\Users\Aurelien Pupier\testJbang>jbang --fresh -Dcamel.jbang.version=4.1.0-SNAPSHOT camel@apache/camel dependency copy --output-directory ""C:\Users\Aurelien Pupier\testJbang\lib"" ""C:\Users\Aurelien Pupier\testJbang\hello.xml""
[jbang] Resolving dependencies...
[jbang]    org.apache.camel:camel-bom:4.1.0-SNAPSHOT@pom
[jbang]    org.apache.camel:camel-jbang-core:4.1.0-SNAPSHOT
[jbang]    org.apache.camel.kamelets:camel-kamelets:4.0.1
[jbang] Dependencies resolved
[jbang] Building jar for CamelJBang.java...

C:\Users\Aurelien Pupier\testJbang>ls lib
camel-api-4.1.0-SNAPSHOT.jar             camel-core-reifier-4.1.0-SNAPSHOT.jar    camel-timer-4.1.0-SNAPSHOT.jar          camel-xml-jaxp-util-4.1.0-SNAPSHOT.jar
camel-base-4.1.0-SNAPSHOT.jar            camel-dsl-support-4.1.0-SNAPSHOT.jar     camel-tooling-model-4.1.0-SNAPSHOT.jar  jakarta.activation-api-2.1.0.jar
camel-base-engine-4.1.0-SNAPSHOT.jar     camel-health-4.1.0-SNAPSHOT.jar          camel-util-4.1.0-SNAPSHOT.jar           jakarta.xml.bind-api-4.0.0.jar
camel-core-engine-4.1.0-SNAPSHOT.jar     camel-main-4.1.0-SNAPSHOT.jar            camel-util-json-4.1.0-SNAPSHOT.jar      slf4j-api-2.0.7.jar
camel-core-languages-4.1.0-SNAPSHOT.jar  camel-management-api-4.1.0-SNAPSHOT.jar  camel-xml-io-4.1.0-SNAPSHOT.jar
camel-core-model-4.1.0-SNAPSHOT.jar      camel-rest-4.1.0-SNAPSHOT.jar            camel-xml-io-dsl-4.1.0-SNAPSHOT.jar
camel-core-processor-4.1.0-SNAPSHOT.jar  camel-support-4.1.0-SNAPSHOT.jar         camel-xml-io-util-4.1.0-SNAPSHOT.jar
{noformat}"
0,CAMEL-19921,Task,Minor,None,"3.22.0, 4.0.2, 4.1.0","
None
",Resolved,Fixed,"3.22.0, 4.0.2, 4.1.0",Andrea Cosentino,Michael Esslinger,0,3,2023-09-27 11:57:48+00:00,2023-09-28 09:02:16+00:00,"Due some changes on kafka site, there would be some changes necessary to keep them in sync.



session.timeout.ms (KIP-735: Increase default consumer session timeout - Apache Kafka - Apache Software Foundation)
request.timeout.ms (KIP-266: Fix consumer indefinite blocking behavior - Apache Kafka - Apache Software Foundation)



Apache Kafka - Consumer Configs","acosentino:1695788603:2023-09-27T12:23:23.567+0000:1695788852:2023-09-27T12:27:32.484+0000:[~davsclaus], I think those were wrong for a while, do we want to backport on 4.0.x and 3.x too?
davsclaus:1695794873:2023-09-27T14:07:53.392+0000:1695794873:2023-09-27T14:07:53.392+0000:Yeah okay for 4.0.2, 3.22

We need to add a note in the 4.0.x upgrade page that these defaults is changed (and good to do on other pages too)"
0,CAMEL-19920,Dependency upgrade,Minor,None,None,"
None
",Resolved,Fixed,"3.20.8, 3.21.2, 3.22.0, 4.0.2, 4.1.0",Andrea Cosentino,Claus Ibsen,0,1,2023-09-27 07:36:01+00:00,2023-09-27 11:24:56+00:00,No Desc,
0,CAMEL-19919,Improvement,Minor,None,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Luca Burgazzoli,Luca Burgazzoli,0,2,2023-09-27 07:27:18+00:00,2023-09-27 15:15:39+00:00,"Headers in a Kafka Record are expressed as byte[], and it is quite common to convert such headers to String. 
It would be nice to provide a ready to use byte[] to String header deserializer instead, something like:




import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.Objects;

import org.apache.camel.component.kafka.serde.KafkaHeaderDeserializer;

public class ToStringHeaderDeserializer implements KafkaHeaderDeserializer {
    private Charset charset = StandardCharsets.UTF_8;

    public Charset getCharset() {
        return charset;
    }

    public void setCharset(Charset charset) {
        this.charset = Objects.requireNonNull(charset);
    }

    @Override
    public Object deserialize(String key, byte[] value) {
        return new String(value, this.charset);
    }
}","davsclaus:1695785823:2023-09-27T11:37:03.179+0000:1695785823:2023-09-27T11:37:03.179+0000:Should we backpor this to 4.0.x ?
lb:1695790620:2023-09-27T12:57:00.984+0000:1695790620:2023-09-27T12:57:00.984+0000:that would be nice, let me do it"
0,CAMEL-19918,Bug,Minor,4.0.0,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Claus Ibsen,Adriano Marcondes Machado,0,2,2023-09-26 16:08:08+00:00,2023-10-03 18:00:03+00:00,"I have a Spring Boot project, and I'm trying to set Saxon as the default implementation for the XPath language.


Per the [documentation](https://camel.apache.org/components/4.0.x/languages/xpath-language.html#_sb_option_camel_language_xpath_saxon), you can set the property {}camel.language.xpath.saxon{} to true to enable it.


However, the Spring Boot runtime configures the language by doing a reflective copy of the properties from the configuration to the language instance object. It happens that the property names are different: [XPathLanguage.java](https://github.com/apache/camel/blob/main/components/camel-xpath/src/main/java/org/apache/camel/language/xpath/XPathLanguage.java#L100-L106}) uses ""useSaxon"" whereas [XPathLanguageConfiguration.java](https://github.com/apache/camel-spring-boot/blob/main/components-starter/camel-xpath-starter/src/main/java/org/apache/camel/language/xpath/springboot/XPathLanguageConfiguration.java) uses ""saxon"".


There's an unit test covering this setting, but it is using [""useSaxon""](https://github.com/apache/camel/blob/main/components/camel-saxon/src/test/resources/org/apache/camel/language/xpath/XPathLanguageDefaultSettingsTest.xml#L29-L31).","davsclaus:1695785680:2023-09-27T11:34:40.026+0000:1695785680:2023-09-27T11:34:40.026+0000:Yes you are welcome to add a getter/setter for saxon (and deprecate useSaxon) on the language class, and adjust that unit test."
0,CAMEL-19917,Improvement,Minor,4.0.1,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,AurÃ©lien Pupier,0,2,2023-09-26 13:01:23+00:00,2023-09-28 11:25:22+00:00,"When calling something like:



jbang camel@apache/camel dependency copy --output-directory=""/home/apupier/.config/Code/User/globalStorage/redhat.vscode-camelk/java-dependencies"" ""/home/apupier/ws/kaoto2/MyRouteBuilderWithAdditionalDependencies.java""




on file with content:



// camel-k: dependency=mvn:org.apache.commons:commons-math3:3.6.1

import org.apache.camel.builder.RouteBuilder;

public class MyRouteBuilderWithAdditionalDependencies extends RouteBuilder{
	public void configure() {
        ArithmeticUt
    }
}




it gives this error:



org.joor.ReflectException: Compilation error:
/MyRouteBuilderWithAdditionalDependencies.java:7: error: not a statement
        ArithmeticUt
        ^
/MyRouteBuilderWithAdditionalDependencies.java:7: error: ';' expected
        ArithmeticUt
                    ^

	at org.apache.camel.dsl.java.joor.MultiCompile.compileUnit(MultiCompile.java:153)
	at org.apache.camel.dsl.java.joor.MultiCompile.compileUnit(MultiCompile.java:75)
	at org.apache.camel.dsl.java.joor.JavaRoutesBuilderLoader.doLoadRoutesBuilders(JavaRoutesBuilderLoader.java:105)
	at org.apache.camel.dsl.support.ExtendedRouteBuilderLoaderSupport.loadRoutesBuilders(ExtendedRouteBuilderLoaderSupport.java:45)
	at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:127)
	at org.apache.camel.main.DefaultRoutesCollector.doCollectRoutesFromDirectory(DefaultRoutesCollector.java:191)
	at org.apache.camel.main.DefaultRoutesCollector.collectRoutesFromDirectory(DefaultRoutesCollector.java:165)
	at org.apache.camel.main.RoutesConfigurer.configureRoutes(RoutesConfigurer.java:196)
	at org.apache.camel.main.BaseMainSupport.configureRoutes(BaseMainSupport.java:564)
	at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:635)
	at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:339)
	at org.apache.camel.main.KameletMain.doInit(KameletMain.java:304)
	at org.apache.camel.support.service.BaseService.init(BaseService.java:78)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:105)
	at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:863)
	at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:648)
	at org.apache.camel.dsl.jbang.core.commands.Run.runSilent(Run.java:268)
	at org.apache.camel.dsl.jbang.core.commands.ExportBaseCommand.runSilently(ExportBaseCommand.java:278)
	at org.apache.camel.dsl.jbang.core.commands.ExportCamelMain.export(ExportCamelMain.java:66)
	at org.apache.camel.dsl.jbang.core.commands.Export.export(Export.java:130)
	at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.doExport(DependencyCopy.java:115)
	at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.export(DependencyCopy.java:51)
	at org.apache.camel.dsl.jbang.core.commands.ExportBaseCommand.doCall(ExportBaseCommand.java:215)
	at org.apache.camel.dsl.jbang.core.commands.Export.doCall(Export.java:28)
	at org.apache.camel.dsl.jbang.core.commands.DependencyCopy.doCall(DependencyCopy.java:46)
	at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:71)
	at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
	at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
	at picocli.CommandLine.access$1500(CommandLine.java:148)
	at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
	at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
	at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
	at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
	at picocli.CommandLine.execute(CommandLine.java:2170)
	at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:159)
	at main.CamelJBang.main(CamelJBang.java:36)




kamel local was supporting not yet compiling files. camel dependency copy is the replacement","davsclaus:1695869311:2023-09-28T10:48:31.766+0000:1695869311:2023-09-28T10:48:31.766+0000:There will be a new option you can turn on

--ignore-loading-error=true

This will resolve dependencies, but beware that due to compilation errors / yaml/xml parsing errors, then not all dependencies may be resolved."
0,CAMEL-19916,New Feature,Minor,4.0.0,,"
None
",Open,Unresolved,None,Unassigned,Dries Van Autreve,0,2,2023-09-26 08:54:43+00:00,2023-09-29 12:12:07+00:00,"In Camel 4, the component camel-rabbitmq was removed in favor of spring-rabbitmq-component


It seems however that not all options are supported in the new component. I was looking for mandatory,Â  but I cannot find a replacement. (Nor there seems a way to hook in a custom Spring RabbitTemplate with own implementation for it as SpringRabbitMQEndpoint creates its own.)


The use case in which this is helpful, is when there's an exchange but the routing to a queue fails (e.g. invalid routing key).


It would be useful if this option is also implemented in spring-rabbitmq-component","davsclaus:1695701050:2023-09-26T12:04:10.513+0000:1695701050:2023-09-26T12:04:10.513+0000:Can you look at their connection factory as you can set confirm type 

        CachingConnectionFactory cf = new CachingConnectionFactory();
        if (confirm) {
            cf.setPublisherConfirmType(CachingConnectionFactory.ConfirmType.CORRELATED);
        }


driesva:1695702786:2023-09-26T12:33:06.443+0000:1695702786:2023-09-26T12:33:06.443+0000:I had a look at {{{}ConfirmType.CORRELATED{}}}, however the javadoc says:
{quote}Use with CorrelationData to correlate confirmations with sent messsages.
{quote}
I've not really found an option to pass such an object using the {{spring-rabbitmq-component}}

I notice in {{SpringRabbitMQProducer::processInOnly}} there's an invocation of the {{{}RabbitMQTemplate{}}}:
{code:java}
t.send(ex, rk, msg);
{code}
when looking further at the implementation, it will delegate to the {{send}} method with {{correlationData}} parameter begin {{null}}
davsclaus:1695960727:2023-09-29T12:12:07.736+0000:1695960727:2023-09-29T12:12:07.736+0000:It would be good if you can research more how to do what you want with spring rabbitmq, and if you find out, then you are welcome to work on a PR"
0,CAMEL-19915,Improvement,Minor,None,,"
None
",Open,Unresolved,None,Unassigned,Abel,0,2,2023-09-26 02:37:58+00:00,2023-09-26 04:35:26+00:00,"Per RFC5402, the compressed can before signed. But Camel As2 not support so. When I use webMethods to send data to Camel as2, throws sign to match error.


RFC 5402 - Compressed Data within an Internet Electronic Data Interchange (EDI) Message (ietf.org)",davsclaus:1695674126:2023-09-26T04:35:26.739+0000:1695674126:2023-09-26T04:35:26.739+0000:You are welcome to add support for this and send PR
0,CAMEL-19914,Bug,Major,3.20.6,,"
None
",Resolved,Invalid,None,Unassigned,John Yin,0,2,2023-09-26 00:00:27+00:00,2023-10-14 23:28:43+00:00,"When a stopped quartz route is resumed, if it has missed a previously scheduled firing because of the stop, it would immediately fire regardless its defined schedule.Â  Here is an example:


from(""quartz://test?cron=0+0/3+?+*"").routeId(""ROUTE_test"").autoStartup(true).log(""in test"")


Â 


from(""timer://start_stop_test?repeatCount=1"").autoStartup(true)


Â  Â  .process(

{

Â  Â  Â  Â  // stop route ""ROUTE_test"" using routeController API

Â  Â  Â  Â  // wait for more than 3 minutes so that the stopped ROUTE_test will miss a firing

Â  Â  Â  Â  // resume route ""ROUTE_test"" using routeController API.Â  You will see ROUTE_test immediately fire regardless whether it is the scheduled time or not.

Â  Â  }

)","davsclaus:1695674082:2023-09-26T04:34:42.788+0000:1695674082:2023-09-26T04:34:42.788+0000:You need to configure misfire instructions and whatnot, quartz has many options, so check their docs first.
bocamel:1695705077:2023-09-26T13:11:17.970+0000:1695705077:2023-09-26T13:11:17.970+0000:Thanks Claus!Â  I should have paid more attention to the misfire instruction in the doc.Â  Just for the record, I should have used

from(""quartz://test?cron=0+0/3+{*}+?+{*}+*&trigger.misfireInstruction=4"")

Â 

Thanks again!
bocamel:1697205401:2023-10-13T21:56:41.331+0000:1697205401:2023-10-13T21:56:41.331+0000:HiÂ [~davsclaus],

It seemed that trigger.misfireInstruction=4 no longer works.Â  With quartz-2.3.2.jar, and the following route
Â 
from(""quartz://test-1?cron=0+0/3+*+?+*+*&trigger.timeZone=America/New_York&trigger.misfireInstruction=4"").routeId('ROUTE_test_1')
Camel (both 3.20.6 and 4.0.1) returned the following error:

Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: quartz://test-1?cron=0+0%2F3+*+%3F+*+*&trigger.misfireInstruction=4&trigger.timeZone=America%2FNew_York due to: Error binding property (misfireInstruction=4) with name: misfireInstruction on bean: Trigger 'Camel_camel-1.test-1': Â triggerClass: 'org.quartz.impl.triggers.CronTriggerImpl calendar: 'null' misfireInstruction: 1 nextFireTime: null with value: 4

If the misfireInstruction is removed from the route, the route can be started no problem.

Â 

Should I open another ticket?Â  Or I did something wrong here.

Thanks,

John
davsclaus:1697239453:2023-10-14T07:24:13.016+0000:1697239453:2023-10-14T07:24:13.016+0000:I looked and its not a bug. Quartz does not allow misfire 4 for cron triggers
Only 0, 1 or 2 is allowed for cron

        if (!validateMisfireInstruction(misfireInstruction)) {
            throw new IllegalArgumentException(
                        ""The misfire instruction code is invalid for this type of trigger."");
        }
        this.misfireInstruction = misfireInstruction;

davsclaus:1697240083:2023-10-14T07:34:43.094+0000:1697240083:2023-10-14T07:34:43.094+0000:I am making Camel report this better, so you will see this in the future

Caused by: java.lang.IllegalArgumentException: The misfire instruction code is invalid for this type of trigger.
	at org.quartz.impl.triggers.AbstractTrigger.setMisfireInstruction(AbstractTrigger.java:677)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.apache.camel.impl.engine.IntrospectionSupport.setProperty(IntrospectionSupport.java:635)
	at org.apache.camel.impl.engine.DefaultBeanIntrospection.setProperty(DefaultBeanIntrospection.java:206)
	at org.apache.camel.support.PropertyBindingSupport.doSetSimplePropertyViaReflection(PropertyBindingSupport.java:929)
	at org.apache.camel.support.PropertyBindingSupport.setSimplePropertyViaReflection(PropertyBindingSupport.java:817)
	... 26 more
bocamel:1697297323:2023-10-14T23:28:43.468+0000:1697297323:2023-10-14T23:28:43.468+0000:Hi [~davsclaus],Â 

Thanks for your response and for improving the exception message in Camel.Â  For quartz cron routes, the misfireInstruction of omitting the previous misfire is 2 as shown below.

from(""quartz://test-1?cron=0+0/3+{*}+?+{*}+*&trigger.timeZone=America/New_York&trigger.misfireInstruction={*}2{*}"").routeId('ROUTE_test_1')

Thanks again for your help!

Â 

Â "
0,CAMEL-19913,Improvement,Minor,4.1.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-25 18:37:08+00:00,2023-09-25 18:46:21+00:00,You may just want to dump the output directly to console to see what would happen. Currently it requires to dump to dir/files.,
0,CAMEL-19912,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-25 12:06:05+00:00,2023-09-26 11:59:52+00:00,So its easier to declare beans that are created via a static factory method.,"davsclaus:1695616355:2023-09-25T12:32:35.204+0000:1695616364:2023-09-25T12:32:44.360+0000:If factory-method is set then constructor arguments are used as values for invoking the factorty method

{code}
- beans:
    - name: orderService
      type: ""com.foo.OrderService""
      factoryMethod: ""createOrder""
      constructors:
        0: ""true""
        1: ""#bean:office""  
{code}
davsclaus:1695640267:2023-09-25T19:11:07.533+0000:1695642839:2023-09-25T19:53:59.616+0000:TODO: model *DONE*
TODO: dumper *DONE*
TODO: documentation *DONE*
davsclaus:1695683195:2023-09-26T07:06:35.135+0000:1695700788:2023-09-26T11:59:48.496+0000:TODO: factory-bean / factory-ref (allow another bean to create) *DONE*"
0,CAMEL-19911,Improvement,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-25 08:14:38+00:00,2023-09-25 13:34:50+00:00,This would make things easier when setting it. It's an advanced parameter to be used just in case of create container if not exists invocation.,
0,CAMEL-19910,Bug,Major,4.0.1,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-09-23 12:28:06+00:00,2023-09-23 12:28:33+00:00,No Desc,
0,CAMEL-19909,Task,Minor,4.0.1,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Tomohisa Igarashi,Tomohisa Igarashi,0,2,2023-09-22 20:32:46+00:00,2023-09-24 08:44:33+00:00,"from.json model catalog says ""description"" is of javaType ""org.apache.camel.model.DescriptionDefinition"" but the class doesn't exist. It's just a String.
https://github.com/apache/camel/blob/main/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/models/from.json#L17","davsclaus:1695429296:2023-09-23T08:34:56.243+0000:1695429296:2023-09-23T08:34:56.243+0000:It affects the entire yaml schema, but its potentially a candidate for backport to 4.0.2
igarashitm:1695441919:2023-09-23T12:05:19.117+0000:1695441919:2023-09-23T12:05:19.117+0000:Sounds like a plan, I submitted a backport PR - https://github.com/apache/camel/pull/11539"
0,CAMEL-19908,Task,Minor,None,"4.0.2, 4.1.0","
None
",Resolved,Fixed,"4.0.2, 4.1.0",Claus Ibsen,Lucia DrozdovÃ¡,0,1,2023-09-22 11:22:40+00:00,2023-09-23 08:22:22+00:00,"Please, there is a typo in the first sentence of AZURE SERVICEBUS docs in camel quarkus:Â 




Send and receive messages to/from Azure Event Bus. 



Can it be please changed to Azure Service Bus?


Thank you.",
0,CAMEL-19907,New Feature,Major,3.21.0,"3.21.2, 3.22.0, 4.0.2, 4.2.0","
None
",Resolved,Fixed,"3.21.2, 3.22.0, 4.0.2, 4.2.0",Claus Ibsen,Andrea Cosentino,0,1,2023-09-22 09:47:16+00:00,2023-10-22 12:33:36+00:00,No Desc,
0,CAMEL-19906,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-22 09:45:33+00:00,2023-09-23 08:15:59+00:00,"If you have an application.properties file containing all the needed bits, they will be exported directly, so some code could be removed.",
0,CAMEL-19905,Improvement,Major,None,4.2.0,"
None
",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,2,2023-09-22 08:35:16+00:00,2023-11-10 08:21:24+00:00,"It appears that when you have big HTTP requests then vertx-http server will read all content into memory.


At first glance it does not seems an easy API to use some kind of streaming mode via java.io.InputStream as the message body type.


The vertx based Buffer appears to be read entirely into memory.


io.vertx.ext.web.handler.BodyHandler#create()


See the following code
https://github.com/apache/camel/blob/b7eed290f06dc483e67892b3bb1cfccc0a4e1f1e/components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java#L276","davsclaus:1695343057:2023-09-22T08:37:37.414+0000:1695343057:2023-09-22T08:37:37.414+0000:[~jamesnetherton] I wonder if you have some thoughts or could look into this?

When I looked into the code of vertx, then it appears that the body is backed as a vertx Buffer that are read via the 
io.vertx.ext.web.handler.impl.BodyHandlerImpl.BHandler

And that BHandler will append to its buffer, which is in-memory based.

But what we need is like a servlet based (eg camel-servlet) to just have access to the HTTP stream, and read the message payload directly via an API such as java.io.InputStream.

davsclaus:1695344478:2023-09-22T09:01:18.456+0000:1695344478:2023-09-22T09:01:18.456+0000:I cannot find anything in the vertx-web docs about large body
https://vertx.io/docs/vertx-web/java/#_request_body_handling

Yes you can set a body limit that will cause vertx to send back server error, and there is file upload support (multipart), but this is for general http payloads that are send in chunking mode, with large data - can be GBs in size.
davsclaus:1695345159:2023-09-22T09:12:39.537+0000:1695345159:2023-09-22T09:12:39.537+0000:Asked in the vertx community
https://groups.google.com/g/vertx/c/EtEZ7BkFW-A
jamesnetherton:1698973189:2023-11-03T08:59:49.465+0000:1698973189:2023-11-03T08:59:49.465+0000:Not sure if this is the right way of going about fixing this, but I made a POC that could handle large requests / response payloads.

https://github.com/apache/camel/compare/main...jamesnetherton:camel:CAMEL-19905

I added a new 'useStreaming' option. When true the request body is handled in a different way to normal. E.g don't register the normal BodyHandler, but instead register a handler on the incoming Vert.x HttpRequest that lets us read the body payload in chunks. Then we feed each chunk into `CachedOutputStream` which we can use to get an `InputStream` for the exchange message body. That allows overflow to disk if needed.

I have a basic unit test that uploads and echos back a 4GB payload and it seems to be working ok. Also tested with a small heap size and that was ok.
davsclaus:1698973648:2023-11-03T09:07:28.703+0000:1698973648:2023-11-03T09:07:28.703+0000:James that is really good, thanks"
0,CAMEL-19904,Task,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-09-22 07:37:15+00:00,2023-09-22 07:53:52+00:00,No Desc,davsclaus:1695340432:2023-09-22T07:53:52.208+0000:1695340432:2023-09-22T07:53:52.208+0000:They were no updated since Camel 3.11.0 release
0,CAMEL-19903,Dependency upgrade,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-22 05:17:56+00:00,2023-09-22 07:46:59+00:00,No Desc,
0,CAMEL-19872,New Feature,Minor,None,,"
None
",Open,Unresolved,None,Unassigned,Aayush,0,2,2023-09-15 10:03:41+00:00,2023-09-15 10:24:13+00:00,"Today, It is not possible to configure the AWS Glue schema registry for the Camel Kafka Component. There is no information about how to configure Camel DSL with the AWS GLU in the current documentation https://camel.apache.org/components/4.0.x/kafka-component.html{}",acosentino:1694744653:2023-09-15T10:24:13.016+0000:1694744653:2023-09-15T10:24:13.016+0000:A missing way of configuring an external registry cannot be a critical issue. 
0,CAMEL-19871,Task,Minor,"3.20.6, 3.21.0, 4.0.0","3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Nicolas Filotto,Nicolas Filotto,0,1,2023-09-15 08:43:40+00:00,2023-09-19 16:33:00+00:00,There are many test dependencies of the camel-joor component for which no scope has been set which pulls useless dependencies at runtime.,"nfilotto:1694814552:2023-09-16T05:49:12.411+0000:1694814552:2023-09-16T05:49:12.411+0000:Those changes cause compilation issues on the CI job that publishes snapshots like [https://ci-builds.apache.org/job/Camel/job/Camel%20Daily%20Snapshot%20Deploy/job/main/461/] , those compilation problems need to be investigated but for now, let's revert all changes to get the snapshots published again.
nfilotto:1695084347:2023-09-19T08:45:47.430+0000:1695084347:2023-09-19T08:45:47.430+0000:After a deeper analysis, it appears that the job fails because it tries to generate the Javadoc of the test classes generated by the {{jooq-codegen-maven}} which is unexpected. This problem is directly addressed within the context of this ticket.
nfilotto:1695104349:2023-09-19T14:19:09.322+0000:1695104349:2023-09-19T14:19:09.322+0000:The corresponding PRs:
 * 4.1 https://github.com/apache/camel/pull/11455
 * 4.0 https://github.com/apache/camel/pull/11465
 * 3.22 https://github.com/apache/camel/pull/11466
 * 3.21 https://github.com/apache/camel/pull/11467
 * 3.20 https://github.com/apache/camel/pull/11468"
0,CAMEL-19870,Bug,Major,3.21.0,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Unassigned,Isakkirajan Perumal,0,2,2023-09-15 06:42:09+00:00,2023-09-18 06:56:30+00:00,"The third party AS2 server that we are calling is returning the MDN response in which the disposition field is likeÂ 


Ex: ""Disposition: automatic-action/MDN-Sent-automatically; processed""


As per the AS2 spec (https://www.ietf.org/rfc/rfc4130.txt) this field can be case insensitive, but camel as2 validates this field with case sensitive hence it fails.


For reproducing the issue, please use the attached ""DispositionNotificationContentUtilsTest.java"" file.




Failed to parse entity content
Â  Â  Â  Â  at org.apache.camel.support.component.ApiMethodHelper.invokeMethod(ApiMethodHelper.java:531)
Â  Â  Â  Â  at org.apache.camel.support.component.AbstractApiProducer.doInvokeMethod(AbstractApiProducer.java:122)
Â  Â  Â  Â  at org.apache.camel.support.component.AbstractApiProducer$1.run(AbstractApiProducer.java:89)
Â  Â  Â  Â  at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
Â  Â  Â  Â  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
Â  Â  Â  Â  at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)
Â  Â  Â  Â  at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
Â  Â  Â  Â  at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
Â  Â  Â  Â  at java.base/java.lang.Thread.run(Thread.java:836)
Caused by: org.apache.http.HttpException: Failed to parse entity content
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMultipartSignedEntity(EntityParser.java:365)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseAS2MessageEntity(EntityParser.java:472)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.io.AS2BHttpClientConnection.receiveResponseEntity(AS2BHttpClientConnection.java:55)
Â  Â  Â  Â  at org.apache.http.impl.conn.CPoolProxy.receiveResponseEntity(CPoolProxy.java:162)
Â  Â  Â  Â  at org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:279)
Â  Â  Â  Â  at org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.AS2ClientConnection.send(AS2ClientConnection.java:192)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.AS2ClientManager.send(AS2ClientManager.java:391)
Â  Â  Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
Â  Â  Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:566)
Â  Â  Â  Â  at org.apache.camel.support.component.ApiMethodHelper.invokeMethod(ApiMethodHelper.java:523)
Â  Â  Â  Â  ... 8 more
Caused by: org.apache.http.ParseException: failed to parse text entity
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMultipartSignedEntityBody(EntityParser.java:602)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMultipartSignedEntity(EntityParser.java:357)
Â  Â  Â  Â  ... 20 more
Caused by: org.apache.http.ParseException: failed to parse EDI entity
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseEntityBody(EntityParser.java:858)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMultipartSignedEntityBody(EntityParser.java:548)
Â  Â  Â  Â  ... 21 more
Caused by: org.apache.http.ParseException: failed to parse text entity
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMultipartReportEntityBody(EntityParser.java:710)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseEntityBody(EntityParser.java:826)
Â  Â  Â  Â  ... 22 more
Caused by: org.apache.http.ParseException: failed to parse MDN entity
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMessageDispositionNotificationEntityBody(EntityParser.java:777)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMultipartReportEntityBody(EntityParser.java:699)
Â  Â  Â  Â  ... 23 more
Caused by: org.apache.http.ParseException: Invalid 'Disposition' field: invalid disposition mode 'automatic-action/MDN-Sent-automatically'
Â  Â  Â  Â  at org.apache.camel.component.as2.api.util.DispositionNotificationContentUtils.parseDispositionNotification(DispositionNotificationContentUtils.java:197)
Â  Â  Â  Â  at org.apache.camel.component.as2.api.entity.EntityParser.parseMessageDispositionNotificationEntityBody(EntityParser.java:772)
Â  Â  Â  Â  ... 24 more","isakki:1694734948:2023-09-15T07:42:28.231+0000:1694734948:2023-09-15T07:42:28.231+0000:I have started working on this issue.
davsclaus:1694986427:2023-09-18T05:33:47.595+0000:1694986427:2023-09-18T05:33:47.595+0000:Thanks for reporting and the PR
isakki:1694991390:2023-09-18T06:56:30.623+0000:1694991390:2023-09-18T06:56:30.623+0000:Thanks [~davsclaus]."
0,CAMEL-19869,Task,Major,4.0.0,,"
None
",Open,Unresolved,None,Unassigned,Nicolas Filotto,0,1,2023-09-14 08:21:31+00:00,2023-09-14 12:19:56+00:00,"The integration tests InfinispanRemoteAggregationRepositoryIT and InfinispanRemoteAggregationRepositoryOperationsIT are failing on the CI, so they should be investigated and fixed.



[ERROR] Errors:Â 
[ERROR] Â  InfinispanRemoteAggregationRepositoryIT.checkAggregationFromOneRoute:60 Â» NoSuchMethod 'org.infinispan.client.hotrod.configuration.ConfigurationBuilder org.infinispan.client.hotrod.configuration.ConfigurationBuilder.read(org.infinispan.client.hotrod.configuration.Configuration)'
[ERROR] Â  InfinispanRemoteAggregationRepositoryOperationsIT.setupResources:59 Â» NoSuchMethod 'org.infinispan.client.hotrod.configuration.ConfigurationBuilder org.infinispan.client.hotrod.configuration.ConfigurationBuilder.read(org.infinispan.client.hotrod.configuration.Configuration)'



NB: The same tests seem to pass on the main branch",
0,CAMEL-19868,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-09-14 07:51:10+00:00,2023-09-18 11:48:43+00:00,The component camel-core-catalog has a lot of duplilcated code for handling URI. It duplicates both URISupport and Pair. This makes maintenance of the code harder.,orpiske:1695008923:2023-09-18T11:48:43.923+0000:1695008923:2023-09-18T11:48:43.923+0000:Should have been fixed by the linked PRs.
0,CAMEL-19867,Task,Major,4.0.0,4.0.1,"
None
",Resolved,Fixed,4.0.1,Unassigned,Nicolas Filotto,0,1,2023-09-14 07:15:22+00:00,2023-09-14 08:24:06+00:00,"Some tests of the integration test FhirUpdateIT fail on the CI, so they need to be investigated and fixed.


Â 




[ERROR] Errors: 
[ERROR] Â  FhirUpdateIT.testResourceBySearchUrl:176->AbstractFhirTestSupport.requestBodyAndHeaders:84 Â» CamelExecution Exception occurred during execution on the exchange: Exchange[5B906AAEBE110CF-0000000000000001]
[ERROR] Â  FhirUpdateIT.testResourceBySearchUrlAndResourceAsString:197->AbstractFhirTestSupport.requestBodyAndHeaders:84 Â» CamelExecution Exception occurred during execution on the exchange: Exchange[5B906AAEBE110CF-0000000000000000]




NB: The same tests seem to pass on the main branch",nfilotto:1694650568:2023-09-14T08:16:08.320+0000:1694650568:2023-09-14T08:16:08.320+0000:Fixed by https://github.com/apache/camel-spring-boot/pull/943
0,CAMEL-19866,Improvement,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-14 05:44:18+00:00,2023-09-14 06:42:26+00:00,No Desc,
0,CAMEL-19865,Improvement,Major,4.0.0,,"
None
",Closed,Won't Fix,None,Tomohisa Igarashi,Tomohisa Igarashi,0,1,2023-09-13 15:08:44+00:00,2023-09-13 16:33:49+00:00,"https://camel.apache.org/components/4.0.x/dataformats/zipFile-dataformat.html


In addition to its dataformat, camel-zipfile component has `ZipSplitter` expression language. But since it doesn't expose it as a language (e.g. put a ZipSplitterLanguage annotated with @Language), it's not available in the DSLs other than Java. It would be nice to have it.","igarashitm:1694594029:2023-09-13T16:33:49.076+0000:1694594029:2023-09-13T16:33:49.076+0000:It turned out the `ref` language supports custom Expression bean, so no need to put all languages into core model. ZipSplitter would be better to stay there then.

{code:yaml}
- split:
     expression:
       ref: myZipSplitterBean
{code}"
0,CAMEL-19864,Task,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Unassigned,Nicolas Filotto,0,3,2023-09-13 14:43:48+00:00,2023-09-29 13:35:04+00:00,"The spring boot integration test of the component camel-univocity-parsers is failing on the CI, so it needs to be investigated and fixed




[ERROR] Errors:Â 
[ERROR] org.apache.camel.itest.springboot.CamelUnivocityParsersTest.componentTests
[ERROR] Â  Run 1: CamelUnivocityParsersTest.componentTests:43->AbstractSpringBootTestSupport.runDataformatTest:80 Â» Â Error while executing tests. Wrapped exception is: java.util.concurrent.ExecutionException: org.apache.camel.PropertyBindingException: Error binding property (normalizedLineSeparator=#bean:\n) with name: normalizedLineSeparator on bean: org.apache.camel.dataformat.univocity.UniVocityCsvDataFormat@13dd383c with value: #bean:\n
Â  Â  at java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)
Â  Â  at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)
Â  Â  at org.apache.camel.itest.springboot.CommandRouter.execute(CommandRouter.java:48)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
Â  Â  at org.apache.camel.itest.springboot.util.SpringBootContainerFacade.execute(SpringBootContainerFacade.java:50)
Â  Â  at org.apache.camel.itest.springboot.util.SpringBootContainerFacade.executeTest(SpringBootContainerFacade.java:39)
Â  Â  at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.runDataformatTest(AbstractSpringBootTestSupport.java:80)
Â  Â  at org.apache.camel.itest.springboot.CamelUnivocityParsersTest.componentTests(CamelUnivocityParsersTest.java:43)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
Â  Â  at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:728)
Â  Â  at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
Â  Â  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
Â  Â  at org.jboss.arquillian.junit5.ArquillianExtension.interceptTestMethod(ArquillianExtension.java:88)
Â  Â  at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
Â  Â  at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
Â  Â  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
Â  Â  at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
Â  Â  at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
Â  Â  at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
Â  Â  at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
Â  Â  at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
Â  Â  at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
Â  Â  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
Â  Â  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
Â  Â  at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
Â  Â  at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
Â  Â  at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
Â  Â  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:218)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:214)
Â  Â  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:139)
Â  Â  at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
Â  Â  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
Â  Â  at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Â  Â  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
Â  Â  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
Â  Â  at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Â  Â  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
Â  Â  at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
Â  Â  at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
Â  Â  at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
Â  Â  at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)
Â  Â  at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
Â  Â  at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)
Â  Â  at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)
Â  Â  at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)
Â  Â  at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)
Â  Â  at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)
Â  Â  at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)
Â  Â  at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)
Â  Â  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)
Â  Â  at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)
Â  Â  at org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)
Â  Â  at org.junit.platform.launcher.core.SessionPerRequestLauncher.execute(SessionPerRequestLauncher.java:63)
Â  Â  at org.jboss.arquillian.junit5.container.JUnitJupiterTestRunner.execute(JUnitJupiterTestRunner.java:57)
Â  Â  at org.jboss.arquillian.protocol.jmx.JMXTestRunner.doRunTestMethod(JMXTestRunner.java:153)
Â  Â  at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:137)
Â  Â  at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:119)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
Â  Â  at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:72)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
Â  Â  at java.base/sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:262)
Â  Â  at java.management/com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112)
Â  Â  at java.management/com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46)
Â  Â  at java.management/com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237)
Â  Â  at java.management/com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138)
Â  Â  at java.management/com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252)
Â  Â  at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:814)
Â  Â  at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:802)
Â  Â  at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1472)
Â  Â  at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1310)
Â  Â  at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1405)
Â  Â  at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
Â  Â  at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:360)
Â  Â  at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:200)
Â  Â  at java.rmi/sun.rmi.transport.Transport$1.run(Transport.java:197)
Â  Â  at java.base/java.security.AccessController.doPrivileged(AccessController.java:712)
Â  Â  at java.rmi/sun.rmi.transport.Transport.serviceCall(Transport.java:196)
Â  Â  at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:587)
Â  Â  at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:828)
Â  Â  at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:705)
Â  Â  at java.base/java.security.AccessController.doPrivileged(AccessController.java:399)
Â  Â  at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:704)
Â  Â  at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
Â  Â  at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
Â  Â  at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: org.apache.camel.PropertyBindingException: Error binding property (normalizedLineSeparator=#bean:\n) with name: normalizedLineSeparator on bean: org.apache.camel.dataformat.univocity.UniVocityCsvDataFormat@13dd383c with value: #bean:\n
Â  Â  at org.apache.camel.support.PropertyBindingSupport.doSetPropertyValue(PropertyBindingSupport.java:541)
Â  Â  at org.apache.camel.support.PropertyBindingSupport.doBuildPropertyOgnlPath(PropertyBindingSupport.java:417)
Â  Â  at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:297)
Â  Â  at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:1920)
Â  Â  at org.apache.camel.spring.boot.util.CamelPropertiesHelper.setCamelProperties(CamelPropertiesHelper.java:117)
Â  Â  at org.apache.camel.spring.boot.util.CamelPropertiesHelper.copyProperties(CamelPropertiesHelper.java:47)
Â  Â  at org.apache.camel.dataformat.univocity.springboot.UniVocityCsvDataFormatAutoConfiguration$1.configure(UniVocityCsvDataFormatAutoConfiguration.java:66)
Â  Â  at org.apache.camel.impl.engine.CustomizersLifecycleStrategy.lambda$onDataFormatCreated$5(CustomizersLifecycleStrategy.java:68)
Â  Â  at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)
Â  Â  at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
Â  Â  at java.base/java.util.stream.SortedOps$SizedRefSortingSink.end(SortedOps.java:357)
Â  Â  at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:510)
Â  Â  at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
Â  Â  at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)
Â  Â  at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)
Â  Â  at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
Â  Â  at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
Â  Â  at org.apache.camel.impl.engine.CustomizersLifecycleStrategy.onDataFormatCreated(CustomizersLifecycleStrategy.java:68)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doResolveDataFormat(AbstractCamelContext.java:3512)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.lambda$resolveDataFormat$7(AbstractCamelContext.java:3525)
Â  Â  at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1708)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.resolveDataFormat(AbstractCamelContext.java:3525)
Â  Â  at org.apache.camel.itest.springboot.command.DataFormatTestCommand.executeTest(DataFormatTestCommand.java:46)
Â  Â  at org.apache.camel.itest.springboot.command.DataFormatTestCommand.executeTest(DataFormatTestCommand.java:33)
Â  Â  at org.apache.camel.itest.springboot.command.AbstractTestCommand.execute(AbstractTestCommand.java:50)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
Â  Â  at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
Â  Â  at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
Â  Â  at java.base/java.lang.reflect.Method.invoke(Method.java:568)
Â  Â  at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
Â  Â  at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196)
Â  Â  at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
Â  Â  at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115)
Â  Â  at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
Â  Â  ... 3 more
Caused by: org.apache.camel.NoSuchBeanException: No bean could be found in the registry for: \n
Â  Â  at org.apache.camel.support.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:223)
Â  Â  at org.apache.camel.support.PropertyBindingSupport.resolveBean(PropertyBindingSupport.java:1597)
Â  Â  at org.apache.camel.support.PropertyBindingSupport.resolveValue(PropertyBindingSupport.java:895)
Â  Â  at org.apache.camel.support.PropertyBindingSupport.doSetPropertyValue(PropertyBindingSupport.java:527)
Â  Â  ... 36 more","klease78:1695284162:2023-09-21T16:16:02.620+0000:1695284162:2023-09-21T16:16:02.620+0000:The root cause is the use of the double backslash in the dataformat definition: [https://github.com/apache/camel/blob/c90e92dada37cf356537689d515794058389d51b/core/camel-core-model/src/main/java/org/apache/camel/model/dataformat/UniVocityAbstractDataFormat.java#L68C1-L68C56]

This is preserved through the generated Json files and written as is in the generated Spring Boot configuration. But there it needs to be ""\n"" and not ""\\n"".

I think it makes sense to use ""\n"" in the original annotation but perhaps this will cause issues in other consumers of the generated Json files.
davsclaus:1695284934:2023-09-21T16:28:54.794+0000:1695284934:2023-09-21T16:28:54.794+0000:Thanks for finding out why. I wonder if you could see if there is other data formats, components. that may have defined \n or \\n as default value in their options that are generated into json meta files
klease78:1695368048:2023-09-22T15:34:08.034+0000:1695368319:2023-09-22T15:38:39.212+0000:I checked the json files under catalog and didn't find any others with \n or 
&#92;&#92;n. However the univocity json files also use ""\"""" and ""&#92;&#92;"" and those apparently don't cause any issues.
klease78:1695888298:2023-09-28T16:04:58.012+0000:1695888298:2023-09-28T16:04:58.012+0000:Gave up on this approach because it causes issues for the generated Spring schema file and also the documentation pages. In fact this default value, and others for the UniVocity parsers, are not defaults on the Camel dataformat but on the underlying Univocity parser configuration. However, the Camel Spring Boot auto configuration attempts to set them as properties when it instantiates the Camel dataformat.

Based on the suggestion from [~davsclaus], decided the path of least resistance is to remove the default value from the Metadata annotation for UniVocityAbstractDataFormat."
0,CAMEL-19863,Task,Major,4.1.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Karen Lease,Nicolas Filotto,0,2,2023-09-13 12:24:00+00:00,2023-09-18 11:57:34+00:00,"Several tests are failing on the CI, so they need to be investigated and fixed




[ERROR] Failures:Â 
[ERROR] org.apache.camel.component.kamelet.springboot.KameletBasicTest.canConsumeFromKamelet
[ERROR] Â  Run 1: KameletBasicTest.canConsumeFromKamelet:70Â 
Expecting actual not to be null
[ERROR] Â  Run 2: KameletBasicTest.canConsumeFromKamelet:70Â 
Expecting actual not to be null
[ERROR] Â  Run 3: KameletBasicTest.canConsumeFromKamelet:70Â 
Expecting actual not to be null
[INFO]Â 
[ERROR] org.apache.camel.component.kamelet.springboot.KameletConsumeOnlyTest.canConsumeFromKamelet
[ERROR] Â  Run 1: KameletConsumeOnlyTest.canConsumeFromKamelet:52Â 
Expecting actual not to be null
[ERROR] Â  Run 2: KameletConsumeOnlyTest.canConsumeFromKamelet:52Â 
Expecting actual not to be null
[ERROR] Â  Run 3: KameletConsumeOnlyTest.canConsumeFromKamelet:52Â 
Expecting actual not to be null
[INFO]Â 
[ERROR] org.apache.camel.component.kamelet.springboot.KameletConsumerUoWIssueTest.testUoW
[ERROR] Â  Run 1: KameletConsumerUoWIssueTest.testUoW mock://foo Body of message: 0. Expected: <1> but was: <null>
[ERROR] Â  Run 2: KameletConsumerUoWIssueTest.testUoW mock://foo Body of message: 0. Expected: <1> but was: <null>
[ERROR] Â  Run 3: KameletConsumerUoWIssueTest.testUoW mock://foo Body of message: 0. Expected: <1> but was: <null>",klease78:1694870976:2023-09-16T21:29:36.406+0000:1694870976:2023-09-16T21:29:36.406+0000:The issue is in the timer used by the Kamelet; includeMetadata now has to be set to receive the Exchange Property.
0,CAMEL-19862,Task,Minor,4.0.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Unassigned,Karen Lease,0,1,2023-09-13 10:27:04+00:00,2023-09-30 09:39:30+00:00,"Upgrade from version 25 to 30 of Apache parent pom.
Possibly revisit the filter logic which currently removes all properties from the Camel pom; only the ones from the Camel parent are included.",
0,CAMEL-19861,Task,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Nicolas Filotto,0,1,2023-09-13 09:38:16+00:00,2023-09-13 12:21:32+00:00,"The test KafkaConsumerIdempotentWithProcessorIT fails randomly on the CI, so it needs to be investigated and fixed




[ERROR] Failures:Â 
[ERROR] Â  KafkaConsumerIdempotentWithProcessorIT.kafkaMessageIsConsumedByCamel:74->KafkaConsumerIdempotentTestSupport.doRun:59 mock://resulti Received message count. Expected: <200> but was: <168>",
0,CAMEL-19860,Bug,Major,"3.18.8, 3.20.6, 3.21.0, 4.0.0",4.1.0,"
None
",Resolved,Fixed,4.1.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-09-13 09:32:48+00:00,2023-09-18 11:49:29+00:00,"When the ZipIterator receives an InputStream that is already a BufferedInputStream, it wraps it on another BufferedInputStream. This may be a waste of memory.",orpiske:1695008969:2023-09-18T11:49:29.985+0000:1695008969:2023-09-18T11:49:29.985+0000:Should have been fixed by the linked PRs.
0,CAMEL-19859,Bug,Major,4.0-RC2,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Unassigned,tanyu,0,3,2023-09-13 09:28:17+00:00,2023-09-18 11:57:09+00:00,"1. I config this component
 
2. but the SpringRabbitMQComponent' doinit() method be executed before the method above, so the DefaultMessagePropertiesConverter reference old value",davsclaus:1695009429:2023-09-18T11:57:09.777+0000:1695009429:2023-09-18T11:57:09.777+0000:Thanks for reporting and the PRs
0,CAMEL-19858,Bug,Major,3.20.2,,"
None
",Resolved,Not A Bug,None,Unassigned,Gerald Kallas,0,3,2023-09-13 09:17:26+00:00,2023-09-22 06:04:46+00:00,"I've following code




Â  Â  Â  Â  <sslContextParameters id=""sslContextParameters"" xmlns=""http://camel.apache.org/schema/blueprint"">
Â  Â  Â  Â  Â  Â  Â  Â  <keyManagers keyPassword=""xxx"">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <keyStore resource=""/opt/apache-karaf/etc/casisp.p12"" password=""xxx""/>
Â  Â  Â  Â  Â  Â  Â  Â  </keyManagers>
Â  Â  Â  Â  Â  Â  Â  Â  <trustManagers>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <keyStore resource=""/opt/apache-karaf/etc/truststore.jks"" password=""xxx""/>
Â  Â  Â  Â  Â  Â  Â  Â  </trustManagers>
Â  Â  Â  Â  </sslContextParameters>
...
Â  Â  Â  Â  <to uri='https://server/api/v1/entity/integrationservice/delta?sslContextParameters=#sslContextParameters'/>



and I'm getting the error




javax.net.ssl.SSLException: Unexpected error: java.security.InvalidAlgorithmParameterException: the trustAnchors parameter must be non-empty



This error relates normally to the fact that a keystore or truststore can't be found.


Both are there and the truststore contains the appropriate certificate.","klease78:1694934412:2023-09-17T15:06:52.516+0000:1694934412:2023-09-17T15:06:52.516+0000:Hi [~catshout], it looks the same as the linked issue. You need to use file:/ for your resources.
davsclaus:1695088933:2023-09-19T10:02:13.387+0000:1695088933:2023-09-19T10:02:13.387+0000:See upgrade guides
https://camel.apache.org/manual/camel-3x-upgrade-guide-3_20.html#_upgrading_camel_3_19_to_3_20
catshout:1695333857:2023-09-22T06:04:17.339+0000:1695333886:2023-09-22T06:04:46.908+0000:??You need to useÂ [file:/|file:///]Â for your resources.??

This did the trick, many thanks. The ticket is already marked as solved.

Best
Gerald"
0,CAMEL-19857,Bug,Major,4.0.0,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Pasquale Congiusti,Pasquale Congiusti,0,1,2023-09-13 08:34:42+00:00,2023-09-13 10:30:35+00:00,"The problem was detected by testing Camel K and Camel Quarkus runtime: https://github.com/apache/camel-quarkus/issues/5268


It seems there is a regression on Kotlin language which requires to apply some workaround while this is fixed in the official libraries.",
0,CAMEL-19856,Bug,Minor,3.20.2,,"
None
",Closed,Information Provided,None,Unassigned,Gerald Kallas,0,3,2023-09-13 08:25:10+00:00,2023-10-19 10:21:05+00:00,"we had a code (XML DSL) that was already working to skip SSL hostname validation like




<bean id=""noopHostnameVerifier"" class=""org.apache.http.conn.ssl.NoopHostnameVerifier""/>
...
<to uri='https://server/api/v1/entity/integrationservice/delta?x509HostnameVerifier=noopHostnameVerifier'/>



It's not working anymore, getting
Â 




javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target Â 



I tried also
Â 




<to uri='https://server/api/v1/entity/integrationservice/delta?x509HostnameVerifier=#noopHostnameVerifier'/>



same error.
Â 
The underlying Java (within a Docker containe) is
Â 




openjdk version ""11.0.11"" 2021-04-20 OpenJDK Runtime Environment AdoptOpenJDK-11.0.11+9 (build 11.0.11+9) OpenJDK 64-Bit Server VM AdoptOpenJDK-11.0.11+9 (build 11.0.11+9, mixed mode)","davsclaus:1695088997:2023-09-19T10:03:17.718+0000:1695088997:2023-09-19T10:03:17.718+0000:Could be related to your other tickets, so try to fix those first and report back here.
catshout:1695351080:2023-09-22T10:51:20.809+0000:1695351138:2023-09-22T10:52:18.322+0000:The other ticket https://issues.apache.org/jira/browse/CAMEL-19858 has been solved but here the error remains the same.

If no valid certificate is being found, the error occurs but it shouldn't with this parameter.
klease78:1697511468:2023-10-17T10:57:48.601+0000:1697511468:2023-10-17T10:57:48.601+0000:The exception javax.net.ssl.SSLHandshakeException occurs during the ""handshake"" with the server and is mostly likely due to the trust manager store not containing the root certificate of the server. The HostnameVerifier is only used after the handshake is complete to check the conformity of the requested URL and the server certificate names. If the SSL handshake succeeds but theÂ noopHostnameVerifier bean is not found you will have a different error, similar to this one:
{code:java}
javax.net.ssl.SSLPeerUnverifiedException: Certificate for <127.0.0.1> doesn't match any of the subject alternative names: [localhost]{code}
You could set org.apache.http.conn.ssl to DEBUG level to get more verbose output about the connection process.
catshout:1697512060:2023-10-17T11:07:40.377+0000:1697512060:2023-10-17T11:07:40.377+0000:That seems to be different to older Camel versions. We did always use the noopHostnameVerifier bean when no server certificate was contained in the system's or frameworks truststore.

I'll increase the log level and let you know.
catshout:1697593423:2023-10-18T09:43:43.515+0000:1697593446:2023-10-18T09:44:06.765+0000:Find attached the DEBUG log
{code:java}
2023-10-18T09:34:00,433 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #8 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Connecting socket to xxx.eu-central-1.compute.amazonaws.com/10.0.0.6:8446 with timeout 0
2023-10-18T09:34:00,435 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #8 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Enabled protocols: [TLSv1.3, TLSv1.2]
2023-10-18T09:34:00,436 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #8 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Enabled cipher suites:[TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RS
2023-10-18T09:34:00,436 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #8 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Starting handshake
2023-10-18T09:34:00,478 | ERROR | Camel (isp.route.system.deployment.service.scheduler) thread #8 - timer://isp.route.system.deployment.service.scheduler | DefaultErrorHandler Â  Â  Â  Â  Â  Â  Â | 91 - org.apache.camel.camel-core-reifier - 3.20.2 | Failed delivery for (MessageId: 96246179F423722-0000000000000000 on ExchangeId: 96246179F423722-0000000000000000). Exhausted after delivery attempt: 1 caught: javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n\nMessage History (source location and message history is disabled)\n------------------------------------------------------------------------------------------
javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target {code}
In the case that a certificate is available the log shows
{code:java}
2023-10-18T09:38:50,803 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Connecting socket to xxx.eu-central-1.compute.amazonaws.com/10.0.0.6:8446 with timeout 0
2023-10-18T09:38:50,805 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Enabled protocols: [TLSv1.3, TLSv1.2]
2023-10-18T09:38:50,806 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Enabled cipher suites:[TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384, TLS_RSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384, TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_RSA_WITH_AES_256_GCM_SHA384, TLS_DHE_DSS_WITH_AES_256_GCM_SHA384, TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256, TLS_RSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256, TLS_ECDH_RS
2023-10-18T09:38:50,806 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Starting handshake
2023-10-18T09:38:50,829 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Secure session established
2023-10-18T09:38:50,830 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Â negotiated protocol: TLSv1.3
2023-10-18T09:38:50,830 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Â negotiated cipher suite: TLS_AES_128_GCM_SHA256
2023-10-18T09:38:50,830 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Â peer principal: CN=yyy.eu-central-1.compute.amazonaws.com, O=CAS AG, L=Default City, C=DE
2023-10-18T09:38:50,830 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | SSLConnectionSocketFactory Â  Â  Â  | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Â issuer principal: CN=yyy.eu-central-1.compute.amazonaws.com, O=CAS AG, L=Default City, C=DE
2023-10-18T09:38:50,833 | DEBUG | Camel (isp.route.system.deployment.service.scheduler) thread #10 - timer://isp.route.system.deployment.service.scheduler | DefaultHostnameVerifier Â  Â  Â  Â  Â | 152 - org.apache.httpcomponents.httpclient - 4.5.13 | Certificate for <xxx.eu-central-1.compute.amazonaws.com> doesn't match common name of the certificate subject: yyy.eu-central-1.compute.amazonaws.com
javax.net.ssl.SSLPeerUnverifiedException: Certificate for <yyy.eu-central-1.compute.amazonaws.com> doesn't match common name of the certificate subject: xxx.eu-central-1.compute.amazonaws.com {code}
Does that mean in the current version that
 * the server / root certificate of the server to be trusted MUST be contained at least in the system's or runtime's truststore?
 * a general SSL verification can't be disabled at all? (in former Camel versions the noopHostnameVerifier did this)

Â 
klease78:1697616850:2023-10-18T16:14:10.273+0000:1697616850:2023-10-18T16:14:10.273+0000:The actual handshaking where the certificate check is done happens at the java level. The Camel http component uses the Apache httpclient to create the SSLSockets, do the handshake, and then the hostname verification after the handshake succeeds. Camel 3.19.0 et 3.20.0 use the same versions of the Apache ttpclient and httpcore jars, so I don't see how this could make a difference.

One possibility is that in your earlier configuration you also had a custom TrustManager in the Camel SSLContextParameters which didn't actually check the server certificates. In the Apache Httpclient there are some TrustStrategy implementations which would allow to build such a TrustManager but that would require some coding and is generally not recommended for production!
catshout:1697682036:2023-10-19T10:20:36.728+0000:1697682036:2023-10-19T10:20:36.728+0000:Former we did work with Camel 3.4.4. There was a truststore defined and filled at Karaf level, containing the server certificate.

I think now it's more clear and the ticket can be closed.

Tx Karen.
catshout:1697682065:2023-10-19T10:21:05.380+0000:1697682065:2023-10-19T10:21:05.380+0000:Works as expected."
0,CAMEL-19855,Improvement,Minor,None,None,"
None
",Open,Unresolved,None,Unassigned,Nicolas Filotto,0,1,2023-09-13 07:55:10+00:00,2023-09-13 08:00:24+00:00,"In Camel Spring Boot, we have a use case where the generated converter is too limited. Indeed by default, the complex types can only be configured using references to specific beans but in this particular case, the target type could be easily converted from a string or an integer.


The goal of this improvement is to provide a way to customize generated Converters to be able to add more converters and/or improve the generated code by, for example, delegating the conversion of a string to a specific type in case the string is not a reference.",
0,CAMEL-19854,Task,Major,"4.0.0, 4.1.0","4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Freeman Yue Fang,Nicolas Filotto,0,2,2023-09-13 07:15:02+00:00,2023-09-19 14:14:04+00:00,"The test KafkaConsumerHealthCheckIT constantly fails, so it needs to be investigated and fixed



[ERROR] Errors: 
[ERROR]   KafkaConsumerHealthCheckIT.kafkaConsumerHealthCheck:177 Â» ConditionTimeout Assertion condition defined as a org.apache.camel.component.kafka.integration.KafkaConsumerHealthCheckIT expected: <true> but was: <false> within 20 seconds.",ffang:1695104012:2023-09-19T14:13:32.043+0000:1695104012:2023-09-19T14:13:32.043+0000:re-enabled KafkaConsumerHealthCheckIT as it's OK now
0,CAMEL-19853,Test,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-12 17:05:45+00:00,2023-09-13 06:09:17+00:00,[camel-catalog] [ERROR]   CamelCatalogJsonSchemaTest.testValidateJsonComponent:78->validateComponentSyntax:114 Component thymeleaf. Syntax thymeleaf:templatePath. Part templatePath is not defined as UriPath ==> expected: <true> but was: <false>,
0,CAMEL-19852,Improvement,Major,None,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Andrea Cosentino,Andrea Cosentino,0,1,2023-09-12 16:28:42+00:00,2023-09-14 05:43:45+00:00,No Desc,
0,CAMEL-19851,Improvement,Major,4.0.0,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Nicolas Filotto,Valeriy Ak,0,2,2023-09-12 12:38:50+00:00,2023-09-14 19:50:08+00:00,"In http component we have some properties with typeÂ org.apache.hc.core5.util.Timeout:



camel.component.http.connect-timeout
camel.component.http.connection-request-timeout
camel.component.http.response-timeout
camel.component.http.so-timeout



We can set this properies by spring boot prop file (documentation).Â 
Â 
However in current realization it is not posible to set thouse values because converter don't create Timeout object, it try to get bean with this name from spring context HttpComponentConverter , if bean not present it alwayes return null value (withou any excaptions or warrnigs)
Â 
It is not correct behavior - and correct way is convert value to Duration and then call Timeout.of(duration)
Â 
Please fix converter for org.apache.hc.core5.util.Timeout class
Â 


Examples:




camel:
  component:
    http:
      so-timeout: PT30S
---
bean HttpComponentConfiguration.soTimeout=null


camel: 
  component: 
    http: 
      so-timeout: 1000
--- 
Exception on start - Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.Integer] to type [org.apache.hc.core5.util.Timeout]","nfilotto:1694497281:2023-09-12T13:41:21.925+0000:1694497346:2023-09-12T13:42:26.911+0000:For now, the only way to set a timeout is like any other complex type, you need to define a dedicated bean in your Spring context and refer to that bean in the configuration of your component as described in the documentation https://camel.apache.org/camel-spring-boot/4.0.x/starter-configuration.html#_using_external_configuration.

That being said, I do agree that we can do better for this particular type.
akvel:1694499386:2023-09-12T14:16:26.759+0000:1694499545:2023-09-12T14:19:05.888+0000:[~nfilotto] I create the workaround in my project, but it looks ridiculous :). And most worse that it must to do everyone who need to change connection/socket timeout.

WebConfig.java
{code:java}
@Configuration
public class WebConfig {

    @Bean
    public Timeout connectTimeoutBean(@Value(""${camel.component.http.connect-timeout-value}"") Duration duration){
        return Timeout.of(duration);
    }

    @Bean
    public Timeout soTimeoutBean(@Value(""${camel.component.http.so-timeout-value}"") Duration duration){
        return Timeout.of(duration);
    }
}
{code}
application.yaml
{code:java}
 camel:
  component:
    http:
      #https://issues.apache.org/jira/browse/CAMEL-19851
      connect-timeout: ""#connectTimeoutBean""
      connect-timeout-value: PT10S
      so-timeout: ""#soTimeoutBean""
      so-timeout-value:PT20M{code}
nfilotto:1694500269:2023-09-12T14:31:09.128+0000:1694500269:2023-09-12T14:31:09.128+0000:I understand your point of view but please note that Camel has hundreds of components so fortunately, part of the code is generated like the converter you are mentioning, that is why in some particular cases like this one, we indeed can end up with a more complicated configuration than it should.

Thanks to community feedback like this one, we can improve it more when it's needed.
nfilotto:1694511231:2023-09-12T17:33:51.613+0000:1694641631:2023-09-14T05:47:11.337+0000:The corresponding PRs:
 * 4.1 [https://github.com/apache/camel-spring-boot/pull/936]
 * 4.0 [https://github.com/apache/camel-spring-boot/pull/942]

Thanks to these changes, it will be possible to set a timeout in milliseconds expressed as long, integer, or string like in Camel core
akvel:1694567147:2023-09-13T09:05:47.260+0000:1694567147:2023-09-13T09:05:47.260+0000:[~nfilotto] Thanks! (y)
Â "
0,CAMEL-19850,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-12 11:41:28+00:00,2023-09-14 05:43:40+00:00,No Desc,
0,CAMEL-19849,Bug,Major,None,4.4.0,"
None
",Resolved,Information Provided,4.4.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,1,3,2023-09-12 09:05:20+00:00,2023-12-24 08:45:58+00:00,"Note: this issue is still under investigation.




2023-09-12 10:48:41,210 DEBUG [org.apa.cam.dat.zip.ZipIterator] (Camel (camel-1) thread #10 - Split) read zipEntry META-INF/services/io.quarkus.dev.spi.HotReplacementSetup
2023-09-12 10:48:41,211 WARN  [org.apa.cam.pro.MulticastProcessor] (Camel (camel-1) thread #4 - Split) Error releasing exchange due to java.util.zip.ZipException: invalid code -- missing end-of-block. This exception is ignored.: org.apache.camel.RuntimeCamelException: java.util.zip.ZipException: invalid code -- missing end-of-block
	at org.apache.camel.dataformat.zipfile.ZipIterator.getNextElement(ZipIterator.java:129)
	at org.apache.camel.dataformat.zipfile.ZipIterator.next(ZipIterator.java:93)
	at org.apache.camel.dataformat.zipfile.ZipIterator.next(ZipIterator.java:40)
	at org.apache.camel.processor.Splitter$SplitterIterable$1.next(Splitter.java:230)
	at org.apache.camel.processor.Splitter$SplitterIterable$1.next(Splitter.java:203)
	at org.apache.camel.processor.MulticastProcessor.doDone(MulticastProcessor.java:816)
	at org.apache.camel.processor.MulticastProcessor$MulticastTask.doDone(MulticastProcessor.java:484)
	at org.apache.camel.processor.MulticastProcessor$MulticastReactiveTask.run(MulticastProcessor.java:584)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:189)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:56)
	at org.apache.camel.processor.MulticastProcessor.lambda$schedule$1(MulticastProcessor.java:336)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.util.zip.ZipException: invalid code -- missing end-of-block
	at java.base/java.util.zip.InflaterInputStream.read(InflaterInputStream.java:164)
	at java.base/java.util.zip.ZipInputStream.read(ZipInputStream.java:196)
	at java.base/java.util.zip.ZipInputStream.closeEntry(ZipInputStream.java:142)
	at java.base/java.util.zip.ZipInputStream.getNextEntry(ZipInputStream.java:120)
	at org.apache.camel.dataformat.zipfile.ZipIterator.getNextEntry(ZipIterator.java:143)
	at org.apache.camel.dataformat.zipfile.ZipIterator.getNextElement(ZipIterator.java:114)
	... 15 more","orpiske:1694482387:2023-09-12T09:33:07.966+0000:1694482387:2023-09-12T09:33:07.966+0000:This seems to happen with parallelProcessing on the route.
orpiske:1694582401:2023-09-13T13:20:01.510+0000:1695019611:2023-09-18T14:46:51.777+0000:We found that: 

1. This happens only when using parallelProcessing 
2. We also found that in that case, it call the [close on checkNullAnswer|https://github.com/apache/camel/blob/09db270a944fdb43c51635f1a8b1ea03bc46c378/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipIterator.java#L133] and [the close on the ZipIterator|https://github.com/apache/camel/blob/09db270a944fdb43c51635f1a8b1ea03bc46c378/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipIterator.java#L162] before the [close on the ZipInputStreamWrapper|https://github.com/apache/camel/blob/09db270a944fdb43c51635f1a8b1ea03bc46c378/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipInputStreamWrapper.java#L34]. This is the contrary of the non-parallel mode, in which it calls the close on the ZipInputstream before the one in hasNext and the one in close (see below) 



{code:java}
#### Baseline (running in non parallel)

Calling close on ZipInputStreamWrapper # 1
Calling close on ZipInputStreamWrapper # 2
Calling close on ZipInputStreamWrapper # 3
Calling close on ZipInputStreamWrapper # 4
Calling close on ZipInputStreamWrapper # 5
Calling hasNext # 1
Calling close # 1


###### With parallelProcessing

Calling checkNullAnswer # 1
Calling close # 1
Calling close on ZipInputStreamWrapper # 1
Calling close on ZipInputStreamWrapper # 3
Calling close on ZipInputStreamWrapper # 4
Calling close on ZipInputStreamWrapper # 2
Calling close on ZipInputStreamWrapper # 5
{code}


A reproducer can be [found here|https://github.com/orpiske/camel/blob/camel-19849/components/camel-zipfile/src/test/java/org/apache/camel/dataformat/zipfile/ZipSplitterRouteParallelTest.java]. Essentially it can be reproduced using a route like: 


{code:java}
public void configure() {
                // Unzip file and Split it according to FileEntry
                from(""file:src/test/resources/org/apache/camel/dataformat/zipfile/data?delay=1000&noop=true"")
                        .log(""Start processing big file: ${header.CamelFileName}"")
                        .split(new ZipSplitter()).streaming().parallelProcessing()
                        .to(""log:entry"")
                        .convertBodyTo(String.class).to(""mock:processZipEntry"")
                        .end()
                        .log(""Done processing big file: ${header.CamelFileName}"");
            }
{code}






davsclaus:1695177355:2023-09-20T10:35:55.927+0000:1695177355:2023-09-20T10:35:55.927+0000:I think its the ZipSplitter that is some kind of Iterator that would be hard to make it close correctly in all situations.

btw camel-tarfile is similar to zipfile so it may have same situation.
davsclaus:1703378565:2023-12-24T08:42:45.684+0000:1703378565:2023-12-24T08:42:45.684+0000:This cannot support parallel processing as the input stream being read is shared
davsclaus:1703378758:2023-12-24T08:45:58.832+0000:1703378758:2023-12-24T08:45:58.832+0000:Update docs about limitation"
0,CAMEL-19848,Wish,Trivial,None,,"
None
",Resolved,Invalid,None,Unassigned,tanyu,0,2,2023-09-12 08:55:08+00:00,2023-09-12 09:02:46+00:00,such as headerfilterStrategy,"acosentino:1694480336:2023-09-12T08:58:56.906+0000:1694480336:2023-09-12T08:58:56.906+0000:Ask on Zulip chat or users mailing list. This is an issue tracker.
nfilotto:1694480566:2023-09-12T09:02:46.703+0000:1694480566:2023-09-12T09:02:46.703+0000:Please read this article https://camel.apache.org/community/support/ to understand how to get support"
0,CAMEL-19847,Task,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-12 08:20:01+00:00,2023-09-12 11:40:59+00:00,No Desc,
0,CAMEL-19846,Improvement,Major,4.0.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Unassigned,Tomohisa Igarashi,0,3,2023-09-08 13:09:57+00:00,2023-09-20 10:33:22+00:00,"Support setting `MessageHistoryFactory.setCopyMessage(true)` from YAML DSL. I'm on a case to do it from YAML DSL, but it seems other DSLs also don't yet directly support it other than providing a separate property file. Turned out XML DSL already supports it with beans. For YAML DSL the beans registration is too late for comelContext configuration ATM. See comments.




- beans: 
  - name: messageHistoryFactory
    type: org.apache.camel.impl.engine.DefaultMessageHistoryFactory
    properties: 
      copyMessage: true

- route: 
    messageHistory: true
    from: 
      uri: ""timer:yaml""
      parameters: 
        period: ""3000""
      steps: 
        - to: 
            uri: ""log:test""","igarashitm:1694666002:2023-09-14T12:33:22.748+0000:1694666002:2023-09-14T12:33:22.748+0000:Apparently XML DSL already supports it through beans, we'd want to align with that
https://github.com/apache/camel-kamelets-examples/blob/main/jbang/app-routes-spring-beans/app.xml#L20-L22
igarashitm:1694667559:2023-09-14T12:59:19.287+0000:1694684583:2023-09-14T17:43:03.302+0000:Talked with [~ggrzybek], see if this works for YAML DSL as well
https://github.com/apache/camel/blob/main/core/camel-main/src/main/java/org/apache/camel/main/DefaultConfigurationConfigurer.java#L466-L469

If not, the timing for registering beans might need a tweak like XML IO do
https://github.com/apache/camel/blob/main/dsl/camel-xml-io-dsl/src/main/java/org/apache/camel/dsl/xml/io/XmlRoutesBuilderLoader.java#L83-L102

Also see:
https://github.com/apache/camel/blob/main/core/camel-main/src/main/java/org/apache/camel/main/BaseMainSupport.java#L884-L894
davsclaus:1694913397:2023-09-17T09:16:37.817+0000:1694913397:2023-09-17T09:16:37.817+0000:The DSL is for EIPs and routes - not general and advanced configuration of Camel itself - the latter is done via application.properties etc, or java api / java beans etc.

igarashitm:1694920343:2023-09-17T11:12:23.664+0000:1694921374:2023-09-17T11:29:34.045+0000:But apparently XML already supports it - https://github.com/apache/camel-kamelets-examples/blob/main/jbang/app-routes-spring-beans/app.xml#L20-L22

So yes, it's done with beans, but YAML DSL also supports beans. However it doesn't work for camelContext configurations since YAML DSL deserializer registers beans after those CamelContext configuration ATM.
davsclaus:1694934881:2023-09-17T15:14:41.730+0000:1694934881:2023-09-17T15:14:41.730+0000:Try with main branch - camel-yaml-dsl has most likely been improved to pre parse beans also now
igarashitm:1695008318:2023-09-18T11:38:38.508+0000:1695008318:2023-09-18T11:38:38.508+0000:I'm debugging with main branch, beans are registered way after pre parse as far as I can see. 
""preParseRoute()"" for YAML is here - https://github.com/apache/camel/blob/main/dsl/camel-yaml-dsl/camel-yaml-dsl/src/main/java/org/apache/camel/dsl/yaml/YamlRoutesBuilderLoader.java#L844
but it doesn't hit BeansDeserializer
https://github.com/apache/camel/blob/main/dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/main/java/org/apache/camel/dsl/yaml/deserializers/BeansDeserializer.java#L92
I don't see any other part that is doing ""bind()"" for beans in camel-yaml-dsl.
davsclaus:1695009224:2023-09-18T11:53:44.712+0000:1695009224:2023-09-18T11:53:44.712+0000:Can you put together a small example that is easier for others to use to take a look
igarashitm:1695012421:2023-09-18T12:47:01.927+0000:1695012421:2023-09-18T12:47:01.927+0000:OK, pasted in the description and unassigned myself.
davsclaus:1695021702:2023-09-18T15:21:42.793+0000:1695021702:2023-09-18T15:21:42.793+0000:Tomo, so yeah this is because xml dsl from blueprint/spring is initializing camel context a bit differently (camel-core-xml).

To make yaml-dsl able to do like blueprint/spring then those custom beans need to be auto-configured twice, in case yaml-dsl routes has custom beans like in your example. And this requires code changes in camel-main.



igarashitm:1695022635:2023-09-18T15:37:15.999+0000:1695023341:2023-09-18T15:49:01.113+0000:From what I can see with a debugger, YamlRoutesBuilderLoader#preParseRoute() is already open to traffic, and I can see this is actually invoked before the DefaultConfigurationConfigurer (which picks up CamelContext related beans from bean registry) - so it looks like just a matter of plumbing BeansDeserializer into that? i.e. the impact should be limited to camel-yaml-dsl
https://github.com/apache/camel/blob/main/dsl/camel-yaml-dsl/camel-yaml-dsl/src/main/java/org/apache/camel/dsl/yaml/YamlRoutesBuilderLoader.java#L844
davsclaus:1695079701:2023-09-19T07:28:21.085+0000:1695079701:2023-09-19T07:28:21.085+0000:Yes its actually both xml-io-dsl and yaml-dsl that creates bean, but does not support beans that are for those rare advanced settings on camel context like that message history factory.

The old blueprint/spring xml works because its not Camel creating those beans but these runtimes that create beans before camel, so they are already created when camel context is set up, and before it loads routes.


davsclaus:1695085867:2023-09-19T09:11:07.742+0000:1695085867:2023-09-19T09:11:07.742+0000:It was a bit more complex that just something in yaml-dsl, so I have added a SPI interface BeanLoader so DSLs can plugin and do needed logic. This is needed by XML and YAML DSL.
ggrzybek:1695089809:2023-09-19T10:16:49.143+0000:1695089809:2023-09-19T10:16:49.143+0000:bq. both xml-io-dsl and yaml-dsl that creates bean, but does not support beans that are for those rare advanced settings on camel context like that message history factory

Actually with https://github.com/apache/camel/blob/c51b052/dsl/camel-xml-io-dsl/src/main/java/org/apache/camel/dsl/xml/io/XmlRoutesBuilderLoader.java#L83-L102, XML DSL can add beans to registry early enough, so they are visible in https://github.com/apache/camel/blob/0165a54/core/camel-main/src/main/java/org/apache/camel/main/DefaultConfigurationConfigurer.java#L378

See example here: https://github.com/apache/camel-kamelets-examples/blob/a6f59c2/jbang/app-routes-spring-beans/app.xml#L20-L22

I didn't check (super busy with Jolokia now) this new BeanLoader SPI yet..."
0,CAMEL-19845,Task,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-07 08:29:46+00:00,2023-09-12 08:58:09+00:00,"The idea is having something like:


https://repo1.maven.org/maven2/org/apache/commons/commons-dbcp2/2.10.0/


Since there is no agreement on the standard we could generate both, cyclonedx and spdx, for the moment we have only cyclonedx maven plugin settings.",
0,CAMEL-19844,Task,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-07 08:00:46+00:00,2023-09-11 09:58:33+00:00,"The idea is having something like:


https://repo1.maven.org/maven2/org/apache/commons/commons-dbcp2/2.10.0/


Since there is no agreement on the standard we could generate both, cyclonedx and spdx, for the moment we have only cyclonedx maven plugin settings.",
0,CAMEL-19843,Bug,Major,None,None,"
None
",Resolved,Fixed,"4.0.1, 4.1.0",Peter Palaga,Peter Palaga,0,2,2023-09-06 17:00:07+00:00,2023-09-21 23:42:57+00:00,"When implementing a REST to SOAP bridge on Camel Quarkus, it turns out that Vert.x (the HTTP server of Quarkus) does not accept the :status header propagated from CXF message:




10:27:39,596 INFO  [app] 10:27:38,426 HTTP Request to /jaxrs/request failed, error id: 9ce52cd2-3b97-4bbb-9971-1cbbfa20844b-1: java.lang.IllegalArgumentException: a header name cannot contain some prohibited characters, such as : :status
10:27:39,596 INFO  [app]        at io.vertx.core.http.impl.HttpUtils.validateHeaderName0(HttpUtils.java:913)
10:27:39,596 INFO  [app]        at io.vertx.core.http.impl.HttpUtils.validateHeaderName(HttpUtils.java:885)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.HttpUtils.validateHeader(HttpUtils.java:772)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.headers.HeadersMultiMap.add0(HeadersMultiMap.java:616)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.headers.HeadersMultiMap.set0(HeadersMultiMap.java:633)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.headers.HeadersMultiMap.set(HeadersMultiMap.java:184)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.headers.HeadersMultiMap.set(HeadersMultiMap.java:189)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.Http1xServerResponse.putHeader(Http1xServerResponse.java:193)
10:27:39,597 INFO  [app]        at io.vertx.core.http.impl.Http1xServerResponse.putHeader(Http1xServerResponse.java:67)
10:27:39,598 INFO  [app]        at org.apache.camel.component.platform.http.vertx.VertxPlatformHttpSupport.toHttpResponse(VertxPlatformHttpSupport.java:89)




This happens with HttpClientHTTPConduit using HTTP/2 capable java.net.http.HttpClient as the underlying HTTP client. That's the default in CXF 4.x. Another condition is that the service must also run on a HTTP/2 enabled HTTP server. Jetty 11 used in Camel tests does not seem to have HTTP/2 enabled.


:status is a standard pseudo-header of HTTP/2 and HTTP/3 specified by
RFC-7540.


If CXF is configured to use the older URLConnectionHTTPConduitFactory using the HTTP/1.1 only java.net.HttpURLConnection then the issue does not occur. Note that URLConnectionHTTPConduitFactory is set by default by Quarkus CXF 2.3.1 and 2.2.3 because of https://github.com/quarkiverse/quarkus-cxf/issues/992 (thus overriding the CXF 4.x default). It was also the default in CXF 3.x used by Camel 3.x.


I think the solution should be to filter out all HTTP pseudo-headers when propagating the headers from the CXF message to the Camel message. The reason is, that the info present in pseudo-headers is also available through programmatic API and for HTTP status, it is indeed there as CamelHttpResponseCode header. Any comments about that?","ppalaga:1693995486:2023-09-06T18:18:06.604+0000:1694497966:2023-09-12T13:52:46.169+0000:Fixed in 

* main: https://github.com/apache/camel/pull/11327
* 4.0.x https://github.com/apache/camel/pull/11352
ffang:1695310977:2023-09-21T23:42:57.452+0000:1695310977:2023-09-21T23:42:57.452+0000:Similar issue resolved for camel-cxf rest producer as well"
0,CAMEL-19842,Bug,Major,None,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-09-06 16:29:18+00:00,2023-09-11 14:19:22+00:00,This test started failing after the fix for CAMEL-19815.,orpiske:1694413101:2023-09-11T14:18:21.768+0000:1694413101:2023-09-11T14:18:21.768+0000:Fixed with https://github.com/apache/camel/pull/11331
0,CAMEL-19841,Dependency upgrade,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,2,2023-09-06 09:50:52+00:00,2023-09-06 15:59:49+00:00,FYI orpiske,orpiske:1693965991:2023-09-06T10:06:31.787+0000:1693965991:2023-09-06T10:06:31.787+0000:[~acosentino] Sounds great!
0,CAMEL-19840,Task,Minor,3.20.6,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Nicolas Filotto,Nicolas Filotto,0,1,2023-09-06 08:04:28+00:00,2023-09-06 11:38:45+00:00,"If KeyStoreParameters are configured with an incorrect path for the key store file, at runtime, we end up with an error that can be more or less easy to understand depending on the underlying component for which SSL has been configured.


It would be easier to understand if we could simply add a warning to indicate that the file could not be found.","nfilotto:1693966316:2023-09-06T10:11:56.122+0000:1693966316:2023-09-06T10:11:56.122+0000:The corresponding PRs:

* 3.20 https://github.com/apache/camel/pull/11313
* 3.21 https://github.com/apache/camel/pull/11316
* 3.22 https://github.com/apache/camel/pull/11317
* 4.0 https://github.com/apache/camel/pull/11318
* 4.1 https://github.com/apache/camel/pull/11319
nfilotto:1693971525:2023-09-06T11:38:45.709+0000:1693971525:2023-09-06T11:38:45.709+0000:Issue raised by the topic https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Netty.20HTTP.20and.20SSL.20configuration"
0,CAMEL-19839,Dependency upgrade,Major,4.0.0,4.x,"
None
",Open,Unresolved,4.x,Freeman Yue Fang,Andrea Tarocchi,0,2,2023-09-05 17:12:47+00:00,2023-12-17 12:40:41+00:00,"camel-cxf-common 4.0.0 depends on{{ jakarta.servlet:jakarta.servlet-api:jar:6.0.0}} but cxf-rt-transports-http-underto 4.0.2 works with jakarta.servlet:jakarta.servlet-api:jar:5.0.0 only (using it with version 6 of the api results in java.lang.NoClassDefFoundError: jakarta/servlet/SingleThreadModel)


Things can be workaround by making some exclusion/imports in maven but I think it is something that can be fixed.","valdar:1693910501:2023-09-05T18:41:41.808+0000:1693910501:2023-09-05T18:41:41.808+0000:CC: [~ffang]
davsclaus:1702788041:2023-12-17T12:40:41.573+0000:1702788041:2023-12-17T12:40:41.573+0000:I assume this requires a new minor CXF release like 4.1 or something"
0,CAMEL-19838,Dependency upgrade,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-05 14:59:46+00:00,2023-09-06 05:38:34+00:00,No Desc,
0,CAMEL-19837,Bug,Major,4.x,4.1.0,"
None
",Resolved,Fixed,4.1.0,Otavio Rodolfo Piske,Jiri Ondrusek,0,2,2023-09-05 14:39:25+00:00,2023-09-12 14:07:17+00:00,"Consequence of https://github.com/apache/camel/pull/11225/commits/e4007f2b1dfc982e5ea6a45427cbec8835ea58a5


Â 


Camel-flatpack registers 2 converters:Â 



from net.sf.flatpack.DataSet to Map
from net.sf.flatpack.Record to Map



Problematic case: If data for conversion is instance of net.sf.flatpack.DefaultDataSet


Â 


Direct conversion is not possible (there is no DefaultDataSet -> Map converter)


therefore matching via interface is used (see https://github.com/apache/camel/blob/main/core/camel-api/src/main/java/org/apache/camel/converter/TypeConvertible.java#L101-L110)


Â 


Problem is that `DefaultDataSet` implements `DataSet`, which extends `Record`.


Â 


Therefore based on the order of converters in the cache (map), ""random"" converter is selected and used. Unfortunately one of these selection might cause a problem.


Â 


I was trying to run test `fixedHeaderAndTrailerShouldSucceed` in camel-quarkus from branch `camel-main`. Â code



In case that converter `DataSet` -> `Map` is selected, the test succeeds.
If `Record` -> `Map` is selected, test fails.



Â 


I'd suggest to add a logic, which takes into consideration the fact, that some of the matched interfaces are more general and some are more specific (in this case, `DataSet` conversion should have higher priority).


There might be other approaches, but ^^ this one makes sense and should be implementable (I'm not sure about possible performance affect)


Â 


(another way might be defining order of the converters, `DataSet` is always tried before `Record` in Flatpack, performance should be better)","jondruse:1693896007:2023-09-05T14:40:07.958+0000:1693896007:2023-09-05T14:40:07.958+0000:FYIÂ  ^ [~orpiske]Â 
orpiske:1693897756:2023-09-05T15:09:16.521+0000:1693897756:2023-09-05T15:09:16.521+0000:[~jondruse] what test is this one? 
jondruse:1693952508:2023-09-06T06:21:48.304+0000:1693952508:2023-09-06T06:21:48.304+0000:This test: https://github.com/apache/camel-quarkus/blob/camel-main/integration-tests/flatpack/src/test/java/org/apache/camel/quarkus/component/flatpack/it/FlatpackTest.java#L135-L161
orpiske:1693963526:2023-09-06T09:25:26.347+0000:1693963526:2023-09-06T09:25:26.347+0000:Should have been resolved with: https://github.com/apache/camel/pull/11305"
0,CAMEL-19836,Task,Major,4.0.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Tomohisa Igarashi,Tomohisa Igarashi,0,1,2023-09-05 14:03:05+00:00,2023-09-06 10:38:44+00:00,"According to this doc - https://camel.apache.org/manual/route-configuration.html#_route_configuration_in_yaml


`routeConfiguration/onException` is written as following in YAML DSL, having `onException` twice. Runtime (deserializer) accepts this.




- routeConfiguration: 
Â  Â  Â onException: 
Â  Â  Â  Â - onException: 
Â  Â  Â  Â  Â  Â  handled: 
Â  Â  Â  Â  Â  Â  Â  constant: ""true""




However the YAML DSL schema defines as following, which causes an error at runtime.




- routeConfiguration: 
Â  Â   onException: 
Â  Â  Â  Â  - handled: 
Â  Â  Â  Â  Â  Â  Â constant: ""true""




Fix the schema to align with the runtime behavior. Note that this array structure is irregular compared to the others such as `when` under `choice` which doesn't have a duplicated nest. We'd need some special handling for `routeConfiguration`.


It's same for `onCompletion`, `intercept`, `interceptFrom` and `interceptSendToEndpoint`. Fix all of these.",igarashitm:1693967924:2023-09-06T10:38:44.383+0000:1693967924:2023-09-06T10:38:44.383+0000:Fixed - https://github.com/apache/camel/pull/11309
0,CAMEL-19835,Improvement,Minor,None,4.3.0,"

easy
help-wanted

",Resolved,Fixed,4.3.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-09-05 14:01:10+00:00,2023-11-16 13:58:00+00:00,"I think essobedo gave this idea sometime in the past, but I did not have time to pursuit it back then.Â 


Here's the change: there's many places in the test code where we are using temporary directories for the tests. There is code to create, cleanup and whatnot to handle this.


Â 


However, there is a TempDir extension that is part of JUnit 5 that we can use instead.","anton-goncharov:1699331907:2023-11-07T12:38:27.951+0000:1699331907:2023-11-07T12:38:27.951+0000:Hey team, I've been exploring this issue and it seems like a perfect fit for my first contribution to Camel, and I'm really excited about it. I've already done some progress on this improvement, will publish a PR for review quite soon, so just would want to have my name on it. May I have this ticket assigned to me?
orpiske:1699336652:2023-11-07T13:57:32.937+0000:1699336660:2023-11-07T13:57:40.887+0000:Thanks for looking at this. Please feel free to send a PR with the proposed changes. We'll be happy to look at it. 
orpiske:1700111600:2023-11-16T13:13:20.720+0000:1700111600:2023-11-16T13:13:20.720+0000:Resolved with the linked PR by [~anton-goncharov]."
0,CAMEL-19834,Bug,Major,4.0.0,,"
None
",Resolved,Fixed,None,Andrea Tarocchi,Andrea Tarocchi,0,2,2023-09-05 12:43:18+00:00,2023-09-05 18:43:49+00:00,"It is possible to configure elasticsearch container to not generate a self signed CA certificate by basically disabling SSL. In this case the container init would fail with java.util.NoSuchElementException: No value present


this is due to https://github.com/apache/camel/blob/camel-4.0.x/test-infra/camel-test-infra-elasticsearch/src/test/java/org/apache/camel/test/infra/elasticsearch/services/ElasticSearchLocalContainerService.java#L99 being called even if CA cert is not present.","nfilotto:1693889952:2023-09-05T12:59:12.662+0000:1693889952:2023-09-05T12:59:12.662+0000:It has been done this way because IIRC by default the security pack is enabled and since we use the OS version of ES, we have to configure TLS/SSL. So to implement it, you will probably need to disable the security pack, see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#general-security-settings for more details
valdar:1693891007:2023-09-05T13:16:47.166+0000:1693891007:2023-09-05T13:16:47.166+0000:I think that it is wrong to call sslContext = getContainer().createSslContextFromCa(); outside the scope of .ifPresent . 
Here there is the PR that you can review and discuss: https://github.com/apache/camel/pull/11302
valdar:1693910629:2023-09-05T18:43:49.746+0000:1693910629:2023-09-05T18:43:49.746+0000:Fix merged in https://github.com/apache/camel/pull/11302"
0,CAMEL-19833,Improvement,Major,3.21.0,None,"
None
",Resolved,Fixed,4.1.0,Luigi De Masi,Luigi De Masi,0,1,2023-09-05 11:51:16+00:00,2023-09-11 07:22:40+00:00,"org.apache.camel.dataformat.bindy.BindyAbstractFactory.link() calls org.apache.camel.util.ReflectionHelper.setField() :



    public static void setField(Field f, Object instance, Object value) {
        try {
            boolean oldAccessible = f.isAccessible();
            boolean shouldSetAccessible = !Modifier.isPublic(f.getModifiers()) && !oldAccessible;
            if (shouldSetAccessible) {
                f.setAccessible(true);
            }
            f.set(instance, value);
            if (shouldSetAccessible) {
                f.setAccessible(oldAccessible);
            }
        } catch (Exception ex) {
            throw new UnsupportedOperationException(""Cannot inject value of class: "" + value.getClass() + "" into: "" + f);   // breakpoint
        }
    }




In a concurrent situation, access violation occurs due to race condition:


Thread A: invokes check the accessibility and set ""shouldSetAccessible"" to true.
Thread A: invokes f.setAccessible(true);
Thread B: invokes check the accessibility and set ""shouldSetAccessible"" to false.
Thread A: invokes  f.set(instance, value and f.setAccessible(oldAccessible);
Thread B: invokes f.set(instance, value); and java.lang.IllegalAccessException occurs.



Following exception will occur.

java.lang.UnsupportedOperationException: Cannot inject value of class: class com.mycompany.MyModel2 into: private com.mycompany.MyModel2 com.mycompany.MyModel.myModel2
	at org.apache.camel.util.ReflectionHelper.setField(ReflectionHelper.java:192)
	at org.apache.camel.dataformat.bindy.BindyAbstractFactory.link(BindyAbstractFactory.java:150)
	at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.lambda$consumeFile$0(BindyCsvDataFormat.java:263)
	at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)
	at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1845)
	at java.base/java.util.stream.ReferencePipeline$Head.forEachOrdered(ReferencePipeline.java:772) 
	at org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat.unmarshal(BindyCsvDataFormat.java:183) 
	at org.apache.camel.support.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:76) 
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:477) 
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:54)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:482)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.done(RedeliveryErrorHandler.java:416)
	at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:87)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)",ldemasi:1694061035:2023-09-07T12:30:35.654+0000:1694061035:2023-09-07T12:30:35.654+0000:Pull request: https://github.com/apache/camel/pull/11307
0,CAMEL-19832,Test,Major,"4.0.0, 4.1.0",,"

help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-09-05 11:37:14+00:00,2023-09-05 11:37:14+00:00,"RocketMQ tests fail constantly on our CI, and, sometimes, even when running locally: 




org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a org.apache.camel.component.rocketmq.RocketMQRouteTest null within 5 seconds.
	at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:166)
	at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:119)
	at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:31)
	at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:939)
	at org.awaitility.core.ConditionFactory.untilAsserted(ConditionFactory.java:723)
	at org.apache.camel.component.rocketmq.RocketMQRouteTest.testSimpleRoute(RocketMQRouteTest.java:84)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
Caused by: java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.FutureTask.get(FutureTask.java:204)
	at org.awaitility.core.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:101)
	at org.awaitility.core.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:81)
	at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:102)
	... 8 more",
0,CAMEL-19831,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-09-05 05:51:29+00:00,2023-09-05 10:10:51+00:00,No Desc,
0,CAMEL-19830,Improvement,Minor,"4.0.1, 4.1.0",4.2.0,"
None
",Resolved,Invalid,4.2.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-09-05 05:46:47+00:00,2023-10-21 11:35:07+00:00,"The SEDA component has some room for cleanups and also has potential for minor performance improvements. I tried an initial work on PR #11279, but it had problems and its updated versions weren't better either.",orpiske:1695009433:2023-09-18T11:57:13.922+0000:1695009433:2023-09-18T11:57:13.922+0000:This became invalid as I was able to implement a solution that re-enabled the queue reference caching while allowing for new queues to be created quickly.
0,CAMEL-19829,Bug,Major,None,None,"
None
",Resolved,Fixed,None,Federico Mariani,Federico Mariani,0,1,2023-09-04 14:42:13+00:00,2023-09-05 09:09:54+00:00,"*ClusterServiceAutoConfiguration need to be refactored so that CamelContext is not autowired in the AutoConfiguration, otherwise the bean is not added to the camel services.",Federico Mariani:1693876188:2023-09-05T09:09:48.938+0000:1693876188:2023-09-05T09:09:48.938+0000:https://github.com/apache/camel-spring-boot/pull/930
0,CAMEL-19828,Bug,Minor,4.x,4.2.0,"
None
",Resolved,Fixed,4.2.0,Jiri Ondrusek,Jiri Ondrusek,0,4,2023-09-04 13:37:50+00:00,2023-11-13 11:46:45+00:00,"When adopting the latest Camel into camel-quarkus I noticed an error.




NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: com.twilio.type.Endpoint




Problem is caused by this change: https://github.com/apache/camel/pull/11225/commits/e4007f2b1dfc982e5ea6a45427cbec8835ea58a5


As you can see here, 2 converters are registered (i.e. String -> PhoneNumber). Unfortunately the Twilio API uses common interface `com.twilio.type.Endpoint`. See this line.


Therefore the mechanism for selection converters is not able to find converter `String -> Endpoint`.


The behavior could be simply tested by following code added into `TwilioEndpointTest`:




        te = context.getEndpoint(
                ""twilio://call/create?from=RAW(+15005550006)&to=RAW(+14108675310)&url=http://demo.twilio.com/docs/voice.xml"",
                TwilioEndpoint.class);

        Assertions.assertTrue(te.getConfiguration() instanceof CallEndpointConfiguration);
        CallEndpointConfiguration cee = (CallEndpointConfiguration) te.getConfiguration();
        Assertions.assertEquals(""+15005550006"", cee.getFrom().getEndpoint());
        Assertions.assertEquals(""+14108675310"", cee.getTo().getEndpoint());




I'm not sure how it was possible, but the test wold succeed before the change introduced by e4007f2b1dfc982e5ea6a45427cbec8835ea58a5.


I think that the conversion before the change might not be correct in this twilio case (the conversion was probably possible because of the fallback conversion and was depending on the order of the registered converters - I don't see a way how to decide which conversion should be used `PhoneNumber` or `Sip` from the registered converters from the link above)","jondruse:1693805896:2023-09-04T13:38:16.643+0000:1693805896:2023-09-04T13:38:16.643+0000:FYI [~orpiske]Â 
orpiske:1693807480:2023-09-04T14:04:40.106+0000:1693807480:2023-09-04T14:04:40.106+0000:[~jondruse] Yeah, the converter is a bit more strict now, as it requires the types to match. Previously it would succeed in the first match (and the order was: Phone, SIP). I am curious if previously it was working for SIP - but I don't know.

So, to reproduce the previous behavior, you can try adding the following converter:


{code:java}
    @Converter
    public static Endpoint toEndpoint(String value) {
        return (Endpoint) new PhoneNumber(value);
    }
{code}

Can you give it a try and let me know, please?

jondruse:1693807819:2023-09-04T14:10:19.020+0000:1693807819:2023-09-04T14:10:19.020+0000:Sure, thanks for the tip!
jondruse:1693807993:2023-09-04T14:13:13.789+0000:1693808006:2023-09-04T14:13:26.485+0000:I already tested this code and it works. I see it as a workaround, because it can not convert to a Sip.
I can create a PR with it.

Â 

Perhaps some better solution can be implemented (in twilio comp) to allow conversion to i.e Sip. I can try to propose something later (as this will be a very small severity)
orpiske:1693809672:2023-09-04T14:41:12.810+0000:1693809672:2023-09-04T14:41:12.810+0000:??I already tested this code and it works. I see it as a workaround, because it can not convert to a Sip.??

I agree with you. I believe it is only restoring the previous behavior (which would convert to Phone), but it does not look like an adequate solution. 

??Perhaps some better solution can be implemented (in twilio comp) to allow conversion to i.e Sip. I can try to propose something later (as this will be a very small severity)??

Great!!
fil512:1698821432:2023-11-01T14:50:32.871+0000:1698823264:2023-11-01T15:21:04.065+0000:[~orpiske] we hit the same issue.Â  Looks like a legit regression to me.Â  Compare:

Â 

Camel 3Â CoreTypeConverterRegistry Line 666 - 669
{code:java}
TypeConverter converter = typeMappings.getFirst(
        toType::isAssignableFrom,
        // skip Object based we do them last
        from -> !from.equals(Object.class) && from.isAssignableFrom(fromType)); {code}
this logic got reversed in Camel 4 TypeResolverHelper Line 117-120
{code:java}
for (var entry : converters.entrySet()) {
    if (entry.getKey().isAssignableMatch(typeConvertible)) {
        return entry.getValue();
    }
} {code}
Notice in Camel 3 isAssignableFrom it calls toType.isAssignableFrom(entry.getKey() whereas in Camel 4 it effectively calls entry.getKey().isAssignableFrom(toType).
fil512:1698822252:2023-11-01T15:04:12.398+0000:1698822252:2023-11-01T15:04:12.398+0000:This fixed it for me:
{code:java}
for (var entry : converters.entrySet()) {
    if (typeConvertible.isAssignableMatch(entry.getKey())) {
        return entry.getValue();
    }
} {code}
fil512:1698832685:2023-11-01T17:58:05.050+0000:1698832709:2023-11-01T17:58:29.243+0000:Here's a PR with a test and the fix:

[https://github.com/apache/camel/pull/11882]
davsclaus:1699782756:2023-11-12T17:52:36.618+0000:1699782756:2023-11-12T17:52:36.618+0000:[~orpiske] did you type converter changes fix this in the 4.2 release 
orpiske:1699847146:2023-11-13T11:45:46.369+0000:1699847146:2023-11-13T11:45:46.369+0000:This should have been resolved in 4.2.0 by the linked PRs.
orpiske:1699847205:2023-11-13T11:46:45.170+0000:1699847205:2023-11-13T11:46:45.170+0000:[~davsclaus] yes it should. There were a couple of additional fixes from me and other contributors that should have fixed this."
0,CAMEL-19827,Bug,Minor,3.14.9,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Kartik,0,3,2023-09-04 09:58:59+00:00,2023-10-12 16:37:45+00:00,"When Camel-Kafka 3.13.0 version is used and if we define a Kafka endpoint with an invalid configuration like port 1234556 which is invalid, An exception is thrown and propagated back to a higher layer.


Exception


Â 




15:24:42.513 [main] [{}] INFO Â org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.13.0 (camel-1) shutting down (timeout:45s)
15:24:42.516 [main] [{}] DEBUG org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager - Shutting down with no inflight threads.
15:24:42.518 [main] [{}] DEBUG org.apache.camel.impl.engine.AbstractCamelContext - Route: route1 which failed to startup will be stopped
15:24:42.520 [main] [{}] DEBUG org.apache.camel.support.DefaultConsumer - Shutting down consumer: Consumer[kafka:xyz?brokers=localhost:119092]
15:24:42.524 [main] [{}] INFO Â org.apache.camel.impl.engine.AbstractCamelContext - Routes shutdown summary (total:1 stopped:1)
15:24:42.524 [main] [{}] INFO Â org.apache.camel.impl.engine.AbstractCamelContext - Â  Â  Stopped route1 (kafka:xyz)
15:24:42.525 [main] [{}] DEBUG org.apache.camel.impl.engine.DefaultInflightRepository - Shutting down with no inflight exchanges.
15:24:42.529 [main] [{}] INFO Â org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.13.0 (camel-1) shutdown in 16ms (uptime:1s575ms)
Exception in thread ""main"" org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:823)
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:665)
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:646)
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:626)
Â  Â  at org.apache.camel.component.kafka.DefaultKafkaClientFactory.getConsumer(DefaultKafkaClientFactory.java:34)
Â  Â  at org.apache.camel.component.kafka.KafkaFetchRecords.createConsumer(KafkaFetchRecords.java:121)
Â  Â  at org.apache.camel.component.kafka.KafkaFetchRecords.preInit(KafkaFetchRecords.java:80)
Â  Â  at org.apache.camel.component.kafka.KafkaConsumer.doStart(KafkaConsumer.java:123)
Â  Â  at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
Â  Â  at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:113)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3498)
Â  Â  at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:401)
Â  Â  at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:319)
Â  Â  at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:213)
Â  Â  at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:147)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3201)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2863)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2814)
Â  Â  at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2510)
Â  Â  at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:246)
Â  Â  at org.example.camel.MyCamelExample.main(MyCamelExample.java:22)
Caused by: org.apache.kafka.common.config.ConfigException: Invalid port in bootstrap.servers: localhost:119092
Â  Â  at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:82)
Â  Â  at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:48)
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:731)
Â  Â  ... 21 more 



Â 


If we upgrade the library version to 3.14.9 then we don't see this exception propagated to a higher layer instead infinite retries are done growing log size in GB and filling up disk space.


Â 




15:27:10.603 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] INFO Â org.apache.kafka.common.metrics.Metrics - Metrics scheduler closed
15:27:10.603 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] INFO Â org.apache.kafka.common.metrics.Metrics - Closing reporter org.apache.kafka.common.metrics.JmxReporter
15:27:10.604 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] INFO Â org.apache.kafka.common.metrics.Metrics - Metrics reporters closed
15:27:10.604 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] INFO Â org.apache.kafka.common.utils.AppInfoParser - App info kafka.consumer for consumer-df1a4884-a933-41fa-81b8-e1831627f0f6-239 unregistered
15:27:10.604 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] DEBUG org.apache.kafka.clients.consumer.KafkaConsumer - [Consumer clientId=consumer-df1a4884-a933-41fa-81b8-e1831627f0f6-239, groupId=df1a4884-a933-41fa-81b8-e1831627f0f6] Kafka consumer has been closed
15:27:10.604 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] WARN Â org.apache.camel.component.kafka.KafkaFetchRecords - Error creating org.apache.kafka.clients.consumer.KafkaConsumer due Failed to construct kafka consumer
org.apache.kafka.common.KafkaException: Failed to construct kafka consumer
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:823) ~[kafka-clients-2.8.1.jar:?]
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:665) ~[kafka-clients-2.8.1.jar:?]
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:646) ~[kafka-clients-2.8.1.jar:?]
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:626) ~[kafka-clients-2.8.1.jar:?]
Â  Â  at org.apache.camel.component.kafka.DefaultKafkaClientFactory.getConsumer(DefaultKafkaClientFactory.java:34) ~[camel-kafka-3.14.9.jar:3.14.9]
Â  Â  at org.apache.camel.component.kafka.KafkaFetchRecords.createConsumer(KafkaFetchRecords.java:126) ~[camel-kafka-3.14.9.jar:3.14.9]
Â  Â  at org.apache.camel.component.kafka.KafkaFetchRecords.run(KafkaFetchRecords.java:89) ~[camel-kafka-3.14.9.jar:3.14.9]
Â  Â  at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]
Â  Â  at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
Â  Â  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]
Â  Â  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]
Â  Â  at java.lang.Thread.run(Thread.java:829) ~[?:?]
Caused by: org.apache.kafka.common.config.ConfigException: Invalid port in bootstrap.servers: localhost:119092
Â  Â  at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:82) ~[kafka-clients-2.8.1.jar:?]
Â  Â  at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:48) ~[kafka-clients-2.8.1.jar:?]
Â  Â  at org.apache.kafka.clients.consumer.KafkaConsumer.<init>(KafkaConsumer.java:731) ~[kafka-clients-2.8.1.jar:?]
Â  Â  ... 11 more
15:27:10.604 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] INFO Â org.apache.camel.component.kafka.KafkaFetchRecords - Connecting Kafka consumer thread ID xyz-Thread 0 with poll timeout of 5000 ms
15:27:10.605 [Camel (camel-1) thread #1 - KafkaConsumer[xyz]] [{}] INFO Â org.apache.kafka.clients.consumer.ConsumerConfig - ConsumerConfig values:Â 
Â  Â  allow.auto.create.topics = true
Â  Â  auto.commit.interval.ms = 5000
Â  Â  auto.offset.reset = latest
Â  Â  bootstrap.servers = [localhost:119092]
Â  Â  check.crcs = true
Â  Â  client.dns.lookup = use_all_dns_ips
Â  Â  client.id = consumer-df1a4884-a933-41fa-81b8-e1831627f0f6-240
Â  Â  client.rack =Â 
Â  Â  connections.max.idle.ms = 540000
Â  Â  default.api.timeout.ms = 60000
Â  Â  enable.auto.commit = true","kartikvk1996:1693803077:2023-09-04T12:51:17.777+0000:1693803077:2023-09-04T12:51:17.777+0000:[~davsclaus] Is this expected in the new 3.14.9 I didn't find anything specific about this issue in changelog from 3.13.x to 3.14.x. Is there any parameter to prevent this from happening?
acosentino:1693803411:2023-09-04T12:56:51.583+0000:1693867167:2023-09-05T06:39:27.189+0000:This cannot be a blocker or critical.
kartikvk1996:1693867154:2023-09-05T06:39:14.997+0000:1693867154:2023-09-05T06:39:14.997+0000:Definitely, this is not a minor issue also, I see generating a log in GB can take down the entire system within minutes. This is a significant issue where there is no configuration to control the retry nether a delay can be added. Its like a infinite for loop consuming 100%CPU
acosentino:1693867256:2023-09-05T06:40:56.354+0000:1693867256:2023-09-05T06:40:56.354+0000:You have a configuration error, this could be at most a major issue, but if we categorize this kind of stuff as critical, what happens when something is really critical or blocker? An issue is not critical because it affects your workflow and you want a fix ASAP.
acosentino:1693867362:2023-09-05T06:42:42.009+0000:1693867362:2023-09-05T06:42:42.009+0000:And BTW, switching to critical, doesn't change the priorities. 3.14.10 is not planned before the end of the year.
davsclaus:1696937982:2023-10-10T19:39:42.647+0000:1696937982:2023-10-10T19:39:42.647+0000:Lets see if we can validate those kafka configuration options more eager to make the route fail on startup. However it wont validate all, as if there is network connectivity problems then camel will keep retrying to re-connect (as it has always done)
davsclaus:1697071336:2023-10-12T08:42:16.457+0000:1697071336:2023-10-12T08:42:16.457+0000:I can now fail fast as before

{code}
2023-10-12 10:39:06.948  INFO 11797 --- [           main] el.impl.engine.AbstractCamelContext : Apache Camel 4.2.0-SNAPSHOT (MyKafka) shutdown in 4ms (uptime:0s)
org.apache.kafka.common.config.ConfigException: Invalid port in bootstrap.servers: localhost:119092
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:82)
	at org.apache.kafka.clients.ClientUtils.parseAndValidateAddresses(ClientUtils.java:48)
	at org.apache.camel.component.kafka.KafkaConsumer.doStart(KafkaConsumer.java:162)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:113)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:126)
	at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3035)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRouteConsumers(InternalRouteStartupManager.java:401)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartRouteConsumers(InternalRouteStartupManager.java:319)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.safelyStartRouteServices(InternalRouteStartupManager.java:213)
	at org.apache.camel.impl.engine.InternalRouteStartupManager.doStartOrResumeRoutes(InternalRouteStartupManager.java:147)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2763)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStartContext(AbstractCamelContext.java:2445)
	at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2400)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:113)
	at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2036)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:208)
	at org.apache.camel.main.KameletMain.doStart(KameletMain.java:317)
	at org.apache.camel.support.service.BaseService.start(BaseService.java:113)
	at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:980)
	at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:738)
{code}

There will be a new option where you can turn this on|off - preValidateHostAndPort"
0,CAMEL-19826,Task,Minor,4.0.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Karen Lease,Karen Lease,0,1,2023-09-01 15:04:01+00:00,2023-09-12 16:21:27+00:00,It's currently not even possible to compile the examples due to some issues in the pom files. They should at least be compilable and if possible also runnable.,
0,CAMEL-19825,Bug,Minor,4.0.0,4.1.0,"
None
",Resolved,Fixed,4.1.0,Federico Mariani,Federico Mariani,0,4,2023-09-01 14:57:17+00:00,2023-09-12 13:19:13+00:00,"The example master does not work with camel 4 with the openshift profile due to




Caused by: java.lang.IllegalStateException: No cluster service found
	at org.apache.camel.component.master.MasterComponent.lambda$doInit$0(MasterComponent.java:113) ~[camel-master-4.0.0.redhat-00002.jar!/:4.0.0.redhat-00002]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[na:na]
	at org.apache.camel.component.master.MasterComponent.doInit(MasterComponent.java:112) ~[camel-master-4.0.0.redhat-00002.jar!/:4.0.0.redhat-00002]




In particular, I noticed that the bean KubernetesClusterService is produced by Spring boot, but, the following line of code returns an empty list and I do not fully understand how these kinds of beans are added to the services in the camel context.


A workaround exists, the KubernetesClusterService has to be created manually and added to the camelContext like this




getContext().addService(new KubernetesClusterService());




but the same code is working in camel 3.x.","davsclaus:1693555351:2023-09-01T16:02:31.412+0000:1693555351:2023-09-01T16:02:31.412+0000:You need to lookup via registry if its created by spring boot
mcarlett:1693787140:2023-09-04T08:25:40.901+0000:1693789007:2023-09-04T08:56:47.678+0000:it seems that KubernetesClusterServiceAutoConfiguration configuration is executed after CamelAutoConfiguration even if [there is AutoConfigureBefore annotation|https://github.com/apache/camel-spring-boot/blob/main/components-starter/camel-kubernetes-starter/src/main/java/org/apache/camel/component/kubernetes/springboot/cluster/KubernetesClusterServiceAutoConfiguration.java#L35]

Maybe for the Autowired CamelContext, but the service is not set as expected, even if the bean is in the Spring context"
0,CAMEL-19824,Task,Major,"4.0.0, 4.1.0",None,"
None
",Open,Unresolved,None,Nikita_Konovalov,Otavio Rodolfo Piske,0,1,2023-09-01 14:46:58+00:00,2023-09-01 14:47:07+00:00,"Calling the provider should check for Void, not for null. 


For some reason this patch is failing: https://github.com/apache/camel/pull/11173/files.


We need to investigate.",
0,CAMEL-19823,Improvement,Minor,None,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-09-01 10:02:18+00:00,2023-09-01 10:04:14+00:00,See CAMEL-19821,
0,CAMEL-19792,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-28 07:57:01+00:00,2023-08-28 11:13:23+00:00,Otherwise if the bean does not exists the value in the constructor arg is null which is not expected.,
0,CAMEL-19791,Dependency upgrade,Major,4.0.0,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-08-28 05:14:41+00:00,2023-08-28 05:14:46+00:00,No Desc,
0,CAMEL-19790,Task,Minor,4.0.0,4.1.0,"

examples

",Resolved,Fixed,4.1.0,Unassigned,Marco Carletti,0,1,2023-08-25 15:23:25+00:00,2023-08-31 15:48:09+00:00,"Nice to have an example to show how camel-spring-jdbc component works, especially with local transactions",
0,CAMEL-19789,Bug,Major,4.0.0,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Karen Lease,Karen Lease,0,2,2023-08-25 14:33:54+00:00,2023-08-30 16:26:47+00:00,"A route using from:aws2-kinesis produces Exchanges which have identical content which correspond to the first record in the Kinesis stream.
This is due to a change in the way the shardIterator is managed in PR https://github.com/apache/camel/pull/10733.
The issue is not found by KinesisConsumerIT because it doesn't check that it receives 20 different records.
The issue is visible in camel-examples/debezium.","hamed-hatami:1693207459:2023-08-28T15:24:19.746+0000:1693207704:2023-08-28T15:28:24.655+0000:[~klease78]Â  Â Then multi-shard consumption is disregarded ?
klease78:1693208499:2023-08-28T15:41:39.337+0000:1693208499:2023-08-28T15:41:39.337+0000:{quote}Then multi-shard consumption is disregarded ?
{quote}
Not intentionally. But I am not at all an expert on Kinesis so if you have an example or test case for this, that would be great.
I assume you mean that if there are several shards in a stream which are not closed, we should read data from all of them? Based on the documentation, it seems that a shard only gets to a CLOSED state if it is split or merged, which sets the last sequence number. I didn't try to simulate that.
hamed-hatami:1693209016:2023-08-28T15:50:16.609+0000:1693209016:2023-08-28T15:50:16.609+0000:CLOSED state happens when the connection is broken or discontinued right ? then I assume the connection is open yet therefore in case you have multiple shards you need to consume all shards not only the one which is specified in the config ?! the way I have developed despite the fact , I didn't mention to that existing issue but it was able to real from multiple shards in in DSL you don't give any specific shard idÂ 
klease78:1693380131:2023-08-30T15:22:11.728+0000:1693380131:2023-08-30T15:22:11.728+0000:bq. CLOSED state happens when the connection is broken or discontinued right ? 
No, I don't think it is related to the connection, at least according to this explanation: [Resharding|docs.aws.amazon.com/streams/latest/dev/kinesis-using-sdk-java-after-resharding.html#kinesis-using-sdk-java-resharding-data-routing]
But I agree that my correction for reading multiple records from one shard broke the multi-shard handling. So I will fix it in CAMEL-19811.
klease78:1693384007:2023-08-30T16:26:47.263+0000:1693384007:2023-08-30T16:26:47.263+0000:[~hamed-hatami] Please feel free to have a look at my proposed changes: https://github.com/apache/camel/pull/11243"
0,CAMEL-19788,Improvement,Minor,None,,"
None
",Open,Unresolved,None,Unassigned,Jan Filipski,0,1,2023-08-25 14:03:38+00:00,2023-08-29 04:25:42+00:00,"Current implementation of BlueprintCamelStateService iterates over map of states to build list of CamelContext states.
Component key of map (bundleId concatenated with contextId) is not necessary, because BlueprintCamelStateService can be only used in context of one bundle (passed in bundleContext). So camel contextId can be used as a key.",
0,CAMEL-19787,Wish,Minor,None,4.x,"
None
",Resolved,Fixed,4.x,Unassigned,tanyu,0,2,2023-08-24 03:08:51+00:00,2023-12-22 09:25:28+00:00,Why can't the REST component support headerfilterStrategy configuration?,"davsclaus:1692822246:2023-08-24T04:24:06.294+0000:1692822246:2023-08-24T04:24:06.294+0000:Can you be more specific and tell more what you ask for.
tanyu:1692830864:2023-08-24T06:47:44.195+0000:1692830864:2023-08-24T06:47:44.195+0000:camel-http, camel-cxf component all have this option to config header filter strategy, but rest component dosen't haveã !screenshot-1.png! 

when  i use rest component as producer, I wish Camel could filter out these headers during this HTTP request.
davsclaus:1692832731:2023-08-24T07:18:51.515+0000:1692832731:2023-08-24T07:18:51.515+0000:rest is just a facade on top of another component.
You can just pass it in the uri - rest:get:xxx?headerFilterStrategy=xxx

Or set the header filter on the component that rest uses as a producer. (a camel-http or which component that has this)

tanyu:1692833470:2023-08-24T07:31:10.170+0000:1692833470:2023-08-24T07:31:10.170+0000:I'm aware that the REST component actually uses the HTTP component. and i also try ` rest:get:xxx?headerFilterStrategy=xxx` like this, however it doesn't work. Because code like this:
 !screenshot-2.png! 
It's using this filter strategy consistently and cannot be replaced.
davsclaus:1703208328:2023-12-22T09:25:28.805+0000:1703208328:2023-12-22T09:25:28.805+0000:There was another ticket about this that was recently implemented"
0,CAMEL-19786,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-23 20:47:12+00:00,2023-08-30 05:45:40+00:00,"We should make it possible for camel-jbang / camel-xml-io-dsl to load classic spring XML <beans> files with embedded <bean> and <camelContext>.


This can allow users to migrate to modern DSL via camel-jbang transform CLI.","davsclaus:1692794864:2023-08-23T20:47:44.368+0000:1692794864:2023-08-23T20:47:44.368+0000:For example from this example: 
- camel-spring-boot-examples/xml-import
davsclaus:1693282358:2023-08-29T12:12:38.057+0000:1693304332:2023-08-29T18:18:52.250+0000:TODO: parse with <camelContext> embedded *DONE*
TODO: When running spring <beans> XML then we need to use Camel {{ }} syntax instead of spring ${ } in <bean> *DONE*
TODO: XML dump should not include auto-generated IDs *DONE*"
0,CAMEL-19785,Bug,Major,None,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-08-23 14:51:19+00:00,2023-08-23 15:35:44+00:00,So you can declare beans that depends on other beans and their order does not matter,
0,CAMEL-19784,Bug,Major,None,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Claus Ibsen,Claus Ibsen,0,1,2023-08-23 14:45:54+00:00,2023-08-23 15:35:48+00:00,"If you use #bean:foo and there is no bean id with foo, and you have configured it as a mandatory then we should throw an exception",
0,CAMEL-19783,Bug,Major,4.0.0,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Andrea Cosentino,Jesse Sightler,0,2,2023-08-23 14:10:30+00:00,2023-09-06 04:41:06+00:00,"Relevant log:





: io.grpc.StatusRuntimeException: UNAUTHENTICATED: An authentication exception occurred. Provide valid authentication via metadata headers. rpcId: d493e4d9-9ac9-4723-a9d9-9179e4d58067
	at io.grpc.Status.asRuntimeException(Status.java:539)
	at io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:491)
	at io.grpc.internal.DelayedClientCall$DelayedListener$3.run(DelayedClientCall.java:489)
	at io.grpc.internal.DelayedClientCall$DelayedListener.delayOrExecute(DelayedClientCall.java:453)
	at io.grpc.internal.DelayedClientCall$DelayedListener.onClose(DelayedClientCall.java:486)
	at io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:567)
	at io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:71)
	at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:735)
	at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:716)
	at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)
	at io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:133)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
2023-08-23T09:01:12.618+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Trailers:
2023-08-23T09:01:12.618+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Trailer: date, Value: Wed, 23 Aug 2023 09:01:12 GMT
2023-08-23T09:01:12.618+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Trailer: content-type, Value: application/grpc
2023-08-23T09:01:12.618+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Trailer: rpc-id, Value: d493e4d9-9ac9-4723-a9d9-9179e4d58067
2023-08-23T09:01:12.618+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Trailer: error-code, Value: sfdc.platform.eventbus.grpc.service.auth.error
2023-08-23T09:01:12.619+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Trailer: type, Value: Subscribe
2023-08-23T09:01:12.619+0000 ERROR 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" attempting login
2023-08-23T09:01:12.986+0000  INFO 1 --- [main-EventThread] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Login successful
2023-08-23T09:01:12.986+0000  INFO 1 --- [main-EventThread] com.redhat.sfdc.tools.outboundmessaging. : camel-breadcrumb-id="""" request-id="""" Forced login complete.
2023-08-23T09:01:12.986+0000  WARN 1 --- [grpc-default-executor-1] org.apache.camel.component.salesforce.in : camel-breadcrumb-id="""" request-id="""" Not re-subscribing after error because replayId is null. Topic: /event/IE_Outbound__e




The text ""Not re-subscribing after error because replayId is null"" is printed by the private class FetchResponseObserver. The replayId is also private and appears to only be set by the class itself when it receives a message. It is not set based upon the initialReplayId and it also will not make reasonable assumptions if there was no initialReplayId (eg, started with LATEST).


As a result, it is extremely easy for this consumer to end up in a state with few obvious error messages, but no messages being consumed.","davsclaus:1692773715:2023-08-23T14:55:15.132+0000:1692773715:2023-08-23T14:55:15.132+0000:You are welcome to work on this. And also take a look at some of the other camel-salesforce tickets
jsightle@redhat.com:1693570598:2023-09-01T20:16:38.119+0000:1693570598:2023-09-01T20:16:38.119+0000:[~davsclaus] Thank you... I have taken a shot at it: https://github.com/apache/camel/pull/11285"
0,CAMEL-19782,Task,Major,4.0.0,"4.0.1, 4.1.0","

documentation

",Resolved,Fixed,"4.0.1, 4.1.0",Claus Ibsen,Marco Carletti,0,2,2023-08-23 14:07:37+00:00,2023-09-01 11:21:14+00:00,"Current Configuration of transaction manager is not valid anymore since CAMEL-19225, the property transactionStrategy must be used instead of the property transactionManager","mcarlett:1692772805:2023-08-23T14:40:05.334+0000:1692772805:2023-08-23T14:40:05.334+0000:maybe the upgrade guide needs to be updated as well https://camel.apache.org/manual/camel-4-migration-guide.html
davsclaus:1693538474:2023-09-01T11:21:14.045+0000:1693538474:2023-09-01T11:21:14.045+0000:Thanks for reporting this"
0,CAMEL-19781,Improvement,Major,4.1.0,4.x,"
None
",Open,Unresolved,4.x,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-08-23 12:46:05+00:00,2023-12-20 15:54:26+00:00,"Our code has an excessive amount of type misses that may be hurting performance due to JDK-8180450 and how the underlying implementation of type checks work in the JVM. 


Using the type pollution agent, we can see that there is a significant number of type misses in a sample execution of a Routing Slip using a bean to resolve the endpoints (see the attachment for details).",
0,CAMEL-19780,Bug,Minor,3.21.0,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Claus Ibsen,Ricardo Martinez,1,3,2023-08-23 12:24:07+00:00,2023-09-18 12:19:47+00:00,"When trying to execute a file through JBang, it doesn't recognize relative paths.


For instance, the following commands don't work:




jbang -Dcamel.jbang.version=3.21.0 camel@apache/camel run ./rest-dsl.camel.yaml

camel init /tmp/Test.java



In contrast, the following works:




jbang -Dcamel.jbang.version=3.21.0 camel@apache/camel run rest-dsl.camel.yaml","davsclaus:1692766812:2023-08-23T13:00:12.843+0000:1692766812:2023-08-23T13:00:12.843+0000:What do you mean? Is it because the file is ""relative"" by using DOT SLASH xxx, eg ./myfile.yaml

Also try with only Camel 4.0.0
ricmarti:1692768755:2023-08-23T13:32:35.739+0000:1692768755:2023-08-23T13:32:35.739+0000:Yes, exactly, referencing the files using {{./}} notation doesn't seem to work. What would be the command for Camel 4.0.0?


jbang -Dcamel.jbang.version=3.21.0 camel@apache/camel:4.0.0 run ./rest-dsl.camel.yaml
Â 
davsclaus:1692769216:2023-08-23T13:40:16.477+0000:1692769216:2023-08-23T13:40:16.477+0000:Okay so its because ./xxx was mistakenly assumed its a hidden file (starts with dot).

davsclaus:1692769246:2023-08-23T13:40:46.870+0000:1692769246:2023-08-23T13:40:46.870+0000:The same if you do

camel run ../beer.yaml
davsclaus:1692769264:2023-08-23T13:41:04.419+0000:1692769264:2023-08-23T13:41:04.419+0000:See skipFile in Run command. You are welcome to work on a PR
davsclaus:1692769592:2023-08-23T13:46:32.280+0000:1692769592:2023-08-23T13:46:32.280+0000:camel init has --dir to specify a directory

camel init foo.yaml --dir=/myproject

But yeah it may be better to just specify that in the filename and drop the dir option
ricmarti:1692842221:2023-08-24T09:57:01.311+0000:1692842221:2023-08-24T09:57:01.311+0000:Ok, I'll write back when I start working on this, thanks [~davsclaus]Â 
davsclaus:1695010787:2023-09-18T12:19:47.836+0000:1695010787:2023-09-18T12:19:47.836+0000:We are about to cut new set of patch releases so I took a look and implemented this.

"
0,CAMEL-19779,Improvement,Major,"4.0.0, 4.1.0",4.x,"
None
",Open,Unresolved,4.x,Unassigned,Otavio Rodolfo Piske,0,1,2023-08-23 08:42:18+00:00,2023-08-23 08:42:18+00:00,"This is about a comment I raised here: https://github.com/apache/camel/pull/11181/files#r1302680683


Long story short, we have lots of places in the code base where we generate large strings (i.e.: dump stuff to xml, json, java, SQL, etc) and we keep those strings builtin into the code base. 


From a readability and maintainability perspective this is extremely hard to maintain, debug and read. Ideally, we should investigate a way to externalize those strings. For some cases, we might need to find a templating solution that is suitable and acceptable for the project.",
0,CAMEL-19778,New Feature,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-23 07:57:44+00:00,2023-09-29 12:14:28+00:00,"So you can transform from one DSL to another DSL.
This can only output to XML or YAML but input could also be Java.","davsclaus:1692776746:2023-08-23T15:45:46.335+0000:1692792653:2023-08-23T20:10:53.506+0000:We should stub creating the beans as we should be able to transform without creating the Java classes and have them on classpath *WONT FIX*
davsclaus:1692791421:2023-08-23T19:50:21.437+0000:1692792050:2023-08-23T20:00:50.483+0000:TODO: do not export kamelets *DONE*
davsclaus:1692792693:2023-08-23T20:11:33.214+0000:1692913311:2023-08-25T05:41:51.079+0000:Add option to output all in the same file *DONE*
davsclaus:1692795006:2023-08-23T20:50:06.493+0000:1692795006:2023-08-23T20:50:06.493+0000:We could also make it possible to transform an existing running Camel applications, or from an existing maven based source code folder structure, and make camel-jbang auto discover the files.
davsclaus:1692929583:2023-08-25T10:13:03.987+0000:1693265499:2023-08-29T07:31:39.965+0000:TODO: spring <bean> with property as a <list> or <map> may require special mapping *DONE*
TODO: spring <bean> with <constructor-args> requires special mapping *DONE*"
0,CAMEL-19777,Bug,Minor,"3.21.0, 4.0.0","3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.21.1, 3.22.0, 4.0.1, 4.1.0",Denis Istomin,Denis Istomin,0,2,2023-08-22 20:38:02+00:00,2023-08-23 12:10:15+00:00,"Does not work with `.toD`:




// DOES NOT WORK
.setHeader(""fqqn"", constant(""addr::q1""))
.toD(""jms:queue:${header.fqqn}"");




Works with `.toD`:




// WORKS
.setHeader(JMS_DESTINATION_NAME, constant(""addr::q1""))
.toD(""jms:queue:dummy"");




Also works with `.to()`:




// WORKS
.to(""jms:queue:addr::q1"");




Probably it worked before `SendDynamicAware` was introduced.",davsclaus:1692763356:2023-08-23T12:02:36.483+0000:1692763356:2023-08-23T12:02:36.483+0000:This is only related to queue names with double colons
0,CAMEL-19776,Improvement,Major,None,"3.21.1, 3.22.0, 4.0.1, 4.1.0","

camel
opentelemetry

",Resolved,Fixed,"3.21.1, 3.22.0, 4.0.1, 4.1.0",Unassigned,Ruslan Hryn,0,1,2023-08-22 19:52:42+00:00,2023-09-01 08:52:48+00:00,"Currency, we are migrating from Camel OpenTracing to Camel OpenTelemetry,
and OpenTelemetry does not provide tracing strategy to trace each processor similar toÂ OpenTracingTracingStrategy.


Please addÂ OpenTelematryTracingStrategyÂ forÂ OpenTelemetryTracer with the same functionality as we have inÂ OpenTracingTracingStrategy




OpenTelemetryTracer ottracer = new OpenTelemetryTracer();
ottracer.setTracingStrategy(new OpenTelemetryTracingStrategy(tracer));","ruslan.hryn25:1693179182:2023-08-28T07:33:02.348+0000:1693179182:2023-08-28T07:33:02.348+0000:working to prepare PR
ruslan.hryn25:1693195761:2023-08-28T12:09:21.898+0000:1693195761:2023-08-28T12:09:21.898+0000:Implemented [https://github.com/apache/camel/pull/11213]

please review it"
0,CAMEL-19775,Bug,Major,4.0.0,None,"
None
",Resolved,Fixed,"4.0.1, 4.1.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-08-22 16:42:31+00:00,2023-08-22 17:56:23+00:00,Introduced by commit cb14edd0e4f4746333e3aed780d0f44dbb6696ca. The check for exchange completed is missing.,orpiske:1692698183:2023-08-22T17:56:23.137+0000:1692698183:2023-08-22T17:56:23.137+0000:Fixed with the linked PRs.
0,CAMEL-19774,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-22 10:47:31+00:00,2023-09-23 11:50:25+00:00,"Camel K renamed KameletBinding to Pipe, and the bind goal is now misleading.


camel bind -> camel pipe
camel pipe -> camel script (shell script)


Update 4.1 upgrade guide in docs also.",davsclaus:1695440944:2023-09-23T11:49:04.757+0000:1695440944:2023-09-23T11:49:04.757+0000:Lets keep the bind name as pipe is a bit unclear what it does. 
0,CAMEL-19773,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Unassigned,Claus Ibsen,0,1,2023-08-22 10:46:05+00:00,2023-09-28 14:04:13+00:00,"We can make the generated xml route using the new <camel> root tag, that allows to embed beans and more.",
0,CAMEL-19772,New Feature,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-22 09:19:22+00:00,2023-08-29 04:24:38+00:00,If you have custom beans in XML DSL or YAML DSL then it would be good if we can also dump these in the route-dumper.,"davsclaus:1692775825:2023-08-23T15:30:25.604+0000:1692775825:2023-08-23T15:30:25.604+0000:We can now also dump spring <beans> as well (although not very complex spring dependency injection, but to cover the 98% basic style)"
0,CAMEL-19771,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-21 16:37:35+00:00,2023-08-21 18:37:10+00:00,"The routeConfigurations should like other container definitions (routes, rests, templates) to be id and resource capable, to make it similar to the others.


This makes the source generated DSLs and dumpers able to use this.",
0,CAMEL-19770,Task,Major,4.0.0,None,"

core

",Resolved,Fixed,4.3.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-08-21 14:57:30+00:00,2023-12-07 14:16:31+00:00,Catching Throwables can be dangerous as it can also catch internal JVM errors and other problems that applications should not try to catch.,orpiske:1701929791:2023-12-07T14:16:31.411+0000:1701929791:2023-12-07T14:16:31.411+0000:Fixed with the linked PRs
0,CAMEL-19769,Bug,Major,4.0.0,,"
None
",Resolved,Invalid,None,Unassigned,Kiryanov Vlad,0,2,2023-08-21 12:42:31+00:00,2023-08-21 12:59:37+00:00,"I try to use camel 4.0.0 in Apache Karaf 4.4,3. But i get error in command
repo-add camel 4.0.0
karaf@root()> repo-add camel 4.0.0
Adding feature url mvn:org.apache.camel.karaf/apache-camel/4.0.0/xml/features
Error executing command: Error resolving artifact org.apache.camel.karaf:apache-camel:xml:features:4.0.0: [Could not find artifact org.apache.camel.karaf:apache-camel:xml:features:4.0.0 in central (https://repo1.maven.org/maven2/)] : mvn:org.apache.camel.karaf/apache-camel/4.0.0/xml/features",davsclaus:1692593977:2023-08-21T12:59:37.988+0000:1692593977:2023-08-21T12:59:37.988+0000:camel-karaf only supports Camel 3.x
0,CAMEL-19768,Bug,Minor,4.0.0,"4.0.1, 4.1.0","
None
",Resolved,Fixed,"4.0.1, 4.1.0",Unassigned,Michael PÃ¤tzold,0,2,2023-08-21 11:37:36+00:00,2023-08-22 05:17:01+00:00,"I was facing an issue during migration from Camel 3 to 4 when routing HTTP requests that contain JSONs with special characters, e.g. German umlauts. In my case, this leads to a situation where the receiving Spring Boot service rejects the request, pointing out it's not readable. That's actually true since the request header states that the message is in UTF-8 while it actually is encoded in ISO 8859-1.","davsclaus:1692594495:2023-08-21T13:08:15.031+0000:1692594495:2023-08-21T13:08:15.031+0000:https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Camel.204.20JSON.20charset.20issue/near/385945000
davsclaus:1692652621:2023-08-22T05:17:01.059+0000:1692652621:2023-08-22T05:17:01.059+0000:Thanks for reporting and the PR"
0,CAMEL-19767,Task,Major,None,,"
None
",Open,Unresolved,None,Nikita_Konovalov,Nikita_Konovalov,0,2,2023-08-21 08:39:25+00:00,2023-08-21 08:39:25+00:00,"Regarding the first set of changes ...


I think catching an AssertionError is not an adequate test practice. That deviates from the actual purpose of the AssertionError which is to indicate that the test has failed.


For now, let's keep the original as is. Let's create a ticket on Apache Jira to note that this is a bad practice that must be fixed.


Â 


Quoting orpiske",
0,CAMEL-19766,Bug,Minor,None,"3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.21.1, 3.22.0, 4.0.1, 4.1.0",Karen Lease,Karen Lease,0,2,2023-08-19 10:28:08+00:00,2023-08-21 13:07:50+00:00,"If a route defined in XML has a routeConfigurationId, when the route is loaded, it is not associated with the related routeConfiguration, even though the configuration is correctly loaded. For an example see camel-examples/examples/routes-configuration.


The issue is due to a change introduced in the correction for CAMEL-18923.","davsclaus:1692563540:2023-08-21T04:32:20.589+0000:1692563540:2023-08-21T04:32:20.589+0000:Do you mind backport this to camel-3.x, and camel-3.21.x branches"
0,CAMEL-19765,Improvement,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-18 19:31:11+00:00,2023-08-22 09:19:32+00:00,So you can plugin custom implementations,
0,CAMEL-19764,Bug,Major,4.0.0,None,"
None
",Resolved,Fixed,"4.0.1, 4.1.0",Karen Lease,Claus Ibsen,0,2,2023-08-18 18:54:34+00:00,2023-08-21 10:32:58+00:00,https://github.com/apache/camel/pull/10066#issuecomment-1684274569,"davsclaus:1692563464:2023-08-21T04:31:04.508+0000:1692563464:2023-08-21T04:31:04.508+0000:Karen do you mind backporting this to 3.x branches as cherry-pick does not apply cleanly.
klease78:1692582306:2023-08-21T09:45:06.350+0000:1692584244:2023-08-21T10:17:24.077+0000:The 3.x branches don't have this issue; it was introduced when I switched from apicurio to swagger in 4.x.
davsclaus:1692585178:2023-08-21T10:32:58.810+0000:1692585178:2023-08-21T10:32:58.810+0000:Thanks"
0,CAMEL-19763,New Feature,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Darius Cooper,0,3,2023-08-18 14:41:30+00:00,2023-08-18 16:30:04+00:00,"We have a use-case where we would like to exclude certain packages from our OpenAPI JSO spec.
We'd like to use the Camel RestModelConverters class, but also add some more rules.


Could some public methods be added to RestModelConverters, which would be very similar to what is in Open API's ModelConverters class here:



public void addConverter(ModelConverter converter)
public void addPackageToSkip(String pkg)
public void addClassToSkip(String cls)



Would that change be acceptable? If so, we can submit a PR. Thanks.","davsclaus:1692347404:2023-08-18T16:30:04.653+0000:1692347404:2023-08-18T16:30:04.653+0000:Hmm I would rather see this can be done in a more Camel way.

Make RestModelConverters an interface, and have a DefaultRestModelConverters.
Add those methods in the API in the interface.

Make Camel lookup from registry if there is a custom RestModelConverters, and use it if present, otherwise use the default.
Add in the docs about this feature, in src/main/docs.

There is already RestDefinitionsResolver as interface (however it does a classpath lookup) what you should do is lookup in Registry"
0,CAMEL-19762,Bug,Minor,None,None,"
None
",Resolved,Invalid,None,Unassigned,Mohanavalli A,0,3,2023-08-18 05:48:42+00:00,2023-08-18 10:15:33+00:00,"Hi Team,


I am working on a custom camel component (camel-azure-files), with camel-azure-parent as the parent project.
When I build this component independantly outside the camel-main project, I get below error


`[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.21.0:generate (generate) on project camel-azure-files: Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo: NullPointerException -> [Help 1]`


Build platform : Windows.


Thanks,
Mohanavalli A","davsclaus:1692312352:2023-08-18T06:45:52.171+0000:1692312352:2023-08-18T06:45:52.171+0000:The component must be in the camel source code, when you inherit from this parent pom.xml.

If you want to do a custom component that is not part of Apache Camel then dont inherit from this pom.xml
mohanavalli_a:1692324140:2023-08-18T10:02:20.901+0000:1692324181:2023-08-18T10:03:01.274+0000:Developing new camel components become harder, if build is tightly coupled with parent projects, so request to simplify builds to work independantly. Also, expecting a relevant error message, than a NPE.
acosentino:1692324661:2023-08-18T10:11:01.450+0000:1692324661:2023-08-18T10:11:01.450+0000:This has been explained already, don't use the parent if you want to work on something not part of Camel.
davsclaus:1692324933:2023-08-18T10:15:33.633+0000:1692324933:2023-08-18T10:15:33.633+0000:And use -e parameter when using maven to get stacktrace that can help you find out more about the error"
0,CAMEL-19761,Improvement,Minor,4.x,,"

AWS

",Open,Unresolved,None,Unassigned,Gerda Ilger,0,1,2023-08-18 05:33:13+00:00,2023-08-18 05:39:46+00:00,"As discussed on January 16, 2023:


aws2-ses is based on Amazon' AWS v2 SES v1 client, which has a 10 MB per message limit.
In order to send messages up to 40 MB, we'll need to switch to Amazonâs SESV2Client. Service quotas in Amazon SES
Â 
Duplicating the aws2-ses component and upgrading the SES client seems to do the trick.Â 
The changes to upgrade to SESV2Client would look something like this: https://github.com/gerdailger/camel/commit/09996edf939b7082af5bb6fcc1d6cf514b776aea


As suggested by Andrea Consentino, creating a JIRA issue to discuss the best way to merge & whether it would be better to have only one component based on SESV2Client.


Note that while SESV2Client has been working very well & exactly like the v1 client (only better - supporting 40 MB messages) for us for the last 8 months, I don't know if there may be (edge) cases where it behaves differently and breaks things for others.",
0,CAMEL-19760,Improvement,Minor,"3.21.0, 4.0.0","3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Luigi De Masi,Luigi De Masi,0,2,2023-08-17 18:39:59+00:00,2023-08-22 10:55:49+00:00,"In netty-http, the proxy protocol is not supported in producer endpoint but there's nothing that prevents to run a route containing a netty-http  producer endpoint  with proxy protocol.",
0,CAMEL-19759,Bug,Major,3.20.6,None,"
None
",Resolved,Duplicate,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-08-17 17:11:24+00:00,2023-08-22 17:50:47+00:00,"Under high load, Camel is taking a very long time to shutdown. The investigation points to something happening while the ServicePool is stopping.


Note: this problem is still under investigation.","orpiske:1692263504:2023-08-17T17:11:44.772+0000:1692263504:2023-08-17T17:11:44.772+0000:It could be related to CAMEL-19371, but it's unclear for now.
orpiske:1692313760:2023-08-18T07:09:20.300+0000:1692313760:2023-08-18T07:09:20.300+0000:Attached a stack from a hang up on 3.20.4 (so, it seems to not be related to CAMEL-19371). 
rhuanrocha:1692454830:2023-08-19T22:20:30.086+0000:1692454830:2023-08-19T22:20:30.086+0000:Hi [~orpiske]

I noticed that the stack trace is indicating the following line: org.apache.camel.support.cache.ServicePool.doStop(ServicePool.java:193).

Â 

Â 
{code:java}
@Override
Â  Â  protected void doStop() throws Exception {
Â  Â  Â  Â  cleanUp();
Â  Â  Â  Â  pool.values().forEach(Pool::stop);
Â  Â  Â  Â  pool.clear();
Â  Â  Â  Â  if (cache != null) {
Â  Â  Â  Â  Â  Â  synchronized (cacheLock) {
Â  Â  Â  Â  Â  Â  Â  Â  cache.values().forEach(ServicePool::stop);
Â  Â  Â  Â  Â  Â  Â  Â  cache.clear();
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  Â  Â  singlePoolEvicted.values().forEach(Pool::stop);
Â  Â  Â  Â  singlePoolEvicted.clear();
Â  Â  }
{code}
Checking the code looks like the cleanUp has already cleaned the singlePoolEvicted map. It looks like lines 192 and 193 are not needed. Am I correct?




Â 
orpiske:1692579393:2023-08-21T08:56:33.778+0000:1692579393:2023-08-21T08:56:33.778+0000:[~rhuanrocha] I am not entirely sure. Why do you think so?
rhuanrocha:1692587477:2023-08-21T11:11:17.988+0000:1692588538:2023-08-21T11:28:58.475+0000:Hi [~orpiske]Â 

Line 168 calls the cleanUp for each Pool instance inside the pool.

Â 
{code:java}
public void cleanUp() {
    if (cache instanceof LRUCache) {
        ((LRUCache) cache).cleanUp();
    }
    pool.values().forEach(Pool::cleanUp);
} {code}
Â However, the SinglePool manipulates the singlePoolEvicted and is cleaning the map at the cleanupEvicts method.
{code:java}
@Override
public void cleanUp() {
    cleanupEvicts();
}

private void cleanupEvicts() {
    if (!singlePoolEvicted.isEmpty()) {
        for (Map.Entry<Endpoint, Pool<S>> entry : singlePoolEvicted.entrySet()) {
            Endpoint e = entry.getKey();
            Pool<S> p = entry.getValue();
            doStop(e);
            p.stop();
            singlePoolEvicted.remove(e);
        }
    }
} {code}
With this, my understanding is that if the pool has at least one instance of SinglePool, then the singlePoolEvicted will be cleared twice.

I said ""It looks like lines 192 and 193 are not needed"" and I'm not correct, however, looks like to me it has some cases that the singlePoolEvicted can be cleaned many times.Â 

I'm uncertain about placing the cleanupEvicts within the SinglePool. It seems to me that the responsibility for cleaning the singlePoolEvicted should not lie with the SinglePool.

Is there a possibility of the cleanUp being called concurrently?

I'm not saying it is the problem, but if it is calling singlePoolEvicted.remove() concurrently, it has a chance of impacting the singlePoolEvicted.clear(). Make sense?

Â 
orpiske:1692589891:2023-08-21T11:51:31.242+0000:1692589891:2023-08-21T11:51:31.242+0000:Hi, just sharing some updates from my initial investigation (this is a WIP, so read the comments with a grain of salt). 

??With this, my understanding is that if the pool has at least one instance of SinglePool, then the singlePoolEvicted will be cleared twice.??

Yes, it is being called twice. Though, in this case, once it hits the stop, it is NO-OP because the service should have been stopped already (nonetheless, that's still wrong in my book). 

 !called-twice-2.png!  !called-twice-1.png! 


??I said ""It looks like lines 192 and 193 are not needed"" and I'm not correct, however, looks like to me it has some cases that the singlePoolEvicted can be cleaned many times. ??

It could be the case, actually. 


??Is there a possibility of the cleanUp being called concurrently???

There is! this problem, actually, happens under high load / high concurrency. So, it could be the case. 


??Im not saying it is the problem, but if it is calling singlePoolEvicted.remove() concurrently, it has a chance of impacting the singlePoolEvicted.clear(). Make sense???

Yeah, indeed, it makes sense and I think it's worth investigating. 
orpiske:1692697847:2023-08-22T17:50:47.716+0000:1692697847:2023-08-22T17:50:47.716+0000:This is actually caused by CAMEL-19487. This is only happening on the routing-slip with bean test and only on 3.20.6 and 3.21.0 (both of which are missing the patches for the issue).

Therefore, closing as a duplicate. "
0,CAMEL-19758,Bug,Minor,"3.18.8, 3.21.0, 4.0.0","3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Luigi De Masi,Luigi De Masi,0,1,2023-08-17 14:16:06+00:00,2023-08-25 04:58:32+00:00,"An IllegalReferenceCountExceptionis  generated by ""netty-http"" in proxy mode: ""io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1"" for every success request and It's classified as a WARN in the logs:




2023-08-10 13:01:02.468  WARN 77068 --- [ClientTCPWorker] ache.camel.support.UnitOfWorkHelper : Exception occurred during onCompletion. This exception will be ignored. io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1     at io.netty.util.internal.ReferenceCountUpdater.toLiveRealRefCnt(ReferenceCountUpdater.java:83) ~[netty-common-4.1.94.Final.jar:4.1.94.Final]     at io.netty.util.internal.ReferenceCountUpdater.release(ReferenceCountUpdater.java:148) ~[netty-common-4.1.94.Final.jar:4.1.94.Final]     at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:101) ~[netty-buffer-4.1.94.Final.jar:4.1.94.Final]     at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:90) ~[netty-common-4.1.94.Final.jar:4.1.94.Final]",
0,CAMEL-19757,Task,Minor,None,4.2.0,"

help-wanted

",Resolved,Fixed,4.2.0,Unassigned,Claus Ibsen,0,2,2023-08-17 05:28:12+00:00,2023-10-07 07:49:03+00:00,"To make this like we have for camel-spring-boot-examples, and this makes it easy to do full test by just run from root: mvn clean install


It also allows to build a table that lists all the examples in the readme file.","ayyanar:1696579199:2023-10-06T15:59:59.817+0000:1696579199:2023-10-06T15:59:59.817+0000:[~davsclaus]Â  I have made the changes and raised the PR . Please have a look
davsclaus:1696636143:2023-10-07T07:49:03.048+0000:1696636143:2023-10-07T07:49:03.048+0000:Thanks for the help"
0,CAMEL-19756,Bug,Minor,"3.21.0, 4.0.0",None,"
None
",Resolved,Fixed,"3.21.1, 3.22.0, 4.0.1, 4.1.0",Unassigned,Karsten,0,2,2023-08-16 19:33:29+00:00,2023-08-17 15:16:39+00:00,When producer is initialized for ThrowError operation the processor in the component is not set and leads to an exception when the operation is executed.,davsclaus:1692217926:2023-08-17T04:32:06.016+0000:1692217926:2023-08-17T04:32:06.016+0000:You are welcome to send a PR
0,CAMEL-19755,New Feature,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Craig Ziesman,Craig Ziesman,0,1,2023-08-16 17:16:18+00:00,2023-09-12 06:24:28+00:00,"Thymeleaf is a powerful and easy to use templating engine, and it is often used with Spring. It would be helpful to have a Camel component that directly supports the usage of Thymeleaf templates.",
0,CAMEL-19754,Task,Major,None,None,"
None
",Resolved,Fixed,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-08-16 12:13:43+00:00,2023-08-21 14:53:48+00:00,"As of Camel 4, the code won't even run on anything older than 17, therefore checking for older Java versions may be unnecessary.",orpiske:1692600828:2023-08-21T14:53:48.732+0000:1692600828:2023-08-21T14:53:48.732+0000:Fixed with the linked PR.
0,CAMEL-19753,Task,Minor,3.20.6,,"
None
",Resolved,Information Provided,None,Nicolas Filotto,Xilai Dai,0,2,2023-08-16 10:43:46+00:00,2023-08-31 09:36:02+00:00,"Given a simple route:




	    from(""timer:cTimer_1"" + ""?period="" + 1 + ""&repeatCount="" + 200 + ""&delay="" + 100)
				.setHeader(org.apache.camel.Exchange.HTTP_PATH, simple(""""))
				.setHeader(org.apache.camel.Exchange.HTTP_METHOD, constant(""GET""))
				.setHeader(org.apache.camel.Exchange.ACCEPT_CONTENT_TYPE, constant(""application/json""))
				.inOut(""cxfrs://"" + ""https://localhost:9001/services/B"" + ""?providers=#providers""
								+ ""&loggingFeatureEnabled=false"")
				.to(""log:cxfrs_eval_demo_service.cLog_1"" + ""?level=WARN"" + ""&showAll="" + true + ""&multiline="" + true); 




there are many TLS connections opened when running this route.


whereas, the camel-http as a provider works as expected (only few TLS connections opened as expected)




	from(""timer:cTimer_2"" + ""?period="" + 1 + ""&repeatCount="" + 200 + ""&delay="" + 100)
				.setHeader(""CamelHttpMethod"", constant(""GET""))
				.to(""https://localhost:9001/services/B"")
				.to(""log:cxfrs_eval_demo_service.cLog_1"" + ""?level=WARN"" + ""&showAll="" + true + ""&multiline="" + true);  




Attached test-cxfrs-https.zip , test-server.zip for easily reproduce the issue.","nfilotto:1693445558:2023-08-31T09:32:38.578+0000:1693445558:2023-08-31T09:32:38.578+0000:Hi [~xldai], thank you very much for the ticket and the reproducer. By default in CXF, if no socket factory has been configured, a new socket factory is created for each request, preventing the keep alive cache of the HTTP client of the JDK from reusing existing connections.

To fix the problem, you need to configure {{SSLContextParameters}} in your route, something like:

{code:java}
KeyStoreParameters ksp = new KeyStoreParameters();
ksp.setResource(""file://Users/nicolasfilotto/test/CAMEL-19753/test-cxfrs-https/truststore.jks"");
ksp.setPassword(""cspass"");
ksp.setType(""JKS"");

KeyManagersParameters kmp = new KeyManagersParameters();
kmp.setKeyPassword(""cspass"");
kmp.setKeyStore(ksp);

TrustManagersParameters tmp = new TrustManagersParameters();
tmp.setKeyStore(ksp);

SSLContextParameters sslContextParameters = new SSLContextParameters();
        sslContextParameters.setKeyManagers(kmp);
        sslContextParameters.setTrustManagers(tmp);
        registry.put(""sslContextParameters"", sslContextParameters);

...
.inOut(""cxfrs://"" + ""https://localhost:9001/services/B"" + ""?providers=#providers""
								+ ""&sslContextParameters=#sslContextParameters&loggingFeatureEnabled=false"")
...
{code}

By configuring SSL context parameters, you ensure that CXF will use the same socket factory so the keep alive cache can retrieve existing connections.
nfilotto:1693445762:2023-08-31T09:36:02.488+0000:1693445762:2023-08-31T09:36:02.488+0000:Alternatively, you can configure it in pure XML in your Spring Boot configuration file as next:

{code:java}

<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xmlns:context=""http://www.springframework.org/schema/context""
       xmlns:sec=""http://cxf.apache.org/configuration/security""
       xmlns:http=""http://cxf.apache.org/transports/http/configuration""       
       xsi:schemaLocation=""
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
           http://cxf.apache.org/configuration/security http://cxf.apache.org/schemas/configuration/security.xsd
           http://cxf.apache.org/transports/http/configuration http://cxf.apache.org/schemas/configuration/http-conf.xsd"">
...
    <camel:sslContextParameters id=""sslContextParameters"">
        <camel:trustManagers>
            <camel:keyStore type=""JKS"" resource=""file://Users/nicolasfilotto/test/CAMEL-19753/test-cxfrs-https/truststore.jks""
                      password=""cspass""/>
        </camel:trustManagers>
    </camel:sslContextParameters>
...
{code}

"
0,CAMEL-19752,Improvement,Major,None,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.1, 4.1.0",Nicolas Filotto,Lukas Lowinger,0,2,2023-08-16 10:30:39+00:00,2023-09-02 08:18:52+00:00,"I've noticed that some elasticsearch operations needs another key element (""doc"") added to the map before it is passed to camel route.Â 


It can be seen on many places in the camel tests - eg. https://github.com/apache/camel/blob/main/components/camel-elasticsearch/src/test/java/org/apache/camel/component/es/integration/ElasticsearchGetSearchDeleteExistsUpdateIT.java#L280


This is regression to previous camel-elasticsearch-rest component and could be tricky for users to figure it out (as i had to as well).


Â 


It would be nice to document it and also provide some example with its usage.","llowinge:1692153147:2023-08-16T10:32:27.092+0000:1692153147:2023-08-16T10:32:27.092+0000:[~essobedo] I've seen you've created the tests and maybe you have better insight into it. Do you think documenting it would be valuable ? Would you be able to provide some example + document it little bit ? Thank you in advance, it would really help with transition from camel-elasticsearch-rest.
nfilotto:1693471718:2023-08-31T16:48:38.137+0000:1693471718:2023-08-31T16:48:38.137+0000:I understand your point of view but the fact is that the new client used behind is more low level than the one used by the legacy component. The client is one-to-one mapping with Elastic Rest API so you can do very low-level operations. I will improve the doc to explain it and propose a new component option to switch to the legacy mode, would it be good enough for you?
llowinge:1693542112:2023-09-01T12:21:52.056+0000:1693542112:2023-09-01T12:21:52.056+0000:[~nfilotto] Yes, definitely. Thank you for your effort !Â 
nfilotto:1693545898:2023-09-01T13:24:58.028+0000:1693545898:2023-09-01T13:24:58.028+0000:It appears that only the update operation is really affected by this problem. The test with a bulk operation that you are referring to is actually incorrect, I will fix it too within the context of this ticket.
nfilotto:1693612985:2023-09-02T08:03:05.618+0000:1693612985:2023-09-02T08:03:05.618+0000:The corresponding PRs:

* 3.20 https://github.com/apache/camel/pull/11280
* 3.21 https://github.com/apache/camel/pull/11286
* 3.22 https://github.com/apache/camel/pull/11287
* 4.0 https://github.com/apache/camel/pull/11288
* 4.1 https://github.com/apache/camel/pull/11289"
0,CAMEL-19751,Task,Major,None,"3.20.7, 3.22.0, 4.0.1, 4.1.0","
None
",Resolved,Fixed,"3.20.7, 3.22.0, 4.0.1, 4.1.0",Unassigned,Otavio Rodolfo Piske,0,1,2023-08-16 09:34:59+00:00,2023-08-21 14:54:06+00:00,"The camel-xchange tests keep hitting the address https://fapi.binance.com/fapi/v1/exchangeInfo which both abuse the owner of the address and contribute to their flakiness. 


To reproduce: 
1. Run the tests locally: they are likely to pass
2. Block the binance API address (see below)
3. Repeat the tests: they should fail with ""org.knowm.xchange.exceptions.ExchangeException: Failed to initialize: Connection refused""


To block the address, you can add the following line to /etc/hosts:




127.0.0.1       fapi.binance.com",orpiske:1692600846:2023-08-21T14:54:06.047+0000:1692600846:2023-08-21T14:54:06.047+0000:Fixed with the linked PR
0,CAMEL-19750,Task,Major,None,,"
None
",Closed,Feedback Received,None,Unassigned,Shreya Kajbaje,0,2,2023-08-16 05:44:51+00:00,2023-08-16 09:03:04+00:00,"Support for Power architecture (ppc64le) for camel-kamelets


What is IBM Power architecture?
It is a RISC architecture and IBM has recently made its ISA (Instruction Set Architecture) opensource and in doing so, they have significantly contributed back to the opensource community at large. Many of the pioneers of banking and HPC industries today run on ppc64le architecture.


As an ongoing effort to enable open-source projects where Power architecture can add value, we are trying to enable camel-kamelets on Power.","davsclaus:1692141709:2023-08-16T07:21:49.678+0000:1692141709:2023-08-16T07:21:49.678+0000:The camel-kamelets project has its own issue tracker on GH
https://github.com/apache/camel-kamelets/issues
"
0,CAMEL-19749,New Feature,Major,None,4.4.0,"
None
",Open,Unresolved,4.4.0,Claus Ibsen,Claus Ibsen,2,3,2023-08-15 19:41:30+00:00,2024-01-19 12:29:21+00:00,"Users that need to do message transformation in Camel routes may find themselves having to store data in headers / claim-check / exchange properties from multiple sources before they have all data needed to build a response message.


Today users are doing this in different ways.


However we may want to introduce variables that users can name and store the data, then they can do this more intuitive, like they would do in a programming language.




from(kafka(""topic1"").setVar(""customer""))
   .to(""sql:get-order-by-cust?id=${var.customer.id}"").setVar(""order"")
    .transform().simple( ' Thank you ${var.customer.name} for ordering ${var.order.item}'))




Then you have 2 variables



customer
order



Then the variable customer can be used anywhere in Camel like it was a header with ${header.xxx} but with ${var.customer} in the simple language etc.


This proposal needs some more though and design/prototype.


But this should be done in a way that does not affect regular Camel DSL as it is, but with variables then results during routing that usually will be override current message body / headers, are stored in variables, that the user assign a name and therefore better can understand what the data the variable contains are.","skin27:1702454863:2023-12-13T16:07:43.119+0000:1702454863:2023-12-13T16:07:43.119+0000:As part of the refinement, I can share my experience with vars. Our Camel based system uses three kind of types:

1. Headers
2. Properties
3. Variables
Â 
Functional explanation can be found here: [https://academy.dovetail.world/docs/guides/references/using_variables_in_dovetail]

Technical explanation:

1. Headers: We use Camel headers to set metadata (or sometimes the whole body) on the exchange/message to use later within the route. Sometimes we use message properties as these are not sent to external systems (for example by the HTTP components).
2. Properties: In our case, properties are static variables that are evaluated before we create the Camel route. They are final and can't be changed during runtime of the route.
3. Variables.Â  We also have the concept âvariablesâ those are data values that can be used independently of the exchange/camelcontext. These are so-called global variables (we also call them tenant variables). In our case, these variables are stored within MongoDB. This means route A can set a variable and route B can use that variable, or route A sets the variables on a condition and the next exchange uses the variable that already is set. Variables are mutable and global on our system.

Based on our concepts, within Camel you can think of the following aspects:

1. Scope: (message, route, routeGroup, camelcontext)
2. Store: (memory, cache, database)
3. Immutability: (Can a variable be changed after initialization, or is it final?)
4. Data type: In our case we always use text (String object) for variables, but Camel may use different data types.
5. Visibility (Access Modifiers): Maybe you can set the scope with help of modifiers (is it private or public)?

The syntax in the Camel DSL and Simple language were already mentioned.

Hope this gave some feedback on how we are currently use variables together with Camel.






Â 

Â 

Â 
davsclaus:1703724491:2023-12-28T08:48:11.665+0000:1703724491:2023-12-28T08:48:11.665+0000:Thanks Raymond for the insights of what you do in your product.
davsclaus:1703724902:2023-12-28T08:55:02.892+0000:1703995669:2023-12-31T12:07:49.007+0000:We should have a basic implementation first:

- scoped to exchange lifecycle (aka request scope) *DONE*
- api on exchange *DONE*
- in-memory only *DONE*
- DSL setVariable *DONE*
- DSL removeVariable *DONE*
- mock component *DONE*
- @Variable for bean parameter binding *DONE*
- expression builder *DONE*
- Simple language ${variable.xxx} ${variables} *DONE*
- common EIPs and data formats that return result to message body should allow to store result to var instead
- templated components (velocity, freemarker, etc) to have access to variables *DONE*
- log EIP and component *DONE*
- tracing
- debugging
- camel-jbang *DONE*
- documentation *DONE*
- example *DONE*
- SPI for flexibility in the future (store, scope) *DONE*
- experimental DSLs such as groovy, kotlin, js *NO NEED*
- simple language (scope) *DONE*
- setVar/removeVar (scope) *DONE*
- dev console *DONE*
- camel-main pre configure global variables on startup *DONE*
- spring-boot *DONE*

Should we use short name ""var"" or use long ""variable"" instead. Lets use long name to not confuse or clash with Java ""var""


skin27:1703737054:2023-12-28T12:17:34.717+0000:1703737054:2023-12-28T12:17:34.717+0000:+1 on using ""variable"" to not confuse it with Java's var. It's also in line with ""headers"" and ""properties"" (we also don't say 'prop' for example)
davsclaus:1703819190:2023-12-29T11:06:30.571+0000:1703819286:2023-12-29T11:08:06.774+0000:If we want to make setVariable use the current message body as the default value, then this is more tricky as expression definition based EIPs have a mandatory expression which we cannot make optional for XML DSL as this is how @XmlValue works with JAXB and its XSD generator. We have had this problem always.

So we then need to make setVariable special and this means that its more verbose if you need to set a variable from something else, such as

{code}
    <setVariable name=""myNumber"">
        <expression>
            <groovy>2 * 7</simple>
        </expression>
    </setVariable>
{code}

As opposed to

{code}
    <setVariable name=""myNumber"">
          <groovy>2 * 7</simple>
    </setVariable>
{code}
davsclaus:1703821179:2023-12-29T11:39:39.857+0000:1703821179:2023-12-29T11:39:39.857+0000:We are not making setVariable special so it works like all the other setXXX EIPs where you must set an expression. Then if you want the message body, then you need to do it

{code}
    <setVariable name=""myBody"">
       <simple>${body}</simple>
    </setVariable>
{code}
skin27:1703829083:2023-12-29T13:51:23.438+0000:1703829083:2023-12-29T13:51:23.438+0000:Seems to going forward nicely

I was wondering if it will also be possible to use alternative store for variables in this iteration? Or that it's planned for a next version/iteration?

The most flexible way would be to choose every component available for Camel that can be both producer/consumer. Alternative is to introduce an additional attribute if something can act as a store for variables or not (similar to components that can implement SSL or not). 

The default store for variables is in memory, if not set the store explicitly, but the user may get the choice to use other components. Basically, then Camel takes care to pass variable values between memory and a specific store (component).


*Syntax*

Here are some syntax ideas to use external endpoints for variables:

Option 1: Using inline


{code:java}
<routes>
Â  Â  <route>
Â  Â  Â  Â  <setVariable name=""myBody"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable> Â Â 
Â  Â  Â  Â  <setVariable name=""myBody2"" uri=""sql:insert into xxx?option1=value1"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable>
Â  Â  Â  Â  <getVariable uri=""sql:select from xxx?option1=value1""/>
Â  Â  Â  Â  <setVariable name=""myBody3"" uri=""ehcache:mycache?action=create"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable>
Â  Â  Â  Â  <getVariable name=""myBody2"" uri=""ehcache:mycache?action=read""/>
Â  Â  </route>
</routes> {code}

Option 2:Â Using inline

Â 
{code:java}
<routes>
Â  Â  <route>
Â  Â  Â  Â  <setVariable name=""myBody"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable> Â Â 
Â  Â  Â  Â  <setVariable name=""myBody2"">
Â  Â  Â  Â  Â  Â  <to uri=""sql:insert into xxx?option1=value1""/>
Â  Â  Â  Â  </setVariable>
Â  Â  Â  Â  <getVariable name=""myBody2"">
Â  Â  Â  Â  Â  Â  <to uri=""sql:select from xxx?option1=value1""/>
Â  Â  Â  Â  </getVariable>
Â  Â  Â  Â  <setVariable name=""myBody3"" strategy=""storeEhcachProcessor"">
Â  Â  Â  Â  Â  Â  <to ehcache:mycache?action=create/>
Â  Â  Â  Â  </setVariable>
Â  Â  Â  Â  <getVariable name=""myBody2"">
Â  Â  Â  Â  Â  Â  <to ehcache:mycache?action=read/>
Â  Â  Â  Â  </getVariable>
Â  Â  </route>
</routes>Â 
{code}
Â 

Option 3: Using strategies / processors

Â 
{code:java}
<routes>
Â  Â  <route>
Â  Â  Â  Â  <setVariable name=""myBody"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable> Â Â 
Â  Â  Â  Â  <setVariable name=""myBody2"" strategy=""storePostgressProcessor"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable>
Â  Â  Â  Â  <setVariable name=""myBody3"" strategy=""storeEhcachProcessor"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable>
Â  Â  </route>
</routes>Â 
{code}

Option 4: Using subroutes

Â 
{code:java}
<routes>
Â  Â  <route>
Â  Â  Â  Â  <setVariable name=""myBody"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable> Â Â 
Â  Â  Â  Â  <setVariable name=""myBody2"" route=""storeProgress"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable>
Â  Â  Â  Â  <setVariable name=""myBody3"" route=""postgress"">
Â  Â  Â  Â  Â  Â  <constant>someValue</constant>
Â  Â  Â  Â  </setVariable>
Â  Â  </route>
Â  Â  <route name=""insertProgress"">
Â  Â  Â  Â  <from uri=""direct:in"">
Â  Â  Â  Â  Â  Â <to uri=""sql:insert into xxx?option1=value1""/>
Â  Â  Â  Â  Â  Â <to uri=""direct:out""/>
Â  Â  </route>
Â  Â  <from uri=""direct:in"">
Â  Â  Â  Â <to ehcache:mycache?action=create/>
Â  Â  Â  Â <to uri=""direct:out""/>
Â  Â  </route>
</routes>Â Â 
{code}

Option 5: Using configuration

Something like restConfiguration where you configure the CRUD actions


<variableStores>
  <variableStore storeName=""postgress"">
     <set uri=""sql:insert into xxx?option1=value1""/>
     <get uri=""sql:select from xxx?option1=value1""/>
     <remove uri=""sql:delete from ?option1=value1""/>
  </variableStore>
  <variableStore storeName=""cache"">
    <set uri=""ehcache:mycache?action=create""/>
    <get uri=""ehcache:mycache?action=read""/>
    <remove uri=""ehcache:mycache?action=remove""/>
  </variableStore>
<variableStores>
<route>
    <setVariable name=""myBody"">
         <constant>someValue</constant>
   </setVariable>
Â     <setVariable name=""myBody2"" storeName=""postgress"">
         <constant>someValue</constant>
   </setVariable>
   <setVariable name=""myBody3"" storeName=""postgress"">
      <constant>someValue</constant>
 </setVariable>
</route> 

There are other syntax options to solve this, but these were a couple I could think of.
skin27:1703829297:2023-12-29T13:54:57.050+0000:1703829297:2023-12-29T13:54:57.050+0000:Also note, this maybe also be an interesting option for other memory intensive EIP's (like throttler) to move storage from memory to an external storage. In some cases, the latency/performance trade-off can be useful instead of keeping everything in memory.
davsclaus:1703833790:2023-12-29T15:09:50.992+0000:1703850694:2023-12-29T19:51:34.733+0000:I am working on adding variable repositories, so you can plugin custom stores. The name of the variable allows a prefix: which refers to the custom repository.

So you can then use ""acme:xxx"" to use your own repo.

Out of the box we have ""global"" for a single shared global that are in-memory only.
And without any prefix then they are private variables per exchange.

I am not sure if ""override"" variables makes any sense, eg to use ""xxx"" and then lookup on exchange first, and if not then lookup on global. But all of that can get complex and confusing, as it behaves differently whether a variable exists or not.

*DONE*

skin27:1703837468:2023-12-29T16:11:08.557+0000:1703837499:2023-12-29T16:11:39.830+0000:OK, thanks for the update. I think that it will cover most of the use cases.

Override would indeed make it confusing, better to keep it straightforward.
davsclaus:1703844757:2023-12-29T18:12:37.080+0000:1703850681:2023-12-29T19:51:21.208+0000:The removeVariable EIPs was copied as we have for removeHeader but it may be overkill with removing by pattern and whatnot. 

By default variables are exchange scoped so you dont need to remove anything.
And if you want to remove a variable, then its likely you just remove a single variable by its id. 

*DONE*

davsclaus:1703924536:2023-12-30T16:22:16.392+0000:1703924536:2023-12-30T16:22:16.392+0000:A little example at
https://github.com/apache/camel-kamelets-examples/tree/main/jbang/variables
davsclaus:1703924728:2023-12-30T16:25:28.718+0000:1703924728:2023-12-30T16:25:28.718+0000:You can implement custom repository for your variables where you can use a database to keep them persistent. Or a clustetered memory cache like redis or infinispan etc. This is the same principle in other parts in Camel with an xxxRepository interface that allows end users to plugin their own.




davsclaus:1705569774:2024-01-18T17:22:54.655+0000:1705627413:2024-01-19T09:23:33.902+0000:TODO: get variable should auto reset stream cached so its easy to use *DONE*
davsclaus:1705635759:2024-01-19T11:42:39.440+0000:1705635759:2024-01-19T11:42:39.440+0000:TODO: EIPs to have direct support for using variables
TODO: EIP from
TODO: EIP to / toD
TODO: EIP unmarshal / marshal
TODO: EIP transform

Should we use Message as the object, or only the message body? If using Message we have access to both body and headers, but makes the variable a little bit hard to use, as you then need to specify if you want the body, or a specific header / headers.


davsclaus:1705635805:2024-01-19T11:43:25.503+0000:1705635805:2024-01-19T11:43:25.503+0000:EIP from

{code}
- from:
    uri: ""direct:start""
    variable: ""myKey""
    steps:
      - transform:
          simple: ""Bye ${body}""
      - to: ""mock:foo""
      - setBody:
          simple: ""${variable:myKey}""
      - to: ""mock:result""
{code}
davsclaus:1705638561:2024-01-19T12:29:21.002+0000:1705638561:2024-01-19T12:29:21.002+0000:TODO: variable as a language then you can do

{code}
- setBody:
    variable: myVar
{code}

Currently this can only be done via simple

{code}
- setBody:
    simple: ""${variable:myVar}""
{code}
"
0,CAMEL-19748,Task,Major,4.0.0,None,"

core

",Resolved,Fixed,4.1.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-08-15 14:27:03+00:00,2023-08-21 14:57:30+00:00,Catching Throwables can be dangerous as it can also catch internal JVM errors and other problems that applications should not try to catch.,orpiske:1692601037:2023-08-21T14:57:17.854+0000:1692601037:2023-08-21T14:57:17.854+0000:Fixed with the linked PR.
0,CAMEL-19747,New Feature,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-15 13:01:47+00:00,2023-08-16 18:48:00+00:00,No Desc,
0,CAMEL-19746,Task,Minor,None,4.4.0,"
None
",Resolved,Fixed,4.4.0,Claus Ibsen,Lucia DrozdovÃ¡,0,1,2023-08-15 09:08:30+00:00,2023-12-22 09:35:27+00:00,"There are lot of missing code snippets in camel-mybatis documentation :



https://camel.apache.org/components/3.21.x/mybatis-component.html#_using_statementtype_for_better_control_of_mybatis

missing code after So for instance if we want to route to an MyBatis endpoint in which the IN body contains parameters to aÂ SELECTÂ statement we can do:Â 
missing code after We can do the same for some of the other operations, such as SelectList
missing code after And the same for UPDATE, where we can send an Account object as the IN body to MyBatis:


https://camel.apache.org/components/3.21.x/mybatis-component.html#_using_insertlist_statementtype

missing code after To use this, you need to use the <foreach> in the mapper XML file. For example as shown below:
missing code after Then you can insert multiple rows, by sending a Camel message to theÂ mybatisÂ endpoint which uses theÂ InsertListÂ statement type, as shown below:


https://camel.apache.org/components/3.21.x/mybatis-component.html#_using_onconsume

missing code after And the statements in the sqlmap file:{}",
0,CAMEL-19745,Task,Major,4.0.0,,"
None
",Open,Unresolved,None,Unassigned,Claus Ibsen,0,1,2023-08-15 07:09:35+00:00,2023-08-16 04:28:17+00:00,"[INFO] -----------------< org.apache.camel:camel-cxf-soap >------------------
[INFO] Building Camel :: CXF :: SOAP 4.1.0-SNAPSHOT                       [5/9]
[INFO]   from camel-cxf-soap/pom.xml
[INFO] -------------------------------[ jar ]--------------------------------
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.pom (8.5 kB at 11 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-parent/4.2.0/opensaml-parent-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-parent/4.2.0/opensaml-parent-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-parent/4.2.0/opensaml-parent-4.2.0.pom (7.4 kB at 16 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.pom (3.1 kB at 7.0 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.pom (3.1 kB at 7.1 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.pom (3.6 kB at 7.4 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.pom (4.2 kB at 9.1 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.pom (2.8 kB at 6.1 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.pom (3.0 kB at 6.7 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.pom (4.2 kB at 9.3 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.pom (4.1 kB at 9.2 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.pom (2.8 kB at 6.1 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.pom (1.6 kB at 3.6 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.pom (2.9 kB at 6.3 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-messaging-api/4.2.0/opensaml-messaging-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-messaging-api/4.2.0/opensaml-messaging-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-messaging-api/4.2.0/opensaml-messaging-api-4.2.0.pom (2.3 kB at 5.1 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-soap-impl/4.2.0/opensaml-soap-impl-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-impl/4.2.0/opensaml-soap-impl-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-impl/4.2.0/opensaml-soap-impl-4.2.0.pom (4.2 kB at 9.3 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-storage-api/4.2.0/opensaml-storage-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-storage-api/4.2.0/opensaml-storage-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-storage-api/4.2.0/opensaml-storage-api-4.2.0.pom (1.7 kB at 3.8 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.pom
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.pom
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.pom (2.0 kB at 4.5 kB/s)
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.jar
Downloading from central: https://repo1.maven.org/maven2/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-impl/4.2.0/opensaml-saml-impl-4.2.0.jar (1.1 MB at 961 kB/s)
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-profile-api/4.2.0/opensaml-profile-api-4.2.0.jar (33 kB at 66 kB/s)
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-soap-api/4.2.0/opensaml-soap-api-4.2.0.jar (173 kB at 171 kB/s)
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-impl/4.2.0/opensaml-security-impl-4.2.0.jar (116 kB at 107 kB/s)
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-security-api/4.2.0/opensaml-security-api-4.2.0.jar (114 kB at 105 kB/s)
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-core/4.2.0/opensaml-core-4.2.0.jar (186 kB at 171 kB/s)
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.jar
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-saml-api/4.2.0/opensaml-saml-api-4.2.0.jar (469 kB at 347 kB/s)
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-api/4.2.0/opensaml-xmlsec-api-4.2.0.jar (247 kB at 160 kB/s)
Downloading from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.jar
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-api/4.2.0/opensaml-xacml-api-4.2.0.jar (46 kB at 29 kB/s)
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-impl/4.2.0/opensaml-xacml-impl-4.2.0.jar (197 kB at 115 kB/s)
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xmlsec-impl/4.2.0/opensaml-xmlsec-impl-4.2.0.jar (387 kB at 210 kB/s)
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-impl/4.2.0/opensaml-xacml-saml-impl-4.2.0.jar (26 kB at 14 kB/s)
Downloaded from B_shibboleth: https://build.shibboleth.net/nexus/content/groups/public/org/opensaml/opensaml-xacml-saml-api/4.2.0/opensaml-xacml-saml-api-4.2.0.jar (8.6 kB at 4.2 kB/s)",
0,CAMEL-19744,Bug,Major,3.21.0,"3.21.1, 3.22.0","
None
",Resolved,Fixed,"3.21.1, 3.22.0",Claus Ibsen,Claus Ibsen,0,1,2023-08-14 18:56:30+00:00,2023-08-18 11:20:00+00:00,https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Problem.20when.20retrieving.20.20messages.20from.20activeMQ,
0,CAMEL-19743,Dependency upgrade,Minor,3.21.0,3.22.0,"
None
",Resolved,Fixed,3.22.0,Claus Ibsen,Vladyslav,0,2,2023-08-14 16:39:52+00:00,2023-11-22 20:17:40+00:00,"Good morning,


CVE-2023-2976 vulnerability was found inÂ  Guava which is used GRPC which is used in Camel Opentelemetry


Guava fixed the issue and GRPC upgraded the vulnerability and eliminated the issue in version 1.57


Can you please upgrade GRPC to 1.57 version in Camel Opentelemetry to get rid of the vulnerability
Thanks","davsclaus:1692002552:2023-08-14T16:42:32.485+0000:1692002552:2023-08-14T16:42:32.485+0000:You are welcome to send a PR for 3.21.x or camel-3.x branch
avgona:1692006092:2023-08-14T17:41:32.758+0000:1692006092:2023-08-14T17:41:32.758+0000:can I have a link to the project please? I found only camel quarkus opentelemetry
davsclaus:1692008275:2023-08-14T18:17:55.183+0000:1692008275:2023-08-14T18:17:55.183+0000:https://github.com/apache/camel
davsclaus:1692008292:2023-08-14T18:18:12.784+0000:1692008292:2023-08-14T18:18:12.784+0000:See also
https://camel.apache.org/community/contributing/
davsclaus:1692845637:2023-08-24T10:53:57.633+0000:1692845637:2023-08-24T10:53:57.633+0000:You can always just add what version of guava you want to use in your pom.xml and maven will use that instead of what comes with grpc"
0,CAMEL-19712,Task,Major,4.0.0,4.1.0,"

easy
help-wanted

",Resolved,Fixed,4.1.0,Unassigned,Otavio Rodolfo Piske,0,1,2023-08-04 08:52:02+00:00,2023-08-10 11:16:07+00:00,"Our component camel-test-junit5 is incompatible with JUnit 5.10.x: 




[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.11.0:compile (default-compile) on project camel-test-junit5: Compilation failure
[ERROR] /Users/opiske/code/java/camel/components/camel-test/camel-test-junit5/src/main/java/org/apache/camel/test/junit5/params/ParameterizedExtension.java:[139,99] incompatible types: java.lang.Class<capture#1 of ?> cannot be converted to org.junit.jupiter.api.extension.ParameterContext




We should adapt this code to the new version of JUnit",orpiske:1691637367:2023-08-10T11:16:07.164+0000:1691637367:2023-08-10T11:16:07.164+0000:Resolved with the linked PR.
0,CAMEL-19711,Task,Major,None,None,"
None
",Resolved,Fixed,4.1.0,Unassigned,Otavio Rodolfo Piske,0,1,2023-08-04 08:49:42+00:00,2023-08-10 11:16:42+00:00,"We are currently using JUnit 5.9, but 5.10.0 is already available.",orpiske:1691637389:2023-08-10T11:16:29.558+0000:1691637389:2023-08-10T11:16:29.558+0000:Resolved with https://github.com/apache/camel/pull/11027
0,CAMEL-19710,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-03 17:31:01+00:00,2023-08-04 04:33:57+00:00,"camel.jbang.gav = com.foo:blue:1.0


Then when you do camel run foo.java and foo has no package then we should run this with package com.foo, because that is the package it would use when exported.


Then camel-jbang run and real exported project are the same. This avoid strange issues for end users.",
0,CAMEL-19709,Improvement,Minor,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2023-08-03 14:24:03+00:00,2023-08-09 07:16:46+00:00,"As today the YAML DSL Json schema is very minimal and does not include any description or title for properties. 
As the Json schema is also useful for tooling to provide code assistance in addition to validation, it would be nice to have such information included in the schema by default.","davsclaus:1691053646:2023-08-03T17:07:26.016+0000:1691053646:2023-08-03T17:07:26.016+0000:http://json-schema.org/understanding-json-schema/reference/generic.html
davsclaus:1691470308:2023-08-08T12:51:48.250+0000:1691470308:2023-08-08T12:51:48.250+0000:Okay PR merged - if you have anything then you need asap, or we move that to 4.1
davsclaus:1691536606:2023-08-09T07:16:46.539+0000:1691536606:2023-08-09T07:16:46.539+0000:More work can be done in 4.1 onwards."
0,CAMEL-19708,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,1,2,2023-08-03 14:17:33+00:00,2023-08-06 06:45:09+00:00,"If you have files named


xxx.jkube.yml or xxx.jkube.yaml then they should be moved to src/main/jkube instead of src/main/resources",davsclaus:1691273611:2023-08-06T06:13:31.384+0000:1691273611:2023-08-06T06:13:31.384+0000:https://eclipse.dev/jkube/docs/kubernetes-maven-plugin/#_resource_fragments
0,CAMEL-19707,Improvement,Minor,4.0-RC2,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,Philippe Soares,6,4,2023-08-03 13:52:59+00:00,2023-10-23 10:04:41+00:00,"When a route is configured to upload files to S3 using multipart, the upload fails for files with zero length with the following stack trace:




08:58:19.315 [Camel (camel-1) thread #3 - seda://mychannel] WARN  o.a.c.component.seda.SedaConsumer - Error processing exchange. Exchange[2980AEE3A04EBAE-000000000000001D]. Caused by: [software.amazon.awssdk.services.s3.model.S3Exception - The XML you provided was not well-formed or did not validate against our published schema (Service: S3, Status Code: 400, Request ID: JTV2BKF1Z2JXAXMM, Extended Request ID: unKlvF+b5nZtUxqdH8Lg2fcTYCswasH/WHc8rRmKnY5cGVVp8J9vbPKX8v2o09aebAjLvoNLcV0=)]
software.amazon.awssdk.services.s3.model.S3Exception: The XML you provided was not well-formed or did not validate against our published schema (Service: S3, Status Code: 400, Request ID: JTV2BKF1Z2JXAXMM, Extended Request ID: unKlvF+b5nZtUxqdH8Lg2fcTYCswasH/WHc8rRmKnY5cGVVp8J9vbPKX8v2o09aebAjLvoNLcV0=)
    at software.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handleErrorResponse(AwsXmlPredicatedResponseHandler.java:156)
    at software.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handleResponse(AwsXmlPredicatedResponseHandler.java:108)
    at software.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handle(AwsXmlPredicatedResponseHandler.java:85)
    at software.amazon.awssdk.protocols.xml.internal.unmarshall.AwsXmlPredicatedResponseHandler.handle(AwsXmlPredicatedResponseHandler.java:43)
    at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler$Crc32ValidationResponseHandler.handle(AwsSyncClientHandler.java:95)
    at software.amazon.awssdk.core.internal.handler.BaseClientHandler.lambda$successTransformationResponseHandler$7(BaseClientHandler.java:270)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.HandleResponseStage.execute(HandleResponseStage.java:40)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.HandleResponseStage.execute(HandleResponseStage.java:30)
    at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(ApiCallAttemptTimeoutTrackingStage.java:72)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptTimeoutTrackingStage.execute(ApiCallAttemptTimeoutTrackingStage.java:42)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(TimeoutExceptionHandlingStage.java:78)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.TimeoutExceptionHandlingStage.execute(TimeoutExceptionHandlingStage.java:40)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(ApiCallAttemptMetricCollectionStage.java:52)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallAttemptMetricCollectionStage.execute(ApiCallAttemptMetricCollectionStage.java:37)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:81)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.RetryableStage.execute(RetryableStage.java:36)
    at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
    at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:56)
    at software.amazon.awssdk.core.internal.http.StreamManagingStage.execute(StreamManagingStage.java:36)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.executeWithTimer(ApiCallTimeoutTrackingStage.java:80)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:60)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallTimeoutTrackingStage.execute(ApiCallTimeoutTrackingStage.java:42)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(ApiCallMetricCollectionStage.java:48)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ApiCallMetricCollectionStage.execute(ApiCallMetricCollectionStage.java:31)
    at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
    at software.amazon.awssdk.core.internal.http.pipeline.RequestPipelineBuilder$ComposingRequestPipelineStage.execute(RequestPipelineBuilder.java:206)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:37)
    at software.amazon.awssdk.core.internal.http.pipeline.stages.ExecutionFailureExceptionReportingStage.execute(ExecutionFailureExceptionReportingStage.java:26)
    at software.amazon.awssdk.core.internal.http.AmazonSyncHttpClient$RequestExecutionBuilderImpl.execute(AmazonSyncHttpClient.java:193)
    at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.invoke(BaseSyncClientHandler.java:103)
    at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.doExecute(BaseSyncClientHandler.java:171)
    at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.lambda$execute$1(BaseSyncClientHandler.java:82)
    at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.measureApiCallSuccess(BaseSyncClientHandler.java:179)
    at software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:76)
    at software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)
    at software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:56)
    at software.amazon.awssdk.services.s3.DefaultS3Client.completeMultipartUpload(DefaultS3Client.java:639)
    at org.apache.camel.component.aws2.s3.AWS2S3Producer.processMultiPart(AWS2S3Producer.java:237)
    at org.apache.camel.component.aws2.s3.AWS2S3Producer.process(AWS2S3Producer.java:95)
    at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:66)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:172)
    at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:475)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.executeReactiveWork(DefaultReactiveExecutor.java:196)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:164)
    at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:163)
    at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:379)
    at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:267)
    at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:186)
    at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:129)
    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
    at java.base/java.lang.Thread.run(Thread.java:833) 



Specifically, this loop is skipped: https://github.com/Talend/apache-camel/blob/fe9484bf5236f7af665c35cc7ed29527def8fe48/components/camel-aws/camel-aws2-s3/src/main/java/org/apache/camel/component/aws2/s3/AWS2S3Producer.java#L209


My aws2-s3 component is configured as follows in a springboot application:




camel:
Â  component:
Â  Â  aws2-s3:
Â  Â  Â  use-default-credentials-provider: true
Â  Â  Â  multi-part-upload: true
Â  Â  Â  part-size: 67108864","davsclaus:1691043634:2023-08-03T14:20:34.683+0000:1691043634:2023-08-03T14:20:34.683+0000:Why are you uploading empty files ?
psoares1704:1691048441:2023-08-03T15:40:41.603+0000:1691048441:2023-08-03T15:40:41.603+0000:We use robots that output experimental datasets. Some files are up to 150Gb, some are ""marker files"" used by other processes to decide on the ""state"" of the dataset. I need to upload all of them, including the marker files, and adding steps to manually check for the size of the files seems counter intuitive...Â 
I'd have something like:


{code:java}
  Â  Â  - choice:
Â  Â  Â  Â  Â  when:
Â  Â  Â  Â  Â  Â  - expression:
Â  Â  Â  Â  Â  Â  Â  Â  simple: ""${header.AWS2S3Constants.CONTENT_LENGTH} > MULTIPART_LIMIT""
Â  Â  Â  Â  Â  Â  Â  steps:
Â  Â  Â  Â  Â  Â  Â  Â  - to: ""aws2-s3://test-bucket?multiPartUpload=true&partSize=10485760""
Â  Â  Â  Â  Â  otherwise:
Â  Â  Â  Â  Â  Â  steps:
Â  Â  Â  Â  Â  Â  Â  - to: ""aws2-s3://test-bucket"" {code}
This just seems to me like logic the component should handle on its own.
psoares1704:1691063320:2023-08-03T19:48:40.640+0000:1691063320:2023-08-03T19:48:40.640+0000:I added a minimal example that reproduces the issue here: https://github.com/psoares/camel-19707
davsclaus:1691492731:2023-08-08T19:05:31.439+0000:1691492731:2023-08-08T19:05:31.439+0000:Are you discussing 2 things

- zero length files
- very large files with content-length > multipart-limit

And what are those limits?

In your example you have
    - to: aws2-s3://my-data?autoCreateBucket=true&multiPartUpload=true&partSize=10485760&region=us-west-2

I would have thought it would work for the big files also, and that you are asking for it to support zero length files also
psoares1704:1694085059:2023-09-07T19:10:59.981+0000:1694085059:2023-09-07T19:10:59.981+0000:Sorry for the delay. I hadn't seen the notification.

Indeed I think the component should be clever enough to do both:
1/ Upload zero length files through a ""regular"" upload, just like any file which has a size below multipart-limit

2/ Switch to multipart uploads if file size > multipart-limit"
0,CAMEL-19706,Task,Major,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,2,2023-08-03 13:09:29+00:00,2023-08-04 15:41:14+00:00,"The test container providing support for XMPP tests is very outdated, lack support for health checks and is flaky. 


Ideally, we should rework the way this test container work so that it doesn't make the tests unstable.


Lastly, it is also missing support for ARM and other platforms we use, which reduce our test coverage.","jainhitesh9998:1691054879:2023-08-03T17:27:59.073+0000:1691054879:2023-08-03T17:27:59.073+0000:Hi [~orpiske] , are you suggesting in improving this particular project
[https://github.com/mmelko/vysper-wrapper] with arm support or identifying an alternative approach altogether.
orpiske:1691134874:2023-08-04T15:41:14.682+0000:1691134874:2023-08-04T15:41:14.682+0000:[~jainhitesh9998] hi, that's correct. 

We should investigate doing something similar to what we do for Artemis (building the image on our own): https://github.com/apache/camel/tree/main/test-infra/camel-test-infra-artemis/src/test

"
0,CAMEL-19705,Improvement,Major,None,4.0.0,"
None
",Resolved,Later,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-03 12:49:07+00:00,2023-08-03 17:16:07+00:00,"To make startup quicker we can support a known list of FQN for custom beans/processors that for example camel-jbang can generate during export.


This avoids any overhead of classpath scanning for finding what we already would be known classes.",
0,CAMEL-19704,Task,Major,4.0-RC2,,"

easy
help-wanted

",Open,Unresolved,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-08-03 09:50:45+00:00,2023-12-18 13:50:57+00:00,"The logs for the camel-xmpp components are full of errors that happen during test. I believe we need to look at them to remove the invalid stuff, speed up the tests and make them more reliable.


To reproduce: run mvn verify on camel-xmpp component and look for the logs on the target/camel-xmpp-test.log file.","anton-goncharov:1700636945:2023-11-22T15:09:05.027+0000:1700636961:2023-11-22T15:09:21.582+0000:Hi, I'll be happy to start working on this one. I see this issue when running xmpp tests locally. After a brief look, my suggestions are:
 # reuse the testcontainer if possible, it's quite slow to ramp up (use singleton service similar to what is used in e.g. test-infra-kafka)
 # ensure testcontainer stops gracefully, there're timeout errors seemingly because it shuts down before the connections
 # check the tests flows, use awaitility instead of thread.sleep, etc

In addition, I see CAMEL-19706 may affect performance, but I'd tackle it separately.
orpiske:1700637138:2023-11-22T15:12:18.326+0000:1700637138:2023-11-22T15:12:18.326+0000:Thank you [~anton-goncharov]! Feel free to start working on this one. I will assign the ticket to myself (as it cannot yet be assigned to you) to indicate that there is work in progress for this. 

Thanks for contributing to Camel. Looking forward to review the PR!
orpiske:1701929736:2023-12-07T14:15:36.733+0000:1701929736:2023-12-07T14:15:36.733+0000:Hello, any updates about this? 
anton-goncharov:1701936042:2023-12-07T16:00:42.184+0000:1701936042:2023-12-07T16:00:42.184+0000:Hey [~orpiske], I'm still on it. Will get PR ready next week, I need to spend some more time with it over the weekend.
orpiske:1701936393:2023-12-07T16:06:33.706+0000:1701936393:2023-12-07T16:06:33.706+0000:Cool. Thanks for the update!
anton-goncharov:1702816143:2023-12-17T20:29:03.806+0000:1702816143:2023-12-17T20:29:03.806+0000:Hey [~orpiske], just to keep you posted, I'm still working on it in a fragmented manner, when time permits. Many timeout errors are XMPP-protocol specific, e.g. on route shutdown the endpoint consumer disconnects, but expects some service message that doesn't arrive. I had to dive a bit into how the Vysper XMPP works to get my head around it.

So far it seems many of the errors are not avoidable due to the XMPP server implementation, and lack of ""force shutdown"" options on the XMPP component. I'll improve it where it makes sense but some parts will be dependent on CAMEL-19706.
orpiske:1702878657:2023-12-18T13:50:57.516+0000:1702878657:2023-12-18T13:50:57.516+0000:Acknowledged! Thanks for supporting us and contributing with this task [~anton-goncharov]"
0,CAMEL-19703,Task,Minor,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Tomohisa Igarashi,Luca Burgazzoli,0,4,2023-08-03 08:02:31+00:00,2023-08-31 14:40:21+00:00,"As today there are two schema for the YAML dsl:



one that  uses camelCase
one that  uses kebab-case



since the  kebab-case is a leftover from an initial version and was meant to be removed, we can take finally remove it now that we are moving to a new major release.


once removed we also need to update the schemastore repository to  point to the right schema","lb:1691043612:2023-08-03T14:20:12.274+0000:1691043612:2023-08-03T14:20:12.274+0000:About schemastore, we can eventually use versions to point to different branches, as example:

{code:json}
   {
      ""name"": ""BX CI"",
      ""description"": ""CI configuration for Amdocs Bill Experience projects"",
      ""url"": ""https://json.schemastore.org/bxci.schema-2.x.json"",
      ""fileMatch"": [""**/bxci.yaml"", ""**/bxci.yml""],
      ""versions"": {
        ""1.0"": ""https://json.schemastore.org/bxci.schema-1.0.json"",
        ""1.0.1"": ""https://json.schemastore.org/bxci.schema-1.0.1.json"",
        ""2.0.0"": ""https://json.schemastore.org/bxci.schema-2.0.0.json"",
        ""2.x"": ""https://json.schemastore.org/bxci.schema-2.x.json""
      }
    }
{code}

There is also an option to define versions in the camel, an example https://github.com/SchemaStore/schemastore/pull/2057#issuecomment-1024470105
davsclaus:1691053773:2023-08-03T17:09:33.896+0000:1691053773:2023-08-03T17:09:33.896+0000:Hmm I am not sure how versions then works with the VS Code or IDEA (they have json schema support OOTB). Then that tool would need somehow to know what version you want etc.
lb:1691384615:2023-08-07T13:03:35.899+0000:1691384615:2023-08-07T13:03:35.899+0000:[~aurelien.pupier] do you know how/if vscode support this ? it would be nice if by default vscode would pick the main url but the user had the chance to switch to another version if working with an older version of camel
apupier:1691389294:2023-08-07T14:21:34.867+0000:1691389294:2023-08-07T14:21:34.867+0000:VS Code support it, there is a specific command, which is also available through UI to select in the list of defined versions:

 [^chooseVersionOfYamlSchema.mp4] 
davsclaus:1691469937:2023-08-08T12:45:37.158+0000:1691469937:2023-08-08T12:45:37.158+0000:Thanks Aurelien

So we can make 2 versions,

""camel-3.x"" that point to the existing with the kebab case in camel-3.x branch on github (not main branch)
""camel-4.x"" that point to the camel case in main branch

igarashitm:1693464021:2023-08-31T14:40:21.889+0000:1693464021:2023-08-31T14:40:21.889+0000:The versions have been added to SchemaStore
https://github.com/SchemaStore/schemastore/pull/3178"
0,CAMEL-19702,Bug,Trivial,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-03 07:28:59+00:00,2023-08-03 08:21:55+00:00,"camel version list --from-version=4                                                                                                                                            3s
Error downloading available Camel versions


If you use 4.0 then it works
camel version list --from-version=4.0


So there is a small bug about from and to version where its just a single digit, then you have some kind error.",
0,CAMEL-19701,Bug,Major,None,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-08-03 04:23:12+00:00,2023-09-18 08:23:59+00:00,"2023-08-02 18:34:40,483 INFO Â [org.apa.cam.qua.cor.CamelBootstrapRecorder] (main) Bootstrap runtime: org.apache.camel.quarkus.main.CamelMainRuntime
2023-08-02 18:34:40,525 INFO Â [org.apa.cam.mai.MainSupport] (main) Apache Camel (Main) 4.0.0-RC1 is starting
2023-08-02 18:34:40,632 ERROR [org.apa.cam.qua.mai.CamelMainRuntime] (main) Failed to start application: java.lang.IllegalArgumentException: Cannot find getter method: demo on bean: class org.apache.camel.main.MainConfigurationProperties when binding property: demo.port


https://learn.microsoft.com/en-us/visualstudio/bridge/kubernetes-environment-variables#environment-variables-table","davsclaus:1691012375:2023-08-03T05:39:35.206+0000:1691012375:2023-08-03T05:39:35.206+0000:You can turn this off for all ENV with camel.main.autoConfigurationEnvironmentVariablesEnabled=false

However we need to filter out services that should not be attempted to be configured on camel.main.xxx 

eg if you have a k8s service-name = camel-demo

"
0,CAMEL-19700,Task,Major,4.0-RC2,4.1.0,"
None
",Resolved,Fixed,4.1.0,Tomohisa Igarashi,Tomohisa Igarashi,0,2,2023-08-02 20:21:38+00:00,2023-09-06 13:28:37+00:00,"Currently the camel-yaml-dsl.json schema file doesn't have ""additionalProperties: false"" on each definitions. Since this property is ""true"" by default, if not explicitly specified to ""false"", schema validator allows arbitrary properties. In order to make this schema file work for validation, we'd want to add ""additionalProperties: false"" on every properties. The schema generator plugin already has that option.


https://issues.apache.org/jira/browse/CAMEL-18829","igarashitm:1691118751:2023-08-04T11:12:31.923+0000:1691118751:2023-08-04T11:12:31.923+0000:Turned out CAMEL-19698 and CAMEL-19699 somehow intervenes from doing this. Looking into it.
igarashitm:1691119081:2023-08-04T11:18:01.419+0000:1691119081:2023-08-04T11:18:01.419+0000:(From Luca) > don't forget to test if vscode camel plugin won't break for completion. Sometimes the behavior around JSON schema is different on platform to platform.
igarashitm:1691120465:2023-08-04T11:41:05.190+0000:1691120544:2023-08-04T11:42:24.118+0000:Here is an extracted *when* for testing
https://gist.github.com/igarashitm/0969d26e1463bf6b54dc5c52236b4110#file-simplifiedwhenschema-json

And the *additionalProperties: false* below even disallow when.description
 https://gist.github.com/igarashitm/0969d26e1463bf6b54dc5c52236b4110#file-simplifiedwhenschema-json-L43
It means that if *anyOf*/*oneOf* is specified, *properties* is ignored.


Instead, I think it needs to be like this way - https://gist.github.com/igarashitm/0969d26e1463bf6b54dc5c52236b4110#file-correctedwhenschema-json

*oneOf*/*anyOf* has to be an array of schema, but cannot be used to reduce properties
https://gist.github.com/igarashitm/0969d26e1463bf6b54dc5c52236b4110#file-correctedwhenschema-json-L15-L97

And *ExpressionDefiition* needs one more layer, e.g. 
https://gist.github.com/igarashitm/0969d26e1463bf6b54dc5c52236b4110#file-correctedwhenschema-json-L126
https://gist.github.com/igarashitm/0969d26e1463bf6b54dc5c52236b4110#file-correctedwhenschema-json-L133-L140

According to what I talked with Luca about this, it seems at the time camel-yaml-dsl was developed, there were problems preventing from doing this straightforward way and ended up with the current hack. As it already passed years after that, let's revisit and try fixing it.
igarashitm:1691742434:2023-08-11T16:27:14.864+0000:1691752055:2023-08-11T19:07:35.323+0000:Actually it's opposite, if the schema is to be extended with oneOf/anyOf/allOf, i.e. ExpressionDefinition, it shouldn't have `additionalProperties: false`. 
[https://json-schema.org/understanding-json-schema/reference/object.html#extending-closed-schemas]

IOW `addiontnalProperties: false` has to be added conditionally, by excluding those are to be extended.

Taking above into account, the correct schema around expression would look like this
[https://github.com/igarashitm/misc/blob/main/camel/json-schema-yaml-validator/src/test/resources/schema/whenAndExpression.json]
Validation Tests: https://github.com/igarashitm/misc/blob/main/camel/json-schema-yaml-validator/src/test/groovy/com/github/igarashitm/camel/ExpressionTest.groovy

Â See this `additionalProperties: false` and `oneOf` here
https://github.com/igarashitm/misc/blob/main/camel/json-schema-yaml-validator/src/test/resources/schema/whenAndExpression.json#L14-L28

And the point is to `redeclare` properties here. Even with this, the mutually exclusiveness on expression is in effect on validation.
[https://github.com/igarashitm/misc/blob/main/camel/json-schema-yaml-validator/src/test/resources/schema/whenAndExpression.json#L36-L38]

Although it slightly gets verbose, still much better than the earlier ""redefine everything"" version.
igarashitm:1692892769:2023-08-24T23:59:29.739+0000:1692892769:2023-08-24T23:59:29.739+0000:Turned out it doesn't work for expression, which is not a required property, since ""required"" needs to be specified in parent in order to get schema composition work.
davsclaus:1693387318:2023-08-30T17:21:58.461+0000:1693387318:2023-08-30T17:21:58.461+0000:Is this done now with todays merge ?
igarashitm:1693388134:2023-08-30T17:35:34.068+0000:1693388134:2023-08-30T17:35:34.068+0000:This one is not yet done, the mutually exclusiveness on expression/dataformat are working without this `additionalProperties: false` with today's merge. I'll look into this again if we still need `additionalProperties: false`.
igarashitm:1693393182:2023-08-30T18:59:42.309+0000:1693393182:2023-08-30T18:59:42.309+0000:Hit a problem, with `additionalProperties: false`, the camel case properties like `aggregateController` is no longer allowed.
[https://github.com/apache/camel/blob/camel-4.0.0/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/schema/camel-yaml-dsl.json#L377]

It seems only the top level processor definitions have both camelCase and kebab-case ATM. In order to be really strict, we would need to put something like `oneOf: {camelCase, kebab-case}}` for the properties.

Â 
igarashitm:1693398784:2023-08-30T20:33:04.042+0000:1693398784:2023-08-30T20:33:04.042+0000:Looking at CAMEL-19703, it no longer make much sense to support both kebab-case and camelCase
igarashitm:1693978117:2023-09-06T13:28:37.644+0000:1693978117:2023-09-06T13:28:37.644+0000:Merged - https://github.com/apache/camel/pull/11325"
0,CAMEL-19699,Task,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Tomohisa Igarashi,Tomohisa Igarashi,0,1,2023-08-02 18:55:42+00:00,2023-08-30 17:09:03+00:00,"For example with dataformats, this is syntactically allowed




- from: 
    uri: ""timer:test""
    parameters: 
      period: 3000
    steps: 
    - set-body: 
        simple: ""Hello World""
    - marshal: 
        json: 
          library: Jackson
        jaxb: 
          contextPath: org.apache.camel.model
    - to: 
        uri: ""log:test""




Can we prohibit this through YAML DSL schema, possibly with `oneOf`?","igarashitm:1690974555:2023-08-02T19:09:15.078+0000:1690974555:2023-08-02T19:09:15.078+0000:Interestingly some of the model catalog files have those `oneOf` condition
https://github.com/apache/camel/blob/2af409ce55be5f0eaf17a81c19da3c9ae49202c2/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/models/dataFormats.json#L15
https://github.com/apache/camel/blob/2af409ce55be5f0eaf17a81c19da3c9ae49202c2/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/models/when.json#L15"
0,CAMEL-19698,Task,Major,None,4.1.0,"
None
",Resolved,Fixed,4.1.0,Tomohisa Igarashi,Tomohisa Igarashi,0,4,2023-08-02 18:22:55+00:00,2023-08-31 07:12:08+00:00,"For example currently YAML DSL allows specifying both ""simple"" and ""expression"" under ""when""




- from: 
    uri: ""timer:test""
    parameters: 
      period: 3000
    steps: 
    - when: 
        simple: ""${header.baz} != null""
        expression: 
          simple: ""${header.baz} == null""
        steps: 
          - log: ""test""




But at runtime only latter wins in this case. It would be nice if this exclusiveness could be expressed in the schema.


Similarly, this ""anyOf"" seems to allow specifying multiple expressions
https://github.com/apache/camel/blob/36bcd6277854b8e69ca91a8d51845a306b1c2136/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/schema/camel-yaml-dsl.json#L3567-L3569


for example




- from: 
    uri: ""timer:test""
    parameters: 
      period: 3000
    steps: 
    - when: 
        simple: ${header.baz} != null
        jq: "".foo""
        steps: 
          - log: ""test""




Although this ends up with a runtime error



2023-08-02 14:27:29.445  INFO 1579388 --- [           main] org.apache.camel.main.MainSupport   : Using Java 20.0.1 with PID 1579388. Started by tomo in /home/tomo/workspace/Kaoto/datamapper-research/examples
Field: jq has already been configured as an expression
 in file:test.yaml, line 8, column 13:
            jq: "".foo""
                ^

	at org.apache.camel.dsl.yaml.deserializers.ModelDeserializers$WhenDefinitionDeserializer.setProperty(ModelDeserializers.java:18445)
	at org.apache.camel.dsl.yaml.deserializers.ModelDeserializers$WhenDefinitionDeserializer.setProperty(ModelDeserializers.java:18385)
	at org.apache.camel.dsl.yaml.common.YamlDeserializerBase.setProperties(YamlDeserializerBase.java:125)
	at org.apache.camel.dsl.yaml.common.YamlDeserializerBase.construct(YamlDeserializerBase.java:65)","davsclaus:1690972003:2023-08-02T18:26:43.916+0000:1690972003:2023-08-02T18:26:43.916+0000:expression is needed when you have options to configure etc. the one-line simple is when its just have the exp value (no options).
languages like jsonpath have several options.

So in reality then expression with nested simple is the correct syntax. 
davsclaus:1690972024:2023-08-02T18:27:04.482+0000:1690972024:2023-08-02T18:27:04.482+0000:I think luca added this oneline (he calls it inlined I think) later
lb:1690973183:2023-08-02T18:46:23.294+0000:1690973183:2023-08-02T18:46:23.294+0000:yeah, expression with nested is the one that matches the model, the reason for the ""inline"" version was to make the syntax less boring and closed to the XML/Java one as example:

{code:yaml}
- setBody:
    simple: ${header.foo}
{code}

vs 

{code:yaml}
- setBody:
    expression:
        simple: ${header.foo}
{code}

I guess we could think to do something different, like supporting both:

 {code:yaml}
- setBody:
    simple: ${header.foo}
{code}

and 

{code:yaml}
- setBody:
    simple:
        expression: ${header.foo}
        resultType: java.lang.String
{code}

This would allow to reduce or at least consolidate on a single way preserving the possibility to use inline but also to define additional properties.
What do you think ?
igarashitm:1690974016:2023-08-02T19:00:16.035+0000:1690974016:2023-08-02T19:00:16.035+0000:+1
Actually I saw some users do even like this
{code:yaml}
- setBody:
    expression:
      simple:
        expression: ${header.foo} != null
{code}
which complicates the thing even more :-D
marat.gubaidullin@gmail.com:1690981669:2023-08-02T21:07:49.830+0000:1690981669:2023-08-02T21:07:49.830+0000:Karavan uses it this way.
{code:java}
- setBody: 
    expression: 
      simple: 
        expression: ${header.foo} != null
{code}

It is fully explicit. It follows the schema. 

*SetBodyDefinition* has property *expression* of type *ExpressionDefinition*
*ExpressionDefinition* has property *simple* of type *SimpleExpression*
*SimpleExpression* has property *expression* of type *string*

It is unified for every expression language because different languages have different properties, not only expression.

Unified approach makes it very easy to implement in tooling.
lb:1691016279:2023-08-03T06:44:39.963+0000:1691016301:2023-08-03T06:45:01.734+0000:[~marat.gubaidullin@gmail.com] what happens when Karavan encounter an ""inline"" variant ? is it still able to render it properly and then when it is saved back it is re-written as full expression/type/expression ? 
marat.gubaidullin@gmail.com:1691043885:2023-08-03T14:24:45.519+0000:1691043885:2023-08-03T14:24:45.519+0000:[~lburgazzoli] Karavan +tries+ to render ""inline"" expressions and other implicit definitions like from outside route, errorHandlers and onException outside routeConfiguration, etc.
Yes, Karavan saves everything (expressions, routes, routeConfiguration, ect) in full explicit format.
lb:1691045010:2023-08-03T14:43:30.907+0000:1691045010:2023-08-03T14:43:30.907+0000:[~marat.gubaidullin@gmail.com] thx"
0,CAMEL-19697,Bug,Minor,None,4.0.0,"
None
",Resolved,Cannot Reproduce,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-02 14:29:45+00:00,2023-08-02 16:28:25+00:00,export using camel:platform-http-main fails but camel-platform-http-main works,
0,CAMEL-19696,Improvement,Major,None,4.0.0,"
None
",Resolved,Implemented,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-02 14:26:15+00:00,2023-08-02 16:20:02+00:00,No Desc,"davsclaus:1690964389:2023-08-02T16:19:49.621+0000:1690964389:2023-08-02T16:19:49.621+0000:You just need to set

camel.server.enabled=true
camel.server.healthCheckEnabled=true
camel.server.devConsoleEnabled=true
davsclaus:1690964402:2023-08-02T16:20:02.413+0000:1690964402:2023-08-02T16:20:02.413+0000:We had already done this"
0,CAMEL-19695,Dependency upgrade,Major,"3.20.6, 3.21.0","3.20.7, 3.21.1, 3.22.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0",Nicolas Filotto,Nicolas Filotto,0,2,2023-08-02 13:06:30+00:00,2023-08-02 14:57:58+00:00,The component camel-google-bigquery indirectly depends on org.json:json:jar:20200518:compile which has a know CVE https://nvd.nist.gov/vuln/detail/CVE-2022-45688 that can be fixed by upgrading it to 20230227 or higher.,"davsclaus:1690954120:2023-08-02T13:28:40.738+0000:1690954120:2023-08-02T13:28:40.738+0000:Is this only 3.20.x branch? Can you check the other branches also
nfilotto:1690954332:2023-08-02T13:32:12.231+0000:1690954332:2023-08-02T13:32:12.231+0000:Yeah it is what I'm doing
nfilotto:1690954516:2023-08-02T13:35:16.666+0000:1690954516:2023-08-02T13:35:16.666+0000:The CVE is present in 3.20+ but not in 4
nfilotto:1690955159:2023-08-02T13:45:59.836+0000:1690955159:2023-08-02T13:45:59.836+0000:Related PRs:

* https://github.com/apache/camel/pull/10964 for 3.20
* https://github.com/apache/camel/pull/10966 for 3.21
* https://github.com/apache/camel/pull/10967 for 3.22"
0,CAMEL-19694,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-02 13:05:44+00:00,2023-08-03 18:01:58+00:00,"If you want custom java code to just be in root package, and also the main class as well.",
0,CAMEL-19693,Bug,Major,4.0-RC2,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-08-02 11:08:07+00:00,2023-08-02 15:57:13+00:00,Standalone Camel has package scan that can find type converters and @Configuration classes. But we should also find custom beans with @BindToRegistry as well.,
0,CAMEL-19692,Improvement,Minor,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,James Netherton,James Netherton,0,1,2023-08-02 08:06:08+00:00,2023-08-02 09:03:38+00:00,"While working on a vertx-websocket demo app, I stumbled across some behavior of the producer 'sendToAll' option that I think should be improved, where parameterized or wildcarded paths are used.


If you have a route like:




from(""vertx-websocket:localhost:8080/orders/{country}"")
Â  Â  .log(""Got order for: ${headers.country});




Then clients connect on paths like:



/orders/us
/orders/uk



Right now there's currently no way for the producer to 'sendToAll' on any of those specific paths. I think it should be possible to 'sendToAll' to a specific parameterized path, or if desired, all peers connected on any match for /orders/{country}.",
0,CAMEL-19691,Improvement,Minor,3.21.0,"3.20.7, 3.21.1, 3.22.0, 4.0.0","

easy

",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Vaishnavi R,Jake Mehring,0,3,2023-08-01 19:01:39+00:00,2023-08-03 17:15:04+00:00,"Currently if you try to load a keystore with a blank password camel overrides the blank to be null. You can work around this by forcing the blank into the kafka config by setting it via ""additionalProperties.ssl.keystore.password"".Â 


Â 


Relevant Code:


Producer Config


Consumer Config


Â 


Solution is probably just to use addPropertyIfNotNull instead of addPropertyIfNotEmpty for this property.","davsclaus:1690888017:2023-08-01T19:06:57.407+0000:1690888017:2023-08-01T19:06:57.407+0000:When do you really have a blank password ?
jbmehring:1690890911:2023-08-01T19:55:11.994+0000:1690890911:2023-08-01T19:55:11.994+0000:My company's cert automation creates/injects certs that are not human accessible so they set the password to """" to prevent developers from needing to manage/access that secret.Â 
davsclaus:1690921748:2023-08-02T04:29:08.400+0000:1690921748:2023-08-02T04:29:08.400+0000:You are welcome to send a PR
davsclaus:1690970235:2023-08-02T17:57:15.519+0000:1690970235:2023-08-02T17:57:15.519+0000:[~orpiske] here is also an easy one, but we need it before 4.0 GA
var:1691021324:2023-08-03T08:08:44.232+0000:1691021324:2023-08-03T08:08:44.232+0000:I would like to work on this issue."
0,CAMEL-19690,Improvement,Major,4.0-RC2,4.0.0,"
None
",Resolved,Fixed,4.0.0,Jeremy Ross,Jeremy Ross,0,2,2023-08-01 15:54:14+00:00,2023-11-23 16:56:52+00:00,"Currently DTO generation affixes ""Url"" to all blob fields. Starting with v55, these field names clash with fields names salesforce includes on sObjects, e.g. `VersionDataUrl`.","davsclaus:1690933067:2023-08-02T07:37:47.097+0000:1690933067:2023-08-02T07:37:47.097+0000:Are you able to work on this.
jeremyross:1690957194:2023-08-02T14:19:54.894+0000:1690957194:2023-08-02T14:19:54.894+0000:Yep
davsclaus:1700654306:2023-11-22T19:58:26.235+0000:1700654306:2023-11-22T19:58:26.235+0000:Any update on this
jeremyross:1700729812:2023-11-23T16:56:52.186+0000:1700729812:2023-11-23T16:56:52.186+0000:This fix made the 4.0.0 release."
0,CAMEL-19689,Improvement,Major,4.0-RC2,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Tomohisa Igarashi,0,1,2023-08-01 13:25:35+00:00,2023-08-04 17:32:13+00:00,"Let's say I have



src/main/resources/route.yaml
src/main/resources/first.xml



And route.yaml loads the first.xml like this




Â  Â  Â  - set-body: 
Â  Â  Â  Â  Â  simple: ""resource:classpath:first.xml""




If I run this with camel-jbang, it can't resolve the first.xml file.



camel run src/main/resources/*
...
Caused by: java.io.FileNotFoundException: Cannot find resource: classpath:first.xml for URI: classpath:first.xml
...




 Claus suggested that it might be assuming all the XML files as Camel route XML DSL. It would be handy if this works with camel-jbang OOTB.",
0,CAMEL-19688,Bug,Minor,None,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Unassigned,evan,0,2,2023-08-01 10:26:03+00:00,2023-08-03 18:01:24+00:00,"When onCompletion work on beforeConsumer mode, if before the onCompletion processing there already had a exception in exchange, and some exception happens in onCompletion processing too. than the exception happened in onCompletion processing is lost.


But, the exception should not be lost, it should be suppressed.


For details see PR https://github.com/apache/camel/pull/10944",davsclaus:1691056884:2023-08-03T18:01:24.900+0000:1691056884:2023-08-03T18:01:24.900+0000:Thanks for PR and unit test
0,CAMEL-19687,Task,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-07-31 09:41:04+00:00,2023-07-31 10:53:07+00:00,See CAMEL-19686,
0,CAMEL-19686,Task,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-07-31 08:47:08+00:00,2023-07-31 10:03:26+00:00,"Atlasmap has been discontinued, it is bringing in some CVEs, so I think it's good to deprecate on Camel 3.x and remove it in 4.0",
0,CAMEL-19685,Improvement,Major,None,None,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2023-07-31 07:34:11+00:00,2023-08-01 13:56:31+00:00,"All the various AWS components uses AWSClient and they dont offer resilience and fault tolereance OOTB. So you need to deal with this yourself.


We can use connection pool that has logic to create / re-create and destroy and make this more general for all the AWS components.",
0,CAMEL-19684,Task,Major,None,4.x,"

easy
help-wanted

",Open,Unresolved,4.x,Unassigned,Otavio Rodolfo Piske,0,3,2023-07-30 07:26:28+00:00,2023-10-13 10:14:10+00:00,"We had a green build on 1054. Now we need to continue squashing the flaky tests.


The current list of flakies:



org.apache.camel.component.aws2.sqs.SqsBatchConsumerConcurrentConsumersIT.receiveBatch
org.apache.camel.component.file.watch.FileWatchComponentTest.testAntMatcher
org.apache.camel.component.file.FileRecursiveNoopTest.testRecursiveNoop
org.apache.camel.component.undertow.DefaultUndertowHttpBindingTest.readEntireDelayedPayload
org.apache.camel.component.flatpack.FixedLengthAllowShortTest.testFlatpackDataFormatXML
org.apache.camel.component.stomp.StompConsumerHeaderFilterStrategyTest.testConsume
org.apache.camel.component.jetty.JettySuspendWhileInProgressTest.testJettySuspendWhileInProgress
org.apache.camel.routepolicy.quartz.CronScheduledRoutePolicyTest$CronTest1.testScheduledStartRoutePolicyWithTwoRoutes
org.apache.camel.component.quartz.QuartzAddRoutesAfterCamelContextStartedTest.testAddRoutes
org.apache.camel.component.zookeepermaster.MasterEndpointIT.testEndpoint
org.apache.camel.component.zookeepermaster.group.GroupIT.testRejoinAfterDisconnect
org.apache.camel.component.jms.JmsFormatDateHeadersToIso8601Test.testBindingFormatDateHeaderToIso8601
org.apache.camel.component.rocketmq.RocketMQRouteTest.testSimpleRoute
org.apache.camel.component.rocketmq.RocketMQRequestReplyRouteTest.testRouteMessageInRequestReplyMode
org.apache.camel.processor.RecipientListWithSimpleExpressionTest.testRecipientList
org.apache.camel.component.kafka.integration.KafkaConsumerAutoInstResumeRouteStrategyIT.testOffsetIsBeingChecked
org.apache.camel.management.ManagedPooledExchangeTest.testSameExchange (new in build 1069)
org.apache.camel.impl.ScheduledPollConsumerTest.testRetryAtMostThreeTimes","orpiske:1690956521:2023-08-02T14:08:41.453+0000:1690956521:2023-08-02T14:08:41.453+0000:Not on CI, but on my local: org.apache.camel.component.file.FileConsumerFileNameFilterTest.
davsclaus:1691657495:2023-08-10T16:51:35.131+0000:1691657495:2023-08-10T16:51:35.131+0000:[ERROR]   FileConsumerIdempotentKeyChangedIssue2Test.testFile mock://file Body of message: 0. Expected: <Hello World Again> but was: <>
[ERROR]   DefaultSupervisingRouteControllerTest.testSupervising:69 Timeout waiting for endpoints to receive enough messages. mock://foo timed 
davsclaus:1691660653:2023-08-10T17:44:13.731+0000:1691660653:2023-08-10T17:44:13.731+0000:org.apache.camel.impl.event.EventNotifierExchangeSentTest.testExchangeWireTap	3.337s	ERROR
org.apache.camel.impl.StopTimeoutRouteTest.testStopTimeout	5.038s	FAILURE
davsclaus:1691660709:2023-08-10T17:45:09.341+0000:1691660709:2023-08-10T17:45:09.341+0000:[ERROR] org.apache.camel.impl.event.EventNotifierExchangeSentTest.testExchangeWireTap -- Time elapsed: 3.337 s <<< ERROR!
org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a org.apache.camel.impl.event.EventNotifierExchangeSentTest expected: <6> but was: <4> within 1 seconds.
	at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:167)
	at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:119)
	at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:31)
	at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:985)
	at org.awaitility.core.ConditionFactory.untilAsserted(ConditionFactory.java:769)
	at org.apache.camel.impl.event.EventNotifierExchangeSentTest.testExchangeWireTap(EventNotifierExchangeSentTest.java:153)
davsclaus:1691660725:2023-08-10T17:45:25.048+0000:1691660725:2023-08-10T17:45:25.048+0000:StopTimeoutRouteTest.testStopTimeout mock://foo Body of message: 0. Expected: <Hello Foo> but was: <Hello World>
orpiske:1691972202:2023-08-14T08:16:42.939+0000:1691972202:2023-08-14T08:16:42.939+0000:Unmarked RocketMQ as done ... it remains flaky.
orpiske:1697163250:2023-10-13T10:14:10.708+0000:1697163250:2023-10-13T10:14:10.708+0000:I think we can start using new ASF service to track the flakies: https://ge.apache.org/scans?search.rootProjectNames=Camel&search.tasks=verify&search.timeZoneId=Europe%2FParis#"
0,CAMEL-19683,Task,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-07-29 18:21:12+00:00,2023-07-29 19:16:05+00:00,After RC2 is announced we should make camel-jbang use this release.,
0,CAMEL-19682,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-07-29 10:12:15+00:00,2023-07-29 12:01:55+00:00,Like the other EIPs do where they store this on exchange property,
0,CAMEL-19681,Task,Major,None,4.x,"

help-wanted

",Reopened,Unresolved,4.x,Unassigned,Otavio Rodolfo Piske,0,2,2023-07-29 07:11:59+00:00,2023-12-22 10:16:19+00:00,"There are a couple of tests disabled in camel-joor that need to be reviewed. They are failing with compilation errors such as: 




org.apache.camel.language.csimple.joor.JoorCSimpleCompilationException: csimple-joor compilation error for class: org.apache.camel.language.csimple.joor.compiled.CSimpleScript130
  1 package org.apache.camel.language.csimple.joor.compiled;
  2 
  3 import java.util.*;
  4 import java.util.concurrent.*;
  5 import java.util.stream.*;
  6 
  7 import org.apache.camel.*;
  8 import org.apache.camel.util.*;
  9 import org.apache.camel.spi.*;
 10 import static org.apache.camel.language.csimple.CSimpleHelper.*;
 11 
 12 import org.apache.camel.language.csimple.joor.OriginalSimpleTest.*;
 13 
 14 public class CSimpleScript130 extends org.apache.camel.language.csimple.CSimpleSupport {
 15 
 16     Language bean;
 17 
 18     public CSimpleScript130() {
 19     }
 20 
 21     @Override
 22     public boolean isPredicate() {
 23         return false;
 24     }
 25 
 26     @Override
 27     public String getText() {
 28         return ""${bodyAs(Animal).getFriend?.getFriend.getName}"";
 29     }
 30 
 31     @Override
 32     public Object evaluate(CamelContext context, Exchange exchange, Message message, Object body) throws Exception {
 33         return bodyAs(message, Animal.class).getFriend().get?.getFriend().getName();
 34     }
 35 }
	at org.apache.camel.language.csimple.joor.JoorCSimpleCompiler.doCompile(JoorCSimpleCompiler.java:107)
	at org.apache.camel.language.csimple.joor.JoorCSimpleCompiler.compileExpression(JoorCSimpleCompiler.java:80)
	at org.apache.camel.language.csimple.CSimpleLanguage$CompilationSupport.compileExpression(CSimpleLanguage.java:271)
	at org.apache.camel.language.csimple.CSimpleLanguage.createExpression(CSimpleLanguage.java:176)
	at org.apache.camel.test.junit5.CamelTestSupport.assertExpression(CamelTestSupport.java:960)
	at org.apache.camel.test.junit5.LanguageTestSupport.assertExpression(LanguageTestSupport.java:69)
	at org.apache.camel.test.junit5.LanguageTestSupport.assertExpression(LanguageTestSupport.java:76)
	at org.apache.camel.language.csimple.joor.OriginalSimpleTest.testBodyOGNLNullSafeToAvoidNPE(OriginalSimpleTest.java:1416)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:727)
	at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)
	at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)
	at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)
	at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)
	at org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:217)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)
	at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:202)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.executeNonConcurrentTasks(ForkJoinPoolHierarchicalTestExecutorService.java:172)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:152)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:202)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService.invokeAll(ForkJoinPoolHierarchicalTestExecutorService.java:146)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)
	at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)
	at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)
	at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)
	at org.junit.platform.engine.support.hierarchical.ForkJoinPoolHierarchicalTestExecutorService$ExclusiveTask.compute(ForkJoinPoolHierarchicalTestExecutorService.java:202)
	at java.base/java.util.concurrent.RecursiveAction.exec(RecursiveAction.java:194)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:373)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1182)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1655)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1622)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:165)
Caused by: org.joor.ReflectException: Compilation error: /org/apache/camel/language/csimple/joor/compiled/CSimpleScript130.java:33: error: illegal start of expression
        return bodyAs(message, Animal.class).getFriend().get?.getFriend().getName();
                                                             ^
1 error
	at org.joor.Compile.compile(Compile.java:105)
	at org.joor.Reflect.compile(Reflect.java:104)
	at org.joor.Reflect.compile(Reflect.java:79)
	at org.apache.camel.language.csimple.joor.JoorCSimpleCompiler.doCompile(JoorCSimpleCompiler.java:103)
	... 66 more","orpiske:1690587001:2023-07-29T07:30:01.785+0000:1690587001:2023-07-29T07:30:01.785+0000:[~davsclaus] explained it here: https://github.com/apache/camel/pull/10897#issuecomment-1656584800

The reason is that csimple does not support yet all functions from simple.
davsclaus:1703211372:2023-12-22T10:16:12.656+0000:1703211372:2023-12-22T10:16:12.656+0000:Yes its somewhat difficult to do that, as the generateCode for this kind is complex to do so it generates java code that can be compiled. "
0,CAMEL-19680,Task,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-07-29 07:09:12+00:00,2023-07-29 07:56:04+00:00,"Review tests currently disabled (+ than 50). These components seem to have a large number of disabled tests: 



camel-zendesk: auto-generated test (OK)
camel-twillio: auto-generated test (OK)
camel-joor: done (also: CAMEL-19681)
camel-box: semi-automated tests
camel-braintree: semi-automated tests
camel-web3j: semi automated tests.
camel-fhir: flaky tests (OK)



These are probably OK, but they may be missing the disabled reason or are auto-generated tests or require external system access (i.e.: semi-automated tests).",
0,CAMEL-19679,Bug,Minor,None,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-28 19:04:47+00:00,2023-07-28 19:06:23+00:00,From CI server we had sometimes failure in FixedLengthAllowShortTest,
0,CAMEL-19678,New Feature,Minor,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2023-07-28 14:42:53+00:00,2023-07-28 14:42:53+00:00,"It would be good if we can markup every component with the health check ids they provide OOTB. We should see if we can markup this in the source code and have it generated into the json files, then we can have it shown in the docs. And tooling would also better know about which health checks are provided.",
0,CAMEL-19677,Improvement,Minor,None,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-07-28 14:28:59+00:00,2023-07-28 14:32:52+00:00,No Desc,davsclaus:1690525972:2023-07-28T14:32:52.297+0000:1690525972:2023-07-28T14:32:52.297+0000:https://github.com/apache/camel/commit/3f0784b285d0145e6077700c49263560e130a43c
0,CAMEL-19676,Bug,Minor,"3.13.0, 3.21.0","3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Claus Ibsen,Marco Bungart,0,2,2023-07-28 11:26:47+00:00,2023-07-28 17:32:32+00:00,"When camel cannot create a route, a FailedToCreateRouteException is thrown. This exception shows all query parameters in clear text, including sensitive information, like password. It would be beneficial to also mask sensitive information in this exception.


interestingly enough, inner exceptions still mask the password.


Note:


The issue was originally observed on camel-sftp, but I suspect that this is a broader issue. I specified camel-log as component since it seems to be the closest fit. Please feel free to change this as need be.


â


A sample project showing the behaviour can be found on github.com.


To see the behaviour:



Clone the project





git clone https://github.com/turing85/camel-sftp.git
cd camel-sftp 




Start the sftp server:





docker-compose --file local-deployment/docker-compose.yml up --detach 




build the application





./mvnw clean package 




start the jar





java -jar target/camel-sftp-1.0-SNAPSHOT-executable-jar.jar 




observe the stack trace, containing the password:





Exception in thread ""main"" org.apache.camel.FailedToCreateRouteException: Failed to create route writer at: >>> To[sftp://localhost:10022?password=wrong%26foo&username=foo] <<< in route: Route(writer)[From[timer://write-timer?fixedRate=true&period... because of Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{foo=}]
Â  Â  at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:215)
Â  Â  at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:75)
Â  Â  at org.apache.camel.impl.DefaultModelReifierFactory.createRoute(DefaultModelReifierFactory.java:49)
Â  Â  at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:937)
Â  Â  at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:800)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:3028)
Â  Â  at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2699)
Â  Â  at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2718)
Â  Â  at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
Â  Â  at org.apache.camel.main.Main.doStart(Main.java:142)
Â  Â  at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
Â  Â  at org.apache.camel.main.MainSupport.run(MainSupport.java:89)
Â  Â  at de.turing85.camel.sftp.CamelSftp.main(CamelSftp.java:15)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{foo=}]
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:1020)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:931)
Â  Â  at org.apache.camel.builder.endpoint.AbstractEndpointBuilder.resolve(AbstractEndpointBuilder.java:68)
Â  Â  at org.apache.camel.reifier.SendReifier.resolveEndpoint(SendReifier.java:47)
Â  Â  at org.apache.camel.reifier.SendReifier.createProcessor(SendReifier.java:37)
Â  Â  at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:857)
Â  Â  at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:598)
Â  Â  at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:211)
Â  Â  ... 14 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{foo=}]
Â  Â  at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:300)
Â  Â  at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:192)
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:986)
Â  Â  ... 21 more 



â


Story:


As a developer


When I misconfigure my route so that it does not start


Then I want that all sensitive information are masked in the entire stack trace.


â
FTR: relevant zulip-chat","davsclaus:1690527005:2023-07-28T14:50:05.920+0000:1690527005:2023-07-28T14:50:05.920+0000:Thanks for the sample project.

So its a corner case with the route model where to/toD are outputting the uri in that situation only.

I am masking the passwords like its done in other places, and now its shown as xxxxxxxx

{code}
~/Downloads/camel-sftp main !1 â¯ java -jar target/camel-sftp-1.0-SNAPSHOT-executable-jar.jar                                                                                                         4s
WARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.
[                          main] MainSupport                    INFO  Apache Camel (Main) 4.0.0-SNAPSHOT is starting
Exception in thread ""main"" org.apache.camel.FailedToCreateRouteException: Failed to create route writer at: >>> To[sftp://localhost:10022?password=xxxxxx&username=xxxxxx] <<< in route: Route(writer)[From[timer://write-timer?fixedRate=true&period... because of Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: Failed to resolve endpoint: sftp://localhost:10022?password=xxxxxx&username=xxxxxx due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{foo=}]
	at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:217)
{code}"
0,CAMEL-19675,Bug,Minor,"3.16.0, 3.17.0, 3.18.0, 3.19.0, 3.20.0, 3.21.0, 4.0.0","3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Otavio Rodolfo Piske,Robin Vanderhallen,0,3,2023-07-28 10:23:35+00:00,2023-08-03 08:47:10+00:00,"In Camel version 3.16.0 and higher, a multicast route with a custom aggregation strategy starts failing. At the end of the AggregationStrategy, there is still an attachment on the Exchange. Right after the multicast, it's no longer on the Exchange.Â 


I created a minimal example onÂ https://github.com/rvanderhallen/camel-aggregation/blob/main/src/test/java/be/rvanderhallen/camel/aggregation/CamelAggregationStrategyTest.java.


Otavio Rodolfo Piske discovered the root cause of the problem: https://github.com/apache/camel/commit/0125a133a11cbdff57d459634bac276c10963387


Link to the Zulip chat thread: https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/aggregation.20strategy.20failing.20on.20Camel.203.2E16.2E0.20and.20higher","davsclaus:1691023435:2023-08-03T08:43:55.488+0000:1691023435:2023-08-03T08:43:55.488+0000:I think this is done
orpiske:1691023616:2023-08-03T08:46:56.194+0000:1691023616:2023-08-03T08:46:56.194+0000:Yes, this is done. I reviewed the tests from 3.x from yesterday's build and there's no hang anymore. Let's close.
orpiske:1691023630:2023-08-03T08:47:10.584+0000:1691023630:2023-08-03T08:47:10.584+0000:Fixed with the linked PRs. "
0,CAMEL-19674,Improvement,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Claus Ibsen,0,1,2023-07-28 09:02:33+00:00,2023-07-28 09:02:41+00:00,No Desc,
0,CAMEL-19673,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-07-28 07:32:27+00:00,2023-07-28 19:54:18+00:00,"Some of the configuration options dont have correct labels, we should ensure to mark security and proxy labels, and advanced etc.",
0,CAMEL-19672,Dependency upgrade,Minor,None,None,"
None
",Resolved,Information Provided,None,Unassigned,Sasikumar Muthukrishnan Sampath,0,4,2023-07-27 16:07:23+00:00,2023-12-26 11:40:17+00:00,"This vulnerability is from apache kafka and they have fixed this issue and released new versions.


KAFKA-15096 CVE 2023-34455 - Vulnerability identified with Apache kafka - ASF JIRA


Â 


Please upgrade camel kafka with the fix from apache kafka and release newer versions.","davsclaus:1690446113:2023-07-27T16:21:53.460+0000:1690446113:2023-07-27T16:21:53.460+0000:They have not released 3.4.2 and 3.3.3 yet - only 3.5.1
avgona:1691995969:2023-08-14T14:52:49.422+0000:1691995969:2023-08-14T14:52:49.422+0000:[~davsclaus] The kafka client 3.5.1 has only the fix, isn't it?
davsclaus:1691996135:2023-08-14T14:55:35.727+0000:1691996135:2023-08-14T14:55:35.727+0000:Yes and the fix are coming in 3.4.2 and 3.3.3 for older releases. But its only something about snappy, so if you do not use that, there is no problem.
avgona:1692784221:2023-08-23T17:50:21.392+0000:1692784221:2023-08-23T17:50:21.392+0000:[~davsclaus]Â  but are you planning to promote Kafka Client 3.5.1 to Camel Kafka Starter?Â 
acosentino:1692785001:2023-08-23T18:03:21.866+0000:1692785001:2023-08-23T18:03:21.866+0000:It depends from Spring Boot Dependencies and the kafka client listed there.
avgona:1692786401:2023-08-23T18:26:41.755+0000:1692786498:2023-08-23T18:28:18.603+0000:[~acosentino] Sorry I didn't get it
Will you be able to release Camel Kafka Starter 3.21 with Kafka Client 3.5.1?

Why it depends from Spring Boot Dependencies?
davsclaus:1692788115:2023-08-23T18:55:15.952+0000:1692788115:2023-08-23T18:55:15.952+0000:You just add kafka-client 3.5.1 as dependency yourself and use that. 

Spring Boot comes with a default kafka client version in their releases, that is what Andrea talks about.
So camel-kafka-starter will out of the box use what version Spring Boot comes with.
acosentino:1692789008:2023-08-23T19:10:08.571+0000:1692789008:2023-08-23T19:10:08.571+0000:Exactly. In 3.21.x we are using 2.7.x of SB and the kafka-clients is 3.1.2, so it's not important what we declare.
avgona:1692793503:2023-08-23T20:25:03.156+0000:1692793503:2023-08-23T20:25:03.156+0000:Gotcha
Thank a lot guys!"
0,CAMEL-19671,Bug,Minor,3.21.0,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0.0",Claus Ibsen,Dmitrii Antonov,0,2,2023-07-27 14:47:39+00:00,2023-07-30 11:24:46+00:00,https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Calling.20sql.20query.20without.20parameters.20in.20Oracle,davsclaus:1690448715:2023-07-27T17:05:15.495+0000:1690448715:2023-07-27T17:05:15.495+0000:You are welcome to work on a PR
0,CAMEL-19670,Bug,Minor,3.21.0,"3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.21.1, 3.22.0, 4.0.0",Claus Ibsen,Bartosz Popiela,0,2,2023-07-27 14:28:11+00:00,2023-08-01 08:34:13+00:00,"The recent change introduced in scope of CAMEL-18619 causes Splitter to fail whenÂ 




org.apache.camel.model.errorhandler.DefaultErrorHandlerDefinition#setUseOriginalBody



Â is set to true. This is because Splitter creates a new Unit of Work and it consumes the stream inÂ 




org.apache.camel.impl.engine.DefaultUnitOfWork#doOnPrepare



Subsequently,




org.apache.camel.impl.engine.CamelInternalProcessor.StreamCachingAdvice#before



tries to consume this stream when the split subroute is executed and it fails with:



org.apache.camel.StreamCacheException: Error during type conversion from type: org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper@20ac325b due to org.apache.camel.TypeConversionException: Error during type conversion from type: org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper@20ac325b due to java.io.IOException: Stream closed
at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:960)
at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:911)
at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:335)
at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.doRun(RedeliveryErrorHandler.java:829)
at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryTask.run(RedeliveryErrorHandler.java:737)
at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
at org.apache.camel.processor.Pipeline.process(Pipeline.java:165)
at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392)
at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:269)
at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:187)
at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:130)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:829)
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper to the required type: org.apache.camel.StreamCache with value org.apache.camel.dataformat.zipfile.ZipInputStreamWrapper@20ac325b due to java.io.IOException: Stream closed
at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.convertTo(StreamCacheBulkConverterLoader.java:60)
at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:449)
at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:358)
at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:202)
at org.apache.camel.impl.engine.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:226)
at org.apache.camel.impl.engine.DefaultStreamCachingStrategy.cache(DefaultStreamCachingStrategy.java:217)
at org.apache.camel.impl.engine.CamelInternalProcessor$StreamCachingAdvice.before(CamelInternalProcessor.java:953)
... 14 common frames omitted
Caused by: java.io.IOException: Stream closed
at java.base/java.io.BufferedInputStream.getBufIfOpen(BufferedInputStream.java:176)
at java.base/java.io.BufferedInputStream.read(BufferedInputStream.java:342)
at java.base/java.io.FilterInputStream.read(FilterInputStream.java:107)
at org.apache.camel.util.IOHelper.copy(IOHelper.java:193)
at org.apache.camel.util.IOHelper.copy(IOHelper.java:161)
at org.apache.camel.util.IOHelper.copy(IOHelper.java:156)
at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:229)
at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:225)
at org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(StreamCacheConverter.java:54)
at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.doConvertTo(StreamCacheBulkConverterLoader.java:78)
at org.apache.camel.converter.stream.StreamCacheBulkConverterLoader.convertTo(StreamCacheBulkConverterLoader.java:51)
... 20 common frames omitted



Please find the unit test attached. It works with Camel 3.20.4 and fails with Camel 3.21.0.","davsclaus:1690771840:2023-07-31T10:50:40.379+0000:1690771840:2023-07-31T10:50:40.379+0000:Fixing this so you can turn off stream caching

camel.springboot.stream-caching-enabled = false
bartoszpop:1690772054:2023-07-31T10:54:14.408+0000:1690772054:2023-07-31T10:54:14.408+0000:Thanks [~davsclaus]! One concern I have is that it will still fail when the stream caching is enabled.
davsclaus:1690772196:2023-07-31T10:56:36.450+0000:1690772196:2023-07-31T10:56:36.450+0000:Just a note that in earlier versions then with useOriginalMessage the message body you would have is the original zip input stream (in a wrapper) and that this stream is not re-readable so its not very useable.

davsclaus:1690772244:2023-07-31T10:57:24.518+0000:1690772244:2023-07-31T10:57:24.518+0000:> Thanks Claus Ibsen! One concern I have is that it will still fail when the stream caching is enabled.

No there is a fix in a PR
https://github.com/apache/camel/commit/db806958b6e30d3f9e7122bf14799340a23af414
davsclaus:1690850053:2023-08-01T08:34:13.287+0000:1690850053:2023-08-01T08:34:13.287+0000:Okay should work out of the box in next releases"
0,CAMEL-19669,Test,Major,None,4.0.1,"
None
",Resolved,Fixed,4.0.1,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-07-27 12:47:03+00:00,2023-09-18 11:59:18+00:00,JMS tests have been very flaky recently. We need to fix them.,orpiske:1695009558:2023-09-18T11:59:18.688+0000:1695009558:2023-09-18T11:59:18.688+0000:We applied many fixes to JMS and the code has not been flaky on ASF CI recently. 
0,CAMEL-19668,Bug,Major,4.0.0,"3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.22.0, 4.0.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-07-27 12:36:38+00:00,2023-08-01 08:31:51+00:00,The camel-test-infra-artemis incorrectly creates a singleton broker instance at all times. This makes certain tests flaky in case where they need specific configurations on the broker or manipulate its lifecycle.,"davsclaus:1690844714:2023-08-01T07:05:14.821+0000:1690844714:2023-08-01T07:05:14.821+0000:Is this done
orpiske:1690849911:2023-08-01T08:31:51.377+0000:1690849911:2023-08-01T08:31:51.377+0000:Fixed and backported to 3.22. "
0,CAMEL-19667,Improvement,Major,"3.20.5, 3.20.6, 3.21.0, 4.0-M3",4.x,"

bug
opentelemetry
tracing

",Open,Unresolved,4.x,Unassigned,Roman Kvasnytskyi,0,2,2023-07-27 12:30:25+00:00,2023-12-23 07:01:21+00:00,"I am using OpenTelemetry Agent for tracing along with camel-opentelemetry-starter that configures OpenTelemetryTracer for Camel aligned with camel-tracing.Â 


I see my spans for Camel inside a single trace, but after control is passed to the Processor process method next spans are disassociated from the trace and are created in the separate trace.


The tracing context does not seem to get propagated, and the resulting spans end up being disassociated. For example:




from(""timer:tick?period=5s)
    .process(""myProcessor"");    






public class MyProcessor implements Processor {

    private final HttpClient someClient = new HttpClient();

    @Override
    public void process(Exchange exchange) {
        // http client is instrumented and also produces spans

        someClient.get('/example');
    }
}




This results in 2 spans. One for timer:tick & another for a client call. The problem is that the parent span for client calls is not set, so they appear as 2 distinct traces.Â 


My exchange headers contain traceparent header with all data which should be put inside the OpenTelemetry context, but they do not.


I have come up with a workaround. The idea is trivial - get traceparent header if it is present in exchange, parse trace metadata from it, create a SpanContext object, and put it as a parent for the current OpenTelemetry context.


It looks like this:




public class TraceEnrichingProcessor implements Processor {

    private final Processor delegate;

    public TraceEnrichingProcessor(Processor delegate) {
        this.delegate = delegate;
    }

    @Override
    public void process(Exchange exchange) throws Exception {
        // Get the existing traceparent header from the Exchange
        String traceparent = exchange.getIn().getHeader(""traceparent"", String.class);
        if (traceparent != null && !traceparent.isEmpty()) {
            // Extract the traceId, parentSpanId and sampleFlag
            String[] parts = traceparent.split(""-"");
            String traceId = parts[1];
            String parentSpanId = parts[2];
            boolean isSampled = parts[3].equals(""01"");

            // Create the parent SpanContext
            SpanContext parentContext = SpanContext.create(
                traceId,
                parentSpanId,
                isSampled ? TraceFlags.getSampled() : TraceFlags.getDefault(),
                TraceState.getDefault()
            );

            // Attach the parent SpanContext to the current Context
            try (Scope scope = Context.current().with(Span.wrap(parentContext)).makeCurrent()) {
                // Now, the current Context has the parent SpanContext attached,
                // and any new spans created within this scope will use it as their parent
                
                // Pass control to the delegate processor
                delegate.process(exchange);
            }
        } else {
            // If no traceparent header is found, just delegate without modifying the Context
            delegate.process(exchange);
        }
    }
} 



Inside OpenTelemetry Agent, they dropped support of Camel 3.x+, because Camel provides its module for tracing, and they will not help with it. Link


I wonder if that can be done inside Camel to propagate context from the processor implicitly without manual propagation of context.Â 


UPD1: I have verified that these behaviour is consistent across Camel 3.20.5, 3.20.6, 3.21.0 and 4.0.0-RC1","reodont:1690432641:2023-07-27T12:37:21.183+0000:1690432641:2023-07-27T12:37:21.183+0000:Seems like related issues
davsclaus:1690448972:2023-07-27T17:09:32.284+0000:1690448972:2023-07-27T17:09:32.284+0000:And if you do not use a processor, but a log or something else, or another endpoint what happens then. ie is it only when you use a custom processor or not
reodont:1690451316:2023-07-27T17:48:36.942+0000:1690451388:2023-07-27T17:49:48.065+0000:[~davsclaus] , well, I can only make new spans not connected to Camel if I will process them(either via lambda in process( () -> {}) or via Processor.process. Like in that case I am making a call from the HTTP client. When I route my message even like direct -> seda -> custom processor I still see headers in Exchange headers on my Processor. So, I believe Camel propagates everything during the routing of the message but fails to set up OpenTelemetry Context for ""process"" in the end. I would gladly contribute to fixing that issue, but I am not sure where should I start, or what is the best way to handle that thing.

I am thinking about propagating Camel trace context to OpenTelemetry trace context on receiver, but it may be suboptimal...
reodont:1690937181:2023-08-02T08:46:21.764+0000:1690937181:2023-08-02T08:46:21.764+0000:[~davsclaus]Â  can you give me a tip how I can approach that issue?
davsclaus:1691542852:2023-08-09T09:00:52.918+0000:1691542852:2023-08-09T09:00:52.918+0000:A good place to look is CamelInternalProcessor as an internal advice. And for this advice somehow to be part of camel-tracing as camel-core cannot have compiled with opentracing JARs.
davsclaus:1703211476:2023-12-22T10:17:56.362+0000:1703211476:2023-12-22T10:17:56.362+0000:Can you try with latest release as stuff has likely has been improved 
reodont:1703248397:2023-12-22T20:33:17.045+0000:1703248397:2023-12-22T20:33:17.045+0000:[~davsclaus] what exact latest release you mean? 4.3.0 or 3.21.3? Could you please point to a specific issue/PR that may have helped the cause?
davsclaus:1703286081:2023-12-23T07:01:21.548+0000:1703286081:2023-12-23T07:01:21.548+0000:No sorry I dont have time for that, always try with 4.x. "
0,CAMEL-19666,Bug,Major,4.0.0,4.0.0,"
None
",Resolved,Fixed,4.0.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-07-27 11:06:35+00:00,2023-07-27 15:36:40+00:00,"The camel-test-infra-artemis suffer from concurrency problems. When running with a lot of threads, sometimes the tests hangs when the broker is auto-deleting queues. It doesn't happen always, only in some rare circumstances.",orpiske:1690429782:2023-07-27T11:49:42.106+0000:1690429782:2023-07-27T11:49:42.106+0000:Fixed with the linked PR.
0,CAMEL-19665,Improvement,Major,None,None,"
None
",Open,Unresolved,None,Unassigned,Claus Ibsen,0,1,2023-07-27 09:06:59+00:00,2023-07-27 09:06:59+00:00,"There are some components that uses ScheduledPollingConsumer that essentially do their own kind of batch.


Instead they can be changed to ScheduledBatchPollingConsumer and do batch the standard Camel way.



camel-couchbase
camel-git
camel-github
camel-hdfs
camel-jira
camel-jt400



and maybe some others, search for ScheduledPollingConsumer to find more.",
0,CAMEL-19664,Bug,Major,4.0.0,4.0.0,"
None
",Resolved,Fixed,4.0.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-07-27 08:37:06+00:00,2023-07-28 11:15:46+00:00,"The camel-test-infra-artemis suffer from concurrency problems. When multiple tests are running, the code may try to create multiple brokers with the same ID and this can result in flakiness on the tests.",orpiske:1690427155:2023-07-27T11:05:55.541+0000:1690427155:2023-07-27T11:05:55.541+0000:Fixed with the linked PR.
0,CAMEL-19663,Bug,Minor,None,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Unassigned,evan,0,2,2023-07-27 08:18:35+00:00,2023-07-27 09:12:15+00:00,"we should put the key from a multi-value (prefix) in the properties too, or the property may be lost.


see pull request for detial.


https://github.com/apache/camel/pull/10832",davsclaus:1690420335:2023-07-27T09:12:15.049+0000:1690420335:2023-07-27T09:12:15.049+0000:Thanks for reporting and the PR with test
0,CAMEL-19632,Task,Minor,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,James Netherton,0,2,2023-07-20 11:01:40+00:00,2023-07-22 09:53:50+00:00,"Build time warning observed in Camel Quarkus with Camel 4.0.0-RC1:




2023-07-19T17:40:18.3973680Z 2023-07-19 17:40:18,263 WARN  [io.qua.arc.dep.SplitPackageProcessor] (build-30) Detected a split package usage which is considered a bad practice and should be avoided. Following packages were detected in multiple archives: 
2023-07-19T17:40:18.3974807Z - ""org.apache.camel.util.xml"" found in [org.apache.camel:camel-xml-jaxp-util::jar, org.apache.camel:camel-xml-jaxp::jar]",
0,CAMEL-19631,Dependency upgrade,Minor,None,4.3.0,"
None
",Resolved,Fixed,4.3.0,Unassigned,Claus Ibsen,0,2,2023-07-20 10:28:59+00:00,2023-12-05 13:44:12+00:00,"<graal-sdk-version>22.3.2</graal-sdk-version>


We should upgrade to 23, but it likely depends on what version SB use","davsclaus:1690161766:2023-07-24T09:22:46.835+0000:1690161766:2023-07-24T09:22:46.835+0000:[~essobedo] do you happen to know what SB 3.1.x uses/recommend
nfilotto:1690163198:2023-07-24T09:46:38.906+0000:1690163198:2023-07-24T09:46:38.906+0000:I cannot find any official note about it but according to the source code, they still use v 22.3.1 https://github.com/spring-projects/spring-framework/blob/main/framework-platform/framework-platform.gradle#L127
nfilotto:1690163430:2023-07-24T09:50:30.439+0000:1690163495:2023-07-24T09:51:35.920+0000:Knowing their [very strict upgrade policy|https://github.com/spring-projects/spring-boot/wiki/Supported-Versions#third-party-dependencies], don't expect any upgrade to 23.0 in Spring Boot 3.1 / Spring 6.0
davsclaus:1700699068:2023-11-23T08:24:28.276+0000:1700699068:2023-11-23T08:24:28.276+0000:Nicolas, we will upgrade to SB 3.2 when its released later today, so you are welcome to help with this if you want"
0,CAMEL-19630,Task,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-20 09:55:51+00:00,2023-07-20 10:25:22+00:00,Same as with camel-weka,
0,CAMEL-19629,Task,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-20 09:55:17+00:00,2023-07-20 10:25:26+00:00,"camel-weka is not really much in use and the Java JARs are not in maven central but published specially to jboss repo.


Last update of this JAR is from 2020",
0,CAMEL-19628,Task,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-20 09:34:53+00:00,2023-07-20 11:46:10+00:00,"https://github.com/apache/camel-quarkus/pull/5065/files
https://github.com/apache/camel-quarkus/blob/main/.mvn/rrf/groupId-atlassian.txt#L7","davsclaus:1689817643:2023-07-20T09:47:23.607+0000:1689817643:2023-07-20T09:47:23.607+0000:Okay we also need to restrict

Downloading from jboss.thirdparty: https://repository.jboss.org/nexus/service/local/repositories/thirdparty-releases/content/com/google/api/gax-bom/2.31.0/gax-bom-2.31.0.pom
Downloading from google-maven-central-copy: https://maven-central.storage-download.googleapis.com/maven2/com/google/api/gax-bom/2.31.0/gax-bom-2.31.0.pom
Downloaded from google-maven-central-copy: https://maven-central.storage-download.googleapis.com/maven2/com/google/api/gax-bom/2.31.0/gax-bom-2.31.0.pom (4.3 kB at 185 kB/s)
Downloading from jboss.thirdparty: https://repository.jboss.org/nexus/service/local/repositories/thirdparty-releases/content/com/google/cloud/google-cloud-core-bom/2.21.0/google-cloud-core-bom-2.21.0.pom
davsclaus:1689819100:2023-07-20T10:11:40.518+0000:1689819100:2023-07-20T10:11:40.518+0000:We need to move atlassian repo from root pom to camel-jira (and camel-endpointdsl)
davsclaus:1689820041:2023-07-20T10:27:21.125+0000:1689820041:2023-07-20T10:27:21.125+0000:Also camel-spring-boot may have 3rd party maven repos we can remove/change
davsclaus:1689823307:2023-07-20T11:21:47.605+0000:1689823307:2023-07-20T11:21:47.605+0000:Okay so atlassian repo is now defined at

- camel-jira
- camel-endpointdsl
- docs"
0,CAMEL-19627,Improvement,Minor,None,"3.20.7, 3.21.1, 3.22.0, 4.0.0","

easy

",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Unassigned,James Netherton,0,3,2023-07-20 09:27:02+00:00,2023-08-08 14:23:39+00:00,"See background to this ticket here:


https://github.com/apache/camel-quarkus/issues/5107


Seems in some scenarios it is desirable to not provide a password together with a username. The current way the component code is written expects both to be provided.","davsclaus:1689989983:2023-07-22T09:39:43.531+0000:1689989983:2023-07-22T09:39:43.531+0000:[~orpiske] here is a good beginner ticket
orpiske:1690068166:2023-07-23T07:22:46.527+0000:1690068166:2023-07-23T07:22:46.527+0000:Thanks, this is a good one, indeed! "
0,CAMEL-19626,Dependency upgrade,Minor,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-07-20 09:02:23+00:00,2023-08-07 18:40:50+00:00,"The API based components in camel-google (drive, sheets, calendar, etc.) are in need of updating to latest versions from Google.",
0,CAMEL-19625,Dependency upgrade,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-20 06:12:49+00:00,2023-07-20 08:31:57+00:00,We have some maven plugins that use very old plexus-utils from sonatype. This should be migrated to use the one from codehaus which is what all the other stuff is using.,
0,CAMEL-19624,Dependency upgrade,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-07-19 19:03:08+00:00,2023-07-22 09:52:52+00:00,"org.apache.derby:derby ( from 10.14.2.0 to 10.16.1.1 )


It may be that embedded derby is changed a bit so the upgrade may require some changes in affected components",davsclaus:1689990019:2023-07-22T09:40:19.941+0000:1689990019:2023-07-22T09:40:19.941+0000:https://github.com/apache/camel/pull/10781
0,CAMEL-19623,Sub-task,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-07-19 16:35:44+00:00,2023-11-22 20:00:00+00:00,This requires jkube to make it possible to generate yaml manifest for health probes for general apps (they have special for SB or Quarkus).,
0,CAMEL-19622,Test,Major,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-07-19 14:48:31+00:00,2023-11-10 09:35:52+00:00,"As part of CAMEL-18957 we introduced a JUnit 5 extension that can inject a CamelContext into the tests. This moves the management of the context lifecycle to JUnit and can simplify debugging the code. Although it is not a drop-in replacement to the CamelTestSupport, a conversion guide covering the basics of the process is available along with the test infra code.


Â 


The following components need to be converted:



camel-componentdsl
camel-endpointdsl
camel-dsl-modeline
camel-xml-io-dsl - IN PROGRESS",orpiske:1699580124:2023-11-10T09:35:24.922+0000:1699580124:2023-11-10T09:35:24.922+0000:This is on hold for now. Waiting for more work on CAMEL-19742.
0,CAMEL-19621,Task,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-07-19 14:41:06+00:00,2023-07-19 14:43:22+00:00,"This component is not really much in use, and has no use in SB or Quarkus and in modern apps. Its difficult to maintain as its use the huge complex elytryon project that are tied to EAP/WildFly.",
0,CAMEL-19620,Dependency upgrade,Minor,None,4.x,"

help-wanted

",Open,Unresolved,4.x,Unassigned,Claus Ibsen,0,1,2023-07-19 14:16:12+00:00,2024-01-19 18:09:12+00:00,"We use 2.x now, and would be good to upgrade to v3",
0,CAMEL-19619,Bug,Minor,3.14.9,,"
None
",Resolved,Information Provided,None,Unassigned,Kartik,0,2,2023-07-19 14:05:06+00:00,2023-07-19 16:33:05+00:00,"I have used throttle in the camel Kafka route to control the message flow and I have 10 routes running initially there will be no throttle thread created as soon as the message comes to the Kafka topic and read huge number of throttle threads are created.


Â 


For 10 routes I see 88 throttle ""threads"" threads created and are doing no work.


Â 





Â 





Â 


Stack trace of each throttle thread.
""Camel (InfaDefaultCamelContext) thread #51 - Throttle"" #135 daemon prio=5 os_prio=0 tid=0x000001dfee834000 nid=0x2dbc waiting on condition [0x000000d5a2dff000]
Â  Â java.lang.Thread.State: WAITING (parking)
Â  Â  Â  Â  at sun.misc.Unsafe.park(Native Method)
Â  Â  Â  Â  - parking to wait forÂ  <0x000000073da9aaf0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
Â  Â  Â  Â  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
Â  Â  Â  Â  at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2044)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1088)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
Â  Â  Â  Â  at java.lang.Thread.run(Thread.java:750)
Â 
Â  Â Locked ownable synchronizers:
Â  Â  Â  Â  - None
Â 
""Camel (InfaDefaultCamelContext) thread #50 - Throttle"" #134 daemon prio=5 os_prio=0 tid=0x000001dfee835800 nid=0x71d4 waiting on condition [0x000000d5a2cfe000]
Â  Â java.lang.Thread.State: WAITING (parking)
Â  Â  Â  Â  at sun.misc.Unsafe.park(Native Method)
Â  Â  Â  Â  - parking to wait forÂ  <0x000000073db8c0c0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
Â  Â  Â  Â  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
Â  Â  Â  Â  at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2044)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1088)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
Â  Â  Â  Â  at java.lang.Thread.run(Thread.java:750)
Â 
Â  Â Locked ownable synchronizers:
Â  Â  Â  Â  - None
Â 
""Camel (InfaDefaultCamelContext) thread #49 - Throttle"" #133 daemon prio=5 os_prio=0 tid=0x000001dfee82b000 nid=0x5574 waiting on condition [0x000000d5a2bfe000]
Â  Â java.lang.Thread.State: WAITING (parking)
Â  Â  Â  Â  at sun.misc.Unsafe.park(Native Method)
Â  Â  Â  Â  - parking to wait forÂ  <0x000000073de977d8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
Â  Â  Â  Â  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
Â  Â  Â  Â  at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2044)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1088)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
Â  Â  Â  Â  at java.lang.Thread.run(Thread.java:750)
Â 
Â  Â Locked ownable synchronizers:
Â  Â  Â  Â  - None
Â 
""Camel (InfaDefaultCamelContext) thread #48 - Throttle"" #132 daemon prio=5 os_prio=0 tid=0x000001dff3b5e800 nid=0x60cc waiting on condition [0x000000d5a2aff000]
Â  Â java.lang.Thread.State: WAITING (parking)
Â  Â  Â  Â  at sun.misc.Unsafe.park(Native Method)
Â  Â  Â  Â  - parking to wait forÂ  <0x000000073e02bf60> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
Â  Â  Â  Â  at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
Â  Â  Â  Â  at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2044)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1088)
Â  Â  Â  Â  at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
Â  Â  Â  Â  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
Â  Â  Â  Â  at java.lang.Thread.run(Thread.java:750)
Â 
Â  Â Locked ownable synchronizers:
Â  Â  Â  Â  - None
Â 


Any idea if this is a leak or configuration issue","davsclaus:1689747034:2023-07-19T14:10:34.752+0000:1689747034:2023-07-19T14:10:34.752+0000:Can you show your camel route what you do
kartikvk1996:1689747777:2023-07-19T14:22:57.105+0000:1689748652:2023-07-19T14:37:32.051+0000:Â 
{code:java}
// code placeholder
from(aEndpoint)
Â  Â  Â  Â  Â  Â  Â  .routeId(aRouteId)
Â  Â  Â  Â  Â  Â  Â  .autoStartup(false)
Â  Â  Â  Â  Â  Â  Â  .setProperty(ICamelConstants.CAMEL_ROUTE_CONFIG_MAP, constant(aRouteConfigMap))
Â  Â  Â  Â  Â  Â  Â  
              .throttle(new ExpressionAdapter()
Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â /**
Â  Â  Â  Â  Â  Â  Â  Â  Â  * @param exchange
Â  Â  Â  Â  Â  Â  Â  Â  Â  * @return Allowed count
Â  Â  Â  Â  Â  Â  Â  Â  Â  */
Â  Â  Â  Â  Â  Â  Â  Â  Â @Override
Â  Â  Â  Â  Â  Â  Â  Â  Â public Object evaluate(Exchange exchange)
Â  Â  Â  Â  Â  Â  Â  Â  Â {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return OnethrottlerProperties.getOrDefault(ICamelConstants.THROTTLE_COUNT, 5000);
Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â  }, new ExpressionAdapter()
Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â /**
Â  Â  Â  Â  Â  Â  Â  Â  Â  * @param exchange Camel exchange
Â  Â  Â  Â  Â  Â  Â  Â  Â  * @return for correlation
Â  Â  Â  Â  Â  Â  Â  Â  Â  */
Â  Â  Â  Â  Â  Â  Â  Â  Â @Override
Â  Â  Â  Â  Â  Â  Â  Â  Â public Object evaluate(Exchange exchange)
Â  Â  Â  Â  Â  Â  Â  Â  Â {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return aRouteConfigMap.getOrDefault(ICamelConstants.USER, ""default""); 
Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  .asyncDelayed((Boolean) OnethrottlerProperties.getOrDefault(ICamelConstants.THROTTLE_IS_ASYNC_DELAYED, true))
Â  Â  Â  Â  Â  Â  Â  .timePeriodMillis((Integer) OnethrottlerProperties.getOrDefault(ICamelConstants.THROTTLE_TIME_PERIOD_MILLIS, 1000 * 60))
Â  Â  Â  Â  Â  Â  Â  

              .throttle(new ExpressionAdapter()
Â  Â  Â  Â  Â  Â  Â  {
Â  Â  Â  Â  Â  Â  Â  Â  Â @Override
Â  Â  Â  Â  Â  Â  Â  Â  Â public Object evaluate(Exchange exchange)
Â  Â  Â  Â  Â  Â  Â  Â  Â {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return TwothrottlerProperties.getOrDefault(ICamelConstants.THROTTLE_COUNT, 100);
Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  Â  Â  Â  .asyncDelayed((Boolean) TwothrottlerProperties.getOrDefault(ICamelConstants.THROTTLE_IS_ASYNC_DELAYED, true))
Â  Â  Â  Â  Â  Â  Â  .timePeriodMillis((Integer) TwothrottlerProperties.getOrDefault(ICamelConstants.THROTTLE_TIME_PERIOD_MILLIS, 1000 * 60))
Â  Â  Â  Â  Â  Â  Â  .process((AsyncProcessor) aRouteConfigMap.get(ICamelConstants.IDEMPOTENCY_HEADER_GENERATE_PROCESSOR))
Â  Â  Â  Â  Â  Â  Â  .idempotentConsumer(header(ICamelConstants.MESSAGE_ID), (IdempotentRepository) aRouteConfigMap.get(ICamelConstants.IDEMPOTENT_REPOSITORY)); {code}
Â 

""aEndpoint"" is a function argument that is constructed using ""Kafka"" component by passing all topic and broker information.

So we have 2 throttles injected in route one is at the user level which uses ""username"" to correlate and group it and another at each connection.Â 

Â 

!image-2023-07-19-20-05-52-306.png|width=429,height=210!

We can have multiple users who starts multiple routes so to provide fair resource to all, we have 2 level throttle first one at user level which is limited to 5000 messages and each route under this is given 100 message.
davsclaus:1689748793:2023-07-19T14:39:53.039+0000:1689748793:2023-07-19T14:39:53.039+0000:Well each throttler has a thread pool (scheduled) that by default has 10 core threads. You can configure this see the threading docs - or provide a shared thread pool for them to reuse.

kartikvk1996:1689749964:2023-07-19T14:59:24.310+0000:1689749964:2023-07-19T14:59:24.310+0000:So according to you, each route will spin 2 thread pool each with 10 threads as we have 2 throttles; also I want to know why the thread is needed for throttling. we can use one polling thread at regular intervals which resumes the consumer if time has elapsed and the consumer will block itself if exceeded the limit after processing the exchange. Also can't we use something like Quartz scheduler triggers? Looks like an enhancement to me.

Meanwhile, if I provide a shared thread pool with 4 threads in the pool and 4 of my user consumes more messages than allowed and are blocked what happens to the 5th user when he/she exhausts the allowed limit as there are no thread to handle?
davsclaus:1689755578:2023-07-19T16:32:58.991+0000:1689755578:2023-07-19T16:32:58.991+0000:Please use the user mailing list or chat room for discussing. JIRA is not intended for that."
0,CAMEL-19618,Dependency upgrade,Minor,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-07-19 13:42:29+00:00,2023-08-07 16:20:55+00:00,We use an older v2 java-sdk and should upgrade to v4,
0,CAMEL-19617,Dependency upgrade,Minor,None,,"
None
",Open,Unresolved,None,Unassigned,Claus Ibsen,0,1,2023-07-19 11:16:21+00:00,2023-07-19 11:16:21+00:00,"There is 1 unit test that fails with the upgrade


[ERROR] Failures:
[ERROR]   XmlSignatureTest.testSetTransformMethodXsltXpathInRouteDefinitionSecValDisabled:566 mock://result Received message count. Expected: <1> but was: <0>
[INFO]
[ERROR] Tests run: 186, Failures: 1, Errors: 0, Skipped: 8",
0,CAMEL-19616,Improvement,Minor,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-19 08:03:35+00:00,2023-07-19 13:36:51+00:00,"We should not configure any specific component in the generated code (users can specify in the plugin configuration).


Camel today has auto-discover and will use platform-http if found etc.",davsclaus:1689738639:2023-07-19T11:50:39.577+0000:1689738639:2023-07-19T11:50:39.577+0000:There is also some code generator for spring-boot with servlet that is no longer needed (as we use platform-http) now
0,CAMEL-19615,Improvement,Major,3.18.2,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"3.14.10, 3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0",Unassigned,Michael Rambichler,0,2,2023-07-19 07:42:40+00:00,2023-07-20 07:10:55+00:00,"We have a blocking issue with the current chmodDirectory option.


https://camel.apache.org/components/3.20.x/sftp-component.html#_endpoint_query_option_chmodDirectory


Â 


Steps to reproduce:


SFTP Directory: ../home/user/restricted/dir/subdir (where restricted e.g. does not have change rights for the current user)


Component Call:
""sftp://localhost:21/home/user/restricted/dir/subdir/newDir"" +
""?username=admin&password=admin&chmod=777&chmodDirectory=770""
Â 
Behaviour:
The current implementation steps down the directory and try to create each junk. If the chmodDirectory option is set then it will try for each (already existing junk) to change the directory permission and fails.
Â 
Expected Behaviour:
It should only try to change the permission if the directory does not yet exists
Â 
I have already created a fix and added a Testcase for better debugging (but the Testcase does not reproduce the error because it would remove the permission for the current user and afterwards your need root rights to delete the Testdirectory again. Not suitable pipeline builds)
https://github.com/michael-salzburg/camel","rambichler:1689723794:2023-07-19T07:43:14.947+0000:1689723794:2023-07-19T07:43:14.947+0000:If OK i can push my current fork into the branch.
davsclaus:1689724717:2023-07-19T07:58:37.274+0000:1689724717:2023-07-19T07:58:37.274+0000:You can send a PR with your code changes, thanks
rambichler:1689737793:2023-07-19T11:36:33.137+0000:1689743783:2023-07-19T13:16:23.823+0000:PR created: [https://github.com/apache/camel/pull/10730]

Â 
davsclaus:1689755318:2023-07-19T16:28:38.832+0000:1689755318:2023-07-19T16:28:38.832+0000:Thanks for the PR"
0,CAMEL-19614,Dependency upgrade,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-18 14:40:29+00:00,2023-07-19 09:09:22+00:00,"Unfortunately the model is not compatible in v1 to v2, and its a lot of pain to upgrade.",
0,CAMEL-19613,Test,Major,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-07-18 09:50:33+00:00,2023-11-10 09:37:01+00:00,"As part of CAMEL-18957 we introduced a JUnit 5 extension that can inject a CamelContext into the tests. This moves the management of the context lifecycle to JUnit and can simplify debugging the code. Although it is not a drop-in replacement to the CamelTestSupport, a conversion guide covering the basics of the process is available along with the test infra code.


Â 


The following components need to be converted:



camel-arangodb
camel-as2 (See CAMEL-19635)
camel-asn1
camel-asterisk
camel-atmosphere-websocket
camel-atom
camel-attachments
camel-avro
camel-avro-rpc
camel-aws
camel-azure
camel-barcode
camel-base64
camel-bean-validator
camel-bindy
camel-bonita
camel-box
camel-braintree
camel-caffeine
camel-cassandraql
camel-cbor
camel-chatscript
camel-chunk
camel-coap
camel-cometd
camel-consul
camel-corda
camel-couchbase
camel-couchdb
camel-cron
camel-crypto
camel-csimple-joor
camel-csv
camel-cxf
camel-datasonnet
camel-debezium
camel-dhis2
camel-digitalocean
camel-disruptor
camel-djl
camel-dns
camel-docker
camel-drill
camel-dropbox
camel-dynamic-router
camel-ehcache
camel-elasticsearch
camel-elytron
camel-etcd3
camel-exec
camel-facebook
camel-fastjson
camel-fhir
camel-file-watch
camel-flatpack
camel-flink
camel-fop
camel-freemarker
camel-ftp
camel-geocoder
camel-git
camel-github
camel-google
camel-graphql
camel-grok
camel-groovy
camel-grpc
camel-gson
camel-guava-eventbus
camel-hashicorp-vault
camel-hazelcast
camel-hdfs
camel-headersmap
camel-hl7
camel-http
camel-http-common
camel-huawei
camel-hyperledger-aries
camel-ical
camel-iec60870
camel-ignite
camel-infinispan
camel-influxdb
camel-influxdb2
camel-irc
camel-ironmq
camel-jackson
camel-jackson-avro
camel-jackson-protobuf
camel-jacksonxml
camel-jasypt
camel-javascript
camel-jaxb
camel-jcache
camel-jcr
camel-jdbc
camel-jetty
camel-jgroups
camel-jgroups-raft
camel-jira
camel-jms
camel-jmx
camel-jolt
camel-jooq
camel-joor
camel-jpa
camel-jq
camel-jsch
camel-jslt
camel-json-patch
camel-json-validator
camel-jsonapi
camel-jsonata
camel-jsonb
camel-jsonpath
camel-jt400
camel-kamelet
camel-kubernetes
camel-kudu
camel-ldif
camel-leveldb
camel-lra
camel-lucene
camel-lumberjack
camel-lzf
camel-mail
camel-mapstruct
camel-master
camel-metrics
camel-micrometer
camel-microprofile
camel-mina
camel-minio
camel-mllp
camel-mongodb
camel-mongodb-gridfs
camel-mustache
camel-mvel
camel-mybatis
camel-nats
camel-netty
camel-netty-http
camel-nitrite
camel-oaipmh
camel-observation
camel-ognl
camel-olingo2
camel-olingo4
camel-openapi-java
camel-opensearch
camel-openstack
camel-opentelemetry
camel-optaplanner
camel-paho
camel-paho-mqtt5
camel-parquet-avro
camel-pdf
camel-pg-replication-slot
camel-pgevent
camel-platform-http-vertx
camel-plc4x
camel-printer
camel-protobuf
camel-pubnub
camel-pulsar
camel-python
camel-quartz
camel-quickfix
camel-reactive-executor-tomcat
camel-reactive-executor-vertx
camel-reactive-streams
camel-reactor
camel-redis
camel-resilience4j
camel-resourceresolver-github
camel-rest-openapi
camel-robotframework
camel-rocketmq
camel-rss
camel-rxjava
camel-salesforce
camel-sap-netweaver
camel-saxon
camel-schematron
camel-servicenow
camel-servlet
camel-shiro
camel-sjms
camel-sjms2
camel-slack
camel-smpp
camel-snakeyaml
camel-snmp
camel-soap
camel-splunk
camel-splunk-hec
camel-spring-batch
camel-spring-jdbc
camel-spring-ldap
camel-spring-main
camel-spring-rabbitmq
camel-spring-redis
camel-spring-ws
camel-spring-xml
camel-sql
camel-ssh
camel-stax
camel-stitch
camel-stomp
camel-stream
camel-stringtemplate
camel-swift
camel-syslog
camel-tarfile
camel-telegram
camel-test
camel-threadpoolfactory-vertx
camel-thrift
camel-tika
camel-twilio
camel-twitter
camel-undertow
camel-undertow-spring-security
camel-univocity-parsers
camel-velocity
camel-vertx
camel-weather
camel-web3j
camel-webhook
camel-whatsapp
camel-wordpress
camel-workday
camel-xchange
camel-xj
camel-xmlsecurity
camel-xmpp
camel-xslt-saxon
camel-zeebe
camel-zendesk
camel-zip-deflater
camel-zipfile
camel-zookeeper","orpiske:1689731160:2023-07-19T09:46:00.913+0000:1689731160:2023-07-19T09:46:00.913+0000:Updated the list: there were a few components that had been incorrectly added. It should be fine now.
orpiske:1689814773:2023-07-20T08:59:33.362+0000:1689814783:2023-07-20T08:59:43.548+0000:A few folks pinged me about their interest in contributing with this issue. For now, there's a discussion in the dev mailing list about whether this is the way to go or not. So, I kindly suggest waiting for the outcome of that discussion before proceeding.
orpiske:1691973072:2023-08-14T08:31:12.972+0000:1691973072:2023-08-14T08:31:12.972+0000:We need to create more facilities to simplify the conversion.
orpiske:1699580202:2023-11-10T09:36:42.707+0000:1699580202:2023-11-10T09:36:42.707+0000:This is blocked by CAMEL-19742. We need more facilities to make the code simpler and easier to convert. "
0,CAMEL-19612,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-18 05:32:33+00:00,2023-07-18 05:33:05+00:00,No Desc,
0,CAMEL-19611,Test,Major,"4.0-M3, 4.0-RC1",,"
None
",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-07-17 14:42:03+00:00,2023-07-17 17:30:08+00:00,"The test ABCRoute is failing constantly with the following reason:


Â 




[ERROR] Failures:
[ERROR] Â  ABCRouteTest.testRoute:56->CamelAwsXRayTestSupport.verify:96 Incorrect name of subsegment. Expected seda:d but found: seda:d
Expected: is ""direct:a""
Â  Â  Â but: was ""seda:d""",
0,CAMEL-19610,Dependency upgrade,Minor,None,None,"
None
",Resolved,Fixed,4.0-RC2,Federico Mariani,Claus Ibsen,0,1,2023-07-17 13:18:03+00:00,2023-07-18 11:55:53+00:00,It seems it loads some native library so unit tests is not an easy upgrade,
0,CAMEL-19609,Test,Major,4.0-M3,4.0-RC2,"
None
",Resolved,Fixed,4.0-RC2,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-07-17 13:08:04+00:00,2023-07-17 14:47:13+00:00,"The test infra provided on camel-test-infra-hdfs is not based on containers, but the dependencies, classes and methods still make references to that. It needs to be fixed.","orpiske:1689570509:2023-07-17T13:08:29.336+0000:1689570509:2023-07-17T13:08:29.336+0000:Related ticket.
orpiske:1689576433:2023-07-17T14:47:13.770+0000:1689576433:2023-07-17T14:47:13.770+0000:Fixed with the linked ticket."
0,CAMEL-19608,New Feature,Major,None,None,"
None
",Open,Unresolved,Future,Andrea Cosentino,Andrea Cosentino,0,1,2023-07-17 09:32:32+00:00,2023-07-24 09:21:02+00:00,"https://open-services.net/


with Eclipse Lyo


https://github.com/eclipse/lyo",
0,CAMEL-19607,Bug,Major,3.20.6,"3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0",Claus Ibsen,Dmitrii Antonov,0,2,2023-07-14 10:44:19+00:00,2023-07-15 09:02:23+00:00,"The default error handler can have a reference to a redelivery policy, but the `DefaultErrorHandlerReifier` first calls the getter `getRedeliveryPolicy()`, which always returns or creates a redelivery policy.


from `DefaultErrorHandlerReifier`




Â  Â  private RedeliveryPolicy resolveRedeliveryPolicy(DefaultErrorHandlerDefinition definition, CamelContext camelContext) {
Â  Â  Â  Â  RedeliveryPolicy answer = null;
Â  Â  Â  Â  RedeliveryPolicyDefinition def = definition.getRedeliveryPolicy(); // THIS ROW
Â  Â  Â  Â  if (def != null)
{ Â  Â  Â  Â  Â  Â  answer = ErrorHandlerReifier.createRedeliveryPolicy(def, camelContext, null); Â  Â  Â  Â  }
Â  Â  Â  Â  if (def == null && definition.getRedeliveryPolicyRef() != null) { Â  Â  Â  Â  Â  Â  answer = mandatoryLookup(definition.getRedeliveryPolicyRef(), RedeliveryPolicy.class); Â  Â  Â  Â  }
Â  Â  Â  Â  if (answer == null) { Â  Â  Â  Â  Â  Â  answer = RedeliveryPolicy.DEFAULT_POLICY; Â  Â  Â  Â  }
Â  Â  Â  Â  return answer;
Â  Â  }




from `DefaultErrorHandlerDefinition`





Â  Â  public RedeliveryPolicyDefinition getRedeliveryPolicy() {
Â  Â  Â  Â  if (redeliveryPolicy == null) { Â  Â  Â  Â  Â  Â  redeliveryPolicy = createRedeliveryPolicy(); Â  Â  Â  Â  }
Â  Â  Â  Â  return redeliveryPolicy;
Â  Â  }



That is, the execution will never reach the check of the code for the presence of a link. Therefore, I assume that the link to the redelivery policy does not work in the default handler.


I assume a similar problem in other types of handlers with redeliverty, for example, in `DeadLetterChannelReifier`


Â  Â 




private RedeliveryPolicy resolveRedeliveryPolicy(DeadLetterChannelDefinition definition, CamelContext camelContext) {
Â  Â  Â  Â  RedeliveryPolicy answer = null;
Â  Â  Â  Â  RedeliveryPolicyDefinition def = definition.getRedeliveryPolicy();
Â  Â  Â  Â  if (def == null && definition.getRedeliveryPolicyRef() != null) { Â // FIRST CHECK THE REF!! Â  Â  Â  Â  Â  Â  // ref may point to a definition Â  Â  Â  Â  Â  Â  def = lookupByNameAndType(definition.getRedeliveryPolicyRef(), RedeliveryPolicyDefinition.class); Â  Â  Â  Â  }
Â  Â  Â  Â  if (def != null) { Â  Â  Â  Â  Â  Â  answer = ErrorHandlerReifier.createRedeliveryPolicy(def, camelContext, null); Â  Â  Â  Â  }
Â 
Â  Â  Â  Â  if (def == null && definition.getRedeliveryPolicyRef() != null)
{ Â  Â  Â  Â  Â  Â  answer = mandatoryLookup(definition.getRedeliveryPolicyRef(), RedeliveryPolicy.class); Â  Â  Â  Â  }
Â  Â  Â  Â  if (answer == null)
{ Â  Â  Â  Â  Â  Â  answer = RedeliveryPolicy.DEFAULT_POLICY; Â  Â  Â  Â  }
Â  Â  Â  Â  return answer;
Â  Â  }




it inherits `DefaultErrorHandlerDefinition` without overriding `getRedeliveryPolicy`
```java
public class DeadLetterChannelDefinition extends DefaultErrorHandlerDefinition
```
Â 
https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Possible.20bug.20while.20checking.20redelivery.20reference","davsclaus:1689336699:2023-07-14T20:11:39.828+0000:1689336699:2023-07-14T20:11:39.828+0000:Thanks for reporting, yeah this looks wrong at first sight
davsclaus:1689340399:2023-07-14T21:13:19.810+0000:1689340399:2023-07-14T21:13:19.810+0000:Okay so this seems to be for Java DSL and only when using redeliveryPolicyRef to refer to another policy"
0,CAMEL-19606,Dependency upgrade,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-07-14 09:01:29+00:00,2023-07-20 16:37:50+00:00,No Desc,
0,CAMEL-19605,Dependency upgrade,Minor,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Thomas Diesler,Claus Ibsen,0,2,2023-07-12 18:24:46+00:00,2023-07-14 05:30:21+00:00,Thomas do you mind upgrading camel-xchange to 5.1.x as it has some API changes,"tdiesler:1689209780:2023-07-13T08:56:20.311+0000:1689209780:2023-07-13T08:56:20.311+0000:sure, will do
tdiesler:1689233146:2023-07-13T15:25:46.838+0000:1689233146:2023-07-13T15:25:46.838+0000:PR: https://github.com/apache/camel/pull/10680"
0,CAMEL-19604,Test,Major,4.0-RC2,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Otavio Rodolfo Piske,0,2,2023-07-12 13:57:04+00:00,2023-07-12 14:39:09+00:00,"The changes for CAMEL-19593 likely broke the camel-knative component. The tests are not working and hanging on the CI.


Â 


Reference commit: https://github.com/apache/camel/commit/65df9848c8ba4cd479d98537a4ec30bc699b8759","davsclaus:1689143780:2023-07-12T14:36:20.317+0000:1689143780:2023-07-12T14:36:20.317+0000:Its just the test, fixing it now"
0,CAMEL-19603,Bug,Major,None,"3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0",Claus Ibsen,Andrea Cosentino,0,2,2023-07-12 13:14:07+00:00,2023-07-14 09:55:38+00:00,"When we introduced the secret refresh feature we add the concept of @PeriodicTask, essentially we schedule the task every period seconds and add it to a scheduler in BaseMainSupport. 


While for Camel-jbang, through camel-main, everything is working fine. For Quarkus and Spring-Boot the task is never called, with the exact same configuration of the working one on main.


cc Claus Ibsen","davsclaus:1689212301:2023-07-13T09:38:21.823+0000:1689212301:2023-07-13T09:38:21.823+0000:Andrea, do you have an example somewhere
acosentino:1689212950:2023-07-13T09:49:10.348+0000:1689212950:2023-07-13T09:49:10.348+0000:The only thing I've tried is by exporting this project: https://github.com/apache/camel-kamelets-examples/tree/main/jbang/postgresql-gcp-secret-refresh

I exported that to SB and Quarkus with something like

{code:java}
jbang -Dcamel.jbang.version=4.0.0-RC1 camel@apache/camel export --secrets-refresh --secrets-refresh-providers=gcp --runtime=spring-boot --gav=com.github.oscerd:gcp-test:1.0-SNAPSHOT  --directory=/home/oscerd/workspace/gcp-quarkus/ --spring-boot-version=3.1.1 postgresql-log.yaml gcp-sec-refresh.properties
{code}

and then move the gcp-sec-refresh.properties into application.properties

It could also be enough to run this

https://github.com/apache/camel-spring-boot-examples/tree/main/aws-secrets-manager

but adding the following properties to the application.properties


{code:java}
camel.vault.aws.refreshEnabled=true
camel.vault.aws.refreshPeriod=60000
camel.vault.aws.secrets=Secret
camel.main.context-reload-enabled = true
{code}


but you will always need to create the secret on AWS Secrets Manager

davsclaus:1689217654:2023-07-13T11:07:34.032+0000:1689217654:2023-07-13T11:07:34.032+0000:Try with

camel.springboot.context-reload-enabled = true

As you need to use camel.springboot instead of camel.main when using SB
acosentino:1689220244:2023-07-13T11:50:44.761+0000:1689220252:2023-07-13T11:50:52.078+0000:It was already there the file is

{code:java}
camel.springboot.sourceLocationEnabled=true
camel.springboot.modeline=true
camel.vault.gcp.projectId=...
camel.vault.gcp.serviceAccountKey = ...
camel.vault.gcp.refreshEnabled=true
camel.vault.gcp.refreshPeriod=10000
camel.vault.gcp.secrets=database*
camel.vault.gcp.subscriptionName=sub-gcp-sec-refresh
camel.springboot.context-reload-enabled=true
{code}

acosentino:1689220272:2023-07-13T11:51:12.218+0000:1689220272:2023-07-13T11:51:12.218+0000:It doesn't call the refresh task
davsclaus:1689224559:2023-07-13T13:02:39.153+0000:1689224559:2023-07-13T13:02:39.153+0000:Okay lets look at this tomorrow
davsclaus:1689299738:2023-07-14T09:55:38.841+0000:1689299738:2023-07-14T09:55:38.841+0000:Okay so I have fixed this - the configureVault needed to be called when you run outside camel-jbang/camel-main. Setting these options was correct already by SB starter"
0,CAMEL-19602,Improvement,Minor,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-11 17:33:22+00:00,2023-07-13 09:04:12+00:00,"We should markup the options on various components that refer to a resource such as a file or from classpath.


For example the sql component can refer to a file with the SQL script etc.
And so can velocity and several others.","davsclaus:1689204684:2023-07-13T07:31:24.034+0000:1689204684:2023-07-13T07:31:24.034+0000:The json schema now has

""supportFileReference"": true

for options that support this. "
0,CAMEL-19601,New Feature,Major,None,"3.22.0, 4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"3.22.0, 4.0-RC2, 4.0.0",Claus Ibsen,Nicolas Filotto,0,3,2023-07-11 16:38:25+00:00,2023-07-13 12:33:36+00:00,"When stream caching is enabled which is the case by default since 3.17, all body types that can be converted into a StreamCache are automatically converted which could be a problem when the body type is not a stream and we don't want to have the body as a stream.


For example, if we use a CXF producer, the resulting body is of type Response but when the stream caching is enabled, it is automatically converted into StreamCache so we have no more access to the rest of the data available in Response, in other words, we somehow lost info.


The goal of this improvement is to find a way to limit the auto conversation to StreamCache to some specific classes like subclasses of StreamSource, InputStream and Reader, to avoid converting unwanted types just because a converter exists.


One way could be to provide a list of allowed classes.","davsclaus:1689220645:2023-07-13T11:57:25.089+0000:1689220645:2023-07-13T11:57:25.089+0000:You can now configure allowClasses and denyClasses on stream caching strategy

- camel-main
- camel-spring-boot
- camel-quarkus
- XML DSL


davsclaus:1689220807:2023-07-13T12:00:07.754+0000:1689220989:2023-07-13T12:03:09.761+0000:TODO: cherry pick 792a8948cf8eb77fb70fa9f9df1357a1502455f3 to main *DONE*"
0,CAMEL-19600,Task,Major,None,"4.0-RC2, 4.0.0","

easy

",Resolved,Fixed,"4.0-RC2, 4.0.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-07-11 14:02:54+00:00,2023-07-17 09:03:38+00:00,"It seems that there are a few minor cleanups that we can do on the tests for the camel-atom component. For instance, there seems to exist a few grammar problems, lack of usage of final variables, memory problems and other minor items that could make the tests cleaner and leaner.",orpiske:1689555818:2023-07-17T09:03:38.024+0000:1689555818:2023-07-17T09:03:38.024+0000:Fixed with the linked PR.
0,CAMEL-19599,New Feature,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-11 09:27:47+00:00,2023-07-19 16:44:36+00:00,"It should be possible to export to plain Camel Main and have k8s supported builds and manifests via well known maven plugins (jkube and jib).


This allows end users to choose CSB, CEQ or pure Camel.","davsclaus:1689051485:2023-07-11T12:58:05.512+0000:1689755755:2023-07-19T16:35:55.208+0000:TODO: health-check (probes) *SUB TICKET*
TODO: docs in camel-jbang"
0,CAMEL-19598,Task,Major,None,,"

easy

",Resolved,Fixed,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-07-10 13:20:16+00:00,2023-07-17 09:04:54+00:00,"It seems that there are a few minor cleanups that we can do on the tests for the camel-amqp component. For instance, there seems to exist a few grammar problems, lack of usage of final variables, memory problems and other minor items that could make the tests cleaner and leaner.","nikita_konovalov:1689049963:2023-07-11T12:32:43.683+0000:1689049963:2023-07-11T12:32:43.683+0000:I want to take this ticket
orpiske:1689555894:2023-07-17T09:04:54.888+0000:1689555894:2023-07-17T09:04:54.888+0000:Resolved with the linked PR."
0,CAMEL-19597,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.0.0,Unassigned,Claus Ibsen,0,1,2023-07-10 12:40:23+00:00,2023-08-08 04:31:50+00:00,"Lets see if we can upgrade some more of these dependencies
https://gist.github.com/jamesnetherton/023a95668adbed8beb3271667ee398f4","davsclaus:1689587943:2023-07-17T17:59:03.204+0000:1689587943:2023-07-17T17:59:03.204+0000:We have upgraded a lot of dependencies. A few major upgrades are harder to do, and we should create JIRA tickets for those that we cannot do before v4 GA
davsclaus:1689911736:2023-07-21T11:55:36.189+0000:1689911736:2023-07-21T11:55:36.189+0000:There is only 31 elements on the list today
davsclaus:1691057016:2023-08-03T18:03:36.632+0000:1691057016:2023-08-03T18:03:36.632+0000:There are 52 elements on the list today
davsclaus:1691404880:2023-08-07T18:41:20.244+0000:1691404880:2023-08-07T18:41:20.244+0000:> io.etcd:jetcd-launcher ( from 0.7.5 to 0.7.6 ), io.etcd:jetcd-core ( from 0.7.5 to 0.7.6 )
This causes a test failure"
0,CAMEL-19596,Dependency upgrade,Minor,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-07-10 12:34:01+00:00,2023-07-10 12:35:51+00:00,No Desc,
0,CAMEL-19595,Dependency upgrade,Minor,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-10 12:32:25+00:00,2023-07-10 12:32:54+00:00,No Desc,
0,CAMEL-19594,Dependency upgrade,Minor,3.21.0,"3.21.1, 3.22.0, 4.0-RC2, 4.0.0","

easy

",Resolved,Fixed,"3.21.1, 3.22.0, 4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-10 09:05:53+00:00,2023-07-16 08:58:22+00:00,No Desc,
0,CAMEL-19593,New Feature,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,2,2023-07-10 08:45:52+00:00,2023-07-10 11:34:23+00:00,"The web console we have built as part of camel-jbang can become standalone for camel-main applications and then reused in camel-jbang.


This allows end users to use this for non jbang as well.
And we can make this console a part of CSB as well (and maybe in CEQ until they developer a more Quarkus standard console for Camel)",
0,CAMEL-19592,Improvement,Major,3.21.0,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Marat Gubaidullin,0,2,2023-07-07 19:07:00+00:00,2023-07-11 09:27:57+00:00,"Simple rest service:




- rest:
    id: rest-f5bd
    get:
      - id: get-42e8
        path: /demo
        to: direct:demo
- route:
    id: demo
    from:
      uri: direct
      id: from-7fa8
      parameters:
        name: demo
      steps:
        - setBody:
            id: setBody-064f
            expression:
              simple:
                expression: Hello
                id: simple-6888




1. When run with jbang works fine.
2. When export to with `camel.jbang.runtime=camel-main` and `mvn clean package` and `java -jar target/xxx-runner.jar` throws an exception:




2023-07-07 15:03:34.036 ERROR 59377 --- [           main] el.impl.engine.AbstractCamelContext : Error starting CamelContext (camel-1) due to exception thrown: No bean could be found in the registry for: platform-http-router of type: org.apache.camel.component.platform.http.vertx.VertxPlatformHttpRouter
org.apache.camel.NoSuchBeanException: No bean could be found in the registry for: platform-http-router of type: org.apache.camel.component.platform.http.vertx.VertxPlatformHttpRouter
        at org.apache.camel.support.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:240) ~[karavan-1-runner.jar:?]
        at org.apache.camel.component.platform.http.vertx.VertxPlatformHttpRouter.lookup(VertxPlatformHttpRouter.java:290) ~[karavan-1-runner.jar:?]
        at org.apache.camel.component.platform.http.vertx.VertxPlatformHttpConsumer.doInit(VertxPlatformHttpConsumer.java:99) ~[karavan-1-runner.jar:?]
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83) ~[karavan-1-runner.jar:?]
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111) ~[karavan-1-runner.jar:?]
        at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:113) ~[karavan-1-runner.jar:?]
        at org.apache.camel.component.platform.http.PlatformHttpConsumer.doStart(PlatformHttpConsumer.java:53) ~[karavan-1-runner.jar:?]
        at org.apache.camel.support.service.BaseService.start(BaseService.java:119) ~[karavan-1-runner.jar:?]","davsclaus:1688733735:2023-07-07T20:42:15.253+0000:1688733796:2023-07-07T20:43:16.998+0000:Yeah we need a camel-platform-http-main that creates the vertx http server (like we do in camel-kamelet-main).

Then we could let camel-kamelet-main use this as well (so its the same)"
0,CAMEL-19591,Bug,Minor,3.21.0,,"
None
",Resolved,Not A Bug,None,Claus Ibsen,Marco Bungart,0,2,2023-07-07 14:59:28+00:00,2023-08-01 09:37:22+00:00,"Whe using ...to(jms(...)....clientId(""some-client-id""))..., in combination with the artemis jms client, the clientId is neither sent nor considered for durable subscriptions.


Reproducer:



Checkout https://github.com/turing85/camel-jms:


git clone https://github.com/turing85/camel-jms.git
cd camel-jms






Start artemis:


docker-compose --file local-deployment/docker-compose.yml up --detach






Build the application:


./mvnw clean package






Start the application:


java -jar target/camel-jms-1.0-SNAPSHOT-executable-jar.jar






Observe that the application is sending and receiving messages
Access the Artemis web ui at http://localhost:8161/console, log in with any credentials (Artemis is running in dev mode; the credentials will not be verified)
Switch to the ""Connections""-tab, observe that the client has no clientId set:

Navigate to broker -> addresses -> numbers -> queues -> multicast, observe that the queue is named ""receiver-subscription"", which is the subscription name configured. However, it should be a combination of the client id (which is set to ""receiver-client"") and the subscription name:","davsclaus:1688713250:2023-07-07T15:00:50.042+0000:1688713250:2023-07-07T15:00:50.042+0000:You need to report this to Apache Artemis as its likely some broker stuff as camel-jms is standard JMS and works with other JMS brokers
turing85:1688718705:2023-07-07T16:31:45.113+0000:1688718705:2023-07-07T16:31:45.113+0000:I don't think it is. I have a sample project with quarkus (without camel) and the same client version. There, everything works as expected. I can post the sample later. 
turing85:1688739967:2023-07-07T22:26:07.694+0000:1688739989:2023-07-07T22:26:29.993+0000:[Here|https://github.com/turing85/quarkus-jms] is the quarkus-reproducer without camel that propagates the client-id correctly:

!working.png!

The client-id is set on the {{JMSContext}} [here (sender)|https://github.com/turing85/quarkus-jms/blob/main/sender/src/main/java/de/turing85/PeriodicSender.java#L42] and [here (receiver).|https://github.com/turing85/quarkus-jms/blob/main/receiver/src/main/java/de/turing85/JmsReceiveRoute.java#L48]
turing85:1688741167:2023-07-07T22:46:07.021+0000:1688741185:2023-07-07T22:46:25.842+0000:qpid in version {{1.10.0}}Â behave incorrectly as well. Reproducer: [https://github.com/turing85/camel-jms/tree/qpid]

There is some client-id set, but not the one specified in the route, and the queue is also prefixed with {{{}:global{}}}, not the client-id:

!qpid.png!
turing85:1688741957:2023-07-07T22:59:17.667+0000:1688741957:2023-07-07T22:59:17.667+0000:[Here|https://github.com/turing85/quarkus-jms/tree/qpid] is a reproducer with quarkus and qpid, without camel. This one also sets the client-id correctly, and creates the queue name based on the client-id and the subscription-name:

!qpid-working.png!

Â 
davsclaus:1690853413:2023-08-01T09:30:13.966+0000:1690853413:2023-08-01T09:30:13.966+0000:quarkus does not use camel-jms (aka spring-jms) and its a different JMS component
davsclaus:1690853832:2023-08-01T09:37:12.416+0000:1690853832:2023-08-01T09:37:12.416+0000:Okay its because you have CACHE_NONE in the cache level, use AUTO or default value then it works"
0,CAMEL-19590,New Feature,Minor,3.14.0,,"
None
",Resolved,Invalid,None,Unassigned,Prasanth Ganesh Rao,0,2,2023-07-07 06:16:32+00:00,2023-07-10 03:18:56+00:00,I am trying to use camel-quartz in a clustered setup where the possibility of using a DBStore for managing execution is not available. I am looking for a mechanism to intercept the execution within the CamelJob to skip the execution/ creation of exchange if the trigger was handled on another cluster instance. Existing documentation and codebase do not seem to provide such a mechanism. Can there be a mechanism to allow a custom check to skip execution before the trigger? One the consumer can contribute.,"acosentino:1688698166:2023-07-07T10:49:26.327+0000:1688698166:2023-07-07T10:49:26.327+0000:This is a question for mailing list or zulip chat. 
pgrao:1688930336:2023-07-10T03:18:56.338+0000:1688930336:2023-07-10T03:18:56.338+0000:https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/camel-quartz"
0,CAMEL-19589,Dependency upgrade,Major,None,4.0-RC2,"
None
",Resolved,Fixed,4.0-RC2,Otavio Rodolfo Piske,Claus Ibsen,0,2,2023-07-07 06:15:57+00:00,2023-07-18 14:28:12+00:00,No Desc,"davsclaus:1689587910:2023-07-17T17:58:30.687+0000:1689587910:2023-07-17T17:58:30.687+0000:[~orpiske] is this something you can help with
orpiske:1689632145:2023-07-18T06:15:45.715+0000:1689632145:2023-07-18T06:15:45.715+0000:[~davsclaus] I'll take a look at it.
orpiske:1689661692:2023-07-18T14:28:12.259+0000:1689661692:2023-07-18T14:28:12.259+0000:Fixed with the linked PR."
0,CAMEL-19588,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-07-06 18:29:15+00:00,2023-07-30 09:36:37+00:00,"jbang has --verbose that outputs all sorts of stuff on startup. But it would nice if camel-jbang and its dynamic downloader could also output in verbose mode, about each JAR being resolving/resolved downloading/downloaded etc for trouble shooting.",
0,CAMEL-19587,Improvement,Major,3.21.0,"3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0-RC2, 4.0.0",Claudio Miranda,Claudio Miranda,0,1,2023-07-06 12:12:57+00:00,2023-07-07 06:07:58+00:00,"There is a bug in the Jira rest client library, where calling the builder.setAssigneeName(assigneeName) in jira component doesn't work, as it seems the jira rest api (backend) evolved to not support setting the field with name attribute.


Community Discussion:
https://community.developer.atlassian.com/t/creating-jira-issue-with-custom-assignee-in-jira-cloud-fails-with-account-not-found/27683


https://community.developer.atlassian.com/t/connect-app-create-issue-using-rest-api-with-jwt-authorization/32505
Â 
However it worked when setting the field with the account id attribute.


For a standalone server installation, using the name attribute works.",
0,CAMEL-19586,Improvement,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Kengo Seki,Kengo Seki,0,1,2023-07-06 08:43:02+00:00,2023-07-07 18:40:46+00:00,"Currently, the Parquet-Avro data format requires users to define a POJO class for marshalling and unmarshalling. It's a bit bothering especially for unmarshalling an existing Parquet file with a complicated data structure.


Avro provides GenericRecord in a such case, but it doesn't work with the current unmarshaller for now, as follows:




$ cat example.java
///usr/bin/env jbang ""$0"" ""$@"" ; exit $?
//DEPS org.slf4j:slf4j-simple:1.7.31
//DEPS org.apache.camel:camel-bom:4.0.0-M3@pom
//DEPS org.apache.camel:camel-core
//DEPS org.apache.camel:camel-main
//DEPS org.apache.camel:camel-parquet-avro:4.0.0-SNAPSHOT
//DEPS org.apache.hadoop:hadoop-client:3.3.6

import org.apache.avro.generic.GenericRecord;
import org.apache.camel.*;
import org.apache.camel.builder.*;
import org.apache.camel.dataformat.parquet.avro.*;
import org.apache.camel.main.*;
import org.apache.camel.spi.*;
import static org.apache.camel.builder.PredicateBuilder.*;

class example {

    public static void main(String... args) throws Exception {
        System.setProperty(""org.slf4j.simpleLogger.logFile"", ""System.out"");

        Main main = new Main();
        ParquetAvroDataFormat format = new ParquetAvroDataFormat();
        format.setUnmarshalType(GenericRecord.class);
        main.configure().addRoutesBuilder(new RouteBuilder() {
            public void configure() throws Exception {
                from(""file:/tmp?fileName=example1.parquet&noop=true"")
                    .unmarshal(format)
                    .marshal(format)
                    .log(""${body}"");
            }
        });
        main.run();
    }
}
$ jbang example.java

...

[Camel (camel-1) thread #1 - file:///tmp] ERROR org.apache.camel.processor.errorhandler.DefaultErrorHandler - Failed delivery for (MessageId: 356E1287483C55C-0000000000000000 on ExchangeId: 356E1287483C55C-0000000000000000). Exhausted after delivery attempt: 1 caught: org.apache.avro.AvroRuntimeException: Not a Specific class: interface org.apache.avro.generic.GenericRecord

Message History (source location and message history is disabled)
---------------------------------------------------------------------------------------------------------------------------------------
Source                                   ID                             Processor                                          Elapsed (ms)
                                         route1/route1                  from[file:///tmp?fileName=example1.parquet&noop=tr     89591203
	...
                                         route1/marshal1                marshal[org.apache.camel.model.DataFormatDefinitio            0

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.avro.AvroRuntimeException: Not a Specific class: interface org.apache.avro.generic.GenericRecord
	at org.apache.avro.specific.SpecificData.createSchema(SpecificData.java:403)
	at org.apache.avro.reflect.ReflectData.createSchema(ReflectData.java:734)
	at org.apache.avro.specific.SpecificData.lambda$new$3(SpecificData.java:337)
	at org.apache.avro.util.internal.ClassValueCache$1.computeValue(ClassValueCache.java:35)
	at java.base/java.lang.ClassValue.getFromHashMap(ClassValue.java:228)
	at java.base/java.lang.ClassValue.getFromBackup(ClassValue.java:210)
	at java.base/java.lang.ClassValue.get(ClassValue.java:116)
	at org.apache.avro.util.internal.ClassValueCache.apply(ClassValueCache.java:45)
	at org.apache.avro.specific.SpecificData.getSchema(SpecificData.java:346)
	at org.apache.camel.dataformat.parquet.avro.ParquetAvroDataFormat.marshal(ParquetAvroDataFormat.java:70)
	at org.apache.camel.support.processor.MarshalProcessor.process(MarshalProcessor.java:64)
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:475)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181)
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:164)
	at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:379)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:491)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:244)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:205)
	at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:202)
	at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:116)
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)
	at java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)




So I'd like to propose a new feature to unmarshal Parquet data into Avro's GenericRecord (and vice versa) if POJO is not specified as unmarshalType.",
0,CAMEL-19585,Improvement,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-07-06 07:23:29+00:00,2023-07-06 18:29:22+00:00,"When camel-jbang is resolving dependencies then they can be



resolved locally
downloaded from remote maven repo via http



Today we dont know, and just log if the process was > 1 sec and assumed it was downloaded.


What we should do is use the maven event listener then we know if it was downloaded or not, and from which repo.",
0,CAMEL-19584,New Feature,Minor,4.0-M3,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Andrea Cosentino,Hamed Hatami,0,1,2023-07-05 21:05:32+00:00,2023-07-19 09:11:09+00:00,"In the current aws-kinesis component , there's only synchronous client implementation which is not nifty for nowadays framework's capabilities such as Reactive Development so it'd be great if we improved this component to support async client as well",
0,CAMEL-19583,Improvement,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Andrea Cosentino,Hamed Hatami,0,1,2023-07-05 21:00:06+00:00,2023-08-22 05:40:49+00:00,Only one single shard can be consumed with one route on Kinesis and if you have multiple shards then need to repeat the same route of kinesis with only shard-id difference. there has to be a capability within this component even in DSL to be able to consume from all available shards,
0,CAMEL-19552,Task,Minor,4.0.0,,"

easy
help-wanted

",Resolved,Invalid,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-28 08:53:52+00:00,2023-07-21 12:05:13+00:00,"Some tests do not have assertions and that prevents us from fully understanding what is a test failure and what is an error. In many cases, these are tests that were originally written with older versions of JUnit in mind (i.e: equal or older than v4), so they lack modernization.


Â 


We should ensure every test has an assertion. The assertion does not, necessarily, needs to be visible (i.e.: it can be called in a separate method).


Â 


When asserting that a piece of code does not throw an error, we should use JUnit's 5 assertDoesNotThrow (either the linked method or one of the others with different signatures).",orpiske:1689912306:2023-07-21T12:05:06.305+0000:1689912306:2023-07-21T12:05:06.305+0000:The only tests without assertions are disabled.
0,CAMEL-19551,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:52:09+00:00,2023-06-28 08:52:16+00:00,"Some tests do not have assertions and that prevents us from fully understanding what is a test failure and what is an error. In many cases, these are tests that were originally written with older versions of JUnit in mind (i.e: equal or older than v4), so they lack modernization.


Â 


We should ensure every test has an assertion. The assertion does not, necessarily, needs to be visible (i.e.: it can be called in a separate method).


Â 


When asserting that a piece of code does not throw an error, we should use JUnit's 5 assertDoesNotThrow (either the linked method or one of the others with different signatures).",
0,CAMEL-19550,Task,Minor,4.0.0,4.0.0,"

easy
help-wanted

",Resolved,Fixed,4.0.0,Unassigned,Otavio Rodolfo Piske,0,2,2023-06-28 08:51:43+00:00,2023-07-18 13:53:25+00:00,"Some tests do not have assertions and that prevents us from fully understanding what is a test failure and what is an error. In many cases, these are tests that were originally written with older versions of JUnit in mind (i.e: equal or older than v4), so they lack modernization.


Â 


We should ensure every test has an assertion. The assertion does not, necessarily, needs to be visible (i.e.: it can be called in a separate method).


Â 


When asserting that a piece of code does not throw an error, we should use JUnit's 5 assertDoesNotThrow (either the linked method or one of the others with different signatures).","nikita_konovalov:1689569971:2023-07-17T12:59:31.002+0000:1689569971:2023-07-17T12:59:31.002+0000:I'll take this one
orpiske:1689659597:2023-07-18T13:53:17.942+0000:1689659597:2023-07-18T13:53:17.942+0000:Resolved with the linked PRs"
0,CAMEL-19549,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:44:56+00:00,2023-06-28 08:45:10+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19548,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Federico Mariani,Otavio Rodolfo Piske,0,1,2023-06-28 08:44:10+00:00,2023-08-02 13:30:09+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19547,Task,Minor,4.0.0,,"

easy
help-wanted

",Resolved,Fixed,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,4,2023-06-28 08:43:39+00:00,2023-08-03 13:06:23+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)","itachi:1688016634:2023-06-29T13:30:34.599+0000:1688017365:2023-06-29T13:42:45.975+0000:Need help with this.

for this
{noformat}
xmppServer.startXmppEndpoint();
Thread.Sleep(2000){noformat}
Â 

what should be in the until function?

Â 
{noformat}
Awaitility
Â  Â  Â  Â  .await()
Â  Â  Â  Â  .atMost(Durations.TWO_SECONDS)
        .until(()->true);{noformat}
orpiske:1688017124:2023-06-29T13:38:44.392+0000:1688017124:2023-06-29T13:38:44.392+0000:Yes. Feel free to go ahead and submit. Thanks
nfilotto:1688017387:2023-06-29T13:43:07.831+0000:1688017387:2023-06-29T13:43:07.831+0000:Are you sure that it will help to fix the flakiness of the test? Personally, I would expect to have a condition tested by Awaitility otherwise I'm afraid we will get the same behavior but with a more complex code, don't you agree?
orpiske:1688017607:2023-06-29T13:46:47.141+0000:1688017628:2023-06-29T13:47:08.921+0000:It should be something like
{code:java}
Awaitility
Â  Â  Â  Â  .await()
Â  Â  Â  Â  .atMost(Durations.TWO_SECONDS) 
Â Â Â Â Â Â Â  .until(()->xmppServer.isRunning());{code}
itachi:1688022928:2023-06-29T15:15:28.737+0000:1688022928:2023-06-29T15:15:28.737+0000:Thank You. I will start working on this.
itachi:1688253906:2023-07-02T07:25:06.025+0000:1688253906:2023-07-02T07:25:06.025+0000:In XmppRouteChatIT, do we need to have thread.sleep()?

I don't know what would be the awaility equivalent ofÂ 
{noformat}
template.sendBody(""direct:toConsumer"", body1);
Thread.sleep(50);
template.sendBody(""direct:toConsumer"", body2);{noformat}
orpiske:1688780661:2023-07-08T09:44:21.001+0000:1688780671:2023-07-08T09:44:31.946+0000:Hey [~itachi], on those cases, if you believe it's not convertable ... then it's OK to leave as is.
nikita_konovalov:1690956105:2023-08-02T14:01:45.137+0000:1690956105:2023-08-02T14:01:45.137+0000:I'll take this one
orpiske:1691039183:2023-08-03T13:06:23.376+0000:1691039183:2023-08-03T13:06:23.376+0000:Some of those that could be fixed were resolved by the linked PR. The remaining ones need changes to the xmpp test container."
0,CAMEL-19546,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:42:58+00:00,2023-06-28 08:43:08+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19545,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:42:27+00:00,2023-06-28 08:42:34+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19544,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:41:56+00:00,2023-06-28 08:42:03+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19543,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:41:25+00:00,2023-06-28 08:41:34+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19542,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:41:03+00:00,2023-08-10 16:14:01+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19541,Task,Minor,4.0.0,4.2.0,"

easy
help-wanted

",Resolved,Fixed,4.2.0,Nikita_Konovalov,Otavio Rodolfo Piske,0,1,2023-06-28 08:39:51+00:00,2023-10-26 13:56:38+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",orpiske:1697680518:2023-10-19T09:55:18.570+0000:1697680518:2023-10-19T09:55:18.570+0000:Fixed with the linked PR.
0,CAMEL-19540,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:38:50+00:00,2023-06-28 08:38:57+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19539,Task,Minor,4.0.0,4.0.0,"

easy
help-wanted

",Resolved,Fixed,4.0.0,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:38:24+00:00,2023-07-25 17:57:34+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",orpiske:1690273875:2023-07-25T16:31:15.740+0000:1690273875:2023-07-25T16:31:15.740+0000:Fixed with the linked PR.
0,CAMEL-19538,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Nikita_Konovalov,Otavio Rodolfo Piske,0,1,2023-06-28 08:37:34+00:00,2023-10-30 09:39:23+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19537,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:32:27+00:00,2023-06-28 08:32:38+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19536,Task,Minor,4.0.0,4.2.0,"

easy
help-wanted

",Resolved,Fixed,4.2.0,Nikita_Konovalov,Otavio Rodolfo Piske,0,2,2023-06-28 08:31:59+00:00,2023-10-10 07:21:08+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)","nstefeko:1690332534:2023-07-26T08:48:54.761+0000:1690332534:2023-07-26T08:48:54.761+0000:I am going to work on itÂ 
orpiske:1690332626:2023-07-26T08:50:26.725+0000:1690332626:2023-07-26T08:50:26.725+0000:Thanks for your contribution! I assigned the ticket to myself to prevent others from claiming it - as it cannot yet be assigned to you.
orpiske:1695009329:2023-09-18T11:55:29.668+0000:1695009329:2023-09-18T11:55:29.668+0000:I reached out to [~nstefeko] about this. She is busy with other business matters, so she won't be able to work on this ticket. I am unassigning and leaving it available for anyone willing to work on it."
0,CAMEL-19535,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:31:02+00:00,2023-06-28 08:31:10+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19534,Improvement,Minor,3.20.6,,"
None
",Resolved,Won't Fix,None,Unassigned,AurÃ©lien Pupier,0,1,2023-06-28 08:30:42+00:00,2023-07-26 08:01:32+00:00,"for instance with:



apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: route-2495
spec:
  source:
    properties:
      message: demo
    ref:
      apiVersion: camel.apache.org/v1alpha1
      kind: Kamelet
      name: timer-source
    types: {}
  sink:
    properties: {}
    ref:
      apiVersion: camel.apache.org/v1alpha1
      kind: Kamelet
      name: log-sink
    types: {}
---
apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: route-2683
spec:
  source:
    properties:
      message: second route
    ref:
      apiVersion: camel.apache.org/v1alpha1
      kind: Kamelet
      name: timer-source
    types: {}
  sink:
    properties: {}
    ref:
      apiVersion: camel.apache.org/v1alpha1
      kind: Kamelet
      name: log-sink
    types: {}




when trying to run it with JBang, it gives this error:



2023-06-28 10:24:35.040  INFO 788400 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 3.20.6 is starting
2023-06-28 10:24:35.530  INFO 788400 --- [           main] org.apache.camel.main.MainSupport   : Using Java 17.0.3 with PID 788400. Started by apupier in /home/apupier/git/camel-kamelets/kamelets
2023-06-28 10:24:35.581  INFO 788400 --- [           main] mel.cli.connector.LocalCliConnector : Camel CLI enabled (local)
org.apache.camel.RuntimeCamelException: Error pre-parsing resource: file:testKameletBinding.camel.yaml
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:863)
        at org.apache.camel.impl.engine.DefaultRoutesLoader.preParseRoute(DefaultRoutesLoader.java:148)
        at org.apache.camel.main.RoutesConfigurer.doConfigureModeline(RoutesConfigurer.java:324)
        at org.apache.camel.main.RoutesConfigurer.configureModeline(RoutesConfigurer.java:293)
        at org.apache.camel.main.BaseMainSupport.modelineRoutes(BaseMainSupport.java:629)
        at org.apache.camel.main.BaseMainSupport.autoconfigure(BaseMainSupport.java:485)
        at org.apache.camel.main.MainSupport.autoconfigure(MainSupport.java:74)
        at org.apache.camel.main.KameletMain.autoconfigure(KameletMain.java:489)
        at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:693)
        at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:404)
        at org.apache.camel.main.KameletMain.doInit(KameletMain.java:271)
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
        at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:784)
        at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:592)
        at org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:232)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:73)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
        at main.CamelJBang.main(CamelJBang.java:36)
Caused by: expected a single document in the stream
 in file:testKameletBinding.camel.yaml, line 1, column 1:
    apiVersion: camel.apache.org/v1a ... 
    ^
but found another document
 in file:testKameletBinding.camel.yaml, line 21, column 1:
    ---
    ^

        at org.snakeyaml.engine.v2.composer.Composer.getSingleNode(Composer.java:134)
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:860)
        ... 27 more




The advantage is that it allows to group some routes in the same file.


I set camel-jbang component but I'm wondering if it is not something to implement only in model parsing and that it will be leveraged then in all runtime flavors","apupier:1687913069:2023-06-28T08:44:29.174+0000:1687913069:2023-06-28T08:44:29.174+0000:similar for Integration CRDs:
{noformat}
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: route-3571
spec:
  flows:
  - from:
      uri: timer:demo
      steps:
      - log:
          message: demo
---
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: route-2623
spec:
  flows:
  - from:
      uri: timer:second
      steps:
      - log:
          message: secod
{noformat}
 gives:
{noformat}
org.apache.camel.RuntimeCamelException: Error pre-parsing resource: file:testKameletBinding.camel.yaml
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:863) ~[camel-yaml-dsl-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:104) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.DefaultRoutesLoader.findRoutesBuilders(DefaultRoutesLoader.java:88) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.impl.engine.DefaultRoutesLoader.updateRoutes(DefaultRoutesLoader.java:195) ~[camel-base-engine-3.20.6.jar:3.20.6]
        at org.apache.camel.support.RouteWatcherReloadStrategy.onRouteReload(RouteWatcherReloadStrategy.java:265) ~[camel-support-3.20.6.jar:3.20.6]
        at org.apache.camel.support.RouteWatcherReloadStrategy.lambda$doStart$1(RouteWatcherReloadStrategy.java:150) ~[camel-support-3.20.6.jar:3.20.6]
        at org.apache.camel.support.FileWatcherResourceReloadStrategy$WatchFileChangesTask.run(FileWatcherResourceReloadStrategy.java:305) ~[camel-support-3.20.6.jar:3.20.6]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539) ~[?:?]
        at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136) ~[?:?]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) ~[?:?]
        at java.lang.Thread.run(Thread.java:833) ~[?:?]
Caused by: org.snakeyaml.engine.v2.exceptions.ComposerException: expected a single document in the stream
 in file:testKameletBinding.camel.yaml, line 1, column 1:
    apiVersion: camel.apache.org/v1
    ^
but found another document
 in file:testKameletBinding.camel.yaml, line 12, column 1:
    ---
    ^

        at org.snakeyaml.engine.v2.composer.Composer.getSingleNode(Composer.java:134) ~[snakeyaml-engine-2.3.jar:?]
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader.preParseRoute(YamlRoutesBuilderLoader.java:860) ~[camel-yaml-dsl-3.20.6.jar:3.20.6]
        ... 11 more
{noformat}
apupier:1687914144:2023-06-28T09:02:24.770+0000:1687914710:2023-06-28T09:11:50.744+0000:For Integration, an alternative is to provide several flows:

{noformat}
apiVersion: camel.apache.org/v1
kind: Integration
metadata:
  name: route-3571
spec:
  flows:
  - from:
      uri: timer:demo
      steps:
      - log:
          message: demo
  - from:
      uri: timer:second
      steps:
      - log:
          message: second
{noformat}

I have not found alternatives for Kamelet Binding"
0,CAMEL-19533,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:30:33+00:00,2023-06-28 08:30:41+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19532,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:29:44+00:00,2023-06-28 08:29:59+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19531,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:29:18+00:00,2023-06-28 08:29:25+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19530,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:28:45+00:00,2023-06-28 08:28:53+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19529,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:28:13+00:00,2023-06-28 08:28:22+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19528,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:27:37+00:00,2023-06-28 08:27:44+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19527,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:27:03+00:00,2023-06-28 08:27:11+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19526,Task,Minor,4.0.0,4.2.0,"

easy
help-wanted

",Resolved,Fixed,4.2.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-28 08:26:10+00:00,2023-11-10 09:27:16+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)","orpiske:1699579636:2023-11-10T09:27:16.921+0000:1699579636:2023-11-10T09:27:16.921+0000:This was fixed by the linked PR. The user does not seem to have a Jira account, so assigning to me."
0,CAMEL-19525,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:25:34+00:00,2023-06-28 08:25:44+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19524,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:24:39+00:00,2023-06-28 08:24:49+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19523,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:23:52+00:00,2023-06-28 08:23:58+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19522,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:23:02+00:00,2023-06-28 08:23:17+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19521,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:22:26+00:00,2023-06-28 08:22:35+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19520,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:21:47+00:00,2023-06-28 08:22:01+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19519,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Vaishnavi R,Otavio Rodolfo Piske,0,1,2023-06-28 08:20:34+00:00,2024-01-20 08:36:24+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19518,Task,Minor,4.0.0,,"

easy
help-wanted

",Resolved,Fixed,None,Nikita_Konovalov,Otavio Rodolfo Piske,0,3,2023-06-28 08:19:45+00:00,2023-08-14 15:22:30+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)","nikita_konovalov:1691570056:2023-08-09T16:34:16.731+0000:1691570056:2023-08-09T16:34:16.731+0000:I'll take this one
nkonovalov:1691649036:2023-08-10T14:30:36.626+0000:1691649036:2023-08-10T14:30:36.626+0000:Hey guys, I'm not the right Nikita Konovalov to assign this issue to.
Please use the right handle nikita_konovalov instead of mine :)

Thanks!

(ps Thread.sleep() is not that bad)
orpiske:1691997750:2023-08-14T15:22:30.782+0000:1691997750:2023-08-14T15:22:30.782+0000:Fixed with the linked PR."
0,CAMEL-19517,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:18:47+00:00,2023-06-28 08:18:57+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19516,Task,Minor,4.0.0,4.1.0,"

easy
help-wanted

",Resolved,Fixed,4.1.0,Nikita_Konovalov,Otavio Rodolfo Piske,0,3,2023-06-28 08:18:06+00:00,2023-08-14 15:22:03+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)","nikita_konovalov:1691556700:2023-08-09T12:51:40.096+0000:1691556700:2023-08-09T12:51:40.096+0000:I'll take this one
nkonovalov:1691649029:2023-08-10T14:30:29.601+0000:1691649029:2023-08-10T14:30:29.601+0000:Hey guys, I'm not the right Nikita Konovalov to assign this issue to.
Please use the right handle nikita_konovalov instead of mine :)

Thanks!

(ps Thread.sleep() is not that bad)
orpiske:1691650530:2023-08-10T14:55:30.501+0000:1691650530:2023-08-10T14:55:30.501+0000:Thanks. We'll sort it out soon. Sorry for the confusion.
orpiske:1691997723:2023-08-14T15:22:03.060+0000:1691997723:2023-08-14T15:22:03.060+0000:Fixed with the linked PR."
0,CAMEL-19515,Task,Minor,4.0.0,,"

easy
help-wanted

",Closed,Invalid,None,Nikita_Konovalov,Otavio Rodolfo Piske,0,2,2023-06-28 08:17:16+00:00,2023-10-18 14:03:07+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",nikita_konovalov:1697608987:2023-10-18T14:03:07.620+0000:1697608987:2023-10-18T14:03:07.620+0000:The Threads.sleep() are only in manual tests
0,CAMEL-19514,Task,Minor,4.0.0,,"

easy
help-wanted

",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-28 08:16:49+00:00,2023-06-28 08:44:56+00:00,"We have many tests which use Thread.sleep for synchronization. This is bug prone and can introduce flakiness when running on environments with different capacities.


Ideally we should replace these with:



Awaitility
Java's native syncronization mechanism (Latches, Phasers, Locks, etc)
Nothing (i.e.; in some cases the sleep can simply be removed)",
0,CAMEL-19513,New Feature,Major,None,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Claus Ibsen,0,1,2023-06-28 05:50:58+00:00,2023-07-16 09:03:30+00:00,"We can export to SB and Q and we have support for building for docker/k8s for these runtimes.


However for plain camel-main we do not have that.",
0,CAMEL-19512,Bug,Minor,3.20.3,,"
None
",Resolved,Information Provided,None,Claus Ibsen,Xilai Dai,0,3,2023-06-28 02:09:15+00:00,2023-07-11 07:56:43+00:00,"It seems there is a regression from Camel 3.20.3 which is the SetHeader not working anymore with InputStreamCache type.


Given that a simple route:




		from(""timer:cTimer_1"" + ""?period="" + 1 + ""&repeatCount="" + 1 + ""&delay="" + 1)
		.setHeader(""myheader1"").constant(""Hi"")
		.log(org.apache.camel.LoggingLevel.WARN, ""MyRoute.cLog_1"", ""header myheader1 value is: ${header.myheader1}"")
		.setHeader(""myheader2"").constant(iscache1)
		.log(org.apache.camel.LoggingLevel.WARN, ""MyRoute.cLog_2"", ""header myheader2 value is: ${header.myheader2}"")
		.setBody().constant(iscache2)
		.log(org.apache.camel.LoggingLevel.WARN, ""MyRoute.cLog_3"", ""body value is: ${body}"");




the value of header.myheader2 is always null from Camel 3.20.3, whereas in Camel 3.20.2 or earlier version, it worked as expected.


Attached a sample project for easily reproduce the issue.","davsclaus:1687901032:2023-06-28T05:23:52.903+0000:1687901032:2023-06-28T05:23:52.903+0000:Since you use Camel's StreamCache manually in the processor you need to turn on stream caching 

camelContext.setStreamCaching(true);
xldai:1687904940:2023-06-28T06:29:00.868+0000:1687904940:2023-06-28T06:29:00.868+0000:No any help adding camelContext.setStreamCaching(true)!

Could you explain why the behavior is different between camel-core 3.20.2 and 3.20.3? with the same route above.

Reopen it again.

Would be good if anyone from Camel team can at least give it a try on the provided project, easily to be reproduced!
davsclaus:1687905173:2023-06-28T06:32:53.645+0000:1687905173:2023-06-28T06:32:53.645+0000:I tried your test and you need to enable stream caching.
xldai:1687906447:2023-06-28T06:54:07.953+0000:1687906447:2023-06-28T06:54:07.953+0000:again I don't see any help with camelContext.setStreamCaching(true) in the project.
Could anyone explain why the behavior is different between camel-core 3.20.2 and 3.20.3? with the same route above.
davsclaus:1687907927:2023-06-28T07:18:47.187+0000:1687907927:2023-06-28T07:18:47.187+0000:Using Camel's StreamCache objects like you do with InputStreamCache always require to use them with stream caching enabled. In fact end users are NOT supposed to create and use these classes themselves. They are part of Camel's stream caching functionality. Using these classes are for advanced use-cases such as in special components or addons.

Also beware when using any kind of Stream object (InputStream) then you can only read them once, and you need to reset them (if they support this etc.).

Read more at
https://camel.apache.org/manual/stream-caching.html

For changes in Camel 3.20.x then go see the changelog / git commits or whatever. Camel releases are fixing bugs and whatnot.


xldai:1687909260:2023-06-28T07:41:00.862+0000:1687909260:2023-06-28T07:41:00.862+0000:The main issue I raised here is simple(""${body}"") not working like before in case of the body is Stream type.
The issue was found with more complex route with cxfrs:// response with InputStreamCache, I just create a simple project without CXF involved but have the same behavior for easily analyzing the issue purpose.
For sure we checked already the changelog/git commits as already, the changes from https://issues.apache.org/jira/browse/CAMEL-19186 is more relative but not sure that's why this issue is raised.
xldai:1688432391:2023-07-04T08:59:51.620+0000:1688432391:2023-07-04T08:59:51.620+0000:Updated the test-setheader project and re-attached it.
The issue is not on simple language but on setHeader().
[~davsclaus], [~essobedo], Could you please re-check it with the steps in README.txt? 
davsclaus:1688691868:2023-07-07T09:04:28.622+0000:1688691868:2023-07-07T09:04:28.622+0000:What header do you have in real world use-cases that are streaming based ?

Camel streaming caching is for message body only.
nfilotto:1688692717:2023-07-07T09:18:37.534+0000:1688692717:2023-07-07T09:18:37.534+0000:After a deeper analysis, it appears that the behavior change is due to CAMEL-19026, and the problem is not limited to {{InputStreamCache}}, it occurs with any {{InputStream}} with {{setBacklogTracing(true)}} like in the test project attached to this ticket. 

Before CAMEL-19026, no message as XML was built with {{setBacklogTracing(true)}} which implies that the headers were not read but since CAMEL-19026, messages are built as XML such that the value of headers are read more times so if the stream is not reset explicitly (streams in the body are reset automatically if possible), we end up with no content when we try to read it later which is the behavior that you get.

As a workaround, please avoid enabling the backlog tracing if not needed but also avoid setting stream values to headers and properties, it is not a good practice as your route won't be idempotent, indeed adding a simple logger to display the content of your header can affect the result of your route while it should not. 

Try to rely on the result type of an expression to set value with a specific type like for example {{setHeader(""myheader2"").simple(""${body}"", String.class)}}, this way, you can read the content of your header as many times as you want without affecting the overall result.

[~davsclaus] Maybe this behavior change should be documented somewhere, don't you agree?
davsclaus:1688696006:2023-07-07T10:13:26.045+0000:1688696006:2023-07-07T10:13:26.045+0000:Backlog debugging is only for development - but you are surely welcome to add a note in the doc page
nfilotto:1688697884:2023-07-07T10:44:44.776+0000:1688697884:2023-07-07T10:44:44.776+0000:I could add a note with pleasure but TBH CAMEL-19026 is not really clear to me, could you please clarify?
nfilotto:1688702518:2023-07-07T12:01:58.285+0000:1688703324:2023-07-07T12:15:24.825+0000:Before CAMEL-19026, it behaves like backlog tracing does not even work which is quite surprising so I guess, I miss something
davsclaus:1688733240:2023-07-07T20:34:00.024+0000:1688733240:2023-07-07T20:34:00.024+0000:I added notes in the docs
https://github.com/apache/camel/commit/d3a303476687d1238815a7b5556e90ffdd8c61ed
davsclaus:1688733312:2023-07-07T20:35:12.310+0000:1688733312:2023-07-07T20:35:12.310+0000:And also for the 3.20.3 upgrade section
https://github.com/apache/camel/commit/f03a78cf01cbd26cc645b772f538c8f5540f8854
nfilotto:1688773608:2023-07-08T07:46:48.078+0000:1688773608:2023-07-08T07:46:48.078+0000:Very nice, thank you Claus"
0,CAMEL-19511,Bug,Trivial,4.0-M3,4.0-RC2,"
None
",Resolved,Fixed,4.0-RC2,Nicolas Filotto,Nicolas Filotto,0,2,2023-06-27 15:58:09+00:00,2023-06-28 12:30:32+00:00,"While trying to figure out why no routes could even start in the reactive-streams example, I realized that it was due to the fact that the way to register auto-configurations has changed, the code must be changed consequently","nfilotto:1687852808:2023-06-27T16:00:08.944+0000:1687852808:2023-06-27T16:00:08.944+0000:This can be seen as a blocker for the release of RC1. I can fix it tomorrow but If you need a fix sooner feel free to affect it to whoever can fix it sooner
davsclaus:1687855149:2023-06-27T16:39:09.304+0000:1687855149:2023-06-27T16:39:09.304+0000:Are you really sure, the spring boot examples like examples/spring-boot and many others work fine.
davsclaus:1687855299:2023-06-27T16:41:39.121+0000:1687855299:2023-06-27T16:41:39.121+0000:Its the reactive-example that is wrong. Its a bit bad example with complex custom auto-configuration that users wont normally do.
But the example just need to be migrated to SB3
nfilotto:1687908593:2023-06-28T07:29:53.783+0000:1687908593:2023-06-28T07:29:53.783+0000:I confirm that the code is correct only some remaining things to fix related to this migration https://github.com/apache/camel-spring-boot/pull/877"
0,CAMEL-19510,Task,Minor,"3.20.6, 4.0-M3",None,"
None
",Resolved,Fixed,"3.22.0, 4.0-RC2",Nicolas Filotto,Nicolas Filotto,0,1,2023-06-27 15:35:36+00:00,2023-06-27 16:01:37+00:00,"While playing with the example reactive-streams of camel-spring-boot-examples, I realized that:


With Camel 3.21 the rest endpoint defined in RestExample fails with the next error:



java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Long (java.lang.String and java.lang.Long are in module java.base of loader 'bootstrap')
	at org.apache.camel.example.reactive.streams.RestExample$RestExampleStreams.lambda$sum$0(RestExample.java:52) ~[classes/:na]
	at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:100) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.FluxZip$ZipCoordinator.drain(FluxZip.java:735) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.FluxZip$ZipInner.onNext(FluxZip.java:894) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at org.apache.camel.component.reactive.streams.util.MonoPublisher$1.request(MonoPublisher.java:54) ~[camel-reactive-streams-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at reactor.core.publisher.FluxZip$ZipInner.onSubscribe(FluxZip.java:881) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at org.apache.camel.component.reactive.streams.util.MonoPublisher.subscribe(MonoPublisher.java:39) ~[camel-reactive-streams-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at reactor.core.publisher.FluxZip$ZipCoordinator.subscribe(FluxZip.java:579) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.FluxZip.handleBoth(FluxZip.java:326) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.FluxZip.handleArrayMode(FluxZip.java:267) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.FluxZip.subscribe(FluxZip.java:136) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at reactor.core.publisher.Flux.subscribe(Flux.java:7968) ~[reactor-core-3.2.16.RELEASE.jar:3.2.16.RELEASE]
	at org.apache.camel.component.reactive.streams.util.UnwrapStreamProcessor.process(UnwrapStreamProcessor.java:42) ~[camel-reactive-streams-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:477) ~[camel-core-processor-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:181) ~[camel-base-engine-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) ~[camel-base-engine-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:165) ~[camel-core-processor-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:392) ~[camel-base-engine-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) ~[camel-base-engine-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:41) ~[camel-support-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.http.common.CamelServlet.doExecute(CamelServlet.java:333) ~[camel-http-common-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:228) ~[camel-http-common-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.http.common.CamelServlet.handleService(CamelServlet.java:146) ~[camel-http-common-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:95) ~[camel-http-common-3.21.0-SNAPSHOT.jar:3.21.0-SNAPSHOT]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:779) ~[tomcat-embed-core-9.0.70.jar:4.0.FR]





With Camel 4, it is even worse because no route starts:




2023-06-27T15:53:02.430+02:00  INFO 40276 --- [           main] a.c.e.r.s.a.ReactiveStreamsSpringBootApp : No active profile set, falling back to 1 default profile: ""default""
2023-06-27T15:53:04.194+02:00  INFO 40276 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2023-06-27T15:53:04.204+02:00  INFO 40276 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2023-06-27T15:53:04.204+02:00  INFO 40276 --- [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.10]
2023-06-27T15:53:04.318+02:00  INFO 40276 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2023-06-27T15:53:04.319+02:00  INFO 40276 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1773 ms
2023-06-27T15:53:05.406+02:00  INFO 40276 --- [           main] o.s.b.a.e.web.EndpointLinksResolver      : Exposing 1 endpoint(s) beneath base path '/actuator'
2023-06-27T15:53:05.528+02:00  INFO 40276 --- [           main] o.a.c.c.s.CamelHttpTransportServlet      : Initialized CamelHttpTransportServlet[name=CamelServlet, contextPath=]
2023-06-27T15:53:05.530+02:00  INFO 40276 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2023-06-27T15:53:05.616+02:00  INFO 40276 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.0.0-SNAPSHOT (camel-1) is starting
2023-06-27T15:53:05.622+02:00  INFO 40276 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Routes startup (started:0)
2023-06-27T15:53:05.623+02:00  INFO 40276 --- [           main] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.0.0-SNAPSHOT (camel-1) started in 6ms (build:0ms init:0ms start:6ms)",
0,CAMEL-19509,Bug,Minor,3.20.6,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Claus Ibsen,AurÃ©lien Pupier,0,2,2023-06-27 14:40:17+00:00,2023-06-27 15:25:16+00:00,"Running a file with content (tried with Camel JBang 3.20.6):



apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: ''
spec:
  source:
    ref:
      apiVersion: camel.apache.org/v1alpha1
      name: timer-source
      kind: Kamelet
  steps:
  - ref:
      apiVersion: camel.apache.org/v1alpha1
      name: log-action
      kind: Kamelet




leads to a NPE:



java.lang.NullPointerException: Cannot invoke ""org.apache.camel.model.FromDefinition.getLabel()"" because ""this.input"" is null
        at org.apache.camel.model.RouteDefinition.getLabel(RouteDefinition.java:171)
        at org.apache.camel.impl.PreconditionHelper.included(PreconditionHelper.java:51)
        at org.apache.camel.impl.DefaultCamelContext.includedRoute(DefaultCamelContext.java:1062)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:927)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:800)
        at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:3017)
        at org.apache.camel.support.service.BaseService.init(BaseService.java:83)
        at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2688)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:111)
        at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2707)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:262)
        at org.apache.camel.main.KameletMain.doStart(KameletMain.java:280)
        at org.apache.camel.support.service.BaseService.start(BaseService.java:119)
        at org.apache.camel.dsl.jbang.core.commands.Run.runKameletMain(Run.java:784)
        at org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:592)
        at org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:232)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:73)
        at org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
        at picocli.CommandLine.executeUserObject(CommandLine.java:2041)
        at picocli.CommandLine.access$1500(CommandLine.java:148)
        at picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
        at picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
        at picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
        at picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
        at picocli.CommandLine.execute(CommandLine.java:2170)
        at org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
        at main.CamelJBang.main(CamelJBang.java:36)","apupier:1687848115:2023-06-27T14:41:55.386+0000:1687848115:2023-06-27T14:41:55.386+0000:I guess it is because Camel JBang does nto support KamelBinding Custom Resource Definitions?
davsclaus:1687849880:2023-06-27T15:11:20.206+0000:1687849880:2023-06-27T15:11:20.206+0000:Its because you do not have a sink
davsclaus:1687850705:2023-06-27T15:25:05.213+0000:1687850705:2023-06-27T15:25:05.213+0000:Added support for sink not present"
0,CAMEL-19508,Improvement,Major,"3.x, Future","3.x, 4.0.0","
None
",Resolved,Implemented,"3.x, 4.0.0",Unassigned,Johannes BoÃle,0,1,2023-06-27 11:20:37+00:00,2023-06-28 06:37:05+00:00,"Within the apache camel Saga EIP, there is currently no obvious possibility to supply headers like ""Authentication"", when you are using a lra-coordinator with the LRASagaService. If you want to use e.g. Narayana in a secure way with authentication enabled (the Narayana LRA coordinator supports JSON Web Tokens and there's even a quickstart to help users get started), there is currently no easy possibility to pass on authentication information.


As general extension, this can be even extended to supply (additional) headers in any form to the requests.


The implementation class LRAClient is taking care of making the calls to the coordinator and uses a java.net.http.HttpClient for it. So the solution could be, to override the default behavior of the LRAClient and to give developers/users the possibility to hook into creating the HttpRequest and supply additional values.


Intentional use-case: add a header `Authorization` to every request agains the lra-coordinator


Generic use-case: allow to add custom headers to requests against the lra-coordinator","johbossle:1687836071:2023-06-27T11:21:11.997+0000:1687836071:2023-06-27T11:21:11.997+0000:I would be willing to contribute to achieve this improvement.
johbossle:1687838262:2023-06-27T11:57:42.203+0000:1687838262:2023-06-27T11:57:42.203+0000:please see PR [https://github.com/apache/camel/pull/10505]
johbossle:1687905425:2023-06-28T06:37:05.939+0000:1687905425:2023-06-28T06:37:05.939+0000:This improvement has been implemented by [#10505|https://github.com/apache/camel/pull/10505] and will be available also in main for version 4 ([https://github.com/apache/camel/commit/238ec905e46b7e0a737925e73569f841556845dd)]

Please feel free to re-open this issue and adjust to your needs."
0,CAMEL-19507,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-06-27 10:29:42+00:00,2023-06-27 18:16:24+00:00,No Desc,
0,CAMEL-19506,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,4.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-06-27 08:31:26+00:00,2023-07-04 12:37:58+00:00,No Desc,
0,CAMEL-19505,Dependency upgrade,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2023-06-27 08:30:56+00:00,2023-06-27 18:16:05+00:00,No Desc,
0,CAMEL-19504,Task,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Otavio Rodolfo Piske,0,1,2023-06-26 13:43:30+00:00,2023-08-29 04:43:41+00:00,"I discovered that our build seems to waste a lot of time recompiling code due to some of the code generators generating the code in a post-compile Maven lifecycle phase.


Â 


This seems to happen for a lot of modules, but below I describe the problem for the camel-core-model.


Â 


Here's the problem:


1. The camel-core-model depends on the camel-package-maven-plugin to generate the configurers (such as ServiceCallConfigurationConfigurer, Resilience4jConfigurationDefinitionConfigurer, etc).


2. The ConfigurerGeneratorMojo uses the PROCESS_CLASSES lifecycle phase as the default.


3. As per Maven documentation, the process class phase happens after the compile.


4. As a result, the code is generated after the first compilation, which leads to warning ""[INFO] Changes detected - recompiling the module"" and a recompilation of the module.


5. In some cases, this leads to a recompilation of the whole module, which can increase the build time significantly for large modules.


Â 


See the attached log files for examples.","orpiske:1687770007:2023-06-26T17:00:07.710+0000:1687770007:2023-06-26T17:00:07.710+0000:Looking at the build log it seems that a lot of the code is compiled twice:

Â 
{code:java}
gzcat double-compilation.txt.gz| grep -A1 Â ""(recompile)"" | grep -i changes | wc -l
408{code}
orpiske:1687770337:2023-06-26T17:05:37.020+0000:1687770337:2023-06-26T17:05:37.020+0000:Solving this problems is a bit challenging because:
 # First, the code compile all the sources
 # Then, it generates the jandex (process-classes)
 # Using the generated jandex, it then writes the new files (configurer classes, in this case).
 # The compiler plugin notes the changes, and recompiles everything

Â 

So, there's a cyclic dependency between the Jandex depending on the class files to create the index and the source code depending on the Jandex to generate the configurer classes.

Â 

Â 
orpiske:1687825716:2023-06-27T08:28:36.552+0000:1693255421:2023-08-29T04:43:41.149+0000:One idea I thought about solving this problem is to generate a metadata file instead of generating code. That way we can: 

Â 
 # Generalize the Configurer so that it reads the metadata file instead. 
 # Remove a HUGE amount of (generated) code
 # Simplify the generator code (which is very hard code to read/maintain)
 # Make the build much faster (due to approximately 12204 lines of code less)
 # Reuse the metadata in conjunction with the catalog and other files we already have to provide more help and features, as there will be another source with additional configuration information."
0,CAMEL-19503,Dependency upgrade,Major,None,"3.21.1, 3.22.0, 4.0-RC1","
None
",Resolved,Fixed,"3.21.1, 3.22.0, 4.0-RC1",Grzegorz Grzybek,Grzegorz Grzybek,0,1,2023-06-26 10:39:26+00:00,2023-06-27 08:29:15+00:00,https://issues.apache.org/jira/secure/ReleaseNote.jspa?projectId=12320628&version=12353177,
0,CAMEL-19472,Dependency upgrade,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-06-20 05:07:37+00:00,2023-06-22 17:42:15+00:00,No Desc,
0,CAMEL-19471,Improvement,Minor,3.20.5,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Marat Gubaidullin,0,3,2023-06-19 12:10:46+00:00,2023-06-19 16:30:34+00:00,"In catalog/models/json.json library enum is lowercase [ ""fastjson"", ""gson"", ""jackson"", ""johnzon"", ""jsonb"" ]
https://github.com/apache/camel/blob/1d298e18d7fc3c3017e386096abad0095e5dd8af/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/models/json.json#LL19C6-L19C6


In camelYamlDsl.json library enum is capitalized [ ""Fastjson"", ""Gson"", ""Jackson"", ""Johnzon"", ""Jsonb"" ]
https://github.com/apache/camel/blob/1d298e18d7fc3c3017e386096abad0095e5dd8af/dsl/camel-yaml-dsl/camel-yaml-dsl/src/generated/resources/schema/camelYamlDsl.json#L5226


Which one is correct/canonical/recommended and could we sync them?","davsclaus:1687155542:2023-06-19T14:19:02.190+0000:1687155542:2023-06-19T14:19:02.190+0000:Camel is case insensitive in yaml-dsl, so users can use any style (Gson or gson, or GSON, or GsOn). 

The schema uses the canonical name which is mixed case.
marat.gubaidullin@gmail.com:1687155837:2023-06-19T14:23:57.444+0000:1687155837:2023-06-19T14:23:57.444+0000:Could we sync schema and catalog to avoid this kind of issues?
https://github.com/apache/camel-karavan/issues/799"
0,CAMEL-19470,Bug,Minor,3.x,"3.21.0, 4.0-RC1, 4.0.0","

camel
mongodb

",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Unassigned,Kevin Garrido,0,2,2023-06-19 10:31:28+00:00,2023-06-21 11:37:37+00:00,"When using the mongodb component as a ChangeStreams consumer, the fullDocument is null for update operations. It's normal if we refer to mongodb documentation.


Â 


As a temporary fix, you can use the object id to get the modified document with a route like this:Â 




from(""mongodb:mongo?consumerType=changeStreams...."")
.to(""mongodb:mongo?operation=findById"")



Â 


Â 


The MongoDbChangeStreamsThread.initializeCursor() method should be changed to use the fullDocument option when creating the iterable.",acosentino:1687144357:2023-06-19T11:12:37.590+0000:1687144357:2023-06-19T11:12:37.590+0000:You're welcome to provide a PR. Thanks.
0,CAMEL-19469,Improvement,Minor,"3.20.5, 4.0-M3",,"
None
",Open,Unresolved,None,Unassigned,James Netherton,0,2,2023-06-19 09:00:58+00:00,2023-08-09 09:01:35+00:00,"OpenTelemetry enables you to trace arbitrary method invocations by tagging them with the @WithSpan annotation:


https://opentelemetry.io/docs/instrumentation/java/automatic/annotations/#creating-spans-around-methods-with-withspan


For some scenarios, the tracing context does not seem to get propagated and the resulting spans end up being disassociated. For example:




from(""timer:tick?period=5s)
    .process(""myProcessor"");    






public class MyProcessor implements Processor {
    @WithSpan
    @Override
    public void process(Exchange exchange) {
        // Useful work here...
    }
}




This results in 2 spans. One for timer:tick & another for MyProcessor. The problem is that the parent span for MyProcessor is not set, so they appear as 2 distinct traces.


There is a workaround where you can configure the route like this and the span hierarchy ends up being correct:




from(""timer:tick?period=5s"")
    .to(""direct:start"");

from(""direct:start"")
    .process(""myProcessor"");




There's some more background in the original issue reported on Camel Quarkus:


https://github.com/apache/camel-quarkus/issues/4981


There's also a reproducer project here:


https://github.com/jamesnetherton/camel-opentelemetry-demo",davsclaus:1687319078:2023-06-21T11:44:38.451+0000:1687319078:2023-06-21T11:44:38.451+0000:The @WithSpan is not a Camel annotation so not sure how Camel should deal with this. 
0,CAMEL-19468,Dependency upgrade,Minor,4.0-M3,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Alexandru NeaÅ£Ä,0,1,2023-06-18 06:58:09+00:00,2023-06-18 08:16:24+00:00,"Update saxon to use the 12.2 release.
Release notes: https://www.saxonica.com/products/latest.xml#saxonJ12",
0,CAMEL-19467,Improvement,Minor,"3.19.0, 4.0-M3","4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,evan,0,1,2023-06-17 12:15:02+00:00,2023-06-18 07:51:17+00:00,"see PR


https://github.com/apache/camel/pull/10400


https://github.com/apache/camel/pull/10416",
0,CAMEL-19466,Improvement,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Peter Palaga,Peter Palaga,0,1,2023-06-17 10:06:47+00:00,2023-07-14 17:52:36+00:00,"The current fastinstall profile works with skip properties of the mojos that are supposed to be skipped. This works and brings substantial speedups, but there is more that can be done: 


When skipping a mojo by passing the skip property, the plugin jar and all its dependencies still need to be downloaded, opened, an isolated mojo classloader has to be set up, all required classes have to be loaded and the mojo.execute() method needs to be invoked...
... only to find out that the skip property is true and that the mojo does not need to be run at all. 


There is a trick explained in https://peter.palaga.org/2020/10/29/skipping-maven-mojos-properly.html that allows to skip even downloading the mojos and loading any its classes. In short, the idea is to have a ""full"" profile that contains all those test and formatting mojos. It is activated by negated ""!quickly"" property, so that invoking mvn without -Dquickly makes the profile active and passing -Dquickly makes inactive. This has saved some 30 seconds compared to using skip properties in Camel Quarkus.",
0,CAMEL-19465,Task,Major,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Peter Palaga,Peter Palaga,0,2,2023-06-17 09:53:33+00:00,2023-07-17 07:25:05+00:00,"Remote Maven snapshots are handy for third parties to quickly integrate with the newest changes in Camel. However, they should not be enabled as a part of the default build of Camel itself. Enabling them may cause or hide several kinds of issues:



There is no guarantee that the state of the snapshot repository is consistent: at any point in time it can contain artifacts from one or more builds that were based on one or more source commits. Combining artifacts built from multiple builds can lead to all kinds of incompatibilities or the other way round, it can happily hide an incompatibility introduced recently.
The snapshots are deployed with some delay against the state of the main branch. A new module merged to main now will be available only after few hours in the snapshots repo. This will inevitably make all PR CI jobs that rely on snapshots fail in that period.
Snapshots are simply ""the latest"": latest today is not the same as latest tomorrow. That breaks the reproducibility of the builds.



Hence I am hereby proposing to move Apache snapshots repository to a separate Maven profile so that folks wanting to use it can continue to do so, but the default build will become more reliable and reproducible.","davsclaus:1689328375:2023-07-14T17:52:55.517+0000:1689328375:2023-07-14T17:52:55.517+0000:Is this work done 
ppalaga:1689385796:2023-07-15T09:49:56.647+0000:1689385796:2023-07-15T09:49:56.647+0000:The main part was done in https://github.com/apache/camel/commit/88759d58aa3dba727d7a8b83837d7fb4034a4d0e but when checking now, I see that https://repository.apache.org/snapshots/ is still enabled by default for plugins. Moved that to the apache-snapshots profile in https://github.com/apache/camel/pull/10694"
0,CAMEL-19464,Dependency upgrade,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Nicolas Filotto,Claus Ibsen,0,2,2023-06-16 15:32:33+00:00,2023-06-23 08:28:27+00:00,We should upgrade to 3.5.x when SB and Q are also ready,"davsclaus:1687223037:2023-06-20T09:03:57.541+0000:1687223037:2023-06-20T09:03:57.541+0000:It would be good to upgrade to latest kafka.
https://kafka.apache.org/35/documentation.html#upgrade_3_5_0

davsclaus:1687223228:2023-06-20T09:07:08.202+0000:1687223228:2023-06-20T09:07:08.202+0000:[~ppalaga] at first glance I cannot see something of concern in the upgrade guide above (we only use kafka as client)
nfilotto:1687475272:2023-06-23T07:07:52.028+0000:1687475272:2023-06-23T07:07:52.028+0000:The related PR https://github.com/apache/camel/pull/10478"
0,CAMEL-19463,Dependency upgrade,Minor,None,,"
None
",Resolved,Invalid,None,Andrea Cosentino,Sasikumar Muthukrishnan Sampath,0,2,2023-06-16 15:14:51+00:00,2023-06-16 15:50:59+00:00,"A new vulnerability CVE-2023-34455 is identified with camel-kafka dependencies. The vulnerability is coming from snappy-java:1.1.8.4


Version 1.1.10.1 contains a patch for this issue. Please upgrade the snappy-java version to fix this issue


Â 
snappy-java is a fast compressor/decompressor for Java. Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.
The code in the function hasNextChunk in the fileSnappyInputStream.java checks if a given stream has more chunks to read. It does that by attempting to read 4 bytes. If it wasnât possible to read the 4 bytes, the function returns false. Otherwise, if 4 bytes were available, the code treats them as the length of the next chunk.
In the case that the `compressed` variable is null, a byte array is allocated with the size given by the input data. Since the code doesnât test the legality of the `chunkSize` variable, it is possible to pass a negative number (such as 0xFFFFFFFF which is -1), which will cause the code to raise a `java.lang.NegativeArraySizeException` exception. A worse case would happen when passing a huge positive value (such as 0x7FFFFFFF), which would raise the fatal `java.lang.OutOfMemoryError` error.","davsclaus:1686900667:2023-06-16T15:31:07.719+0000:1686900667:2023-06-16T15:31:07.719+0000:You need to report this to Apache Kafka as they should upgrade

[INFO] +- org.apache.kafka:kafka-clients:jar:3.4.1:compile
[INFO] |  +- com.github.luben:zstd-jni:jar:1.5.2-1:runtime
[INFO] |  +- org.lz4:lz4-java:jar:1.8.0:runtime
[INFO] |  \- org.xerial.snappy:snappy-java:jar:1.1.8.4:runtime
Sasikumarms:1686901212:2023-06-16T15:40:12.953+0000:1686901212:2023-06-16T15:40:12.953+0000:Created an issue in Apache Kafka backlog

[KAFKA-15096] CVE 2023-34455 - Vulnerability identified with Apache kafka - ASF JIRA"
0,CAMEL-19462,Task,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Unassigned,Claus Ibsen,0,3,2023-06-16 11:37:20+00:00,2023-08-04 15:17:56+00:00,"[WARNING]  * org.apache.camel:camel-package-maven-plugin:4.0.0-SNAPSHOT
[WARNING]   Plugin issue(s):
[WARNING]    * Plugin depends on the deprecated Maven 2.x compatibility layer, which may not be supported in Maven 4.x
[WARNING]    * Plugin depends on plexus-container-default, which is EOL","davsclaus:1686886666:2023-06-16T11:37:46.509+0000:1686886666:2023-06-16T11:37:46.509+0000:You can see via

mvn install -P fastinstall -Dmaven.plugin.validation=VERBOSE
jono.morris@xtra.co.nz:1689999642:2023-07-22T12:20:42.571+0000:1689999777:2023-07-22T12:22:57.907+0000:This warning is displayed when maven-compat is found in non test scope: [https://github.com/apache/maven/blob/master/maven-core/src/main/java/org/apache/maven/plugin/internal/Maven3CompatDependenciesValidator.java#L58]

Raised a pull-request [GitHub Pull Request #10784|https://github.com/apache/camel/pull/10784] removing the maven-compat dependency.Â 

This was previously required by the maven-plugin-test-harness dependency of maven-shared-utils, but this is no longer the case now that maven-shared-utils has been updated to v3.4.2.

The camel-package-maven-plugin module contains no further known components that rely on maven-compat, referring to [https://cwiki.apache.org/confluence/display/MAVEN/Plugin+migration+to+Maven3+dependencies]
davsclaus:1690010774:2023-07-22T15:26:14.665+0000:1690010774:2023-07-22T15:26:14.665+0000:Thanks Jono, you are welcome to look at some of the other plugins from us that may can be fixed as well.

[WARNING]
[WARNING] Plugin validation issues were detected in 15 plugin(s)
[WARNING]
[WARNING]  * org.apache.camel:camel-package-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.jooq:jooq-codegen-maven:3.18.5
[WARNING]  * org.apache.cxf:cxf-xjc-plugin:4.0.0
[WARNING]  * org.apache.maven.plugins:maven-archetype-plugin:3.2.1
[WARNING]  * org.apache.camel:camel-api-component-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.apache.camel.maven:camel-debezium-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.codehaus.mojo:sql-maven-plugin:1.5
[WARNING]  * org.apache.maven.plugins:maven-resources-plugin:3.3.1
[WARNING]  * org.apache.camel:bom-generator-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.codehaus.mojo:javacc-maven-plugin:3.0.1
[WARNING]  * org.apache.camel:sync-properties-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.apache.camel:camel-yaml-dsl-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.xolstice.maven.plugins:protobuf-maven-plugin:0.6.1
[WARNING]  * org.apache.openjpa:openjpa-maven-plugin:3.2.2
[WARNING]  * org.apache.camel:camel-eip-documentation-enricher-maven-plugin:4.0.0-SNAPSHOT
jono.morris@xtra.co.nz:1690082509:2023-07-23T11:21:49.767+0000:1690084242:2023-07-23T11:50:42.296+0000:Let me work through those.Â  I've started by creating a subtask for removing
plexus-container-default. Â https://issues.apache.org/jira/browse/CAMEL-19640Â  I can raise top-level tasks instead if preferred.
Thanks Jono.
jono.morris@xtra.co.nz:1690860634:2023-08-01T11:30:34.429+0000:1690860634:2023-08-01T11:30:34.429+0000:Removed the read-only element from parameters used or intended to be used in POM-specific configuration. otherwise maven displays a warning.

Parameter read-only element:
https://github.com/apache/maven-plugin-tools/blob/master/maven-plugin-annotations/src/main/java/org/apache/maven/plugins/annotations/Parameter.java#L80
jono.morris@xtra.co.nz:1690943620:2023-08-02T10:33:40.274+0000:1690943620:2023-08-02T10:33:40.274+0000:All the issues with camel plugins should be fixed now.
davsclaus:1690943884:2023-08-02T10:38:04.627+0000:1690943884:2023-08-02T10:38:04.627+0000:Thanks for the help.

And btw if you get a chance you are welcome to look at camel-spring-boot - it may have some WARN as well
https://github.com/apache/camel-spring-boot
davsclaus:1691023570:2023-08-03T08:46:10.472+0000:1691023570:2023-08-03T08:46:10.472+0000:camel-spring-boot has 1 of our own plugin 

[WARNING] Plugin validation issues were detected in 8 plugin(s)
[WARNING]
[WARNING]  * org.apache.maven.plugins:maven-install-plugin:2.5.2
[WARNING]  * org.apache.maven.plugins:maven-resources-plugin:3.2.0
[WARNING]  * org.apache.maven.plugins:maven-clean-plugin:3.1.0
[WARNING]  * org.apache.maven.plugins:maven-site-plugin:3.11.0
[WARNING]  * org.apache.maven.plugins:maven-enforcer-plugin:3.0.0
[WARNING]  * org.apache.maven.plugins:maven-surefire-plugin:3.1.2
[WARNING]  * org.apache.maven.plugins:maven-archetype-plugin:3.2.1
[WARNING]  * org.apache.camel.springboot:camel-spring-boot-generator-maven-plugin:4.0.0-SNAPSHOT
davsclaus:1691023586:2023-08-03T08:46:26.898+0000:1691023586:2023-08-03T08:46:26.898+0000:[~jono.morris@xtra.co.nz] you are welcome to fix that last camel-spring-boot
ggrzybek:1691108266:2023-08-04T08:17:46.713+0000:1691108266:2023-08-04T08:17:46.713+0000:Introducing plexus-xml 4.0.2 brought these Maven 4 transitive dependencies:
* org.apache.maven/maven-api-meta
* org.apache.maven/maven-api-xml
* org.apache.maven/maven-xml-impl

I thnk Camel itself should stay at Maven 3 (with CAMEL-19637 it'll be Maven 3.9.4 + Maven Resolver 1.9.14)
davsclaus:1691133472:2023-08-04T15:17:52.673+0000:1691133472:2023-08-04T15:17:52.673+0000:Thanks Jono"
0,CAMEL-19461,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Peter Palaga,0,3,2023-06-16 11:14:05+00:00,2023-11-22 20:01:17+00:00,"As discussed in https://github.com/apache/camel/pull/10403#issuecomment-1594287508 , 


I'd like to replace the current checkstyle setup with a more ergonomic tooling that would format the sources during the default build. The new configuration would require much less attention from both newcomers and regular contributors. Most of formatting would be done automatically by Maven plugins without additional local configuration in IDE and without the need to fix the validation issues manually.


Here is the idea how the individual Checkstyle checks can be replaced: 



<module name=""Translation""/> - no replacement, we do not have any translations, do we?
<module name=""SuppressWarningsFilter""/> - no replacement, the annotations will be removed
<module name=""Header""> - replace by maven license plugin
<module name=""RegexpMultiline"">
        <property name=""format"" value=""(\bgpl\b)|(\bgplv2\b)|(\bgnu\sgeneral\spublic\s*license\b)|(\bwww\.gnu\.org\/licenses\/gpl\.txt\b)""/>
        <property name=""ignoreCase""  value=""true""/>
    </module> - would transform it into a groovy/ant script
<module name=""FileLength""> - no replacement
<module name=""FileTabCharacter""> - done by formatter plugin
<module name=""LineLength""> - done by formatter plugin
<module name=""SuppressWithPlainTextCommentFilter""> - no replacement, the inline tags should be removed
<module name=""ConstantName""/><module name=""LocalFinalVariableName""/><module name=""LocalVariableName""/><module name=""MemberName""/><module name=""MethodName""/><module name=""PackageName""/><module name=""ParameterName""/><module name=""StaticVariableName""/><module name=""TypeName""/> - no replacement. I do not think we had many PR in the past where these would hit.
<module name=""AvoidStarImport""> - should be done by impsort plugin
<module name=""IllegalImport""/> <!-- defaults to sun.* packages --> I guess using banned dependencies of enforcer plugin is a better way to enforce this?
<module name=""RedundantImport""/> done either by impsort or formatter plugins.
<module name=""ImportOrder""> - done by impsort
<module name=""AnonInnerLength""><module name=""ExecutableStatementCount""><module name=""MethodLength""> - no replacement
<module name=""ModifierOrder""/> - done by formatter
<module name=""RedundantModifier""> - done by formatter IIRC
<module name=""LeftCurly""/><module name=""NeedBraces""/><module name=""RightCurly""/> no replacement
<module name=""CovariantEquals""/><module name=""EmptyStatement""/><module name=""EqualsHashCode""/><module name=""MissingSwitchDefault""/><module name=""StringLiteralEquality""/> - aren't these covered by PMD?
<module name=""IllegalInstantiation""/><module name=""SimplifyBooleanExpression""/>       <module name=""SimplifyBooleanReturn""/> - no replacement
<module name=""NestedIfDepth""><module name=""NestedTryDepth""><module name=""SuperFinalize""/> - no replacement
<module name=""IllegalThrows""> - PMD?
<module name=""PackageDeclaration""/><module name=""ReturnCount""> - no replacement
<module name=""DeclarationOrder""/> - no replacement
<module name=""ExplicitInitialization""/> - java compiler complains where really necessary
<module name=""DefaultComesLast""/><module name=""FallThrough""/><module name=""MultipleVariableDeclarations""/><module name=""UnnecessaryParentheses""/><module name=""FinalClass""/><module name=""HideUtilityClassConstructor""/><module name=""MutableException""><module name=""ThrowsCount""><module name=""BooleanExpressionComplexity""><module name=""UpperEll""/><module name=""DescendantToken""> - no replacement
<module name=""SuppressionCommentFilter""><module name=""SuppressionCommentFilter""> - no replacement, the inline tags should be removed.","nfilotto:1690349987:2023-07-26T13:39:47.876+0000:1690350707:2023-07-26T13:51:47.731+0000:There are many ""no replacement"" and ""PMD?"". This important behavior change can be an issue when we cherry-pick some code from one branch to another or vis versa. Indeed, we can have the same code accepted in main but rejected by the build in other branches so we could end up with a different fix between branches if which can quickly be a problem too in terms of maintenance.
TBH, I still don't really understand the problem with checkstyle, what's wrong with it exactly? Why is good to use PMD but wrong to use checkstlye?
nfilotto:1690350656:2023-07-26T13:50:56.803+0000:1690350656:2023-07-26T13:50:56.803+0000:IMHO, whatever the choice regarding checkstyle, it is really critical for us as maintainers to apply the same logic on the branches of all supported versions to ensure that we won't get any behavior change in the build.
davsclaus:1700654477:2023-11-22T20:01:17.556+0000:1700654477:2023-11-22T20:01:17.556+0000:We should keep as-is as this has been the standard for many years"
0,CAMEL-19460,Dependency upgrade,Minor,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-06-15 14:13:55+00:00,2023-06-15 14:31:05+00:00,We use v29 and there is a v30,
0,CAMEL-19459,Bug,Minor,4.0-M3,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Claus Ibsen,Alexandru NeaÅ£Ä,0,2,2023-06-15 07:56:26+00:00,2023-06-17 11:34:38+00:00,camel-report-maven-plugin fails to run due to missing class: org.eclipse.aether.spi.synccontext.SyncContextFactory. Last working version: 4.0.0-M2,"davsclaus:1686787384:2023-06-15T08:03:04.331+0000:1686787384:2023-06-15T08:03:04.331+0000:camel-examples/examples/main main â¯ mvn camel-report:validate
davsclaus:1686789266:2023-06-15T08:34:26.216+0000:1686789266:2023-06-15T08:34:26.216+0000:This is a bit weird why this JAR is not included
davsclaus:1686800202:2023-06-15T11:36:42.764+0000:1686800202:2023-06-15T11:36:42.764+0000:What maven version do you use ?
alex-nt:1686800366:2023-06-15T11:39:26.002+0000:1686800366:2023-06-15T11:39:26.002+0000:This was also my first assumption, I tried with bot +3.8.6+ and +3.9.2.+ The issue was present on both. 
davsclaus:1686801168:2023-06-15T11:52:48.639+0000:1686801168:2023-06-15T11:52:48.639+0000:Maven 3.8.8 comes with maven-resolver-spi-1.6.3 which does not have that class. This requires a newer version.

alex-nt:1686801259:2023-06-15T11:54:19.705+0000:1686801259:2023-06-15T11:54:19.705+0000:Hmmm, so +3.9.2+ should have worked, right? I will try again.
davsclaus:1686803133:2023-06-15T12:25:33.002+0000:1686803133:2023-06-15T12:25:33.002+0000:Okay so its the new camel-tooling-maven that we use for downloading JARs that uses this class that requires a -spi 1.7.0 or newer. And somehow when using maven plugins then maven itself will use its existing old 1.6.3 release. We cannot ""override"" this
davsclaus:1686803403:2023-06-15T12:30:03.574+0000:1686803403:2023-06-15T12:30:03.574+0000:maven 3.8.8 uses resolver 1.6.3
maven 3.9.2 uses resolver 1.9.10
alex-nt:1686803526:2023-06-15T12:32:06.602+0000:1686803526:2023-06-15T12:32:06.602+0000:Clearly I did something *very* wrong when testing with +3.9.2+. I will double check my setup as soon as I can. Thanks!
davsclaus:1686805545:2023-06-15T13:05:45.491+0000:1686805545:2023-06-15T13:05:45.491+0000:Okay this gets a bit complex as camel-catalog-maven is for downloading JARs but it works standalone. When you run it indirectly via mvn then all hell is loose.
We can create the old way and have camel-catalog-maven-legacy and use it with the report plugin
alex-nt:1686806307:2023-06-15T13:18:27.133+0000:1686806307:2023-06-15T13:18:27.133+0000:Validated, it works with +3.9.2+ and I fucked up the first test, I do apologise for that. The problem gets gnarly as I think the default version everywhere is +3.8.x+. I'm looking at how to update things around my company (and nixpkgs https://search.nixos.org/packages?channel=23.05&show=maven&from=0&size=50&sort=relevance&type=packages&query=maven).
alex-nt:1686806937:2023-06-15T13:28:57.703+0000:1686806950:2023-06-15T13:29:10.995+0000:More bad news, in azure the default is +3.8.8+ https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
alex-nt:1686808710:2023-06-15T13:58:30.326+0000:1686808710:2023-06-15T13:58:30.326+0000:And it was recently downgraded due to incompatibilities with other projects: https://github.com/actions/runner-images/issues/7230
davsclaus:1686809447:2023-06-15T14:10:47.967+0000:1686809447:2023-06-15T14:10:47.967+0000:Okay it can run again, but there is a little ugly WARN afterwards

{code}
[INFO] --- camel-report:4.0.0-SNAPSHOT:validate (default-cli) @ camel-example-main ---
[INFO] Detected Camel version used in project: 4.0.0-SNAPSHOT
[INFO] Validating using Camel version: 4.0.0-SNAPSHOT
[INFO] Endpoint validation success: (1 = passed, 0 = invalid, 0 = incapable, 0 = unknown components, 0 = deprecated options)
[INFO] Simple validation success: (0 = passed, 0 = invalid)
[INFO] Endpoint pair (seda/direct) validation success: (0 = pairs)
[INFO] Duplicate route id validation success: (1 = ids)
[INFO] Configuration validation success: (2 = passed, 0 = invalid, 0 = incapable, 0 = unknown components, 0 = deprecated options)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  0.870 s
[INFO] Finished at: 2023-06-15T16:08:00+02:00
[INFO] ------------------------------------------------------------------------
[WARNING]
[WARNING] Plugin validation issues were detected in 3 plugin(s)
[WARNING]
[WARNING]  * org.apache.camel:camel-package-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.apache.camel:camel-report-maven-plugin:4.0.0-SNAPSHOT
[WARNING]  * org.apache.maven.plugins:maven-site-plugin:3.11.0
[WARNING]
[WARNING] For more or less details, use 'maven.plugin.validation' property with one of the values (case insensitive): [BRIEF, DEFAULT, VERBOSE]
[WARNING]
Exception in thread ""ivy-httpclient-shutdown-handler"" java.lang.NoClassDefFoundError: org/apache/http/impl/conn/PoolingHttpClientConnectionManager$2
	at org.apache.http.impl.conn.PoolingHttpClientConnectionManager.shutdown(PoolingHttpClientConnectionManager.java:413)
	at org.apache.http.impl.client.HttpClientBuilder$2.close(HttpClientBuilder.java:1248)
	at org.apache.http.impl.client.InternalHttpClient.close(InternalHttpClient.java:201)
	at org.apache.ivy.util.url.HttpClientHandler.close(HttpClientHandler.java:357)
	at org.apache.ivy.util.url.HttpClientHandler$1.run(HttpClientHandler.java:84)
	at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.lang.ClassNotFoundException: org.apache.http.impl.conn.PoolingHttpClientConnectionManager$2
	at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)
	... 6 more
{code}
davsclaus:1686968824:2023-06-17T10:27:04.107+0000:1686968824:2023-06-17T10:27:04.107+0000:Not sure if we can get rid of this WARN as its Apache Ivy. We can maybe configure somehow logging to turn of logging of that class
alex-nt:1686969166:2023-06-17T10:32:46.657+0000:1686969166:2023-06-17T10:32:46.657+0000:Not a big problem. I looked a bit more at our CI builds and camel is not the biggest offender with regards to that warning. Thanks a lot for the fix!
davsclaus:1686972578:2023-06-17T11:29:38.275+0000:1686972578:2023-06-17T11:29:38.275+0000:Okay I had to make it use same version as apache ivy 4.5.1 release.

            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.10</version>

Then the WARN is gone"
0,CAMEL-19458,Dependency upgrade,Minor,4.0-M3,"3.20.7, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.0, 4.0-RC1, 4.0.0",Unassigned,Alexandru NeaÅ£Ä,0,2,2023-06-15 06:41:33+00:00,2023-06-17 10:17:32+00:00,"We found a regression in bouncycastle 1.73 with PGP encryption/decryption. Some payloads would fail the checksum validation. The issue was found during 1.72, fixed in point releases (last working release 1.72.2) and was broken again in 1.73. As of 1.74 we can no longer reproduce the issue.",davsclaus:1686875462:2023-06-16T08:31:02.987+0000:1686875462:2023-06-16T08:31:02.987+0000:Thanks for reporting and the PR
0,CAMEL-19457,Bug,Minor,3.20.5,None,"
None
",Resolved,Fixed,"3.20.7, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,geyipeng,0,3,2023-06-15 02:53:55+00:00,2023-06-18 19:48:41+00:00,InflightRepository size can be negativeï¼I think size should be a non negative integerã,"davsclaus:1686786530:2023-06-15T07:48:50.686+0000:1686786530:2023-06-15T07:48:50.686+0000:Its the dynamic router component and not camel-core
ggboy:1686786804:2023-06-15T07:53:24.137+0000:1686786949:2023-06-15T07:55:49.876+0000:i dont find dynamic-route component in module !image-2023-06-15-15-53-16-945.png!
davsclaus:1686787330:2023-06-15T08:02:10.429+0000:1686787330:2023-06-15T08:02:10.429+0000:Thanks for reporting and the sample project
Steve973:1687060793:2023-06-18T11:59:53.485+0000:1687060793:2023-06-18T11:59:53.485+0000:HI [~davsclaus] I saw that you pushed this fix, and you removed the test for async mode, rather than fixing that test.Â  Is there a reason why you preferred to remove the test?
Steve973:1687062163:2023-06-18T12:22:43.169+0000:1687062163:2023-06-18T12:22:43.169+0000:[~davsclaus] here is the fixed test:
{code:java}
@Test
void testProcessAsynchronous() {
    when(endpoint.getConfiguration().isSynchronous()).thenReturn(false);
    when(component.getRoutingProcessor(anyString())).thenReturn(processor);
    boolean result = producer.process(exchange, asyncCallback);
    Assertions.assertFalse(result);
} {code}
davsclaus:1687069608:2023-06-18T14:26:48.911+0000:1687069608:2023-06-18T14:26:48.911+0000:You are welcome to send a PR"
0,CAMEL-19456,Improvement,Minor,"3.7.5, 3.20.5","4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,byungkyu.han,0,2,2023-06-15 02:07:08+00:00,2023-06-20 09:07:36+00:00,"When the removeRoute() method is called on AbstractCamelContext, it attempts to remove the endpoints from the EndpointRegistry. However, if the keys do not match, it invokes the matchEndpoint() method. The more endpoints there are, and the larger the number of endpoints that need to be removed, the slower the process becomes.




@Test
public void testRemoveRoute() throws Exception {
    DefaultCamelContext ctx = new DefaultCamelContext(false);

    ctx.disableJMX();
    ctx.getRegistry().bind(""MyBean"", UtilBean.class);

    ctx.addRoutes(new RouteBuilder() {
        @Override
        public void configure() throws Exception {
            from(""direct:start"").routeId(""rawRoute"").to(""MyBean?method=RAW(addString('aa a',${body}))"");
        }
    });
    ctx.start();


    EndpointRegistry<NormalizedUri> endpoints = ctx.getEndpointRegistry();
    Map<String, RouteService> routeServices = ctx.getRouteServices();
    Set<Endpoint> routeEndpoints =  routeServices.get(""rawRoute"").gatherEndpoints();
    for(Endpoint endpoint : routeEndpoints) {
        Endpoint oldEndpoint = endpoints.remove(ctx.getEndpointKey(endpoint.getEndpointUri()));
        assertNotNull(oldEndpoint); //fail
    }

}
// ì½ë ìë¦¬ íìì




Â 


Â The reason for the mismatch in keys is that when creating the NormalizeUri, the RAW() syntax is used, which does not apply the UnsafeUriCharactersEncoder.encode. However, during Endpoint creation, the UnsafeUriCharactersEncoder.encode is used. This inconsistency in the encoding process leads to different keys being generated for the endpoints between the NormalizeUri and Endpoint creation. As a result, when removing routes, the keys used for removal may not match exactly with the keys stored in the EndpointRegistry.


To address the issue, one possible solution is to perform the removal operation using a decoded URI. By decoding the URI before removing it, you can ensure that the keys match accurately in the EndpointRegistry.




@Override
public Collection<Endpoint> removeEndpoints(String uri) throws Exception {
    Collection<Endpoint> answer = new ArrayList<>();
    Endpoint oldEndpoint = endpoints.remove(getEndpointKey(uri));
    if (oldEndpoint != null) {
        answer.add(oldEndpoint);
        stopServices(oldEndpoint);
    } else {
        String encode = unsafeUriCharactersDecodeWithOutPercent(uri); 
        oldEndpoint = endpoints.remove(getEndpointKey(encode));
        if(oldEndpoint != null){
            answer.add(oldEndpoint);
            stopServices(oldEndpoint);
        }else {
            List<NormalizedUri> toRemove = new ArrayList<>();
            for (Map.Entry<NormalizedUri, Endpoint> entry : endpoints.entrySet()) {
                oldEndpoint = entry.getValue();
                if (EndpointHelper.matchEndpoint(this, oldEndpoint.getEndpointUri(), uri)) {
                    try {
                        stopServices(oldEndpoint);
                    } catch (Exception e) {
                        LOG.warn(""Error stopping endpoint "" + oldEndpoint + "". This exception will be ignored."", e);
                    }
                    answer.add(oldEndpoint);
                    toRemove.add(entry.getKey());
                }
            }
            for (NormalizedUri key : toRemove) {
                endpoints.remove(key);
            }
        }
    }

    // notify lifecycle its being removed
    for (Endpoint endpoint : answer) {
        for (LifecycleStrategy strategy : lifecycleStrategies) {
            strategy.onEndpointRemove(endpoint);
        }
    }

    return answer;
}
// ì½ë ìë¦¬ íìì",davsclaus:1686968714:2023-06-17T10:25:14.215+0000:1686968714:2023-06-17T10:25:14.215+0000:Do you see the endpoint NOT getting removed when using RAW. Or is your PR only about that the removing is slow ?
0,CAMEL-19455,Improvement,Minor,None,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Freeman Yue Fang,Freeman Yue Fang,0,2,2023-06-14 15:59:28+00:00,2023-06-15 09:19:44+00:00,As in some cases the those property values may not be Map from other camel components(not camel-cxf) and they are not meaningful in the current cxf invocation context,"davsclaus:1686732288:2023-06-14T16:44:48.812+0000:1686732288:2023-06-14T16:44:48.812+0000:Can you cherry pick this to camel-3.x branch

ffang:1686736351:2023-06-14T17:52:31.235+0000:1686736351:2023-06-14T17:52:31.235+0000:Done, backported to camel-3.x branch as well"
0,CAMEL-19454,Improvement,Major,None,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-06-14 06:02:58+00:00,2023-06-14 10:53:17+00:00,So you can export with --open-api,davsclaus:1686700715:2023-06-14T07:58:35.962+0000:1686710377:2023-06-14T10:39:37.410+0000:TODO: copy api spec file to exported classpath *DONE*
0,CAMEL-19453,Improvement,Major,None,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-06-14 05:51:14+00:00,2023-06-14 06:01:56+00:00,camel run --open-api=myfile.yaml,
0,CAMEL-19452,Bug,Major,3.20.5,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-06-14 05:42:49+00:00,2023-06-14 05:49:20+00:00,this example does not show anything in the console: camel-kamelets-examples/jbang/open-api,
0,CAMEL-19451,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Peter Palaga,Peter Palaga,0,1,2023-06-13 20:42:01+00:00,2023-06-16 11:32:54+00:00,"We currently have grpc-version at 1.54.0 in camel-parent and it is used in several components. However gRPC artifacts are pulled also by some other components as transitive dependencies. The lack of dependency management causes that several different versions of gRPC artifacts are downloaded and used throughout Camel. 


Importing grpc-bom would solve all the above problems.


Here is a report of all jackson artifacts used thoughout Camel




$ ./mvnw org.l2x6.cq:cq-prod-maven-plugin:2.23.0:find-dependency -N -e '-Dcq.gavPattern=io.grpc:*'
...
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.etcd:jetcd-core:0.7.5:jar:
        -> io.etcd:jetcd-grpc:0.7.5:jar:
        -> io.grpc:grpc-netty:1.51.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.etcd:jetcd-core:0.7.5:jar:
        -> io.etcd:jetcd-grpc:0.7.5:jar:
        -> io.grpc:grpc-protobuf:1.51.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.etcd:jetcd-core:0.7.5:jar:
        -> io.etcd:jetcd-grpc:0.7.5:jar:
        -> io.grpc:grpc-protobuf:1.51.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.51.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.etcd:jetcd-core:0.7.5:jar:
        -> io.etcd:jetcd-grpc:0.7.5:jar:
        -> io.grpc:grpc-stub:1.51.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.etcd:jetcd-core:0.7.5:jar:
        -> io.etcd:jetcd-grpc:0.7.5:jar:
        -> io.grpc:grpc-grpclb:1.51.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-core:1.47.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-core:1.47.0:jar:
        -> io.grpc:grpc-api:1.47.0:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-core:1.47.0:jar:
        -> io.grpc:grpc-api:1.47.0:jar:
        -> io.grpc:grpc-context:1.47.0:jar:
[WARNING] Found org.apache.camel:camel-geocoder:4.0.0-SNAPSHOT:jar:
        -> com.google.maps:google-maps-services:2.2.0:jar:
        -> io.opencensus:opencensus-api:0.31.0:jar:
        -> io.grpc:grpc-context:1.27.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-api:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-context:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-stub:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-protobuf:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-protobuf-lite:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-alts:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-grpclb:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-auth:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-netty-shaded:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-googleapis:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> io.grpc:grpc-core:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-calendar:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client:1.42.3:jar:
        -> io.opencensus:opencensus-api:0.31.1:jar:
        -> io.grpc:grpc-context:1.27.2:jar:
[WARNING] Found org.apache.camel:camel-google-drive:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client:1.42.3:jar:
        -> io.opencensus:opencensus-api:0.31.1:jar:
        -> io.grpc:grpc-context:1.27.2:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-api:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-context:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-stub:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-protobuf:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-auth:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-netty-shaded:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-core:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-alts:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> io.grpc:grpc-grpclb:1.40.1:jar:
[WARNING] Found org.apache.camel:camel-google-mail:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client:1.42.3:jar:
        -> io.opencensus:opencensus-api:0.31.1:jar:
        -> io.grpc:grpc-context:1.27.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-api:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-context:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-stub:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-protobuf:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-alts:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-grpclb:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-auth:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-netty-shaded:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-googleapis:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-xds:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-services:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> io.grpc:grpc-core:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-api:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-context:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-stub:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-protobuf:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-alts:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-grpclb:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-auth:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-netty-shaded:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-core:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-googleapis:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-xds:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> io.grpc:grpc-services:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-sheets:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client:1.42.3:jar:
        -> io.opencensus:opencensus-api:0.31.1:jar:
        -> io.grpc:grpc-context:1.27.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-core:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-alts:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-grpclb:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-context:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-protobuf:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-api:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-netty-shaded:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-auth:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-stub:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-googleapis:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-xds:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-services:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> io.grpc:grpc-protobuf-lite:1.50.2:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-auth:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-auth:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-auth:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
        -> io.grpc:grpc-context:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-stub:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-jira:4.0.0-SNAPSHOT:jar:
        -> com.google.oauth-client:google-oauth-client:1.34.0:jar:
        -> com.google.http-client:google-http-client:1.41.8:jar:
        -> io.opencensus:opencensus-api:0.31.0:jar:
        -> io.grpc:grpc-context:1.27.2:jar:
[WARNING] Found org.apache.camel:camel-opentelemetry:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty-shaded:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-opentelemetry:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty-shaded:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-opentelemetry:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty-shaded:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-opentelemetry:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty-shaded:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
        -> io.grpc:grpc-context:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
        -> io.grpc:grpc-context:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-stub:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
        -> io.grpc:grpc-context:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-stub:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-api:1.54.0:jar:
        -> io.grpc:grpc-context:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-protobuf:1.54.0:jar:
        -> io.grpc:grpc-protobuf-lite:1.54.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-stub:1.54.0:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.camunda:zeebe-gateway-protocol-impl:8.1.9:jar:
        -> io.grpc:grpc-protobuf:1.49.2:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.camunda:zeebe-gateway-protocol-impl:8.1.9:jar:
        -> io.grpc:grpc-protobuf:1.49.2:jar:
        -> io.grpc:grpc-protobuf-lite:1.49.2:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.grpc:grpc-stub:1.49.2:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.grpc:grpc-core:1.49.2:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.grpc:grpc-api:1.49.2:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.grpc:grpc-api:1.49.2:jar:
        -> io.grpc:grpc-context:1.49.2:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.grpc:grpc-netty:1.49.2:jar:",
0,CAMEL-19450,Bug,Minor,3.20.5,None,"
None
",Resolved,Not A Bug,None,Unassigned,Marat Gubaidullin,0,2,2023-06-13 20:29:46+00:00,2023-06-16 15:05:36+00:00,"YAML DSL used




- routeConfiguration:
    intercept:
      - id: intercept-9b31
        steps:
          - log:
              message: Interceptor ${body}
              id: log-c2f5
- route:
    id: route-ddaa
    from:
      uri: kamelet:timer-source
      id: from-847d
      parameters:
        message: Hello
      steps:
        - log:
            message: Main ${body}
            id: log-7972




Result:




2023-06-13 16:25:52.478  INFO 37141 --- [           main] org.apache.camel.main.MainSupport   : Apache Camel (JBang) 3.20.5 is starting
2023-06-13 16:25:52.799  INFO 37141 --- [           main] org.apache.camel.main.MainSupport   : Using Java 11.0.7 with PID 37141. Started by marat in /Users/marat/projects/test/karavan
2023-06-13 16:25:52.821  INFO 37141 --- [           main] mel.cli.connector.LocalCliConnector : Camel CLI enabled (local)
2023-06-13 16:25:53.456  INFO 37141 --- [           main] g.apache.camel.main.BaseMainSupport : Auto-configuration summary
2023-06-13 16:25:53.457  INFO 37141 --- [           main] g.apache.camel.main.BaseMainSupport :     [application.properties]       camel.health.enabled=true
2023-06-13 16:25:53.457  INFO 37141 --- [           main] g.apache.camel.main.BaseMainSupport :     [application.properties]       camel.health.exposureLevel=full
Node should have only have 1 key, was: 2 keys: [id,steps] (Maybe this is an indent problem in the YAML source).
 in file:demo.camel.yaml, line 3, column 9:
          - id: intercept-9b31
            ^

        at org.apache.camel.dsl.yaml.common.YamlDeserializationContext.resolve(YamlDeserializationContext.java:193)
        at org.apache.camel.dsl.yaml.common.YamlDeserializationContext.mandatoryResolve(YamlDeserializationContext.java:178)
        at org.apache.camel.dsl.yaml.common.YamlDeserializerSupport.asCollection(YamlDeserializerSupport.java:324)
        at org.apache.camel.dsl.yaml.common.YamlDeserializerSupport.asCollection(YamlDeserializerSupport.java:303)
        at org.apache.camel.dsl.yaml.common.YamlDeserializerSupport.asList(YamlDeserializerSupport.java:284)
        at org.apache.camel.dsl.yaml.deserializers.RouteConfigurationDefinitionDeserializer.construct(RouteConfigurationDefinitionDeserializer.java:101)
        at org.apache.camel.dsl.yaml.common.YamlDeserializationContext$2.construct(YamlDeserializationContext.java:215)
        at org.apache.camel.dsl.yaml.YamlRoutesBuilderLoader$1.configuration(YamlRoutesBuilderLoader.java:270)
        at org.apache.camel.builder.RouteConfigurationBuilder.addRouteConfigurationsToCamelContext(RouteConfigurationBuilder.java:78)","davsclaus:1686690959:2023-06-14T05:15:59.712+0000:1686690959:2023-06-14T05:15:59.712+0000:Its a bit ""ugly"" as its an array, so you need to do like this

{code}
- routeConfiguration:
    intercept:
      - intercept:
          id: intercept-9b31
          steps:
            - log:
                message: Interceptor ${body}
                id: log-c2f5
- route:
    id: route-ddaa
    from:
      uri: kamelet:timer-source
      id: from-847d
      parameters:
        message: Hello
      steps:
        - log:
            message: Main ${body}
            id: log-7972
{code}
marat.gubaidullin@gmail.com:1686897873:2023-06-16T14:44:33.822+0000:1686897873:2023-06-16T14:44:33.822+0000:doCatch in doTry is defined as the same array as intercept in camelYamlDsl.json
However doCatch does not require additional doCatch tag:
{code:java}
             doCatch:
              - exception:
                  - java.io.IOException
                id: doCatch-cbfa
                steps:
                  - log:
                      message: ${body}
                      id: log-78fd
              - exception:
                  - java.io.IOException
                id: doCatch-e7a4
                steps:
                  - log:
                      message: ${body}
                      id: log-7c1c
{code}

Perhaps, we could sync all this arrays and make more consistent DSL?
davsclaus:1686899136:2023-06-16T15:05:36.785+0000:1686899136:2023-06-16T15:05:36.785+0000:No not in the current mdeol as it has some issues when its based on JAXB limitations.
"
0,CAMEL-19449,Improvement,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,1,1,2023-06-13 19:12:17+00:00,2023-06-19 08:59:24+00:00,Add configuration to control if URIs should be a single long URI string or expanded into key: value parameters,
0,CAMEL-19448,Dependency upgrade,Minor,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-06-13 15:48:12+00:00,2023-06-13 19:00:17+00:00,No Desc,
0,CAMEL-19447,Task,Major,None,,"

easy

",Resolved,Fixed,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-06-13 15:29:53+00:00,2023-07-19 11:57:06+00:00,"It seems that there are a few minor cleanups that we can do on the tests for the camel-kafka component. For instance, there seems to exist a few grammar problems, lack of usage of final variables, threading issues and other minor-problems.","nikita_konovalov:1689722612:2023-07-19T07:23:32.381+0000:1689722612:2023-07-19T07:23:32.381+0000:Take this one
orpiske:1689726598:2023-07-19T08:29:58.271+0000:1689726598:2023-07-19T08:29:58.271+0000:All yours. Thanks!
orpiske:1689739026:2023-07-19T11:57:06.008+0000:1689739026:2023-07-19T11:57:06.008+0000:Resolved with the linked PRs."
0,CAMEL-19446,Task,Major,None,4.0-RC2,"

easy

",Resolved,Fixed,4.0-RC2,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-13 14:49:36+00:00,2023-07-11 14:06:20+00:00,"It seems that there are a few minor cleanups that we can do on the tests for the camel-caffeine component. For instance, there seems to exist a few grammar problems, lack of usage of final variables, memory problems and other minor items that could make the tests cleaner and leaner.",orpiske:1689055580:2023-07-11T14:06:20.646+0000:1689055580:2023-07-11T14:06:20.646+0000:Resolved with the linked PRs.
0,CAMEL-19445,Task,Major,None,4.0-RC2,"

easy

",Resolved,Fixed,4.0-RC2,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-13 14:41:00+00:00,2023-07-11 14:07:23+00:00,"Some tests on camel-caffeine have assertions that can be simplified:



CaffeineLoadCacheProducerTest
CaffeineIdempotentRepositoryTest",orpiske:1689055643:2023-07-11T14:07:23.558+0000:1689055643:2023-07-11T14:07:23.558+0000:Resolved with https://github.com/apache/camel/pull/10644
0,CAMEL-19444,Task,Major,"3.20.5, 4.0-M3",4.0-RC2,"

easy

",Resolved,Fixed,4.0-RC2,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-13 14:25:49+00:00,2023-07-11 14:04:24+00:00,There are grammar errors on the documentation for the Kafka component. We should review and fix those errors.,orpiske:1689055464:2023-07-11T14:04:24.228+0000:1689055464:2023-07-11T14:04:24.228+0000:Resolved with the linked PRs.
0,CAMEL-19443,Bug,Major,3.20.4,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-06-13 12:58:01+00:00,2023-06-13 15:33:13+00:00,"See CAMEL-19411


There was also an underlying bug where the kamelet route template would be set a default error handler eager, instead from route configuration.",
0,CAMEL-19442,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Peter Palaga,Peter Palaga,0,1,2023-06-13 11:57:20+00:00,2023-07-14 20:04:58+00:00,"There is gson-version at 2.10.1 in camel-parent and it is used in several components. However, Gson is pulled by a few more components transitively:




$ ./mvnw org.l2x6.cq:cq-prod-maven-plugin:2.23.0:find-dependency -N -e '-Dcq.gavPattern=com.google.code.gson:*'
...
[WARNING] Found org.apache.camel:camel-test-infra-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-minicluster:3.3.5:jar:
        -> org.apache.hadoop:hadoop-common:3.3.5:jar:tests
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-couchdb:4.0.0-SNAPSHOT:jar:
        -> org.lightcouch:lightcouch:0.2.0:jar:
        -> com.google.code.gson:gson:2.8.2:jar:
[WARNING] Found org.apache.camel:camel-digitalocean:4.0.0-SNAPSHOT:jar:
        -> com.myjeeva.digitalocean:digitalocean-api-client:2.17:jar:
        -> com.google.code.gson:gson:2.7:jar:
[WARNING] Found org.apache.camel:camel-djl:4.0.0-SNAPSHOT:jar:
        -> ai.djl:api:0.21.0:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-core:1.47.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-geocoder:4.0.0-SNAPSHOT:jar:
        -> com.google.maps:google-maps-services:2.2.0:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-github:4.0.0-SNAPSHOT:jar:
        -> org.eclipse.mylyn.github:org.eclipse.egit.github.core:2.1.5:jar:
        -> com.google.code.gson:gson:2.2.2:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-calendar:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-gson:1.42.3:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-drive:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-gson:1.42.3:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-functions:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-functions:2.2.0:jar:
        -> com.google.code.gson:gson:2.8.8:jar:
[WARNING] Found org.apache.camel:camel-google-mail:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-gson:1.42.3:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-pubsub:1.121.0:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-secretmanager:2.2.0:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-sheets:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-gson:1.42.3:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-gson:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-common:3.3.5:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-functiongraph:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-iam:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-obs:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-hyperledger-aries:4.0.0-SNAPSHOT:jar:
        -> io.nessus.aries:nessus-aries-common:0.2.0:jar:
        -> network.idu.acapy:aries-client-python:0.7.25:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-influxdb2:4.0.0-SNAPSHOT:jar:
        -> com.influxdb:influxdb-client-java:6.8.0:jar:
        -> com.influxdb:influxdb-client-core:6.8.0:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-ironmq:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-jira:4.0.0-SNAPSHOT:jar:
        -> com.google.oauth-client:google-oauth-client:1.34.0:jar:
        -> com.google.http-client:google-http-client-gson:1.41.8:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-jsonata:4.0.0-SNAPSHOT:jar:
        -> com.ibm.jsonata4java:JSONata4Java:2.2.4:jar:
        -> com.google.code.gson:gson:2.10:jar:
[WARNING] Found org.apache.camel:camel-olingo2-api:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:olingo-odata2-core:2.0.11:jar:
        -> com.google.code.gson:gson:2.4:jar:
[WARNING] Found org.apache.camel:camel-olingo2:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-olingo2-api:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:olingo-odata2-core:2.0.11:jar:
        -> com.google.code.gson:gson:2.4:jar:
[WARNING] Found org.apache.camel:camel-opentelemetry:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty-shaded:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-protobuf:4.0.0-SNAPSHOT:jar:
        -> com.google.protobuf:protobuf-java-util:3.19.6:jar:
        -> com.google.code.gson:gson:2.8.6:jar:
[WARNING] Found org.apache.camel:camel-pubnub:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> io.grpc:grpc-netty:1.54.0:jar:
        -> io.grpc:grpc-core:1.54.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-slack:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-splunk:4.0.0-SNAPSHOT:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-spring-redis:4.0.0-SNAPSHOT:jar:
        -> redis.clients:jedis:4.4.2:jar:
        -> com.google.code.gson:gson:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-swift:4.0.0-SNAPSHOT:jar:
        -> com.prowidesoftware:pw-iso20022:SRU2022-10.0.0:jar:
        -> com.google.code.gson:gson:2.9.0:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> io.camunda:zeebe-client-java:8.1.9:jar:
        -> io.grpc:grpc-core:1.49.2:jar:
        -> com.google.code.gson:gson:2.9.0:jar:





As seen above, several different versions are pulled. This leads to testing and runtime inconsistencies.",
0,CAMEL-19441,Bug,Major,3.14.7,,"
None
",Resolved,Not A Bug,None,Unassigned,Harish Annamalai,0,2,2023-06-13 11:25:03+00:00,2023-06-13 12:34:01+00:00,"Camel Does not continue routing with a doTry..doCatch..end block with direct component with a onException clause defined in it.


I have created two routes namely, MainRoute and childRoute.Â 


The ChildRoute consists of an onExceptionBlock, with ""handled(true)"" clause.Â 


when an exception occurs in the childRoute, the onExceptionBlock executes and the chlidRoute execution stops. However, the flow doesn't continue on the mainRoute.


Camel DSL for the two routes:


from(""timer://runOnce?repeatCount=1&delay=1000"")
Â  Â  Â  Â  Â  Â  Â  Â  .id(""MainRoute"")
Â  Â  Â  Â  Â  Â  Â  Â  .onException(Exception.class)
Â  Â  Â  Â  Â  Â  Â  Â  .setBody(constant(""ExceptionBLock""))
Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://error"")
Â  Â  Â  Â  Â  Â  Â  Â  .handled(true)
Â  Â  Â  Â  Â  Â  Â  Â  .end()
Â  Â  Â  Â  Â  Â  Â  Â  .setHeader(""routeLocation"", constant(""MainRoute""))
Â  Â  Â  Â  Â  Â  Â  Â  .setBody(constant(""MainRoute""))
Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://main"")
Â  Â  Â  Â  Â  Â  Â  Â  .doTry()
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .to(""direct://childRoute"")
Â  Â  Â  Â  Â  Â  Â  Â  .doCatch(Exception.class)
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://ExceptionCatchBlock"")
Â  Â  Â  Â  Â  Â  Â  Â  .end()
Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://afterTryCatch"")
Â  Â  Â  Â  Â  Â  Â  Â  .end();


------------------


Â  Â  Â  Â  from(""direct://childRoute"")
Â  Â  Â  Â  Â  Â  Â  Â  .id(""ExceptionRoute"")
Â  Â  Â  Â  Â  Â  Â  Â  .onException(Exception.class)
Â  Â  Â  Â  Â  Â  Â  Â  .useOriginalMessage()
Â  Â  Â  Â  Â  Â  Â  Â  .handled(true)
Â  Â  Â  Â  Â  Â  Â  Â  .setBody(constant(""Child Exception Block""))
Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://childExceptionSubProcess"")
Â  Â  Â  Â  Â  Â  Â  Â  .end()
Â  Â  Â  Â  Â  Â  Â  Â  .setHeader(""routeLocation"", constant(""exceptionRoute""))
Â  Â  Â  Â  Â  Â  Â  Â  .setBody(constant(""Exception Route""))
Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://beforeException"")
Â  Â  Â  Â  Â  Â  Â  Â  .throwException(new RuntimeException(""A runtime exception""))
Â  Â  Â  Â  Â  Â  Â  Â  .to(""log://afterException"")
Â  Â  Â  Â  Â  Â  Â  Â  .end();


Â 


Output:


2023-06-13 16:30:20.876 Â INFO 3500 â [timer://runOnce] main : Exchange[ExchangePattern: InOnly, BodyType: String, Body: MainRoute]
2023-06-13 16:30:20.880 Â INFO 3500 â [timer://runOnce] beforeException : Exchange[ExchangePattern: InOnly, BodyType: String, Body: Exception Route]
2023-06-13 16:30:20.883 Â INFO 3500 â [timer://runOnce] childExceptionSubProcess : Exchange[ExchangePattern: InOnly, BodyType: String, Body: Child Exception Block]


In the above routes, when the exception occurred in the childRoute, the onException block in childRoute executes, however, the .to(""log://afterException"") of the mainRoute doesn't execute.


As per the documentation, the doTry..doCatch block mimic the Java, try..catch block.


Here the routing breaks on the mainRoute. Contrary to the try..catch of java, where exception handling inside a called method doesn't affect the caller.","davsclaus:1686629787:2023-06-13T12:16:27.814+0000:1686629787:2023-06-13T12:16:27.814+0000:The child route handles(true) the exception so there is no exception from the outer route point of view
harisha:1686630669:2023-06-13T12:31:09.424+0000:1686630804:2023-06-13T12:33:24.026+0000:[~davsclaus] : Thanks for your response. I apologise for re-opening the issue, as I feel the bug report was not properly presented.

From your response: ""The child route handles(true) the exception so there is no exception from the outer route point of view"", that is ok, but the problem is the mainRoute doesn't continue to execute. The *mainRoute* also stops execution.Â 

That is if the childRoute doesn't have any exception handling, the doCatch in mainRoute executes, and the mainRoute also continues execution.Â 

If the childRoute, has exception handling, the mainRoute also stops execution.

What I feel like a bug is, the regardless of the exception handling in childRoute, the mainRoute needs to continue. Here, the mainRoute also stops execution.

In java, the code after the try..catch executes in the calling block, after the catch block, but this doesn't seem to be the case with doTry..doCatch
davsclaus:1686630841:2023-06-13T12:34:01.619+0000:1686630841:2023-06-13T12:34:01.619+0000:See here first how to get help
https://camel.apache.org/community/support/

It works as designed in Camel. 

To discuss this then use the mailing list / chat room."
0,CAMEL-19440,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Peter Palaga,Peter Palaga,0,1,2023-06-12 21:05:44+00:00,2023-06-27 10:40:03+00:00,"There is caffeine-version at 3.1.6 in camel-parent and it is currently used only in camel-caffeine. However, caffeine is pulled by a few more components transitively:




[WARNING] Found org.apache.camel:camel-caffeine:4.0.0-SNAPSHOT:jar:
        -> com.github.ben-manes.caffeine:caffeine:3.1.6:jar:
[WARNING] Found org.apache.camel:camel-corda:4.0.0-SNAPSHOT:jar:
        -> net.corda:corda-rpc:4.10:jar:
        -> com.github.ben-manes.caffeine:caffeine:2.9.3:jar:
[WARNING] Found org.apache.camel:camel-debezium-oracle:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-oracle:2.2.1.Final:jar:
        -> org.infinispan:infinispan-core-jakarta:14.0.4.Final:jar:
        -> com.github.ben-manes.caffeine:caffeine:3.1.1:jar:
[WARNING] Found org.apache.camel:camel-infinispan-common:4.0.0-SNAPSHOT:jar:
        -> org.infinispan:infinispan-commons-jakarta:14.0.9.Final:jar:
        -> com.github.ben-manes.caffeine:caffeine:3.1.1:jar:
[WARNING] Found org.apache.camel:camel-infinispan-embedded:4.0.0-SNAPSHOT:jar:
        -> com.github.ben-manes.caffeine:caffeine:2.9.3:jar:
[WARNING] Found org.apache.camel:camel-infinispan:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-infinispan-common:4.0.0-SNAPSHOT:jar:
        -> org.infinispan:infinispan-commons-jakarta:14.0.9.Final:jar:
        -> com.github.ben-manes.caffeine:caffeine:3.1.1:jar:
[WARNING] Found org.apache.camel:camel-ldif:4.0.0-SNAPSHOT:jar:
        -> org.apache.directory.server:apacheds-core-api:2.0.0.AM26:jar:
        -> com.github.ben-manes.caffeine:caffeine:2.7.0:jar:
[WARNING] Found org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> org.openapitools:openapi-generator:6.2.1:jar:
        -> com.github.ben-manes.caffeine:caffeine:2.8.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> org.openapitools:openapi-generator:6.2.1:jar:
        -> com.github.ben-manes.caffeine:caffeine:2.8.1:jar:




As seen above, several different versions are pulled. This leads to testing and runtime inconsistencies.",
0,CAMEL-19439,Dependency upgrade,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Peter Palaga,Peter Palaga,0,1,2023-06-12 19:32:44+00:00,2023-06-13 20:42:01+00:00,"We currently have jackson2-version at 2.15.1 in camel-parent and it is used in several components. However Jackson artifacts are pulled by many other components as transitive dependencies. The lack of dependency management causes that many different versions of Jackson artifacts are downloaded and used throughout Camel. Also the effective version of Jackson in end user applications depends not only on components used but also on their ordering in the given project's pom.xml file.


Importing jackson-bom would solve all the above problems.


Here is a report of all jackson artifacts used thoughout Camel




$ ./mvnw org.l2x6.cq:cq-prod-maven-plugin:2.23.0:find-dependency -N -e '-Dcq.gavPattern=com.fasterxml.jackson.core:*'
[INFO] --- cq-prod-maven-plugin:2.23.0:find-dependency (default-cli) @ camel ---
[WARNING] Found org.apache.camel:camel-openapi-rest-dsl-generator:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-openapi-rest-dsl-generator:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-openapi-rest-dsl-generator:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-eip-documentation-enricher-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-eip-documentation-enricher-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-eip-documentation-enricher-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-api-component-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-api-component-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-api-component-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-restdsl-openapi-plugin:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-restdsl-openapi-plugin:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-restdsl-openapi-plugin:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-test-infra-common:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-kafka:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-aws-common:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-test-infra-common:4.0.0-SNAPSHOT:jar:tests
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-aws-v2:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-cassandra:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-cassandra:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:cassandra:1.17.6:jar:
        -> com.datastax.cassandra:cassandra-driver-core:3.10.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.7.9.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-cassandra:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:cassandra:1.17.6:jar:
        -> com.datastax.cassandra:cassandra-driver-core:3.10.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.7.9.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.7.9:jar:
[WARNING] Found org.apache.camel:camel-test-infra-elasticsearch:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-couchbase:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-mongodb:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-rabbitmq:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-common:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-test-infra-common:4.0.0-SNAPSHOT:jar:tests
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-blob:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-blob:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-blob:12.22.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-blob:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-blob:12.22.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-datalake:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-file-datalake:12.15.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-datalake:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-file-datalake:12.15.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-datalake:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-file-datalake:12.15.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-queue:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-queue:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-queue:12.17.1:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-azure-storage-queue:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-queue:12.17.1:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-test-infra-messaging-common:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-artemis:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-dispatch-router:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-minicluster:3.3.5:jar:
        -> org.apache.hadoop:hadoop-common:3.3.5:jar:tests
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7.1:jar:
[WARNING] Found org.apache.camel:camel-test-infra-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-minicluster:3.3.5:jar:
        -> org.apache.hadoop:hadoop-common:3.3.5:jar:tests
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-test-infra-jdbc:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-arangodb:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-consul:4.0.0-SNAPSHOT:jar:
        -> com.orbitz.consul:consul-client:1.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-test-infra-consul:4.0.0-SNAPSHOT:jar:
        -> com.orbitz.consul:consul-client:1.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-test-infra-consul:4.0.0-SNAPSHOT:jar:
        -> com.orbitz.consul:consul-client:1.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-test-infra-google-pubsub:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-infinispan:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-microprofile-lra:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-minio:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-nats:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-pulsar:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-redis:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-xmpp:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-zookeeper:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-postgres:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-couchdb:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-ftp:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-test-infra-common:4.0.0-SNAPSHOT:jar:tests
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-fhir:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-mosquitto:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-chatscript:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-openldap:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-ignite:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-test-infra-common:4.0.0-SNAPSHOT:jar:tests
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-hashicorp-vault:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-jetty:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-test-infra-common:4.0.0-SNAPSHOT:jar:tests
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-test-infra-etcd3:4.0.0-SNAPSHOT:jar:
        -> org.testcontainers:testcontainers:1.17.6:jar:
        -> com.github.docker-java:docker-java-api:3.2.13:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-atlasmap:4.0.0-SNAPSHOT:jar:
        -> io.atlasmap:atlas-api:2.5.2:jar:
        -> io.atlasmap:atlas-model:2.5.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.2:jar:
[WARNING] Found org.apache.camel:camel-atlasmap:4.0.0-SNAPSHOT:jar:
        -> io.atlasmap:atlas-api:2.5.2:jar:
        -> io.atlasmap:atlas-model:2.5.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.2.2:jar:
[WARNING] Found org.apache.camel:camel-atlasmap:4.0.0-SNAPSHOT:jar:
        -> io.atlasmap:atlas-api:2.5.2:jar:
        -> io.atlasmap:atlas-model:2.5.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.2:jar:
[WARNING] Found org.apache.camel:camel-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc-spi:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro-ipc-jetty:1.11.1:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc-spi:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro-ipc-jetty:1.11.1:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc-spi:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro-ipc-jetty:1.11.1:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc-jetty:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro-ipc-jetty:1.11.1:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc-jetty:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro-ipc-jetty:1.11.1:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc-jetty:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro-ipc-jetty:1.11.1:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-avro-rpc:4.0.0-SNAPSHOT:jar:
        -> org.apache.avro:avro:1.11.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-aws-secrets-manager:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-aws-secrets-manager:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-aws-secrets-manager:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-aws-xray:4.0.0-SNAPSHOT:jar:
        -> com.amazonaws:aws-xray-recorder-sdk-aws-sdk:2.14.0:jar:
        -> com.amazonaws:aws-java-sdk-core:1.12.228:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.6.1:jar:
[WARNING] Found org.apache.camel:camel-aws-xray:4.0.0-SNAPSHOT:jar:
        -> com.amazonaws:aws-xray-recorder-sdk-aws-sdk:2.14.0:jar:
        -> com.amazonaws:aws-java-sdk-core:1.12.228:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.6.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.6:jar:
[WARNING] Found org.apache.camel:camel-aws-xray:4.0.0-SNAPSHOT:jar:
        -> com.amazonaws:aws-xray-recorder-sdk-aws-sdk:2.14.0:jar:
        -> com.amazonaws:aws-java-sdk-core:1.12.228:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.6.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.6:jar:
[WARNING] Found org.apache.camel:camel-azure-eventhubs:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-messaging-eventhubs:5.15.5:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-eventhubs:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-messaging-eventhubs:5.15.5:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-eventhubs:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-messaging-eventhubs:5.15.5:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-blob:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-blob:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-blob:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-datalake:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-file-datalake:12.15.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-datalake:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-file-datalake:12.15.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-datalake:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-storage-file-datalake:12.15.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-queue:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-queue:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-azure-storage-queue:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-azure-cosmosdb:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-cosmos:4.45.1:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-cosmosdb:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-cosmos:4.45.1:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-cosmosdb:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-cosmos:4.45.1:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-servicebus:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-messaging-servicebus:7.14.0:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-servicebus:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-messaging-servicebus:7.14.0:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-servicebus:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-messaging-servicebus:7.14.0:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-key-vault:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-security-keyvault-secrets:4.6.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-key-vault:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-security-keyvault-secrets:4.6.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-azure-key-vault:4.0.0-SNAPSHOT:jar:
        -> com.azure:azure-security-keyvault-secrets:4.6.2:jar:
        -> com.azure:azure-core:1.39.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.5:jar:
[WARNING] Found org.apache.camel:camel-bonita:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.15.1:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-base:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-bonita:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.15.1:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-base:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-bonita:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.15.1:jar:
        -> com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-braintree:4.0.0-SNAPSHOT:jar:
        -> com.braintreepayments.gateway:braintree-java:3.24.0:jar:
        -> com.fasterxml.jackson.jr:jackson-jr-objects:2.11.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.11.0:jar:
[WARNING] Found org.apache.camel:camel-cassandraql:4.0.0-SNAPSHOT:jar:
        -> com.datastax.oss:java-driver-core:4.15.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.2:jar:
[WARNING] Found org.apache.camel:camel-cassandraql:4.0.0-SNAPSHOT:jar:
        -> com.datastax.oss:java-driver-core:4.15.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.2.2:jar:
[WARNING] Found org.apache.camel:camel-cassandraql:4.0.0-SNAPSHOT:jar:
        -> com.datastax.oss:java-driver-core:4.15.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.2.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.2:jar:
[WARNING] Found org.apache.camel:camel-cbor:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-cbor:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-cbor:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-chatscript:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-chatscript:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-chatscript:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-consul:4.0.0-SNAPSHOT:jar:
        -> com.orbitz.consul:consul-client:1.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-consul:4.0.0-SNAPSHOT:jar:
        -> com.orbitz.consul:consul-client:1.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-consul:4.0.0-SNAPSHOT:jar:
        -> com.orbitz.consul:consul-client:1.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-corda:4.0.0-SNAPSHOT:jar:
        -> net.corda:corda-rpc:4.10:jar:
        -> net.corda:corda-node-api:4.10:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-corda:4.0.0-SNAPSHOT:jar:
        -> net.corda:corda-rpc:4.10:jar:
        -> net.corda:corda-node-api:4.10:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-corda:4.0.0-SNAPSHOT:jar:
        -> net.corda:corda-rpc:4.10:jar:
        -> net.corda:corda-node-api:4.10:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-datasonnet:4.0.0-SNAPSHOT:jar:
        -> com.datasonnet:datasonnet-mapper:2.5.2-jakarta4:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-datasonnet:4.0.0-SNAPSHOT:jar:
        -> com.datasonnet:datasonnet-mapper:2.5.2-jakarta4:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-datasonnet:4.0.0-SNAPSHOT:jar:
        -> com.datasonnet:datasonnet-mapper:2.5.2-jakarta4:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel.maven:camel-debezium-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel.maven:camel-debezium-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel.maven:camel-debezium-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-db2:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-db2:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-db2:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-db2:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-db2:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-debezium-mongodb:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-mongodb:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-mongodb:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-mongodb:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-mongodb:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-debezium-mysql:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-mysql:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-mysql:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-mysql:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-mysql:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-debezium-oracle:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-oracle:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-oracle:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-oracle:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-oracle:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-debezium-postgres:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-postgres:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-postgres:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-postgres:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-postgres:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-debezium-sqlserver:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-debezium-common:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-embedded:2.2.1.Final:jar:
        -> org.apache.kafka:connect-runtime:3.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-sqlserver:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-sqlserver:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-debezium-sqlserver:4.0.0-SNAPSHOT:jar:
        -> io.debezium:debezium-connector-sqlserver:2.2.1.Final:jar:
        -> io.debezium:debezium-core:2.2.1.Final:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-dhis2-api:4.0.0-SNAPSHOT:jar:
        -> org.hisp.dhis.integration.sdk:dhis2-java-sdk:2.0.0:jar:
        -> com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-dhis2-api:4.0.0-SNAPSHOT:jar:
        -> org.hisp.dhis.integration.sdk:dhis2-java-sdk:2.0.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-dhis2-api:4.0.0-SNAPSHOT:jar:
        -> org.hisp.dhis.integration.sdk:dhis2-java-sdk:2.0.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-dhis2:4.0.0-SNAPSHOT:jar:
        -> org.hisp.dhis.integration.sdk:dhis2-java-sdk:2.0.0:jar:
        -> com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-dhis2:4.0.0-SNAPSHOT:jar:
        -> org.hisp.dhis.integration.sdk:dhis2-java-sdk:2.0.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-dhis2:4.0.0-SNAPSHOT:jar:
        -> org.hisp.dhis.integration.sdk:dhis2-java-sdk:2.0.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-docker:4.0.0-SNAPSHOT:jar:
        -> com.github.docker-java:docker-java:3.3.0:jar:
        -> com.github.docker-java:docker-java-core:3.3.0:jar:
        -> com.github.docker-java:docker-java-api:3.3.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-docker:4.0.0-SNAPSHOT:jar:
        -> com.github.docker-java:docker-java:3.3.0:jar:
        -> com.github.docker-java:docker-java-core:3.3.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-docker:4.0.0-SNAPSHOT:jar:
        -> com.github.docker-java:docker-java:3.3.0:jar:
        -> com.github.docker-java:docker-java-core:3.3.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-dropbox:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-elasticsearch:4.0.0-SNAPSHOT:jar:
        -> org.elasticsearch.client:elasticsearch-rest-client-sniffer:8.7.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-elasticsearch:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.3:jar:
[WARNING] Found org.apache.camel:camel-elasticsearch:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.3:jar:
[WARNING] Found org.apache.camel:camel-elytron:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.15.1:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-base:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-elytron:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.15.1:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-base:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-elytron:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.jakarta.rs:jackson-jakarta-rs-json-provider:2.15.1:jar:
        -> com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-etcd3:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-fhir-api:4.0.0-SNAPSHOT:jar:
        -> ca.uhn.hapi.fhir:hapi-fhir-base:6.4.2:jar:
        -> com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-fhir-api:4.0.0-SNAPSHOT:jar:
        -> ca.uhn.hapi.fhir:hapi-fhir-base:6.4.2:jar:
        -> com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-fhir-api:4.0.0-SNAPSHOT:jar:
        -> ca.uhn.hapi.fhir:hapi-fhir-base:6.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-fhir:4.0.0-SNAPSHOT:jar:
        -> ca.uhn.hapi.fhir:hapi-fhir-base:6.4.2:jar:
        -> com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-fhir:4.0.0-SNAPSHOT:jar:
        -> ca.uhn.hapi.fhir:hapi-fhir-base:6.4.2:jar:
        -> com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.14.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-fhir:4.0.0-SNAPSHOT:jar:
        -> ca.uhn.hapi.fhir:hapi-fhir-base:6.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-google-bigquery:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-bigquery:2.19.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-google-calendar:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-jackson2:1.42.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-google-drive:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-jackson2:1.42.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-google-mail:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-jackson2:1.42.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-google-secret-manager:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-google-sheets:4.0.0-SNAPSHOT:jar:
        -> com.google.http-client:google-http-client-jackson2:1.42.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-google-storage:4.0.0-SNAPSHOT:jar:
        -> com.google.cloud:google-cloud-storage:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> com.auth0:java-jwt:4.3.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> com.auth0:java-jwt:4.3.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-grpc:4.0.0-SNAPSHOT:jar:
        -> com.auth0:java-jwt:4.3.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-hashicorp-vault:4.0.0-SNAPSHOT:jar:
        -> org.springframework.vault:spring-vault-core:3.0.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-hashicorp-vault:4.0.0-SNAPSHOT:jar:
        -> org.springframework.vault:spring-vault-core:3.0.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-hashicorp-vault:4.0.0-SNAPSHOT:jar:
        -> org.springframework.vault:spring-vault-core:3.0.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-common:3.3.5:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7.1:jar:
[WARNING] Found org.apache.camel:camel-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-common:3.3.5:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.7.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-hdfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.hadoop:hadoop-hdfs-client:3.3.5:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.7:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-dms:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-dms:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-dms:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-frs:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-frs:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-frs:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-functiongraph:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-functiongraph:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-functiongraph:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-functiongraph:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-functiongraph:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-functiongraph:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-iam:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-iam:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-iam:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-iam:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-iam:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-iam:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-imagerecognition:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-imagerecognition:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-imagerecognition:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-obs:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud:esdk-obs-java:3.23.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-obs:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud:esdk-obs-java:3.23.3:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.1:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-obs:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud:esdk-obs-java:3.23.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-smn:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-smn:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-huaweicloud-smn:4.0.0-SNAPSHOT:jar:
        -> com.huaweicloud.sdk:huaweicloud-sdk-core:3.1.38:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-hyperledger-aries:4.0.0-SNAPSHOT:jar:
        -> io.nessus.aries:nessus-aries-common:0.2.0:jar:
        -> network.idu.acapy:aries-client-python:0.7.25:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-hyperledger-aries:4.0.0-SNAPSHOT:jar:
        -> io.nessus.aries:nessus-aries-common:0.2.0:jar:
        -> network.idu.acapy:aries-client-python:0.7.25:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-hyperledger-aries:4.0.0-SNAPSHOT:jar:
        -> io.nessus.aries:nessus-aries-common:0.2.0:jar:
        -> network.idu.acapy:aries-client-python:0.7.25:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.3:jar:
[WARNING] Found org.apache.camel:camel-infinispan-common:4.0.0-SNAPSHOT:jar:
        -> org.infinispan:infinispan-commons-jakarta:14.0.9.Final:jar:
        -> org.infinispan.protostream:protostream:4.6.2.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-infinispan-embedded:4.0.0-SNAPSHOT:jar:
        -> org.infinispan:infinispan-core-jakarta:14.0.9.Final:jar:
        -> org.infinispan.protostream:protostream:4.6.2.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-infinispan:4.0.0-SNAPSHOT:jar:
        -> org.infinispan:infinispan-remote-query-client:14.0.9.Final:jar:
        -> org.infinispan.protostream:protostream:4.6.2.Final:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.1:jar:
[WARNING] Found org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson-avro:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson-avro:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-avro:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson-protobuf:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson-protobuf:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jackson-protobuf:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-protobuf:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jacksonxml:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jacksonxml:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jacksonxml:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jolt:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jolt:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jolt:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jq:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jq:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jq:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jslt:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jslt:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jslt:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-json-validator:4.0.0-SNAPSHOT:jar:
        -> com.networknt:json-schema-validator:1.0.81:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-json-validator:4.0.0-SNAPSHOT:jar:
        -> com.networknt:json-schema-validator:1.0.81:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-json-validator:4.0.0-SNAPSHOT:jar:
        -> com.networknt:json-schema-validator:1.0.81:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-jsonapi:4.0.0-SNAPSHOT:jar:
        -> com.github.jasminb:jsonapi-converter:0.11:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.9.10.7:jar:
[WARNING] Found org.apache.camel:camel-jsonapi:4.0.0-SNAPSHOT:jar:
        -> com.github.jasminb:jsonapi-converter:0.11:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.9.10.7:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.9.10:jar:
[WARNING] Found org.apache.camel:camel-jsonapi:4.0.0-SNAPSHOT:jar:
        -> com.github.jasminb:jsonapi-converter:0.11:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.9.10.7:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.9.10:jar:
[WARNING] Found org.apache.camel:camel-jsonata:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jsonata:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jsonata:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jsonpath:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jsonpath:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jsonpath:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-json-patch:4.0.0-SNAPSHOT:jar:
        -> com.github.java-json-tools:json-patch:1.13:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.11.0:jar:
[WARNING] Found org.apache.camel:camel-json-patch:4.0.0-SNAPSHOT:jar:
        -> com.github.java-json-tools:json-patch:1.13:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.11.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.11.0:jar:
[WARNING] Found org.apache.camel:camel-json-patch:4.0.0-SNAPSHOT:jar:
        -> com.github.java-json-tools:json-patch:1.13:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.11.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.11.0:jar:
[WARNING] Found org.apache.camel:camel-kafka:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-kafka:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-kafka:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative-api:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative-api:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative-api:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative-http:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-knative:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative-http:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-knative:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-knative-http:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-knative:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-kubernetes:4.0.0-SNAPSHOT:jar:
        -> io.fabric8:kubernetes-client:6.7.1:jar:
        -> io.fabric8:kubernetes-client-api:6.7.1:jar:
        -> io.fabric8:kubernetes-model-core:6.7.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.2:jar:
[WARNING] Found org.apache.camel:camel-kubernetes:4.0.0-SNAPSHOT:jar:
        -> io.fabric8:kubernetes-client:6.7.1:jar:
        -> io.fabric8:kubernetes-client-api:6.7.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.2:jar:
[WARNING] Found org.apache.camel:camel-kubernetes:4.0.0-SNAPSHOT:jar:
        -> io.fabric8:kubernetes-client:6.7.1:jar:
        -> io.fabric8:kubernetes-client-api:6.7.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.2:jar:
[WARNING] Found org.apache.camel:camel-leveldb:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-leveldb:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-leveldb:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-lumberjack:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-lumberjack:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-lumberjack:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-mail-microsoft-oauth:4.0.0-SNAPSHOT:jar:
        -> com.microsoft.azure:msal4j:1.13.8:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-mail-microsoft-oauth:4.0.0-SNAPSHOT:jar:
        -> com.microsoft.azure:msal4j:1.13.8:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-mail-microsoft-oauth:4.0.0-SNAPSHOT:jar:
        -> com.microsoft.azure:msal4j:1.13.8:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-metrics:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-metrics:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-metrics:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-micrometer:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-micrometer:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-micrometer:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-minio:4.0.0-SNAPSHOT:jar:
        -> io.minio:minio:8.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-minio:4.0.0-SNAPSHOT:jar:
        -> io.minio:minio:8.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-minio:4.0.0-SNAPSHOT:jar:
        -> io.minio:minio:8.5.3:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-mongodb-gridfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-mongodb-gridfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-mongodb-gridfs:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-mongodb:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-mongodb:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-mongodb:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-nitrite:4.0.0-SNAPSHOT:jar:
        -> org.dizitart:nitrite:3.4.4:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-nitrite:4.0.0-SNAPSHOT:jar:
        -> org.dizitart:nitrite:3.4.4:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-nitrite:4.0.0-SNAPSHOT:jar:
        -> org.dizitart:nitrite:3.4.4:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.1:jar:
[WARNING] Found org.apache.camel:camel-olingo4-api:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:odata-client-core:4.8.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.11.3:jar:
[WARNING] Found org.apache.camel:camel-olingo4-api:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:odata-client-core:4.8.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.11.4:jar:
[WARNING] Found org.apache.camel:camel-olingo4-api:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:odata-client-core:4.8.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.11.3:jar:
[WARNING] Found org.apache.camel:camel-olingo4:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:odata-client-core:4.8.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.11.3:jar:
[WARNING] Found org.apache.camel:camel-olingo4:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:odata-client-core:4.8.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.11.4:jar:
[WARNING] Found org.apache.camel:camel-olingo4:4.0.0-SNAPSHOT:jar:
        -> org.apache.olingo:odata-client-core:4.8.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.11.3:jar:
[WARNING] Found org.apache.camel:camel-openstack:4.0.0-SNAPSHOT:jar:
        -> com.github.openstack4j.core:openstack4j-core:3.10:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-openstack:4.0.0-SNAPSHOT:jar:
        -> com.github.openstack4j.core:openstack4j-core:3.10:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-openstack:4.0.0-SNAPSHOT:jar:
        -> com.github.openstack4j.core:openstack4j-core:3.10:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.10.3:jar:
[WARNING] Found org.apache.camel:camel-parquet-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.parquet:parquet-avro:1.12.3:jar:
        -> org.apache.avro:avro:1.10.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.2:jar:
[WARNING] Found org.apache.camel:camel-parquet-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.parquet:parquet-avro:1.12.3:jar:
        -> org.apache.avro:avro:1.10.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.2:jar:
[WARNING] Found org.apache.camel:camel-parquet-avro:4.0.0-SNAPSHOT:jar:
        -> org.apache.parquet:parquet-avro:1.12.3:jar:
        -> org.apache.avro:avro:1.10.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.2:jar:
[WARNING] Found org.apache.camel:camel-platform-http-vertx:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-vertx-common:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-plc4x:4.0.0-SNAPSHOT:jar:
        -> org.apache.plc4x:plc4j-api:0.10.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.0-rc1:jar:
[WARNING] Found org.apache.camel:camel-plc4x:4.0.0-SNAPSHOT:jar:
        -> org.apache.plc4x:plc4j-scraper:0.10.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.0-rc1:jar:
[WARNING] Found org.apache.camel:camel-pubnub:4.0.0-SNAPSHOT:jar:
        -> com.pubnub:pubnub-gson:6.3.5:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-pubnub:4.0.0-SNAPSHOT:jar:
        -> com.pubnub:pubnub-gson:6.3.5:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-pubnub:4.0.0-SNAPSHOT:jar:
        -> com.pubnub:pubnub-gson:6.3.5:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-pulsar:4.0.0-SNAPSHOT:jar:
        -> org.apache.pulsar:pulsar-client-admin:2.11.1:jar:
        -> org.apache.avro:avro:1.10.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.2:jar:
[WARNING] Found org.apache.camel:camel-pulsar:4.0.0-SNAPSHOT:jar:
        -> org.apache.pulsar:pulsar-client-admin:2.11.1:jar:
        -> org.apache.avro:avro:1.10.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.2:jar:
[WARNING] Found org.apache.camel:camel-pulsar:4.0.0-SNAPSHOT:jar:
        -> org.apache.pulsar:pulsar-client-admin:2.11.1:jar:
        -> org.apache.avro:avro:1.10.2:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.2:jar:
[WARNING] Found org.apache.camel:camel-reactive-executor-vertx:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-redis:4.0.0-SNAPSHOT:jar:
        -> org.redisson:redisson:3.22.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.2:jar:
[WARNING] Found org.apache.camel:camel-redis:4.0.0-SNAPSHOT:jar:
        -> org.redisson:redisson:3.22.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.2:jar:
[WARNING] Found org.apache.camel:camel-redis:4.0.0-SNAPSHOT:jar:
        -> org.redisson:redisson:3.22.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.2:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel.maven:camel-salesforce-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce-codegen:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-salesforce:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-sap-netweaver:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-sap-netweaver:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-sap-netweaver:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-servicenow:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-servicenow:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-servicenow:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel.maven:camel-servicenow-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-servicenow:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel.maven:camel-servicenow-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-servicenow:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel.maven:camel-servicenow-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-servicenow:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-splunk-hec:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-splunk-hec:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-splunk-hec:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-stitch:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-stitch:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-stitch:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-openapi-java:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-openapi-java:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-openapi-java:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-telegram:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-telegram:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-telegram:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-threadpoolfactory-vertx:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-twilio:4.0.0-SNAPSHOT:jar:
        -> com.twilio.sdk:twilio:9.2.3:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-twilio:4.0.0-SNAPSHOT:jar:
        -> com.twilio.sdk:twilio:9.2.3:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-twilio:4.0.0-SNAPSHOT:jar:
        -> com.twilio.sdk:twilio:9.2.3:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.0:jar:
[WARNING] Found org.apache.camel:camel-vertx-common:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-vertx:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-vertx-http:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-vertx-common:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-vertx-websocket:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-vertx-common:4.0.0-SNAPSHOT:jar:
        -> io.vertx:vertx-core:4.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.0:jar:
[WARNING] Found org.apache.camel:camel-weather:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-weather:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-weather:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-web3j:4.0.0-SNAPSHOT:jar:
        -> org.web3j:core:3.6.0:jar:
        -> org.web3j:crypto:3.6.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.8.5:jar:
[WARNING] Found org.apache.camel:camel-web3j:4.0.0-SNAPSHOT:jar:
        -> org.web3j:core:3.6.0:jar:
        -> org.web3j:crypto:3.6.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.8.5:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.8.0:jar:
[WARNING] Found org.apache.camel:camel-web3j:4.0.0-SNAPSHOT:jar:
        -> org.web3j:core:3.6.0:jar:
        -> org.web3j:crypto:3.6.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.8.5:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.8.5:jar:
[WARNING] Found org.apache.camel:camel-whatsapp:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-whatsapp:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-whatsapp:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-wordpress:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-wordpress:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-wordpress:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-xchange:4.0.0-SNAPSHOT:jar:
        -> org.knowm.xchange:xchange-core:5.0.14:jar:
        -> com.github.mmazi:rescu:2.1.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-xchange:4.0.0-SNAPSHOT:jar:
        -> org.knowm.xchange:xchange-core:5.0.14:jar:
        -> com.github.mmazi:rescu:2.1.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-xchange:4.0.0-SNAPSHOT:jar:
        -> org.knowm.xchange:xchange-core:5.0.14:jar:
        -> com.github.mmazi:rescu:2.1.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.12.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.12.0:jar:
[WARNING] Found org.apache.camel:camel-xj:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-xj:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-xj:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zeebe:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zendesk:4.0.0-SNAPSHOT:jar:
        -> com.cloudbees.thirdparty:zendesk-java-client:0.19.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-zendesk:4.0.0-SNAPSHOT:jar:
        -> com.cloudbees.thirdparty:zendesk-java-client:0.19.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
[WARNING] Found org.apache.camel:camel-zendesk:4.0.0-SNAPSHOT:jar:
        -> com.cloudbees.thirdparty:zendesk-java-client:0.19.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.13.4.2:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.13.4:jar:
[WARNING] Found org.apache.camel:camel-zookeeper-master:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zookeeper-master:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zookeeper-master:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-zookeeper:4.0.0-SNAPSHOT:jar:
        -> org.apache.curator:curator-x-discovery:5.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.0:jar:
[WARNING] Found org.apache.camel:camel-zookeeper:4.0.0-SNAPSHOT:jar:
        -> org.apache.curator:curator-x-discovery:5.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.0:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.10.0:jar:
[WARNING] Found org.apache.camel:camel-zookeeper:4.0.0-SNAPSHOT:jar:
        -> org.apache.curator:curator-x-discovery:5.4.0:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.10.0:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.10.0:jar:
[WARNING] Found org.apache.camel:camel-rest-openapi:4.0.0-SNAPSHOT:jar:
        -> io.swagger.core.v3:swagger-models:2.2.10:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.14.2:jar:
[WARNING] Found org.apache.camel:camel-rest-openapi:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.14.3:jar:
[WARNING] Found org.apache.camel:camel-rest-openapi:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.14.3:jar:
[WARNING] Found org.apache.camel:dummy-component:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:dummy-component:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:dummy-component:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-csimple-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-csimple-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-csimple-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-report-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-report-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-report-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-yaml-dsl-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-yaml-dsl-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-yaml-dsl-maven-plugin:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-kamelet-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-kamelet-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-kamelet-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jackson:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-jbang-main:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-jbang-core:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-partial-classpath-test:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-partial-classpath-test:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-partial-classpath-test:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-typeconverterscan-test:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-typeconverterscan-test:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-databind:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-annotations:2.15.1:jar:
[WARNING] Found org.apache.camel:camel-typeconverterscan-test:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-core:4.0.0-SNAPSHOT:jar:
        -> org.apache.camel:camel-yaml-io:4.0.0-SNAPSHOT:jar:
        -> com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.15.1:jar:
        -> com.fasterxml.jackson.core:jackson-core:2.15.1:jar:",
0,CAMEL-19438,Task,Major,None,"4.0-RC2, 4.0.0","

easy
good-first-issue
help-wanted

",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Otavio Rodolfo Piske,0,2,2023-06-12 13:46:56+00:00,2023-07-07 15:18:45+00:00,"Running the SFTP tests from camel-ftp causes several new entries to be added to the file: 



$HOME/.ssh/known_hosts




Â 


This happens because some tests are missing the URI setting ""knownHostsFile"". These tests should be modified to include this as part of the URI:




""&knownHostsFile="" + service.getKnownHostsFile()",itachi:1687737804:2023-06-26T08:03:24.733+0000:1687737804:2023-06-26T08:03:24.733+0000:I am working on this.
0,CAMEL-19437,Improvement,Minor,3.20.5,4.2.0,"
None
",Resolved,Fixed,4.2.0,Claus Ibsen,AurÃ©lien Pupier,0,2,2023-06-12 12:33:13+00:00,2023-10-23 13:39:27+00:00,"Currently the `camel-quarkus-debug` dependency must be added to the classpath to activate Camel Route Debugging for Camel Quarkus.


it would be nice that the Camel JBang export command is providing a profile named `camel.debug` containing this dependency.


It will improve User Experience in VS Code using VS Code Language Support for Apache Camel and VS Code Debug Adapter for Apache Camel extensions.


Note:



camel-quarkus-debug is available since Camel Quarkus 2.10.0 https://github.com/apache/camel-quarkus/issues/3775
activating it automatically in debug mode seems not possible https://github.com/apache/camel-quarkus/issues/3876","davsclaus:1686560998:2023-06-12T17:09:58.542+0000:1686560998:2023-06-12T17:09:58.542+0000:You can export with `--dep=camel:debug`
apupier:1686567538:2023-06-12T18:58:58.137+0000:1686567538:2023-06-12T18:58:58.137+0000:Exporting with --dep=camel:debug is covering another use case as it is adding the dependency to the project as a normal dependency, so it means it will be added at runtime for production (which is something that shouldn't be used as far I know).

The goal is to have the project pre-configured with a specific profile for Camel debugging without impacting the runtime in production."
0,CAMEL-19436,New Feature,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Andrea Cosentino,0,1,2023-06-12 07:40:18+00:00,2023-06-12 07:40:18+00:00,"I'm working on providing some infra as code with Kamelets, like, I want to use S3 and through camel-jbang commands pre-populate the commands to give to ansible/terraform or cloudformation with the S3 bucket name defined in my route.


So we could have something like


camel infra generate aws-s3 route.yaml


with bucket-name defined as test in route yaml


and the output would be something like


ansible-playbook -v ansible/aws-s3.yaml --extra-vars bucket_name=test


cc Claus Ibsen",
0,CAMEL-19435,Improvement,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-06-12 07:10:28+00:00,2023-06-12 20:08:29+00:00,"@Converter(order = 5)
    public static File toFile(String name) 

{
        return new File(name);
    }



This makes less sense as this can mistakenly led users to do


File f = message.getBody(File.class);


where the body is String based, such as payload. And you dont want that as a file name.",
0,CAMEL-19434,Task,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2023-06-09 19:53:15+00:00,2023-07-24 11:52:18+00:00,These are hard to maintain as arqullian is eol project and dont work well with SB3,
0,CAMEL-19433,Bug,Minor,3.20.5,,"
None
",Resolved,Won't Fix,None,Unassigned,Devidas  gawade,0,3,2023-06-09 13:11:41+00:00,2023-06-27 16:58:43+00:00,"consumer silently ignores the error on poll and sends a leave group request to the coordinator with the reason ""consumer poll timeout has expired""","davsclaus:1686475708:2023-06-11T17:28:28.931+0000:1686475708:2023-06-11T17:28:28.931+0000:Can you provide more details about this. The more you can help us the better, and higher chance that we will take a look
devdee:1686475980:2023-06-11T17:33:00.014+0000:1686475980:2023-06-11T17:33:00.014+0000:I've created a topic on camel zulipchatÂ Â 

https://camel.zulipchat.com/#narrow/stream/257298-camel/topic/Camle.20kafka.20consumer.20silently.20ignores.20error.20on.20pollÂ 

Â 

PR has been raised :

https://github.com/apache/camel/pull/10315
orpiske:1686530379:2023-06-12T08:39:39.342+0000:1686530379:2023-06-12T08:39:39.342+0000:[~davsclaus] Adding my comment on the PR as a reference: https://github.com/apache/camel/pull/10315#issuecomment-1586804469

I believe we should close this as invalid.
orpiske:1687856255:2023-06-27T16:57:35.028+0000:1687856255:2023-06-27T16:57:35.028+0000:The situation that lead to this error was caused by an environmental issue. While it is true that throwing a descendant of Java's Error could lead to this problem, users are advised to:
 # Ensure that preconditions that could lead to this problem are verified before execution
 # Use the StopErrorStrategy which would try to force the unsubscription on error."
0,CAMEL-19432,Bug,Minor,None,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",James Netherton,James Netherton,0,1,2023-06-09 12:49:33+00:00,2023-06-13 16:44:35+00:00,"The azure-eventhubs component has a producerAsyncClient option where you can pass a custom EventHubProducerAsyncClient instance to the component configuration.


Looking at the producer code, it seems that it gets ignored and a new EventHubProducerAsyncClient is created in doStart.


https://github.com/apache/camel/blob/main/components/camel-azure/camel-azure-eventhubs/src/main/java/org/apache/camel/component/azure/eventhubs/EventHubsProducer.java#L41


This was originally reported in the Camel Quarkus project:


https://github.com/apache/camel-quarkus/issues/4975",
0,CAMEL-19431,Bug,Major,None,,"
None
",Resolved,Invalid,None,Unassigned,Shashank Mugatkar,0,2,2023-06-09 07:10:08+00:00,2023-06-09 07:11:56+00:00,"How can I stop a route from a route :: Apache Camel


The technique shown in the official documentation doesn't work when I have multiple messages to be routed.


When I try to suspend a camel route using the technique shown in the documentation, it doesn't stop the route because it is


""Waiting as there are still 2 inflight and pending exchanges to complete, timeout in 45 seconds. Inflights per route: [route-1 = 2]""",acosentino:1686265916:2023-06-09T07:11:56.069+0000:1686265916:2023-06-09T07:11:56.069+0000:Please ask on user ML or in Zulip.
0,CAMEL-19430,Bug,Major,3.14.7,,"
None
",Resolved,Invalid,None,Unassigned,chen,0,2,2023-06-09 07:03:21+00:00,2023-06-09 07:36:42+00:00,"hello,Â 


when upgrade camel -ftp from 2.23.1 to 3.14.7,Â  the program exception information is as follows:


org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpointï¼There are 5 parameters that couldn't be set on the endpoint.


Brief Implementationï¼


Exchange exchange = context.createProducerTemplate().send(""direct:go"", new DefaultExchange(context));
Â 


static RouteBuilder getBatchFtpRoute(String ftpUri, long connectTimeout, long totalTimeout,
AggregationStrategy aggregate, Processor complete) {
return new RouteBuilder() {
@Override
public void configure() 
Unknown macro: {
from(""direct} 
};
}


ftpUri isÂ  sftp://cspexpert@100.85.227.26:22/.//clb?binary=false&connectTimeout=60000&consumer.delay=2000&disconnect=true&filter=%23myFileFilter&idempotent=true&maximumReconnectAttempts=2&password=xxxxxx&pollStrategy=%23filePollStrategy&reconnectDelay=1000&throwExceptionOnConnectFailed=true


When I went to debug the process,Â  I find in the class IntrospectionSupport,Â  the parameters in query likeÂ  'binary' ,Â  does not have setBinaryÂ  method.


Unknown parameters=[

{binary=false, connectTimeout=60000, consumer.delay=2000, password=null, throwExceptionOnConnectFailed=true}]





How to solve the problemï¼ I can not use camel-ftp like the configuration mode in springboot.


Â 










exception information




org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: sftp://cspexpert@100.85.227.26:22/.//clb?binary=false&connectTimeout=60000&consumer.delay=2000&disconnect=true&filter=%23myFileFilter&idempotent=true&maximumReconnectAttempts=2&password=xxxxxx&pollStrategy=%23filePollStrategy&reconnectDelay=1000&throwExceptionOnConnectFailed=true due to: Failed to resolve endpoint: sftp://cspexpert@100.85.227.26:22/.//clb?binary=false&connectTimeout=60000&consumer.delay=2000&disconnect=true&filter=%23myFileFilter&idempotent=true&maximumReconnectAttempts=2&password=xxxxxx&pollStrategy=%23filePollStrategy&reconnectDelay=1000&throwExceptionOnConnectFailed=true due to: There are 5 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{binary=false, connectTimeout=60000, consumer.delay=2000, password=null, throwExceptionOnConnectFailed=true}

]
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:968) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:859) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:73) ~[camel-support-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:120) ~[camel-support-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.processor.PollEnricher.resolveEndpoint(PollEnricher.java:400) ~[camel-core-processor-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:228) ~[camel-core-processor-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:477) ~[camel-core-processor-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:193) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:64) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.processor.Pipeline.process(Pipeline.java:185) ~[camel-core-processor-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:398) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:96) ~[camel-direct-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:217) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:111) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:83) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:108) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.support.cache.DefaultProducerCache.send(DefaultProducerCache.java:199) ~[camel-support-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:148) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:131) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  at com.huawei.ivcs.ccvm.vehicleei.service.ftp.common.RouteHelper.startDownloadRoute(RouteHelper.java:106) ~[classes/:?]
Â  Â  at com.huawei.ivcs.ccvm.vehicleei.service.ftp.download.DownloadService.lambda$getAsyncDownloadTask$0(DownloadService.java:117) ~[classes/:?]
Â  Â  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[?:?]
Â  Â  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[?:?]
Â  Â  at java.lang.Thread.run(Thread.java:834) [?:?]
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: sftp://cspexpert@100.85.227.26:22/.//clb?binary=false&connectTimeout=60000&consumer.delay=2000&disconnect=true&filter=%23myFileFilter&idempotent=true&maximumReconnectAttempts=2&password=xxxxxx&pollStrategy=%23filePollStrategy&reconnectDelay=1000&throwExceptionOnConnectFailed=true due to: There are 5 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{binary=false, connectTimeout=60000, consumer.delay=2000, password=null, throwExceptionOnConnectFailed=true}

]
Â  Â  at org.apache.camel.support.DefaultComponent.validateParameters(DefaultComponent.java:299) ~[camel-support-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:192) ~[camel-support-3.14.7.jar:3.14.7]
Â  Â  at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:934) ~[camel-base-engine-3.14.7.jar:3.14.7]
Â  Â  ... 24 more","acosentino:1686265780:2023-06-09T07:09:40.524+0000:1686265780:2023-06-09T07:09:40.524+0000:Please ask in user ML or in Zulip.
james-harden:1686266307:2023-06-09T07:18:27.979+0000:1686266307:2023-06-09T07:18:27.979+0000:This is my first time using this platform. how to ask in user ML or in Zulip.
acosentino:1686267402:2023-06-09T07:36:42.094+0000:1686267402:2023-06-09T07:36:42.094+0000:https://camel.apache.org/community/mailing-list/

https://camel.zulipchat.com/"
0,CAMEL-19429,Task,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Jean-Baptiste OnofrÃ©,Jean-Baptiste OnofrÃ©,1,2,2023-06-08 12:20:10+00:00,2023-06-21 19:59:25+00:00,I'm working on a PR to re-add camel-activemq component using activemq-client-jakarta using jakarta.jms namespace and supporting JMS 2.x.,orpiske:1687222058:2023-06-20T08:47:38.494+0000:1687222058:2023-06-20T08:47:38.494+0000:Resolved with PR #10431.
0,CAMEL-19428,Test,Major,None,,"
None
",Closed,Duplicate,None,Unassigned,Balavva Mirji,0,2,2023-06-08 07:42:27+00:00,2023-06-08 08:34:57+00:00,Activate conda environment on https://ci-builds.apache.org/manage/computer/jenkins-ppc64le-1/ node from the jenkins side.,"bmirji:1686181649:2023-06-08T07:47:29.341+0000:1686181649:2023-06-08T07:47:29.341+0000:camel-djl component has a dependency on mxnet package.
So we have installed mxnet package via conda environment on [https://ci-builds.apache.org/manage/computer/jenkins-ppc64le-1/.|https://ci-builds.apache.org/manage/computer/jenkins-ppc64le-1/]Â 
PR link: [https://github.com/apache/camel/pull/10264]

After merging above PR to main branch of camel, jenkins build is started failing due to git configuration issue on ppc64le node.
Job: [https://ci-builds.apache.org/job/Camel/job/el/job/main/]

Locally it's working, however it's failing on jenkins.
On jenkins side we may need to enable conda environment so that it will not override existing git binaries on ppc64le node.

Could someone help me with this?
davsclaus:1686183039:2023-06-08T08:10:39.692+0000:1686183039:2023-06-08T08:10:39.692+0000:You need to create a ticket for the infrastructure team at their jira:
https://issues.apache.org/jira/projects/INFRA
bmirji:1686184469:2023-06-08T08:34:29.048+0000:1686184469:2023-06-08T08:34:29.048+0000:[~davsclaus] thanks for correcting me.
Closing this ticket as I have created a new ticket https://issues.apache.org/jira/browse/INFRA-24677"
0,CAMEL-19427,Task,Minor,None,,"
None
",Resolved,Fixed,None,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-08 06:11:14+00:00,2023-06-13 13:33:06+00:00,"We need a tester bot for the core code, similar to the one we have for the components.",orpiske:1686634386:2023-06-13T13:33:06.526+0000:1686634386:2023-06-13T13:33:06.526+0000:Implemented and backported
0,CAMEL-19426,Bug,Minor,"3.20.5, 3.21.0, 4.0-M3","3.18.8, 3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.18.8, 3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Marat Gubaidullin,0,2,2023-06-07 22:51:30+00:00,2023-06-09 09:39:36+00:00,"In component catalog https://github.com/apache/camel/blob/main/catalog/camel-catalog/src/generated/resources/org/apache/camel/catalog/components/spring-ws.json


Component syntax is `spring-ws:type:lookupKey:webServiceEndpointUri`


But there are 4 path properties: type, lookupKey, webServiceEndpointUri and expression


Looks like we have missed something","davsclaus:1686274776:2023-06-09T09:39:36.614+0000:1686274776:2023-06-09T09:39:36.614+0000:expression should be a query parameter, fixed that"
0,CAMEL-19425,Task,Major,4.0-M3,"3.20.7, 3.21.1, 3.22.0, 4.0.0","
None
",Resolved,Invalid,"3.20.7, 3.21.1, 3.22.0, 4.0.0",Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2023-06-07 14:10:02+00:00,2023-08-22 10:05:41+00:00,"The test DynamicRouterConcurrentPOJOTest is very flaky (fails about 10% of the time). There is some indication that, at some point, it is losing messages. This needs to be investigated.","orpiske:1686118272:2023-06-07T14:11:12.668+0000:1686118272:2023-06-07T14:11:12.668+0000:WIP for the investigation https://github.com/orpiske/camel/tree/camel-19425
orpiske:1692669927:2023-08-22T10:05:27.041+0000:1692669927:2023-08-22T10:05:27.041+0000:Partially resolved by CAMEL-19487 and by marking the test as manual."
0,CAMEL-19424,Dependency upgrade,Minor,None,None,"
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",James Netherton,James Netherton,0,1,2023-06-07 09:58:21+00:00,2023-06-07 11:04:39+00:00,There are a few MicroProfile / SmallRye dependency upgrades that we can do to get back into better alignment for Camel Quarkus.,
0,CAMEL-19423,Improvement,Minor,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-06-07 07:58:53+00:00,2023-06-12 20:08:42+00:00,"See CAMEL-19421


The AttachFileProducer should just upload the content as InputStream and the file name via the Camel FILE_NAME header. Then we can remove the custom type converter, that stores the file to disk in temp folder.",
0,CAMEL-19392,Task,Minor,3.x,3.21.0,"
None
",Resolved,Fixed,3.21.0,Tomohisa Igarashi,Tomohisa Igarashi,0,2,2023-05-25 21:48:17+00:00,2023-05-26 10:31:43+00:00,"The template bean, which is used by Kamelet, is out of sync between schema and actually used deserializer/definition
https://github.com/apache/camel/blob/camel-3.x/dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/main/java/org/apache/camel/dsl/yaml/deserializers/RouteTemplateDefinitionDeserializer.java#L48
https://github.com/apache/camel/blob/camel-3.x/dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/main/java/org/apache/camel/dsl/yaml/deserializers/RouteTemplateDefinitionDeserializer.java#L88


NamedBeanDefinition supports



properties:
  propName: propValue
  objProp:
    objPropProp: objPropPropVal




But the template bean actually supports following



property:
  - key: propName
    value: propValue




and



properties:
  propName: propValue




In order to reflect the actual behavior in YAML DSL JSON schema, we need to change from `NamedBeanDefinition` to `RouteTemplateBeanDefinition` and `TemplatedRouteBeanDefinition` in the annotation.","davsclaus:1685062044:2023-05-26T08:47:24.629+0000:1685062044:2023-05-26T08:47:24.629+0000:Is this already corrected on v4
igarashitm:1685066577:2023-05-26T10:02:57.265+0000:1685066687:2023-05-26T10:04:47.361+0000:Yes, on main branch, this was fixed as a part of https://issues.apache.org/jira/browse/CAMEL-19386
igarashitm:1685068303:2023-05-26T10:31:43.450+0000:1685068303:2023-05-26T10:31:43.450+0000:merged - https://github.com/apache/camel/pull/10214"
0,CAMEL-19391,Bug,Major,None,None,"
None
",Resolved,Not A Bug,None,Unassigned,Dietrich Schulten,0,2,2023-05-25 19:24:29+00:00,2023-05-26 08:48:29+00:00,"If I define the following application property in a Spring Boot application which uses netty-http:




camel:
  servlet:
    mapping:
      context-path: /api/*



then the application reacts only when using the context-path /camel/*.
Â 
Expected: it should react at the context-path /api/*
Â 
Here is my dependency list:




  Â  Â  Â <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.springframework.boot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>spring-boot-starter-web</artifactId>
Â  Â  Â  Â  </dependency>
Â  Â  Â  Â  <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.springframework.boot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>spring-boot-starter-actuator</artifactId>
Â  Â  Â  Â  </dependency>Â  Â  Â  Â  
        <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.apache.camel.springboot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>camel-spring-boot-starter</artifactId>
Â  Â  Â  Â  </dependency>
Â  Â  Â  Â  <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.apache.camel.springboot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>camel-platform-http-starter</artifactId>
Â  Â  Â  Â  </dependency>
Â  Â  Â  Â  <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.apache.camel.springboot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>camel-netty-http-starter</artifactId>
Â  Â  Â  Â  </dependency>
Â  Â  Â  Â  <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.apache.camel.springboot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>camel-groovy-starter</artifactId>
Â  Â  Â  Â  </dependency>Â  
        <dependency>
Â  Â  Â  Â  Â  Â  <groupId>org.apache.camel.springboot</groupId>
Â  Â  Â  Â  Â  Â  <artifactId>camel-console-starter</artifactId>
Â  Â  Â  Â  </dependency> 



My route entry for the netty-http consumer:




from(""netty-http:proxy://0.0.0.0:8083?disableStreamCache=true"") 



I am silently hoping that I am just using the wrong property 


If the netty-http component does not allow to redefine the context-path, where in the code would I have to look in order to make that possible?","davsclaus:1685062109:2023-05-26T08:48:29.006+0000:1685062109:2023-05-26T08:48:29.006+0000:camel.servlet is only for servlet http (eg what comes embedded in Spring Boot, Tomcat etc) and not netty or other http libraries"
0,CAMEL-19390,Dependency upgrade,Major,None,3.21.0,"
None
",Resolved,Fixed,3.21.0,Nicolas Filotto,Nicolas Filotto,0,1,2023-05-25 12:09:51+00:00,2023-06-12 15:08:37+00:00,"Since Apache Camel 3.21 is an LTS version and CXF 3.5 should not be maintained anymore soon as 3.6 and 4.0 have been released, the goal of this task is to upgrade the version of CXF 3.6 and allow OSGI users to choose a higher version of CXF 3 that will remain backward compatible with CXF 3.6.",
0,CAMEL-19389,Dependency upgrade,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Nicolas Filotto,Claus Ibsen,0,2,2023-05-25 12:04:13+00:00,2023-06-12 15:08:56+00:00,No Desc,"davsclaus:1684987484:2023-05-25T12:04:44.007+0000:1684987484:2023-05-25T12:04:44.007+0000:They changed something so Host header is restricted, so we likely need to remove it somewhere inside camel-cxf

[ERROR]   CxfRawMessageRouterAddressOverrideTest>CxfSimpleRouterTest.testOnwayInvocation:113 Â» SoapFault IllegalArgumentException invoking http://localhost:61938/CxfRawMessageRouterAddressOverrideTest/helloworld: restricted header name: ""Host""
nfilotto:1684996510:2023-05-25T14:35:10.635+0000:1684996510:2023-05-25T14:35:10.635+0000:Let me check and manage this upgrade if you don't mind
davsclaus:1684996738:2023-05-25T14:38:58.727+0000:1684996738:2023-05-25T14:38:58.727+0000:Thank you very much
nfilotto:1685007701:2023-05-25T17:41:41.563+0000:1685007701:2023-05-25T17:41:41.563+0000:FYI, this problem happens with CXF 3.6.0 and 4.0.1, it has been raised to the CXF team and it has already been fixed. I will test the fix tomorrow by using a snapshot.
nfilotto:1685090591:2023-05-26T16:43:11.450+0000:1685090686:2023-05-26T16:44:46.352+0000:We will need to wait for the release of CXF 3.6.1 and 4.0.2 which should happen around the 9th of June. Meanwhile, I will prepare both PRs with the snapshot version such that when released I will only need to update the versions."
0,CAMEL-19388,Task,Major,3.20.4,,"
None
",Resolved,Won't Fix,None,Nicolas Filotto,Nicolas Filotto,0,3,2023-05-25 11:18:02+00:00,2023-06-21 07:40:34+00:00,"Since Apache Camel 3.20 is an LTS version and CXF 3.5 should not be maintained anymore soon as 3.6 and 4.0 have been released, the goal of this task is to extend the version range of CXF to allow OSGI users to choose a higher version of CXF 3 that will remain backward compatible with CXF 3.5.","nfilotto:1684985872:2023-05-25T11:37:52.552+0000:1684985872:2023-05-25T11:37:52.552+0000:The related PRs:

* Camel: https://github.com/apache/camel/pull/10209
* Camel-Karaf: https://github.com/apache/camel-karaf/pull/238
globalbus:1687302809:2023-06-21T07:13:29.229+0000:1687302809:2023-06-21T07:13:29.229+0000:[~nfilotto]Â 
sadly, the apache-camel-3.20.6-features.xml was published with cxf-version-range [3.5,3.6)
davsclaus:1687303463:2023-06-21T07:24:23.486+0000:1687303463:2023-06-21T07:24:23.486+0000:It does not work with that open range. And we only want to support what we release. And there is not going to be more CXF 3.x releases, eg 3.6 is the last.
nfilotto:1687304403:2023-06-21T07:40:03.618+0000:1687304403:2023-06-21T07:40:03.618+0000:If so the status of this ticket is incorrect and must be upated"
0,CAMEL-19387,Bug,Major,None,"3.18.8, 3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.18.8, 3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-25 08:18:10+00:00,2023-05-25 08:22:57+00:00,"https://github.com/apache/camel-kamelets-examples/issues/21


Setting this in yaml dsl / xml-dsl with additionalProperties.xxx should resolve custom #bean references",
0,CAMEL-19386,Task,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Tomohisa Igarashi,Tomohisa Igarashi,0,2,2023-05-24 14:10:56+00:00,2023-05-26 10:31:43+00:00,"The template bean, which is used by Kamelet, is out of sync between schema and deserializer/definition
https://github.com/apache/camel/blob/main/dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/main/java/org/apache/camel/dsl/yaml/deserializers/RouteTemplateDefinitionDeserializer.java#L48
https://github.com/apache/camel/blob/main/dsl/camel-yaml-dsl/camel-yaml-dsl-deserializers/src/main/java/org/apache/camel/dsl/yaml/deserializers/RouteTemplateDefinitionDeserializer.java#L88


Note that the ""RouteTemplateBeanDefinition"" only allows key/value style with only string value allowed, no object properties.
https://github.com/apache/camel/blob/main/core/camel-core-model/src/main/java/org/apache/camel/model/RouteTemplateBeanDefinition.java
https://github.com/apache/camel/blob/main/core/camel-core-model/src/main/java/org/apache/camel/model/BeanFactoryDefinition.java#L59



property:
  - key: foo
    value: :bar




However ""RegistryBeanDefinition"" uses Map<String, Object> for properties, where the key is directly used for a property name (e.g. without explicit key/value entry).



properties:
  foo:bar
  fooObj:
    fooObjProp: val




While we would want to keep backward compatibility on Kamelets with string key/value, it would be nice also for Kamelet to support object properties just like non-template beans can do.
So, I propose to use template bean ""properties"" to be Map<String, Object> to align with non-template beans, but not a list of ""PropertyDefinition"". Then we can keep template bean ""property"" as-is, a list of ""PropertyDefinition"", i.e. string key/value.",igarashitm:1685005730:2023-05-25T17:08:50.269+0000:1685005730:2023-05-25T17:08:50.269+0000:merged - https://github.com/apache/camel/pull/10205
0,CAMEL-19385,Task,Minor,3.21.0,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Petr Kuzel,0,2,2023-05-24 12:24:07+00:00,2023-12-22 10:20:37+00:00,"cd components/camel-azure/camel-azure-storage-blob


rm -rf src/generated


maven install


Â 
[[1;31mERROR[m] Failed to execute goal [32morg.apache.camel:camel-package-maven-plugin:3.21.0-SNAPSHOT:generate[m [1m(generate)[m on project [36mcamel-azure-storage-blob[m: [1;31mError generating data org.apache.maven.plugin.MojoExecutionException: Error loading other model. Reason: java.lang.IllegalArgumentException: FirstVersion is not specified. This can be done in @UriEndpoint or in pom.xml file.[m -> [1m[Help 1][m


Â 


Above is a distillation of the problem using pre-existing component. I got into that trap when developing a new component from scratch.","pkuzel:1684902371:2023-05-24T12:26:11.263+0000:1684902371:2023-05-24T12:26:11.263+0000:Thread from dev@camel mail list:



From: Petr Kuzel <petrkuzel@eurofins.com.INVALID> 
Sent: Wednesday, May 24, 2023 13:55
To: dev@camel.apache.org
Subject: RE: maven generate questions

Â 

Â 

Â 

CAUTION: EXTERNAL EMAIL - Sent from an email domain that is not formally trusted by Eurofins.

Â 

Do not click on links or open attachments unless you recognise the sender and are certain that the content is safe.

Â 

Hi Claus,

Â 

Thx for your peek.

Â 

My env is \{Windows, JDK 11 + JDK 8, eclipse 2023-03, camel-3.x}.

Â 

If I recursively delete src/generated/ then maven install fails:

Â 

Â  [[1;31mERROR[m] Failed to execute goal [32morg.apache.camel:camel-package-maven-plugin:3.21.0-SNAPSHOT:generate[m [1m(generate)[m on project [36mcamel-azure-files[m: [1;31mError generating data org.apache.maven.plugin.MojoExecutionException: Error loading other model. Reason: java.lang.IllegalArgumentException: FirstVersion is not specified. This can be done in @UriEndpoint or in pom.xml file.[m -> [1m[Help 1][m

Â 

A workaround is to introduce the marker file under generated:

Â 

Â  camel-azure-files/src/generated/resources/META-INF/services/org/apache/camel/component/generate-meta-please

Â 

Then maven install passes:

Â 

Â  [[1;34mINFO[m] [1;32mBUILD SUCCESS

Â 

Â 

At the end of a day, we have the same expectation:

src/generated/ should be removable and rebuildable

anytime (& consequently no value to add generated/

to Git, right?).

Â 

I'm just a bit puzzled that at your end:

Â 

Â  cd components/camel-azure/camel-azure-files

Â  rm -rf src/generated

Â 

followed by maven install does not fail.

Â 

Â  Hope it helps

Â  Cc.

Â 

--

Â  Mr. Petr KuÅ¾el, Software Engineer

Â  Eurofins International Support Services s.Ã  r.l.

Â  Val Fleuri 23

Â  L-1526 LUXEMBOURG

Â 

-----Original Message-----

From: Claus Ibsen <[claus.ibsen@gmail.com|mailto:claus.ibsen@gmail.com]>

Sent: Wednesday, May 24, 2023 11:55

To: [dev@camel.apache.org|mailto:dev@camel.apache.org]

Subject: Re: maven generate questions

Â 

Â 

Â 

CAUTION: EXTERNAL EMAIL - Sent from an email domain that is not formally trusted by Eurofins.

Â 

Do not click on links or open attachments unless you recognise the sender and are certain that the content is safe.

Â 

Hi

Â 

Okay so its a bit weird. What OS are you using?

Â 

You should always be able to do

Â 

rm -rf src/generated

Â 

and rebuild all files again, and have the same result as before if no

changes.

Â 

Â 

On Wed, May 24, 2023 at 11:17â¯AM Petr Kuzel <[petrkuzel@eurofins.com.invalid|mailto:petrkuzel@eurofins.com.invalid]>

wrote:

Â 

> Hi Claus,

>Â 

> meanwhile at my side, I have put the build under debugger

> to understand the root cause of my problems.

>Â 

> My conclusion is commited in

>Â 

> [https://fra01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpekuz%2Fcamel%2Fcommit%2Fbad98a275c4cf23532f14c1d0f84bcde28ba9059%23diff-4d8489aba647b70b97a7528b634ef5ac309ed85c1d433a7f6e6eaf00f987f219&data=05%7C01%7Cpetrkuzel%40eurofins.com%7C2b198d434b6142c8bcb708db5c4db423%7C5e94ad53ff9d4e369b4c9d99a43d0cca%7C0%7C0%7C638205261031428332%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=lQwY1nUIgFP29yWBCevwZYy63ss3vfq7wTetuZs%2FzEY%3D&reserved=0]

>Â 

> I could create an issue as IMHO it's a trap

> for newcomers and it reveals fuzziness

> around the generated/ dir. The below #1 was

> just a code smell... but with hours spent

> on overcoming its consequences a relevant one.

>Â 

>Â Â  Hope it helps

>Â Â  Cc.

>Â 

> --

>Â Â  Mr. Petr KuÅ¾el, Software Engineer

>Â Â  Eurofins International Support Services s.Ã  r.l.

>Â Â  Val Fleuri 23

>Â Â  L-1526 LUXEMBOURG

>Â 

> -----Original Message-----

> From: Claus Ibsen <[claus.ibsen@gmail.com|mailto:claus.ibsen@gmail.com]>

> Sent: Wednesday, May 24, 2023 09:44

> To: [dev@camel.apache.org|mailto:dev@camel.apache.org]

> Subject: Re: maven generate questions

>Â 

>Â 

>Â 

> CAUTION: EXTERNAL EMAIL - Sent from an email domain that is not formally

> trusted by Eurofins.

>Â 

> Do not click on links or open attachments unless you recognise the sender

> and are certain that the content is safe.

>Â 

> Hi

>Â 

> I can build your project and the code in camel-azure-files

>Â 

> mvn -V

> Apache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63)

> Maven home: /opt/homebrew/Cellar/maven/3.8.6/libexec

> Java version: 17.0.5, vendor: Azul Systems, Inc., runtime:

> /Library/Java/JavaVirtualMachines/zulu-17.jdk/Contents/Home

> Default locale: en_DK, platform encoding: UTF-8

> OS name: ""mac os x"", version: ""13.3.1"", arch: ""aarch64"", family: ""mac""

>Â 

> And it generates some files for src/generated that you didnt have yet

>Â 

>Â 

>Â 

> On Tue, May 23, 2023 at 11:30â¯AM Petr Kuzel <petrkuzel@eurofins.com

> .invalid>

> wrote:

>Â 

> > Hi Claus,

> >

> > I have pushed a wet source in my fork at (deep link):

> >

> >

> [https://fra01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fpekuz%2Fcamel%2Ftree%2Fcamel-3.x%2Fcomponents%2Fcamel-azure%2Fcamel-azure-files&data=05%7C01%7Cpetrkuzel%40eurofins.com%7C2b198d434b6142c8bcb708db5c4db423%7C5e94ad53ff9d4e369b4c9d99a43d0cca%7C0%7C0%7C638205261031428332%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=C8MRzbvObpZWp1XGVp3xtbSadXefiTOWaFgsFwsX6wM%3D&reserved=0]

> >

> > For #1, in the fork, src/generated/ is versioned,

> > despite I'm not convinced about adding into Git

> > build-generated sources.

> >

> > For #2, there must be some overlook, but I'm

> > in a state where the error message fails to guide

> > me further, the same for your hint... because I had

> > literally copy-and-pasted the FTPS component

> > and then started adapting it for Azure Files

> > while using the Azure blob component

> > as a secondary source of interesting sources.

> >

> > If you spot a bad or missing annotation

> > that could be at cause let me know, please.

> >

> >Â Â  Best regards

> >Â Â  Cc.

> >

> > (BTW, there might also a false pull request right on the Camel repo,

> > I used GitHub Desktop in the ""to contribute"" mode

> > and it by-passed the fork, I tried to reconfigure but ended

> > in an uncertain state, my GitHub Desktop offers Preview PR

> > which includes some parasite commits..., while

> > the fork already contains exactly my two commits.)

> >

> > --

> >Â Â  Mr. Petr KuÅ¾el, Software Engineer

> >Â Â  Eurofins International Support Services s.Ã  r.l.

> >Â Â  Val Fleuri 23

> >Â Â  L-1526 LUXEMBOURG

> >

> > -----Original Message-----

> > From: Claus Ibsen <[claus.ibsen@gmail.com|mailto:claus.ibsen@gmail.com]>

> > Sent: Monday, May 22, 2023 21:00

> > To: [dev@camel.apache.org|mailto:dev@camel.apache.org]

> > Subject: Re: maven generate questions

> >

> >

> >

> > CAUTION: EXTERNAL EMAIL - Sent from an email domain that is not formally

> > trusted by Eurofins.

> >

> > Do not click on links or open attachments unless you recognise the sender

> > and are certain that the content is safe.

> >

> > Hi

> >

> > When it says ""other"" then the plugin has not detected that its an

> endpoint

> > component.

> >

> > There are a ton of existing components you can copy from. If you just add

> > the component to camel-3.x branch or main branch etc then its should be

> > easier.

> >

> >

> > On Mon, May 22, 2023 at 6:19â¯PM Petr Kuzel <petrkuzel@eurofins.com

> > .invalid>

> > wrote:

> >

> > > Hi Camel devs,

> > >

> > > While trying to develop a new Camel component

> > > Iâd need an advise, again, on the generate.

> > >

> > > #1

> > > The generate generates a code under src/generated/.

> > > Should it be committed to Git and why, please?

> > > I have seen it committed for other components

> > > but I do not understand why. I have also observed

> > > the generated code is not updated (e.g. after

> > > retyping endpoint URI params) unless I manually delete

> > > previously generated configurers (mvn clean is not enough).

> > >

> > >

> > > #2

> > > I face:

> > >

> > > generate_[m _[1m(generate)_[m on project _[36mcamel-azure-files_[m:

> > >Â  _[1;31mError generating data

> > > org.apache.maven.plugin.MojoExecutionException:

> > >Â  Error loading other model. Reason: java.lang.IllegalArgumentException:

> > >Â  FirstVersion is not specified. This can be done in @UriEndpoint or in

> > > pom.xml file.

> > >

> > > my endpoint code reads:

> > >

> > > @UriEndpoint(firstVersion = ""3.21.0"", ...

> > > public class FilesEndpoint<T extends ShareFileItem>

> > >Â  extends RemoteFileEndpoint<ShareFileItem> {

> > >

> > >

> > > Maven debug reports more details:

> > >

> > >Â  [1mCaused by [m: java.lang.IllegalArgumentException:

> [1;31mFirstVersion

> > > is not specified. This can be done in @UriEndpoint or in pom.xml file.

> [m

> > >Â Â Â Â Â  [1mat [m

> > >

> org.apache.camel.maven.packaging.SupportLevelHelper.defaultSupportLevel (

> > > [1mSupportLevelHelper.java:30 [m)

> > >Â Â Â Â Â  [1mat [m

> > > org.apache.camel.maven.packaging.PackageOtherMojo.prepareOthers (

> > > [1mPackageOtherMojo.java:132 [m)

> > >Â Â Â  Â Â [1mat [m

> > > org.apache.camel.maven.packaging.PrepareComponentMojo.execute (

> > > [1mPrepareComponentMojo.java:152 [m)

> > >Â Â Â Â Â  [1mat [m

> > > org.apache.camel.maven.packaging.AbstractGeneratorMojo.execute (

> > > [1mAbstractGeneratorMojo.java:98 [m)

> > >Â Â Â Â Â  [1mat [m

> > > org.apache.camel.maven.packaging.PrepareComponentMojo.execute (

> > > [1mPrepareComponentMojo.java:122 [m)

> > >Â Â Â Â Â  [1mat [m

> > org.apache.camel.maven.packaging.AbstractGenerateMojo.invoke

> > > ( [1mAbstractGenerateMojo.java:96 [m)

> > >Â Â Â Â Â  [1mat [m

> > org.apache.camel.maven.packaging.AbstractGenerateMojo.invoke

> > > ( [1mAbstractGenerateMojo.java:75 [m)

> > >Â Â Â Â Â  [1mat [m org.apache.camel.maven.packaging.GenerateMojo.doExecute (

> > > [1mGenerateMojo.java:54 [m)

> > >Â  Â Â Â Â [1mat [m

> > > org.apache.camel.maven.packaging.AbstractGenerateMojo.execute (

> > > [1mAbstractGenerateMojo.java:64 [m)

> > >Â Â Â Â Â  [1mat [m

> > > org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (

> > > [1mDefaultBuildPluginManager.java:137 [m)

> > >

> > > The error message does not help me to identify

> > > what ""other"" class it found and fails to process.

> > >

> > > Any clues, please?

> > >

> > >Â Â  Regards

> > >Â Â  Cc.

> > >

> > > --

> > >Â Â  Mr. Petr KuÅ¾el, Software Engineer

> > >Â Â  Eurofins International Support Services s.Ã  r.l.

> > >Â Â  Val Fleuri 23

> > >Â Â  L-1526 LUXEMBOURG

> > >

> > >

> >

> > --

> > Claus Ibsen

> > -----------------

> > @davsclaus

> > Camel in Action 2: [https://fra01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.manning.com%2Fibsen2&data=05%7C01%7Cpetrkuzel%40eurofins.com%7C2b198d434b6142c8bcb708db5c4db423%7C5e94ad53ff9d4e369b4c9d99a43d0cca%7C0%7C0%7C638205261031428332%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=gH1I2%2BwZ65VKILs9dSnXLmkA0BJpy4skvgnC8z7D55c%3D&reserved=0]

> >

>Â 

>Â 

> --

> Claus Ibsen

> -----------------

> @davsclaus

> Camel in Action 2: [https://fra01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.manning.com%2Fibsen2&data=05%7C01%7Cpetrkuzel%40eurofins.com%7C2b198d434b6142c8bcb708db5c4db423%7C5e94ad53ff9d4e369b4c9d99a43d0cca%7C0%7C0%7C638205261031428332%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=gH1I2%2BwZ65VKILs9dSnXLmkA0BJpy4skvgnC8z7D55c%3D&reserved=0]

>Â 

Â 

Â 

--

Claus Ibsen

-----------------

@davsclaus

Camel in Action 2: [https://fra01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwww.manning.com%2Fibsen2&data=05%7C01%7Cpetrkuzel%40eurofins.com%7C2b198d434b6142c8bcb708db5c4db423%7C5e94ad53ff9d4e369b4c9d99a43d0cca%7C0%7C0%7C638205261031584556%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C&sdata=1ULws6WfxRYpOjzdKNpL5RbmYHbYADzNk54yoHhVTYQ%3D&reserved=0]
davsclaus:1685062197:2023-05-26T08:49:57.321+0000:1685062197:2023-05-26T08:49:57.321+0000:This smells like an issue with windows as OS."
0,CAMEL-19384,Task,Minor,3.21.0,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Petr Kuzel,0,1,2023-05-24 07:07:29+00:00,2023-06-28 12:16:52+00:00,"By https://camel.apache.org/manual/what-are-the-dependencies.html Camel 3.21.x depends on Java 11.


Â 


But it is not correctly declared in Camel poms so eclipse 2023-03 m2e selects JDK 8 to run maven and the build fails with puzzling low-level errors on class file format incompatibility.


Â 


Eclipse Perspective


Eclipse 2023-03 detects Java version to be used for executing maven from 
the `requireJavaVersion` element of the `maven-enforcer-plugin` configuration.


https://github.com/eclipse-m2e/m2e-core/blob/master/RELEASE_NOTES.md#220


Investigating the component pom's parents chain, I have found at the top-most parent pom:


Â  <groupId>org.apache</groupId>
Â  <artifactId>apache</artifactId>
Â  <version>29</version>{}


Â  <properties>


Â  Â  <minimalJavaBuildVersion>1.8</minimalJavaBuildVersion>


Â 


Â  <id>enforce-java-version</id>
Â  ...


Â  <configuration>
Â  Â  <rules>
Â  Â  Â  <requireJavaVersion>
Â  Â  Â  Â  Â <version>${minimalJavaBuildVersion}</version>


Â 


consequently it is better to specify in the component pom:


Â  <properties>
Â  Â  <minimalJavaBuildVersion>11</minimalJavaBuildVersion>


Â 


to get a warning if eclipse m2e selects a lower JDK version:


Â  [[1;34mINFO[m] [1m--- [0;32menforcer:3.0.0:enforce[m [1m(enforce-java-version)[m @ [36mcamel-azure-files[0;1m ---[mÂ  [[1;33mWARNING[m] Rule 0:Â  Â  org.apache.maven.plugins.enforcer.RequireJavaVersion failed withÂ  Â  message:
Â  Detected JDK Version: 1.8.0-271 is not in the allowed range 11.


Â 


rather than crashing on class file format incompatibility errors.Â 


Â 


Expected Behaviour


Minimal Java build version is not eclipse specific, it just happens eclipse leverages it, soÂ  Â Camel should at a proper pom level (could be the Camel root pom) declare:Â 


Â 


{{Â  <properties>}}
Â  Â  <minimalJavaBuildVersion>{{{}

{matches [https://camel.apache.org/manual/what-are-the-dependencies.html]}

{}}}</minimalJavaBuildVersion>


Â 


Hope it helps.",pkuzel:1687925812:2023-06-28T12:16:52.170+0000:1687925812:2023-06-28T12:16:52.170+0000:verified on main (4.x)
0,CAMEL-19383,Bug,Major,"3.20.4, 4.0-M3",None,"
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Unassigned,Jacek SzymaÅski,0,1,2023-05-23 15:32:56+00:00,2023-05-24 04:27:19+00:00,"When allowTemplateFromHeader is set, the endpoint will remember the first header expression that is set and use it for any subsequent exchange, even if it brings a different expression in its header.


That is:


template.sendBodyAndHeader(""direct:start"", TEST_BODY,
JsltConstants.HEADER_JSLT_STRING, "".foo"");


template.sendBodyAndHeader(""direct:start"", TEST_BODY,
JsltConstants.HEADER_JSLT_STRING, "".bar"");


will both use the expression .foo and the expression .bar will be ignored.


Â 


Also, if resource is set on the URI, it will ignore any expressions from header despite allowTemplateFromHeader, unless it was set on the first exchange, in which case it will be used for all exchanges, even those without the header set.",
0,CAMEL-19382,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Claus Ibsen,0,1,2023-05-23 11:49:45+00:00,2023-05-23 12:00:57+00:00,"This makes starting and stopping Camel better integrated with Spring Framework / Spring Boot.


This requires CAMEL-19380 to avoid an API clash with spring","davsclaus:1684814451:2023-05-23T12:00:51.079+0000:1684814451:2023-05-23T12:00:51.079+0000:Okay after more investigations then the startup ordering requires to be using Ordered and Phased in Spring framework, to let Camel startup in the correct order with route collecting and whatnot.

We cannot use SmartLifecycle, and we manually start Camel in the onEvent from Spring."
0,CAMEL-19381,Bug,Minor,"3.20.4, 3.20.5","3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,AurÃ©lien Pupier,0,3,2023-05-23 09:44:06+00:00,2023-06-09 13:57:13+00:00,"I used the command:



jbang camel@apache/camel run 'src/main/java/org/acme/timer/log/TimerRoute.java'




the file is coming from https://github.com/apache/camel-quarkus-examples/blob/ed3523e9c8d3343922eba3a34f6b248d90493782/timer-log/src/main/java/org/acme/timer/log/TimerRoute.java


there is this log repeating indefinitely:



Running integration with the following configuration:
    --camel-version=3.20.4




it creates a new CamelJBang on each time it writes the previous log block:



jps | grep CamelJBang
532586 CamelJBang
532743 CamelJBang
532666 CamelJBang




The main thread dump on them is:



Name: main
State: WAITING on java.lang.ProcessImpl@e90900f
Total blocked: 0  Total waited: 1

Stack trace: 
java.base@17.0.3/java.lang.Object.wait(Native Method)
java.base@17.0.3/java.lang.Object.wait(Object.java:338)
java.base@17.0.3/java.lang.ProcessImpl.waitFor(ProcessImpl.java:434)
app//org.apache.camel.dsl.jbang.core.commands.Run.runCamelVersion(Run.java:637)
app//org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:566)
app//org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:227)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:70)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:35)
app//picocli.CommandLine.executeUserObject(CommandLine.java:2041)
app//picocli.CommandLine.access$1500(CommandLine.java:148)
app//picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
app//picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
app//picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
app//picocli.CommandLine.execute(CommandLine.java:2170)
app//org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
app//main.CamelJBang.main(CamelJBang.java:36)","apupier:1684806777:2023-05-23T09:52:57.675+0000:1684806777:2023-05-23T09:52:57.675+0000:if I unset the Camel version:

{noformat}
jbang camel@apache/camel config unset camel-version
{noformat}

there is no more the loop.

When I set the version to 3.20.4 or 3.20.3, I reproduce it
davsclaus:1684806956:2023-05-23T09:55:56.498+0000:1684806956:2023-05-23T09:55:56.498+0000:try with 3.20.5 when its released
apupier:1684807238:2023-05-23T10:00:38.003+0000:1684807238:2023-05-23T10:00:38.003+0000:Attempt to use 3.20.5-SNAPSHOT is nto working (but unrelated to this issue):

{noformat}
(base) [apupier@localhost timer-log]$ jbang camel@apache/camel config set camel-version=3.20.5-SNAPSHOT
(base) [apupier@localhost timer-log]$ jbang camel@apache/camel config set camel.jbang.repos=https://repository.apache.org/snapshots/
(base) [apupier@localhost timer-log]$ jbang camel@apache/camel run 'src/main/java/org/acme/timer/log/TimerRoute.java'
Running integration with the following configuration:
    --camel-version=3.20.5-SNAPSHOT
[jbang] Resolving dependencies...
[jbang]    org.apache.camel:camel-bom:3.20.5-SNAPSHOT@pom
[jbang]    org.apache.camel:camel-core:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-core-engine:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-main:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-java-joor-dsl:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-kamelet:3.20.5-SNAPSHOT
[jbang]    org.apache.camel:camel-jbang-core:3.20
[jbang]    org.apache.camel:camel-kamelet-main:3.20
[jbang]    org.apache.camel:camel-resourceresolver-github:3.20
[jbang]    org.apache.camel:camel-cli-connector:3.20
[jbang]    org.apache.camel.kamelets:camel-kamelets:3.20.3
[jbang] [ERROR] Could not resolve dependencies: The following artifacts could not be resolved: org.apache.camel:camel-jbang-core:jar:3.20, org.apache.camel:camel-kamelet-main:jar:3.20, org.apache.camel:camel-resourceresolver-github:jar:3.20, org.apache.camel:camel-cli-connector:jar:3.20: Could not find artifact org.apache.camel:camel-jbang-core:jar:3.20 in mavencentral (https://repo1.maven.org/maven2/)
[jbang] Run with --verbose for more details
{noformat}
apupier:1684811941:2023-05-23T11:19:01.775+0000:1684811941:2023-05-23T11:19:01.775+0000:Camel 3.20.5 should be available in few days as the vote for the release has been started today: https://lists.apache.org/thread/d2bk9dgm1bb5ffcl266rd567b0b5s67w
apupier:1685404200:2023-05-30T07:50:00.554+0000:1685404200:2023-05-30T07:50:00.554+0000:I reproduce with Camel 3.20.5:

{noformat}
jbang camel@apache/camel init test.xml
jbang camel@apache/camel config set camel-version=3.20.5
jbang camel@apache/camel run test.xml
{noformat}

apupier:1685425654:2023-05-30T13:47:34.303+0000:1685425654:2023-05-30T13:47:34.303+0000:updated stack with 3.20.5:

{noformat}
Name: main
State: WAITING on java.lang.ProcessImpl@2e0efc98
Total blocked: 0  Total waited: 1

Stack trace: 
java.base@17.0.3/java.lang.Object.wait(Native Method)
java.base@17.0.3/java.lang.Object.wait(Object.java:338)
java.base@17.0.3/java.lang.ProcessImpl.waitFor(ProcessImpl.java:434)
app//org.apache.camel.dsl.jbang.core.commands.Run.runCamelVersion(Run.java:679)
app//org.apache.camel.dsl.jbang.core.commands.Run.run(Run.java:574)
app//org.apache.camel.dsl.jbang.core.commands.Run.doCall(Run.java:231)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:73)
app//org.apache.camel.dsl.jbang.core.commands.CamelCommand.call(CamelCommand.java:36)
app//picocli.CommandLine.executeUserObject(CommandLine.java:2041)
app//picocli.CommandLine.access$1500(CommandLine.java:148)
app//picocli.CommandLine$RunLast.executeUserObjectOfLastSubcommandWithSameParent(CommandLine.java:2461)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2453)
app//picocli.CommandLine$RunLast.handle(CommandLine.java:2415)
app//picocli.CommandLine$AbstractParseResultHandler.execute(CommandLine.java:2273)
app//picocli.CommandLine$RunLast.execute(CommandLine.java:2417)
app//picocli.CommandLine.execute(CommandLine.java:2170)
app//org.apache.camel.dsl.jbang.core.commands.CamelJBangMain.run(CamelJBangMain.java:154)
app//main.CamelJBang.main(CamelJBang.java:36)

{noformat}
apupier:1685511617:2023-05-31T13:40:17.791+0000:1685511617:2023-05-31T13:40:17.791+0000:it also affects camel version specified in a profile:
* {noformat}
jbang camel@apache/camel init test.xml
{noformat}
* create application.properties files with content:
{noformat}
camel.jbang.camel-version=3.20.5
{noformat}
* {noformat}
jbang camel@apache/camel run test.xml
{noformat}
apupier:1685511771:2023-05-31T13:42:51.331+0000:1685511771:2023-05-31T13:42:51.331+0000:if I understand well, it iw orking when specifyin gthe version from command-line with --camel-version because it is explcitely removed at this place [https://github.com/apache/camel/blob/f00a7a8e7b534e3b0f67091bb46e7604a642e825/dsl/camel-jbang/camel-jbang-core/src/main/java/org/apache/camel/dsl/jbang/core/commands/Run.java#L671]

For other cases, there is a camelVersion specified and so it tried to spin a new process all the time: https://github.com/apache/camel/blob/f00a7a8e7b534e3b0f67091bb46e7604a642e825/dsl/camel-jbang/camel-jbang-core/src/main/java/org/apache/camel/dsl/jbang/core/commands/Run.java#L583
davsclaus:1686289002:2023-06-09T13:36:42.948+0000:1686289002:2023-06-09T13:36:42.948+0000:This will only work on never Camel version forward, 3.20.6, 3.21 etc. For older version you need to use the command line args."
0,CAMEL-19380,Improvement,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Won't Fix,"4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-23 08:53:40+00:00,2023-05-23 12:00:46+00:00,"It would be good to move RuntimeConfiguration as a plugin to CamelContext so its API is loosly coupled as today CamelContext extends RuntimeConfiguration which is not good.


This would mean there are some API changes that some end users may need to adjust.


from:
camelContext.setAutoStartup(true);


to:
camelContext.getRuntimeConfiguration().setAutoStartup(true);","davsclaus:1684814446:2023-05-23T12:00:46.774+0000:1684814446:2023-05-23T12:00:46.774+0000:Okay after more investigations then the startup ordering requires to be using Ordered and Phased in Spring framework, to let Camel startup in the correct order with route collecting and whatnot.

We cannot use SmartLifecycle, and we manually start Camel in the onEvent from Spring."
0,CAMEL-19379,Improvement,Minor,3.20.4,"3.21.0, 4.0-RC1, 4.0.0","
None
",Closed,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Unassigned,Petr Kuzel,0,0,2023-05-22 15:20:32+00:00,2023-05-24 07:37:48+00:00,"As a newcomer, trying to develop a Camel component, my maven build failed with:


Â 


Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo [m: Could not find component java type


Â 


I had to ask dev mailing list because the error message puzzled me.


Â 


Proposing to improve error message to something alike:


Â 


throw new IllegalStateException(""Could not find @Component(\"""" + scheme + ""\"") annotated class."");


Â 


Maven stack trace in debug mode reveals the method:


Â 


...[1mCaused by[m: org.apache.maven.plugin.MojoFailureException: [1;31mError generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo[m...[1mCaused by[m: org.apache.maven.plugin.MojoFailureException: [1;31mUnable to create mojo[m...[1mCaused by[m: java.lang.IllegalStateException: [1;31mCould not find component java type[mÂ Â Â  [1mat[m org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo.findComponentProperties ([1mEndpointSchemaGeneratorMojo.java:872[m)Â Â Â  [1mat[m org.apache.camel.maven.packaging.EndpointSchemaGeneratorMojo.writeJSonSchemeAndPropertyConfigurer ([1mEndpointSchemaGeneratorMojo.java:257[m)","pkuzel:1684885033:2023-05-24T07:37:13.017+0000:1684885033:2023-05-24T07:37:13.017+0000:thank you, verified in 3.21.x:

Â 
{color:#000000}[{color}{color:#c50f1f}[1;31m{color}{color:#c50f1f}ERROR{color}{color:#000000}[m{color}{color:#000000}] Failed to execute goal {color}{color:#13a10e}[32m{color}{color:#13a10e}org.apache.camel:camel-package-maven-plugin:3.21.0-SNAPSHOT:generate{color}{color:#000000}[m{color}{color:#000000} {color}{color:#000000}[1m{color}{color:#000000}(generate){color}{color:#000000}[m{color}{color:#000000} on project {color}{color:#3a96dd}[36m{color}{color:#3a96dd}camel-azure-files{color}{color:#000000}[m{color}{color:#000000}: {color}{color:#c50f1f}[1;31m{color}{color:#c50f1f}Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo{color}{color:#000000}[m{color}{color:#000000}: Could not find @Component(""azure-files"") annotated class.{color}
pkuzel:1684885068:2023-05-24T07:37:48.953+0000:1684885068:2023-05-24T07:37:48.953+0000:thank you, verified in 3.21.x:

Â 
{color:#000000}[{color}{color:#c50f1f}[1;31m{color}{color:#c50f1f}ERROR{color}{color:#000000}[m{color}{color:#000000}] Failed to execute goalÂ {color}{color:#13a10e}[32m{color}{color:#13a10e}org.apache.camel:camel-package-maven-plugin:3.21.0-SNAPSHOT:generate{color}{color:#000000}[m{color}{color:#000000}Â {color}{color:#000000}[1m{color}{color:#000000}(generate){color}{color:#000000}[m{color}{color:#000000}Â on projectÂ {color}{color:#3a96dd}[36m{color}{color:#3a96dd}camel-azure-files{color}{color:#000000}[m{color}{color:#000000}:Â {color}{color:#c50f1f}[1;31m{color}{color:#c50f1f}Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo{color}{color:#000000}[m{color}{color:#000000}: Could not find @Component(""azure-files"") annotated class.{color}"
0,CAMEL-19378,Improvement,Minor,None,"3.18.8, 3.20.6, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.18.8, 3.20.6, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,David Voit,0,1,2023-05-22 12:42:24+00:00,2023-05-22 17:33:23+00:00,"If a file is copied with the original lastModified date, files are processes instantly. Also the file change detection is disabled if a copy takes more than minAge time. Instead of comparing startTime with lastModified on each iteration we are comparing it with now(). If files are created anew this should be the same behaviour, and files copied with preserved lastModifed are still correctly checked.",
0,CAMEL-19377,Improvement,Major,None,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,2,2023-05-22 11:31:36+00:00,2023-05-23 07:28:25+00:00,"We do this in camel-servet based (jetty etc)


            // are we suspended and a request is dispatched initially?
            if (consumer.isSuspended() && isInitial(request)) 

{
                response.sendError(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
                return;
            }


We should do something like that in camel-platform-http, so Camel does not accept incoming requests when its suspended/shutdown graceful","davsclaus:1684789630:2023-05-23T05:07:10.800+0000:1684789630:2023-05-23T05:07:10.800+0000:okay vertx is disabling and returning 404 if suspended
davsclaus:1684789794:2023-05-23T05:09:54.783+0000:1684789794:2023-05-23T05:09:54.783+0000:spring boot http platform returns 503
chen19980:1684790027:2023-05-23T05:13:47.153+0000:1684790027:2023-05-23T05:13:47.153+0000:Thanks!!!
davsclaus:1684797850:2023-05-23T07:24:10.517+0000:1684797850:2023-05-23T07:24:10.517+0000:We now also return 503 in vertx and spring-boot, so its consistent
chen19980:1684798105:2023-05-23T07:28:25.384+0000:1684798105:2023-05-23T07:28:25.384+0000:What time does the fix version-3.21.0 or 4.0.0 will be released?Â  Thanks:)"
0,CAMEL-19376,Task,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Grzegorz Grzybek,Claus Ibsen,0,1,2023-05-21 07:32:47+00:00,2023-05-23 15:05:23+00:00,"https://github.com/apache/camel/security/code-scanning/5572


We have done this in other places in camel with XML parsers, such as XmlConverter.",
0,CAMEL-19375,Task,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Peter Palaga,0,1,2023-05-20 17:50:14+00:00,2023-05-22 15:22:48+00:00,"I found some misalignment in Angus Mail versions in Camel Quarkus and I thought solving it in favor of the newest Angus Mail 2.0.1 would be ideal in Camel 4, because it is a backwards incompatible change (jakarta package rename).


The tests currently use org.jvnet.mock-javamail:mock-javamail which does not seem to be compatible with Angus Mail 2, so they need to get migrated to e.g. GreenMail.",
0,CAMEL-19374,Dependency upgrade,Major,3.14.7,3.14.8,"
None
",Resolved,Fixed,3.14.8,Claus Ibsen,Claus Ibsen,0,1,2023-05-20 08:11:01+00:00,2023-05-20 09:20:05+00:00,No Desc,
0,CAMEL-19373,Bug,Minor,3.20.4,"3.20.7, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.7, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Adam Lukaszewski,0,3,2023-05-19 09:10:40+00:00,2023-06-18 08:13:07+00:00,"Hi folks,


I think I found a bug in the spring-rabbitmq component. It seems that theÂ replyTimeoutÂ settings (neither path nor spring properties) will be accepted by the component. I have create aÂ sample projectÂ for you to show the issue. The route is very simple:




public void configure() throws Exception {
        from(""timer:hello?repeatCount=1"")
            .transform(simple(""Random number ${random(0,100)}""))
            .log(LoggingLevel.ERROR,
                    "">>>>>>> Timeout of replay should happen after 10 secs (application.properties) or 15 secs as "" +
                            ""here configured"")
            .to(ExchangePattern.InOut, ""spring-rabbitmq:foo?routingKey=mykey&replyTimeout=15000"");
    }




I expect that the listener will throw a ""Reply timed out"" AmqpReplyTimeoutException after 15 seconds (or 10 seconds as defined in theÂ application.properties). What is happening:


Â 


You see that after 30 secs the exception occurred. It seems that we are hitting here the default configurations of Spring AMQ instead the setup configurations.",davsclaus:1687047187:2023-06-18T08:13:07.447+0000:1687047187:2023-06-18T08:13:07.447+0000:Thanks I changed the default value to 30 seconds as that is what spring uses
0,CAMEL-19372,Dependency upgrade,Major,None,"3.18.7, 3.20.5, 3.21.0","
None
",Resolved,Fixed,"3.18.7, 3.20.5, 3.21.0",Unassigned,Claus Ibsen,0,1,2023-05-18 15:22:02+00:00,2023-05-18 15:22:06+00:00,No Desc,
0,CAMEL-19371,Bug,Minor,3.14.1,"3.14.8, 3.18.7, 3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.14.8, 3.18.7, 3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Bence,0,2,2023-05-18 13:24:09+00:00,2023-05-19 16:35:04+00:00,"Hi There,


I am a bit dubious about the behavior of RedeliveryErrorHandler's handleException() method in camel-core-processor bundle.


Chaining all exceptions in suppressedExceptions of Throwable during the redelivery process may not be the original intention, at least the comment below is suggesting that the goal was something else here.



if (previous != null && previous != e) {
// a 2nd exception was thrown while handling a previous exception
// so we need to add the previous as suppressed by the new exception
// see also FatalFallbackErrorHandler


The consequence of adding the previous exception to the suppressedExceptions list of the current one is building up an infinite chain of objects, besides a single log entry can be huge after a couple of retry attempts, see attached log.
I think the best would be to turn this feature on/off by a configuration parameter.


Thank you.","davsclaus:1684411398:2023-05-18T20:03:18.870+0000:1684411398:2023-05-18T20:03:18.870+0000:Yeah that is a good point about we should likely just keep the last error so the depth does not grow soo big
davsclaus:1684411477:2023-05-18T20:04:37.660+0000:1684411477:2023-05-18T20:04:37.660+0000:its not a memory leak as the memory can be reclaimed, its just a long stacktrace if retry is many times. And you should not have forever retries then you have another problem on your hand
Meszaros:1684453639:2023-05-19T07:47:19.564+0000:1684453639:2023-05-19T07:47:19.564+0000:I am afraid it is, since all exceptions thrown during the redelivery mechanism chained together and attached to the exchange via CamelExceptionCaught property (previous exception:

{{{color:#000000}Throwable previous {color}= {color:#871094}exchange{color}.getProperty({color:#000000}ExchangePropertyKey{color}.{color:#871094}EXCEPTION_CAUGHT{color}, {color:#000000}Throwable{color}.{color:#0033b3}class{color});}}

On the other hand redeliveryPolicy maximumRedeliveries -1 is a valid option, this way the suppressedExceptions chain can definitely cause a memory leak. {color:#067d17}
{color}
davsclaus:1684455429:2023-05-19T08:17:09.630+0000:1684455429:2023-05-19T08:17:09.630+0000:a leak is memory that cannot be reclaimed
what you describe is memory usage can become high if you have forever error handling, and using -1 is a bad practice
davsclaus:1684473373:2023-05-19T13:16:13.873+0000:1684473373:2023-05-19T13:16:13.873+0000:Okay have a pending fix, as this manifest in camel-jms and only when doing error handling that causes a 2nd error.

However we may consider removing adding suppressed, but then end users may not see this from a result exception as they can only see the last, and not the original."
0,CAMEL-19370,Improvement,Major,None,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-18 09:48:04+00:00,2023-05-18 12:21:12+00:00,"~/workspace â¯ camel get endpoint
  PID   NAME       AGE   DIR  TOTAL  URI
 44005  consumer  3m11s              log://info?multiline=true&showAll=true
 44005  consumer  3m11s   in      0  kamelet://kafka-not-secured-source?bootstrapServers=localhost:9092&topic=foobar
 44005  consumer  3m11s              kamelet://sink?routeId=kafka-not-secured-source-1
 44005  consumer  3m11s   in      0  kafka://foobar?allowManualCommit=false&autoCommitEnable=true&autoOffsetReset=latest&broâ¦",davsclaus:1684374641:2023-05-18T09:50:41.664+0000:1684374641:2023-05-18T09:50:41.664+0000:Also add option to show sensitive information (eg passwords) 
0,CAMEL-19369,Improvement,Major,None,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Claus Ibsen,0,1,2023-05-18 09:32:33+00:00,2023-07-30 06:42:45+00:00,"We should improve the information from camel trace, to have endpoint details when an event is from an endpoint (input to a route) or send somewhere (to, toD, etc.)",
0,CAMEL-19368,Improvement,Major,None,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-18 08:56:25+00:00,2023-05-18 09:29:13+00:00,This makes it easier to provide custom event notifiers which you can just annotate for dependency injection and auto discovered by camel like we do for other stuff,davsclaus:1684372057:2023-05-18T09:07:37.904+0000:1684372057:2023-05-18T09:07:37.904+0000:Also make it work via camel-jbang
0,CAMEL-19367,Improvement,Major,3.20.4,None,"
None
",Resolved,Information Provided,None,Unassigned,Pasquale Congiusti,0,2,2023-05-18 07:56:52+00:00,2023-05-18 09:29:29+00:00,"Hello team. While troubleshooting this Camel K issue [1], I've realized we're missing some route event that can tell us that the route was completed. Do you think it would be possible to include the `RouteCompleted` event? From what I can tell, it would be an event generated once all the steps of the route are completed. Without that, we don't know exactly when a route is terminated and it's fine to gracefully stop it.


Any feedback or possible workaround is appreciated as well, thanks!


[1] https://github.com/apache/camel-k/issues/4343","davsclaus:1684369076:2023-05-18T08:17:56.065+0000:1684369076:2023-05-18T08:17:56.065+0000:route events are just about routes added / removed etc.

the exchange events are for messages being routed inside camel. There is already events when an exchange is complete.
In your example the split create sub-exchanges, and you can see the last exchange completed in the events list has exchange id 0000 that was the first exchange.

So you could either

capture the created exchange event, and the exchange id
listen for completed events until you have a matching exchange id

or check inflight registry if the route has 0, or camel context has 0 in general (I assume you want to shutdown all of Camel)

so in the listener you can wait for completed exchanges and check inflight registry if its zero (however I need to check if you received the event before camel decrements the inflight counter, as otherwise it would be 1)


davsclaus:1684369435:2023-05-18T08:23:55.547+0000:1684369435:2023-05-18T08:23:55.547+0000:As things can potentially be processed out of order, then you can check for inflight = 0 and exchange completed | failed
squakez:1684369452:2023-05-18T08:24:12.720+0000:1684369452:2023-05-18T08:24:12.720+0000:Thanks [~davsclaus], yeah, considering the following example:
{code}
BA60304B47DB867-0000000000000000 exchange created
BA60304B47DB867-0000000000000001 exchange created
BA60304B47DB867-0000000000000001 exchange sending to: mock://result
BA60304B47DB867-0000000000000001 exchange completed took: 760ms
BA60304B47DB867-0000000000000002 exchange created
BA60304B47DB867-0000000000000002 exchange sending to: mock://result
BA60304B47DB867-0000000000000002 exchange completed took: 762ms
BA60304B47DB867-0000000000000003 exchange created
BA60304B47DB867-0000000000000003 exchange sending to: mock://result
BA60304B47DB867-0000000000000003 exchange completed took: 762ms
BA60304B47DB867-0000000000000000 exchange completed took: 763ms
{code}
I guess I can just watch for the `BA60304B47DB867-0000000000000000 exchange completed took: 763ms` that is when the root step is completed (which is exactly what I need to know). It sounds fine and I'm going to test it soon to prove it solves the original issue.

Thanks for the suggestion,
Pasquale.
squakez:1684369603:2023-05-18T08:26:43.609+0000:1684369603:2023-05-18T08:26:43.609+0000:> As things can potentially be processed out of order, then you can check for inflight = 0 and exchange completed | failed

do you think that there is the possibility for BA60304B47DB867-0000000000000000 to ends before any subroute created by the split eip?
davsclaus:1684370470:2023-05-18T08:41:10.049+0000:1684370470:2023-05-18T08:41:10.049+0000:Yeah they could be out of order depending on what the end user do in the route, if an exchange is processed async, or using wireTap EIP etc.


davsclaus:1684372547:2023-05-18T09:15:47.421+0000:1684372547:2023-05-18T09:15:47.421+0000:You can do something like

public class MyNotifier extends org.apache.camel.support.EventNotifierSupport {

	public boolean isEnabled(CamelEvent event) {
		return event instanceof CamelEvent.ExchangeCompletedEvent || event instanceof CamelEvent.ExchangeFailedEvent;
    }

    @Override
    public void notify(CamelEvent event) throws Exception {
        int size = getCamelContext().getInflightRepository().size();
        System.out.println(""exchange done and "" + size + "" inflights"");
    }

}


Which gives me

2023-05-18 11:15:00.403  INFO 42495 --- [tifier_Worker-1] cron.yaml:16                        : Parrot
exchange done and 1 inflights
2023-05-18 11:15:00.405  INFO 42495 --- [tifier_Worker-1] cron.yaml:16                        : Cockatiel
exchange done and 1 inflights
2023-05-18 11:15:00.407  INFO 42495 --- [tifier_Worker-1] cron.yaml:16                        : Pigeon
exchange done and 1 inflights
2023-05-18 11:15:00.408  INFO 42495 --- [tifier_Worker-1] cron.yaml:17                        : [Parrot, Cockatiel, Pigeon]
2023-05-18 11:15:00.410  INFO 42495 --- [tifier_Worker-1] cron.yaml:18                        : end
exchange done and 0 inflights
squakez:1684372760:2023-05-18T09:19:20.187+0000:1684372760:2023-05-18T09:19:20.187+0000:Perfect, it seems we have a final solution then. Thanks a lot for putting the example together!"
0,CAMEL-19366,Improvement,Major,None,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-18 07:30:20+00:00,2023-05-18 07:57:24+00:00,"If triggering reload on-demand then it can potentially take some time and you just want to trigger the reload, and let Camel do this in the background.",
0,CAMEL-19365,Task,Minor,4.0-M3,4.0-RC1,"
None
",Resolved,Fixed,4.0-RC1,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,2,2023-05-18 05:17:48+00:00,2023-05-19 14:12:20+00:00,"The upgrade to Undertow 2.3.5 broke the UndertowHttpsSpringTest. It is now failing due to a java.nio.channels.ClosedChannelException.


It seems to me that the changes from UNDERTOW-2252 may have broken this test (or the test is wrong). 


This needs to be investigated.","ffang:1684416427:2023-05-18T21:27:07.640+0000:1684416427:2023-05-18T21:27:07.640+0000:Hi [~orpiske],

I happen to know the root cause of this issue.

This is introduced by the fix of [UNDERTOW-2212|https://issues.redhat.com/browse/UNDERTOW-2212].

Without UNDERTOW-2212, undertow conduit just not check the common name of the http server host in the tls certificate when using SSL. But since UNDERTOW-2212 fixed this up, and in the UndertowHttpsSpringTest it simply uses a general certificate which isn't much the test machine's hostname,  that's why the test fails now.

We can
1. run maven test with 
-Dio.undertow.client.https.disableEndpointIdentification=true which explicitly not check the common name(CN) of the host to make the test pass
2. we can configure the Undertow Options somewhere during the SSL conversation using java code like
{code}
options = OptionMap.builder()
                .set(UndertowOptions.ENDPOINT_IDENTIFICATION_ALGORITHM, """")
                .getMap();
{code}
for this test to disable common name check.

Cheers
Freeman
orpiske:1684454666:2023-05-19T08:04:26.419+0000:1684454666:2023-05-19T08:04:26.419+0000:Thanks [~ffang]! I think that did the trick."
0,CAMEL-19364,Bug,Minor,4.0.0,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Jiri Ondrusek,Jiri Ondrusek,0,1,2023-05-17 12:58:24+00:00,2023-05-21 07:47:12+00:00,"I was trying to synchronize camel-quarkus with current Camel from `main` branch.


I noticed failures related to fix https://github.com/apache/camel/commit/e2ad230d86fcbbc1e3c4ad5a9daf01aa3127eb42 in the Camel-rest-openapi component.


According to the doc, the url in component can be specified i.g. ""classpath:..."", ""bean:..."". At least these 2 options does not work.


It can be verified by a simple test:




    @Test
    public void testClasspath() throws Exception{
        Producer p =   context().getEndpoint(""rest-openapi:addPet?specificationUri=classpath:openapi.json"").createProducer();
        Assertions.assertNotNull(p);
    }",jondruse:1684299531:2023-05-17T12:58:51.947+0000:1684299531:2023-05-17T12:58:51.947+0000:[~klease78] ^ FYI
0,CAMEL-19363,Task,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2023-05-17 11:59:49+00:00,2023-05-17 12:05:34+00:00,So it will be compatible with Spring 6.,
0,CAMEL-19362,Improvement,Major,None,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-17 09:19:48+00:00,2023-05-17 17:10:37+00:00,"When using tracing (backlog tracing) then it captures the inner steps of kamelets, and you may not want to care about that when you use sinks and sources.",davsclaus:1684295875:2023-05-17T11:57:55.586+0000:1684295875:2023-05-17T11:57:55.586+0000:Yeah this is a little bit more complicated as the created/completed events are triggered in the kamelet source
0,CAMEL-19361,Improvement,Major,None,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,1,2,2023-05-17 04:57:58+00:00,2023-05-17 05:45:39+00:00,"In case you configurations defined via a trait in KameletBinding


(argh Camel K has so many small secrets to configure stuff instead of standard Camel with application.properties)




apiVersion: camel.apache.org/v1alpha1
kind: KameletBinding
metadata:
  name: sample
  annotations:
    trait.camel.apache.org/camel.properties: ""camel.main.tracing=true""
spec:
  source:
    ref:
      kind: Kamelet
      apiVersion: camel.apache.org/v1alpha1
      name: timer-source
    properties:
      period: 5000
      contentType: application/json
      message:  '{""id"":""1"",""field"":""hello"",""message"":""Camel Rocks""}'
  steps:
  - ref:
      kind: Kamelet
      apiVersion: camel.apache.org/v1alpha1
      name: extract-field-action
    properties:
      field: ""field""
  sink:
    ref:
      kind: Kamelet
      apiVersion: camel.apache.org/v1
      name: log-sink
    properties:
      show-headers: false",
0,CAMEL-19360,Improvement,Major,None,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-16 17:35:25+00:00,2023-05-17 07:10:17+00:00,"The export command will export all files form the current folder, or what may have been running prior.


For use cases where you have a set of files in the same folder, but want to export them separately and for example build and deploy afterwards via gitops pipelines, then we may want to make this easier with export


like camel run can take a set of files, via


camel export foo.java bar.xml
camel export chuck.yaml
camel export jack.xml MyBean.java",
0,CAMEL-19359,Bug,Minor,3.20.4,None,"
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,adam chen,0,2,2023-05-16 07:07:40+00:00,2023-08-31 02:06:17+00:00,"< camel graceful shutdown time = 20s, the service thread.sleep = 10s >
In my test case, at first I started the application, send the first request and then stop the JVM to run the camel graceful shutdown, in the console show that there have 2 infilght messages pending to complete, after about 4 sec, I send the second request, in theroy, camel shouldn't accept the second request, unfortunately, it still receive new request.


TestCode","davsclaus:1684192888:2023-05-16T07:21:28.649+0000:1684192888:2023-05-16T07:21:28.649+0000:Are you talking about this in the chat room, if so add a link to that conversation.
davsclaus:1684192956:2023-05-16T07:22:36.965+0000:1684192956:2023-05-16T07:22:36.965+0000:You need to put together a sample project that reproduces what you try to do, you can attach this this JIRA as .zip or put the code in github etc.
chen19980:1684192968:2023-05-16T07:22:48.185+0000:1684192968:2023-05-16T07:22:48.185+0000:[~davsclaus] Yesss, I already add the link in the conversation.
chen19980:1684614877:2023-05-21T04:34:37.939+0000:1684614877:2023-05-21T04:34:37.939+0000:Is there have any solutions to solve this issue ?
davsclaus:1684626214:2023-05-21T07:43:34.577+0000:1684626214:2023-05-21T07:43:34.577+0000:This is a big example, can it run database and whatnot. We don't have a lot of time to investigate end user applications if they can't easily be run standalone and demonstrate what your problem is.
chen19980:1684642543:2023-05-21T12:15:43.710+0000:1684642553:2023-05-21T12:15:53.185+0000:[~davsclaus] OK, I will offer another simple example.
chen19980:1684649789:2023-05-21T14:16:29.752+0000:1684649806:2023-05-21T14:16:46.329+0000:[~davsclaus] Here is a simple code for test graceful shutdown. [Simple code|https://github.com/chen19980/GracefulShutdown-test]
davsclaus:1684654996:2023-05-21T15:43:16.248+0000:1684654996:2023-05-21T15:43:16.248+0000:Thank you for the smaller example
davsclaus:1684655180:2023-05-21T15:46:20.285+0000:1684655180:2023-05-21T15:46:20.285+0000:Okay if I run this with 

mvn spring-boot:run

And I can call the service via that curl command.

And then if I stop the spring boot application (ctrl + c) then it stops nicely. So we need to find a way to simulate a shutdown that is taking time, and let Spring Boot still send messages into Camel.
chen19980:1684655541:2023-05-21T15:52:21.089+0000:1684655551:2023-05-21T15:52:31.617+0000:[~davsclaus] Yes. I have set a thread.sleep() method in the service to simulate a shutdown in taking time.

If I stop the SB application and send the second request, the camel still receive request.
davsclaus:1684656714:2023-05-21T16:11:54.768+0000:1684656714:2023-05-21T16:11:54.768+0000:Okay I can simulate this by just doing a kill -sigint <pid> and then have breakpoints in shutdown code in SB and Camel.


chen19980:1684657326:2023-05-21T16:22:06.467+0000:1684657326:2023-05-21T16:22:06.467+0000:[~davsclaus]Â  Ok. If you fix this problem, let me know what to do. Thanks
davsclaus:1684725088:2023-05-22T11:11:28.440+0000:1684725088:2023-05-22T11:11:28.440+0000:so spring boot graceful shutdown is only its own http server.

In camel you always have graceful shutdown, and Camel takes care of processing inflight in graceful manner.
So if you turn of spring boot graceful shutdown, then SB will stop HTTP server quickly, and Camel will let inflight messages complete and shutdown gracefully.

So it only makes sense to use SB graceful if you use other non Camel HTTP services with SB and want those to graceful shutdown.


davsclaus:1684725503:2023-05-22T11:18:23.664+0000:1684725503:2023-05-22T11:18:23.664+0000:Okay I have changed the shutdown order in camel-spring so its done a bit later, this allows SB tomcat http server to shutdown first

{code}
2023-05-22T13:17:16.168+02:00  INFO 39155 --- [ionShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete
2023-05-22T13:17:16.960+02:00  INFO 39155 --- [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete
2023-05-22T13:17:17.954+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.c.s.CamelHttpTransportServlet      : Destroyed CamelHttpTransportServlet[CamelServlet]
2023-05-22T13:17:18.446+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.0.0-SNAPSHOT (TestCamelSaga) is shutting down (timeout:20s)
2023-05-22T13:17:21.295+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.i.engine.DefaultShutdownStrategy   : Starting to graceful shutdown 13 routes (timeout 20 seconds)
...
2023-05-22T13:17:21.318+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   :     Stopped route1 (rest-api:///api-doc)
2023-05-22T13:17:21.318+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   :     Stopped route2 (direct://databases)
2023-05-22T13:17:21.321+02:00  INFO 39155 --- [ionShutdownHook] o.a.c.impl.engine.AbstractCamelContext   : Apache Camel 4.0.0-SNAPSHOT (TestCamelSaga) shutdown in 2s874ms (uptime:33s)
{code}
chen19980:1684725904:2023-05-22T11:25:04.360+0000:1684725904:2023-05-22T11:25:04.360+0000:[~davsclaus] Amazing!!! Thanks for you help. In my past test, when SB start graceful shutdown, it can't receive new request during shutdownning. But in SB with camel, I found that SB will start graceful shutdown after camel executing so it always not block the new request. And what time does the fix version will release ? Thanks.
davsclaus:1684726108:2023-05-22T11:28:28.490+0000:1684726108:2023-05-22T11:28:28.490+0000:You can try NOT to use SB graceful shutdown with your example, and only use Camel shutdown.

A fix is pending for Camel v4, and potentially backported to Camel 3.21
https://github.com/apache/camel/pull/10184
davsclaus:1684726364:2023-05-22T11:32:44.094+0000:1684726364:2023-05-22T11:32:44.094+0000:I created CAMEL-19377 as Camel should ideally also handled graceful shutdown by not accepting incoming http traffic. We do this in the older servlet based, but not the newer platform-http
davsclaus:1684727350:2023-05-22T11:49:10.259+0000:1684727350:2023-05-22T11:49:10.259+0000:Okay so in your example, then camel-servlet is in use, and it will suspend when Camel does graceful shutdown, and calling it will return 503

~/workspace â¯ curl --location --request GET 'http://localhost:9090/camel/databases'                                                                                          4s
{""timestamp"":""2023-05-22T11:48:05.078+00:00"",""status"":503,""error"":""Service Unavailable"",""path"":""/camel/databases""}%
chen19980:1684728358:2023-05-22T12:05:58.566+0000:1684728358:2023-05-22T12:05:58.566+0000:[~davsclaus] So in my TestCode, use camel-servlet is a right desicion? It can block the second request when camel during graceful shutdownning. Right?
davsclaus:1684728603:2023-05-22T12:10:03.944+0000:1684728603:2023-05-22T12:10:03.944+0000:yes camel-servlet will block 2nd request as shown above with the 503 response code (that is from camel, without spring boot graceful shutdown)"
0,CAMEL-19358,Bug,Minor,"3.18.3, 3.20.0",,"
None
",Open,Unresolved,None,Unassigned,Jianbo Ma,0,1,2023-05-15 20:14:56+00:00,2023-05-16 04:42:41+00:00,"We have circuit breaker implementation in routes, and it is using ThrottlingExceptionRoutePolicy. Previously we were using version 3.18.0, the Kakfa consumer is not able to consume messages when keepOpen is true. However there was an issue with version 3.18.0, which was that the consumer couldn't be resumed after we changed the keepOpen to false, could be an issue related to https://issues.apache.org/jira/browse/CAMEL-18688 . We tried version 3.18.3 and 3.20.0, both versions have the same issue, Kafka consumer is able to consume message even with keepOpen as true, while for the route with JMS consumer, there is no such issue.Â Â 


Thanks,


Jianbo",
0,CAMEL-19357,Improvement,Minor,None,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-15 17:55:46+00:00,2023-05-15 18:50:03+00:00,Otherwise if the task is too slow such as a slow download then you can see WARN logs from vertx about ... Thread has been blocked for ....,
0,CAMEL-19356,New Feature,Major,None,None,"
None
",Open,Unresolved,None,Unassigned,Andrea Cosentino,0,2,2023-05-15 17:17:32+00:00,2023-05-16 05:41:57+00:00,"Like we did for normal secret we could retrieve the needed bits for SSL/TLS.


For the properties we should re-use what we have for aws, gcp, azure and hashicorp","davsclaus:1684186917:2023-05-16T05:41:57.680+0000:1684186917:2023-05-16T05:41:57.680+0000:Spring Boot 3.1 and unified SSL configuration
https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#features.ssl"
0,CAMEL-19355,Task,Minor,None,"4.0-RC2, 4.0.0","
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-05-15 15:48:15+00:00,2023-07-16 11:27:51+00:00,"We are using 3.8.6, and there is a 3.8.8 release. But also a 3.9.2",
0,CAMEL-19354,Improvement,Minor,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Federico Mariani,Claus Ibsen,0,1,2023-05-15 15:02:59+00:00,2023-05-16 05:33:06+00:00,No Desc,
0,CAMEL-19353,Improvement,Minor,3.21.0,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Marat Gubaidullin,0,2,2023-05-15 13:06:51+00:00,2023-05-20 07:14:47+00:00,"When I run the following route with camel-jbang:




- route:
    id: route-1791
    from:
      uri: kamelet:mqtt5-source
      id: from-fac9
      parameters:
        topic: data
        brokerUrl: '{{configmap:mqtt-server/broker-uri}}'
        username: '{{secret:mqtt-connection/username}}'
        password: '{{secret:mqtt-connection/password}}'
        clientId: client1
      steps:
        - log:
            message: ${body}
            id: log-cfb7




I have correct error message




org.apache.camel.FailedToCreateRouteException: Failed to create route route-1791: Route(route-1791)[From[kamelet:mqtt5-source?brokerUrl={{conf... because of Failed to resolve endpoint: kamelet:mqtt5-source?brokerUrl={{configmap:mqtt-server/broker-uri}}&clientId=xxxxxx&password=xxxxxx&topic=data&username=xxxxxx due to: Operation: [get]  for kind: [ConfigMap]  with name: [mqtt-server]  in namespace: [karavan]  failed.




When I run camel-jbang with empty --source-dir and then upload and run the same YAML I have an unexplainable message:




2023-05-15 09:05:24.041  WARN 54202 --- [ntloop-thread-0] support.RouteOnDemandReloadStrategy : Error reloading routes due Failed to create route route-1791: Route(route-1791)[From[kamelet:mqtt5-source?brokerUrl={{conf... because of Failed to resolve endpoint: kamelet:mqtt5-source?brokerUrl={{configmap:mqtt-server/broker-uri}}&clientId=xxxxxx&password=xxxxxx&topic=data&username=xxxxxx due to: No httpclient implementations found on the context classloader, please ensure your classpath includes an implementation jar. This exception is ignored.
org.apache.camel.FailedToCreateRouteException: Failed to create route route-1791: Route(route-1791)[From[kamelet:mqtt5-source?brokerUrl={{conf... because of Failed to resolve endpoint: kamelet:mqtt5-source?brokerUrl={{configmap:mqtt-server/broker-uri}}&clientId=xxxxxx&password=xxxxxx&topic=data&username=xxxxxx due to: No httpclient implementations found on the context classloader, please ensure your classpath includes an implementation jar","davsclaus:1684131485:2023-05-15T14:18:05.850+0000:1684131485:2023-05-15T14:18:05.850+0000:Okay I suspect its kubernetes-client as this works if you run outside k8s and do not use configmap placeholders
davsclaus:1684131833:2023-05-15T14:23:53.111+0000:1684131833:2023-05-15T14:23:53.111+0000:  public static HttpClient.Factory getHttpClientFactory() {
    HttpClient.Factory factory = getFactory(
        ServiceLoader.load(HttpClient.Factory.class, Thread.currentThread().getContextClassLoader()));
    if (factory == null) {
      factory = getFactory(ServiceLoader.load(HttpClient.Factory.class, HttpClientUtils.class.getClassLoader()));
      if (factory == null) {
        throw new KubernetesClientException(
            ""No httpclient implementations found on the context classloader, please ensure your classpath includes an implementation jar"");
      }
    }
    LOGGER.debug(""Using httpclient {} factory"", factory.getClass().getName());
    return factory;
  }
davsclaus:1684133897:2023-05-15T14:58:17.866+0000:1684133897:2023-05-15T14:58:17.866+0000:A potential fix has been pushed, Marat will retest when he has new CI builds with SNAPSHOT jars"
0,CAMEL-19352,Improvement,Major,"3.20.4, 4.0-M3","3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Federico Mariani,Federico Mariani,0,1,2023-05-15 09:26:19+00:00,2023-05-16 05:33:14+00:00,"Add a doc paragraph about the integration between camel-mybatis-starter and mybatis-spring-boot-starter
camel-mybatis-starter documentation properties are wrong, mybatis-bean is used instead of mybatis",
0,CAMEL-19351,Dependency upgrade,Major,None,"3.18.7, 3.20.5, 3.21.0","
None
",Resolved,Fixed,"3.18.7, 3.20.5, 3.21.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-15 07:28:20+00:00,2023-05-15 07:28:24+00:00,No Desc,
0,CAMEL-19350,Improvement,Minor,None,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Unassigned,Jacek SzymaÅski,0,2,2023-05-14 14:26:00+00:00,2023-05-16 05:01:56+00:00,"Unlike camel-sql, camel-jpa does not allow the user to put the result elsewhere than the message body; if this is needed the user must: preserve the body, use the component, put the result in the desired destination, restore the body.


This PR adds the possibility to put the result into a header or property without destroying the message body.",davsclaus:1684184516:2023-05-16T05:01:56.309+0000:1684184516:2023-05-16T05:01:56.309+0000:Thanks for the PRs
0,CAMEL-19349,New Feature,Major,None,"3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-14 08:02:02+00:00,2023-05-15 07:19:25+00:00,"So /q/dev/source also can return all files loaded via jbang --source-dir


Currently its for routes only.","davsclaus:1684027198:2023-05-14T09:19:58.004+0000:1684106361:2023-05-15T07:19:21.819+0000:TODO: list files *DONE*
TODO: dump source (per file, pattern) *DONE*
"
0,CAMEL-19348,Dependency upgrade,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,3,2023-05-13 06:04:46+00:00,2023-05-22 17:37:57+00:00,There are some test errors when upgrading in camel-observation. Also when upgrading to a newer 1.0.x release.,"davsclaus:1683929152:2023-05-13T06:05:52.319+0000:1683929152:2023-05-13T06:05:52.319+0000:[~marcingrzejszczak] I wonder if you could take a look if you get time
mgrzejszczak:1683954629:2023-05-13T13:10:29.767+0000:1683954629:2023-05-13T13:10:29.767+0000:We messed up the release ð¬. You need to upgrade to 1.1.1 for the 1.1.x branch or 1.0.6 for the 1.0.x branchÂ 

Â 

Â 
davsclaus:1684121208:2023-05-15T11:26:48.724+0000:1684121246:2023-05-15T11:27:26.819+0000:Okay but for the 1.0.x releases then if I upgrade on main branch (Camel v4)

{code}
-        <micrometer-version>1.10.6</micrometer-version>
-        <micrometer-tracing-version>1.0.4</micrometer-tracing-version>
+        <micrometer-version>1.10.7</micrometer-version>
+        <micrometer-tracing-version>1.0.5</micrometer-tracing-version>
{code}

Then we have unit test errors in camel-observation and camel-micrometer

[~mgrzejszczak] ^^^
marcingrzejszczak:1684143008:2023-05-15T17:30:08.427+0000:1684143008:2023-05-15T17:30:08.427+0000:I fixed the build with this PR https://github.com/apache/camel/pull/10091 - what we fixed in Tracing broke sth in Camel but I applied a fix. I will need to one day figure out if how Camel actually plays around with scopes and parent-child relationship between spans is OK."
0,CAMEL-19347,Dependency upgrade,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Unassigned,Claus Ibsen,0,1,2023-05-13 06:00:00+00:00,2023-05-19 07:42:22+00:00,SB 3.1 is released later this month,
0,CAMEL-19346,Bug,Major,"3.20.2, 3.20.3, 3.20.4",,"
None
",Resolved,Information Provided,None,Unassigned,Max,0,3,2023-05-13 00:16:00+00:00,2023-09-01 13:55:09+00:00,"First of all I have to apologize, cannot provide demo project to reproduce the error. So, this is the issue:


using route something like this:




from(activemq..?consumerCount=5).bean(MyBean.class).to(""http:foo.bar/url"") 




application.yaml

foo.base.url: http://foo.bar/foo






import org.apache.camel.builder.SimpleBuilder;
import static org.apache.camel.builder.Builder.simple;

public class MyBean { 

public static final String PART1 = ""{{foo.base.url}}"";
public static final String PART2 = ""$simple{header.fooId}""
public static final String FULL_URL = PART1 + ""/"" + PART2;

@Handler
public void process(Exchange exchange) {
    var allInOne = simple(FULL_URL).evaluate(exchange, String.class);
    var allInOneWithSB = SimpleBuilder.simple(FULL_URL).evaluate(exchange,   String.class);

    var part1 = simple(PART1).evaluate(exchange, String.class);
    var part2 = simple(PART2).evaluate(exchange, String.class);
    var builtFromParts1 = part1 + ""/"" + message.getHeader(""myId"");
    var builtFromParts2 = part1 + ""/"" + part2;

    message.setHeader(Exchange.HTTP_URI, allInOne); // sometimes broken
    message.setHeader(Exchange.HTTP_URI, allInOneWithSB); // sometimes broken
    message.setHeader(Exchange.HTTP_URI, builtFromParts1); // always correct
    message.setHeader(Exchange.HTTP_URI, builtFromParts2); // always correct
}



The issue:


When MyBean is used in a single thread (1 queue consumer) everything works fine.Â 


When MyBean is used with multiple queue consumers after some time (about 50 messages with 5 consumers) starts messing up the Exchange.HTTP_URI value.Â 


So instead of always having url likeÂ 




http://foo.bar/foo/1
http://foo.bar/foo/2
...
http://foo.bar/foo/1024




we start getting weird results such as




http://foo.bar/foo/1
http://foo.bar/foo/http://foo.bar/foo/1
http://foo.bar/foo/11




After experimenting I suspect that the Builder.simple expression is not thread safeÂ  or has some internal caching which causes the {{expression}} to collide with $simple{header.foo} when used together in the same string.


So it takes the result of {{expression}} sets to some internal cache then takes that value and adds the same value + result of ${simple{header.foo}


When the expressions are evaluated separately Builder.simple() produces correct result.


Tried to use deprecated SimpleBuilder.simple() expression and hit the same issue.


So even though allInOne and allInOneWithSB wereÂ broken, other values such as builtFromParts1, builtFromParts2 at the same time were allways correct no matter how often and how many concurrent consumers I used.","davsclaus:1684626899:2023-05-21T07:54:59.970+0000:1684626899:2023-05-21T07:54:59.970+0000:Yes you need to synchronize these, or initialize the simple in your processor, eg in doInit etc (extend ServiceSupport)
Mustermann:1693468528:2023-08-31T15:55:28.664+0000:1693547625:2023-09-01T13:53:45.186+0000:may be [CAMEL-19014|https://issues.apache.org/jira/projects/CAMEL/issues/CAMEL-19014] solves the issueÂ 
rhuanrocha:1693469570:2023-08-31T16:12:50.655+0000:1693469570:2023-08-31T16:12:50.655+0000:[~Mustermann], could you please test it with version 3.21? There's a chance that the issue you're experiencing has been resolved in CAMEL-19014.
Mustermann:1693547709:2023-09-01T13:55:09.161+0000:1693547709:2023-09-01T13:55:09.161+0000:yes, looks like it solved the issue.

my concurrency test which was failing with 3.20.5 passes with 3.21.0"
0,CAMEL-19345,Bug,Minor,4.0-M3,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Karen Lease,0,2,2023-05-12 21:35:03+00:00,2023-05-16 18:12:26+00:00,"This test binds a local RoutesBuilderLoaderSupport implementation to the kamelet.yaml extension as part of the test. This defines the routeTemplate.
The actual route is added directly to the context.
Due to the change in DefaultRoutesLoader.findRoutesBuilders() in commit https://github.com/apache/camel/commit/5d868bdfd37e585582e5d7e3ac809f970e1dae28 related to CAMEL-19309, the custom RoutesBuilderLoader isn't invoked because the resource ""classpath:/kamelets/mySetBody.kamelet.yaml"" is checked for existence before checking for a matching loader.
Therefore the template is not defined.","davsclaus:1684231533:2023-05-16T18:05:33.448+0000:1684231533:2023-05-16T18:05:33.448+0000:Thanks for reporting
davsclaus:1684231939:2023-05-16T18:12:19.073+0000:1684231939:2023-05-16T18:12:19.073+0000:okay the test was cheating a bit as the resource would say false to exists."
0,CAMEL-19344,New Feature,Major,None,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"3.20.5, 3.21.0, 4.0-RC1, 4.0.0",Claus Ibsen,Claus Ibsen,0,1,2023-05-12 18:13:11+00:00,2023-05-13 09:04:24+00:00,"Today you can copy files to the file system.
We should offer a basic HTTP endpoint where you can upload/delete files as well.",
0,CAMEL-19343,Bug,Minor,3.20.4,"4.0-RC2, 4.0.0","
None
",Resolved,Information Provided,"4.0-RC2, 4.0.0",Claus Ibsen,Bartosz Popiela,0,2,2023-05-12 13:54:40+00:00,2023-07-17 05:13:47+00:00,"Templated routes with the ""choice"" processor share the same Predicate (org.apache.camel.model.WhenDefinition#expression#predicate) and because it is initialized with template parameters of the first route created, it fails for the other routes. This is particularly visible when using Kamelets.


The proposed solution would be for org.apache.camel.model.WhenDefinition to accept Supplier<Predicate> (or similar) instead of the Predicate instance but that would require static factory methods in org.apache.camel.support.builder.PredicateBuilder to be refactored or a new class to be created.


This is a unit test. It fails for the second instance of the template.","davsclaus:1689479404:2023-07-16T11:50:04.514+0000:1689479404:2023-07-16T11:50:04.514+0000:This is because you use the fluent builder on simple. If you do this

                .when(simple(""'{{"" + CHOICE_PARAMETER + ""}}' == 'some'"") 

Then it works fine and this is also the way other DSLs and Kamelets are doing this.
bartoszpop:1689483084:2023-07-16T12:51:24.403+0000:1689483084:2023-07-16T12:51:24.403+0000:It seems to work. Thanks!
davsclaus:1689542020:2023-07-17T05:13:40.584+0000:1689542020:2023-07-17T05:13:40.584+0000:I added a section to the docs about this limitation with simple fluent builder style."
