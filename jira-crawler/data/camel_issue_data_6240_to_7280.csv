,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-14095,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-10-21 17:51:39+00:00,2019-10-21 18:40:44+00:00,"Lets use since instead of Available as of Camel version in all those docs.


Since Camel 2.17


Instead of


Available as of Camel version 2.17",
0,CAMEL-14094,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claudio Miranda,0,2,2019-10-21 15:33:48+00:00,2019-10-25 04:48:20+00:00,"Currently camel-Jira depends on jira-rest-java-client 5.1.0 but 5.1.6 is already available on Atlassian repo.


https://packages.atlassian.com/maven-external/com/atlassian/jira/jira-rest-java-client-api/5.1.6/","davsclaus:1571646482:2019-10-21T16:28:02.340+0000:1571646482:2019-10-21T16:28:02.340+0000:You are welcome to submit a PR
claudio4j:1571647146:2019-10-21T16:39:06.166+0000:1571647146:2019-10-21T16:39:06.166+0000:Does it need a backport to camel [camel-2.24.x|https://github.com/apache/camel/tree/camel-2.24.x] or [camel-2.x|https://github.com/apache/camel/tree/camel-2.x] branch ?
davsclaus:1571647792:2019-10-21T16:49:52.445+0000:1571647792:2019-10-21T16:49:52.445+0000:Yeah for camel-2.x branch if its applicable. 2.24.x is patch release and I dont think we should upgrade as its a bigger patch upgrade (0 to 6)."
0,CAMEL-14093,Sub-task,Minor,"3.0.0.RC2, 3.0.0.RC3",3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-10-21 10:10:22+00:00,2019-11-05 16:34:21+00:00,No Desc,
0,CAMEL-14092,Sub-task,Minor,"3.0.0.RC2, 3.0.0.RC3",3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-10-21 10:09:11+00:00,2019-10-31 18:18:59+00:00,No Desc,
0,CAMEL-14091,Sub-task,Minor,"3.0.0.RC2, 3.0.0.RC3",3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-10-21 10:08:06+00:00,2019-10-31 07:27:08+00:00,No Desc,
0,CAMEL-14090,Sub-task,Minor,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-10-21 10:06:54+00:00,2019-10-30 08:34:28+00:00,"Per title, we will break camel-debezium into several components",
0,CAMEL-14089,Improvement,Minor,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Luca Burgazzoli,0,1,2019-10-21 09:02:21+00:00,2021-02-24 08:53:08+00:00,"Camel main has two main options to auto-discover routes:



by scanning the class path
by scanning the registry



So it is possible that if a user adda a route to the registry programmatically, then the route is present twice and potentially leading to errors because it is also discovered from the classpath.


There are some workaround for that, like:



configure routes inclusion/exclusion patterns
disable auto discovery



But it would be nice if we can give to the use more control about the discovering process like to explicit mark routes from discovering with a dedicated annotation or reusing an existing one like @BindToRegistry.","lb:1614127988:2021-02-24T08:53:08.746+0000:1614127988:2021-02-24T08:53:08.746+0000:With the implementation of the generic route loader, include/exclude filter is more than enough"
0,CAMEL-14088,Bug,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Andrea Cosentino,Otavio Rodolfo Piske,0,1,2019-10-21 08:23:48+00:00,2019-11-21 19:53:17+00:00,All the links on the registry documentation page are broken:  https://camel.apache.org/manual/latest/registry.html,
0,CAMEL-14087,Bug,Major,3.0.0.RC3,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Omar Al-Safi,Claus Ibsen,0,1,2019-10-19 18:59:20+00:00,2019-10-20 06:41:35+00:00,When you run a mvn clean install then it regenerate the component roc with a new port number for the databaseServierId.,
0,CAMEL-14086,Bug,Major,"2.23.4, 2.24.2",,"
None
",Resolved,Not A Problem,None,Andrea Cosentino,Andrey Tyurin,0,2,2019-10-18 19:04:20+00:00,2019-10-18 19:54:46+00:00,"Looks like there is no support of Elastic rest client of 7.3.2 version.


There is no method setMaxRetryTimeoutMillis in new elastic client library, but it is called from camel-elastic-rest component:


Caused by: java.lang.NoSuchMethodError: org.elasticsearch.client.RestClientBuilder.setMaxRetryTimeoutMillis(I)Lorg/elasticsearch/client/RestClientBuilder;Caused by: java.lang.NoSuchMethodError: org.elasticsearch.client.RestClientBuilder.setMaxRetryTimeoutMillis(I)Lorg/elasticsearch/client/RestClientBuilder; at org.apache.camel.component.elasticsearch.ElasticsearchProducer.createClient(ElasticsearchProducer.java:274) ~[camel-elasticsearch-rest-2.24.2.jar!/:2.24.2] at org.apache.camel.component.elasticsearch.ElasticsearchProducer.startClient(ElasticsearchProducer.java:265) ~[camel-elasticsearch-rest-2.24.2.jar!/:2.24.2] at org.apache.camel.component.elasticsearch.ElasticsearchProducer.doStart(ElasticsearchProducer.java:256) ~[camel-elasticsearch-rest-2.24.2.jar!/:2.24.2] at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72) ~[camel-core-2.24.2.jar!/:2.24.2] at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.24.2.jar!/:2.24.2] at org.apache.camel.impl.DefaultCamelContext.deferStartService(DefaultCamelContext.java:1554) ~[camel-core-2.24.2.jar!/:2.24.2] at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1471) ~[camel-core-2.24.2.jar!/:2.24.2] at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1441) ~[camel-core-2.24.2.jar!/:2.24.2] at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:578) ~[camel-core-2.24.2.jar!/:2.24.2]","acosentino:1571399646:2019-10-18T19:54:06.507+0000:1571399646:2019-10-18T19:54:06.507+0000:The version used in 2.24.x is 6.5.1. if you need to use elastic search 7, you'll need to switch to camel 3"
0,CAMEL-14085,Improvement,Major,2.21.5,3.x,"
None
",Closed,Won't Fix,3.x,Unassigned,Robert Half,0,2,2019-10-18 15:57:27+00:00,2019-11-22 11:18:02+00:00,"We are using Camel Bindy to parse fixed length data.


I came across the issue, that it fails to read data containing characters like ß, which takes 2 bytes. The character set is properly set on the exchange to UTF-8, the record length is 1568 bytes, but since there are 2xß characters, it throws the error:


Size of the record: 1566 is not equal to the value provided in the model: 1568, StackTrace: java.lang.IllegalArgumentException: Size of the record: 1566 is not equal to the value provided in the model: 1568Size of the record: 1566 is not equal to the value provided in the model: 1568, StackTrace: java.lang.IllegalArgumentException: Size of the record: 1566 is not equal to the value provided in the model: 1568 at org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat.createModel(BindyFixedLengthDataFormat.java:295)


here:


BindyFixedLengthDataFormat#createModel




if ((myLine.length() < factory.recordLength()
 && !factory.isIgnoreMissingChars()) || (myLine.length() > factory.recordLength())) {
 throw new java.lang.IllegalArgumentException(""Size of the record: "" + myLine.length()
 + "" is not equal to the value provided in the model: "" + factory.recordLength());
}","davsclaus:1571456920:2019-10-19T11:48:40.990+0000:1571456920:2019-10-19T11:48:40.990+0000:Are you able to build an unit test or sample project with a reproducer?
antidote2:1571577801:2019-10-20T21:23:21.807+0000:1571577801:2019-10-20T21:23:21.807+0000:Here I created a reproducer test, which fails with the error below.

The problem with the fixed length records and variable encoding like UTF-8 is that the format as far as I'm concerned and which is the case for the format I'm processing, is based on records given in bytes - not characters. So if I know the first record is 10 bytes, I can only read it with bindy if every character takes 1 byte.

StacktraceStacktrace---------------------------------------------------------------------------------------------------------------------------------------java.lang.IllegalArgumentException: Size of the record: 9 is not equal to the value provided in the model: 10 at org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat.createModel(BindyFixedLengthDataFormat.java:295) at org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat.unmarshal(BindyFixedLengthDataFormat.java:242)2019-10-20T10:49:27.873 | -1 | main | INFO  |  ---  ---  ---  | com.mypackage.CamelBindyReproducerTest | - 
{code:java}
import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.dataformat.bindy.annotation.DataField;
import org.apache.camel.dataformat.bindy.annotation.FixedLengthRecord;
import org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat;
import org.apache.camel.spring.javaconfig.SingleRouteCamelConfiguration;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringRunner;
import org.apache.camel.test.spring.CamelTestContextBootstrapper;
import org.apache.camel.test.spring.MockEndpoints;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.BootstrapWith;
import org.springframework.test.context.ContextConfiguration;

import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertThat;

@RunWith(CamelSpringRunner.class)
@BootstrapWith(CamelTestContextBootstrapper.class)
@ContextConfiguration(
 classes = CamelBindyReproducerTest.TestConfig.class,
 loader = CamelSpringDelegatingTestContextLoader.class)
@MockEndpoints
@DirtiesContext(
 classMode = DirtiesContext.ClassMode.AFTER_CLASS)
public class CamelBindyReproducerTest {

 @Produce(uri = ""direct:in"")
 private ProducerTemplate producer;

 @EndpointInject(uri = ""mock:result"")
 private MockEndpoint result;

 @Test
 /*
 Let's assume we want to read the content of a 10 bytes record from an UTF-8 encoded file.
 test string takes 10 bytes with 9 characters (2 char = 3 bytes content + padding).
 I assume to be able to read 9 char string from this 10 bytes fixed length record with bindy.
 */
 public void reproduceBindyErrorTest() throws InterruptedException {
 String test = ""aß "";
 byte[] testAsBytes = test.getBytes(StandardCharsets.UTF_8);
 Assert.assertEquals(""aß takes 3 bytes, because ß takes 2"", 10, testAsBytes.length);
 result.expectedMessagesMatches(exchange -> ""aß"".equals(exchange.getIn().getBody(TestRecord.class).field1));
 producer.sendBody(test);
 result.assertIsSatisfied();
 }

 @Configuration
 static class TestConfig extends SingleRouteCamelConfiguration {

 @Override
 public RouteBuilder route() {
 return new RouteBuilder() {
 @Override
 public void configure() throws Exception {
 from(""direct:in"")
 .setHeader(Exchange.CHARSET_NAME, constant(StandardCharsets.UTF_8.name()))
 .unmarshal(new BindyFixedLengthDataFormat(TestRecord.class))
 .to(""mock:result"");
 }
 };
 }
 }

 @FixedLengthRecord(length = 10, paddingChar = ' ')
 public static class TestRecord {
 public TestRecord() {

 }
 public String getField1() {
 return field1;
 }

 public void setField1(String field1) {
 this.field1 = field1;
 }

 @DataField(pos = 1, length = 10)
 private String field1;
 }
}{code}
davsclaus:1571650823:2019-10-21T17:40:23.402+0000:1571650823:2019-10-21T17:40:23.402+0000:Can you maybe in your unit test add the uncode values for those german characthers. In Java you can use \u1234 where the uni-code number. And then you can run the test and see its still that german charachter. By doing \u1234 we can save this in A..Z in the source code. We do this for other encoding issue unit tests.
antidote2:1571726670:2019-10-22T14:44:30.851+0000:1571726670:2019-10-22T14:44:30.851+0000:Actually I saw in the debugger how it works. It reads the characters using a Scanner object.

below myLine is a String, so the length is in characters, but imho the recordLength I configure should be in bytes.  If some character takes more than a byte, we obviously will see the issue.
if ((myLine.length() < factory.recordLength()
 && !factory.isIgnoreMissingChars()) || (myLine.length() > factory.recordLength())) { throw new java.lang.IllegalArgumentException(""Size of the record: "" + myLine.length()
 + "" is not equal to the value provided in the model: "" + factory.recordLength());
}
davsclaus:1572303284:2019-10-29T06:54:44.063+0000:1572303284:2019-10-29T06:54:44.063+0000:Okay so bindy works with character lengths, and not bytes. 
What you are looking for is not supported, and would require to add an option to work with byte lengths


antidote2:1574392682:2019-11-22T11:18:02.206+0000:1574392682:2019-11-22T11:18:02.206+0000:Since it turned out, that my use case also does not require this feature, I'll close it"
0,CAMEL-14084,Sub-task,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Alex Dettinger,Alex Dettinger,0,1,2019-10-18 14:42:38+00:00,2019-11-21 19:53:16+00:00,No Desc,
0,CAMEL-14083,Improvement,Major,None,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-18 11:25:20+00:00,2019-10-18 15:01:36+00:00,"Related to CAMEL-14078


When using camel-jms you may have JMS messages that are doomed poison due they cannot be read succesfully, such as JMS payload fails to be read. In those use-cases then currently you have a harder time to make Camel error handler react on that. You can turn off mapJmsMessage and then work with the bare javax.jms.Message object. But out of the box it doesn't do that. So ideally we should add new options that deal with this, and allows you to handle this easily, such as route the message to a DLQ, or if you dont' then it will rollback anyway.","davsclaus:1571369175:2019-10-18T11:26:15.488+0000:1571369175:2019-10-18T11:26:15.488+0000:You can turn on eagerLoadOfProperties then Camel will now detect any early errors with the JMS message and set a message body with an exception message, which allows to route and handle the message using Camel error handlers. 
davsclaus:1571369637:2019-10-18T11:33:57.768+0000:1571369637:2019-10-18T11:33:57.768+0000:Also the option bridgeErrorHandler have no affect on camel-jms as it uses the endpoint message listener from spring which works differently. So lets remove this options from the docunentation
davsclaus:1571382096:2019-10-18T15:01:36.874+0000:1571382096:2019-10-18T15:01:36.874+0000:There is a new eagerPoisionBody option you can use to control the error message to set as message body as replacement for the poison message payload"
0,CAMEL-14082,Bug,Minor,None,None,"
None
",Resolved,Fixed,2.25.0,Zheng Feng,Zheng Feng,0,1,2019-10-18 03:51:27+00:00,2019-10-18 07:05:02+00:00,I think this might be a minor issue when backing port from the master branch.,
0,CAMEL-14081,Bug,Major,2.24.2,"3.0.0.RC3, 2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC3, 2.24.3, 3.0.0, 2.25.0",Zheng Feng,Zheng Feng,0,1,2019-10-18 03:34:40+00:00,2019-10-18 08:59:26+00:00,"I find this issue as my locale environment is zh_CN.UTF-8 and the javadoc generate the ""lang=zh"" html files. And this causes the following exception



java.lang.StringIndexOutOfBoundsException: String index out of range: -1
	at java.lang.String.substring(String.java:1927)
	at org.apache.camel.maven.JavadocParser.startTag(JavadocParser.java:115)
	at javax.swing.text.html.parser.Parser.parseTag(Parser.java:1956)
	at javax.swing.text.html.parser.Parser.parseContent(Parser.java:2097)
	at javax.swing.text.html.parser.Parser.parse(Parser.java:2271)
	at org.apache.camel.maven.JavadocApiMethodGeneratorMojo.getSignatureList(JavadocApiMethodGeneratorMojo.java:101)
	at org.apache.camel.maven.AbstractApiMethodGeneratorMojo.execute(AbstractApiMethodGeneratorMojo.java:70)
	at org.apache.camel.maven.ApiComponentGeneratorMojo.execute(ApiComponentGeneratorMojo.java:92)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:954)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:192)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)





I think it is related to JavaDocParser in the camel-api-component-maven-plugin 




if (title != null) {
    // append package name to type name text
    methodTextBuilder.append(title.substring(title.lastIndexOf(' '))).append('.');
}




This assumes that the java html doc is generated by English language. The workaround could be set ""LANG=en_US.UTF-8"" when running the maven build. In the other hand, I think it could add ""<locale>en</locale>"" in the javadoc  configuration as we have to depend on the html files. This would effect the camel-as2, camel-linkedin, camel-box, camel-fhir, camel-olingo2 and camel-olingo4.",zhfeng:1571347592:2019-10-18T05:26:32.183+0000:1571347592:2019-10-18T05:26:32.183+0000:I just send two PRs to fix in the master and camel-2.x branches.
0,CAMEL-14080,New Feature,Minor,3.0.0.RC2,,"
None
",Resolved,Won't Fix,None,Unassigned,Jonathan,0,1,2019-10-17 17:24:32+00:00,2022-09-02 11:37:54+00:00,"Currently to stub a component we need to do




camelContext.addComponent(""aws-s3"", camelContext.getComponent(""stub""));




The goal for this feature is to create the annotation @StubComponent at Class level :




@StubComponent(""aws-s3|http4"")",vilojona:1571304293:2019-10-17T17:24:53.807+0000:1571304293:2019-10-17T17:24:53.807+0000:Working on it.
0,CAMEL-14079,Task,Minor,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,3,2019-10-17 12:35:13+00:00,2022-05-18 13:32:11+00:00,No Desc,"davsclaus:1571356044:2019-10-18T07:47:24.245+0000:1571356044:2019-10-18T07:47:24.245+0000:There are a test failure in camel-cxf and camel-cometd and maybe others due to jetty upgrade. Yeah its almost every time jetty causes new pain and problems :(
davidkarlsen:1571357502:2019-10-18T08:11:42.375+0000:1571357502:2019-10-18T08:11:42.375+0000:https://github.com/eclipse/jetty.project/issues/4141 (don't be mislead by the heading).
acosentino:1571357716:2019-10-18T08:15:16.837+0000:1571357716:2019-10-18T08:15:16.837+0000:Reverted
davsclaus:1571650846:2019-10-21T17:40:46.355+0000:1571650846:2019-10-21T17:40:46.355+0000:Lets wait for 9.4.22 or newer which may fix this"
0,CAMEL-14078,Bug,Major,2.24.2,None,"
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-17 12:27:17+00:00,2019-10-18 15:00:14+00:00,"Reported on user forum
https://camel.465427.n5.nabble.com/BridgeErrorHandler-on-JMS-Endpoint-does-not-work-as-expected-tp5845420.html


And on SO
https://stackoverflow.com/questions/58407987/apache-camel-jms-component-bridgeerrorhandler-does-not-work-as-documented",
0,CAMEL-14077,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Thomas Diesler,Thomas Diesler,0,2,2019-10-17 10:13:46+00:00,2019-11-21 19:53:13+00:00,No Desc,"davsclaus:1571482842:2019-10-19T19:00:42.450+0000:1571482842:2019-10-19T19:00:42.450+0000:Is there any significant work on this, or is it just to update the version in the parent/pom ?
tdiesler:1571622062:2019-10-21T09:41:02.355+0000:1571622062:2019-10-21T09:41:02.355+0000:So far so good. The Camel tests pass and mine too.

Here is the PR: https://github.com/apache/camel/pull/3268

 "
0,CAMEL-14076,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Marius Cornescu,0,2,2019-10-17 07:13:50+00:00,2019-10-30 04:37:47+00:00,"Users should be able to consume files from hadoop, and publish them to other destinations like sftp/ftp/...


  The *RemoteFileComponent*s look to me like the golden standard, so it would be nice to be able to make this component compatible with them.


  Currently, we have to set the chunkSize to a large enough number, so that only one message is produced, or do some aggregation after the consumer.


 


  This work should lay the ground for adding a streamDownload parameter for the consumer.","marius_cornescu:1571267674:2019-10-17T07:14:34.213+0000:1571267674:2019-10-17T07:14:34.213+0000:will work on this.
davsclaus:1572381467:2019-10-30T04:37:47.093+0000:1572381467:2019-10-30T04:37:47.093+0000:Thanks for the work"
0,CAMEL-14075,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,3,2019-10-17 03:52:05+00:00,2019-10-28 12:28:20+00:00,"Spring Boot 2.2 has just been released
https://spring.io/blog/2019/10/16/spring-boot-2-2-0","acosentino:1571275083:2019-10-17T09:18:03.381+0000:1571275083:2019-10-17T09:18:03.381+0000:It doesn't seem to be completely straightforward there are multiple problems. All the spring boot itest are failing with

 
{code:java}
[INFO] --- maven-surefire-plugin:2.19:test (default-test) @ camel-itest-spring-boot ---[INFO] --- maven-surefire-plugin:2.19:test (default-test) @ camel-itest-spring-boot ---
------------------------------------------------------- T E S T S-------------------------------------------------------Running org.apache.camel.itest.springboot.CamelJacksonTestOct 17, 2019 11:15:07 AM org.apache.camel.itest.springboot.arquillian.container.ManagedSEDeployableContainer deployINFO: Deploying 82ec5efa-a6a1-43b6-a16b-f84f1d380504.jarOct 17, 2019 11:15:08 AM org.jboss.arquillian.container.se.server.Main mainINFO: JMXTestRunner initialized using [sun.misc.Launcher$AppClassLoader@764c12b6]11:15:09,180 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]11:15:09,181 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]11:15:09,181 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]11:15:09,185 |-INFO in ch.qos.logback.classic.BasicConfigurator@55adff32 - Setting up default configuration.11:15:09,223 |-INFO in ch.qos.logback.core.joran.spi.ConfigurationWatchList@65a05819 - URL [jar:file:/home/oscerd/workspace/apache-camel/camel/tests/camel-itest-spring-boot/target/test.jar!/BOOT-INF/classes!/spring-logback.xml] is not of type file11:15:09,255 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set11:15:09,255 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]11:15:09,259 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]11:15:09,284 |-WARN in ch.qos.logback.core.ConsoleAppender[STDOUT] - This appender no longer admits a layout as a sub-component, set an encoder instead.11:15:09,284 |-WARN in ch.qos.logback.core.ConsoleAppender[STDOUT] - To ensure compatibility, wrapping your layout in LayoutWrappingEncoder.11:15:09,284 |-WARN in ch.qos.logback.core.ConsoleAppender[STDOUT] - See also http://logback.qos.ch/codes.html#layoutInsteadOfEncoder for details11:15:09,284 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.apache.camel.component] to INFO11:15:09,284 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [org.apache.camel.component] to false11:15:09,284 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[org.apache.camel.component]11:15:09,284 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO11:15:09,284 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]11:15:09,284 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.11:15:09,284 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@1be6b185 - Registering current configuration as safe fallback point  .   ____          _            __ _ _ /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  '  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.2.0.RELEASE)2019-10-17 11:15:09.591  INFO 30971 --- [)-192.168.1.153] o.a.c.itest.springboot.ITestApplication  : Starting ITestApplication on ghost with PID 30971 (started by oscerd in /home/oscerd/workspace/apache-camel/camel/tests/camel-itest-spring-boot)2019-10-17 11:15:09.593  INFO 30971 --- [)-192.168.1.153] o.a.c.itest.springboot.ITestApplication  : No active profile set, falling back to default profiles: default2019-10-17 11:15:10.229  INFO 30971 --- [)-192.168.1.153] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.camel.spring.boot.CamelAutoConfiguration' of type [org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$94479a4f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2019-10-17 11:15:10.342  WARN 30971 --- [)-192.168.1.153] o.a.c.i.e.DefaultCamelBeanPostProcessor  : No CamelContext defined yet so cannot inject into bean: properties2019-10-17 11:15:10.547  WARN 30971 --- [)-192.168.1.153] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy2019-10-17 11:15:10.554  INFO 30971 --- [)-192.168.1.153] ConditionEvaluationReportLoggingListener : Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.2019-10-17 11:15:10.560 ERROR 30971 --- [)-192.168.1.153] o.s.boot.SpringApplication               : Application run failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.apache.camel.itest.springboot.ITestApplication.main(ITestApplication.java:47) [classes!/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.launch(ArquillianSyncBootJarLauncher.java:54) [test.jar:na] at org.springframework.boot.loader.Launcher.launch(Launcher.java:51) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.run(ArquillianSyncBootJarLauncher.java:44) [test.jar:na] at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.startSpringBoot(AbstractSpringBootTestSupport.java:44) [test.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [arquillian-junit.jar:na] at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [arquillian-junit.jar:na] at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [arquillian-junit.jar:na] at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$StatementLifecycleExecutor.invoke(Arquillian.java:378) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.before(EventTestRunnerAdaptor.java:115) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$4.evaluate(Arquillian.java:200) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$5.evaluate(Arquillian.java:215) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$7$1.invoke(Arquillian.java:279) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.fireCustomLifecycle(EventTestRunnerAdaptor.java:159) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$7.evaluate(Arquillian.java:273) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:166) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:177) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:115) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:115) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.container.JUnitTestRunner.execute(JUnitTestRunner.java:61) [arquillian-junit.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.doRunTestMethod(JMXTestRunner.java:153) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:137) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:119) [arquillian-container-se.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) [na:1.8.0_201] at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) [na:1.8.0_201] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_201] at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) [na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_201] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_201]Caused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:160) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1795) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] ... 161 common frames omittedCaused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) ~[na:1.8.0_201] at java.lang.Class.createAnnotationData(Class.java:3521) ~[na:1.8.0_201] at java.lang.Class.annotationData(Class.java:3510) ~[na:1.8.0_201] at java.lang.Class.getAnnotation(Class.java:3415) ~[na:1.8.0_201] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectNestedClasses$8(DefaultCamelBeanPostProcessor.java:293) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.util.ReflectionHelper.doWithClasses(ReflectionHelper.java:88) ~[camel-util-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectNestedClasses(DefaultCamelBeanPostProcessor.java:292) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:89) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] ... 164 common frames omitted2019-10-17 11:15:10.565 ERROR 30971 --- [)-192.168.1.153] o.a.c.itest.springboot.ITestApplication  : Error while executing testorg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.apache.camel.itest.springboot.ITestApplication.main(ITestApplication.java:47) ~[test.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.launch(ArquillianSyncBootJarLauncher.java:54) [test.jar:na] at org.springframework.boot.loader.Launcher.launch(Launcher.java:51) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.run(ArquillianSyncBootJarLauncher.java:44) [test.jar:na] at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.startSpringBoot(AbstractSpringBootTestSupport.java:44) [test.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [arquillian-junit.jar:na] at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [arquillian-junit.jar:na] at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [arquillian-junit.jar:na] at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$StatementLifecycleExecutor.invoke(Arquillian.java:378) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.before(EventTestRunnerAdaptor.java:115) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$4.evaluate(Arquillian.java:200) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$5.evaluate(Arquillian.java:215) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$7$1.invoke(Arquillian.java:279) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.fireCustomLifecycle(EventTestRunnerAdaptor.java:159) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$7.evaluate(Arquillian.java:273) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:166) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:177) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:115) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:115) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.container.JUnitTestRunner.execute(JUnitTestRunner.java:61) [arquillian-junit.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.doRunTestMethod(JMXTestRunner.java:153) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:137) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:119) [arquillian-container-se.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) [na:1.8.0_201] at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) [na:1.8.0_201] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_201] at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) [na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_201] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_201]Caused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:160) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1795) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] ... 161 common frames omittedCaused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) ~[na:1.8.0_201] at java.lang.Class.createAnnotationData(Class.java:3521) ~[na:1.8.0_201] at java.lang.Class.annotationData(Class.java:3510) ~[na:1.8.0_201] at java.lang.Class.getAnnotation(Class.java:3415) ~[na:1.8.0_201] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectNestedClasses$8(DefaultCamelBeanPostProcessor.java:293) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.util.ReflectionHelper.doWithClasses(ReflectionHelper.java:88) ~[camel-util-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectNestedClasses(DefaultCamelBeanPostProcessor.java:292) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:89) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] ... 164 common frames omittedOct 17, 2019 11:15:10 AM org.apache.camel.itest.springboot.arquillian.container.ManagedSEDeployableContainer undeployINFO: Undeploying 82ec5efa-a6a1-43b6-a16b-f84f1d380504.jarOct 17, 2019 11:15:12 AM org.apache.camel.itest.springboot.arquillian.container.ManagedSEDeployableContainer deployINFO: Deploying ba66d105-4a96-4650-ae1c-8c041fa58309.jarOct 17, 2019 11:15:13 AM org.jboss.arquillian.container.se.server.Main mainINFO: JMXTestRunner initialized using [sun.misc.Launcher$AppClassLoader@764c12b6]11:15:13,728 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]11:15:13,728 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]11:15:13,729 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]11:15:13,734 |-INFO in ch.qos.logback.classic.BasicConfigurator@55a7461d - Setting up default configuration.11:15:13,771 |-INFO in ch.qos.logback.core.joran.spi.ConfigurationWatchList@7cd0b43c - URL [jar:file:/home/oscerd/workspace/apache-camel/camel/tests/camel-itest-spring-boot/target/test.jar!/BOOT-INF/classes!/spring-logback.xml] is not of type file11:15:13,809 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - debug attribute not set11:15:13,809 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - About to instantiate appender of type [ch.qos.logback.core.ConsoleAppender]11:15:13,816 |-INFO in ch.qos.logback.core.joran.action.AppenderAction - Naming appender as [STDOUT]11:15:13,850 |-WARN in ch.qos.logback.core.ConsoleAppender[STDOUT] - This appender no longer admits a layout as a sub-component, set an encoder instead.11:15:13,850 |-WARN in ch.qos.logback.core.ConsoleAppender[STDOUT] - To ensure compatibility, wrapping your layout in LayoutWrappingEncoder.11:15:13,850 |-WARN in ch.qos.logback.core.ConsoleAppender[STDOUT] - See also http://logback.qos.ch/codes.html#layoutInsteadOfEncoder for details11:15:13,851 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting level of logger [org.apache.camel.component] to INFO11:15:13,851 |-INFO in ch.qos.logback.classic.joran.action.LoggerAction - Setting additivity of logger [org.apache.camel.component] to false11:15:13,851 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[org.apache.camel.component]11:15:13,851 |-INFO in ch.qos.logback.classic.joran.action.RootLoggerAction - Setting level of ROOT logger to INFO11:15:13,851 |-INFO in ch.qos.logback.core.joran.action.AppenderRefAction - Attaching appender named [STDOUT] to Logger[ROOT]11:15:13,851 |-INFO in ch.qos.logback.classic.joran.action.ConfigurationAction - End of configuration.11:15:13,851 |-INFO in ch.qos.logback.classic.joran.JoranConfigurator@aad81f8 - Registering current configuration as safe fallback point  .   ____          _            __ _ _ /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  '  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.2.0.RELEASE)2019-10-17 11:15:14.106  INFO 31014 --- [)-192.168.1.153] o.a.c.itest.springboot.ITestApplication  : Starting ITestApplication on ghost with PID 31014 (started by oscerd in /home/oscerd/workspace/apache-camel/camel/tests/camel-itest-spring-boot)2019-10-17 11:15:14.108  INFO 31014 --- [)-192.168.1.153] o.a.c.itest.springboot.ITestApplication  : No active profile set, falling back to default profiles: default2019-10-17 11:15:14.836  INFO 31014 --- [)-192.168.1.153] trationDelegate$BeanPostProcessorChecker : Bean 'org.apache.camel.spring.boot.CamelAutoConfiguration' of type [org.apache.camel.spring.boot.CamelAutoConfiguration$$EnhancerBySpringCGLIB$$672fff00] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)2019-10-17 11:15:14.952  WARN 31014 --- [)-192.168.1.153] o.a.c.i.e.DefaultCamelBeanPostProcessor  : No CamelContext defined yet so cannot inject into bean: properties2019-10-17 11:15:15.164  WARN 31014 --- [)-192.168.1.153] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy2019-10-17 11:15:15.172  INFO 31014 --- [)-192.168.1.153] ConditionEvaluationReportLoggingListener : Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.2019-10-17 11:15:15.180 ERROR 31014 --- [)-192.168.1.153] o.s.boot.SpringApplication               : Application run failedorg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.apache.camel.itest.springboot.ITestApplication.main(ITestApplication.java:47) [classes!/:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.launch(ArquillianSyncBootJarLauncher.java:54) [test.jar:na] at org.springframework.boot.loader.Launcher.launch(Launcher.java:51) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.run(ArquillianSyncBootJarLauncher.java:44) [test.jar:na] at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.startSpringBoot(AbstractSpringBootTestSupport.java:44) [test.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [arquillian-junit.jar:na] at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [arquillian-junit.jar:na] at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [arquillian-junit.jar:na] at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$StatementLifecycleExecutor.invoke(Arquillian.java:378) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.before(EventTestRunnerAdaptor.java:115) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$4.evaluate(Arquillian.java:200) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$5.evaluate(Arquillian.java:215) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$7$1.invoke(Arquillian.java:279) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.fireCustomLifecycle(EventTestRunnerAdaptor.java:159) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$7.evaluate(Arquillian.java:273) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:166) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:177) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:115) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:115) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.container.JUnitTestRunner.execute(JUnitTestRunner.java:61) [arquillian-junit.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.doRunTestMethod(JMXTestRunner.java:153) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:137) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:119) [arquillian-container-se.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) [na:1.8.0_201] at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) [na:1.8.0_201] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_201] at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) [na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_201] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_201]Caused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:160) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1795) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] ... 161 common frames omittedCaused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) ~[na:1.8.0_201] at java.lang.Class.createAnnotationData(Class.java:3521) ~[na:1.8.0_201] at java.lang.Class.annotationData(Class.java:3510) ~[na:1.8.0_201] at java.lang.Class.getAnnotation(Class.java:3415) ~[na:1.8.0_201] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectNestedClasses$8(DefaultCamelBeanPostProcessor.java:293) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.util.ReflectionHelper.doWithClasses(ReflectionHelper.java:88) ~[camel-util-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectNestedClasses(DefaultCamelBeanPostProcessor.java:292) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:89) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] ... 164 common frames omitted2019-10-17 11:15:15.184 ERROR 31014 --- [)-192.168.1.153] o.a.c.itest.springboot.ITestApplication  : Error while executing testorg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:603) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) ~[spring-boot-2.2.0.RELEASE.jar!/:2.2.0.RELEASE] at org.apache.camel.itest.springboot.ITestApplication.main(ITestApplication.java:47) ~[test.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.launch(ArquillianSyncBootJarLauncher.java:54) [test.jar:na] at org.springframework.boot.loader.Launcher.launch(Launcher.java:51) [test.jar:na] at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.run(ArquillianSyncBootJarLauncher.java:44) [test.jar:na] at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.startSpringBoot(AbstractSpringBootTestSupport.java:44) [test.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [arquillian-junit.jar:na] at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [arquillian-junit.jar:na] at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [arquillian-junit.jar:na] at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$StatementLifecycleExecutor.invoke(Arquillian.java:378) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.before(EventTestRunnerAdaptor.java:115) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$4.evaluate(Arquillian.java:200) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$5.evaluate(Arquillian.java:215) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$7$1.invoke(Arquillian.java:279) [arquillian-junit.jar:na] at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:34) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:90) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:116) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:83) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:69) [arquillian-core.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:86) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:95) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:133) [arquillian-core.jar:na] at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:105) [arquillian-core.jar:na] at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.fireCustomLifecycle(EventTestRunnerAdaptor.java:159) [arquillian-core.jar:na] at org.jboss.arquillian.junit.Arquillian$7.evaluate(Arquillian.java:273) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [arquillian-junit.jar:na] at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:166) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:350) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:177) [arquillian-junit.jar:na] at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:115) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [arquillian-junit.jar:na] at org.junit.runner.JUnitCore.run(JUnitCore.java:115) [arquillian-junit.jar:na] at org.jboss.arquillian.junit.container.JUnitTestRunner.execute(JUnitTestRunner.java:61) [arquillian-junit.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.doRunTestMethod(JMXTestRunner.java:153) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:137) [arquillian-container-se.jar:na] at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:119) [arquillian-container-se.jar:na] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) [na:1.8.0_201] at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) [na:1.8.0_201] at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) [na:1.8.0_201] at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) [na:1.8.0_201] at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_201] at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_201] at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201] at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201] at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201] at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201] at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_201] at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688) [na:1.8.0_201] at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_201] at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687) [na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_201] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_201] at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_201]Caused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:160) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:416) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1795) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:595) ~[spring-beans-5.2.0.RELEASE.jar!/:5.2.0.RELEASE] ... 161 common frames omittedCaused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy at sun.reflect.annotation.AnnotationParser.parseClassArray(AnnotationParser.java:724) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseArray(AnnotationParser.java:531) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseMemberValue(AnnotationParser.java:355) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotation2(AnnotationParser.java:286) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations2(AnnotationParser.java:120) ~[na:1.8.0_201] at sun.reflect.annotation.AnnotationParser.parseAnnotations(AnnotationParser.java:72) ~[na:1.8.0_201] at java.lang.Class.createAnnotationData(Class.java:3521) ~[na:1.8.0_201] at java.lang.Class.annotationData(Class.java:3510) ~[na:1.8.0_201] at java.lang.Class.getAnnotation(Class.java:3415) ~[na:1.8.0_201] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.lambda$injectNestedClasses$8(DefaultCamelBeanPostProcessor.java:293) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.util.ReflectionHelper.doWithClasses(ReflectionHelper.java:88) ~[camel-util-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.injectNestedClasses(DefaultCamelBeanPostProcessor.java:292) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.impl.engine.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:89) ~[camel-base-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154) ~[camel-spring-3.0.0-SNAPSHOT.jar!/:3.0.0-SNAPSHOT] ... 164 common frames omittedOct 17, 2019 11:15:15 AM org.apache.camel.itest.springboot.arquillian.container.ManagedSEDeployableContainer undeployINFO: Undeploying ba66d105-4a96-4650-ae1c-8c041fa58309.jarTests run: 2, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 10.849 sec <<< FAILURE! - in org.apache.camel.itest.springboot.CamelJacksonTestcomponentTests(org.apache.camel.itest.springboot.CamelJacksonTest)  Time elapsed: 1.748 sec  <<< ERROR!java.lang.reflect.InvocationTargetExceptionCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxyCaused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxyCaused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxy
componentTests(org.apache.camel.itest.springboot.CamelJacksonTest)  Time elapsed: 1.846 sec  <<< ERROR!java.lang.reflect.InvocationTargetExceptionCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration': Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxyCaused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration; nested exception is java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxyCaused by: java.lang.ArrayStoreException: sun.reflect.annotation.TypeNotPresentExceptionProxyResults :
Tests in error: org.apache.camel.itest.springboot.CamelJacksonTest.componentTests(org.apache.camel.itest.springboot.CamelJacksonTest)  Run 1: CamelJacksonTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget  Run 2: CamelJacksonTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
{code}
lb:1571298093:2019-10-17T15:41:33.136+0000:1571298093:2019-10-17T15:41:33.136+0000:The exception is about ""io.undertow.websockets.jsr.Bootstrap"" not being found on the class-path and the only reference I found in spring-boot is https://github.com/spring-projects/spring-boot/blob/master/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/servlet/WebSocketServletAutoConfiguration.java#L87
davsclaus:1571960284:2019-10-25T07:38:04.875+0000:1571960284:2019-10-25T07:38:04.875+0000:Lets create a branch with the work in progress migration.

Spring Boot team is willing to help
https://twitter.com/davsclaus/status/1187634170245332992

Also can we try just upgrading and run the spring boot examples. It may be mostly the integration tests itself and maybe less so about camel-spring-boot and all the starters.
davsclaus:1572158568:2019-10-27T14:42:48.312+0000:1572158568:2019-10-27T14:42:48.312+0000:There is a branch here with the work in progress
https://github.com/apache/camel/tree/springboot22
davsclaus:1572158615:2019-10-27T14:43:35.717+0000:1572158911:2019-10-27T14:48:31.813+0000:So it looks like we have difference with

Camel
Servlet API 3.1

Spring Boot 2.2
Serlet API 4.0

We are both using same Jetty 9.4.20 version
davsclaus:1572158966:2019-10-27T14:49:26.566+0000:1572158966:2019-10-27T14:49:26.566+0000:Upgrading spring integration to latest version also causes some unit test errors
davsclaus:1572159162:2019-10-27T14:52:42.568+0000:1572159162:2019-10-27T14:52:42.568+0000:When running the camel-spring-boot example with mvn spring-boot it fails with
https://gist.github.com/davsclaus/74369fd86ed3295976cbae906ec1cb40
davsclaus:1572159327:2019-10-27T14:55:27.049+0000:1572159327:2019-10-27T14:55:27.049+0000:Okay so looks like its some spring boot 2.2 annotation scanning magic that is failing when we ask if a class has a Camel annotation

            BindToRegistry ann = (BindToRegistry) clazz.getAnnotation(BindToRegistry.class);

davsclaus:1572222054:2019-10-28T08:20:54.363+0000:1572226973:2019-10-28T09:42:53.623+0000:To reproduce this

1
Checkout this branch
https://github.com/apache/camel/tree/springboot22
( commit 2994520c33dbe17094ec47d317898508be239f1d )
2
Run a clean build
mvn clean install -P fastinstall
(this may take 20 min on a fresh checkout)

3
Run the example
cd examples/camel-spring-boot
mvn spring-boot:run

There is also an unit test that fails if you run

mvn test


4
You can also test the camel-spring-boot module which also fails when you run
cd components/camel-spring-boot
mvn test




davsclaus:1572225919:2019-10-28T09:25:19.674+0000:1572225919:2019-10-28T09:25:19.674+0000:Okay found a workaround in camel bean post processor where we skip the new annotation @BindToRegistry for spring-boot which is causing this exception, which in fact is not an exception per see, but some mirrored classes from the JDK annotation parser.

The cloud tests in camel-spring-boot fails/hangs. But all the others work. And I got the itests fixed so they are testing too.
davsclaus:1572227117:2019-10-28T09:45:17.735+0000:1572227117:2019-10-28T09:45:17.735+0000:The only itests that fails is corda

Tests in error:
org.apache.camel.itest.springboot.CamelCordaTest.componentTests(org.apache.camel.itest.springboot.CamelCordaTest)
  Run 1: CamelCordaTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  Run 2: CamelCordaTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget

  CamelSolrTest.org.apache.camel.itest.springboot.CamelSolrTest » Runtime Could ...

Tests run: 255, Failures: 0, Errors: 2, Skipped: 2
davsclaus:1572227178:2019-10-28T09:46:18.244+0000:1572227178:2019-10-28T09:46:18.244+0000:New branch with fix of upgrading to spring boot 2.2
https://github.com/apache/camel/tree/springboot22-fix
davsclaus:1572231182:2019-10-28T10:53:02.396+0000:1572231182:2019-10-28T10:53:02.396+0000:Got the corda test fixed for spring boot itests so they all pass now
davsclaus:1572232327:2019-10-28T11:12:07.530+0000:1572232327:2019-10-28T11:12:07.530+0000:The cloud tests in camel-spring-boot works if you run them one by one from the editor
davsclaus:1572233438:2019-10-28T11:30:38.800+0000:1572233438:2019-10-28T11:30:38.800+0000:Wonder if we should try to upgrade Camel 2.25 to Spring Boot 2.2 also?
As it will be the last 2.x release
davsclaus:1572233860:2019-10-28T11:37:40.899+0000:1572236900:2019-10-28T12:28:20.577+0000:Upgraded with this commits
https://github.com/apache/camel/commit/2ba8bfa665ba63f7ad32f98eace45058ee990576
https://github.com/apache/camel/commit/feca251059401b47ebac438c8fad3421e7bff25b"
0,CAMEL-14074,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Omar Al-Safi,Djordje Bajic,0,2,2019-10-16 08:52:26+00:00,2020-02-05 17:37:38+00:00,"Hello!


It would be nice to have a feature to override any of restricted http headers. I noticed that it's not available to set custom ""Host"" header.","dbajic:1571187229:2019-10-16T08:53:49.347+0000:1571187229:2019-10-16T08:53:49.347+0000:This is open for discussion.

I would like to file a PR once we agree how this should work and should it be part of http/http4 component.
davsclaus:1571193979:2019-10-16T10:46:19.382+0000:1571193979:2019-10-16T10:46:19.382+0000:On top of my head, can't you plugin a custom header filter strategy?
dbajic:1571268223:2019-10-17T07:23:43.753+0000:1571268243:2019-10-17T07:24:03.659+0000:If i understood header filter strategy correctly it just makes you to choose what to send and what to drop from request. There is no option to override any of restricted headers values. From Java 12 we have an option to allow restricted headers to be changed using some property (I am speaking for Spring Boot), knowing that, shouldn't we support that as well? 
davsclaus:1571271827:2019-10-17T08:23:47.131+0000:1571271827:2019-10-17T08:23:47.131+0000:Okay sounds reasonable. So how would you think that the headers should be configured with the override values? Are you talking about some global option on the component level?

camel.component.http.restricted-headers[host]=MyCoolHost


dbajic:1571274916:2019-10-17T09:15:16.573+0000:1571274916:2019-10-17T09:15:16.573+0000:I am willing to investigate and to see what are possible solutions for overriding.
Correct, some global option on component level.

 
dbajic:1580895149:2020-02-05T17:32:29.649+0000:1580895149:2020-02-05T17:32:29.649+0000:[~davsclaus] - This option is merged into master but didn't make it into 3.1.0 because I created it in 2.x.x HTTP component which is deprecated. Is it okay to checkout the branch from 3.1.0 and implement this option in it so it can be used with Camel 3?
davsclaus:1580895458:2020-02-05T17:37:38.296+0000:1580895458:2020-02-05T17:37:38.296+0000:Yeah you are welcome to send a PR then we can take a look"
0,CAMEL-14073,Improvement,Major,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Unassigned,Marius Cornescu,0,2,2019-10-16 08:21:22+00:00,2019-10-17 03:34:59+00:00,"Evolution of the HA related classes.


+ skip unit tests if hadoop not installed on localhost (I think unit tests should be isolated of the environment. Ideally I'll be able to refactor the tests to validate the classes without needing a hadoop config on local host, and move those tests that need hadoop as integration).","marius_cornescu:1571185295:2019-10-16T08:21:35.164+0000:1571185295:2019-10-16T08:21:35.164+0000:will work on this
davsclaus:1571254499:2019-10-17T03:34:59.448+0000:1571254499:2019-10-17T03:34:59.448+0000:Thanks for the PR"
0,CAMEL-14072,Bug,Minor,"2.24.2, 3.0.0.RC2","3.0.0.RC3, 2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC3, 2.24.3, 3.0.0, 2.25.0",Stephan Siano,Stephan Siano,0,1,2019-10-16 06:07:24+00:00,2019-10-16 13:24:56+00:00,"If a FileInputStreamCache completely fills up the underlying fileystem (before the cache file is completely written) processing fails and the temporary file is not deleted afterwards.


The error as such is of course unavoidable but the temporary file should be deleted afterwards.


The reason for this issue is that trying to close the FileOutputStream will throw an IOException (no space left on device). As a consequence the coding that tries to delete the file is not called.",
0,CAMEL-14071,Bug,Major,3.0.0,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Jiri Ondrusek,Jiri Ondrusek,0,1,2019-10-15 12:36:02+00:00,2019-10-17 19:15:22+00:00,"Run integration tests (mvn clean test -pl :camel-as2 -Dtest=*IntegrationTest) and see errors:




ERROR] Tests run: 12, Failures: 0, Errors: 12, Skipped: 0, Time elapsed: 5.04 s <<< FAILURE! - in org.apache.camel.component.as2.AS2ServerManagerIntegrationTest
[ERROR] receivePlainEDIMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.186 s  <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route3: Route(route3)[From[as2://server/listen?requestUriPattern=/] ... because of Failed to resolve endpoint: as2://server/listen?requestUriPattern=%2F due to: Server HTTP connection failed
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: as2://server/listen?requestUriPattern=%2F due to: Server HTTP connection failed
Caused by: org.apache.camel.RuntimeCamelException: Server HTTP connection failed
Caused by: java.net.BindException: Address already in use (Bind failed)

[ERROR] receiveEnvelopedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.027 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(AS2ServerManagerIntegrationTest.java:272)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(AS2ServerManagerIntegrationTest.java:272)

[ERROR] sendEditMessageToFailingProcessorTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.047 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(AS2ServerManagerIntegrationTest.java:334)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(AS2ServerManagerIntegrationTest.java:334)

[ERROR] receiveMultipartSignedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.07 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(AS2ServerManagerIntegrationTest.java:204)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(AS2ServerManagerIntegrationTest.java:204)

[ERROR] receivePlainEDIMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.06 s  <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route5: Route(route5)[From[as2://server/listen?requestUriPattern=/] ... because of Failed to resolve endpoint: as2://server/listen?requestUriPattern=%2F due to: Server HTTP connection failed
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: as2://server/listen?requestUriPattern=%2F due to: Server HTTP connection failed
Caused by: org.apache.camel.RuntimeCamelException: Server HTTP connection failed
Caused by: java.net.BindException: Address already in use (Bind failed)

[ERROR] receiveEnvelopedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.01 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(AS2ServerManagerIntegrationTest.java:272)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(AS2ServerManagerIntegrationTest.java:272)

[ERROR] sendEditMessageToFailingProcessorTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.005 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(AS2ServerManagerIntegrationTest.java:334)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(AS2ServerManagerIntegrationTest.java:334)

[ERROR] receiveMultipartSignedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.053 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(AS2ServerManagerIntegrationTest.java:204)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(AS2ServerManagerIntegrationTest.java:204)

[ERROR] receivePlainEDIMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.06 s  <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route7: Route(route7)[From[as2://server/listen?requestUriPattern=/] ... because of Failed to resolve endpoint: as2://server/listen?requestUriPattern=%2F due to: Server HTTP connection failed
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: as2://server/listen?requestUriPattern=%2F due to: Server HTTP connection failed
Caused by: org.apache.camel.RuntimeCamelException: Server HTTP connection failed
Caused by: java.net.BindException: Address already in use (Bind failed)

[ERROR] receiveEnvelopedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.015 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(AS2ServerManagerIntegrationTest.java:272)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(AS2ServerManagerIntegrationTest.java:272)

[ERROR] sendEditMessageToFailingProcessorTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.004 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(AS2ServerManagerIntegrationTest.java:334)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(AS2ServerManagerIntegrationTest.java:334)

[ERROR] receiveMultipartSignedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)  Time elapsed: 0.058 s  <<< ERROR!
org.apache.http.HttpException: Failed to parse entity content
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(AS2ServerManagerIntegrationTest.java:204)
Caused by: java.lang.IllegalArgumentException: Content type may not be null
	at org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(AS2ServerManagerIntegrationTest.java:204)

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   AS2ClientManagerIntegrationTest.compressedMessageTest:472->Assert.assertNotNull:712->Assert.assertTrue:41->Assert.fail:88 send result
[ERROR]   AS2ClientManagerIntegrationTest.multipartSignedMessageTest:385->Assert.assertNotNull:712->Assert.assertTrue:41->Assert.fail:88 send result
[ERROR] Errors: 
[ERROR]   AS2ClientManagerIntegrationTest.envelopedMessageSendTest:305 ClassCast org.apa...
[ERROR]   AS2ClientManagerIntegrationTest.setupTest:578->receiveTestMessages:652 » Bind ...
[ERROR]   AS2ClientManagerIntegrationTest.plainMessageSendTest:233 ClassCast org.apache....
[ERROR] org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)
[ERROR]   Run 1: AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest:272 » Http Failed ...
[ERROR]   Run 2: AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest:272 » Http Failed ...
[ERROR]   Run 3: AS2ServerManagerIntegrationTest.receiveEnvelopedMessageTest:272 » Http Failed ...
[INFO] 
[ERROR] org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)
[ERROR]   Run 1: AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest:204 » Http F...
[ERROR]   Run 2: AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest:204 » Http F...
[ERROR]   Run 3: AS2ServerManagerIntegrationTest.receiveMultipartSignedMessageTest:204 » Http F...
[INFO] 
[ERROR] org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.receivePlainEDIMessageTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)
[ERROR]   Run 1: AS2ServerManagerIntegrationTest>CamelTestSupport.setUp:322->CamelTestSupport.doSetUp:459->CamelTestSupport.startCamelContext:819 » FailedToCreateRoute
[ERROR]   Run 2: AS2ServerManagerIntegrationTest>CamelTestSupport.setUp:322->CamelTestSupport.doSetUp:459->CamelTestSupport.startCamelContext:819 » FailedToCreateRoute
[ERROR]   Run 3: AS2ServerManagerIntegrationTest>CamelTestSupport.setUp:322->CamelTestSupport.doSetUp:459->CamelTestSupport.startCamelContext:819 » FailedToCreateRoute
[INFO] 
[ERROR] org.apache.camel.component.as2.AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest(org.apache.camel.component.as2.AS2ServerManagerIntegrationTest)
[ERROR]   Run 1: AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest:334 » Http
[ERROR]   Run 2: AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest:334 » Http
[ERROR]   Run 3: AS2ServerManagerIntegrationTest.sendEditMessageToFailingProcessorTest:334 » Http
[INFO] 
[INFO] 
[ERROR] Tests run: 10, Failures: 2, Errors: 7, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------",jondruse:1571283531:2019-10-17T11:38:51.054+0000:1571283531:2019-10-17T11:38:51.054+0000:PR: https://github.com/apache/camel/pull/3259
0,CAMEL-14070,Improvement,Major,None,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Zheng Feng,Göran Erkstam,0,3,2019-10-15 11:54:10+00:00,2019-10-30 04:30:07+00:00,"Implement Server Name Indication (SNI) support for the netty4-http client.


(Has been solved for HttpClient for many years https://issues.apache.org/jira/browse/HTTPCLIENT-1119)


This could be implemented in the HttpClientInitializerFactory.configureClientSSLOnDemand like this:




private SslHandler configureClientSSLOnDemand() throws Exception {
        if (!producer.getConfiguration().isSsl()) {
            return null;
        }        if (producer.getConfiguration().getSslHandler() != null) {
            return producer.getConfiguration().getSslHandler();
        } else if (sslContext != null) {
            URI uri = new URI(nettyProducer.getEndpoint().getEndpointUri());
            SSLEngine sllEngine = sslContext.createSSLEngine(uri.getHost(), uri.getPort());
            sllEngine.setUseClientMode(true);
            SSLParameters sslParameters = sllEngine.getSSLParameters();
            sslParameters.setServerNames(Arrays.asList(new SNIHostName(uri.getHost())));
            sllEngine.setSSLParameters(sslParameters);
            if (producer.getConfiguration().getSslContextParameters() == null) {
                // just set the enabledProtocols if the SslContextParameter doesn't set
                engine.setEnabledProtocols(producer.getConfiguration().getEnabledProtocols().split("",""));
            }
            return new SslHandler(engine);
        }        return null;
    }","davsclaus:1571171021:2019-10-16T04:23:41.792+0000:1571171021:2019-10-16T04:23:41.792+0000:Are you able to submit your idea as a github PR ?
zhfeng:1571183022:2019-10-16T07:43:42.249+0000:1571183022:2019-10-16T07:43:42.249+0000:The changes look good to me and welcome the contribution !"
0,CAMEL-14069,Improvement,Major,2.24.0,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Zheng Feng,Göran Erkstam,0,3,2019-10-15 11:17:40+00:00,2019-10-25 04:14:00+00:00,"When using netty4-http as a client we have a problem when the server side answers with a http 100-Continue. We expected the client to handle that internally and continue the call but it's actually returning http 100.


This is handled by Nettys own channel handlers but since the Camel HttpClientChannelHandler/ClientChannelHandler stop waiting when a http 100-Continue arrives it doesn't help.


In the project I'm working with we made a custom ClientInitilizer and made some small changes in the HttpClientChannelHandler and ClientChannelHandler that just ""ignores"" the http 100-Continue when it arrives to solve this issue.


See the attached files to see our solution","davsclaus:1571170932:2019-10-16T04:22:12.681+0000:1571170932:2019-10-16T04:22:12.681+0000:Are you able to work on these patches as github PRs?
zhfeng:1571182135:2019-10-16T07:28:55.903+0000:1571182135:2019-10-16T07:28:55.903+0000:I just take a look at the HttpClientChannelHandler.java and it could be better to check the status with

{code:java}
if (response.status().equals(HttpResponseStatus.CONTINUE)) {
   ...
}
{code}

Also from the HTTP RFC defined ""Continue - 100""

{panel:title=100 Continue}
The HTTP 100 Continue informational status response code indicates that everything so far is OK and that the client should continue with the request or ignore it if it is already finished.

To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request and receive a 100 Continue status code in response before sending the body.
{panel}

I think it also needs to check the http request header ""Expect"" ?


davsclaus:1571271998:2019-10-17T08:26:38.614+0000:1571271998:2019-10-17T08:26:38.614+0000:Yeah [~zhfeng] if we can just add it there, so its processed? You are welcome to provide a PR. Also if we can add an unit test then that would be great
zhfeng:1571272575:2019-10-17T08:36:15.171+0000:1571272575:2019-10-17T08:36:15.171+0000:Sure and I will assign this issue to me. The unit test should be provided to verify this logic.
zhfeng:1571791724:2019-10-23T08:48:44.279+0000:1571791724:2019-10-23T08:48:44.279+0000:I came across the CAMEL-7462 and it seems this similar issue had been fixed in the camel-netty-http. I just kept investigating and the [NettyHttpClientExpectContinueTest|https://github.com/apache/camel/blob/camel-2.x/components/camel-netty4-http/src/test/java/org/apache/camel/component/netty4/http/NettyHttpClientExpectContinueTest.java#L25] is just ignored and marked with ""TODO Fix"". So I assume this could be a bug rather than an improvement.
zhfeng:1571855593:2019-10-24T02:33:13.499+0000:1571855593:2019-10-24T02:33:13.499+0000:[~urken] I doubt that the camel-netty4-http producer could support the expect 100-continue which is sending the request with the header ""EXPECT: 100-continue"" and waiting for the response ""HTTP/1.1 100 Continue"" and then sending the body. Now the client only sends the request with the body at once even if we set the EXPECT header.

By the way, I raise the PR to ignore the ""100 Continue"" response in the client handlers based on your fix."
0,CAMEL-14068,Improvement,Minor,2.23.4,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Andrea Cosentino,Tom Wetjens,0,3,2019-10-15 07:30:28+00:00,2019-10-16 13:25:29+00:00,"Currently we are using the Salesforce component version 2.23.4.


Every 3 hours the component needs to resubscribe due to expiring token (expected behavior). Sometimes however it fails on:


 




org.apache.camel.component.salesforce.api.SalesforceException: Error subscribing to /event/CustomerLegalEntity__e: 403:denied_by_security_policy:subscribe_deniedorg.apache.camel.component.salesforce.api.SalesforceException: Error subscribing to /event/CustomerLegalEntity__e: 403:denied_by_security_policy:subscribe_denied at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$7.onMessage(SubscriptionHelper.java:406)



 


It turns out (not in the logging) that the server returns additional information:


 




{ext={sfdc={failureReason=503::Server is too busy. Please try your request again later.}}, ...}



 


As described in the Salesforce documentation here: https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/streaming_handling_errors.htm


the 503 Server too busy is a documented error that should/can be retried.


It would greatly add to the resilience of our system if the Salesforce component would automatically retry a subscribe if failed due to a temporary error. The same backoff mechanism as for the reconnect could apply.


 


Currently our workaround is to detect a 403 (more information is not available, like the failureReason) and restart the whole Camel subsystem.","davsclaus:1571096220:2019-10-15T07:37:00.427+0000:1571096220:2019-10-15T07:37:00.427+0000:Can you check the other JIRAs I think there may be another related to this.
tomwetjens:1571096982:2019-10-15T07:49:42.208+0000:1571096982:2019-10-15T07:49:42.208+0000:[~davsclaus] It looks really similar to https://issues.apache.org/jira/browse/CAMEL-12871, but I don't know for sure. In that case it is ""403 Unknown client"". We are experiencing a ""403 denied_by_security_policy"". Could be that this fixes both issues.

https://issues.apache.org/jira/browse/CAMEL-13577 seems a different issue.
tomwetjens:1571097026:2019-10-15T07:50:26.327+0000:1571097026:2019-10-15T07:50:26.327+0000:Pull request: [https://github.com/apache/camel/pull/3247]
davsclaus:1571203529:2019-10-16T13:25:29.544+0000:1571203529:2019-10-16T13:25:29.544+0000:I think it would be good to get this to 2.x branch so it can be in 2.25 release."
0,CAMEL-14067,Improvement,Major,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Marius Cornescu,0,2,2019-10-15 07:15:59+00:00,2019-10-15 08:52:24+00:00,"The HighAvailability configuration can be used regardless of authentication model.
Split the HA configuration from the kerberos authentication model.","marius_cornescu:1571095001:2019-10-15T07:16:41.877+0000:1571095001:2019-10-15T07:16:41.877+0000:I'll work on it.
davsclaus:1571100744:2019-10-15T08:52:24.097+0000:1571100744:2019-10-15T08:52:24.097+0000:Thanks for the PR"
0,CAMEL-14066,Improvement,Major,None,3.0.0.RC3,"
None
",Resolved,Fixed,3.0.0.RC3,Guillaume Nodet,Guillaume Nodet,0,1,2019-10-15 06:39:18+00:00,2019-10-15 07:42:44+00:00,"In order to better separate all xml loading / parsing from the runtime, and in preparation of CAMEL-14053, it would be interesting to remove the two methods that accept an input stream and use JAXB underneath to load routes / rests definitions.


From a user point-of-view, the work around is quite simple and it's just a matter of calling


 


RoutesDefinition routes = ModelHelper.loadRoutesDefinition(context, inputStream);
context.getExtension(Model.class).addRoutesDefinitions(routes.getRoutes());",
0,CAMEL-14065,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,1,3,2019-10-14 19:17:58+00:00,2019-10-22 10:34:37+00:00,"There is a new website which has the component list and documentation


See talk on @dev
https://camel.465427.n5.nabble.com/Camel-component-list-on-github-tp5845265.html","njiang:1571675245:2019-10-22T00:27:25.476+0000:1571675245:2019-10-22T00:27:25.476+0000:It might be better if we keep a readme file with the link of the website for the users who gets used to look up component information from the github.
davsclaus:1571683899:2019-10-22T02:51:39.737+0000:1571683899:2019-10-22T02:51:39.737+0000:There are already links from the readme in the root folder
davsclaus:1571696424:2019-10-22T06:20:24.603+0000:1571696424:2019-10-22T06:20:24.603+0000:I added those links to the components/readme file so as you say they is a working link and they can see where to go now
https://github.com/apache/camel/blob/master/components/readme.adoc
njiang:1571711677:2019-10-22T10:34:37.493+0000:1571711677:2019-10-22T10:34:37.493+0000:[~davsclaus] Thx, it helps me a lot :)"
0,CAMEL-14064,Bug,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,2,2019-10-14 10:40:39+00:00,2019-10-14 11:23:40+00:00,"The website build fails with broken links in the component nav.adoc.




11:47:43  $ antora --generator @antora/xref-validator site.yml
11:48:30  Unresolved xrefs (grouped by origin):
11:48:30  
11:48:30  repo: https://github.com/apache/camel.git | branch: master | component: components | version: latest
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: constant-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: exchangeProperty-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: file-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: header-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: ref-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: simple-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: tokenize-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: xtokenize-language.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: microprofile-health.adoc
11:48:30    path: docs/components/modules/ROOT/nav.adoc | xref: reactor.adoc




Same can be seen if the xref verifier is run on the doc module via ./mvnw -f docs verify","davsclaus:1571021354:2019-10-14T10:49:14.359+0000:1571021354:2019-10-14T10:49:14.359+0000:Okay those are missing docs, the last 2 has been corrected. But the general docs was in camel-core and with this splitup there is a little issue in that tool. Let me try to get them working, eg you can also see the WARN if you build catalog-camel+catalog
davsclaus:1571022220:2019-10-14T11:03:40.014+0000:1571022220:2019-10-14T11:03:40.014+0000:Is index.adoc generated?
davsclaus:1571023302:2019-10-14T11:21:42.941+0000:1571023302:2019-10-14T11:21:42.941+0000:okay should be fixed now
zregvart:1571023420:2019-10-14T11:23:40.215+0000:1571023420:2019-10-14T11:23:40.215+0000:bq. Is index.adoc generated?

From what I remember only nav.adoc files are generated, I think the generated files have [a header|https://github.com/apache/camel/blob/master/docs/generated.txt]."
0,CAMEL-14063,Improvement,Major,2.24.2,,"
None
",Resolved,Abandoned,None,Unassigned,David,0,1,2019-10-14 08:59:08+00:00,2022-09-02 11:37:36+00:00,"Problem:
Each remote command (polling, camel-ssh) creates a log entry (Login/Logout on the remote managed device) polluting the log and creating a load on managed devices.


Reason:
In camel version 2.24.2 the ssh components uses a static method which connects and disconnects with each request/command => No persistent connection possible


Request:
Leave the default behavior as is. Add a new option ""persistent"" to the component which will persist the connection but will create and drop the ssh command channel with each command only. Only recreate the connection if host/login or password changes. Pass back an exception if a connection is lost to let the route handle that case.",
0,CAMEL-14062,Improvement,Minor,3.0.0.RC2,3.x,"
None
",Resolved,Abandoned,3.x,Unassigned,Omar Al-Safi,0,2,2019-10-13 17:29:02+00:00,2021-12-02 11:33:19+00:00,"Similar to CAMEL-14009, it will be ideal to have a maven plugin that generates camel configurations from Kafka ConfigDef in order to avoid manual work to port these configurations back to Camel","davsclaus:1620263295:2021-05-06T09:08:15.971+0000:1620263295:2021-05-06T09:08:15.971+0000:Is this done?
omarsmak:1620263599:2021-05-06T09:13:19.044+0000:1620263640:2021-05-06T09:14:00.494+0000:Nope, I am still thinking of better way to handle multiple maven plugins that serve the same purpose and instead have only one plugin that serves Kafka-ish bases configs components (Vertx Kafka, Kafka and Debezium) that should reside in camel toolings. Therefore, I will do my best to work on this in next 3.11"
0,CAMEL-14061,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claus Ibsen,0,2,2019-10-13 12:14:54+00:00,2019-10-30 11:17:24+00:00,"Today we link to github contributing file, if you click contributing in the community menu from the website
https://github.com/apache/camel/blob/master/CONTRIBUTING.md


We should add our own page so its a html page on the website. Maybe its a new page here and then some other bits to make it use this
https://github.com/apache/camel-website/tree/master/content/community",zregvart:1571022058:2019-10-14T11:00:58.833+0000:1571022058:2019-10-14T11:00:58.833+0000:We have the CONTRIBUTING.md translated to ASCIIDOC in the [user manual|https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/pages/contributing.adoc] published at https://camel.apache.org/manual/latest/contributing.html we could point to that instead of GitHub or we could use the Markdown version and publish it via Hugo (and link to that).
0,CAMEL-14060,Improvement,Major,None,"3.0.0.RC3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0, 2.25.0",Claus Ibsen,Claus Ibsen,0,2,2019-10-11 19:33:43+00:00,2019-12-27 15:41:56+00:00,restlet are in their own maven repo and not on maven central. And their last stable release is from 2017,"davsclaus:1570793983:2019-10-11T19:39:43.989+0000:1570793983:2019-10-11T19:39:43.989+0000:We should consider removing it from Camel 3.0 so we dont carry it forward. Its deprecated on 2.x now.
davsclaus:1571203971:2019-10-16T13:32:51.945+0000:1571203971:2019-10-16T13:32:51.945+0000:Deprecated on 2.x, going to remove it from master
jlouvel:1577432516:2019-12-27T15:41:56.559+0000:1577432516:2019-12-27T15:41:56.559+0000:Hi [~davsclaus] The last stable version (2.4.0) was actually released in September 2018 but due to Talend's acquisition, it took us time to update the website. It is now available at [https://restlet.talend.com/|https://restlet.talend.com/documentation/2.4/changelog]

We have released 2.4.2 a few weeks ago and are actively working on a version 2.5.0 upgrading the major dependencies. Regarding the usage of central Maven repository, this is something we are considering for a 3.0 version (see prototype here: [https://github.com/restlet/restlet-framework]).

I hope you'll be open to reconsidering this decision."
0,CAMEL-14059,Bug,Minor,3.0.0.RC2,,"
None
",Resolved,Won't Fix,None,Unassigned,Omid Dehghan,0,2,2019-10-11 15:21:52+00:00,2019-10-16 14:23:07+00:00,"I tried to send an array of cookies at once to the browser, but I'm getting this error: 


 java.io.IOException: Empty cookie name detected. Please check your cookies


 


But the same code without any changes works just fine with ""jetty"", ""undertow"",""servlet"" ... 


 


Parth of the code that I used for sending multiple cookies:


public Order getOrder(@Headers Map headers, @ExchangeProperties Map properties,Exchange exchange){


List<String> cookieList = new ArrayList<>();
 cookieList.add(""Key7001=Value7001;Path=/;HttpOnly=true;session-token=test;Expires=Thu, 06-Jan-2022 00:00:00 GMT;"");
 cookieList.add(""Key7002=Value7002;Path=/;HttpOnly=true;session-token=test;Expires=Thu, 06-Jan-2022 00:00:00 GMT;"");


// Sets the two cookies on the browser


headers.put(""Set-Cookie"",cookieList); /// this will return an error saying java.io.IOException: Empty cookie name detected. Please check your cookies


//Set with one cookie on the browser works just fine


 //headers.put(""Set-Cookie"",""Key6001=Value6001;Path=/;HttpOnly=true;session-token=test;Expires=Thu, 06-Jan-2022 00:00:00 GMT;"");


 


I uploaded the full code in github: https://github.com/odehghan/camelrestlet",davsclaus:1570794018:2019-10-11T19:40:18.669+0000:1570794018:2019-10-11T19:40:18.669+0000:camel-restlet is deprecated I suggest to switch to some other component
0,CAMEL-14058,Bug,Trivial,2.24.2,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Stephan Siano,Stephan Siano,0,1,2019-10-11 12:23:56+00:00,2019-10-11 12:54:59+00:00,"In some cases there is no inMessage in the cxf exchange in case of an error. If HTTP session handling is enabled (cookies), this will result in a NullPointerException.


The fix for this is rather trivial; a null check has to be done before accessing the inMessage.


This usually happens for one-way messages where HTTP session handling does not make much sense (because without a response there are no cookies), but nevertheless there should be no NullPointerException",
0,CAMEL-14057,Improvement,Minor,"3.0.0.RC3, 3.0.0","3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",James Netherton,James Netherton,0,1,2019-10-11 12:22:05+00:00,2019-10-11 12:29:30+00:00,"Minor issue noticed when experimenting with Camel Quarkus:


https://github.com/apache/camel-quarkus/issues/247",
0,CAMEL-14056,Improvement,Major,None,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-10-11 07:29:35+00:00,2019-10-14 11:21:27+00:00,"We should update the component reference page
https://camel.apache.org/components/latest/


That currently just lists the component names without much details.


We should use the same generation as we do for github, which we ported to camel-quarkus that does this now. We can do similar for Camel too","davsclaus:1570750234:2019-10-11T07:30:34.406+0000:1570750234:2019-10-11T07:30:34.406+0000:https://github.com/apache/camel-quarkus/blob/master/tooling/maven/package-maven-plugin/src/main/java/org/apache/camel/quarkus/maven/UpdateDocExtensionsListMojo.java#L192
zregvart:1571020889:2019-10-14T10:41:29.473+0000:1571020889:2019-10-14T10:41:29.473+0000:I think this work broke the website build reported in CAMEL-14064
davsclaus:1571022568:2019-10-14T11:09:28.291+0000:1571022568:2019-10-14T11:09:28.291+0000:Okay only xtokenize-language is missing
davsclaus:1571023287:2019-10-14T11:21:27.124+0000:1571023287:2019-10-14T11:21:27.124+0000:okay should be fixed now"
0,CAMEL-14055,Improvement,Minor,None,3.0.0.RC3,"
None
",Resolved,Fixed,3.0.0.RC3,Unassigned,Adam Campbell,0,1,2019-10-10 19:52:10+00:00,2019-10-11 03:22:56+00:00,"There is currently no check for whether SslHandler implements ChannelHandlerFactory to add support for reusing custom SslHandler.


Ideally, there would be a check similar to the encoders and decoders


https://github.com/apache/camel/blob/release/3.0.0-RC2/components/camel-netty-http/src/main/java/org/apache/camel/component/netty/http/HttpServerInitializerFactory.java#L89",adamcampbell:1570709866:2019-10-10T20:17:46.761+0000:1570709866:2019-10-10T20:17:46.761+0000:Pull request submitted: [https://github.com/apache/camel/pull/3243]
0,CAMEL-14054,Bug,Major,3.0.0.RC2,3.0.0.RC3,"
None
",Resolved,Fixed,3.0.0.RC3,Luca Burgazzoli,Luca Burgazzoli,0,1,2019-10-10 16:04:14+00:00,2019-10-11 03:21:07+00:00,"If a property is defined like:


    camel.component.twitter-timeline.consumer-key = env:TWITTER_COMNSUMER_KEY


then the property will be set on the target object as it is without resolving placeholders.",
0,CAMEL-14053,New Feature,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Unassigned,Luca Burgazzoli,0,1,2019-10-10 12:57:02+00:00,2021-02-24 08:51:11+00:00,"Both camel-quarkus and camel-k have now a concept of routes loader which allow to customize how and if routes are loaded in the case of camel-quarkus or to provide support for routes written in additional languages in the case of camel-k.


It would be nice to introduce an official SPI in camel and leverage as example in camel-main, so one could write something like:




Main main = new Main()
main.addRoutes(
    ""classpath:my.company.MyRouteImpl.class"",
    ""file:/etc/camel/integration.js"",
     ...
);

main.run()




And loading of the routes is the delegated to a loader discovered by camel using the SPI mechanic.
We could also provide some helpers similar to what we have as today to load XML routes like:




Routes.load(context, ""file:/etc/camel/integration.js"");",
0,CAMEL-14052,Improvement,Major,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-10 11:18:31+00:00,2019-10-11 09:44:14+00:00,"When using spring boot then the connectorOptions is null, so when you do


camel.component.paho.brokerUrl=tcp://localhost:61617
camel.component.paho.connectOptions.userName=admin
camel.component.paho.connectOptions.password=admin123.


It will fail","davsclaus:1570678647:2019-10-10T11:37:27.937+0000:1570678660:2019-10-10T11:37:40.010+0000:As workaround you can do
{code}
    @Bean
    public MqttConnectOptions myMqttConnectOptions(@Value(""myUsername"") String user, @Value(""myPassword"") String pw) {
        MqttConnectOptions mq = new MqttConnectOptions();
        mq.setUserName(user);
        mq.setPassword(pw.toCharArray());
        return mq;
    }
{code}

in the spring boot application class etc and in application.properties you can have the configuration

camel.component.paho.connect-options=#myMqttConnectOptions
myUsername=myuser
myPassword=mysecret

davsclaus:1570758254:2019-10-11T09:44:14.125+0000:1570758254:2019-10-11T09:44:14.125+0000:camel-paho make it possible to configure all its options via compoent options that also works for Spring Boot"
0,CAMEL-14051,Improvement,Major,None,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-10 11:06:18+00:00,2019-10-14 09:48:49+00:00,"The receiveBufferSize was intended for consumer only when it was added, but the ftp client uses it also for producer. 


And therefore we can use the existing bufferSize from file endpoint (ftp extend file) and then deprecate receiveBufferSize. Mind that this buffer size is larger (128kb) but that is the size the file component uses too.",
0,CAMEL-14050,Improvement,Major,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-10 06:42:42+00:00,2019-10-18 07:31:47+00:00,"On spring boot we have some options to filter routes and set the location of xml routes/rests: https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/CamelConfigurationProperties.java#L50-L98


And also it has automatic route builder detection from registry. We should add that. Then we can move this logic to came-main in general and let camel-spring-boot use that, which then also makes it available for camel-quarkus and others.",
0,CAMEL-14049,Improvement,Major,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-10 05:25:34+00:00,2019-10-11 07:20:01+00:00,"It skip having netty in the uri so it is just tcp|udp:host etc for historical reasons, but Camel components should include its scheme in endpoint uri, like all the other component does",
0,CAMEL-14048,Improvement,Major,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-10-10 05:01:08+00:00,2019-10-11 07:20:06+00:00,"If using concurrency then producer template / producer cache may concurrently acquire a producer from same endpoint, and while it may be starting up the pool should wait for it to be ready before handing it out.","davsclaus:1570655220:2019-10-10T05:07:00.469+0000:1570655220:2019-10-10T05:07:00.469+0000:This will also fix a netty concurrent test that revealed this issue

[INFO] Running org.apache.camel.component.netty.NettyConcurrentTest
[ERROR] Tests run: 5, Failures: 0, Errors: 3, Skipped: 1, Time elapsed: 362.532 s <<< FAILURE! - in org.apache.camel.component.netty.NettyConcurrentTest
[ERROR] testSmallConcurrentProducers(org.apache.camel.component.netty.NettyConcurrentTest)  Time elapsed: 121.203 s  <<< ERROR!
java.util.concurrent.ExecutionException: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-asf948-gq1-ygridcore-net-1570637164003-0-3]
	at org.apache.camel.component.netty.NettyConcurrentTest.doSendMessages(NettyConcurrentTest.java:83)
	at org.apache.camel.component.netty.NettyConcurrentTest.testSmallConcurrentProducers(NettyConcurrentTest.java:46)
Caused by: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-asf948-gq1-ygridcore-net-1570637164003-0-3]
Caused by: java.lang.NullPointerException

[ERROR] testSmallConcurrentProducers(org.apache.camel.component.netty.NettyConcurrentTest)  Time elapsed: 120.132 s  <<< ERROR!
java.util.concurrent.ExecutionException: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-asf948-gq1-ygridcore-net-1570637164003-2-4]
	at org.apache.camel.component.netty.NettyConcurrentTest.doSendMessages(NettyConcurrentTest.java:83)
	at org.apache.camel.component.netty.NettyConcurrentTest.testSmallConcurrentProducers(NettyConcurrentTest.java:46)
Caused by: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-asf948-gq1-ygridcore-net-1570637164003-2-4]
Caused by: java.lang.NullPointerException

[ERROR] testSmallConcurrentProducers(org.apache.camel.component.netty.NettyConcurrentTest)  Time elapsed: 120.114 s  <<< ERROR!
java.util.concurrent.ExecutionException: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-asf948-gq1-ygridcore-net-1570637164003-3-2]
	at org.apache.camel.component.netty.NettyConcurrentTest.doSendMessages(NettyConcurrentTest.java:83)
	at org.apache.camel.component.netty.NettyConcurrentTest.testSmallConcurrentProducers(NettyConcurrentTest.java:46)
Caused by: org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-asf948-gq1-ygridcore-net-1570637164003-3-2]
Caused by: java.lang.NullPointerException"
0,CAMEL-14047,Improvement,Major,"2.24.2, 3.0.0.RC2","3.0.0.RC3, 3.0.0, 2.25.0","

pull-request-available

",Resolved,Fixed,"3.0.0.RC3, 3.0.0, 2.25.0",Claus Ibsen,William Thompson,0,1,2019-10-09 20:37:54+00:00,2019-10-11 11:25:05+00:00,"Current default producerName value causes a null producerName to be impossible when configuring from URI. This causes the code regarding a null producerName in the PulsarProducer to be impossible to hit from a URI. This forces anyone wanting to start 2 producers on the same topic in Camel to generate unique IDs and append them to each producerName value.


The fix proposed is defaulting producerName to null and, instead of generating a producerName on a null within Camel, to use Pulsar ProducerBuilder's automatic generation of a globally unique producerName value as described in the ProducerBuilder documentation.",
0,CAMEL-14046,Improvement,Major,3.0.0.RC2,None,"
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-10-09 14:57:54+00:00,2019-10-11 07:19:45+00:00,No Desc,
0,CAMEL-14015,Task,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-09-25 11:09:45+00:00,2019-09-25 11:35:32+00:00,"The Zipkin community decides to not go ahead with the ASF transition, I asked on gitter. So we need to go back to the older GAV",
0,CAMEL-14014,Improvement,Minor,3.0.0.RC1,3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,3,2019-09-25 11:03:20+00:00,2019-11-05 16:31:11+00:00,"Currently the current camel-debezium is ti to mysql connector which is not feasible in the long term, as Gunnar suggested before, we will try to make camel-debezium neutral with no hard dependencies and explicitly let the user to add the dependency for the desired connector","omarsmak:1571189630:2019-10-16T09:33:50.402+0000:1571189630:2019-10-16T09:33:50.402+0000:Hi [~davsclaus] [~acosentino], 

 

I would like to hear you guys opinion on this, as I am wrapping up CAMEL-14009, now I have the ability to generate the configurations by suppling the connector class in the plugin configuration pom, therefore I was thinking to breakdown this component into separate components for the sake of documentation and managing this better , e.g: 

{{camel-debezium-common}} <-- contains DBZ core code plus the maven plugin that is responsible for generating configurations

{{camel-debezium-<db_name>}} <-- for every DB that DBZ supports, contains only documentation, extended classes and generated configuration by the maven plugin, but this is going to be very minimal, together with the corresponding dependencies required. By that we only have what the user needs, not everything. 

 

The only downside about the above approach, is that endpoint uri will change from {{debezium:<db_name>}} to {{debezium-<db_name>}}, although I don't think that is a big issue though since we didn't go GA yet? What do you guys think?

 

Thanks
acosentino:1571189818:2019-10-16T09:36:58.042+0000:1571189818:2019-10-16T09:36:58.042+0000:I think it's not a big trouble to have multiple components and also changing the scheme name is ok actually.
davsclaus:1571271496:2019-10-17T08:18:16.229+0000:1571271496:2019-10-17T08:18:16.229+0000:Yes this is a good idea. Its actually sometimes better to have different endpoints as then they have 100% their own set of options. eg in the old days twitter component was 1 endpoint, today its 5+ or so.
omarsmak:1571623484:2019-10-21T10:04:44.555+0000:1571623484:2019-10-21T10:04:44.555+0000:Perfect! Then I will create set of subtasks to manage this better, thanks for the feedback (y)"
0,CAMEL-14013,Bug,Major,3.0.0,,"
None
",Resolved,Duplicate,None,Unassigned,Jiri Ondrusek,0,2,2019-09-25 08:23:23+00:00,2019-09-30 03:45:06+00:00,"Using this route (sending private message to ""priv"" user that should be sent to channel ""test2"" via ""chan"" user):




from(""irc://priv@localhost:6667/test1"")
.log(""${headers}"")
.to(""irc://chan@localhost:6667/test2"");




The user ""chan"" never sends the message to the channel test2.
Message is sent to test1 again and again.




[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-1, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=avano, irc.user.servername=avano, irc.user.username=avano}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-1]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=avano msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-2, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-2]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-3, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-3]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-4, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-4]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-5, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-5]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-6, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-6]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-7, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-7]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-8, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-8]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-9, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-9]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-10, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-10]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-11, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-11]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
[                      Thread-3] route1                         INFO  {breadcrumbId=ID-fakefrog-1546849878466-0-12, irc.messageType=PRIVMSG, irc.target=priv, irc.user.host=172.17.0.1, irc.user.nick=chan, irc.user.servername=chan, irc.user.username=chan}
[                      Thread-3] SendProcessor                  DEBUG >>>> irc://chan@localhost:6667?channel=test2 Exchange[ID-fakefrog-1546849878466-0-12]
[                      Thread-3] IrcProducer                    DEBUG Sending to: priv message: hi
[                      Thread-3] IrcComponent                   DEBUG Server: localhost - onPrivmsg target=priv user=chan msg=""hi""
^C[ad #0 - CamelHangupInterceptor] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
[       com.text.MainApp.main()] MainSupport                    INFO  MainSupport exiting code: 0
[ad #0 - CamelHangupInterceptor] DefaultCamelContext            INFO  Apache Camel 2.21.0.fuse-720029 (CamelContext: camel-1) is shutting down
[ad #0 - CamelHangupInterceptor] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)","jondruse:1569371045:2019-09-25T08:24:05.659+0000:1569371045:2019-09-25T08:24:05.659+0000:I'm working on this issue.
davsclaus:1569376521:2019-09-25T09:55:21.777+0000:1569376521:2019-09-25T09:55:21.777+0000:I think there is already a ticket about this"
0,CAMEL-14012,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Claus Ibsen,0,2,2019-09-25 06:47:02+00:00,2019-09-30 08:13:54+00:00,"camel-extra is not fully supported by ASF, and we should remove it from the prominent position from the website, as users may think its under same SLA as Apache Camel.


Currently camel-extra is listed in the community menu. Remove it from there.
And as well from the bottom of the website.


Instead add camel-extra to user stories
https://camel.apache.org/community/user-stories/",zregvart:1569802434:2019-09-30T08:13:54.521+0000:1569802434:2019-09-30T08:13:54.521+0000:Thanks to [~jaiprakash.mewada] for the pull request!
0,CAMEL-14011,Improvement,Major,3.0.0.RC1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Unassigned,Marius Cornescu,0,2,2019-09-24 15:51:25+00:00,2019-09-30 03:44:14+00:00,"Using the camel-hdfs component I've noticed some opportunities for refactoring, based on the recommendations from SonarLint.


I don't think all of those are needed, but some are good to have for the quality of the app.","marius_cornescu:1569311498:2019-09-24T15:51:38.479+0000:1569311498:2019-09-24T15:51:38.479+0000:I'll be working on this.
davsclaus:1569786254:2019-09-30T03:44:14.290+0000:1569786254:2019-09-30T03:44:14.290+0000:Thanks for the PR"
0,CAMEL-14010,Bug,Major,2.22.0,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Unassigned,Srikant Mantha,0,3,2019-09-24 14:27:37+00:00,2019-11-07 18:01:39+00:00,"Iam using kafka consumer in our application integrated with Camel. 
 We consume the messages and send the data to the server for processing.


There is one topic ""XYZ"" defined with 30 partitions and I have assigned 15 as consumer count on each consumer node (total 2 instances)


/*** Camel Consumer Configuration ***/




kafka.consumersCount=15
 kafka.consumerStreams=15



I see from the logs that when the consumer starts, there are 15 consumer threads (lets say on 1 node), which is good as configured.I see from the logs that when the consumer starts, there are 15 consumer threads (lets say on 1 node), which is good as configured.


 


 









{{INFO  Camel (camel-1) thread #2 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 0 to topic XYZ }}
{{INFO  Camel (camel-1) thread #3 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 1 to topic XYZ }}
{{INFO  Camel (camel-1) thread #4 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 2 to topic XYZ }}
{{INFO  Camel (camel-1) thread #5 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 3 to topic XYZ }}
{{INFO  Camel (camel-1) thread #6 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 4 to topic XYZ }}
{{INFO  Camel (camel-1) thread #7 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 5 to topic XYZ }}
{{INFO  Camel (camel-1) thread #8 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 6 to topic XYZ }}
{{INFO  Camel (camel-1) thread #9 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 7 to topic XYZ }}
{{INFO  Camel (camel-1) thread #10 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 8 to topic XYZ }}
{{INFO  Camel (camel-1) thread #11 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 9 to topic XYZ }}
{{INFO  Camel (camel-1) thread #12 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 10 to topic XYZ }}
{{INFO  Camel (camel-1) thread #13 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 11 to topic XYZ }}
{{INFO  Camel (camel-1) thread #14 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 12 to topic XYZ }}
{{INFO  Camel (camel-1) thread #15 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 13 to topic XYZ }}
INFO  Camel (camel-1) thread #16 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 14 to topic XYZ


 


If server stops responding due to network issue or any other scenario when the server is unavailable, then all the kafka consumers starts unsubscribing which is again an expected behavior (so far good)


Note: We have defined the Camel




ThrottlingExceptionRoutePolicy 



which does a health check call on the server before sending the consumed message.
 Once the server is back and available, I see that not all 15 consumer threads are active, but only 1 (I guess this is the default value). 


From the logs below, I observe that the consumerss are getting subscribed and unsubscribed one by one from the topic and finally the application runs with only a single consumer count. This is really strange to see.


{{INFO  Camel (camel-1) thread #17 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 0 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}


{{auto.commit.interval.ms = 5000 }}
{{auto.offset.reset = latest }}
{{bootstrap.servers = [ListOfDefinedServers] }}
{{check.crcs = true }}
{{client.id =  }}
{{connections.max.idle.ms = 540000 }}
{{enable.auto.commit = false }}
{{exclude.internal.topics = true }}
{{fetch.max.bytes = 52428800 }}
{{fetch.max.wait.ms = 500 }}
{{fetch.min.bytes = 1 }}
{{group.id = XYZ-GroupId-12345 }}
{{heartbeat.interval.ms = 3000 }}
{{interceptor.classes = null }}
{{internal.leave.group.on.close = true }}
{{isolation.level = read_uncommitted }}
{{key.deserializer = class 
org.apache.kafka.common.serialization.StringDeserializer }}
{{max.partition.fetch.bytes = 1048576 }}
{{max.poll.interval.ms = 300000 }}
{{max.poll.records = 500 }}
{{metadata.max.age.ms = 5000 }}
{{metric.reporters = [] metrics.num.samples = 2 }}
{{metrics.recording.level = INFO }}
metrics.sample.window.ms = 30000
{{partition.assignment.strategy = [org.apache.kafka.clients.consumer.RangeAssignor] }}
{{receive.buffer.bytes = 65536 }}
{{reconnect.backoff.max.ms = 1000 }}
{{reconnect.backoff.ms = 50 }}
{{request.timeout.ms = 40000 }}
{{retry.backoff.ms = 100 }}
{{sasl.jaas.config = null }}
{{sasl.kerberos.kinit.cmd = /usr/bin/kinit }}
{{sasl.kerberos.min.time.before.relogin = 60000 }}
{{sasl.kerberos.service.name = null sasl.kerberos.ticket.renew.jitter = 0.05 sasl.kerberos.ticket.renew.window.factor = 0.8 sasl.mechanism = GSSAPI security.protocol = SSL send.buffer.bytes = 131072 session.timeout.ms = 10000 ssl.cipher.suites = null ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1] ssl.endpoint.identification.algorithm = HTTPS ssl.key.password = [hidden] ssl.keymanager.algorithm = SunX509 ssl.keystore.location = cert.jks ssl.keystore.password = [hidden] ssl.keystore.type = JKS ssl.protocol = TLS ssl.provider = null ssl.secure.random.implementation = null ssl.trustmanager.algorithm = PKIX ssl.truststore.location = cert.jks ssl.truststore.password = [hidden] ssl.truststore.type = JKS value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer }}


{{INFO  Camel (camel-1) thread #17 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 0 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined INFO  Camel (camel-1) thread #18 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 1 to topic XYZ INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined INFO  Camel (camel-1) thread #18 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 1 from topic XYZ }}


{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}


{{INFO  Camel (camel-1) thread #19 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 2 to topic XYZ }}


{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}


{{INFO  Camel (camel-1) thread #19 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 2 from topic XYZ }}


{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}


{{INFO  Camel (camel-1) thread #20 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 3 to topic XYZ }}


{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}


INFO  Camel (camel-1) thread #20 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 3 from topic XYZ
INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined


{{INFO  Camel (camel-1) thread #21 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 4 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #21 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 4 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #22 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 5 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #22 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 5 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #23 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 6 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #23 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 6 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #24 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 7 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #24 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 7 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #25 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 8 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #25 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 8 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #26 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 9 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #26 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 9 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #27 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 10 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #27 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 10 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #28 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 11 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #28 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 11 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #29 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 12 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #29 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 12 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #30 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 13 to topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
{{INFO  Camel (camel-1) thread #30 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:351)] Unsubscribing XYZ-Thread 13 from topic XYZ }}
{{INFO  [kafka.clients.consumer.ConsumerConfig(logAll:238)] ConsumerConfig values: Prints all the consumer config values defined/undefined }}
INFO  Camel (camel-1) thread #31 - KafkaConsumer[XYZ] [camel.component.kafka.KafkaConsumer(doRun:222)] Subscribing XYZ-Thread 14 to topic XYZ INFO  Camel (camel-1) thread #31 - KafkaConsumer[XYZ] [clients.consumer.internals.AbstractCoordinator(info:341)] [Consumer clientId=consumer-30, groupId=XYZ-GroupId-12345] Discovered group coordinator servername (id: 2147482644 rack: null) INFO  Camel (camel-1) thread #31 - KafkaConsumer[XYZ] [clients.consumer.internals.ConsumerCoordinator(info:341)] [Consumer clientId=consumer-30, groupId=XYZ-GroupId-12345] Revoking previously assigned partitions [] INFO  Camel (camel-1) thread #31 - KafkaConsumer[XYZ] [clients.consumer.internals.AbstractCoordinator(info:336)] [Consumer clientId=consumer-30, groupId=XYZ-GroupId-12345] (Re-)joining group INFO  Camel (camel-1) thread #31 - KafkaConsumer[XYZ] [clients.consumer.internals.AbstractCoordinator(info:341)] [Consumer clientId=consumer-30, groupId=XYZ-GroupId-12345] Successfully joined group with generation 1 INFO  Camel (camel-1) thread #31 - KafkaConsumer[XYZ] [clients.consumer.internals.ConsumerCoordinator(info:341)] [Consumer clientId=consumer-30, groupId=XYZ-GroupId-12345] Setting newly assigned partitions [XYZ-17, XYZ-19, XYZ-13, XYZ-15, XYZ-25, XYZ-27, XYZ-21, XYZ-23, XYZ-1, XYZ-3, XYZ-28, XYZ-9, XYZ-11, XYZ-5, XYZ-7, XYZ-16, XYZ-18, XYZ-12, XYZ-14, XYZ-24, XYZ-26, XYZ-20, XYZ-22, XYZ-0, XYZ-2, XYZ-29, XYZ-8, XYZ-10, XYZ-4, XYZ-6]


 


How to fix this issue ?","acosentino:1569306740:2019-09-24T14:32:20.731+0000:1569306740:2019-09-24T14:32:20.731+0000:camel 2.22.0 is EOL, there won't be any new release. Please try with a new one 2.23.4 or 2.24.2.

Also this looks more something to ask on the dev mailing list.
acosentino:1569306814:2019-09-24T14:33:34.283+0000:1569306814:2019-09-24T14:33:34.283+0000:please don't change the priority.
acosentino:1569307310:2019-09-24T14:41:50.009+0000:1569307310:2019-09-24T14:41:50.009+0000:stop changing the priority. This is not critical
acosentino:1569307475:2019-09-24T14:44:35.842+0000:1569307475:2019-09-24T14:44:35.842+0000:Why are you so disrespectful for the community members managing this JIRA? Stop changing the priority of this issue and read the comments here. This is not a critical bug.
acosentino:1569307891:2019-09-24T14:51:31.837+0000:1569307891:2019-09-24T14:51:31.837+0000:Do as you wish. This is not the way to approach a community.
srikant_mantha:1569308401:2019-09-24T15:00:01.423+0000:1569308442:2019-09-24T15:00:42.148+0000:Okay, I was modifying the content, didn't see your comments on the priority. I will try with the latest camel-kafka version
srikant_mantha:1569308894:2019-09-24T15:08:14.044+0000:1569308894:2019-09-24T15:08:14.044+0000:I have already put this in the dev mailing list, but haven't heard anything from them yet. Moreover, this looks to be a Camel Kafka Consumer Internal stuff where its defaulting the consumer count to 1 on failure. So, I thought its better to ask in this community.
acosentino:1569310173:2019-09-24T15:29:33.482+0000:1569310173:2019-09-24T15:29:33.482+0000:I don't know if you mean the kafka dev mailing list, I'm talking about the camel dev mailing list. To reproduce this by the way it would be good to have a project showing the behavior.
srikant_mantha:1569311429:2019-09-24T15:50:29.288+0000:1569311429:2019-09-24T15:50:29.288+0000:I have requested access to post in camel dev mail list. Let me see
davsclaus:1569897424:2019-10-01T10:37:04.714+0000:1569897424:2019-10-01T10:37:04.714+0000:Are you not seeing an exception or any kind of errors when the server connection is failing? The logic in camel-kafka is that it ought to log these and then do a re-connection in the consumer thread.

Also you dont see any logs with Reconnecting?

And can you try with a newer Camel version as 2.22 is EOL.
srikant_mantha:1569905931:2019-10-01T12:58:51.856+0000:1569905931:2019-10-01T12:58:51.856+0000:[~davsclaus] As mentioned in my description, I see only the above logs from camel kafka after enabling the debug logs where its trying to subscribe and then again unsubscribes and finally runs with a single thread. 
I am trying to reproduce the same issue by creating a new project so that the group can see the issue better.
srikant_mantha:1570453423:2019-10-07T21:03:43.423+0000:1570453423:2019-10-07T21:03:43.423+0000:[~acosentino] As requested, Please find the below 3 projects that I have created to reproduce the issue.

https://github.com/srikant-mvs/SimpleRestInterface : Dummy Server application listening to endpoints
https://github.com/srikant-mvs/SimpleCamelKafkaProducer : Send message to kafka
https://github.com/srikant-mvs/SimpleCamelKafkaConsumer : Consumer application where the issue exists
acosentino:1570500786:2019-10-08T10:13:06.957+0000:1570500786:2019-10-08T10:13:06.957+0000:Thanks for the reproducer.
srikant_mantha:1571099082:2019-10-15T08:24:42.832+0000:1571099082:2019-10-15T08:24:42.832+0000:[~acosentino] Were you able to see the reproduced error. Any inputs for me ?
acosentino:1571099942:2019-10-15T08:39:02.960+0000:1571099942:2019-10-15T08:39:02.960+0000:I have no time actually. But it's here, for anyone who aim to help.
srikant_mantha:1572917630:2019-11-05T09:33:50.465+0000:1572917630:2019-11-05T09:33:50.465+0000:[~acosentino] [~davsclaus] The issue seem to be resolved after using Camel 3 version latest jar. Can you tell when would the feature release be available to use ?
acosentino:1572918274:2019-11-05T09:44:34.038+0000:1572918274:2019-11-05T09:44:34.038+0000:There are already release candidate out for this. The last one is RC3. The final release should be before the end of November.
srikant_mantha:1572918951:2019-11-05T09:55:51.201+0000:1572918951:2019-11-05T09:55:51.201+0000:[~acosentino]  Thanks for the information"
0,CAMEL-14009,Improvement,Minor,3.0.0.RC2,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Omar Al-Safi,Omar Al-Safi,0,1,2019-09-24 12:09:24+00:00,2019-10-18 11:13:10+00:00,"Currently we generate the configurations manually for Debezium component, this approach is a bit annoying especially if the configuration changes due to new version update which can make it difficult to follow. As suggested by jpechane, we can utilize the configurations ALL_FIELDS property that exists in all DBZ connector configurations and generate concentrate class configurations during compile time using a script through Maven Groovy, Maven plugin or whatever is feasible.",
0,CAMEL-14008,Bug,Minor,"2.24.2, 3.x","3.21.0, 4.0-M1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-M1, 4.0.0",Unassigned,Sjoerd Brauer,1,3,2019-09-24 08:09:19+00:00,2023-01-30 08:59:48+00:00,"This bug was originally found by: EMBEE


 


The AS2 component creates one HTTP connection with the other party. If nothing happens for a while and the other party decides to close down the connection the component does not attempt to create a new session.


 


This bug was found by running the program a few hours and when a new message was to be send the connection was already closed down by the other party.


 


The component should create a new connection with the other party.","acosentino:1569284084:2019-09-24T08:14:44.689+0000:1569284084:2019-09-24T08:14:44.689+0000:You're welcome to work on a patch.
davsclaus:1633348631:2021-10-04T19:57:11.909+0000:1633348631:2021-10-04T19:57:11.909+0000:We can maybe use http connection pooling which supports to test the connection and re-create if fails, such as commons-pools or something."
0,CAMEL-14007,New Feature,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Claudio Miranda,0,1,2019-09-23 21:52:50+00:00,2019-09-26 08:17:44+00:00,"The upload doesn't support to upload a file with an already existing file name, there is no overwrite parameter.If the user uploads a file and the name already exists, it throws an error.


If there is a file with a given name, it should upload a new version of the given file uploadNewFileVersion and pass the fileId  parameter.


There is a BoxFolder.canUpload method that check a file can be uploaded, this way the user can get a feedback and then call upload or uploadNewFileVersion.


https://developer.box.com/reference#preflight-check",
0,CAMEL-14006,Bug,Major,2.24.2,,"
None
",Closed,Not A Problem,None,Unassigned,Marc El Achkar,0,2,2019-09-23 12:28:20+00:00,2019-09-23 13:13:51+00:00,"Hi,


when using the camel version 2.24.2, the dependency camel-jacksonxml is not working properly when pulled from Maven repository. when we compile a project that has a dependency to camel-jacksonxml:2.24.2, we get the following error:


Could not resolve dependencies for project, Failed to collect dependencies at org.apache.camel:camel-jacksonxml:jar:2.24.2 -> com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.9.9.2019080


could you please assist with this issue because we have to upgrade to the version 2.24.2? (it was working with the previous versions)","acosentino:1569213210:2019-09-23T12:33:30.388+0000:1569213210:2019-09-23T12:33:30.388+0000:There is no trace of this version in the dependencies of this component:

 

[https://mvnrepository.com/artifact/org.apache.camel/camel-jacksonxml/2.24.2]
acosentino:1569213326:2019-09-23T12:35:26.953+0000:1569213326:2019-09-23T12:35:26.953+0000:camel-2.24.x is based on Spring Boot 2.1.4.RELEASE and not on 2.1.8.RELEASE.

By the way, if you want to use the component with spring Boot, you need to use the artifact camel-jacksonxml-starter.
acosentino:1569215631:2019-09-23T13:13:51.498+0000:1569215631:2019-09-23T13:13:51.498+0000:it's based on 2.1.1 sorry."
0,CAMEL-14005,Task,Trivial,None,,"
None
",Resolved,Not A Problem,None,Andrea Cosentino,Mantas Gridinas,0,3,2019-09-23 08:42:54+00:00,2019-09-25 11:36:02+00:00,"HTTP component's documentation (at https://camel.apache.org/components/latest/http-component.html) suggests that you should use HttpComponent#setSslContextParameters, but the method does not seem to exist. How do you configure SSL with HttpComponent?","acosentino:1569200113:2019-09-23T08:55:13.187+0000:1569200113:2019-09-23T08:55:13.187+0000:I don't see any reference to setSslContextParams in that page. there is the setSslContextParameters option.
Dragas:1569236220:2019-09-23T18:57:00.294+0000:1569236220:2019-09-23T18:57:00.294+0000:Edited the original post, cheers.
bedla:1569237908:2019-09-23T19:25:08.165+0000:1569237908:2019-09-23T19:25:08.165+0000:{{HttpComponent#setSslContextParameters}} exists: https://static.javadoc.io/org.apache.camel/camel-http/3.0.0-RC1/org/apache/camel/component/http/HttpComponent.html#setSslContextParameters-org.apache.camel.support.jsse.SSLContextParameters-

Perhaps you are using Camel 2.x? If so, then refer this page instead https://camel.apache.org/components/2.x/http4-component.html
acosentino:1569238294:2019-09-23T19:31:34.386+0000:1569238294:2019-09-23T19:31:34.386+0000:If so you need to select 2.x from the side menu for the documentation"
0,CAMEL-14004,Task,Major,None,3.0.0,"

help-wanted

",Resolved,Fixed,3.0.0,Unassigned,Zoran Regvart,0,1,2019-09-22 17:25:01+00:00,2019-10-31 08:52:39+00:00,Documentation on how to edit the website needs to be updated with the process for updating the new website.,
0,CAMEL-14003,New Feature,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Andrea Cosentino,0,2,2019-09-21 09:50:09+00:00,2020-11-04 09:41:22+00:00,No Desc,"akihikokuroda:1603710912:2020-10-26T19:15:12.688+0000:1603710912:2020-10-26T19:15:12.688+0000:I try to implement this.  Here is my assumptions. 
 # This is implemented under camel-kubernetes and the component name is `kubernetes-custom-resources`.
 # It supports create, delete, get and list operations for the custom resource instances.
 # It also supports consumer that monitor any changes for the instances.
 # The necessary parameters including the api version and kind of the custom resource definitions are provided in the header. 

Are these OK?
acosentino:1603754946:2020-10-27T07:29:06.712+0000:1603754946:2020-10-27T07:29:06.712+0000:Yes, they are."
0,CAMEL-14002,Bug,Major,3.0.0,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Otavio Rodolfo Piske,0,2,2019-09-20 13:05:07+00:00,2021-09-30 10:34:04+00:00,"When a AWS-SQS component is setup to use a different host via the amazonAWSHost property, this host is not honored during the initial listing of the queues. Instead the component list tries to list the queues using the default amazon AWS host which. As a result this causes the component to fail the initialization and may prevent using camel with local/non-public instances of AWS SQS hosts. 


Here's a log snippet taken from a code that configures the AWS-SQS URL as:




aws-sqs://ckc?accessKey=accesskey&amazonAWSHost=localhost%3A33715&autoCreateQueue=false 




 


This is what is printed on the logs:




2019-09-20 14:27:34,058 [ool-11-thread-1] DEBUG org.apache.http.wire - http-outgoing-2 >> ""POST / HTTP/1.1[\r][\n]""2019-09-20 14:27:34,058 [ool-11-thread-1] DEBUG org.apache.http.wire - http-outgoing-2 >> ""Host: sqs.us-east-1.amazonaws.com[\r][\n]""",orpiske:1568956121:2019-09-20T13:08:41.871+0000:1568956121:2019-09-20T13:08:41.871+0000:I'll send a PR for this.
0,CAMEL-14001,Improvement,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Andrea Cosentino,0,1,2019-09-20 10:05:27+00:00,2019-09-20 10:52:26+00:00,No Desc,
0,CAMEL-14000,Improvement,Major,"2.24.2, 3.0.0.RC1",None,"
None
",Resolved,Fixed,"3.0.0.RC2, 2.24.3, 3.0.0, 2.25.0",John Poth,John Poth,0,3,2019-09-20 08:54:58+00:00,2020-12-21 06:07:22+00:00,"The ServicePool or (DefaultServicePool in 2.x) uses a unbounded ConcurrentHashMap to cash producers. This can cause memory leaks in highly dynamic routes using recipient lists creating many temporary endpoint which will never be evicted even when the route stops. Even though workarounds exists, we might consider using an LRUCache for eviction.","davsclaus:1569299411:2019-09-24T12:30:11.642+0000:1569299411:2019-09-24T12:30:11.642+0000:Can you also backport this to camel 2.x branches
davsclaus:1569804689:2019-09-30T08:51:29.458+0000:1569804689:2019-09-30T08:51:29.458+0000:Lets just keep it for Camel 3
shohaib:1608502042:2020-12-21T06:07:22.827+0000:1608502042:2020-12-21T06:07:22.827+0000:Hi John,

Is this memory leakage issue got resolved with the Camel 2.25.0  version?

 "
0,CAMEL-13999,Bug,Minor,2.23.0,"2.24.3, 2.25.0","

camel-salesforce
httpclient
salesforce

",Resolved,Fixed,"2.24.3, 2.25.0",Claus Ibsen,Hemang Ajmera,0,2,2019-09-20 06:41:52+00:00,2019-10-07 05:42:56+00:00,"Bulk, Composite Batch, etc. all throw an exception when trying to return on more than a few records due to static final IDLE_TIMEOUT on the instantiated salesforce component httpClient:


 


Caused by: org.apache.camel.component.salesforce.api.SalesforceException: Unexpected error {0:null} executing {POST:https://genericSFDCInstance.salesforce.com/services/data/v38.0/composite/batch}
        at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:199) ~[camel-salesforce-2.23.0.jar:2.23.0]
        at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:202) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:194) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:470) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpReceiver.abort(HttpReceiver.java:552) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpChannel.abortResponse(HttpChannel.java:156) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpChannel.abort(HttpChannel.java:149) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpExchange.abort(HttpExchange.java:257) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpConversation.abort(HttpConversation.java:141) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.HttpRequest.abort(HttpRequest.java:767) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.abort(HttpConnectionOverHTTP.java:204) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.close(HttpConnectionOverHTTP.java:190) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onIdleExpired(HttpConnectionOverHTTP.java:145) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.ssl.SslConnection.onIdleExpired(SslConnection.java:286) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.AbstractEndPoint.onIdleExpired(AbstractEndPoint.java:401) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.IdleTimeout.checkIdleTimeout(IdleTimeout.java:166) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.IdleTimeout$1.run(IdleTimeout.java:50) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
        ... 1 more


Caused by: java.util.concurrent.TimeoutException: Idle timeout 5000 ms
        at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onIdleExpired(HttpConnectionOverHTTP.java:145) ~[jetty-client-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.ssl.SslConnection.onIdleExpired(SslConnection.java:286) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.AbstractEndPoint.onIdleExpired(AbstractEndPoint.java:401) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.IdleTimeout.checkIdleTimeout(IdleTimeout.java:166) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at org.eclipse.jetty.io.IdleTimeout$1.run(IdleTimeout.java:50) ~[jetty-io-9.4.12.v20180830.jar:9.4.12.v20180830]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_201]
        at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_201]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_201]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_201]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_201]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_201]
        ... 1 more


 


Note that as IDLE_TIMEOUT is static, it cannot be set via Spring, and the httpClientProperties map is never used to set any timeouts, instead opting to take the hardcoded defaults.","hemangajmera:1568932974:2019-09-20T06:42:54.670+0000:1568932974:2019-09-20T06:42:54.670+0000:Can this fix be backported to version 2.x. We are still not ready to move production to version 3.x
davsclaus:1568937278:2019-09-20T07:54:38.858+0000:1568937278:2019-09-20T07:54:38.858+0000:Would be good if you can provide the PR for this yourself and we can review and get it merged.
hemangajmera:1570398176:2019-10-07T05:42:56.023+0000:1570398176:2019-10-07T05:42:56.023+0000:Thanks! "
0,CAMEL-13998,New Feature,Major,3.0.0.RC1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Marius Cornescu,0,2,2019-09-19 15:34:54+00:00,2019-09-27 12:09:31+00:00,"Some enterprise hadoop clusters are integrated with Kerberos authentication.


Enhance the current hdfs implementation to support connecting to a hadoop instance that uses kerberos authentication.


 


Proposal is to add 4 new parameters to the uri:


kerberosNamedNodes - comma separated list of host:port nodes to use for kerberos auth
kerberosConfigFileLocation - location of the krb5.conf file
kerberosUsername - user name for the authentication
kerberosKeytabLocation - location of the keytab file to use in the authentication


 


In part inspired by blog post.","marius_cornescu:1568878539:2019-09-19T15:35:39.905+0000:1568878539:2019-09-19T15:35:39.905+0000:As we're already doing the work, I'd like to be assigned on this story.
acosentino:1568878967:2019-09-19T15:42:47.488+0000:1568878967:2019-09-19T15:42:47.488+0000:The permission to assign stuff to himself is usually given to much more long term contributors. In this case the comment is enough. We know you're working on this. Thanks
marius_cornescu:1569036676:2019-09-21T11:31:16.318+0000:1569036676:2019-09-21T11:31:16.318+0000:https://github.com/apache/camel/pull/3183"
0,CAMEL-13997,Bug,Major,3.0.0.RC1,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Zoran Regvart,Zoran Regvart,0,1,2019-09-19 12:58:47+00:00,2019-09-19 13:04:26+00:00,Seems that I've forgotten to release a ByteBuf used in the uppercase processor in the ProxyProtocolTest. Also Since ProxyProtocolTest doesn't inherit BaseNettyTest it doesn't contain the @BeforeClass or @AfterClass hooks for verifying the reference counting.,
0,CAMEL-13996,Bug,Minor,3.x,,"
None
",Resolved,Abandoned,None,Unassigned,Onder Sezgin,0,2,2019-09-18 21:21:09+00:00,2020-12-17 15:19:32+00:00,"https://camel.465427.n5.nabble.com/camel-http-starter-causing-problem-with-KubernetesClusterServiceAutoConfiguration-problem-td5842770.html


 


and 


see


https://github.com/onderson/camel-leader-election","davsclaus:1608189572:2020-12-17T15:19:32.731+0000:1608189572:2020-12-17T15:19:32.731+0000:This is 1.5 year old, try again with latest release"
0,CAMEL-13995,Bug,Minor,"2.23.4, 2.24.2",,"
None
",Resolved,Won't Fix,None,Unassigned,Onder Sezgin,0,3,2019-09-18 21:14:34+00:00,2020-06-19 12:55:08+00:00,"see


 


https://camel.465427.n5.nabble.com/camel-http-starter-causing-problem-with-KubernetesClusterServiceAutoConfiguration-problem-td5842770.html","onders:1568812604:2019-09-18T21:16:44.694+0000:1568812604:2019-09-18T21:16:44.694+0000:btw, this does not happen with camel-http4
acosentino:1568812837:2019-09-18T21:20:37.788+0000:1568812837:2019-09-18T21:20:37.788+0000:Camel-http Is the only http component in Camel 3. It has been renamed from camel-http4
acosentino:1568813459:2019-09-18T21:30:59.964+0000:1568813459:2019-09-18T21:30:59.964+0000:Ah. I just saw the version. Never mind
davsclaus:1589802367:2020-05-18T19:46:07.174+0000:1589802367:2020-05-18T19:46:07.174+0000:Try with latest release on 3.x"
0,CAMEL-13994,Bug,Major,2.24.1,"3.0.0.RC2, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0, 2.25.0",Andrea Cosentino,imran raza khan,0,1,2019-09-18 16:08:57+00:00,2019-09-19 07:19:14+00:00,"listPods operation dont support namespace option, i tried both by header and inline parameter


.setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, simple(""my-qa""))
 .toF(""kubernetes-pods://%s?oauthToken=%s&trustCerts=true&namespace=my-qa&operation=listPods"", host, authToken)
 .process(new ListPods())
 .to(""log:my?showAll=true&multiline=true"");


 


it shows list of all pods but i only want for my-qa namespace.


 


i check code of


https://github.com/apache/camel/blob/camel-2.x/components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/pods/KubernetesPodsProducer.java


and at line number 95


protected void doList(Exchange exchange, String operation) throws Exception {
 PodList podList = getEndpoint().getKubernetesClient().pods().inAnyNamespace().list();


 


its calling inAnyNamespace(), it should use inNamespace("""") and if not mention then inAnyNamespace",
0,CAMEL-13993,Bug,Major,2.22.1,None,"
None
",Resolved,Invalid,None,Unassigned,KOMMI KISHORE,0,3,2019-09-18 13:22:16+00:00,2019-09-18 13:43:01+00:00,"I am trying to connect SMB server with PollingConsumer, but is it not coneecting.


 


I tried with FTP and SFTP, both are working as i expected.","omarsmak:1568784561:2019-09-18T13:29:21.141+0000:1568784561:2019-09-18T13:29:21.141+0000:I think this is not enough information, any other info, warnings or error messages that could help here? 
acosentino:1568784723:2019-09-18T13:32:03.174+0000:1568784723:2019-09-18T13:32:03.174+0000:Please this kind of question must be done on the users mailing list. This is a Jira to report real issues or documented problems. Thanks.
kkishore:1568785028:2019-09-18T13:37:08.178+0000:1568785028:2019-09-18T13:37:08.178+0000:[~acosentino] Thank you.

 


{color:#000080}public class {color}SMBTestConnector {

 {color:#000080}static {color}StringBuilder {color:#660e7a}fileName {color}= {color:#000080}new {color}StringBuilder({color:#008000}""smb://MY_SMB_PATH{color}{color:#008000}?idempotent=true&noop=true""{color});

 {color:#000080}static {color}DefaultCamelContext {color:#660e7a}camelContext {color}= {color:#000080}null{color};
 {color:#000080}public static void {color}main(String args[]) {

 {color:#000080}try{color}{
String proxyPw = GetPasswordDialog.getPassword({color:#008000}""MY USER NAME{color}{color:#008000}""{color});
 {color:#808080}fileName.append(""&username="").append(proxyUser);
{color} {color:#660e7a}fileName{color}.append({color:#008000}""&password=""{color}).append(proxyPw);

 {color:#000080}final {color}CsvDataFormat format = createCsvDataFormatter();

 {color:#660e7a}camelContext {color}= {color:#000080}new {color}DefaultCamelContext();
 {color:#660e7a}camelContext{color}.addRoutes({color:#000080}new {color}RouteBuilder() {
 {color:#808000}@Override
{color} {color:#000080}public void {color}configure() {color:#000080}throws {color}Exception {
 from({color:#008000}""direct:start""{color})
 .routeId({color:#008000}""start""{color})
 .process(receiveFile()){color:#808080}
{color} .convertBodyTo(String.{color:#000080}class{color}, {color:#008000}""UTF-8""{color})
 .unmarshal({color:#660e7a}format{color})
 .process(buildCsv())
 .to({color:#008000}""file://xlsx_test/?fileName=Test.csv""{color})
 ;
 }
 });

 {color:#660e7a}camelContext{color}.start();
 ProducerTemplate template = {color:#660e7a}camelContext{color}.createProducerTemplate();
 template.sendBody({color:#008000}""direct:start""{color}, {color:#000080}null{color});
 Thread.sleep({color:#0000ff}5000{color});
 {color:#660e7a}camelContext{color}.stop();
 }{color:#000080}catch {color}(Exception e){
 e.printStackTrace();
 }{color:#000080}finally {color}{
 {color:#000080}try{color}{
 {color:#660e7a}camelContext{color}.stop();
 }{color:#000080}catch {color}(Exception e){

 }

 }
 }

 {color:#000080}private static {color}Processor buildCsv() {
 {color:#000080}return new {color}Processor() {
 {color:#808000}@Override
{color} {color:#000080}public void {color}process(Exchange exchange) {color:#000080}throws {color}Exception {
 System.{color:#660e7a}out{color}.println({color:#008000}""Started data processing...""{color});
 {color:#000080}final char {color}delim = {color:#008000}';'{color};
 {color:#000080}final char {color}text = {color:#008000}'""'{color};
 {color:#000080}final char {color}textReplace = {color:#008000}'{color}{color:#000080}\'{color}{color:#008000}'{color};

 StringBuilder sb = {color:#000080}new {color}StringBuilder();
 Set<String> headerSet = {color:#000080}new {color}HashSet<>();
 List<Object> dataList = (List<Object>)exchange.getIn().getBody();

 {color:#000080}if{color}(!dataList.isEmpty()){

 {color:#000080}for {color}(Object dataObj : dataList) {
 Map<?,?> row = (Map<?,?>)dataObj;
 {color:#000080}for {color}(Object k : row.keySet()) {
 headerSet.add(k.toString());
 }
 }

 List<String> headerList = {color:#000080}new {color}ArrayList<>();
 headerList.addAll(headerSet);
 Collections.sort(headerList);

 {color:#000080}for {color}(String header : headerList) {
 sb.append(text);
 sb.append(header);
 sb.append(text);
 sb.append(delim);
 }
 sb.append({color:#008000}""{color}{color:#000080}\r\n{color}{color:#008000}""{color});

 {color:#000080}for {color}(Object arr : dataList) {
 Map row = (Map)arr;

 {color:#000080}for {color}(String header:headerList) {
 String val = {color:#008000}""""{color}+(row.containsKey(header)?row.get(header):{color:#008000}""""{color});
 sb.append(text);
 val = val.replace(text, textReplace);
 sb.append(val);
 sb.append(text);
 sb.append(delim);
 }
 sb.append({color:#008000}""{color}{color:#000080}\r\n{color}{color:#008000}""{color});
 }
 }
 exchange.getIn().setBody(sb.toString());
 }
 };
 }


 {color:#000080}private static {color}CsvDataFormat createCsvDataFormatter() {color:#000080}throws {color}Exception {
 CsvDataFormat format = {color:#000080}new {color}CsvDataFormat();
 format.setUseMaps({color:#000080}true{color});

 {color:#000080}final {color}String delimiterValue = {color:#008000}"";""{color};
 {color:#000080}final char {color}delimiter = delimiterValue.isEmpty() ? {color:#008000}';' {color}: delimiterValue.charAt({color:#0000ff}0{color});
 format.setDelimiter(delimiter);

 {color:#000080}final boolean {color}skipHeaderRecord = {color:#000080}true{color};
 format.setSkipHeaderRecord(skipHeaderRecord);

 }

 {color:#000080}return {color}format;
 }


 {color:#000080}private static {color}Processor receiveFile() {
 {color:#000080}return new {color}Processor() {
 {color:#808000}@Override
{color} {color:#000080}public void {color}process(Exchange exchange) {color:#000080}throws {color}Exception {
 Message msg = exchange.getIn();

 String endpointUri = {color:#660e7a}fileName{color}.toString();
 {color:#000080}int {color}waitTimeout = {color:#0000ff}15000{color};

 Message fileMessage = pollingConsumerReceiveOnce(endpointUri, waitTimeout);

 {color:#808080}//copy file metadata headers to message
{color} {color:#000080}for {color}(Entry<String,Object> header : fileMessage.getHeaders().entrySet()) {
 msg.getHeaders().putIfAbsent(header.getKey(), header.getValue());
 };

 {color:#808080}//read file using configured encoding
{color} InputStream is = fileMessage.getBody(InputStream.{color:#000080}class{color});
 String inFileEncoding = {color:#008000}""UTF-8""{color};
 String fileContents = IOUtils.toString(is,inFileEncoding);
 is.close();

 msg.setBody(fileContents);
 }
 };
 }

 {color:#000080}private static {color}Message pollingConsumerReceiveOnce(String endpointUri, {color:#000080}int {color}waitTimeout) {color:#000080}throws {color}Exception {
 Endpoint endpoint = {color:#660e7a}camelContext{color}.getEndpoint(endpointUri);
 SedaPollingConsumer consumer = {color:#000080}new {color}SedaPollingConsumer(endpoint);
 {color:#000080}try {color}{
 consumer.start();
 Exchange fileExchange = consumer.receive(waitTimeout);
 {color:#000080}if {color}(fileExchange == {color:#000080}null{color}) {
 {color:#000080}throw new {color}Exception({color:#008000}""No message could be recieved from endpoint (if it is a file endpoint, expected file may not be present) : "" {color}+ endpoint);
 }
 System.{color:#660e7a}out{color}.println({color:#008000}""After Date :""{color}+{color:#000080}new {color}Date());
 {color:#000080}return {color}fileExchange.getIn();
 } {color:#000080}finally {color}{
 consumer.stop();
 {color:#660e7a}camelContext{color}.removeEndpoint(endpoint);
 }
 }
}
kkishore:1568785069:2019-09-18T13:37:49.721+0000:1568785069:2019-09-18T13:37:49.721+0000:[~acosentino] Thank you.
omarsmak:1568785277:2019-09-18T13:41:17.398+0000:1568785277:2019-09-18T13:41:17.398+0000:[~kkishore] as [~acosentino] mentioned, please use the mailing list here: [https://camel.apache.org/manual/latest/mailing-lists.html] or the gitter chat: [https://gitter.im/apache/apache-camel] to ask your questions 
kkishore:1568785381:2019-09-18T13:43:01.298+0000:1568785381:2019-09-18T13:43:01.298+0000:[~omarsmak] Thank you for the reply"
0,CAMEL-13992,Task,Trivial,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Mantas Gridinas,0,4,2019-09-18 07:47:16+00:00,2019-10-22 21:04:28+00:00,"The SEDA component documentation claims that there is a sample code snippet that it refers in `== Sample` paragraph, but in reality it's missing both from page's source and rendered page.


Related page https://github.com/apache/camel/blob/master/components/camel-seda/src/main/docs/seda-component.adoc","davsclaus:1568765529:2019-09-18T08:12:09.431+0000:1568765529:2019-09-18T08:12:09.431+0000:Contributions is welcome to update the page, you can edit from github directly or do a PR
zregvart:1568765902:2019-09-18T08:18:22.915+0000:1568765902:2019-09-18T08:18:22.915+0000:The [original wiki page|https://cwiki.apache.org/confluence/display/CAMEL/SEDA] seems to be pointing to {{camel-core/src/test/java/org/apache/camel/component/seda/SedaAsyncRouteTest.java}}, though the wiki markup seems to be mistyped and it shows a macro error instead, no wonder the conversion from wiki to asciidoc failed.

If you'd like to contribute a fix you can see how we include example code from [here|https://github.com/apache/camel/blob/044a81e4e0ee01513bb6d013a0c5522a8b6be321/docs/user-manual/modules/ROOT/pages/testing.adoc#L81-L84].
ravishankar hassain:1571718183:2019-10-22T12:23:03.762+0000:1571718257:2019-10-22T12:24:17.135+0000:I have tried to fix this. I have created the PR [https://github.com/apache/camel/pull/3273]

Please let me know, if this is okay or in case, I need to do something else
davsclaus:1571749468:2019-10-22T21:04:28.754+0000:1571749468:2019-10-22T21:04:28.754+0000:Thanks for the PR"
0,CAMEL-13991,Bug,Major,3.0.0.RC1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-09-18 07:21:49+00:00,2019-09-18 08:21:25+00:00,The fast component configurer is in use before we check whether the value is a #class etc which we need to do beforehand,
0,CAMEL-13990,Improvement,Minor,3.0.0.RC1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Omar Al-Safi,Omar Al-Safi,0,1,2019-09-17 13:28:16+00:00,2019-09-20 09:46:06+00:00,"Currently if the user sets invalid options in the UriEndpoint annotation, for example invalid schema name, the compilation will continue without failing, therefore it makes if we try to add a check in that apt compiler so the compilation will fail. We just need to make sure the end user can see the error message",
0,CAMEL-13989,Task,Minor,3.0.0.RC1,3.0.0.RC2,"
None
",Closed,Fixed,3.0.0.RC2,Omar Al-Safi,Omar Al-Safi,0,1,2019-09-17 13:02:15+00:00,2019-09-17 15:11:12+00:00,We need to add what is valid for the schema name in the javadoc,
0,CAMEL-13988,New Feature,Minor,3.0.0.RC1,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Omar Al-Safi,Omar Al-Safi,0,2,2019-09-17 12:46:56+00:00,2019-09-30 03:46:16+00:00,"Currently, when you marshal using camel-protobuf, it expects beforehand that you have already created your protobuf message as you can see here. I think is beneficial if the user can marshal the data automatically to protobuf provided he/she has the data in Map type and with the correct instance class name is provided. We can achieve this with the following steps:



In marshal method, we check if the graph object of type Map.class.
If it is of type Map.class, then using the defaultInstance.getDescriptorForType(), we obtain the Message Descriptor for the class instance.
Using the obtained descriptor, we iterate over map value and set the field from the descriptor.



By using this, the user can marshal data to Protobuf without the need to process it before as long he/she has the data in type Map. I can send a PoC PR if you guys find my proposal reasonable enough but from my the top of my head, it shouldn't be much of work to add this feature to camel-protobuf","acosentino:1568695768:2019-09-17T12:49:28.496+0000:1568695768:2019-09-17T12:49:28.496+0000:Maybe this can enabled with an option, otherwise the behavior may change too much. So it makes sense to enable it. In this way the migration from camel 2 to camel 3 will be easier.
omarsmak:1568696272:2019-09-17T12:57:52.850+0000:1568696272:2019-09-17T12:57:52.850+0000:Yeah, sure we make this only configurable through an option switch and by default we have it disabled in order not to break any existing integrations.  
acosentino:1568696308:2019-09-17T12:58:28.269+0000:1568696308:2019-09-17T12:58:28.269+0000:+1 for me."
0,CAMEL-13987,Bug,Major,3.0.0.RC1,None,"
None
",Resolved,Fixed,3.0.0.RC2,Zoran Regvart,Zoran Regvart,0,1,2019-09-17 12:45:05+00:00,2019-09-19 09:07:36+00:00,We seem to have a number of older keystores containing certificates that have expired or use outdated algorithms (like DSA). I see locally some tests fail because of this. I think the easiest option could be to replace them with newer keystores.,zregvart:1568855256:2019-09-19T09:07:36.105+0000:1568855256:2019-09-19T09:07:36.105+0000:I think I found the most of the outdated ones. There still could be others that I'm not aware of. Closing for not.
0,CAMEL-13986,Improvement,Major,None,"3.0.0.RC2, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0, 2.25.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-09-17 08:31:03+00:00,2019-09-17 09:04:44+00:00,No Desc,
0,CAMEL-13985,Bug,Minor,3.0.0.RC1,3.0.0.RC2,"
None
",Closed,Not A Problem,3.0.0.RC2,Omar Al-Safi,Omar Al-Safi,0,2,2019-09-17 08:05:52+00:00,2019-09-17 13:28:29+00:00,"When you have a scheme name with upper case for example, e.g: @UriEndpoint(firstVersion = ""3.0.0-SNAPSHOT"", scheme = ""RobotFramework"", title = ""RobotFramework""), it will fail to populate the options and query params due to the case sensitivity in the schema name. It is expecting the schema json file to be robotframework.json but the generated one is RobotFramework.json and therefore it fails to populate the options due to this case sensitivity comparison","davsclaus:1568679285:2019-09-17T08:14:45.144+0000:1568679285:2019-09-17T08:14:45.144+0000:the scheme must be lower-case, eg robotframework, or robot-framework (the latter is better)
davsclaus:1568679321:2019-09-17T08:15:21.404+0000:1568679321:2019-09-17T08:15:21.404+0000:So its not a tooling issue, but the component use an invalid shceme name
omarsmak:1568679439:2019-09-17T08:17:19.771+0000:1568679439:2019-09-17T08:17:19.771+0000:but then the question is, how can we check for the naming, can we introduce some checks for the schema naming? 
omarsmak:1568680643:2019-09-17T08:37:23.707+0000:1568680643:2019-09-17T08:37:23.707+0000:It is not mentioned in the docs [https://github.com/apache/camel/blob/master/tooling/spi-annotations/src/main/java/org/apache/camel/spi/UriEndpoint.java#L41 |https://github.com/apache/camel/blob/master/tooling/spi-annotations/src/main/java/org/apache/camel/spi/UriEndpoint.java#L41], hence I think we need to make this clear to our users that has to be lower letter. [~davsclaus] do you think it makes since we introduce a check for this in the annotation processor plugin? 
davsclaus:1568694124:2019-09-17T12:22:04.107+0000:1568694124:2019-09-17T12:22:04.107+0000:Yeah lets

1. add javadoc to those annotations to mention the scheme is in lower case (a..z and only dash)
2. yeah we can try adding a check in that apt compiler so the compilation will fail. We just need to make sure the end user can see the error message
omarsmak:1568695736:2019-09-17T12:48:56.400+0000:1568695736:2019-09-17T12:48:56.400+0000:Perfect! Then to better manage this, I will create separate Jira tickets for #1 and #2 and close this one."
0,CAMEL-13984,Test,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Unassigned,Claus Ibsen,0,1,2019-09-17 05:22:29+00:00,2019-12-19 17:36:45+00:00,Related to this month changes somwhere.,"davsclaus:1568670372:2019-09-17T05:46:12.942+0000:1568670372:2019-09-17T05:46:12.942+0000:davsclaus:/Users/davsclaus/workspace/camel ((no branch, bisect started on master))/$ git bisect bad
ee5b49fa1a327bcee09fae67f456c3c6ef7cc064 is the first bad commit
commit ee5b49fa1a327bcee09fae67f456c3c6ef7cc064
Author: Guillaume Nodet <gnodet@gmail.com>
Date:   Thu Aug 29 14:05:51 2019 +0200

    [CAMEL-13912] Remove access to the route when reifying the error handlers

davsclaus:1568670500:2019-09-17T05:48:20.954+0000:1576748205:2019-12-19T17:36:45.804+0000:[~gnodet] so it seems there are some issues with this commit as it causes transactions to fail when doing async components with some EIPs as in these 2 failed tests

- AsyncEndpointJmsTXMulticastTest
- AsyncEndpointJmsTXRecipientListTest

which are in camel-jms


davsclaus:1568679365:2019-09-17T08:16:05.067+0000:1568679365:2019-09-17T08:16:05.067+0000:Had to revert the commit but polished it a bit and added a TODO for CMAEL-13912 to find another way."
0,CAMEL-13983,Improvement,Major,2.24.1,"3.0.0.RC2, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0, 2.25.0",Andrea Cosentino,imran raza khan,0,1,2019-09-16 18:51:15+00:00,2019-09-17 08:30:31+00:00,"As kubernetes/openshift API support Node create feature same should be available in kubernetes component.


Link for detail about Node Create API is following


https://docs.okd.io/latest/rest_api/api/v1.Node.html#Post-api-v1-nodes


As per following link and github, kubernetes-nodes only support following operation


https://oscerd.github.io/oscerd.github.io/2016/07/11/camel-kubernetes-introduction/


Nodes



listNodes
listNodesByLabels
getNode",
0,CAMEL-13982,Improvement,Minor,"3.0.0.RC2, 3.x",None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.x",James Netherton,James Netherton,0,1,2019-09-16 12:42:57+00:00,2019-09-16 13:42:32+00:00,At present the microprofile-metrics component only allows for the 'concurrent guage' type to be configured. This has some subtle differences to the standard gauge metric so it'd be good to support the standard type.,
0,CAMEL-13981,Bug,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Zoran Regvart,Zoran Regvart,0,1,2019-09-16 12:25:17+00:00,2019-09-16 15:13:35+00:00,Seems that the daily Karaf builds are failing for some time now. Oddly the generated Java source by the annotation processor DefinitionPropertyPlaceholderConfigurer.java is not generated while the seemingly exactly the same build for master (without Karaf integration tests) is.,"zregvart:1568607963:2019-09-16T12:26:03.692+0000:1568607963:2019-09-16T12:26:03.692+0000:I can't reproduce the issue locally. Perhaps we can add more verbose logging to the annotation processor to try to track down the issue.
zregvart:1568615316:2019-09-16T14:28:36.886+0000:1568615316:2019-09-16T14:28:36.886+0000:With the logging on the Karaf daily build the output is this:
{code}
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ camel-core ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 449 source files to /home/jenkins/jenkins-slave/workspace/camel.daily.karaf/core/camel-core/target/classes

[INFO] -------------------------------------------------------------
[WARNING] COMPILATION WARNING : 
[INFO] -------------------------------------------------------------
[WARNING] Found 197 elements annotated with XmlRootElement
[WARNING] Found 197 core elements
[WARNING] Found 0 spring elements
[WARNING] Found 0 elements annotated with XmlRootElement
[WARNING] Found 0 core elements
[WARNING] Found 0 spring elements
[INFO] 6 warnings 
[INFO] -------------------------------------------------------------
[INFO] -------------------------------------------------------------
[ERROR] COMPILATION ERROR : 
[INFO] -------------------------------------------------------------
[ERROR] /home/jenkins/jenkins-slave/workspace/camel.daily.karaf/core/camel-core/src/main/java/org/apache/camel/model/DefinitionPropertyPlaceholderConfigurer.java:[24,41] error: cannot find symbol
  symbol:   class DefinitionPropertiesPlaceholderProviderHelper
  location: package org.apache.camel.model.placeholder
[INFO] 1 error
[INFO] -------------------------------------------------------------
{code}

On my machine this is:
{code}
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ camel-core ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 449 source files to /home/zregvart/tmp/camel/core/camel-core/target/classes
[WARNING] Found 197 elements annotated with XmlRootElement
[WARNING] Found 197 core elements
[WARNING] Found 0 spring elements
[WARNING] Generating placeholder definitions helper for 144 definitions
[WARNING] Found 0 elements annotated with XmlRootElement
[WARNING] Found 0 core elements
[WARNING] Found 0 spring elements
[INFO] ------------------------------------------------------------------------
{code}

Seems that the {{processModelClass}} method does not generate the {{DefinitionPropertiesPlaceholderProviderHelper.java}}."
0,CAMEL-13980,Task,Minor,3.0.0.RC1,3.0.0.RC2,"
None
",Closed,Fixed,3.0.0.RC2,Omar Al-Safi,Omar Al-Safi,0,1,2019-09-16 11:49:04+00:00,2019-09-17 14:12:56+00:00,"Per the discussion here: https://github.com/apache/camel/pull/3164 , it will make sense to remove the watermark functions from the model files since they are not needed currently since we have the new website",
0,CAMEL-13979,New Feature,Minor,None,None,"
None
",Resolved,Implemented,3.x,Onder Sezgin,Onder Sezgin,0,1,2019-09-15 20:42:35+00:00,2019-09-18 08:24:59+00:00,No Desc,
0,CAMEL-13978,Improvement,Minor,2.24.1,"3.0.0.RC2, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0, 2.25.0",Andrea Cosentino,imran raza khan,0,2,2019-09-14 18:17:29+00:00,2019-09-20 07:18:07+00:00,"As kubernetes/openshift API support configmap watch feature same should be available in kubernetes component.


Link for detail about ConfigMap Watch API is following


https://docs.openshift.com/container-platform/3.11/rest_api/api/v1.ConfigMap.html


Discussion related to this is here


 https://camel.465427.n5.nabble.com/Re-http4-not-sending-exchange-data-further-in-route-for-kubernetes-API-td5842961.html


Code to achieve similar functionality with http4 is here


https://github.com/imranrazakhan/KubernetesConfigMapWatcher","imranrazakhan:1568610948:2019-09-16T13:15:48.413+0000:1568612454:2019-09-16T13:40:54.501+0000:Thanks for quick fix and i tested with 2.25.0-SNAPSHOT and its working as expected 

fromF(""kubernetes-config-maps://[https://localhost:8443?oauthToken=xxx&namespace=my-qa&trustCerts=true&operation=getConfigMap&labelKey=name&labelValue=my-config-map|https://localhost:8443/?oauthToken=xxx&namespace=my-qa&trustCerts=true&operation=getConfigMap&labelKey=name&labelValue=my-config-map]"")
 .to(""log:my?showAll=true&multiline=true"")
 .to(""mock:result"");

but one thing i would like to highlight is to get change on particular configmap we have to provide labelKey and labelValue , while creating ConfigMap these are not mandatory field so we may have configmap without labelkey and labelValue. so we should have option like resourceName to receive events.

Due to same reason official API ask for name of ConfigMap
/api/v1/watch/namespaces/$NAMESPACE/configmaps/$NAME
acosentino:1568612796:2019-09-16T13:46:36.054+0000:1568612796:2019-09-16T13:46:36.054+0000:You don't need the labelKey and labelValue to consume.

 

You can also use

 

fromF(""kubernetes-config-maps://%s?oauthToken=%s&namespace=myproject&resourceName=test"", host, authToken).process(new KubernertesProcessor())
 .to(mockResultEndpoint);

 

it will work anyway, resourceName is the name of the configMap in this case
imranrazakhan:1568613778:2019-09-16T14:02:58.367+0000:1568613778:2019-09-16T14:02:58.367+0000:I tested with resourceName

fromF(""kubernetes-config-maps://https://localhost:8443?authToken=xxx&trustCerts=true&namespace=my-qa&resourceName=my-config-map"")

and its not working infact first it pulled all ConfigMaps and now continuously pulling following message

[local:8443/...] my INFO Exchange[
, Id: ID-NB-118-1568642323667-0-677
, ExchangePattern: InOnly
, Properties: \{CamelCreatedTimestamp=Mon Sep 16 16:01:43 CEST 2019, CamelExternalRedelivered=false, CamelMessageHistory=[DefaultMessageHistory[routeId=route1, node=to1]], CamelToEndpoint=log://my?multiline=true&showAll=true}
, Headers: \{breadcrumbId=ID-NB-118-1568642323667-0-677, CamelKubernetesEventAction=MODIFIED, CamelKubernetesEventTimestamp=1568642503747}
, BodyType: io.fabric8.kubernetes.api.model.ConfigMap
, Body: ConfigMap(apiVersion=v1, binaryData=null, data=null, kind=ConfigMap, metadata=ObjectMeta(annotations=\{control-plane.alpha.kubernetes.io/leader={""holderIdentity"":""BRLNYCT004.local_719b83fa-d44b-11e9-9b55-d2c8065c1507"",""leaseDurationSeconds"":15,""acquireTime"":""2019-09-13T03:20:10Z"",""renewTime"":""2019-09-16T14:01:43Z"",""leaderTransitions"":108}}, clusterName=null, creationTimestamp=2019-04-09T09:55:28Z, deletionGracePeriodSeconds=null, deletionTimestamp=null, finalizers=[], generateName=null, generation=null, initializers=null, labels=null, name=kube-scheduler, namespace=kube-system, ownerReferences=[], resourceVersion=33452056, selfLink=/api/v1/namespaces/kube-system/configmaps/kube-scheduler, uid=9a91f501-5aad-11e9-bf0f-6ab2cd7f5c23, additionalProperties={}), additionalProperties={})
, Out: null: 
]
acosentino:1568614284:2019-09-16T14:11:24.337+0000:1568614284:2019-09-16T14:11:24.337+0000:I cannot reproduce this locally.
acosentino:1568614718:2019-09-16T14:18:38.582+0000:1568614718:2019-09-16T14:18:38.582+0000:Ok, reproduced. Let me have a look.
acosentino:1568616873:2019-09-16T14:54:33.278+0000:1568616873:2019-09-16T14:54:33.278+0000:It should be fixed now.
imranrazakhan:1568619441:2019-09-16T15:37:21.454+0000:1568619441:2019-09-16T15:37:21.454+0000:Tested, Thanks its working as per expectation."
0,CAMEL-13977,Improvement,Minor,"3.0.0.RC2, 3.x",None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.x",James Netherton,James Netherton,0,1,2019-09-13 15:00:31+00:00,2019-09-20 07:36:49+00:00,"It would be good to add some additional metrics to the route policy and event notifier.


I.e mimic some of the stats that Camel has traditionally exposed via JMX, like number of failed / completed / inflight exchanges.


At the moment some of them would have to be calculated or inferred from other metrics, which isn't very user friendly.


Also it'd be good to ensure all of the metric names and tags conform better to the MicoProfile metrics spec.",
0,CAMEL-13976,Bug,Minor,"2.24.2, 3.0.0.RC1","3.0.0.RC2, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0, 2.25.0",Andrea Cosentino,Maurice Betzel,0,1,2019-09-13 11:56:04+00:00,2019-09-23 09:46:57+00:00,"If on the receiving side of the AS2 request the payload processing fails, no MDN at all is returned. Add an option for returning a MDN with the Disposition type: Failed.",
0,CAMEL-13975,Improvement,Major,None,,"

help-wanted

",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,0,1,2019-09-12 15:09:50+00:00,2020-03-06 13:48:54+00:00,"Currently if we create a new release-note it will push older releases. So for RC1 we didn't create one. As a solution we could add an attribute `early-access: true` to the release note and have it not push out other releases.


That way it can also be featured in a separate early access section on the releases/downloads page.",
0,CAMEL-13974,Improvement,Minor,3.x,"3.0.0.RC2, 3.x","
None
",Resolved,Fixed,"3.0.0.RC2, 3.x",James Netherton,James Netherton,0,1,2019-09-12 08:24:32+00:00,2019-09-13 08:25:49+00:00,"Quite a few of the examples are missing component dependencies. Mainly for the timer and file components.


camel-example-fhir
camel-example-jdbc
camel-example-jooq
camel-example-management
camel-example-micrometer
camel-example-opentracing
camel-example-spring-xquery
camel-example-swagger-cdi
camel-example-widget-gadget-cdi
camel-example-zipkin",
0,CAMEL-13973,Improvement,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Andrea Cosentino,0,1,2019-09-12 08:17:55+00:00,2021-09-30 10:33:52+00:00,No Desc,
0,CAMEL-13972,Improvement,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Andrea Cosentino,0,1,2019-09-12 07:51:13+00:00,2021-09-30 10:33:52+00:00,No Desc,
0,CAMEL-13971,Task,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Andrea Cosentino,0,1,2019-09-11 14:55:17+00:00,2019-09-12 07:08:34+00:00,No Desc,
0,CAMEL-13970,Task,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Andrea Cosentino,0,1,2019-09-11 14:54:39+00:00,2019-09-12 07:08:40+00:00,No Desc,
0,CAMEL-13969,Bug,Minor,3.0.0.RC1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Omar Al-Safi,Omar Al-Safi,0,1,2019-09-11 14:45:42+00:00,2019-09-17 10:11:52+00:00,"When you have a property configuration in a component with class name longer than `40` character, the generated `[Component]NestedConfiguration` will contain a space character because of the wrap cut in the maven plugin to replace it with a new space and therefore the generated type name will contain a space which is invalid",
0,CAMEL-13968,Bug,Major,"2.24.1, 3.0.0.RC1","3.0.0.RC2, 2.25.0","

as2
content-type
http-headers
patch

",Resolved,Fixed,"3.0.0.RC2, 2.25.0",Andrea Cosentino,Sjoerd Brauer,1,3,2019-09-11 13:26:16+00:00,2019-09-19 07:22:21+00:00,"The AS2 component treats headers case-sensitive according to the switch case enum's. According to the RFC this should be case-insensitive: https://tools.ietf.org/html/rfc7230#section-3.2 


Headers should be treated case insensitive. 


This happens at:


package org.apache.camel.component.as2.api.entity.EntityParser;


in the method: parseMultipartSignedEntityBody
 at line: 487. Specifically the following lines:


lines: 523,526 and in the switch block that follows",acosentino:1568442383:2019-09-14T14:26:23.143+0000:1568442383:2019-09-14T14:26:23.143+0000:Can you create a PR for camel-2.x? Thanks.
0,CAMEL-13967,Improvement,Minor,3.0.0.RC1,"3.0.0.RC2, 3.x","
None
",Resolved,Fixed,"3.0.0.RC2, 3.x",James Netherton,James Netherton,0,1,2019-09-11 08:49:20+00:00,2019-09-11 08:56:23+00:00,"The example project has some missing dependencies. But when that issue is fixed, the metrics endpoint throws an exception:




Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: org.apache.camel.component.netty.http.NettyChannelBufferStreamCache to the required type: java.io.Writer with value org.apache.camel.component.netty.http.NettyChannelBufferStreamCache@12bfa333",
0,CAMEL-13966,Bug,Major,3.0.0.RC1,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Zoran Regvart,Zoran Regvart,0,1,2019-09-11 07:34:20+00:00,2019-09-11 08:22:33+00:00,When proxying via Netty-HTTP the body of the message can't be modified as the DefaultNettyHttpBinding reuses the HTTP request with body from the received request when acting as a HTTP proxy.,zregvart:1568161353:2019-09-11T08:22:33.403+0000:1568161353:2019-09-11T08:22:33.403+0000:Refactored a bit not to keep the origin request in Exchange property and check if the message still contains the origin request and tries to reuse it only for that case.
0,CAMEL-13935,Bug,Minor,3.0.0.RC1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,2,2019-09-03 15:32:35+00:00,2019-09-06 16:40:32+00:00,"The properties component spi has a setOverrideProperties that allow to use an arbitrary Properties object so it is possible that the properties it holds are not of type string. 


In case the properties component is asked to resolve a non string property, then it will fail as DefaultPropertiesLookup uses Properties::getProperty [¹] which returns null in case of the requested property is not of type string.


The error is a little bit misleading as it states: 




because of PropertiesComponent with name properties must be defined in CamelContext to support property placeholders. Property with key [the.body] not found in properties from text: in.body == {{the.body}}




[1] https://github.com/apache/camel/blob/master/components/camel-properties/src/main/java/org/apache/camel/component/properties/DefaultPropertiesLookup.java#L40","davsclaus:1567757548:2019-09-06T16:12:28.398+0000:1567757548:2019-09-06T16:12:28.398+0000:So we should make those setInitial / setOverride properties convert their values to string types
davsclaus:1567758115:2019-09-06T16:21:55.556+0000:1567758115:2019-09-06T16:21:55.556+0000:Okay I have a fix"
0,CAMEL-13934,New Feature,Major,None,None,"

gsoc2020

",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,2,5,2019-09-03 14:49:26+00:00,2020-08-26 12:20:15+00:00,"min.io is a s3 like blob store. So users have more freedom than being locked into aws


We can create a camel-minio component for it
https://github.com/minio/minio-java","nayanagamuhandiram:1579939116:2020-01-25T15:58:36.662+0000:1579939116:2020-01-25T15:58:36.662+0000:Hi, My name is Nayananga Muhandiram, Currently, I`m pursuing B.Sc Honours degree in Computer Science at the University of Jaffna, Sri Lanka. I'm particularly interested in this issue to complete as my GSoC 2020 project. I would like to request guidance regarding this issue. Thanks
zregvart:1582856406:2020-02-28T10:20:06.136+0000:1582856406:2020-02-28T10:20:06.136+0000:Hi [~nayanagamuhandiram], awesome, glad to have you on-board again, please pop over to the dev mailing list when you have a draft of your project proposal.
nayanagamuhandiram:1585129304:2020-03-25T17:41:44.357+0000:1585129304:2020-03-25T17:41:44.357+0000:Hello Mr Zoran, Thank you for your reply. I`ve submitted my GSoC 2020 proposal regarding this issue. Currently, I`m reading camel code and minIO docs to in order to the understand project scope thoroughly. Thank you
hien711:1585477539:2020-03-29T18:25:39.947+0000:1585477539:2020-03-29T18:25:39.947+0000:Hi, I also participate in GSoC. I am Bachelor student of Information Technology from Haaga-Helia Univesity of applied sciences in Finland. I just poped into the conversation and I wondered is it possible for many people work on the same issue? Or how it should work? If the issue has already taken by other student? Thanks :)
davsclaus:1597042602:2020-08-10T14:56:42.108+0000:1597042602:2020-08-10T14:56:42.108+0000:We need a spring-boot starter JAR for this
nayanagamuhandiram:1597053883:2020-08-10T18:04:43.588+0000:1597053883:2020-08-10T18:04:43.588+0000:will work on that"
0,CAMEL-13933,Improvement,Major,None,3.0.0,"

help-wanted

",Resolved,Implemented,3.0.0,Unassigned,Claus Ibsen,0,2,2019-09-03 14:21:03+00:00,2019-09-09 07:17:06+00:00,"We have user guide, component reference etc in the documentation menu. But we should have a menu item for the EIP patterns as they are otherwise a bit harder to find.",zregvart:1567984626:2019-09-09T07:17:06.978+0000:1567984626:2019-09-09T07:17:06.978+0000:Thanks to [~alexkieling] for the [pull request|https://github.com/apache/camel-website/pull/85].
0,CAMEL-13932,Task,Major,None,,"
None
",Resolved,Done,None,Zoran Regvart,Zoran Regvart,0,1,2019-09-03 08:52:49+00:00,2019-09-04 21:13:58+00:00,We should publish the 2.x component reference documentation. For that we need to backport the changes made for the documentation workflow to camel-2.x branch.,"zregvart:1567478536:2019-09-03T10:42:16.333+0000:1567479190:2019-09-03T10:53:10.078+0000:-Apparently this requires CAMEL-13173 as com.github.multiformats:java-multihash:pom:v1.1.0 cannot be downloaded at the moment.-

Hmm, the issue can be avoided by using JBoss Early Access repository ([https://repository.jboss.org/nexus/content/repositories/ea)] and jitpack.io repository.
zregvart:1567602838:2019-09-04T21:13:58.567+0000:1567602838:2019-09-04T21:13:58.567+0000:We now have both latest (3.x) and 2.x component reference published on the website."
0,CAMEL-13931,Bug,Minor,"2.23.3, 2.22.5, 2.24.1, 3.0.0.M4","2.23.4, 2.24.2, 3.0.0.RC2, 3.0.0, 2.25.0","

pull-request-available

",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.RC2, 3.0.0, 2.25.0",Claus Ibsen,Dimitri Kotlovsky,0,2,2019-09-02 20:12:25+00:00,2019-09-06 19:07:33+00:00,"Hi,


I face a requirement to place temp files in a folder at the same hierarchy as the output folder like this:



target/data/output/claus.txt
target/data/temp/claus.tmp



Using a simple route definition like:




from(""direct:a"").to(""file://target/data/output/?tempFileName=../temp/${file:name.noext}.tmp"")



 


If the temp folder does not exist, the GenericFileProducer should auto-create it. However, it only does so correctly for the tempFileName path, if it is relativ ""after"" the endpoint path. If it is above/before the endpoint path the tempFileName path will be created as a child of the endpoint path instead:



target/data/output/target/data/temp



This results in a NoSuchFileException when camel tries to write the temp file into the ""correct"" temp directory target/data/temp afterwards.


 


 


A very easy way to reproduce this is to use the 'parentFileUrl' instead of the 'fileUrl' in the createRouteBuilder method of FileProduceTempFileNameTest.java (https://github.com/apache/camel/blob/master/core/camel-core/src/test/java/org/apache/camel/component/file/FileProduceTempFileNameTest.java).","derdimi:1567521675:2019-09-03T22:41:15.384+0000:1567521675:2019-09-03T22:41:15.384+0000:I have created a pull request for master and will include a pull request for 2.x later tomorrow.
derdimi:1567608531:2019-09-04T22:48:51.759+0000:1567608531:2019-09-04T22:48:51.759+0000:Update: Pull request for 2.x created as well.
davsclaus:1567639582:2019-09-05T07:26:22.936+0000:1567639582:2019-09-05T07:26:22.936+0000:Thanks for reporting and the PRs
derdimi:1567768053:2019-09-06T19:07:33.106+0000:1567768053:2019-09-06T19:07:33.106+0000:Appreciate it. Thanks for the quick response and straightforward collaboration =)"
0,CAMEL-13930,Improvement,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Zheng Feng,Claus Ibsen,0,2,2019-09-02 13:54:37+00:00,2019-09-30 07:32:49+00:00,"There is likely a issue if you use http4 producer with basic auth, then it may read the message body when sending to the http server, that then returns a basic auth challenge to the client, that then re-submit the request with credentials included, and then the message body is re-send but due to streaming the body is not re-readable and you can get OEF exception


Caused by: org.apache.http.client.NonRepeatableRequestException: Cannot retry request with a non-repeatable request entity.
	at org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:226) ~[?:?]
	at org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:185) ~[?:?]
	at org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89) ~[?:?]
	at org.apache.http.impl.execchain.RedirectExec.execute(RedirectExec.java:111) ~[?:?]
	at org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185) ~[?:?]
	... 37 more","zhfeng:1569712616:2019-09-29T07:16:56.330+0000:1569712902:2019-09-29T07:21:42.863+0000:In this scenario, I think the option ""*authenticationPreemptive""* could set to true. The request and the auth can be sent and the negotiation is no longer necessary.
davsclaus:1569716421:2019-09-29T08:20:21.188+0000:1569716421:2019-09-29T08:20:21.188+0000:Ah that is a good point so the auth is handled eagerly. Maybe we can improve the documentation?
zhfeng:1569732732:2019-09-29T12:52:12.058+0000:1569732732:2019-09-29T12:52:12.058+0000:[~davsclaus] yeah, I could raise a PR to add this information in [http-component.adoc|https://github.com/apache/camel/blob/master/components/camel-http/src/main/docs/http-component.adoc], is it the right place ?
davsclaus:1569741451:2019-09-29T15:17:31.614+0000:1569741451:2019-09-29T15:17:31.614+0000:Yes its the right place"
0,CAMEL-13929,Improvement,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-09-02 13:32:36+00:00,2019-09-02 14:28:31+00:00,"As the ApiConsumer is scheduled poll based, but the endpoint was not its base class. Then options get out of sync and not documented either.",
0,CAMEL-13928,Bug,Major,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,1,2019-09-02 08:43:02+00:00,2019-09-02 08:58:44+00:00,"We have some broken links:




10:16:49  anchor not found from manual/latest/binding.html to manual/latest/binding.html#xref:components::index
10:16:49  anchor not found from manual/latest/event-message.html to manual/latest/event-message.html#xref:components::index
10:16:49  anchor not found from manual/latest/faq.html to manual/latest/faq.html#xref:components::index
10:16:49  anchor not found from manual/latest/servicepool.html to manual/latest/servicepool.html#xref:components::index 



as can be seen on the website build: https://builds.apache.org/job/Camel.website/job/master/149/console",
0,CAMEL-13927,Task,Major,None,,"
None
",Resolved,Done,None,Zoran Regvart,Zoran Regvart,0,1,2019-09-02 08:07:11+00:00,2019-09-02 08:11:59+00:00,"New version minor of Antora was released, we should upgrade to so we can use {{

{page-component-version}

}} page attribute. This upgrade might help with CAMEL-13910 also.",
0,CAMEL-13926,Improvement,Minor,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Mikael Andersson Wigander,0,4,2019-09-02 08:00:31+00:00,2019-10-02 12:01:46+00:00,"Add option to name a column to be used instead of property name as in the following example:


 
  




@CsvRecord(separator = "","") public class Order { @DataField(pos = 1) private int orderNr; @Link private Client client; @DataField(pos = 5) private String isinCode; @DataField(name = ""Name"", pos = 6) private String instrumentName; @DataField(pos = 7, precision = 2) private BigDecimal amount; @DataField(pos = 8) private String currency; @DataField(pos = 9, pattern = ""dd-MM-yyyy"") private Date orderDate; }



It affects the @DataField annotation and only for marshalling to csv.","hakuseki:1567503734:2019-09-03T17:42:14.334+0000:1567503734:2019-09-03T17:42:14.334+0000:One of the reasons for having this is when receiving party is a Microsoft solution where they expect naming convention beginning with captial letters which voids the Java notation…

 
davsclaus:1569828160:2019-09-30T15:22:40.435+0000:1569828160:2019-09-30T15:22:40.435+0000:Contributions is welcome
bedla:1569841897:2019-09-30T19:11:37.081+0000:1569841897:2019-09-30T19:11:37.081+0000:DataField annotation have columnName attribute, which should work exactly this way, or am I missing something here?
davsclaus:1569871632:2019-10-01T03:27:12.626+0000:1569871632:2019-10-01T03:27:12.626+0000:Ah okay, Michael try with that. Is this columnName not in the documentation?
hakuseki:1569874352:2019-10-01T04:12:32.641+0000:1569874352:2019-10-01T04:12:32.641+0000:The property is unavailable or not working. 
It’s is present in some examples but not as a property in component. 
hakuseki:1569907972:2019-10-01T13:32:52.324+0000:1569907972:2019-10-01T13:32:52.324+0000:Further investigation revelaed it actually works but the documentation is missing.

 

Sorry for wasting time and resources with this issue.

 

 
davsclaus:1569972036:2019-10-02T07:20:36.859+0000:1569972036:2019-10-02T07:20:36.859+0000:Okay can we update the documentation. Mikael, you can even just edit the docs directly from github webui, and it has a preview page. Then you can do that and it will submit it as a PR
davsclaus:1569988906:2019-10-02T12:01:46.569+0000:1569988906:2019-10-02T12:01:46.569+0000:Updated the docs"
0,CAMEL-13925,Improvement,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-09-02 07:45:07+00:00,2019-09-02 14:29:29+00:00,So its like the other components where we extend default classes,
0,CAMEL-13924,Bug,Major,"2.23.3, 2.24.1, 3.0.0.RC1",None,"
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.RC2, 3.0.0, 2.25.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-09-02 05:25:41+00:00,2019-09-02 06:18:44+00:00,No Desc,
0,CAMEL-13923,Task,Major,None,3.6.0,"

help-wanted

",Resolved,Fixed,3.6.0,Jan Bednar,Jan Bednar,0,5,2019-09-01 20:58:35+00:00,2020-09-16 10:19:17+00:00,"E.g. section ""USING DYNAMIC URIS"" in https://camel.apache.org/manual/latest/content-enricher.html, but it can be seen in many pages. There is already one user, who attempted to implement these backslashes into his code (CAMEL-13922).","zregvart:1567392249:2019-09-02T10:44:09.221+0000:1567392249:2019-09-02T10:44:09.221+0000:I might be wrong, but I don't think we need to escape {{$}} in {{[source]}} blocks.
zregvart:1583810224:2020-03-10T11:17:04.130+0000:1583810224:2020-03-10T11:17:04.130+0000:Some issues relating to the escaping can be seen on the website build:

{code}
[2020-03-10T10:03:24.732Z] asciidoctor: WARNING: contributor-guide.adoc: line 123: invalid style for listing block: code
[2020-03-10T10:03:24.732Z] asciidoctor: WARNING: native-mode.adoc: line 11: invalid style for listing block: code
[2020-03-10T10:03:24.732Z] asciidoctor: WARNING: native-mode.adoc: line 20: invalid style for listing block: code
[2020-03-10T10:03:46.962Z] asciidoctor: WARNING: skipping reference to missing attribute: camel-version
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: server-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: database-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: table-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: server-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: database-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: table-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: server-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: database-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: table-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: server-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: database-name
[2020-03-10T10:03:49.185Z] asciidoctor: WARNING: skipping reference to missing attribute: table-name
{code}

To reproduce run {{yarn antora --require ./menu.js site.yml}}. The quickest way to fix issues like these is to change the source asciidoc (.adoc) file in the locally cloned repository and point frome {{site.yaml}} to that repository (e.g. instead of {{git@github.com:apache/camel.git}} use {{../camel}}) and set {{branches}} to {{HEAD}}. More details in the [Antora documentation|https://docs.antora.org/antora/2.2/playbook/author-mode/].
Menekam:1584079985:2020-03-13T14:13:05.542+0000:1584080941:2020-03-13T14:29:01.468+0000:[~bedla]  and [~zregvart] can i work on this?
zregvart:1584250007:2020-03-15T13:26:47.460+0000:1584250007:2020-03-15T13:26:47.460+0000:[~Menekam] feel free to do so.
RimshaCh:1584606598:2020-03-19T16:29:58.074+0000:1584606598:2020-03-19T16:29:58.074+0000:Hi [~Menekam] are you still working on this issue? 
Menekam:1584693863:2020-03-20T16:44:23.963+0000:1584693863:2020-03-20T16:44:23.963+0000:hi [~RimshaCh] yes i am
RimshaCh:1584717436:2020-03-20T23:17:16.390+0000:1584717436:2020-03-20T23:17:16.390+0000:Oh okay,i'll work another issue 

bedla:1599968414:2020-09-13T11:40:14.772+0000:1599968414:2020-09-13T11:40:14.772+0000:How it is going [~Menekam]?
acosentino:1600034352:2020-09-14T05:59:12.207+0000:1600034352:2020-09-14T05:59:12.207+0000:I think you can go ahead [~bedla]"
0,CAMEL-13922,Bug,Major,2.24.1,,"
None
",Closed,Invalid,None,Unassigned,Vyacheslav Boyko,0,4,2019-09-01 19:48:45+00:00,2019-11-10 20:00:33+00:00,"I'm trying to describe a route with Enrich EIP. It should be done as:


1) template producer gives an year (2019, 2012 etc), set it in header and push the message into route


2) from that endpoint message should be enriched from URI composed by template:




from(""seda:calendar-update-process"")
        .setHeader(""calendar-uri"", simple(""xmlcalendar.ru/data/ru/${header[""+HEADER_YEAR+""]}/calendar.xml""))
        .log(LoggingLevel.WARN, log, ""Updating calendar from url: ${header.calendar-uri}"")
        .enrich(""http4:$\\{header.calendar-uri\\}"", (oldExchange, newExchange) -> {
            oldExchange.getIn().setBody(newExchange.getIn().getBody());
            return oldExchange;
        })





as described on https://camel.apache.org/manual/latest/content-enricher.html in part named 'Using dynamic uris'


 


But it cannot parse that expression. I get an error:


 




org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http4://$%5C%7Bheader.calendar-uri%5C%7D due to: Expected scheme-specific part at index 6: http4:
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:753)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80)
	at org.apache.camel.util.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:91)
	at org.apache.camel.processor.Enricher.resolveEndpoint(Enricher.java:299)
	at org.apache.camel.processor.Enricher.process(Enricher.java:165)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:298)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:210)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:155)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.URISyntaxException: Expected scheme-specific part at index 6: http4:
	at java.net.URI$Parser.fail(URI.java:2848)
	at java.net.URI$Parser.failExpecting(URI.java:2854)
	at java.net.URI$Parser.parse(URI.java:3057)
	at java.net.URI.<init>(URI.java:673)
	at org.apache.camel.component.http4.HttpComponent.createEndpoint(HttpComponent.java:269)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:130)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:706)
	... 15 common frames omitted","bedla:1567341476:2019-09-01T20:37:56.997+0000:1567341476:2019-09-01T20:37:56.997+0000:Please read that section in documentation again. You are missing *simple* after *enrich*.

Feel free to ask on mailing list, if following code will not work.
{code:java}
.enrich()
    .simple(""http4:${header.calendar-uri}"")
    .aggregationStrategy((oldExchange, newExchange) -> {
        oldExchange.getIn().setBody(newExchange.getIn().getBody());
        return oldExchange;
    })
{code}
onders:1573114301:2019-11-07T16:11:41.689+0000:1573114301:2019-11-07T16:11:41.689+0000:the issue is invalid but the expectation is valid at some point. i was fallen the same trap with similar use cases, it may be an enhancement. if there is no known stopper.
zregvart:1573387233:2019-11-10T20:00:33.747+0000:1573387233:2019-11-10T20:00:33.747+0000:Changing the endpoint URI is not something that can be done in this way. For this purpose there is [toD|https://camel.apache.org/manual/latest/toD-eip.html], which also has optimizations in certain components not to generate additional Endpoints at runtime."
0,CAMEL-13921,Bug,Major,3.0.0.RC1,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Guillaume Nodet,Benjamin Graf,0,4,2019-09-01 18:34:43+00:00,2019-12-19 17:36:28+00:00,"The karaf feature actually does not install camel-caffeine-lrucache. With DefaultLRUCache the JMS producer will get stopped causing a java.util.concurrent.RejectedExecutionException at runtime.


This can be reproduced (even non OSGi environment!) if camel-caffeine-lrucache is explicitly excluded in e.g. camel-test.



java.util.concurrent.RejectedExecutionException: null
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:139) ~[camel-jms-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:134) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.support.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:64) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at de.graf.camel.metadata.MetaDataInterceptor$ProcessorImpl.process(MetaDataInterceptor.java:163) ~[classes/:?]
	at org.apache.camel.support.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:93) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.scheduleSync(ReactiveExecutor.java:66) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:158) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:146) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:203) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$null$2(Pipeline.java:104) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:67) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.schedule(ReactiveExecutor.java:32) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.callback(DefaultReactiveExecutor.java:100) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.lambda$process$0(CamelInternalProcessor.java:183) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:210) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$process$0(Pipeline.java:84) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:84) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.scheduleSync(ReactiveExecutor.java:66) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:158) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$301(TransactionErrorHandler.java:44) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler$2.process(TransactionErrorHandler.java:228) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:225) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:189) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:36) ~[spring-tx-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) ~[spring-tx-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	at org.apache.camel.spring.spi.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:182) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:140) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:107) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:116) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.MulticastProcessor$MulticastState.lambda$run$1(MulticastProcessor.java:329) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.util.concurrent.AsyncCompletionService$Task.run(AsyncCompletionService.java:150) ~[camel-util-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:67) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.schedule(ReactiveExecutor.java:32) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.callback(DefaultReactiveExecutor.java:100) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.lambda$process$0(CamelInternalProcessor.java:183) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:122) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.MulticastProcessor$MulticastState.lambda$run$1(MulticastProcessor.java:329) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.util.concurrent.AsyncCompletionService$Task.run(AsyncCompletionService.java:150) ~[camel-util-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.scheduleSync(ReactiveExecutor.java:66) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:235) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Splitter.process(Splitter.java:111) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.support.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:64) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at de.graf.camel.metadata.MetaDataInterceptor$ProcessorImpl.process(MetaDataInterceptor.java:163) ~[classes/:?]
	at org.apache.camel.support.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:93) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.scheduleSync(ReactiveExecutor.java:66) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:158) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:146) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:203) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$null$2(Pipeline.java:104) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:67) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.schedule(ReactiveExecutor.java:32) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.callback(DefaultReactiveExecutor.java:100) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.lambda$process$0(CamelInternalProcessor.java:183) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:210) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$null$2(Pipeline.java:104) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:67) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.schedule(ReactiveExecutor.java:32) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.callback(DefaultReactiveExecutor.java:100) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.lambda$process$0(CamelInternalProcessor.java:183) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:210) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$null$2(Pipeline.java:104) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:67) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.schedule(ReactiveExecutor.java:32) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.callback(DefaultReactiveExecutor.java:100) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.lambda$process$0(CamelInternalProcessor.java:183) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:210) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$process$0(Pipeline.java:84) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:84) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.scheduleSync(ReactiveExecutor.java:66) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:158) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$301(TransactionErrorHandler.java:44) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler$2.process(TransactionErrorHandler.java:228) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:225) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:103) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.support.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:64) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at de.graf.camel.metadata.MetaDataInterceptor$ProcessorImpl.process(MetaDataInterceptor.java:163) ~[classes/:?]
	at org.apache.camel.support.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:93) ~[camel-support-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleSync(DefaultReactiveExecutor.java:75) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spi.ReactiveExecutor.scheduleSync(ReactiveExecutor.java:66) ~[camel-api-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:158) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.access$301(TransactionErrorHandler.java:44) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler$2.process(TransactionErrorHandler.java:228) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:225) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler$1.doInTransactionWithoutResult(TransactionErrorHandler.java:189) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.springframework.transaction.support.TransactionCallbackWithoutResult.doInTransaction(TransactionCallbackWithoutResult.java:36) ~[spring-tx-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140) ~[spring-tx-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	at org.apache.camel.spring.spi.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:182) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:140) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:107) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.spring.spi.TransactionErrorHandler.process(TransactionErrorHandler.java:116) ~[camel-spring-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.lambda$process$1(Pipeline.java:87) ~[camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:87) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:74) [camel-direct-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:189) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:90) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:87) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultProducerCache.send(DefaultProducerCache.java:147) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:153) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:187) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:195) [camel-base-3.0.0-RC1.jar:3.0.0-RC1]
	at de.graf.camel.metadata.MetaDataInterceptorTest.testRoundtrip(MetaDataInterceptorTest.java:176) [test-classes/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_222]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_222]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_222]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_222]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26) [junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27) [junit-4.12.jar:4.12]
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) [junit-4.12.jar:4.12]
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55) [junit-4.12.jar:4.12]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) [junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) [junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) [junit-4.12.jar:4.12]
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48) [junit-4.12.jar:4.12]
	at org.junit.rules.RunRules.evaluate(RunRules.java:20) [junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) [junit-4.12.jar:4.12]
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:365) [surefire-junit4-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:273) [surefire-junit4-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238) [surefire-junit4-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:159) [surefire-junit4-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384) [surefire-booter-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345) [surefire-booter-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126) [surefire-booter-3.0.0-M3.jar:3.0.0-M3]
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418) [surefire-booter-3.0.0-M3.jar:3.0.0-M3]","graben:1567421070:2019-09-02T18:44:30.984+0000:1567421070:2019-09-02T18:44:30.984+0000:Just adding caffeine will not help. There is still a lack in LRUCacheFactory which seems not to work in OSGi environments. And still the question of why does it not work with the default implementation?
acosentino:1567423096:2019-09-02T19:18:16.153+0000:1576748178:2019-12-19T17:36:18.548+0000:I think [~gnodet] may help here
acosentino:1567423109:2019-09-02T19:18:29.455+0000:1567423109:2019-09-02T19:18:29.455+0000:Reopened. Sorry for the confusion
davsclaus:1567459622:2019-09-03T05:27:02.911+0000:1567459622:2019-09-03T05:27:02.911+0000:There is a potential fix here
https://github.com/apache/camel/commit/a5d3e3453740829231bb58f9ebd9a151fa2a98b3

And karaf should install caffeine cache as it should be used
acosentino:1567459831:2019-09-03T05:30:31.457+0000:1567459831:2019-09-03T05:30:31.457+0000:Do you mean the camel-caffeine-lrucache dependency in camel-core feature?
davsclaus:1567461977:2019-09-03T06:06:17.589+0000:1567461977:2019-09-03T06:06:17.589+0000:Yeah
acosentino:1567463090:2019-09-03T06:24:50.956+0000:1567463090:2019-09-03T06:24:50.956+0000:This should be done now.
graben:1567468153:2019-09-03T07:49:13.701+0000:1567505021:2019-09-03T18:03:41.309+0000:Well, I think that are two topics.
 # How to get camel-caffeine-lrucache work under OSGi environment? (I'm still skeptical if it will work but not proofed yet) 
 ## Why is LRUCacheFactory not based on FactoryFinder SPI, I think this would make things easier
 # Why does the DefaultLRUCache not work?
 ## Why have two implementations of LRUCache if one might be ""useless""? :)

Greetings
 Benjamin
graben:1567928572:2019-09-08T15:42:52.057+0000:1567928572:2019-09-08T15:42:52.057+0000:Just tested with the latest SNAPSHOT build. Still does not work as expected. camel-caffeine-lrucache won't get initialized in OSGi environment!
acosentino:1567929898:2019-09-08T16:04:58.696+0000:1576748188:2019-12-19T17:36:28.685+0000:[~gnodet]  would you mind having a look?
gnodet:1568159116:2019-09-11T07:45:16.315+0000:1568159116:2019-09-11T07:45:16.315+0000:Resolved by:

  [https://github.com/apache/camel/commit/ae93bd9e5163cfab639869a333aa064fca76ad92]

  [https://github.com/apache/camel/commit/7082500b816b0a2e54d2c1f6ff47099965fe6e3d] 
graben:1568191870:2019-09-11T16:51:10.103+0000:1568191870:2019-09-11T16:51:10.103+0000:Works for me. (y)"
0,CAMEL-13920,Improvement,Minor,None,,"
None
",Resolved,Abandoned,None,Unassigned,Jan Bednar,0,3,2019-08-31 22:30:10+00:00,2022-09-02 11:33:56+00:00,"HTML tags seems to be stripped out when creating json schema from javadoc. Can we include some of safe tags, or replace them with markup, or find some other way to propagate formating from javadoc to website?


This can be seen specialy in file component for readLock option. Javadoc for this option contains nice <li> list of allowed values, but on website (and also in file.json) are tags excluded. This tends to description, which is really hard to read on website.","davsclaus:1567291514:2019-09-01T06:45:14.241+0000:1567291514:2019-09-01T06:45:14.241+0000:I dont think so as the text must be json valid, and also spring boot auto configuration dont allow all these syntaxes. So what we should do is to change the javadoc docs instead.
bedla:1567328364:2019-09-01T16:59:24.230+0000:1567328451:2019-09-01T17:00:51.961+0000:I havent found a way so far. Replacing html tags with markdown/adoc format is not possible too, because for lists we need new line break between entries and line endings are removed too in json model. Or anybody knows about some way to create inline lists with adoc format?
bedla:1567329824:2019-09-01T17:23:44.622+0000:1567331255:2019-09-01T17:47:35.640+0000:This can be hacked by explicitly adding *\n* on relevant lines in javadoc. Then are line endings propagated throught json model to website. But I am not sure how well this will be handled by other dependent tools and how this will look like on javadoc.io

 

Also if we find OK to include *\n* in javadoc, then we need to make adoc generator a bit smarter, to prefix table cell with *a|* , if description contains markdown tags. Without this prefix is content of cell interpreted as plain text.
bedla:1567342605:2019-09-01T20:56:45.818+0000:1567342605:2019-09-01T20:56:45.818+0000:Working on prototype and will open PR for discussion.
zregvart:1567390304:2019-09-02T10:11:44.384+0000:1567390304:2019-09-02T10:11:44.384+0000:One option perhaps could be to add more helpers to the {{tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/MvelHelper.java}} and use those in the Velocity templates. For example we currently have {{escape}} ([source|https://github.com/apache/camel/blob/969b03e62ba0baab729d77adf1602606f49db636/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/MvelHelper.java#L35]) used to escape certain character combinations in the resulting Asciidoc files ([example for endpoint options|https://github.com/apache/camel/blob/c19b4f976c78f9a92e88165d6faeeb962fbcd890/tooling/maven/camel-package-maven-plugin/src/main/resources/endpoint-options.mvel#L17]).
bedla:1567959743:2019-09-09T00:22:23.610+0000:1567959743:2019-09-09T00:22:23.610+0000:Initial support added in PR3137. Keeping this Jira open, because in PR was discussion about converting HTML javadocs to Ascidoctor, which is IMHO worth to explore. With current solution we dont detect inline markups, e.g. links, these are still stripped from javadoc. Solution proposed by [~zregvart] in PR will allow full support, but there could be some non trivial changes in tooling."
0,CAMEL-13919,Bug,Minor,3.0.0.M4,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Omar Al-Safi,0,2,2019-08-31 19:34:01+00:00,2019-09-06 07:35:55+00:00,"Steps to produce: 



Create an empty adoc file in any component.
Run camel-package:update-readme.
It will fail with the following error:


Caused by: java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
    at org.apache.camel.maven.packaging.UpdateReadmeMojo.updateAvailableFrom (UpdateReadmeMojo.java:510)
    at org.apache.camel.maven.packaging.UpdateReadmeMojo.executeComponent (UpdateReadmeMojo.java:151)
    at org.apache.camel.maven.packaging.UpdateReadmeMojo.execute (UpdateReadmeMojo.java:105)






As I can see here, it looks it will try to retrieve index although there are empty lines","omarsmak:1567251371:2019-08-31T19:36:11.192+0000:1567251371:2019-08-31T19:36:11.192+0000:Hey [~davsclaus] [~jbonofre], I am not really sure if that is _expected_ , but if you think this needs to be fixed, I would like to work on it 
davsclaus:1567291373:2019-09-01T06:42:53.081+0000:1567291373:2019-09-01T06:42:53.081+0000:Yeah sure you are welcome to fix this, as its a little bug
davsclaus:1567726555:2019-09-06T07:35:55.679+0000:1567726555:2019-09-06T07:35:55.679+0000:Thanks for the PR"
0,CAMEL-13918,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-31 16:08:29+00:00,2019-09-17 14:07:52+00:00,"UrlRewrite has been deprecated on 2.x, and should be removed for 3",
0,CAMEL-13917,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-31 07:40:15+00:00,2019-09-02 14:29:23+00:00,"You can configure them on the endpoint directly, so consumer.delay=5000 should just be delay=5000 and so on.","davsclaus:1567405763:2019-09-02T14:29:23.535+0000:1567405763:2019-09-02T14:29:23.535+0000:All support for consumer.xxx has been removed. All options should be declared on the endpoint, which also makes it support fast configuration, documented via the tools etc."
0,CAMEL-13916,Task,Major,None,"3.0.0.RC2, 3.0.0","

help-wanted

",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Claus Ibsen,0,3,2019-08-31 07:37:03+00:00,2019-09-12 06:05:14+00:00,We need to have the migration guide on the website,"zregvart:1567392445:2019-09-02T10:47:25.492+0000:1567392445:2019-09-02T10:47:25.492+0000:We could have the migration guide we currently have in the camel git repository move over to the camel-website repository and add a new menu item for it.
davsclaus:1567392665:2019-09-02T10:51:05.164+0000:1567392665:2019-09-02T10:51:05.164+0000:+1
alexkieling:1568022874:2019-09-09T17:54:34.637+0000:1568023015:2019-09-09T17:56:55.793+0000:[~zregvart] does [MIGRATION.md|https://github.com/apache/camel/blob/master/MIGRATION.md] need to be moved to [https://github.com/apache/camel/tree/master/docs/user-manual/modules/ROOT/pages] and converted to asciidoc?
zregvart:1568074339:2019-09-10T08:12:19.807+0000:1568074339:2019-09-10T08:12:19.807+0000:[~alexkieling] I think that makes perfect sense.
alexkieling:1568199935:2019-09-11T19:05:35.079+0000:1568199935:2019-09-11T19:05:35.079+0000:All PRs merged"
0,CAMEL-13915,Task,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Andrea Cosentino,Claus Ibsen,0,1,2019-08-29 05:46:44+00:00,2019-08-29 08:58:35+00:00,"This component is now failing on CI
https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/org.apache.camel.component.file.watch/


It fails for me all the time on mac osx, so a linux user could take a look to help.",
0,CAMEL-13914,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-08-29 05:13:35+00:00,2019-10-30 12:08:17+00:00,"Lets introduce a build/doBuild phase on Service so we have this callback when camel-quarkus is building the project, that we can use for build time optimization.


Currently we are using doInit a bit for that, but with this name it make it more obvious that its only for building phase.","davsclaus:1572400600:2019-10-30T09:56:40.075+0000:1572400600:2019-10-30T09:56:40.075+0000:I think the build phase should only be explicit invoked by camel-quarkus (and others which may support similar in the future)
and then leave this phase out for regular runtime of Camel (where we do init -> start -> stop)
"
0,CAMEL-13913,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-29 04:56:45+00:00,2019-09-01 10:00:14+00:00,They should use BeanIntrosepction which you can get from camel context,davsclaus:1567301281:2019-09-01T09:28:01.275+0000:1567301281:2019-09-01T09:28:01.275+0000:Only camel-bean and camel-facebook left which requires a bit more work
0,CAMEL-13912,Improvement,Major,3.0.0.RC1,None,"
None
",Resolved,Fixed,3.x,Guillaume Nodet,Guillaume Nodet,0,2,2019-08-28 12:44:37+00:00,2022-09-02 11:33:41+00:00,No Desc,davsclaus:1567757266:2019-09-06T16:07:46.038+0000:1567757266:2019-09-06T16:07:46.038+0000:Is this complete and can be resolved?
0,CAMEL-13911,Improvement,Major,3.0.0.RC1,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Guillaume Nodet,Guillaume Nodet,0,1,2019-08-28 12:38:57+00:00,2019-08-28 12:45:12+00:00,No Desc,
0,CAMEL-13910,Task,Major,None,,"
None
",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,1,1,2019-08-26 14:49:44+00:00,2019-09-02 10:16:32+00:00,"Some Asciidoc documents that are copied into the Antora directory structure, for example components and EIP patterns. When we render the Antora content the ""Edit this page"" link points to the derived (copied) file, so changes to that file will be lost if edited.


We need to point to the original file in the ""Edit this page"" link for the derived files.",
0,CAMEL-13909,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Hari Rao,0,2,2019-08-26 14:03:46+00:00,2023-08-09 09:26:06+00:00,"In the camel-swagger-rest-dsl-generator project, it is not generating .type & .outType rest dsl though available as part of openapi 2.0 (swagger) spec.


This is because in (as far as I investigated) in org.apache.camel.generator.swagger.OperationVisitor class we have the following code and beyond we do not have options to emit type & outType. Besides in the method, it is also not possible to pass User defined objects which will help to create those models.




void visit(final HttpMethod method, final Operation operation) {
 if (filter.accept(operation.getOperationId())) {
 final String methodName = method.name().toLowerCase();
 emitter.emit(methodName, path);

 emit(""id"", operation.getOperationId());
 emit(""description"", operation.getDescription());
 emit(""consumes"", operation.getConsumes());
 emit(""produces"", operation.getProduces());","davsclaus:1567406180:2019-09-02T14:36:20.918+0000:1567406180:2019-09-02T14:36:20.918+0000:Yeah it would be nice. This requires for input types, to check the parameters for message body, and see if it refers to a model and use that.

And for responses then its the same, likely to find the 200 status code."
0,CAMEL-13908,Task,Major,None,None,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,1,2019-08-25 14:32:12+00:00,2020-09-18 12:59:02+00:00,"Lets look at source code generate the EIP property placeholder to use a switch like we did for the components and endpoints. Then we can potentially avoid creating many lambda classes which adds to many loaded classes at runtime.


Also we could maybe generate 1 class for all EIP models instead of 1 class per model.",davsclaus:1600405142:2020-09-18T12:59:02.015+0000:1600405142:2020-09-18T12:59:02.015+0000:We have done this
0,CAMEL-13907,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-25 07:14:41+00:00,2019-08-25 11:43:02+00:00,"Those are no longer needed and it can free up a bit of memory hold by the cache. Mind the cache is weak anyway, but this makes it more explicit",
0,CAMEL-13906,Task,Major,None,None,"
None
",Resolved,Won't Fix,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-24 11:26:08+00:00,2019-08-24 13:56:17+00:00,"Properties component include some options which should not be there, as we should only take the getter/setter pairs that have @Metadata annotation","davsclaus:1566626177:2019-08-24T13:56:17.819+0000:1566626177:2019-08-24T13:56:17.819+0000:Ah okay so too many components rely on current behaviour with getter/setter pairs, and also inherited, like http / file/ftp components does etc."
0,CAMEL-13905,Task,Minor,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Andrea Cosentino,Claus Ibsen,0,2,2019-08-24 07:15:31+00:00,2019-09-09 10:51:25+00:00,"[INFO] Found 389 ascii document files
asciidoctor: WARNING: any23-dataformat.adoc: line 13: section title out of sequence: expected level 1, got level 2
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir
asciidoctor: WARNING: dropping line containing reference to missing attribute: examplesdir","davsclaus:1567758162:2019-09-06T16:22:42.342+0000:1567758162:2019-09-06T16:22:42.342+0000:Has this not been fixed?
zregvart:1567997485:2019-09-09T10:51:25.310+0000:1567997485:2019-09-09T10:51:25.310+0000:I don't see any lines in the [build output|https://builds.apache.org/job/Camel.website/job/master/165/consoleText]."
0,CAMEL-13904,Bug,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-23 18:33:37+00:00,2019-08-23 20:03:16+00:00,In some use-cases depending on how you run Camel then some early services for JMX may not get registered,
0,CAMEL-13903,New Feature,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Peter Palaga,0,5,2019-08-23 14:19:21+00:00,2020-01-02 14:30:00+00:00,This is motivated by our efforts to port the telegram component to Quarkus where RestEasy is available out of the box. https://github.com/apache/camel-quarkus/issues/74,"ppalaga:1566541553:2019-08-23T14:25:53.848+0000:1566541553:2019-08-23T14:25:53.848+0000:I could eventually start working on this. But I am not sure how much is this feasible politically. Replacing CXF with a non ASF alternative might perhaps be seen as controversial?
acosentino:1566541616:2019-08-23T14:26:56.716+0000:1566541616:2019-08-23T14:26:56.716+0000:This is not a bug. Camel-telegram works out of the box. The Quarkus effort is fine, but we can't do this kind of considerations for all the components. If it is something feasible to make it work on quarkus, ok, otherwise it won't be supported in Quarkus. Camel-quarkus is a subproject of Camel, not the Camel's reason for being. -1 for me.
acosentino:1566542567:2019-08-23T14:42:47.057+0000:1566542567:2019-08-23T14:42:47.057+0000:CXF is used a lot in Camel. So your question is not related to how much is controversial to eventually replace it with something else, the point is what are the technical reason to switch to resteasy and I don't see valid technical reason here. 
ppalaga:1566545689:2019-08-23T15:34:49.916+0000:1566545689:2019-08-23T15:34:49.916+0000:I agree this is not an issue from the Camel point of view. The issue exists solely on the side of Camel Quarkus, where the CXF REST client does not work out of the box in the native mode on Quarkus. The exact error messages can be seen in https://github.com/apache/camel-quarkus/issues/74 . 

Solving those issues in the CXF REST client is perhaps possible, but from our (camel-quarkus) point of view not preferred, because it is much more work than somehow switching the REST client implementation in the telegram component. 

So if simply replacing the CXF client with the RestEasy one does not find enough acceptance on the Camel side, let me try to find some other option and propose it here.


davsclaus:1573768056:2019-11-15T05:47:36.499+0000:1573768056:2019-11-15T05:47:36.499+0000:Lets make this adjustable so you can plugin resteasy instead of cxf. 

Also if we get a camel-resteasy component in the future, then we can switch over and let camel-telegram depend on camel-resteasy, which we do in other components too.


ppalaga:1575864358:2019-12-09T12:05:58.694+0000:1575864358:2019-12-09T12:05:58.694+0000:Some discussions happened in https://github.com/apache/camel-quarkus/pull/521 . The PR basically contains a new RestEasy and MicroProfile Rest Client based implementation of the Telegram component.

There is an agreement that we want to maintain as little Telegram code as possible in Camel Quarkus (in favor of Camel).

I questioned whether we want to make the component pluggable to allow for running with both CXF and RestEasy REST client, thus having to support two equivalent rest clients. That's more code, more bugs and more maintenance than having just one client.

Just switching from CXF to RestEasy in Camel was rejected at least by [~lburgazzoli]: bringing dependencies tailored to a specific platform may turn out to be a pain in the long term, because Camel needs to continue working on spring, karaf and eap. That's a persuasive argument for me.

[~acosentino] said

bq. The problem is just: are we doing this to support telegram on Quarkus? Or are we doing this because there is an improvement in the component? If the answer is the first, then we are doing things wrong. The original issue was opened as ""this is not working on Quarkus, lets change from CXF to Resteasy"" and, frankly, this is not a good reason for changing something that works. Also, it should be the opposite, camel-quarkus should make it work on Quarkus and the component in Camel should remain exactly the same. I think it's just a matter of priorities. Quarkus is just one of the platform we cover, it's not the only platform we need to cover.

I think it is legitimate for a subproject to propose changes, as long as they do not harm the ecosystem. I am far from wanting to dictate something. I am interested in finding a solution that is acceptable for all.

My proposal to implement Telegram without CXF or RestEasy, using just some HTTP client and Jackson found some support.

Let's cont. the discussion here.

lb:1575864589:2019-12-09T12:09:49.436+0000:1575864597:2019-12-09T12:09:57.674+0000:Just a minor correction, I'm against bringing Micro Profile specific code, not RESTEasy 
acosentino:1575865043:2019-12-09T12:17:23.213+0000:1575865043:2019-12-09T12:17:23.213+0000:Absolutely, a subproject can propose changes: the point is just why it is proposing changes. If there is a benefit for the end users, no problem. If it's just to add an extension to the subproject, no it's not useful. The original issue was slightly different than what you are proposing now, as I said, it was ""this doesn't work on Quarkus, lets switch to Resteasy"" and from a technical perspective, it's not a good reason to change the component.
ppalaga:1576481017:2019-12-16T15:23:37.850+0000:1576481017:2019-12-16T15:23:37.850+0000:I have sent a PR https://github.com/apache/camel/pull/3414"
0,CAMEL-13902,Task,Major,None,,"

help-wanted

",Resolved,Implemented,None,Unassigned,Zoran Regvart,1,4,2019-08-23 10:08:05+00:00,2020-03-09 14:50:58+00:00,"We can utilize javadoc.io to publish the JavaDoc for:



camel-api
camel-support
camel-util","mim_atn:1566776915:2019-08-26T07:48:35.939+0000:1566776915:2019-08-26T07:48:35.939+0000:Right now, the JavaDocs can be found at: https://www.javadoc.io/doc/org.apache.camel/<artifact>/<version>

I.e.: core components, current 2.x: [https://www.javadoc.io/doc/org.apache.camel/camel-core/2.24.1]
zregvart:1566825915:2019-08-26T21:25:15.109+0000:1566825915:2019-08-26T21:25:15.109+0000:We could add the ""API documentation"" link in the Hugo configuration (also manages the Antora menus) by creating another block similar to this one:

 

[https://github.com/apache/camel-website/blob/22bb87f8127ae3a95c1b581433aded691d34333d/config.toml#L59-L64]

 

And then increasing all the weights by one after it, so we get Getting started, User manual, Component reference, API documentation, Camel K... on the Documentation menu.

 

This menu item can point to a api.md that we can put here: [https://github.com/apache/camel-website/tree/master/content/docs] which in turn can have the links to javadoc.io for the 3.0 of the above mentioned artifacts and the 2.24 for camel-core.
aashnajena:1583475928:2020-03-06T14:25:28.841+0000:1583475928:2020-03-06T14:25:28.841+0000:Hi! Can I take up this issue? I'm looking at all the links given the comments above and I'd love to make my first contribution to the Camel website
zregvart:1583478163:2020-03-06T15:02:43.013+0000:1583478163:2020-03-06T15:02:43.013+0000:Hi [~aashnajena] of course, feel free to familiarize yourself with the website from the [README|https://github.com/apache/camel-website/blob/master/README.md] we have and how to get started in contributing from our [contribution guide|https://camel.apache.org/manual/latest/contributing.html].

I think we can start by publishing the documentation for the camel-spi. I am a bit worried that the big menus we currently have reflect poorly on the usability of the site. I think we could use also some ideas in this area on how to best organize and present all the documentation we have.
aashnajena:1583488489:2020-03-06T17:54:49.741+0000:1583491498:2020-03-06T18:44:58.330+0000:Hi Zoran,

I have added a block similar to [https://github.com/apache/camel-website/blob/22bb87f8127ae3a95c1b581433aded691d34333d/config.toml#L59-L64|http://example.com/] 

I am able to display the option ""API Documentation"" in the menu now (see image). Can you tell me which webpage this link should navigate to? And what should be the content of that webpage?

Your comment above says that this menu option should point to api.md file. Should this menu option direct to the GitHub page with the api.md file (this is how building.md is displayed in public/docs/building/index.html)? Or should it direct to a webpage like /manual/latest/getting-started.html etc? I also need some idea about what should be the content of this file.

The Documentation tab in the navbar has 10 links in the drop-down as of now. Each page has several more links, which is a little confusing for the user. Should we think of reorganising this after we add API documentation?
zregvart:1583727902:2020-03-09T12:25:02.037+0000:1583727902:2020-03-09T12:25:02.037+0000:[~aashnajena] I think we should point to https://www.javadoc.io/doc/org.apache.camel/camel-api/latest/index.html this constitutes the public API of Camel. The usability issues of the documentation menu are discussed in CAMEL-14581. The static content in {{content/docs}} is built by Hugo and published as HTML.
aashnajena:1583731904:2020-03-09T13:31:44.689+0000:1583731968:2020-03-09T13:32:48.909+0000:[~zregvart] Sounds great! For now, I'll add an ""API documentation"" under the ""Documentation"" menu and point it to [https://www.javadoc.io/doc/org.apache.camel/camel-api/latest/index.html |http://example.com]/]

After that I'll start working on issue-14581 and propose some ideas for reorganisation. Is that okay?
zregvart:1583736658:2020-03-09T14:50:58.018+0000:1583736658:2020-03-09T14:50:58.018+0000:Thanks to [~aashnajena] for the pull request."
0,CAMEL-13901,Improvement,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-23 07:39:18+00:00,2019-09-30 07:56:41+00:00,"Lets just add instructions in the readme and avoid running it on each build. Its used for setting up the project for tooling support, and if you want to have it to do auto-detection of certain JMS clients - eg ActiveMQ vs Artemis and adapt the project accordingly.",
0,CAMEL-13900,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",James Netherton,James Netherton,0,2,2019-08-23 06:48:16+00:00,2019-09-05 07:30:35+00:00,"I was experimenting with Camel & Quarkus and hit a JAXB related issue.


Seems that some of the Camel jaxb.index files reference classes that do not exist. It'd be good to clean these up.


Here's a summary:





File
Class


./core/camel-core-xml/src/main/resources/org/apache/camel/core/xml/util/jsse/jaxb.index
ClientAuthenticationDefinition


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
AttributeChangeNotification


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
JMXConnectionNotification


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
MBeanServerNotification


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
MonitorNotification


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
NotificationEventType


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
ObjectNamesType


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
RelationNotification


./components/camel-jmx/src/main/resources/org/apache/camel/component/jmx/jaxb/jaxb.index
TimerNotification","jamesnetherton:1566514333:2019-08-23T06:52:13.738+0000:1566514333:2019-08-23T06:52:13.738+0000:Maybe the classes mentioned camel-jmx are ok actually as they come from javax.management packages. So maybe it's just ClientAuthenticationDefinition that needs cleaning up.
davsclaus:1567208528:2019-08-31T07:42:08.181+0000:1567208528:2019-08-31T07:42:08.181+0000:Yeah the jmx component are using those, so its only that in camel-core. However I thought they were auto-generated now, so I wonder how that client definition gets in there?
jamesnetherton:1567398096:2019-09-02T12:21:36.903+0000:1567398096:2019-09-02T12:21:36.903+0000:I think the jaxb.index files in camel-core-xml src/main/resources are (probably) out of date. The generate-jaxb-list mojo is auto generating the .index file, but none of the org.apache.camel.core.xml.util.jsse classes are in there because they are annotated with @XmlType. The Maven plugin only processes classes annotated with @XmlRootElement or @XmlEnum.class.

 

Should we tweak the plugin to include @XmlType? Either way I think we can remove the stale jaxb.index file(s) from the repository.
davsclaus:1567398541:2019-09-02T12:29:01.873+0000:1567398541:2019-09-02T12:29:01.873+0000:Ah yeah sounds like a plan, you are welcome to work on this"
0,CAMEL-13899,Improvement,Major,None,,"
None
",Closed,Won't Fix,None,Unassigned,Daniel Diehl,0,2,2019-08-22 18:29:05+00:00,2019-08-22 22:08:16+00:00,"Currently when you set a route as Fault Camel disregards the HTTP_RESPONSE_CODE reader, not allowing user to set custom STATUS CODE. 


To allow more control of the faults the code could check if the user set the header. If the header is there we use it. otherwise set the default 500.


 


Example, in this case I would expect the response to be 401, but it was 500 instead:




        exchange.getOut().setFault(true);
        exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 401);","bedla:1566474344:2019-08-22T19:45:44.889+0000:1566474344:2019-08-22T19:45:44.889+0000:Fault was removed in Camel 3.0.0 by CAMEL-13755. I dont think it is worth to implement something like this just for Camel 2.x.
ddiehl:1566482881:2019-08-22T22:08:01.523+0000:1566482881:2019-08-22T22:08:01.523+0000:Ok, going to close the ticket then. Thanks."
0,CAMEL-13898,New Feature,Major,None,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2019-08-22 15:40:12+00:00,2019-08-23 15:57:02+00:00,to keep the same behavior as normal soap response,
0,CAMEL-13897,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2019-08-22 10:50:38+00:00,2020-09-18 12:57:16+00:00,Just a reminder to look into if we can optimize this so when using JMX then less java reflection are in use.,davsclaus:1600405036:2020-09-18T12:57:16.133+0000:1600405036:2020-09-18T12:57:16.133+0000:JMX is not a part of quick small microservices or serverless like camel-k or grallvm based so lets just leave it out
0,CAMEL-13896,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-22 10:40:16+00:00,2019-08-31 07:42:42+00:00,No Desc,
0,CAMEL-13895,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-22 08:39:36+00:00,2019-09-02 15:38:58+00:00,"We are using generateConfigurer for fast endpoint configurer, so lets rename this for type converter loader to generateLoader on these annotations",
0,CAMEL-13894,Task,Minor,None,,"

help-wanted

",Resolved,Abandoned,None,Unassigned,Zoran Regvart,0,4,2019-08-22 07:39:27+00:00,2022-09-02 11:33:14+00:00,"Hugo has a feature where we can pull in data from JSON APIs we could use this feature to have a dynamic contributors page where we show names and avatars from GitHub of all contributors to Camel.


I think we could also have pull in data from Whimsy as JSON for PMC members and commiters.


This way we would not need to update contributors manually.","CynthiaOmovoiye:1583474543:2020-03-06T14:02:23.947+0000:1583474543:2020-03-06T14:02:23.947+0000:Hi, I am Cynthia Omovoiye. I an outreachy applicant and I would like to contribute to this project. Please, how do I get started?
zregvart:1583478331:2020-03-06T15:05:31.713+0000:1583478331:2020-03-06T15:05:31.713+0000:Hi [~CynthiaOmovoiye] First of all, thank you for having an interest in contributing to Apache Camel.

Here are some guidelines on how to best approach the Apache Camel community and how to best apply yourself.

1. Communication

Apache Camel is an Apache Software Foundation project, all communication is done in the open on the project mailing lists.

You can read more on the reasoning behind this to get a better understanding of:

https://www.apache.org/foundation/mailinglists.html

All communication is subject to the ASF Code of Conduct, which you can read here:

https://www.apache.org/foundation/policies/conduct.html

For questions and guidance around contributing subscribe to the developer's mailing list by sending an e-mail to dev-subscribe@camel.apache.org.

We can also be reached on the Gitter chat at https://gitter.im/apache/apache-camel/.

We track issues using ASF Jira located at:

https://issues.apache.org/jira/browse/CAMEL

Where we maintain a list of issues that are easy to get started with, so you can familiarize yourself with the process and get your first contribution in:

https://issues.apache.org/jira/issues/?filter=12348073

And some areas that we are actively looking for help on:

https://issues.apache.org/jira/issues/?filter=12348074

When you're ready to contribute create a Pull request to one of the Camel projects you can find under the Apache organization on GitHub:

https://github.com/apache?q=camel

Expect that your Pull request will receive a review and that you will need to respond and correspond to that via comments at GitHub.

2. Getting started

Read the ""Contributing to Apache Camel"" document on the Camel website:

https://camel.apache.org/manual/latest/contributing.html

Identify areas you can contribute first. You don't have to be an expert in an area, the Apache Camel developers are available to offer help and guidance.

Introduce yourself on the developer's mailing list (see above), tell us what area of work or problem you wish to address in Camel. Create a draft of your solution, this can be simple 1-2 sentences on the change you wish to make. Try to be as specific as you can: include a short description of your intent, what you tried and what didn't work, or what you need help with. The best way of approaching the developers is by describing what you would like to work on and asking specific questions on how to get started. We'll do our best to guide you and help you make your contribution. 

We also participate in Google Summer of Code and Outreachy programs, for information about those look at those program websites. If you wish to participate in either of those follow the guidelines and schedule set by those programs. If you're unsure please reach out via official communication channels of those programs, or ask on the developer's mailing list for help.

3. Your first contribution

Make sure you followed the steps and guidelines outlined above. For bigger changes, make sure that you have discussed on the developer's mailing list or in the Jira issue tracker before hand. We love receiving contributions, to get the best response make sure that the reasoning behind the contribution you wish to make is clear: outline the problem and explain your solution for it.

Make sure you follow the guidelines outlined in the ""Contributing to Apache Camel"" document. Be respectful of the source checks, formatting and the structure of the git commit message we abide by. This will help you in getting your contribution accepted. Outline any changes you made but are unaware or unsure of any consequences or side effects.

Stay engaged, follow and respond to comments or questions you might be asked.

With that I wish you all the best and please do have fun while contributing to Apache Camel, we certainly do :)
CynthiaOmovoiye:1583635851:2020-03-08T10:50:51.651+0000:1583635851:2020-03-08T10:50:51.651+0000:Hi, Zoran Regvart. Thank you for your assistance so far. I have subscribed to the user-help and dev-help mailing lists and I have identified my interest in this project and also asked for assistance and further information on this task but I am yet to receive a feedback. Please can you help me with guidance and more information on this task? Or direct me to the necessary channel. Thank you.
zregvart:1583726406:2020-03-09T12:00:06.047+0000:1583726406:2020-03-09T12:00:06.047+0000:Replied [on the mailing list|https://lists.apache.org/thread.html/rd6ff82e915ac180a5cae2ed992fd97bc060f5039f4378dd17d0282c2%40%3Cdev.camel.apache.org%3E]."
0,CAMEL-13893,Task,Major,None,3.0.0.RC1,"
None
",Resolved,Fixed,3.0.0.RC1,Zoran Regvart,Zoran Regvart,0,1,2019-08-22 07:13:25+00:00,2019-08-22 19:26:28+00:00,"We have test failures on master in the REST DSL Swagger Maven plugin integration tests:




Assertion failed: 

assert data.contains('<restConfiguration component=""jetty""/>')
       |    |
       |    false
       '<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>\n<ns2:rests xmlns:ns2=""http://camel.apache.org/schema/blueprint"">\n    <ns2:rest path=""/v2"">\n        <ns2:put consumes=""application/json,application/xml"" id=""updatePet"" produces=""application/xml,application/json"" uri=""/pet"">\n            <ns2:param description=""Pet object that needs to be added to the store"" name=""body"" required=""true"" type=""body""/>\n            <ns2:to uri=""direct:updatePet""/>\n        </ns2:put>\n        <ns2:get id=""findPetsByStatus"" produces=""application/xml,application/json"" uri=""/pet/findByStatus"">\n            <ns2:description>Multiple status values can be provided with comma separated strings</ns2:description>\n            <ns2:param arrayType=""string"" collectionFormat=""multi"" dataType=""array"" description=""Status values that need to be considered for filter"" name=""status"" required=""true"" type=""query""/>\n            <ns2:to uri=""direct:findPetsByStatus""/>\n        </ns2:get>\n        <ns2:get id=""findPetsByTags"" produces=""application/xml,application/json"" uri=""/pet/findByTags"">\n            <ns2:description>Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.</ns2:description>\n            <ns2:param arrayType=""string"" collectionFormat=""multi"" dataType=""array"" description=""Tags to filter by"" name=""tags"" required=""true"" type=""query""/>\n            <ns2:to uri=""direct:findPetsByTags""/>\n        </ns2:get>\n        <ns2:delete id=""deletePet"" produces=""application/xml,application/json"" uri=""/pet/{petId}"">\n            <ns2:param dataType=""string"" name=""api_key"" required=""false"" type=""header""/>\n            <ns2:param dataType=""integer"" description=""Pet id to delete"" name=""petId"" required=""true"" type=""path""/>\n            <ns2:to uri=""direct:deletePet""/>\n        </ns2:delete>\n    </ns2:rest>\n</ns2:rests>\n'",zregvart:1566460278:2019-08-22T15:51:18.967+0000:1566460278:2019-08-22T15:51:18.967+0000:I just pushed a quick fix that disables {{configurations}} in Any23 data format. I'll keep working on a solution that'll restore that functionality and at the same time not cause namespace issues in JAXB.
0,CAMEL-13892,Bug,Major,2.24.1,,"
None
",Resolved,Not A Problem,None,Unassigned,Sreejesh,0,2,2019-08-21 13:40:49+00:00,2019-08-22 04:59:39+00:00,"I have a Camel Spring Boot application where I am printing the value of a property which is set using Spring Cloud Config Server (via Git commit id plugin). The issue is that the value of the property in Camel application is not updated once the value is committed to Git. I have to restart the Camel application which fails the purpose of Spring Cloud Config server. Please note that we are using Git file system in our local machine.


The name of the properties file is CamelSpringBootSample-dev.properties.


As soon as I commit, the config server publishes the updated value at the endpoint on refresh: http://localhost:8888/CamelSpringBootSample/dev


I have also made the Camel application end point available at: http://localhost:8181/actuator/env


Here the value of the property is not updated on refresh. However, if I restart the Camel application, the value is reflecting.


The source code for all the three projects are uploaded in github.com.



The config server: https://github.com/sreejeshraj/config-server




The Camel client project (which uses the config server to configure itself): https://github.com/sreejeshraj/camel-config-server Please do not get misled by the repository name camel-config-server. This is the client of config server, but I accidentally named it incorrectly, apologies.




The local git repository where the configuration properties are stored: https://github.com/sreejeshraj/Git-Config



Please note that I have used the annotation @RefreshScope in my Spring bean component class.


Can you please help me with this? Thanks in advance","davsclaus:1566415727:2019-08-22T03:28:47.381+0000:1566415727:2019-08-22T03:28:47.381+0000:See answer on SO
https://stackoverflow.com/questions/57578808/spring-cloud-config-fails-to-update-properties-dynamically
sreejeshraj:1566416225:2019-08-22T03:37:05.550+0000:1566416276:2019-08-22T03:37:56.543+0000:Claus, thanks for the response. I have checked SO now, seems like there's no update from you yet.

Here, I forgot to mention one thing - I am calling the /actuator/refresh endpoint via POST. The Bean gets updated in the  /actuator/env endpoint, but Camel still uses the old value. Upon restart of the Camel application, it reflects the updated value. But that is not what is expected - Spring cloud config should update the value without manual restart.
sreejeshraj:1566416314:2019-08-22T03:38:34.746+0000:1566416314:2019-08-22T03:38:34.746+0000:I have updated in SO under comments for the answers.
davsclaus:1566416595:2019-08-22T03:43:15.420+0000:1566416595:2019-08-22T03:43:15.420+0000:Camel does not support this feature from spring cloud config - and we have no plans for that.
sreejeshraj:1566421179:2019-08-22T04:59:39.446+0000:1566421179:2019-08-22T04:59:39.446+0000:Thanks Claus for the clarification."
0,CAMEL-13891,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Freeman Yue Fang,Claus Ibsen,0,1,2019-08-21 12:33:56+00:00,2019-08-23 15:55:55+00:00,"https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/resources/META-INF/spring.schemas


Should have 2x for each pair


http\://camel.apache.org/schema/cxf/camel-cxf-3.0.0-M3.xsd=schema/cxfEndpoint.xsd
http\://camel.apache.org/schema/cxf/camel-cxf-3.0.0-M3-spring.xsd=schema/cxfEndpoint.xsd


For all of them, as then we have for old and new locations (eg when we had blueprint later)",
0,CAMEL-13890,Bug,Blocker,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Thomas Juul Malthesen,0,4,2019-08-21 10:53:59+00:00,2019-09-04 15:43:45+00:00,"Starting from yesterday suddenly all cfxEndpoints won't start. This is in production and all environments and on local machines.


My suspicion is some problems loading xmlns from camel. I get 403 - forbidden:


 


https://camel.apache.org/schema/cxf/


http://cxf.apache.org/jaxrs


 


It gives this exception:


 


springframework.beans.factory.xml.XmlBeanDefinitionStoreException: Line 1 in XML document from ServletContext resource [/WEB-INF/applicationContext.xml] is invalid; nested exception is org.xml.sax.SAXParseException: White spaces are required between publicId and systemId.
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:399)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336)
 at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217)
 at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188)
 at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125)
 at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94)
 at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)
 at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:613)
 at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:514)
 at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444)
 at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326)
 at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107)
 at com.ibm.ws.webcontainer.webapp.WebApp.notifyServletContextCreated(WebApp.java:2376)
 at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:1004)
 at com.ibm.ws.webcontainer.webapp.WebApp.initialize(WebApp.java:6566)
 at com.ibm.ws.webcontainer.osgi.DynamicVirtualHost.startWebApp(DynamicVirtualHost.java:467)
 at com.ibm.ws.webcontainer.osgi.DynamicVirtualHost.startWebApplication(DynamicVirtualHost.java:462)
 at com.ibm.ws.webcontainer.osgi.WebContainer.startWebApplication(WebContainer.java:1132)
 at com.ibm.ws.webcontainer.osgi.WebContainer.startModule(WebContainer.java:937)
 at com.ibm.ws.app.manager.module.internal.ModuleHandlerBase.deployModule(ModuleHandlerBase.java:99)
 at com.ibm.ws.app.manager.module.internal.DeployedModuleInfoImpl.installModule(DeployedModuleInfoImpl.java:49)
 at com.ibm.ws.app.manager.module.internal.DeployedAppInfoBase.deployModules(DeployedAppInfoBase.java:429)
 at com.ibm.ws.app.manager.module.internal.DeployedAppInfoBase.deployApp(DeployedAppInfoBase.java:415)
 at com.ibm.ws.app.manager.war.internal.WARApplicationHandlerImpl.install(WARApplicationHandlerImpl.java:65)
 at com.ibm.ws.app.manager.internal.statemachine.StartAction.execute(StartAction.java:140)
 at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.enterState(ApplicationStateMachineImpl.java:1258)
 at com.ibm.ws.app.manager.internal.statemachine.ApplicationStateMachineImpl.run(ApplicationStateMachineImpl.java:873)
 at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1160)
 at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
 at java.lang.Thread.run(Thread.java:812)
Caused by: org.xml.sax.SAXParseException: White spaces are required between publicId and systemId.","zregvart:1566356576:2019-08-21T11:02:56.413+0000:1566356576:2019-08-21T11:02:56.413+0000:Thanks for reporting this, we launched the new website and it has directory listings turned off, so that might be an issue in this case.

Can you share the XML declarations you have, I'm guessing you don't have {{schemaLocation}} defined for {{https://camel.apache.org/schema/cxf/}}.
tjuul:1566357086:2019-08-21T11:11:26.576+0000:1566357086:2019-08-21T11:11:26.576+0000:That was my suspicion to. But of course that should not be a problem when I have a schemaLocaltion which I do.

 

My XML looks like this:

 

<beans xmlns=""http://www.springframework.org/schema/beans""
 xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 xmlns:jaxrs=""http://cxf.apache.org/jaxrs""
 xmlns:cxf=""http://camel.apache.org/schema/cxf""
 xsi:schemaLocation=""
 http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
 http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
 http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
 http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd"">
 
 <import resource=""classpath:META-INF/cxf/cxf.xml""/>
 <import resource=""classpath:META-INF/cxf/cxf-servlet.xml""/>
 
 <cxf:cxfEndpoint id=""email.hent.service""
 address=""${CICS_SERVICES_URL}/services/RSBLA"" serviceClass=""rsbla.RSBLA"">
 <!-- cxf:inInterceptors>
 <ref bean=""loggingInInterceptor"" />
 </cxf:inInterceptors>
 <cxf:outInterceptors>
 <ref bean=""loggingOutInterceptor"" />
 </cxf:outInterceptors-->
 </cxf:cxfEndpoint>

 

If I have the cxf:cxfEndpoint inside my applicationContext.xml it fails if I remove it it starts up.

I can't figure out why. It is in all our running Apache Camel applications that uses cxf:cxfEndpoint, and it started yesterday afternoon - or at least after restart this morning.
zregvart:1566358029:2019-08-21T11:27:09.796+0000:1566358029:2019-08-21T11:27:09.796+0000:We enabled directory indexes for {{/schema/...}} on the website that should prevent you from getting the 403 error. Can you try again and report if it helped?
acosentino:1566358033:2019-08-21T11:27:13.630+0000:1566358033:2019-08-21T11:27:13.630+0000:Can you check now? [~zregvart] should have fixed it
tjuul:1566358558:2019-08-21T11:35:58.851+0000:1566358558:2019-08-21T11:35:58.851+0000:We don't get the 403 anymore, but still the same exception in the applications.

I wonder if it is in some sub-schemas down in cfx.xml or cfx-servlet.xml.
zregvart:1566358923:2019-08-21T11:42:03.915+0000:1566358923:2019-08-21T11:42:03.915+0000:It could be that the HTTP client trying to download those schemas is not following the redirects. If you do {{curl -v http://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd}} you'll get a redirect to https://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd with a HTML in the body. I think we need to disable HTTP to HTTP over TLS redirect for schemas.
tjuul:1566359336:2019-08-21T11:48:56.555+0000:1566359336:2019-08-21T11:48:56.555+0000:Yes I actually also saw a redirect permanently in the browser console earlier on:

 

This is the output I get:

 

C:\curl>curl -v http://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd
* Trying 40.79.78.1...
* TCP_NODELAY set
* Connected to camel.apache.org (40.79.78.1) port 80 (#0)
> GET /schema/cxf/camel-cxf-2.18.1-spring.xsd HTTP/1.1
> Host: camel.apache.org
> User-Agent: curl/7.55.1
> Accept: */*
>
< HTTP/1.1 301 Moved Permanently
< Date: Wed, 21 Aug 2019 11:47:23 GMT
< Server: Apache/2.4.18 (Ubuntu)
< Strict-Transport-Security: max-age=16070400; includeSubDomains
< Location: https://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd
< Cache-Control: max-age=0
< Expires: Wed, 21 Aug 2019 11:47:23 GMT
< Content-Length: 271
< Content-Type: text/html; charset=iso-8859-1
<
<!DOCTYPE HTML PUBLIC ""-//IETF//DTD HTML 2.0//EN"">
<html><head>
<title>301 Moved Permanently</title>
</head><body>
<h1>Moved Permanently</h1>
<p>The document has moved <a href=""https://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd"">here</a>.</p>
</body></html>
* Connection #0 to host camel.apache.org left intact
zregvart:1566359602:2019-08-21T11:53:22.372+0000:1566359602:2019-08-21T11:53:22.372+0000:Okay, so we're serving schemas over plaintext HTTP and there should not be a redirect with the HTML body to https. Does that fix the issue for you [~tjuul]?
tjuul:1566360391:2019-08-21T12:06:31.721+0000:1566360391:2019-08-21T12:06:31.721+0000:Great! It works... That was a hard one to find for me.

Thanks a lot...
davsclaus:1566361463:2019-08-21T12:24:23.758+0000:1566361599:2019-08-21T12:26:39.080+0000:Ah so in the camel-cxf JAR there are spring mapping files to map XSD namespaces to local files so it will not load over the internet.

And it has all versions

http\://camel.apache.org/schema/cxf/camel-cxf-2.18.1.xsd=schema/cxfEndpoint.xsd

And also without version number (most ppl use that)

So it may be something on your IBM WebSphere that causes something to load over the internet. You should be able to start up without internet connectivity
zregvart:1566361646:2019-08-21T12:27:26.201+0000:1566361646:2019-08-21T12:27:26.201+0000:Awesome, thank you again for reporting this so quickly, I'm sure others could face a similar issue and we got it fixed quickly because of that.

We can leave it as is, though as you have seen this could cause issues in the future if the Camel website becomes inaccessible for your application: think new network policy in place that forbids access to the Internet from production servers. Using XML schema resources from the Internet could also cause security issues for your application as the schema files can be modified as they pass unencrypted over networks that you do not control.
zregvart:1566361719:2019-08-21T12:28:39.560+0000:1566361719:2019-08-21T12:28:39.560+0000:Marking this as fixed with the confirmation from [~tjuul].
davsclaus:1566361734:2019-08-21T12:28:54.167+0000:1566361734:2019-08-21T12:28:54.167+0000:Ah you should not have -spring, eg

http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.18.1-spring.xsd"">

Should be

http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf-2.18.1.xsd"">
tjuul:1566371278:2019-08-21T15:07:58.139+0000:1566371278:2019-08-21T15:07:58.139+0000:I totally agree that it is not good that we need to talk to the internet and be dependent on that.

And let me just say that it absolutely worries our management how it could be possible to have almost all our internal and external solutions down for around 8 hours because of something like this :) 
So, let me try to understand it - the only thing we god wrong was the one namespace with -spring in it ?

If I change to [http://camel.apache.org/schema/cxf] [http://camel.apache.org/schema/cxf/camel-cxf-2.18.1.xsd] it would have worked ?
davsclaus:1566390371:2019-08-21T20:26:11.085+0000:1566390371:2019-08-21T20:26:11.085+0000:Look inside the camel-cxf JAR in the META-INF folder there are some spring files. They map http urls to the XSD file that are embedded inside the JAR so it works offline. You did not use an URL that matched any of those, eg as you had -spring.


tjuul:1567583025:2019-09-04T15:43:45.917+0000:1567583025:2019-09-04T15:43:45.917+0000:Ok, we have changed all the references to the correct ones and the applications are now in production.

Feel free to do the changes you did again :)"
0,CAMEL-13889,Improvement,Minor,None,,"

help-wanted

",Resolved,Done,None,Unassigned,Claus Ibsen,0,3,2019-08-21 07:27:13+00:00,2019-09-16 12:45:18+00:00,"Use Apache Camel instead of


Homepage - Apache Camel","zregvart:1566344201:2019-08-21T07:36:41.272+0000:1566344201:2019-08-21T07:36:41.272+0000:I think it would suffice to add:
{code:java}
{{ define ""title"" }}Apache Camel{{ end}}{code}

To the top of this file: https://github.com/apache/camel-website/blob/master/layouts/index.html
alexkieling:1568369131:2019-09-13T18:05:31.159+0000:1568369131:2019-09-13T18:05:31.159+0000:Each page has a different title, which is <page title> - <site title>. Do you want to only show the site title?
davsclaus:1568436060:2019-09-14T12:41:00.495+0000:1568436060:2019-09-14T12:41:00.495+0000:Ah yeah good point with each of the sub pages having their title too. Leeks keep that but rename the front page from

Home page - Apache Camel

To
Home - Apache Camel

Or maybe just
Camel - Apache Camel

Or
Apache Camel

zregvart:1568609118:2019-09-16T12:45:18.126+0000:1568609118:2019-09-16T12:45:18.126+0000:Merged from [pull request 89|https://github.com/apache/camel-website/pull/89], thanks to [~alexkieling]!"
0,CAMEL-13888,Task,Minor,None,,"

help-wanted

",Resolved,Abandoned,None,Unassigned,Dmitry Volodin,0,13,2019-08-21 06:31:22+00:00,2022-01-16 18:41:04+00:00,"It can be discussing, but would be nice to open all foreign links as new windows (tabs) for better usability while working with site, as some foreign resources not working correctly with return back to the original site page.


Thank you.","dmvolod:1566340461:2019-08-21T06:34:21.116+0000:1566340476:2019-08-21T06:34:36.355+0000:[~zregvart], what do you think about this change?
zregvart:1566344566:2019-08-21T07:42:46.809+0000:1566344566:2019-08-21T07:42:46.809+0000:I really have no idea, is this a common practice? I mostly CTRL+click on links to get them in a new tab. I'm not sure how we would do this, I guess for Asciidoc content we could write an Asciidoctor extension, for Hugo bits perhaps there's a setting we could use.

If we do this then we definitely would also need to add {{rel=""noopener noreferrer""}} to anchor tags to prevent any security issues.
zregvart:1566536748:2019-08-23T13:05:48.239+0000:1566536748:2019-08-23T13:05:48.239+0000:For Hugo generated content we can add this to the [config.toml|https://github.com/apache/camel-website/blob/master/config.toml]:
{code:yaml}
[blackfriday]
hrefTargetBlank = true
nofollowLinks = true
noreferrerLinks = true
{code}

Which also adds {{nofollow}}, {{noopener}} for {{target=""_blank""}} is [on by default|https://html.spec.whatwg.org/multipage/links.html#opener-processing-model].

For Asciidoc rendered content (user manual, component reference), we need to change the markup of external links:
{code:none}
http://example.com[Example link^,opts=nofollow,noreferrer]
{code}
dmvolod:1566785784:2019-08-26T10:16:24.832+0000:1566785784:2019-08-26T10:16:24.832+0000:Thanks for response [~zregvart]

Do you need help with foreign links in the adoc files? But the foreign links on the site, not inside the documentation would be nice to have.

 
zregvart:1566825625:2019-08-26T21:20:25.922+0000:1566825625:2019-08-26T21:20:25.922+0000:[~dmvolod] help with this that would be very welcome :)
aashnajena:1583405150:2020-03-05T18:45:50.996+0000:1583405150:2020-03-05T18:45:50.996+0000:I came across this issue on Apache's Outreachy landing page. 
Can anybody help me on how to get started?
I was able to build and run the website locally.
sabina-rohman:1583409326:2020-03-05T19:55:26.935+0000:1583409326:2020-03-05T19:55:26.935+0000:I am an Outreachy applicant for May 2020. I would like to work on your project. Can I please work on this issue, if it's still available?
 
psingh1999587:1583415224:2020-03-05T21:33:44.673+0000:1583415224:2020-03-05T21:33:44.673+0000:Hi, 
I am interested to work on this issue. I am an outreachy applicant 2020.
Please Help me get started
ojel:1583454658:2020-03-06T08:30:58.647+0000:1583454658:2020-03-06T08:30:58.647+0000:Hi,

I am an Outreachy applicant for 2020, Zoran Regvart sir, I need your guidance on how to start my contribution. Thanks.
jyotiattri:1583454673:2020-03-06T08:31:13.898+0000:1583454673:2020-03-06T08:31:13.898+0000:Hi, my name is Jyoti Attri and I 'm Outreachy applicant for May 2020. I am interested to work on this issue. Please help me to get started.
zregvart:1583458726:2020-03-06T09:38:46.696+0000:1583458726:2020-03-06T09:38:46.696+0000:Hi all, just in case you haven't already received this information on how to contribute I'll enclose it in here first, I'll try to address your individual comments next.

We much appreciate your interest and willingness to contribute, I don't think it makes much sense for all of you to work on the same issue. There's also no need to have a competition on who gets to contribute first, we have plenty of other issues (outlined below) that you can help with. Since most of you are interested in participating in the Outreachy program, and help with the website, please have a look at some issues in that area via this search:

https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20status%20%3D%20Open%20AND%20component%20%3D%20website

And feel free to propose new ideas by creating new issues around the website.

For those wondering how to get started contributing to the website.

Make sure have a [GitHub account|https://github.com/join], read how you can [get started|https://help.github.com/en/github/getting-started-with-github], and [create a pull request|https://help.github.com/en/github/collaborating-with-issues-and-pull-requests].

Have a look at the [README.md|https://github.com/apache/camel-website/blob/master/README.md] in the website project on how to build and how to preview your changes on your own computer.

I'll try to address the questions in you comments here, for future conversations please do subscribe to the developer's mailing list and send emails there, discussions on the Jira issues can get a bit out of control and it's not that easy to follow the conversation here.

The following text includes information on how to reach us, and get started:

First of all, thank you for having an interest in contributing to Apache Camel.

Here are some guidelines on how to best approach the Apache Camel community and how to best apply yourself.

1. Communication

Apache Camel is an Apache Software Foundation project, all communication is done in the open on the project mailing lists.

You can read more on the reasoning behind this to get a better understanding of:

https://www.apache.org/foundation/mailinglists.html

All communication is subject to the ASF Code of Conduct, which you can read here:

https://www.apache.org/foundation/policies/conduct.html

For questions and guidance around contributing subscribe to the developer's mailing list by sending an e-mail to dev-subscribe@camel.apache.org.

We can also be reached on the Gitter chat at https://gitter.im/apache/apache-camel/.

We track issues using ASF Jira located at:

https://issues.apache.org/jira/browse/CAMEL

Where we maintain a list of issues that are easy to get started with, so you can familiarize yourself with the process and get your first contribution in:

https://issues.apache.org/jira/issues/?filter=12348073

And some areas that we are actively looking for help on:

https://issues.apache.org/jira/issues/?filter=12348074

When you're ready to contribute create a Pull request to one of the Camel projects you can find under the Apache organization on GitHub:

https://github.com/apache?q=camel

Expect that your Pull request will receive a review and that you will need to respond and correspond to that via comments at GitHub.

2. Getting started

Read the ""Contributing to Apache Camel"" document on the Camel website:

https://camel.apache.org/manual/latest/contributing.html

Identify areas you can contribute first. You don't have to be an expert in an area, the Apache Camel developers are available to offer help and guidance.

Introduce yourself on the developer's mailing list (see above), tell us what area of work or problem you wish to address in Camel. Create a draft of your solution, this can be simple 1-2 sentences on the change you wish to make. Try to be as specific as you can: include a short description of your intent, what you tried and what didn't work, or what you need help with. The best way of approaching the developers is by describing what you would like to work on and asking specific questions on how to get started. We'll do our best to guide you and help you make your contribution. 

We also participate in Google Summer of Code and Outreachy programs, for information about those look at those program websites. If you wish to participate in either of those follow the guidelines and schedule set by those programs. If you're unsure please reach out via official communication channels of those programs, or ask on the developer's mailing list for help.

3. Your first contribution

Make sure you followed the steps and guidelines outlined above. For bigger changes, make sure that you have discussed on the developer's mailing list or in the Jira issue tracker before hand. We love receiving contributions, to get the best response make sure that the reasoning behind the contribution you wish to make is clear: outline the problem and explain your solution for it.

Make sure you follow the guidelines outlined in the ""Contributing to Apache Camel"" document. Be respectful of the source checks, formatting and the structure of the git commit message we abide by. This will help you in getting your contribution accepted. Outline any changes you made but are unaware or unsure of any consequences or sideeffects.

Stay engaged, follow and respond to comments or questions you might be asked.

With that I wish you all the best and please do have fun while contributing to Apache Camel, we certainly do :)
Ify:1583465617:2020-03-06T11:33:37.998+0000:1583465617:2020-03-06T11:33:37.998+0000:Hello [~zregvart]  I am an Outreachy applicant, I would like to work on this task.
roshni:1583841629:2020-03-10T20:00:29.919+0000:1583841629:2020-03-10T20:00:29.919+0000:[~zregvart]

Hi sir, I would like to raise a point that even if we rectify this issue, how will a user know that the link automatically opens up to a new tab. User is accustomed to open the links by ctrl+'click' so resolving this issue won't be of much help until user experiences the change. 

Well, thinking of the issue i came up with a solution too.

On hovering over the foreign links that are ought to be opened in a new tab, a hyperlink icon( [https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTDwswQEkx2fqzO8pA6x0GkgSoR2NzEKU2Mo7Qy4JBKYuvkKUj5] ) may pop up over mouse pointer. Viewing the icon user will have an idea of the link.

I'm an outreachy applicant trying to understand and improve the user experience and interaction on the website. Looking forward to contribute as a designer.

Thanks
favourori:1583875433:2020-03-11T05:23:53.144+0000:1583875433:2020-03-11T05:23:53.144+0000:I have fixed this & sent a PR: [https://github.com/apache/camel-website/pull/189]
zregvart:1583886689:2020-03-11T08:31:29.064+0000:1583886689:2020-03-11T08:31:29.064+0000:[~roshni] I agree, I think we should not force opening in a new window (tab), users can easily do that themselves if needed. What the issue here is, or should be, about is the security implications of linking to external sites without {{rel=""noopener,nofollow,noreferrer""}}. See [this blog post|https://mathiasbynens.github.io/rel-noopener/] for details. My comment above is how we can add this to the Hugo generated content, we also need a solution on how to do this for the Antora rendered content.
favourori:1583973802:2020-03-12T08:43:22.371+0000:1583973802:2020-03-12T08:43:22.371+0000:Hi [~zregvart] 

This is pretty vague to some extent. When you say foreign links, do you mean site-wide or just on the Menu (because I already fixed for the Menu) Thanks.

 

Awaiting clarification
zregvart:1583983553:2020-03-12T11:25:53.639+0000:1583983553:2020-03-12T11:25:53.639+0000:[~favourori] foreign links are all links that lead away from camel.apache.org, we need this change site wide.
favourori:1583985240:2020-03-12T11:54:00.084+0000:1583994423:2020-03-12T14:27:03.462+0000:Thanks for clarifying! Will handle today :)

 
favourori:1583993232:2020-03-12T14:07:12.668+0000:1583993232:2020-03-12T14:07:12.668+0000:[~zregvart] done!

 

 

All foreign links  now open in a new tab. Nav and site wide. Even newly added links
avgupt:1586478184:2020-04-10T08:23:04.417+0000:1586478184:2020-04-10T08:23:04.417+0000:[~zregvart] I think nobody is working on this issue right now. Can I take it up?
zregvart:1586849083:2020-04-14T15:24:43.587+0000:1586849083:2020-04-14T15:24:43.587+0000:[~avgupt] I don't think we have this resolved, not sure if [~favourori] is still working on this.
zregvart:1593255167:2020-06-27T18:52:47.165+0000:1593255167:2020-06-27T18:52:47.165+0000:From what I understand the current progress on this is that we have this for Hugo built pages, we do not have it for Antora built pages. For example on this page: [https://camel.apache.org/components/latest/aws-cw-component.html] there is a link to [https://aws.amazon.com/cloudwatch/] in the first paragraph that doesn't contain the {{rel=""nofollow noreferrer""}} attribute.
davsclaus:1642329664:2022-01-16T18:41:04.224+0000:1642329664:2022-01-16T18:41:04.224+0000:Create ticket on github at camel-website for tickets about the website"
0,CAMEL-13887,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Claus Ibsen,0,1,2019-08-21 06:26:04+00:00,2019-09-10 09:33:08+00:00,The former is deprecate and we should switch to MongoDBClient instead,
0,CAMEL-13886,Bug,Major,"3.0.0.M4, 2.25.0","3.0.0.RC2, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 2.25.0",Tadayoshi Sato,Tadayoshi Sato,0,3,2019-08-21 06:05:38+00:00,2019-09-13 09:31:14+00:00,"A Rest DSL route like the following causes java.io.IOException: Stream closed when invoked at http://localhost:8000/test/proxy:




        rest(""/test"")
                .get(""/proxy"")
                .to(""direct:callInternalRestService"");

        from(""direct:callInternalRestService"")
                .setHeader(Exchange.HTTP_METHOD, constant(""DELETE""))
                //.setBody(constant("""")) // workaround for null body and http4 component
                .to(""http4://localhost:9000/test?bridgeEndpoint=true"")
                .log(""${body}"");




The error stacktrace:




Caused by: java.io.IOException: Stream closed
	at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:372)
	at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:156)
	at org.apache.camel.util.IOHelper.copy(IOHelper.java:202)
	at org.apache.camel.util.IOHelper.copy(IOHelper.java:174)
	at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:234)
	at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:230)
	at org.apache.camel.http.common.HttpHelper.readResponseBodyFromInputStream(HttpHelper.java:245)
	at org.apache.camel.http.common.HttpHelper.readRequestBodyFromServletRequest(HttpHelper.java:196)
	at org.apache.camel.http.common.DefaultHttpBinding.parseBody(DefaultHttpBinding.java:577)
	at org.apache.camel.http.common.HttpMessage.createBody(HttpMessage.java:78)
	... 54 common frames omitted




This seems to happen only when Tomcat is used as the container with Spring Boot. Undertow doesn't cause such an issue.


The real root cause is that when an exchange has an HttpMessage with null body as its out message, then the next time Exchange.getMessage() is invoked the HttpMessage is tricked by the null body and tries to create body again with the already closed request input stream.","coheigea:1566364601:2019-08-21T13:16:41.961+0000:1566364601:2019-08-21T13:16:41.961+0000:[~tadayosi] - looks like this issues caused some test failures on 2.x in camel-servlet + camel-jetty: https://builds.apache.org/job/Camel/job/camel-2.x/230/#showFailuresLink
tadayosi:1566411055:2019-08-22T02:10:55.542+0000:1566411055:2019-08-22T02:10:55.542+0000:[~coheigea] Yes, I noticed the failures too. Working on it. Thanks for your notification.
davsclaus:1566503335:2019-08-23T03:48:55.322+0000:1566503335:2019-08-23T03:48:55.322+0000:Okay but this works for Camel 3.x? If so then we can have a fix here if we dont find a solution that works on the old 2.x and 3.x at the same time.
tadayosi:1566504719:2019-08-23T04:11:59.889+0000:1566504719:2019-08-23T04:11:59.889+0000:[~davsclaus] No, it turned out my previous fix was not really correct. I reverted it from both 2.x and 3.x. I'm working on a better fix right now."
0,CAMEL-13855,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-08-11 21:06:20+00:00,2019-08-12 11:38:38+00:00,the camel-microprofile-config should look into the registry in in addition to service files to lookup additional properties sources,
0,CAMEL-13854,Bug,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-08-11 21:04:47+00:00,2019-08-12 11:40:36+00:00,No Desc,
0,CAMEL-13853,Improvement,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Jan Bednar,Jan Bednar,0,3,2019-08-11 14:51:01+00:00,2019-08-19 18:39:18+00:00,"On WSL with Ubuntu 16.04.6 LTS method getNextAvailable iterates all ports and then crashes JVM (logs in attachments).


This can be reproduced by running AvailablePortFinderTest on one of these platforms.


We can take a look to other implementations, if they performs better and are usable on all supported OS.


//Edit: Removed W10 from environments, as I cannot reproduce it again. On WSL it is reproducible always.","zregvart:1565569129:2019-08-12T08:18:49.379+0000:1565569129:2019-08-12T08:18:49.379+0000:I don't think it's necessary to search for a free port, one can be assigned by the OS by using {{new ServerSocket(0)}} as [documented|https://docs.oracle.com/javase/8/docs/api/java/net/ServerSocket.html#ServerSocket-int-], then we can get the allocated port via {{ServerSocket::getLocalPort}} and close the the created {{ServerSocket}} that would make {{AvailablePortFinder}} much simpler and have better performance overall.
bedla:1565605892:2019-08-12T18:31:32.970+0000:1565605892:2019-08-12T18:31:32.970+0000:In current implementation the real issue is calling to _Socket#setReuseAddress_ after bind (call to bind is implicit in ServerSocket(int) constructor). The javadoc says the behavior of this is not defined - In full Linux, is this setter simply ignored, but in WSL this throws  _java.net.SocketException: Invalid argument._ . Because this exception is subtype of IOException, the method tries all ports untill exhausted.

Completely agree with ServerSocket(0) approach. I was thinking about the same. This will remove the startPort feature, but I really dont see much usefullnes in this for unit tests and the performance overhead of actual approach is huge. It is much better to delegate this work to OS.
davsclaus:1565607339:2019-08-12T18:55:39.056+0000:1565607339:2019-08-12T18:55:39.056+0000:Yeah sure you guys are welcome to use port(0) for camel 3 IMHO."
0,CAMEL-13852,New Feature,Major,"2.24.1, 3.0.0.M4","3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Unassigned,Marc Giger,0,2,2019-08-11 12:07:08+00:00,2019-08-15 05:44:20+00:00,"Support for OData action's.


PR follows.",davsclaus:1565819060:2019-08-15T05:44:20.196+0000:1565819060:2019-08-15T05:44:20.196+0000:Thanks for the PR
0,CAMEL-13851,New Feature,Major,"2.24.1, 3.0.0.M4",None,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Marc Giger,0,3,2019-08-11 06:46:23+00:00,2022-06-04 08:11:02+00:00,"Hi,


For a customer of mine i've setup an ESB infrastructure (JBoss Fuse) and implement camel routes for some time now. Until now i've used camel-xmljson that was nicely expressed ""not so nice"". It was always a pain to get the desired output and needed most of the time some hacks. Lately we had some performance issues with ""larger"" messages and the culprit was again the xmljson lib because of its excessive regex use. Apart from that camel-xmljson was removed from camel (correctly). So, time for a new component for direct xml <-> json conversion.


Thanks goes to ""Berner Fachhochschule"" to allow me to work and contribute the component.


On a high level the component works as follows:


xml -> xslt -> json and json -> xslt -> xml


This allows to transform the input document directly in the desired target structure without the need of an intermediary format.


More in detail:


xml -> xslt -> XmlJsonStreamWriter -> json


The XmlJsonStreamWriter is a custom impl. of javax.xml.stream.XMLStreamWriter that acts as a StAX -> JsonEvent bridge and uses internally com.fasterxml.jackson.core.JsonGenerator as json writer.


In the other direction:


json -> JsonXmlStreamReader -> xslt -> xml


Here the JsonXmlStreamReader is a custom impl. of avax.xml.stream.XMLStreamReader that acts as a JsonEvent -> StAX bridge and uses internally com.fasterxml.jackson.core.JsonParser as json reader.


The json -> xml conversion is fully event driven. That means that just the current token is held in memory. In the other direction, xml -> json, a internal tree needs to be built and therefore the complete json document is held in memory. Actually I can even see a possibility to stream it under some circumstandes.


The current implementation can be found in:


https://github.com/kayuma/camel/tree/camel-xj-component


The question is now if the camel community is interested in this contribution?


Open Issues:



Some of the classes are copies from the xslt component because of minor but important differences that are required to get XJ to work. Maybe we should refactor the xslt component so that it may be extended? Advice needed.
Documentation



And in the end it would be very nice, if the contribution is accepted, if it could be backported and integrated into camel 2.x


Thanks,


Marc","acosentino:1565482701:2019-08-11T08:18:21.153+0000:1565482701:2019-08-11T08:18:21.153+0000:I would say let's wait for RC1 first. Can you prepare a PR with this so we can review it and comment? It's easier in that way. For 2.x branch I think you'll need to create a new PR. It's not completely backportable from master to 2.x. Thanks for the moment :-)
bedla:1566136415:2019-08-18T21:53:35.436+0000:1566136415:2019-08-18T21:53:35.436+0000:Thanks for contribution. Comments in PR - we can discuss your needs for xslt refactoring in the PR, if you need any advice. The documentation should be resolved before merge (at least some basic one)."
0,CAMEL-13850,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-10 14:03:19+00:00,2019-08-14 07:53:19+00:00,"We do a bit of introspection on each model class to fin its getter/setter properties, which we can then use for property placeholders.


org.apache.camel.model.ProcessorDefinitionHelper#resolvePropertyPlaceholders


We should look at optimising this","davsclaus:1565419960:2019-08-10T14:52:40.438+0000:1565419960:2019-08-10T14:52:40.438+0000:A quick prototype then avoids doing reflections on our own model classes and therefore we will bootstrap Camel faster and also reduce memory.
davsclaus:1565652287:2019-08-13T07:24:47.868+0000:1565652287:2019-08-13T07:24:47.868+0000:You can see before vs after reduction of reflection class caches in this tweet
https://twitter.com/davsclaus/status/1161176136338018304?s=20

The remainder is not the model classes, but Camel components.
davsclaus:1565663840:2019-08-13T10:37:20.684+0000:1565663840:2019-08-13T10:37:20.684+0000:Okay so the component placeholder can likely be removed as configuring this is already supported via camel main / camel spring boot etc, and in xml you would spring or blueprint style.

Otherwise we would need to also do some apt compiler magic and generate source code for this, and it seems a bit overkill. 
davsclaus:1565684484:2019-08-13T16:21:24.257+0000:1565684484:2019-08-13T16:21:24.257+0000:Okay I have now the prototype to not use reflection at all for the EIP model, components, and the fields on Exchange. Now we generate java source code for fast property placeholders and field lookup on exchange."
0,CAMEL-13849,Improvement,Minor,None,3.x,"
None
",Resolved,Fixed,3.x,Andrea Cosentino,Claus Ibsen,0,1,2019-08-10 05:51:42+00:00,2019-10-07 06:59:03+00:00,"We are using 2.x, but there is a 3.x with a different group id",
0,CAMEL-13848,Improvement,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Tapio Piironen,0,2,2019-08-09 11:50:42+00:00,2019-08-10 06:12:52+00:00,Camel-xmpp does not support room passwords at the moment. With small patch it could. Patch file included.,"davsclaus:1565388772:2019-08-10T06:12:52.541+0000:1565388772:2019-08-10T06:12:52.541+0000:Thanks for the patch.

Maybe next time you want to provide patches via github PRs as they are better to use."
0,CAMEL-13847,Bug,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-09 09:30:01+00:00,2019-08-09 09:44:06+00:00,"So you can pass in uri parameters to the target endpoint, as today it will validate its own configuration only.",
0,CAMEL-13846,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,1,2019-08-09 09:26:50+00:00,2019-08-09 13:24:49+00:00,PropertyBindingSupport provides a number of flag to customize how properties should be bound to a target object and it is likely possible that in the future more flags are required so instead of adding yet another overloaded method for each flag we should turn PropertyBindingSupport intop a fluent builder,lb:1565314640:2019-08-09T09:37:20.952+0000:1565314640:2019-08-09T09:37:20.952+0000:We can implement CAMEL-13843 while doing this refactor
0,CAMEL-13845,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-09 09:10:29+00:00,2019-08-09 09:42:07+00:00,"We should hide this sensitive information, this requires to migrate it from uri path to uri parameter instead.",
0,CAMEL-13844,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Luca Burgazzoli,Claus Ibsen,0,2,2019-08-09 08:15:43+00:00,2020-03-18 12:48:20+00:00,"Its too complex when there are different rest configurations as it's intended for one global configuration. You dont have different rest services with different rest http servers and whatnot.


We should consider making this simpler and just have 1 configuration","davsclaus:1584334485:2020-03-16T12:54:45.471+0000:1584334485:2020-03-16T12:54:45.471+0000:Lets deprecate this for 3.2 and remove in 3.3. Or if we are quicker do it all for 3.2 - so its done before the LTS release
lb:1584505850:2020-03-18T12:30:50.337+0000:1584505850:2020-03-18T12:30:50.337+0000:Removed
lb:1584506642:2020-03-18T12:44:02.712+0000:1584506642:2020-03-18T12:44:02.712+0000:Upgrade doc PR https://github.com/apache/camel/pull/3649"
0,CAMEL-13843,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,1,2019-08-09 06:22:48+00:00,2019-08-09 13:25:07+00:00,No Desc,
0,CAMEL-13842,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Ramu,Leonardo Vasconcellos,0,2,2019-08-09 05:21:21+00:00,2019-09-05 03:20:50+00:00,"The Kafka Camel component ""hides"" the stacktrace of exceptions occurring in the following point. 




components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java
...
log.warn(""KafkaException consuming {} from topic {}. Will attempt to re-connect on next run"", threadId, topicName);
reConnect = true;
...



It makes difficult to know the root of the KafkaException exception (NullPointer for example) by seeing the log.


Maybe change the log.warn to handtleException so we can see the full stack trace in the log, since LoggingExceptionHandler logs the full stack trace.




...
getExceptionHandler().handleException(""KafkaException consuming "" + threadId + "" from topic "" + topicName + "". Will attempt to re-connect on next run"", e);
reConnect = true;
...","davsclaus:1565306371:2019-08-09T07:19:31.177+0000:1565306371:2019-08-09T07:19:31.177+0000:We dont want many big ugly stacktraces, so what we usually do can be to log the stacktrace at DEBUG logging level so you can change the logging level to that. And also we should add the exception message, eg + "" caused by: "" + e.getMessage then you can see that detail which helps indicate what the issue is
davsclaus:1565306386:2019-08-09T07:19:46.341+0000:1565306386:2019-08-09T07:19:46.341+0000:You are welcome to work on a PR"
0,CAMEL-13841,Improvement,Major,2.24.1,None,"

pull-request-available

",Resolved,Fixed,"3.0.0.RC1, 3.0.0, 2.25.0",Unassigned,Masa,0,2,2019-08-09 02:41:30+00:00,2020-03-03 16:15:39+00:00,"Pulsar messages are currently acknowledged immediately upon consumption, which could lead to lost messages if the application crashes or does not finish its unit of work. [Correction March 3, 2020 -- This is not correct. Pulsar messages are acknowledged after successful processing of the route, not immediately after consumption from the topic. Exceptions or errors on the route will correctly cause the message to remain unacknowledged.]


It would be desirable to add the ability to manually acknowledge a message consumed from Pulsar. The end user can decide when to acknowledge, or negative acknowledge a Pulsar message within the route. This will become a necessity when support for asynchronous processing of Pulsar messages is added.


Add a handle to the Pulsar consumer in a header in the Exchange so that the user can acknowledge the message at will similar to what was done for Kafka:


https://github.com/apache/camel/blob/camel-2.24.x/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaManualCommit.java


https://issues.apache.org/jira/browse/CAMEL-11933",davsclaus:1565641424:2019-08-13T04:23:44.031+0000:1565641424:2019-08-13T04:23:44.031+0000:Thanks for the PR
0,CAMEL-13840,Improvement,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Claus Ibsen,0,2,2019-08-08 18:24:33+00:00,2019-09-10 08:12:07+00:00,It would be good to get quickfix upgraded from 1.x to 2.x,acosentino:1568074306:2019-09-10T08:11:46.745+0000:1568074306:2019-09-10T08:11:46.745+0000:It's already at 2.1.1
0,CAMEL-13839,Sub-task,Blocker,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-08 12:28:09+00:00,2019-08-09 13:44:40+00:00,Seems that the external links are rendered verbatim text for example on the https://camel.apache.org/staging/components/latest/atmosphere-websocket-component.html page https://github.com/Atmosphere/atmosphere[Atmosphere] is rendered as such.,"zregvart:1565329480:2019-08-09T13:44:40.362+0000:1565329480:2019-08-09T13:44:40.362+0000:The issue was caused by NO-BREAK SPACE characters present in the asciidoc files, this lead to Asciidoctor not detecting the URLs."
0,CAMEL-13838,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.0.0.RC1,James Netherton,Claus Ibsen,0,3,2019-08-08 11:37:59+00:00,2019-08-22 07:20:40+00:00,"We should have a component for microprofile metrics spec/api, like we have for camel-micrometer etc.


https://microprofile.io/project/eclipse/microprofile-metrics","davsclaus:1565243408:2019-08-08T13:50:08.938+0000:1565243408:2019-08-08T13:50:08.938+0000:We can use this implementation
 https://github.com/smallrye/smallrye-metrics
jamesnetherton:1565919372:2019-08-16T09:36:12.541+0000:1565919372:2019-08-16T09:36:12.541+0000:I've started to work on this. Hence assigning to myself."
0,CAMEL-13837,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-08 07:51:45+00:00,2019-08-08 18:14:20+00:00,"When starting Camel we attempt to find custom factories for SPI. But this means we end up throwing 40+ exceptions just for a basic Camel route. We can optimize this to use null as response for ""no factory exists"".",
0,CAMEL-13836,Task,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-08-08 05:52:21+00:00,2019-08-08 06:26:19+00:00,No Desc,
0,CAMEL-13835,Task,Trivial,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-08-07 15:40:13+00:00,2019-08-07 18:46:29+00:00,camel-util pom configures the surefire plugin for unrelated things,
0,CAMEL-13834,Task,Trivial,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-08-07 15:20:35+00:00,2019-08-07 15:45:55+00:00,"camel-util does not provide a sfl4j binding leading to 




SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.




When running tests",
0,CAMEL-13833,New Feature,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-08-07 14:38:48+00:00,2019-08-07 18:46:36+00:00,No Desc,
0,CAMEL-13832,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-07 14:30:29+00:00,2019-08-07 18:37:57+00:00,"We should favour using OS ENV properties over JVM system properties out of the box, for the same keys. This works the best with containers and cloud platforms.",
0,CAMEL-13831,Sub-task,Major,None,,"

help-wanted

",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-07 10:08:22+00:00,2019-08-15 09:34:54+00:00,"There are ASF badges promoting ASF that we can place our logo within:


https://www.apache.org/foundation/press/kit/#badges


There's also a 20 year ASF anniversary logo we can use instead of the logo we currently have on the front page.",
0,CAMEL-13830,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Omar Al-Safi,Claus Ibsen,1,3,2019-08-07 07:29:02+00:00,2020-02-13 09:56:41+00:00,"I think it may be quicker and easier for new users to try our examples if we put them in a separate repo, so there is less source code. The git repo for Camel is very big, and it takes a longer time to checkout, and users may get lost in the source code.


If we have a camel-examples git repo with just examples we can refer people to this.","fpapon:1566264515:2019-08-20T09:28:35.256+0000:1566264515:2019-08-20T09:28:35.256+0000:Hi [~davsclaus]! Can I help by working on this issue?
davsclaus:1566268279:2019-08-20T10:31:19.036+0000:1566268279:2019-08-20T10:31:19.036+0000:At this moment we are not moving the examples. But would likely start doing this in 3.x, eg when we move spring-boot, karaf and other parts out of ""big camel"" and then it makes sense to also move examples out.
fpapon:1566334515:2019-08-21T04:55:15.488+0000:1566334515:2019-08-21T04:55:15.488+0000:Ok, let me know :)
davsclaus:1580882612:2020-02-05T14:03:32.298+0000:1580882612:2020-02-05T14:03:32.298+0000:The git repo is ready
https://github.com/apache/camel-examples
davsclaus:1581381923:2020-02-11T08:45:23.102+0000:1581381923:2020-02-11T08:45:23.102+0000:Fixed some build issues on examples. So we can remove the old code in the main repo.
Also it would be good to have a pom.xml in the root so you can build it asap from root.
Copy the pom.xml from camel-spring-boot and adjust etc.
omarsmak:1581382064:2020-02-11T08:47:44.770+0000:1581382064:2020-02-11T08:47:44.770+0000:Yeah already aware of it
omarsmak:1581555774:2020-02-13T09:02:54.341+0000:1581555774:2020-02-13T09:02:54.341+0000:[~davsclaus] most migration is done. What is left the maven plugin to generate the readme for the list. However, I have noticed the same plugin is used to generate the examples for the camel-spring-boot examples list, hence it would make sense to move it once we move all other examples from these repo to the came examples, WDYT?
davsclaus:1581558305:2020-02-13T09:45:05.945+0000:1581558305:2020-02-13T09:45:05.945+0000:Yeah that is fine, can you create a new JIRA about this then we can target this for Camel 3.2
omarsmak:1581558437:2020-02-13T09:47:17.770+0000:1581558437:2020-02-13T09:47:17.770+0000:sure will do (y)"
0,CAMEL-13829,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-06 18:38:26+00:00,2019-08-07 10:00:03+00:00,"Its a bad design to transfer Camel Exchange Java objects over the wire. Lets deprecate it in 2.x and remove in 3.0.


The camel-jms component has this option, and some of the http too, and others maybe.",davsclaus:1565143203:2019-08-07T10:00:03.053+0000:1565143203:2019-08-07T10:00:03.053+0000:Ah okay there can be a few use cases if you use JMS between same apps or something. I added a caution to the docs of using transferExchange instead
0,CAMEL-13828,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-06 12:46:44+00:00,2019-08-06 14:25:36+00:00,The exchange id should not be preserved as it should not mutate the existing ids,"davsclaus:1565072736:2019-08-06T14:25:36.563+0000:1565072736:2019-08-06T14:25:36.563+0000:Okay preserving it as there are some EIPs like SQL component with recovery which can store to disk and load again etc.

So its more transferExchange via JMS that should not do that etc."
0,CAMEL-13827,Improvement,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2019-08-06 09:56:19+00:00,2023-07-24 17:07:03+00:00,"We have too many with all the combos of their options. Instead we should have a few common, and then otherwise let users use the fluent api on the definition itself, and return back via end etc.",davsclaus:1565056597:2019-08-06T09:56:37.466+0000:1565056597:2019-08-06T09:56:37.466+0000:See the screenshot
0,CAMEL-13826,Sub-task,Minor,3.0.0.M4,None,"
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Alex Dettinger,Alex Dettinger,0,4,2019-08-05 14:05:31+00:00,2019-09-05 07:46:30+00:00,"We start this effort with below directions:


+ Users should be able to keep old JUnit 4 tests for a while


+ Ideally, it would be possible to migrate camel test per camel test


+ Keeping CamelTestSupport class name and the test by inheritance approach would make adoption and migration easier


+ CamelTestSupport based tests looks more concise than tests that would use some kind of  injection (e.g.  injection of the CamelContext and so on)


+ Adding a new module would allow users to get rid of JUnit 4 when they want (they simply stop using camel-test)


Conclusion:
 Users who want to stay on JUnit4 can still use the camel-test module.
 Users who want to migrate to JUnit5 could use the new camel-test-junit5 module and migrate their tests helped with the migration guide. Few camel components have been migrated, some tests could be migrated simply by changing few imports.


Note that it's possible to mix JUnit4 and JUnit5 tests by using camel-test, camel-test-junit5 in combination with junit-vintage-engine. Camel-xstream is intentionally mixing JUnit4/5 tests at this stage.


Migrating flaky tests to JUnit 5 is not recommended yet as there are still open discussions at JUnit 5 as well as Surefire level.","zregvart:1564987710:2019-08-05T14:48:30.437+0000:1564987710:2019-08-05T14:48:30.437+0000:Perhaps it might be good to name the new component {{camel-test-jupiter}} or {{camel-test-junit-jupiter}}, if I recall correctly, the engine of JUnit 5 is called Jupiter.
aldettinger:1564988390:2019-08-05T14:59:50.133+0000:1564988390:2019-08-05T14:59:50.133+0000:It's true that jupiter is more accurate in a way. And JUnit 5 could seems clearer to some users. I think you idea is a good opportunity to collect feedbacks in review or a kind of vote :+1
davsclaus:1564992612:2019-08-05T16:10:12.534+0000:1564992612:2019-08-05T16:10:12.534+0000:Hmm I am not keen of such name. 

People in general knows it as junit. And they would look for junit 5 support.

The name IMHO should either be

- camel-test5
- camel-test-junit5

The shorter name is what we are using generally, and gets my vote
acosentino:1564994213:2019-08-05T16:36:53.655+0000:1564994213:2019-08-05T16:36:53.655+0000:+1 for camel-test-junit5
zregvart:1565134887:2019-08-07T07:41:27.516+0000:1565134887:2019-08-07T07:41:27.516+0000:I think we should shield users from version changes. That's why I wonder if we'll need to create or rename {{camel-test-junit5}} to {{camel-test-junit6}} at some point in the future. I think putting versions in components has already caused us problems, and required users to perform, some times trivial, migrations.
davsclaus:1565135101:2019-08-07T07:45:01.404+0000:1565135101:2019-08-07T07:45:01.404+0000:We need to keep camel-test around as its the primary test module until this new one is stable and we have upgraded to junit 5. And then at a time we can drop camel-test and rename camel-junit5 to camel-test etc."
0,CAMEL-13825,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Claus Ibsen,0,3,2019-08-05 07:59:22+00:00,2019-11-11 18:56:50+00:00,"We should add in the adoc files generation of what the component support



consumer and producer
consumer only
producer only","davsclaus:1569477664:2019-09-26T14:01:04.339+0000:1569477664:2019-09-26T14:01:04.339+0000:This is a bit harder as the maven tooling that updates the adoc files only updates a few items in the top and then the tables with the options. 
zregvart:1569501919:2019-09-26T20:45:19.446+0000:1569501919:2019-09-26T20:45:19.446+0000:Could we put this information in the page attributes? [For example|https://github.com/apache/camel/blob/18cb3a5c49679293aaf494cdf15cef4021800639/docs/components/modules/ROOT/pages/activemq-component.adoc#L3] we use that to point to the original file for the ""Edit this page"" functionality. Perhaps coupled with a [partial|https://docs.antora.org/antora/2.1/asciidoc/include-partial/] whereby we could add this as generic content to all components and edit in a single place?
davsclaus:1569716684:2019-09-29T08:24:44.347+0000:1569716684:2019-09-29T08:24:44.347+0000:Yeah or we could add some logic to the maven plugin the first time so it adds a new // HEADER START // HEADER END section in the beginning of these docs, and then in the future we can manitain that part via templates. We did this when we added SB auto configuration etc.
omarsmak:1573434581:2019-11-11T09:09:41.184+0000:1573434581:2019-11-11T09:09:41.184+0000:Hey [~davsclaus] , just wanted to confirm before I start working on this, so what you purpose here is to add this section {{// HEADER START // HEADER END}}, I guess this is similar to what we do with the component options and spring boot options, is it?
davsclaus:1573438402:2019-11-11T10:13:22.784+0000:1573438402:2019-11-11T10:13:22.784+0000:Yeah that is correct, if we have a generated section in the top, before the component options etc, then we have a way of adding more details here such as whether the component can be producer, consumer, or body. And then more details in the future (async, webhook, runtimes supported etc)


omarsmak:1573439872:2019-11-11T10:37:52.710+0000:1573439872:2019-11-11T10:37:52.710+0000:+1 Thanks for the info "
0,CAMEL-13824,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Terrien Jean-Yves,0,3,2019-08-03 17:15:13+00:00,2019-08-05 10:00:12+00:00,"https://camel.apache.org/staging/components/latest/mongodb-component.html


the documentation refers to the older version.
""Note: MongoDB Camel component Use the Mongo Driver for Java 3.x. If your are looking for previews versions look the Camel MongoDB component.""
This corresponds to the doc of the older Camel MongoDB 3 component (using v3 driver). which referenced the older MongoDB Camel component (using V2 driver)
But the MongoDB Camel component (using V2 driver) has been removed and the component Camel MongoDB 3 component (using v3 driver) renamed Camel MongoDB
 component (using v3 driver).
The doc must be retifyed to no longer refer to the deleted version.


I propose to simply put
""Note: MongoDB Camel component Use the Mongo Driver for Java 3.x.""


I have not followed mongodb these last time, but it seems to me that there is a V4 driver.","bedla:1564824287:2019-08-03T17:24:47.589+0000:1564824287:2019-08-03T17:24:47.589+0000:This page is managed in [https://github.com/apache/camel/blob/master/components/camel-mongodb/src/main/docs/mongodb-component.adoc] , You are welcome to edit this file with proposed changes and submit PR on github.
acosentino:1564825199:2019-08-03T17:39:59.649+0000:1564825558:2019-08-03T17:45:58.773+0000:It's not updated to 4. We need to remove reference to mongodb3 because it has been renamed to mongodb. There is no update to 4 actually
sekaijin:1564825800:2019-08-03T17:50:00.468+0000:1564825800:2019-08-03T17:50:00.468+0000:My memory fails me.
the drivers versions 3.8 and up are compatible with mongodb 4.
camel uses 3.10.2 (latest) everything is ok on this side."
0,CAMEL-13823,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,None,Jan Bednar,Jan Bednar,0,1,2019-08-03 17:12:26+00:00,2022-09-02 10:37:24+00:00,"There are many java.nio.FileSystem implementations. We can create component camel-filesystem, which will allow user to plug any possible implementation of FileSystem and use it as consumer/producer.


This can solve:
 JimFS component - CAMEL-11300: JimFS fully implements java.nio.FileSystem
 WebDAV component - http://camel.465427.n5.nabble.com/CAMEL-and-WebDAV-td472524.html : User can use https://github.com/maddingo/nio-fs-provider


And because there exists some libraries, which acts as bridge between java.nio and commons-vfs, which user can use, this will add support to tens of other filesystems from commons-vfs.


This will also add direct support for consumig/producing files from/to zip file (ZipFileSystem is included in JDK), instead of marshalling/unmarshalling and splitting/aggregating.


Some thoughts:



For consumer we should not use WatchService, because WatchService implementation is not required for java.nio.FileSystem. Instead this we should use polling similar to camel-file implementation
The integration into existing codebase can be done seamlessly with new implementation GenericFile<Path>
Implementations of java.nio.file.Path are not required to implement toFile method. We should make sure, that Path will be never converted to File - Should be possible by implementing new GenericFileBinding<Path>",
0,CAMEL-13822,Task,Minor,None,None,"
None
",Resolved,Done,"3.0.0.RC1, 3.0.0",Jan Bednar,Jan Bednar,0,1,2019-08-03 14:35:46+00:00,2019-08-03 16:08:21+00:00,This will make code easier to understand and it will prevent errors during refactoring/removing methods in base classes/interfaces.,
0,CAMEL-13821,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,krishnath poologanathan,0,5,2019-08-02 17:03:00+00:00,2019-09-06 09:34:17+00:00,Corda client which uses camel  Corda component is unable to connect with Corda 4 node,"acosentino:1564736832:2019-08-02T17:07:12.716+0000:1564736832:2019-08-02T17:07:12.716+0000:That's normal. It's based on version 3 of the client. You're welcome to work on a PR.
acosentino:1564736871:2019-08-02T17:07:51.695+0000:1564736871:2019-08-02T17:07:51.695+0000:And it's not enough to upgrade. There is much more work to do 
pkrishnath:1564736971:2019-08-02T17:09:31.552+0000:1564736971:2019-08-02T17:09:31.552+0000:[https://github.com/apache/camel/pull/3081]
pkrishnath:1564737119:2019-08-02T17:11:59.812+0000:1564737150:2019-08-02T17:12:30.654+0000:will make further change and open a new PR
 
  
davsclaus:1565138116:2019-08-07T08:35:16.694+0000:1565138116:2019-08-07T08:35:16.694+0000:Any update on this
amolpednekar:1566519959:2019-08-23T08:25:59.599+0000:1566520142:2019-08-23T08:29:02.358+0000:+1; any update? Because v3.3 of the Java RPC library doesn't work at all with Corda v4 because they've changed the serialization format
(also can we tag the component as camel-corda so that its easy to filter?)
acosentino:1566520911:2019-08-23T08:41:51.437+0000:1566520911:2019-08-23T08:41:51.437+0000:There are not so much issue related to camel-corda, so a label for it is not really useful, you can use the filter function and [~amolpednekar] you're welcome to work on a PR for updating to 4
bedla:1566522920:2019-08-23T09:15:20.575+0000:1566522920:2019-08-23T09:15:20.575+0000:I dont know much about corda, but after reading docs it seems the interoperability is just with 3.3 client.
{quote}There is a bug in Corda 3.3 that causes problems when receiving a {{FungibleState}} created by Corda 4. There will shortly be a followup Corda 3.4 release that corrects this error. Interop between Corda 3 and Corda 4 will require that Corda 3 users are on the latest patchlevel release.
{quote}

This should be fixed in 3.4 client with [CORDA-2687|https://r3-cev.atlassian.net/browse/CORDA-2687]

Upgrade client between minor versions from 3.3 to 3.4 should be much easier. Can somebody with access to corda nodes test this? 
amolpednekar:1566523621:2019-08-23T09:27:01.970+0000:1566523653:2019-08-23T09:27:33.541+0000:In v4.0, the RPC API's themselves havent really changed, so dont think there'll be much to do other than changing the version of the library in the POM from 3.3 to 4.0/4.1 ([~acosentino] - Unless there's anything else you've noticed?)
 Will have to run the tests to confirm. Unless there's a requirement to add new RPC APIs as well.
acosentino:1566534548:2019-08-23T12:29:08.725+0000:1566534548:2019-08-23T12:29:08.725+0000:There is also the camel-corda karaf feature to check. I don't have a corda node to test against.. But updating seems to be straightforward.
amolpednekar:1567732996:2019-09-06T09:23:16.859+0000:1567732996:2019-09-06T09:23:16.859+0000:[https://github.com/apache/camel/pull/3153]"
0,CAMEL-13820,Improvement,Major,None,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Claus Ibsen,sumeet patil,0,2,2019-08-02 10:30:37+00:00,2019-09-30 07:42:54+00:00,"Misconfiguration of routes throws ResolveEndpointFailedException.


This exception prints sensitive information like passwords which should be masked.","davsclaus:1565138078:2019-08-07T08:34:38.776+0000:1565138078:2019-08-07T08:34:38.776+0000:Are you working on a PR?
sumeetp1991:1565169035:2019-08-07T17:10:35.207+0000:1565169035:2019-08-07T17:10:35.207+0000:Hi [~davsclaus],

Yes, I am working on this. I will raise a PR soon.

Thanks,

Sumeet
davsclaus:1567306584:2019-09-01T10:56:24.735+0000:1567306584:2019-09-01T10:56:24.735+0000:Any update on this?
davsclaus:1568700537:2019-09-17T14:08:57.360+0000:1568700537:2019-09-17T14:08:57.360+0000:Ay update on this?"
0,CAMEL-13819,Sub-task,Major,None,,"

help-wanted

",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-01 14:09:23+00:00,2019-08-15 10:09:32+00:00,"Currently we have ""2004-2018 The Apache Software Foundation"", the 2018 needs to be replaced by 2019, it would be good to have that value auto update with the current year.",
0,CAMEL-13818,Sub-task,Major,None,,"

help-wanted

",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-01 14:07:37+00:00,2019-09-16 13:04:24+00:00,"The news section of the site lacks design, currently it just shows the default list table, we could make this look more like blog post list. Individual news sections also lack design.","zregvart:1567556099:2019-09-04T08:14:59.757+0000:1567556099:2019-09-04T08:14:59.757+0000:Two layouts that are used to render the news section and individual news item are here:
https://github.com/apache/camel-website/blob/master/layouts/news/list.html
https://github.com/apache/camel-website/blob/master/layouts/news-entry/single.html

Any CSS changes need to go to files in here:
https://github.com/apache/camel-website/tree/master/antora-ui-camel/src/css
zregvart:1568334122:2019-09-13T08:22:02.484+0000:1568334122:2019-09-13T08:22:02.484+0000:I think I'll rename the ""News"" section to ""Blog"" and add simple design with pagination as a first step."
0,CAMEL-13817,Sub-task,Major,None,3.0.0,"

help-wanted

",Resolved,Fixed,3.0.0,Omar Al-Safi,Zoran Regvart,0,3,2019-08-01 14:04:29+00:00,2019-11-14 11:23:34+00:00,"We have two getting started guides, one a part of the user manual and one within the Hugo rendered content. The Hugo rendered content is missing links to further documents.","omarsmak:1573615291:2019-11-13T11:21:31.262+0000:1573615291:2019-11-13T11:21:31.262+0000:Hey [~zregvart] maybe I can help on this one, for this section {{Longer Getting Started Guide}}, I guess we are referring to this docs https://camel.apache.org/manual/latest/book-getting-started.html ? Because is missing the link here
zregvart:1573615570:2019-11-13T11:26:10.681+0000:1573615570:2019-11-13T11:26:10.681+0000:Yes, we seem to have a markdown version rendered by Hugo at [https://camel.apache.org/docs/getting-started/] and that is copied from [https://camel.apache.org/manual/latest/getting-started.html], perhaps it would be better not to duplicate that and to just link to the getting started section in the manual.
omarsmak:1573615764:2019-11-13T11:29:24.436+0000:1573615764:2019-11-13T11:29:24.436+0000:Cool thanks for the info (y)
davsclaus:1573616260:2019-11-13T11:37:40.898+0000:1573616260:2019-11-13T11:37:40.898+0000:Frankly IMHO we need to rewrite the getting started docs / guide. And have something about general Camel, and then a guide on the different popular runtimes, eg spring boot, karaf, war for app servers, and standalone etc, so people can see how to run Camel with these. And then point ppl more to all the existing examples.
omarsmak:1573622322:2019-11-13T13:18:42.921+0000:1573622322:2019-11-13T13:18:42.921+0000:I do tend to agree our getting started guide needs some work as when I started with Camel, it was confusing and I guess there are other users out there may share this as well. However, first I'd like to tackle having two separate getting started guides ([this|https://camel.apache.org/docs/getting-started/] and [this|https://camel.apache.org/manual/latest/getting-started.htmlm]) within this task and have a different one for the rewriting if that is fine for you guys. 
By the way, wouldn't be easier to just change the URL of `Getting Started` button on the top nav to this page https://camel.apache.org/manual/latest/getting-started.html instead of this https://camel.apache.org/docs/getting-started/ ? 
zregvart:1573625205:2019-11-13T14:06:45.870+0000:1573625205:2019-11-13T14:06:45.870+0000:I'd start with simple de-duplication and the link change and create a separate issue for the getting started documentation.
omarsmak:1573625614:2019-11-13T14:13:34.443+0000:1573625614:2019-11-13T14:13:34.443+0000:Yeah we can do that "
0,CAMEL-13816,Sub-task,Major,None,,"
None
",Resolved,Implemented,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-01 13:52:53+00:00,2019-08-02 17:34:58+00:00,"Seems that not loading the latest CSS causes issues with the website, that's to be expected. With our cache header that allows the caching of CSS up to 1 year, we'll run into this when doing updates in the future.
One clever idea would be to add cache busting parts to the CSS/JavaScript file name and then use mod_rewrite to serve the original file name. For this we would need to add the hashes of CSS/JavaScript resources to file names in the Antora and Hugo templates.",zregvart:1564738498:2019-08-02T17:34:58.292+0000:1564738498:2019-08-02T17:34:58.292+0000:We now use cache busting by means of adding file hashes to CSS/JavaScript resources.
0,CAMEL-13815,Sub-task,Major,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-01 13:15:59+00:00,2019-08-01 14:01:43+00:00,"Header can be cut off if the user increases the font size in user configuration, so in Firefox if the font size was increased to 11 (the default font setting) header is rendered mangled.",
0,CAMEL-13814,Sub-task,Major,None,,"
None
",Resolved,Done,None,Zoran Regvart,Zoran Regvart,0,1,2019-08-01 13:09:12+00:00,2019-08-13 10:35:47+00:00,"We're sourcing images from http://www.eaipatterns.com/ that is brittle and I'm not sure if we have the rights to those images, I think there was a contribution of new EIP images that we can use to replace those and serve them locally.","zregvart:1564638589:2019-08-01T13:49:49.719+0000:1564638589:2019-08-01T13:49:49.719+0000:And I forgot to mention that the images due to the content security policy are not loaded, as we point to the eaipatterns.com site via http (not https)."
0,CAMEL-13813,Task,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Andrea Cosentino,0,3,2019-08-01 11:01:55+00:00,2020-09-18 12:56:21+00:00,"https://engineering.linkedin.com/blog/2018/12/developer-program-updates


We need to update to V2",davsclaus:1600404981:2020-09-18T12:56:21.885+0000:1600404981:2020-09-18T12:56:21.885+0000:The component was removed
0,CAMEL-13812,Sub-task,Major,None,3.x,"

help-wanted

",Resolved,Fixed,3.x,Unassigned,Zoran Regvart,2,7,2019-08-01 08:59:16+00:00,2020-04-07 14:47:31+00:00,"I think we would benefit from splitting up the user manual into even smaller Antora modules:



FAQ
Getting started
User manual



Perhaps (not sure), Architecture. I think grouping of pages would help as we could have a landing (index) page for each module.","Patricia Feio:1583529899:2020-03-07T05:24:59.580+0000:1583529899:2020-03-07T05:24:59.580+0000:Hi, I'm Patricia, I'm an Outreachy applicant. Can I work on this issue?
zregvart:1583727580:2020-03-09T12:19:40.471+0000:1583727580:2020-03-09T12:19:40.471+0000:[~Patricia Feio] feel free to contribute, it's probably quite a large task to take on though. Should not be too difficult but I think it will be labour intensive.
Patricia Feio:1583832684:2020-03-10T17:31:24.674+0000:1583832684:2020-03-10T17:31:24.674+0000:Thank you, [~zregvart] . I'll see what I'm able to accomplish.

 

 

 

 

 

 
Bob160:1583899513:2020-03-11T12:05:13.082+0000:1583899513:2020-03-11T12:05:13.082+0000:[~zregvart] I was hoping I could also work with [~Patricia Feio] on this whole issue. We could split it between ourselves. What do you think? [~Patricia Feio] what's your thought? 

Thanks
zregvart:1583902143:2020-03-11T12:49:03.041+0000:1583902143:2020-03-11T12:49:03.041+0000:[~Bob160] yes, please coordinate with [~Patricia Feio] (perhaps on Gitter chat) to divide the work, there's plenty of work that needs to be done for this. I would suggest that you go through the documentation and draft plan on this first.
Patricia Feio:1583912133:2020-03-11T15:35:33.418+0000:1583912133:2020-03-11T15:35:33.418+0000:Great idea, [~zregvart] and [~Bob160]. 
[~Bob160] on Gitter my username is @PatriciaFeio.
Bob160:1583933176:2020-03-11T21:26:16.476+0000:1583933176:2020-03-11T21:26:16.476+0000:[~Patricia Feio]

kindly check your Gitter messages. Sent you a message so we can collaborate and sort this out. 

Thanks
Patricia Feio:1583970955:2020-03-12T07:55:55.328+0000:1583970955:2020-03-12T07:55:55.328+0000:Efio-esien Efiom I'm really sorry for not replying you. I got stuck on setting up the projecto locally that I forgot to see Gitter messages. I'm not sure if I'll be able to reply during the morning, so is it ok if I reply after lunch time?

Thank you
Transcendence09:1583971908:2020-03-12T08:11:48.120+0000:1583971908:2020-03-12T08:11:48.120+0000:how do I know a task that is left unassigned to work with? or do i just pick any and begin working on it? Please help me out so i can make precise contributions to this project. Thank you
Bob160:1583976176:2020-03-12T09:22:56.317+0000:1583976176:2020-03-12T09:22:56.317+0000:It's ok [~Patricia Feio] . Nice job with setting up the project locally! How do I get to do the same.

Kindly assist please.

Thanks

 
zregvart:1583983731:2020-03-12T11:28:51.455+0000:1583983731:2020-03-12T11:28:51.455+0000:[~Transcendence09] we have a list of issues that we [ask help with|https://issues.apache.org/jira/issues/?filter=12348381], if you see folk discussing on an issue try to reach out as others have here to them and try to collaborate on the work together. It's much easier for us if you try to self-organize.
Patricia Feio:1584030807:2020-03-13T00:33:27.770+0000:1584030807:2020-03-13T00:33:27.770+0000:Hi [~Bob160] did you try to run the project locally? I'm still stuck with Hugo. I'm gonna ask for help on Gitter.
Bob160:1584074180:2020-03-13T12:36:20.994+0000:1584074180:2020-03-13T12:36:20.994+0000:[~Patricia Feio]kindly check your gitter messages.

Thanks
Patricia Feio:1584082988:2020-03-13T15:03:08.626+0000:1584082988:2020-03-13T15:03:08.626+0000:[~Bob160] I replied you just now
aashnajena:1584187001:2020-03-14T19:56:41.005+0000:1584187001:2020-03-14T19:56:41.005+0000:Hey [~zregvart] can I start working on this? I think this is going to be a big task - given how much content the user manual has. I'll post a draft solution here asap!
Patricia Feio:1584292456:2020-03-16T01:14:16.289+0000:1584292456:2020-03-16T01:14:16.289+0000:[~zregvart] I went through the User Manual and I have some questions and some split suggestions. Regarding the splitting suggestions was this structure what you had in mind? I don't have any suggestion about splitting the Architecture section.

In [https://camel.apache.org/manual/latest/]:

In +Overview+  (after Summary) I would suggest:
 * Getting started with Apache Camel
 * FAQ
 * Legal Notice

I suggest changing +Getting started+ for +Getting started with Apache Camel+ and deleting +Longer Getting Started Guide+.

 

In +Documentation+  (after +Summary+ and +Overview+) I would suggest the following order:
 * User Guide
 * Books
 * Examples
 * Architecture
 * DSL (why is also a DSL entry in Architecture?)
 * Enterprise Integration Patterns
 * Component
 * Data Formats
 * Language

 

In +User Guide+ what was the criterion for the chosen links? There are link from the +Faq+, others from +Architecture+. For example, when I click on “Apache Karak Support” the breadcrumb is “User Manual / Apache Karak Support”, so shouldn’t this page also appear in the +User manual+ in the sidebar?

In +Architecture+ I suggest a link to the section +Architecture+ on the same page and not the link that exists now; this way the user will be guided to the other links in the +Architecture+ section. Also, not all the links are the same as the ones in the +User Manual+ in the sidebar. Same as in +DSL+. Is this intentional?

 

In the +User Manual+ (sidebar) I suggest (the split part):
 * +Getting started with Apache Camel+ (change name from Getting started)
 ** Working with CamelContexts and RouteBuilders
 ** Working with Spring
 ** What are the dependencies?
 ** The Enterprise Integration Patterns (EIP) book
 ** Online documentation for Camel
 ** Online Javadoc documentation
 ** Concepts and terminology fundamental to Camel
 ** Other resources

 * +Architecture+ (no idea how to split this section)
 * +Frequently asked questions+

          General questions
 * Can I get commercial support? (...)

          Using Camel Questions
 * Classloader issue of servicemix-camel component (...)

         Logging questions
 * How do I enable debug logging? (...)

        Camel Endpoint questions
 * How do I invoke Camel routes from JBI? (...)

        Component questions
 * Why does my JMS route only consume one message at once?

       Common problems
 * Exception – BeanDefinitionStoreException (...)

 

+Getting started with Apache Camel+ would be a mix between +Getting started+, +Getting started with Apache Camel+ and +What are the dependencies?+

Clicking in +Getting started with Apache Camel+ would open an index page and from there we would go to the several links presented in the sidebar menu (see attachment with all the pages; changes are highlighted in orange) [^getting-started-with-apache-camel.docx].

The breadcrumb mentioned in “A useful tip for navigating the online documentation” (+Getting started with Apache Camel+ page) doesn’t exist, or at least I wasn’t able to find it: Apache Camel / Documentation / Architecture / Languages, if we are in Languages we find the breadcrumb to be User Manual / Frequently asked questions / What languages are supported?

For the +FAQ+ see the next attachment. There we would have an intro text and several links for all the topics (different pages for all of them), also with intro texts. [^FAQ  landing-page.docx]

[~aashnajena] and [~Bob160] what is you opinion? Have thought in a similar way?

 

 
Bob160:1584340931:2020-03-16T14:42:11.399+0000:1584340931:2020-03-16T14:42:11.399+0000:[~Patricia Feio]this is a job well-done. 

I think this proposal will work just fine!

[~zregvart]what do you think? Can we proceed?

Thanks
aashnajena:1584756956:2020-03-21T10:15:56.031+0000:1584756956:2020-03-21T10:15:56.031+0000:I like the idea. Shall we start working on this?
Aemie:1584764478:2020-03-21T12:21:18.559+0000:1584764478:2020-03-21T12:21:18.559+0000:I really think the proposal of the entire layout is pretty good. I would love to help you people out in this.
zregvart:1584931785:2020-03-23T10:49:45.530+0000:1584931785:2020-03-23T10:49:45.530+0000:{quote}I suggest changing Getting started for Getting started with Apache Camel and deleting Longer Getting Started Guide.{quote}

Not sure about renaming, ""Getting started"" to ""Getting started with Apache Camel"", and about deleting the ""Longer Getting Started Guide"", what's the value in that?

{quote}In Documentation  (after Summary and Overview) I would suggest the following order:{quote}

I don't think it makes much sense to keep any of that, the navigation on the left should be used to access content. We have an issue on making sure that the linked pages are also available on the navigation (CAMEL-13780).

I like the direction this is heading, especially with the splitting of FAQ into a separate component/module. Make sure to read Antora documentation on that, and that you're aware of the {{xref}} link changes that need to be made when the split is done.

aashnajena:1585461515:2020-03-29T13:58:35.140+0000:1585461515:2020-03-29T13:58:35.140+0000:Hi, I want to split the FAQ part into a separate module. What I'm thinking in that User Manual should have a menu-item called FAQ, which should open a page with (1) FAQ introduction, (2) How to find your query and (3) list of all FAQs. I want this to be a separate module, with a nav-faq.adoc of its own. I also think it makes sense to have a quick look-up search box here, similar to components page.

If I understand correctly, I'm going to have to make changes to the current [nav.adoc|https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/nav.adoc] and create a new nav-faq.adoc and migrate the xref links. These changes will get made in the camel repo, how do I test it on the website?
aashnajena:1585484115:2020-03-29T20:15:15.207+0000:1585484115:2020-03-29T20:15:15.207+0000:Hi, I have made this pull request for splitting FAQ into a separate component. Here is the PR for [Camel Repository|https://github.com/apache/camel/pull/3691] and for [Camel-Website|https://github.com/apache/camel-website/pull/289]
djencks:1585491033:2020-03-29T22:10:33.508+0000:1585491033:2020-03-29T22:10:33.508+0000:I'm sorry I missed this issue when it was filed.

I strongly object to splitting the user manual content into additional components.  I think the result will be too fractured and hard to use.

I think it is a good idea to split the user manual content into modules inside the user manual component, in fact I considered doing it. The comment 2 ago indicates that splitting into a separate module was planned, but the previous comment and changes appear to split into a separate component.

The comments on the commits don't appear to relate to the changes: they claim they are introducing a new module but are introducing a new component.

I agree the FAQ would benefit from a quick lookup.

The PRs are very difficult to understand: they should be squashed into a minimal number of commits.
djencks:1585491420:2020-03-29T22:17:00.071+0000:1585491420:2020-03-29T22:17:00.071+0000:To move FAQs into a separate module, create a docs/user-manual/modules/faq/pages directory and move the faq pages into it.  You don't need a separate source tree or antora.yml.  Having a separate nav.adoc for faq would be a good idea IMO.  List all the user manual nav files in the antora.yml, in order.
djencks:1585491996:2020-03-29T22:26:36.366+0000:1585491996:2020-03-29T22:26:36.366+0000:What I do to look at my local changes is have what is often referred to as an ""author workspace"" antora playbook.  I replace the remote git urls with paths to the local checkouts of the git repo, and the branch name of the branch I'm working on with ""HEAD"".  For example,

{noformat}
 - url: git@github.com:apache/camel.git
 branches: master
 start_path: docs/user-manual
{noformat}

becomes
{noformat}
    - url: ./../camel
      branches: HEAD
      start_path: docs/user-manual
{noformat}

I have camel and camel-website next to one another; if you have a different arrangement you'll have to adjust the url.  Be sure it starts with ./

If you modify your antora-playbook.yml, you can preview with yarn run build:antora or yarn run build.

aashnajena:1585530522:2020-03-30T09:08:42.484+0000:1585530522:2020-03-30T09:08:42.484+0000:I see. Yes this is exactly how I was testing the changes on the website, thank you for confirming :)
Please allow me to make FAQ into a separate module and improve on my quality of commits. Thanks for elaborating!
aashnajena:1585534238:2020-03-30T10:10:38.651+0000:1585535494:2020-03-30T10:31:34.307+0000:Hi, here is how I am proceeding with it :
 1) move the FAQ folder from `user-manual/modules/ROOT/pages` to `user-manual/modules/`
 2) remove all xref links to faq files from `user-manual/modules/ROOT/nav.adoc`
 3) make a new nav.adoc in `user-manual/modules/FAQ` and add the xref links here. Change the links according to the new relative location of files and add `modules/FAQ/nav.adoc` in `user-manual/antora.yml`

If I do this, the FAQ menu is appended after the ""references"" part in the user-manual menu. I don't think that's intended. Isn't it better to have a link to the FAQ/index.html page from the user-manual menu and have an independent menu for FAQ? OR if the full FAQ menu to be a part of the user-manual menu, please direct me on how to make it render at the right place. 

After this, I should check all files in FAQ module to see where links need to be changed according to their new relative position. I see there are two images in the `user-manual/modules/FAQ/pages/images` folder now, but I'm not able to find where these images are being used. Can you help me with this, and please tell me what else needs to be done?
aashnajena:1585539274:2020-03-30T11:34:34.037+0000:1585539274:2020-03-30T11:34:34.037+0000:Is this how you expect the menu to look like? 

 !faq-module.png! 

Right now, I have split FAQ into a separate module. To achieve this order in the menu, I split ROOT/nav.adoc into ROOT/nav.adoc and ROOT/references.adoc and the user-manual/antora.yml file has order :

ROOT/nav.adoc
FAQ/nav.adoc
ROOT/references.adoc

Since antora.yml is a component descriptor file as given in the [documentation|https://docs.antora.org/antora/2.0/component-descriptor/], I don't think we can have an independent menu for a module. Is this way okay for you? 
djencks:1585552842:2020-03-30T15:20:42.610+0000:1585552842:2020-03-30T15:20:42.610+0000:This basically looks good to me.
 I think your arrangement of nav files is fine.

I would name the module 'faq' rather than 'FAQ'.  'ROOT' is uppercased because it is special in that the module name is removed from the final path: all other module names are normally lowercase as they do appear in the url.  The effect of this is that the path for faq pages won't change.

A full xref to a faq page used to look like:

{noformat}
xref:latest@manual::faq/faqpage.adoc[title]
{noformat}

Depending on the location, the 'latest@manual' might be omitted.
These will need to be located and converted to

{noformat}
xref:latest@manual:faq:faqpage.adoc[title]
{noformat}

xrefs from one faq page to another should not need updating, unless they have more in them than needed.

I'm pretty sure, although I didn't look, that there are such xrefs in the rest of the user manual and in component pages in every version.  If this is correct, you'll need PRs for master, 2.x, and 3.0.x.

Asciidoc supports quite a few xref formats although I always use `xref:...` There may be `<<...>>` and possibly some sort of `[...]` format as well.  I've generally been converting alternate formats to `xref:` for interpage links when I find them.  I think these may be leftover from conversion to asciidoc.

aashnajena:1585554404:2020-03-30T15:46:44.095+0000:1585554453:2020-03-30T15:47:33.382+0000:Hey, thanks for the detailed response! I believe I have already made all the xref changes you mentioned above in my Pull Request. There are files outside docs/ also with xref links to FAQ, I have changed those as well. And yes, I checked for alternate formats as well. Basically, I checked for anything with a ""faq/"" in the URL. I have put a PR for master right now, once you get the time to review it and suggest changes, I'll be happy to do the same for other branches :)"
0,CAMEL-13811,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Jan Bednar,Jan Bednar,0,1,2019-08-01 07:27:03+00:00,2019-08-01 22:57:25+00:00,"There is unresolved issue about boon, which we have reported in 2017 (https://github.com/boonproject/boon/issues/376) and there is no single commit from this time. The last working JDK for boon was 1.8 and the project seems to be abandoned.


Deprecate camel-boon in camel-2.x and remove on master.",
0,CAMEL-13810,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-08-01 07:25:41+00:00,2019-08-01 07:26:41+00:00,"As starting Camel mail fail then lets ensure we always get the exception logged as we rethrow it out of start of camel context, and it may be that some runtimes may not log this, so you can have harder time find out why it failed.",
0,CAMEL-13809,Sub-task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Zoran Regvart,Terrien Jean-Yves,0,2,2019-07-31 16:31:38+00:00,2019-08-07 09:29:37+00:00,"Hi,
 many erroneous links in the doc
 I manually passed all links on the page. I read the returns to make sure they were still valid.
 when there was manual redirection I followed the link to check it.
 here is the list of errors that I found.
 a not about fusesource. all fusesource links are redirected to www.jboss.org. this does not allow to find the targeted document.


hoping that this can be helpful.


https://camel.apache.org/staging/community/articles/
 videos
 Wild Flies and A Camel https://www.youtube.com/watch?v=o8ZRE9DM3Es video not found
 Camel in the cloud using Fuse Fabric http://fuse.fusesource.org/fabric/ time out
 Getting started with Apache Camel - Video presentation from Javagruppen https://javagruppen.dk/index.php/moder/historiske-moder/285-javagruppemode-115-apache-camel-i-aarhus 404
 Apache Camel Essential Components by Christian Posta http://blip.tv/dzone/apache-camel-essential-components-6511579 Error 523
 CamelOne 2012 Videos - All the videos http://fusesource.com/apache-camel-conference-2012/camelone_speakers_2012/ and http://fusesource.com/apache-camel-conference-2012 redirect to jboss.org
 CamelOne 2011 Video presentations CamelOne 2011 conference (May 2011) all links redirected to jboss.org
 Paris JUG 2011 - Integration with Apache Camel and ESB by Charles Moulliard http://www.parleys.com/#id=2432&st=5&sl=0 blank page
 Belgium JUG 2011 - Integration with Apache ServiceMix and Camel by Charles Moulliard http://www.parleys.com/#id=2601&st=5 blank page
 Devoxx 2011 - Introduction to Apache ActiveMQ, ServiceMix https://devoxx.com/display/DV11/Introduction+to+Apache+ActiveMQ,+ServiceMix,+Camel+and+CXF blank page errors on html structure
 Devoxx 2010 talk http://www.parleys.com/#id=2158&st=5 blank page errors on html structure
 at Øredev 2008 conference http://www.oredev.com/ 404 not found
 Devoxx 2009 talk http://www.parleys.com/#sl=11&st=5&id=1577 blank page
 Medium Resolution http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-medium-resolution/ unreachable
 High Resolution http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-high-resolution/ unreachable
 Taking Camel for a ride http://bsnyderblog.blogspot.com/2008/05/activemq-and-servicemix-at-apachecon-us.html time out
 JavaZone Conference - Taking Apache Camel for a Rider http://www4.java.no/incogito/session/Taking+Apache+Camel+for+a+Ride.html time out
 Screencast/Demo of Smooks and Apache Camel processing UN/EDIFACT http://www.screencast.com/users/tfennelly/folders/Camtasia/media/c3cef9dd-e667-41ac-8597-74ca01d39968 Not found
 Facebook integration Apache Camel http://screencasts.chariotsolutions.com/facebook-integration-using-apache-camel not found
 Advanced AEM Search - Consuming External Content http://www.circuitdevcon.com/en/session-videos/aem-search-apache-camel.html HTTP ERROR 503


Articles 
 Integration with Apache Camel - Part I - Will get you over http://jaxenter.com/jax-magazine/JAX-Magazine-2013-05 not found
 Simple DSL OSGi bundle example by Andrej Koelewijn http://www.andrejkoelewijn.com/wp/2008/10/19/simple-camel-dsl-osgi-bundle-example/ not found
 Realization of EAI Patterns with Apache Camel by Pascal Kolb http://elib.uni-stuttgart.de/opus/volltexte/2008/3520/pdf/STUD_2127.pdf OPUS-ID 3520 nicht gefunden! (redirect error)
 First step with Apache Camel by Lukasz Budnik http://jee-bpel-soa.blogspot.com/2009/12/first-steps-with-apache-camel.html Sorry, the page you were looking for in this blog does not exist.
 LEGO Java: Apache Camel Context and Route Basics http://www.canoo.com/blog/2011/03/14/lego-java-apache-camel-context-and-route-basics/ not found
 LEGO® Java (II): Apache Camel Error Handling, http://www.canoo.com/blog/2011/03/16/lego-java-ii-apache-camel-error-handling-java-beans-and-web-services/ not found
 What is Camel? a short blog http://bushorn.com/what-is-camel/ Error establishing a database connection
 A bit more meat: Camel applied : JMS to File http://mikemclean.ca/muse/2009/05/a-bit-more-meat-camel-applied-jms-to-file/ not found
 Spring Remoting with JMS Example on Amin Abbaspour’s Weblog the second link http://searjeant.blogspot.com/2009/02/camel-routes-and-hl7.html Le blog a été supprimé blog removed 
 Camel routes and HL7 by Roger Searjeant http://searjeant.blogspot.com/2009/02/camel-routes-and-hl7.html => blog removed
 Leverage EIP with Apache Camel and Twitter http://blog.brunoborges.com.br/2009/03/leverage-eip-with-apache-camel-and.html ERR_NAME_NOT_RESOLVED
 Camel, CXF and JMS by Example by Silvester van der Bijl http://blog.software-art.nl/2009/11/15/camel-cxf-and-jms-by-example/ time out
 A simple file monitoring console with camel, cometd and jquery http://www.andrejkoelewijn.com/wp/2009/10/27/simple-log-console-with-camel-and-cometd/ not found
 A composite REST service using Apache Camel by Andrej Koelewijn http://www.andrejkoelewijn.com/wp/2010/06/13/a-composite-rest-service-using-camel/ not found
 Using Apache Camel to route SOAP calls through message queues by Glen Mazza http://www.jroller.com/gmazza/entry/camel_jms_and_soap time out
 Using Apache Camel to route SOAP calls through message queues by Glen Mazza http://www.jroller.com/gmazza/ time out
 Apache Camel Example Application - Earthquake Mashups http://blog.srvme.de/2011/01/30/apache-camel-example-application-earthquake-mashup/ Diese Domain ist unkonfiguriert.
 Transforming and splitting huge EDI files using Smooks and Camel http://www.catify.com/2011/03/29/transforming-and-splitting-huge-edi-files-with-smooks/ not found
 JDBC Persistence for Camel Aggregator http://labs.bsb.com/2011/04/jdbc-persistence-for-camel-aggregator/ Site non installé (uninstalled domain)
 TCP proxy with Apache Camel http://scottcranton.blogspot.com/2011/04/socat-is-so-cool.html blog removed
 Process driven Froms with Apache Camel and websockets http://www.catify.com/2011/06/06/process-driven-form-with-apache-camel-and-websockets/ not found
 Website mashup with Apache Camel http://blog.nanthrax.net/2011/07/website-mashup-with-apache-camel/ not found
 Hot Standby failover for Apache Camel by Christian Schneider http://www.liquid-reality.de/x/XYBe not found
 Camel and MongoDB: a match made in heaven http://blog.raulkr.net/2012/06/camel-and-mongodb-match-made-in-heaven.html not found
 Some Camel Stuff - A blog post from February 2013 by John Källström http://j0hnk.github.com/blog/2013/02/04/some-camel-stuff/ not found
 Designing and Implementing our Camel-based mgm Cosmo Router http://blog.mgm-tp.com/2013/04/camel-router-part1/ ERR_NAME_NOT_RESOLVED
 Lessons learned from using Apache Camel, MTOM and JMS http://blog.avisi.nl/2013/05/28/lessons-learned-from-using-apache-camel-mtom-and-jms/ not found
 Camel CXF Component – WSDL First Example https://code.notsoclever.cc/camel-cxf-component-wsdl-first-example/ ERR_NAME_NOT_RESOLVED
 Camel CXFRS Component - Simple REST http://code.notsoclever.cc/camel-cxfrs-jdbc-rest-example/ ERR_NAME_NOT_RESOLVED
 From inside the code: Camel RouteBuilder and Java DSL http://www.christianposta.com/blog/?p=249 not found
 From inside the code: Camel Routing Engine Part I http://www.christianposta.com/blog/?p=323 not found
 Testing with Apache Camel - Blog post from April 2014 http://bushorn.com/unit-testing-apache-camel/ Error establishing a database connection
 Using Camel, CDI inside Kubernetes with Fabric8 http://using%20camel%2C%20cdi%20inside%20kubernetes%20with%20fabric8/ invalid url
 How to use Maven with Apache Camel from February 2017 https://integrationwire.com/camel/maven/ not found


Tooling
 Implementing Fuji integration scenario using Camel SE by Louis Polycarpou http://blogs.sun.com/polyblog/entry/camel_fuji not found
 Camel + Smooks from the official Smooks blog http://blog.smooks.org/2010/02/22/apache-camel-smooks/ not found
 Smooks OSGI: Camel, UN/EDIFACT, ServiceMix https://dzone.com/links/smooks_osgi_camel_unedifact_servicemix.html manual redirect to http://blog.smooks.org/2011/02/19/smooks-osgi-revisited/ ERR_NAME_NOT_RESOLVED
 ServiceMix bridge to IBM WebSphereMQ http://www.answerconsulting.com/blog/davisond/servicemix-bridge-to-websphere-mq/ not found
 Use remote EJB in Camel routes by Jean-Baptiste Onofré http://blog.nanthrax.net/2011/08/use-a-remote-ejb-in-camel-routes/ not found
 Use Camel, CXF and Karaf to implement batches by Jean-Baptiste Onofré http://blog.nanthrax.net/2011/08/use-camel-cxf-and-karaf-to-implement-batches/ not found
 Karaf Tutorial Part 5 - Running Apache Camel integrations in OSGi by Christian Schneider http://www.liquid-reality.de/x/G4Bk not found mouved to http://liquid-reality.de/Karaf-Tutorial/05/
 Communication between two remote Camel routes using Apache Karaf Cellar by Jean-Baptiste Onofré http://blog.nanthrax.net/2012/02/communication-between-two-remote-camel-routes-using-karaf-cellar/ not found
 Tools for building a real time analytics platform http://blog.avisi.nl/2013/07/01/tools-for-building-a-real-time-analytics-platform/ not found
 camunda BPM + Apache Camel: Integrating two Open Source frameworks http://camundabpm.blogspot.it/2013/09/camunda-bpm-apache-camel-integrating.html?m=1 blog removed
 Running Camel on EAP - by Christian Posta http://www.christianposta.com/blog/?p=396 not found
 A universal Streamer for Apache Ignite based on Apache Camel http://raul.io/a-universal-streamer-for-apache-ignite-based-on-apache-camel/ ERR_NAME_NOT_RESOLVED
 Ingesting Filebeat Data Into Your Apache Camel Flow http://ingesting%20filebeat%20data%20into%20your%20apache%20camel%20flow/ invalid url


Camel and Groovy
 Groovy and Grape - easiest way to send gtalk message with Apache Camel http://www.andrejkoelewijn.com/wp/2009/02/28/groovy-and-grape-easiest-way-to-send-gtalk-message-with-apache-camel/ not found


Camel and Scala
 Apache Camel’s Scala DSL explored http://blog.avisi.nl/2013/01/07/apache-camels-scala-dsl-explored/ not found


Camel and the IoT (format : should be bold)
 The IoT in the service of the environment using Apache Camel & JBoss A-MQ http://bushorn.com/iot-service-environment-using-apache-camel-jboss-mq/ Error establishing a database connection


Comparison to Camel’s Competitors
 Light-weight, open-source integration: Apache Camel or Spring Integration? by Christian Posta http://www.christianposta.com/blog/?p=327 not found


Presentations on Apache Camel
 Implementing Enterprise Integration Patterns with Apache Camel http://family-hildebrandt.com/eduard/eip_with_apache_camel/ ERR_NAME_NOT_RESOLVED
 Dead Simple Integration with Apache Camel http://www.chariotsolutions.com/slides/pdfs/ete2009-camel-for-ete-2009.pdf not found
 Claus Ibsen’s Apache Camel presentation at the FUSE community http://fusesource.com/ redirect to jboss.org
 FuseSource presentations on Camel http://fusesource.com/community/events/ redirect to jboss.org
 Devoxx 2010 - Slides from the presentation http://devoxx.com/display/Devoxx2K10/Apache+Camel,+a+powerful+open+source+integration+framework blank page errors in html
 Introduction to Apache Camel is a nice set of slides http://fusesource.com/collateral/91 redirect to jboss.org
 CamelOne 2013 - CamelOne conference http://camelone.com/apache-camel-conference-2013/camelone_agenda_2013/ not found
 Developing Cloud Reday Camel Microservices - Video from JBCNConf 2017 https://www.youtube.com/watch?v=8PIJ6ODxAPE video not found


Podcasts
 The Basement Coders Episode 14 - Apache Camel http://basementcoders.com/?p=684 time out
 Podcast James Strachan - Mr Apache Camel http://cloudevangelist.org/2013/02/18/podcast-james-strachan-mr-apache-camel/ not found
 Google Plus Apache Camel community https://plus.google.com/u/0/communities/106271384875356488225 G+ ends of service
 EIP printable flashcards http://fusesource.com/fuse/enterprise-integration-patterns/ redirect to jboss.org
 The Top Twelve Integration Patterns for Apache Camel Reference Card at DZone by Claus Ibsen http://refcardz.dzone.com/refcardz/apache-camel-update not found
 The Apache Camel Components Poster => all links not found


Blogs
 Christian Schneider’s Blog http://www.liquid-reality.de/pages/viewpage.action?pageId=131134 not found http://liquid-reality.de/Karaf-Tutorial/
 Raul Kripalani’s Blog http://raul.io/ ERR_NAME_NOT_RESOLVED
 Robert James Liguori’s Blog http://robertjliguori.blogspot.com/ blog removed
 Tracy Snell’s Blog http://code.notsoclever.cc/ ERR_NAME_NOT_RESOLVED


Non-English
 Domain-Specific Languages (DSLs) in Apache Camel (Spanish) by Gema Perdiguero http://www.tecsisa.com/index.igw?item=1628 not found
 Apache Camel integration in ServiceMix (Spanish) http://www.tecsisa.com/index.igw?item=1629 not found
 Apache Camel: Enterprise Integration met scripttalen en DSLs (Dutch) http://blog.finalist.com/2009/03/30/apache-camel-enterprise-integration-met-scripttalen-en-dsls/ ERR_NAME_NOT_RESOLVED
 A practical example of using Camel and Groovy to post russian currency rates on Twitter http://github.com/dulanov/cbrru-agent not found
 Apache Camel for beginners - In polish http://www.programistamag.pl/magazine/show/18 not found","zregvart:1564614814:2019-08-01T07:13:34.279+0000:1564614814:2019-08-01T07:13:34.279+0000:Thanks for reporting this [~sekaijin]. I guess we would need to either find an alternative location for those links, providing that the content is still published somewhere or remove the broken links. If you would like to help us with this you can [edit the content of that page|https://github.com/apache/camel-website/edit/master/content/community/articles.md] directly via GitHub.
sekaijin:1564619544:2019-08-01T08:32:24.686+0000:1564619598:2019-08-01T08:33:18.899+0000:OK,
I will edit the articles.md page.
I will try to find the publications if they still exist.
I will post the result here as an attachment.
Sincerely JYT
sekaijin:1564728290:2019-08-02T14:44:50.601+0000:1564728290:2019-08-02T14:44:50.601+0000:Hi 
I am posting you the progress of my work.
*: I treated or started to process the error
* removed =>: link removed
* replaced =>: link replaced
* mail =>: I contacted the author and the answer and waiting.
without *: to do

I do not know what to do for devoxx.
the pages exist but contain errors and therefore do not appear. I contacted the site.

for camelone I do not know if it's worth going back to archives that do not contain much.

 

https://camel.apache.org/staging/community/articles/
videos
* removed => Wild Flies and A Camel https://www.youtube.com/watch?v=o8ZRE9DM3Es video not found
* mail claus => Camel in the cloud using Fuse Fabric http://fuse.fusesource.org/fabric/ time out
* removed => Getting started with Apache Camel - Video presentation from Javagruppen https://javagruppen.dk/index.php/moder/historiske-moder/285-javagruppemode-115-apache-camel-i-aarhus 404
* replaced => Apache Camel Essential Components by Christian Posta http://blip.tv/dzone/apache-camel-essential-components-6511579 Error 523
 CamelOne 2012 Videos - All the videos http://fusesource.com/apache-camel-conference-2012/camelone_speakers_2012/ and http://fusesource.com/apache-camel-conference-2012 redirect to jboss.org
 CamelOne 2011 Video presentations CamelOne 2011 conference (May 2011) all links redirected to jboss.org
* Replaced => Paris JUG 2011 - Integration with Apache Camel and ESB by Charles Moulliard http://www.parleys.com/#id=2432&st=5&sl=0 blank page
* mail => Belgium JUG 2011 - Integration with Apache ServiceMix and Camel by Charles Moulliard http://www.parleys.com/#id=2601&st=5 blank page
* mail => Devoxx 2011 - Introduction to Apache ActiveMQ, ServiceMix https://devoxx.com/display/DV11/Introduction+to+Apache+ActiveMQ,+ServiceMix,+Camel+and+CXF blank page errors on html structure
* mail => Devoxx 2010 talk http://www.parleys.com/#id=2158&st=5 blank page errors on html structure
 at Øredev 2008 conference http://www.oredev.com/ 404 not found
* mail => Devoxx 2009 talk http://www.parleys.com/#sl=11&st=5&id=1577 blank page
 Medium Resolution http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-medium-resolution/ unreachable
 High Resolution http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-high-resolution/ unreachable
 Taking Camel for a ride http://bsnyderblog.blogspot.com/2008/05/activemq-and-servicemix-at-apachecon-us.html time out
 JavaZone Conference - Taking Apache Camel for a Rider http://www4.java.no/incogito/session/Taking+Apache+Camel+for+a+Ride.html time out
* removed => Screencast/Demo of Smooks and Apache Camel processing UN/EDIFACT http://www.screencast.com/users/tfennelly/folders/Camtasia/media/c3cef9dd-e667-41ac-8597-74ca01d39968 Not found
 Facebook integration Apache Camel http://screencasts.chariotsolutions.com/facebook-integration-using-apache-camel not found
 Advanced AEM Search - Consuming External Content http://www.circuitdevcon.com/en/session-videos/aem-search-apache-camel.html HTTP ERROR 503
 
Articles 
 Integration with Apache Camel - Part I - Will get you over http://jaxenter.com/jax-magazine/JAX-Magazine-2013-05 not found
 Simple DSL OSGi bundle example by Andrej Koelewijn http://www.andrejkoelewijn.com/wp/2008/10/19/simple-camel-dsl-osgi-bundle-example/ not found
 Realization of EAI Patterns with Apache Camel by Pascal Kolb http://elib.uni-stuttgart.de/opus/volltexte/2008/3520/pdf/STUD_2127.pdf OPUS-ID 3520 nicht gefunden! (redirect error)
 First step with Apache Camel by Lukasz Budnik http://jee-bpel-soa.blogspot.com/2009/12/first-steps-with-apache-camel.html Sorry, the page you were looking for in this blog does not exist.
 LEGO Java: Apache Camel Context and Route Basics http://www.canoo.com/blog/2011/03/14/lego-java-apache-camel-context-and-route-basics/ not found
 LEGO® Java (II): Apache Camel Error Handling, http://www.canoo.com/blog/2011/03/16/lego-java-ii-apache-camel-error-handling-java-beans-and-web-services/ not found
 What is Camel? a short blog http://bushorn.com/what-is-camel/ Error establishing a database connection
 A bit more meat: Camel applied : JMS to File http://mikemclean.ca/muse/2009/05/a-bit-more-meat-camel-applied-jms-to-file/ not found
 Spring Remoting with JMS Example on Amin Abbaspour’s Weblog the second link http://searjeant.blogspot.com/2009/02/camel-routes-and-hl7.html Le blog a été supprimé blog removed 
 Camel routes and HL7 by Roger Searjeant http://searjeant.blogspot.com/2009/02/camel-routes-and-hl7.html => blog removed
 Leverage EIP with Apache Camel and Twitter http://blog.brunoborges.com.br/2009/03/leverage-eip-with-apache-camel-and.html ERR_NAME_NOT_RESOLVED
 Camel, CXF and JMS by Example by Silvester van der Bijl http://blog.software-art.nl/2009/11/15/camel-cxf-and-jms-by-example/ time out
 A simple file monitoring console with camel, cometd and jquery http://www.andrejkoelewijn.com/wp/2009/10/27/simple-log-console-with-camel-and-cometd/ not found
 A composite REST service using Apache Camel by Andrej Koelewijn http://www.andrejkoelewijn.com/wp/2010/06/13/a-composite-rest-service-using-camel/ not found
 Using Apache Camel to route SOAP calls through message queues by Glen Mazza http://www.jroller.com/gmazza/entry/camel_jms_and_soap time out
 Using Apache Camel to route SOAP calls through message queues by Glen Mazza http://www.jroller.com/gmazza/ time out
 Apache Camel Example Application - Earthquake Mashups http://blog.srvme.de/2011/01/30/apache-camel-example-application-earthquake-mashup/ Diese Domain ist unkonfiguriert.
* removed => Transforming and splitting huge EDI files using Smooks and Camel http://www.catify.com/2011/03/29/transforming-and-splitting-huge-edi-files-with-smooks/ not found
 JDBC Persistence for Camel Aggregator http://labs.bsb.com/2011/04/jdbc-persistence-for-camel-aggregator/ Site non installé (uninstalled domain)
 TCP proxy with Apache Camel http://scottcranton.blogspot.com/2011/04/socat-is-so-cool.html blog removed
 Process driven Froms with Apache Camel and websockets http://www.catify.com/2011/06/06/process-driven-form-with-apache-camel-and-websockets/ not found
* replaced => Website mashup with Apache Camel http://blog.nanthrax.net/2011/07/website-mashup-with-apache-camel/ not found
* removed => Hot Standby failover for Apache Camel by Christian Schneider http://www.liquid-reality.de/x/XYBe not found
* replaced => Camel and MongoDB: a match made in heaven http://blog.raulkr.net/2012/06/camel-and-mongodb-match-made-in-heaven.html not found
* removed => Some Camel Stuff - A blog post from February 2013 by John Källström http://j0hnk.github.com/blog/2013/02/04/some-camel-stuff/ not found
* replaced => Designing and Implementing our Camel-based mgm Cosmo Router http://blog.mgm-tp.com/2013/04/camel-router-part1/ ERR_NAME_NOT_RESOLVED
* replaced => Lessons learned from using Apache Camel, MTOM and JMS http://blog.avisi.nl/2013/05/28/lessons-learned-from-using-apache-camel-mtom-and-jms/ not found
* mail => Camel CXF Component – WSDL First Example https://code.notsoclever.cc/camel-cxf-component-wsdl-first-example/ ERR_NAME_NOT_RESOLVED
* mail => Camel CXFRS Component - Simple REST http://code.notsoclever.cc/camel-cxfrs-jdbc-rest-example/ ERR_NAME_NOT_RESOLVED
* replaced => From inside the code: Camel RouteBuilder and Java DSL http://www.christianposta.com/blog/?p=249 not found
* replaced => From inside the code: Camel Routing Engine Part I http://www.christianposta.com/blog/?p=323 not found
* replaced => Testing with Apache Camel - Blog post from April 2014 http://bushorn.com/unit-testing-apache-camel/ Error establishing a database connection
* replaced => Using Camel, CDI inside Kubernetes with Fabric8 http://using%20camel%2C%20cdi%20inside%20kubernetes%20with%20fabric8/ invalid url
* replaced => How to use Maven with Apache Camel from February 2017 https://integrationwire.com/camel/maven/ not found

Tooling
* removed => Implementing Fuji integration scenario using Camel SE by Louis Polycarpou http://blogs.sun.com/polyblog/entry/camel_fuji not found
* removed => Camel + Smooks from the official Smooks blog http://blog.smooks.org/2010/02/22/apache-camel-smooks/ not found
* removed => Smooks OSGI: Camel, UN/EDIFACT, ServiceMix https://dzone.com/links/smooks_osgi_camel_unedifact_servicemix.html manual redirect to http://blog.smooks.org/2011/02/19/smooks-osgi-revisited/ ERR_NAME_NOT_RESOLVED
* mail => ServiceMix bridge to IBM WebSphereMQ http://www.answerconsulting.com/blog/davisond/servicemix-bridge-to-websphere-mq/ not found
* replaced => Use remote EJB in Camel routes by Jean-Baptiste Onofré http://blog.nanthrax.net/2011/08/use-a-remote-ejb-in-camel-routes/ not found
* replaced => Use Camel, CXF and Karaf to implement batches by Jean-Baptiste Onofré http://blog.nanthrax.net/2011/08/use-camel-cxf-and-karaf-to-implement-batches/ not found
* replaced => Karaf Tutorial Part 5 - Running Apache Camel integrations in OSGi by Christian Schneider http://www.liquid-reality.de/x/G4Bk not found mouved to http://liquid-reality.de/Karaf-Tutorial/05/
* replaced => Communication between two remote Camel routes using Apache Karaf Cellar by Jean-Baptiste Onofré http://blog.nanthrax.net/2012/02/communication-between-two-remote-camel-routes-using-karaf-cellar/ not found
* replaced => Tools for building a real time analytics platform http://blog.avisi.nl/2013/07/01/tools-for-building-a-real-time-analytics-platform/ not found
* replaced => camunda BPM + Apache Camel: Integrating two Open Source frameworks http://camundabpm.blogspot.it/2013/09/camunda-bpm-apache-camel-integrating.html?m=1 blog removed
* replaced => Running Camel on EAP - by Christian Posta http://www.christianposta.com/blog/?p=396 not found
* replaced => A universal Streamer for Apache Ignite based on Apache Camel http://raul.io/a-universal-streamer-for-apache-ignite-based-on-apache-camel/ ERR_NAME_NOT_RESOLVED
* replaced => Ingesting Filebeat Data Into Your Apache Camel Flow http://ingesting%20filebeat%20data%20into%20your%20apache%20camel%20flow/ invalid url

Camel and Groovy
* replaced =>Groovy and Grape - easiest way to send gtalk message with Apache Camel http://www.andrejkoelewijn.com/wp/2009/02/28/groovy-and-grape-easiest-way-to-send-gtalk-message-with-apache-camel/ not found

Camel and Scala
* replaced => Apache Camel’s Scala DSL explored http://blog.avisi.nl/2013/01/07/apache-camels-scala-dsl-explored/ not found


Camel and the IoT (format : should be bold)
* replaced => The IoT in the service of the environment using Apache Camel & JBoss A-MQ http://bushorn.com/iot-service-environment-using-apache-camel-jboss-mq/ Error establishing a database connection
* replaced => Getting started with Apache Camel and Internet of Things

Comparison to Camel’s Competitors
* replaced => Light-weight, open-source integration: Apache Camel or Spring Integration? by Christian Posta http://www.christianposta.com/blog/?p=327 not found

Presentations on Apache Camel
* replaced => Implementing Enterprise Integration Patterns with Apache Camel http://family-hildebrandt.com/eduard/eip_with_apache_camel/ ERR_NAME_NOT_RESOLVED
* replaced => Dead Simple Integration with Apache Camel http://www.chariotsolutions.com/slides/pdfs/ete2009-camel-for-ete-2009.pdf not found
* mail claus => Claus Ibsen’s Apache Camel presentation at the FUSE community http://fusesource.com/ redirect to jboss.org
* mail claus => FuseSource presentations on Camel http://fusesource.com/community/events/ redirect to jboss.org
 Devoxx 2010 - Slides from the presentation http://devoxx.com/display/Devoxx2K10/Apache+Camel,+a+powerful+open+source+integration+framework blank page errors in html
* replaced => Introduction to Apache Camel is a nice set of slides http://fusesource.com/collateral/91 redirect to jboss.org
 CamelOne 2013 - CamelOne conference http://camelone.com/apache-camel-conference-2013/camelone_agenda_2013/ not found
* Removed => Developing Cloud Reday Camel Microservices - Video from JBCNConf 2017 https://www.youtube.com/watch?v=8PIJ6ODxAPE video not found

Podcasts
* removed => The Basement Coders Episode 14 - Apache Camel http://basementcoders.com/?p=684 time out https://player.fm/series/the-basement-coders/episode-14-apache-camel-2549200 http://www.basementcoders.com/media/basementcoders.com_ep14.mp3
* replaced => Podcast James Strachan - Mr Apache Camel http://cloudevangelist.org/2013/02/18/podcast-james-strachan-mr-apache-camel/ not found
* removed => Google Plus Apache Camel community https://plus.google.com/u/0/communities/106271384875356488225 G+ ends of service
* replaced => EIP printable flashcards https://studylib.net/doc/8175313/enterprise-integration-patterns-flashcards http://fusesource.com/fuse/enterprise-integration-patterns/ redirect to jboss.org graphml https://www.ecomify.de/wp-content/uploads/2015/04/EIP_all.graphml editable avec yEd https://nanopdf.com/download/enterprise-integration-patterns-flashcards_pdf https://docplayer.net/46191198-Enterprise-integration-patterns-flashcards.html
* mail claus => The Top Twelve Integration Patterns for Apache Camel Reference Card at DZone by Claus Ibsen http://refcardz.dzone.com/refcardz/apache-camel-update not found
* replaced and removed => The Apache Camel Components Poster => all links not found

Blogs
* replaced => Christian Schneider’s Blog http://www.liquid-reality.de/pages/viewpage.action?pageId=131134 not found http://liquid-reality.de/Karaf-Tutorial/
* Mail => Raul Kripalani’s Blog http://raul.io/ ERR_NAME_NOT_RESOLVED
* replaced => Robert James Liguori’s Blog http://robertjliguori.blogspot.com/ blog removed
* mail => Tracy Snell’s Blog http://code.notsoclever.cc/ ERR_NAME_NOT_RESOLVED
* Updated => [Charles Moulliard's Blog]

Non-English
* Remove => Domain-Specific Languages (DSLs) in Apache Camel (Spanish) by Gema Perdiguero http://www.tecsisa.com/index.igw?item=1628 not found
* Remove => Apache Camel integration in ServiceMix (Spanish) http://www.tecsisa.com/index.igw?item=1629 not found
* Remove => Apache Camel: Enterprise Integration met scripttalen en DSLs (Dutch) http://blog.finalist.com/2009/03/30/apache-camel-enterprise-integration-met-scripttalen-en-dsls/ ERR_NAME_NOT_RESOLVED
* mail => A practical example of using Camel and Groovy to post russian currency rates on Twitter http://github.com/dulanov/cbrru-agent not found
* replaced => Apache Camel for beginners - In polish http://www.programistamag.pl/magazine/show/18 not found
 

in progress ;)
zregvart:1564730666:2019-08-02T15:24:26.368+0000:1564730666:2019-08-02T15:24:26.368+0000:Thank you for doing this!
sekaijin:1565081658:2019-08-06T16:54:18.180+0000:1565081658:2019-08-06T16:54:18.180+0000:https://camel.apache.org/staging/community/articles/
videos
* removed => Wild Flies and A Camel https://www.youtube.com/watch?v=o8ZRE9DM3Es video not found
* replaced => Camel in the cloud using Fuse Fabric http://fuse.fusesource.org/fabric/ time out
* removed => Getting started with Apache Camel - Video presentation from Javagruppen https://javagruppen.dk/index.php/moder/historiske-moder/285-javagruppemode-115-apache-camel-i-aarhus 404
* replaced => Apache Camel Essential Components by Christian Posta http://blip.tv/dzone/apache-camel-essential-components-6511579 Error 523
* replaced => CamelOne 2012 Videos - All the videos http://fusesource.com/apache-camel-conference-2012/camelone_speakers_2012/ and http://fusesource.com/apache-camel-conference-2012 redirect to jboss.org
* replaced => CamelOne 2011 Video presentations CamelOne 2011 conference (May 2011) all links redirected to jboss.org
* Replaced => Paris JUG 2011 - Integration with Apache Camel and ESB by Charles Moulliard http://www.parleys.com/#id=2432&st=5&sl=0 blank page
* removed => Belgium JUG 2011 - Integration with Apache ServiceMix and Camel by Charles Moulliard http://www.parleys.com/#id=2601&st=5 blank page
* removed => Devoxx 2011 - Introduction to Apache ActiveMQ, ServiceMix https://devoxx.com/display/DV11/Introduction+to+Apache+ActiveMQ,+ServiceMix,+Camel+and+CXF blank page errors on html structure
* removed => Devoxx 2010 talk http://www.parleys.com/#id=2158&st=5 blank page errors on html structure
* replaced => at Øredev 2008 conference http://www.oredev.com/ 404 not found
* removed => Devoxx 2009 talk http://www.parleys.com/#sl=11&st=5&id=1577 blank page
* replaced => Medium Resolution http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-medium-resolution/ unreachable
* replaced => High Resolution http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-high-resolution/ unreachable
* Ok => Taking Camel for a ride http://bsnyderblog.blogspot.com/2008/05/activemq-and-servicemix-at-apachecon-us.html time out
* removed => JavaZone Conference - Taking Apache Camel for a Rider http://www4.java.no/incogito/session/Taking+Apache+Camel+for+a+Ride.html time out
* removed => Screencast/Demo of Smooks and Apache Camel processing UN/EDIFACT http://www.screencast.com/users/tfennelly/folders/Camtasia/media/c3cef9dd-e667-41ac-8597-74ca01d39968 Not found
* replaced => Facebook integration Apache Camel http://screencasts.chariotsolutions.com/facebook-integration-using-apache-camel not found
* replaced => Advanced AEM Search - Consuming External Content http://www.circuitdevcon.com/en/session-videos/aem-search-apache-camel.html HTTP ERROR 503
 
Articles 
* replaced => Integration with Apache Camel - Part I - Will get you over http://jaxenter.com/jax-magazine/JAX-Magazine-2013-05 not found
* replaced => Simple DSL OSGi bundle example by Andrej Koelewijn http://www.andrejkoelewijn.com/wp/2008/10/19/simple-camel-dsl-osgi-bundle-example/ not found
* replaced => Realization of EAI Patterns with Apache Camel by Pascal Kolb http://elib.uni-stuttgart.de/opus/volltexte/2008/3520/pdf/STUD_2127.pdf OPUS-ID 3520 nicht gefunden! (redirect error)
* replaced => First step with Apache Camel by Lukasz Budnik http://jee-bpel-soa.blogspot.com/2009/12/first-steps-with-apache-camel.html Sorry, the page you were looking for in this blog does not exist.
* removed => LEGO Java: Apache Camel Context and Route Basics http://www.canoo.com/blog/2011/03/14/lego-java-apache-camel-context-and-route-basics/ not found
* removed => LEGO® Java (II): Apache Camel Error Handling, http://www.canoo.com/blog/2011/03/16/lego-java-ii-apache-camel-error-handling-java-beans-and-web-services/ not found
* removed => What is Camel? a short blog http://bushorn.com/what-is-camel/ Error establishing a database connection
* removed => A bit more meat: Camel applied : JMS to File http://mikemclean.ca/muse/2009/05/a-bit-more-meat-camel-applied-jms-to-file/ not found
* removed => Spring Remoting with JMS Example on Amin Abbaspour’s Weblog the second link http://searjeant.blogspot.com/2009/02/camel-routes-and-hl7.html Le blog a été supprimé blog removed 
* removed => Camel routes and HL7 by Roger Searjeant http://searjeant.blogspot.com/2009/02/camel-routes-and-hl7.html => blog removed
* removed => Leverage EIP with Apache Camel and Twitter http://blog.brunoborges.com.br/2009/03/leverage-eip-with-apache-camel-and.html ERR_NAME_NOT_RESOLVED
* removed => Camel, CXF and JMS by Example by Silvester van der Bijl http://blog.software-art.nl/2009/11/15/camel-cxf-and-jms-by-example/ time out
* replaced => A simple file monitoring console with camel, cometd and jquery http://www.andrejkoelewijn.com/wp/2009/10/27/simple-log-console-with-camel-and-cometd/ not found
* replaced => A composite REST service using Apache Camel by Andrej Koelewijn http://www.andrejkoelewijn.com/wp/2010/06/13/a-composite-rest-service-using-camel/ not found
* removed => Using Apache Camel to route SOAP calls through message queues by Glen Mazza http://www.jroller.com/gmazza/entry/camel_jms_and_soap time out
* removed => Using Apache Camel to route SOAP calls through message queues by Glen Mazza http://www.jroller.com/gmazza/ time out
* replaced => Apache Camel Example Application - Earthquake Mashups http://blog.srvme.de/2011/01/30/apache-camel-example-application-earthquake-mashup/ Diese Domain ist unkonfiguriert.
* removed => Transforming and splitting huge EDI files using Smooks and Camel http://www.catify.com/2011/03/29/transforming-and-splitting-huge-edi-files-with-smooks/ not found
* removed => JDBC Persistence for Camel Aggregator http://labs.bsb.com/2011/04/jdbc-persistence-for-camel-aggregator/ Site non installé (uninstalled domain)
* replaced => TCP proxy with Apache Camel http://scottcranton.blogspot.com/2011/04/socat-is-so-cool.html blog removed
* removed => Process driven Froms with Apache Camel and websockets http://www.catify.com/2011/06/06/process-driven-form-with-apache-camel-and-websockets/ not found
* replaced => Website mashup with Apache Camel http://blog.nanthrax.net/2011/07/website-mashup-with-apache-camel/ not found
* removed => Hot Standby failover for Apache Camel by Christian Schneider http://www.liquid-reality.de/x/XYBe not found
* replaced => Camel and MongoDB: a match made in heaven http://blog.raulkr.net/2012/06/camel-and-mongodb-match-made-in-heaven.html not found
* removed => Some Camel Stuff - A blog post from February 2013 by John Källström http://j0hnk.github.com/blog/2013/02/04/some-camel-stuff/ not found
* replaced => Designing and Implementing our Camel-based mgm Cosmo Router http://blog.mgm-tp.com/2013/04/camel-router-part1/ ERR_NAME_NOT_RESOLVED
* replaced => Lessons learned from using Apache Camel, MTOM and JMS http://blog.avisi.nl/2013/05/28/lessons-learned-from-using-apache-camel-mtom-and-jms/ not found
* removed => Camel CXF Component – WSDL First Example https://code.notsoclever.cc/camel-cxf-component-wsdl-first-example/ ERR_NAME_NOT_RESOLVED
* removed => Camel CXFRS Component - Simple REST http://code.notsoclever.cc/camel-cxfrs-jdbc-rest-example/ ERR_NAME_NOT_RESOLVED
* replaced => From inside the code: Camel RouteBuilder and Java DSL http://www.christianposta.com/blog/?p=249 not found
* replaced => From inside the code: Camel Routing Engine Part I http://www.christianposta.com/blog/?p=323 not found
* replaced => Testing with Apache Camel - Blog post from April 2014 http://bushorn.com/unit-testing-apache-camel/ Error establishing a database connection
* replaced => Using Camel, CDI inside Kubernetes with Fabric8 http://using%20camel%2C%20cdi%20inside%20kubernetes%20with%20fabric8/ invalid url
* replaced => How to use Maven with Apache Camel from February 2017 https://integrationwire.com/camel/maven/ not found

Tooling
* removed => Implementing Fuji integration scenario using Camel SE by Louis Polycarpou http://blogs.sun.com/polyblog/entry/camel_fuji not found
* removed => Camel + Smooks from the official Smooks blog http://blog.smooks.org/2010/02/22/apache-camel-smooks/ not found
* removed => Smooks OSGI: Camel, UN/EDIFACT, ServiceMix https://dzone.com/links/smooks_osgi_camel_unedifact_servicemix.html manual redirect to http://blog.smooks.org/2011/02/19/smooks-osgi-revisited/ ERR_NAME_NOT_RESOLVED
* removed => ServiceMix bridge to IBM WebSphereMQ http://www.answerconsulting.com/blog/davisond/servicemix-bridge-to-websphere-mq/ not found
* replaced => Use remote EJB in Camel routes by Jean-Baptiste Onofré http://blog.nanthrax.net/2011/08/use-a-remote-ejb-in-camel-routes/ not found
* replaced => Use Camel, CXF and Karaf to implement batches by Jean-Baptiste Onofré http://blog.nanthrax.net/2011/08/use-camel-cxf-and-karaf-to-implement-batches/ not found
* replaced => Karaf Tutorial Part 5 - Running Apache Camel integrations in OSGi by Christian Schneider http://www.liquid-reality.de/x/G4Bk not found mouved to http://liquid-reality.de/Karaf-Tutorial/05/
* replaced => Communication between two remote Camel routes using Apache Karaf Cellar by Jean-Baptiste Onofré http://blog.nanthrax.net/2012/02/communication-between-two-remote-camel-routes-using-karaf-cellar/ not found
* replaced => Tools for building a real time analytics platform http://blog.avisi.nl/2013/07/01/tools-for-building-a-real-time-analytics-platform/ not found
* replaced => camunda BPM + Apache Camel: Integrating two Open Source frameworks http://camundabpm.blogspot.it/2013/09/camunda-bpm-apache-camel-integrating.html?m=1 blog removed
* replaced => Running Camel on EAP - by Christian Posta http://www.christianposta.com/blog/?p=396 not found
* replaced => A universal Streamer for Apache Ignite based on Apache Camel http://raul.io/a-universal-streamer-for-apache-ignite-based-on-apache-camel/ ERR_NAME_NOT_RESOLVED
* replaced => Ingesting Filebeat Data Into Your Apache Camel Flow http://ingesting%20filebeat%20data%20into%20your%20apache%20camel%20flow/ invalid url

Camel and Groovy
* replaced => Groovy and Grape - easiest way to send gtalk message with Apache Camel http://www.andrejkoelewijn.com/wp/2009/02/28/groovy-and-grape-easiest-way-to-send-gtalk-message-with-apache-camel/ not found

Camel and Scala
* replaced => Apache Camel’s Scala DSL explored http://blog.avisi.nl/2013/01/07/apache-camels-scala-dsl-explored/ not found


Camel and the IoT (format : should be bold)
* replaced => The IoT in the service of the environment using Apache Camel & JBoss A-MQ http://bushorn.com/iot-service-environment-using-apache-camel-jboss-mq/ Error establishing a database connection
* replaced => Getting started with Apache Camel and Internet of Things

Comparison to Camel’s Competitors
* replaced => Light-weight, open-source integration: Apache Camel or Spring Integration? by Christian Posta http://www.christianposta.com/blog/?p=327 not found

Presentations on Apache Camel
* replaced => Implementing Enterprise Integration Patterns with Apache Camel http://family-hildebrandt.com/eduard/eip_with_apache_camel/ ERR_NAME_NOT_RESOLVED
* replaced => Dead Simple Integration with Apache Camel http://www.chariotsolutions.com/slides/pdfs/ete2009-camel-for-ete-2009.pdf not found
* replaced => Claus Ibsen’s Apache Camel presentation at the FUSE community http://fusesource.com/ redirect to jboss.org
* replaced => FuseSource presentations on Camel http://fusesource.com/community/events/ redirect to jboss.org
* removed => Devoxx 2010 - Slides from the presentation http://devoxx.com/display/Devoxx2K10/Apache+Camel,+a+powerful+open+source+integration+framework blank page errors in html
* replaced => Introduction to Apache Camel is a nice set of slides http://fusesource.com/collateral/91 redirect to jboss.org
* replaced => CamelOne 2013 - CamelOne conference http://camelone.com/apache-camel-conference-2013/camelone_agenda_2013/ not found
* Removed => Developing Cloud Reday Camel Microservices - Video from JBCNConf 2017 https://www.youtube.com/watch?v=8PIJ6ODxAPE video not found

Podcasts
* removed => The Basement Coders Episode 14 - Apache Camel http://basementcoders.com/?p=684 time out https://player.fm/series/the-basement-coders/episode-14-apache-camel-2549200 http://www.basementcoders.com/media/basementcoders.com_ep14.mp3
* replaced => Podcast James Strachan - Mr Apache Camel http://cloudevangelist.org/2013/02/18/podcast-james-strachan-mr-apache-camel/ not found
* removed => Google Plus Apache Camel community https://plus.google.com/u/0/communities/106271384875356488225 G+ ends of service
* replaced => EIP printable flashcards https://studylib.net/doc/8175313/enterprise-integration-patterns-flashcards http://fusesource.com/fuse/enterprise-integration-patterns/ redirect to jboss.org graphml https://www.ecomify.de/wp-content/uploads/2015/04/EIP_all.graphml editable avec yEd https://nanopdf.com/download/enterprise-integration-patterns-flashcards_pdf https://docplayer.net/46191198-Enterprise-integration-patterns-flashcards.html
* replaced => The Top Twelve Integration Patterns for Apache Camel Reference Card at DZone by Claus Ibsen http://refcardz.dzone.com/refcardz/apache-camel-update not found
* replaced and removed => The Apache Camel Components Poster => all links not found

Blogs
* replaced => Christian Schneider’s Blog http://www.liquid-reality.de/pages/viewpage.action?pageId=131134 not found http://liquid-reality.de/Karaf-Tutorial/
* removed => Raul Kripalani’s Blog http://raul.io/ ERR_NAME_NOT_RESOLVED
* replaced => Robert James Liguori’s Blog http://robertjliguori.blogspot.com/ blog removed
* removed => Tracy Snell’s Blog http://code.notsoclever.cc/ ERR_NAME_NOT_RESOLVED
* Updated => [Charles Moulliard's Blog]

Non-English
* Removed => Domain-Specific Languages (DSLs) in Apache Camel (Spanish) by Gema Perdiguero http://www.tecsisa.com/index.igw?item=1628 not found
* Removed => Apache Camel integration in ServiceMix (Spanish) http://www.tecsisa.com/index.igw?item=1629 not found
* Removed => Apache Camel: Enterprise Integration met scripttalen en DSLs (Dutch) http://blog.finalist.com/2009/03/30/apache-camel-enterprise-integration-met-scripttalen-en-dsls/ ERR_NAME_NOT_RESOLVED
* removed => A practical example of using Camel and Groovy to post russian currency rates on Twitter http://github.com/dulanov/cbrru-agent not found
* replaced => Apache Camel for beginners - In polish http://www.programistamag.pl/magazine/show/18 not found



It's finish.
the file is attached
A+JYT
zregvart:1565141377:2019-08-07T09:29:37.254+0000:1565141377:2019-08-07T09:29:37.254+0000:Thank you [~sekaijin] for your time and a really nice contribution, it must have taken you a lot of time to work through all those links! The changes should be visible on the staging site in the next 5 or so minutes from now."
0,CAMEL-13808,Improvement,Major,None,None,"
None
",Resolved,Not A Problem,"3.0.0.RC1, 3.0.0",Unassigned,Claus Ibsen,0,1,2019-07-31 12:58:28+00:00,2019-07-31 13:24:17+00:00,"The DSL make it possible to setup 2+ intercept, but it does not make sense as you then intercept also the intercept. We should only allow to set 1 per route builder / camel-context and 1 per route.","davsclaus:1564549179:2019-07-31T12:59:39.171+0000:1564549179:2019-07-31T12:59:39.171+0000:You can have mutliple interceptFrom and sendTo as they can trigger on different endpoints.
davsclaus:1564550657:2019-07-31T13:24:17.827+0000:1564550657:2019-07-31T13:24:17.827+0000:Ah I forgot you can add a when predicate and therefore you can have multiple intercepts that react differently on the when"
0,CAMEL-13807,New Feature,Major,None,None,"
None
",Closed,Fixed,3.1.0,Omar Al-Safi,Claus Ibsen,0,3,2019-07-31 09:02:27+00:00,2020-02-04 10:17:33+00:00,"Some components can also be configured, and today you can configure them via



spring boot auto configuration
camel main configuration
java code manually via setter/getter
xml syntax via <bean>



We should look at generating a Java component DSL with fluent builder like camel-endpointdsl. Then its similar and you can configure them


  component().jms().concurrentConsumers(5).keepAlive(6000)


And then later if/when we do a XML version of endpoint DSL we can do one for components too.","omarsmak:1574820862:2019-11-27T10:14:22.348+0000:1574821661:2019-11-27T10:27:41.383+0000:[~davsclaus] I am interested to help on this feature as I think is very cool to see it in Camel 3.1. Probably I'd start working on it in the next coming weeks. Before jumping in, I have some questions:
 * As I can see from the {{endpointdsl}}, we let the users access the DSL factory through {{EndpointRouteBuilder}} once they have the endpoint DSL imported. But how do we want to achieve that for the component DSL? I was thinking of adding an additional method for component builder that can give access to the component DSL similar to endpoint builder, something like this 
{code}
camelContext.addComponent(new ComponentBuilder() {...});
{code}
Or a second option is that, we can provide the builder in the Component interface, e.g: {{Component.getBuilder().jms().concurrentConsumers(5).keepAlive(6000).build()}}, what do you think which would make sense? Or which approach do you have in mind that better fit?
davsclaus:1574906500:2019-11-28T10:01:40.167+0000:1574906500:2019-11-28T10:01:40.167+0000:Omar, yeah lets give this some time to come up with good ideas how the end users uses this and from where.
Maybe at first work on the maven plugin that generates the source code. And yeah then maybe have a CompontBuilder as the main entry for now. As this allows to keep it in a separate JAR. As we need to make it optional, like the endpoint dsl is.

For example in a new
camel-componentdsl

And then after that we figure out the apis to use it from Camel. For example it would also be nice to use it for spring boot bean

{code}
@Bean
public KafkaComponent myKafka() {
   return ComponentBuilder.kafka().....buidl(); // or what api we have
{code}

omarsmak:1574907840:2019-11-28T10:24:00.936+0000:1574907840:2019-11-28T10:24:00.936+0000:Got it, thanks for the info (y)
omarsmak:1578877006:2020-01-13T08:56:46.989+0000:1578877006:2020-01-13T08:56:46.989+0000:Will continue working on this starting from this week"
0,CAMEL-13806,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Claus Ibsen,0,1,2019-07-31 07:36:39+00:00,2019-07-31 10:52:41+00:00,"See talk at
http://camel.465427.n5.nabble.com/DISCUSS-Camel-3-Deprecate-camel-ejb-tp5839933.html",
0,CAMEL-13775,Sub-task,Critical,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,1,2019-07-22 07:24:28+00:00,2019-07-26 12:46:56+00:00,Without robots.txt the website gains lower SEO. Also we need to point to the generated sitemaps to help with search engine crawling.,
0,CAMEL-13774,Improvement,Major,"2.24.1, 3.0.0.M4","3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,michael elbaz,0,2,2019-07-21 19:51:22+00:00,2019-08-07 21:27:06+00:00,"Accept iterator or Java 8 Stream as body to produce a zip file this will avoid to use the memory for big file (for some use case we can't get an inputStream)


For example it would be very nice to be able to do this:




from(""timer:foo?repeatCount=1"")
                .setBody(constant(Stream.of(""v1"", ""v2"")))
                .setHeader(Exchange.FILE_NAME, constant(""report.txt""))
                .marshal().zipFile()
                .to(""file:output/directory"");




(https://stackoverflow.com/questions/50295432/zip-and-unzip-a-large-file-without-loading-the-entire-file-in-memory-in-apache-c)","davsclaus:1564882396:2019-08-04T09:33:16.920+0000:1564882396:2019-08-04T09:33:16.920+0000:Adding type converter so when converting to Iterator then we can support Java 8 Stream now
davsclaus:1565134724:2019-08-07T07:38:44.834+0000:1565134724:2019-08-07T07:38:44.834+0000:Marshal and Unmarshal APIs work with InputStream so its not possible to use Iterator.
davsclaus:1565134770:2019-08-07T07:39:30.361+0000:1565134770:2019-08-07T07:39:30.361+0000:The same for camel-tarfile
michael992:1565139665:2019-08-07T09:01:05.530+0000:1565139665:2019-08-07T09:01:05.530+0000:So the only use case is when using from file is it not really useful i think 
davsclaus:1565140809:2019-08-07T09:20:09.317+0000:1565141581:2019-08-07T09:33:01.401+0000:No anyting that is streaming via InputStream
michael992:1565141719:2019-08-07T09:35:19.296+0000:1565141719:2019-08-07T09:35:19.296+0000:My use case i scrolling nosql database using rxjava (couchbase) so finally i got some stream like or iterator and i can't write it directly to a zip. This kind of usage will happen more and more in the future so now i can't really use camel is pity.
davsclaus:1565142091:2019-08-07T09:41:31.723+0000:1565142091:2019-08-07T09:41:31.723+0000:Camel has a lot more than just a zipfile component. And we will look at this later. And you can always write some java code to write a zipfile yourself
michael992:1565142727:2019-08-07T09:52:07.897+0000:1565142791:2019-08-07T09:53:11.695+0000:Of course i also can say my use case is more batch kind of processing but it will be very nice to me using camel also in my case, and yes i juste use java in this case but without all advantages provided by camel.
davsclaus:1565146584:2019-08-07T10:56:24.649+0000:1565146584:2019-08-07T10:56:24.649+0000:Okay found a way to wrap the java8 stream and iterator as input stream so zipfile can work with that
michael992:1565149362:2019-08-07T11:42:42.269+0000:1565149439:2019-08-07T11:43:59.294+0000:Maybe instead we can just improve this class https://github.com/apache/camel/blob/master/components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipFileDataFormat.java

And instead of just write and close the stream all the time 
{code:java}
try {
    IOHelper.copy(is, zos);
} finally {
    IOHelper.close(is, zos);
}
{code}
we can simply detect if it's java 8 stream then convert it to iterator and then just iterate over it what do you think about ?
davsclaus:1565152726:2019-08-07T12:38:46.168+0000:1565152726:2019-08-07T12:38:46.168+0000:Yeah but I improved it so the java 8 stream is wrapped as input stream (via its iterator) so it works generic and then it would also work with other components like file / ftp etc and many more. And then i reverted the new code in zipfile.
michael992:1565153762:2019-08-07T12:56:02.033+0000:1565153762:2019-08-07T12:56:02.033+0000:Ok i see (https://github.com/apache/camel/blob/3417c9ef5fa45f86dfa386c8b38a9ce4bf0bdd30/core/camel-support/src/main/java/org/apache/camel/support/InputStreamIterator.java) nice thanks ! 
michael992:1565153949:2019-08-07T12:59:09.148+0000:1565153949:2019-08-07T12:59:09.148+0000:Maybe you should also accept directly an iterator and not just J8 Stream
davsclaus:1565157881:2019-08-07T14:04:41.391+0000:1565157881:2019-08-07T14:04:41.391+0000:That may be too generic as we assume that the iterator returns chunk of data that can be byte arrays. Not sure if you have eg a iterator for some Java objects or something else.
michael992:1565158283:2019-08-07T14:11:23.103+0000:1565184426:2019-08-07T21:27:06.639+0000:I don't really/understand see the point, if i understand is the same for what you're already done, i mean stream can be also stream of object or other "
0,CAMEL-13773,Task,Minor,None,None,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-07-21 16:47:52+00:00,2019-11-04 06:27:56+00:00,"There is some deprecated code in camel-sjms which we should remove.


Contributions is welcome.",
0,CAMEL-13772,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Won't Fix,"3.0.0.RC1, 3.0.0",Unassigned,Claus Ibsen,0,1,2019-07-20 12:15:41+00:00,2019-07-20 12:17:46+00:00,"camel-cdi has some xml support for loading spring xml files, but this was for cdi on karaf/osgi, and we dont support this (only blueprint) so lets remove this cruft.","davsclaus:1563596260:2019-07-20T12:17:40.736+0000:1563596260:2019-07-20T12:17:40.736+0000:Ah okay on 2nd thought I remember that wildfly-camel supports xml and cdi, so they would use this."
0,CAMEL-13770,Bug,Major,"2.23.3, 2.24.1","2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0",Claus Ibsen,Hemang Ajmera,0,3,2019-07-19 10:58:51+00:00,2019-08-02 05:02:38+00:00,"From version 2.22.0 onwards spring-boot version is upgraded to 2.x
After that all Map properties are not working


For example in application.properties
camel.component.salesforce.http-client-properties is treated as string instead of Map and whatever value we provide to it, the Map is initialize as null","hemangajmera:1563505675:2019-07-19T11:07:55.829+0000:1563505675:2019-07-19T11:07:55.829+0000:This is with Camel 2.24.1 and Spring-boot 2.1.6 !screenshot-with-2.24.1.png! 

This is with camel 2.21.1 and spring-boot 1.5.21  !screenshot-with-2.21.1.png! 
davsclaus:1563587009:2019-07-20T09:43:29.566+0000:1563587009:2019-07-20T09:43:29.566+0000:Can you post some sample code of the configuration you did before.
hemangajmera:1563758115:2019-07-22T09:15:15.087+0000:1563758144:2019-07-22T09:15:44.799+0000:I was using camel.component.
{code:java}
salesforce.http-client-properties.requestBufferSize=65536
{code}

Since we have very long query. The default value is not sufficient.

If this parameter is not used, we get exception 
{code}
Caused by: org.eclipse.jetty.http.BadMessageException: 500: Request header too large
{code}

I also run in debug mode, where I can see httpClientProperties in SalesforceComponent as empty in new version and initialized with requestBufferSize in old version.
hemangajmera:1563772893:2019-07-22T13:21:33.940+0000:1563772914:2019-07-22T13:21:54.488+0000:code attached in CAMEL-13766 can be used to check this.
davsclaus:1563942591:2019-07-24T12:29:51.674+0000:1563942591:2019-07-24T12:29:51.674+0000:Thanks I have reproduced this on master and work on a fix there
hemangajmera:1563942960:2019-07-24T12:36:00.026+0000:1563942960:2019-07-24T12:36:00.026+0000:Can this be please fixed in version 2.x also.



davsclaus:1563958379:2019-07-24T16:52:59.105+0000:1563958379:2019-07-24T16:52:59.105+0000:Yeah I have backported it to relevant 2.x branches
hemangajmera:1564693358:2019-08-02T05:02:38.047+0000:1564693358:2019-08-02T05:02:38.047+0000:hi
  I was searching for release calendar or guideline. Do you know when are these version planned to be released?"
0,CAMEL-13769,Sub-task,Blocker,None,,"
None
",Resolved,Done,None,Zoran Regvart,Zoran Regvart,0,1,2019-07-19 08:12:47+00:00,2019-07-29 09:21:59+00:00,We need to add schemas currently present in the https://camel.apache.org/schema/ to the new website.,zregvart:1564363319:2019-07-29T09:21:59.717+0000:1564363319:2019-07-29T09:21:59.717+0000:Current schemas have been exported from SVN to the camel-website git repository.
0,CAMEL-13768,New Feature,Major,"2.24.1, 3.x",3.12.0,"
None
",Resolved,Fixed,3.12.0,Otavio Rodolfo Piske,michael elbaz,1,5,2019-07-18 11:45:21+00:00,2021-12-17 09:16:10+00:00,"1. Provide a way to rewind kafka offset to specific offset (improve seekTo ?) there is no way to do that using camel-kafka component. The main idea is to replay older kafka messages without starting from the beginning.
   for example:  https://blog.sysco.no/integration/kafka-rewind-consumers-offset/




boolean flag = true;

while (true) {
    ConsumerRecords<String, String> records = consumer.poll(100);

    if(flag) {
        Map<TopicPartition, Long> query = new HashMap<>();
        query.put(
                new TopicPartition(""simple-topic-1"", 0),
                Instant.now().minus(10, MINUTES).toEpochMilli());

        // Get offset from timestamp
        Map<TopicPartition, OffsetAndTimestamp> result = consumer.offsetsForTimes(query);

        // Rewind offset to previous position using seekTo
        result.entrySet()
                .stream()
                .forEach(entry -> consumer.seek(entry.getKey(), entry.getValue().offset()));

        flag = false;
    }

    for (ConsumerRecord<String, String> record : records)
        System.out.printf(""offset = %d, key = %s, value = %s%n"", record.offset(), record.key(), record.value());
}




2. Provide a way to access kafkaConsumer
   Add camel header with reference to kafkaConsumer to be able to perform some Kafka api call.We can use the same way that we do with KafkaManualCommit




public void process(Exchange exchange) {
    KafkaManualCommit manual =
        exchange.getIn().getHeader(KafkaConstants.MANUAL_COMMIT, KafkaManualCommit.class);
    manual.commitSync();
}","davsclaus:1563449575:2019-07-18T19:32:55.164+0000:1563449575:2019-07-18T19:32:55.164+0000:Hi

Can you try to explain this in more details what you are asking for. And make sure to separate the 2 things in their own comments so we can keep them separated and better understand
michael992:1563457276:2019-07-18T21:41:16.999+0000:1563457276:2019-07-18T21:41:16.999+0000:Done i hope is it more clear 
orpiske:1632207638:2021-09-21T15:00:38.677+0000:1632207638:2021-09-21T15:00:38.677+0000:I believe this should be possible to do once we implement CAMEL-16974. With that users can implement their own resume strategy. And, with that in place, I think it's just a matter of calling consumer.seek to the appropriate offset.
orpiske:1632275824:2021-09-22T09:57:04.826+0000:1632275824:2021-09-22T09:57:04.826+0000:The changes were merged. Closing.
michael992:1639703770:2021-12-17T09:16:10.072+0000:1639703770:2021-12-17T09:16:10.072+0000:Thanks !"
0,CAMEL-13767,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-07-18 11:07:30+00:00,2019-07-18 15:27:44+00:00,https://www.elastic.co/guide/en/elasticsearch/reference/master/removal-of-types.html,
0,CAMEL-13766,Improvement,Minor,2.24.0,,"
None
",Closed,Not A Problem,None,Unassigned,Hemang Ajmera,0,2,2019-07-18 09:33:04+00:00,2020-03-18 17:18:43+00:00,"In my unit test, I am replacing salesfoce component with a mock. However, still the component is getting activated with being replace with mock. Because of this test case fails in our Jenkins environment as from Jenkins server, there is no connectivity to salesforce.


 


Here is the part of unit test code




    @EndpointInject(uri = ""mock:salesforce:query"")
    private MockEndpoint sfMock;

    String sfResponse = ""{}""; // Expected  response value from SF

        RouteDefinition mainRoute = context.getRouteDefinition(""main-route"");
        mainRoute.adviceWith(context, new AdviceWithRouteBuilder(){
        
            @Override
            public void configure() throws Exception {
                mockEndpointsAndSkip(""salesforce.*"");
            }
        });
        sfMock.whenAnyExchangeReceived(new Processor(){
            @Override
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(sfResponse);
            }
        });



Here is the logs in my local machine
 



2019-07-18 13:43:42.719  INFO 4288 — [           main] org.eclipse.jetty.util.log               : Logging initialized @22433ms to org.eclipse.jetty.util.log.Slf4jLog}}
2019-07-18 13:43:42.890  INFO 4288 — [           main] o.a.c.util.jsse.SSLContextParameters     : Available providers: SUN version 1.8.
2019-07-18 13:43:43.608  INFO 4288 — [           main] o.a.c.c.s.internal.SalesforceSession     : Login at Salesforce loginUrl: https://test.salesforce.com/services/oauth2/token
2019-07-18 13:43:46.514  INFO 4288 — [           main] o.a.c.c.s.internal.SalesforceSession     : Login successful
2019-07-18 13:43:46.519  INFO 4288 — [           main] o.a.c.c.salesforce.SalesforceComponent   : Found 0 generated classes in packages: [org.apache.camel.salesforce.dto]
{{2019-07-18 13:43:46.523  INFO 4288 — [           main] .c.i.InterceptSendToMockEndpointStrategy : Adviced endpoint [salesforce://query?format=JSON&rawPayload=true&sObjectQuery=SELECT+Id%2C+OwnerId%2CLastModifiedById%2CLastModifiedDate+FROM+Account+WHERE+Id+IN%28%27abcd%27%29] with mock endpoint [mock:salesforce:query]


We can clearly see the component is initiated first and then replaced with mock. The idea of replacing with mock is that we should be able to test even if component cannot be initiated.","davsclaus:1563414669:2019-07-18T09:51:09.667+0000:1563414669:2019-07-18T09:51:09.667+0000:Make sure when you unit test that you have set it to use advice with so camel context is not started automatic, but you start it yourself after advice / mocking
hemangajmera:1563414925:2019-07-18T09:55:25.254+0000:1563414925:2019-07-18T09:55:25.254+0000:I am already doing it. This is my Test class declaration

{code:java}

@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes = AccountOwnerNotificationApplication.class)
@UseAdviceWith
public class AccountOwnerNotificationRouteTest {
{code}

hemangajmera:1563415417:2019-07-18T10:03:37.711+0000:1563415417:2019-07-18T10:03:37.711+0000:Here is complete test class where some of the client details are removed/replaced

{code:java}

package xxx.routing;

import xxx.AccountApplication;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.model.RouteDefinition;
import org.apache.camel.test.spring.CamelSpringBootRunner;
import org.apache.camel.test.spring.UseAdviceWith;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@RunWith(CamelSpringBootRunner.class)
@SpringBootTest(classes = AccountApplication.class)
@UseAdviceWith
public class AccountRouteTest {

    @Autowired
    private CamelContext context;

    @Autowired
    private ProducerTemplate template;

    @EndpointInject(uri = ""mock:ems:topic:{{tibcoems.topicname.account}}"")
    private MockEndpoint target2Mock;

    @EndpointInject(uri = ""mock:ems:queue:{{tibcoems.queuename.account}}"")
    private MockEndpoint target1Mock;

    
    @EndpointInject(uri = ""mock:salesforce:query"")
    private MockEndpoint sfMock;

    @Test
    public void testMessageWithOneId() throws Exception {

        RouteDefinition deliveryAccountOwnerMain = context.getRouteDefinition(""delivery-accountowner-main"");
        deliveryAccountOwnerMain.adviceWith(context, new AdviceWithRouteBuilder(){
        
            @Override
            public void configure() throws Exception {
                replaceFromWith(""direct:hitme"");
                mockEndpointsAndSkip(""ems.*"");
                mockEndpointsAndSkip(""salesforce.*""); 
            }
        });

        String input = ""input data"";

        String sfResponse = ""sf response data"";

        String expectedtarget2 = ""expected target 1"";
        
        context.start();
        
        sfMock.whenAnyExchangeReceived(new Processor(){
            @Override
            public void process(Exchange exchange) throws Exception {
                exchange.getIn().setBody(sfResponse);
            }
        });

        //Set all expections
        target2Mock.expectedBodiesReceived(expectedtarget2);
        target1Mock.allMessages().xpath(""//UserId/text()"").isEqualTo(""user"");
        target1Mock.allMessages().xpath(""//Email/text()"").isEqualTo(""user@example.com"");
        
        //Trigger the message
        template.sendBody(""direct:hitme"", input);

        //Confirm all expections
        target2Mock.assertIsSatisfied();
        target1Mock.assertIsSatisfied();

    }
    
}
{code}

davsclaus:1563417054:2019-07-18T10:30:54.878+0000:1563417054:2019-07-18T10:30:54.878+0000:You need to set lazyLogin=true on salesforce
hemangajmera:1563417875:2019-07-18T10:44:35.157+0000:1563417875:2019-07-18T10:44:35.157+0000:Added camel.component.salesforce.lazy-login=true in application.properties. Still it is login to salesforce.
davsclaus:1563449437:2019-07-18T19:30:37.736+0000:1563449437:2019-07-18T19:30:37.736+0000:Can you try to debug/log what happens, and also you can try with a newer version like 3.0.0-M4
hemangajmera:1563480774:2019-07-19T04:12:54.826+0000:1563480774:2019-07-19T04:12:54.826+0000:We are still using version 2.x in all our application, so as of now we are not ready for version 3.x. Also is 3.0.0-M4 production ready? My understanding is this version is somewhat similar to Beta version.

I will create a standalone minimal code to reproduce the situation and share the debug log shortly.
hemangajmera:1563504635:2019-07-19T10:50:35.256+0000:1563504635:2019-07-19T10:50:35.256+0000:Source code and debug log attached.

I tried using 3.0.0-M4, but test code could not compile as it. So couldn't test it.
hemangajmera:1564620741:2019-08-01T08:52:21.933+0000:1564620741:2019-08-01T08:52:21.933+0000:[~davsclaus] any clue on this one?
hemangajmera:1564732927:2019-08-02T16:02:07.367+0000:1564732927:2019-08-02T16:02:07.367+0000:I did more analysis into this. I noticed that during initialization salesfoce component does not try to login if lazylogin is set to true. But it tries to login when starts the route. Sharing here, in case it helps resolving the issue.
davsclaus:1564881538:2019-08-04T09:18:58.501+0000:1564881538:2019-08-04T09:18:58.501+0000:Try with 3.0M5 as we have improved a bit in there
davsclaus:1567406228:2019-09-02T14:37:08.970+0000:1567406228:2019-09-02T14:37:08.970+0000:The 3.0 RC1 has been released try with that
hemangajmera:1584489267:2020-03-18T07:54:27.308+0000:1584489267:2020-03-18T07:54:27.308+0000:I have tested this with version 3.1.0 and getting the same issue. Please look at the updated code base.
davsclaus:1584497099:2020-03-18T10:04:59.922+0000:1584497099:2020-03-18T10:04:59.922+0000:Okay you should do

a.weaveByToUri(""sales*"").replace().to(""mock:salesforce:query"");

davsclaus:1584497358:2020-03-18T10:09:18.975+0000:1584497358:2020-03-18T10:09:18.975+0000:MockEndpoints will still create the endpoints and as part of that their components will be created and started, use the replace feature to completely replace them.
hemangajmera:1584523088:2020-03-18T17:18:08.179+0000:1584523088:2020-03-18T17:18:08.179+0000:Thanks. The method you suggested works fine. You can close the issue!"
0,CAMEL-13765,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-07-18 07:12:52+00:00,2019-07-18 07:58:07+00:00,No Desc,
0,CAMEL-13764,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Pasquale Congiusti,0,1,2019-07-18 07:04:05+00:00,2019-07-18 15:37:03+00:00,Completing request CAMEL-13662 by adding the possibility to inject a connectionBean also from MongoDBComponent class.,squakez:1563404663:2019-07-18T07:04:23.056+0000:1563404663:2019-07-18T07:04:23.056+0000:Already WIP
0,CAMEL-13763,Improvement,Critical,3.0.0-M2,3.0.0.RC1,"
None
",Resolved,Won't Fix,3.0.0.RC1,Claus Ibsen,Erik Boeters,0,2,2019-07-18 06:58:25+00:00,2019-07-18 19:34:41+00:00,"When setting camel.springboot.xmlRoutesReloadDirectory, any route using the Elasticsearch rest producer will cause a shutdown of the http client. When reloading a route, the route will be stopped and client.close() is being called on RestClient. The shared http client will not be able to handle new requets because the reactor status is STOPPED.","davsclaus:1563404794:2019-07-18T07:06:34.276+0000:1563404813:2019-07-18T07:06:53.220+0000:This feature with reload xml directory is removed in Camel 3
davsclaus:1563449681:2019-07-18T19:34:41.669+0000:1563449681:2019-07-18T19:34:41.669+0000:You are welcome to dive into the source code and see if there is something related to start/stop logic of the component that may not clear a http client or something which causes the component to not restart more cleanly."
0,CAMEL-13762,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-07-18 06:41:34+00:00,2019-07-18 07:57:59+00:00,No Desc,
0,CAMEL-13761,Improvement,Trivial,2.23.3,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Marquis Wang,0,2,2019-07-17 20:51:25+00:00,2019-07-18 19:02:25+00:00,"The Javadoc (https://static.javadoc.io/org.apache.camel/camel-core/2.23.3/org/apache/camel/StartupListener.html) for StartupListener is misleading (italics for emphasis):


This can be used to perform any custom work when the entire CamelContext has been initialized and almost started. For example this ensures that all Camel routes have been started and are up and running, before this callback is invoked.


However, routes are not started within the callback. The following code, for example, 




DefaultCamelContext context = new DefaultCamelContext();

context.addStartupListener((c, alreadyStarted) -> {
    c.createProducerTemplate().sendBody(""direct:doesNotExistYet"", new Object());
});

context.addRoutes(new RouteBuilder() {
    @Override
    public void configure() {
        from(""direct:doesNotExistYet"").bean((Consumer<Object>) System.out::println);
    }
});
context.start();



fails with




Caused by: org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: direct://doesNotExistYet. Exchange[ID-x-1563396556957-0-1]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:69)
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)
	at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)
	... 12 more




I am aware that using ExtendedStartupListener or an EventNotifier makes this work, but it would be great if the Javadoc was updated (assuming this is intended behavior, I am not sure).","davsclaus:1563406077:2019-07-18T07:27:57.822+0000:1563406077:2019-07-18T07:27:57.822+0000:I updated the javadoc
mwang5:1563447606:2019-07-18T19:00:06.327+0000:1563447606:2019-07-18T19:00:06.327+0000:Thanks, the updated comment is much clearer. However, I still think it is a bit misleading.

{quote}This callback is invoked twice during starting the Camel routes, once before the route consumers are started, and once again after the route consumer has just been started.{quote}

Reading this, I would expect 
{code}
context.addStartupListener((c, alreadyStarted) -> System.out.println(""Calling StartupListener""));
{code}

to be called twice on {{context.start()}}. Instead, it is only called once.

If I'm reading the code correctly, StartupListeners that are added before {{context.start()}} is called will be invoked before the route consumers are started. Route consumers may themselves implement StartupListener as well, in which case they are then invoked after the route consumers are started. Is this correct?

Also, it might be worth mentioning that this is also invoked whenever a route is added after the service has already been started. I do realize that is in the parameter javadoc for {{alreadyStarted}} but it's not super obvious.
davsclaus:1563447745:2019-07-18T19:02:25.066+0000:1563447745:2019-07-18T19:02:25.066+0000:Yes you are welcome to submit a PR with an updated javadoc, thanks. We love contributions"
0,CAMEL-13760,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-07-17 18:32:55+00:00,2019-07-23 21:16:33+00:00,This causes some issues and its better we stick to one model the default of using {{ }} which is the Camel style.,
0,CAMEL-13759,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-07-17 18:13:39+00:00,2019-07-18 08:49:35+00:00,"We have an old debugger implementation that just have callbacks before|after a processor in the routes which you can then from camel-test override the before/after methods to have debugging in the editor.


We should remove this as its using the intercept strategy which is intended not to be so much in use. So lets cleanup a bit of cruft. There is already the newer backlog debugger that hawtio and other tools uses for debugging.",davsclaus:1563410975:2019-07-18T08:49:35.388+0000:1563410975:2019-07-18T08:49:35.388+0000:Debugger should not use intercept strategy but use internal processor advice as other similar features does
0,CAMEL-13758,Bug,Minor,"2.16.4, 2.24.1",,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Rajiv,0,2,2019-07-17 17:08:18+00:00,2019-09-05 18:38:54+00:00,"Unable to parse $simple{}, when you have prefixToken=""${"" suffixToken=""}"" in the propertyPlaceholder.


For example -


<camelContext xmlns=""http://camel.apache.org/schema/spring""> <propertyPlaceholder id=""ignoreId"" location=""classpath:props.properties"" prefixToken=""${"" suffixToken=""}""/> <route id=""sendNotification""> <from uri=""jms:queue:queue.sendNotification""/> <to uri=""file:${OnDemand.output.url}?fileName=L2W.$simple{in.header.accountNum}-${date:now:yyyyMMddHHmmssSSS}.csv""/> </route> </camelContext>


 


In the above route ${OnDemand.output.url} is a Spring property placeholders and $simple{in.header.accountNum} is a camel property placeholder.


Note:- This route configuration used to work till Camel 2.12


According to https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/pages/using-propertyplaceholder.adoc- one should be able to refer to Camel's properties using $simple{...} like this:


 


<setHeader headerName=""Exchange.FILE_NAME""> <simple>{{file.rootdir/$simple{in.header.CamelFileName}</simple </setHeader>


 


Replication - camel-test.zip attached. Main class - CamelHelloWorldSpringExample.java","davsclaus:1563359324:2019-07-17T18:28:44.343+0000:1563359324:2019-07-17T18:28:44.343+0000:Why are you changing those prefix and suffix tokens - use the defaults. 
davsclaus:1563411769:2019-07-18T09:02:49.039+0000:1563411769:2019-07-18T09:02:49.039+0000:Thats because you mix/clash using the same suffix token with the $simple{ } syntax. Use the defaults in Camel which is {{ }}.
Troy Smith:1563442666:2019-07-18T17:37:46.732+0000:1567679934:2019-09-05T18:38:54.767+0000:Hi Claus,

When I use the defaults \{{ }} it breaks something else. For example - 

<setHeader headerName=""CamelHttpUri"">
  <simple>{{{{webservice.url}}}}?criteria={""pst_num"":[\\{""start"":$simple{in.header.accountNumber}}],""max"":{}}&userid=none&fields=secr_num,reg_cde&limit=100000000</simple>
 </setHeader>

Caused by: java.lang.IllegalArgumentException: *Missing {{ from the text:* [http://localhost:8585/app?criteria=\|http://localhost:8585/app?criteria=]{""pst_num"":[\\\\\\{""start"":$simple{in.header.accountNumber}}|file://%7B%22start%22:%24simple%7Bin.header.accountnumber%7D%7D/],""max"":{}}&userid=none&fields=secr_num,reg_cde&limit=100000000
davsclaus:1563448170:2019-07-18T19:09:30.537+0000:1563448170:2019-07-18T19:09:30.537+0000:You can escape the end }, see the docs at
https://github.com/apache/camel/blob/master/core/camel-base/src/main/docs/simple-language.adoc"
0,CAMEL-13757,Sub-task,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,1,2019-07-17 14:33:16+00:00,2019-07-26 08:12:15+00:00,We need to determine if we can replace the copyright in the footer and see if we need to put ASF copyright on pages.,zregvart:1564099929:2019-07-26T08:12:09.507+0000:1564099929:2019-07-26T08:12:09.507+0000:Addressed via [https://github.com/apache/camel-website/pull/61] thanks [~nayanagamuhandiram]
0,CAMEL-13756,Task,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-07-17 10:49:24+00:00,2019-07-17 10:58:41+00:00,No Desc,
0,CAMEL-13755,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-07-17 10:07:21+00:00,2019-07-23 07:10:40+00:00,No Desc,"davsclaus:1563358497:2019-07-17T18:14:57.146+0000:1563358497:2019-07-17T18:14:57.146+0000:This is a little harder, maybe its really bette to consider handle fault to be part of the SOAP based components like camel-cxf, and camel-spring-ws which are the only ones that uses WS-Fault semantics. Then its just an option on the endpoint you can set.

Then we can remove fault all together in Camel 3, and have a migration for 2.x users."
0,CAMEL-13754,Sub-task,Major,None,3.x,"

help-wanted

",Resolved,Fixed,3.x,Unassigned,Zoran Regvart,0,6,2019-07-17 09:01:11+00:00,2020-04-01 15:58:26+00:00,"Some of the pages are blank or nearly empty on the website for instance:



Camel-k landing page
components reference landing page



The user manual landing page could also be improved to offer an introduction to Camel not just a list of chapters.","zregvart:1568268732:2019-09-12T14:12:12.352+0000:1568268732:2019-09-12T14:12:12.352+0000:For the component reference landing page (docs/components/modules/ROOT/pages/index.adoc) I don't think it makes much sense to list all components already listed in the navigation. What might make more sense is to have some text to introduce the component reference.
zregvart:1581917171:2020-02-17T13:26:11.036+0000:1581917171:2020-02-17T13:26:11.036+0000:The user guide could use a better landing page and nicer organization of the table of content/navigation.
RimshaCh:1583474276:2020-03-06T13:57:56.689+0000:1583474276:2020-03-06T13:57:56.689+0000:Hey , I am Rimsha , Got to know about this project through Outreachy. Can I work on this issue?
zregvart:1583478387:2020-03-06T15:06:27.082+0000:1583478387:2020-03-06T15:06:27.082+0000:Hi [~RimshaCh] of course, and thank you for having an interest in contributing to Apache Camel.

Here are some guidelines on how to best approach the Apache Camel community and how to best apply yourself.

1. Communication

Apache Camel is an Apache Software Foundation project, all communication is done in the open on the project mailing lists.

You can read more on the reasoning behind this to get a better understanding of:

https://www.apache.org/foundation/mailinglists.html

All communication is subject to the ASF Code of Conduct, which you can read here:

https://www.apache.org/foundation/policies/conduct.html

For questions and guidance around contributing subscribe to the developer's mailing list by sending an e-mail to dev-subscribe@camel.apache.org.

We can also be reached on the Gitter chat at https://gitter.im/apache/apache-camel/.

We track issues using ASF Jira located at:

https://issues.apache.org/jira/browse/CAMEL

Where we maintain a list of issues that are easy to get started with, so you can familiarize yourself with the process and get your first contribution in:

https://issues.apache.org/jira/issues/?filter=12348073

And some areas that we are actively looking for help on:

https://issues.apache.org/jira/issues/?filter=12348074

When you're ready to contribute create a Pull request to one of the Camel projects you can find under the Apache organization on GitHub:

https://github.com/apache?q=camel

Expect that your Pull request will receive a review and that you will need to respond and correspond to that via comments at GitHub.

2. Getting started

Read the ""Contributing to Apache Camel"" document on the Camel website:

https://camel.apache.org/manual/latest/contributing.html

Identify areas you can contribute first. You don't have to be an expert in an area, the Apache Camel developers are available to offer help and guidance.

Introduce yourself on the developer's mailing list (see above), tell us what area of work or problem you wish to address in Camel. Create a draft of your solution, this can be simple 1-2 sentences on the change you wish to make. Try to be as specific as you can: include a short description of your intent, what you tried and what didn't work, or what you need help with. The best way of approaching the developers is by describing what you would like to work on and asking specific questions on how to get started. We'll do our best to guide you and help you make your contribution. 

We also participate in Google Summer of Code and Outreachy programs, for information about those look at those program websites. If you wish to participate in either of those follow the guidelines and schedule set by those programs. If you're unsure please reach out via official communication channels of those programs, or ask on the developer's mailing list for help.

3. Your first contribution

Make sure you followed the steps and guidelines outlined above. For bigger changes, make sure that you have discussed on the developer's mailing list or in the Jira issue tracker before hand. We love receiving contributions, to get the best response make sure that the reasoning behind the contribution you wish to make is clear: outline the problem and explain your solution for it.

Make sure you follow the guidelines outlined in the ""Contributing to Apache Camel"" document. Be respectful of the source checks, formatting and the structure of the git commit message we abide by. This will help you in getting your contribution accepted. Outline any changes you made but are unaware or unsure of any consequences or side effects.

Stay engaged, follow and respond to comments or questions you might be asked.

With that I wish you all the best and please do have fun while contributing to Apache Camel, we certainly do :)
RimshaCh:1583491088:2020-03-06T18:38:08.747+0000:1583491088:2020-03-06T18:38:08.747+0000:Thankyou [~zregvart] for the guidance.I'll surely follow the guidelines.
Aemie:1583786086:2020-03-10T04:34:46.344+0000:1583786132:2020-03-10T04:35:32.948+0000:[~zregvart] I won't be able to make changes to code currently as the laptop is under service and I am using a spare one currently however would be able to create required changes for documentation. Is it fine if I work on this issue as well?
zregvart:1583806190:2020-03-10T10:09:50.171+0000:1583806190:2020-03-10T10:09:50.171+0000:[~Aemie] you're more than welcome to contribute in any area you can. Thank you!
Aemie:1583834719:2020-03-10T18:05:19.189+0000:1583834719:2020-03-10T18:05:19.189+0000:{{For the Apache Camel K landing page, I was thinking can't we include the landing page of the docs Apache Camel K under the projects section as well and then from the projects section it will link to the installation section within the docs for Apache Camel K. }}
ofonime:1583894517:2020-03-11T10:41:57.029+0000:1583894517:2020-03-11T10:41:57.029+0000:Hi [~zregvart] i am an outreachy applicant. can i work on this issues? because i noticed the landing page contents is not found and the list of items is not well aligned for a new user.
zregvart:1583897637:2020-03-11T11:33:57.383+0000:1583897637:2020-03-11T11:33:57.383+0000:[~ofonime] please do go ahead and contribute, if you haven't already have a look at the [contributing guide|https://camel.apache.org/contributing.html] and the website [readme|https://github.com/apache/camel-website/blob/master/README.md]. Also note that [~Aemie] is working on this so keep an eye on the [pull requests|https://github.com/apache/camel-website/pulls] not to duplicate any work. Good way of coordinating would be to post here what you plan on working next to make others aware so they can work on other improvements.
ofonime:1583898155:2020-03-11T11:42:35.324+0000:1583898155:2020-03-11T11:42:35.324+0000:Oh! Ok. let me work on the component landing page then, thank you [~zregvart]
ofonime:1583898998:2020-03-11T11:56:38.921+0000:1583898998:2020-03-11T11:56:38.921+0000:Hello [~zregvart] Kindly help? where do i access the codes? 
zregvart:1583902243:2020-03-11T12:50:43.134+0000:1583902243:2020-03-11T12:50:43.134+0000:[~ofonime] Our documentation is spread across multiple repositories, the easiest way to get to the source of the documentation is to follow the ""Edit this page"" link.
ofonime:1583904730:2020-03-11T13:32:10.874+0000:1583904730:2020-03-11T13:32:10.874+0000:okay, thank you
Aemie:1583917024:2020-03-11T16:57:04.039+0000:1583917024:2020-03-11T16:57:04.039+0000:[~ofonime] are you currently working on the component reference landing page? 

Also, I had a query regarding the component reference page, it states the list of component references for camel however one can be given a brief introduction to what components are to the users for better readability. Does it seem a good option to give a brief on components [~zregvart]?
ofonime:1583931386:2020-03-11T20:56:26.879+0000:1583931386:2020-03-11T20:56:26.879+0000:Heh [~Aemie] yes i am.
Aemie:1583948449:2020-03-12T01:40:49.282+0000:1583948449:2020-03-12T01:40:49.282+0000:[~ofonime] I made some changes to the component reference landing page and I created a PR, just check it. Thankyou,
aadyamishra:1583972199:2020-03-12T08:16:39.586+0000:1583972199:2020-03-12T08:16:39.586+0000:Hi [~zregvart], I am an outreachy applicant. May I take up this issue?
Transcendence09:1583972755:2020-03-12T08:25:55.454+0000:1583972755:2020-03-12T08:25:55.454+0000:Hi [~zregvart], I am an outreachy applicant. And I would like to make a contribution to this issue if it's not already taken? I await your feedback.
zregvart:1583983486:2020-03-12T11:24:46.427+0000:1583983486:2020-03-12T11:24:46.427+0000:We already have contributions in [#195|https://github.com/apache/camel-website/pull/195] and [#3625|https://github.com/apache/camel/pull/3625] so please be aware of that.

I think it's easiest for everyone to comment here what they're working on (specifically: mention the document(s) you're improving) to help others know and reduce duplicate work.

We can also review this issue and see, as we have received some contribution here, what else needs to be done or can this issue be resolved."
0,CAMEL-13753,Sub-task,Major,None,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,1,2019-07-17 08:58:01+00:00,2019-07-23 08:38:30+00:00,"We need to trigger the website build when changes are made to the camel and camel-k git repositories that include changes to the documentation.
We can do this by triggering a build from Jenkins using the build step and based on a changeset condition.",
0,CAMEL-13752,New Feature,Minor,"2.24.1, 3.0.0.M4",,"
None
",Resolved,Won't Fix,None,Unassigned,Stig Rohde Døssing,0,3,2019-07-16 17:51:44+00:00,2022-09-02 11:32:29+00:00,"BridgePropertyPlaceholderConfigurer extends Spring's PropertyPlaceholderConfigurer. Spring recommends against using this class for new code, and has a replacement in the PropertySourcesPlaceholderConfigurer. The new class is a prerequisite for e.g. the @TestPropertySource annotation to work. Example usage here https://github.com/apache/camel/blob/camel-2.23.1/components/camel-test-spring/src/test/java/org/apache/camel/test/spring/CamelSpringRunnerTestPropertySourceTest.java


It's not obvious to me whether it would be safe to reimplement BridgePropertyPlaceholderConfigurer to extend PropertySourcesPlaceholderConfigurer instead. I'd guess it wouldn't be backwards compatible, otherwise Spring would probably have just reimplemented PropertyPlaceholderConfigurer.


I think we should add a new BridgePropertySourcesPlaceholderConfigurer that extends PropertySourcesPlaceholderConfigurer. This will allow users to use the Camel property bridging functionality, without losing the ability to override Spring properties in tests.


I am happy to work on this if the idea makes sense.","onders:1563276846:2019-07-16T19:34:06.510+0000:1563276846:2019-07-16T19:34:06.510+0000:+1

I would recommend talking either on dev or user list for such matters
srdo:1563359308:2019-07-17T18:28:28.573+0000:1563359308:2019-07-17T18:28:28.573+0000:Thanks [~onders], I'll do that in the future. 
davsclaus:1563406244:2019-07-18T07:30:44.650+0000:1563406244:2019-07-18T07:30:44.650+0000:I think you are welcome to try to implement/rework the current bridge for camel master branch for camel 3 as that is where we have a chance to update it. I dont think we should add a 2nd bridge, but only have 1 bridge. Also mind that spring-boot and Camel works fine without having to setup this bridge (if you dont really use spring xml files), so its probably more when you use classic spring xml files you may want to use the bridge.
srdo:1564617296:2019-08-01T07:54:56.418+0000:1564617296:2019-08-01T07:54:56.418+0000:I have a rewrite of BridgePropertyPlaceholderConfigurer ready. It's blocked by https://github.com/spring-projects/spring-framework/pull/23377. Will open a PR to Camel once that issue is resolved.
davsclaus:1572394677:2019-10-30T08:17:57.946+0000:1572394677:2019-10-30T08:17:57.946+0000:Okay so the spring PR is maybe not likely to get merged or what? 

And without this PR you have copied some code or what in the Camel PR so it can work still?
srdo:1572426481:2019-10-30T17:08:01.925+0000:1572426481:2019-10-30T17:08:01.925+0000:I'm not sure it will get merged. No one seems to have looked at it yet, so I don't know if it's unacceptable, or the Spring people just haven't gotten around to looking at it.

Yes, without that PR, I've copied some of the implementation of PropertyPlaceholderSourcesConfigurer from Spring to Camel, so it should be able to work without that PR. Since the copied code is most of the PropertyPlaceholderSourcesConfigurer implementation, it might be a better option to make the Camel class completely independent of the Spring class, until/unless Spring merges the PR, as we're not really gaining much from the coupling."
0,CAMEL-13751,Bug,Minor,None,3.0.0.RC1,"
None
",Resolved,Fixed,3.0.0.RC1,Luca Burgazzoli,Luca Burgazzoli,0,1,2019-07-16 15:36:03+00:00,2019-07-16 15:59:16+00:00,"For some reason [1], caffeine declares some additional dependencies that are not needed at runtime:




[INFO] +- com.github.ben-manes.caffeine:caffeine:jar:2.7.0:compile
[INFO] |  +- org.checkerframework:checker-qual:jar:2.6.0:compile
[INFO] |  \- com.google.errorprone:error_prone_annotations:jar:2.3.3:compile




So we can get rid of them


[1] https://github.com/ben-manes/caffeine/issues/300",
0,CAMEL-13750,Bug,Minor,2.24.1,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0",Andrea Cosentino,Alvin Kwekel,1,4,2019-07-16 12:21:20+00:00,2019-11-08 09:52:51+00:00,"+-+            +-+            +-+
| | +-> Q1 +-> | | +-> Q3 +-> | |
|A|            |B|            |C|
| | <-+ Q2 <-+ | | <-+ Q4 <-+ | |
+-+            +-+            +-+



 JMS request goes from A to B to C and the reply back from C to B to A.


A useMessageIDAsCorrelationID=false
 B useMessageIDAsCorrelationID=true
 C useMessageIDAsCorrelationID=false


The JMSCorrelationID assigned by A is passed along to C via Camel message headers when useMessageIDAsCorrelationID is set on B's request. B is expecting the JMSMessageID to be used as JMSCorrelationID on the reply but since the JMSCorrelationID is actually provided, C could decide to give precedence to the JMSCorrelationID rendering B's message selector to not match.


The only case this would work as expected is when C is also set to useMessageIDAsCorrelationID to always prefer the JMSMessageID. But consider situations where C is not under your control and/or implemented in a different technology than Camel.


I'd argue the JMSCorrelationID should be made null when the useMessageIDAsCorrelationID is set on a provider.


I've created an example project to demonstrate the behavior: https://github.com/alvinkwekel/camel-example-jmscorrelationid


This issue seems to be closely related to https://issues.apache.org/jira/browse/CAMEL-2249","davsclaus:1563358747:2019-07-17T18:19:07.325+0000:1563358747:2019-07-17T18:19:07.325+0000:The idea of this feature is not to mix and match the setting, but was for some brokers like WebSphereMQ back then had issues and you could turn on to use an alternative correlation id.

Maybe in your use-case/situation you can set custom correlation IDs that works with your mixed set of brokers and this scenario.

You are of course welcome to dive into the source code and see if you can improve the code, but at this points this ticket is likely not a priority in this community at the moment. Others are of course to VOTE on the jira ticket and comment too.
davsclaus:1563359256:2019-07-17T18:27:36.339+0000:1563359256:2019-07-17T18:27:36.339+0000:Also on B you can try to remove the existing JMSCorrelationID before sending to C
alvinkwekel@gmail.com:1563411336:2019-07-18T08:55:36.572+0000:1563411336:2019-07-18T08:55:36.572+0000:Our current workaround is indeed to remove the JMSCorrelationID from the Camel message using removeHeader in the routes.

I’ll see if I can create a patch to let the useMessageIDAsCorrelationID play nice in a heterogeneous landscape.
alvinkwekel@gmail.com:1563429863:2019-07-18T14:04:23.874+0000:1563429863:2019-07-18T14:04:23.874+0000:I've submitted a PR [3049|https://github.com/apache/camel/pull/3049]. Let me know what you think.
alvinkwekel@gmail.com:1563756979:2019-07-22T08:56:19.838+0000:1563756979:2019-07-22T08:56:19.838+0000:Thanks for accepting the fix. Would it be possible to merge this into 2.24.x?
acosentino:1563757145:2019-07-22T08:59:05.384+0000:1563757145:2019-07-22T08:59:05.384+0000:Yes, I think so on 2.x, 2.24.x and 2.23.x 
alvinkwekel@gmail.com:1564021168:2019-07-25T10:19:28.970+0000:1564021206:2019-07-25T10:20:06.249+0000:I've created a backport PR for 2.x. [https://github.com/apache/camel/pull/3061]
acosentino:1564021273:2019-07-25T10:21:13.341+0000:1564021273:2019-07-25T10:21:13.341+0000:Yes, I forgot about it.. Sorry [~alvinkwekel@gmail.com]
acosentino:1573177659:2019-11-08T09:47:39.975+0000:1573177659:2019-11-08T09:47:39.975+0000:[~jbonofre]Onofré why did you re-assign this?
jbonofre:1573177951:2019-11-08T09:52:31.479+0000:1573177951:2019-11-08T09:52:31.479+0000:A mistake, I was about to reopen it, but I finally create a new Jira. I'm reassigning."
0,CAMEL-13749,Improvement,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Soner Koksal,0,1,2019-07-15 08:03:56+00:00,2019-07-17 06:34:37+00:00,"Add MapAccessor to SpEL evaluation context as it would be more convenient to access to Map types such as properties:




...
<spel>#{properties.foo == 'bar'}</spel>
...




rather than




...
<spel>#{properties['foo'] == 'bar'}</spel>
...",
0,CAMEL-13748,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Jan Bednar,Jan Bednar,0,1,2019-07-12 10:56:53+00:00,2019-07-15 06:22:26+00:00,No Desc,
0,CAMEL-13747,Improvement,Minor,None,"3.0.0.RC1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0, 2.25.0",Andrea Cosentino,Soner Koksal,0,1,2019-07-11 15:01:09+00:00,2019-07-15 06:44:52+00:00,Adding basic auth support to camel-solr according to instructions stated here,
0,CAMEL-13746,Bug,Major,3.0.0-M3,3.0.0.RC1,"
None
",Resolved,Fixed,3.0.0.RC1,Alex Dettinger,Alex Dettinger,0,1,2019-07-11 13:38:36+00:00,2019-07-12 08:01:05+00:00,"Multiple fix/enhancements are need:


+ The JobInfo de-serialization is not working anymore (no more namespace aware)


+ itests are also executed during test phase


+ few typos in documentation


+ some tests are not designed to run in concurrency with others","aldettinger:1562825927:2019-07-11T14:18:47.788+0000:1562825927:2019-07-11T14:18:47.788+0000:pushed to master, let's wait the next build."
0,CAMEL-13745,New Feature,Major,None,None,"
None
",Closed,Duplicate,None,Unassigned,Gagan Suri,0,2,2019-07-10 17:17:33+00:00,2019-07-10 18:36:44+00:00,"I registered a route using FileComponent and it works as expected. That is a route and processors are triggered whenever a new file is added or an existing file is updated. But I cannot find a way to trigger the route in when an existing file is deleted.


the header may contain just the file path and name etc.",bedla:1562754933:2019-07-10T18:35:33.890+0000:1562754933:2019-07-10T18:35:33.890+0000:We are working on file-watch component in CAMEL-13628
0,CAMEL-13744,Improvement,Minor,2.24.1,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Leonid Remennik,0,2,2019-07-10 12:48:42+00:00,2022-09-02 11:32:18+00:00,"Current camel-slack component http://camel.apache.org/slack.html support attachments in incoming webhooks but not Actions and Buttons


 


https://api.slack.com/docs/message-buttons


 


Attaching solution code","dmvolod:1562734269:2019-07-10T12:51:09.480+0000:1562734269:2019-07-10T12:51:09.480+0000:You are welcome to provide this change as PR

https://github.com/apache/camel/blob/master/CONTRIBUTING.md"
0,CAMEL-13742,Improvement,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Unassigned,Vladimir,0,2,2019-07-10 08:21:27+00:00,2019-07-26 14:18:56+00:00,"Camel-cmis supports only read and create operation.


I would like to extend it with the following operations:



Delete folder
Delete document
Move folder
Move document
Rename folder
Rename document
Copy folder
Copy document
CheckIn
CheckOut
CancelCheckOut",Cherepnalkovski:1562821746:2019-07-11T13:09:06.768+0000:1562821746:2019-07-11T13:09:06.768+0000:PR: [https://github.com/apache/camel/pull/3033]
0,CAMEL-13741,Improvement,Minor,2.20.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Antoine DESSAIGNE,0,3,2019-07-09 13:56:03+00:00,2019-10-31 10:59:31+00:00,"When converting a Map to an Iterable the results is no longer the same since CAMEL-11379.


Given the following context




<?xml version=""1.0"" encoding=""UTF-8""?>
<routes xmlns=""http://camel.apache.org/schema/spring"">
    <route>
        <from uri=""timer:single?repeatCount=1""/>
        <setBody>
            <groovy>[A: 'aa', B: 'bb', C: 'cc', D: 'dd']</groovy>
        </setBody>
        <convertBodyTo type=""java.lang.Iterable""/>
        <split>
            <simple>${body}</simple>
            <log message=""${body}""/>
        </split>
    </route>
</routes>




It produces 4 log messages in camel 2.18.3 using the converter CollectionConverter.toSet(java.util.Map<K,V>). Using camel 2.24.1 it produces only one message containing the whole list. This is due to ObjectConverterOptimised calling ObjectHelper.createIterable(java.lang.Object) which has a fallback to Collections.singletonList(value) thus producing a single entry with the whole Map.


The fix is probably to add in ObjectHelper.createIterable(java.lang.Object) the following code




if (value instanceof Map) {
    return ((Map)value).entrySet();
}




but I would like to know what you think about it before doing a pull request.


Thanks","davsclaus:1562660152:2019-07-09T16:15:52.946+0000:1562660152:2019-07-09T16:15:52.946+0000:Can you build an unit test in ObjectConverterTest that demonstrates this and then provide that as a PR with an attempted fix/improvement
antoine.dessaigne:1562660347:2019-07-09T16:19:07.993+0000:1562660347:2019-07-09T16:19:07.993+0000:Sure, i'll do that. Against which branch ? master, camel-2.x or another one ?
davsclaus:1562663112:2019-07-09T17:05:12.646+0000:1562663112:2019-07-09T17:05:12.646+0000:master, and then camel-2.x
acosentino:1562905901:2019-07-12T12:31:41.866+0000:1562905901:2019-07-12T12:31:41.866+0000:I reverted on master, we need to review a bunch of CSV tests first. [~antoine.dessaigne] please can you have a look? Thanks.
antoine.dessaigne:1562908120:2019-07-12T13:08:40.663+0000:1562908120:2019-07-12T13:08:40.663+0000:I'll have a look next week, can you revert it everywhere ? I'll redo the pull requests once everything is in order
acosentino:1562908921:2019-07-12T13:22:01.643+0000:1562908921:2019-07-12T13:22:01.643+0000:I didn't merge the 2.x stuff, because I noticed the failures. I'm going to close the PR for 2.x and we are waiting for your contributiosn next week. Thanks for your time.
davsclaus:1572490771:2019-10-31T10:59:31.820+0000:1572490771:2019-10-31T10:59:31.820+0000:Lets keep current behavior as that is baked in. You can convert the body to a List instead"
0,CAMEL-13740,Improvement,Minor,3.0.0-M3,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Hemang Ajmera,0,2,2019-07-09 03:13:54+00:00,2019-08-08 06:34:04+00:00,"The document of Json Xtream https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/json-xstream-dataformat.adoc is exactly identical to Xstream https://github.com/apache/camel/blob/master/components/camel-xstream/src/main/docs/xstream-dataformat.adoc.


 


Although both uses same component, but JSON xtream document should have document on how to convert JSON to object and vis versa. But it also talks about XML. This needs to be improved.","davsclaus:1562660232:2019-07-09T16:17:12.530+0000:1562660232:2019-07-09T16:17:12.530+0000:You are welcome to help with improving the documentation and provide a PR

davsclaus:1562660256:2019-07-09T16:17:36.391+0000:1562660256:2019-07-09T16:17:36.391+0000:See the unit tests for examples "
0,CAMEL-13739,Improvement,Minor,3.0.0-M3,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Federico Valeri,0,1,2019-07-08 18:58:19+00:00,2019-07-26 08:42:06+00:00,"Using camel-test without overriding ""createJndiContext"" gives the following warning:




2019-07-08 16:09:37,953 [           main] WARN  l.test.junit4.CamelTestSupport - The method createJndiContext() in camel-test is deprecated. You can bind beans directly from Camel Registry instead",
0,CAMEL-13738,Task,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,3,2019-07-08 13:34:04+00:00,2019-08-07 07:59:48+00:00,"We should only use dashes in the names, eg 


        <javax.el-api-version>2.2.5</javax.el-api-version>
        <javax.el-version>2.2.5</javax.el-version>
        <javax.el3-version>3.0.0</javax.el3-version>
        <javax.el-api-hibernate-validator-version>3.0.1-b04</javax.el-api-hibernate-validator-version>
        <javax.el-hibernate-validator-version>3.0.1-b10</javax.el-hibernate-validator-version>


Should be


javax-el-version and so forth. Also check if all of them are still in use?


Contributions is welcome","bedla:1562671542:2019-07-09T19:25:42.065+0000:1562671542:2019-07-09T19:25:42.065+0000:I have script validating unused properties somewhere. I will try to find it and execute for camel-parent pom.
bedla:1562673529:2019-07-09T19:58:49.049+0000:1562673529:2019-07-09T19:58:49.049+0000:There are 74 properties unused in modules and bundles. Report in [^properties-cleanup-output.txt]
acosentino:1562716000:2019-07-10T07:46:40.298+0000:1562716000:2019-07-10T07:46:40.298+0000:I removed the unused properties. Thanks [~bedla]"
0,CAMEL-13737,Bug,Minor,2.24.1,,"
None
",Resolved,Information Provided,None,Ramu,michael elbaz,0,4,2019-07-08 13:22:05+00:00,2021-02-03 12:59:02+00:00,"When i try to deserialize some avro file like provided i got java.lang.ArrayIndexOutOfBoundsException: -40, i also didn't understand the camel component it doesn't put the schema in the generated avro file it should not ?


The route:




public class AvroRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {

        from(""file:<path>?noop=true&delay=30000&initialDelay=0"")
                .unmarshal().avro(""referential.product.v2.NationalSalePricesBV1"")
        ;

    }

}




The stackTrace:




Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [file://D:/java/tests/avro/src/main/resources/in?delay=30000&initialDelay=0&noo] [        34]
[route1            ] [unmarshal1        ] [unmarshal[org.apache.camel.model.dataformat.AvroDataFormat@2394b9c7]          ] [        30]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------

java.lang.ArrayIndexOutOfBoundsException: -40
	at org.apache.avro.io.parsing.Symbol$Alternative.getSymbol(Symbol.java:424) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.io.ResolvingDecoder.doAction(ResolvingDecoder.java:290) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.io.parsing.Parser.advance(Parser.java:88) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.io.ResolvingDecoder.readIndex(ResolvingDecoder.java:267) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:179) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.specific.SpecificDatumReader.readField(SpecificDatumReader.java:116) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.generic.GenericDatumReader.readRecord(GenericDatumReader.java:222) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.generic.GenericDatumReader.readWithoutConversion(GenericDatumReader.java:175) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:153) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.avro.generic.GenericDatumReader.read(GenericDatumReader.java:145) ~[avro-1.8.2.jar:1.8.2]
	at org.apache.camel.dataformat.avro.AvroDataFormat.unmarshal(AvroDataFormat.java:148) ~[camel-avro-2.23.0.jar:2.23.0]
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:69) ~[camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) ~[camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:454) [camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:223) [camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:187) [camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174) [camel-core-2.23.0.jar:2.23.0]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101) [camel-core-2.23.0.jar:2.23.0]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_201]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308) [na:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_201]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294) [na:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_201]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_201]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_201]




Here i provide some basic working code for transforming the provided avro file to json




private static Iterator<?> toJsonIterator(File file) throws IOException {
    return new DataFileReader<>(file, new GenericDatumReader<>());
}","davsclaus:1562660310:2019-07-09T16:18:30.223+0000:1562660310:2019-07-09T16:18:30.223+0000:Next time ask on the user mailing list or SO first for getting help.
davsclaus:1562660346:2019-07-09T16:19:06.039+0000:1562660346:2019-07-09T16:19:06.039+0000:Also if you get a stracktrace, then post the stacktrace, and provide more details. And if you can a sample project that demonstrates the problem, and details how to run the example.
michael992:1562661333:2019-07-09T16:35:33.753+0000:1562661333:2019-07-09T16:35:33.753+0000:Hello [~davsclaus] SO what that mean ?


michael992:1562662057:2019-07-09T16:47:37.652+0000:1562662057:2019-07-09T16:47:37.652+0000:I add the project you just have to specify the input directory path in file component and run the main class
ramu11:1563660395:2019-07-21T06:06:35.371+0000:1563660395:2019-07-21T06:06:35.371+0000:[~michael992]  so means stack overflow.  I will  take a look at this on monday if time permits


michael992:1563707736:2019-07-21T19:15:36.162+0000:1563707736:2019-07-21T19:15:36.162+0000:[~ramu11] Ok thanks
ramu11:1563787584:2019-07-22T17:26:24.831+0000:1563787584:2019-07-22T17:26:24.831+0000:[~michael992]  

I have deserialized the payload and it has null values
{code:java}
{""minSpceWtax"": null, ""avgSpceWtax"": null, ""modSpceWtax"": null, ""maxSpceWtax"": null}

{code}


org.apache.avro.io.DatumReader is throwing  the java.lang.ArrayIndexOutOfBoundsException as inputStream has null values
{code:java}
 Decoder decoder = DecoderFactory.get().binaryDecoder(inputStream, null);
        Object result = reader.read(null, decoder);
{code}

ramu11:1563787652:2019-07-22T17:27:32.692+0000:1563787652:2019-07-22T17:27:32.692+0000:@michael elbaz  I am still looking into it.  
michael992:1563844819:2019-07-23T09:20:19.311+0000:1563844831:2019-07-23T09:20:31.237+0000:[~ramu11] Ok thanks, null value should be authorized i think
ramu11:1563851966:2019-07-23T11:19:26.277+0000:1563851966:2019-07-23T11:19:26.277+0000:[~michael992] yes you are correct but error is throwing from avro api classes
I have further debugged 


{code:java}
expected:
[""null"",{""type"":""record"",""name"":""Money"",""namespace"":""common.lib.v1"",""fields"":[{""name"":""unscaledAmount"",""type"":""long"",""default"":0},{""name"":""scale"",""type"":""int"",""default"":0},{""name"":""currency"",""type"":{""type"":""enum"",""name"":""Currency"",""symbols"":[""EUR"",""USD"",""BRL""]},""default"":""EUR""},{""name"":""currencyAlphaCode"",""type"":[""null"",{""type"":""string"",""avro.java.string"":""String""}],""default"":null}]}]
{code}

org.apache.avro.io.ResolvingDecoder.readIndex  for the below string returning outofBounds exception
{code:java}

ALTERNATIVE  [null, common.lib.v1.Money]
{code}




michael992:1563854437:2019-07-23T12:00:37.348+0000:1563854437:2019-07-23T12:00:37.348+0000:[~ramu11] Thanks i think many thread can be found about this [Google Search|https://www.google.com/search?q=%5BAVRO%5D+java.lang.ArrayIndexOutOfBoundsException%3A+-40&rlz=1C1CHBD_frFR844FR844&oq=%5BAVRO%5D+java.lang.ArrayIndexOutOfBoundsException%3A+-40&aqs=chrome..69i57j69i61l3.301j0j7&sourceid=chrome&ie=UTF-8] so what actions we can make to resolve this point ?
ramu11:1563856605:2019-07-23T12:36:45.491+0000:1563856605:2019-07-23T12:36:45.491+0000:[~michael992] this is the jira [ArrayIndexOutOfBoundsException in org.apache.avro.io.parsing.Symbol$Alternative.getSymbol|https://issues.apache.org/jira/browse/AVRO-1953]

please follow up on above jira. I think nothing could be done from camel side
michael992:1563857948:2019-07-23T12:59:08.620+0000:1563857948:2019-07-23T12:59:08.620+0000:[~ramu11] Ok thanks but i see this ticket exist since 2016 
acosentino:1563858175:2019-07-23T13:02:55.772+0000:1563858175:2019-07-23T13:02:55.772+0000:For example you can contribute a fix for that issue at avro, Michael. Open source is great because of these possibilities
michael992:1563866393:2019-07-23T15:19:53.502+0000:1563932941:2019-07-24T09:49:01.009+0000:Yeah of course it will try to check this maybe thanks
ramu11:1563930221:2019-07-24T09:03:41.374+0000:1563930221:2019-07-24T09:03:41.374+0000:[~michael992]  if you want I can prepare camel example by having marshalling/unmarshalling code in camel processors 
so that you can have your business logic in   camel application.  Till the issue fixed in avro api

your comments welcome 

michael992:1563933199:2019-07-24T09:53:19.056+0000:1563933218:2019-07-24T09:53:38.274+0000:[~ramu11] Thanks to you i already do this:


{code:java}
from(""file:/java/tests/avro/src/main/resources/in?noop=true&delay=30000&initialDelay=0"")
                .threads(10)
                .transform().body(File.class, AvroRoute::toJsonIterator)
                .split(body()).streaming()

                .convertBodyTo(String.class)
                // ...
               ;
{code}

{code:java}
private static Iterator<?> toJsonIterator(File file) {
        return Try.of(() -> new DataFileReader<>(file, new GenericDatumReader<>()))
                .get();
    }
{code}

davsclaus:1612328342:2021-02-03T12:59:02.203+0000:1612328342:2021-02-03T12:59:02.203+0000:Its avro serializer error not Camel"
0,CAMEL-13736,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-07-08 13:18:20+00:00,2019-07-17 18:16:08+00:00,"When creating a new bean such as


@BindToRegistry
public MyBean myBean() 

{
  return new MyBean();
}


We can have a way to support bean post processing so we can do ioc injection on the created bean.


There can maybe be an option on camel main you can turn on | off. 


Also we can support this for fields only, if you dont need to do any customization


@BindToRegistry
private MyBean myBean",
0,CAMEL-13735,Task,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Unassigned,Luca Burgazzoli,0,1,2019-07-08 12:50:47+00:00,2019-07-17 09:07:37+00:00,"The documentation about error handling here: https://camel.apache.org/staging/manual/latest/error-handler.html, shows an example like:



 
RouteBuilder builder = new RouteBuilder() {
    public void configure() {
        // use logging error handler
        errorHandler(loggingErrorHandler(""com.mycompany.foo""));

        // here is our regular route
        from(""seda:a"").to(""seda:b"");
    }
};




But the loggingErrorHandler as been removed as deprecated (CAMEL-4763)",
0,CAMEL-13734,New Feature,Major,None,"3.0.0.RC1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0, 2.25.0",Tadayoshi Sato,Tadayoshi Sato,0,1,2019-07-08 05:06:38+00:00,2019-07-10 08:26:36+00:00,"Currently messages with body of large data InputStream are always converted to byte[] on a Camel route for both producer and consumer HTTP endpoints, thus cause OutOfMemoryError and fail in the middle of processing.",
0,CAMEL-13733,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Onder Sezgin,Claus Ibsen,0,1,2019-07-07 20:28:07+00:00,2019-07-17 07:13:01+00:00,No Desc,
0,CAMEL-13732,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-07-07 09:35:47+00:00,2019-07-07 14:52:38+00:00,When converting to boolean (primitive) we should be strict and only allow this for a set of known types and values.,
0,CAMEL-13731,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Jan Bednar,Jan Bednar,0,2,2019-07-06 12:59:19+00:00,2019-07-07 08:46:39+00:00,"Many users are implementing this on their own:.


https://stackoverflow.com/questions/34162367/how-do-i-aggregate-file-content-correctly-with-apache-camel


https://stackoverflow.com/questions/26974333/how-to-aggregate-many-marshalled-json-objects-to-one-file


https://stackoverflow.com/questions/35433179/how-to-access-aggregated-messages-after-loop-in-camel


https://stackoverflow.com/questions/43605745/append-exchange-bodies-with-aggregation-strategy-in-camel


https://stackoverflow.com/questions/34615052/apache-camel-aggregate-gives-exception


We can implement StringAggregationStrategy into camel-core to make it easier to use.","davsclaus:1562460399:2019-07-07T08:46:39.534+0000:1562460399:2019-07-07T08:46:39.534+0000:Thanks Jan for the PR.

I have granted your user karma to self-assign tickets in JIRA"
0,CAMEL-13730,Task,Major,3.x,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Dmitry Shultz,0,1,2019-07-05 20:11:52+00:00,2019-07-06 09:48:29+00:00,"Several methods of the NotifyBuilder that receive MockComponent as a parameter are deprecated and are going to be removed from version 3+, but there is no viable replacement at the moment.


From related email conversation (http://mail-archives.apache.org/mod_mbox/camel-users/201907.mbox/%3CMWHPR11MB138984E7FFB0DA82C043F4F395FA0%40MWHPR11MB1389.namprd11.prod.outlook.com%3E):


Claus> Well we can take a look at adding some kind of SPI interface that advice with can use and then mock implement that.


And then potentially other components can be used too (in theory).",
0,CAMEL-13729,Improvement,Minor,3.0.0-M3,None,"
None
",Closed,Not A Problem,None,Unassigned,Jan Bednar,0,1,2019-07-05 16:15:37+00:00,2019-07-05 16:56:35+00:00,"This can be useful eg for converting List to String.




.bean(String.class, ""join(${body}, '\n')"")




Now this is not possible, because this throws exception The bean instance is a java.lang.String type: . We suppose you want to refer to a bean instance by its id instead. Please use ref.


I think, this check can be safely removed as bean language now supports string as ref natively using bean(""ref"") . Also unit test testing this was removed long time ago in CAMEL-8459 commit a547300711ce7b688be8e24dd794ce8a8eb89f79","bedla:1562316942:2019-07-05T16:55:42.382+0000:1562316942:2019-07-05T16:55:42.382+0000:Well 
{code:java}
.bean(String.class, ""join('\n', ${body})""){code}
Is not usable even after removing this check, because this throw ambicious method call exception.

Using Apache Commons StringUtils is much more suitable
{code:java}
.bean(StringUtils.class, ""join(${body}, '\n')"")
{code}
 

 

 "
0,CAMEL-13728,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Andrea Cosentino,Claus Ibsen,0,2,2019-07-05 12:11:19+00:00,2019-07-05 12:34:25+00:00,"The Endpoint DSL generates some class that are too long and also some lines that are long.
We should disable checkstyle for this module


[INFO] — maven-checkstyle-plugin:3.0.0:checkstyle (default-cli) @ camel-endpointdsl —
[INFO] Starting audit...
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/SalesforceEndpointBuilderFactory.java:2764: Line is longer than 250 characters (found 561). [LineLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/DockerEndpointBuilderFactory.java:1275: Line is longer than 250 characters (found 418). [LineLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/FtpsEndpointBuilderFactory.java:1: File length is 5,513 lines (max allowed is 5,000). [FileLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/FacebookEndpointBuilderFactory.java:1: File length is 5,318 lines (max allowed is 5,000). [FileLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/TwilioEndpointBuilderFactory.java:435: Line is longer than 250 characters (found 1,116). [LineLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/LinkedInEndpointBuilderFactory.java:1137: Line is longer than 250 characters (found 1,095). [LineLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/SftpEndpointBuilderFactory.java:1: File length is 5,148 lines (max allowed is 5,000). [FileLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/AMQPEndpointBuilderFactory.java:1: File length is 5,273 lines (max allowed is 5,000). [FileLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/ActiveMQEndpointBuilderFactory.java:1: File length is 5,299 lines (max allowed is 5,000). [FileLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/JmsEndpointBuilderFactory.java:1: File length is 5,273 lines (max allowed is 5,000). [FileLength]
[ERROR] /Users/davsclaus/workspace/camel/core/camel-endpointdsl/src/main/java/org/apache/camel/builder/endpoint/dsl/DigitalOceanEndpointBuilderFactory.java:308: Line is longer than 250 characters (found 360). [LineLength]
Audit done.
[INFO] There are 11 errors reported by Checkstyle 7.6.1 with camel-checkstyle.xml ruleset.",acosentino:1562301253:2019-07-05T12:34:13.074+0000:1562301253:2019-07-05T12:34:13.074+0000:Fixed by relaxing linelength and filelength parameters in checkstyle.xml
0,CAMEL-13727,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-07-05 09:31:29+00:00,2019-07-05 09:57:39+00:00,"For example


bean("""").beanName(""myBean"")


is not working, you should do


bean(""myBean"");


For the former to work we need to allow to do


bean().beanName()...


And have the endpoint DSL know its a path parameter and built the uri correctly which is hard as this requires camel-catalog to build the uri as it knows all the complexity of building with path parameters.",
0,CAMEL-13726,Improvement,Major,None,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-07-05 08:40:43+00:00,2021-04-26 13:25:49+00:00,"Add support for PKCS8 keys and encrypted PKCS8 keys. At the moment, the SSH component only supports PKCS1 keys.",
0,CAMEL-13725,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-07-05 08:17:45+00:00,2019-07-05 08:46:31+00:00,"When an option has required=true in the metadata we should add that to the endpoint DSL javadoc, eg




        /**
         * Whether the topic is persistent or non-persistent.
         * The option is a <code>java.lang.String</code> type.
         * @group common
         */
        default PulsarEndpointConsumerBuilder persistence(String persistence) {
            setProperty(""persistence"", persistence);
            return this;
        }




This option is required. Also not sure if @group is a valid javadoc syntax",
0,CAMEL-13724,Bug,Major,"2.23.3, 2.24.1","2.23.4, 2.24.2, 3.0.0.M4, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.M4, 3.0.0, 2.25.0",Freeman Yue Fang,Freeman Yue Fang,0,3,2019-07-04 21:30:32+00:00,2019-07-11 14:03:46+00:00,"If rest dsl routes have their own customer ids, the id would be ignored, hence generate  invalid swagger operation Id 
the testcase here can expose this problem




--- a/core/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java
+++ b/core/camel-core/src/test/java/org/apache/camel/impl/RouteIdRestDefinitionTest.java
@@ -39,7 +39,8 @@ public class RouteIdRestDefinitionTest extends ContextTestSupport {
             public void configure() throws Exception {
                 from(""direct:start1?timeout=30000"").to(""mock:result"");
                 from(""direct:start2"").to(""mock:result"");
-                rest(""/say/hello"").get(""/bar"").id(""getSayHelloBar"").to(""mock:result"");
+                rest(""/say/hello"").get(""/bar"").id(""getSayHelloBar"").to(""mock:result"")
+                .get(""/bar/{user}"").id(""getSayHelloBarWithUser"").to(""mock:result"");
             }
         };
     }
@@ -47,6 +48,7 @@ public class RouteIdRestDefinitionTest extends ContextTestSupport {
     @Test
     public void testSayHelloBar() {
         assertEquals(""getSayHelloBar"", context.getRouteDefinitions().get(2).getId());
+        assertEquals(""getSayHelloBarWithUser"", context.getRouteDefinitions().get(3).getId());
     }
     
 }","davsclaus:1562289067:2019-07-05T09:11:07.495+0000:1562289067:2019-07-05T09:11:07.495+0000:Thanks Freeman, can you backport this to relevant branches as in fix versions
ffang:1562304569:2019-07-05T13:29:29.299+0000:1562304569:2019-07-05T13:29:29.299+0000:[~davsclaus], sure, I will do it.

Freeman
acosentino:1562804213:2019-07-11T08:16:53.616+0000:1562804213:2019-07-11T08:16:53.616+0000:[~ffang] this seems to break the restlet tests

 

[ERROR] Failures: 
[ERROR] org.apache.camel.component.restlet.RestRestletCorsTest.testCors(org.apache.camel.component.restlet.RestRestletCorsTest)
[ERROR] Run 1: RestRestletCorsTest.testCors:43->Assert.assertEquals:144->Assert.assertEquals:118->Assert.failNotEquals:834->Assert.fail:88 expected:<https://localhost:443> but was:<null>
[ERROR] Run 2: RestRestletCorsTest.testCors:43->Assert.assertEquals:144->Assert.assertEquals:118->Assert.failNotEquals:834->Assert.fail:88 expected:<https://localhost:443> but was:<null>
[ERROR] Run 3: RestRestletCorsTest.testCors:43->Assert.assertEquals:144->Assert.assertEquals:118->Assert.failNotEquals:834->Assert.fail:88 expected:<https://localhost:443> but was:<null>
[INFO] 
[ERROR] org.apache.camel.component.restlet.RestRestletCorsTest.testRestletProducerGet(org.apache.camel.component.restlet.RestRestletCorsTest)
[ERROR] Run 1: RestRestletCorsTest.testRestletProducerGet:60->Assert.assertThat:923->Assert.assertThat:956 
Expected: is ""https://localhost:443""
 but: was null
[ERROR] Run 2: RestRestletCorsTest.testRestletProducerGet:60->Assert.assertThat:923->Assert.assertThat:956 
Expected: is ""https://localhost:443""
 but: was null
[ERROR] Run 3: RestRestletCorsTest.testRestletProducerGet:60->Assert.assertThat:923->Assert.assertThat:956 
Expected: is ""https://localhost:443""
 but: was null
[INFO] 
[ERROR] org.apache.camel.component.restlet.RestRestletGetCorsTest.testCors(org.apache.camel.component.restlet.RestRestletGetCorsTest)
[ERROR] Run 1: RestRestletGetCorsTest.testCors:39->Assert.assertEquals:144->Assert.assertEquals:118->Assert.failNotEquals:834->Assert.fail:88 expected:<*> but was:<null>
[ERROR] Run 2: RestRestletGetCorsTest.testCors:39->Assert.assertEquals:144->Assert.assertEquals:118->Assert.failNotEquals:834->Assert.fail:88 expected:<*> but was:<null>
[ERROR] Run 3: RestRestletGetCorsTest.testCors:39->Assert.assertEquals:144->Assert.assertEquals:118->Assert.failNotEquals:834->Assert.fail:88 expected:<*> but was:<null>
acosentino:1562823298:2019-07-11T13:34:58.990+0000:1562823298:2019-07-11T13:34:58.990+0000:It seems to be ok on CI, so probably I had a mix on my local repo. Sorry for the noise [~ffang]
ffang:1562825026:2019-07-11T14:03:46.183+0000:1562825026:2019-07-11T14:03:46.183+0000:No problem [~acosentino]! Another pair of eyes is always great!

I did run the tests in camel-restlet when committing and I did it again this morning, all passed.

Cheers
Freeman"
0,CAMEL-13693,Test,Minor,None,"3.0.0.M4, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0, 2.25.0",Freeman Yue Fang,Freeman Yue Fang,0,2,2019-06-27 15:26:51+00:00,2019-06-28 15:47:38+00:00,"One from




at camelinaction.BlueprintFirstTest.useOverridePropertiesWithPropertiesComponent(BlueprintFirstTest.java:56)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.createBundleContext(CamelBlueprintTestSupport.java:132)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:248)




one from




at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:368)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:281)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:251)","davsclaus:1561678675:2019-06-28T07:37:55.940+0000:1561678675:2019-06-28T07:37:55.940+0000:Can we backport this to camel-2.x branch?
ffang:1561695373:2019-06-28T12:16:13.208+0000:1561695373:2019-06-28T12:16:13.208+0000:Hi [~davsclaus],

Yes, I believe so, will do it.

Freeman"
0,CAMEL-13692,Improvement,Major,None,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-06-27 14:41:03+00:00,2019-06-27 16:18:28+00:00,"By default, Camel SSH enforces that ssh-rsa is used as the default key for clients. Instead we should just use whatever key is provided by the client, and only enforce the type if the client specifies it.",
0,CAMEL-13691,New Feature,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Christoph Giera,1,6,2019-06-27 08:51:43+00:00,2019-11-18 09:42:03+00:00,"Hystrix is no longer in active development, netflix uses resilience4j for new internal projects, see https://github.com/Netflix/Hystrix#Hystrix%20Status


Camel should also add a resilience4j component/java dsl.


Idea for java dsl: instead of adding resilience4j on the same level like hystrix add an additional level ""circuitBreaker"" with the childs hystrix, resilience4j...



from(endpoint)
.circuitBreaker()
.useHystrix()
.to(endpoint)
.endCircuitBreaker();




from(endpoint)
.circuitBreaker()
.useResilience4j()
.to(endpoint)
.endCircuitBreaker();","davsclaus:1568619562:2019-09-16T15:39:22.514+0000:1568619562:2019-09-16T15:39:22.514+0000:We should add an EIP for this like Hystrix into the model, and have a camel-resillience4j component with the implementation. This library is a fantastic CB implementation and very active maintained."
0,CAMEL-13690,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Later,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-27 04:56:07+00:00,2019-06-27 10:04:31+00:00,For example if you have OS ENV variables set that will not be in use because a component is not being used or something.,davsclaus:1561601071:2019-06-27T10:04:31.206+0000:1561601071:2019-06-27T10:04:31.206+0000:Lets not do this now as its a bit more dangerous as it will also ignore options that has a typo mistake etc.
0,CAMEL-13689,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-27 04:02:04+00:00,2019-06-27 08:21:44+00:00,No Desc,davsclaus:1561579420:2019-06-27T04:03:40.397+0000:1561579420:2019-06-27T04:03:40.397+0000:We should make the type converters fro string -> Boolean only accept true or false as values. Today it uses the Boolean.valueOf which just checks for true only. So converting abc -> Boolean would be false. But that can lead to configuring options that then gets set to false instead of null or report an error during type conversion.
0,CAMEL-13688,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-26 20:01:07+00:00,2019-07-07 09:36:03+00:00,"If you set an option like


camel.main.allow-use-original-message=123


Then its set as false, because we do a Boolean.valueOf convertion which just checks if its ""true"" or not. Instead we should only allow string values of ""true"" or ""false"" otherwise its a invalid value.",
0,CAMEL-13687,Bug,Major,2.23.1,"2.23.4, 2.24.2, 3.0.0.M4, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.M4, 3.0.0, 2.25.0",Claus Ibsen,Sreejesh,0,2,2019-06-26 09:28:28+00:00,2019-07-01 16:32:00+00:00,"am trying to test an error handling route. The NotificationBuilder does not work as expected (it always returns false).


Created a main route and a test route to test the main route. I used Spring Boot - all other tests work fine, so there is no problem with the setup I guess.


 


I have attached the sample project. Please uncomment the @Ignore method to test the method. Please read the README.md attached in the project","davsclaus:1561968131:2019-07-01T16:02:11.439+0000:1561968131:2019-07-01T16:02:11.439+0000:This is working as designed as the fromRoute is from the original route as its stated in the javadoc.

To do what you want we need a new fromCurrentRoute that I am adding."
0,CAMEL-13686,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-26 08:15:43+00:00,2019-06-28 07:11:37+00:00,"So end users can just set an option


camel.main.configuration-logging=true


Or something like that to get verbose INFO logging of how all these configurations are computed so you can use that to track if something seems not correct.",
0,CAMEL-13685,Improvement,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Devansh Arora,0,2,2019-06-26 06:34:38+00:00,2019-06-26 12:55:22+00:00,"change thread name of rabbitmq routes from ""RabbitMQConsumer"" to  its endpoint uri",davsclaus:1561524922:2019-06-26T12:55:22.874+0000:1561524922:2019-06-26T12:55:22.874+0000:Thanks for the PR
0,CAMEL-13684,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Andrea Cosentino,krishnath poologanathan,0,2,2019-06-25 23:15:45+00:00,2019-10-16 16:03:15+00:00,camel-corda component need to be updated to support all the operations that are listed in  https://docs.corda.net/api/kotlin/corda/net.corda.core.messaging/-corda-r-p-c-ops/index.html,"davsclaus:1565130633:2019-08-07T06:30:33.308+0000:1565130633:2019-08-07T06:30:33.308+0000:Contributions is welcome
pkrishnath:1571105705:2019-10-15T10:15:05.900+0000:1571105705:2019-10-15T10:15:05.900+0000:I am updating corda version to 4.1 and adding missing ops methods ...

Will raise a PR soon ... 
pkrishnath:1571117696:2019-10-15T13:34:56.485+0000:1571117696:2019-10-15T13:34:56.485+0000:PR Raised: [https://github.com/apache/camel/pull/3250]"
0,CAMEL-13683,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-25 16:36:54+00:00,2019-06-27 09:53:40+00:00,Look into if we are not reporting a good error if you configure an option for a component that is not on the classpath etc.,
0,CAMEL-13682,Bug,Minor,None,None,"
None
",Resolved,Not A Bug,None,Unassigned,Adam Ostrožlík,0,2,2019-06-25 12:50:24+00:00,2019-06-28 07:41:32+00:00,"We issued strange behaviour with our OSGI container setup using services - references and injecting services into out beans using @BeanInject


bundle1




<!-- Both beans using same AuditStore interface -->
<bean id=""auditStore"" class=""store.AuditStoreImpl"">
 <property name=""jdbcTemplate"" ref=""jdbcTemplate""/>
 <tx:transaction method=""*"" value=""Required""/>
</bean>
<bean id=""auditStoreOut"" class=""store.AuditStoreOutImpl"">
 <property name=""jdbcTemplate"" ref=""jdbcTemplate""/>
 <tx:transaction method=""*"" value=""Required""/>
</bean>

<service auto-export=""interfaces"" ref=""auditStore""/>
<service auto-export=""interfaces"" ref=""auditStoreOut""/>




 


bundle2




<reference id=""auditStore"" component-name=""auditStore"" interface=""eu.unicorn.basse.ms.audit.api.store.AuditStore""/>

<bean class=""SomeBean""/>




-> injecting reference info bean




class SomeBean {
   @BeanInject
   AuditStore auditStore;
}




From this point, I would expect that OSGI serves only one specific implementation of interface by specifying component-name attribute but it does not.


As a workaround we managed to inject the reverence using setter or specifing name in @BeanInject annotation - @BeanInject(""auditStore"")


I do not know if this is normal behaviour. Please, check this.


Camel version 2.16.1","davsclaus:1561440180:2019-06-25T13:23:00.146+0000:1561440180:2019-06-25T13:23:00.146+0000:Camel 2.16 is EOL and not supported. Please test with latest version first and report back.
davsclaus:1561678892:2019-06-28T07:41:32.336+0000:1561678892:2019-06-28T07:41:32.336+0000:This is now @BeanInject work and was designed, to lookup beans of a given type from the registry, its not really taking those osgi specifics into account with that you setup in osgi blueprint with the component-name filtering."
0,CAMEL-13681,New Feature,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-25 09:40:24+00:00,2019-06-26 12:46:38+00:00,"Any of the options you can configure via application.properties such as:
camel.main.name
camel.component.xxx=yyy


And so on should be configurable via ENV variables which will override any existing configuration. This is good practice in containers and also how SB can do etc.",davsclaus:1561440084:2019-06-25T13:21:24.629+0000:1561440084:2019-06-25T13:21:24.629+0000:We also need to add support for case insensitive keys all the way - so you can lookup setter methods when they are referred from ENV where its all upper cased
0,CAMEL-13680,Bug,Minor,None,"3.0.0.M4, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0, 2.25.0",Claus Ibsen,Claus Ibsen,0,2,2019-06-25 07:09:30+00:00,2019-07-02 12:11:25+00:00,"You can get errors like




Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot store file: work\cbr\output\ID-WIN-JTA8KU4EF9D-1561426618994-0-2
	at org.apache.camel.component.file.FileOperations.storeFile(FileOperations.java:352)
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:305)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:169)
	at org.apache.camel.component.file.GenericFileProducer.process(GenericFileProducer.java:80)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:138)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:101)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:452)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:219)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:183)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.nio.file.FileSystemException: work\cbr\input\ID-WIN-JTA8KU4EF9D-1561426618994-0-2 -> work\cbr\output\ID-WIN-JTA8KU4EF9D-1561426618994-0-2: The process cannot access the file because it is being used by another process
	at sun.nio.fs.WindowsException.translateToIOException(Unknown Source)
	at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
	at sun.nio.fs.WindowsFileCopy.copy(Unknown Source)
	at sun.nio.fs.WindowsFileSystemProvider.copy(Unknown Source)
	at java.nio.file.Files.copy(Unknown Source)","hfuruichi:1562028940:2019-07-02T08:55:40.358+0000:1562028940:2019-07-02T08:55:40.358+0000:Hello [~davsclaus],

I realized that the fix was not enough for this issue.

org.apache.camel.component.file.FileOperations.writeFileByFile() was OK now, but we also need to fix org.apache.camel.component.file.FileOperations.renameFile() and org.apache.camel.util.FileUtil class's methods to avoid to use java.nio.file.Files.copy() method.

Please take a look at this stack trace to get an idea about it. (Sorry it's not 3.0.x, but I hope it still helps)
{code:java}
[ead #4 - file://work/cbr/input] GenericFileOnCompletion        WARN  Error during commit. Exchange[ID-WIN-JTA8KU4EF9D-1562055372761-0-1]. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Error renaming file from C:\Users\Administrator\workspace\FuseReproducer\work\cbr\input\ID-WIN-JTA8KU4EF9D-1562029860727-1-2 to work\cbr\input\.camel\ID-WIN-JTA8KU4EF9D-1562029860727-1-2]
org.apache.camel.component.file.GenericFileOperationFailedException: Error renaming file from C:\Users\Administrator\workspace\FuseReproducer\work\cbr\input\ID-WIN-JTA8KU4EF9D-1562029860727-1-2 to work\cbr\input\.camel\ID-WIN-JTA8KU4EF9D-1562029860727-1-2
	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:85)
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:128)
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:111)
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:127)
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:83)
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:59)
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104)
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:243)
	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:685)
	at org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:634)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:251)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:127)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:454)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:223)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)
	at java.util.concurrent.FutureTask.runAndReset(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(Unknown Source)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.nio.file.FileSystemException: C:\Users\Administrator\workspace\FuseReproducer\work\cbr\input\ID-WIN-JTA8KU4EF9D-1562029860727-1-2 -> work\cbr\input\.camel\ID-WIN-JTA8KU4EF9D-1562029860727-1-2: The process cannot access the file because it is being used by another process

	at sun.nio.fs.WindowsException.translateToIOException(Unknown Source)
	at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
	at sun.nio.fs.WindowsFileCopy.copy(Unknown Source)
	at sun.nio.fs.WindowsFileSystemProvider.copy(Unknown Source)
	at java.nio.file.Files.copy(Unknown Source)
	at org.apache.camel.util.FileUtil.copyFile(FileUtil.java:541)
	at org.apache.camel.util.FileUtil.renameFileUsingCopy(FileUtil.java:525)
	at org.apache.camel.util.FileUtil.renameFile(FileUtil.java:499)
	at org.apache.camel.component.file.FileOperations.renameFile(FileOperations.java:82)
	... 25 more
{code}
davsclaus:1562029160:2019-07-02T08:59:20.098+0000:1562029160:2019-07-02T08:59:20.098+0000:Can you try set renameUsingCopy=true
hfuruichi:1562030877:2019-07-02T09:27:57.206+0000:1562030912:2019-07-02T09:28:32.399+0000:Yes. I tested it, but does not work either.

Even I enabled the option, go into the same stack trace.

 
{code:java}
at sun.nio.fs.WindowsException.translateToIOException(Unknown Source)
 at sun.nio.fs.WindowsException.rethrowAsIOException(Unknown Source)
 at sun.nio.fs.WindowsFileCopy.copy(Unknown Source)
 at sun.nio.fs.WindowsFileSystemProvider.copy(Unknown Source)
 at java.nio.file.Files.copy(Unknown Source)
 at org.apache.camel.util.FileUtil.copyFile(FileUtil.java:541)
 at org.apache.camel.util.FileUtil.renameFileUsingCopy(FileUtil.java:525)
{code}

 Please take a look at this source code, how the ""renameUsingCopy"" option is used.

 

[https://github.com/apache/camel/blob/eed7b1113ec1b72731b051f69ea3d269bf5fb1c5/components/camel-file/src/main/java/org/apache/camel/component/file/FileOperations.java#L80]

 
davsclaus:1562040101:2019-07-02T12:01:41.966+0000:1562040101:2019-07-02T12:01:41.966+0000:Okay so this is not possible on windows with readLock=fileLock. The changes we did previously was only to ensure the file lock could be released.

There are too many places where the file component can do a copy/rename/move or other operations. We will update the doc to mention that readLock=fileLock is not supported on windows. You can use any of the many other read locks on windows instead.
davsclaus:1562040678:2019-07-02T12:11:18.394+0000:1562040678:2019-07-02T12:11:18.394+0000:Added a check that if readLock=fileLock on windows you now get an error and also updated the doc."
0,CAMEL-13679,Improvement,Major,3.0.0-M3,,"
None
",Resolved,Fixed,None,Andrea Tarocchi,Andrea Tarocchi,0,1,2019-06-24 12:01:14+00:00,2019-11-28 13:24:52+00:00,"Camel-FTP component does not set CamelFtpReplyCode in some case:
see https://issues.jboss.org/browse/ENTESB-10812",valdar:1561351615:2019-06-24T12:46:55.688+0000:1561351615:2019-06-24T12:46:55.688+0000:fixed with https://github.com/apache/camel/pull/2997
0,CAMEL-13678,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-24 11:52:35+00:00,2019-07-17 09:02:18+00:00,"We should consider making the Camel Message API more simpler and remove stuff that are seldom in use, or can be component specific.


The javax.attachment is removed from JDK11 onwards and its not really much in use in the future.","davsclaus:1562484188:2019-07-07T15:23:08.246+0000:1562484188:2019-07-07T15:23:08.246+0000:We could create a camel-attachments component that hosts an AttachmentsMessage that extends DefaultMessage that has all the attachments stuff. Then camel-mail, and camel-spring-ws, camel-cxf, and maybe camel-http-common can use that.

However then end-users cannot add arbitrary attachments on the message api.

However we could also add an adapt API to message, so you can adapt to other types, and then if you say AttachmentsMessage then DefaultMessage will adapt to this class.
davsclaus:1562484577:2019-07-07T15:29:37.425+0000:1562484577:2019-07-07T15:29:37.425+0000:Also some details here
https://stackoverflow.com/questions/46493613/what-is-the-replacement-for-javax-activation-package-in-java-9
davsclaus:1562494182:2019-07-07T18:09:42.805+0000:1562494182:2019-07-07T18:09:42.805+0000:Okay working on a camel-attachments where all of the javax.activation based attachments are. Then the few components that support this API can add dependency on camel-attachments, and use the AttachmentsMessage API to work with attachments.

There will be migration from Camel 2 to Camel 3, but that is not very much
{code}
AttachmentMessage m = exchange.getIn(AttachmentMessage.class);
{code}
davsclaus:1562550663:2019-07-08T09:51:03.133+0000:1562588790:2019-07-08T20:26:30.981+0000:I have not migrated the components and we dont rely on attachments api for camel-core. There is a new camel-attachments JAR that has this logic. This also makes using Camel on JDK9+ onwards easier as you dont have to add attachments JAR because it was not in the JDK anymore and camel-core required it - now its just like any component with transitive dependencies via camel-attachments.

Outstanding work
- Update karaf feature *DONE*
- Consider storing attachments somewhere else than exchange property
- Build and test with JDK 8 *DONE*
- Build and test with JDK 11 *DONE*

davsclaus:1562563549:2019-07-08T13:25:49.316+0000:1562563549:2019-07-08T13:25:49.316+0000:Its only 4 components that uses attachments

git grep ""camel-attachments""
camel-attachments/pom.xml:    <artifactId>camel-attachments</artifactId>
camel-attachments/src/test/resources/log4j2.properties:appender.file.fileName = target/camel-attachments-test.log
camel-cxf/pom.xml:            <artifactId>camel-attachments</artifactId>
camel-http-common/pom.xml:            <artifactId>camel-attachments</artifactId>
camel-mail/pom.xml:            <artifactId>camel-attachments</artifactId>
camel-spring-ws/pom.xml:            <artifactId>camel-attachments</artifactId>"
0,CAMEL-13677,Improvement,Major,Future,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-24 11:27:31+00:00,2019-07-17 09:02:27+00:00,The javax.attachments API are not standard in Java 11. We should make this converter optional from camel-core and move to somewhere else.,
0,CAMEL-13676,New Feature,Major,None,,"
None
",Resolved,Duplicate,None,Guillaume Nodet,Claus Ibsen,0,1,2019-06-24 10:54:59+00:00,2020-02-12 08:39:36+00:00,"The XML DSL is generated based on the model classes with JAXB annotations. Also the XML DSL is loaded via JAXB. 


We should look at using a smaller and faster XML parser, such as stax based.


For generating the XML dump of the routes at runtime via JAXB we should make that optional (they are in ModelHelper), for example move to some camel-xml-jaxb or some other JAR, so this is facade better and we can make Camel check if JAXB is on classpath or not and report accordingly if its not possible.",
0,CAMEL-13675,Improvement,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-24 10:24:01+00:00,2019-06-24 12:34:56+00:00,"This method takes approx 60 millis on my laptop
org.apache.camel.main.DefaultConfigurationConfigurer#afterPropertiesSet


I suspects its all those lambda's that are loaded on classpath and only in use if there is a bean to lookup. The logic can be improved to use old fashioned code with some if != null


If I disable all of those then its down to 4 millis on my laptop",
0,CAMEL-13674,New Feature,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-22 22:03:24+00:00,2019-06-23 06:40:23+00:00,Add function to return the message body as a one line string. This can be useful in some situations where you want to be able to do this from logging point of view via Log EIP,
0,CAMEL-13673,Test,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Alex Dettinger,Claus Ibsen,0,2,2019-06-22 09:33:31+00:00,2019-06-26 06:34:51+00:00,They have been failing for a while. Not sure why.,"davsclaus:1561167384:2019-06-22T09:36:24.551+0000:1561167384:2019-06-22T09:36:24.551+0000:I upgrade ignite from 2.7.0 to 2.7.5
davsclaus:1561332715:2019-06-24T07:31:55.644+0000:1561332715:2019-06-24T07:31:55.644+0000:[~aldettinger] if you get a chance you are welcome to take a look
aldettinger:1561333915:2019-06-24T07:51:55.207+0000:1561333915:2019-06-24T07:51:55.207+0000:Indeed the ignite version seems independent from the test failing. I'm taking a look at that.
aldettinger:1561424447:2019-06-25T09:00:47.561+0000:1561424447:2019-06-25T09:00:47.561+0000:The camel-ignite tests were too much tied with producers lifecyle. So, I've just committed a fix in this direction. We should be ok on next build."
0,CAMEL-13672,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-22 09:23:12+00:00,2019-06-24 07:31:08+00:00,"We can add groups as documented in SB metamodel
https://docs.spring.io/spring-boot/docs/current/reference/html/configuration-metadata.html#configuration-metadata-format


Then we can have groups for



main
per component



With a description of each group, eg the component description etc. This gives a little bit more documentation for the end users.",
0,CAMEL-13671,Task,Major,3.0.0-M3,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Unassigned,Gary Brown,0,2,2019-06-21 15:52:41+00:00,2019-06-22 09:31:36+00:00,Upgrade to the latest version of the OpenTracing Java API (0.33).,davsclaus:1561167096:2019-06-22T09:31:36.094+0000:1561167096:2019-06-22T09:31:36.094+0000:Thanks for the PR
0,CAMEL-13670,Improvement,Major,None,None,"
None
",Resolved,Not A Problem,None,Andrea Cosentino,Tomasz Piskorski,0,2,2019-06-21 14:27:41+00:00,2019-06-21 14:46:26+00:00,"Recently I upgraded Camel from 2.16.1 to 2.23.1.


I noticed that property in Camel AWS SES Component has been changed from


amazonSESEndpoint to region and the change seems to be not documented.


Example:
""aws-ses://somebody@example.com?amazonSESClient=#client&amazonSESEndpoint=email.us-west-2.amazonaws.com"";
to:
""aws-ses://somebody@example.com?amazonSESClient=#client&region=email.us-west-2.amazonaws.com"";


Could you please make correction to official documentation at https://camel.apache.org/aws-ses.html?","acosentino:1561098829:2019-06-21T14:33:49.901+0000:1561098829:2019-06-21T14:33:49.901+0000:The official documentation as reported in the site too, has been moved.

So you have to check here:

[https://github.com/apache/camel/blob/camel-2.23.x/components/camel-aws/src/main/docs/aws-ses-component.adoc]

All the documentation has been moved to github.
acosentino:1561099586:2019-06-21T14:46:26.204+0000:1561099586:2019-06-21T14:46:26.204+0000:And we are working on a new website

https://camel.apache.org/staging"
0,CAMEL-13669,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-21 13:15:17+00:00,2019-06-28 11:35:51+00:00,No Desc,
0,CAMEL-13668,Improvement,Minor,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Won't Fix,"3.0.0.RC1, 3.0.0",Unassigned,Claus Ibsen,0,1,2019-06-21 12:12:06+00:00,2019-08-07 06:29:14+00:00,"We could consider generating .java source code that will be compiled to setup the configuration from application.properties.


Then we can execute this code on bootup and avoid using java reflection to set the options.",davsclaus:1565130545:2019-08-07T06:29:05.900+0000:1565130545:2019-08-07T06:29:05.900+0000:camel-quarkus will be able to do thins with its design time compilation / optimization
0,CAMEL-13667,Bug,Minor,2.22.2,"2.23.4, 2.24.2, 3.0.0.M4, 3.0.0, 2.25.0","

UNC
camel-core
camel-file
windows

",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.M4, 3.0.0, 2.25.0",Andrea Cosentino,Clemens Blamauer,0,4,2019-06-20 14:07:49+00:00,2019-06-21 12:50:29+00:00,"Dear all,


We are using Camel's File2 endpoint to deliver reports to a Windows network share. The used URI is (here in a properties file):


# File URI equivalent of \\FILESERVER.mycompany.local\Public\reports
report.delivery.to=file:////FILESERVER.mycompany.local/Public/reports?keepLastModified=true&tempPrefix=tmp_


This results in an exception, see the stack trace (attached).


I debugged and traced the issue back to:


org.apache.camel.component.file.GenericFileProducer#createTempFileName


which is using


org.apache.camel.util.FileUtil#compactPath(java.lang.String, java.lang.String)


This method only preserves the first slash/backslash at the start. For UNC paths on Windows however, 2 backslashes are needed.


I prepared a patch for:



org.apache.camel.util.FileUtil
org.apache.camel.util.FileUtilTest



which remedies the issue on Windows.


I would appreciate if you could check the patch, and integrate it to 2.x and 3.x branches if it is ok.


Thank you.


Kind regards,


Clemens","davsclaus:1561011089:2019-06-20T14:11:29.117+0000:1561011089:2019-06-20T14:11:29.117+0000:Thanks for reporting and the patch - looks fine for me
davsclaus:1561011109:2019-06-20T14:11:49.535+0000:1561011109:2019-06-20T14:11:49.535+0000:I wonder if you would attempt to provide the patch as a github PR, then its a bit easier for us? 
cblamauer:1561011588:2019-06-20T14:19:48.012+0000:1561011588:2019-06-20T14:19:48.012+0000:Hi Claus,
sure, will do.
cblamauer:1561013431:2019-06-20T14:50:31.390+0000:1561013431:2019-06-20T14:50:31.390+0000:I have created a pull request for camel-2.23.x branch:
[https://github.com/apache/camel/pull/2988]

Please let me know if you need anything else.

Thank you.
acosentino:1561014600:2019-06-20T15:10:00.097+0000:1561014600:2019-06-20T15:10:00.097+0000:Can you create the PR against master branch and camel-2.x branch. We'll backport if it's fine, but start with the two mainline branches.
cblamauer:1561018223:2019-06-20T16:10:23.584+0000:1561018223:2019-06-20T16:10:23.584+0000:I have created 2 separate PRs for 2.x & master:
2.x: https://github.com/apache/camel/pull/2989
master: https://github.com/apache/camel/pull/2990"
0,CAMEL-13666,Bug,Major,3.0.0-M3,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Alex Dettinger,Alex Dettinger,0,1,2019-06-20 08:14:19+00:00,2019-06-24 07:31:27+00:00,"It looks like route autoStartup cancellation from a route policy is not working properly with Camel 3.


For instance, ClusteredRoutePolicy.onInit() is setting autoStartup to false, but routes are actually started.


How to reproduce:


The test JGroupsRaftClusteredRoutePolicyTest reproduces this issue when autoStartup(false) is not explicitly set in createRouteBuilder.


The test RoutePolicyAutoStartupCancelledOnInitTest is a small reproducer too.


Workaround:
 Explicitly set autoStartup(false):




from(...).autoStartup(false)",aldettinger:1560991805:2019-06-20T08:50:05.571+0000:1560991805:2019-06-20T08:50:05.571+0000:Building a reproducer in camel-core would be a good start.
0,CAMEL-13665,Improvement,Minor,None,3.x,"
None
",Resolved,Won't Fix,3.x,Claus Ibsen,Claus Ibsen,0,1,2019-06-20 06:24:27+00:00,2019-10-30 09:15:36+00:00,"We do a bunch of SPI classpath discover for 3rd party plugins and even for components like camel-bean and whatnot. (its those resolvers).


For a quicker startup we can group these standard lookups into a single classpath scan (notice Camel only does that if you have not set an explicit SPI vis its setter).",
0,CAMEL-13664,Test,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Freeman Yue Fang,Freeman Yue Fang,0,2,2019-06-18 19:03:33+00:00,2019-06-24 16:12:46+00:00,"[ERROR] Errors: 
[ERROR]   CamelGroovyTest.testCamelGroovy:48 » WrappedTestContainer [testCamelGroovy(org...
[ERROR]   CamelJacksonFallbackConverterTest.test:56 » NoTypeConversionAvailable No type ...","ffang:1561032116:2019-06-20T20:01:56.473+0000:1561032116:2019-06-20T20:01:56.473+0000:If I deploy the  blueprint file used in CamelGroovyTest in Karaf, it works.
ffang:1561032521:2019-06-20T20:08:41.671+0000:1561032557:2019-06-20T20:09:17.613+0000:OK, the thing is that any blueprint bundle(like drop a blueprint file in karaf deploy folder, a bundle based on this blueprint file will be generated on the fly, with some OSGi headers added automatically) in Karaf will be added ""DynamicImport-Package = 
	*"", but it's not this case in OSGi test of camel, this is the problem, it can't reflect exactly the same behavior as it should be in real Karaf container.

We should do the change like this
{code}
--- a/components/camel-test-karaf/src/main/java/org/apache/camel/test/karaf/AbstractFeatureTest.java
+++ b/components/camel-test-karaf/src/main/java/org/apache/camel/test/karaf/AbstractFeatureTest.java
@@ -121,7 +121,8 @@ public abstract class AbstractFeatureTest {
         bundle.set(""Manifest-Version"", ""2"")
                 .set(""Bundle-ManifestVersion"", ""2"")
                 .set(""Bundle-SymbolicName"", name)
-                .set(""Bundle-Version"", ""1.0.0"");
+                .set(""Bundle-Version"", ""1.0.0"")
+                .set(""DynamicImport-Package"", ""*"");
{code}

in installBlueprintAsBundle method
davsclaus:1561090514:2019-06-21T12:15:14.942+0000:1561090514:2019-06-21T12:15:14.942+0000:Thanks are the tests passing now?
ffang:1561095013:2019-06-21T13:30:13.198+0000:1561095013:2019-06-21T13:30:13.198+0000:Hi [~davsclaus],

 CamelGroovyTest is fixed by setting ""DynamicImport-Package"", but I'm still looking at CamelJacksonFallbackConverterTest, this test only fail on master branch, somehow can't find the JacksonConverter in OSGi.

Cheers
Freeman
davsclaus:1561095319:2019-06-21T13:35:19.331+0000:1561095319:2019-06-21T13:35:19.331+0000:Okay that would likely work if you run a real karaf.

The classloaders are loaded in a new way on master, via source generated files. And only fallback to the old way. But check the OSGiTypeConverterLoader magic stuff
ffang:1561119010:2019-06-21T20:10:10.899+0000:1561119010:2019-06-21T20:10:10.899+0000:Hi [~davsclaus],

Indeed, the CamelJacksonFallbackConverterTest failure is caused by the auto-generated TypeConverterLoader. However, I found that in OSGi bundle, the TypeConverterLoader will never be used, that's why can't find the expected TypeConverter. I have a a quick fix, to ensure I did it right, I will send a PR for review soon.

Cheers
Freeman
davsclaus:1561167133:2019-06-22T09:32:13.491+0000:1561167133:2019-06-22T09:32:13.491+0000:Thanks PR merged.
ffang:1561179498:2019-06-22T12:58:18.027+0000:1561179498:2019-06-22T12:58:18.027+0000:Thanks [~davsclaus]!
davsclaus:1561211246:2019-06-22T21:47:26.283+0000:1561211246:2019-06-22T21:47:26.283+0000:Hmm did you test your changes for camel-blueprint camel-test-blueprint etc

We got this error on CI now
https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/org.apache.camel.test.blueprint.converter/CustomConverterRegressionTest/testCustomConverter/
ffang:1561213456:2019-06-22T22:24:16.906+0000:1561213456:2019-06-22T22:24:16.906+0000:[~davsclaus], I will take a close look.
ffang:1561363958:2019-06-24T16:12:38.403+0000:1561363958:2019-06-24T16:12:38.403+0000:24b7cf6090aa6c4476bc2265385aa21bd5ca02d4
add the previous default BundleTypeConverterLoader as fallback fixed the broken test, sorry about it."
0,CAMEL-13663,New Feature,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-18 18:18:28+00:00,2019-06-21 11:38:20+00:00,"To assist editing Camel Main and eg application.properties then we could ""fool"" tooling by generating Spring Boot metadata json files, so tools see these files and offer their code completions.


Then you can use ctrl + space for type completions when typing


camel.component.jms","davsclaus:1560889121:2019-06-19T04:18:41.083+0000:1560889121:2019-06-19T04:18:41.083+0000:Okay sadly this requires having spring-boot JARs on the classpath before the tooling in IDEA enables auto completion for properties files.
davsclaus:1560890264:2019-06-19T04:37:44.736+0000:1560890264:2019-06-19T04:37:44.736+0000:Okay Visual Source Code seems to support this without having spring boot on the classpath / pom.xml
davsclaus:1560890823:2019-06-19T04:47:03.361+0000:1560890823:2019-06-19T04:47:03.361+0000:Ah yeah got it to work with IDEA too if you [x] in spring boot settings: Allow to auto-configure application contexts
davsclaus:1560895662:2019-06-19T06:07:42.653+0000:1561087473:2019-06-21T11:24:33.893+0000:Okay besides the regular Camel component options we can be smarter and find out nested options eg

camel.component.jms.connection-factory.brokerURL=tcp://localhost:61616

Then we can do the same autowiring smartness and detect if there is a single preferred implementation of ConnectionFactory, we can then inspect this class and extracts its getter/setters and include those (they will however not have any documentation or default values). *DONE*

This would require to download the -sources JAR of those and find the source code and grab its javadoc. And then we would still not know any default values *DONE*



davsclaus:1560915493:2019-06-19T11:38:13.545+0000:1561076874:2019-06-21T08:27:54.738+0000:Okay will merge some tools for this, see the camel-example-main-artemis.

Work to do
- merge autowire and spring-boot goals into one goal (and name it something nicer) *DONE*"
0,CAMEL-13662,Improvement,Major,3.0.0,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Andrea Cosentino,Pasquale Congiusti,0,2,2019-06-18 14:26:38+00:00,2019-06-19 14:11:14+00:00,"The component allow to get a connectionBean client only from context, making difficult to inject it at runtime. I'd like to make some change that would allow to retrieve the connectionBean from properties if it is not found in the context.


I'd keep therefore retrocompatibility and ensure through proper unit testing.","squakez:1560839474:2019-06-18T14:31:14.541+0000:1560839474:2019-06-18T14:31:14.541+0000:I've already worked on it, just proceeding to PR...
acosentino:1560924668:2019-06-19T14:11:08.892+0000:1560924668:2019-06-19T14:11:08.892+0000:Thanks [~squakez]"
0,CAMEL-13661,Bug,Minor,3.0.0-M3,3.0.0.M4,"
None
",Resolved,Fixed,3.0.0.M4,Alex Dettinger,Alex Dettinger,0,1,2019-06-18 09:50:03+00:00,2019-06-19 06:59:25+00:00,There is a version misalignment as spring boot and spring cloud release train are bound together.,
0,CAMEL-13660,Task,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Won't Do,"3.0.0.M4, 3.0.0",Ramu,Claus Ibsen,0,4,2019-06-18 08:17:51+00:00,2019-06-20 14:12:22+00:00,"I wonder if we can upgrade to use the v4 of stax2-api's? The camel-stax component now uses that, but the xml-specs feature is using the old v3 from 2014","ramu11:1560839623:2019-06-18T14:33:43.783+0000:1560839623:2019-06-18T14:33:43.783+0000:looking into it
ffang:1560846665:2019-06-18T16:31:05.205+0000:1560846665:2019-06-18T16:31:05.205+0000:In OSGi if we upgrade to stax2 4.x, we also should upgrade to woodstox-core 5.x
acosentino:1560912617:2019-06-19T10:50:17.399+0000:1560912617:2019-06-19T10:50:17.399+0000:I think we need to update woodstox too.
ramu11:1560912858:2019-06-19T10:54:18.680+0000:1560913407:2019-06-19T11:03:27.232+0000:[~acosentino] woodstox-core-asl is at latest version 4.4.1
woodstox-core is at latest 5.2.1 version
<woodstox-core-version>5.2.1</woodstox-core-version>
   <bundle dependency='true'>mvn:com.fasterxml.woodstox/woodstox-core/${woodstox-core-version}</bundle>
acosentino:1560916987:2019-06-19T12:03:07.605+0000:1560916987:2019-06-19T12:03:07.605+0000:In xml-specs feature the woodstox version is at 4.4.1
acosentino:1560917610:2019-06-19T12:13:30.973+0000:1560917610:2019-06-19T12:13:30.973+0000:[~ffang] do you mean to completely leave the codehaus woodstox and pass only to fasterxml woodstox-core in all the features?
acosentino:1560921879:2019-06-19T13:24:39.857+0000:1560921879:2019-06-19T13:24:39.857+0000:Camel-Olingo4 Karaf feature was broken by this change. I moved it back to stax2-api old version

 

[https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.9.9]
ffang:1560923833:2019-06-19T13:57:13.289+0000:1560923833:2019-06-19T13:57:13.289+0000:[~acosentino],

Yes, only mvn:com.fasterxml.woodstox/woodstox-core/ should be upgraded to 5.2.1 and needn't touch mvn:org.codehaus.woodstox/woodstox-core-asl, seems already this case.


Freeman
acosentino:1560924318:2019-06-19T14:05:18.728+0000:1560924318:2019-06-19T14:05:18.728+0000:Thansk Freeman, so I think we are fine here. I just changed the dependency for olingo4 feature, because it didn't work.
acosentino:1560982150:2019-06-20T06:09:10.752+0000:1560982150:2019-06-20T06:09:10.752+0000:So I had to revert this, it breaks the camel-jacksonxml feature. This is because the updated version was included in to the xml-specs feature, which is used by camel-core, which is used by all the camel features. So a correct checking would have been to test all the features. [~ramu11], next time, please, check everything, because I found that a modified camel-olingo4 feature didn't work too.
acosentino:1560982177:2019-06-20T06:09:37.371+0000:1560982177:2019-06-20T06:09:37.371+0000:This, looking at OSGi, cannot be done."
0,CAMEL-13659,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.0.0.M4,Luca Burgazzoli,Luca Burgazzoli,0,1,2019-06-17 18:55:30+00:00,2019-06-18 05:53:14+00:00,"Most of the various language Expression have a constructor with a string where basically one can set the expression to use but the tokenizer does not have a similar constructor. 


We can provide one that by default sets the token field.",
0,CAMEL-13658,Improvement,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,2,2019-06-17 18:52:53+00:00,2019-06-19 04:01:06+00:00,"The ProcessDefinition class is the base class for most of the DSL / Definitions and defines a  number of methods related to outputs such as:




public abstract List<ProcessorDefinition<?>> getOutputs();
public abstract boolean isOutputSupported();




The information about the ability to handle outputs is thus available at runtime only which complicates the creation of alternative DSLs (i.e https://github.com/apache/camel-k-runtime/issues/80)","davsclaus:1560813739:2019-06-18T07:22:19.405+0000:1560813739:2019-06-18T07:22:19.405+0000:There is a method on the processor definiton

public abstract boolean isOutputSupported();

Maybe that is sufficient?
lb:1560834794:2019-06-18T13:13:14.743+0000:1560834794:2019-06-18T13:13:14.743+0000:I saw it but it is not possible to detect if a definition support outputs at compile time, i.e. with an instanceOf (well, theoretically you can check for NoOutputDefinition but there's no guarantees).
davsclaus:1560854580:2019-06-18T18:43:00.863+0000:1560854580:2019-06-18T18:43:00.863+0000:Okay working on adding OutputNode to mark which model classes has output or not
davsclaus:1560860082:2019-06-18T20:14:42.808+0000:1560860082:2019-06-18T20:14:42.808+0000:Okay got a working prototype doing a bit more testing before merging. Now you can check via instanceof OutputNode to know if it supports output or not - we also use this in the apt compiler plugin when generating model json schema files."
0,CAMEL-13657,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,2,2019-06-17 18:42:13+00:00,2019-06-28 13:18:55+00:00,"Some part of the DSL expose verbose properties as example, the set header definition, has ha setHeaderName property which leads to an XML like:




<setHeader headerName=""Something""/>




This is not wrong but the context gives enough information so it can be rewritten as:




<setHeader name=""Something""/>




Which makes it shorter and does not impact comprehension.","davsclaus:1561695292:2019-06-28T12:14:52.291+0000:1561695292:2019-06-28T12:14:52.291+0000:And <setProperty> as well. Its only these 2 so lets migrate and it would only be XML DSL that needs to migrate, which is easy to do anyway."
0,CAMEL-13656,Improvement,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,1,2019-06-17 15:21:14+00:00,2019-06-28 14:02:06+00:00,Refiers classes are now package private that make it impossible to reuse them for example in a custom processor factory like what it is done by Hystrix: https://github.com/apache/camel/blob/master/components/camel-hystrix/src/main/java/org/apache/camel/component/hystrix/processor/HystrixProcessorFactory.java,
0,CAMEL-13655,Improvement,Minor,None,3.0.0.M4,"
None
",Resolved,Fixed,3.0.0.M4,Luca Burgazzoli,Luca Burgazzoli,0,1,2019-06-17 14:20:49+00:00,2019-06-18 05:53:08+00:00,No Desc,
0,CAMEL-13654,Bug,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Thomas Diesler,Thomas Diesler,0,2,2019-06-17 10:49:23+00:00,2019-09-09 08:03:23+00:00,"drools-7.23 uses this code in `org.drools.core.common.ProjectClassLoader` ...




    public void setDroolsClassLoader(ClassLoader droolsClassLoader) {
        if (getParent() != droolsClassLoader && isOsgiClassLoader(droolsClassLoader)) {
            this.droolsClassLoader = droolsClassLoader;
            if (CACHE_NON_EXISTING_CLASSES) {
                nonExistingClasses.clear();
            }
        }
    }




drools-7.14 uses




    public void setDroolsClassLoader(ClassLoader droolsClassLoader) {
        if (getParent() != droolsClassLoader) {
            this.droolsClassLoader = droolsClassLoader;
            if (CACHE_NON_EXISTING_CLASSES) {
                nonExistingClasses.clear();
            }
        }
    }




In a non flat classpath environment, the later version of drools does not allow the CL to get set to anything that is not an OSGi CL. 


CrossRefs: https://github.com/wildfly-extras/wildfly-camel/issues/2831, https://github.com/kiegroup/drools/commit/85c5308031a84a0ac4086c1df363bb1b4b3c6af9",acosentino:1567987403:2019-09-09T08:03:23.890+0000:1567987403:2019-09-09T08:03:23.890+0000:The problem has been fixed in Optaplanner 7.26.0.Final. Updated
0,CAMEL-13653,Task,Minor,3.0.0-M3,None,"
None
",Resolved,Cannot Reproduce,3.0.0.M4,Alex Dettinger,Alex Dettinger,0,1,2019-06-17 09:18:40+00:00,2019-06-18 08:25:01+00:00,No Desc,"aldettinger:1560735169:2019-06-17T09:32:49.829+0000:1560735169:2019-06-17T09:32:49.829+0000:3 tests involving the docker image consul:1.0.7 are failing in CI:
 * ContainerAwareSpringTestSupportIT
 * ContainerAwareTestSupportIT
 * ConsulServiceRegistryIT

For those 3 tests, the error message below is issued:

open /var/lib/docker/aufs/layers/d85e709cc8231015022bfd721c48294479f5f117dbd2da8412cae2aa0ec06648: no such file or directory

The issue can't be reproduced locally for any of those 3 tests.

Reference to similar issues suggest that possible solutions could involve, not using cache, upgrading docker version, re-pulling the image or cleaning up all docker data and restarting the daemon.

 

As a first step, let's upgrade the ConsulServiceRegistryIT image to consul:1.5.1. This way, a new fresh image will be pulled, and we gain information around a possible corruption. If successful, we should consider upgrading all tests and base test class involving consul 1.0.7.
aldettinger:1560817454:2019-06-18T08:24:14.568+0000:1560817454:2019-06-18T08:24:14.568+0000:Those 3 CI tests sticky failed during 5 builds and now passes. The upgrade to the consul:1.5.1 image seems unrelated.

Closing for now, let's track any new occurrences if any."
0,CAMEL-13652,Improvement,Minor,None,3.0.0.M4,"
None
",Resolved,Fixed,3.0.0.M4,Luca Burgazzoli,Luca Burgazzoli,0,1,2019-06-17 09:04:06+00:00,2019-06-17 14:20:49+00:00,No Desc,
0,CAMEL-13651,Bug,Major,2.21.0,None,"
None
",Resolved,Implemented,2.23.0,Unassigned,Jonathan Vila,0,3,2019-06-16 16:23:44+00:00,2019-06-25 04:02:29+00:00,"Having this route :




rest() 
  .post(""/upload/{customerID}"") 
    .to(""direct:upload"") 
  .get(""/health"") 
    .to(""log:health"") 
  .get(""/info"") 
    .to(""log:info"");




When I inspect camelContext.getRoutes() I see route1, route2, route3, post1, get1, get2 and route1 is identical to post1, and so on.


So , if I try to assign an id to a route :




        rest()
                .id(""rest-route"")
                .get(""/health"")
                    .id(""get-health"")
                    .to(""log:health"")
                .post(""/uploadXX/{customerID}"")
                    .id(""post-upload"")
                    .to(""direct:upload"")
                .get(""/info"")
                    .id(""get-info"")
                    .to(""log:info"");




Then I get an error : Failed to start route get-health because of duplicate id detected: get-health


The motivation to give ids to rest routes is to test only one at a time. I do that using @AdviceWith and then camelContext.startRoute(""post1"")","davsclaus:1560683131:2019-06-16T19:05:31.992+0000:1560683131:2019-06-16T19:05:31.992+0000:I think the duplicate id has been fixed in newer Camel version. Try with latest 2.24.0 etc
jonvila:1560822201:2019-06-18T09:43:21.266+0000:1560822201:2019-06-18T09:43:21.266+0000:[~davsclaus] I will search for the issue and try to backport for 2.23.x

dmvolod:1561359893:2019-06-24T15:04:53.034+0000:1561359893:2019-06-24T15:04:53.034+0000:[~jonvila], looks like it has been already fixed in 2.23.0. Please verify. "
0,CAMEL-13650,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,3,2019-06-16 06:13:02+00:00,2019-06-18 07:20:14+00:00,"The API


    Properties loadProperties();


    Properties loadProperties(String... locations);


But the Properties is a Hashtable that is unordered, but it would be better if we could get this as Map so we can use LinkedHashMap so they are in order. This would work better with the order the end users may define in their application.properties files etc


camel.component.jms.configuration.connectionFactory=#class:org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory
camel.component.jms.configuration.connectionFactory.brokerUrl=localhost:61616","coheigea:1560761026:2019-06-17T16:43:46.103+0000:1560761026:2019-06-17T16:43:46.103+0000:[~davsclaus] - looks like this could have caused the failing tests on master with JDK 11? https://builds.apache.org/job/Camel%20JDK11/job/master/187/
jpoth:1560763011:2019-06-17T17:16:51.810+0000:1560763035:2019-06-17T17:17:15.469+0000:Should be fixed with [https://github.com/apache/camel/commit/684378fcfd5a4e57a6290761bc7a5faaf43c9805]
davsclaus:1560813614:2019-06-18T07:20:14.204+0000:1560813614:2019-06-18T07:20:14.204+0000:Thanks [~jpoth] for fixing this"
0,CAMEL-13649,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Unassigned,Claudio Miranda,0,1,2019-06-14 19:35:05+00:00,2019-06-28 14:02:45+00:00,"To search tweets with multiple words the comma is not a valid character separator, it should  use the twitter search standard operators.


The documentation should be changed to let users know how to use twitter search operators. Examples of a search query:



java OR scala
(apache camel) AND integration
camel -knative",
0,CAMEL-13648,Bug,Minor,"2.21.0, 3.0.0-M1",,"
None
",Resolved,Invalid,None,Unassigned,Muhammad Zubair,0,2,2019-06-14 11:21:26+00:00,2019-06-14 14:40:32+00:00,"I am trying to call an external service with some dynamic uri which will be comming in request e.g www.abc.com/

{id} i get that id in ${header.id} which is perfectly log in console but when i am trying to use netty4-http component in camel i used same dynamic uri in path of configuration but i am getting error of 404 not found because the url is not properly made.





It is not using simple expression language like ""${header.id}"" or any placeholder like ""
id
"" and also not work with this ""{id}

""
 I am using blue print dsl in redhat code ready studio 12.11.0 GA


The main problem is how to use dynamic uri with netty4-http component in camel.","acosentino:1560483377:2019-06-14T11:36:17.304+0000:1560483377:2019-06-14T11:36:17.304+0000:Please ask on the user mailing list. This is a Jira for issues and not for Q&A
zubair518:1560485588:2019-06-14T12:13:08.141+0000:1560485588:2019-06-14T12:13:08.141+0000:This is a issue of camel component not a question  its *netty4-http component* issue in camel.
and from where i get the mailing list?
acosentino:1560486013:2019-06-14T12:20:13.654+0000:1560486013:2019-06-14T12:20:13.654+0000:This is a question and not an issue. There are not enough details.

You need to subscribe yourself here [users-subscribe@camel.apache.org|mailto:here%C2%A0users-subscribe@camel.apache.org]

And then start a thread at [users@camel.apache.org|mailto:users@camel.apache.org]
acosentino:1560486386:2019-06-14T12:26:26.811+0000:1560486386:2019-06-14T12:26:26.811+0000:If you open an issue and ask for help, it sounds really like a users mailing list thread. 
zubair518:1560487760:2019-06-14T12:49:20.319+0000:1560487760:2019-06-14T12:49:20.319+0000:I am trying to call an external service with some dynamic uri which will be comming in request e.g www.abc.com/{id} i get that id in ${header.id} which is perfectly log in console but when i am trying to use netty4-http component in camel i used same dynamic uri in path of configuration but i am getting error of 404 not found because the url is not properly made.

It is not using simple expression language like ""${header.id}"" or any placeholder like ""{{id}}"" and also not work with this ""{id}""

 I am using blue print dsl in redhat code ready studio 12.11.0 GA

The main problem is how to use dynamic uri with netty4-http component in camel.
acosentino:1560488317:2019-06-14T12:58:37.496+0000:1560488345:2019-06-14T12:59:05.573+0000:Don't reopen and ask on the users mailing list first. Please.

If this is a bug we can reopen this. Follow the rules.
acosentino:1560491378:2019-06-14T13:49:38.748+0000:1560491378:2019-06-14T13:49:38.748+0000:Anyway please show the route in your email on the users mailing list thread
acosentino:1560494432:2019-06-14T14:40:32.729+0000:1560494432:2019-06-14T14:40:32.729+0000:Here is an example on master: [https://github.com/apache/camel/commit/aa96707b29b32be70135c3a252da442d8970e330]"
0,CAMEL-13647,New Feature,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,1,2,2019-06-14 07:37:34+00:00,2019-06-17 12:04:45+00:00,"This can make convention over configuration nicer. For example some components requires a ConnectionFactory etc and if we can auto-discover that on the classpath there is only 1 implementation of such interface, we can try to auto create the instance and configure it on the component.


This should be an option you can turn on|off.","davsclaus:1560473811:2019-06-14T08:56:51.024+0000:1560473811:2019-06-14T08:56:51.024+0000:The problem is to do a full classpath scanning where you don't know the package names, as this can be in any of the packages. So we need to find all the JARs on the classpath, and look inside them, to gather their package names. 

All of this comes with a performance penalty.
davsclaus:1560476550:2019-06-14T09:42:30.203+0000:1560476550:2019-06-14T09:42:30.203+0000:Okay got a prototype working, but the classpath scanning is slow, takes 5 sec on an unit test with 600+ packages due to all the unit test classes and whatnot. 

We may want to add some maven plugin that can attempt to do this at build-time, and generate a META-INF/org/apache/camel/service/autowire-by-classpath file that pre-lists the possible autowires by classpath
davsclaus:1560591785:2019-06-15T17:43:05.886+0000:1560591785:2019-06-15T17:43:05.886+0000:Okay got a hacky maven plugin prototype working that can pre-scan your project and to output a meta file that camel can use on startup. However it shows that if you eg add camel-jms and artemis-jms-client you have many ConnectionFactory implementations
{code}
[INFO] Autowiring Camel component: jms
[INFO] Found 12 for autowire: jms.connectionFactory -> [class org.apache.activemq.artemis.jms.client.ActiveMQJMSConnectionFactory, class org.apache.activemq.artemis.jms.client.ActiveMQXAQueueConnectionFactory, class org.apache.activemq.artemis.jms.client.ActiveMQQueueConnectionFactory, class org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory, class org.apache.activemq.artemis.jms.client.ActiveMQXATopicConnectionFactory, class org.springframework.jms.connection.CachingConnectionFactory, class org.springframework.jms.connection.SingleConnectionFactory, class org.apache.activemq.artemis.jms.client.ActiveMQXAConnectionFactory, class org.springframework.jms.connection.DelegatingConnectionFactory, class org.springframework.jms.connection.UserCredentialsConnectionFactoryAdapter, class org.springframework.jms.connection.TransactionAwareConnectionFactoryProxy, class org.apache.activemq.artemis.jms.client.ActiveMQTopicConnectionFactory]
{code}
So we should make a priority list and have some way of configuring this, so for JMS we can then select an appropiate default among knowns such as Artemis, ActiveMQ etc.
davsclaus:1560684158:2019-06-16T19:22:38.813+0000:1560684158:2019-06-16T19:22:38.813+0000:The org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory sadly dont have setter/getter for brokerUrl which is really bad, so its not easy to configure it via properties. 
davsclaus:1560684288:2019-06-16T19:24:48.152+0000:1560728376:2019-06-17T07:39:36.204+0000:So we can add support for
- constructor parameters *LATER*
- private setters *DONE*

So you can say that the method is private via #private# or something like that

...connectionFactory.#private#brokerUrl=localhost:61616

Okay we now support private methods by default (but you can turn it off)

...connectionFactory.brokerUrl=localhost:61616


davsclaus:1560685711:2019-06-16T19:48:31.729+0000:1560717328:2019-06-17T04:35:28.391+0000:Also we should add option to main to be case insensitive when setting these names, so you can say brokerUrl, brokerURL brokerurl etc and they would all work *WONT FIX* instead we report more detailed if there was no setter/getter with that exact name, so the user can fix it"
0,CAMEL-13646,Improvement,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Claus Ibsen,0,1,2019-06-14 07:22:05+00:00,2020-12-23 08:17:10+00:00,"Related to this user group issue
http://camel.465427.n5.nabble.com/Intermittent-RejectedExecutionException-tp5836376.html


We can improve camel-jms with toD to not have to create new endpoints for each dynamic destination, but instead use DynamicAware which we do for the http components.",davsclaus:1565130485:2019-08-07T06:28:05.212+0000:1565130485:2019-08-07T06:28:05.212+0000:Was a bit more complicated to do properly
0,CAMEL-13645,Test,Major,3.0.0-M3,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-13 15:30:42+00:00,2019-06-14 07:35:32+00:00,"Just noticed some NPEs while doing test of camel-spring


019-06-13 15:02:08,902 WARN  EventHelper - Error notifying event ID-davsclaus-pro-local-1560430811107-235-1 exchange created: Exchange[ID-davsclaus-pro-local-1560430811107-235-1]. This exception will be ignored.  
java.lang.NullPointerException: null
	at org.apache.camel.builder.NotifyBuilder$3.onExchange(NotifyBuilder.java:194) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.apache.camel.builder.NotifyBuilder$EventPredicateSupport.onExchangeCreated(NotifyBuilder.java:1293) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.apache.camel.builder.NotifyBuilder$CompoundEventPredicate.onExchangeCreated(NotifyBuilder.java:1381) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.onExchangeCreated(NotifyBuilder.java:1154) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.apache.camel.builder.NotifyBuilder$ExchangeNotifier.notify(NotifyBuilder.java:1135) ~[camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.apache.camel.support.EventHelper.doNotifyEvent(EventHelper.java:288) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.apache.camel.support.EventHelper.doNotify(EventHelper.java:27",
0,CAMEL-13644,Improvement,Major,None,"3.0.0.M4, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0, 2.25.0",Freeman Yue Fang,Claus Ibsen,0,1,2019-06-13 12:43:54+00:00,2019-06-13 16:31:09+00:00,"public CxfConsumer(final CxfEndpoint endpoint, Processor processor) throws Exception 

{
        super(endpoint, processor);
        cxfEndpoint = endpoint;
        server = createServer();
    }


The create server should just be removed as its done in doStart where we create resources etc.",
0,CAMEL-13613,Bug,Minor,2.24.0,,"
None
",Resolved,Incomplete,None,Unassigned,Vyacheslav Boyko,0,2,2019-06-05 12:20:28+00:00,2019-08-07 06:22:17+00:00,"Seems wrapping exceptions is NOT need in this case because of Spring does not catch custom exceptions and does not log them up.


My log settings are:


log4j.rootLogger=DEBUG, stdout


log4j.logger.org.apache.camel=DEBUG, etofile
 log4j.logger.org.apache.camel.spring=DEBUG, etofile
 log4j.logger.org.springframework.context.support=WARN, etofile


log4j.logger.org.springframework=ERROR
log4j.logger.org.springframework.web=ERROR
log4j.logger.org.springframework.security=ERROR","davsclaus:1559767110:2019-06-06T04:38:30.724+0000:1559767110:2019-06-06T04:38:30.724+0000:Do you have a sample project or something that can show and reproduce what you think is wrong. We need this to investigate, as there are a lot of Camel users with Spring and errors during startup are surely logged or shown for them.

And next time ask on the user forum for help first.
davsclaus:1564008438:2019-07-25T06:47:18.665+0000:1564008438:2019-07-25T06:47:18.665+0000:Any update on this?"
0,CAMEL-13612,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-05 06:20:10+00:00,2019-06-05 09:41:41+00:00,"You may end up with using rest-dsl and rest component together, and have a rest endpoint that is shared among them. Then the endpoint will have a componentName option set to the consumer, such as jetty. And then when the same endpoint is used for creating the rest producer (eg to rest) then it would fail. We should separate these two options.",
0,CAMEL-13611,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"4.0-RC2, 4.0.0",Unassigned,Choucri Fahed,0,4,2019-06-04 17:02:13+00:00,2023-07-17 11:54:15+00:00,Support the latest version of Web3j.,"acosentino:1559692073:2019-06-05T07:47:53.410+0000:1559692073:2019-06-05T07:47:53.410+0000:[~bibryam], can you please have a look to the component?  Thanks.
Choucri Fahed:1559692526:2019-06-05T07:55:26.573+0000:1559692526:2019-06-05T07:55:26.573+0000:Actually, I am working on it and would like to provide a patch. [~bibryam] it seems you are the main developer of that module, do you have time to discuss this issue? We have been using camel-web3j for a while and there are other features we developed internally that we would like to add. What's the best way to get in touch?
acosentino:1559692791:2019-06-05T07:59:51.282+0000:1559692791:2019-06-05T07:59:51.282+0000:That would be great [~Choucri Fahed], this is a big change in the component so please raise your PR against master, on 2.x we can check if it's feasible to pass to this version, but only for 2.25
Choucri Fahed:1559695401:2019-06-05T08:43:21.150+0000:1559695401:2019-06-05T08:43:21.150+0000:Sorry I have never contributed to Camel before, do you confirm that '2.x' is the name of the development branch for the future 2.25 and master for 3.0.0? We internally use Camel 2.23, so I'll probably submit a patch first on 2.x then once merged, port it to 3.0.0, unless you want to proceed otherwise.
davsclaus:1559695636:2019-06-05T08:47:16.081+0000:1559695636:2019-06-05T08:47:16.081+0000:Its this branch
https://github.com/apache/camel/tree/camel-2.x

We would not accept a 2.x PR only. We need master always and 2.x when its applicable.
acosentino:1559695640:2019-06-05T08:47:20.577+0000:1559695640:2019-06-05T08:47:20.577+0000:yes, it's 2.x
Choucri Fahed:1559698229:2019-06-05T09:30:29.964+0000:1559698229:2019-06-05T09:30:29.964+0000:Thanks for the info, I will submit 2 PRs simultaneously as requested.
bibryam:1559980014:2019-06-08T15:46:54.239+0000:1559980014:2019-06-08T15:46:54.239+0000:[~Choucri Fahed] I created the component but it is now maintained by the community. Feel free to create a PR and update and improve the component. If needed, start a discussion thread on the dev list.
davsclaus:1662089483:2022-09-02T11:31:23.061+0000:1662089483:2022-09-02T11:31:23.061+0000:we are on 3.x currentl.y"
0,CAMEL-13610,New Feature,Major,2.22.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Philipp Bachmann,0,2,2019-06-04 12:31:05+00:00,2019-06-04 15:11:11+00:00,"We use Apache Camel, in particular its IMAP and SMTP endpoins. When, for whatever reason, the endpoints fail, e.g. the SMTP server is down, then it was nice if we were able to connect to an alternative endpoint. As I have researched so far, Apache Camel does not allow for a dynamic way of specifying the URIs e.g. in terms of a user supplied callback Strategy. The only way I have figured out are the load balancing features, but then you still have to know the URIs in advance.


So may I suggest to add overloads of the from() and to() methods that accept expressions, which in my opinion would gain the flexibility desired?","davsclaus:1559632271:2019-06-04T15:11:11.212+0000:1559632271:2019-06-04T15:11:11.212+0000:Hi

This is not on our roadmap and Camel routes in the DSL are using endpoints via string or as an existing endpoint instance. For the latter you can build your own expression -> endpoint logic or whatever you do to refer to the endpoint to use.

Also mind that a Camel Expression is bound to an Exchange, eg during routing messages, and not for dynamic configuration during startup etc."
0,CAMEL-13609,Task,Minor,3.0.0-M3,3.0.0.M4,"
None
",Resolved,Fixed,3.0.0.M4,Alex Dettinger,Alex Dettinger,0,1,2019-06-04 07:23:22+00:00,2019-06-05 08:44:27+00:00,No Desc,aldettinger:1559604792:2019-06-04T07:33:12.520+0000:1559604792:2019-06-04T07:33:12.520+0000:Should be shipped with camel-3.0.0-M4
0,CAMEL-13608,New Feature,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-06-03 19:10:54+00:00,2019-06-04 08:18:58+00:00,"So you can for example do an unit test where you want to only test a specific route and then filter out everyone else. Currently you can filter on route builder and xml files level, but not on route ids.","davsclaus:1559597113:2019-06-04T05:25:13.051+0000:1559597113:2019-06-04T05:25:13.051+0000:You can now configure both an include and exclude patterns, that filters by route id, and from route input uri, such as

{code}
@SpringBootTest(classes = RouteFilterExcludePatternTest.class,
    properties = {""camel.springboot.route-filter-exclude-pattern=foo*,drink*""})

@SpringBootTest(classes = RouteFilterIncludePatternTest.class,
    properties = {""camel.springboot.route-filter-include-pattern=bar*""})
{code}

Also you can filter out all routes that start from JMS via

{code}
@SpringBootTest(classes = RouteFilterExcludePatternTest.class,
    properties = {""camel.springboot.route-filter-exclude-pattern=jms:*""})
{code}
davsclaus:1559607538:2019-06-04T08:18:58.083+0000:1559607538:2019-06-04T08:18:58.083+0000:You can also do this with camel-test"
0,CAMEL-13607,Task,Major,3.0.0-M3,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Freeman Yue Fang,Claus Ibsen,0,2,2019-06-03 15:39:46+00:00,2019-06-03 15:52:13+00:00,"For some weird issues then camel-mail-starter JAR does not include javax mail JAR and then it cannot compile, on my local system


[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.0:compile (default-compile) on project camel-mail-starter: Compilation failure: Compilation failure:","davsclaus:1559547864:2019-06-03T15:44:24.343+0000:1559547864:2019-06-03T15:44:24.343+0000:Thanks freeman for fixing this
ffang:1559548333:2019-06-03T15:52:13.609+0000:1559548333:2019-06-03T15:52:13.609+0000:sorry I broke it in the first place :P"
0,CAMEL-13606,Bug,Major,2.21.5,"2.24.1, 3.0.0.M4, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.1, 3.0.0.M4, 3.0.0, 2.25.0",Andrea Cosentino,Paul Richardson,0,2,2019-06-03 12:20:26+00:00,2019-06-06 07:19:29+00:00,"When polling with the Olingo*Consumer, the result is intercepted and filtered (if filtering is switched on). If a key predicate is used as well then, on subsequent polling iterations, the result is filtered to return null. When the result is then intercepted and passed to the Olingo*Index for indexing, the latter fails to handle the null value and causes an NullPointerException. This exception is reported/logged and polling continues with subsequent iterations (also blowing up with NPEs). Need to fix the Index classes so they handle null values correctly.","phantomjinx:1559535669:2019-06-03T12:21:09.675+0000:1559535669:2019-06-03T12:21:09.675+0000:Working on PR now.
davsclaus:1559558283:2019-06-03T18:38:03.271+0000:1559558283:2019-06-03T18:38:03.271+0000:Thanks for reporting and looking forward to the PR. And will you fix both olingo2 and olingo4
phantomjinx:1559614416:2019-06-04T10:13:36.332+0000:1559614416:2019-06-04T10:13:36.332+0000:PR for both olingo2 & 4 -> https://github.com/apache/camel/pull/2959"
0,CAMEL-13605,Improvement,Minor,None,"3.0.0.M4, 2.25.0","
None
",Resolved,Fixed,"3.0.0.M4, 2.25.0",Willem Jiang,Willem Jiang,0,1,2019-06-03 11:56:05+00:00,2019-06-04 06:35:16+00:00,"As we may run the camel-telegram application behind a proxy, it could be handy if camel-telegram support setting http proxy.",njiang:1559601316:2019-06-04T06:35:16.308+0000:1559601316:2019-06-04T06:35:16.308+0000:Merged the patch into master and camel-2.x branch.
0,CAMEL-13604,Task,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-06-03 09:13:21+00:00,2019-06-03 09:57:20+00:00,No Desc,
0,CAMEL-13603,Task,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-06-03 09:12:53+00:00,2019-06-03 09:57:31+00:00,No Desc,
0,CAMEL-13602,Bug,Minor,None,None,"
None
",Closed,Invalid,None,Unassigned,Kalyani,0,1,2019-06-02 15:27:50+00:00,2019-06-03 02:55:57+00:00,This is for testing,acosentino:1559460946:2019-06-02T15:35:46.934+0000:1559460946:2019-06-02T15:35:46.934+0000:This is not for testing
0,CAMEL-13601,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Andrea Cosentino,Claudio Miranda,0,1,2019-05-30 20:06:34+00:00,2019-06-03 07:14:14+00:00,"Fix client.close only when client != null.
 Add some logging messages.
 Fix NewCommentsConsumer logic.",
0,CAMEL-13600,Bug,Major,2.24.0,None,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Mikhail Kornienko,0,2,2019-05-30 16:00:18+00:00,2019-08-01 05:55:52+00:00,"When using the same code, version 2.21.1 works correctly, but when using version 2.24.0, a memory leak is detected.
Screen shots in attache.




<routes xmlns=""http://camel.apache.org/schema/spring"">

	<route id=""main_route"" startupOrder=""100"">

	<from uri=""direct:router""/>

	<filter>
		<simple>${header.FROM_TOPIC} == 'TOPIC-1'</simple>
		<process ref=""srv-SomeAttributeExtractor""/>
		<filter>
			<simple>${header.type1} in '1,2,3' and ${header.type2} == 4</simple>
			<setHeader headerName=""TO_TOPIC"">
			<constant>'TOPIC-2'</constant>
			</setHeader>
			<to uri=""log:service-a""/>
			<stop/>
		</filter>
		<stop/>
	</filter>
	<stop/>

	</route>

</routes>","davsclaus:1559212653:2019-05-30T18:37:33.294+0000:1559212653:2019-05-30T18:37:33.294+0000:Can you provide a sample project that reproduces this, such as post a project on github or attach a .zip here with the source code. Otherwise we cannot really help you.
davsclaus:1563450191:2019-07-18T19:43:11.807+0000:1563450191:2019-07-18T19:43:11.807+0000:Any update on this?"
0,CAMEL-13599,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-30 07:43:35+00:00,2019-05-30 08:22:00+00:00,"Asked on user forum
http://camel.465427.n5.nabble.com/Using-dynamic-expression-as-claimCheck-key-tp5835356.html",
0,CAMEL-13598,New Feature,Major,"2.21.5, 2.22.4",3.0.0.RC1,"
None
",Resolved,Fixed,3.0.0.RC1,Andrea Cosentino,Paul Richardson,0,1,2019-05-29 17:03:34+00:00,2019-08-23 08:52:23+00:00,"The Tripin Reference server supports ETags on its Airlines resource. Consequently, if an update or delete operation is performed then the following must occur:



Client calls a GET request & fetches the content of the ETag header;
Client calls a PATCH/DELETE request complete with an If-None-Match header that has a value of the previously queried ETag.



At the moment, attempts to use the camel-olingo4 implementation fail with an http  428 code.


Please see following for more information:



https://www.odata.org/getting-started/basic-tutorial/#etag
https://www.odata.org/documentation/odata-version-2-0/operations/
https://olingo.apache.org/doc/odata4/overview.html#definition-of-the-web-infrastructure
https://www.logicbig.com/quick-info/web/etag-header.html",phantomjinx:1566363561:2019-08-21T12:59:21.054+0000:1566363561:2019-08-21T12:59:21.054+0000:[PR|https://github.com/apache/camel/pull/3118] ready for review.
0,CAMEL-13597,Improvement,Minor,2.17.0,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,qu4ntic,0,3,2019-05-29 13:46:48+00:00,2019-05-30 19:49:29+00:00,"Hi, 


Neither




.split().tokenize(""\r?\n"", true, 2, true)



nor 




.split().tokenize(""\r\n|\n"", true, 2, true)



work.


 


The latter expression insert a ""|"" instead of correctly split rows on \r\n or \n.","acosentino:1559108902:2019-05-29T13:48:22.566+0000:1559108902:2019-05-29T13:48:22.566+0000:2.17 is really old. Do you see the same behavior on 2.24.x or 2.23.x?
justqu4ntic:1559112472:2019-05-29T14:47:52.050+0000:1559112472:2019-05-29T14:47:52.050+0000:I know that this version is old, however I'm stuck with this version because it is embedded in a Fuse environment with a full support licence that works only on the installed versions.

I will test with a newer version, thanks.
justqu4ntic:1559113984:2019-05-29T15:13:04.320+0000:1559114024:2019-05-29T15:13:44.575+0000:{{I tested with version {color:#ff0000}2.23.2{color} and unfortunately this still doesn't work.}}
{code:java}
.split().tokenize(""\r\n|\n"", true, 2, true)
 .streaming()
 // Add the csv header on each chunk
 .process(exchange -> {
 String headerString = exchange.getIn().getHeader(CSV_HEADER, String.class);
 exchange.getIn().setBody(headerString + ""\n"" + exchange.getIn().getBody());
 }){code}
should return chunks of 2 rows along with the csv header, however it returns the two rows with an additional row in-between having a ""|"" :

Should be :
{code:java}
2019-05-29 17:01:41 INFO d66205be-9ea5-4d49-a341-cb9235cb0d8a | Input message body : 
header
row1
row2{code}
but I get :
{code:java}
2019-05-29 17:01:41 INFO d66205be-9ea5-4d49-a341-cb9235cb0d8a | Input message body : 
header
row1
|
row2{code}
 
davsclaus:1559214439:2019-05-30T19:07:19.829+0000:1559214439:2019-05-30T19:07:19.829+0000:That is because the grouping includes the token in between each splitted item, so that is why you see that | character
davsclaus:1559215339:2019-05-30T19:22:19.345+0000:1559215339:2019-05-30T19:22:19.345+0000:This is not a bug as it's designed that way. However it would be an improvement to allow to configure which delimiter you want to use when grouping."
0,CAMEL-13596,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-29 09:38:24+00:00,2019-05-29 10:29:44+00:00,No Desc,
0,CAMEL-13595,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-29 09:37:49+00:00,2019-05-29 10:29:50+00:00,No Desc,
0,CAMEL-13594,Improvement,Major,3.0.0-M3,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-28 15:16:35+00:00,2019-06-05 04:31:25+00:00,We can optimize this to only have the newer TypeConverterLoader file which has all the type converters that are optimized. And then in tooling/apt avoid generate both TypeConverter and TypeConverterLoaded meta files.,
0,CAMEL-13593,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2019-05-28 14:46:08+00:00,2019-05-28 16:42:42+00:00,"In javax.mail API(1.6), it(javax.mail.Session) will use authenticator's classloader to load two default files




META-INF/javamail.default.address.map
META-INF/javamail.default.providers




Since camel-mail provider a DefaultAuthenticator, which means javax mail api will try to use camel-mail bundle classloader in OSGi to load above default files. Those files aren't available for camel-mail bundle classloader, so we see warning message as




 2019-04-25 12:42:09,806 | WARN | 23 - scheduler://foo | j.mail | 21 - com.sun.mail.javax.mail - 1.6.1 | expected resource not found: /META-INF/javamail.default.providers
2019-04-25 12:42:09,807 | WARN | 23 - scheduler://foo | j.mail | 21 - com.sun.mail.javax.mail - 1.6.1| expected resource not found: /META-INF/javamail.default.address.map




This warning message isn't harmful but annoying. The javax.mail.Session will always add default stuff by code if can't find the default configuration file




       if (providers.size() == 0) {
            logger.config(""failed to load any providers, using defaults"");
            // failed to load any providers, initialize with our defaults
            addProvider(new Provider(Provider.Type.STORE,
                        ""imap"", ""com.sun.mail.imap.IMAPStore"",
                        ""Oracle"", Version.version));
            addProvider(new Provider(Provider.Type.STORE,
                        ""imaps"", ""com.sun.mail.imap.IMAPSSLStore"",
                        ""Oracle"", Version.version));
            addProvider(new Provider(Provider.Type.STORE,
                        ""pop3"", ""com.sun.mail.pop3.POP3Store"",
                        ""Oracle"", Version.version));
            addProvider(new Provider(Provider.Type.STORE,
                        ""pop3s"", ""com.sun.mail.pop3.POP3SSLStore"",
                        ""Oracle"", Version.version));
            addProvider(new Provider(Provider.Type.TRANSPORT,
                        ""smtp"", ""com.sun.mail.smtp.SMTPTransport"",
                        ""Oracle"", Version.version));
            addProvider(new Provider(Provider.Type.TRANSPORT,
                        ""smtps"", ""com.sun.mail.smtp.SMTPSSLTransport"",
                        ""Oracle"", Version.version));
        }
       if (addressMap.isEmpty()) {
            logger.config(""failed to load address map, using defaults"");
            addressMap.put(""rfc822"", ""smtp"");
        }




But it's better we can avoid such WARN message when using camel-mail in OSGi",
0,CAMEL-13592,Bug,Minor,2.20.1,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Kosta Kostelnik,0,3,2019-05-28 14:00:55+00:00,2019-07-07 14:53:04+00:00,"When constructing Camel SQL component with the following URI:




sql:INSERT INTO TABLE ....?batch=true&...&batch=true



Resulting camel endpoint ends up with batch == false. The reason for this is found in 




private static void addParameter // this is in UriSupport.java



This method adds values into a list and then setting the parameter does not work correctly. I believe that Camel should be more linient for such ""errors"" (which can occur if you construct URI programatically). 


I suggest parameter value detection. If




existing.equals(value) // to use actual names of variables from the code



then just ignore. DO NOT do the following (list construction; current behavior):




if (existing instanceof List) {
    list = CastUtils.cast((List<?>) existing);
} else {
    // create a new list to hold the multiple values
    list = new ArrayList<String>();
    String s = existing != null ? existing.toString() : null;
    if (s != null) {
        list.add(s);
    }
}
list.add(value);




In the end the URI shown in the beginning will result in Component with batch equal to false. Which is really hard to determine why and what happened. 


 


I believe this is a generic problem tho","davsclaus:1559024190:2019-05-28T14:16:30.000+0000:1559024190:2019-05-28T14:16:30.000+0000:You are welcome to provide a PR with your code suggestions for an improvement
davsclaus:1559024436:2019-05-28T14:20:36.837+0000:1559024436:2019-05-28T14:20:36.837+0000:Also test with newer version such as 2.24.0 as 2.20.x is somewhat old.
sumeetp1991:1559446777:2019-06-02T11:39:37.348+0000:1559446777:2019-06-02T11:39:37.348+0000:Hi [~davsclaus],

This is still an issue in new versions.
Can you please review the PR - [https://github.com/apache/camel/pull/2956]?

 

Thanks,

Sumeet
Kosta K:1562463480:2019-07-07T09:38:00.116+0000:1562463480:2019-07-07T09:38:00.116+0000:Hi

I am currently ooo as we have public holidays and on vacation next week.
I will return on Monday the 15th of July.

I wont be able to read emails as I will be in the middle of nowhere

While you miss me:
--> FOR OBR/Composer
- Richard Hlavica
--> FOR Kinaxis
- Tomas Navratil / Jan Klimcak
--> FOR Apache Camel / UE
- Tomas Navratil, Pavel Spatny

===> For ANYTHING and EVERYTHING Middleware:
--> for requests/issues/anything middleware: ~IT Middleware Support <ITMiddlewareSupport@onsemi.com> - these will be read and delegated and usually taken care of within the next business day

--> For critical issues requiring immediate attention (production issues) please contact our duty pager (available 24/7):
~IT Middleware Critical <IT-Middleware-Critical@onsemi.com>

For escalation contact:
Daniel Bartek --> Daniel.Bartek@Onsemi.com

davsclaus:1562482384:2019-07-07T14:53:04.625+0000:1562482384:2019-07-07T14:53:04.625+0000:Fixed by CAMEL-13732"
0,CAMEL-13591,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-28 10:59:49+00:00,2019-05-28 11:27:50+00:00,No Desc,
0,CAMEL-13590,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.12.0,Andrea Cosentino,Greg A.,0,2,2019-05-28 09:35:37+00:00,2021-08-24 16:23:04+00:00,"JSON is very often used as data exchange. JSON patch can transform JSON to an other JSON with a JSON patch file.


JSON patch is specified in RFC 6902 from the IETF.


I propose to setup and create a new component using java-json-tools 


this lib implements RFC 6902 (JSON Patch) and RFC 7386 (JSON Merge Patch)


camel-jolt component could be very useful sample to setup this new component",davsclaus:1572408460:2019-10-30T12:07:40.491+0000:1572408460:2019-10-30T12:07:40.491+0000:Greg are you working on this?
0,CAMEL-13589,Sub-task,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,2,2019-05-28 08:15:14+00:00,2019-07-22 19:49:27+00:00,"If we run {{

{yarn run check}

}} after the website is built we have a number of missing pages or misdirected links reported by the link checker like:




page not found from index.html to docs/getting-started
page not found from index.html to community/sources
page not found from community/books/index.html to community/mailing-list




And a number anchors missing, like:




anchor not found from manual/latest/xml-reference.html to manual/..#
anchor not found from manual/latest/aggregate-eip.html to manual/latest/aggregate-eip.html#sql-component
anchor not found from manual/latest/annotation-based-expression-language.html to manual/latest/annotation-based-expression-language.html#bean-language




To fix this we need to create either placeholder pages, or fix links to pages we already have but haven't updated the links to. Vast number of these is in the Asciidoc files in the camel repository and those need to be revised.","zregvart:1563796167:2019-07-22T19:49:27.747+0000:1563796167:2019-07-22T19:49:27.747+0000:Thanks to [~nayanagamuhandiram] for fixing most of the links.

Now we have a xref checker as a part of the build and the build will fail if any of the xref links in the camel git repository can't be resolved."
0,CAMEL-13588,Sub-task,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,4,2019-05-28 08:00:23+00:00,2019-07-26 08:29:40+00:00,"When building the website a number of errors/warnings are issued from Antora like:




08:44:06  asciidoctor: WARNING: skipping reference to missing attribute: basedir
08:44:06  asciidoctor: WARNING: skipping reference to missing attribute: provisionedthroughputdescription




Or:




08:44:16  asciidoctor: ERROR: mock-component.adoc: line 269: include target not found: ../../test/java/org/apache/camel/processor/interceptor/AdviceWithMockEndpointsTest.java
08:44:16  asciidoctor: ERROR: mock-component.adoc: line 278: include target not found: ../../test/java/org/apache/camel/processor/interceptor/AdviceWithMockEndpointsTest.java




As seen in the website build #12.


We need to go through the .adoc files in the camel git repository and try to fix as much of those issues as possible. Ideally there shouldn't be any issues reported and we can implement a gate in the website build so that it fails if there are any issues reported so we don't introduce new issues with changes to the documentation.","davsclaus:1562185822:2019-07-04T04:30:22.553+0000:1562185822:2019-07-04T04:30:22.553+0000:The latest commit likely broke the json metadata

https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/org.apache.camel.catalog/CamelCatalogJsonSchemaTest/testValidateJsonComponent/

So we should unescape this when we generate json or what's the problem is
davsclaus:1562482348:2019-07-07T14:52:28.530+0000:1562482348:2019-07-07T14:52:28.530+0000:Okay I fixed the last issue by enscaping the http/https links in the component json metadata in the apt compiler plugin, now the camel-catalog test is okay.
zregvart:1564100955:2019-07-26T08:29:15.210+0000:1564100955:2019-07-26T08:29:15.210+0000:As a part of the build in the Camel git repository we now escape the documentation in Javadoc when generating the Asciidoc files. Currently in the build we have no asciidoctor warnings.
zregvart:1564100980:2019-07-26T08:29:40.877+0000:1564100980:2019-07-26T08:29:40.877+0000:Thanks to [~nayanagamuhandiram] for doing a lot of work in this!"
0,CAMEL-13587,Bug,Major,2.22.1,"3.0.0-M3, 2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0-M3, 2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0",Claus Ibsen,Barbara De Vido,1,2,2019-05-27 15:07:08+00:00,2019-05-28 13:09:14+00:00,"Hi,


I made a camel-route that checks about inflight messages on other server through JMX connection.
It was working fine in 2.17.x but now we upgrade to 2.22.1 and I always obtain a result of 0 millisecond for the elapsed field.


I use the browse() operation of JMX bean. You can use jconsole to run a simple test.





This is a major bug for us, since we use the code to monitoring production routes. Is there any workaround like get the echange historymessage from the exchage id?


Thank you","davsclaus:1558941268:2019-05-27T15:14:28.231+0000:1558941268:2019-05-27T15:14:28.231+0000:You need to turn on message history
context.setMessageHistory(true);


jkike:1558997628:2019-05-28T06:53:48.937+0000:1558997628:2019-05-28T06:53:48.937+0000:hi claus, 
it is set to true. 

the elapsed is not computed on current node since no one invoke the method nodeProcessingDone. 

Please consider to reopen the issue. 

jkike:1559012581:2019-05-28T11:03:01.183+0000:1559012581:2019-05-28T11:03:01.183+0000:Hi,

I did this as workaround.

Implemented a custom infligth repository, that has the same logic of the DefaultInflightRepository and then in the new inner class (the original cannot be extended/overriden) InflightExchangeEntry I modified the code for getElapsed() as follow


{code:java}
 @Override
        @SuppressWarnings(""unchecked"")
        public long getElapsed() {
            LinkedList<MessageHistory> list = exchange.getProperty(Exchange.MESSAGE_HISTORY, LinkedList.class);
            if (list == null || list.isEmpty()) {
                return 0;
            }

            // get latest entry
            MessageHistory history = list.getLast();
            if (history != null) {
                return System.currentTimeMillis() - history.getTime();  // MY FIX!!!!!
            } else {
                return 0;
            }
        }
{code}


 
davsclaus:1559016433:2019-05-28T12:07:13.242+0000:1559016433:2019-05-28T12:07:13.242+0000:Thanks for the suggested fix. I updated it a little bit in this commit
https://github.com/apache/camel/commit/02b2f265a57b757155757fc330c1d7108574bcfa

I wonder if you could do a PR for the camel-2.x branch based on this so we can backport the fix. This needs manual work as master and camel-2.x has drifted part.
jkike:1559017971:2019-05-28T12:32:51.998+0000:1559017971:2019-05-28T12:32:51.998+0000:I did the PR.
Hope I did it right.

Thank you
Barbara
davsclaus:1559020154:2019-05-28T13:09:14.692+0000:1559020154:2019-05-28T13:09:14.692+0000:Thanks that was correct PR"
0,CAMEL-13586,Bug,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Andrea Cosentino,0,4,2019-05-27 14:05:05+00:00,2019-08-21 07:44:51+00:00,"This can be noticed for example in 


http://camel.apache.org/staging/components/latest/ahc-ws-component.html#ahc-component","nayanagamuhandiram:1566293714:2019-08-20T17:35:14.530+0000:1566293714:2019-08-20T17:35:14.530+0000:Hi is this bug still available? I couldn`t spot it in the above link or in [https://camel.apache.org/components/latest/ahc-ws-component.html]
bedla:1566309589:2019-08-20T21:59:49.805+0000:1566309589:2019-08-20T21:59:49.805+0000:I think this was fixed with CAMEL-13839
zregvart:1566344691:2019-08-21T07:44:51.836+0000:1566344691:2019-08-21T07:44:51.836+0000:Yeah we fixed this."
0,CAMEL-13585,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Claus Ibsen,0,2,2019-05-27 12:37:09+00:00,2019-05-28 14:26:42+00:00,"We should use fixed mbean name so its easy to lookup and invoke the mbean, instead of based on camel id name. See screenshot","davsclaus:1559024795:2019-05-28T14:26:35.903+0000:1559024795:2019-05-28T14:26:35.903+0000:Ah okay for app servers like karaf and jee servers then we can have many deployments in the same JVM and they need to be separated by deployment name, camel id, like the others do. So lets keep it as-is."
0,CAMEL-13584,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-27 11:12:02+00:00,2019-05-27 11:13:18+00:00,"So we can eager init as much as possible when running Camel Main, by calling main.init() method. This can be used to warmup Camel.","davsclaus:1558926792:2019-05-27T11:13:12.916+0000:1558926792:2019-05-27T11:13:12.916+0000:The init does not pre-start routes, which is what start would do. As this can lead to resources doing live remote connections and whatnot. But it does all of the configuration and wirings."
0,CAMEL-13583,Improvement,Minor,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-27 08:39:44+00:00,2019-05-27 09:54:23+00:00,"There are use-cases where we for example loads the type converter loaded that creates an instance of the class, but we use the injector which does bean post processing by scanning methods for injecting fields / and other autowriting via those Camel annotations. But these type converters are basic and dont need this. There can be some other factory classes too, so lets have a basic injector method so you can choose.",davsclaus:1558918644:2019-05-27T08:57:24.493+0000:1558918644:2019-05-27T08:57:24.493+0000:We should then use the basic injector internally in Camel which can make startup faster and also reduce the overhead of doing introspection and whatnot on a number of classes where its not needed.
0,CAMEL-13582,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-27 07:02:52+00:00,2019-05-27 10:52:38+00:00,"In such a configuration class




public class MyConfiguration {

    @BindToRegistry
    public ClientConfiguration myClientConfig() {
        ClientConfiguration cc = new ClientConfiguration();
        cc.setMaxConnections(5);
        return cc;
    }

    @BindToRegistry
    public MyBean myBean(@PropertyInject(""hi"") String hi, @PropertyInject(""bye"") String bye) {
        // this will create an instance of this bean with the name of the method (eg myBean)
        return new MyBean(hi, bye);
    }

    @BindToRegistry
    public AmazonS3 myAmazon(@BeanInject(""myClientConfig"") ClientConfiguration config) {
        return AmazonS3Client.builder().withRegion(""US-EAST-1"").withClientConfiguration(config).build();
    }

    public void configure() {
        // this method is optional and can be removed if no additional configuration is needed.
    }

}




We could detect that the myAmazon method has a parameter of type ClientConfiguration which we can attempt to lookup as singleton bean. Then you can do




    @BindToRegistry
    public AmazonS3 myAmazon(ClientConfiguration config)",
0,CAMEL-13581,Task,Minor,3.0.0-M3,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-05-27 04:48:16+00:00,2019-05-27 16:21:09+00:00,"Noticed these during testing CiA2 book


2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@659f226a to: StaticMethodTypeConverter: public static org.restlet.data.Method org.apache.camel.component.restlet.converter.RestletConverter.toMethod(java.lang.String)
2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@2e463f4 to: StaticMethodTypeConverter: public static org.restlet.data.Method[] org.apache.camel.component.restlet.converter.RestletConverter.toMethods(java.lang.String)
2019-05-27 06:47:06,045 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@32ec9c90 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType[] org.apache.camel.component.restlet.converter.RestletConverter.toMediaTypes(java.lang.String)
2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36ab3814 to: StaticMethodTypeConverter: public static org.restlet.data.MediaType org.apache.camel.component.restlet.converter.RestletConverter.toMediaType(java.lang.String)
2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@467233e4 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(org.apache.camel.http.common.HttpMessage,org.apache.camel.Exchange) throws java.lang.Exception
2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@427a12b6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.http.common.HttpConverter.toInputStream(javax.servlet.http.HttpServletRequest,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6025d790 to: StaticMethodTypeConverter: public static java.io.BufferedReader org.apache.camel.http.common.HttpConverter.toReader(org.apache.camel.http.common.HttpMessage) throws java.io.IOException
2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@af7e376 to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletResponse org.apache.camel.http.common.HttpConverter.toServletResponse(org.apache.camel.Message)
2019-05-27 06:47:06,046 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@5dcd0cdf to: StaticMethodTypeConverter: public static javax.servlet.http.HttpServletRequest org.apache.camel.http.common.HttpConverter.toServletRequest(org.apache.camel.Message)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4fb04a72 to: StaticMethodTypeConverter: public static javax.servlet.ServletInputStream org.apache.camel.http.common.HttpConverter.toServletInputStream(org.apache.camel.http.common.HttpMessage) throws java.io.IOException
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1a07bf6 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.spring.converter.ResourceConverter.convertToInputStream(org.springframework.core.io.Resource) throws java.io.IOException
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@34d713a2 to: StaticMethodTypeConverter: public static java.lang.Object[] org.apache.camel.component.cxf.converter.CxfConverter.toArray(java.lang.Object)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36aab105 to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.toInputStream(javax.ws.rs.core.Response,org.apache.camel.Exchange)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@889a8a8 to: StaticMethodTypeConverter: public static javax.xml.namespace.QName org.apache.camel.component.cxf.converter.CxfConverter.toQName(java.lang.String)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f29353f to: StaticMethodTypeConverter: public static org.apache.cxf.message.MessageContentsList org.apache.camel.component.cxf.converter.CxfConverter.toMessageContentsList(java.lang.Object[])
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@36f7d7b to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.DataFormat org.apache.camel.component.cxf.converter.CxfConverter.toDataFormat(java.lang.String)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@60aec68a to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToString(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@25a7fedf to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.cxf.converter.CxfConverter.soapMessageToInputStream(javax.xml.soap.SOAPMessage,org.apache.camel.Exchange) throws javax.xml.soap.SOAPException,java.io.IOException
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6361b799 to: StaticMethodTypeConverter: public static org.w3c.dom.NodeList org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayloadToNodeList(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1b9d9a2b to: StaticMethodTypeConverter: public static org.w3c.dom.Node org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToNode(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@d919544 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.nodeListToCxfPayload(org.w3c.dom.NodeList,org.apache.camel.Exchange)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@17dad32f to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.elementToCxfPayload(org.w3c.dom.Element,org.apache.camel.Exchange)
2019-05-27 06:47:06,047 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@79696332 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.documentToCxfPayload(org.w3c.dom.Document,org.apache.camel.Exchange)
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@ed2f2f6 to: StaticMethodTypeConverter: public static org.apache.camel.component.cxf.CxfPayload org.apache.camel.component.cxf.converter.CxfPayloadConverter.sourceToCxfPayload(javax.xml.transform.Source,org.apache.camel.Exchange)
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@fe87ddd to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToStreamCache(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4eea94a4 to: StaticMethodTypeConverter: public static javax.xml.transform.Source org.apache.camel.component.cxf.converter.CxfPayloadConverter.cxfPayLoadToSource(org.apache.camel.component.cxf.CxfPayload,org.apache.camel.Exchange)
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@29be997f to: StaticMethodTypeConverter: public static java.io.InputStream org.apache.camel.component.file.GenericFileConverter.genericFileToInputStream(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@33eb6758 to: StaticMethodTypeConverter: public static java.lang.String org.apache.camel.component.file.GenericFileConverter.genericFileToString(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException,org.apache.camel.NoTypeConversionAvailableException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@f8a6243 to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.component.file.GenericFileConverter.genericFileToSerializable(org.apache.camel.component.file.GenericFile,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7f9e8421 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23da79eb to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@168b4cb0 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@3e05586b to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@35b17c06 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@45545e7a to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@9f674ac to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@1da4b3f9 to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@23cbbd07 to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@448b808a to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,048 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@7e62cfa3 to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.ByteArrayInputStream,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.InputStream,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.converter.stream.CachedOutputStream,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(java.io.Reader,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.stream.StreamSource,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.StringSource)
2019-05-27 06:47:06,049 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource) to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(org.apache.camel.BytesSource)
2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException to: StaticMethodTypeConverter: public static org.apache.camel.StreamCache org.apache.camel.converter.stream.StreamCacheConverter.convertToStreamCache(javax.xml.transform.sax.SAXSource,org.apache.camel.Exchange) throws javax.xml.transform.TransformerException
2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.nio.ByteBuffer org.apache.camel.converter.stream.StreamCacheConverter.convertToByteBuffer(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static java.io.Serializable org.apache.camel.converter.stream.StreamCacheConverter.convertToSerializable(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException
2019-05-27 06:47:06,050 [main           ] WARN  DefaultTypeConverter           - Overriding type converter from: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException to: StaticMethodTypeConverter: public static byte[] org.apache.camel.converter.stream.StreamCacheConverter.convertToByteArray(org.apache.camel.StreamCache,org.apache.camel.Exchange) throws java.io.IOException","ggrzybek:1558903913:2019-05-27T04:51:53.281+0000:1558904106:2019-05-27T04:55:06.250+0000:I'll try to check soon... I remember these overrides happened due to some ComponentRegistryProcessor adding/changing something, so beans had to be instantiated again.
[~davsclaus] because I felt out of cycle a bit, can you please give me few ""steps to reproduce""? Which repos/branches to build and which tests to run?
davsclaus:1558904027:2019-05-27T04:53:47.542+0000:1558904027:2019-05-27T04:53:47.542+0000:This is for Camel 3, where we have source code generated the type converters, so this looks like camel-blueprint overrides those existing ones which it ought not to do.
davsclaus:1558925587:2019-05-27T10:53:07.161+0000:1558925587:2019-05-27T10:53:07.161+0000:This only happens for camel-test-blueprint, so its something in there
ggrzybek:1558926877:2019-05-27T11:14:37.437+0000:1558926877:2019-05-27T11:14:37.437+0000:Give me please some time first to look around Camel 3 ;)
davsclaus:1558930752:2019-05-27T12:19:12.368+0000:1558930752:2019-05-27T12:19:12.368+0000:Okay it also happens on karaf, such as 

14:18:30.038 INFO [paxweb-config-4-thread-1] Binding bundle: [org.apache.karaf.http.core [112]] to http service
14:18:30.041 INFO [activator-1-thread-4] Registering commands for bundle org.apache.karaf.http.core/4.2.5
14:18:39.673 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6cf2804f to: org.apache.camel.support.SimpleTypeConverter@2ddfc33b
14:18:39.674 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@69fd2472 to: org.apache.camel.support.SimpleTypeConverter@3a68f46d
14:18:39.674 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@344392cf to: org.apache.camel.support.SimpleTypeConverter@cf9e0da
14:18:39.675 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@ca79b83 to: org.apache.camel.support.SimpleTypeConverter@7111cde6
14:18:39.675 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@59ecfce1 to: org.apache.camel.support.SimpleTypeConverter@1a503836
14:18:39.676 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@2a1bc37c to: org.apache.camel.support.SimpleTypeConverter@559a4524
14:18:39.676 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@6bafa082 to: org.apache.camel.support.SimpleTypeConverter@70a5a449
14:18:39.677 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4518902 to: org.apache.camel.support.SimpleTypeConverter@3e54fc9
14:18:39.677 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@15d84487 to: org.apache.camel.support.SimpleTypeConverter@48022d99
14:18:39.678 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@4013a402 to: org.apache.camel.support.SimpleTypeConverter@692130ce
14:18:39.678 WARN [pipe-start 164] Overriding type converter from: org.apache.camel.support.SimpleTypeConverter@3e0aad11 to: org.apache.camel.support.SimpleTypeConverter@673d21ac
ggrzybek:1558937869:2019-05-27T14:17:49.955+0000:1558937869:2019-05-27T14:17:49.955+0000:Please leave it assigned to me - just tell me which branch of camel and cia2 to run ;)
davsclaus:1558944660:2019-05-27T16:11:00.999+0000:1558944660:2019-05-27T16:11:00.999+0000:Okay we now filter out duplicates and keep the optimized type converter that was loaded via META-INF/.../TypeConverterLoaded file.
ggrzybek:1558945269:2019-05-27T16:21:09.804+0000:1558945269:2019-05-27T16:21:09.804+0000:Thanks and sorry for not checking this..."
0,CAMEL-13580,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-05-26 19:28:21+00:00,2019-08-13 07:01:36+00:00,"As the camel-zookeeper-master component is better at handling this. So lets deprecate this in Camel 2.x, and remove in 3.0","Saratiru:1565650896:2019-08-13T07:01:36.978+0000:1565650896:2019-08-13T07:01:36.978+0000:If camel-zookeeper is deprecated in 3.0.0-M4, is there a way we can achieve multi master ( multiple active nodes)  scenarios  ( like we had CuratorMultiMasterLeaderRoutePolicy ) in the new version. Any thoughts?"
0,CAMEL-13579,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Andrea Cosentino,Claus Ibsen,0,2,2019-05-26 16:53:15+00:00,2021-10-25 05:54:41+00:00,"There is a 3.5.x release and we are on 3.4.x.


Contributions and help is welcome. There is also camel-zookeer-master component","davsclaus:1563450274:2019-07-18T19:44:34.021+0000:1563450274:2019-07-18T19:44:34.021+0000:I think latest Apache Kafka is now also upgraded to ZK 3.5.x
acosentino:1635112477:2021-10-25T05:54:37.072+0000:1635112477:2021-10-25T05:54:37.072+0000:We are using 3.5.9 now."
0,CAMEL-13578,New Feature,Minor,3.0.0-M2,,"
None
",Resolved,Won't Fix,None,Unassigned,Jan Bednar,0,2,2019-05-25 17:35:28+00:00,2019-07-25 06:49:11+00:00,"We have implemented this in our project. This is convenient for working with List<Map<>> and Map<List<>>objects.


I can implement this into Camel, but there is massive refactoring in Camel 3 about modules and I`m not quite sure if this should be part of core, support, base,... , or event special new module. Any thoughts or docs about camel 3 module architecture?


Usage:




//Body contains List<Map<String, String>>
String.value = exchange.getIn()
.getBody(TypeConverterList.class)
.get(0, TypeConverterMap.class)
.get(""key1"", String.class);



which is more flexible alternative to current approach




String value = (String)(((Map)exchange.getIn().getBody(List.class).get(0)).get(""key1""));



 


This is achieved implementing two new TypeConverters: List -> TypeConverterList and Map -> TypeConverterMap.


Instances of TypeConverterList and TypeConverterMap holds reference to org.apache.camel.TypeConverter
 and looks like:


 




public class TypeConverterMap<K,V> extends ForwardingMap<K,V> {
    private final TypeConverter typeConverter;
    private final Map<K,V> delegate;

    public TypeConverterMap(CamelContext camelContext, Map<K,V> delegate) {
        this.delegate = delegate;
        this.typeConverter = camelContext.getTypeConverter();
    }

    @Override
    protected Map<K,V> delegate() {
        return delegate;
    }

    public <T> T get(K key, Class<T> clazz){
        return typeConverter.convertTo(clazz, get(key));
    }

    public <T extends V> T getOrDefault(K key, V defaultValue, Class<T> clazz) {
        return typeConverter.convertTo(clazz, getOrDefault(key, defaultValue));
    }
}",davsclaus:1564008551:2019-07-25T06:49:11.612+0000:1564008551:2019-07-25T06:49:11.612+0000:Lets keep it as is
0,CAMEL-13577,Bug,Minor,2.23.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Senthil,0,2,2019-05-24 19:05:36+00:00,2020-12-17 15:20:51+00:00,"We are using camel-salesforce components to subscribe Salesforce Platform events. We are using the springboot configurations. Initial startup it is connecting to all the platform event routes, after a while ( 3 ro 4 hours), it is failed to reconnect and throwing 403::Unknown client. We made some changes based on the thread https://issues.apache.org/jira/browse/CAMEL-12484 but still having the same issues. We tried disabling the Salesforce in-app notification and httpClientProperties.idletimeout options. but still having same issue. Could you please help resolve this issue.


 


I have attached our logs for your reference here.",davsclaus:1608189651:2020-12-17T15:20:51.773+0000:1608189651:2020-12-17T15:20:51.773+0000:Try with latest release or upgrade to 3.x where camel-salesforce is being hardened
0,CAMEL-13576,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2019-05-24 15:20:31+00:00,2019-05-24 15:36:44+00:00,which can easily cause ConcurrentModificationException under high load,
0,CAMEL-13575,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,2,2019-05-24 13:40:56+00:00,2019-11-30 19:39:47+00:00,"The main drawback of the current implementation is that placeholders can not be used and the xml can't be validated.


The drawback of using strings is that it will be less safe in the xml schema.","davsclaus:1562482787:2019-07-07T14:59:47.195+0000:1562482787:2019-07-07T14:59:47.195+0000:If you refer to LoggingLevel then its used in LogDefinition also
gnodet:1574226838:2019-11-20T13:13:58.042+0000:1574226838:2019-11-20T13:13:58.042+0000:So I just found out that it was partially solved with https://issues.apache.org/jira/browse/CAMEL-7548 so what we need is just:
 * more doc around this feature
 * make sure this works on all EIPs
gnodet:1574227307:2019-11-20T13:21:47.854+0000:1574227307:2019-11-20T13:21:47.854+0000:So this is documented at [https://camel.apache.org/manual/latest/using-propertyplaceholder.html#UsingPropertyPlaceholder-UsingPropertyPlaceholdersforAnyKindofAttributeintheXMLDSL]
gnodet:1574986171:2019-11-29T08:09:31.845+0000:1574986171:2019-11-29T08:09:31.845+0000:PR available at [https://github.com/apache/camel/pull/3365]"
0,CAMEL-13574,Wish,Minor,2.21.5,,"
None
",Resolved,Not A Problem,None,Unassigned,Matteo Redaelli,0,2,2019-05-24 12:11:05+00:00,2019-08-07 04:44:22+00:00,"I would like to export some database tables to csv files with the header using database column names.


 


But using camel-jdbc and camel-csv I haven't found a solution...


 


It seems you have to manually concatenate the he header and the rows ...


It would be nice to have an option to switch header on/off when marshalling to csv ...


 


See https://stackoverflow.com/questions/31865928/output-csv-column-headers-in-apache-camel","davsclaus:1558673650:2019-05-24T12:54:10.961+0000:1558673650:2019-05-24T12:54:10.961+0000:See the docs, there are options to control headers. So go try this out first
https://github.com/apache/camel/blob/master/components/camel-csv/src/main/docs/csv-dataformat.adoc"
0,CAMEL-13573,New Feature,Major,None,None,"
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Onder Sezgin,Matteo Redaelli,5,9,2019-05-24 11:58:30+00:00,2023-05-31 07:56:00+00:00,"It would be useweful to read / store data (marshal / unmarshal) in parquet format (https://parquet.apache.org/). 


It is widely used in bigdata projects / datalakes 


 


I did not found any info about it in the documentation...


 


Thanks
Matteo","davsclaus:1559559179:2019-06-03T18:52:59.959+0000:1559559179:2019-06-03T18:52:59.959+0000:We love contributions, and users are welcome to work on a camel-parquet dataformat.
matt12eagles:1610086092:2021-01-08T14:08:12.840+0000:1610086092:2021-01-08T14:08:12.840+0000:Hi team! Any update w/ this?

W/ the new kafka connector support.... this would be the first (tried and tested) HDFS source that could support parquet that would be free!
miguel_costa:1618983718:2021-04-21T13:41:58.686+0000:1618983718:2021-04-21T13:41:58.686+0000:Indeed this would be nice to have. I assume if it's not been done in over 2 years it's very likely it will not be done in the future either 
acosentino:1618983792:2021-04-21T13:43:12.495+0000:1618983792:2021-04-21T13:43:12.495+0000:Anyone is welcome to provide a PR or upvote the issue.
miguel_costa:1618985560:2021-04-21T14:12:40.162+0000:1618985560:2021-04-21T14:12:40.162+0000:Maybe this is something basic but can you point me to the project where we could create a PR? I would like to use this in a Kafka Camel Sink Connector but I understood that this would need to be done at the Camel level and not in the Camel Connectors so I would not be sure on how this could be extended.

Would it be something similar to this setup in Avro?
https://github.com/apache/camel/blob/main/components/camel-avro/src/main/java/org/apache/camel/dataformat/avro/AvroDataFormat.java

Because we did this conversion to Parquet in other places (like in Apache Flink) using org.apache.parquet.hadoop.ParquetWriter but I've also seen it in other projects where actually first people transform the data into Avro and then pass it to Parquet using the and I've seen it done in a way that it just first passes to Avro and then to Parquet using org.apache.parquet.avro.AvroParquetWriter

acosentino:1618986446:2021-04-21T14:27:26.642+0000:1618986446:2021-04-21T14:27:26.642+0000:The dataformat needs to be in the camel repository: [https://github.com/apache/camel]

You should create a dataformat component like the others we have: [https://camel.apache.org/components/latest/dataformats/]

So it should live as a single component in the components folder.

You can take the AvroDataformat as example.

Dataformat are probably the trickiest components to write because they have ramifications in the core too. But we are here to help!
miguel_costa:1618994457:2021-04-21T16:40:57.266+0000:1618994457:2021-04-21T16:40:57.266+0000:I struggle a bit on the camel-connectors and camel-core side to understand all this generated boilerplate code 
I was trying to understand if there was any maven plugin that would generate this kind of scaffold for a new dataformat but could not really get it.
I checked [here|https://camel.apache.org/manual/latest/contributing.html] and [here|https://camel.apache.org/manual/latest/camel-maven-plugin.html] and  in the project readmes (maybe not good enough my check).

Also even the building of the project was a bit of a pain with some of the artifacts not being in maven central and I had to install them manually. 
{code}
mvn install:install-file -DgroupId=com.google.code.findbugs -DartifactId=jsr305 -Dversion=3.0.2.redhat-00008 -Dpackaging=jar -Dfile=jsr305-3.0.2.redhat-00008.jar
{code}

I could just start by copy-pasting the camel-avro module and adapt it to parquet but I have a feeling that there should be a better way to do that.

I think I'll need to leave this for more experienced camel developers or contributors.

acosentino:1618997030:2021-04-21T17:23:50.238+0000:1618997030:2021-04-21T17:23:50.238+0000:If you need to build the project just run mvn clean install -DskipTests.

I don't know why you're trying to install google jar with Red hat suffix.

You can copy the avro dataformat if you want. There is an archetype too.

 

 

 

 

 
miguel_costa:1619007579:2021-04-21T20:19:39.188+0000:1619007579:2021-04-21T20:19:39.188+0000:well the redhat sufix is what it comes from the repo, I just meant when I do build it does not work because it does not find it so you have to manually download this dependencies and put them into the local maven.
same for example for 

{code:java}
mvn install:install-file -DgroupId=org.restlet.jee -DartifactId=org.restlet -Dversion=2.4.3 -Dpackaging=jar -Dfile=org.restlet-2.4.3.jar
{code}


anyway also using the archetype does not work because it's failing on the generation...
I guess just not my day.


{code:java}
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Archetype: camel-archetype-dataformat:2.18.2
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: groupId, Value: org.apache.camel
[INFO] Parameter: artifactId, Value: camel-parquet
[INFO] Parameter: version, Value: 3.10-SNAPSHOT
[INFO] Parameter: package, Value: org.apache.camel.dataformat.parquet
[INFO] Parameter: packageInPathFormat, Value: org/apache/camel/dataformat/parquet
[INFO] Parameter: package, Value: org.apache.camel.dataformat.parquet
[INFO] Parameter: scheme, Value: parquet
[INFO] Parameter: maven-bundle-plugin-version, Value: 3.2.0
[INFO] Parameter: groupId, Value: org.apache.camel
[INFO] Parameter: maven-compiler-plugin-version, Value: 3.5.1
[INFO] Parameter: version, Value: 3.10-SNAPSHOT
[INFO] Parameter: maven-resources-plugin-version, Value: 3.0.1
[INFO] Parameter: name, Value: Camel :: Parquet
[INFO] Parameter: log4j-version, Value: 1.2.17
[INFO] Parameter: slf4j-version, Value: 1.7.22
[INFO] Parameter: artifactId, Value: camel-parquet
[INFO] Parameter: camel-version, Value: 2.18.2
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for Camel 3.10.0-SNAPSHOT:
....
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.2.0:generate (default-cli) on project components: java.io.IOException: The filename, directory name, or volume label syntax is incorrect -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-archetype-plugin:3.2.0:generate (default-cli) on project components: java.io.IOException: The filename, directory name, or volume label syntax is incorrect
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:215)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
Caused by: org.apache.maven.plugin.MojoFailureException: java.io.IOException: The filename, directory name, or volume label syntax is incorrect
    at org.apache.maven.archetype.mojos.CreateProjectFromArchetypeMojo.execute (CreateProjectFromArchetypeMojo.java:208)
    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo (DefaultBuildPluginManager.java:137)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:210)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:156)
    at org.apache.maven.lifecycle.internal.MojoExecutor.execute (MojoExecutor.java:148)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:117)
    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject (LifecycleModuleBuilder.java:81)
    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build (SingleThreadedBuilder.java:56)
    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute (LifecycleStarter.java:128)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:305)
    at org.apache.maven.DefaultMaven.doExecute (DefaultMaven.java:192)
    at org.apache.maven.DefaultMaven.execute (DefaultMaven.java:105)
    at org.apache.maven.cli.MavenCli.execute (MavenCli.java:957)
    at org.apache.maven.cli.MavenCli.doMain (MavenCli.java:289)
    at org.apache.maven.cli.MavenCli.main (MavenCli.java:193)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced (Launcher.java:282)
    at org.codehaus.plexus.classworlds.launcher.Launcher.launch (Launcher.java:225)
    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode (Launcher.java:406)
    at org.codehaus.plexus.classworlds.launcher.Launcher.main (Launcher.java:347)
{code}

acosentino:1619037868:2021-04-22T04:44:28.215+0000:1619037868:2021-04-22T04:44:28.215+0000:Are you trying to build the main branch, there shouldn't be any restlet dependencies.
yasserzamani:1671850852:2022-12-24T11:00:52.929+0000:1671850852:2022-12-24T11:00:52.929+0000:[~onders] are you still working on this issue? I've just done a bit analysis on this and looks like it's doable via using some dependencies to two third-party providers, Hadoop and Avro. So if you haven't started with this issue yet then maybe I can try with?
onders:1671853147:2022-12-24T11:39:07.486+0000:1671853147:2022-12-24T11:39:07.486+0000:Yes i have dataformat implemented already. Will push changes soon.[~yasserzamani] 
onders:1685075460:2023-05-26T12:31:00.689+0000:1685075460:2023-05-26T12:31:00.689+0000:https://github.com/apache/camel/pull/10218"
0,CAMEL-13572,Bug,Major,3.0.0-M3,3.0.0-M3,"
None
",Resolved,Fixed,3.0.0-M3,Zoran Regvart,Zoran Regvart,0,1,2019-05-24 09:40:05+00:00,2019-05-24 09:54:45+00:00,The last optimization that returned the HttpResponse in case that the exchange's message is a NettyHttpMessage resulted in any changes to the body of the message being ignored. The optimization should have checked if the body is set and only return the already created HttpResponse in case the message body is null.,
0,CAMEL-13571,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-24 08:39:55+00:00,2021-09-30 10:34:17+00:00,"We can leave the behavior as the older, but we can make it configurable to avoid autocreation",
0,CAMEL-13570,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-24 08:38:50+00:00,2019-05-24 14:07:12+00:00,"We can leave the behavior as the older, but make it possible to avoid the autocreation.",
0,CAMEL-13569,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-24 08:30:03+00:00,2019-05-24 10:13:17+00:00,"There is some old code that allows to define in jndi.properties beans with .class etc to create these beans via basic class loading that was from Camel 1.x time and nobody uses.


This should be removed",
0,CAMEL-13568,Sub-task,Major,None,,"
None
",Resolved,Implemented,None,Unassigned,Zoran Regvart,0,2,2019-05-24 07:46:01+00:00,2019-05-28 06:43:27+00:00,"I think a separate archetype for releases would be a good idea. We can also make this archetype data-driven from JIRA issues, so list of enhancements/fixes can be incorporated within it.","fpapon:1558755232:2019-05-25T11:33:52.478+0000:1558755232:2019-05-25T11:33:52.478+0000:Hi [~zregvart], should we add a summary page for all the releases versions (included archives) or just link the current latest release in the download page?
zregvart:1558996892:2019-05-28T06:41:32.192+0000:1558996892:2019-05-28T06:41:32.192+0000:Thanks [~fpapon] merged from [PR#43|https://github.com/apache/camel-website/pull/43]
zregvart:1558997007:2019-05-28T06:43:27.597+0000:1558997007:2019-05-28T06:43:27.597+0000:[~fpapon] I don't really know, the work you did for now looks good to me, we can always rearrange this via CAMEL-12997."
0,CAMEL-13567,Sub-task,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,1,2019-05-24 07:44:42+00:00,2019-05-26 13:24:41+00:00,We need to add a Hugo archetype for creating news or blog entries on the website. We should also consider migrating existing blog entries to Markdown in the format of this new archetype.,"zregvart:1558848281:2019-05-26T13:24:41.114+0000:1558848281:2019-05-26T13:24:41.114+0000:Implemented in pull request [#36|https://github.com/apache/camel-website/pull/36], thanks to [~fpapon]"
0,CAMEL-13566,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-24 06:32:25+00:00,2019-05-24 10:13:27+00:00,"There is some old code using JDK


PropertyEditor editor = PropertyEditorManager.findEditor(type);


But this is no longer in use as we really use camel's type converter. That above is also slow and not thread safe and was intended for java swing/beans stuff and some cruft from very old times. Lets try to get rid of it.",
0,CAMEL-13565,Wish,Major,None,,"
None
",Resolved,Invalid,None,Unassigned,Pedro Henrique Calais Guerra,0,2,2019-05-23 21:53:58+00:00,2019-05-24 23:18:07+00:00,"https://camel.apache.org/tracer.html


 ""Implementing custom tracing via TracingInterceptor has been deprecated.""


Being able to customize and personalize the tracing logs seemed like a very useful capability. Can anyone explain this decision? Thanks!",acosentino:1558711087:2019-05-24T23:18:07.205+0000:1558711087:2019-05-24T23:18:07.205+0000:This kind of question should be done on dev mailing list. This is for tracking issues.
0,CAMEL-13564,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Guillaume Nodet,Guillaume Nodet,0,4,2019-05-23 15:35:54+00:00,2022-09-02 11:30:25+00:00,No Desc,"Gaelle:1583430342:2020-03-06T01:45:42.526+0000:1583430342:2020-03-06T01:45:42.526+0000:Hello...

i'm an outreachy applicant.

I would like to know if this issue is open for contributions
zregvart:1583458920:2020-03-06T09:42:00.385+0000:1583458920:2020-03-06T09:42:00.385+0000:Hi [~Gaelle], for the Outreachy program our project proposal is for the Camel Website, this is the text I prepared to get started please have a look:

We much appreciate your interest and willingness to contribute, I don't think it makes much sense for all of you to work on the same issue. There's also no need to have a competition on who gets to contribute first, we have plenty of other issues (outlined below) that you can help with. Since most of you are interested in participating in the Outreachy program, and help with the website, please have a look at some issues in that area via this search:

https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20status%20%3D%20Open%20AND%20component%20%3D%20website

And feel free to propose new ideas by creating new issues around the website.

For those wondering how to get started contributing to the website.

Make sure have a [GitHub account|https://github.com/join], read how you can [get started|https://help.github.com/en/github/getting-started-with-github], and [create a pull request|https://help.github.com/en/github/collaborating-with-issues-and-pull-requests].

Have a look at the [README.md|https://github.com/apache/camel-website/blob/master/README.md] in the website project on how to build and how to preview your changes on your own computer.

I'll try to address the questions in you comments here, for future conversations please do subscribe to the developer's mailing list and send emails there, discussions on the Jira issues can get a bit out of control and it's not that easy to follow the conversation here.

The following text includes information on how to reach us, and get started:

First of all, thank you for having an interest in contributing to Apache Camel.

Here are some guidelines on how to best approach the Apache Camel community and how to best apply yourself.

1. Communication

Apache Camel is an Apache Software Foundation project, all communication is done in the open on the project mailing lists.

You can read more on the reasoning behind this to get a better understanding of:

https://www.apache.org/foundation/mailinglists.html

All communication is subject to the ASF Code of Conduct, which you can read here:

https://www.apache.org/foundation/policies/conduct.html

For questions and guidance around contributing subscribe to the developer's mailing list by sending an e-mail to dev-subscribe@camel.apache.org.

We can also be reached on the Gitter chat at https://gitter.im/apache/apache-camel/.

We track issues using ASF Jira located at:

https://issues.apache.org/jira/browse/CAMEL

Where we maintain a list of issues that are easy to get started with, so you can familiarize yourself with the process and get your first contribution in:

https://issues.apache.org/jira/issues/?filter=12348073

And some areas that we are actively looking for help on:

https://issues.apache.org/jira/issues/?filter=12348074

When you're ready to contribute create a Pull request to one of the Camel projects you can find under the Apache organization on GitHub:

https://github.com/apache?q=camel

Expect that your Pull request will receive a review and that you will need to respond and correspond to that via comments at GitHub.

2. Getting started

Read the ""Contributing to Apache Camel"" document on the Camel website:

https://camel.apache.org/manual/latest/contributing.html

Identify areas you can contribute first. You don't have to be an expert in an area, the Apache Camel developers are available to offer help and guidance.

Introduce yourself on the developer's mailing list (see above), tell us what area of work or problem you wish to address in Camel. Create a draft of your solution, this can be simple 1-2 sentences on the change you wish to make. Try to be as specific as you can: include a short description of your intent, what you tried and what didn't work, or what you need help with. The best way of approaching the developers is by describing what you would like to work on and asking specific questions on how to get started. We'll do our best to guide you and help you make your contribution. 

We also participate in Google Summer of Code and Outreachy programs, for information about those look at those program websites. If you wish to participate in either of those follow the guidelines and schedule set by those programs. If you're unsure please reach out via official communication channels of those programs, or ask on the developer's mailing list for help.

3. Your first contribution

Make sure you followed the steps and guidelines outlined above. For bigger changes, make sure that you have discussed on the developer's mailing list or in the Jira issue tracker before hand. We love receiving contributions, to get the best response make sure that the reasoning behind the contribution you wish to make is clear: outline the problem and explain your solution for it.

Make sure you follow the guidelines outlined in the ""Contributing to Apache Camel"" document. Be respectful of the source checks, formatting and the structure of the git commit message we abide by. This will help you in getting your contribution accepted. Outline any changes you made but are unaware or unsure of any consequences or side effects.

Stay engaged, follow and respond to comments or questions you might be asked.

With that I wish you all the best and please do have fun while contributing to Apache Camel, we certainly do :)
davsclaus:1585133718:2020-03-25T18:55:18.535+0000:1585133718:2020-03-25T18:55:18.535+0000:gnodet is this not done with your recent work?"
0,CAMEL-13533,Bug,Major,3.0.0-M2,3.0.0-M3,"
None
",Resolved,Fixed,3.0.0-M3,Alex Dettinger,Alex Dettinger,0,1,2019-05-16 07:16:23+00:00,2019-05-16 09:19:05+00:00,"Some salesforce API response are not valid xml because xml element name contains space whereas they should not.


For instance, the CompositeApiBatchIntegrationTest.shouldSupportLimits was failing because the response contained:


<Ant Migration Tool>


...


</Ant Migration Tool>",aldettinger:1557969545:2019-05-16T09:19:05.745+0000:1557969545:2019-05-16T09:19:05.745+0000:Xml related tests are now ignored for composite batch api
0,CAMEL-13532,Bug,Major,"2.21.5, 2.22.3, 2.23.2, 2.24.0",,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Volker Althaus,0,1,2019-05-16 07:08:09+00:00,2019-05-22 08:40:37+00:00,"I use the file component in pollEnrich with sendEmptyMessageWhenIdle=true and readLock=changed


In 2.20.4 and before the attached test case worked, from 2.21.0 on it fails.


My test writes several characters delayed into a file so that the component runs into a timeout after 10000ms on the first call. This is correct.


On the second call the writing of the file is finished within the 10000ms, my expectation is the correct processing of the file in my route, but it fails because the Exchange has an empty body.


I debugged the thing an saw that in the variable GenericFilePollingConsumer.queue there are two exchanges instead of one. The first one sems to be the ""empty"" message from the first call without a GenericFile in the In-Body, and the second Exchange in the queue is the correct one with the GenericFile from the second call.


Because it's a FiFo, only the first, empty one is returned (in EventDrivenPollingConsumer.receive()) so that the route states that there is nothing to do.


I suspect an error in the processing of the empty message, so that it is not cleared or taken properly from the queue so that it remains there and conflicts with later calls.","davsclaus:1557972051:2019-05-16T10:00:51.737+0000:1557972051:2019-05-16T10:00:51.737+0000:Are you able to compare / narrow-down the issue some more, maybe by checking the latest 2.19.x vs 2.20.0 release. And if so we know its something that changed between these 2 releases, and we can eventually use git digest to track down commits.
davsclaus:1557972081:2019-05-16T10:01:21.001+0000:1557972081:2019-05-16T10:01:21.001+0000:And do you have an easy to use reproducer that we / others can use to try this ?
volker.a:1557976152:2019-05-16T11:09:12.387+0000:1557980094:2019-05-16T12:14:54.802+0000:The test case in in the attached Zip file. It's a simple Maven project with a JUnit test. You eventually have to adapt the local path to the processed file.

I have to correct myself - the breaking change was between 2.20.4 and 2.21.0. It looks like there was a refactoring around the FileConsumer (like the introduction of GenericFilePollingConsumer, where I suspect the bug)

[CAMEL-12020]


davsclaus:1558485628:2019-05-22T08:40:28.924+0000:1558485628:2019-05-22T08:40:28.924+0000:Ah okay you should NOT use empty when idle, but instead use the timeout option on pollEnrich to timeout if there is no file."
0,CAMEL-13531,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-16 07:07:59+00:00,2019-05-16 07:08:35+00:00,"You have to use sysenv to lookup OS env variable. But most people would know it as env, so lets add that as an alias so you can use both of them.",
0,CAMEL-13530,Task,Minor,None,3.x,"
None
",Resolved,Fixed,3.x,Dmitry Volodin,Andrea Cosentino,0,4,2019-05-16 07:02:13+00:00,2022-09-02 11:30:07+00:00,Some breaking changes.,"dbajic:1584440813:2020-03-17T18:26:53.597+0000:1584440813:2020-03-17T18:26:53.597+0000:I see this task is done. Current version is 0.3.7.  Maybe change it's status to done? [~acosentino]

Thanks!
davsclaus:1585612939:2020-03-31T08:02:19.751+0000:1585612939:2020-03-31T08:02:19.751+0000:Dmitry can you get this done soon or move to 3.3.0
dmvolod:1585613046:2020-03-31T08:04:06.851+0000:1585613046:2020-03-31T08:04:06.851+0000:Claus, i will move to 3.3.0
davsclaus:1662089407:2022-09-02T11:30:07.872+0000:1662089407:2022-09-02T11:30:07.872+0000:we are on 0.6.x now"
0,CAMEL-13529,Improvement,Major,None,"3.0.0-M3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0, 2.25.0",Andrea Cosentino,Zheng Feng,0,3,2019-05-16 06:15:58+00:00,2021-05-04 06:44:39+00:00,"currently the camel-jdbc does not work correctly with the spring DataSourceTransactionManager



Application code is required to retrieve the JDBC Connection via DataSourceUtils.getConnection(DataSource) instead of a standard Java EE-style DataSource.getConnection() call. Spring classes such as JdbcTemplate use this strategy implicitly. If not used in combination with this transaction manager, the DataSourceUtils lookup strategy behaves exactly like the native DataSource lookup; it can thus be used in a portable fashion.




So we have to add the extra dependency on the spring-jdbc to support to work with the spring Tx Manager by replacing to use DataSourceUtils.getConnection(DataSource).


Quote from davsclaus



Well in light of that using transactions with spring TX managers and JDBC seems to not work together, then its limited. 
So yeah I think its an okay trade-off to have that extra set of dependencies to make it work well with both Spring and I assume also plain JEE. If not we can add an option to use either the spring datasource lookup or the current approach. However I would be puzzled if that spring-jdbc didn't work OOTB with JEE API too.",
0,CAMEL-13528,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-16 05:51:58+00:00,2019-05-16 06:59:36+00:00,Fix the typo in the API in camel-core,
0,CAMEL-13527,Improvement,Minor,"2.24.0, 3.0.0-M2","3.0.0-M3, 2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0-M3, 2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0",Claus Ibsen,Jan Bednar,1,3,2019-05-15 19:48:08+00:00,2019-05-16 03:07:01+00:00,"See pretty nice analysis on SO https://stackoverflow.com/questions/56110408/memory-leak-in-camel-netty-tcp-client-when-consuming-lines-with-windows-line-bre


io.netty.handler.codec.DelimiterBasedFrameDecoder internally delegates decoding to io.netty.handler.codec.LineBasedFrameDecoder. This delegation is not working with Camel, because Netty internally checks for condition




this.getClass() != DelimiterBasedFrameDecoder.class // io.netty.handler.codec.DelimiterBasedFrameDecoder line 174 - !isSubclass()




We can recreate similar optimisation inside org.apache.camel.component.netty4.codec.DelimiterBasedFrameDecoder and get (according to SO post) significant performance improvement.","bedla:1557921355:2019-05-15T19:55:55.828+0000:1557921355:2019-05-15T19:55:55.828+0000:I am working on this.
davsclaus:1557947221:2019-05-16T03:07:01.557+0000:1557947221:2019-05-16T03:07:01.557+0000:Thanks for reporting and the PR"
0,CAMEL-13526,Bug,Minor,3.0.0,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",James Netherton,James Netherton,0,1,2019-05-15 08:18:16+00:00,2019-05-15 08:25:11+00:00,"When I recently upgraded the docker java client, I missed a change in behaviour for how the path to the docker daemon unix socket is determined. It used to be hard coded, but it's now configurable via the host URL:


https://github.com/docker-java/docker-java/commit/32220487c9f6fc54dceb152e774d3d09f5548943#diff-1e9098e0bf3cde696fe27648bc113a13


The camel-docker component cannot currently handle unix:// URL schemes in the host parameter because it erroneously appends the port number onto the end of the URL.",
0,CAMEL-13525,Improvement,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-15 03:13:59+00:00,2019-06-06 13:47:54+00:00,"1 route = 1 route id, what you did in that unit test / JIRA ticket was wrong and not intended to be supported, eg .routeId will override each other, a route has 1 route id. So do only set .routeId once per route!


From gitter chat",
0,CAMEL-13524,Bug,Major,"2.23.0, 3.0.0-M2","3.0.0-M3, 2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0-M3, 2.23.3, 2.22.5, 2.24.1, 3.0.0, 2.25.0",Claus Ibsen,Jan Bednar,0,2,2019-05-14 21:33:02+00:00,2019-05-16 09:47:41+00:00,"https://stackoverflow.com/questions/56136857/how-to-use-camel-tod-and-netty4-http-component-problem-with-optimization-of-din


This is very similar to CAMEL-12705, but in this case it affects url with dashes. Tested with current master.


url




netty4-http:http://a-b-c.hostname.tld:8080/anything



results in 




netty4-http:http:a-b:8080/path



Unit test in attachment.


 


Maybe


AbstractCamelCatalog#SYNTAX_PATTERN should be changed to 




([\w.-]+)




Or is there reason, why is dash excluded from regexp?


I have tried to edit regexp and it broke test too, it results in resolved = ""netty4-http:http:a-b-c.hostname.tld-8080""","davsclaus:1557966585:2019-05-16T08:29:45.365+0000:1557966585:2019-05-16T08:29:45.365+0000:Cannot reproduce this on master
https://github.com/apache/camel/commit/56b030607a3fe7861bac987483c82a00af718735
davsclaus:1557967113:2019-05-16T08:38:33.491+0000:1557967113:2019-05-16T08:38:33.491+0000:Ah okay got it reproduced, so its the optional path in the end that is caused a bit of stir"
0,CAMEL-13523,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.x,Unassigned,John Poth,0,1,2019-05-14 15:18:07+00:00,2022-09-02 11:29:27+00:00,Builds fine but needs https://github.com/mvel/mvel/issues/185/ to be merged and released. Thanks!,
0,CAMEL-13522,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-14 11:23:00+00:00,2019-05-15 09:50:48+00:00,"This makes using the APIs in Camel easier, and most of them are runtime based anyway. So lets align to be more non checked exceptions",
0,CAMEL-13521,New Feature,Major,None,3.0.0-M3,"
None
",Resolved,Implemented,3.0.0-M3,Zoran Regvart,Zoran Regvart,0,1,2019-05-14 10:23:45+00:00,2019-05-19 18:36:51+00:00,"I think it would make sense to add support for reverse proxy operation in camel-netty4-http.


With it one can have Camel act as a HTTP proxy perform some transformation/mediation/routing and make it easy to include in the architecture without much changing the client or the service.


Perhaps adding a new protocol scheme proxy would be a good start, so the endpoint URI would look something like netty-http:proxy://0.0.0.0.


I can work on a pull request to showcase this feature.",zregvart:1557884314:2019-05-15T09:38:34.194+0000:1557884314:2019-05-15T09:38:34.194+0000:Merged from [PR#2911|https://github.com/apache/camel/pull/2911]
0,CAMEL-13520,Bug,Minor,3.0.0-M2,3.0.0-M3,"
None
",Resolved,Fixed,3.0.0-M3,Alex Dettinger,Alex Dettinger,0,1,2019-05-14 10:16:04+00:00,2019-05-14 15:44:01+00:00,"Running mvn -Pintegration antrun:run@setup-salesforce-instance to first setup the connected app needed for integration tests reports issues:



The ModifyMetadata permission is needed
Some Apex classes contains invalid % characters",
0,CAMEL-13519,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-14 10:03:36+00:00,2021-09-30 10:34:17+00:00,No Desc,
0,CAMEL-13517,Bug,Major,None,3.0.0-M3,"
None
",Resolved,Fixed,3.0.0-M3,Zoran Regvart,Zoran Regvart,0,1,2019-05-14 09:47:01+00:00,2019-05-14 10:11:23+00:00,"The keystore used in TLS tests for contains a expired certificate for a DSA key. This narrows down the cipher selection to disabled ciphers and the only cipher available is the NULL with NULL cipher, making any TLS handshake virtually impossible.",
0,CAMEL-13516,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-14 09:45:57+00:00,2019-05-16 10:09:01+00:00,Should extend ServiceSupport and do its startup stop in doStart/doStop etc.,
0,CAMEL-13515,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-14 06:41:46+00:00,2019-06-07 10:14:33+00:00,"We could add option to DefaultProducer so any producer allows to defer its startup (doStart) to when the first message is being processed. The danger is that the startup logic has to be thread-safe and if there are concurrent messages then they would need to hold back until the startup is done. This is a trade-off that the user would need to accept if enabled.


But this can make it easier to let Camel startup routes even if some remote server is not available when a producer startup as part of route startup.","davsclaus:1559807165:2019-06-06T15:46:05.079+0000:1559807165:2019-06-06T15:46:05.079+0000:Okay looking into use an EndpointStrategy to wrap the endpoint if the producer would be configured as lazy. Then we have a hook to be able to wrap when the producer is created, and can control the lifecycle to only start on first message.
davsclaus:1559872129:2019-06-07T09:48:49.646+0000:1559872129:2019-06-07T09:48:49.646+0000:Okay found a better way, however to make it more consistent then we both create and start the producer on the first request. This ensure any kind of error related to the producer will be lazy; which is a feature Camel users has asked about in the past.

"
0,CAMEL-13514,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-14 05:16:29+00:00,2019-05-15 09:50:35+00:00,"The API for org.apache.camel.Service has throws Exception for its start/stop methods. It would be great to remove those, as they throw runtime exceptions when failing, and this makes using these APIs easier for end users, so they dont have the burden of checked exceptions.",davsclaus:1557804569:2019-05-14T11:29:29.424+0000:1557804569:2019-05-14T11:29:29.424+0000:Also the start/stop of these services and camel context itself should avoid too many wrappings due checked vs unchecked exceptions are in play
0,CAMEL-13513,Bug,Major,2.17.0,"3.0.0-M3, 2.23.3, 2.24.1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 2.23.3, 2.24.1, 3.0.0",Andrea Cosentino,Antonio Gagliardi,0,2,2019-05-13 16:09:49+00:00,2019-05-15 09:44:08+00:00,"In a route that changes the destination of rsClient in CXFRS dynamically, using the Header ""CamelDestinationOverrideUrl"", it stops working when set for second time.
This issue has been partially fixed in the CAMEL-12541 but only for Spring based endpoint, the issue still exists for the Blueprint based endpoint.","acosentino:1557735314:2019-05-13T16:15:14.828+0000:1557735346:2019-05-13T16:15:46.811+0000:2.17.x is not released anymore. Did you check with newer version?
agagliardi:1557816791:2019-05-14T14:53:11.609+0000:1557816791:2019-05-14T14:53:11.609+0000:Hi Andrea, yes the issue exists also on master.

I've made a PR on master with an integration test (disabled on master but works on 2.x) and the fix similar to the one made for CXFRS Spring Endpoint.

[https://github.com/apache/camel/pull/2913]"
0,CAMEL-13512,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-05-13 14:35:25+00:00,2019-05-14 04:36:41+00:00,No Desc,
0,CAMEL-13511,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0-M3,Guillaume Nodet,Guillaume Nodet,0,1,2019-05-13 14:34:47+00:00,2019-05-14 04:36:54+00:00,No Desc,
0,CAMEL-13510,Bug,Minor,"2.21.4, 2.22.3, 2.23.2, 2.24.0, 2.22.4, 3.0.0-M2",,"
None
",Resolved,Won't Fix,None,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,3,2019-05-13 14:23:42+00:00,2020-12-22 11:22:02+00:00,"When the bus is not specified (via spring, blueprint or URI), Camel CXF endpoints use default CXF bus but it's not set to the endpoint, meaning the getBus() returns null.",davsclaus:1608607322:2020-12-22T11:22:02.871+0000:1608607322:2020-12-22T11:22:02.871+0000:The CxfRsEndpoint is built that way to deal with a null bus
0,CAMEL-13509,Improvement,Minor,"2.22.3, 2.23.2, 2.24.0, 2.22.4, 3.0.0-M2",,"
None
",Resolved,Abandoned,None,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,3,2019-05-13 14:20:23+00:00,2022-09-02 11:29:15+00:00,"When running in an OSGi environment, Camel CXF component should register CXF bus/endpoint as OSGi services.
Else, the user can't see the endpoint/bus when using cxf:list-buses or cxf:list-endpoints shell commands.","acosentino:1557729262:2019-05-13T14:34:22.731+0000:1557729262:2019-05-13T14:34:22.731+0000:What is the camel version where this happens?

 "
0,CAMEL-13508,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-13 13:26:57+00:00,2019-06-05 14:43:24+00:00,"Zipkin is now releasing under Apache groupId. They are releasing difference artifacts of our interest, probably we won't be able to upgrade for M3, but this is for tracking purpose.","acosentino:1558060737:2019-05-17T10:38:57.713+0000:1558060737:2019-05-17T10:38:57.713+0000:io.zipkin Zipkin2 is used only as dependency in the Karaf feature. Once Zipkin will release reporter and brave under Apache, we'll move them too."
0,CAMEL-13507,Task,Major,3.0.0,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",James Netherton,James Netherton,0,1,2019-05-13 12:17:13+00:00,2019-05-17 08:24:18+00:00,"On the master branch, the LRA integrations tests are failing. I think it's the same error for all of them:




org.apache.camel.NoSuchEndpointException: No endpoint could be found for: header.Camel-Saga-Compensate, please check your classpath contains the needed Camel component jar.
at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:73) ~[camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:95) ~[camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:223) ~[camel-base-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:120) ~[camel-base-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:482) [camel-core-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.support.ReactiveHelper$Worker.schedule(ReactiveHelper.java:130) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.support.ReactiveHelper.scheduleMain(ReactiveHelper.java:43) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:88) [camel-base-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:220) [camel-base-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) [camel-base-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:39) [camel-support-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
at org.apache.camel.component.undertow.UndertowConsumer.handleRequest(UndertowConsumer.java:141) [camel-undertow-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]",
0,CAMEL-13506,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-13 10:04:31+00:00,2019-05-13 10:22:43+00:00,No Desc,
0,CAMEL-13505,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Andrea Cosentino,0,3,2019-05-13 07:32:07+00:00,2019-07-29 05:44:56+00:00,"We deprecated the 2.x one and removed it, hence we need a new implementation in Camel 3.",
0,CAMEL-13504,Bug,Minor,3.0.0,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Guillaume Nodet,James Netherton,0,2,2019-05-13 07:14:51+00:00,2019-09-12 13:16:24+00:00,"If no cache factory implementation can be found on the classpath then Camel falls back on SimpleLRUCache.


This has some strange effects when using ProducerTemplate.send() (or .request()). I didn't dig too much into the problem, but it's something to do with what happens when a producer is evicted from the producer cache. It causes the producer doStop() method to be called. So if an endpoint is trying to connect to some external resource, it ends up closing that connection prior to any message being sent.


To see this, add a dependency exclusion for camel-caffeine-lrucache in the camel-elasticsearch-rest pom.xml, then run a test:




mvn clean test -Dtest=ElasticsearchIndexTest#testIndex




In the console output you'll see something like the following. Note the multiple connect / disconnect from ElasticsearchProducer:




[2019-05-13T08:03:30,574][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Connecting to the ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,575][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Disconnecting from ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,578][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Connecting to the ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,579][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Disconnecting from ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,582][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Connecting to the ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,582][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Disconnecting from ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,586][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Connecting to the ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,587][INFO ][o.a.c.c.e.ElasticsearchProducer] [unknown] Disconnecting from ElasticSearch cluster: elasticsearch
[2019-05-13T08:03:30,590][INFO ][o.a.c.i.DefaultCamelContext] [unknown] Route: route9 started and consuming from: direct://start
[2019-05-13T08:03:30,591][INFO ][o.a.c.i.DefaultCamelContext] [unknown] Route: route10 started and consuming from: direct://index
[2019-05-13T08:03:30,591][INFO ][o.a.c.i.DefaultCamelContext] [unknown] Route: route11 started and consuming from: direct://deleteIndex
[2019-05-13T08:03:30,592][INFO ][o.a.c.i.DefaultCamelContext] [unknown] Route: route12 started and consuming from: direct://indexWithReplication
[2019-05-13T08:03:30,592][INFO ][o.a.c.i.DefaultCamelContext] [unknown] Total 4 routes, of which 4 are started
[2019-05-13T08:03:30,592][INFO ][o.a.c.i.DefaultCamelContext] [unknown] Apache Camel 3.0.0-SNAPSHOT (CamelContext: camel-3) started in 0.040 seconds




When the test case comes to send a message via ProducerTemplate, it fails because there is no active connection to the test ElasticSearch cluster.




java.lang.IllegalStateException: Request cannot be executed; I/O reactor status: STOPPED",gnodet:1568265384:2019-09-12T13:16:24.729+0000:1568265384:2019-09-12T13:16:24.729+0000:This should be fixed by [https://github.com/apache/camel/commit/7082500b816b0a2e54d2c1f6ff47099965fe6e3d]
0,CAMEL-13503,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-12 10:14:29+00:00,2019-05-14 04:29:42+00:00,"So you can set context name, shutdown timeout, and other options etc.",
0,CAMEL-13502,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-12 08:34:57+00:00,2019-05-12 09:14:11+00:00,"See SO
https://stackoverflow.com/questions/56081583/camel-standalone-configuration-of-propertiescomponent-does-not-work-on-beanin


It makes sense to let OS env variables by default to let them override any existing property values. This is natural in cloud platforms and also how Spring Boot would work etc.",
0,CAMEL-13501,Improvement,Major,None,None,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2019-05-12 08:22:05+00:00,2023-07-17 11:54:31+00:00,"We should move logic that can be executed once during build/compile phase for components to doInit, and then leave doStart to when components need to setup live connections to remote systems etc.


In doInit we can do internal init such as setup a thread pool or other stuff they need.","davsclaus:1557787053:2019-05-14T06:37:33.627+0000:1557787053:2019-05-14T06:37:33.627+0000:We could consider having when you set route auto startup = false, to let the consumer/producers of components etc only do init so they are only initialized, and then when you start the route, they are started. Then they are warmed up even more. Today the consumers are not warmedup. But on the other side the producers are started. What we want for producers is also to only initialize them, and start them when the route starts.

But to make this easier, we could have when auto startup = false
- routes and all its consumers, producers, eips are warmed up with only init
- start is called on the route, then all its producers, eips are started, and the consumer started last.

Then they have the same lifecycle. And allows safely to warmup and initalize resources. 

"
0,CAMEL-13500,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-05-12 06:31:44+00:00,2019-05-14 04:37:46+00:00,"For example some Camel components has nested options like camel-netty4 which has a NettyConfiguration class. 


So when you want to set some of its options you cannot easily do this via component configuration. We have some special support for spring boot that generated these nested options, but its also needed for other use-cases such as the Camel Main and just in general.


For example with SB we can do
camel.component.netty4-http.configuration.max-header-size


We should add support for doing this via Camel Main and in general also","davsclaus:1557614202:2019-05-12T06:36:42.375+0000:1557614202:2019-05-12T06:36:42.375+0000:{code}
2019-05-12 08:35:02,793 [main           ] INFO  MainSupport                    - Auto configuring 2 components/dataformat/languages from loaded properties: 2
Exception in thread ""main"" java.lang.IllegalArgumentException: Cannot configure option [configuration.max-header-size] with value [1234] as the bean class [org.apache.camel.component.netty4.http.NettyHttpComponent] has no suitable setter method, or not possible to lookup a bean with the id [1234] in Camel registry
	at org.apache.camel.main.MainSupport.setCamelProperties(MainSupport.java:980)
	at org.apache.camel.main.MainSupport.autoConfigurationFromProperties(MainSupport.java:869)
	at org.apache.camel.main.MainSupport.postProcessCamelContext(MainSupport.java:801)
	at org.apache.camel.main.MainSupport.initCamelContext(MainSupport.java:676)
	at org.apache.camel.main.Main.doStart(Main.java:107)
	at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:203)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:623)
	at org.apache.camel.example.MyApplication.main(MyApplication.java:38)
{code}
davsclaus:1557615557:2019-05-12T06:59:17.109+0000:1557615557:2019-05-12T06:59:17.109+0000:Okay you can now configure this in similar way as with spring boot, eg
https://github.com/apache/camel/blob/master/components/camel-netty4-http/src/main/docs/netty4-http-component.adoc#spring-boot-auto-configuration

camel.component.netty4-http.configuration.max-header-size=1234
davsclaus:1557617922:2019-05-12T07:38:42.897+0000:1557617922:2019-05-12T07:38:42.897+0000:[~lb] this is now added for MainSupport"
0,CAMEL-13499,Improvement,Trivial,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,bd2019us,0,1,2019-05-10 23:43:17+00:00,2019-05-11 10:31:46+00:00,"There is a slight performance cost associated with Math.random that does not exist in Random.nextDouble. Switching to Random.nextDouble offers the same functionality as Math.random, removes the performance overhead, and allows for more control over the randomness if such a thing is needed in the future",
0,CAMEL-13498,New Feature,Major,None,"3.0.0-M3, 2.24.1, 3.0.0, 2.25.0","

features

",Resolved,Fixed,"3.0.0-M3, 2.24.1, 3.0.0, 2.25.0",Andrea Cosentino,Alexandre Kieling,0,2,2019-05-10 12:01:25+00:00,2019-05-15 12:54:43+00:00,Add support for AS2 (https://en.wikipedia.org/wiki/AS2) in the Karaf platform for transporting messages according to this standard.,"acosentino:1557465523:2019-05-10T13:18:43.106+0000:1557465523:2019-05-10T13:18:43.106+0000:Still some work to do on 2.x 

Backporting doesn't seem to work"
0,CAMEL-13497,Bug,Minor,2.23.2,"2.23.3, 2.24.1, 3.0.0","
None
",Resolved,Fixed,"2.23.3, 2.24.1, 3.0.0",Stephan Siano,Stephan Siano,0,2,2019-05-10 06:23:28+00:00,2019-05-10 11:17:09+00:00,"If a clientConfig parameter is defined for an ahc endpoint, a new cookie store will be created on the endpoint, regardless of the configuration set to the clientConfig parameter.


This makes it impossible to have an endpoint without a cookie store, when this parameter is set (which also means that the clientConfig parameter and the cookieHandler paramter do not work together).


The root cause for this issue is that AhcComponent.cloneConfig() is called at several places in the code to create a configuration builder from the provided configuration. This method is calling new DefaultAsyncHttpClientConfig.Builder(clientConfig), to create that new builder, but this call will create a new cookie store on each invocation and provide it to the new builder. This means even if the cookie store is set to null in the provided configuration the client for the endpoint will be created with a cloned configuration, which will then have a new cookie store.","acosentino:1557457590:2019-05-10T11:06:30.021+0000:1557457590:2019-05-10T11:06:30.021+0000:2.24.0 is on vote already. I created the 2.24.1 label
siano:1557457720:2019-05-10T11:08:40.639+0000:1557457720:2019-05-10T11:08:40.639+0000:Oh, Sorry I overlooked that. Which branch does this need to go into, camel-2.x?
acosentino:1557457809:2019-05-10T11:10:09.367+0000:1557457809:2019-05-10T11:10:09.367+0000:No problem. It's exactly where you pushed.

https://github.com/apache/camel/tree/camel-2.x
siano:1557458229:2019-05-10T11:17:09.818+0000:1557458229:2019-05-10T11:17:09.818+0000:Great, Thanks for your help!"
0,CAMEL-13496,Bug,Major,None,"2.24.0, 3.0.0-M3, 2.23.3","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 2.23.3",Zoran Regvart,Zoran Regvart,0,1,2019-05-09 18:06:02+00:00,2019-05-09 18:17:15+00:00,"When we run maven-invoker-plugin it takes on any MAVEN_OPTS or .mvn/jvm.config settings and runs with those. We specify 3.5GB of heap for the Maven process in .mvn/jvm.config so for each invocation maven-invoker-plugin will start a JVM with additional 3.5GB of heap.


There is no way of overriding the entire JVM configuration, but luckily the last -Xmx setting on the JVM command line is taken into consideration, so when configuring the maven-invoker-plugin we can set the <mavenOpts> configuration and it will be appended to the java command line arguments and the last -Xmx parameter will set the heap size.",
0,CAMEL-13495,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-09 12:21:20+00:00,2019-05-09 12:34:58+00:00,"We have a bunch of components still based on jackson 1, really old, but still used. We need to move to newer jackson version.",
0,CAMEL-13494,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-09 09:42:26+00:00,2019-05-09 12:21:20+00:00,"We have a bunch of components still based on jackson 1, really old, but still used. We need to move to newer jackson version.",
0,CAMEL-13493,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-09 09:11:23+00:00,2019-05-09 09:42:27+00:00,"We have a bunch of components still based on jackson 1, really old, but still used. We need to move to newer jackson version.",
0,CAMEL-13492,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-05-09 06:44:46+00:00,2019-05-09 09:11:23+00:00,"We have a bunch of components still based on jackson 1, really old, but still used. We need to move to newer jackson version. Lets start from camel-weather",
0,CAMEL-13491,Bug,Major,2.23.0,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Jan Hallonsten,0,2,2019-05-07 11:57:07+00:00,2019-06-06 10:59:42+00:00,"With the changes in 


org.apache.camel.test.junit4.CamelTestSupport done during the work on https://issues.apache.org/jira/browse/CAMEL-12534 the camel context is now recreated for every test regardless of the return value from


isCreateCamelContextPerClass()


. Since junit4 creates a new instance of the class for every test the variable tests will be recreated and initialized to 0 for every test.


This condition in tearDown will always be true




// code placeholder
if (tests.compareAndSet(v, v - 1)) {
    if (v == 1) {




which stops the camel context after every test.","davsclaus:1557625633:2019-05-12T09:47:13.744+0000:1557625633:2019-05-12T09:47:13.744+0000:You are welcome to work on a fix and submit a PR
hallonbat:1557703901:2019-05-13T07:31:41.356+0000:1557703901:2019-05-13T07:31:41.356+0000:I can sure give it a try, I just have to set up a dev environment for Camel.
davsclaus:1557972641:2019-05-16T10:10:41.431+0000:1557972641:2019-05-16T10:10:41.431+0000:Jan, how is it going?
hallonbat:1557973071:2019-05-16T10:17:51.089+0000:1557973071:2019-05-16T10:17:51.089+0000:I have been busy working on other things unfortunately, I am cloning Camel from Github now so that it is easy to get started when I am done with my other task (hopefully later today).
davsclaus:1559559453:2019-06-03T18:57:33.768+0000:1559559453:2019-06-03T18:57:33.768+0000:Any update on this
hallonbat:1559559720:2019-06-03T19:02:00.078+0000:1559559720:2019-06-03T19:02:00.078+0000:I have been struggling to get Camel to build and get it configured in Intellij. I managed to build it via command line now but Intellij is still having issues. It did not import all poms as Maven modules. Should I base the pull request on master or some other branch?
davsclaus:1559559885:2019-06-03T19:04:45.701+0000:1559559885:2019-06-03T19:04:45.701+0000:master, and I really suggest to just only open the module you work on, eg camel-test and then just open its pom.xml file.

You should not import the entire project as its too massive
hallonbat:1559563801:2019-06-03T20:10:01.088+0000:1559563801:2019-06-03T20:10:01.088+0000:Do you ever run the Camel unit tests in parallel? Do they have to support running the tests with the surefire parallel parameter set to methods?
hallonbat:1559572884:2019-06-03T22:41:24.102+0000:1559572884:2019-06-03T22:41:24.102+0000:I have been looking at the code now and I must admit that my knowledge of JUnit internals is not the best so I might have missed something. Is there any way to know in the @After annotated tearDown method that the currently running test method is the last in the test class and that it is time to stop the camel context? From my point of view that is why we have the @AfterClass annotation to be able to run code after all test methods have been executed. So for now I am inclined to move the tearDown back to a static @AfterClass annotated method. Since the @AfterClass method needs to be static, doing that would mess up test classes that override doPostTearDown and/or cleanupResources, expecting them to be executed after the camel context is stopped. Any input or suggestions on how to fix it?
davsclaus:1559774138:2019-06-06T06:35:38.134+0000:1559774138:2019-06-06T06:35:38.134+0000:Yeah this is a bit tricky to do. I took a look and created a PR with a fix
https://github.com/apache/camel/pull/2963

Feedback is welcome"
0,CAMEL-13490,New Feature,Major,None,3.0.0-M3,"
None
",Resolved,Fixed,3.0.0-M3,Zoran Regvart,Zoran Regvart,0,1,2019-05-07 10:37:05+00:00,2019-05-07 12:07:15+00:00,"Using API keys in query parameters as the calling code is quite a bit removed from the component performing the HTTP call, making it difficult to introduce additional query parameters not referenced in the request definition.


When API key in query parameters is defined in the OpenAPI specification's securityDefinition then RestProducerFactory::createProducer invocation needs to include those parameters the queryParameters.",
0,CAMEL-13489,Bug,Minor,None,"2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-05-06 17:27:43+00:00,2019-05-07 12:58:18+00:00,"Assuming we have a simple route like:




from(""undertow:http://localhost:{{port}}/incompatibleData"")
    .transform().constant(Collections.singletonMap(""key"", ""val""));




This code will cause an NPE on UndertowConsumer because the body cannot be converted to a ByteBuffer [1], instead of an NPE we should use mandatoryConvertTo so the exception is more clear.


[1] https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowConsumer.java#L156",
0,CAMEL-13488,Improvement,Minor,None,4.x,"
None
",Open,Unresolved,4.x,Andrea Cosentino,Luca Burgazzoli,0,1,2019-05-06 17:24:11+00:00,2023-08-09 09:26:17+00:00,"We should support operations against infinispan counters, see https://github.com/infinispan/infinispan/blob/master/documentation/src/main/asciidoc/user_guide/counters.adoc",
0,CAMEL-13487,Task,Major,3.0.0-M2,3.0.0,"
None
",Closed,Won't Fix,3.0.0,Thomas Diesler,Thomas Diesler,0,1,2019-05-06 13:43:16+00:00,2019-05-10 08:00:02+00:00,"java.lang.NoClassDefFoundError: Failed to link org/apache/camel/component/dns/types/DnsConverterLoader (Module ""org.apache.camel.component.dns"" from local module loader @5d740a0f (finder: local module finder @214b199c (roots: /Users/tdiesler/git/wildfly-camel/itests/standalone/smoke/target/wildfly-16.0.0.Final/modules,/Users/tdiesler/git/wildfly-camel/itests/standalone/smoke/target/wildfly-16.0.0.Final/modules/system/layers/fuse,/Users/tdiesler/git/wildfly-camel/itests/standalone/smoke/target/wildfly-16.0.0.Final/modules/system/layers/base))): org/apache/camel/spi/TypeConverterLoader




Components should define their direct dependencies as such. i.e. In this case camel-api is trasitively reachable through camel-cloud, which would not work in a modular environment.","tdiesler:1557270026:2019-05-08T07:00:26.944+0000:1557270234:2019-05-08T07:03:54.295+0000:In case this is not clear. If ...

* A uses type from B and C 
* B uses type from C

it would be wrong to define the dependency graph like  this

{code}
A -> B -> C
{code}

instead, the dependency graph should be defined like this 

{code}
A -> B,C 
B -> C
{code}

In our case, camel-dns currently says that it uses types from camel-cloud. camel-cloud says that it uses types from camel-api.
In reality camel-dns also uses types from camel-api, but does not says so.

Build and runtime currenly only work because maven flattens the classpath. In OSGi this would be a problem too and I suspect it only works because the OSGi tooling silently adds the missing dependency from camel-dns to camel-api, which is generally incorrect but in most cases not problematic (which does still not make it right)


tdiesler:1557446402:2019-05-10T08:00:02.748+0000:1557446402:2019-05-10T08:00:02.748+0000:I found lots of these case and it may probably be futile to attempt to fix this at the POM level. Maven works like this after all. Instead, I'll fix it at the layer that defines the modularity wiring (i.e. wildfly-camel)"
0,CAMEL-13486,Sub-task,Trivial,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Onder Sezgin,1,1,2019-05-06 12:02:23+00:00,2022-09-02 11:28:26+00:00,this is an old jar. Not tried. Maybe it is helpful but it is good to such document to describe steps to use a tool to do on-the-fly checkstyle,
0,CAMEL-13485,Sub-task,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Onder Sezgin,0,1,2019-05-06 11:59:49+00:00,2022-09-02 11:28:19+00:00,No Desc,
0,CAMEL-13484,Improvement,Trivial,None,,"

help-wanted

",Resolved,Won't Fix,None,Unassigned,Onder Sezgin,1,1,2019-05-06 11:57:20+00:00,2020-02-28 09:00:29+00:00,"for this link


https://camel.apache.org/set-up-your-ide.html


create an adoc page or adjust one of them (one example might be building....)


https://github.com/apache/camel/tree/master/docs/user-manual/modules/ROOT/pages",onders:1557115080:2019-05-06T11:58:00.128+0000:1557115080:2019-05-06T11:58:00.128+0000:Contributions are welcome
0,CAMEL-13483,New Feature,Major,2.22.4,None,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Chris,0,2,2019-05-06 08:26:04+00:00,2019-05-28 03:56:18+00:00,"When starting a file consumer you configure a folder to poll.
When the camel context does not have read access on the folder, there is no error (or even warning), that route just starts.
But when saving files into the folder, they are not picked up and there is no further message.


This issue was raised on stackoverflow: https://stackoverflow.com/questions/55920217/camel-file-consumer-when-folder-is-not-accessible


 


Ideally, the file consumer would check at startup if it has access to the folder (we should propably check for write access here, but read access could also be enough?)


If the component (/context) does not have the required access to the folder, it should throw the error and exit the context (so it isn't started in a failure state).


This option should be disabled by default.


Also we should think about a way to configure the behavior:
1. For what permission should the consumer check (read / read-write)
2. What should happen when the permission is not given? (just an error / error + stop route / error + stop context)
As always, we should make this configurable via a custom bean.","betoflowv93:1558697885:2019-05-24T19:38:05.408+0000:1558697885:2019-05-24T19:38:05.408+0000:Hi.

I have just sent a PR for this issue.
I added a new option called startingDirectoryMustHaveAccess similar to startingDirectoryMustExist. It checks that the directory has read and write permissions.

Could you please give it a look.

Best,
Roberto."
0,CAMEL-13452,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Dmitry Volodin,Dmitry Volodin,0,1,2019-04-24 12:02:32+00:00,2022-09-02 11:27:58+00:00,No Desc,
0,CAMEL-13451,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,2,2019-04-24 09:16:19+00:00,2019-05-12 09:51:44+00:00,No Desc,davsclaus:1556235748:2019-04-26T07:42:28.464+0000:1556235748:2019-04-26T07:42:28.464+0000:Isn't this done and this ticket can be resolved?
0,CAMEL-13450,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-04-24 09:13:58+00:00,2019-04-30 08:57:38+00:00,No Desc,
0,CAMEL-13449,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-24 08:34:14+00:00,2019-04-26 10:15:09+00:00,It seems there are only a few tangles left to make it possible to move bean component and language out of camel-core,"davsclaus:1556091277:2019-04-24T15:34:37.691+0000:1556091277:2019-04-24T15:34:37.691+0000:Okay working on getting bean language untangled first, then the bean component secondly. 
davsclaus:1556150300:2019-04-25T07:58:20.504+0000:1556150300:2019-04-25T07:58:20.504+0000:okay the separation of bean component from camel-core can now compile, but there are a few other spots in camel-core that has a hardcoded dependency on it, would be nice to get that facaded as well, so it can be even more separated
davsclaus:1556150673:2019-04-25T08:04:33.600+0000:1556150673:2019-04-25T08:04:33.600+0000:The BeanRefier can only be moved when we get the model moved out of camel-core, as it requires the BeanDefinition.

As we have the same problem for camel-hystrix, we could consider having a camel-model-spi JAR that has a set of definitions that can be externalized
davsclaus:1556157206:2019-04-25T09:53:26.046+0000:1556235655:2019-04-26T07:40:55.801+0000:Two things left in camel-core that imports camel-bean

- BeanRefiier *DONE*
- SubscribeMethodProcessor *DONE*
- Remove bean / class component from camel-core-starter (spring boot) *DONE*"
0,CAMEL-13448,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-04-24 08:22:21+00:00,2019-04-26 07:42:37+00:00,No Desc,
0,CAMEL-13447,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-04-24 08:08:55+00:00,2019-04-26 07:42:01+00:00,No Desc,
0,CAMEL-13446,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Thomas Dalbo,0,3,2019-04-23 13:53:01+00:00,2019-04-24 08:13:58+00:00,"I think due to CAMEL-13442 refactoring, there's a generated sources path that's looking in the wrong place when camel-xpath tries to build.  Here's the stacktrace:




[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: XPath 3.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:4.1.0:cleanVersions (versions) @ camel-xpath ---
[INFO] 
[INFO] --- maven-resources-plugin:3.1.0:resources (default-resources) @ camel-xpath ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /home/tdalbo/Programming/upstream/apache/camel/components/camel-xpath/src/main/resources
[INFO] 
[INFO] --- flatten-maven-plugin:1.1.0:flatten (default-cli) @ camel-xpath ---
[INFO] Generating flattened POM of project org.apache.camel:camel-xpath:jar:3.0.0-SNAPSHOT...
[INFO] 
[INFO] --- maven-compiler-plugin:3.8.0:compile (default-compile) @ camel-xpath ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 8 source files to /home/tdalbo/Programming/upstream/apache/camel/components/camel-xpath/target/classes
[INFO] 
[INFO] --- camel-package-maven-plugin:3.0.0-SNAPSHOT:prepare-components (generate) @ camel-xpath ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.298 s
[INFO] Finished at: 2019-04-23T07:42:30-06:00
[INFO] Final Memory: 24M/78M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.0.0-SNAPSHOT:prepare-components (generate) on project camel-xpath: Error loading language model from camel-core. Reason: java.io.FileNotFoundException: /home/tdalbo/Programming/upstream/apache/camel/core/camel-core/target/classes/org/apache/camel/model/language/xpath.json (No such file or directory) -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException","acosentino:1555999766:2019-04-23T14:09:26.459+0000:1555999766:2019-04-23T14:09:26.459+0000:I cannot reproduce this on master. Did you run a git clean -df to remove old folders, if any?
tdalbo:1556000044:2019-04-23T14:14:04.543+0000:1556000044:2019-04-23T14:14:04.543+0000:Yup, as well as making sure I was doing mvn clean as well.  I did a recent fast-forward with my fork, it could be possible that there's something lingering around that wasn't caught by those two commands.

But it's reproducing pretty reliably for me.  
acosentino:1556000187:2019-04-23T14:16:27.670+0000:1556000187:2019-04-23T14:16:27.670+0000:Lets see if [~davsclaus] is able to reproduce on his end
acosentino:1556001596:2019-04-23T14:39:56.413+0000:1556001596:2019-04-23T14:39:56.413+0000:it's 'mvn clean install' right?
tdalbo:1556003451:2019-04-23T15:10:51.509+0000:1556003451:2019-04-23T15:10:51.509+0000:That's right.  And I just did a fresh clone & build, and it still failed.  Unless my local config changed since the last time I've built, it seems reproducible on my end. 
davsclaus:1556005733:2019-04-23T15:48:53.246+0000:1556005733:2019-04-23T15:48:53.246+0000:Ah darn yeah its a chicken and egg problem. We should consider moving all unit tests of camel-core to a separate module, then we can have better build ordering.
tdalbo:1556006842:2019-04-23T16:07:22.777+0000:1556007153:2019-04-23T16:12:33.052+0000:-It looks like the resource is there at the right time, but under camel-core/target instead of where it's looking in core/camel-core.  Excuse my unfamiliarity with the build order & structure, but do those sources then get copied to core/camel-core/target after the components are all built?-

edit:  disregard - that root level folder was a leftover from an older version.  "
0,CAMEL-13445,Task,Major,None,None,"
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-23 12:43:10+00:00,2019-04-26 13:38:04+00:00,No Desc,
0,CAMEL-13444,Improvement,Minor,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Unassigned,Claus Ibsen,0,2,2019-04-23 10:19:02+00:00,2019-05-16 02:58:27+00:00,"camel-example-pojo-messaging/src/main/java/org/apache/camel/example/pojo_messaging


Should just be 


org.apache.camel.example.pojo


Contributions for a PR is welcome","dimitrisli:1557932183:2019-05-15T22:56:23.706+0000:1557932183:2019-05-15T22:56:23.706+0000:[~davsclaus] thanks for raising, I've picked this one up. Addressed in: https://github.com/apache/camel/pull/2922"
0,CAMEL-13443,Bug,Minor,2.23.1,3.8.0,"
None
",Resolved,Fixed,3.8.0,Claus Ibsen,Florian Wermelskirchen,0,2,2019-04-23 08:37:03+00:00,2020-12-21 13:36:07+00:00,"I use CamelBlueprintTestSupport for my JUnit Tests. CamelBlueprintTestSupport keeps FileLocks on jar Files in target/test-bundles. Due to this, my Tests fails on Jenkins, because of FileNotFoundException (too many open files). My current workaround is to Run every Test in a single JVM.","davsclaus:1556494944:2019-04-29T07:42:24.430+0000:1556494944:2019-04-29T07:42:24.430+0000:Are you able to find out which files it has a lock on? I wonder if its the test bundle itself, or the karaf bundles or something. eg if the former its maybe something in camel we can fix, but the latter may be in apache felix/karaf etc.
FloDev:1556501447:2019-04-29T09:30:47.571+0000:1556501447:2019-04-29T09:30:47.571+0000:One Jar is named like my test Class and it contains only my blueprint.xml in OSGI-INF. The other one is named configAdminInitBundle. I guess they are created in CamelBlueprintHelper createConfigAdminInitBundle and createTestBundle
davsclaus:1556502126:2019-04-29T09:42:06.416+0000:1556502126:2019-04-29T09:42:06.416+0000:Okay try to look in the camel-test-blueprint source code and see if there is some place something needs to be closed when the test stops, there may be some file streams etc that should be closed.


davsclaus:1565093286:2019-08-06T20:08:06.913+0000:1565093286:2019-08-06T20:08:06.913+0000:What OS platform are you using for your Jenkins?
FloDev:1565132199:2019-08-07T06:56:39.938+0000:1565132199:2019-08-07T06:56:39.938+0000:It´s running on openSUSE Leap 15.0
davsclaus:1569890583:2019-10-01T08:43:03.271+0000:1569890583:2019-10-01T08:43:03.271+0000:Yeah it may be a bit more slower now. Anyone able to dive in and try to find out would be appreciated.
davsclaus:1608517421:2020-12-21T10:23:41.270+0000:1608517421:2020-12-21T10:23:41.270+0000:Okay so this is only per unit test that the open files are kept but will be closed when the entire test suite is done. And as such if you run camel-test-blueprint as test itself it may open 400 files to run all its tests.
davsclaus:1608528103:2020-12-21T13:21:43.941+0000:1608528103:2020-12-21T13:21:43.941+0000:Okay have some more code that closes the file handles. But also found out there is a bug in tiny bundle, but switching to a newer 3.0 version that seems to close file handles better.
davsclaus:1608528967:2020-12-21T13:36:07.750+0000:1608528967:2020-12-21T13:36:07.750+0000:Okay the file handles gets closed better now, and running all the tests in camel-test-blueprint does not grow file handles, and they go between 100-250 or so during testing."
0,CAMEL-13442,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-23 08:31:49+00:00,2019-04-23 11:19:56+00:00,We can move more xml stuff out of camel-core such as the xpath language,
0,CAMEL-13441,Improvement,Minor,2.23.1,3.8.0,"
None
",Resolved,Won't Fix,3.8.0,Claus Ibsen,Xilai Dai,0,2,2019-04-22 06:50:35+00:00,2021-01-06 11:56:28+00:00,"The 1.0-alpha-2 version is still used by camel-jms and camel-sjms2 components as JMS 2.0 API dependency.


<geronimo-jms2-spec-version>1.0-alpha-2</geronimo-jms2-spec-version>


<bundle dependency='true'>mvn:org.apache.geronimo.specs/geronimo-jms_2.0_spec/1.0-alpha-2</bundle>


The javax.jms/javax.jms-api/2.0.1 is already available in Maven centre (provided by Oracle).
(https://search.maven.org/classic/#search%7Cgav%7C1%7Cg%3A%22javax.jms%22%20AND%20a%3A%22javax.jms-api%22)


There are options, 1) using this javax.jms/javax.jms-api/2.0.1 directly, as it's already OSGi friendly. 2) wrap a servicemix one for it.


Is License a problem? I see the javax.jms/javax.jms-api/2.0.1 is CDDL.","davsclaus:1555902499:2019-04-22T11:08:19.916+0000:1555902499:2019-04-22T11:08:19.916+0000:If we can use option 1, then you are welcome to provide a PR
davsclaus:1609904955:2021-01-06T11:49:15.193+0000:1609904955:2021-01-06T11:49:15.193+0000:Yeah CDDL is accepted
https://www.apache.org/legal/resolved.html
davsclaus:1609905379:2021-01-06T11:56:19.958+0000:1609905379:2021-01-06T11:56:19.958+0000:Can you Jakarta EE instead
https://search.maven.org/artifact/jakarta.jms/jakarta.jms-api/2.0.3/jar

However Apache Artemis is using that old geronimo and so is others. As its a spec JAR then the JMS client need to bring in what JAR they want to use. So lets just leave it as is."
0,CAMEL-13440,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Guillaume Nodet,Claus Ibsen,0,1,2019-04-20 11:02:05+00:00,2020-03-04 08:57:25+00:00,"We should look at if its possible to refactor and cleanup camel-core to no longer use RouteContext. Its something that was transient during building the routes. But we can maybe avoid using it and rely more on CamelContext. And RouteContext dont have any use at runtime while processing messages, so it would be nice to try to get rid of it.","davsclaus:1555729340:2019-04-20T11:02:20.978+0000:1576748182:2019-12-19T17:36:22.494+0000:[~gnodet] you had some thoughts on this
davsclaus:1555973814:2019-04-23T06:56:54.168+0000:1555973814:2019-04-23T06:56:54.168+0000:Did a bit of cleanup around dataformats"
0,CAMEL-13439,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-20 11:00:12+00:00,2019-04-23 06:56:34+00:00,"When you have data formats defined via ids, such as




    <dataFormats>
        <json library=""Jackson"" id=""myjson""/>
        <jaxb contextPath=""org.apache.camel.component.dozer.example.abc"" id=""myjaxb""/>
    </dataFormats>",
0,CAMEL-13438,Bug,Major,"2.23.2, 3.0.0-M2","2.24.0, 3.0.0-M3, 2.23.3, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 2.23.3, 3.0.0",Maciej Swiderski,Duncan Doyle,0,1,2019-04-19 16:51:05+00:00,2019-04-22 11:47:21+00:00,"Currently, the Camel-JBPM WorkItemHandler wraps every exception coming from a Camel Route into a WorkItemRuntimeException. Although this is a safe way to handle the exceptions, it's also very inflexible, as we can only return a single exception type, and thus only react to a single exception type in our BPMN2 model.


We should add a ""HandleExceptions"" WIH parameter to indicate whether any exceptions should be handled by the WorkItemHandler or not. That way, we can make the Camel Routes responsible for handling the exceptions, which gives us much greater flexibility wrt error and exception handling.","mccloud:1555664839:2019-04-19T17:07:19.375+0000:1555664839:2019-04-19T17:07:19.375+0000:PR: [https://github.com/apache/camel/pull/2875]
mccloud:1555666125:2019-04-19T17:28:45.825+0000:1555666125:2019-04-19T17:28:45.825+0000:We also need to backport this to 2.23-2"
0,CAMEL-13437,Bug,Major,2.23.2,"2.24.0, 3.0.0-M3, 2.23.3, 2.22.5, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 2.23.3, 2.22.5, 3.0.0",Unassigned,Duncan Doyle,0,1,2019-04-19 16:15:05+00:00,2019-04-22 11:47:39+00:00,"ThrowExceptionProcessor uses this line of code to retrieve the constructor of an Exception class:




Constructor<?> constructor = type.getDeclaredConstructor(String.class);



The problem is that this will only find constructors defined in the actual class itself, not in its superclasses. This forces users to unnecessarily implement a constructor that excepts a String in their custom exception classes.


Easy fix, use the following method:




Constructor<?> constructor = type.getConstructor(String.class);



 Will fix and create a PR.",mccloud:1555666060:2019-04-19T17:27:40.991+0000:1555666060:2019-04-19T17:27:40.991+0000:PR: [https://github.com/apache/camel/pull/2876]
0,CAMEL-13436,Improvement,Major,3.0.0,3.19.0,"
None
",Resolved,Fixed,3.19.0,Claus Ibsen,John Poth,0,2,2019-04-19 16:05:11+00:00,2022-09-10 06:51:16+00:00,"Also add tests to different components that use TLS


http://openjdk.java.net/jeps/332",
0,CAMEL-13435,New Feature,Major,None,3.0.0.RC2,"
None
",Resolved,Fixed,3.0.0.RC2,Andrea Cosentino,Andrea Cosentino,0,1,2019-04-19 09:52:08+00:00,2019-09-11 15:34:34+00:00,No Desc,
0,CAMEL-13434,Bug,Major,3.0.0,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Jiri Ondrusek,0,1,2019-04-18 12:47:00+00:00,2019-04-26 09:38:06+00:00,"During validation of https://issues.apache.org/jira/browse/CAMEL-13426, I've run integration tests in camel-box-component and results contains a lot of error - errors were there before fix of CAMEL-13426. Tests should be validated and fixed or ignored.


Current test results:


[ERROR] Failures: 
[ERROR]   BoxSearchManagerIntegrationTest.testSearchFolder:61->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 searchFolder file found expected:<1> but was:<0>
[ERROR] Errors: 
[ERROR]   BoxCollaborationsManagerIntegrationTest.testAddFolderCollaboration:100 Runtime
[ERROR]   BoxFilesManagerIntegrationTest.testUpdateFileMetadata:394->AbstractBoxTestSupport.requestBodyAndHeaders:80 » CamelExecution
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxGroupsManagerIntegrationTest.setupTest:231->createTestGroup:247 » BoxAPIResponse
[ERROR]   BoxTasksManagerIntegrationTest.testAddAssignmentToTask:70->AbstractBoxTestSupport.requestBodyAndHeaders:80 » CamelExecution
[ERROR]   BoxTasksManagerIntegrationTest.testGetFileTasks:134->AbstractBoxTestSupport.requestBody:85 » CamelExecution
[ERROR]   BoxTasksManagerIntegrationTest.testGetTaskAssignments:166->AbstractBoxTestSupport.requestBody:85 » CamelExecution
[ERROR]   BoxUsersManagerIntegrationTest.testCreateAppUser:96->AbstractBoxTestSupport.requestBodyAndHeaders:80 » CamelExecution
[ERROR]   BoxUsersManagerIntegrationTest.testCreateEnterpriseUser:126->AbstractBoxTestSupport.requestBodyAndHeaders:80 » CamelExecution
[ERROR]   BoxUsersManagerIntegrationTest.testDeleteUser:142 » BoxAPIResponse The API ret...
[ERROR]   BoxUsersManagerIntegrationTest.testGetAllEnterpriseOrExternalUsers:191->AbstractBoxTestSupport.requestBodyAndHeaders:80 » CamelExecution
[ERROR]   BoxUsersManagerIntegrationTest.testUpdateUserInfo:241 » BoxAPIResponse The API...
[ERROR]   BoxUsersManagerIntegrationTest.testmMoveFolderToUser:247 » BoxAPIResponse The ...","jondruse:1555562842:2019-04-18T12:47:22.577+0000:1555562842:2019-04-18T12:47:22.577+0000:I'm working on this issue.
jondruse:1556236219:2019-04-26T07:50:19.922+0000:1556236219:2019-04-26T07:50:19.922+0000:PR https://github.com/apache/camel/pull/2886"
0,CAMEL-13433,Bug,Major,"2.22.1, 2.23.2, 3.0.0-M1","2.24.0, 3.0.0-M3, 2.23.3, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 2.23.3, 3.0.0",Andrea Cosentino,MykhailoVlakh,0,3,2019-04-18 10:20:46+00:00,2019-04-23 09:17:34+00:00,"My code uploads large files to S3 storage (500 MB and bigger). I create an exchange with properly set meta information headers including the CamelAwsS3ContentLength, as a body I provide a stream. Everything worked well in Camel 2.14.3 but when I upgraded to Camel ti version 2.22.1 I suddenly began getting OOM issues from time to time. I did some debugging and found that the issue is in S3Producer that loads content of the body stream into memory.




public void processSingleOp(final Exchange exchange) throws Exception {

ObjectMetadata objectMetadata = determineMetadata(exchange);  <== here we already set length

File filePayload = null;
InputStream is = null;
ByteArrayOutputStream baos = null;
Object obj = exchange.getIn().getMandatoryBody();
PutObjectRequest putObjectRequest = null;
// Need to check if the message body is WrappedFile
if (obj instanceof WrappedFile) {
   obj = ((WrappedFile<?>)obj).getFile();
}
if (obj instanceof File) {
   filePayload = (File)obj;
   is = new FileInputStream(filePayload);
} else {
   is = exchange.getIn().getMandatoryBody(InputStream.class);
   baos = determineLengthInputStream(is);        <====== the issue is here
   objectMetadata.setContentLength(baos.size());
   is = new ByteArrayInputStream(baos.toByteArray());
}

...




This is a defect since, as I mentioned, I already provide content length via headers and in the first line of the method populates that information into object metadata.


I think there should be some if check that skips content length size calculation if it is already known.","acosentino:1555560158:2019-04-18T12:02:38.337+0000:1555560256:2019-04-18T12:04:16.350+0000:The problem is the overidding of the lenght or the input stream read? 

 

Because if it's the overidding we can do

 
{code:java}
is = exchange.getIn().getMandatoryBody(InputStream.class);
baos = determineLengthInputStream(is);
if (!(objectMetadata.getContentLength() > 0)) {
objectMetadata.setContentLength(baos.size());
is = new ByteArrayInputStream(baos.toByteArray());
} else {
is = new ByteArrayInputStream(baos.toByteArray());
}
{code}
acosentino:1555560972:2019-04-18T12:16:12.549+0000:1555560972:2019-04-18T12:16:12.549+0000:This should be sufficient. In one case we set the size from baos, in the other case we use baos but we already know the lenght from objectMetadata
mvlakh:1555653200:2019-04-19T13:53:20.666+0000:1555653200:2019-04-19T13:53:20.666+0000:Hello [~ancosen], thank you for your time spent on this issue.

The biggest issue is that the producer loads entire content into memory and this causes OOM if content is large. I believe this is incorrect, especially if it does this only to calculate size of the provided content that is already known. Cannot we just process input as stream to make sure that we won't occupy all heap space when we upload large content? I think this should be the right fix. Do you agree?
acosentino:1555653631:2019-04-19T14:00:31.905+0000:1555653631:2019-04-19T14:00:31.905+0000:I think we still need to know the size if it's not provided, but yes, we can skip that part if the content length has been already provided. I'll try to push a fix next week.
acosentino:1555653813:2019-04-19T14:03:33.927+0000:1555653813:2019-04-19T14:03:33.927+0000:Just to give a bit of context, the original fix was related to CAMEL-11728, to avoid a warn message.

I'm blaming myself for this. Let me work on this
mvlakh:1555713365:2019-04-20T06:36:05.285+0000:1555713365:2019-04-20T06:36:05.285+0000:yes this is what I think should be done. Thank you very much for your work on this. I think i will need to find some time to get sources so that next time i can provide a patch along with a reported issue to help you guys
davsclaus:1555973371:2019-04-23T06:49:31.038+0000:1555973371:2019-04-23T06:49:31.038+0000:Yeah good idea to grab the content-length if its already provided as a header and use that. And maybe add a little DEBUG logging that we are doing this, or that the length is to be determined by reading the data into memory. 

Also if you stream from eg http to s3 then we can maybe use the content-length header from HTTP, and read the stream as-is. There is an Exchange.CONTENT-LENGTH constant AFAIR."
0,CAMEL-13432,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-18 08:56:48+00:00,2019-04-18 09:55:47+00:00,We should rely on simple tokens being ${ } or $simple{ } for its functions. There is some code that would allow to change those but its not really in use and may not actually work in 100% situations. So lets cleanup this for camel 3. So deprecate in camel 2.x and remove in 3.,
0,CAMEL-13431,Bug,Major,2.21.2,,"
None
",Closed,Resolved,None,Unassigned,Vladimir Bogatyrov,0,2,2019-04-18 07:45:38+00:00,2019-04-18 13:15:50+00:00,"When both intercept() and onException() are applied to the route and maximumRedeliveries() is set, then interceptor is not called. If maximumRedelvieries() is removed, interceptor works. Here is an example:




public class MyRouteBuilder extends RouteBuilder {
    public void configure() {
        intercept()
                .setBody().constant(""Intercepted-message"");

        onException()
                .maximumRedeliveries(2) // comment this line to make intercept() work
                .log(""${body}"");

        from(""timer:mytimer?repeatCount=1&delay=1000"")
                .setBody().constant(""Hello Test"")
                .log(""${body}"");
    }
}","davsclaus:1555545366:2019-04-18T07:56:06.061+0000:1555545366:2019-04-18T07:56:06.061+0000:Can you try with a newer/latest version
Bogatyrov:1555564459:2019-04-18T13:14:19.891+0000:1555564459:2019-04-18T13:14:19.891+0000:Indeed, works fine in both 2.23.2 and 3.0.0-M2. I should have checked it before opening the issue.
Bogatyrov:1555564550:2019-04-18T13:15:50.670+0000:1555564550:2019-04-18T13:15:50.670+0000:Works fine in 2.23.2 and 3.0.0-M2"
0,CAMEL-13430,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-18 05:29:51+00:00,2019-04-29 06:03:37+00:00,"Lets avoid having functions such as


starts with
not contains


where there are space as that makes it a bit less obvious its a function name, and can also lead to: https://stackoverflow.com/questions/55705150/camel-simple-expression-inside-jsonpath-language


So instead if we use


startsWith
notContains",
0,CAMEL-13429,Improvement,Minor,3.0.0-M1,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Denis Istomin,Arian Treffer,0,3,2019-04-17 13:08:25+00:00,2019-08-23 20:56:57+00:00,"The following route configuration should accept the ""content-type"" parameter as one would expect for URLs like ""items/1/details.xml"":




rest(""items/"")
    .get(""{id}/details.{content-type}"")



Currently, ""content-type"" is not recognized as a parameter.


 


Maybe other separators, e.g. dash ""-"", should be supported as well.","davsclaus:1565090865:2019-08-06T19:27:45.647+0000:1565090865:2019-08-06T19:27:45.647+0000:Contributions is welcome
DenisIstomin:1565461408:2019-08-11T02:23:28.454+0000:1565461408:2019-08-11T02:23:28.454+0000:I'm working on this."
0,CAMEL-13428,Bug,Major,3.0.0-M2,"2.24.0, 3.0.0-M3, 2.23.3, 2.22.5, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 2.23.3, 2.22.5, 3.0.0",Tadayoshi Sato,Tadayoshi Sato,0,3,2019-04-17 11:22:08+00:00,2019-06-03 07:15:48+00:00,"When a Spring Boot application with camel-undertow is deployed on a Kubernetes environment, say OpenShift, responses with large data may get truncated.




$ curl -sv hello-camel-tasato-test.7e14.starter-us-west-2.openshiftapps.com > out
*   Trying 52.36.115.21...
* TCP_NODELAY set
* Connected to hello-camel-tasato-test.7e14.starter-us-west-2.openshiftapps.com (52.36.115.21) port 80 (#0)
> GET / HTTP/1.1
> Host: hello-camel-tasato-test.7e14.starter-us-west-2.openshiftapps.com
> User-Agent: curl/7.64.1
> Accept: */*
> 
< HTTP/1.1 200 OK
< Accept: */*
< User-Agent: curl/7.64.1
< Forwarded: for=27.95.227.48;host=hello-camel-tasato-test.7e14.starter-us-west-2.openshiftapps.com;proto=http;proto-version=
< Date: Wed, 17 Apr 2019 11:18:54 GMT
< X-Forwarded-Proto: http
< X-Forwarded-Port: 80
< X-Forwarded-For: 27.95.227.48
< Content-Length: 1009999
< X-Forwarded-Host: hello-camel-tasato-test.7e14.starter-us-west-2.openshiftapps.com
< Set-Cookie: a87d1be1aa3f6decad88f44c63db4670=7939401110c788ff04e98b94cb1b682f; path=/; HttpOnly
< Cache-control: private
< 
{ [921 bytes data]
* transfer closed with 698964 bytes remaining to read
* Closing connection 0




Notice the curl message: transfer closed with 698964 bytes remaining to read


It depends on the throughput of the network and the size of response data.","davsclaus:1555624570:2019-04-19T05:56:10.662+0000:1555624570:2019-04-19T05:56:10.662+0000:Does this only apply to camel 3, what about camel 2.x? Can we backport this ?
acosentino:1555624860:2019-04-19T06:01:00.883+0000:1555624860:2019-04-19T06:01:00.883+0000:I think we must backport on 2.x, 2.23.x and 2.22.x. I'm on it."
0,CAMEL-13427,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-17 10:29:10+00:00,2019-04-17 12:32:05+00:00,No Desc,
0,CAMEL-13426,Bug,Major,3.0.0,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Jiri Ondrusek,0,1,2019-04-17 10:27:58+00:00,2019-04-18 14:24:43+00:00,"When camel-box component is used to e.g. create task, it causes error code 400 and message ""Error parsing input model"".


How to simulate:
Run integrationtest BoxTasksManagerIntegrationTest#testAddFileTask","jondruse:1555468102:2019-04-17T10:28:22.028+0000:1555468102:2019-04-17T10:28:22.028+0000:I'm working on this issue.
jondruse:1555471735:2019-04-17T11:28:55.251+0000:1555471735:2019-04-17T11:28:55.251+0000:PR https://github.com/apache/camel/pull/2871"
0,CAMEL-13425,Improvement,Major,2.23.1,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Kamil,0,2,2019-04-16 21:17:22+00:00,2019-04-22 12:42:04+00:00,"Currently I can only enable/disable cache for PropertiesComponent.


I'd like to be able to enable caching, but programmatically invalidate cache on demand.


This should be rather simeple to implemet, something like:




public void invalidateCache() {
  this.cacheMap.clear();
}","davsclaus:1555478091:2019-04-17T13:14:51.886+0000:1555478091:2019-04-17T13:14:51.886+0000:Mind that even if you invalidate a cache then many of the property placeholders are only looked up once on startup etc. So if your use-case is that if you modify a application.properties file (for instance) and then invalidate cache, then all of its property keys/placeholders are automatic magically updated in Camel. Then that wont work, and its not designed to do so.
eximius:1555486387:2019-04-17T15:33:07.469+0000:1555486387:2019-04-17T15:33:07.469+0000:[~davsclaus] I know, let it be the first step.

Currently I do:
{code:java}
@Modified
public void modified(final MyConfiguration configuration) throws Exception {
  this.configuration = configuration;
  final CamelContext context = getContext();
  context.removeRoute(ID_ROUTE);
  context.addRoutes(this);
}
{code}
to overcome this, but this is pain:
{code:java}
@Activate public MyServiceImpl(@Reference final CamelContext camelContext, final MyConfiguration configuration) throws Exception { 
  super(camelContext); 
  this.configuration = configuration; 
  propertiesComponent = getContext().getComponent(""properties"", PropertiesComponent.class); 
  propertiesComponent.setCache(false); //<- :(
  getContext().addRoutes(this); 
}
{code}
davsclaus:1555906799:2019-04-22T12:19:59.006+0000:1555906799:2019-04-22T12:19:59.006+0000:You can stop/start the properties component and it will re-initialize itself"
0,CAMEL-13424,Bug,Major,2.23.1,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.23.4, 2.24.2, 3.0.0.RC1, 3.0.0, 2.25.0",Freeman Yue Fang,Maheswara Prasanna Govindasamy,0,6,2019-04-16 18:50:44+00:00,2019-07-12 19:39:12+00:00,"Rest component route id set in routebuilder is not accessible in processor. Below is the example


RouteBuilder:


rest(""/app"").get(""/test"").id(""REST-TEST"").to(""direct:test"").endRest();


from(""direct:test"").routeId(""TEST"").id(""TEST"").process(""TestProcessor"");


or


rest(""/app"").get(""/test"").route().routeId(""TEST"").id(""REST-TEST"")


Processor:


String routeId = exchange.getFromRouteId();{{}}


routeId is always random id in case of apache camel 2.23.x but works in 2.22.x versions.","bedla:1561550518:2019-06-26T20:01:58.492+0000:1561552080:2019-06-26T20:28:00.075+0000:Cannot reproduce this in 2.23.1. Passing unit test in attachment. [^Camel13424Test.java]. [~mahesgov] Is this related to any specific component? As I dont see the issue using restlet.
davsclaus:1562269677:2019-07-05T03:47:57.476+0000:1562269677:2019-07-05T03:47:57.476+0000:Could be fixed by CAMEL-13724
ffang:1562318804:2019-07-05T17:26:44.019+0000:1562318804:2019-07-05T17:26:44.019+0000:I will verify the testcase here
ffang:1562931532:2019-07-12T19:38:52.352+0000:1562931532:2019-07-12T19:38:52.352+0000:test case added in camel code base to ensure it works"
0,CAMEL-13423,Bug,Major,None,,"
None
",Resolved,Won't Fix,None,Viral Gohel,SUYASH MANI SHARMA,0,1,2019-04-16 13:22:23+00:00,2019-08-06 19:22:30+00:00,"Hi,


 


I have a URL like 


https://example.eu/v1/operator/%23%23%23%2B1%21000000000025


When I pass this URL to camel ahc, it converts the URL to 


https://idissuer.test.de.id-issuer.eu/v1/operator/%23%23%23+1!000000000025.


 


This is happening in UnsafeUriCharactersEncoder.encodeHttpUri method.


Even though ""+"" or ""!"" are not unsafe characters, it should be allowed to pass them as path parameter or query parameter.",
0,CAMEL-13422,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-16 08:12:00+00:00,2019-04-17 13:15:54+00:00,"Its bad design to use Java RMI and the work on CAMEL-13421 makes it better to remove this component as well, and deprecate it in 2.x",
0,CAMEL-13421,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-16 07:41:33+00:00,2019-04-17 13:16:03+00:00,Doing remote RPC calls via java bean serialization is a bad design and its not really much in use. Lets use the chance to get this removed for 3.x and deprecated in 2.x.,
0,CAMEL-13420,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-16 06:49:07+00:00,2019-04-16 07:00:21+00:00,No Desc,
0,CAMEL-13419,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-16 06:48:40+00:00,2019-04-16 06:58:45+00:00,No Desc,
0,CAMEL-13418,Improvement,Major,3.0.0-M3,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Claus Ibsen,0,1,2019-04-15 10:56:02+00:00,2019-04-19 06:48:18+00:00,"When building camel-spring, then the XSD lacks the docs


INFO] — camel-eip-documentation-enricher-maven-plugin:3.0.0-SNAPSHOT:eip-documentation-enricher (eip-documentation-enricher) @ camel-spring —
[INFO] Found 221 models to use when enriching the XSD schema
[WARNING] Cannot find documentation for name: dataFormatTypes in json schema: /Users/davsclaus/workspace/camel/components/camel-spring/target/../../../core/camel-core/target/classes/org/apache/camel/model/dataformat/jsonApi.json
[WARNING] Cannot find documentation for name: mainFormatType in json schema: /Users/davsclaus/workspace/camel/components/camel-spring/target/../../../core/camel-core/target/classes/org/apache/camel/model/dataformat/jsonApi.json


Its in the model in camel-core you need to have javadoc documentation",
0,CAMEL-13417,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-04-15 09:14:33+00:00,2019-04-17 13:12:42+00:00,"Now that we got a bit more moved out, its maybe a bit easier to move out the mock.","davsclaus:1555310059:2019-04-15T14:34:19.807+0000:1555310059:2019-04-15T14:34:19.807+0000:Okay got a bit further ahead and got parts of the mock component separated from camel-core. Still some things to do as the java dsl have some ""tricks"" when you build the model and its support of property placeholders and whatnot.
davsclaus:1555394643:2019-04-16T14:04:03.835+0000:1555394643:2019-04-16T14:04:03.835+0000:Okay got further ahead and have one last standing until we can move mock out of camel-core.
davsclaus:1555450955:2019-04-17T05:42:35.157+0000:1555462805:2019-04-17T09:00:05.891+0000:- Move mock out of camel-core into camel-mock *DONE*
- camel-dataset should depend on camel-mock and move its tests back to camel-core *DONE*

davsclaus:1555463715:2019-04-17T09:15:15.145+0000:1555477957:2019-04-17T13:12:37.072+0000:- deprecate mock api on NotifyBuilder in camel 2.x *DONE*
- deprecate camel-rmi on camel 2.x *DONE*"
0,CAMEL-13416,Improvement,Major,2.23.1,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Kamil,0,3,2019-04-12 18:46:06+00:00,2019-04-17 15:58:44+00:00,"I was following this documentation http://camel.apache.org/karaf.html in order to make Camel work in Karaf.


Many tutorials point to this configuration:




@Override
public void start(final BundleContext bundleContext) throws Exception {
  camelContext = new OsgiDefaultCamelContext(bundleContext);
  registrationCamelContext = bundleContext.registerService(CamelContext.class, camelContext, null);
  camelContext.start();
}




Unfortunately, when I install Camel in karaf:




karaf@root> feature:repo-add camel 2.23.1




only camel-core can be installed, while camel-core-osgi is missing.


Unfortunately camel-core contains only 




DefaultCamelContext



which causes classpath problems in Karaf. For example I import camel-http4, but I get:




Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http4://my.site due to: No component found with scheme: http4




or I import camel-jackson, but I get:




Caused by: java.lang.IllegalArgumentException: Data format 'json-jackson' could not be created. Ensure that the data format is valid and the associated Camel component is present on the classpath




The solution is to use:




OsgiDefaultCamelContext



which is located in camel-core-osgi, which is unavailable in Camel Karaf repo.","acosentino:1555288627:2019-04-15T08:37:07.065+0000:1555288627:2019-04-15T08:37:07.065+0000:If you use camel-http4 you need to install the related karaf feature
{code:java}
 features:install camel-http4{code}
acosentino:1555288684:2019-04-15T08:38:04.256+0000:1555288684:2019-04-15T08:38:04.256+0000:also that documentation is outdated, we are working on a new website.
eximius:1555301546:2019-04-15T12:12:26.694+0000:1555301546:2019-04-15T12:12:26.694+0000:[~ancosen],

of course I have both camel-http4 and camel-jackson installed, but if you are using DefaultCamelContext from camel-core instead of OsgiDefaultCamelContext from camel-core-osgi they are just not seen by Camel
davsclaus:1555307815:2019-04-15T13:56:55.897+0000:1555307815:2019-04-15T13:56:55.897+0000:If you setup camel yourself on osgi then you are self responsible for doing this correctly via osgi camel context and other bits you need. We only support out of the box camel-blueprint for osgi
eximius:1555378195:2019-04-16T09:29:55.021+0000:1555378195:2019-04-16T09:29:55.021+0000:[~davsclaus] - and this is the reason behind not adding camel-core-osgi to Camel Karaf feature repo?

 
davsclaus:1555379149:2019-04-16T09:45:49.822+0000:1555379149:2019-04-16T09:45:49.822+0000:camel-core-osgi is embedded into camel-blueprint on 2.x afair.
https://github.com/apache/camel/blob/camel-2.x/components/camel-blueprint/pom.xml#L151

You can install it yourself, or just install camel-blueprint
davsclaus:1555379244:2019-04-16T09:47:24.259+0000:1555379244:2019-04-16T09:47:24.259+0000:In Camel 3.x the modules has been modularized and camel-core-osgi is installed as part of camel-core. For 2.x its as-is, where you need to install camel-blueprint
eximius:1555418257:2019-04-16T20:37:37.820+0000:1555418376:2019-04-16T20:39:36.381+0000:{code:java}
karaf@root()> feature:list |grep camel
camel-blueprint | 2.23.1 | x | Started | camel-2.23.1 |

karaf@root()> bundle:install -s mvn:io.myapp/myapp/0.0.1
Bundle ID: 324
Error executing command: Error installing bundles:
 Unable to start bundle mvn:io.myapp/myapp/0.0.1: org.osgi.framework.BundleException: Unable to resolve myapp [324](R 324.0): missing requirement [myapp [324](R 324.0)] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.core.osgi)(version>=2.23.0)(!(version>=3.0.0))) Unresolved requirements: [[myapp [324](R 324.0)] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.core.osgi)(version>=2.23.0)(!(version>=3.0.0)))]{code}
are you sure?
davsclaus:1555478133:2019-04-17T13:15:33.465+0000:1555478133:2019-04-17T13:15:33.465+0000:Ah okay try installing camel-scr instead
eximius:1555487924:2019-04-17T15:58:44.328+0000:1555487924:2019-04-17T15:58:44.328+0000:Ok, it worked!"
0,CAMEL-13415,Bug,Minor,2.23.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Kamil,0,3,2019-04-12 18:22:51+00:00,2019-05-12 09:50:04+00:00,"I have very simple OSGI bundle, which uses just camel-core.


When I run it, an exception is thrown:




20:14:31.684 [Camel Thread #0 - LRUCacheFactory] DEBUG org.apache.camel.util.LRUCacheFactory - Warming up LRUCache ...
Exception in thread ""Camel Thread #0 - LRUCacheFactory"" java.lang.NoClassDefFoundError: sun/misc/Unsafe
at org.apache.camel.com.github.benmanes.caffeine.base.UnsafeAccess.load(UnsafeAccess.java:68)
at org.apache.camel.com.github.benmanes.caffeine.base.UnsafeAccess.<clinit>(UnsafeAccess.java:42)
at org.apache.camel.com.github.benmanes.caffeine.cache.BLCHeader$DrainStatusRef.<clinit>(BoundedLocalCache.java:3487)
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.apache.camel.com.github.benmanes.caffeine.cache.LocalCacheFactory.newBoundedLocalCache(Unknown Source)
at org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalManualCache.<init>(BoundedLocalCache.java:3043)
at org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalManualCache.<init>(BoundedLocalCache.java:3039)
at org.apache.camel.com.github.benmanes.caffeine.cache.Caffeine.build(Caffeine.java:926)
at org.apache.camel.util.LRUCache.<init>(LRUCache.java:124)
at org.apache.camel.util.LRUCache.<init>(LRUCache.java:92)
at org.apache.camel.util.LRUCache.<init>(LRUCache.java:79)
at org.apache.camel.util.LRUCache.<init>(LRUCache.java:66)
at org.apache.camel.util.LRUCacheFactory.newLRUCache(LRUCacheFactory.java:89)
at org.apache.camel.util.LRUCacheFactory.lambda$warmUp$0(LRUCacheFactory.java:66)
at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.ClassNotFoundException: sun.misc.Unsafe cannot be found by org.apache.camel.camel-core_2.23.1
at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:511)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:422)
at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:414)
at org.eclipse.osgi.internal.loader.ModuleClassLoader.loadClass(ModuleClassLoader.java:153)
at java.lang.ClassLoader.loadClass(Unknown Source)
... 18 more
! Failed to start bundle adapters.service-0.0.1, exception activator error Could not initialize class org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache from: sun.reflect.NativeConstructorAccessorImpl:newInstance0#-2
org.osgi.framework.BundleException: Exception in adapters.service.Activator.start() of bundle adapters.service.
at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:803)
at org.eclipse.osgi.internal.framework.BundleContextImpl.start(BundleContextImpl.java:732)
at org.eclipse.osgi.internal.framework.EquinoxBundle.startWorker0(EquinoxBundle.java:1005)
at org.eclipse.osgi.internal.framework.EquinoxBundle$EquinoxModule.startWorker(EquinoxBundle.java:357)
at org.eclipse.osgi.container.Module.doStart(Module.java:584)
at org.eclipse.osgi.container.Module.start(Module.java:452)
at org.eclipse.osgi.internal.framework.EquinoxBundle.start(EquinoxBundle.java:431)
at aQute.launcher.Launcher.startBundles(Launcher.java:519)
at aQute.launcher.Launcher.activate(Launcher.java:425)
at aQute.launcher.Launcher.run(Launcher.java:303)
at aQute.launcher.Launcher.main(Launcher.java:149)
Caused by: java.lang.NoClassDefFoundError: Could not initialize class org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
at java.lang.reflect.Constructor.newInstance(Unknown Source)
at org.apache.camel.com.github.benmanes.caffeine.cache.LocalCacheFactory.newBoundedLocalCache(Unknown Source)
at org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalManualCache.<init>(BoundedLocalCache.java:3043)
at org.apache.camel.com.github.benmanes.caffeine.cache.BoundedLocalCache$BoundedLocalManualCache.<init>(BoundedLocalCache.java:3039)
at org.apache.camel.com.github.benmanes.caffeine.cache.Caffeine.build(Caffeine.java:926)
at org.apache.camel.util.LRUCache.<init>(LRUCache.java:124)
at org.apache.camel.util.LRUWeakCache.<init>(LRUWeakCache.java:61)
at org.apache.camel.util.LRUWeakCache.<init>(LRUWeakCache.java:57)
at org.apache.camel.util.LRUCacheFactory.newLRUWeakCache(LRUCacheFactory.java:152)
at org.apache.camel.management.MBeanInfoAssembler.start(MBeanInfoAssembler.java:74)
at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
at org.apache.camel.management.DefaultManagementMBeanAssembler.doStart(DefaultManagementMBeanAssembler.java:121)
at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
at org.apache.camel.management.DefaultManagementAgent.doStart(DefaultManagementAgent.java:395)
at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
at org.apache.camel.management.DefaultManagementStrategy.doStartManagementStrategy(DefaultManagementStrategy.java:253)
at org.apache.camel.management.ManagedManagementStrategy.doStart(ManagedManagementStrategy.java:206)
at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3342)
at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
at adapters.service.Activator.start(Activator.java:28)
at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:782)
at org.eclipse.osgi.internal.framework.BundleContextImpl$3.run(BundleContextImpl.java:1)
at java.security.AccessController.doPrivileged(Native Method)
at org.eclipse.osgi.internal.framework.BundleContextImpl.startActivator(BundleContextImpl.java:775)
... 10 more





Camel-core bundle should Import sun.misc package


 


Until this bug is resolved, a workaround is to add ""-runproperties: org.osgi.framework.bootdelegation=""sun.misc"""" to bnd.bnd file","acosentino:1555064816:2019-04-12T18:26:56.906+0000:1555064816:2019-04-12T18:26:56.906+0000:What is the camel version? What is the route? How is the bundle?
eximius:1555066510:2019-04-12T18:55:10.073+0000:1555066541:2019-04-12T18:55:41.114+0000:1) Camel version 2.23.1

2) Route:
{code:java}
@Component(immediate = true, service = MyService.class)
public class MyServiceImpl extends RouteBuilder implements MyService {

  public static interface MySender{
    public void send(@Body final Object body);
  } 

  private final MySender sender;

  @Activate
  public MyServiceImpl(@Reference final CamelContext camelContext) throws Exception {
    super(camelContext);
    getContext().addRoutes(this);
    sender = ProxyHelper.createProxy(camelContext.getEndpoint(""direct:mySender""), MySender.class);
  }

  @Override
  public void configure() throws Exception {
    from(""direct:mySender"")
    .to(""log:test"");
  }
}{code}
Activator:
{code:java}
public class Activator implements BundleActivator {

  private ServiceRegistration<CamelContext> registrationCamelContext;

  private CamelContext camelContext;

  @Override
  public void start(final BundleContext bundleContext) throws Exception {
    camelContext = new DefaultCamelContext();
    registrationCamelContext = bundleContext.registerService(CamelContext.class, camelContext, null);

  camelContext.start();
  }
}{code}
3) The only one bundle I'm importing is camel-core
davsclaus:1556495129:2019-04-29T07:45:29.759+0000:1556495129:2019-04-29T07:45:29.759+0000:What osgi container do you run this with? 
eximius:1556520161:2019-04-29T14:42:41.375+0000:1556520161:2019-04-29T14:42:41.375+0000:In Eclipse using bndtools workspace
davsclaus:1557625804:2019-05-12T09:50:04.391+0000:1557625804:2019-05-12T09:50:04.391+0000:You need to create an OSGi compatible CamelContext and not use DefaultCamelContext. Also on OSGi we only support camel-blueprint out of the box, for other combos you are more on your own"
0,CAMEL-13414,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,bd2019us,0,2,2019-04-12 15:16:15+00:00,2019-04-12 16:37:59+00:00,"Hello,
I found that System.currentTimeMillis() can be used here instead of new Date.getTime().
Since new Date() is a thin wrapper of light method System.currentTimeMillis(). The performance will be greatly damaged if it is invoked too much times.
According to my local testing at the same environment, System.currentTimeMillis() can achieve a speedup to 5 times (435 ms vs 2073 ms), when these two methods are invoked 5,000,000 times.","davsclaus:1555058279:2019-04-12T16:37:59.515+0000:1555058279:2019-04-12T16:37:59.515+0000:Thanks for the PR.

However there is no critical execution path / bottleneck in camel where date getTime is called excessively. But nevertheless this is a nice little improvement."
0,CAMEL-13413,Improvement,Major,3.0.0,,"
None
",Resolved,Not A Problem,None,Unassigned,Jiri Ondrusek,0,3,2019-04-12 13:21:15+00:00,2019-04-15 06:25:58+00:00,"Make possible to define more camelContexts by allowing usage of spring attribute primary=true.




<beans xmlns=""http://www.springframework.org/schema/beans"">
  <camelContext id=""context1"" xmlns=""http://camel.apache.org/schema/spring"" primary=""true"">
   ...
  </camelContext>
  <camelContext id=""context2"" xmlns=""http://camel.apache.org/schema/spring"">
   ...
  </camelContext>
</beans>




In case that primary is not set to true, executions ends with error:




***************************
APPLICATION FAILED TO START
***************************
Description:
Parameter 0 of method configureDirectComponent in org.apache.camel.component.direct.springboot.DirectComponentAutoConfiguration required a single bean, but 2 were found:
...




How to reproduce:
Add second cotext to quockstart  quickstart https://github.com/fabric8-quickstarts/spring-boot-camel-xml and execute by command mvn spring-boot:run","jondruse:1555046533:2019-04-12T13:22:13.202+0000:1555046533:2019-04-12T13:22:13.202+0000:I'm working on this issue.
acosentino:1555046745:2019-04-12T13:25:45.914+0000:1555046745:2019-04-12T13:25:45.914+0000:I think it would make sense, but i'd like to hear the feedback from [~davsclaus]
davsclaus:1555058094:2019-04-12T16:34:54.295+0000:1555058094:2019-04-12T16:34:54.295+0000:-1

No I see this as an anti-pattern.

For example with spring boot we only allow 1 context. And with microservices and camel-k and other things we are moving into small bounded contexts that does one thing.


jondruse:1555280639:2019-04-15T06:23:59.461+0000:1555280639:2019-04-15T06:23:59.461+0000:[~davsclaus] thank you for the explanation. In that case, this issue could be closed as not a  bug."
0,CAMEL-13412,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-12 08:32:24+00:00,2019-04-12 14:08:34+00:00,No Desc,
0,CAMEL-13411,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,2,2019-04-12 08:31:58+00:00,2019-04-17 11:46:54+00:00,No Desc,"hktegner:1555472202:2019-04-17T11:36:42.828+0000:1555472202:2019-04-17T11:36:42.828+0000:I discovered I can't install this on Karaf 4.2.3 from Camel 2.22.0. There still seems to be source for this feature, but when I look in the feature.xml it is no longer there.

When did this disappear?

More to the point, what options do I now have in Camel 2.22.0 to allow me to use existing classes (ideally fluent API) to build an object graph and have that serialized as JSON as the response to a REST call.

Thanks in advance for any pointers.
acosentino:1555472814:2019-04-17T11:46:54.717+0000:1555472814:2019-04-17T11:46:54.717+0000:JsonApi component has been included in Camel 3. It doens't exist in Camel 2.23.x."
0,CAMEL-13410,Bug,Major,2.23.1,None,"
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0-M3, 3.0.0",Andrea Cosentino,Aurélien Pupier,0,2,2019-04-12 07:11:15+00:00,2019-04-16 06:27:52+00:00,itis currently service:serviceName:delegateUri instead of service:delegateUri,
0,CAMEL-13409,Bug,Major,2.23.1,None,"
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 2.23.3, 3.0.0",Andrea Cosentino,Aurélien Pupier,0,1,2019-04-12 06:56:03+00:00,2019-04-12 07:20:25+00:00,it is nsq:lookupServer although it should be nsq:servers,
0,CAMEL-13408,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,John Poth,0,3,2019-04-11 14:57:11+00:00,2019-05-13 08:30:58+00:00,"Tests for camel-jibx have been disabled for a while. JDK-8 support was added in 1.3.1 but it seems it's not a simple upgrade.


JDK9+ support is still an open issue


So we should either mark the component as deprecated in 2.x and remove it in 3.x or try to fix it.","acosentino:1556771488:2019-05-02T12:31:28.080+0000:1556771488:2019-05-02T12:31:28.080+0000:[~davsclaus] do we want to remove the component in 3?
davsclaus:1556832294:2019-05-03T05:24:54.751+0000:1556832294:2019-05-03T05:24:54.751+0000:Yeah I am +1 on removing for Camel 3"
0,CAMEL-13407,Bug,Major,2.21.5,"3.0.0-M3, 2.23.3, 2.24.1, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0-M3, 2.23.3, 2.24.1, 3.0.0, 2.25.0",Ramu,Simon Temple,0,3,2019-04-11 10:46:42+00:00,2019-06-13 07:24:42+00:00,"We ran into this in production when a network error made the CouchDB instance unavailable for a short while.


We were running with camel 2.18.1 so I patched a local copy of the component; which has been running without problems for many weeks now.


I'd like to propose our code as the fix to this.


We're now running with 2.23.1 so would be looking for a 2.x fix","ramu11:1555005416:2019-04-12T01:56:56.984+0000:1555005416:2019-04-12T01:56:56.984+0000:[~simon.temple@amalto.com] could you please attach a simple  junit test for the changes
simon.temple@amalto.com:1555406083:2019-04-16T17:14:43.094+0000:1555406083:2019-04-16T17:14:43.094+0000:I added testProcessorUnstable() to CouchDbChangesetTrackerTest

and reattached CouchDbChangesetTracker as I made a couple of small changes to ensure we always log exceptions that cause the Runnable to exit.
simon.temple@amalto.com:1560148485:2019-06-10T14:34:45.335+0000:1560148485:2019-06-10T14:34:45.335+0000:I just downloaded the 2.23.3 ZIP bundle as it was released yesterday. 

https://github.com/apache/camel/releases/tag/camel-2.23.3

Unfortunately this change is not in the release.

In which release will this fix be release?
ramu11:1560150211:2019-06-10T15:03:31.826+0000:1560150211:2019-06-10T15:03:31.826+0000:It is fixed in master branch  
acosentino:1560150276:2019-06-10T15:04:36.193+0000:1560150276:2019-06-10T15:04:36.193+0000:on 3.0.0-M3
simon.temple@amalto.com:1560151023:2019-06-10T15:17:03.893+0000:1560151023:2019-06-10T15:17:03.893+0000:""We're now running with 2.23.1 so would be looking for a 2.x fix""

Any chance we can have a fix on a 2.x branch?
acosentino:1560221308:2019-06-11T10:48:28.743+0000:1560221308:2019-06-11T10:48:28.743+0000:We can try to backport on 2.x and 2.24.x and 2.23.x (available for 2.23.4)
simon.temple@amalto.com:1560293872:2019-06-12T06:57:52.101+0000:1560293872:2019-06-12T06:57:52.101+0000:Yes please.

Thank you
acosentino:1560381882:2019-06-13T07:24:42.795+0000:1560381882:2019-06-13T07:24:42.795+0000:Done"
0,CAMEL-13406,Bug,Major,3.0.0-M3,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Tadayoshi Sato,0,2,2019-04-10 09:03:49+00:00,2019-04-10 09:18:52+00:00,"Camel Pulsar endpoint syntax pulsar:[persistent|non-persistent]://tenant/namespace/topic defined in:




@UriEndpoint(scheme = ""pulsar"", title = ""Apache Pulsar"", syntax = ""pulsar:[persistent|non-persistent]://tenant/namespace/topic"", label = ""messaging"")
public class PulsarEndpoint extends DefaultEndpoint {




breaks component list table in https://github.com/apache/camel/blob/master/components/readme.adoc as | is the column separator in asciidoc.","tadayosi:1554858988:2019-04-10T09:16:28.588+0000:1554858988:2019-04-10T09:16:28.588+0000:[~ancosen] Very fast. Thanks :-)
acosentino:1554859132:2019-04-10T09:18:52.596+0000:1554859132:2019-04-10T09:18:52.596+0000:I'm regenerating the components readme now. "
0,CAMEL-13405,Task,Major,None,None,"
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-10 08:26:04+00:00,2019-04-23 13:11:50+00:00,No Desc,
0,CAMEL-13404,Task,Major,None,None,"
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-04-10 08:25:32+00:00,2019-04-23 13:11:41+00:00,No Desc,
0,CAMEL-13403,Bug,Minor,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Bastien Meert,0,2,2019-04-10 08:00:48+00:00,2019-04-12 09:34:47+00:00,"When using transferExchange=""true"" in a JMS consumer (assuming producer also did), camel is breaking the match between key and exchange in inflightRepository if allowUseOriginalMessage=""true"" is not set in camel context.


This can lead to java heap space out of memory because camel is not able to clear the inflightRepository from old Exchange.


Identified behaviour :



Camel receive the JMS message
	
If allowUseOriginalMessage=true : parse JMS message to build Exchange instance
If not : generate a new Instance


Camel add the Exchange to inflightRepository
On accessing the ExchangeBody, if it was not parsed  yet camel rebuild the Exchange but do not change the key(exchangeId) in the inflightRepository
When the route process is over the message is not disposed if the key has been changed in the Exchange but not inflightRepository
Sooner or later the heap space if full and application crash.



The problem appeared in 2.18.0 and is present up until 2.23.1 (tested with attached test case). Release note of 2.18.0 says :


""Optimize Camel to only enable AllowUseOriginalMessage if in use by error handler or OnCompletion<http://camel.apache.org/oncompletion.html>. End user who manually access the original message using the Java API must configure AllowUseOriginalMessage=true.""


Problem is transferExchange=""true"" case also needs allowUseOriginalMessage=""true"" even if the not accessing original message by Java API an other way.


Easy work around : set allowUseOriginalMessage=""true"" in camel context configuration",davsclaus:1555030602:2019-04-12T08:56:42.338+0000:1555030602:2019-04-12T08:56:42.338+0000:The issue cannot be reproduced on master (camel 3) so we have likely fixed it there. For 2.x users then use the suggested workaround.
0,CAMEL-13372,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-03-27 12:46:43+00:00,2019-03-29 21:20:41+00:00,No Desc,gnodet:1553865641:2019-03-29T21:20:41.668+0000:1553865641:2019-03-29T21:20:41.668+0000:https://github.com/apache/camel/commit/10d62cca7a45e076def41ca4b973077df0326ad6
0,CAMEL-13371,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Guillaume Nodet,Guillaume Nodet,0,2,2019-03-27 12:45:28+00:00,2019-11-18 13:18:40+00:00,No Desc,"davsclaus:1558226216:2019-05-19T08:36:56.658+0000:1558226216:2019-05-19T08:36:56.658+0000:I wonder if we should rename camel-jaxp as it may sound like a regular component. Can we come up with a better name?

camel-support-jaxp
camel-core-jaxp
camel-support-xml



davsclaus:1558226246:2019-05-19T08:37:26.959+0000:1558482054:2019-05-22T07:40:54.851+0000:Maybe we should move TokenXMLExpressionIterator to camel-jaxp as its used only for that xml tokenizer language and its for XML ;) *DONE*
davsclaus:1558227104:2019-05-19T08:51:44.306+0000:1558227104:2019-05-19T08:51:44.306+0000:And for all the model and jaxb then we are still trying to move those out as well into their own module?"
0,CAMEL-13370,Improvement,Minor,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,2,2019-03-27 10:27:58+00:00,2019-03-28 11:45:08+00:00,"As today the ModelHelper.dumpModelAsXml(..., ...) does not resolve delegating endpoint so in case an endpoint delegates to an additional endpoint, this delegated endpoint is not shown in the routes dump.


It would be nice to have an option to configure if the delegating endpoint should be replaced by the delegated one on dumpModelAsXml","davsclaus:1553656790:2019-03-27T11:19:50.251+0000:1553656790:2019-03-27T11:19:50.251+0000:Oh I think it should dump them by default, as a DelegateEndpoint is just a little delegate/proxy and you want to real/actual endpoint.
davsclaus:1553736736:2019-03-28T09:32:16.116+0000:1553736736:2019-03-28T09:32:16.116+0000:Okay so this is used by ref, zookeeper-master, service components etc. And in those case you would like to have them dumped as-is.

davsclaus:1553741805:2019-03-28T10:56:45.982+0000:1553741805:2019-03-28T10:56:45.982+0000:Okay so the limitations of the dump model is that only static endpoints that are defined in EIPs with static uris like <from uri> <to uri> etc are possible to resolve."
0,CAMEL-13369,New Feature,Minor,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Luca Burgazzoli,0,2,2019-03-27 10:18:36+00:00,2019-06-12 05:04:03+00:00,"The current message history eip is somehow limited as we cannot choose which nodes we want to take into account, as example if one creates routes using the new Step EIP, he may want to get the history to track step related activities only.


Another additional feature would be to have the message history pattern to keep a copy of the message being produced by the processor under monitor.","davsclaus:1560287043:2019-06-12T05:04:03.390+0000:1560287043:2019-06-12T05:04:03.390+0000:You can now filter to only do this for step eips etc

                context.setMessageHistory(true);
                context.getMessageHistoryFactory().setNodePattern(""step"");
"
0,CAMEL-13368,Bug,Major,"2.22.3, 2.23.1","2.23.2, 2.24.0, 2.22.4, 3.0.0","

aggregator
leveldb

",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0",Andrea Cosentino,Mikael Andersson Wigander,0,2,2019-03-27 09:45:27+00:00,2019-03-29 08:58:50+00:00,"If the constructor of




LevelDBAggregationRepository(""repositoryName"", ""persistentFilename"")



is used and the




fileName



does not include any path delimiters it will return a NPE.


 


The actual NPE code is within LevelDBFile.java where the getFile().getParent() is the cause:




try {
 getFile().getParentFile().mkdirs();
 DBFactory factory = getFactory();
 db = factory.open(getFile(), options);
} catch (IOException ioe) {
 throw new RuntimeException(""Error opening LevelDB with file "" + getFile(), ioe);
}



 


Stacktrace:


Caused by: java.lang.NullPointerException: null
 at org.apache.camel.component.leveldb.LevelDBFile.start(LevelDBFile.java:173)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
 at org.apache.camel.component.leveldb.LevelDBAggregationRepository.doStart(LevelDBAggregationRepository.java:412)
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)
 at org.apache.camel.processor.aggregate.AggregateProcessor.doStart(AggregateProcessor.java:1384)
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)
 at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1484)
 at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:44)
 at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:31)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)
 at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:160)
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:60)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:104)
 at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:90)
 at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:80)
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
 at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75)
 at org.apache.camel.impl.RouteService.startChildService(RouteService.java:370)
 at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:196)
 at org.apache.camel.impl.RouteService.warmUp(RouteService.java:145)
 ... 31 common frames omitted","davsclaus:1553656839:2019-03-27T11:20:39.903+0000:1553656839:2019-03-27T11:20:39.903+0000:Contributions with a fix is welcome
https://github.com/apache/camel/blob/master/CONTRIBUTING.md
hakuseki:1553670449:2019-03-27T15:07:29.013+0000:1553670449:2019-03-27T15:07:29.013+0000:{code:java}
/**
 * The class LevelDBSetupTest
 *
 * @author mgr, 2019-03-27
 * @version 1.0
 */
public class LevelDBSetupTest extends CamelTestSupport {
 private LevelDBFile levelDBFile;

 @Override
 public void setUp() throws Exception {
 super.setUp();
// deleteDirectory("""");
 final File file = new File(""leveldb.dat"");
 levelDBFile = new LevelDBFile();
 levelDBFile.setFile(file);
 }

 @Override
 public void tearDown() throws Exception {
 levelDBFile.stop();
 super.tearDown();
 }

 @Test
 public void testLevelDBStart() {
 levelDBFile.start();
 }
}{code}
 

This one breaks.

Working on patch but unsure on how to proceed. 

I have forked PR and now branched out.
hakuseki:1553737264:2019-03-28T09:41:04.076+0000:1553755274:2019-03-28T14:41:14.452+0000:PR submitted

[https://github.com/apache/camel/pull/2845]"
0,CAMEL-13367,Bug,Major,3.0.0-M2,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-26 11:17:57+00:00,2019-03-28 09:52:16+00:00,To reproduce then unit test cia2 source code chapter10-camel-cxf-rest-karaf,
0,CAMEL-13366,Bug,Minor,2.23.1,"2.23.2, 2.24.0, 3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0-M3, 3.0.0",Claus Ibsen,Vishal Mahajan,0,2,2019-03-26 09:24:51+00:00,2019-03-27 08:35:20+00:00,"If you provide 'maxConcurrentConsumers' query parameter on the endpoint URI, then, the route fails with error message 


_""There are 1 parameters that couldn't be set on the endpoint. Check the uri
if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{maxConcurrentConsumers=xx}

] ""_


As per docs, it should be supported as query parameter.","vishal423:1553563599:2019-03-26T09:26:39.453+0000:1553563599:2019-03-26T09:26:39.453+0000:I know the cause and will patch fix
davsclaus:1553646920:2019-03-27T08:35:20.337+0000:1553646920:2019-03-27T08:35:20.337+0000:Thanks for the PR"
0,CAMEL-13365,Improvement,Major,3.0.0-M1,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Tadayoshi Sato,Tadayoshi Sato,0,1,2019-03-26 02:28:41+00:00,2019-03-26 10:04:57+00:00,"Sometimes Box.com requires manual CAPTCHA check for standard authentication, mostly due to a sequence of automatic authentication failures. When it happens, camel-box cannot recover it by itself and a human has to intervene to authenticate it with manual CAPTCHA checking.


However, currently the error message only tells:




Invalid Login Credentials




which is not helpful to see a human needs to authenticate it with CAPTCHA. We can improve the message with something like:




Authentication requires CAPTCHA test. You need to authenticate the account manually to unlock CAPTCHA.",
0,CAMEL-13364,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-03-25 12:53:41+00:00,2019-03-27 08:35:36+00:00,No Desc,
0,CAMEL-13363,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,2,2019-03-25 11:44:44+00:00,2019-03-27 08:43:21+00:00,No Desc,davsclaus:1553646975:2019-03-27T08:36:15.735+0000:1553646975:2019-03-27T08:36:15.735+0000:Have you done all the work and if so then we can resolve this ticket
0,CAMEL-13362,Task,Major,2.23.1,,"
None
",Resolved,Invalid,None,Unassigned,Lee sung Kyu,0,2,2019-03-25 10:08:32+00:00,2019-03-25 10:35:49+00:00,"Hi, guys.


I'm beginner for camel. I have some problem.


We  are implementing file transfer system using camel.


I set property from external property file.


But application is not accessed to this property file. We cannot use propertyplaceholder because the value will be changed at runtime.


 


We implemented it like below.


camelContext.xml
 




<bean id=""myProperties"" class=""java.util.Properties""/>
<bean id=""propertylist"" class=""org.apache.camel.component.properties.PropertiesComponent"">
<property name=""cache"" value=""true""/>
<property name=""location"" value=""classpath:camelap.properties""/>
<property name=""overrideProperties"" ref=""myProperties""/>
</bean>
<camelContext id=""camelContext-f611cb6c-d516-4346-9adc-5512d327a88d""
trace=""false"" xmlns=""http://camel.apache.org/schema/spring"">
<camel:route id=""initial_info"">
<camel:from id=""_initial"" uri=""direct:sqlParam""/>
<camel:to id=""_selectReference"" uri=""sql:{{sql.referenceInfo}}?dataSource=dataSource""/>
<camel:process id=""_process1"" ref=""tempBean""/>
<camel:log id=""_aaaa"" loggingLevel=""WARN"" message=""tttttttt ::: {{test}} ::: ${header.sourceDirectory}""/>
</camel:route>



camelap.properties : path : target/classes




file.uri=/home/WRK/KR/SND/DAT
test=OLD_VALUE
file.pattern=SLPNPM*,SPLNCC*,SLPNCM*,SLPNPC*
file.target.path1=/home/WRK/KR/SND/NRAT
file.target.path2=/home/WRK/KR/SND/KDAP

############################################
## SQL Statement ##
############################################
sql.referenceInfo=SELECT DISTINCT \
A.WFLOW_INST_ID ,\
TO_CHAR(A.EFCT_ST_DT,'YYYYMMDDHH24MISS') EFCT_ST_DT, \
B.NE_ID , \
B.NE_TYPE_ID , \
B.CDR_FILE_COLEC_DIR_NM , \
B.ORIGIN_FMT_ID , \
B.TRM_DIR_NM , \
D.CDR_FILE_NMNG_RULE_SBST, \
D.FILE_NM_LEN , \
B.FNS_FILE_CRET_YN , \
B.FNS_FILE_DIV_CD \
FROM TB_WFLOW_INFO A, \
TB_CDRSEND_BASE_INFO B, \
TB_FILE_FMT_INFO D \
WHERE A.WFLOW_INST_ID = 'P1_IPTVKR' \
AND B.NE_ID = 'KRLPPM10' \
AND now() BETWEEN A.EFCT_ST_DT AND A.EXP_DT \
AND now() BETWEEN B.EFCT_ST_DT AND B.EXP_DT \
AND A.WFLOW_INST_ID = B.WFLOW_INST_ID \
AND B.ORIGIN_FMT_ID = D.CDR_FILE_FMT_ID;




Error Log.




org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route initial_info at: >>> To[sql:{{sql.referenceInfo}}?dataSource=dataSource] <<< in route: Route(initial_info)[[From[direct:sqlParam]] -> [To[sql:{{sql... because of Property with key [sql.referenceInfo] not found in properties from text: sql:{{sql.referenceInfo}}?dataSource=dataSource
at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1826) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:136) ~[camel-spring-2.23.1.jar:2.23.1]
at org.apache.camel.spring.CamelContextFactoryBean.start(CamelContextFactoryBean.java:370) ~[camel-spring-2.23.1.jar:2.23.1]
at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:417) ~[camel-spring-2.23.1.jar:2.23.1]
at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:95) ~[camel-spring-2.23.1.jar:2.23.1]
at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:402) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:359) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:896) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:163) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]
at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.3.RELEASE.jar:2.1.3.RELEASE]
at com.ktds.openmzn.OpenmznApplication.main(OpenmznApplication.java:25) ~[classes/:na]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route initial_info at: >>> To[sql:{{sql.referenceInfo}}?dataSource=dataSource] <<< in route: Route(initial_info)[[From[direct:sqlParam]] -> [To[sql:{{sql... because of Property with key [sql.referenceInfo] not found in properties from text: sql:{{sql.referenceInfo}}?dataSource=dataSource
at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1352) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:212) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1140) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3735) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3440) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:133) ~[camel-spring-2.23.1.jar:2.23.1]
... 18 common frames omitted
Caused by: java.lang.IllegalArgumentException: Property with key [sql.referenceInfo] not found in properties from text: sql:{{sql.referenceInfo}}?dataSource=dataSource
at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:271) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:157) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParse(DefaultPropertiesParser.java:116) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:100) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:63) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:235) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:178) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:2547) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.model.ProcessorDefinitionHelper.resolvePropertyPlaceholders(ProcessorDefinitionHelper.java:737) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.model.ProcessorDefinition.makeProcessorImpl(ProcessorDefinition.java:544) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:530) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:240) ~[camel-core-2.23.1.jar:2.23.1]
at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1349) ~[camel-core-2.23.1.jar:2.23.1]
... 29 common frames omitted




Please check and comment.","acosentino:1553480541:2019-03-25T10:22:21.002+0000:1553480541:2019-03-25T10:22:21.002+0000:Please ask on the users mailing list.
sung-kyu:1553481298:2019-03-25T10:34:58.512+0000:1553481298:2019-03-25T10:34:58.512+0000:How can I ask on the users mailing list?
acosentino:1553481349:2019-03-25T10:35:49.106+0000:1553481349:2019-03-25T10:35:49.106+0000:You have all the information here:

 

[http://camel.apache.org/mailing-lists.html]

 

or you can ask on the gitter channel

 

https://gitter.im/apache/apache-camel"
0,CAMEL-13361,New Feature,Minor,2.21.2,,"
None
",Resolved,Not A Problem,None,Unassigned,Abdulhamid,0,2,2019-03-25 10:00:48+00:00,2019-08-06 19:19:03+00:00,"Developed 2 REST services with netty4-http component.
Now I want to use HTTP Basic Authentication ( in KARAF runtime)


Edited karaf's system.properties to add roles ""role1"" and ""role2"".


karaf.local.roles = admin,manager,viewer,systembundles,role1,role2


Edited users.properties to add a new user1 belonging to role role1 and another user2 to role2:


user1=user1,role1
user2=user2,role2


attached is bluprint.xml


Considering port is 8081


Service 1-> http://localhost:8081/path1 -> should be accessible to user ""user1"" (users having role1 only)
Service 2-> http://localhost:8081/path2 -> should be accessible to user ""user2"" (users having role2 only)


But when I hit service http://localhost:8081/path1 with username=user2 and password=user2,
The service is accessible, this path should be inaccessible (unauthorized access)","davsclaus:1553548683:2019-03-26T05:18:03.548+0000:1553548683:2019-03-26T05:18:03.548+0000:This is not a bug. You need to implement your own security provider that hooks into karaf via JaaS. 
"
0,CAMEL-13360,Bug,Minor,2.22.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Gianandrea Rigoni,0,2,2019-03-24 06:27:57+00:00,2019-03-24 07:59:55+00:00,"SEDA component has a bounded limit again thanks on work done for:
""seda - Have a default queue size limit (CAMEL-12542)""


 the documentation here :
https://cwiki.apache.org/confluence/display/CAMEL/SEDA
does not reflect the change","davsclaus:1553385356:2019-03-24T07:55:56.797+0000:1553385356:2019-03-24T07:55:56.797+0000:The up-to-date doc is as linked on that page to the github (a new website and docs are in the works)
https://github.com/apache/camel/blob/master/components/camel-seda/src/main/docs/seda-component.adoc
grigoni:1553385595:2019-03-24T07:59:55.578+0000:1553385595:2019-03-24T07:59:55.578+0000:thanks!"
0,CAMEL-13359,New Feature,Major,None,3.0.0-M3,"
None
",Resolved,Fixed,3.0.0-M3,Guillaume Nodet,Claus Ibsen,0,1,2019-03-23 07:49:10+00:00,2019-12-19 17:36:53+00:00,"We should add a little camel example at
https://github.com/quarkusio/quarkus-quickstarts",davsclaus:1553821812:2019-03-29T09:10:12.270+0000:1576748213:2019-12-19T17:36:53.495+0000:[~gnodet] is working on a camel quickstart
0,CAMEL-13358,Bug,Major,2.19.0,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Graeme Moss,0,2,2019-03-22 15:28:03+00:00,2019-03-23 07:32:10+00:00,"Sometimes we notice that some of our routes get ""stuck"" and do not process anything.  Looking at the stacktrace for such a route we see something like this:




""Camel (SomeName) thread #648 - seda://someName"" #1287 daemon prio=5 os_prio=0 tid=0x00007f23880cf000 nid=0x25006 waiting on condition [0x00007f1f23530000]
   java.lang.Thread.State: WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000006e4beb8e0> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)
        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)
        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:748)




whereas we would instead normally expect to see something like this:




""Camel (SomeName) thread #840 - seda://someName"" #1577 daemon prio=5 os_prio=0 tid=0x00007f227c02b000 nid=0x256fe waiting on condition [0x00007f1f0ca20000]
   java.lang.Thread.State: TIMED_WAITING (parking)
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait for  <0x00000006eb69c1f8> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
        at java.util.concurrent.LinkedBlockingQueue.poll(LinkedBlockingQueue.java:467)
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:198)
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:154)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
        at java.lang.Thread.run(Thread.java:748)




Note that whereas this latter example has SedaConsumer in the stacktrace polling for an exchange, the former example has no such SedaConsumer in the stacktrace and is stuck waiting for a new ""task"" to be given to the ThreadPoolExecutor.


After adding debug logging, I see that the issue is as follows:


The code in ServiceSupport here writes to the starting and started flags using one thread (call it Thread W):




    public void start() throws Exception {
        if (isStarting() || isStarted()) {
            // only start service if not already started
            LOG.trace(""Service already started"");
            return;
        }
        if (starting.compareAndSet(false, true)) {
            LOG.trace(""Starting service"");
            try {
                doStart();
                started.set(true);
                starting.set(false);




and on a different thread (call it thread R) this code in ServiceSupport reads the starting and started flags:




    public boolean isRunAllowed() {
        // if we have not yet initialized, then all options is false
        boolean unused1 = !started.get() && !starting.get() && !stopping.get() && !stopped.get();
        boolean unused2 = !suspending.get() && !suspended.get() && !shutdown.get() && !shuttingdown.get();
        if (unused1 && unused2) {
            return false;
        }
        return !isStoppingOrStopped();
    }




So the order of events is:



Thread W: calls ServiceSupport.start()
Thread W: compareAndSet starting from false to true
Thread W: calls ServiceSupport.doStart() which eventually creates and starts Thread R
Thread R: calls SedaConsumer.doRun() which calls isRunAllowed()
Thread R: in isRunAllowed() reads started as false
Thread W: set started to true
Thread W: set starting to false
Thread R: in isRunAllowed() reads starting as false
Thread R: concludes that isRunAllowed is false
Thread R: the while loop in SedaConsumer.doRun is not executed and the thread will forever remain stuck waiting for a new ""task"" (on ThreadPoolExecutor.java:1067)



One fix would be to swap reading of starting and started so that starting is read first, then started.


Looking at the latest code in Camel 3.0.x, this code has been refactored to use a single ""status"" field instead of multiple different AtomicBoolean fields.  That should also fix this bug.  However, for completeness, I thought it best to log this bug anyway.",davsclaus:1553297530:2019-03-23T07:32:10.427+0000:1553297530:2019-03-23T07:32:10.427+0000:Thanks for the report and the detailed explanation. Yeah its improved/fixed in 3.0.
0,CAMEL-13357,Bug,Major,None,"2.23.2, 2.22.4, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.22.4, 3.0.0",Freeman Yue Fang,Jochen Riedlinger,1,3,2019-03-21 16:30:32+00:00,2019-03-28 12:36:52+00:00,"If a request message is send to a CXF consumer or a response is returned to the CXF provider that contains namespace definions at the SOAP envelope and the Camel-CXF endpoint is configured in PAYLOAD mode the namespace definition gets lost unless streaming is disabled.


If the resulting CxfPayload is then converted e.g. to String that String will contain invalid XML (because some namespace definition is missing).


For non-streaming mode (system property org.apache.camel.component.cxf.streaming is set to false) there are special precautions met to set these envelope namespaces on the first DOM element of the payload but this coding is missing for StAX.


The messages in question look like that:
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"">
  <soap:Body>
    <ns2:getTokenResponse xmlns:ns2=""http://camel.apache.org/cxf/namespace"">
      <return xsi:type=""xs:string"">Return Value</return>
    </ns2:getTokenResponse>
  </soap:Body>
</soap:Envelope>


If the CxfPayload is converted to String it will lack the definition for the xsi namespace prefix (and further XML parsing will fail).","j_ri:1553157282:2019-03-21T16:34:42.502+0000:1553157282:2019-03-21T16:34:42.502+0000:exactly the decribed problem is still/again there in version camel-cxf-2.21.0  (resp. camel-cxf-2.21.0.fuse-000077-redhat-1)

I had to turn streaming off org.apache.camel.component.cxf.CxfEndpoint.setAllowStreaming(Boolean)

so that my application works in PAYLOAD mode.
dmvolod:1553158880:2019-03-21T17:01:20.714+0000:1553158880:2019-03-21T17:01:20.714+0000:[~j_ri], do you have a simple test case for this issue?
j_ri:1553230137:2019-03-22T12:48:57.375+0000:1553232492:2019-03-22T13:28:12.114+0000:Hi,

I implemented a reproducer in my fork of the camel-examples.

The reproducer is based on the ""camel-example-cxf-proxy"" example.

Here it is:

[https://github.com/jochenr/camel/tree/Reproducer-CAMEL-13357/examples/camel-example-cxf-proxy]

 

 

To test it, please send the XML from the following file(s) via Soap-UI to the service:
 # [https://github.com/jochenr/camel/blob/Reproducer-CAMEL-13357/examples/camel-example-cxf-proxy/src/test/resources/non-working-request.xml]
 # [https://github.com/jochenr/camel/blob/Reproducer-CAMEL-13357/examples/camel-example-cxf-proxy/src/test/resources/working-request.xml]

1. does not work, while 2. works fine.

If you compare the requests you see that 1. has the ""xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"""" namespace in the Envelope, while 2. defines it within the body.

 

If you change the option ""allowStreaming=true"" to false, you can see the request 1. also works.

 

In my opinion 1. should also work, if streaming is enabled.

 

Best regards,
 Jochen

 

 P.S.: Attached ""ReproducerException.log"" you find the exception log for comparison.

 "
0,CAMEL-13356,Task,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Unassigned,Etienne Chauchot,0,4,2019-03-21 15:02:10+00:00,2019-07-31 18:35:09+00:00,"I'm a PMC member of Beam project were I use cassandra-unit in the test dependencies of a module just like you do in Cassandra CQL module: https://mvnrepository.com/artifact/org.apache.camel/camel-cassandraql/2.23.1


The problem is that this lib is licensed under LGPLV3 which is a category X unauthorized licence. I just figured out that it seems to be forbidden even in test code to use LGPL libs (see here  and here).


I'm removing it from Beam. I went through some of the apache projects that use cassandra-unit and I found Camel friends. Hence this advice.","acosentino:1553151910:2019-03-21T15:05:10.801+0000:1553151910:2019-03-21T15:05:10.801+0000:Thanks, we'll remove it
echauchot:1553152097:2019-03-21T15:08:17.539+0000:1553152097:2019-03-21T15:08:17.539+0000:I now use https://github.com/doanduyhai/Achilles/wiki/CQL-embedded-cassandra-server. If it can spare you some time searching
njiang:1553191246:2019-03-22T02:00:46.104+0000:1553191391:2019-03-22T02:03:11.914+0000:From my understanding using the LGPL is OK in the test-code as long as our distribution don't have the bunded dependency of LGPL.
  
[LEGAL-153|https://issues.apache.org/jira/browse/LEGAL-153] is about using GPL code in test, it makes sense that  GPL could compromise ASL of our source release.
[LEGAL-207|https://issues.apache.org/jira/browse/LEGAL-207] the issue is closed and it should be discussed case by case. 
Using LGPL library in the test code doesn't compromise the ASL of our source release kit, if we don't include the LGPL library into our convenience binaries it should be fine.

Anyway, it could save us lot of time for the legal issue if we choose the third party dependency of ASL. 
davsclaus:1564569309:2019-07-31T18:35:09.481+0000:1564569309:2019-07-31T18:35:09.481+0000:Thanks William"
0,CAMEL-13355,Bug,Minor,3.0.0-M1,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0",Claus Ibsen,Vishal Mahajan,0,2,2019-03-21 13:56:24+00:00,2019-03-24 09:29:29+00:00,"If you set 'maxConcurrentConsumers' property in the MllpConfiguration object and assign that to MllpComponent, then, during creation of MllpEndpoint instance, that property is ignored and default value of 5 is used.","vishal423:1553148959:2019-03-21T14:15:59.040+0000:1553148959:2019-03-21T14:15:59.040+0000:I will soon raise PR on github to fix this issue
davsclaus:1553155634:2019-03-21T16:07:14.395+0000:1553155634:2019-03-21T16:07:14.395+0000:Thanks for spotting this and doing a PR
vishal423:1553164493:2019-03-21T18:34:53.899+0000:1553164493:2019-03-21T18:34:53.899+0000:PR raised # https://github.com/apache/camel/pull/2837"
0,CAMEL-13354,Improvement,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-21 13:23:00+00:00,2019-06-12 07:42:21+00:00,"So you can easily configure hystrix from property placeholders in application.properties etc, which you can do with spring boot etc.",davsclaus:1560296343:2019-06-12T07:39:03.310+0000:1560296343:2019-06-12T07:39:03.310+0000:You can now use camel.hystrix.xxx to set the default hystrix config.
0,CAMEL-13353,Test,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Zheng Feng,0,1,2019-03-21 01:54:44+00:00,2019-03-24 09:43:29+00:00,These camel-lra integration tests were ignored due to the JBTM issues which have been fixed in the Narayana 5.9.0.Final release. So I think it could be useful to re-enable to verify if it works.,
0,CAMEL-13352,Improvement,Minor,None,"2.23.2, 2.24.0, 3.0.0-M2","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0-M2",Willem Jiang,Willem Jiang,0,1,2019-03-21 01:44:00+00:00,2019-03-21 16:08:15+00:00,"As the Host and Port options are removed, we need to update the HostAddresses document for it.","njiang:1553124640:2019-03-21T07:30:40.026+0000:1553124640:2019-03-21T07:30:40.026+0000:Applied patch into master, camel-2.23.x and camel-2.x branches."
0,CAMEL-13351,Bug,Major,None,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-03-20 12:33:40+00:00,2019-03-23 09:02:54+00:00,"DefaultNettyHttpBinding the uri used for request is computed as follow:




String uriForRequest = uri;
if (configuration.isUseRelativePath()) {
    int indexOfPath = uri.indexOf((new URI(uri)).getPath());
    if (indexOfPath > 0) {
        uriForRequest = uri.substring(indexOfPath);
    }
}




This has some issues:



indexOf + substring are in fact the same as what we cna achieve with new URI(uri).getPath()
in case the path is resolved to / then the logic is wrong as in case of an uri like http://something:80/ it will end up with //something:80/",
0,CAMEL-13350,Task,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-03-20 09:29:03+00:00,2021-09-30 10:33:32+00:00,No Desc,
0,CAMEL-13349,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,2,2019-03-20 09:28:40+00:00,2019-03-20 09:33:27+00:00,No Desc,"davsclaus:1553045447:2019-03-20T09:30:47.035+0000:1553045447:2019-03-20T09:30:47.035+0000:You can do this via camel context -> registry -> bind. But having a shorthand bind method directly can make this quicker and easier for end users
gnodet:1553045607:2019-03-20T09:33:27.594+0000:1553045607:2019-03-20T09:33:27.594+0000:https://github.com/apache/camel/commit/38e8d71971cb06a0c40cadb1ad0bfff90a8e2ba5"
0,CAMEL-13348,Task,Minor,None,"2.23.2, 2.24.0, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0-M2, 3.0.0",Willem Jiang,Willem Jiang,0,2,2019-03-20 09:28:37+00:00,2019-03-21 07:50:41+00:00,"ElasticSearch support not to specify the indexName and indexType for search, so camel-elasticsearch search option don't need to specify the indexName and indexType","davsclaus:1553045637:2019-03-20T09:33:57.493+0000:1553045637:2019-03-20T09:33:57.493+0000:Willem I assume you are adding more description to this ticket
njiang:1553045691:2019-03-20T09:34:51.187+0000:1553045691:2019-03-20T09:34:51.187+0000:Yeah, I'm in the middle of updating the JIRA,  it should be fine now.
njiang:1553124561:2019-03-21T07:29:21.108+0000:1553124561:2019-03-21T07:29:21.108+0000:Applied patch into master, camel-2.x and camel-2.23.x branches."
0,CAMEL-13347,Improvement,Major,None,,"
None
",Closed,Won't Fix,None,Guillaume Nodet,Claus Ibsen,0,1,2019-03-20 09:17:42+00:00,2019-03-22 19:36:09+00:00,"We need a new simpler camel-cdi that is intended for camel / camel-k on microservices for just 1 camel per microservice and nothing of the fancy stuff that camel-cdi attempts to do.



looking up cdi beans from the registry
define a bean using CDI and reuse it in a camel route somehow
override a camel service using a CDI bean (such as the UuuidGenerator, or whatever)",davsclaus:1553044777:2019-03-20T09:19:37.638+0000:1553044777:2019-03-20T09:19:37.638+0000:beans annotated with @ApplicationScoped or @Produces should be able to be looked up from the CDI registry
0,CAMEL-13346,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-20 09:11:12+00:00,2019-03-20 09:32:41+00:00,To make it easier to add custom properties from java api. Currently you can only configure properties locations (eg file locations),
0,CAMEL-13345,New Feature,Major,2.23.1,"2.24.0, 3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M3, 3.0.0",Claus Ibsen,Pontus Ullgren,0,2,2019-03-20 08:26:20+00:00,2019-04-12 10:10:09+00:00,"Would be good to have the route-coverage maven plugin to be able to generate a XML report using the jacoco XML report format, described in the jacoco documentation https://www.jacoco.org/jacoco/trunk/doc/


 


The benefit is that tools like SonarQube has support for handling these XML reports and they can then add this into the report.","pontus.ullgren:1553041635:2019-03-20T08:27:15.554+0000:1553041635:2019-03-20T08:27:15.554+0000:I know some people that have working code for this will instruct them to make a PR on github.
davsclaus:1553568588:2019-03-26T10:49:48.928+0000:1553568588:2019-03-26T10:49:48.928+0000:There is a PR here
https://github.com/apache/camel/pull/2835
davsclaus:1555035009:2019-04-12T10:10:09.755+0000:1555035009:2019-04-12T10:10:09.755+0000:thanks for the PR"
0,CAMEL-13344,Improvement,Major,"2.22.3, 2.23.1","2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-20 05:22:58+00:00,2019-03-20 05:28:40+00:00,"The template is loaded from a resource such a file on the classpath, then lines with comments (start with --) should be skipped.",
0,CAMEL-13343,Improvement,Minor,None,,"
None
",Resolved,Fixed,None,Unassigned,Nayananga Muhandiram,0,2,2019-03-19 15:36:28+00:00,2019-04-29 07:47:12+00:00,"yarn new version available


 


yarn install
yarn install v1.14.0
[1/5] Resolving packages...
[2/5] Fetching packages...
info fsevents@1.2.4: The platform ""linux"" is incompatible with this module.
info ""fsevents@1.2.4"" is an optional dependency and failed compatibility check. Excluding it from installation.
[3/5] Linking dependencies...
[5/5] Building fresh packages...
warning Your current version of Yarn is out of date. The latest version is ""1.15.2"", while you're on ""1.14.0"".
Done in 977.20s.","zregvart:1552984166:2019-03-19T16:29:26.880+0000:1552984199:2019-03-19T16:29:59.610+0000:[~nayanagamuhandiram] are you working on a pull request? If so, make sure that you update the new version via [yarn policies set-version|https://yarnpkg.com/lang/en/docs/cli/policies/].
nayanagamuhandiram:1552988191:2019-03-19T17:36:31.033+0000:1552988191:2019-03-19T17:36:31.033+0000:This occurred when I was totally rebuilding the project with a new fork from [https://github.com/apache/camel-website]. [yarn policies set-version|https://yarnpkg.com/lang/en/docs/cli/policies/]. fixed the issue. but I think some others will face the same whenever they fresh build the project.
zregvart:1553005322:2019-03-19T22:22:02.004+0000:1553005322:2019-03-19T22:22:02.004+0000:[~nayanagamuhandiram] {{yarn policies set-version}} should change {{.yarnrc}} and add the new yarn version to {{.yarn/releases/}}, so you can create a PR to update yarn with those changes. It would be also good to keep yarn version the same between the Antora theme and the static site. Thank you :)
zregvart:1553047290:2019-03-20T10:01:30.744+0000:1553047290:2019-03-20T10:01:30.744+0000:[~nayanagamuhandiram] thanks for the pull request, can you do another one to upgrade the yarn version in {{antora-ui-camel}}? Thanks :)
nayanagamuhandiram:1553068500:2019-03-20T15:55:00.065+0000:1553068500:2019-03-20T15:55:00.065+0000:Yes ofcourse, Totally forgot about that. Give me a second.


"
0,CAMEL-13342,New Feature,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Alex Dettinger,Eric Deandrea,1,4,2019-03-19 14:49:02+00:00,2019-11-21 19:53:14+00:00,"Off-shoot from CAMEL-11807 to allow building support for users to be able to write Camel tests using JUnit 5.


JUnit 5 versions of the more common test modules have been created:
A camel-test-junit5 dedicated module has been created in CAMEL-13826.
A camel-test-spring-junit5 dedicated module has been created in CAMEL-13965.
A camel-testcontainers-junit5 dedicated module has been created in CAMEL-14037.
A camel-testcontainers-spring-junit5 dedicated module has been created in CAMEL-14084.


The attached file camel-test-cdi-junit5.patch stores an experimental implementation of the camel-test-cdi-junit5 module in case one would be interested to implement it.","davsclaus:1569542439:2019-09-27T08:00:39.125+0000:1569542439:2019-09-27T08:00:39.125+0000:[~aldettinger] I wonder if some of the latest commits may cause a build error now on master branch

mvn clean install -P fastinstall


[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  18:37 min
[INFO] Finished at: 2019-09-27T09:58:04+02:00
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:bom-generator-maven-plugin:3.0.0-SNAPSHOT:generate (default) on project camel-spring-boot-dependencies-generator: Found 6 conflicts between the current managed dependencies and the external BOMS:
[ERROR]  - org.junit.platform:junit-platform-commons:jar
[ERROR]  - org.junit.platform:junit-platform-console:jar
[ERROR]  - org.junit.platform:junit-platform-engine:jar
[ERROR]  - org.junit.platform:junit-platform-launcher:jar
[ERROR]  - org.junit.platform:junit-platform-runner:jar
[ERROR]  - org.junit.platform:junit-platform-suite-api:jar
[ERROR]
[ERROR] -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR]
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <args> -rf :camel-spring-boot-dependencies-generator
aldettinger:1569560499:2019-09-27T13:01:39.486+0000:1569560499:2019-09-27T13:01:39.486+0000:The latest commit was indeed faulty and we pushed a fix."
0,CAMEL-13341,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Jiri Ondrusek,0,1,2019-03-19 11:12:53+00:00,2019-03-20 14:13:50+00:00,"If you run camel-linkedin quickstart, it is possible to fill accessToken into configuration and with it, all other authentication parameters (userName, userPassword, clientId, clientSecret) are ignored, but can not be empty.


For example this configuration works:



<bean id=""linkedinConfiguration"" class=""org.apache.camel.component.linkedin.LinkedInConfiguration"">
	<property name=""clientId"" value=""null""/>
	<property name=""clientSecret"" value=""null""/>
	<property name=""redirectUri"" value=""https://localhost""/>
	<property name=""userName"" value=""null""/>
	<property name=""userPassword"" value=""null""/>
	<property name=""accessToken"" value=""very long but correct access token""/>
</bean>



But following configuration should work too (because no real value is removed from the first one):



<bean id=""linkedinConfiguration"" class=""org.apache.camel.component.linkedin.LinkedInConfiguration"">
	<property name=""redirectUri"" value=""https://localhost""/>
	<property name=""accessToken"" value=""very long but correct access token""/>
</bean>



It should be possible to improve component a little bit to allow empty authentication parameters in case of filled accessToken.
(other possible solution is to forbid accessToken functionality, but it will change back-compatibility and possibly harm some users)


But it should not  be allowed to have filled accessToken and also authentication credential, because it will be misleading (for example accessToken could be created for different user)",
0,CAMEL-13340,Bug,Major,2.22.0,"2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Dmitry Volodin,Sergey Savenko,0,3,2019-03-19 10:40:23+00:00,2019-03-24 10:04:36+00:00,"Swagger rests description is generated with invalid responseSchema element. You can see example I found on stackoverflow.


From camel 2.2 swagger-core was upgraded from 1.5.17 to 1.5.20.


In Swagger 1.5.19 new ResponseSchemaMixin was added to default object mapper https://github.com/swagger-api/swagger-core/commit/8b97df3667559fca1783da845607afc30e550b83#diff-58c27954db290a19d4fadbfe34b0bbf3


Camel creates ObjectMapper manually, and does not add this mixin, which results in incorrect json/yaml generated. See https://github.com/apache/camel/blob/camel-2.22.0/components/camel-swagger-java/src/main/java/org/apache/camel/swagger/RestSwaggerSupport.java#L216 and line 235


Fix can be either add ResponseSchemaMixin to manually created objectmappers OR call Json.mapper() and Yaml.mapper() to use swagger logic and don't create mapper manually.","davsclaus:1553033339:2019-03-20T06:08:59.184+0000:1553033339:2019-03-20T06:08:59.184+0000:You are welcome to work on a proposed fix as a PR
dmvolod:1553048063:2019-03-20T10:14:23.812+0000:1553053315:2019-03-20T11:41:55.759+0000:Thanks [~ssavenko], I will look into this issue.

 
davsclaus:1553124140:2019-03-21T07:22:20.530+0000:1553124140:2019-03-21T07:22:20.530+0000:The karaf feature for camel-swagger-java now fails due that io.swagger.jackson.mixin package is not exported by swagger-core. We would need to ""override"" this in our features.xml file or something.
dmvolod:1553153583:2019-03-21T15:33:03.844+0000:1553153583:2019-03-21T15:33:03.844+0000:Rewrite code to prevent use not exported package. It uses an ObjectMapperFactory to prevent add specific capabilities on library fix.
ssavenko:1553238217:2019-03-22T15:03:37.796+0000:1553238217:2019-03-22T15:03:37.796+0000:[~dmvolod] I don't think it will work for yaml. mapper = Yaml.mapper() is used to generate json and then convert to yaml (for some reason), so probably should be also mapper = Json.mapper() for yaml in that line. Thanks.
dmvolod:1553393076:2019-03-24T10:04:36.219+0000:1553393076:2019-03-24T10:04:36.219+0000:Thanks for suggestion, [~ssavenko]. I will fix, but the not good think that this is not covered by the test cases."
0,CAMEL-13339,Bug,Major,2.23.0,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0",Claus Ibsen,Viswa Ramamoorthy,0,3,2019-03-18 17:51:12+00:00,2019-03-24 09:21:35+00:00,"Current implementation of org.apache.camel.component.kafka.KafkaConsumer.KafkaFetchRecords's onPartitionsRevoked, uses org.apache.kafka.clients.consumer.KafkaConsumer.position(partition). This approach causes message loss when multiple processes listening to same topic for point to point messaging (like a QUEUE) type implementation.


 


Issue is noticed when partition gets assigned and then gets revoked in quick succession. Upon partition assignment, say at the beginning of processing offset is set to 0, and say there was no poll for this partition (may be due to earlier poll brought in bunch of records and they are still being processed). Subsequently, say partition got revoked, before polling.


In this case, as onPartitionsRevoked looks at org.apache.kafka.clients.consumer.KafkaConsumer.position(partition) to save offset state and so 0 gets saved in this case in StateRepository implementation. When the same partition get assigned again, StateRepository.getState returns 0. Since Camel KafkaConsumer treats this as last processed offset, it adds 1 to it moving pointer to offset 1. Because of this, message at offset 0 never gets processed.


 


Two fixes might be needed



a) onPartitionsRevoked should look at last processed offset (possibly store 'last processed offset' for each topic/partition in a memory map) and use it to save offset
b) Currently onPartitionsRevoked just saves offset state when an implementation of StateRepository configured. Ideally it should call KafkaFetchRecords.commitOffset so commitSync call goes through when partition revoked and no StateRepository implementation configured","ramu11:1553111021:2019-03-21T03:43:41.459+0000:1553111021:2019-03-21T03:43:41.459+0000:you are very welcome to send a PR. We love contributions
https://github.com/apache/camel/blob/master/CONTRIBUTING.md
viswaram:1553228164:2019-03-22T12:16:04.934+0000:1553228164:2019-03-22T12:16:04.934+0000:[~ramu11] Raised a PR to fix this issue. please check
davsclaus:1553390495:2019-03-24T09:21:35.289+0000:1553390495:2019-03-24T09:21:35.289+0000:Thanks for the PR"
0,CAMEL-13338,Bug,Major,2.23.0,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0-M2, 3.0.0",Claus Ibsen,Viswa Ramamoorthy,0,3,2019-03-18 17:13:12+00:00,2019-03-25 12:53:55+00:00,"Not registering ConsumerRebalanceListener when topicIsPattern turned off, causes either too many duplicate messages getting delivered to message processing layer or causes message loss depending on autoOffsetReset flag value.
 
Issue is noticed with below test scenario
Topic: e.g. TestMessage
Number of partitions: 25 (this is not completely relevant to issue)
ConsumerUri: kafka:<kafka-broker-uris>?topic=TestMessage&groupId=TestMessage_GROUP&consumersCount=5&autoCommitEnable=false&offsetRepository=#<DB-state-repository>
Number processes running consumers: 2 or more; e.g. two instances of Docker containers listening from same topic each with 5 consumer threads
 
Please note that offset management is done in DB with an implementation of Camel's StateRepository interface to eliminate too duplicate messages arriving at the message processor (at most one message processing needed for my use case)
 
When a second process instance (say second container) brought up, since ConsumerRebalanceListener is not registered, partitions start processing at earliest offsets if autoOffsetReset is set to earliest as expected. In this case, too many duplicate messages arrive at the message processing layer. If autoOffsetReset is set to latest, message loss occurs for certain partitions. If autoOffsetReset is set to none, no valid offset exception thrown by broker
 
Issue would be noticed consistently when simulating slow message processing for the above test scenario","viswaram:1552900472:2019-03-18T17:14:32.013+0000:1552900472:2019-03-18T17:14:32.013+0000:To solve, ConsumerRebalanceListener should be registered while subscribing to Kafka topics even though topicIsPattern is turned off. I tried this fix locally and when I use camel-kafka with fix, I do not see any issues. I would be happy to send a PR. 
davsclaus:1552949890:2019-03-19T06:58:10.211+0000:1552949890:2019-03-19T06:58:10.211+0000:Yes you are very welcome to send a PR. We love contributions
https://github.com/apache/camel/blob/master/CONTRIBUTING.md
viswaram:1553064886:2019-03-20T14:54:46.695+0000:1553064886:2019-03-20T14:54:46.695+0000:[~davsclaus] Thanks. I have raised a PR with fix. 
davsclaus:1553390539:2019-03-24T09:22:19.950+0000:1553390539:2019-03-24T09:22:19.950+0000:Thanks for the PR
viswaram:1553489635:2019-03-25T12:53:55.163+0000:1553489635:2019-03-25T12:53:55.163+0000:[~davsclaus] Thanks for merging PR. I see that you have merged fix into 2.23.x branch as well. Do you know when 2.23.2 would be released?"
0,CAMEL-13337,Test,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Matej Melko,Claus Ibsen,0,3,2019-03-18 15:41:20+00:00,2020-09-10 08:45:30+00:00,We now have some unit tests that fails in camel-xmpp,"acosentino:1552894995:2019-03-18T15:43:15.800+0000:1552894995:2019-03-18T15:43:15.800+0000:It seems we have some troubles with the keystore we are using. Or something changed in the embedded Xmpp Server.
acosentino:1553478421:2019-03-25T09:47:01.635+0000:1553478421:2019-03-25T09:47:01.635+0000:I skipped the tests for the moment.
mmelko:1598590074:2020-08-28T12:47:54.410+0000:1598590074:2020-08-28T12:47:54.410+0000:I will take a look at it.
davsclaus:1598677748:2020-08-29T13:09:08.323+0000:1598677748:2020-08-29T13:09:08.323+0000:Thanks Matej
mmelko:1599024312:2020-09-02T13:25:12.590+0000:1599024312:2020-09-02T13:25:12.590+0000:It looks like problem is embedded XMPP server (vysper 0.7): it uses transitively mina-core ~2.0.2 that we override to 2.21 currently. This started to happen after mina upgrade so I tried to lower the version to 2.0.17 and it worked however only with java8. So it looks like only solution is wait till new release of vysper (if something like that will ever happen) or rewrite tests to use different xmpp server (i.e using TestContainers and docker)
davsclaus:1599079200:2020-09-03T04:40:00.840+0000:1599079200:2020-09-03T04:40:00.840+0000:Yeah if we can use test containers, then the server can use old mina, and the client with camel-xmpp can use its newer version
mmelko:1599691719:2020-09-10T06:48:39.625+0000:1599691719:2020-09-10T06:48:39.625+0000:PR: https://github.com/apache/camel/pull/4182
davsclaus:1599698730:2020-09-10T08:45:30.824+0000:1599698730:2020-09-10T08:45:30.824+0000:Thanks for the work"
0,CAMEL-13336,Improvement,Major,None,3.0.0-M2,"
None
",Resolved,Fixed,3.0.0-M2,Zoran Regvart,Zoran Regvart,0,3,2019-03-18 15:22:24+00:00,2019-07-01 04:16:00+00:00,"We can format the Java license headers so that they do not get auto-formatted by IDEs.


There was a discussion on the dev mailing list about this:


https://mail-archives.apache.org/mod_mbox/camel-dev/201903.mbox/%3C47333568-8d51-8750-b4dc-9a9f2fa00ed3%40gmail.com%3E","davsclaus:1552894358:2019-03-18T15:32:38.231+0000:1552894358:2019-03-18T15:32:38.231+0000:Ah okay, so is it a matter of changing the top line from using 2 x asterix

{code}
/**
{code}

to
{code}
/*
{code}


zregvart:1552957647:2019-03-19T09:07:27.708+0000:1552957647:2019-03-19T09:07:27.708+0000:[~davsclaus] yes, it should be as simple as that. I think it makes sense not to use JavaDoc specific syntax.
zregvart:1552962532:2019-03-19T10:28:52.941+0000:1552962532:2019-03-19T10:28:52.941+0000:Headers updated.
bvahdat:1561816328:2019-06-29T21:52:08.078+0000:1561816328:2019-06-29T21:52:08.078+0000:[~zregvart] the following example looks now strange after this license header update change:

https://github.com/apache/camel/tree/master/examples/camel-example-cdi-osgi
bvahdat:1561899764:2019-06-30T21:02:44.415+0000:1561899764:2019-06-30T21:02:44.415+0000:[~zregvart] Never mind, I managed to restore and fix that example (BTW the example was already broken _before_ your commit, sorry :-)).

That said, the example runs now properly using the {{mvn camel:run}} command but not inside Karaf. For that I created CAMEL-13703
davsclaus:1561921766:2019-07-01T03:09:26.196+0000:1561921766:2019-07-01T03:09:26.196+0000:Oh that example should actually be removed, we do not endorse cdi on top of osgi, where only osgi blueprint is recommended when using camel with osgi.
bvahdat:1561925760:2019-07-01T04:16:00.055+0000:1561925760:2019-07-01T04:16:00.055+0000:Thanks for Update, I will try to remove that example in the next days.

"
0,CAMEL-13335,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.15.0,Unassigned,Luca Burgazzoli,0,4,2019-03-17 22:12:37+00:00,2022-01-25 12:11:19+00:00,We should create a camel-cloudevents data type based on https://github.com/cloudevents/sdk-java,"lb:1582762748:2020-02-27T08:19:08.251+0000:1582762748:2020-02-27T08:19:08.251+0000:[~njiang] are you still working on this ?
omarsmak:1587721290:2020-04-24T17:41:30.632+0000:1587721290:2020-04-24T17:41:30.632+0000:Hey [~njiang], are you still on this? Otherwise, if you are unable, I can ship in to help on this ticket. 
Antauri:1619055187:2021-04-22T09:33:07.875+0000:1619055187:2021-04-22T09:33:07.875+0000:Anyone handling this? As users of Camel and Camel K we were interested in having the data-type available. We can use the SDKs ourselves but found this ticket and were wondering if there's an ETA in sight.
lb:1619056657:2021-04-22T09:57:37.302+0000:1619056657:2021-04-22T09:57:37.302+0000:there will be a camel-cloudevents ported from camel-k to camel in the future but we probably need to do a little bit of a design because the java sdk for cloud events does not bring a lot of value for camel as the sdk creates yet another envelope and we already have the Exchange and Message  that are more than enough.
davsclaus:1632875826:2021-09-29T08:37:06.935+0000:1632875826:2021-09-29T08:37:06.935+0000:There is the CE component here, which needs to be moved to core camel project, and then updated for CE 1.x spec
https://github.com/apache/camel-k-runtime/tree/main/camel-k-cloudevents
davsclaus:1643083879:2022-01-25T12:11:19.782+0000:1643083879:2022-01-25T12:11:19.782+0000:There is now a camel-cloudevents component.

If we need more work on this component then create new JIRA tickets"
0,CAMEL-13334,Improvement,Minor,2.21.5,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Robert Half,0,3,2019-03-17 12:22:24+00:00,2019-03-18 10:57:06+00:00,"There does not seem to be a good way to log a message describing what is logged.


Imagine I have a route, where I want to be able to trace all the content. I could use .log() processor but log component is better for tracing all the exchange details and also provides showStreams option.


 




from(direct:in)
.to(log:MyTestClass?level=TRACE)
.to(direct:step1)
.to(log:MyTestClass?level=TRACE)
.to(direct:step2)
.to(log:MyTestClass?level=TRACE)
.to(direct:step3)
.to(log:MyTestClass?level=TRACE)
.to(mock:result)




 


In the resulting log, it will be hard to see which line is produced by which log producer.


Something like 




.to(log:MyTestClass?level=TRACE&message=user before step1)



would be quite helpful. Wondering why it has not been implemented yet. I found only early requests from 2008. 


Beeing able to use simple language would be even better:  




.to(log:MyTestClass?level=TRACE&message=user before step1 - ${header.user.name})","onders:1552805025:2019-03-17T14:43:45.051+0000:1552805025:2019-03-17T14:43:45.051+0000:There is log eip for that purpose.
antidote2:1552809083:2019-03-17T15:51:23.491+0000:1552809083:2019-03-17T15:51:23.491+0000:The documentation (below for reference) states, that log component is for logging the exchange: that's what I need for tracing. Also I think it's a general requirement for a log line, that it contains some info about what is being logged. Putting log EIP before every log component is not an option: ugly and in multithreaded environment the log lines won't be in same sequence.

Difference between log in the DSL and [Log] component

The log DSL is much lighter and meant for logging human logs such as Starting to do ... etc. It can only log a message based on the Simple language. On the other hand Log component is a full fledged component which involves using endpoints and etc. The Log component is meant for logging the Message itself and you have many URI options to control what you would like to be logged.
davsclaus:1552877826:2019-03-18T10:57:06.872+0000:1552877826:2019-03-18T10:57:06.872+0000:You can use the Log EIP for this as that is its purpose to construct customized logging messages."
0,CAMEL-13333,Improvement,Major,2.21.5,,"
None
",Resolved,Won't Fix,None,Unassigned,Robert Half,0,2,2019-03-17 11:50:46+00:00,2019-03-19 13:07:28+00:00,"I think it's described pretty well in this stackoverflow question: https://stackoverflow.com/questions/55127006/multiple-servlets-with-camel-servlet-possible/55197778#55197778 


To sum up: you can work with only one ServletComponent in Camel and you can point it to only one servlet (at least with rest dsl). This means if you want to have /api/ui/health and /api/business/health with servlets ""ui"" mapped to /api/ui/* and ""business"" mapped to /api/business/* with camel rest dsl you cannot.


When working with Camel on an Java EE app server, which only supports Java EE 6 like WebSphere 8.5, I cannot move to Spring 5 (EE 7) and thus 2.21 is the last Camel version, I can work with. I would appreciate a hotfix for this reason.","davsclaus:1552878054:2019-03-18T11:00:54.027+0000:1552878054:2019-03-18T11:00:54.027+0000:Just use

rest(""api1"")
   .get

rest(""api2"")
   .get

To have each rest service prefix with their own context-path
antidote2:1552971854:2019-03-19T13:04:14.102+0000:1552972048:2019-03-19T13:07:28.172+0000:I have already published /api/ui and /api/api1 (there are more). First is handled by a servlet (/api/ui/\*) using Spring. Second is handled by Camel Servlet /api/api1/\*.

If I must use same servlet for api2 with Camel and different contextPath, as you suggested,  I need to change the servlet mapping to /api/* in order to keep the paths for published services. Otherwise all the consumers (other projects) need to adjust. But /api/* conflicts with /api/ui/ and other servlets. My workaround for this is to set an order on the servlets, but I don't really like this, because it's more error prone. On the test environment the order might turn out correct occasionally and fail in the production."
0,CAMEL-13332,Task,Major,None,2.24.0,"
None
",Resolved,Fixed,2.24.0,Grzegorz Grzybek,Grzegorz Grzybek,0,2,2019-03-15 14:55:59+00:00,2019-12-19 17:29:54+00:00,"xnio-api has:



Require-Capability: osgi.service;effective:=active;filter:=""(objectCla
 ss=org.xnio.Xnio)"",osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.7))""




xnio-nio has:



Provide-Capability: osgi.service;objectClass=""org.xnio.Xnio"";name=xnio




so camel-undertow feature should include both bundles in order to be resolved.","ggrzybek:1552633472:2019-03-15T15:04:32.339+0000:1552633472:2019-03-15T15:04:32.339+0000:It's already done on master: https://github.com/apache/camel/commit/c4f445e7b95b46a6fc85236d899de226da892572
njiang:1552667539:2019-03-16T00:32:19.538+0000:1576747794:2019-12-19T17:29:54.298+0000:[~ggrzybek] We need to make sure the patch is back ported the 2.x branch.

ggrzybek:1552687883:2019-03-16T06:11:23.575+0000:1552687883:2019-03-16T06:11:23.575+0000:Fixed [here|https://github.com/apache/camel/commit/f48dd59830d2efa3c7e2e08688496c021a29a33a] in https://github.com/apache/camel/commits/camel-2.x branch.
I thought there'll be automatic JIRA commit from git ;)"
0,CAMEL-13331,Improvement,Major,None,3.0.0-M2,"
None
",Resolved,Implemented,3.0.0-M2,Zoran Regvart,Zoran Regvart,0,1,2019-03-15 09:57:41+00:00,2019-03-18 15:37:37+00:00,"Maven POMs that are intended for the consumers of the artifacts we produce do not need the excessive information that the POMs contain and that's only needed for performing the builds.


For instance we can remove the <build> <profiles> and similar build time only configuration present in the POM, expand property values etc.


I suggest that we do this for the next Camel 3 milestone, gather some feedback and based on that tune the configuration.",zregvart:1552894657:2019-03-18T15:37:37.374+0000:1552894657:2019-03-18T15:37:37.374+0000:Merged from [PR#2828|https://github.com/apache/camel/pull/2828] to {{master}}
0,CAMEL-13330,Bug,Major,"2.23.1, 3.0.0-M1","2.23.2, 2.24.0, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0-M2, 3.0.0",Maciej Swiderski,Duncan Doyle,0,1,2019-03-14 12:53:28+00:00,2019-03-18 15:09:01+00:00,"The .wid files in the camel-jbpm JAR contain incorrect classnames for the InOutCamelConnector and InOnlyCamelConnector, which causes the generated WorkItemHandler configuration in the kie-deployment-descriptor to be incorrect.",
0,CAMEL-13329,Improvement,Major,3.0.0-M1,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-14 08:58:28+00:00,2019-03-18 11:56:37+00:00,This component is still in camel-core and its not part of the core static converters. We should include it - until (if possible) we move the bean component out of camel-core.,davsclaus:1552881397:2019-03-18T11:56:37.433+0000:1552881397:2019-03-18T11:56:37.433+0000:Okay with the other work on faster type converters we now load these converters in a fast way too for all 3rd party converters.
0,CAMEL-13328,Sub-task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-03-14 08:25:25+00:00,2019-03-25 15:52:47+00:00,No Desc,
0,CAMEL-13327,Sub-task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-03-14 08:24:56+00:00,2019-03-25 15:52:59+00:00,No Desc,
0,CAMEL-13326,New Feature,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-14 07:45:49+00:00,2019-04-01 03:15:24+00:00,"We should make camel-core / camel-spring / camel-blueprint have their own set of apt compiler plugins. And then another set for the general components etc.


This avoids running some of these on modules they dont need to do.","davsclaus:1552522641:2019-03-14T08:17:21.941+0000:1552522641:2019-03-14T08:17:21.941+0000:Ah we have apt as provided scope for camel-core which then have all the extra stuff that we dont need normally. But when you then have other components that has dependency on camel-core then we drag in the apt compiler plugin for camel-core.

So this requires maybe a splitup of the core modules once even more to come up with a nice way so users can depend on camel-core and not drag in a apt compiler that has the core only bits.
davsclaus:1554059724:2019-04-01T03:15:24.212+0000:1554059724:2019-04-01T03:15:24.212+0000:gnodet did this by merging them together into a single converter generator"
0,CAMEL-13325,Bug,Minor,2.17.3,Future,"
None
",Resolved,Won't Fix,Future,Dmitry Volodin,Arthanarisamy Annamalai,0,3,2019-03-14 06:00:03+00:00,2019-10-14 10:42:34+00:00,"We use Apache Camel's camel-http component to integrate with HTTP & HTTPS endpoints, HttpConnectionManagerParams is used to configure defaultconnectionsPerHost and maxTotalConnections.




<bean class=""org.apache.commons.httpclient.params.HttpConnectionManagerParams"" id=""MyHttpConnectionManagerParams""> 
    <property name=""defaultMaxConnectionsPerHost"" value=""20""/> 
    <property name=""maxTotalConnections"" value=""200""/> 
</bean>




Above parameters takes effect only if the endpoint URL is over HTTP, same configuration becomes void and default HttpConnectionManager takes effect when endpoint is over HTTPS.


With default  HttpConnectionManager, connections are limited to 2 per host and all user requests gets queued up and response time increased exponentially. 


 


Is there something to be additionally configured for HTTPS url?","davsclaus:1552516007:2019-03-14T06:26:47.884+0000:1552516007:2019-03-14T06:26:47.884+0000:camel-http is deprecated, use camel-http4 or one of the other http components
saran.shajan@gmail.com:1552516664:2019-03-14T06:37:44.001+0000:1552516664:2019-03-14T06:37:44.001+0000:Trying out with camel-http4 parallely. Will update. Thanks. 
saran.shajan@gmail.com:1552531884:2019-03-14T10:51:24.117+0000:1552531884:2019-03-14T10:51:24.117+0000:{code:java}
HttpComponent httpComponent = (HttpComponent) context.getComponent(""http""); httpComponent.setConnectionsPerRoute(1);
{code}
Behaviour looks to same between camel-http and came-http4.

Setting connectionPerRoute as above works only for HTTP requests and default value that is 20 and 200 are considered while protocol used is HTTPS.
dmvolod:1552540089:2019-03-14T13:08:09.810+0000:1552540112:2019-03-14T13:08:32.031+0000:[~saran.shajan@gmail.com], could you please try to run simple test with latest Camel release and submit it if will fails.
saran.shajan@gmail.com:1553054599:2019-03-20T12:03:19.112+0000:1553054599:2019-03-20T12:03:19.112+0000:[~dmvolod] Have attached the simple test and attached is the maven project.

You may use
{code:java}
mvn clean install exec:java{code}
to execute the test case.

Expected is that it should open 40 connections to [https://reqres.in/api/] url but only 20 are opened as it is considering default parameters for HTTPS URL.

Please monitor ESTABLISHED connections to above service endpoint using command
{code:java}
netstat -an 
{code}
[^camel-http-client.zip]
dmvolod:1553070003:2019-03-20T16:20:03.906+0000:1553070003:2019-03-20T16:20:03.906+0000:[~saran.shajan@gmail.com], you can try to fix this issue by adding connectionsPerRoute to the endpoint URI. Is it suitable for you?

 
{code:java}
private String endpointURI = ""https4://reqres.in/api/users?page=2&connectionsPerRoute=40"";
{code}
 
saran.shajan@gmail.com:1553116646:2019-03-21T05:17:26.587+0000:1553116755:2019-03-21T05:19:15.692+0000:[~dmvolod] The same is configured in camel-context.xml file at the component level, since i didn't want to set this at each endpointURI.

 
{code:java}
<bean id=""http4"" class=""org.apache.camel.component.http4.HttpComponent"">
 <property name=""camelContext"" ref=""mycamelClients""/>
 <property name=""connectionsPerRoute"" value=""40""/>
</bean>{code}
It works if the endpointURI is over *HTTP*. 
{code:java}
private String endpointURI = ""http4://reqres.in/api/users?page=2{code}

 The parameter connectionsPerRoute is not considered only when it is over *HTTPS*.
{code:java}
private String endpointURI = ""https4://reqres.in/api/users?page=2{code}

  

 

 
saran.shajan@gmail.com:1553804995:2019-03-29T04:29:55.944+0000:1553804995:2019-03-29T04:29:55.944+0000:[~dmvolod] Thanks. Kindly update that when can we expect the changes?
saran.shajan@gmail.com:1554764033:2019-04-09T06:53:53.853+0000:1554764033:2019-04-09T06:53:53.853+0000:[~dmvolod] [~davsclaus]

Was trying out all possible solutions on a trial and error, to my surprise noticed below configuration seems to be working with older version.

As per [Camel Components list|[http://camel.apache.org/components.html]] there are not components with name https but still  below configuration found to be working.

Are my configurations below right?

Now endpoints of both types HTTP/HTTPS are considering MyHTTPConnectionManager parameters.

 
{code:java}
<bean class=""org.apache.camel.component.http.HttpComponent"" id=""http"">
 <property name=""camelContext"" ref=""myCamelContext""/>
 <property name=""httpConnectionManager"" ref=""MyHttpConnectionManager""/>
 </bean>
<bean class=""org.apache.camel.component.http.HttpComponent"" id=""https"">
 <property name=""camelContext"" ref=""myCamelContext""/>
 <property name=""httpConnectionManager"" ref=""MyHttpConnectionManager""/>
 </bean>
<bean class=""org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"" id=""MyHttpConnectionManager"">
 <property name=""params"" ref=""MyHttpConnectionManagerParams""/>
 </bean>
<bean class=""org.apache.commons.httpclient.params.HttpConnectionManagerParams"" id=""MyHttpConnectionManagerParams"">
 <property name=""defaultMaxConnectionsPerHost"" value=""100""/>
 <property name=""maxTotalConnections"" value=""500""/>
 </bean>
{code}
 

 

 
davsclaus:1571020954:2019-10-14T10:42:34.932+0000:1571020954:2019-10-14T10:42:34.932+0000:camel-http is deprecated and removed"
0,CAMEL-13324,Bug,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Jan Bouska,0,1,2019-03-13 11:24:05+00:00,2019-03-13 18:09:58+00:00,"Yammer message ID can be very high. OlderThan and newerThan endpoint options consumes message id and we are running out of integer range.


 




Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: int with value 58802444918784 due For input string: ""58802444918784""




 


Suggested fix is change olderThan and newerThan options to `long`.",
0,CAMEL-13323,Sub-task,Major,None,,"

help-wanted

",Resolved,Fixed,None,Zoran Regvart,Christoph Deppisch,0,2,2019-03-13 11:10:52+00:00,2019-05-26 13:22:52+00:00,"Top level header navigation generated by Hugo and Antora are subject to diverge as Hugo uses the information in config.toml file and Antora uses a static template file with all navigation items.


It would be good to have a single source for the navigation items that both Hugo and Antora pages use while generating pages.


We could add a preprocessing step to the Antora page generation so we are using the Hugo config.toml file here, too.",zregvart:1558848172:2019-05-26T13:22:52.663+0000:1558848172:2019-05-26T13:22:52.663+0000:Implemented in pull request [#31|https://github.com/apache/camel-website/pull/31]
0,CAMEL-13292,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Kamesh Sampath,0,2,2019-03-05 14:03:02+00:00,2019-03-05 16:23:15+00:00,"When camel is used in serverless world using camel-k, we need to start the routes as consumers of `knative` component.


The following code gets the s3 file name as an event payload from a source , but currently i cant use `s3` consumer to download the file and say log it as there is no consumer available in s3 component that can do it , if I make it from to be form s3 component then it becomes non-severless component i.e. not autoscalable. This pattern will be quite common in enterprise world and when using camel with serverless; hence its great to have consumers for all polling components to be used with knative/serverless scenarios.


e.g.




from(""knative:endpoint/s3filelogger"") .log(""Downloading file: ${in.header.fileName}"") .setHeader(S3Constants.KEY,simple(""${in.header.fileName}"")) .toD(""aws-s3://data?fileName=${in.header.CamelAwsS3Key}&deleteAfterRead=false"") .idempotentConsumer(header(""CamelAwsS3ETag""), idmRepo()) //just sending the response back to the callee .process(this::sendResponse) .end();","acosentino:1551769769:2019-03-05T15:09:29.333+0000:1551769769:2019-03-05T15:09:29.333+0000:We can add a getObject to the producer operations, which make sense for atomic operation like get file."
0,CAMEL-13291,Improvement,Minor,None,3.0.0,"
None
",Resolved,Implemented,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-03-05 11:27:17+00:00,2019-03-05 11:32:59+00:00,"In the past we had to use + sign as separator in the cron




0/2+*+*+*+*+?




We should support also using spaces, so its like text-book cron




0/2 * * * * ?",davsclaus:1551756779:2019-03-05T11:32:59.755+0000:1551756779:2019-03-05T11:32:59.755+0000:Ah we have support for this already.
0,CAMEL-13290,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,4,2019-03-05 08:09:49+00:00,2019-07-25 06:55:48+00:00,No Desc,davsclaus:1564008943:2019-07-25T06:55:43.494+0000:1564008943:2019-07-25T06:55:43.494+0000:A basic engine is implemented
0,CAMEL-13289,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-05 07:03:53+00:00,2019-03-07 05:42:34+00:00,"On linux OS environment variables using dashes is not allowed, eg FOO-BAR, should be FOO_BAR. So we should automatic add support for looking up with underscores as fallback.",
0,CAMEL-13288,New Feature,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Implemented,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-05 06:30:19+00:00,2019-03-05 09:13:52+00:00,"So you can define property placeholders using a dashed style


https://github.com/apache/camel/blob/master/components/camel-jms/src/main/docs/jms-component.adoc


For example to set the JMS component option you can do:
camel.component.jms.acceptMessagesWhileStopping=true


But would be nice to support dashed style too (ala spring boot)
camel.component.jms.accept-messages-while-stopping=true


This is needed for Camel standalone to make this easier / similar to spring-boot",davsclaus:1551748432:2019-03-05T09:13:52.945+0000:1551748432:2019-03-05T09:13:52.945+0000:This was already supported as we allow to lookup the setter with dash to camel case style naming.
0,CAMEL-13287,New Feature,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Balazs Szeti,0,2,2019-03-05 04:53:05+00:00,2019-08-07 05:14:19+00:00,"For aggregation after multicast/splitter the original exchange should optionally be available in the aggregate method.
 There are several use cases when we would like to go-on processing the original exchange after multicast, but we'd like to enrich it with the outcome of the called routes. For example:




rest()
.get(""orders/{orderId}"")
.route()
  .to(""direct:getOrderDetails"") //get UserId, ItemId
  .setBody(method(this,""createResponsePojo""))
  .multicast(new MyAggregationStrategy())
    .to(""direct:getUserDetails"")
    .to(""direct:getDeliveryAddress"")
    .to(""direct:getItemDetails"")
  .end()
;




If any of the called routes fail, we still would like return a partial response in our service (this is a common requirement in case of microservices). The MyAggregationStrategy should simply enrich the ResponePojo object from the original exchange somehow with the new exchanges coming from the sub-routes. See this example:




public class MyAggregationStrategy implements AggregationStrategy {

public Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange) {
  Exchange exchange = oldExchange != null ? oldExchange : originalExchange;
  ResponsePojo response = exchange.getMessage().getBody(ResponsePojo.class);

  if (! newExchange.isFailed()) {
    // ... Add newExchange body somehow to ResponsePojo object...
  }
  return exchange;
}
...
}




Currently only the exchanges from the ""sub-routes"" are available during aggregation, so the exchange after the aggregate will be one (the first) of those. This comes with multiple problems:



Though the exchanges in the sub-routes are copies of the original exchange, sub routes make modifications: modify headers, modify properties, etc. Usually we don't want to see all these set by a sub-route on the final aggregated exchange. It's only noise. ""Whatever happens in the sub-route, should stay in the sub-route."" - We only want to see on the aggregated exchange what we ""took"" intentionally from the sub-route exchanges.
If we use stopOnException(true) our life is simple because we usually don't have to worry about exceptions in aggregate, we will stop anyway. The aggregation logic can become complicated if we want to go on with processing in case of errors. The first time aggregate() is called the oldExchange is null, so we usually take the newExchange as the return value. If this exchange has an Exception, we need to ""clean"" it first, otherwise the error handler will kick in after aggregation. This is non-trivial.



Suggested approach


Let's extend the AggregationStrategy interface with a new method that takes three exchanges. This should be called after Multicast EIP (Enrich EIP is simple, it only has two exchanges).


With a default implementations we can keep the interface compatible:




public interface AggregationStrategy {

/**
* Aggregates an old, a new and the original exchange together to create a single combined exchange.
*
* @param oldExchange the oldest exchange, which is the returned value of the previous aggregation on null.
* @param newExchange the newest exchange
* @param originalExchange the original exchange before Multicast or Splitter EIP. Null in case of Enrich EIP.
* @return a combined exchange, favor returning the oldExchange
*/
default Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange) {
  return aggregate(oldExchange, newExchange);
};

//Maybe we should have a default implementation here too so one can only implement aggregateWithOriginal()
Exchange aggregate(Exchange oldExchange, Exchange newExchange); 
... 
}","BalazsSzeti:1551809885:2019-03-06T02:18:05.132+0000:1551809885:2019-03-06T02:18:05.132+0000:It's also possible to create a new interface. It makes it cleaner (so we can check with ""instanceof"") but it's an extra interface in the api.

 
{code:java}
public interface OriginalAwareAggregationStrategy extends AggregationStrategy {
  Exchange aggregateWithOriginal(Exchange oldExchange, Exchange newExchange, Exchange originalExchange);

  default Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
    return aggregateWithOriginal(oldExchange,newExchange,null);
  }
}
{code}
 "
0,CAMEL-13286,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Guillaume Nodet,Claus Ibsen,0,2,2019-03-04 16:31:25+00:00,2019-03-12 14:27:54+00:00,"We are only using InOnly and InOut MEPs for request/reply and fire-and-forget style messaging. All the others are not in use, and are cruft from the legacy JBI / SOAP-WS world. We should get rid of these for Camel 3.","davsclaus:1551697712:2019-03-04T19:08:32.642+0000:1551697712:2019-03-04T19:08:32.642+0000:Most of this has already been done. A bit more cleanup is still possible.
gnodet:1552372074:2019-03-12T14:27:54.528+0000:1552372074:2019-03-12T14:27:54.528+0000:https://github.com/apache/camel/commit/941929dcb3d285c42ee869cc102269c5331b6810"
0,CAMEL-13285,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0-M2,Guillaume Nodet,Guillaume Nodet,0,1,2019-03-04 13:41:28+00:00,2019-03-04 14:02:13+00:00,No Desc,"gnodet:1551679271:2019-03-04T14:01:11.222+0000:1551679333:2019-03-04T14:02:13.473+0000:https://github.com/apache/camel/commit/00eb3707a0806623a2af228924e26e1184581f00
https://github.com/apache/camel/commit/796b0a356ef3e05417d61f882db8f6b041020cd5
"
0,CAMEL-13284,Bug,Major,3.0.0-M1,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Jiri Ondrusek,0,3,2019-03-04 12:04:07+00:00,2019-03-08 06:07:12+00:00,"Component camel-box depends on Jetty (see https://github.com/apache/camel/blob/master/platforms/karaf/features/src/main/resources/features.xml#L553)


This dependency doesn't allow update servlet-api to 4.0


Solution is to refactor component to use JSoup instead.",acosentino:1551672561:2019-03-04T12:09:21.091+0000:1551672561:2019-03-04T12:09:21.091+0000:+1
0,CAMEL-13283,New Feature,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-03-04 08:52:22+00:00,2019-03-06 15:33:35+00:00,"Now that we can bind to registry, lets add an annotation so users can define those as well, for example with Camel standalone.","davsclaus:1551661296:2019-03-04T09:01:36.728+0000:1551661296:2019-03-04T09:01:36.728+0000:The annotation is named @BindRegistry so it wont confuse with spring-boot / cdi etc.
davsclaus:1551738333:2019-03-05T06:25:33.559+0000:1551738333:2019-03-05T06:25:33.559+0000:Here is a little example (work in progress)
https://github.com/apache/camel/tree/bind/examples/camel-example-main"
0,CAMEL-13282,Bug,Major,2.23.1,"2.24.0, 3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0-M2, 3.0.0",Andrea Cosentino,Michael Lück,0,1,2019-03-04 08:12:47+00:00,2019-03-15 12:57:36+00:00,"When a JAXB class that is created or generated has no @XmlRootElement
 annotation JaxbDataFormat would try to find a ObjectFactory method which
 can create a JAXBElement for the type of the object. It would then use
 the JAXBElement to marshal the object.


While trying to find the objectFactory and to call the appropriate
 method it would catch ALL Exceptions that are thrown and just logs a
 message.


While I don't see why an Exception should only be logged here, this especially
 breaks when the exception is thrown due to a validation error. Because
 the calls to the marshal operation will throw an MarshalException in
 that case which would be caught by the catch block. In other cases where
 no object factory is used but JAXB classes with XmlRootElement
 Annotations or JAXBElements are used the MarshalExceptions will be
 thrown and the doMarshal method will be left.


I already created a PR on github for this: PR2800 


Workaround: If someone is experiencing this problem the first thing to check whether is it possible to make the JAXB Class have the @XmlRootElement Annotation. In that case you won't experience any problems. 
Especially when the classes are generated from XSD you may either use an separate binding to add the annotation or you may create the element definitions in the xsd using an anonymous inline complexType/simpleType that extends your desired type. 


In my case the @XmlRootElement annotation was not added because i used the definition as follows:




<element name=""myElement"" type=""tns:myElementType""/>
<complexType name=""myElementType"">
<!-- your type definition here -->
</complexType>




instead you should write




<element name=""myElement>
  <complexType>
   <!-- your type definition here -->
  </complexType>
</element>",
0,CAMEL-13281,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,2,2019-03-04 07:40:46+00:00,2019-03-19 07:01:30+00:00,"A few component inherit each other, and they may exclude some of the parent options, for example ftp/netty4-http etc. Currently they only do that on endpoint level. We need something similar on component level so the SB auto generation dont include them.




        excludeProperties = ""textline,delimiter,autoAppendDelimiter,decoderMaxLineLength,encoding,allowDefaultCodec,udpConnectionlessSending,networkInterface""
                + "",clientMode,reconnect,reconnectInterval,useByteBuf,udpByteArrayCodec,broadcast,correlationManager"")",davsclaus:1552950090:2019-03-19T07:01:30.692+0000:1552950090:2019-03-19T07:01:30.692+0000:This seems resolve now. netty4-http does not have any excluded options anymore etc.
0,CAMEL-13280,New Feature,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-03-04 04:47:35+00:00,2019-03-04 08:52:59+00:00,We should expose API on properties component so users and tooling can access the loaded properties. This can help with detecting which properties are available in the project.,
0,CAMEL-13279,Bug,Major,"2.23.1, 3.0.0-M1","3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Tadayoshi Sato,Tadayoshi Sato,0,2,2019-03-04 04:03:03+00:00,2019-03-08 05:49:22+00:00,"Camel Box standard authentication starts failing with the following error stacktrace:




org.apache.camel.RuntimeCamelException: Box API connection failed: elementName=[form] attributeName=[name] attributeValue=[consent_form]
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:212)
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createConnection(BoxConnectionHelper.java:91)
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:85)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3709)
	at org.apache.camel.impl.DefaultCamelContext.startServices(DefaultCamelContext.java:3715)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3437)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3248)
	at org.apache.camel.impl.DefaultCamelContext$4.call(DefaultCamelContext.java:3244)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3267)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3244)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:72)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:3160)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:760)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:392)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:281)
	[...]
Caused by: com.gargoylesoftware.htmlunit.ElementNotFoundException: elementName=[form] attributeName=[name] attributeValue=[consent_form]
	at com.gargoylesoftware.htmlunit.html.HtmlPage.getFormByName(HtmlPage.java:643)
	at org.apache.camel.component.box.internal.BoxConnectionHelper.createStandardAuthenticatedConnection(BoxConnectionHelper.java:170)
	... 49 more




Camel Box implements the 3-legged auth using HTTP scraping for the 1st leg to acquire the auth code and it appears the auth dialog at Box.com has been changed.","jondruse:1551685107:2019-03-04T15:38:27.134+0000:1551685107:2019-03-04T15:38:27.134+0000:Problem is fixed in improvement [CAMEL-13279|https://issues.apache.org/jira/browse/CAMEL-13279] ([PR|https://github.com/apache/camel/pull/2803])
tadayosi:1551995362:2019-03-08T05:49:22.823+0000:1551995362:2019-03-08T05:49:22.823+0000:[~jondruse] Yeah it's fixed. Thanks!"
0,CAMEL-13278,Bug,Major,None,3.0.0-M2,"
None
",Resolved,Fixed,3.0.0-M2,Guillaume Nodet,Guillaume Nodet,0,1,2019-03-01 14:18:35+00:00,2019-03-01 19:36:54+00:00,No Desc,gnodet:1551440214:2019-03-01T19:36:54.452+0000:1551440214:2019-03-01T19:36:54.452+0000:https://github.com/apache/camel/commit/48bd797518fe091b7ac7274a62d1024daa78fa0e
0,CAMEL-13277,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0-M2,Guillaume Nodet,Guillaume Nodet,0,1,2019-03-01 13:43:10+00:00,2019-03-01 19:36:41+00:00,No Desc,gnodet:1551440201:2019-03-01T19:36:41.993+0000:1551440201:2019-03-01T19:36:41.993+0000:https://github.com/apache/camel/commit/4aa2106577253d2e926b65663d98f9a94b8e4d00
0,CAMEL-13276,Bug,Major,None,None,"
None
",Resolved,Fixed,3.0.0-M2,Guillaume Nodet,Guillaume Nodet,0,1,2019-03-01 13:10:08+00:00,2019-03-01 19:37:12+00:00,No Desc,"gnodet:1551417393:2019-03-01T13:16:33.174+0000:1551417393:2019-03-01T13:16:33.174+0000:We need to force the use of bndlib 3.5.0 when validating the features.
The workaround can be removed when bndlib 4.2.0 is released.
gnodet:1551440232:2019-03-01T19:37:12.711+0000:1551440232:2019-03-01T19:37:12.711+0000:https://github.com/apache/camel/commit/7e58725067763ef8e8f251f5ff81e4e82d922107"
0,CAMEL-13275,Task,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Francois Papon,0,1,2019-03-01 11:00:23+00:00,2019-03-04 11:04:42+00:00,"This 2 core modules are under components module:



camel-core-osgi
camel-core-xml



They can be move to the root core module.","fpapon:1551409276:2019-03-01T11:01:16.176+0000:1551409276:2019-03-01T11:01:16.176+0000:As discuss on the mailing list, I will push a PR for review."
0,CAMEL-13274,Task,Trivial,2.23.1,"3.0.0-M3, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Hemang Ajmera,0,2,2019-02-28 10:39:01+00:00,2019-03-25 07:29:24+00:00,"At location https://github.com/apache/camel/blob/master/components/camel-metrics/src/main/docs/metrics-component.adoc#options-2


The sentence is ""If no value is not set nothing is added to histogram and warning is logged.""


It should be ""If no value is not set nothing is added to histogram and warning is logged.""


Please remove that additional ""no""","davsclaus:1553392457:2019-03-24T09:54:17.187+0000:1553392457:2019-03-24T09:54:17.187+0000:Thanks, on github you can edit this directly, by clicking the edit button, and then it can create a PR, so you are welcome to try
hemangajmera:1553399057:2019-03-24T11:44:17.898+0000:1553399057:2019-03-24T11:44:17.898+0000:Thanks for suggestion. I have created a PR for the same."
0,CAMEL-13273,Task,Trivial,2.23.1,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Hemang Ajmera,0,2,2019-02-28 10:36:48+00:00,2019-03-24 10:03:53+00:00,"Reference: https://github.com/apache/camel/blob/master/components/camel-jmx/src/main/docs/jmx-component.adoc#which-processors-are-registered


It mentions ""See this FAQ"". But there is no link for it.","davsclaus:1551322147:2019-02-28T10:49:07.129+0000:1551322147:2019-02-28T10:49:07.129+0000:Thanks for these tickets about documentation issues, can you report them in a single ticket. And you are welcome to help fix this by providing a PR"
0,CAMEL-13272,Bug,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-27 17:12:41+00:00,2019-03-01 13:15:56+00:00,"See SO
https://stackoverflow.com/questions/54890566/camel-file-component-create-a-file-and-if-already-exist-move-it-and-renamed-i/54910417#54910417


And for the solution/workaround to use to instead of toD","davsclaus:1551260494:2019-02-27T17:41:34.507+0000:1551260494:2019-02-27T17:41:34.507+0000:Okay I have reproduced this and its a bit more tricky to solve, the same issue would be for the ftp component as they extend file."
0,CAMEL-13271,Task,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-27 15:49:19+00:00,2019-03-01 13:15:39+00:00,After CAMEL-13182,
0,CAMEL-13270,Bug,Minor,2.23.0,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Peter Billen,0,4,2019-02-27 15:01:17+00:00,2020-01-18 23:22:05+00:00,"In `RabbitMQMessageConverter.java`, some kind of header value validation is done:




    private Object getValidRabbitMQHeaderValue(Object headerValue) {
        if (headerValue instanceof String) {
            return headerValue;
        } else if (headerValue instanceof Number) {
            return headerValue;
        } else if (headerValue instanceof Boolean) {
            return headerValue;
        } else if (headerValue instanceof Date) {
            return headerValue;
        } else if (headerValue instanceof byte[]) {
            return headerValue;
        } else if (headerValue instanceof LongString) {
            return headerValue;
        }

        return null;
    }




While this is correct for the listed typed, this is incomplete. An example of this is the `x-death` header, as explained on https://www.rabbitmq.com/dlx.html#effects. This header is basically a `List<Map<String,Object>>`.


If a message with such header is consumed and then propagated to another queue, the header will be lost. An example use case is consuming a dead-letter queue and propagating the messages to another queue, possible after some delay, until the `count` field in the `x-death` header reached a certain threshold.


I am happy to provide a self-contained example if this would be helpful.","acosentino:1551251023:2019-02-27T15:03:43.962+0000:1551251023:2019-02-27T15:03:43.962+0000:You're more than welcome to contribute a PR with a fix and a test for this
ramu11:1552414283:2019-03-13T02:11:23.805+0000:1552414283:2019-03-13T02:11:23.805+0000:could you please attach a simple test case to reproduce the issue
davsclaus:1565090050:2019-08-06T19:14:10.466+0000:1565090050:2019-08-06T19:14:10.466+0000:Maybe we should just accept any header starting with `x-` and dont care about the type
pbillen:1579360925:2020-01-18T23:22:05.088+0000:1579360925:2020-01-18T23:22:05.088+0000:Thank your for fixing. I had the opportunity to try this out, and the fix works great! The `x-death` header is now preserved."
0,CAMEL-13269,Task,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-27 13:45:08+00:00,2019-03-01 13:16:14+00:00,"After CAMEL-13182, we need to test single starters instead of the whole aws starter component, which doesn't exist anymore.",
0,CAMEL-13268,Task,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-27 13:44:18+00:00,2019-03-01 13:16:07+00:00,"After CAMEL-13182, we can test single feature",
0,CAMEL-13267,Bug,Minor,2.23.0,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Peter Billen,0,3,2019-02-27 11:00:26+00:00,2019-08-06 19:12:24+00:00,"I am consuming a RabbitMQ queue as following:


 




from(""rabbitmq://localhost:5672?username=test&password=test&declare=false&queue=q&autoAck=false&threadPoolSize=1&exclusiveConsumer=true"")
   .to(""log:receive"");



 


When I restart the RabbitMQ broker, no messages are longer received in the log handler.


 


According the management interface, all pending messages are in UNACKED state. This means that they are transmitted to the consumer, but not acknowledged. In other words, Camel was able to restore the connection after the restart, but fails to deliver to the log handler and acknowledge them afterwards.


 


I did not test this, but I believe the consumer will eventually crash due to OOM.


 


example


 


Please find a self-contained example on https://github.com/pbillen/playground-camel-13267.You need a (local) Docker daemon to run this. Use it as following:


 



Start with `mvn clean install -U`.
You notice in the logging that every 500ms, a message is sent and received. You can also log into the administrator interface on http://localhost:15672 with login/password `test`. You will see the message pass through every 500ms. Great!
Now restart the RabbitMQ broker. Typically, find the container identifier with `docker ps` and then execute `docker restart <identifier>`.
After restart, you notice that every 500ms a message is sent, but not received. You can also log into the administrator interface and see that all messages are into the UNACKED state.","zregvart:1551244071:2019-02-27T13:07:51.903+0000:1551244071:2019-02-27T13:07:51.903+0000:[~pbillen] have you noticed the {{automaticRecoveryEnabled}} endpoint property? Take look at the [component documentation|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/docs/rabbitmq-component.adoc] for other automatic recovery options.
pbillen:1551244580:2019-02-27T13:16:20.263+0000:1551244903:2019-02-27T13:21:43.597+0000:[~zregvart] I added an example to the issue description. I will now look into the auto-recovery option. Though, I believe the connection and consumer is already being recovered, as all messages after the restart are into UNACKED state. This means that the messages have been delivered successfully to the consumer, but not yet acknowledged (which makes sense, because they do not seem to be propagated to the log handler, as described in the issue).

Thanks for feedback! I will let you know if auto recovery helps here.
pbillen:1551245240:2019-02-27T13:27:20.680+0000:1551245240:2019-02-27T13:27:20.680+0000:[~zregvart] Right, everything seems to work fine with `automaticRecoveryEnabled` enabled! This is great, because it solves my use case. Thanks a lot!

That said, I am wondering what is happening with `automaticRecoveryEnabled` disabled, which is the default. As explained, all messages are in UNACKED state, so they are at consumer side. Where are they? Are they queued? Until when? Don't we risk going OOM here?
zregvart:1551342716:2019-02-28T16:31:56.345+0000:1551342716:2019-02-28T16:31:56.345+0000:[~pbillen] I guess we should set the {{automaticRecoveryEnabled}} to true by default, we're explicitly setting it from {{null}} to {{false}} (I think because of a change made in CAMEL-12111). Pull request for that would be very welcome.

I don't have the answers to your other questions, and I don't think Apache Camel community is not the place to ask those, perhaps reach out to RabbitMQ community as Camel is simply utilizing the AMQP client from RabbitMQ.
davsclaus:1565089853:2019-08-06T19:10:53.350+0000:1565089853:2019-08-06T19:10:53.350+0000:Lets enable that option out of the box in camel 3"
0,CAMEL-13266,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-27 07:55:54+00:00,2019-03-01 13:16:38+00:00,"This module requires camel-management-impl. We should try to make this optional, so the JMX agent is not needed via compile time, but loaded via some factory way. Then end users can run camel XML with and without JMX more easily.","davsclaus:1551239860:2019-02-27T11:57:40.149+0000:1551239860:2019-02-27T11:57:40.149+0000:Okay now camel-management-impl is optional, but I have added it by default to camel-core so this is like we have it on Camel 2.x. 

Later we will have a camel-core-tiny that does not include JMX. You can also just exclude the dependency as well."
0,CAMEL-13265,Improvement,Major,None,3.0.0,"
None
",Resolved,Invalid,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-02-27 07:25:26+00:00,2019-02-27 07:54:01+00:00,"We can now build camel-test before camel-core, and then use camel-test for testing camel-core instead of having its own ContextTestSupport and other base classes.",davsclaus:1551225224:2019-02-27T07:53:44.990+0000:1551225224:2019-02-27T07:53:44.990+0000:Ah this is more difficult as camel-test has dependency on mock endpoint and some other bits that are from camel-core
0,CAMEL-13264,Task,Major,None,,"
None
",Resolved,Fixed,None,Willem Jiang,Willem Jiang,0,2,2019-02-27 06:20:01+00:00,2019-02-27 12:05:28+00:00,We need to create the source release artifact for the camel-k-runtime project.,davsclaus:1551240328:2019-02-27T12:05:28.259+0000:1551240328:2019-02-27T12:05:28.259+0000:Lets keep the issue tracker for camel-k on github - as this one is mainly for the classic Apache Camel.
0,CAMEL-13263,Task,Major,None,None,"
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0-M2, 3.0.0",Thomas Diesler,Thomas Diesler,0,2,2019-02-26 13:47:39+00:00,2019-03-13 09:09:08+00:00,"The IPFS component needs to create a connection to some IPFS node. Currently that happens when the endpoint is created, which happens when the CamelContext is started. 


I was wondering whether I should defer that until the first endpoint invocation occurs. In which case camelctx.start() would succeed and I could asked the endpoint whether a connection could be established (e.g. Assume.assumeTrue(comp.getIPFSClient().hasConnection())) 


Currently, camelctx.start() will fail when a connection cannot be established. Is there a convention on how camelctx.start() should behave when a remote connection is needed?","tdiesler:1551160473:2019-02-26T13:54:33.624+0000:1551160473:2019-02-26T13:54:33.624+0000:Currently, the test does this

{code}
    private void assumeIPFSAvailable(CamelContext camelctx) {
        IPFSComponent comp = camelctx.getComponent(""ipfs"", IPFSComponent.class);
        boolean hasConnection = false;
        try {
            camelctx.start();
            hasConnection = comp.getIPFSClient().hasConnection();
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
        }
        Assume.assumeTrue(hasConnection);
    }
{code}

Alternatively, it could do this

{code}
    private void assumeIPFSAvailable(CamelContext camelctx) throws Exception {
        camelctx.start();
        IPFSComponent comp = camelctx.getComponent(""ipfs"", IPFSComponent.class);
        Assume.assumeTrue(comp.getIPFSClient().hasConnection());
    }
{code}
tdiesler:1551160734:2019-02-26T13:58:54.102+0000:1551160772:2019-02-26T13:59:32.927+0000:In a scenario where a container (e.g. WildFly) starts a the camel context automatically, this deferred connection behavior would make the difference between deployment failure/success.
davsclaus:1551162523:2019-02-26T14:28:43.108+0000:1551162523:2019-02-26T14:28:43.108+0000:Its component specific. Some have a background task and reconnection logic/loop that keeps connecting to the remote system. And can startup in such situations - like JMS etc.

You can use Camel's route controller to startup routes in an async/controlled background task manner which does this for you, so the deployment can install anyway. We have talked about making this the default way in Camel 3, but so far its not.

Its the supervising route controller (should work outside SB too)
https://github.com/apache/camel/blob/master/examples/camel-example-spring-boot-supervising-route-controller/readme.adoc
tdiesler:1551165484:2019-02-26T15:18:04.442+0000:1551165484:2019-02-26T15:18:04.442+0000:Merci. We settled on lenient start behavior. 
davsclaus:1551232946:2019-02-27T10:02:26.772+0000:1551232946:2019-02-27T10:02:26.772+0000:The logic should not be in createEndpoint etc. Such logic belongs in doStart / doStop where you setup connections to remote system as part of starting / stopping logic.

Some components have their own re-connect logic where they can ""self heal"" like JMS and Kafka etc. Its fine if the component does not have that, as its more complex to code.

"
0,CAMEL-13262,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Marc Carter,0,1,2019-02-26 12:27:56+00:00,2019-03-13 08:58:53+00:00,"To allow for new implementations to be considered



Tidy TimeoutMap interface by removing some methods that expose too much of the single implementation
Pull up the listener support added in camel-jms / camel-rabbitmq
Avoid extending DefaultTimeoutMap, prefer decorating TimeoutMap or listening to it",
0,CAMEL-13261,Sub-task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0-M3, 3.0.0",Denis Istomin,Denis Istomin,0,1,2019-02-26 09:14:52+00:00,2019-04-24 16:06:21+00:00,"Database table could be used as a queue, where Producer writes data, Consumer reads data (with deletion or not).


Hibernate component has support of it:





consumeDelete
true
Option for HibernateConsumer only. Specifies whether or not the entity is deleted after it is consumed.





http://camel.apache.org/hibernate.html


Need to improve XML DSL API.",
0,CAMEL-13260,Sub-task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Denis Istomin,Denis Istomin,0,1,2019-02-26 09:08:01+00:00,2019-04-22 12:10:30+00:00,"JOOQ can execute plain SQL: https://www.jooq.org/doc/3.11/manual/sql-execution/query-vs-resultquery/


As example, JPA component has support via:





consumer.query
 
JPA consumer only: To use a custom query when consuming data.


consumer.namedQuery
 
JPA consumer only: To use a named query when consuming data.


consumer.nativeQuery
 
JPA consumer only: To use a custom native query when consuming data. You may want to use the option consumer.resultClass also when using native queries.",
0,CAMEL-13259,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Andrea Cosentino,Claus Ibsen,0,2,2019-02-26 08:15:01+00:00,2019-07-26 09:46:11+00:00,The Camel BOM includes what end users of Camel may use. And typically its the components. However camel-catalog and a few other JARs may be good to add.,"acosentino:1564094869:2019-07-26T06:47:49.198+0000:1564094869:2019-07-26T06:47:49.198+0000:Can we agree on a list of stuff we have to add?
davsclaus:1564096075:2019-07-26T07:07:55.430+0000:1564096075:2019-07-26T07:07:55.430+0000:Yeah what we have here (except for the commands-core and karaf-commands)
https://github.com/apache/camel/blob/master/apache-camel/src/main/descriptors/common-bin.xml#L369

"
0,CAMEL-13258,Improvement,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-26 07:29:13+00:00,2019-03-02 11:15:40+00:00,"The DefaultRegistry should be favoured to be used. 
The simple registry is now more of an implementation detail as part of default registry.
And you can now do bind on default registry so you dont need to add custom registry to camel context to bind a bean etc.",
0,CAMEL-13257,Task,Major,None,3.0.0-M2,"
None
",Resolved,Fixed,3.0.0-M2,Guillaume Nodet,Claus Ibsen,0,2,2019-02-26 03:49:53+00:00,2019-03-04 14:01:47+00:00,"Look at these WARNs and cleanup that stuff of possible


[INFO] — maven-bundle-plugin:4.1.0:manifest (bundle-manifest) @ meta-annotations —
[WARNING] Manifest org.apache.camel:meta-annotations:jar:3.0.0-SNAPSHOT : Unused Import-Package instructions: [org.apache.camel.*, org.springframework.ws.*, org.springframework.xml.*, org.springframework.*, org.apache.cxf.*, org.apache.qpid.*, org.apache.abdera.*, org.apache.commons.httpclient.*, org.apache.velocity.*, org.eclipse.jetty.*, com.thoughtworks.xstream.*, org.antlr.stringtemplate.*, org.ccil.cowan.tagsoup.*, org.mortbay.cometd.*, org.slf4j.*, net.sf.flatpack.*, net.sf.saxon.*, freemarker.*, javax.persistence.*, org.apache.lucene.*, org.apache.solr.*]","davsclaus:1551124479:2019-02-26T03:54:39.664+0000:1551124479:2019-02-26T03:54:39.664+0000:This plugin is also a bit slow with all the manifest computation. So anything to speedup it would be good.
gnodet:1551679307:2019-03-04T14:01:47.644+0000:1551679307:2019-03-04T14:01:47.644+0000:https://github.com/apache/camel/commit/386cfe81fc4fadcfc8c565429289a16dc62f386f"
0,CAMEL-13256,Sub-task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Denis Istomin,Denis Istomin,0,1,2019-02-25 14:35:36+00:00,2019-03-14 13:58:30+00:00,"First implementation of component has to support basic CRUD operations:
 1. Insert entity
 2. Select entity by ID
 3. Update entity
 4. Delete entity by ID


https://www.jooq.org/doc/3.1/manual/sql-execution/crud-with-updatablerecords/simple-crud/",
0,CAMEL-13255,New Feature,Minor,None,"2.24.0, 3.0.0","

pull-request-available
redis

",Resolved,Fixed,"2.24.0, 3.0.0",Andrea Cosentino,Fabien Taysse,0,1,2019-02-25 12:13:26+00:00,2019-02-25 14:23:17+00:00,"Adds support for GEO-related functions to the spring-redis component:



GEOADD (https://redis.io/commands/geoadd)
GEODIST(https://redis.io/commands/geodist)
GEOHASH (https://redis.io/commands/geohash)
GEOPOS (https://redis.io/commands/geopos)
GEORADIUS (https://redis.io/commands/georadius)
GEORADIUSBYMEMBER (https://redis.io/commands/georadiusbymember)",
0,CAMEL-13254,Bug,Minor,2.23.1,3.0.0.RC2,"
None
",Resolved,Implemented,3.0.0.RC2,Unassigned,David Ferguson,0,2,2019-02-25 11:01:08+00:00,2019-10-01 08:44:02+00:00,"Using the following file route definition




from(""file:data/inbox?fileName=File-1.txt"" +
        ""&charset=UTF-8"" +
        ""&preMove=Staging"" +
        ""&move=Success/${file:name.noext}-${date:now:yyyyMMddHHmmssSSS}.${file:ext}"" +
        ""&moveFailed=Failed/${file:name.noext}-${date:now:yyyyMMddHHmmssSSS}.${file:ext}""
)
        .log(""Finished polling..."");




results in the following behaviour:



File consumed from inbox directory - OK
File pre-moved to inbox/Staging directory for processing - OK
File moved to 


inbox/Success/${file:name.noext}-${date:now:yyyyMMddHHmmssSSS}.${file:ext}

when processing finished successfully - OK



This functions as expected.


Using the exact same URI definition with the Content Enricher EIP pollEnrich using the following route




from(""timer:start?delay=1000"")
        .pollEnrich()
        .simple(""file:data/inbox?fileName=File-1.txt"" +
                ""&charset=UTF-8"" +
                ""&preMove=Staging"" +
                ""&move=Success/${file:name.noext}-${date:now:yyyyMMddHHmmssSSS}.${file:ext}"" +
                ""&moveFailed=Failed/${file:name.noext}-${date:now:yyyyMMddHHmmssSSS}.${file:ext}""
        )
        .log(""Finished polling..."");




results in the following behaviour:



File consumed from inbox directory - OK
File pre-moved to inbox/Staging directory for processing - OK
File moved to


 inbox/Staging/Success/-${date:now:yyyyMMddHHmmssSSS}/${file:name}




Which is NOT AS EXPECTED.


As the behaviour differs even though the exact same URI is defined for the file consumers, I'd be inclined to regard this as unintended behaviour and thus a bug. What do you guys think?


This strange behaviour also seems to have been discussed here back in 2016:


http://camel.465427.n5.nabble.com/PollEnrich-with-file-language-td5787380.html","Tidy Dave:1551066582:2019-02-25T11:49:42.827+0000:1551066582:2019-02-25T11:49:42.827+0000:This also applies to the camel-ftp component, when used as part of pollEnrich.
davsclaus:1551305477:2019-02-28T06:11:17.482+0000:1551305477:2019-02-28T06:11:17.482+0000:This smells like CAMEL-13272, so can you try with 3.0M2 when its released, or try a 3.0 SNAPSHOT.
davsclaus:1551305509:2019-02-28T06:11:49.196+0000:1551305509:2019-02-28T06:11:49.196+0000:This is only related to file/ftp when you use those move options
davsclaus:1565089708:2019-08-06T19:08:28.496+0000:1565089708:2019-08-06T19:08:28.496+0000:Try with Camel 3.0 M2+"
0,CAMEL-13253,Task,Minor,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Claus Ibsen,0,1,2019-02-25 10:54:38+00:00,2019-03-01 13:37:18+00:00,We should remove the deprecated examples,
0,CAMEL-13252,Task,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-25 09:53:42+00:00,2019-03-01 13:15:47+00:00,OSGi with camel-cdi was hard to make stable and also not recommended to use. We only support OSGi blueprint on OSGi and for CDI then use plain CDI containers.,
0,CAMEL-13251,Improvement,Minor,2.23.1,,"
None
",Closed,Not A Bug,None,Unassigned,Tomas Veskrna,0,2,2019-02-24 09:51:11+00:00,2019-03-13 09:25:53+00:00,"Discovered during testing link CAMEL-12744.


I create test: https://github.com/tveskrna/camel/commit/03ca7817676728ed538cbf0d1d003867a33819c9 when Restlet producer using SSL. This test fails. In closer view you can find it is SSL handshake error.


When you replace code on: https://github.com/apache/camel/blob/master/components/camel-restlet/src/main/java/org/apache/camel/component/restlet/RestletProducer.java#L59


with:




final KeyStore ks = KeyStore.getInstance(""JKS"");
ks.load(new FileInputStream(new File(""path/to/keystore/in/restlet"")), ""changeit"".toCharArray());

final KeyManagerFactory kmf = KeyManagerFactory.getInstance(Security.getProperty(""ssl.KeyManagerFactory.algorithm""));
kmf.init(ks, ""changeit"".toCharArray());

final TrustManagerFactory tmf = TrustManagerFactory.getInstance(Security.getProperty(""ssl.KeyManagerFactory.algorithm""));
tmf.init(ks);

final SSLContext sslContext = SSLContext.getInstance(""TLS""); 
sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

return sslContext; 



you can find out there is problem in type of SSL Context and replacing it with right SSL Context, it starts work.","acosentino:1551063387:2019-02-25T10:56:27.139+0000:1551063387:2019-02-25T10:56:27.139+0000:You're welcome to raise a PR for this
tveskrna:1552440256:2019-03-13T09:24:16.138+0000:1552440256:2019-03-13T09:24:16.138+0000:I have to appologize for this issue. I it is my fault. I forggot add a TrustStore to my SSLContext. 

I create fix for that: [https://github.com/tveskrna/camel/commit/d14c41608dc049595793cfb2a46cee4a27a7395b]

Now I can raise PR."
0,CAMEL-13250,Sub-task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Denis Istomin,Denis Istomin,0,1,2019-02-23 09:47:46+00:00,2019-04-26 08:39:43+00:00,No Desc,
0,CAMEL-13249,Bug,Major,2.18.0,"2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Zoran Regvart,Zoran Regvart,0,1,2019-02-22 17:00:23+00:00,2019-02-25 15:54:40+00:00,"HttpRestHeaderFilterStrategy is used by HTTP producers and it delegates to applyFilterToExternalHeaders from superclass, which filters in the IN direction instead of in the OUT direction.


This leads to an issue when HTTP consumer is followed by a HTTP producer created from the RestProducerFactory implementation in that the HTTP headers that are meant to be filtered out are passed on to the HTTP service being invoked.


These headers include Host header which is used for virtual hosting and will most likely fail the request with 404 or 503 HTTP status.",
0,CAMEL-13248,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-22 09:22:24+00:00,2019-03-01 13:22:26+00:00,No Desc,
0,CAMEL-13247,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-22 09:21:48+00:00,2019-03-01 13:22:33+00:00,No Desc,
0,CAMEL-13246,Improvement,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-22 04:20:41+00:00,2019-03-01 13:22:49+00:00,No Desc,
0,CAMEL-13245,Bug,Major,2.23.1,"3.0.0.RC2, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0",Unassigned,Pierre Chesneau,0,3,2019-02-21 16:55:19+00:00,2020-05-18 16:18:10+00:00,"The RabbitMqProducer and RabbitMqPublisher do not honor the EXCHANGE_OVERRIDE_NAME header when used for a routing Key not starting with


RabbitMQConstants.RABBITMQ_DIRECT_REPLY_ROUTING_KEY.


For example : 

from(""stream:in?promptMessage=Enter message payload: "").setHeader(RabbitMQConstants.EXCHANGE_OVERRIDE_NAME,constant("""")).setHeader(RabbitMQConstants.ROUTING_KEY,constant(""test""))
.to(""rabbitmq:uselessExchange"");


will publish the message with the routing key ""test"" on the ""uselessExchange"" exchange instead of the expected """" (default exchange).


This seems to come from a conflict between : 



org.apache.camel.component.rabbitmq.RabbitMQProducer#processInOnly which extract and remove the exchange override name, then pass it to org.apache.camel.component.rabbitmq.RabbitMQProducer#basicPublish where it is not used.
_org.apache.camel.component.rabbitmq.RabbitMQMessagePublisher#publishToRabbit_MQ (that is called by the previous function through the ChannelCallback) where the Exchange override name is once again removed (though it is null now, since it has been removed previously)



Note that when the routing key starts with RABBITMQ_DIRECT_REPLY_ROUTING_KEY the behavior is almost correct thanks to org.apache.camel.component.rabbitmq.RabbitMQMessagePublisher#resolveMessageFrom


which overrides the exchange_override_name with the default exchange.


I would gladly create a PR or a patch with a correction, but I'm not sure of the intended behavior ? 


Should we: 



 do not extract the EXCHANGE_OVERRIDE_NAME in the org.apache.camel.component.rabbitmq.RabbitMQProducer#processInOnly
Extract it but make sure it goes all the way down to the org.apache.camel.component.rabbitmq.RabbitMQMessagePublisher#RabbitMQMessagePublisher constructor where it could be saved and reused later by the org.apache.camel.component.rabbitmq.RabbitMQMessagePublisher#publishToRabbitMQ



In my Opinion the best solution would be to remove the extraction of the header in 


org.apache.camel.component.rabbitmq.RabbitMQProducer#processInOnly (and org.apache.camel.component.rabbitmq.RabbitMQProducer#processInOut)","ramu11:1552414466:2019-03-13T02:14:26.249+0000:1552414466:2019-03-13T02:14:26.249+0000:Hi,

please attach a simple test case to show the issue. we will look into it
davsclaus:1570168665:2019-10-04T13:57:45.014+0000:1570168665:2019-10-04T13:57:45.014+0000:The header need to be extracted so its not propagated over rabbitmq, and may be used again on ""the other side"" if Camel is processing the message there too. 

davsclaus:1570168849:2019-10-04T14:00:49.724+0000:1570168849:2019-10-04T14:00:49.724+0000:This has been fixed by
https://github.com/apache/camel/commit/44d243ecb1c77530d70d56cc76caae2491498d48"
0,CAMEL-13244,New Feature,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Unassigned,Luca Burgazzoli,0,2,2019-02-21 16:14:58+00:00,2019-07-25 07:04:48+00:00,camel-salesforce logs in to salesforce when the component starts but it would be nice to have a flag to postpone this step when i.e. the first message comes,"davsclaus:1564009021:2019-07-25T06:57:01.663+0000:1564009021:2019-07-25T06:57:01.663+0000:There is a lazy-login option now, but the start logic also does some init 
davsclaus:1564009413:2019-07-25T07:03:33.493+0000:1564009413:2019-07-25T07:03:33.493+0000:Ah okay for the consumer side then it was started sooner if you have a consumer, so we are moving this logic to when the consumer starts"
0,CAMEL-13243,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,1,3,2019-02-21 14:43:42+00:00,2019-03-07 13:54:28+00:00,"For users that just want a plain Camel standalone, and also for Camel K where running low-footprint is important.


For example to make properties component automatic load from application.properties from root classpath. And also allow to have those properties fallback to lookup via ENV variables, so containers can customize them that way too.


And add other ideas here to this ticket","davsclaus:1550731476:2019-02-21T14:44:36.991+0000:1550731476:2019-02-21T14:44:36.991+0000:There is a Camel K tutorial in the works for knative and they are using Camel main and have a bit pain
https://github.com/redhat-developer-demos/knative-tutorial
kameshsampath:1550731680:2019-02-21T14:48:00.974+0000:1550731680:2019-02-21T14:48:00.974+0000:Yes, for camel-k cases it would be really nice to have the main method automatically set default `application.properties` from classpath to make it easier for application to lookup the properties and avoid boilerplate like the following in the routes.

```

PropertiesComponent pc = (PropertiesComponent) getContext().getComponent(""properties"");
pc.setLocation(""application.properties"");

```

and 

```

private static String property(PropertiesComponent propertiesComponent, String key, String defaultValue) {
 try {
 if (System.getenv().containsKey(key)
 && System.getenv().get(key) != null) {
 return System.getenv().get(key);
 } else {
 return propertiesComponent.parseUri(propertiesComponent.getPrefixToken() + key + propertiesComponent.getSuffixToken());
 }
 } catch (IllegalArgumentException e) {
 return defaultValue;
 } catch (Exception e) {
 throw new RuntimeException(e);
 }
}

```
lb:1550732054:2019-02-21T14:54:14.846+0000:1550732054:2019-02-21T14:54:14.846+0000:This could also be useful https://issues.apache.org/jira/browse/CAMEL-10792
davsclaus:1551239166:2019-02-27T11:46:06.508+0000:1551239166:2019-02-27T11:46:06.508+0000:See also this code which has a bit of boilerplate stuff to configure itself in a single java file for camel k
https://github.com/redhat-developer-demos/knative-tutorial-camelk/blob/master/quickstart/src/main/java/PersonMessagesRouter.java#L38-L50
davsclaus:1551239176:2019-02-27T11:46:16.880+0000:1551239176:2019-02-27T11:46:16.880+0000:yeah well if we want we can try to enhance camel main, to detect some camel annotations or conventional method names on RouteBulder class and use that as its initialzation
kameshsampath:1551239352:2019-02-27T11:49:12.802+0000:1551239352:2019-02-27T11:49:12.802+0000:Also would be great have some beans already available as part of the default registry that are instantiated after getting the properties. in the same example configuring s3Client does not do much other than setting properties
davsclaus:1551310301:2019-02-28T07:31:41.776+0000:1551310301:2019-02-28T07:31:41.776+0000:We should also remove the old cruft code in Main / MainSupport for 2+ camel contexts. In realitiy there is only 1 context, and the code is just clutter.
davsclaus:1551325631:2019-02-28T11:47:11.910+0000:1551857651:2019-03-06T15:34:11.610+0000:Remove old cruft in Main about multiple camel context *DONE*
Load properties from classpath application.properties by default (its optional) *DONE*
Light-weight IoC (dependency injection) with route builder classes *DONE*
Spring IoC (dependency injection) with route builder classes, and automatic component scanning the the same packages where you have route builder classes  *DONE*
The properties component now also by default support looking up in ENV *DONE*
Auto configuration of components,dataformat,languages in a similar way as Camel with Spring Boot (however a bit more limited) *DONE*
Allow to bind beans to registry via annotations so you can configure more complex beans via java code *DONE*
Allow to specify property placeholder options for auto-configuration ala spring boot style with dashed style *DONE*
Allow to configure general camel options ala Spring Boot with camel.xxx (eg camel.name = foo) *DONE*
Do dependency injection on existing route builder instances, eg that are already created via new constructor. *DONE*
davsclaus:1551738910:2019-03-05T06:35:10.597+0000:1551738910:2019-03-05T06:35:10.597+0000:A little example here (work in progress)
https://github.com/apache/camel/tree/bind/examples/camel-example-main/src/main/java/org/apache/camel/example
davsclaus:1551738995:2019-03-05T06:36:35.690+0000:1551739027:2019-03-05T06:37:07.097+0000:We could also have a @CamelConfiguration annotation and let Camel Main auto-scan for classes with this annotation to use as configuration classes.

We can also add support for the main class to automatic scan for RouteBuilder classes (with cost of doing classpath scanning).
davsclaus:1551857679:2019-03-06T15:34:39.032+0000:1551857679:2019-03-06T15:34:39.032+0000:Okay we got a bunch of stuff now, and there is an example with camel-example-main"
0,CAMEL-13212,Task,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2019-02-18 04:40:13+00:00,2022-09-02 11:25:45+00:00,"The camel-catalog is built after the karaf features, so you cannot/should not validate the feature file by default as it includes camel-catalog, which is not built at that time.


An alternative is to move the karaf feature out of platforms into its own module, and put it to build after the catalog.",
0,CAMEL-13211,Bug,Major,2.23.1,"2.23.2, 2.24.0, 3.x","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.x",Pascal Schumacher,Pascal Schumacher,0,1,2019-02-17 09:43:57+00:00,2019-02-17 21:09:22+00:00,"It is not possible to configure host, port and systemId at component level (e.g. by using Spring Boot component configuration properties), because camel-smpp always uses the values from the URI, even if the values are not present.",
0,CAMEL-13210,Improvement,Major,None,"2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-17 09:27:14+00:00,2019-02-17 09:51:48+00:00,"Reported on user forum
http://camel.465427.n5.nabble.com/ExcludeRoutes-not-working-tp5830132.html",
0,CAMEL-13209,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Dmitry Volodin,Claus Ibsen,0,4,2019-02-16 07:00:11+00:00,2019-06-26 19:20:18+00:00,Contributions is welcome,"dimitrisli:1558021906:2019-05-16T23:51:46.993+0000:1558021906:2019-05-16T23:51:46.993+0000:[~davsclaus] I've picked this one up on [https://github.com/apache/camel/pull/2924]
acosentino:1558046021:2019-05-17T06:33:41.375+0000:1558046021:2019-05-17T06:33:41.375+0000:When something is already assigned to someone else, please first ask on the issue if that person is still working on it avoiding possible double effort.
dimitrisli:1558079753:2019-05-17T15:55:53.451+0000:1558079753:2019-05-17T15:55:53.451+0000:[~ancosen] [~dmvolod] apologies for that, I was just focusing on the label/description about contributions. Will make sure to double check in the future.
dmvolod:1561548018:2019-06-26T19:20:18.704+0000:1561548018:2019-06-26T19:20:18.704+0000:Thanks [~dimitrisli] for the main work.

Updated to gRPC 1.21.0 and Protobuf 3.7.1 as these components affect each other."
0,CAMEL-13208,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-15 08:46:11+00:00,2019-03-01 13:16:55+00:00,"So its like in 2.x, where you have JMX out of the box.


We will for M2 work on a camel-core-tiny where you dont have that OOTB and other core components etc to have a minimal Camel.","davsclaus:1550192885:2019-02-15T09:08:05.532+0000:1550192885:2019-02-15T09:08:05.532+0000:camel-spring has dependency on camel-management-impl which it should not.
And we should try to get camel-core-xml not rely on camel-managemet-impl, but have some factory API for creating the management, when you have camel-management-impl on the classpath or not. Then we can rely on just camel-management-api, and people can then via the camel-core-tiny more easily have JMX or not."
0,CAMEL-13207,Task,Minor,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2019-02-15 08:37:31+00:00,2022-09-02 11:25:33+00:00,"It should really only have those compile/runtime JARs.


We have test-jar, source, javadoc, and other cruft, for example


   <dependency>
        <groupId>org.optaplanner</groupId>
        <artifactId>optaplanner-examples</artifactId>
        <version>7.14.0.Final</version>
        <classifier>sources</classifier>
      </dependency>
      <dependency>
        <groupId>org.optaplanner</groupId>
        <artifactId>optaplanner-examples</artifactId>
        <version>7.14.0.Final</version>
        <type>test-jar</type>
      </dependency>",davsclaus:1662089133:2022-09-02T11:25:33.099+0000:1662089133:2022-09-02T11:25:33.099+0000:we have a bom with only the camel starters that users should use
0,CAMEL-13206,Task,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Thomas Diesler,2,2,2019-02-15 07:47:12+00:00,2019-07-31 18:30:48+00:00,"There have been requests to also support Camel in WildFly domain mode. AFAIU, this could work for stateless components or components that have its state replication (or general state management) handled by the underlying platform.


Perhaps it'd be useful to first mark those components that are stateless or alternatively need some sort of state management. In a further step it would perhaps be useful to provide some sort of state management API that can then be implemented by the underlying platform.


In EAP this could then perhaps be delegated to the domain mode state management.",
0,CAMEL-13205,Task,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Andrea Cosentino,0,1,2019-02-15 06:52:02+00:00,2022-09-02 11:24:55+00:00,No Desc,
0,CAMEL-13204,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Claus Ibsen,0,1,2019-02-14 15:27:47+00:00,2019-03-01 13:23:31+00:00,"***************************
APPLICATION FAILED TO START
***************************


Description:


Field metricRegistry in org.apache.camel.example.spring.boot.metrics.Application required a bean of type 'com.codahale.metrics.MetricRegistry' that could not be found.


The injection point has the following annotations:



@org.springframework.beans.factory.annotation.Autowired(required=true)



Action:


Consider defining a bean of type 'com.codahale.metrics.MetricRegistry' in your configuration.


[WARNING]
java.lang.reflect.InvocationTargetException
    at sun.reflect.NativeMethodAccessorImpl.invoke0 (Native Method)
    at sun.reflect.NativeMethodAccessorImpl.invoke (NativeMethodAccessorImpl.java:62)
    at sun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:498)
    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run (AbstractRunMojo.java:558)
    at java.lang.Thread.run (Thread.java:748)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'application': Unsatisfied dependency expressed through field 'metricRegistry'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.codahale.metrics.MetricRegistry' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: 

{@org.springframework.beans.factory.annotation.Autowired(required=true)}",
0,CAMEL-13203,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Ramu,Andrea Cosentino,0,2,2019-02-14 14:03:13+00:00,2019-03-13 07:20:08+00:00,Actually it is ignored.,"ramu11:1552416283:2019-03-13T02:44:43.477+0000:1552416283:2019-03-13T02:44:43.477+0000:[~ancosen] could you please explain in bit detail what needs to be done 
acosentino:1552430436:2019-03-13T06:40:36.028+0000:1552430436:2019-03-13T06:40:36.028+0000:MDC doesn't seem to work on camel 3, the test is related to this."
0,CAMEL-13202,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-14 12:38:25+00:00,2019-03-01 13:23:44+00:00,"we have still the ones that was in camel-core, but many has been moved out to its own component such as file, log, timer etc.",
0,CAMEL-13201,Task,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-02-14 12:28:52+00:00,2019-06-25 08:18:24+00:00,"The camel-core includes all the core components from 2.x. However you may want to choose precisely only the core components you need.


So with a camel-core-minimal you can then add the ones afterwards, such as log,timer and file etc.","davsclaus:1550121374:2019-02-14T13:16:14.653+0000:1550121374:2019-02-14T13:16:14.653+0000:For spring-boot we could have the same, so the -starter just depends on the minimal core. Then you need to add camel-timer-starter if you use the timer component and so forth.

Then you need to choose the core should be regular core or core-minimal. Then all the generated starters should depend on minimal, so they dont bring in those extra JARs
davsclaus:1550122342:2019-02-14T13:32:22.206+0000:1550122342:2019-02-14T13:32:22.206+0000:A quick prototype for minimal spring-boot starters show a low less dependencies
{code}
davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-spring-boot (tiny)/$ mvn dependency:tree | wc -l
     124
davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-spring-boot (tiny)/$ cd ..
davsclaus:/Users/davsclaus/workspace/camel/examples (tiny)/$ cd camel-example-spring-boot-minimal/
davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-spring-boot-minimal (tiny)/$ mvn dependency:tree | wc -l
      78
{code}
Where the minimal example uses the timer, log core components
davsclaus:1550122400:2019-02-14T13:33:20.189+0000:1550122400:2019-02-14T13:33:20.189+0000:Pushed a work in progress branch
https://github.com/apache/camel/tree/tiny

All the spring-boot starters needs to be re-generated so they rely on -minimal out of the box.

davsclaus:1553821932:2019-03-29T09:12:12.272+0000:1553821932:2019-03-29T09:12:12.272+0000:The best name so far is camel-core-engine
davsclaus:1561342702:2019-06-24T10:18:22.470+0000:1561342702:2019-06-24T10:18:22.470+0000:I got a prototype up with a new camel-core-engine which is just a JAR with many excludes from camel-core.

And I modified the camel-example-main to have as few JARs as possible
{code}
[INFO] ------------< org.apache.camel.example:camel-example-main >-------------
[INFO] Building Camel :: Example :: Main 3.0.0-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO]
[INFO] --- camel-maven-plugin:3.0.0-SNAPSHOT:run (default-cli) @ camel-example-main ---
[INFO] You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true
[INFO] Using custom org.apache.camel.example.MyApplication to initiate a CamelContext
[INFO] Classpath:
[INFO]   /Users/davsclaus/workspace/camel/examples/camel-example-main/target/classes/
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-core-engine/3.0.0-SNAPSHOT/camel-core-engine-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-api/3.0.0-SNAPSHOT/camel-api-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-util/3.0.0-SNAPSHOT/camel-util-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-management-api/3.0.0-SNAPSHOT/camel-management-api-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-support/3.0.0-SNAPSHOT/camel-support-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-core/3.0.0-SNAPSHOT/camel-core-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-base/3.0.0-SNAPSHOT/camel-base-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-properties/3.0.0-SNAPSHOT/camel-properties-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-main/3.0.0-SNAPSHOT/camel-main-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-bean/3.0.0-SNAPSHOT/camel-bean-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/camel/camel-quartz2/3.0.0-SNAPSHOT/camel-quartz2-3.0.0-SNAPSHOT.jar
[INFO]   /Users/davsclaus/.m2/repository/org/quartz-scheduler/quartz/2.3.1/quartz-2.3.1.jar
[INFO]   /Users/davsclaus/.m2/repository/com/mchange/mchange-commons-java/0.2.15/mchange-commons-java-0.2.15.jar
[INFO]   /Users/davsclaus/.m2/repository/com/zaxxer/HikariCP-java7/2.4.13/HikariCP-java7-2.4.13.jar
[INFO]   /Users/davsclaus/.m2/repository/com/mchange/c3p0/0.9.5.4/c3p0-0.9.5.4.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/logging/log4j/log4j-api/2.11.2/log4j-api-2.11.2.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/logging/log4j/log4j-core/2.11.2/log4j-core-2.11.2.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.11.2/log4j-slf4j-impl-2.11.2.jar
[INFO]   /Users/davsclaus/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar
[INFO]   /Users/davsclaus/.m2/repository/org/apache/logging/log4j/log4j-jul/2.11.2/log4j-jul-2.11.2.jar
[INFO] Starting Camel ...
{code}

The profiler says that 3543 classes is loaded vs 3785 classes. Now there is many classes optional on the classpath as they are components not in use, so the reduced number of classes is smaller, but they take up disk-space and memory space the more classes we have on classpath. 
"
0,CAMEL-13200,Task,Major,None,"3.0.0-M3, 3.0.0","
None
",Resolved,Won't Fix,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-14 12:23:09+00:00,2019-03-29 09:28:36+00:00,It should be shaded into camel-core which I dont think happens,davsclaus:1553822916:2019-03-29T09:28:36.122+0000:1553822916:2019-03-29T09:28:36.122+0000:Its optional now
0,CAMEL-13199,Improvement,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-02-14 10:11:24+00:00,2019-03-01 13:24:00+00:00,"Reported on user forum
http://camel.465427.n5.nabble.com/No-ExchangeSentEvent-in-Produce-but-is-in-ProducerTemplate-tp5830067.html",
0,CAMEL-13198,Wish,Minor,None,None,"
None
",Resolved,Invalid,None,Unassigned,Bilgehan,0,2,2019-02-14 08:40:03+00:00,2019-02-14 08:42:02+00:00,Hi Can I use apache camel for oracle stored procedures which sp has input/output user defined types can you share an example for it.,acosentino:1550104922:2019-02-14T08:42:02.091+0000:1550104922:2019-02-14T08:42:02.091+0000:Please ask on the user mailing list.
0,CAMEL-13197,Bug,Major,2.18.3,,"
None
",Resolved,Invalid,None,Unassigned,Madhav,0,2,2019-02-13 19:25:55+00:00,2019-02-13 20:14:46+00:00,"There are no duplicate routes in actual. When the application runs in standalone no issues.


 


But in case of testing;



already UTs are there in place for route testing. In those Ut classes route builder beans are added under SingleRouteCamelConfiguration.
When i add an integration test class for spring boot level testing using @SpringBootTest, the application fail to start due to route id duplication.



 


However, If i remove all the existing UT test classes, then no issues.


 


Could you please help me to get some workaround. 


 


 


Log: 


 


Error starting ApplicationContext. To display the auto-configuration report re-run your application with 'debug' enabled.
2019-02-14 00:42:35.060 ERROR 21856 — [ main] o.s.boot.SpringApplication : Application startup failed


org.apache.camel.spring.boot.CamelSpringBootInitializationException: org.apache.camel.FailedToStartRouteException: Failed to start route routeXYZ because of duplicate id detected: routeXYZ . Please correct ids to be unique among all your routes.
 at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:124)
 at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:41)
 at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)
 at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)
 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383)
 at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337)
 at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882)
 at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144)
 at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545)
 at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122)
 at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761)
 at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371)
 at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
 at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:111)
 at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:98)
 at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:116)
 at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:83)
 at au.com.dius.pact.provider.spring.SpringRestPactRunner.getPactSource(SpringRestPactRunner.kt:46)
 at au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.kt:69)
 at au.com.dius.pact.provider.junit.RestPactRunner.<init>(RestPactRunner.kt:8)
 at au.com.dius.pact.provider.spring.SpringRestPactRunner.<init>(SpringRestPactRunner.kt:18)
 at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
 at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
 at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
 at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
 at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)
 at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)
 at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
 at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)
 at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)
 at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createUnfilteredTest(JUnit4TestLoader.java:87)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:73)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:46)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:522)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)
Caused by: org.apache.camel.FailedToStartRouteException: Failed to start route routeXYZ  because of duplicate id detected: routeXYZ . Please correct ids to be unique among all your routes.
 at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:973)
 at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3401)
 at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3132)
 at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:183)
 at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2961)
 at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2957)
 at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2980)
 at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2957)
 at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
 at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2924)
 at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:141)
 at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:116)
 ... 37 common frames omitted",acosentino:1550060086:2019-02-13T20:14:46.150+0000:1550060086:2019-02-13T20:14:46.150+0000:Please ask on the user mailing list first
0,CAMEL-13196,Bug,Minor,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-02-13 17:55:57+00:00,2019-03-01 13:39:10+00:00,camel-salesforce ignores the global option resolvePropertyPlaceholders as SalesforceComponent.doStart does not invoke the parent method.,
0,CAMEL-13195,Bug,Major,None,None,"
None
",Resolved,Invalid,None,Unassigned,MANIKANTA MUDRAGADA,0,2,2019-02-13 15:55:22+00:00,2019-02-13 15:59:16+00:00,"In camel-jms component, I was able to configure replyTo with queue name while sending the request to IBM MQ, but if remote IBM MQ server if they are expecting both replyToQueue and replyToQMngr. I don't find a jms component support to send both as headers in request.


 


Please suggest.",acosentino:1550044756:2019-02-13T15:59:16.798+0000:1550044756:2019-02-13T15:59:16.798+0000:Please ask on the user mailing list first. This is a JIRA
0,CAMEL-13194,Task,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-02-13 15:22:00+00:00,2019-02-14 04:14:48+00:00,"So everything we do in Apache Camel is always org.apache.camel


    <dependency>
      <groupId>org.apache.camel.karaf</groupId>
      <artifactId>camel-karaf-commands</artifactId>
    </dependency>


Should be


    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-karaf-commands</artifactId>
    </dependency>","davsclaus:1550042540:2019-02-13T15:22:20.512+0000:1550042540:2019-02-13T15:22:20.512+0000:Do some search replace.

Contributions is welcome
davsclaus:1550088888:2019-02-14T04:14:48.530+0000:1550088888:2019-02-14T04:14:48.530+0000:The features.xml file is from org.apache.camel.karaf/apache-camel and this GAV is what karaf/servicemix distros would expect and use for their functionality to install camel easily.

So lets keep it then"
0,CAMEL-13193,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-13 15:07:49+00:00,2019-03-01 13:24:18+00:00,Just noticed it was there when I built locally.,
0,CAMEL-13192,Bug,Major,"2.21.0, 2.21.1, 2.21.2, 2.21.3, 2.21.4, 2.22.0, 2.22.1, 2.22.2, 2.22.3, 2.23.0, 2.23.1",None,"
None
",Resolved,Fixed,3.0.0,Zoran Regvart,Zoran Regvart,0,2,2019-02-13 13:05:17+00:00,2019-05-07 11:55:37+00:00,"When trying to resolve paths from a given OpenAPI 2.0 document the trailing part of the path after the last path parameter placeholder is lost.


For example path with:




/path/{param}/will/be/lost



Is resolved as:




/path/{param}",
0,CAMEL-13191,Bug,Major,2.23.1,"2.23.2, 2.24.0, 2.22.4, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0",Andrea Cosentino,Christian Pieczewski,0,1,2019-02-13 10:34:22+00:00,2019-02-15 06:47:34+00:00,"sanitizedUri don't hide the complete password if the password contains a colon.


e.g.


camel route URI is ""sftp://user:hidden:password@target.test"" where the password is ""hidden:password"" 


the sanitizedUri method will only hide the last part of password (sftp://user:hidden:xxxxxx@target.test)


UnitTest

import org.apache.camel.util.URISupport;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class UriSupportTest {

  @Test
  void testURISanitizeUri() {
    var sanitizedUri = URISupport.sanitizeUri(""sftp://user:hidden:Password@target.test"");
    Assertions.assertEquals(""sftp://user:xxxxxx@target.test"", sanitizedUri);
  }

}","Pieczewski:1550032174:2019-02-13T12:29:34.630+0000:1550032496:2019-02-13T12:34:56.400+0000:Worst case scenario is if the colon is at the end of the password, than it will only append the ''xxxxxx"" -> clear password will be logged. 

 

e.g.

uri: sftp://user:hidden:Password:@target.test

password: ""hidden:Password:""

log -> sftp://user:hidden:Password:xxxxxx@target.test
Pieczewski:1550033098:2019-02-13T12:44:58.211+0000:1550033160:2019-02-13T12:46:00.696+0000:To resolve this issue I would suggest following pattern change in URISupport class.

 
{code:java}
private static final Pattern USERINFO_PASSWORD = Pattern.compile(""(.*://.*?:)(.*)(@)"");
{code}
 
Pieczewski:1550039263:2019-02-13T14:27:43.729+0000:1550039263:2019-02-13T14:27:43.729+0000:Create PullRequest for this change 

https://github.com/apache/camel/pull/2766"
0,CAMEL-13190,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-13 09:25:06+00:00,2019-03-01 13:24:26+00:00,No Desc,
0,CAMEL-13189,Task,Blocker,3.0.0,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-13 05:07:46+00:00,2019-03-01 13:14:28+00:00,It should be built after all the camel components so it includes all the metadata of all components. Currently Maven builds it too early.,"davsclaus:1550010975:2019-02-13T06:36:15.588+0000:1550010975:2019-02-13T06:36:15.588+0000:camel-manual is also built too soon
davsclaus:1550020535:2019-02-13T09:15:35.431+0000:1550020535:2019-02-13T09:15:35.431+0000:The old camel-manual is not needed, so deleting it as we will get a new website and docs.
davsclaus:1550020598:2019-02-13T09:16:38.848+0000:1550042384:2019-02-13T15:19:44.237+0000:Got this working again

TODO: Add catalog back into apache-camel distro *DONE*
TODO: Add catalog back into parent/pom *DONE*


davsclaus:1550022363:2019-02-13T09:46:03.147+0000:1550042839:2019-02-13T15:27:19.356+0000:TODO: issue with camel-report-maven-plugin and invalid pom.xml for catalog-lucene and catalog-maven *DONE*"
0,CAMEL-13188,Improvement,Minor,2.23.0,4.x,"
None
",Open,Unresolved,4.x,Unassigned,Carl-Philipp Harmant,0,4,2019-02-12 20:33:28+00:00,2023-08-09 09:26:32+00:00,"When doing something like:



from(""direct:my-endpoint"")
  .to(""mongodb3:cosmosdb?database=dbname&collection=collname&operation=findOneByQuery"")



The code works fine if something is found in the db. If no result is returned from the query, I obtain a stacktrace like that:



org.apache.camel.RuntimeCamelException: java.io.IOException: Stream closed
    at org.apache.camel.http.common.HttpMessage.createBody(HttpMessage.java:80)
    at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:54)
    at org.apache.camel.processor.RestBindingAdvice.marshal(RestBindingAdvice.java:402)
    at org.apache.camel.processor.RestBindingAdvice.after(RestBindingAdvice.java:151)
    at org.apache.camel.processor.RestBindingAdvice.after(RestBindingAdvice.java:51)
    at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:251)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:127)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
    at org.apache.camel.http.common.CamelServlet.doService(CamelServlet.java:213)
    at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:79)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:750)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199)
    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
    at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
    at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
    at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770)
    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1415)
    at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
    at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Stream closed
    at org.apache.catalina.connector.InputBuffer.read(InputBuffer.java:338)
    at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:132)
    at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:110)
    at org.apache.camel.util.IOHelper.copy(IOHelper.java:202)
    at org.apache.camel.util.IOHelper.copy(IOHelper.java:174)
    at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:234)
    at org.apache.camel.util.IOHelper.copyAndCloseInput(IOHelper.java:230)
    at org.apache.camel.http.common.HttpHelper.readResponseBodyFromInputStream(HttpHelper.java:243)
    at org.apache.camel.http.common.HttpHelper.readRequestBodyFromServletRequest(HttpHelper.java:194)
    at org.apache.camel.http.common.DefaultHttpBinding.parseBody(DefaultHttpBinding.java:595)
    at org.apache.camel.http.common.HttpMessage.createBody(HttpMessage.java:78)
    ... 48 more




Note that I call the route from a rest endpoint and that the stacktrace appear in the http response (not in the logs)


I found a work around:



from(""direct:my-endpoint"")
  .to(""mongodb3:cosmosdb?database=dbname&collection=collname&operation=findOneByQuery"")
  .choice()
    .when(header(RESULT_TOTAL_SIZE).isLessThan(1))
        .setBody(simple(""{}""))
  .end()","onders:1550017705:2019-02-13T08:28:25.241+0000:1550017705:2019-02-13T08:28:25.241+0000:I suspect if there is something wrong in your http stream handling. I remember not having such effect Do you have a unit test showing this?
carlphilipp:1550065181:2019-02-13T21:39:41.284+0000:1550065181:2019-02-13T21:39:41.284+0000:Have a look here: [https://github.com/carlphilipp/camel-bug]

I created 3 integration tests, one of them fails, this is the one that describes the issue. The others tests can help resolving the issue. Let me know if you have any questions. (The first time you run the tests, it can take a long time as it's going to download an embed mongodb)
onders:1550067753:2019-02-13T22:22:33.718+0000:1550067753:2019-02-13T22:22:33.718+0000:Thanks, Fair enough.

I understand your point even though i disagree.

The point i disagree is that what you did was not a workaround but must to do. because mongo component reflects the capability of what java mongo driver can do.

i believe the code is simple enough, and those kind of CBR might be needed for certain scenarios.

however, one side of me also agrees with you. what you want to have at the end of the day is simpler route syntactically. 

I would suggest may be doing something like in findAll would be helpful

[https://github.com/apache/camel/blob/master/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbProducer.java#L395]

Please submit PR if you agree. Contributions are more than welcome :)

 

 
carlphilipp:1550073767:2019-02-14T00:02:47.840+0000:1550073767:2019-02-14T00:02:47.840+0000:Yes ok, I have debugged more the component, and I see what you mean. I do not have a strong opinion on what the component should return. I guess the question comes back to ""what's the default behavior of other Camel components when there is no result to return?"". I would prefer not to have to write this ""workaround"" but it's not a big deal. The surprising part of the behavior, is the fact that because the body is null, the rest of the route is not processed. To me this is why I thought it was a bug. Now if this is how it's done for any other components, then it's fine; the developer need to handle it.
davsclaus:1550091056:2019-02-14T04:50:56.225+0000:1550091056:2019-02-14T04:50:56.225+0000:Is there a way to know easily if findOneByQuery returned data or not? If so I think we should use that and set an empty/null body if no data, as reading an input stream that is EOL is not helping the end user. Other components such as camel-sql will set a null body if you ask for a single object and there is no data.
carlphilipp:1550093030:2019-02-14T05:23:50.032+0000:1550093030:2019-02-14T05:23:50.032+0000:The return of the query is null: [https://github.com/apache/camel/blob/master/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbProducer.java#L302]

And the body is set to null already: [https://github.com/apache/camel/blob/master/components/camel-mongodb3/src/main/java/org/apache/camel/component/mongodb3/MongoDbProducer.java#L273]

It's failing downstream, after the component. I'm not sure what stream it's trying to read. You can see/debug that behavior in the project I posted.

 
davsclaus:1689915384:2023-07-21T12:56:24.616+0000:1689915384:2023-07-21T12:56:24.616+0000:It seems that it should set the result size to 0 or 1 like the other find operations

exchange.getMessage().setHeader(RESULT_TOTAL_SIZE, ret == null ? 0 : 1);

That can help to know if there was data or not
davsclaus:1689915634:2023-07-21T13:00:34.489+0000:1689915634:2023-07-21T13:00:34.489+0000:That header above should be made consistent for all the find operations.

"
0,CAMEL-13187,New Feature,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Ashish,0,1,2019-02-12 20:23:52+00:00,2022-09-02 11:23:48+00:00,SimpleBinding currently creates all the method params  as camel headers. This enhancement provides an option to map only those headers for which value is provided.,ashishna:1549974326:2019-02-12T20:25:26.335+0000:1549974326:2019-02-12T20:25:26.335+0000:I am working on it and can send PR soon
0,CAMEL-13186,Improvement,Minor,2.21.4,"2.24.0, 3.0.0","
None
",Resolved,Implemented,"2.24.0, 3.0.0",Zoran Regvart,Przemyslaw Lenik,0,4,2019-02-12 12:44:05+00:00,2019-02-19 12:49:08+00:00,"camel-salesforce-maven-plugin is missing following customizations:
 1. Picklist/Multipicklist fields in Salesforce can be converted either to enum or String in java using only one mechanism - setting variable useStringsForPicklists = true. This however affects all fields during plugin run. It would be great, if only specific fields could be converted to String/Enum.
2. Date/Datetime fields in Salesforce are converted to java.time.ZonedDateTime. It would be great if they could be converted to java.time.LocalDate, java.time.OffsetTime or String (not sure if the last one is ok). Also targetting specific fields per Object would be great. - indeed, this feature would break functionality.","Przemo:1549946963:2019-02-12T12:49:23.340+0000:1549946963:2019-02-12T12:49:23.340+0000:I made pull request #2750 for release 2.21.4, however it got rejected. I can adjust changes to master and after Your clarification if it's feasible or not I would backport it to 2.21.x, please let me know what do You think about it.
acosentino:1549947551:2019-02-12T12:59:11.063+0000:1549947551:2019-02-12T12:59:11.063+0000:It doesn't make sense to open a PR against a tag. I'm not enough into Salesforce, I think the expert on is [~zregvart].. It's always better to raise a PR against master and eventually we backport
acosentino:1549947671:2019-02-12T13:01:11.180+0000:1549947671:2019-02-12T13:01:11.180+0000:Also If we are going to change the behavior the plugin had we can do this only for master or at most for camel-2.x and camel 2.24.0, we cannot break the behavior for the existing users on 2.21.x
davsclaus:1549950583:2019-02-12T13:49:43.879+0000:1549950583:2019-02-12T13:49:43.879+0000:Camel 2.21.x is EOL
acosentino:1549950683:2019-02-12T13:51:23.941+0000:1549950683:2019-02-12T13:51:23.941+0000:When he raised the PR there wasn't the release for 2.21.5.
Przemo:1550217421:2019-02-15T15:57:01.110+0000:1550217421:2019-02-15T15:57:01.110+0000:Made a pull request #2779.
zregvart:1550551748:2019-02-19T12:49:08.232+0000:1550551748:2019-02-19T12:49:08.232+0000:Thanks to [~Przemo] for the contribution (y)"
0,CAMEL-13185,Improvement,Major,2.21.4,"2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0",Andrea Cosentino,Paul Richardson,0,1,2019-02-12 12:21:54+00:00,2019-02-28 08:33:05+00:00,"The Olingo4Consumer currently has no support for the Consumer.SplitResults flag. When this flag is set to 'true', the result payload should be split into a list to allow each element to be returned in a separate message. To support this feature, the splitResults() method should be implemented in the Olingo4Consumer class.",phantomjinx:1549952127:2019-02-12T14:15:27.560+0000:1549952127:2019-02-12T14:15:27.560+0000:Find PR for both Olingo4 and Olingo2 -> [https://github.com/apache/camel/pull/2762|https://github.com/apache/camel/pull/2762]
0,CAMEL-13184,New Feature,Major,None,None,"
None
",Resolved,Abandoned,3.x,Unassigned,Zoran Regvart,0,1,2019-02-12 12:03:47+00:00,2022-09-02 11:23:39+00:00,At FOSDEM Java devroom I saw a talk about Java Flight Recorder which made me think that we can utilize it in Camel for monitoring and/or tracing. There's a GitHub repository by Marcus Hirt that has a lot of Java serviceability examples we can learn from: https://github.com/thegreystone/java-svc,
0,CAMEL-13183,Improvement,Minor,None,3.0.0.RC1,"
None
",Resolved,Fixed,3.0.0.RC1,Luca Burgazzoli,Luca Burgazzoli,0,1,2019-02-12 10:02:56+00:00,2019-07-10 08:08:37+00:00,"We could leverage jandex [1][2] to index annotations, classes and so on for fast annotation processing.


[1] https://github.com/wildfly/jandex
[2] https://github.com/wildfly/jandex-maven-plugin/",
0,CAMEL-13182,Improvement,Minor,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Luca Burgazzoli,0,2,2019-02-12 09:18:05+00:00,2019-03-01 13:36:54+00:00,"camel-aws supports a number of AWS services from a single component which lead to a huge number of dependencies being downloaded even when accessing to a single service.


To optimize camel-k run-time it would be very nice to split the component in independent ones so camel-k can cherry pick what it needs.","acosentino:1549934367:2019-02-12T09:19:27.563+0000:1549934367:2019-02-12T09:19:27.563+0000:This will need single OSGi bundles for the services. I can work on that for M2.
acosentino:1551164499:2019-02-26T15:01:39.991+0000:1551164499:2019-02-26T15:01:39.991+0000:After going crazy with the bundles for single services, We can go ahead with the complete bundle for the karaf features, but splitting the components by using only the required deps. I'm going on on this."
0,CAMEL-13181,Improvement,Minor,None,3.15.0,"
None
",Resolved,Fixed,3.15.0,Unassigned,Jesse Sightler,0,5,2019-02-12 00:19:10+00:00,2021-12-19 18:51:44+00:00,"In the case of serialization failures, createRestException swallows the exception and logs the inputstream object itself:


 


https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/DefaultRestClient.java#L119


 


This does not tend to produce an error message, as the response is essentially always something like ""ByteArrayInputStream@{hashcode}"". Perhaps it could try to return the raw contents if it is short and json?","davsclaus:1549923369:2019-02-12T06:16:09.525+0000:1549923369:2019-02-12T06:16:09.525+0000:I dont think it should return any body in the response as it may leak sensitive details.
jsightle@redhat.com:1549957811:2019-02-12T15:50:11.008+0000:1549957811:2019-02-12T15:50:11.008+0000:That is a fair point. Removing this part of the log line would be better than the current situation, IMO.
davsclaus:1549959350:2019-02-12T16:15:50.012+0000:1549959350:2019-02-12T16:15:50.012+0000:Yeah you are welcome to work on a PR to fix this, we love contributions
davsclaus:1565089158:2019-08-06T18:59:18.759+0000:1565089158:2019-08-06T18:59:18.759+0000:Any update on this
Soann Dewasme:1585225880:2020-03-26T20:31:20.960+0000:1585225965:2020-03-26T20:32:45.133+0000:I would like to start contribute to this amazing framework, and I guess this minor improvement one is a good starting point !

Maybe should we go further on this ? 
 I mean we can add an optional parameter (like {{displayMessageContentInError}} default {{false}}) that is conditionally manage the raw message content in case of error like this ? I don't like to add extra code to print content when debugging... So suppose this can be useful when developing !
zregvart:1585275120:2020-03-27T10:12:00.494+0000:1585275120:2020-03-27T10:12:00.494+0000:[~Soann Dewasme] I think that's a good idea. I think what we can improve here is twofold: have a meaningful error text displayed instead of the {{InputStream::toString}} and have a parameter to display the full/raw errors from Salesforce. First might require parsing the error responses from Salesforce, for the second improvement perhaps a {{rawErrors}} (we already have {{rawPayload}} can that be used for errors also?) would be a good property name. Not sure if we should consider capping the number of characters/bytes in error output or redacting some of the output so we don't output passwords or similar sensitive data.
Soann Dewasme:1585808011:2020-04-02T14:13:31.593+0000:1585808011:2020-04-02T14:13:31.593+0000:[~zregvart] I don't know how Salesforce work but I suppose we can have deeper look into errors, look what is Salesforce data format when error occurs and parsing it for ""non-debug"" mode. This way we can have an explicit message without sensitive data leak.

About capping, the problem is that we do not know if removed data overflow contains relevant information about a problem. So I suppose let all content is best choice in case of ""debug"" mode.

{{rawErrors}} seems a good naming.
I'll try to implement this
jeremyross:1639910874:2021-12-19T18:47:54.254+0000:1639910874:2021-12-19T18:47:54.254+0000:I think this issue is resolved. The parsed rest errors are included in the returned `SalesforceException` [here|https://github.com/apache/camel/blob/64a3adfdb9cab8814ca298b137f3d8e151440dff/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/DefaultRestClient.java#L107-L110]. And if we fail to parse errors from the response, we include the raw response InputStream in the exception also. "
0,CAMEL-13180,New Feature,Major,None,3.15.0,"
None
",Resolved,Fixed,3.15.0,Jeremy Ross,Jesse Sightler,0,4,2019-02-12 00:16:02+00:00,2022-02-07 23:38:27+00:00,"The current approach requires following a very strict format for error codes other than 2xx. This isn't necessarily the case, though, for custom apex classes.


Ideally, it would be possible to (optionally) handle the parsing in the camel route itself.","davsclaus:1549923467:2019-02-12T06:17:47.751+0000:1549923467:2019-02-12T06:17:47.751+0000:You are welcome to work on a contribution and/or improve this ticket with more precise details what you request
jeremyross:1637063280:2021-11-16T19:48:00.247+0000:1637063280:2021-11-16T19:48:00.247+0000:[~jsightle@redhat.com] does having HTTP response code/text solve this? See CAMEL-11078.
jsight:1637066185:2021-11-16T20:36:25.874+0000:1637066185:2021-11-16T20:36:25.874+0000:Yes, I'd like the http status code, text, and the message body. The body itself could contain custom generated responses, for example.
jeremyross:1637076649:2021-11-16T23:30:49.113+0000:1637076649:2021-11-16T23:30:49.113+0000:[~jsightle@redhat.com] Not sure what you mean by:

 {quote}The body itself could contain custom generated responses, for example.
{quote}

You saying that you want access to the HTTP body that salesforce returns?
jeremyross:1637133273:2021-11-17T15:14:33.952+0000:1637133273:2021-11-17T15:14:33.952+0000:Ah, ok you're saying the body could contain something custom that your Apex class returned. 
jsight:1637136107:2021-11-17T16:01:47.618+0000:1637136107:2021-11-17T16:01:47.618+0000:Yes, the apex code generates a custom json response for us, and we parse that response body to get the reason in the case of error messages.
jeremyross:1637136255:2021-11-17T16:04:15.725+0000:1637136255:2021-11-17T16:04:15.725+0000:[~jsightle@redhat.com] and are you currently able to access the response body in Camel?
jsightle@redhat.com:1637136485:2021-11-17T16:08:05.599+0000:1637136485:2021-11-17T16:08:05.599+0000:Yes, but the only way that we came up with to do it was to override SalesforceComponent and override the createRestClientFor(final SalesforceEndpoint endpoint) method. We then have it returning an overridden RestClient instance that overrides the createRestException method to offer customized exception handling.

Its really tricky and fairly brittle.
jeremyross:1637140746:2021-11-17T17:19:06.908+0000:1637140746:2021-11-17T17:19:06.908+0000:[~jsightle@redhat.com] yeah that's not ideal. In the case of a non-2xx response, I'd prefer to keep the original body intact for debugging and logging purposes. That would be consistent with the other operations. But maybe the apexCall operation is a special case. Maybe we always put the http response body in a header? 
jsightle@redhat.com:1637141200:2021-11-17T17:26:40.165+0000:1637141200:2021-11-17T17:26:40.165+0000:Yeah, having it in a header would work fine.
jeremyross:1639647492:2021-12-16T17:38:12.876+0000:1639647492:2021-12-16T17:38:12.876+0000:[~jsightle@redhat.com] I can't figure out how to get a custom response body with a non-2xx status. Any tips? 
jsightle@redhat.com:1639650533:2021-12-16T18:28:53.214+0000:1639650533:2021-12-16T18:28:53.214+0000:In you apex class, set your body like this: ""RestContext.response.responseBody = Blob.valueOf(JSON.serialize(responseBody))"" – responseBody is just a Map.

Set the status code with RestContext.response.statusCode = 500

 
jeremyross:1639724196:2021-12-17T14:56:36.455+0000:1639724196:2021-12-17T14:56:36.455+0000:[~jsightle@redhat.com] With [this commit|https://github.com/apache/camel/commit/64a3adfdb9cab8814ca298b137f3d8e151440dff], the SalesforceException has an InputStream property with the response content. Should be available in the snapshot repo soon. Would you mind checking it out?
jsightle@redhat.com:1644248307:2022-02-07T23:38:27.197+0000:1644248307:2022-02-07T23:38:27.197+0000:I have tried it out and it looks like this will work fine for us. Thank you for the new feature!"
0,CAMEL-13179,Bug,Major,2.23.1,"2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Jiri Ondrusek,0,1,2019-02-11 13:59:58+00:00,2019-02-12 14:35:22+00:00,"There is a problem during authentication to linkedin. Which ends with following exception:




java.lang.IllegalArgumentException: Error authorizing application: Error authorizing application:

at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.getRefreshToken(LinkedInOAuthRequestFilter.java:235)
 at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.updateOAuthToken(LinkedInOAuthRequestFilter.java:307)
 at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.<init>(LinkedInOAuthRequestFilter.java:123)
 at org.apache.camel.component.linkedin.api.AbstractResourceIntegrationTest.createOAuthHelper(AbstractResourceIntegrationTest.java:102)
 at org.apache.camel.component.linkedin.api.AbstractResourceIntegrationTest.beforeClass(AbstractResourceIntegrationTest.java:62)
 at org.apache.camel.component.linkedin.api.SearchResourceIntegrationTest.beforeClass(SearchResourceIntegrationTest.java:31)
 at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.lang.reflect.Method.invoke(Method.java:498)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
 at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
 at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
 at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
 at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
 at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: java.lang.IllegalArgumentException: Error authorizing application: 
 at org.apache.camel.component.linkedin.api.LinkedInOAuthRequestFilter.getRefreshToken(LinkedInOAuthRequestFilter.java:189)





How to simulate:
1. add your credentials to src/test/resources/test-options.properties
2. run [camel-linkedin-api]$ mvn clean install -P linkedin-test -Dtest=SearchResourceIntegrationTest",jondruse:1549937041:2019-02-12T10:04:01.075+0000:1549937041:2019-02-12T10:04:01.075+0000:PR: https://github.com/apache/camel/pull/2761
0,CAMEL-13178,Improvement,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-11 13:17:59+00:00,2019-03-01 13:24:55+00:00,"The language terser is not well know, and its confusing what it does. I think we should rename it to hl7terser to indicate its about hl7.",
0,CAMEL-13177,Improvement,Major,None,"3.0.0-M3, 3.0.0","
None
",Closed,Fixed,"3.0.0-M3, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,3,2019-02-11 08:34:17+00:00,2023-06-14 16:09:21+00:00,No Desc,"gnodet:1549845366:2019-02-11T08:36:06.962+0000:1549845366:2019-02-11T08:36:06.962+0000:The [https://github.com/timgifford/maven-buildtime-extension] can gives interesting insight on the build.

I'm currently focusing on reducing the build time on repeted {{mvn -DskipTests}} runs (already compiled, tests disabled).
gnodet:1549845469:2019-02-11T08:37:49.504+0000:1549845469:2019-02-11T08:37:49.504+0000:A first step is to leverage CXF-7967 which causes very long pauses during the build.
davsclaus:1549861966:2019-02-11T13:12:46.474+0000:1549861966:2019-02-11T13:12:46.474+0000:Also the karaf features files are now validated even when you run with -P fastinstall. It would maybe be good to turn that off there so you can build this faster too.
davsclaus:1549862037:2019-02-11T13:13:57.009+0000:1549862037:2019-02-11T13:13:57.009+0000:Also the CXF wsdl2java plugin was set to run in fork mode many years ago due to the build with Maven required too much memory. Maybe now we can turn that off again, and it may run a little bit quicker?
gnodet:1549864462:2019-02-11T13:54:22.794+0000:1549864462:2019-02-11T13:54:22.794+0000:Other points:
 * remove empty package-info.java which cause to always recompile (MCOMPILER-368)
 * remove {{$\{generatedDate}}} in velocity templates and ""cache"" written resources
 * do not recompute the dependency tree (to list artifacts to exclude from spring starters) but use the list computed by maven itself
gnodet:1549865140:2019-02-11T14:05:40.503+0000:1549865140:2019-02-11T14:05:40.503+0000:[~davsclaus] the features validation is disabled when the property {{skipTests}} is set to true.  Does the {{fastInstall}} profile sets this property ? Maybe there's a small ajustement to make to disable the validation in both cases.
davsclaus:1549870011:2019-02-11T15:26:51.683+0000:1549870011:2019-02-11T15:26:51.683+0000:If I just run mvn clean install -P fastinstall, then the karaf validation is executed. So yeah we would need an adjustment to make the validation disabled as well.
gnodet:1550815193:2019-02-22T13:59:53.548+0000:1550815193:2019-02-22T13:59:53.548+0000:The spring-boot generator has been rewritten and is now much faster.

Next points that can be improved
* the {{maven-plugin-plugin:descriptor goal}} is really slow
* the {{maven-bundle-plugin:manifest}} consumes a lot of time

The top 50 plugin time consumers are the following:
|| Module || Mojo || Time ||
| camel-olingo2 | maven-archetype-plugin:generate (generate-my-car-service) | 6334 |
| camel-catalog | camel-package-maven-plugin:prepare-catalog (default) | 4465 |
| camel-example-kotlin | kotlin-maven-plugin:compile (compile) | 4048 |
| camel-linkedin-api | maven-javadoc-plugin:jar (add-javadoc) | 3445 |
| camel-as2-api | maven-javadoc-plugin:jar (add-javadoc) | 2032 |
| camel-asn1 | maven-compiler-plugin:testCompile (default-testCompile) | 1995 |
| camel-package-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 1795 |
| camel-twilio | maven-compiler-plugin:compile (default-compile) | 1750 |
| camel-catalog-provider-karaf | camel-package-maven-plugin:prepare-catalog-karaf (default) | 1715 |
| camel-catalog-provider-springboot | camel-package-maven-plugin:prepare-catalog-springboot (default) | 1645 |
| camel-twilio | maven-compiler-plugin:testCompile (default-testCompile) | 1594 |
| docs | exec-maven-plugin:exec (yarn gulp) | 1530 |
| camel-report-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 1458 |
| docs | exec-maven-plugin:exec (yarn install) | 1331 |
| camel-fhir-api | maven-javadoc-plugin:jar (add-javadoc) | 1201 |
| camel-olingo2-api | maven-javadoc-plugin:jar (add-javadoc) | 1196 |
| camel-olingo2 | maven-compiler-plugin:testCompile (default-testCompile) | 1188 |
| camel-catalog | maven-compiler-plugin:compile (default-compile) | 1153 |
| camel-api-component-maven-plugin | maven-compiler-plugin:compile (default-compile) | 1131 |
| camel-olingo4-api | maven-javadoc-plugin:jar (add-javadoc) | 1101 |
| camel-salesforce-starter | maven-compiler-plugin:compile (default-compile) | 1075 |
| camel-catalog | maven-shade-plugin:shade (default) | 1010 |
| camel-box-api | maven-javadoc-plugin:jar (add-javadoc) | 995 |
| camel-example-hello-grpc-client-kubernetes | maven-compiler-plugin:compile (default-compile) | 917 |
| camel-eip-documentation-enricher-maven-plugin | maven-compiler-plugin:compile (default-compile) | 916 |
| camel-example-hello-grpc-client | maven-compiler-plugin:compile (default-compile) | 912 |
| camel-google-bigquery-starter | maven-compiler-plugin:compile (default-compile) | 883 |
| camel-example-hello-grpc-server | maven-compiler-plugin:compile (default-compile) | 864 |
| camel-example-hello-grpc-server-kubernetes | maven-compiler-plugin:compile (default-compile) | 839 |
| camel-google-pubsub-starter | maven-compiler-plugin:compile (default-compile) | 838 |
| camel-salesforce-maven-plugin | maven-plugin-plugin:helpmojo (help-goal) | 830 |
| camel-spring-javaconfig | maven-compiler-plugin:testCompile (default-testCompile) | 827 |
| camel-example-hello-grpc-client-kubernetes | maven-bundle-plugin:manifest (bundle-manifest) | 803 |
| camel-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 776 |
| camel-servicenow-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 740 |
| bom-generator-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 737 |
| camel-servicenow-maven-plugin | maven-plugin-plugin:descriptor (mojo-descriptor) | 737 |
| camel-core | maven-bundle-plugin:manifest (bundle-manifest) | 728 |
| camel-servicenow-maven-plugin | maven-plugin-plugin:helpmojo (help-goal) | 726 |
| camel-salesforce-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 681 |
| camel-salesforce-maven-plugin | maven-plugin-plugin:descriptor (mojo-descriptor) | 643 |
| camel-example-activemq-tomcat | maven-war-plugin:war (default-war) | 636 |
| camel-api-component-maven-plugin | maven-plugin-plugin:descriptor (default-descriptor) | 598 |
| camel-api-component-maven-plugin | maven-plugin-plugin:helpmojo (help-goal) | 596 |
| camel-buildtools | gmavenplus-plugin:execute (default) | 583 |
| camel-api-component-maven-plugin | maven-plugin-plugin:descriptor (mojo-descriptor) | 557 |
| camel-spark | maven-bundle-plugin:manifest (bundle-manifest) | 523 |
| camel-jpa | openjpa-maven-plugin:test-enhance (test enhancer) | 521 |
| camel-protobuf | gmavenplus-plugin:execute (default) | 507 |
gnodet:1551654920:2019-03-04T07:15:20.832+0000:1551654920:2019-03-04T07:15:20.832+0000:We just need to upgrade to cxf 3.3.1 and bundle plugin when released to further improve the build speed.
davsclaus:1552894612:2019-03-18T15:36:52.913+0000:1552894612:2019-03-18T15:36:52.913+0000:Is there more work on this, or can we say the current improvements are good so far?
gnodet:1552896028:2019-03-18T16:00:28.369+0000:1552896028:2019-03-18T16:00:28.369+0000:CXF has been upgraded, but not the bundle plugin which has not been released yet.
davsclaus:1553568627:2019-03-26T10:50:27.245+0000:1553568627:2019-03-26T10:50:27.245+0000:Is there any ETA on the bundle plugin release?
drekbour:1554607872:2019-04-07T11:31:12.209+0000:1554608011:2019-04-07T11:33:31.466+0000:FYI I have no idea how thread-safe Camel's build truly is but, having fixed CAMEL-13395, I didn't get any explicit {{ERROR}}s with:
{code:bash}
./mvnw -TC1 clean install -Pfastinstall
...
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  35:34 min (Wall Clock)
{code}
davsclaus:1556221886:2019-04-26T03:51:26.660+0000:1556221886:2019-04-26T03:51:26.660+0000:There is now a maven bundle plugin 4.2.0 release.
davsclaus:1557625950:2019-05-12T09:52:30.044+0000:1557625950:2019-05-12T09:52:30.044+0000:We have now upgraded CXF and the bundle plugin"
0,CAMEL-13176,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.24.0, 3.0.0",Claus Ibsen,Radovan Netuka,0,1,2019-02-08 15:19:30+00:00,2019-02-11 06:04:54+00:00,When using camel-yammer component to receive relationships the component is (most likely) trying to access non-existent page and results in returning null.,"rnetuka:1549610425:2019-02-08T15:20:25.559+0000:1549610425:2019-02-08T15:20:25.559+0000:Yammer API docs seems to be outdated. [https://www.yammer.com/api/v1/relationships.json] is not working anymore. I'm not familiar with Yammer, but according to [https://developer.yammer.com/docs/relationshipsjson] it ""Shows org chart relationships.""

However, org charts are deprecated from May 2018. There doesn't seem to be any replacement for that.
[https://answers.microsoft.com/en-us/msoffice/forum/all/organization-chart-in-yammer/6cd9cb5c-b7f0-456c-a75e-8b845c05f46f]
rnetuka:1549611814:2019-02-08T15:43:34.955+0000:1549611814:2019-02-08T15:43:34.955+0000:PR: https://github.com/apache/camel/pull/2754"
0,CAMEL-13175,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,4,2019-02-08 14:23:17+00:00,2019-07-26 12:36:07+00:00,"This feature is a bit more complex and its intention/design was to in case of an error during routing, you could say, that the original incoming message should be restored as-is and used as ""result"", for example in case you want to move that message to some dead letter queue or log it etc.


However people may mis-understand this, and think you can mix the original message BODY only and enrich it with any existing headers at the time of error - but that was not how it was designed/intended.


However a few EIPs and if you turned on shared unit of work, you could end up with situations where it would mix the original message with the message of error.


If the user wants to mix both the original message with the message at the error, then they should use a bean/processor/aggregation strategy etc to ""merge"" the data together as they want. NOT rely on just saying useOriginalMessage and ""hope for the best"". 


Also the original message body, can when you transfer messages over Camel endpoints be stored at new endpoints such as JMS, direct-vm etc whom creates a new exchange. And if you use direct, and other internals it would not. So it can be a bit unclear where such original message would origin from.


Instead we should let the user use the Claim Check EIP pattern where you can explict set safe points with the original message, and easily merge data back agains, such as the message body only etc.


See for example
https://github.com/apache/camel/blob/camel-2.x/camel-core/src/test/java/org/apache/camel/issues/MulticastMixOriginalMessageBodyAndEnrichedHeadersTest.java


VS
https://github.com/apache/camel/blob/camel-2.x/camel-core/src/test/java/org/apache/camel/issues/MulticastMixOriginalMessageBodyAndEnrichedHeadersClaimCheckTest.java","davsclaus:1549607026:2019-02-08T14:23:46.032+0000:1549607026:2019-02-08T14:23:46.032+0000:For Camel 3 we have the chance to do this, and if so, we can mark this feature as deprecated in Camel 2.x
davsclaus:1564107272:2019-07-26T10:14:32.099+0000:1564107272:2019-07-26T10:14:32.099+0000:Okay so there was some mixup in the javadoc comments in some places. I am correct them, and introducing an useOriginalBody method so we have both of them.

useOriginalMessage = the entire message (body + headers)
useOriginalBody = only the original message body (body only) = so you can enrich with custom headers etc.

If we remove the feature then it impact end users that rely on this ""complex feature"" which they would then need to migrate to use claim check, albeit claim check has more flexibility.
davsclaus:1564111165:2019-07-26T11:19:25.878+0000:1564115762:2019-07-26T12:36:02.916+0000:TODO: Update docs in user-guide *DONE*
TODO: Add note about original is bound to unit of work, and that a new uow can start when routing over certain endpoints like jms etc *DONE*"
0,CAMEL-13174,Improvement,Minor,2.23.1,3.0.0,"

camel-file
consumer
exception-handling

",Resolved,Not A Problem,3.0.0,Claus Ibsen,Gerold Broser,0,3,2019-02-08 11:04:53+00:00,2019-02-11 07:01:00+00:00,"Following StackOverflow: File component's [consumer.]bridgeErrorHandler in conjunction with startingDirectoryMustExist  I created the following test class:




package test;

import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.main.Main;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CamelBridgeErrorHandlerTest {

  private Main main;

  @Before
  public void before() {
    main = new Main();
  }

  @Test
  public void bridgeErrorHandler() {
    main.addRouteBuilder(new RouteBuilder() {
      @Override
      public void configure() throws Exception {
        route(this, ""file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&bridgeErrorHandler=true"");
      }
    });
  }

  @Test
  public void consumerBridgeErrorHandler() {
    main.addRouteBuilder(new RouteBuilder() {
      @Override
      public void configure() throws Exception {
        route(this, ""file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&consumer.bridgeErrorHandler=true"");
      }
    });
  }

  private void route(final RouteBuilder builder, final String consumerURI) {
    builder
        .from(consumerURI)

        // this is never reached
        .onException(Exception.class)
        .handled(true)
        .log(LoggingLevel.ERROR, ""${exception}"")
        .end()

        .log("" ... processing ..."");
  }

  @After
  public void after() throws Exception {
    main.start();
  }
}




Both test methods throw:



org.apache.camel.FailedToCreateRouteException: Failed to create route routeN:
  Route(routeN)[[From[file:not.existing.dir?autoCreate=false&s...
    because of Starting directory does not exist: not.existing.dir




rather than the exception(s) being handled by the route(s)' onException().





P.S.: When TRACEing through the log output both test methods show:


2019-02-08 11:29:36.209 TRACE camel.model.ProcessorDefinitionHelper – There are 6 properties on: From[file:not.existing.dir?autoCreate=false&startingDirectoryMustExist=true&{consumer.}bridgeErrorHandler=true]


while there are just 3 of them (autoCreate, startingDirectoryMustExist, [consumer.]bridgeErrorHandler), aren't there? Is this worth another issue?","Broser:1549597564:2019-02-08T11:46:04.412+0000:1549597839:2019-02-08T11:50:39.796+0000:@[~ancosen] I set this issue's _Priority: Critical_ since [its inline help|https://issues.apache.org/jira/secure/ShowConstantsHelp.jspa?decorator=popup#PriorityLevels] says:
{quote}*↑* Critical   Crashes, ...{quote}
I considered:
{quote}2019-02-08 12:03:10.103 INFO camel.impl.DefaultCamelContext – Apache Camel 2.23.1 (CamelContext: camel-1) is shutting down
 2019-02-08 12:03:10.103 INFO camel.main.MainLifecycleStrategy – CamelContext: camel-1 has been shutdown, triggering shutdown of the JVM.
{quote}
after the said exception, thus abandoning all other routes in all other contexts as well, being a ""crash"".
acosentino:1549597752:2019-02-08T11:49:12.226+0000:1549597752:2019-02-08T11:49:12.226+0000:In my opinion major is enough to have attention.
davsclaus:1549836604:2019-02-11T06:10:04.334+0000:1549836604:2019-02-11T06:10:04.334+0000:This is not a bug as that check happens during creation of the consumer, and not during polling, where the bridge error handler is applicable.

Whether or not we can move that check to the polling is functional change, as now you would end up with apps starting up, and then continuously fail during polling because the starting directory does not exists.

 
davsclaus:1549837232:2019-02-11T06:20:32.029+0000:1549837232:2019-02-11T06:20:32.029+0000:This behaviour change we can introduce from Camel 3 onwards.
davsclaus:1549837291:2019-02-11T06:21:31.449+0000:1549837291:2019-02-11T06:21:31.449+0000:On 2.x you can implement your custom GenericFileProcessStrategy where you can do your prepareOnStartup check for starting directory and throw exception etc. And then not use those options from camel file component.
davsclaus:1549839652:2019-02-11T07:00:52.619+0000:1549839652:2019-02-11T07:00:52.619+0000:Ah okay you should not use starting directory, but set option directoryMustExist=true then you can use the bridge option."
0,CAMEL-13173,Task,Major,None,None,"
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Thomas Diesler,Thomas Diesler,0,2,2019-02-08 10:34:13+00:00,2019-02-14 15:15:07+00:00,"+- org.apache.camel:camel-ipfs:jar:2.23.1:compile
[INFO] |  \- io.nessus:nessus-ipfs:jar:1.0.0.Beta1:compile
[INFO] |     +- io.nessus:nessus-bitcoin:jar:1.0.0.Beta1:compile
[INFO] |     |  +- io.nessus:nessus-api:jar:1.0.0.Beta1:compile
[INFO] |     |  |  \- wf.bitcoin:JavaBitcoindRpcClient:jar:0.17.0.Alpha2:compile
[INFO] |     |  \- org.bitcoinj:bitcoinj-core:jar:0.14.7:compile
[INFO] |     |     +- com.madgag.spongycastle:core:jar:1.51.0.0:compile
[INFO] |     |     +- com.lambdaworks:scrypt:jar:1.4.0:compile
[INFO] |     |     +- org.bitcoinj:orchid:jar:1.2.1:compile
[INFO] |     |     \- com.squareup.okhttp:okhttp:jar:2.7.2:compile
[INFO] |     +- io.nessus:nessus-cipher:jar:1.0.0.Beta1:compile
[INFO] |     \- com.github.ipfs:java-ipfs-api:jar:v1.2.2:compile
[INFO] |        \- com.github.multiformats:java-multiaddr:jar:v1.3.0:compile
[INFO] |           +- com.github.multiformats:java-multibase:jar:v1.0.0:compile
[INFO] |           +- com.github.multiformats:java-multihash:jar:v1.1.0:compile
[INFO] |           \- com.github.ipld:java-cid:jar:v1.1.0:compile","davsclaus:1549862731:2019-02-11T13:25:31.588+0000:1549862731:2019-02-11T13:25:31.588+0000:I assume that these dependencies are safe to not include or is there a special reason to not include them?
tdiesler:1549863054:2019-02-11T13:30:54.837+0000:1549863074:2019-02-11T13:31:14.302+0000:Its only that IPFS should not need to depend on blockchain bits at all. It's a nessus issue that can be fixed easily, if not done already."
0,CAMEL-13172,New Feature,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-08 10:22:47+00:00,2019-03-01 13:24:49+00:00,No Desc,
0,CAMEL-13171,Bug,Minor,2.23.1,"2.23.2, 2.24.0, 2.22.4, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-08 08:50:05+00:00,2019-02-15 08:06:45+00:00,"Reported on SO
https://stackoverflow.com/questions/54405868/camel-restdsl-swagger-xml-generation-cant-find-required-method-allowablevalues?noredirect=1#comment95906957_54405868


Look at the provided sample project on github and see if we can reproduce the issue and find out whats the issue is",
0,CAMEL-13170,Bug,Major,2.23.1,3.14.0,"

salesforce

",Resolved,Fixed,3.14.0,Unassigned,Huy Nguyen,0,3,2019-02-07 21:51:41+00:00,2021-11-14 09:02:47+00:00,"zregvart lb


In version 2.23.1 when I set initialReplayIdMap to a value when the route starts everything behave like normal and I am fine with the replays. I'm getting an issue every time the route re-subscribes it tries to replay from the map again. The initialReplayIdMap needs to zero out (don't see any code that modifies the initialReplayIdMap) so we can default to -1 so we can wait for new replay ids. Eventually if i leave the route on for over 24 hours it eventually breaks because the replay id 24h time to live and the push topics stops working.


Something must have happened in Salesforce cause I saw the same issue in the salesforce java forcedotcom/emp-connector . The issue was reported and fixed here. 


https://github.com/forcedotcom/EMP-Connector/issues/39","hnguyen15:1552313620:2019-03-11T22:13:40.315+0000:1552313620:2019-03-11T22:13:40.315+0000:[~cibsen@e-ma.net] can you assign this to me I have the fix that I can create a pull request for.
davsclaus:1552348593:2019-03-12T07:56:33.142+0000:1552348593:2019-03-12T07:56:33.142+0000:Okay I assigned you this ticket. Thanks for contributing to the project.
https://github.com/apache/camel/blob/master/CONTRIBUTING.md
davsclaus:1565089119:2019-08-06T18:58:39.237+0000:1565089119:2019-08-06T18:58:39.237+0000:Any update on this?
davsclaus:1569890666:2019-10-01T08:44:26.690+0000:1569890666:2019-10-01T08:44:26.690+0000:Are you working on this?
jeremyross:1636797648:2021-11-13T18:00:48.907+0000:1636797648:2021-11-13T18:00:48.907+0000:[~hnguyen15] Just pushed a commit for this. Please test with 3.14.0-SNAPSHOT and let me know if this helps."
0,CAMEL-13169,Task,Minor,2.23.1,"2.23.2, 2.24.0, 2.22.4, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0",Andrea Cosentino,Abraham Ciokler,2,3,2019-02-07 16:09:00+00:00,2019-02-08 14:32:52+00:00,"camel-quartz2 latest version (2.23.1) has a dependency on c3p0 version 0.9.5.2 and that version has a security vulnerability (CVE-2018-20433)
source: https://nvd.nist.gov/vuln/detail/CVE-2018-20433


The issue seems to be resolved by updating the dependency of c3p0 to 0.9.5.3. Please, update the camel-quartz2 to use newest version of c3p0 (0.9.5.3 at the time of writing this).","acosentino:1549528508:2019-02-07T16:35:08.713+0000:1549528508:2019-02-07T16:35:08.713+0000:This is already done on master. I'll fix on the old branches
aciokler:1549529428:2019-02-07T16:50:28.542+0000:1549529428:2019-02-07T16:50:28.542+0000:Can this be added to camel-quartz2 - 2.22.1 as well?
aciokler:1549529514:2019-02-07T16:51:54.821+0000:1549529532:2019-02-07T16:52:12.940+0000:there was a typo on the ticket for the fixed c3p0 version. Please look at the  description again. My apologies. It's version 0.9.5.3
acosentino:1549530390:2019-02-07T17:06:30.281+0000:1549530390:2019-02-07T17:06:30.281+0000:No. We will fix on 2.22.4 and release it. Then you can upgrade to this new release :-)
aciokler:1549530524:2019-02-07T17:08:44.049+0000:1549530524:2019-02-07T17:08:44.049+0000:Thanks!
davsclaus:1549546047:2019-02-07T21:27:27.987+0000:1549546047:2019-02-07T21:27:27.987+0000:People can easily just add the c3p0 dependency themselves with the version, and its not in use by default with camel-quartz2, only if you use quartz database and its support for c3p0 jdbc pooling.
aciokler:1549546937:2019-02-07T21:42:17.727+0000:1549546937:2019-02-07T21:42:17.727+0000:[~davsclaus] I understand there's a workaround, but that doesn't make this a minor issue. The reason my team found out about this issue is because a vulnerability scanning tool detected it. Those who don't have such tools will unsuspectedly expose a security vulnerability in their application by the using camel-quartz2 library. I consider this a major issue and I think it should be fixed sooner than later. Regards.
acosentino:1549547520:2019-02-07T21:52:00.380+0000:1549547520:2019-02-07T21:52:00.380+0000:This will be fixed in the normal schedule for the expected releases. The suggested workaround is until the release is out."
0,CAMEL-13168,Bug,Minor,2.23.1,"2.23.2, 2.24.0, 2.22.4, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 2.22.4, 3.0.0",Stephan Siano,Stephan Siano,0,3,2019-02-07 10:42:39+00:00,2019-02-07 13:42:17+00:00,"If one route calls a different route via direct-vm endpoint and the second route creates a StreamCache based for a file in the called route but the payload is propagated back to the calling route, this route will not be able to call the file because it is already deleted.


The issue is actually the same as for CAMEL-7787. As the multicast processor the direct-vm processor creates a copy of the exchange and does perform the further processing with this exchange till the route comes back. The stream cache will create a synchronization on this second exchange to delete the file when the exchange is done, but the StreamCache as an entity (then without underlying file) might be handed back to the original exchange.


The fix is actually the same as for CAMEL-7787, set the exchange property Exchange.STREAM_CACHE_UNIT_OF_WORK to the LUW of the initial exchange.","davsclaus:1549515908:2019-02-07T13:05:08.564+0000:1549515908:2019-02-07T13:05:08.564+0000:We also need this to be fixed on master which has the direct-vm component in the components folder. The unit test are stil in core/camel-core.
siano:1549516393:2019-02-07T13:13:13.997+0000:1549516393:2019-02-07T13:13:13.997+0000:Yes, I am working on it. Can the tests in core/camel-core use direct-vm endpoints or do I have to move the test for that?

 "
0,CAMEL-13167,Bug,Major,3.0.0,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Tapio Piironen,0,2,2019-02-07 06:56:50+00:00,2019-03-01 13:25:15+00:00,"Test fails on case sensitive filesystem (using master branch, currenty camel3):


camel/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java


fix diff:


diff --git a/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java b/core/camel-core/src/test/java/org/apache/ca
mel/component/file/FileMEPInOutTest.java
index 653eae88e32..3b73132791c 100644
— a/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java
+++ b/core/camel-core/src/test/java/org/apache/camel/component/file/FileMEPInOutTest.java
@@ -32,7 +32,7 @@ public class FileMEPInOutTest extends ContextTestSupport {
         MockEndpoint mock = getMockEndpoint(""mock:result"");
         mock.expectedMessageCount(1);
         mock.expectedBodiesReceived(""Hello World"");
-        mock.expectedFileExists(""target/data/fileMEPInOutTest.txt"", ""Hello World"");
+        mock.expectedFileExists(""target/data/FileMEPInOutTest.txt"", ""Hello World"");


         // request is InOut
         template.requestBodyAndHeader(""direct:in"", ""Hello World"", Exchange.FILE_NAME,
@@ -51,4 +51,4 @@ public class FileMEPInOutTest extends ContextTestSupport 

{
         }

;
     }


-}
\ No newline at end of file
+}",acosentino:1549495298:2019-02-07T07:21:38.584+0000:1549495298:2019-02-07T07:21:38.584+0000:Thanks
0,CAMEL-13166,Bug,Minor,2.23.1,"2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Jan Bednar,0,2,2019-02-06 23:56:52+00:00,2019-02-07 08:30:01+00:00,ArrayBlockingQueueFactory#create(int) uses defaultCapacity instead of passed capacity.,acosentino:1549499401:2019-02-07T08:30:01.006+0000:1549499401:2019-02-07T08:30:01.006+0000:Thanks for the patch.
0,CAMEL-13165,New Feature,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-02-06 11:13:21+00:00,2019-03-01 13:15:21+00:00,No Desc,
0,CAMEL-13164,Improvement,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-02-06 09:15:42+00:00,2019-03-01 13:25:26+00:00,"This functionality was not really in use, and was not fully implemented. And there was no similar feature for using other DSLs such as XML.


Its deprecated in 2.x and removed in 3",
0,CAMEL-13163,Test,Major,None,3.7.0,"
None
",Resolved,Fixed,3.7.0,Luca Burgazzoli,Claus Ibsen,0,3,2019-02-06 06:46:22+00:00,2021-01-04 13:23:31+00:00,It would be good to use testcontainers for testing camel-kafka as it can easier spinup a real kafka cluster via docker. We use this for other components such as consul.,"orpiske:1609737609:2021-01-04T13:20:09.169+0000:1609737811:2021-01-04T13:23:31.370+0000:This one is resolved.

For reference, the testcontainers support was there previously, but was refactored to the new test-infra on the following PR: [https://github.com/apache/camel/pull/4380]
orpiske:1609737796:2021-01-04T13:23:16.333+0000:1609737796:2021-01-04T13:23:16.333+0000:Also added here for reference of the original work fixing the issue: https://issues.apache.org/jira/browse/CAMEL-14558"
0,CAMEL-13132,Bug,Major,2.21.2,"2.21.5, 2.23.2, 2.24.0, 2.22.4, 3.0.0","
None
",Resolved,Fixed,"2.21.5, 2.23.2, 2.24.0, 2.22.4, 3.0.0",Andrea Cosentino,Andrey Poltavtsev,0,1,2019-01-28 05:27:19+00:00,2019-01-28 10:15:48+00:00,"This is problematic code on 2.21.2:


https://github.com/apache/camel/blob/release/2.21.2/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#L160


the same issue for ""commitBlobBlockList"": 


https://github.com/apache/camel/blob/release/2.21.2/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#L192


 


it is necessary to replace it by ""blobBlocks = (List<BlobBlock>)object;"" and by ""blockEntries = (List<BlockEntry>)object;"" correspondingly


 


In master problematic code is more strange, but can be resolved in the same way:


https://github.com/apache/camel/blob/master/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#156


and the same issue for ""commitBlobBlockList"": 


https://github.com/apache/camel/blob/master/components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceProducer.java#L188",
0,CAMEL-13131,Task,Minor,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2019-01-27 12:32:03+00:00,2019-03-01 13:39:57+00:00,"[WARNING]
[WARNING] Some problems were encountered while building the effective model for org.apache.camel.example:camel-example-cdi:jar:3.0.0-SNAPSHOT
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.camel:camel-core:jar -> duplicate declaration of version  @ org.apache.camel.example:camel-example-cdi:[unknown-version], /Users/davsclaus/workspace/camel/examples/camel-example-cdi/pom.xml, line 61, column 17
[WARNING]
[WARNING] Some problems were encountered while building the effective model for org.apache.camel.example:camel-example-cdi-cassandraql:jar:3.0.0-SNAPSHOT
[WARNING] 'dependencies.dependency.(groupId:artifactId:type:classifier)' must be unique: org.apache.camel:camel-core:jar -> duplicate declaration of version  @ org.apache.camel.example:camel-example-cdi-cassandraql:[unknown-version], /Users/davsclaus/workspace/camel/examples/camel-example-cdi-cassandraql/pom.xml, line 64, column 17
[WARNING]
[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.
[WARNING]
[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.
[WARNING]
[INFO] --------------------------------------","bwesterfield:1549312079:2019-02-05T04:27:59.517+0000:1549312079:2019-02-05T04:27:59.517+0000:I'd be happy to do this quick. 
davsclaus:1549313879:2019-02-05T04:57:59.722+0000:1549313879:2019-02-05T04:57:59.722+0000:Thanks for the PR"
0,CAMEL-13130,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-27 09:24:40+00:00,2019-03-01 13:29:49+00:00,"There are a few components that uses XmlConverter directly like camel-cxf and camel-spring-ws. We should use XmlConverterHelper from camel-support if possible, or better yet the neutral TypeConverter API from camel-api.","davsclaus:1548641493:2019-01-28T10:11:33.189+0000:1548641493:2019-01-28T10:11:33.189+0000:camel-cxf depends on camel-spring which depends on camel-core. But I have fixed CXF to not really require camel-core anymore.
davsclaus:1548641703:2019-01-28T10:15:03.813+0000:1548641703:2019-01-28T10:15:03.813+0000:camel-xmlsecurity is using xpathbuilder from camel-core. So this would require to be able eventually to splitup xpath language and xpathbuilder into camel-xpath, which camel-xmlsecurity can use.
davsclaus:1548643219:2019-01-28T10:40:19.682+0000:1548643219:2019-01-28T10:40:19.682+0000:Okay now only camel-cxf and camel-xmlsecurity uses xml converter directly during unit testing so there are no direct usage anymore."
0,CAMEL-13129,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Claus Ibsen,0,2,2019-01-27 08:55:46+00:00,2019-03-01 13:28:51+00:00,We should look at if we can move the osgi activator out of camel-core into for example camel-core-osgi instead,gnodet:1548897262:2019-01-31T09:14:22.010+0000:1548897262:2019-01-31T09:14:22.010+0000:https://github.com/apache/camel/commit/e65d06954105e0b74b49735dc892739e1b10cfb1
0,CAMEL-13128,Bug,Major,3.0.0,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Andrea Cosentino,0,1,2019-01-26 11:52:08+00:00,2019-03-01 13:29:42+00:00,"by installing on camel-jms




karaf@root()> feature:repo-add file:////home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/3.0.0-SNAPSHOT/apache-camel-3.0.0-SNAPSHOT-features.xml
Adding feature url file:////home/oscerd/.m2/repository/org/apache/camel/karaf/apache-camel/3.0.0-SNAPSHOT/apache-camel-3.0.0-SNAPSHOT-features.xml
karaf@root()> feature:install -v camel-jms
Adding features: camel-jms/[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]
Changes to perform:
Region: root
Bundles to install:
mvn:com.github.ben-manes.caffeine/caffeine/2.6.2
mvn:org.apache.camel/camel-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-base/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-browse/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-commands-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-controlbus/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-dataformat/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-direct/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-directvm/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-file/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-jms/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-language/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-log/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-impl/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-properties/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-ref/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-saga/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-scheduler/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-seda/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-stub/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-support/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-timer/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-util/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-validator/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-vm/3.0.0-SNAPSHOT
mvn:org.apache.camel/json-simple-ordered/3.0.0-SNAPSHOT
mvn:org.apache.camel.karaf/camel-karaf-commands/3.0.0-SNAPSHOT
mvn:org.apache.camel/spi-annotations/3.0.0-SNAPSHOT
mvn:commons-pool/commons-pool/1.6
mvn:org.apache.geronimo.specs/geronimo-jms_2.0_spec/1.0-alpha-2
mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.aopalliance/1.0_6
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.11_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-aop/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-beans/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context-support/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-core/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-expression/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-jms/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-tx/5.1.3.RELEASE_1
mvn:org.codehaus.woodstox/stax2-api/3.1.4
mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Stopping bundles:
org.ops4j.pax.logging.pax-logging-log4j2/1.10.1
Installing bundles:
mvn:com.github.ben-manes.caffeine/caffeine/2.6.2
mvn:org.apache.camel/camel-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-base/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-browse/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-commands-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-controlbus/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-core/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-dataformat/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-direct/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-directvm/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-file/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-jms/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-language/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-log/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-api/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-management-impl/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-properties/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-ref/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-saga/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-scheduler/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-seda/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-stub/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-support/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-timer/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-util/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-validator/3.0.0-SNAPSHOT
mvn:org.apache.camel/camel-vm/3.0.0-SNAPSHOT
mvn:org.apache.camel/json-simple-ordered/3.0.0-SNAPSHOT
mvn:org.apache.camel.karaf/camel-karaf-commands/3.0.0-SNAPSHOT
mvn:org.apache.camel/spi-annotations/3.0.0-SNAPSHOT
mvn:commons-pool/commons-pool/1.6
mvn:org.apache.geronimo.specs/geronimo-jms_2.0_spec/1.0-alpha-2
mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.aopalliance/1.0_6
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.11_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-aop/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-beans/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-context-support/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-core/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-expression/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-jms/5.1.3.RELEASE_1
mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.spring-tx/5.1.3.RELEASE_1
mvn:org.codehaus.woodstox/stax2-api/3.1.4
mvn:org.codehaus.woodstox/woodstox-core-asl/4.4.1
Refreshing bundles:
org.ops4j.pax.logging.pax-logging-log4j2/1.10.1 (Should be wired to: org.apache.geronimo.specs.geronimo-jms_2.0_spec/1.0.0.alpha-2 (through [org.ops4j.pax.logging.pax-logging-log4j2/1.10.1] osgi.wiring.package; resolution:=optional; filter:=""(osgi.wiring.package=javax.jms)""), stax2-api/3.1.4 (through [org.ops4j.pax.logging.pax-logging-log4j2/1.10.1] osgi.wiring.package; resolution:=optional; filter:=""(osgi.wiring.package=org.codehaus.stax2)""))
Starting bundles:
org.ops4j.pax.logging.pax-logging-log4j2/1.10.1
stax2-api/3.1.4
woodstox-core-asl/4.4.1
org.apache.geronimo.specs.geronimo-jta_1.1_spec/1.1.1
org.apache.servicemix.bundles.jaxb-impl/2.2.11.1
org.apache.servicemix.bundles.spring-core/5.1.3.RELEASE_1
org.apache.servicemix.bundles.aopalliance/1.0.0.6
org.apache.servicemix.bundles.spring-beans/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-aop/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-expression/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-context/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-tx/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-jms/5.1.3.RELEASE_1
org.apache.servicemix.bundles.spring-context-support/5.1.3.RELEASE_1
com.github.ben-manes.caffeine/2.6.2
org.apache.camel.camel-util/3.0.0.SNAPSHOT
org.apache.geronimo.specs.geronimo-jms_2.0_spec/1.0.0.alpha-2
org.apache.camel.camel-management-api/3.0.0.SNAPSHOT
org.apache.camel.spi-annotations/3.0.0.SNAPSHOT
org.apache.camel.camel-jms/3.0.0.SNAPSHOT
org.apache.camel.camel-api/3.0.0.SNAPSHOT
org.apache.camel.camel-support/3.0.0.SNAPSHOT
org.apache.camel.camel-log/3.0.0.SNAPSHOT
org.apache.camel.camel-seda/3.0.0.SNAPSHOT
org.apache.camel.camel-vm/3.0.0.SNAPSHOT
org.apache.camel.camel-properties/3.0.0.SNAPSHOT
org.apache.camel.camel-language/3.0.0.SNAPSHOT
org.apache.camel.json-simple-ordered/3.0.0.SNAPSHOT
org.apache.camel.camel-base/3.0.0.SNAPSHOT
org.apache.camel.camel-direct/3.0.0.SNAPSHOT
org.apache.camel.camel-core/3.0.0.SNAPSHOT
org.apache.camel.camel-management-impl/3.0.0.SNAPSHOT
org.apache.camel.camel-browse/3.0.0.SNAPSHOT
org.apache.camel.camel-validator/3.0.0.SNAPSHOT
org.apache.camel.camel-saga/3.0.0.SNAPSHOT
org.apache.camel.camel-directvm/3.0.0.SNAPSHOT
org.apache.camel.camel-file/3.0.0.SNAPSHOT
org.apache.camel.camel-stub/3.0.0.SNAPSHOT
org.apache.camel.camel-timer/3.0.0.SNAPSHOT
org.apache.camel.camel-controlbus/3.0.0.SNAPSHOT
org.apache.camel.camel-ref/3.0.0.SNAPSHOT
org.apache.commons.pool/1.6.0
org.apache.camel.camel-scheduler/3.0.0.SNAPSHOT
org.apache.camel.camel-dataformat/3.0.0.SNAPSHOT
org.apache.camel.camel-commands-core/3.0.0.SNAPSHOT
org.apache.camel.karaf.camel-karaf-commands/3.0.0.SNAPSHOT
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
Activator start error in bundle org.apache.camel.camel-core [51].
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1005)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1025)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:964)
at java.util.concurrent.FutureTask.run(FutureTask.java:266)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.camel-core [51].
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:161)
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1116)
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:997)
... 6 more
Caused by: java.lang.NoClassDefFoundError: org/apache/camel/util/ObjectHelper
at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.<init>(Activator.java:386)
at org.apache.camel.impl.osgi.Activator.registerTypeConverterLoader(Activator.java:236)
at org.apache.camel.impl.osgi.Activator.addingBundle(Activator.java:136)
at org.apache.camel.impl.osgi.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:430)
at org.apache.camel.impl.osgi.tracker.AbstractTracked.trackAdding(AbstractTracked.java:260)
at org.apache.camel.impl.osgi.tracker.AbstractTracked.trackInitial(AbstractTracked.java:187)
at org.apache.camel.impl.osgi.tracker.BundleTracker.open(BundleTracker.java:173)
at org.apache.camel.impl.osgi.Activator.start(Activator.java:101)
at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
... 12 more
Caused by: java.lang.ClassNotFoundException: org.apache.camel.util.ObjectHelper not found by org.apache.camel.camel-jms [56]
at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
... 22 more
Error executing command: Error restarting bundles:
Activator start error in bundle org.apache.camel.camel-core [51].",
0,CAMEL-13127,Bug,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",John Poth,Andrea Cosentino,0,2,2019-01-26 11:49:24+00:00,2019-03-01 13:30:07+00:00,"12:47:27.332 WARN [pipe-install -s mvn:org.apache.camel.example/camel-example-fhir-osgi/3.0.0-SNAPSHOT] Listener caused an exception, will be ignored
java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/apache/camel/util/concurrent/ThreadPoolRejectedPolicy
at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:?]
at java.util.concurrent.FutureTask.get(FutureTask.java:192) ~[?:?]
at java.util.concurrent.AbstractExecutorService.doInvokeAny(AbstractExecutorService.java:193) ~[?:?]
at java.util.concurrent.AbstractExecutorService.invokeAny(AbstractExecutorService.java:225) ~[?:?]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper$4.call(ScheduledExecutorServiceWrapper.java:185) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper$15.call(ScheduledExecutorServiceWrapper.java:446) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.RWLock.runReadOperation(RWLock.java:33) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.runUnlessShutdown(ScheduledExecutorServiceWrapper.java:443) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.utils.threading.ScheduledExecutorServiceWrapper.invokeAny(ScheduledExecutorServiceWrapper.java:180) ~[48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher.callListener(BlueprintEventDispatcher.java:188) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher.callListeners(BlueprintEventDispatcher.java:178) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher.blueprintEvent(BlueprintEventDispatcher.java:133) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:427) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:278) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:299) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:268) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:264) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:254) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [48:org.apache.aries.blueprint.core:1.10.1]
at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [?:?]
at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [?:?]
at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [?:?]
at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [?:?]
at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [?:?]
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [?:?]
at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984) [?:?]
at org.apache.karaf.bundle.command.Install.execute(Install.java:115) [17:org.apache.karaf.bundle.core:4.2.2]
at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:84) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:68) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:86) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:599) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:526) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:415) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Pipe.doCall(Pipe.java:416) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:229) [35:org.apache.karaf.shell.core:4.2.2]
at org.apache.felix.gogo.runtime.Pipe.call(Pipe.java:59) [35:org.apache.karaf.shell.core:4.2.2]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:?]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:?]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:?]
at java.lang.Thread.run(Thread.java:748) [?:?]
Caused by: java.lang.NoClassDefFoundError: org/apache/camel/util/concurrent/ThreadPoolRejectedPolicy
at org.apache.camel.spi.ThreadPoolProfile.getRejectedExecutionHandler(ThreadPoolProfile.java:225) ~[?:?]
at org.apache.camel.support.DefaultThreadPoolFactory.newScheduledThreadPool(DefaultThreadPoolFactory.java:100) ~[?:?]
at org.apache.camel.impl.DefaultExecutorServiceManager.newScheduledThreadPool(DefaultExecutorServiceManager.java:242) ~[?:?]
at org.apache.camel.impl.DefaultExecutorServiceManager.newScheduledThreadPool(DefaultExecutorServiceManager.java:266) ~[?:?]
at org.apache.camel.support.DefaultScheduledPollConsumerScheduler.doStart(DefaultScheduledPollConsumerScheduler.java:172) ~[?:?]
at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86) ~[?:?]
at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:55) ~[?:?]
at org.apache.camel.support.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:439) ~[?:?]
at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:707) ~[?:?]
at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.startService(AbstractCamelContext.java:3631) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartOrResumeRouteConsumers(AbstractCamelContext.java:3949) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartRouteConsumers(AbstractCamelContext.java:3884) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3804) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartOrResumeRoutes(AbstractCamelContext.java:3568) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:3420) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.lambda$doStart$2(AbstractCamelContext.java:3217) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:3234) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.doStart(AbstractCamelContext.java:3215) ~[?:?]
at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:86) ~[?:?]
at org.apache.camel.impl.AbstractCamelContext.start(AbstractCamelContext.java:3131) ~[?:?]
at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:251) ~[?:?]
at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:293) ~[?:?]
at org.apache.camel.blueprint.BlueprintCamelContext.blueprintEvent(BlueprintCamelContext.java:184) ~[?:?]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:190) ~[?:?]
at org.apache.aries.blueprint.container.BlueprintEventDispatcher$3.call(BlueprintEventDispatcher.java:188) ~[?:?]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:?]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:?]
at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:?]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:?]
at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:?]
... 3 more",jpoth:1548639078:2019-01-28T09:31:18.431+0000:1548639078:2019-01-28T09:31:18.431+0000:Closed with https://github.com/apache/camel/commit/2c63df2ecfa3f8cdf15bf08febfcad6b720bea01
0,CAMEL-13126,Improvement,Major,None,"2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0",Claus Ibsen,Darius Cooper,0,2,2019-01-25 18:03:16+00:00,2019-02-17 08:07:44+00:00,"An earlier JIRA: CAMEL-12855 created an issue where the forwarded header could be used to set the ""host"" for Swagger. This overwrote the old behavior where one could specify a ""hard-code"" host in the RestConfiguration.


Add an option to control whether these x-forward headers should be applied or not, to have the old behavior vs the new. (e.g. useXForwardHeaders = true/false)


cibsen@e-ma.net, a couple of questions:



would the default be the new behavior (using the headers), or the old behavior (do not use the headers) ?
should the parameter turn on/off the entire X-FORWARD section... that is in the setupXForwardedHeaders() here ?",davsclaus:1550362064:2019-02-17T08:07:44.857+0000:1550362064:2019-02-17T08:07:44.857+0000:Thanks for the PR
0,CAMEL-13125,Bug,Major,2.23.1,"2.22.3, 2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.22.3, 2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,2,2019-01-25 12:58:12+00:00,2019-02-13 04:59:17+00:00,"We have the same situation of CAMEL-13123 on camel-mongodb, even though it has been deprecated","bwesterfield:1549881207:2019-02-11T18:33:27.448+0000:1549881207:2019-02-11T18:33:27.448+0000:I will take a peek at this one.

 
acosentino:1549881461:2019-02-11T18:37:41.694+0000:1549881461:2019-02-11T18:37:41.694+0000:Thanks. 
acosentino:1549881486:2019-02-11T18:38:06.965+0000:1549881486:2019-02-11T18:38:06.965+0000:In case there is already an assignee always add a comment like you did
bwesterfield:1549881612:2019-02-11T18:40:12.851+0000:1549881612:2019-02-11T18:40:12.851+0000:Sure thing!  
bwesterfield:1549883254:2019-02-11T19:07:34.851+0000:1549883254:2019-02-11T19:07:34.851+0000:Apologies [~ancosen] I didn't notice that you were the assignee.  
acosentino:1549883397:2019-02-11T19:09:57.548+0000:1549883397:2019-02-11T19:09:57.548+0000:No problem! Contributions are welcome always!
acosentino:1549929422:2019-02-12T07:57:02.176+0000:1549929422:2019-02-12T07:57:02.176+0000:[~bwesterfield] can you please do the same for 2.22.x? Thanks
bwesterfield:1549953940:2019-02-12T14:45:40.560+0000:1549953940:2019-02-12T14:45:40.560+0000:[~ancosen] : Done - > [https://github.com/apache/camel/pull/2763]

Thank you!
bwesterfield:1549954312:2019-02-12T14:51:52.769+0000:1549954312:2019-02-12T14:51:52.769+0000:[~ancosen] : I've also got a branch completed for camel-2.21.x if needed.  Let me know if you want that one PR'd as well.  

Thanks!
acosentino:1549954363:2019-02-12T14:52:43.449+0000:1549954363:2019-02-12T14:52:43.449+0000:[~bwesterfield], thanks but 2.21.x is EOL and the last release for that branch has been already released
bwesterfield:1549954928:2019-02-12T15:02:08.365+0000:1549954928:2019-02-12T15:02:08.365+0000:[~ancosen] : Sounds good.  Please let me know if there is anything else needed.  "
0,CAMEL-13124,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-24 19:19:34+00:00,2019-03-01 13:30:13+00:00,This requires a bit of shared xml code to be moved to camel-support.,"davsclaus:1548330239:2019-01-24T19:43:59.570+0000:1548330239:2019-01-24T19:43:59.570+0000:XmlConverter is used by a number of WebService components like CXF and Spring-WS. Its a potential class that can be in camel-support, or a new camel-support-xml where we can move XML related tooling. As then you can only have it on the classpath when needed, and avoid XML libraries and also for graalvm to optimise with xml classes needed."
0,CAMEL-13123,Bug,Major,2.23.1,"2.21.5, 2.22.3, 2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.21.5, 2.22.3, 2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Peter Nagy,0,2,2019-01-24 15:00:38+00:00,2019-04-08 10:55:20+00:00,This piece of code in MongoEndpoint closes the underlying MongoClient object when an Endpoint gets stopped. This is not correct behavior. There most probably are other endpoints using the client and this closes the connection for all of them. So if route1 stops and route2 is using the same MongoClient (from the registry) then route2 just got nuked.,"PeterN:1548313594:2019-01-24T15:06:34.379+0000:1548313594:2019-01-24T15:06:34.379+0000:A  [pull request|https://github.com/apache/camel/pull/2733] is ready.
davsclaus:1548327619:2019-01-24T19:00:19.480+0000:1548327619:2019-01-24T19:00:19.480+0000:Ah thanks, yeah it looks like the lifecycle of the mongodb client is handled outside Camel for this component. "
0,CAMEL-13122,Bug,Minor,2.23.1,"3.0.0.RC3, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC3, 3.0.0",Claus Ibsen,Micael Kirouac,0,3,2019-01-24 14:21:19+00:00,2019-10-11 07:20:31+00:00,"I think I found a potential bug when using a bean to set a property if a message is coming through http. I wanted to check here before opening a bug in case I am missing something. It is very similar to the following bug which has already been fixed: https://stackoverflow.com/questions/40293128/camel-rest-service-throws-exception-when-returning-null/40317432#40317432.


 


The difference is that instead of returning null, an exception is thrown from the bean method. When that happen, I see the same behavior as described in the stackoverflow post above.  I included an example on how to reproduce at the end of this email. Here is what I think happens:


 


Problem starts in BeanExpression:
 1. The exchange is copied, BeanExpression: line 194: Exchange resultExchange = ExchangeHelper.createCopy(exchange, true)
 2. The out body is then retrieved from the exchange, BeanExpression: line 201: result = resultExchange.getOut().getBody();
 3. Since out() is null, the in() message is copied to the out(), this makes a copy of the HttpMessage, which is copied along with the original ServletRequest (which contains a closed stream) DefaultExchange.class line 317.
 4. To copy the message from in to out, the method newInstance() from HttpMessage class is called. HttpMessage line 85
 5. At this point, the new instance of HttpMessage tries to read the stream from the original message which is already closed, IOException.


 


Example just below, I would be expecting the EXCEPTION_CAUGHT to be the RuntimeException I throw but instead it's a RuntimeBeanExpressionException effectively wrapping a IOException.


 




public void configureTestException() {

  restDefinitionV1 = restDefinitionV1

    .get(""/throwException"")

    .route()

     .onException(Exception.class)

       .process(exchange -> {System.out.println(""Caught exception of type: "" + exchange.getProperty(Exchange.EXCEPTION_CAUGHT).getClass());} )

       .handled(true)

     .end()

       .setProperty(""test"").method(new TestBean(), ""throwException"")

     .endRest();

}

               

public static class TestBean {

  public void throwException() {

    throw new RuntimeException(""Excepting this exception to be handled by onException"");

  }

}




 


I will try to provide an actual unit test shortly.","bedla:1549540703:2019-02-07T19:58:23.074+0000:1549547784:2019-02-07T21:56:24.301+0000:[~mkirouac] -Could you confirm affected version? I was not able reproduce this in 2.23.1. Attaching passing unit test [^Camel13122Test.java] based on your inputs.-

Now I see, the issue is related to camel-servlet and my unit test used camel-restlet. I was able to reproduce this with Arquillian test.
davsclaus:1570408923:2019-10-07T08:42:03.248+0000:1570408923:2019-10-07T08:42:03.248+0000:Fixed by CAMEL-10425"
0,CAMEL-13121,Bug,Minor,2.21.0,"3.0.0.RC2, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0.RC2, 3.0.0, 2.25.0",Dmitry Volodin,Radovan Netuka,0,5,2019-01-24 13:34:41+00:00,2019-09-27 13:46:36+00:00,"Configure this route:


from(""irc://priv@localhost:6667/test1"")
 .log(""${headers}"")
 .to(""irc://chan@localhost:6667/test2"");


 


Send private message to user priv.


 


Expected result:
 The message is routed to user chan.


 


Actual result:


The message is routed back to user priv and enters an infinite loop


 


Cause:


Inside camel-core Pipeline, the IRC message has still its old target set in its properties.","dmvolod:1548309674:2019-01-24T14:01:14.422+0000:1548310027:2019-01-24T14:07:07.263+0000:Please ask [https://gitter.im/apache/apache-camel] channel first. Note, that camel-core doesn't know nothing about irc or any other components...and can't be a cause

If not, please submit a complete JUnit test case, but it's a minimal chance that is related to camel-core behavior, not camel-irc
acosentino:1548310245:2019-01-24T14:10:45.584+0000:1548310245:2019-01-24T14:10:45.584+0000:We have a camel-irc component and I guess this is a real issue. The problem is probably related on how the stuff is done.
dmvolod:1548311306:2019-01-24T14:28:26.972+0000:1548311306:2019-01-24T14:28:26.972+0000:[~ancosen], yes, I agree with you, it's looks like component default behavior and not related to camel-core. The producer takes IrcConstants.IRC_TARGET by default from the header populated by consumer.
rnetuka:1548314085:2019-01-24T15:14:45.098+0000:1548314085:2019-01-24T15:14:45.098+0000:The problem is there is field called _target_ in IrcMessage and that field is left intact during routing. This causes the message being sent to the former user when it reaches the SendProcessor.
davsclaus:1548314682:2019-01-24T15:24:42.348+0000:1548314682:2019-01-24T15:24:42.348+0000:You can remove that header as a workaround
dmvolod:1548317039:2019-01-24T16:03:59.910+0000:1548318053:2019-01-24T16:20:53.538+0000:org.apache.camel.component.irc.it.IrcRouteTest and org.apache.camel.component.irc.it.IrcPrivmsgTest also fails with java.lang.NullPointerException

Need to be checked
rnetuka:1548382908:2019-01-25T10:21:48.287+0000:1548382908:2019-01-25T10:21:48.287+0000:[~davsclaus]: I surely can't remove the [target|https://github.com/apache/camel/blob/master/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcMessage.java#L29] field

 
dmvolod:1548383519:2019-01-25T10:31:59.877+0000:1548383519:2019-01-25T10:31:59.877+0000:[~rnetuka], it looks like not related to message target property. It takes this property from header [https://github.com/apache/camel/blob/e34b4f87d1aecf739c7dd142e480019dfa189848/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcProducer.java#L45]

I will look at this issue more detail with real test case and server.
davsclaus:1548383627:2019-01-25T10:33:47.211+0000:1548383627:2019-01-25T10:33:47.211+0000:Just remove the header via <removeHeader> and the name is the value of the constant IrcConstants.IRC_TARGET
rnetuka:1548384075:2019-01-25T10:41:15.596+0000:1548384075:2019-01-25T10:41:15.596+0000:[~dmvolod] I have proposed solution in https://github.com/rnetuka/camel-1/commit/35c57d4aca64be6d22c11af248e5eba02dd28f8a. See if it's of any use.
acosentino:1548384240:2019-01-25T10:44:00.885+0000:1548384240:2019-01-25T10:44:00.885+0000:It doesn't make sense to add a method to camel-core Pipeline for a corner case.
dmvolod:1548384515:2019-01-25T10:48:35.299+0000:1548384515:2019-01-25T10:48:35.299+0000:+1 to [~ancosen], it could be better to change component logic rather than change a core behaivour for all.
davsclaus:1548384827:2019-01-25T10:53:47.929+0000:1548384827:2019-01-25T10:53:47.929+0000:Some of the other components did that too, and the workaround was to remove that header. The solution is to use another named header for overriding the target in the producer, and not use the name of the header from the consumer.


jondruse:1569384634:2019-09-25T12:10:34.743+0000:1569384634:2019-09-25T12:10:34.743+0000:[~dmvolod] [~davsclaus] I agree with your previous comments and removal of header is working in this case. 
From my POV it would be nice to have a validation, which fail if message goes to target which is not defined in ""to"" endoint.
In the above case it will fail with validation error, because message is being sent to channel #test1, which is not defined as in endpoint .to(""irc://chan@localhost:6667/test2"");

It is a simple change, which makes sense. It could be done by this: https://github.com/JiriOndrusek/camel/commit/1f972395eac1ee998b7d7b790ba704f7e34466af#diff-c64bf7249f53d33cc5f9c65b8c9a9fe9R58

WDYT?
dmvolod:1569386805:2019-09-25T12:46:45.849+0000:1569386805:2019-09-25T12:46:45.849+0000:[~jondruse], I think it could be possible solution to log an error for this case and could be applied via PR. 
davsclaus:1569390942:2019-09-25T13:55:42.198+0000:1569390942:2019-09-25T13:55:42.198+0000:Lets just add a new header key that you use to send to a specific target instead of the configured name from the endpoint. Then the existing header is a read-only header. We do this in JMS etc, and other components.


jondruse:1569393247:2019-09-25T14:34:07.458+0000:1569393247:2019-09-25T14:34:07.458+0000:[~dmvolod] Should I look into the header as [~davsclaus] suggested, or will you do it (because you are assignee to this issue)?
dmvolod:1569395419:2019-09-25T15:10:19.695+0000:1569395419:2019-09-25T15:10:19.695+0000:[~jondruse], you are welcome to work on the PR, don't care about assignments.
jondruse:1569472377:2019-09-26T12:32:57.436+0000:1569472377:2019-09-26T12:32:57.436+0000:PR: https://github.com/apache/camel/pull/3200

I've added new header ""irc.sendTo"" to define target destination of message. Route defined in this issue works with this change without modification.

I'm not sure about correct processes here, but I think that this change should be mentioned in documentation for the component, as it ads new header for users to use."
0,CAMEL-13120,Improvement,Major,None,"2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.24.0, 3.0.0",Ramu,Claus Ibsen,0,2,2019-01-24 11:09:30+00:00,2019-03-14 04:58:35+00:00,"In this health check we add name, version, context start by default
https://github.com/apache/camel/blob/camel-2.21.x/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/actuate/health/CamelHealthIndicator.java#L39


We should have an option to turn this off. The name of the option can be sensitive, detailed, verbose etc or some good name to indicate this.","davsclaus:1548299437:2019-01-24T11:10:37.249+0000:1548299437:2019-01-24T11:10:37.249+0000:Contributions is welcome.
"
0,CAMEL-13119,New Feature,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Balazs Szeti,0,4,2019-01-23 21:58:41+00:00,2019-03-01 13:23:25+00:00,"Let's write a Policy for camel routes that can cache the ""result"" of a route and execute the route next time only if nothing is found in the cache.
 
Related to cache DSL idea, but without DSL change: https://issues.apache.org/jira/browse/CAMEL-11114
 
In the first draft the CachePolicy would cache the Message Body by a key calculated via an Expression.
Interface:



cachePolicy.setCacheManager( cacheManager ) - set the CacheManager. If not set, try lookup automatically.




cachePolicy.setCacheName ( name ) - Will use this cache from the CacheManager. If not set, we can use the route id by default.
cachePolicy.setKeyExpression( expression ) - Camel expression that is evaluated on the Exchange to determine the cache key. If it's found in the cache, the route is not executed and the cached value is set as Body. Otherwise the Message Body is added to the cache after the route with this key.



 
An earlier related implementation: https://gist.github.com/bszeti/552bf7a1f05a75fc2964a4ce7ce889b5 
and how it can be used in a route: https://gist.github.com/bszeti/4f855cd80cd69e3953ff990b0ae056a2","BalazsSzeti:1548252032:2019-01-23T22:00:32.872+0000:1548252032:2019-01-23T22:00:32.872+0000:I'll clean up my earlier implementation mentioned above and send. Just wanted to create a ticket for discussion.
BalazsSzeti:1548255317:2019-01-23T22:55:17.538+0000:1548263582:2019-01-24T01:13:02.156+0000:Any suggestions which package/module to use for the CachePolicy? I haven't seen a place for Policy classes in general.

Is it OK to add the CachePolicy in the camel-jcache component's repo? Maybe org.apache.camel.component.jcache.policy.CachePolicy?

 
dmvolod:1548288686:2019-01-24T08:11:26.982+0000:1548288686:2019-01-24T08:11:26.982+0000:[~BalazsSzeti] this is good idea, but just cache functionality is not enough for building complete solutions. It requires to invalidate cache, set TTL for it, manipulate with keys joining or splitting the caches by names, etc.

I'm not sure that it's possible to do all without specific DSL. It will be yet another simple cache method.
BalazsSzeti:1548302723:2019-01-24T12:05:23.756+0000:1548302723:2019-01-24T12:05:23.756+0000:[~dmvolod] Thanks, the cache configuration should be done outside the policy. I used this solution with ehcache, the cache ""mycache"" was configured in ehcache.xml. Then the CacheManager and cache name ""mycache"" was set in CachePolicy, but it was only dependent on the jcache api.

I'll have a look, maybe it wouldn't work well with the camel-jcache component, but simply required the javax.cache.cache-api (and an implementation) on the classpath. In this case it's better suited in a separate repo, than next to the jcache component.
BalazsSzeti:1549624090:2019-02-08T19:08:10.834+0000:1549624090:2019-02-08T19:08:10.834+0000:I did an implementation of the cache policy. See [https://github.com/apache/camel/pull/2755]

Let me know what you think.
davsclaus:1550189465:2019-02-15T08:11:05.028+0000:1550189465:2019-02-15T08:11:05.028+0000:Thanks the PR has been merged, you are welcome to provide another PR with an XML configuration example for the documentation.
davsclaus:1550271686:2019-02-16T07:01:26.445+0000:1550271686:2019-02-16T07:01:26.445+0000:Thanks for the work and the PRs"
0,CAMEL-13118,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Claus Ibsen,Guillaume Nodet,0,2,2019-01-23 18:54:21+00:00,2019-06-17 03:26:11+00:00,No Desc,"davsclaus:1553825704:2019-03-29T10:15:04.505+0000:1553825704:2019-03-29T10:15:04.505+0000:I am working on this to get the bulk of components changed to use camel-support
davsclaus:1553829921:2019-03-29T11:25:21.846+0000:1555067960:2019-04-12T19:19:20.997+0000:If we can get LanguageAnnotation moved out of camel-core into camel-support then we have a number of components that can rely on that *DONE*
gnodet:1554120145:2019-04-01T20:02:25.934+0000:1554120145:2019-04-01T20:02:25.934+0000:Enums are treated as enums when generating the spring-boot configuration.  This causes a strong dependency to the model which I think is not needed.  I'll investigate switching to strings for the spring-boot config options.
davsclaus:1554160012:2019-04-02T07:06:52.589+0000:1554160012:2019-04-02T07:06:52.589+0000:Yeah there are a bunch of json dataformat's that uses enums to set the json library etc
davsclaus:1555068885:2019-04-12T19:34:45.334+0000:1555068885:2019-04-12T19:34:45.334+0000:Maybe we can move the builder stuff out into camel-builder - as then maybe mock and xquery / hl7 components can depend on those instead of camel-core
davsclaus:1555479577:2019-04-17T13:39:37.132+0000:1555479577:2019-04-17T13:39:37.132+0000:Okay so the majority of components are now data-formats related to json and others that has a dependency on the model from camel-core
davsclaus:1555627427:2019-04-19T06:43:47.557+0000:1555627427:2019-04-19T06:43:47.557+0000:I have fixed the data formats now
davsclaus:1555908191:2019-04-22T12:43:11.716+0000:1555908191:2019-04-22T12:43:11.716+0000:camel-dozer will be fixed by: https://github.com/apache/camel/pull/2878
davsclaus:1556235792:2019-04-26T07:43:12.099+0000:1556235792:2019-04-26T07:43:12.099+0000:Okay there are a few components that use bean component which we can now do as well."
0,CAMEL-13117,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 17:25:18+00:00,2019-03-01 13:30:57+00:00,No Desc,
0,CAMEL-13116,Improvement,Minor,None,"3.0.0-M1, 3.0.0","

pull-request-available

",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Aniol Massana,0,4,2019-01-23 17:22:53+00:00,2019-03-01 13:39:18+00:00,"The Exchange headers are sent to target systems in some components such as JMS (as JMS message headers), HTTP (as HTTP headers).


In order to send only some of the existing Exchange headers, without removing the undesired ones so they are available later on on the route, a filter strategy kicks in.


The current implementation of the DefaultHeaderFilterStrategy class match action removes the headers you configure, so is exactly the reverse of this use case.


With this modification, you'd keep some headers and you'd avoid sending anything not matched, preventing any information to be leaked.


The default value for this new setting keeps the current behaviour, so it should be safe to be introduced.","acosentino:1548284623:2019-01-24T07:03:43.156+0000:1548284623:2019-01-24T07:03:43.156+0000:I think it's safe to introduce this option. But I'd like to hear the team about this too.
dmvolod:1548299296:2019-01-24T11:08:16.811+0000:1548299296:2019-01-24T11:08:16.811+0000:Agree with [~ancosen], if this fix will not brake default behavior, it could be.

But in case this addition, it could be better to describe this and previous cases of the DefaultHeaderFilterStrategy for example in [https://github.com/apache/camel/blob/master/docs/user-manual/en/faq/how-to-avoid-sending-some-or-all-message-headers.adoc] more details.
onders:1548301389:2019-01-24T11:43:09.819+0000:1548301433:2019-01-24T11:43:53.875+0000:0 - I am neutral. more use cases would be better. However, it is simple already, no reason no to have it.
amassana:1548303310:2019-01-24T12:15:10.611+0000:1548303310:2019-01-24T12:15:10.611+0000:I'll edit the documentation and the test case of this class.

The use case is exactly the one mentioned: selectivelly allow some filters to be sent, not the other way arround as the current implementation does. A minor change in the class makes it more flexible.

When you have large route which must do several actions in sequence, you end up with many headers in the Exchange. It's easier to known which headers you want to forward to the component rather than to know exactly which ones you select to be filtered out.

In general terms, I find this use safer and more natural than the current one - that's my current view, though..

 
amassana:1549521212:2019-02-07T14:33:32.317+0000:1549521212:2019-02-07T14:33:32.317+0000:The request has been modified.
 * The property is now named filterOnMatch
 * Test cases were added
 * Documentation was written

 
amassana:1549596439:2019-02-08T11:27:19.345+0000:1549596485:2019-02-08T11:28:05.482+0000:New pull request created

The code has been reorganized to the new directory structure (from impl to support package)

Test cases class is still located at the core/camel-core project - just like the other test classes.

Checkstyle also run

 

 
acosentino:1549945767:2019-02-12T12:29:27.359+0000:1549945767:2019-02-12T12:29:27.359+0000:Thanks"
0,CAMEL-13115,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 16:17:33+00:00,2019-03-01 13:30:48+00:00,"When we have removed deprecated modules in 3.x, then the folders stay in git when you switch branches.


So we get this WARNs when building camel-catalog




[WARNING] 	Missing document detected: 40
[WARNING] 		camel-bam
[WARNING] 		camel-cache
[WARNING] 		camel-castor
[WARNING] 		camel-context
[WARNING] 		camel-eclipse
[WARNING] 		camel-elasticsearch
[WARNING] 		camel-elasticsearch5
[WARNING] 		camel-groovy-dsl
[WARNING] 		camel-guice
[WARNING] 		camel-hawtdb
[WARNING] 		camel-hdfs
[WARNING] 		camel-hessian
[WARNING] 		camel-http
[WARNING] 		camel-ibatis
[WARNING] 		camel-javaspace
[WARNING] 		camel-jira
[WARNING] 		camel-josql
[WARNING] 		camel-juel
[WARNING] 		camel-jxpath
[WARNING] 		camel-kestrel
[WARNING] 		camel-krati
[WARNING] 		camel-mina
[WARNING] 		camel-mongodb
[WARNING] 		camel-netty
[WARNING] 		camel-netty-http
[WARNING] 		camel-openshift
[WARNING] 		camel-quartz
[WARNING] 		camel-routebox
[WARNING] 		camel-ruby
[WARNING] 		camel-rx
[WARNING] 		camel-scala
[WARNING] 		camel-scr
[WARNING] 		camel-servletlistener
[WARNING] 		camel-swagger
[WARNING] 		camel-testng
[WARNING] 		camel-urlrewrite
[WARNING] 		camel-xmlbeans
[WARNING] 		camel-xmljson
[WARNING] 		camel-xmlrpc
[WARNING] 		camel-yql




We should make it detect that these are empty folders (has no pom.xml) and skip them.",
0,CAMEL-13114,Improvement,Minor,2.23.1,"2.22.3, 2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.22.3, 2.23.2, 2.24.0, 3.0.0",Stephan Siano,Stephan Siano,0,2,2019-01-23 13:11:15+00:00,2019-01-23 18:09:23+00:00,"If a cookieHandler is defined on a camel AHC component and multiple cookies are stored for the server, the AHC component will send out multiple headers named Cookie which each have one value.


According to RFC 2965 one header should be sent out as a semicolon separated list.


Most servers (like the jetty server used in the junit tests) also accept the format with multiple cookie headers, but some don't.","acosentino:1548222519:2019-01-23T13:48:39.823+0000:1548222519:2019-01-23T13:48:39.823+0000:I think you need to fix also at master level and probably 2.23.x and 2.22.x
siano:1548223997:2019-01-23T14:13:17.822+0000:1548223997:2019-01-23T14:13:17.822+0000:Yes, I am working on it, it just takes time to check out the respective branch, build it and run the tests...

 "
0,CAMEL-13113,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 12:12:20+00:00,2020-04-26 10:59:29+00:00,"scripting api/jsr is also deprecated in the jdk and to be removed in the future
we will remove it for camel 3
and deprecate it in 2.x
for camel k and using javascript i think they are doing something custom, and will can make a new camel-javascript language for that purpose solely
all the other scripting languages was also a security vulnerability as well","davsclaus:1548217016:2019-01-23T12:16:56.432+0000:1548217027:2019-01-23T12:17:07.098+0000:Okay Luca says

yes we do use jsr scripting on java 8 (for camel k) and switching to graaljs in the future
but we have our own implementation that do not depends on camel

davsclaus:1555910325:2019-04-22T13:18:45.742+0000:1555910325:2019-04-22T13:18:45.742+0000:Its already deprecated on 2.x, and we will remove it on 3.0 now"
0,CAMEL-13112,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 10:28:11+00:00,2019-05-09 05:28:41+00:00,There is some file cluster that uses some abstract cluster stuff which we need to move to camel-support,"davsclaus:1548210706:2019-01-23T10:31:46.317+0000:1548210706:2019-01-23T10:31:46.317+0000:The class AbstractCamelClusterService should be moved to camel-support and there are a number of components that extends it which needs to use its new package name
davsclaus:1548214888:2019-01-23T11:41:28.051+0000:1548214888:2019-01-23T11:41:28.051+0000:Also there were a few idempotent repository implementations that was moved from camel-core to camel-support
davsclaus:1548216505:2019-01-23T12:08:25.053+0000:1548216505:2019-01-23T12:08:25.053+0000:There is a little issue as file converter uses IOConverter directly and they are all hidden in camel-base. So we have to change to use the public converter api.
davsclaus:1548217296:2019-01-23T12:21:36.957+0000:1548217296:2019-01-23T12:21:36.957+0000:So the component doc generator via compiler apt plugin needs to do for camel-ftp that extends camel-file which should have annotated all its options via @Metadata 
davsclaus:1548217526:2019-01-23T12:25:26.881+0000:1548217526:2019-01-23T12:25:26.881+0000:Ah the apt compiler plugin was prepared for this in the DocumentationHelper ;)"
0,CAMEL-13111,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Claus Ibsen,0,3,2019-01-23 10:18:52+00:00,2019-03-01 13:25:05+00:00,"I noticed that we dont have in some component docs, the spring boot START END markers for the SB auto configuration docs
we see WARNs when building SB starter JARs","acosentino:1548210047:2019-01-23T10:20:47.181+0000:1548210047:2019-01-23T10:20:47.181+0000:This is a good starter for contributing. 
bwesterfield:1549525331:2019-02-07T15:42:11.493+0000:1549525331:2019-02-07T15:42:11.493+0000:I'd be happy to take a look at this one.
bwesterfield:1549527885:2019-02-07T16:24:45.751+0000:1549527885:2019-02-07T16:24:45.751+0000:Linking the PR.
bwesterfield:1549528051:2019-02-07T16:27:31.126+0000:1549528051:2019-02-07T16:27:31.126+0000:PR Link
acosentino:1549528827:2019-02-07T16:40:27.635+0000:1549528827:2019-02-07T16:40:27.635+0000:Is there something else to do on this?
bwesterfield:1549532606:2019-02-07T17:43:26.252+0000:1549532606:2019-02-07T17:43:26.252+0000:[~ancosen] : No sir.  I think I had a misspelling on the PR, so the bot didn't pick anything up.  This ticket is done.  Sorry for the confusion.  
acosentino:1549532714:2019-02-07T17:45:14.703+0000:1549532714:2019-02-07T17:45:14.703+0000:Thanks a lot for this contribution! :-)"
0,CAMEL-13110,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Claus Ibsen,0,1,2019-01-23 09:40:22+00:00,2019-03-01 13:30:31+00:00,This requires to move the ValidatorProcessor to camel-support.,
0,CAMEL-13109,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Guillaume Nodet,0,1,2019-01-23 09:36:07+00:00,2019-03-01 13:31:16+00:00,"Currently we use something like:




    <camel.osgi.export.service>
      org.apache.camel.spi.ComponentResolver;component=chronicle-engine
    </camel.osgi.export.service>",
0,CAMEL-13108,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 09:35:53+00:00,2019-04-07 07:44:21+00:00,"We should likely put mock, dataset and test components in the same JAR as dataset and test extends mock component. So its easier they are in the same JAR.


Also we already have camel-test for junit testing, so the test component would conflict with camel-test.


So if we call it camel-mock JAR then we have a free name to use.","davsclaus:1548234624:2019-01-23T17:10:24.100+0000:1548234624:2019-01-23T17:10:24.100+0000:Okay there is a bit more work to get some predicate/assertion stuff that mock uses untangled from camel-core.
davsclaus:1548235043:2019-01-23T17:17:23.201+0000:1548235043:2019-01-23T17:17:23.201+0000:Have to think about this for a bit more as the mock endpoints has a nice builder where you setup the expectations, and that builder is also used in the Java DSL.
davsclaus:1548832260:2019-01-30T15:11:00.539+0000:1548832260:2019-01-30T15:11:00.539+0000:Okay I got a bit further and have only the builder stuff left
davsclaus:1554519943:2019-04-06T11:05:43.173+0000:1554558473:2019-04-06T21:47:53.051+0000:Okay lets start with moving dataset out into camel-dataset, and rename test to dataset-test, then they can be in the same component. *DONE*
davsclaus:1554594261:2019-04-07T07:44:21.940+0000:1554594261:2019-04-07T07:44:21.940+0000:We use mock heavily to test camel-core itself. And therefore we cannot easily remove it, as we would need to build camel-core without any tests, and then build camel-mock, and then after that run tests of camel-core. So this is a bit tricky at this point."
0,CAMEL-13107,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 09:27:17+00:00,2019-03-01 13:31:34+00:00,No Desc,
0,CAMEL-13106,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-23 09:26:17+00:00,2019-03-01 13:31:26+00:00,No Desc,
0,CAMEL-13105,Task,Major,None,None,"
None
",Resolved,Fixed,"2.24.0, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-01-23 09:15:20+00:00,2019-01-29 13:40:36+00:00,No Desc,
0,CAMEL-13104,Task,Major,3.0.0,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Claus Ibsen,0,1,2019-01-22 22:46:16+00:00,2019-03-01 13:30:25+00:00,The pom.xml files in camel-seda camel-log etc from the core components has too much garbage which we can remove.,
0,CAMEL-13103,Task,Major,3.0.0,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Claus Ibsen,0,1,2019-01-22 22:41:16+00:00,2019-03-01 13:31:39+00:00,Something about UriParams not found. The CI server have the same problem.,
0,CAMEL-13102,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-22 15:30:35+00:00,2019-03-01 13:31:45+00:00,for dataformat component we need to move MarshalProcessor / UnmarshalProcessor to camel-support first to have it in a public api,"davsclaus:1548143561:2019-01-22T15:52:41.757+0000:1548143561:2019-01-22T15:52:41.757+0000:Ah this requires to move all the stream caching as well. You can argue that a component developer may need to stream via Camel's OutputStreamBuilder
davsclaus:1548144070:2019-01-22T16:01:10.997+0000:1548144070:2019-01-22T16:01:10.997+0000:So I have moved all of converter.stream from camel-core to camel-support - its also in use by a number of camel components such as tarfile, zipfile, crypto and others that does streaming.

We can potentially keep its current package name, or later rename it to use .support in the package name."
0,CAMEL-13101,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-01-22 15:26:03+00:00,2019-03-01 13:31:10+00:00,No Desc,
0,CAMEL-13100,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-01-22 15:25:39+00:00,2019-03-01 13:31:52+00:00,No Desc,
0,CAMEL-13099,Sub-task,Major,None,,"

help-wanted

",Closed,Incomplete,None,Unassigned,Sauvik Nath,0,1,2019-01-22 14:58:08+00:00,2019-01-22 15:02:14+00:00,"This is an issue to gather thoughts and contributions around the design of the website.


Perhaps we can start by having some rough wireframes or mockups and gather some community feedback on them before we go and implement.",
0,CAMEL-13098,Bug,Major,None,"2.22.3, 2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.22.3, 2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-01-22 11:04:48+00:00,2019-01-22 11:17:31+00:00,There are missing exports,
0,CAMEL-13097,Bug,Major,None,"2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Andrea Cosentino,0,1,2019-01-22 10:28:00+00:00,2019-01-22 10:39:25+00:00,There are missing export directives,
0,CAMEL-13096,Bug,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Thomas Diesler,Thomas Diesler,0,1,2019-01-22 08:27:13+00:00,2019-03-01 13:32:13+00:00,"A sequence like this ...




            mockEndpoint.expectedMinimumMessageCount(1);
            mockEndpoint.expectedHeaderReceived(CHANNEL, ""subscriberChannel"");
            mockEndpoint.assertIsSatisfied();




may fail when the number of received messages is > 1


This is because expectedHeaderReceived() implicitly sets the expectedMessageCount to 1, which will take priority over expectedMinimumMessageCount.


Instead, expectedHeaderReceived should implicitly set expectedMinimumMessageCount to 1.",
0,CAMEL-13095,Improvement,Minor,2.23.1,3.11.0,"

help-wanted

",Resolved,Fixed,3.11.0,Unassigned,Tomas Veskrna,0,4,2019-01-22 07:30:20+00:00,2021-05-21 06:21:14+00:00,"In salesforce documentation is one thing that is not completely clear. 


In REST API :


https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/docs/salesforce-component.adoc#rest-api ,


is operation named queryAll. In queryAll definition is mentioned merge operation which is not clear what this is really doing. I have to search on the internet what merge do (The merge operation merges up to three records into one of the records, deletes the others, and reparents any related records).


So it would be great add this definition to salesforce documentation.","davsclaus:1565088946:2019-08-06T18:55:46.289+0000:1565088946:2019-08-06T18:55:46.289+0000:Contributions is welcome to improve the docs
aadyamishra:1583971008:2020-03-12T07:56:48.325+0000:1583971008:2020-03-12T07:56:48.325+0000:[~davsclaus] I am an outreachy applicant. I would like to take up this issue.
gkorosc:1621465633:2021-05-20T07:07:13.739+0000:1621465633:2021-05-20T07:07:13.739+0000:If this is still valid, I can take it up [~davsclaus] [~tveskrna]
davsclaus:1621467392:2021-05-20T07:36:32.600+0000:1621467392:2021-05-20T07:36:32.600+0000:Yes you are surely welcome to improve the salesforce documentation"
0,CAMEL-13094,Bug,Major,3.0.0,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Thomas Diesler,0,2,2019-01-22 07:18:52+00:00,2019-08-01 07:48:48+00:00,"In Camel-2.23.x a failure to start the context would call ServiceSupport.doStop(). This is no longer the case. Instead, a CamelContextStartupFailureEvent is thrown and services that might previously have been started are never stopped.


As a result or (side effect) the context MBean may remain registered if the startup failure occurred after its initial registration.","davsclaus:1548113093:2019-01-22T07:24:53.729+0000:1548113093:2019-01-22T07:24:53.729+0000:I dont recall any startup changes like that. Do you have any reproducable project / unit test etc?
The only change is in camel-blueprint, and I would assume you are not talking about OSGi but eap/widlfly
tdiesler:1548113728:2019-01-22T07:35:28.909+0000:1548114051:2019-01-22T07:40:51.937+0000:{code}
            try {
                doStart();
                started.set(true);
                starting.set(false);
                stopping.set(false);
                stopped.set(false);
                suspending.set(false);
                suspended.set(false);
                shutdown.set(false);
                shuttingdown.set(false);
            } catch (Exception e) {
                try {
                    stop();
                } catch (Exception e2) {
                    // Ignore exceptions as we want to show the original exception
                } finally {
                    // ensure flags get reset to stopped as we failed during starting
                    stopping.set(false);
                    stopped.set(true);
                    starting.set(false);
                    started.set(false);
                    suspending.set(false);
                    suspended.set(false);
                    shutdown.set(false);
                    shuttingdown.set(false);
                }
                throw e;
            } 
{code}

https://github.com/apache/camel/blob/camel-2.23.x/camel-core/src/main/java/org/apache/camel/support/ServiceSupport.java#L83

vs.

{code}
            try {
                status = STARTING;
                log.trace(""Starting service"");
                doStart();
                status = STARTED;
                log.trace(""Service started"");
            } catch (Exception e) {
                status = FAILED;
                log.trace(""Error while starting service"", e);
                throw e;
            }
{code}

https://github.com/apache/camel/blob/master/camel-api/src/main/java/org/apache/camel/support/ServiceSupport.java#L90
davsclaus:1548118094:2019-01-22T08:48:14.077+0000:1548118094:2019-01-22T08:48:14.077+0000:Yeah we should do like the old behaviour and stop on startup failure and throw the original exception
tdiesler:1548119600:2019-01-22T09:13:20.685+0000:1548284774:2019-01-24T07:06:14.092+0000:Here is a plain [SimpleManagementTest|https://github.com/wildfly-extras/wildfly-camel/blob/master/itests/camel/src/test/java/org/wildfly/camel/test/plain/simple/SimpleManagementTest.java] that shows the issue.
davsclaus:1564613181:2019-08-01T06:46:21.936+0000:1564613181:2019-08-01T06:46:21.936+0000:Thanks for the test-case Thomas"
0,CAMEL-13093,Bug,Minor,"2.17.1, 2.21.3, 2.23.1","2.21.5, 2.22.3, 2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.21.5, 2.22.3, 2.23.2, 2.24.0, 3.0.0",Claus Ibsen,chandra shekhar,0,2,2019-01-21 17:35:35+00:00,2019-01-21 19:35:30+00:00,"Unzip the attached reproducer.
Build it using 'mvn clean install'.
Deploy it in Fuse with command 'bundle:install -s mvn:com.mycompany/camel-blueprint-cbr/1.0.0-SNAPSHOT'.
If we execute route-profile command, we find that output is empty or no output.



karaf@root()> route-profile cbr-example-context1 1-route Profile Camel Context: cbr-example-context1 Id Count Last (ms) Delta (ms) Mean (ms) Min (ms) Max (ms) Total (ms) Self (ms) karaf@root()>","chandrashekharpandey:1548064007:2019-01-21T17:46:47.453+0000:1548064007:2019-01-21T17:46:47.453+0000:Working on this
davsclaus:1548070530:2019-01-21T19:35:30.632+0000:1548070530:2019-01-21T19:35:30.632+0000:Thanks for the PR"
0,CAMEL-13092,Bug,Minor,2.23.1,3.10.0,"
None
",Resolved,Fixed,3.10.0,Claus Ibsen,Tim Dudgeon,0,2,2019-01-21 17:23:34+00:00,2021-03-24 06:32:12+00:00,"This has been discussed in the users mailing list [1], but there was no conclusion, and it looks like a bug or quirk so I'm raising this issue to try to get resolution.


The issue is that when writing the response of an HTTP request using a PipedInputStream to the Message body and with the `Content-Encoding: gzip` set as a response header the data does not seem to be sent until the entire stream has been written to the PipedInputStream. This means the client cannot start to read the response until the entire set of data has been written. When that header is not set the data is streamed immediately.


Also, symptomatic of this, when using `Content-Encoding: gzip` the `Content-Length` header gets set, which can only happen after the entire stream has been processed. Without the gzip header the 'Transfer-Encoding: chunked' header gets set and there is no Content-Length as you might expect. I would have expected this to happen even if the `Content-Encoding: gzip` header is set.


Is this a bug, or am I missing some magical way to ensure that the response is streamed when it is being gzipped?


 


[1]http://mail-archives.apache.org/mod_mbox/camel-users/201901.mbox/%3C9cc4adf0-91f2-a111-edce-e7a18fde9fdf%40gmail.com%3E","davsclaus:1565088907:2019-08-06T18:55:07.193+0000:1565088907:2019-08-06T18:55:07.193+0000:Are you able to build a reproducer as either a sample project, or some unit test?
davsclaus:1616493242:2021-03-23T17:54:02.952+0000:1616493242:2021-03-23T17:54:02.952+0000:Have build an use case for plain text (not gzipped)
davsclaus:1616494121:2021-03-23T18:08:41.351+0000:1616494121:2021-03-23T18:08:41.351+0000:When in gzip mode then it seems its currently hardcoded to be non chunked in the doWriteGZIPResponse method

            if (LOG.isDebugEnabled()) {
                LOG.debug(""Streaming response as GZIP in non-chunked mode with content-length {} and buffer size: {}"", data.length, response.getBufferSize());
            }
"
0,CAMEL-13091,Task,Major,None,3.x,"

help-wanted

",Resolved,Duplicate,3.x,Unassigned,Claus Ibsen,0,4,2019-01-21 16:04:06+00:00,2020-07-01 19:46:19+00:00,"Some of the camel components do not have component level docs for all their options, which are generated into the spring boot metadata.


You can see this with the build WARNs when building all the starter JARs.","swidersk7:1566303071:2019-08-20T20:11:11.462+0000:1566303071:2019-08-20T20:11:11.462+0000:Hi, is there any tool to generate adoc tables based on spring-configuration-metadata.json files? It would mke this task even easier.
bedla:1566308050:2019-08-20T21:34:10.753+0000:1566308050:2019-08-20T21:34:10.753+0000:[~swidersk7] What tool do you mean? The adoc files are already generated and there is no need to update them manually.

*This task is about:*
 # Find all component docs warning `
 {{[WARNING] Option aaa.bbb.ccc.d has no description}}
 during build - eg here: [https://builds.apache.org/job/Camel/job/master/1483/consoleFull]
# For every warning find relevant code with {{Metadata}} annotation and add {{description}} attribute into this annotation.
# Do full build - documentation will be updated automatically
swidersk7:1566349300:2019-08-21T09:01:40.394+0000:1566349300:2019-08-21T09:01:40.394+0000:Ok, but what should be done in case of warnings such as:
{code:java}
[WARNING] Cannot find markers in file /home/jenkins/jenkins-slave/workspace/Camel_master-CIGY56HHEDNGVJBWJRRHBZ64GKNJTCSYDKOPJS46W5IZTMAS3I2Q/platforms/spring-boot/components-starter/camel-hl7-starter/../../../../components/camel-hl7/src/main/docs/hl7terser-language.adoc
[WARNING] Add the following markers
[WARNING] 	// spring-boot-auto-configure options: START
[WARNING] 	// spring-boot-auto-configure options: END
{code}
davsclaus:1566390073:2019-08-21T20:21:13.412+0000:1566390073:2019-08-21T20:21:13.412+0000:In the file hl7terser-language.adoc you add those 2 commented lines, and then regen the build, and it will include the spring boot docs in between those 2 lines. Take a look at one of the other adoc files to see how a working file looks like
swidersk7:1566739825:2019-08-25T21:30:25.304+0000:1566739825:2019-08-25T21:30:25.304+0000:I filled the missing 
{code:java}
// spring-boot-auto-configure options
{code}
tags in the following modules docs where the warning occurred:
 * camel-bean-starter
 * camel-hl7-starter
 * camel-mock-starter
 * camel-xpath

Spring Boot options sections were successfully generated.

I found that there are properties descriptions missing for:
 * camel-corda-starter
 * camel-google-bigquery-starter
 * camel-google-pubsub-starter
 * camel-jooq-starter
 * camel-zookeeper-starter

Where can I find those descriptions?

 
davsclaus:1567208280:2019-08-31T07:38:00.258+0000:1567208280:2019-08-31T07:38:00.258+0000:Can you create a PR for the ones you have fixed so far. Then we can take a look at the remainder afterwards
swidersk7:1567234809:2019-08-31T15:00:09.430+0000:1567234809:2019-08-31T15:00:09.430+0000:Done

[https://github.com/apache/camel/pull/3132]
coelhro:1593595014:2020-07-01T17:16:54.405+0000:1593595014:2020-07-01T17:16:54.405+0000:Hello,
Where can we find the descriptions for the camel-zookeeper?

 

 
davsclaus:1593603765:2020-07-01T19:42:45.974+0000:1593603765:2020-07-01T19:42:45.974+0000:Its in the source code typically in the javadocs in the camel components that the starters use to generate its documentation from.
davsclaus:1593603792:2020-07-01T19:43:12.307+0000:1593603792:2020-07-01T19:43:12.307+0000:There is another up to date JIRA about this, so we can find that ticket and close this as a duplicate
davsclaus:1593603979:2020-07-01T19:46:19.266+0000:1593603979:2020-07-01T19:46:19.266+0000:See ticket CAMEL-14565"
0,CAMEL-13090,Improvement,Major,None,None,"
None
",Resolved,Fixed,"4.0-M1, 4.0.0",Unassigned,Claus Ibsen,0,2,2019-01-21 15:02:09+00:00,2023-02-14 08:11:59+00:00,"Lets see if we can upgrade to servlet api 4. Currently we are on 3.
We would need to wait for OSGi to get working on master branch and then see if karaf/osgi can work with servlet api 4.


Spring Boot 2 is supporting servlet api 4.","davsclaus:1553821874:2019-03-29T09:11:14.771+0000:1553821874:2019-03-29T09:11:14.771+0000:Is there more work on this? Or do we need to wait for a new Karaf version etc?
acosentino:1553822808:2019-03-29T09:26:48.096+0000:1553822808:2019-03-29T09:26:48.096+0000:I think we still need to check everywhere.
davsclaus:1572816769:2019-11-04T05:32:49.015+0000:1572816769:2019-11-04T05:32:49.015+0000:Can we try to upgrade to servlet 4.0 api ?"
0,CAMEL-13089,Bug,Major,2.19.0,,"
None
",Closed,Workaround,None,Unassigned,Andreas Klemp,0,4,2019-01-21 07:29:24+00:00,2020-01-06 15:33:02+00:00,"Already reported this in https://issues.jboss.org/browse/THORN-2314 but they claim to not support Camel in Thorntail.


As soon as I try to add Camel to my Thorntail 2.1.0.Final service via camel-rabbitmq the service is not starting anymore. There are no useful hints, documentation or help on the internet that I found.



ERROR [org.jboss.msc.service.fail] (MSC service thread 1-8) MSC000001: Failed to start service jboss.deployment.unit.""my-service-2.1-SNAPSHOT.war"".WeldStartService: org.jboss.msc.service.StartException in service jboss.deployment.unit.""my-service-2.1-SNAPSHOT.war"".WeldStartService: Failed to start service
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1978)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.jboss.weld.exceptions.DeploymentException: org.apache.commons.pool
        at org.jboss.weld.executor.AbstractExecutorServices.checkForExceptions(AbstractExecutorServices.java:66)
        at org.jboss.weld.executor.AbstractExecutorServices.invokeAllAndCheckForExceptions(AbstractExecutorServices.java:43)
        at org.jboss.weld.executor.AbstractExecutorServices.invokeAllAndCheckForExceptions(AbstractExecutorServices.java:51)
        at org.jboss.weld.bootstrap.ConcurrentBeanDeployer.addClasses(ConcurrentBeanDeployer.java:58)
        at org.jboss.weld.bootstrap.BeanDeployment.createClasses(BeanDeployment.java:224)
        at org.jboss.weld.bootstrap.WeldStartup.startInitialization(WeldStartup.java:398)
        at org.jboss.weld.bootstrap.WeldBootstrap.startInitialization(WeldBootstrap.java:76)
        at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:94)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:2032)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1955)
        ... 3 more
Caused by: org.jboss.modules.ModuleLoadError: org.apache.commons.pool
        at org.jboss.modules.ModuleLoadException.toError(ModuleLoadException.java:74)
        at org.jboss.modules.Module.getPathsUnchecked(Module.java:1560)
        at org.jboss.modules.Module.loadModuleClass(Module.java:709)
        at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:412)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:400)
        at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:116)
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
        at org.jboss.modules.ModuleClassLoader.doDefineOrLoadClass(ModuleClassLoader.java:358)
        at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:437)
        at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:274)
        at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:77)
        at org.jboss.modules.Module.loadModuleClass(Module.java:714)
        at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:412)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:400)
        at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:116)
        at java.lang.Class.getDeclaredConstructors0(Native Method)
        at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
        at java.lang.Class.getDeclaredConstructors(Class.java:2020)
        at org.jboss.weld.annotated.slim.backed.SecurityActions.getDeclaredConstructors(SecurityActions.java:57)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType$BackedAnnotatedConstructors.computeValue(BackedAnnotatedType.java:164)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType$BackedAnnotatedConstructors.computeValue(BackedAnnotatedType.java:161)
        at org.jboss.weld.util.LazyValueHolder.get(LazyValueHolder.java:49)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType$EagerlyInitializedLazyValueHolder.<init>(BackedAnnotatedType.java:157)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType$BackedAnnotatedConstructors.<init>(BackedAnnotatedType.java:161)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType$BackedAnnotatedConstructors.<init>(BackedAnnotatedType.java:161)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType.<init>(BackedAnnotatedType.java:62)
        at org.jboss.weld.annotated.slim.backed.BackedAnnotatedType.of(BackedAnnotatedType.java:46)
        at org.jboss.weld.resources.ClassTransformer$TransformClassToBackedAnnotatedType.apply(ClassTransformer.java:80)
        at org.jboss.weld.resources.ClassTransformer$TransformClassToBackedAnnotatedType.apply(ClassTransformer.java:77)
        at org.jboss.weld.util.cache.ReentrantMapBackedComputingCache$1.apply(ReentrantMapBackedComputingCache.java:55)
        at org.jboss.weld.util.cache.ReentrantMapBackedComputingCache$1.apply(ReentrantMapBackedComputingCache.java:51)
        at org.jboss.weld.util.cache.ReentrantMapBackedComputingCache.getValue(ReentrantMapBackedComputingCache.java:64)
        at org.jboss.weld.util.cache.ReentrantMapBackedComputingCache.getCastValue(ReentrantMapBackedComputingCache.java:80)
        at org.jboss.weld.resources.ClassTransformer.getBackedAnnotatedType(ClassTransformer.java:175)
        at org.jboss.weld.resources.ClassTransformer.getBackedAnnotatedType(ClassTransformer.java:192)
        at org.jboss.weld.bootstrap.FastAnnotatedTypeLoader.loadAnnotatedType(FastAnnotatedTypeLoader.java:121)
        at org.jboss.weld.bootstrap.FastAnnotatedTypeLoader.createContext(FastAnnotatedTypeLoader.java:110)
        at org.jboss.weld.bootstrap.FastAnnotatedTypeLoader.loadAnnotatedType(FastAnnotatedTypeLoader.java:89)
        at org.jboss.weld.bootstrap.BeanDeployer.addClass(BeanDeployer.java:94)
        at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$1.doWork(ConcurrentBeanDeployer.java:61)
        at org.jboss.weld.bootstrap.ConcurrentBeanDeployer$1.doWork(ConcurrentBeanDeployer.java:58)
        at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)
        at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
        at org.jboss.threads.JBossThread.run(JBossThread.java:320)




Simply adding org.apache.commons:commons-pool2:2.6.0 doesn't help.","dmvolod:1548033456:2019-01-21T09:17:36.665+0000:1548033456:2019-01-21T09:17:36.665+0000:I'm not sure that Camel will work OOB in Thorntail, but would recommend to look at [http://wildfly-extras.github.io/wildfly-camel|http://wildfly-extras.github.io/wildfly-camel/]

[~tdiesler], [~jamesnetherton] what do you think about this?
jamesnetherton:1548046187:2019-01-21T12:49:47.570+0000:1548046187:2019-01-21T12:49:47.570+0000:There was effort made some time back to make sure the wildfly-camel subsytem would work nicely on Thorntail (WildFly Swarm as it was then). But the Thorntail team are no longer maintaining this in their latest releases.

If you're not doing so already, try adding the io.thorntail camel component dependencies to your project, as they should be optimised to work better on Thorntail. E.g:

{code}
<dependency>
  <groupId>io.thorntail</groupId>
  <artifactId>camel-rabbitmq</artifactId>
</dependency>
{code}

Otherwise you could try adding a maven exclusion to camel-rabbitmq for commons-pool. 
aklemp:1548124498:2019-01-22T10:34:58.848+0000:1548124498:2019-01-22T10:34:58.848+0000:I was already using the fraction camel-rabbitmq. Unfortunately, it doesn't bring a dependency to commons-pool which I could exclude. Adding the newest commons-pool dependency 2.6.0 which is a few months older than the Thorntail fraction doesn't help either.
jamesnetherton:1548128989:2019-01-22T11:49:49.794+0000:1548128989:2019-01-22T11:49:49.794+0000:Maybe try adding:
{code:java}
    <dependency>
      <groupId>commons-pool</groupId>
      <artifactId>commons-pool</artifactId>
      <version>1.6</version>
    </dependency>
{code}
That's the version most appropriate for camel-rabbitmq 2.19.0 which is what is provided by Thorntail 2.1.0.Final.

By the way, I can't replicate your issue. Having the following in my pom.xml works ok for me. The app starts without any issues (although I did not add any Camel routes):
{code:java}
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.thorntail</groupId>
        <artifactId>bom</artifactId>
        <version>2.1.0.Final</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>undertow</artifactId>
    </dependency>
    <dependency>
      <groupId>io.thorntail</groupId>
      <artifactId>camel-rabbitmq</artifactId>
    </dependency>
  </dependencies>
{code}
aklemp:1548139264:2019-01-22T14:41:04.701+0000:1548139264:2019-01-22T14:41:04.701+0000:Thank you for your input. I started this again trying to reproduce with a minimal example. Writing a bit more details here for the next poor guy with these problems.

First I found out that I had a dependency to com.zanox.lib.rabbiteasy:rabbiteasy-cdi. This was used to connect to RabbitMQ which I want to solve using Camel. Now I removed that and fixed all resulting compile errors to continue testing with Camel.

Then Thorntail was starting. Yeah. But nothing happened. Using camel-rabbitmq and camel-cdi from org.apache.camel worked. Using the io.thorntail fractions did nothing. Digging around a bit, I added @ContextName(""cdi-context"") to my RouteBuilder.

Now something happens again. Yeah. But I got a new problem. Camel claims that I have two consumers for the same endpoint.

I split the RouteBuilder and Consumer into two classes and my minimal example worked.

But only because I used a timer as exchange producer. Switching to the RabbitMQ producer gave the same problem with org.apache.commons.pool.

{noformat}
2019-01-22 15:12:24,627 ERROR [org.jboss.msc.service.fail] (MSC service thread 1-5) MSC000001: Failed to start service jboss.deployment.unit.""foo-0.0.1-SNAPSHOT.war"".WeldStartService: org.jboss.msc.service.StartException in service jboss.deployment.unit.""foo-0.0.1-SNAPSHOT.war"".WeldStartService: Failed to start service
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1978)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.jboss.weld.exceptions.DeploymentException: Exception List with 1 exceptions:
Exception 0 :
javax.enterprise.event.ObserverException
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
        at java.lang.Class.newInstance(Class.java:442)
        at org.jboss.weld.security.NewInstanceAction.run(NewInstanceAction.java:33)
        at java.security.AccessController.doPrivileged(Native Method)
        at org.jboss.weld.injection.Exceptions.rethrowException(Exceptions.java:40)
        at org.jboss.weld.injection.Exceptions.rethrowException(Exceptions.java:78)
        at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:96)
        at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:144)
        at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:299)
        at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:124)
        at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:277)
        at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:255)
        at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:269)
        at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:258)
        at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:154)
        at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:148)
        at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)
        at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)
        at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)
        at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:482)
        at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:90)
        at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:96)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:2032)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1955)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: org.jboss.modules.ModuleLoadError: org.apache.commons.pool
        at org.jboss.modules.ModuleLoadException.toError(ModuleLoadException.java:74)
        at org.jboss.modules.Module.getPathsUnchecked(Module.java:1560)
        at org.jboss.modules.Module.loadModuleClass(Module.java:709)
        at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:412)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:400)
        at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:116)
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:763)
        at org.jboss.modules.ModuleClassLoader.doDefineOrLoadClass(ModuleClassLoader.java:358)
        at org.jboss.modules.ModuleClassLoader.defineClass(ModuleClassLoader.java:437)
        at org.jboss.modules.ModuleClassLoader.loadClassLocal(ModuleClassLoader.java:274)
        at org.jboss.modules.ModuleClassLoader$1.loadClassLocal(ModuleClassLoader.java:77)
        at org.jboss.modules.Module.loadModuleClass(Module.java:714)
        at org.jboss.modules.ModuleClassLoader.findClass(ModuleClassLoader.java:190)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClassUnchecked(ConcurrentClassLoader.java:412)
        at org.jboss.modules.ConcurrentClassLoader.performLoadClass(ConcurrentClassLoader.java:400)
        at org.jboss.modules.ConcurrentClassLoader.loadClass(ConcurrentClassLoader.java:116)
        at org.wildfly.extension.camel.handler.WildFlyClassResolver.loadClass(WildFlyClassResolver.java:71)
        at org.apache.camel.impl.DefaultClassResolver.resolveClass(DefaultClassResolver.java:52)
        at org.apache.camel.impl.DefaultFactoryFinder.newInstance(DefaultFactoryFinder.java:128)
        at org.apache.camel.impl.DefaultFactoryFinder.lambda$findClass$0(DefaultFactoryFinder.java:82)
        at org.apache.camel.impl.DefaultFactoryFinder.lambda$addToClassMap$1(DefaultFactoryFinder.java:165)
        at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
        at org.apache.camel.impl.DefaultFactoryFinder.addToClassMap(DefaultFactoryFinder.java:163)
        at org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:82)
        at org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:74)
        at org.apache.camel.impl.DefaultComponentResolver.findComponent(DefaultComponentResolver.java:83)
        at org.apache.camel.impl.DefaultComponentResolver.resolveComponent(DefaultComponentResolver.java:56)
        at org.wildfly.extension.camel.handler.ComponentResolverAssociationHandler$WildFlyComponentResolver.resolveComponent(ComponentResolverAssociationHandler.java:72)
        at org.apache.camel.impl.DefaultCamelContext.initComponent(DefaultCamelContext.java:453)
        at org.apache.camel.impl.DefaultCamelContext.lambda$getComponent$0(DefaultCamelContext.java:440)
        at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660)
        at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:440)
        at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:431)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:621)
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:80)
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:219)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:118)
        at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:69)
        at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:94)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1278)
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:204)
        at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:1041)
        at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:3497)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3228)
        at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:201)
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3046)
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3042)
        at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3065)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3042)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2980)
        at org.apache.camel.impl.DefaultCamelContext$Proxy$_$$_WeldClientProxy.start(Unknown Source)
        at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:425)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:88)
        ... 20 more

        at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:37)
        at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)
        at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:482)
        at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:90)
        at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:96)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:2032)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1955)
        ... 3 more
{noformat}

Adding commons-pool:1.6 didn't help.

Tried again with the org.apache dependencies instead of io.thorntail and it worked. But only in the newer 2.23.0 version. Using 2.19.0 gave me just another problem.

{noformat}
2019-01-22 15:18:42,362 WARN  [org.apache.camel.component.rabbitmq.RabbitConsumer] (MSC service thread 1-3) Unable to open channel for RabbitMQConsumer. Continuing and will try again: java.io.IOException
        at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:116)
        at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:112)
        at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:134)
        at com.rabbitmq.client.impl.ChannelN.exchangeDeclare(ChannelN.java:763)
        at com.rabbitmq.client.impl.recovery.AutorecoveringChannel.exchangeDeclare(AutorecoveringChannel.java:237)
        at com.rabbitmq.client.impl.recovery.AutorecoveringChannel.exchangeDeclare(AutorecoveringChannel.java:227)
        at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareExchange(RabbitMQDeclareSupport.java:103)
        at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangeWithQueue(RabbitMQDeclareSupport.java:49)
        at org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangesAndQueuesUsing(RabbitMQDeclareSupport.java:36)
        at org.apache.camel.component.rabbitmq.RabbitMQEndpoint.declareExchangeAndQueue(RabbitMQEndpoint.java:249)
        at org.apache.camel.component.rabbitmq.RabbitConsumer.openChannel(RabbitConsumer.java:318)
        at org.apache.camel.component.rabbitmq.RabbitConsumer.<init>(RabbitConsumer.java:56)
        at org.apache.camel.component.rabbitmq.RabbitMQConsumer.createConsumer(RabbitMQConsumer.java:108)
        at org.apache.camel.component.rabbitmq.RabbitMQConsumer.startConsumers(RabbitMQConsumer.java:90)
        at org.apache.camel.component.rabbitmq.RabbitMQConsumer.doStart(RabbitMQConsumer.java:159)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3471)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3788)
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3724)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3644)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3408)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3262)
        at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:201)
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3046)
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:3042)
        at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:3065)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:3042)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2980)
        at org.apache.camel.impl.DefaultCamelContext$Proxy$_$$_WeldClientProxy.start(Unknown Source)
        at org.apache.camel.cdi.CdiCamelExtension.afterDeploymentValidation(CdiCamelExtension.java:425)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:88)
        at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:144)
        at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:299)
        at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:124)
        at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:277)
        at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:255)
        at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:269)
        at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:258)
        at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:154)
        at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:148)
        at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)
        at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)
        at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)
        at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:482)
        at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:90)
        at org.jboss.as.weld.WeldStartService.start(WeldStartService.java:96)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.startService(ServiceControllerImpl.java:2032)
        at org.jboss.msc.service.ServiceControllerImpl$StartTask.run(ServiceControllerImpl.java:1955)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=403, reply-text=ACCESS_REFUSED - operation not permitted on the default exchange, class-id=40, method-id=10)
        at com.rabbitmq.utility.ValueOrException.getValue(ValueOrException.java:66)
        at com.rabbitmq.utility.BlockingValueOrException.uninterruptibleGetValue(BlockingValueOrException.java:36)
        at com.rabbitmq.client.impl.AMQChannel$BlockingRpcContinuation.getReply(AMQChannel.java:398)
        at com.rabbitmq.client.impl.AMQChannel.privateRpc(AMQChannel.java:244)
        at com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:128)
        ... 53 more
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=403, reply-text=ACCESS_REFUSED - operation not permitted on the default exchange, class-id=40, method-id=10)
        at com.rabbitmq.client.impl.ChannelN.asyncShutdown(ChannelN.java:505)
        at com.rabbitmq.client.impl.ChannelN.processAsync(ChannelN.java:336)
        at com.rabbitmq.client.impl.AMQChannel.handleCompleteInboundCommand(AMQChannel.java:154)
        at com.rabbitmq.client.impl.AMQChannel.handleFrame(AMQChannel.java:101)
        at com.rabbitmq.client.impl.AMQConnection.readFrame(AMQConnection.java:641)
        at com.rabbitmq.client.impl.AMQConnection.access$300(AMQConnection.java:47)
        at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:579)
        ... 1 more
{noformat}

That can be resolved by using the old RabbitMQ connection URL syntax that is deprecated in the newer versions. Now it runs with org.apache dependencies in both versions 2.19.0 and 2.23.0.

That leaves the pool-problem when using the factions. I'm a bit lost now. My minimal example is attached. The different variants can be commented out in the pom.xml.

A related question to all of this is what happens to the Thorntail fractions once I have to upgrade to 2.3.0.Final or later which doesn't contain the Camel fractions anymore?
jamesnetherton:1548145721:2019-01-22T16:28:41.857+0000:1548145721:2019-01-22T16:28:41.857+0000:I just attached a working version of your project. The trick was to add a custom WildFly module to fulfil the commons-pool dependency. Not sure why it's not there by default, probably a bug I guess.

As for support for the camel fractions from 2.3.0.Final and beyond. There are no plans at present (that I know of) to revive them as a separate project. You could try using the plain org.apache.camel component dependencies and see how well that works. In theory WAR deployments with this approach should work ok as you'll be running on a flat(ish) classpath. But I can't guarantee everything will 'just work' 100%.
aklemp:1548205403:2019-01-23T09:03:23.978+0000:1548205403:2019-01-23T09:03:23.978+0000:Thanks a lot for your support. We have to discuss in the project whether we go with the plain dependencies because of the unclear future of the fractions. We could contribute to a thorntail-camel repository but there isn't even one at the moment and that would be beyond what is possible for us at the moment.
dmvolod:1548212801:2019-01-23T11:06:41.590+0000:1548212801:2019-01-23T11:06:41.590+0000:[~aklemp] I'm closing this issue with workaround resolution.

[~jamesnetherton] thanks a lot for your help.
sophie1:1578158756:2020-01-05T01:25:56.390+0000:1578158756:2020-01-05T01:25:56.390+0000:So the workaround recommend wildfly-camel ? Do u finally choose it ?  Does it work? [~aklemp] 

Or who knows any other better way to support Camel in Thorntail? Since almost one year passed
aklemp:1578295982:2020-01-06T15:33:02.192+0000:1578295982:2020-01-06T15:33:02.192+0000:We are currently using org.apache.camel:camel-rabbitmq and org.apache.camel:camel-cdi instead."
0,CAMEL-13088,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2019-01-21 05:20:38+00:00,2019-03-01 13:31:57+00:00,"We need to add manually all the camel JARs in the parent/pom and apache-camel poms and the include file as well. 


As we get more and more components and also -starter JARs we should automate this.",
0,CAMEL-13087,Wish,Major,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Peter Keller,0,1,2019-01-20 15:39:04+00:00,2022-09-02 11:22:45+00:00,"Add more obvious exception handling for multicast.


E.g. see



https://stackoverflow.com/questions/35896325/camel-multicast-exception-propagation
https://stackoverflow.com/questions/51156635/apache-camel-how-to-catch-exception-with-multicast
https://stackoverflow.com/questions/40281605/camel-isnt-propagating-exceptions-when-they-are-thrown-inside-of-a-multicast-wh
https://stackoverflow.com/questions/7317776/apache-camel-multicast-exception-and-aggregation-strategy",
0,CAMEL-13086,Wish,Major,None,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Peter Keller,1,6,2019-01-20 15:34:03+00:00,2019-12-27 12:02:27+00:00,"Java DSL: Rename endChoice to endWhen as endChoice actually ends a when condition.


I am aware that this will break current routes. Nevertheless I wanted to bring this issue to discussion as endChoice isn't obvious for beginners that learn the framework.","acosentino:1547969947:2019-01-20T15:39:07.301+0000:1547969947:2019-01-20T15:39:07.301+0000:There is choice() in the Java DSL
Peter Keller:1547970438:2019-01-20T15:47:18.287+0000:1547970438:2019-01-20T15:47:18.287+0000:Yes, you are right. But {{choice}} is ended by {{end}}, and {{when}} by {{endChoice}}. My suggestion is to end {{choice}} by {{endChoice}} and {{when}} by {{endWhen}}.
davsclaus:1548055259:2019-01-21T15:20:59.597+0000:1548055259:2019-01-21T15:20:59.597+0000:The rule of thumb for these endXXX is to think them as end current block and go back to XXX.
So endChoice is to go back to choice, not ending choice.

Peter Keller:1548156704:2019-01-22T19:31:44.422+0000:1548158752:2019-01-22T20:05:52.165+0000:The actual behaviour is not obvious as in other programming languages a different behaviour is found, see [Wikipedia|https://en.wikipedia.org/wiki/Comparison_of_programming_languages_(syntax)]:
 * Ada, Visual Basic, Seed7: {{if}} ... {{end If}}
 * Bash, sh, ksh: {{if}} ... {{fi}}, {{case}} ... {{esac}}
 * ALGOL 68: {{if}} ... {{fi}}, {{do}} ... {{od}}
 * COBOL: {{IF}} ... {{ENDIF}}, {{PERFORM}} ... {{END-PERFORM}}
 * Visual Basic .Net: {{If}} ... {{End If}}
 * Small Basic: {{If}} ... {{Endif}}, {{For}} ... {{EndFor}}, {{While}} ... {{EndWhile}}
nonprofitgibi:1548403718:2019-01-25T16:08:38.205+0000:1548403718:2019-01-25T16:08:38.205+0000:This was a cause of a bug in a pr I reviewed and spent an excessive amount of time testing and reading documentation to determine the cause of the issue. I understand the choice made but it is not at all obvious when using it. It's a similar issue as timestamp is MSSQL you miss use it once and then you learn but it takes a really annoying bug and amount of time to realize that you're using something wrong because the name is miss leading.
dariusx:1550851349:2019-02-23T00:02:29.446+0000:1550851435:2019-02-23T00:03:55.519+0000:If this Jira goes forward, please don't implement it in a way that will break existing routes. It worries me that this is marked as slated for 3.0.0
Even though the current terms are confusing, there is too much Camel legacy usage around to consider changing the semantics. 
Peter Keller:1551000285:2019-02-24T17:24:45.179+0000:1551000285:2019-02-24T17:24:45.179+0000:When migrating to 3.0.0, you won't do it without migration the old setup anyway, see https://github.com/apache/camel/blob/master/MIGRATION.md
davsclaus:1551043117:2019-02-25T05:18:37.720+0000:1551043117:2019-02-25T05:18:37.720+0000:Yes we will not break backwards compatibility in any big way, and this ticket is only here for discussing what may or may not be done. For example to add better documentation, javadoc, etc to endChoice. And maybe add new methods that are named better.
drekbour:1554604884:2019-04-07T10:41:24.078+0000:1554604884:2019-04-07T10:41:24.078+0000:> choice is ended by end, and when by endChoice
As a long-time user, this _still_ makes me pause every time to make sure I'm not doing it wrong or second-guessing myself. 
Is it possible to make all {{end*()}} aliases? The blocks they terminate are strictly hierarchical after all so {{end*()}} always means ""end the current block"", right? If so, code has the opportunity to validate typed {{end*()}} DSL accommodating (with deprecation warning) the existing use of {{endChoice()}} to mean {{endWhen()}}.
dariusx:1554608992:2019-04-07T11:49:52.679+0000:1554608992:2019-04-07T11:49:52.679+0000:[~drekbour] is your suggestion to:
 * Add endWhen() as a synonym to today's endChoice()
 * Allowing users to switch to the new term
 * While, allowing existing programs to continue working
Peter Keller:1577419347:2019-12-27T12:02:27.081+0000:1577419347:2019-12-27T12:02:27.081+0000:In order not to break existing routes, an alternative {{RouteBuilder}} could be introduced with the apdapted DSL, see also CAMEL-13085."
0,CAMEL-13085,Wish,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Peter Keller,1,1,2019-01-20 15:27:50+00:00,2022-09-02 11:22:34+00:00,"For non-trivial complex routes it isn't obvious where structurel elements such as split, multicast or exception are ending. This is even true for non-novice user of the framework.


Suggestion: Add explicit endings such as endSplit, endMulticast, endException to the Java DSL. These ending may be optional so that no migration is needed from Camel 2 to Camel 3.","Peter Keller:1577419310:2019-12-27T12:01:50.568+0000:1577419310:2019-12-27T12:01:50.568+0000:In order not to break existing routes, an alternative {{RouteBuilder}} could be introduced with the apdapted DSL."
0,CAMEL-13084,Bug,Major,"2.23.0, 2.23.1, 3.0.0","2.23.2, 2.24.0, 3.0.0","
None
",Resolved,Fixed,"2.23.2, 2.24.0, 3.0.0",Andrea Cosentino,Peter Palaga,0,5,2019-01-19 16:14:35+00:00,2019-02-01 06:27:31+00:00,"Steps to reproduce:




git checkout -b camel-2.x upstream/camel-2.x
git show --summary
# commit fb5278ea2860e05b833f8e32d4ec6c2dfcc73c94 (HEAD -> camel-2.x, upstream/camel-2.x)
# Author: Claus Ibsen <claus.ibsen@gmail.com>
# Date:   Sat Jan 19 09:57:17 2019 +0100
# 
#     Add missing docs for EIPs
# 
cd examples/camel-example-spring-boot
mvn clean package

java -jar target/camel-example-spring-boot-*.jar 
# Expected: no error
# Actual:
# [...]
# Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2019-01-19 17:09:16.253 ERROR 21732 --- [           main] o.s.boot.SpringApplication               : Application run failed

org.springframework.context.ApplicationContextException: Unable to start web server; nested exception is java.lang.NoClassDefFoundError: javax/servlet/http/MappingMatch
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:157) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:540) ~[spring-context-5.1.4.RELEASE.jar!/:5.1.4.RELEASE]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at sample.camel.MyCamelApplication.main(MyCamelApplication.java:33) [classes!/:2.24.0-SNAPSHOT]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_191]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_191]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_191]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_191]
        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
Caused by: java.lang.NoClassDefFoundError: javax/servlet/http/MappingMatch
        at io.undertow.servlet.handlers.ServletPathMatches.resolveServletForPath(ServletPathMatches.java:445) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.handlers.ServletPathMatches.setupServletChains(ServletPathMatches.java:280) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.handlers.ServletPathMatches.getData(ServletPathMatches.java:145) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.handlers.ServletPathMatches.initData(ServletPathMatches.java:76) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at io.undertow.servlet.core.DeploymentManagerImpl.deploy(DeploymentManagerImpl.java:256) ~[undertow-servlet-2.0.16.Final.jar!/:2.0.16.Final]
        at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.createDeploymentManager(UndertowServletWebServerFactory.java:284) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory.getWebServer(UndertowServletWebServerFactory.java:208) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154) ~[spring-boot-2.1.1.RELEASE.jar!/:2.1.1.RELEASE]
        ... 16 common frames omitted
Caused by: java.lang.ClassNotFoundException: javax.servlet.http.MappingMatch
        at java.net.URLClassLoader.findClass(URLClassLoader.java:382) ~[na:1.8.0_191]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_191]
        at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:93) ~[camel-example-spring-boot-2.24.0-SNAPSHOT.jar:2.24.0-SNAPSHOT]
        at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_191]
        ... 25 common frames omitted","ppalaga:1547885768:2019-01-19T16:16:08.912+0000:1547885768:2019-01-19T16:16:08.912+0000:Reproducible with Camel 2.23.0 and 2.23.1. Works with 2.22.2
davsclaus:1548031334:2019-01-21T08:42:14.108+0000:1548031334:2019-01-21T08:42:14.108+0000:Its the spring-boot-starter-undertow that seems to not work, it doesnt include the needed servlet apis
acosentino:1548031545:2019-01-21T08:45:45.097+0000:1548031545:2019-01-21T08:45:45.097+0000:I added explicitly the dependency for the moment, we have a similar situation for camel-example-rest-producer.
davsclaus:1548031933:2019-01-21T08:52:13.436+0000:1548031933:2019-01-21T08:52:13.436+0000:Ah okay it was a Camel BOM that pulls in servlet api 3, and spring boot requires api 4.

Adding the servlet-api 4 makes it work, its the same problem with all the undertow-starter examples

{code}
 git grep ""starter-undertow""
camel-example-fhir-auth-tx-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-fhir-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-rabbitmq/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-rest-producer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-clustered-route-controller/cluster-node/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-health-checks/application/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-health-checks/service/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-master/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-rest-swagger/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-servicecall/consumer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-supervising-route-controller/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot-xml/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-servicecall/consumer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-servicecall/service/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-serviceregistry/consumer/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-spring-cloud-serviceregistry/service/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-twitter-salesforce/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
camel-example-validator-spring-boot/pom.xml:      <artifactId>spring-boot-starter-undertow</artifactId>
{code}
acosentino:1548034015:2019-01-21T09:26:55.302+0000:1548034015:2019-01-21T09:26:55.302+0000:This one is fixed, I'll add the dependency also to the other examples.
acosentino:1548049627:2019-01-21T13:47:07.253+0000:1548049627:2019-01-21T13:47:07.253+0000:I fixed the rest and found some bugs on the spring-cloud examples. Fixed them too.
dmvolod:1548049754:2019-01-21T13:49:14.657+0000:1548050117:2019-01-21T13:55:17.224+0000:[~ancosen], how is idea about to keep javax.servlet-api version in one place to minimize care on change it?
acosentino:1548049921:2019-01-21T13:52:01.447+0000:1548049921:2019-01-21T13:52:01.447+0000:Yeah, this is the main idea, but the problem we currently have is related to the servlet version we have in Parent POM, we could align to 4.0.1, but we won't be sure to have the OSGi support working fine. Once we get the back a working OSGi support we can align everything in one single place. This is just a temporary workaround.
dmvolod:1548050238:2019-01-21T13:57:18.732+0000:1548050238:2019-01-21T13:57:18.732+0000:Yes, understood, but we can temporary keep this version in examples root pom.xml to remember where we've changed it.
acosentino:1548050342:2019-01-21T13:59:02.689+0000:1548050342:2019-01-21T13:59:02.689+0000:Oh, my bad, you're right, copy-pasted with the explicit dependency :(

I'm fixing that!
acosentino:1548051336:2019-01-21T14:15:36.485+0000:1548051336:2019-01-21T14:15:36.485+0000:Done, thanks for spotting this [~dmvolod]
njiang:1548966766:2019-02-01T04:32:46.470+0000:1548966766:2019-02-01T04:32:46.470+0000:[~ancosen] I happened to hit this issue and found you add lots of dependency across the examples , we can just specify servlet API 
 in the dependency manager of example pom.xml to override the setting of camel-parent.   As servlet API is backward compatible, the other example should be fine to use servlet-api 4.x.  
I just committed a quick fix for it and merged the patch into camel-2.23.x branch.
acosentino:1548973117:2019-02-01T06:18:37.991+0000:1548973117:2019-02-01T06:18:37.991+0000:Totally right, thanks [~njiang]
acosentino:1548973651:2019-02-01T06:27:31.142+0000:1548973651:2019-02-01T06:27:31.142+0000:I backported to camel-2.x too."
0,CAMEL-13083,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Darius Cooper,0,3,2019-01-19 11:33:30+00:00,2019-08-06 18:53:02+00:00,"Guava up to ver 24.1 has a denial of service vulnerability.


Upgrade the camel-swagger dependency on Guava to a newer version.


Would be nice if this could go in the 2.23.x version and above","acosentino:1547870891:2019-01-19T12:08:11.264+0000:1547870891:2019-01-19T12:08:11.264+0000:I think it won't work in OSGi
dariusx:1547872561:2019-01-19T12:36:01.317+0000:1547872561:2019-01-19T12:36:01.317+0000:Oh. I guess I need to withdraw the PR I just created. Thanks.
davsclaus:1565076046:2019-08-06T15:20:46.297+0000:1565076046:2019-08-06T15:20:46.297+0000:What's the status for camel 3 I wonder
acosentino:1565076112:2019-08-06T15:21:52.140+0000:1565076112:2019-08-06T15:21:52.140+0000:Using newer version will break all the OSGi stuff.
davsclaus:1565076471:2019-08-06T15:27:51.047+0000:1565076471:2019-08-06T15:27:51.047+0000:Okay so swagger OSGi is locked to a single version (darn you OSGi ...)

[WARNING] Feature resolution failed for [camel-rest-swagger/3.0.0.SNAPSHOT]
Message: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-rest-swagger; type=karaf.feature; version=3.0.0.SNAPSHOT; filter:=""(&(osgi.identity=camel-rest-swagger)(type=karaf.feature)(version>=3.0.0.SNAPSHOT))"" [caused by: Unable to resolve camel-rest-swagger/3.0.0.SNAPSHOT: missing requirement [camel-rest-swagger/3.0.0.SNAPSHOT] osgi.identity; osgi.identity=org.apache.camel.camel-rest-swagger; type=osgi.bundle; version=""[3.0.0.SNAPSHOT,3.0.0.SNAPSHOT]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-rest-swagger/3.0.0.SNAPSHOT: missing requirement [org.apache.camel.camel-rest-swagger/3.0.0.SNAPSHOT] osgi.wiring.package; filter:=""(&(osgi.wiring.package=io.swagger.util)(version>=1.5.0)(!(version>=2.0.0)))"" [caused by: Unable to resolve io.swagger.core/1.5.21: missing requirement [io.swagger.core/1.5.21] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.google.common.collect)(version>=20.0.0)(!(version>=21.0.0)))""]]]
Repositories: {
davsclaus:1565076682:2019-08-06T15:31:22.501+0000:1565076682:2019-08-06T15:31:22.501+0000:Trying with swagger 1.5.22
davsclaus:1565088782:2019-08-06T18:53:02.152+0000:1565088782:2019-08-06T18:53:02.152+0000:Okay so the newer version works with guava 27"
