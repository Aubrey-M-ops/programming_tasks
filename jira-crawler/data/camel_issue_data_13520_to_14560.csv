,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-6798,Bug,Major,"2.12.0, 2.12.1",,"
None
",Resolved,Duplicate,None,Claus Ibsen,Alessandro Baldoni,0,2,2013-09-29 09:41:40+00:00,2013-09-29 10:00:51+00:00,"When using a JNDIRegistry in a Camel context to make a JPA EntityManagerFactory available to a JPAComponent (required when running Camel in a Java EE container), the JPAComponent is unable to find it due do this line:


            Map<String, EntityManagerFactory> map = getCamelContext().getRegistry().findByTypeWithName(EntityManagerFactory.class);


since the method findByTypeWithName in JNDIRegistry is unimplemented (returns a null map).
This forces to fallback to a SimpleRegistry or to a Spring registry, thus making impossible to use the JAVA EE container JNDI registry.


Proposted solution: At present, JNDI does not allow lookups based on a class.
My suggestion is to lookup the EntityManagerFactory by a standard name, such as when looking for the default persistence unit name (and eventually adding a property for the JPA URL in order to use a custom name).",davsclaus:1380419797:2013-09-29T09:56:37.091+0000:1380419797:2013-09-29T09:56:37.091+0000:There is another JIRA about JNDIRegistry should be improved to implement these methods also. 
0,CAMEL-6797,Bug,Minor,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-09-29 06:36:03+00:00,2013-09-30 09:43:13+00:00,There seems to be a divergence in the behaviour of the camel-quartz and camel-quartz2 components regarding this test.,bvahdat:1380408139:2013-09-29T06:42:19.659+0000:1380435399:2013-09-29T14:16:39.052+0000:On the other hand the other clustering test [SpringQuartzTwoAppsClusteredFailoverTest|https://github.com/apache/camel/blob/master/components/camel-quartz2/src/test/java/org/apache/camel/routepolicy/quartz2/SpringQuartzTwoAppsClusteredFailoverTest.java] works well for both {{camel-quartz}} as well as {{camel-quartz2}} components. However that test makes use of {{CronScheduledRoutePolicy}} instead of {{QuartzConsumer}} to trigger the routes.
0,CAMEL-6796,Bug,Major,2.12.0,None,"
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,2,2013-09-28 11:00:51+00:00,2013-09-29 07:39:06+00:00,"See nabble
http://camel.465427.n5.nabble.com/contentObjectId-in-XML-Security-camel-xmlsecurity-tp5740265p5740348.html


Some options has not been exposed as getter/setters so they can be fully configured.","forsthofer:1380411546:2013-09-29T07:39:06.976+0000:1380411546:2013-09-29T07:39:06.976+0000:Hello,

I do not think that this is a bug. The objectId of the Element 'Object' is generated automatically for the enveloping XML Signature case. And there is a Reference element gnerated with an  URI whose value is ""#<generated object ID>"" The header 'CamelXmlSignatureContentReferenceUri' can be used to overwrite the reference URI in order to reference only a part of the message and not the total message (as the generated object ID does. 

Regards Franz  "
0,CAMEL-6795,Improvement,Major,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-28 07:45:38+00:00,2013-09-28 08:26:08+00:00,"The default spool directory in DefaultStreamCachingStrategy should be in a camel sub directory.


This can avoid issues if the user does not have permission to write in the tmp directory, but only in sub dirs.",
0,CAMEL-6794,New Feature,Major,2.12.1,Future,"
None
",Closed,Duplicate,Future,Unassigned,Oliver Jelinski,0,7,2013-09-27 21:09:08+00:00,2019-05-19 17:13:05+00:00,"Hi Camel team,


my wish for a new feature already came up a long time ago, in CAMEL-2820, but this was closed, because the requester didn't give enough information on this. So I try it again, with a bit more info...


I am processing xml via camel a lot and I'm working a lot with the xslt component for transformations. This works fine and I think it is solved by you in a very elegant way.


But very often I also need to split my xml for processing of the maxOccurs=""unbounded""-Elements one-by-one. This also works fine, but when it comes to aggregating the elements again, I need to write a java-AggregationStrategy for that.


Basically, what the java AggregationStrategy does, would be also achievable with XSLT: having an old exchange (that is null for the first aggregation) and a new exchange that are however aggregated to a new object that has the same type as the body of the old exchange.


In XSLT you can transform two (or more) files into one new file, So it would be totally possible to process one xml-file of namespace x with root element x:a and another xml-file with namespace y with root element y:b to a target file which also has the root-element x:a. This could be repeated n times and would result in an element x:a. – basically the same behaviour as the java AggregationStrategies.


So my wish would be to have something like


<split strategyRef=""xslt:MyTransformation.xslt"" >
...
</split>


If I had that, I would save a lot of marshal/unmarshal operations. I would be glad, if you took this into consideration.


Best regards,
Oliver","rene avontuur:1388653425:2014-01-02T17:03:45.802+0000:1388653425:2014-01-02T17:03:45.802+0000:I am currently writing an aggregation strategy that uses internally an XsltBuilder, in a similar way as the XsltComponent does.
It seems to meet fully the above requirements.
On request I can share the code. It might fit well in the org.apache.camel.util.toolbox package. Please let  me know if that's a good idea.

The route and the xslt will look like:

{code}
                Namespaces ns = new Namespaces(""one"", ""http://camel.apache.org/schema/one"");
                XPathBuilder xPathSplitter = new XPathBuilder(""//one:other"");
                xPathSplitter.setNamespaces(ns.getNamespaces());

                AggregationStrategy aggregationStrategy = XsltAggregationStrategies.xsltAggregation(getContext())
                        .enableSaxon()
                        .setXslt(""org/apache/camel/component/xslt/saxon-merger.xsl"")
                        .setFragmentName(""other"");

                from(""direct:splitter"")
                        .setProperty(XsltAggregationStrategy.PROPERTY_INITIAL_DOCUMENT, simple(xmlDataInitial))
                        .split(xPathSplitter, aggregationStrategy)
                        .log(LoggingLevel.INFO,  ""processing splitted node: ${body}"")
                        .end()
                        .to(""mock:resultSplitter"");
{code}

{code:xml}
    <xsl:param name=""other""/>

    <xsl:template match=""list"">
        <xsl:copy>
            <xsl:apply-templates select=""*|@*""/>
            <xsl:element name=""item"">
                <xsl:element name=""name"">
                    <xsl:value-of select=""$other/one:test/text()""/>
                </xsl:element>
                <xsl:element name=""price"">
                    <xsl:value-of select=""$other/one:price/text()""/>
                </xsl:element>
            </xsl:element>
        </xsl:copy>
    </xsl:template>
{code}


rene avontuur:1397124841:2014-04-10T18:14:01.803+0000:1397124841:2014-04-10T18:14:01.803+0000:A solution for this issue has been made available here: [https://github.com/RAvontuur/camel/compare/CAMEL-6794]
It is fully based on the original idea as described above.
ojelinski:1398300224:2014-04-24T08:43:44.084+0000:1398300224:2014-04-24T08:43:44.084+0000:That looks great! Thanx. I will have a closer look at your provided code and test it, during the next week.

davsclaus:1488519497:2017-03-03T13:38:17.151+0000:1488519497:2017-03-03T13:38:17.151+0000:Contributions is welcome
fatihpense:1558109728:2019-05-18T00:15:28.270+0000:1558109793:2019-05-18T00:16:33.644+0000:Hello,

I was researching creating a generic XSLT AggregationStrategy implementation for this issue. However there is already one: 

[https://github.com/apache/camel/blob/master/components/camel-xslt/src/main/java/org/apache/camel/component/xslt/XsltAggregationStrategy.java]

Is there something I can help with the issue?

Regards,
 Fatih
zregvart:1558257184:2019-05-19T17:13:04.997+0000:1558257184:2019-05-19T17:13:04.997+0000:I think this was fixed via CAMEL-9097"
0,CAMEL-6793,Bug,Major,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,MF,0,3,2013-09-27 17:00:48+00:00,2013-12-03 19:59:23+00:00,"Since upgrading from 2.10.6 to 2.12.1 Camel logs the following warning:



18:47:10,278 [WARN ] DefaultErrorHandler       - Cannot determine current route from Exchange with id: ID-xyz-0-12, will fallback and use first error handler.




It looks like the ""splitter"" is causing the problem. If the ""<split>"" is disabled in the route, then the warning disappears!


Here's the example route for reproduction:



<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">

	<!-- custom exceptions -->
	<bean id=""demoIllegalStateException"" class=""java.lang.IllegalStateException"">
		<constructor-arg index=""0"" value=""Forced Exception"" type=""java.lang.String""/>
	</bean>

	<!-- this is the camel route which proxy the web service and forward it to the real web service -->
	<camelContext id=""camelCtx"" xmlns=""http://camel.apache.org/schema/spring"" errorHandlerRef=""defaultErrorHandler"" trace=""false""
	              messageHistory=""true"">

		<errorHandler id=""defaultErrorHandler"" type=""DefaultErrorHandler"">
			<redeliveryPolicy logExhausted=""true""/>
		</errorHandler>

		<errorHandler id=""noErrorHandler"" type=""NoErrorHandler""/>

		<endpoint id=""myTimer"" uri=""timer://myTimer?period=5s""/>
		<route id=""Start"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""900"">
			<from uri=""ref:myTimer""/>
			<setBody>
				<simple>Some Test Message</simple>
			</setBody>
			<to uri=""direct:Process""/>
		</route>

		<route id=""Process"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""800"">
			<from uri=""direct:Process""/>

			<onException>
				<exception>java.lang.ArithmeticException</exception>
				<handled>
					<constant>true</constant>
				</handled>
				<to uri=""direct:HandleException""/>
			</onException>

			<!-- now delegate the processing of the body with all the selected transfers -->
			<to uri=""direct:Process2""/>
		</route>


		<route id=""Process2"" autoStartup=""true"" trace=""false"" errorHandlerRef=""defaultErrorHandler""
		       startupOrder=""30"">
			<from uri=""direct:Process2""/>

			<onException>
				<exception>java.lang.IllegalStateException</exception>
				<handled>
					<constant>true</constant>
				</handled>
				<to uri=""direct:HandleException""/>
			</onException>

			<split stopOnException=""true"" streaming=""false"" parallelProcessing=""false"">
				<simple>${body}</simple>

				<throwException ref=""demoIllegalStateException""/>
			</split>
		</route>

		<route id=""HandleException"" autoStartup=""true"" trace=""false""
		       errorHandlerRef=""noErrorHandler""
		       startupOrder=""13"">
			<from uri=""direct:HandleException""/>

			<log loggingLevel=""INFO"" message=""[${property.LogPrefix}] EXCEPTION message: ${exception}""/>
			<log loggingLevel=""DEBUG"" message=""[${property.LogPrefix}] EXCEPTION stacktrace: ${exception.stacktrace}""/>
			<stop/>
		</route>
	</camelContext>
</beans>




Is it a bug or do I have to configure something new? 2.10.6 and previous versions did not show this kind of behavior (meaning: did not log this warning)!","davsclaus:1381981981:2013-10-17T11:53:01.243+0000:1381981981:2013-10-17T11:53:01.243+0000:Thanks for reporting. I have reproduced the issue and have a pending fix.
Luckless:1386071963:2013-12-03T19:59:23.531+0000:1386071963:2013-12-03T19:59:23.531+0000:I just wanted to confirm that I am having the same issue"
0,CAMEL-6792,Wish,Minor,2.11.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Robert E. Simmons Jr. MSc.,0,3,2013-09-27 08:52:42+00:00,2013-09-29 08:29:23+00:00,"There is a problem with the CamelTestSupport class in that if you call getMockEndpoint on an endpoint that doesnt exist, it blithely returns you an endpoint connected to nothing. The problem is you end up chasing endless test failures when the fact is your endpoint is not even there. So I suggest a method I added to my subclass of CamelTestSupport which is: 


protected MockEndpoint assertAndGetMockEndpoint(final String uri) {
    assertNotNull(context.hasEndpoint(uri));
    return getMockEndpoint(uri);
}


This method will make sure that the endpoint is there before returning it and it will make tests easier to write.","davsclaus:1380328862:2013-09-28T08:41:02.746+0000:1380328862:2013-09-28T08:41:02.746+0000:Discussed at Camel user forum for a better solution.
davsclaus:1380328959:2013-09-28T08:42:39.254+0000:1380328959:2013-09-28T08:42:39.254+0000:The existing getMockEndpoint method should have an overloaded method with a boolean create option, so people can do

getMockEndpoint(""mock:foo"", false)

To not auto create the mock endpoint if not existing, and throw a NoSuchEndpoint exception if missing.
jwcarman:1380355256:2013-09-28T16:00:56.519+0000:1380355256:2013-09-28T16:00:56.519+0000:I believe this takes care of it.
davsclaus:1380414563:2013-09-29T08:29:23.854+0000:1380414563:2013-09-29T08:29:23.854+0000:Thanks for the patch."
0,CAMEL-6791,Bug,Minor,"2.9.0, 2.12.1",,"
None
",Resolved,Not A Problem,None,Unassigned,Sergey Zolotaryov,0,2,2013-09-27 07:52:03+00:00,2013-10-09 09:29:56+00:00,"We have a requirement to return the result of some processing in an HTTP response. Here's how this looks:


Jetty http endpoint triggers processing -> 
data is retrieved into an iterator -> 
multiple renderers process the model objects and write output to temporary files -> 
a file endpoint copies files to final destination ->
an aggregator puts generated file names into exchange body as a list ->
the camel servlet renders the exchange body


Everything goes well until the final step, where we can only see the filenames of temporary files, but not the final ones. Looks like the aggregation result is just ignored. I am attaching an eclipse project where you can just see how it happens.","anydoby:1380239563:2013-09-27T07:52:43.749+0000:1380239563:2013-09-27T07:52:43.749+0000:unit test project
davsclaus:1380586866:2013-10-01T08:21:06.107+0000:1380586866:2013-10-01T08:21:06.107+0000:Can you try with latest release as we give points about there
http://camel.apache.org/support

The Camel team is overburden so please help yourself by testing with newer Camel releases. And make unit test as simple as possible to reproduce any issue.
anydoby:1380587529:2013-10-01T08:32:09.575+0000:1380587529:2013-10-01T08:32:09.575+0000:Making it less important as we are now ok with temp file names as an indication that the processing of request was completed.

This, however, stays open, I guess. This issue was tested on the latest camel release as well as on the release we are currently using.
anydoby:1381282183:2013-10-09T09:29:43.218+0000:1381282183:2013-10-09T09:29:43.218+0000:Ok. I figured out how to fix the code. Camel example on splitter helped a lot :)

Here is what has to be used in order for the aggregation work: 1) specify the aggregation strategy in split definition, not after it, otherwise it does not work; 2) after the processor that handles split sub-exchanges you must say end() so that sub-exchanges don't get returned by jetty. 

Here is how the changed code looks like:

{code}
route = route.split(splitExchangeIntoOneExchangePerFile(), new GroupedExchangeAggregationStrategy());

// now move/copy(?) the files to final destination
route = route.to(""file://output?fileName=${header."" + BATCH_FILE_INDEX + ""}.txt"").end();

// no explicit aggregation afterwards
{code}"
0,CAMEL-6790,Bug,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Ievgen Tarasov,0,2,2013-09-26 21:51:31+00:00,2013-10-07 10:45:43+00:00,"There is a problem in this scenario:



Karaf is running.
Start some bundle that uses blueprint+camel. For convenience will call it <testbundle>.
Cause this bundle to be suspended by container, by refreshing a bundle that provides some namespace used by <testbundle> bundle. For example, by refreshing camel-cxf (assuming that <testbundle> uses also blueprint/cxf namespace). In logs one can see something like this:
Bundle <testbundle> is waiting for namespace handlers http://camel.apache.org/schema/blueprint/cxf



In this case after the missing namespace becomes available again the bundle will fail to resume with exception like:


Caused by: org.xml.sax.SAXParseException: cvc-complex-type.2.4.c: The matching wildcard is strict, but no declaration can be found for element 'camelContext'.


The problem is in CamelNamespaceHandler class which is a part of camel-blueprint. When it parses incoming dom it changes namespace of all elements from http://camel.apache.org/schema/blueprint to http://camel.apache.org/schema/spring. So when a bundle that uses blueprint+camel needs to validate its blueprint context again (like if it was waiting for some namespace) the new validation will fail.","davsclaus:1380344380:2013-09-28T12:59:40.231+0000:1380344380:2013-09-28T12:59:40.231+0000:Thanks for reporting.
eugene.tarasov:1381066662:2013-10-06T21:37:42.251+0000:1381066662:2013-10-06T21:37:42.251+0000:Hi Claus. Thanks for fixing the problem! Trying the fix I found a further problem - when camelContext tag is being parsed, its id is being set to some unique value if it wasnt set by user. For setting the id CamelNamespaceHandler calls non-namespace-aware method ""setAttribute"". Its necessary to change it to setAttributeNS (I added a patch that does it). With this change the whole ""refresh"" problem becomes solved.
davsclaus:1381113943:2013-10-07T10:45:43.119+0000:1381113943:2013-10-07T10:45:43.119+0000:Thanks I did the same change in camel-spring as its also in use with spring-dm for OSGi"
0,CAMEL-6789,Bug,Major,"2.12.0, 2.12.1","2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Alessandro Baldoni,0,2,2013-09-26 09:57:03+00:00,2014-08-04 07:43:21+00:00,"The jar camel-quartz2.jar from both maven and the Camel binary zip available on camel.apache.org is missing the following packages:


org.apache.camel.pollconsumer.quartz2
org.apache.camel.routepolicy.quartz2


Both are present in the source code.",bvahdat:1380178180:2013-09-26T14:49:40.193+0000:1380178180:2013-09-26T14:49:40.193+0000:Thanks for reporting.
0,CAMEL-6788,Bug,Major,1.6.4,,"
None
",Resolved,Invalid,None,Claus Ibsen,Polly,0,2,2013-09-26 08:52:22+00:00,2013-09-26 15:18:33+00:00,"The mail doesn't reach destination because of incorrect address.
Succeed - 
<mail:form>man@somemail</mail:form>
<mail:to>man@somemail</mail:to>
Failed - 
<mail:form>man@some_mail</mail:form>
<mail:to>man@some_mail</mail:to>


And there are no exception and messages in logs why mail didn't reach destination.","davsclaus:1380179902:2013-09-26T15:18:22.327+0000:1380179902:2013-09-26T15:18:22.327+0000:Please see this page for how to get help with Camel
http://camel.apache.org/support

You should follow the guides from this page, and use the user forum / mailinglist first to get help.
"
0,CAMEL-6787,Task,Major,None,,"
None
",Closed,Fixed,None,Unassigned,Marios Trivyzas,0,1,2013-09-26 01:28:52+00:00,2013-09-30 13:07:22+00:00,No Desc,matriv:1380517583:2013-09-30T13:06:23.009+0000:1380517583:2013-09-30T13:06:23.009+0000:Patch attached to original issue CAMEL-6675
0,CAMEL-6786,Improvement,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Martin Stiborský,0,4,2013-09-25 17:35:52+00:00,2015-02-14 14:16:46+00:00,"Preemptive auth is available already for camel-http component.
The changes in my pull request brings this feature also for camel-http4.


I have tested it already in production, where we are using http4 component for integrating with Jenkins JSON/RPC API where is the preemptive auth needed.


The preemptive auth on http4 component could be enabled with preemptiveAuth=true option.


There is no unit tests attached yet, I'm working on it right now.


https://github.com/apache/camel/pull/46","davsclaus:1380587202:2013-10-01T08:26:42.879+0000:1380587202:2013-10-01T08:26:42.879+0000:We need unit tests, and also make sure your patch works with checkstyle. See here how to run checkstyle test
http://camel.apache.org/building.html
njiang:1383092091:2013-10-30T08:14:51.841+0000:1383092180:2013-10-30T08:16:20.695+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Martin , I changed the option to authenticationPreemptive which is same with the HttpClient3.x setting, I also added an unit test for it.
njiang:1383092709:2013-10-30T08:25:09.372+0000:1383092709:2013-10-30T08:25:09.372+0000:Updated the camel-http4 wiki with the new added option.
githubbot:1423894606:2015-02-14T14:16:46.488+0000:1423894606:2015-02-14T14:16:46.488+0000:Github user gmcdonald closed the pull request at:

    https://github.com/apache/camel/pull/46
"
0,CAMEL-6785,Improvement,Major,2.11.1,"2.11.3, 2.12.2, 2.13.0","
None
",Closed,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Marios Trivyzas,0,2,2013-09-25 15:48:18+00:00,2013-09-28 12:34:54+00:00,No Desc,"davsclaus:1380335847:2013-09-28T10:37:27.774+0000:1380335847:2013-09-28T10:37:27.774+0000:Thanks for the patch.

I made sure to return empty map instead of null as that is what the javadoc contract says.
matriv:1380342883:2013-09-28T12:34:43.879+0000:1380342883:2013-09-28T12:34:43.879+0000:Thank you!"
0,CAMEL-6784,Bug,Minor,2.10.2,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Dmytro Puzhay,0,2,2013-09-25 15:03:38+00:00,2016-04-28 12:55:56+00:00,"I create PollingConsumer for my AMQP queue and consume with receiveNoWait() until null is received. It worked nicely in default mode, but in browsing mode (queue name suffixed with ""

{mode: browse}

"", see https://qpid.apache.org/books/0.12/Programming-In-Apache-Qpid/html/ch02s04.html ""2.4.3.3. browse"" for details) my PollingConsumer keeps running infinitely.","ceposta:1381246858:2013-10-08T23:40:58.048+0000:1381246858:2013-10-08T23:40:58.048+0000:Can you show your complete route? Or code that uses polling consumer?
ceposta:1381249059:2013-10-09T00:17:39.248+0000:1381249059:2013-10-09T00:17:39.248+0000:Or try using the BrowsableEndpoint like this:

BrowseableEndpoint endpoint = camelContext.getEndpoint(""amqp:queue:ping"", BrowseableEndpoint.class); 
int messageCount = endpoint.getExchanges().size(); 

AMQP component uses the JMS component under the covers (which uses Spring DMLC)... I don't think you can force the DMLC to do a browse as it's event driven and a browse is a static snapshot. The BrowsableEndpoint does allow you to take a browse of the queue into a static snapshot and process each exchange as you'd wish.

If that helps, then we can close this JIRA.
magner58:1381288680:2013-10-09T11:18:00.863+0000:1381288680:2013-10-09T11:18:00.863+0000:Hi Christian,

thanks for answer, please see below how my code looks like.

In my RouteBuilder constructor:

this.timer = new TimerComponent();
getContext().addComponent(""timer"", this.timer);

this.amqpComponent = (AMQPComponent) AMQPComponent.amqpComponent(""amqp://admin:admin@localhost/test?brokerlist='tcp://localhost:10315'"");
getContext().addComponent(""amqp"", this.amqpComponent);

this.directComponent = new DirectComponent();
getContext().addComponent(""direct"", this.directComponent);

In my RouteBuilder configure:

Endpoint timerEndpoint = this.timer.createEndpoint(""timer:MyTimer?delay=0&repeatCount=1"");
Endpoint amqpEndpoint = this.amqpComponent.createEndpoint(""amqp:queue:broadcast.MyTopic.MyQueue"");
Endpoint directEndpoint = this.directComponent.createEndpoint(""direct:MyDirect"");

MyPollingConsumer myConsumer = new MyPollingConsumer(amqpEndpoint, directEndpoint);

from(timerEndpoint).bean(myConsumer);
from(directEndpoint) ...

MyPollingConsumer:

public class LoaderPollingConsumer
{
    private PollingConsumer pollingConsumer = null;
    private ProducerTemplate producerTemplate = null;

    public LoaderPollingConsumer(Endpoint amqpEndpoint, Endpoint directEndpoint) throws Exception
    {
        this.pollingConsumer = amqpEndpoint.createPollingConsumer();

        ProducerTemplate directEndpointProducerTemplate = directEndpoint.getCamelContext().createProducerTemplate();
        directEndpointProducerTemplate.setDefaultEndpoint(directEndpoint);
        this.producerTemplate = directEndpointProducerTemplate;
    }

    @Handler
    public void onEvent() throws Exception
    {
        this.producerTemplate.start();

        while (true)
        {
            Exchange exchange = this.pollingConsumer.receiveNoWait();

           if (exchange != null)
           {
                this.producerTemplate.send(exchange);
            }
           else
           {
                this.producerTemplate.sendBody(null);
                break;
            }
        }

        this.producerTemplate.stop();
    }
}

""AMQP component uses the JMS component under the covers (which uses Spring DMLC)... I don't think you can force the DMLC to do a browse as it's event driven and a browse is a static snapshot""

I thinks one can read in browsing mode with event-driven route, but can't with polling consumer, because polling consumer technically makes new connection with every poll, which simply forces amqp to start from first message.

""Or try using the BrowsableEndpoint like this""

I will try (probably this week) and write back about results.
magner58:1382585314:2013-10-24T11:28:34.041+0000:1382585314:2013-10-24T11:28:34.041+0000:Hi Christian,

using BrowsableEndpoint like below works as expected (browsing mode, messages not removed, consuming stopped and null is sent when all messages are consumed):

my route:

from(timerEndpoint).bean(myConsumer);

from(directEndpoint) ...

myConsumer class:

.  ..
@Handler
public void onEvent() throws Exception
{
   this.producerTemplate.start();

   for (Exchange exchange : this.browsableEndpoint.getExchanges())
   {
      this.producerTemplate.send(this.directEndpoint, exchange);
   }

   this.producerTemplate.sendBody(this.directEndpoint, null);

   this.producerTemplate.stop();
}

I thinks one can't read from amqp queue in browsing mode with camel polling consumer, because it technically makes new connection with every poll, which simply forces amqp to start from first message. Solution would be use one connection for polling.

P.S. Are you actually assigned to the bug? It is Unassigned to me.
ceposta:1382595256:2013-10-24T14:14:16.203+0000:1382595256:2013-10-24T14:14:16.203+0000:Glad you found something that works.

I haven't assigned to myself yet, but I do have it under watch. I will take a deeper look at what it's doing when I get a sec. At that time I can assign it to myself :)
magner58:1461819356:2016-04-28T12:55:56.663+0000:1461819356:2016-04-28T12:55:56.663+0000:[~davsclaus] oh no! But why, why? :)"
0,CAMEL-6783,Bug,Minor,2.12.0,2.13.0,"
None
",Resolved,Won't Fix,2.13.0,Willem Jiang,liugang,0,6,2013-09-25 09:08:50+00:00,2014-02-14 09:57:30+00:00,"the getFeatures() method of CxfEndpoint only accept an instance of AbstractFeature, but the original ClientFactoryBean accept Feature instance.","jwcarman:1380355844:2013-09-28T16:10:44.066+0000:1380355844:2013-09-28T16:10:44.066+0000:This change could cause a regression.  Are we sure we want this?
jwcarman:1380355931:2013-09-28T16:12:11.518+0000:1380355931:2013-09-28T16:12:11.518+0000:In case we decide to accept the regression risk of this change, I'm attaching a patch.
gangliu:1380391276:2013-09-29T02:01:16.274+0000:1380391276:2013-09-29T02:01:16.274+0000:How it works if change from *List<Feature>* to *List<? extend Feature>* ?
Thanks.
jwcarman:1380427381:2013-09-29T12:03:01.303+0000:1380427381:2013-09-29T12:03:01.303+0000:That would make things worse, because then the collection is virtually useless if anyone wants to modify it.
dkulp:1380526056:2013-09-30T15:27:36.240+0000:1380526056:2013-09-30T15:27:36.240+0000:CXF itself uses:

{code:java}
    protected List<Feature> features;
 
    public List<Feature> getFeatures()
    public void setFeatures(List<? extends Feature> features)
{code}
jwcarman:1380526342:2013-09-30T15:32:22.853+0000:1380526467:2013-09-30T15:34:27.894+0000:It's okay to take List<? extends Feature> on the input because you know all the things in the input collection are Feature objects.  However, returning List<? extends Feature> doesn't work well at all, because you can't add stuff to it.  Consider the following case:

{code:java}
List<? extends Serializable> list = ...;
list.add(""Hello"");
{code}

You can't do it, because ""list"" is a list of some type of things that extend Serializable.  You don't *know* that the type is String, you just know it's some type extending from Serializable.  
davsclaus:1380767720:2013-10-03T10:35:20.271+0000:1380767720:2013-10-03T10:35:20.271+0000:What is the purpose of this ticket? What is it today you cannot do?
gangliu:1380826403:2013-10-04T02:53:23.182+0000:1380826403:2013-10-04T02:53:23.182+0000:May be not a big issue. but the problem is, if you have some customized feature interface which extends *Feature* directly, and also some implementation of this new feature interface. you can't add the instance of it into the List without a Cast operation. if the implementation doesn't extend AbstractFeature, then, the cast will be failed.
davsclaus:1382932047:2013-10-28T11:47:27.732+0000:1382932047:2013-10-28T11:47:27.732+0000:Lets keep it as is. There is no good point in changing API which can cause problems for others.
njiang:1392184002:2014-02-12T13:46:42.688+0000:1392184121:2014-02-12T13:48:41.095+0000:It is make sense to remove the restrict that only accept the AbstractFeature. 
As the we need to change getFeatures() return type, I have no plan to back port the change.
"
0,CAMEL-6782,Test,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-09-24 22:17:26+00:00,2013-09-24 23:10:49+00:00,"The tests being provided for CAMEL-6686 as well as CAMEL-6773 don't really demonstrate a failover of Camel routing taking place inside a quartz cluster setup.


It would be nice to show this in black & white.","bvahdat:1380034273:2013-09-24T22:51:13.222+0000:1380035449:2013-09-24T23:10:49.095+0000:Now running the new test {{SpringQuartzTwoAppsClusteredFailoverTest}} one can clearly see the failover taking place. See the last 6 lines from the log below and most importantly the last line where the same route from the second App automatically gets started after the crash of the first App:

{code}
2013-09-25 00:45:10,941 [main           ] INFO  SchedulerFactoryBean          :758  - Shutting down Quartz Scheduler
2013-09-25 00:45:10,941 [main           ] INFO  QuartzScheduler               :707  - Scheduler scheduler_$_app-one shutting down.
2013-09-25 00:45:10,941 [main           ] INFO  QuartzScheduler               :626  - Scheduler scheduler_$_app-one paused.
2013-09-25 00:45:10,942 [main           ] INFO  QuartzScheduler               :801  - Scheduler scheduler_$_app-one shutdown complete.
2013-09-25 00:45:10,943 [main           ] INFO  SpringCamelContext            :1706 - Apache Camel  (CamelContext: camelContext) is shutting down
2013-09-25 00:45:10,943 [main           ] INFO  DefaultShutdownStrategy       :172  - Starting to graceful shutdown 1 routes (timeout 300 seconds)
2013-09-25 00:45:10,945 [ - ShutdownTask] INFO  DefaultShutdownStrategy       :600  - Route: myRoute shutdown complete, was consuming from: Endpoint[direct://start]
2013-09-25 00:45:10,946 [main           ] INFO  DefaultShutdownStrategy       :217  - Graceful shutdown of 1 routes completed in 0 seconds
2013-09-25 00:45:10,947 [main           ] INFO  QuartzComponent               :302  - Shutting down scheduler. (will wait for all jobs to complete first.)
2013-09-25 00:45:10,949 [main           ] INFO  SpringCamelContext            :1780 - Apache Camel  (CamelContext: camelContext) uptime 5.854 seconds
2013-09-25 00:45:10,950 [main           ] INFO  SpringCamelContext            :1781 - Apache Camel  (CamelContext: camelContext) is shutdown in 0.006 seconds
2013-09-25 00:45:10,950 [main           ] WARN  tzTwoAppsClusteredFailoverTest:63   - Crashed...
2013-09-25 00:45:10,950 [main           ] WARN  tzTwoAppsClusteredFailoverTest:64   - Crashed...
2013-09-25 00:45:10,950 [main           ] WARN  tzTwoAppsClusteredFailoverTest:65   - Crashed...
2013-09-25 00:45:25,924 [_ClusterManager] INFO  LocalDataSourceJobStore       :3535 - ClusterManager: detected 1 failed or restarted instances.
2013-09-25 00:45:25,924 [_ClusterManager] INFO  LocalDataSourceJobStore       :3394 - ClusterManager: Scanning for instance ""app-one""'s failed in-progress jobs.
2013-09-25 00:45:25,947 [eduler_Worker-1] INFO  SpringCamelContext            :2183 - Route: myRoute started and consuming from: Endpoint[direct://start]
{code}
bvahdat:1380035289:2013-09-24T23:08:09.671+0000:1380035289:2013-09-24T23:08:09.671+0000:Added the new clustering failover test both to the {{camel-quartz}} as well as the {{camel-quartz2}} modules."
0,CAMEL-6781,Bug,Major,"2.11.1, 2.12.0","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Franz Forsthofer,0,2,2013-09-24 11:51:59+00:00,2013-09-29 08:16:07+00:00,"If you use DefaultComponent.setProperties(config, parameters) with a config object having overloaded methods you can get the following Exception:


org.apache.camel.NoSuchBeanException: Found bean: myExpression in JNDI Context: javax.naming.InitialContext@7f597bc4 of type: org.apache.camel.builder.ExpressionBuilder$31 expected type was: class java.lang.String
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:60)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookupByNameAndType(PropertyPlaceholderDelegateRegistry.java:63)
	at org.apache.camel.util.CamelContextHelper.lookup(CamelContextHelper.java:121)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:499)
	at org.apache.camel.util.EndpointHelper.setReferenceProperties(EndpointHelper.java:271)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:263)
	at org.apache.camel.impl.DefaultComponentReferencePropertiesTest$MyComponent.createEndpoint(DefaultComponentReferencePropertiesTest.java:94)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:120)
	at org.apache.camel.impl.DefaultComponentReferencePropertiesTest.testCallExpressionSetter(DefaultComponentReferencePropertiesTest.java:152)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: java.lang.ClassCastException: Cannot cast org.apache.camel.builder.ExpressionBuilder$31 to java.lang.String
	at java.lang.Class.cast(Class.java:3084)
	at org.apache.camel.impl.JndiRegistry.lookupByNameAndType(JndiRegistry.java:56)
	... 28 more


The exception does not occur always it dpends on the order of the methods with the same name. In IntrospectionSupport.setProperty you find



 setters = findSetterMethods(clazz, name, value, allowBuilderPattern);
...
  Class<?> parameterType = setter.getParameterTypes()[0];
            Object ref = value;
            // try and lookup the reference based on the method
            if (context != null && refName != null && ref == null) {
                ref = CamelContextHelper.lookup(context, refName.replaceAll(""#"", """"), parameterType);




If by chance the first setter method has a paramterType which fits to the referenced bean then you will not get the exception. But if the first setter method has a parameterType which does not fit to the referenced bean then you will get the exception.",davsclaus:1380413767:2013-09-29T08:16:07.154+0000:1380413767:2013-09-29T08:16:07.154+0000:Thanks for the patch. I polished it slightly.
0,CAMEL-6780,Improvement,Trivial,"2.11.1, 2.12.1","2.11.2, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-24 09:40:35+00:00,2013-09-24 09:44:07+00:00,"See nabble
http://camel.465427.n5.nabble.com/Must-Processor-check-if-Exchange-has-out-message-already-tp5739977.html",
0,CAMEL-6779,Bug,Major,"2.11.1, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Franz Forsthofer,0,2,2013-09-23 08:15:49+00:00,2013-10-01 09:39:01+00:00,"StaxConverter creates XMLEventReader and XMLStreamReader always with a specified encoding. However, the encoding of the data the readers should read is not always known. Therefore exceptions occur.


The solution is easy: The encoding should not be set so that the readers can determine the encoding.","davsclaus:1379895669:2013-09-23T08:21:09.295+0000:1379895669:2013-09-23T08:21:09.295+0000:Thanks for the patch. Can you use \uNNNN for the german chars, as the source code should use ascii chars.
forsthofer:1379896428:2013-09-23T08:33:48.796+0000:1379896428:2013-09-23T08:33:48.796+0000:Yes I will do that.
forsthofer:1379899112:2013-09-23T09:18:32.684+0000:1379899112:2013-09-23T09:18:32.684+0000:Hi Claus,

the latest version of the patch does now contain \u00E4\u00F6\u00FC.

Regards Franz
davsclaus:1380591541:2013-10-01T09:39:01.612+0000:1380591541:2013-10-01T09:39:01.612+0000:Thanks for the patch."
0,CAMEL-6778,Bug,Major,2.11.2,2.11.3,"
None
",Resolved,Fixed,2.11.3,Christian Müller,Christian Müller,0,1,2013-09-22 20:10:09+00:00,2013-09-22 20:41:25+00:00,"cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.2
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.2/xml/features
karaf@root> features:install camel-spring-redis
Error executing command: Could not start bundle mvn:org.springframework/spring-context/3.1.4.RELEASE in feature(s) spring-3.1.4.RELEASE, camel-spring-redis-2.11.2: Unresolved constraint in bundle org.springframework.context [70]: Unable to resolve 70.0: missing requirement [70.0] osgi.wiring.package; (&(osgi.wiring.package=org.springframework.beans)(version>=3.1.4)(!(version>=3.1.5)))",muellerc:1379853685:2013-09-22T20:41:25.206+0000:1379853685:2013-09-22T20:41:25.206+0000:A workaround is installing all features/bundles except mvn:org.springframework/spring-context/3.1.4.RELEASE.
0,CAMEL-6777,Improvement,Major,"2.11.2, 2.12.1","2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Christian Müller,0,3,2013-09-22 11:58:39+00:00,2014-02-21 14:36:51+00:00,"Because of the 'apache-release' profile in our root pom.xml, we are building two different source distributions:



http://search.maven.org/#artifactdetails|org.apache.camel|camel|2.12.0|pom
http://search.maven.org/#artifactdetails|org.apache.camel|apache-camel|2.12.0|pom



I propose to remove this profile.","hadrian:1384858583:2013-11-19T18:56:23.434+0000:1384858583:2013-11-19T18:56:23.434+0000:That we inherit from the apache pom, so it cannot be removed. I will look into it.
hadrian:1385150522:2013-11-23T04:02:02.638+0000:1385150522:2013-11-23T04:02:02.638+0000:I checked and there are some tiny, tiny (inconsequential) differences between the two source distros. I checked and the code can be successfully built from both. I have two solutions, one involves changing the behavior of the release plugin during release:perform (cannot be tested with a dryRun and I would like to avoid committing a tag and all that just for this). The second solution involves messing with the <configuration> of the maven-source-plugin. Nevertheless, it can be fixed, but the question is this:

Is there a preference which one we should keep? I would think the apache-camel one, not the camel (root) one. Assuming no objections, I'll get it done for the 2.11.3 which I'll release next. I didn't want to keep 2.12.2 to properly test this.
njiang:1392674859:2014-02-18T06:07:39.165+0000:1392674859:2014-02-18T06:07:39.165+0000:I think we can address it by define release profile ourself instead of use the apache-release on from the apache pom.
njiang:1392964611:2014-02-21T14:36:51.131+0000:1392964611:2014-02-21T14:36:51.131+0000:Removed the apache-release profile and setup a new release profile for release plugin to use."
0,CAMEL-6776,Improvement,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-09-22 03:44:23+00:00,2013-09-23 10:02:42+00:00,current camel-scala doesn't provide DSL support of setProperty.,"njiang:1379901762:2013-09-23T10:02:42.037+0000:1379901762:2013-09-23T10:02:42.037+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6775,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,1,2,2013-09-21 10:33:21+00:00,2013-09-24 09:00:35+00:00,"The aggregate eip needs to aggregate logic to operation in a lock. But if there is a completed aggregated exchange we can send that exchange to the downstream thread pool outside the lock.


See nabble
http://camel.465427.n5.nabble.com/Aggregator-lock-tp5739692.html","barisacar:1379863681:2013-09-22T23:28:01.049+0000:1379863681:2013-09-22T23:28:01.049+0000:I've attached a very simple unit test which demonstrates the behaviour I'd expect to pass (but which does not pass - blocks indefinitely - under Camel 2.11/2.12). You're welcome to use it if it would be useful.
davsclaus:1379903111:2013-09-23T10:25:11.634+0000:1379903111:2013-09-23T10:25:11.634+0000:Thanks for the test.
barisacar:1379943965:2013-09-23T21:46:05.203+0000:1379944271:2013-09-23T21:51:11.484+0000:Claus,
I see you've modified the test to add a timeout but this causes the test to pass (after 5 seconds) even on Camel 2.11, which I think defeats the purpose of the test? (The test as it stands does not demonstrate that the behaviour has been fixed).

You may want to change
{code}
    latch.await(5, TimeUnit.SECONDS);
{code}
to
{code}
    if(!latch.await(5, TimeUnit.SECONDS)) {
    	throw new RuntimeException(""Took too long; assume threads are blocked and fail test"");
    }

{code}



davsclaus:1379984435:2013-09-24T09:00:35.877+0000:1379984435:2013-09-24T09:00:35.877+0000:Good idea"
0,CAMEL-6774,Bug,Critical,2.13.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Babak Vahdat,Claus Ibsen,0,2,2013-09-21 10:03:02+00:00,2013-10-23 20:48:10+00:00,"Running tests in tests/camel-itest-karaf fails with features that uses servlet 2.5 api with Karaf 2.3.3.



test:org.apache.camel.itest.karaf.CamelJettyTest.test:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.3/tar.gz}(org.apache.camel.itest.karaf.CamelJettyTest)  Time elapsed: 10.706 sec  <<< FAILURE!
java.lang.AssertionError: Cannot get component with name: jetty
	at org.junit.Assert.fail(Assert.java:93)
	at org.junit.Assert.assertTrue(Assert.java:43)
	at org.junit.Assert.assertNotNull(Assert.java:526)
	at org.apache.camel.itest.karaf.AbstractFeatureTest.testComponent(AbstractFeatureTest.java:64)
	at org.apache.camel.itest.karaf.CamelJettyTest.test(CamelJettyTest.java:32)




I suspect its the recent jetty 8.x and servlet 3 upgrade that is causing problems.","davsclaus:1381541804:2013-10-12T09:36:44.697+0000:1381541804:2013-10-12T09:36:44.697+0000:These tests fails

Failed tests:
  CamelCometdTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: cometd
  CamelHttp4Test.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: http4
  CamelHttpTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: http
  CamelJettyTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: jetty
  CamelSalesforceTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: salesforce
  CamelServletTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: servlet
  CamelStompTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: stomp
  CamelWebsocketTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: websocket
davsclaus:1382513367:2013-10-23T15:29:27.470+0000:1382513367:2013-10-23T15:29:27.470+0000:With [~bvahdat] recent fixes we are down to 2 erros

  CamelCometdTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: cometd
  CamelWebsocketTest.test:32->AbstractFeatureTest.testComponent:64 Cannot get component with name: websocket
bvahdat:1382525269:2013-10-23T18:47:49.490+0000:1382525269:2013-10-23T18:47:49.490+0000:Yeah I've got those two remaining tests fixed as well on my workspace. Running a full build right now to make sure everything is fine.

Also [this CXF test being excluded inside the POM of {{camel-itest-karaf}}|https://github.com/apache/camel/blob/master/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/CamelCxfTest.java] works again, so why I will re-enable it again.

bvahdat:1382532477:2013-10-23T20:47:57.222+0000:1382532477:2013-10-23T20:47:57.222+0000:O.K. I managed to fix those Karaf tests.

Just realized that there're other failing tests by the {{camel-itest-osgi}} module with or without of the fix for this ticket. Are we already aware of this? Is there any ticket around for this?

These are the ones failing for me but I didn't look into them:
{code}
BeanValidatorTest.validateShouldSuccessWithExpliciteDefaultGroup:47 » Validation
BeanValidatorTest.testBeanValidatorRoute:36 » Validation Unable to create a Co...
CamelBlueprint4Test.testRouteWithXSLT:42->AbstractIntegrationTest.getOsgiService:87 » Runtime
XsltBlueprintRouteTest>CamelTestSupport.setUp:218->doPostSetup:68->AbstractIntegrationTest.getOsgiService:87 » Runtime
DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
DisruptorVmTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
GroovyTest.testGroovyLanguage:38 » ClassNotFound groovy.lang.Script
HdfsBlueprintRouteTest.testWriteAndReadString:50->AbstractIntegrationTest.getOsgiService:87 » Runtime
JaxbDataFormatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » JAXB
GroovyScriptOsgiTest.testLanguage:47 » ClassNotFound groovy.lang.Script
{code}
"
0,CAMEL-6773,Improvement,Major,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-09-20 17:21:16+00:00,2013-09-24 23:09:08+00:00,The fix for CAMEL-6686 should be adapted and applied for camel-quartz2 as well.,"bvahdat:1379671323:2013-09-20T18:02:03.267+0000:1379671323:2013-09-20T18:02:03.267+0000:The patch has been already applied into the both branches. As soon as the {{camel-quartz2}} component has been defined inside JIRA itself, we could set the component of this ticket and mark it as ""Fixed""."
0,CAMEL-6772,Improvement,Minor,2.12.1,None,"
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-20 07:05:59+00:00,2013-09-20 07:09:01+00:00,"We should add messageHistory option to
https://cwiki.apache.org/confluence/display/CAMEL/ServletListener+Component",
0,CAMEL-6771,Bug,Major,2.11.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Joshua Groom,0,4,2013-09-20 06:16:57+00:00,2013-09-29 10:34:01+00:00,"We use camel 2.11.1 running on the oracle 1.7 jvm for linux.


I have a route that looks like this. It reads in files and puts them on a seda queue with 8 concurrent consumers. 



The SpatialInterpolationPojo reads each file is read and split into two messages X and Y.
The MyAggregator uses X and Y together and outputs a combined message A.B
The MySplitterPojo splits A.B into two messages A and B




from(""file://somefile"") 
    .to(""seda:filteraccept?concurrentConsumers=8""); 

from(""seda:filteraccept?concurrentConsumers=8"") 
    .split() 
    .method(new SpatialInterpolationPojo(), ""split"") 
    .to(""direct:wind-aggregator""); 

from(""direct:wind-aggregator"") 
    .aggregate(packageCorrelationId(), new MyAggregator()) 
    .completionPredicate(header(FIELD_AGGREGATION_COMPLETE).isNotNull()) 
    .split() 
    .method(new MySplitterPojo()) 
    .to(""seda:output""); 




The MySplitterPojo simply returns List<Message> containing two messages that come from data in the input message body. We copy the body headers to the result messages. 


It is thread safe, it has no state, ie there are no object fields that are modified. 


The method is like this it is edited for clarity/privacy: 



public class MySplitterPojo {

 public List<Message> splitMessage( 
            @Headers Map<String, Object> headers, 
            @Body CombinedObject body) { 
    
    DefaultMessage a = new DefaultMessage(); 
    a.setBody(body.getA()); 
    a.setHeaders(new HashMap<String, Object>(headers)); 
            
    DefaultMessage b = new DefaultMessage(); 
    b.setBody(body.getB()); 
    b.setHeaders(new HashMap<String, Object>(headers)); 
  
    ArrayList<Message> result = new ArrayList<Message>(2); 
    result.add(a); 
    result.add(b); 
    
    return result; 
 } 
}




When we run this route we very occasionally get the exception below. You can see that it is entirely within camel, it appears to be trying to copy the map stored under the exchange property Exchange.AGGREGATION_STRATEGY which is a camel internal property key. 


By inspection of the message I can see that Exchange has just come out of the WindVectorAggregator. 


This seems like it must be a camel bug to me. Any ideas? 



15 Sep 2013 23:06:47,140[Camel (camel-1) thread #21 - seda://filteraccept] WARN AggregateProcessor Error processing aggregated exchange. Exchange[Message: { Trondheim, NO=WindVector [u=-5.92894983291626, v=7.060009002685547], ... }]. Caused by: [java.util.ConcurrentModificationException - null] 
java.util.ConcurrentModificationException 
        at java.util.HashMap$HashIterator.nextEntry(Unknown Source) 
        at java.util.HashMap$EntryIterator.next(Unknown Source) 
        at java.util.HashMap$EntryIterator.next(Unknown Source) 
        at java.util.HashMap.putAllForCreate(Unknown Source) 
        at java.util.HashMap.<init>(Unknown Source) 
        at org.apache.camel.processor.MulticastProcessor.setAggregationStrategyOnExchange(MulticastProcessor.java:1011) 
        at org.apache.camel.processor.Splitter.process(Splitter.java:95) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) 
        at org.apache.camel.processor.aggregate.AggregateProcessor$1.run(AggregateProcessor.java:495) 
        at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source) 
        at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source) 
        at java.util.concurrent.FutureTask.run(Unknown Source) 
        at org.apache.camel.util.concurrent.SynchronousExecutorService.execute(SynchronousExecutorService.java:62) 
        at java.util.concurrent.AbstractExecutorService.submit(Unknown Source) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.onSubmitCompletion(AggregateProcessor.java:487) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.onCompletion(AggregateProcessor.java:471) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:325) 
        at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:229) 
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:571) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:504) 
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:213) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:151) 
        at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:285) 
        at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:251) 
        at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:161) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) 
        at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) 
        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:571) 
        at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:504) 
        at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:213) 
        at org.apache.camel.processor.Splitter.process(Splitter.java:98) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391) 
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:117) 
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) 
        at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) 
        at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) 
        at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) 
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) 
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) 
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) 
        at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:294) 
        at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:203) 
        at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:150) 
        at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) 
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) 
        at java.lang.Thread.run(Unknown Source)","ceposta:1379928945:2013-09-23T17:35:45.594+0000:1379928945:2013-09-23T17:35:45.594+0000:It would be best to recreate this. Can you post an isolated test case that reproduces this?

Or you can take a look at the test I hacked together here and get it to fail w/  your use case:

https://github.com/christian-posta/camel-sandbox/blob/master/camel-2.11.1-issues/src/test/java/posta/Camel6771Test.java


ceposta:1379930745:2013-09-23T18:05:45.367+0000:1379930745:2013-09-23T18:05:45.367+0000:btw... also give a try w/ java 1.6.. curious if that plays a role
ceposta:1379938475:2013-09-23T20:14:35.134+0000:1379938475:2013-09-23T20:14:35.134+0000:CAMEL-5704 also demonstrates nested split issues.
jwcarman:1380356703:2013-09-28T16:25:03.839+0000:1380356703:2013-09-28T16:25:03.839+0000:This should fix the problem.  I was having trouble creating a unit test that reliably reproduces the issue, so I didn't include it in this patch.  Basically, instead of using a HashMap, I'm using a ConcurrentHashMap to store the MulticastProcessor -> AggreationStrategy map.
davsclaus:1380422041:2013-09-29T10:34:01.470+0000:1380422041:2013-09-29T10:34:01.470+0000:Thanks for the patch."
0,CAMEL-6770,Bug,Major,2.12.1,2.12.2,"
None
",Resolved,Fixed,2.12.2,Claus Ibsen,Claus Ibsen,0,2,2013-09-19 11:10:55+00:00,2013-09-24 09:55:07+00:00,"After Restlet 2.1.4 upgrade we have a problem with this test in tests/camel-itest


mvn test -Dtest=RestletDomainServiceTest


It looks like the 2nd restlet call takes a long time and doesn't signal back when its done.


Also we should make it easier to configure a connection / request timeout as well.","bvahdat:1379740592:2013-09-21T13:16:32.166+0000:1379740592:2013-09-21T13:16:32.166+0000:This problem arised as a side effect of [this commit|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=99b40bd7]. I just committed a fix for this. If you would now do a {{""mvm clean install -Pfastinstall""}} for {{""camel-restlet""}} then the test should pass again.

As the dependency scope for {{""org.restlet.ext.httpclient""}} was set to {{test}} we didn't have it on the classpath through which the Apache HTTP client would start up to process the HTTP request through ProducerTemplate of this test.
davsclaus:1379987707:2013-09-24T09:55:07.482+0000:1379987707:2013-09-24T09:55:07.482+0000:Thanks"
0,CAMEL-6769,Improvement,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,2,2013-09-19 08:59:22+00:00,2013-09-30 13:07:07+00:00,"See nabble
http://camel.465427.n5.nabble.com/Proper-way-to-initialize-Transaction-management-for-Camel-in-an-Application-Server-tp5739760.html


We should implement the methods that return empty set. So it would work in the situation from the link",
0,CAMEL-6768,Improvement,Minor,None,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Claus Ibsen,0,2,2013-09-19 08:11:18+00:00,2019-07-31 04:25:51+00:00,"See
http://stackoverflow.com/questions/18874641/add-string-to-camel-exchange-header-from-route?noredirect=1#comment27863978_18874641


We could have an attribute mandatory = true, which is default true for these bean parameter annotations. Then people can set it to false, if a @Header is not mandatory (eg do not fail if the header is not present).","jwcarman:1380352873:2013-09-28T15:21:13.551+0000:1380352873:2013-09-28T15:21:13.551+0000:We don't want to change the existing behavior, correct?  I believe the current behavior for @Header would be equivalent to the mandatory = false case.  
davsclaus:1380422191:2013-09-29T10:36:31.194+0000:1380422191:2013-09-29T10:36:31.194+0000:Yeah current behavior should be preserved. 
jwcarman:1380634658:2013-10-01T21:37:38.366+0000:1380634658:2013-10-01T21:37:38.366+0000:We should probably change the attribute name, depending on the default case?

davsclaus:1380666597:2013-10-02T06:29:57.898+0000:1380666597:2013-10-02T06:29:57.898+0000:There may be an issue with have only 1 attribute and then having 2+ in an annotation. If you have 1 attribute you dont have to specify the name. But having 2 you may have to specify both. Though not exactly sure whats the story is, or if you can name one of  the attributes as value and that would be the non-named attribute.

jwcarman:1380667171:2013-10-02T06:39:31.778+0000:1380667171:2013-10-02T06:39:31.778+0000:I don't mean we would have two different attributes on each annotation. I mean we would use a different attribute name for these specific cases.  For instance, since the @Header is optional already, perhaps it gets a new attribute named ""required"" and you would set that to true to change the default behavior.  For @Body, the attribute name would be called ""optional"" and you would again set that to true to change the default behavior.  Just a thought.  
davsclaus:1436567870:2015-07-11T06:37:50.682+0000:1436567870:2015-07-11T06:37:50.682+0000:The problem is that

public @interface Header {
    String value();
}

Is a single value so you can just do @Header(""foo"") but if you add another option like

public @interface Header {
    String value();
    boolean required() default false;
}

Then you must specify the header as @Header(value = ""foo"") or change the name of value to name

public @interface Header {
    String name();
    boolean required() default false;
}

so you can do @Header(name = ""foo"")

In all cases its a api breaking change, and also its more verbose.
"
0,CAMEL-6767,Bug,Major,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Dan Revel,0,3,2013-09-18 19:21:24+00:00,2013-10-10 13:29:22+00:00,"Consuming from a rabbitmq endpoint uri that is configured to autoAck generates errors and fails.


Example URI: rabbitmq://localhost:5672/test?autoAck=true&queue=test&autoDelete=false&username=guest&password=guest


Here's the relevant log output:


12:19:03.746  -  osis-ht TRACE o.a.c.c.rabbitmq.RabbitMQConsumer - Acknowleding receipt [delivery_tag=10]
12:19:03.747  -  osis-ht WARN  o.a.c.c.rabbitmq.RabbitMQConsumer - Error processing exchange. Exchange[Message: WTF-9-1379531943713]. Caused by: [com.rabbitmq.client.AlreadyClosedException - clean connection shutdown; reason: Attempt to use closed channel]
com.rabbitmq.client.AlreadyClosedException: clean connection shutdown; reason: Attempt to use closed channel
	at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:190) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:291) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:285) ~[amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:907) ~[amqp-client-3.1.3.jar:na]
	at org.apache.camel.component.rabbitmq.RabbitMQConsumer$RabbitConsumer.handleDelivery(RabbitMQConsumer.java:126) ~[camel-rabbitmq-2.12.0.jar:2.12.0]
	at com.rabbitmq.client.impl.ConsumerDispatcher$4.run(ConsumerDispatcher.java:121) [amqp-client-3.1.3.jar:na]
	at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:76) [amqp-client-3.1.3.jar:na]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_21]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_21]
	at java.lang.Thread.run(Thread.java:722) [na:1.7.0_21]","danrevel@yahoo.com:1379503376:2013-09-18T19:22:56.546+0000:1379503376:2013-09-18T19:22:56.546+0000:Consumer should not send basicAck on channels that are doing autoAck.
davsclaus:1380592070:2013-10-01T09:47:50.106+0000:1380592070:2013-10-01T09:47:50.106+0000:Thanks for the patch.
FergusN:1381373795:2013-10-10T10:56:35.131+0000:1381373795:2013-10-10T10:56:35.131+0000:Note that the patch is broken. The logic is wrong. From the comment above from Dan - ""Consumer should not send basicAck on channels that are doing autoAck."" the logic below is missing the not. Needs a ! added to the if.

+                if (consumer.endpoint.isAutoAck()) {
+                    log.trace(""Acknowledging receipt [delivery_tag={}]"", deliveryTag);
+                    channel.basicAck(deliveryTag, false);
+                }
 
davsclaus:1381379972:2013-10-10T12:39:32.812+0000:1381379972:2013-10-10T12:39:32.812+0000:Yeah it seems to make sense to only ack if auto ack is disabled.
FergusN:1381381196:2013-10-10T12:59:56.809+0000:1381381204:2013-10-10T13:00:04.614+0000:Pull request - https://github.com/apache/camel/pull/48
davsclaus:1381382962:2013-10-10T13:29:22.041+0000:1381382962:2013-10-10T13:29:22.041+0000:Thanks"
0,CAMEL-6766,Improvement,Major,"2.11.1, 2.12.0","2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-18 14:34:28+00:00,2013-09-18 15:16:23+00:00,"InterceptFrom does not support property placeholders. We should add support for that.


See
http://camel.465427.n5.nabble.com/Usage-of-property-placeholders-in-the-interceptFrom-String-method-calls-tp5739273.html",
0,CAMEL-6765,Improvement,Major,None,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-18 10:15:54+00:00,2013-09-18 10:49:48+00:00,"Needed for CAMEL-6403 to allow the consumer to setup the UoW with all details. The route id was the last missing detail, and we need that from the Route.",
0,CAMEL-6764,Improvement,Major,"2.11.1, 2.12.0","2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-18 08:55:29+00:00,2013-09-18 09:23:11+00:00,"Getting the JMSXUserID does not work with ActiveMQ. As the option can only be retrieved using getStringProperty as we already do for JMSXGroupID.


We should add similar workaround for JMSXUserID",
0,CAMEL-6763,Improvement,Major,None,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-18 08:02:16+00:00,2013-09-18 08:05:20+00:00,"Related to CAMEL-6729


We should introduce a configurePollingConsumer method they should use instead of configureConsumer. Then we can filter out unsupported options for polling consumer vs regular consumer.",
0,CAMEL-6762,Bug,Major,2.12.0,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-09-17 07:28:30+00:00,2013-09-17 07:46:09+00:00,"Here is the user complain.
It is caused by the patch of CAMEL-6296 which override the setting of HttpConnectionManagerParams.",njiang:1379375169:2013-09-17T07:46:09.899+0000:1379375169:2013-09-17T07:46:09.899+0000:Applied the patch into trunk and camel-2.12.x branches.
0,CAMEL-6761,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.12.1, 2.13.0",Jonathan Anstey,Jonathan Anstey,0,2,2013-09-17 02:15:06+00:00,2013-09-17 13:40:59+00:00,No Desc,"muellerc:1379376419:2013-09-17T08:06:59.321+0000:1379376419:2013-09-17T08:06:59.321+0000:features cmueller$ mvn clean install -Pvalidate
...

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.096s
[INFO] Finished at: Tue Sep 17 10:02:43 CEST 2013
[INFO] Final Memory: 28M/529M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.3.2:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceRelease/camel/platforms/karaf/features/target/classes/features.xml: mvn:http://maven.restlet.org!org.restlet.jse/org.restlet/2.1.4 is not an OSGi bundle
muellerc:1379376930:2013-09-17T08:15:30.789+0000:1379376930:2013-09-17T08:15:30.789+0000:using wrap:mvn:... is a workaround.
muellerc:1379382134:2013-09-17T09:42:14.876+0000:1379382134:2013-09-17T09:42:14.876+0000:Restlet provides OSGI bundles in separate artifacts. Using org.restlet.osgi/org.restlet/2.1.4 solved the problem.
janstey:1379396459:2013-09-17T13:40:59.946+0000:1379396459:2013-09-17T13:40:59.946+0000:Thanks Christian. Didn't notice at all that they split out the OSGi bundle for 2.1."
0,CAMEL-6760,Improvement,Minor,2.12.0,"2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Willem Jiang,Ievgen Tarasov,0,2,2013-09-17 00:26:30+00:00,2013-09-17 14:41:15+00:00,"Currently, during startup CamelBlueprintTestSupport waits 30 sec for Camel Context to be ready. Sometimes (quite often for us) this time is not enough even when everything goes well. The value of 30 seconds cannot be easily changed now. The patch that Ive prepared introduces possibility to customize this value, in two ways:



Globally, by setting org.apache.camel.test.blueprint.camelContextCreationTimeout system property.
Locally for each test, by overriding getCamelContextCreationTimeout method.



In both cases timeout is set in milliseconds.","njiang:1379360869:2013-09-17T03:47:49.258+0000:1379360943:2013-09-17T03:49:03.091+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Eugene.
I also updated the blueprint test wiki page for this new feature.
eugene.tarasov:1379400075:2013-09-17T14:41:15.593+0000:1379400075:2013-09-17T14:41:15.593+0000:Thanks a lot, Willem!"
0,CAMEL-6759,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Hrvoje Mustapic,0,2,2013-09-16 21:12:45+00:00,2013-09-17 11:57:01+00:00,"Check the user forum post here:
http://camel.465427.n5.nabble.com/camel-hazelcast-CamelEntryListener-limits-usage-of-Hazelcast-maps-td5739340.html


The component camel-hazelcast works just with Hazelcast maps and multimaps which have the key type String.


Cause: The class org.apache.camel.component.hazelcast.listener.CamelEntryListener within the module camel-hazelcast implements com.hazelcast.core.EntryListener<String,Object>. This Listener can just be registered to com.hazelcast.core.IMap<K,V> with key type String.


Fix: change CamelEntryListener to extend EntryListener<Object,Object>","davsclaus:1379380321:2013-09-17T09:12:01.142+0000:1379380321:2013-09-17T09:12:01.142+0000:API changes to go from String -> Object. So maybe we should stick this to 2.13 only?
davsclaus:1379390221:2013-09-17T11:57:01.850+0000:1379390221:2013-09-17T11:57:01.850+0000:Thanks for the patch."
0,CAMEL-6758,Bug,Minor,2.12.0,"2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Unassigned,Marios Trivyzas,0,2,2013-09-16 19:27:27+00:00,2013-10-30 13:35:29+00:00,"NullPointer exception in SjmsComponent when trying to remove it from camel context:


2013-09-16 11:51:54,201 [WARN] org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:388):org.apache.camel.spring.SpringCamelContext: Error stopping component org.apache.camel.component.sjms.SjmsComponent@232560ec. This exception will be ignored.
java.lang.NullPointerException
	at org.apache.camel.component.sjms.SjmsComponent.doStop(SjmsComponent.java:143)
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:116)
	at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:1902)
	at org.apache.camel.impl.DefaultCamelContext.removeComponent(DefaultCamelContext.java:386)",muellerc:1379333482:2013-09-16T20:11:22.323+0000:1379333482:2013-09-16T20:11:22.323+0000:Thanks for reporting Marios!
0,CAMEL-6757,Bug,Minor,2.11.1,"2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Willem Jiang,Guy Burton,0,2,2013-09-16 16:37:37+00:00,2013-09-17 07:47:00+00:00,"The SCP component does not currently do anything with the StrictHostKeyChecking option, as documented. The attached patch fixes this (no test case I'm afraid).","njiang:1379359006:2013-09-17T03:16:46.659+0000:1379359006:2013-09-17T03:16:46.659+0000:I just did quick search about the StrictHostKeyChecking
{code}
StrictHostKeyChecking: ask | yes | no
default: ask
  If this property is set to ``yes'', jsch will never automatically add
  host keys to the $HOME/.ssh/known_hosts file, and refuses to connect
  to hosts whose host key has changed.  This property forces the user
  to manually add all new hosts.  If this property is set to ``no'', 
  jsch will automatically add new host keys to the user known hosts
  files.  If this property is set to ``ask'', new  host keys will be
  added to the user known host files only after the user has confirmed 
  that is what they really want to do, and jsch will refuse to connect 
  to hosts whose host key has changed.
{code}
njiang:1379375220:2013-09-17T07:47:00.770+0000:1379375220:2013-09-17T07:47:00.770+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6756,Bug,Major,2.12.0,,"
None
",Resolved,Won't Fix,None,Willem Jiang,John Yin,0,3,2013-09-16 15:46:45+00:00,2013-10-12 10:18:18+00:00,"When the following route encounters an AmbiguousMethodCallException in calling bean:converter, the file that causing this problem cannot be renamed/deleted by the File consumer.  The same file would then be processed and result the same error over and over again.


<camel:route id=""route-process-row"">
   <camel:from uri=""file:src/data/rowfile"" />
   <camel:to uri=""bean:converter"" />
   <camel:onException>               <camel:exception>org.apache.camel.component.bean.AmbiguousMethodCallException</camel:exception>
      <camel:handled><constant>true</constant></camel:handled>
      <camel:log message=""*** Exception caught ***"" />
   </camel:onException>
</camel:route>","njiang:1379353143:2013-09-17T01:39:03.484+0000:1379353303:2013-09-17T01:41:43.342+0000:If the Exception is keeping throwing from method calling of bean, you cannot stop it by catching the exception.

Can we have look at your converter bean?

I just applied a patch for CAMEL-6752, I'm not sure if it fixed your issue.
Maybe you can verify it by checking out the latest Camel-2.12.1-SNAPSHOT.
bocamel:1379354692:2013-09-17T02:04:52.382+0000:1379354692:2013-09-17T02:04:52.382+0000:Hi Willem,

Here is the bean that we used for the test.  Please note that I do not think Camel had actually called the bean because it did not know which method to call.  Also the infinite failure loop was because the File consumer tried to rename/delete the file (after the exception was caught by onException in the route), but the File consumer failed to rename/delete the file.  Therefore the file was picked up again by the consumer, and the route failed again due to the AmbiguousMethodCallException, and repeats itself.  Of course, I can easily add the method name to the URI as an option to avoid the AmbiguousMethodCallException.  Thanks for looking into this.

package com.pci.testpoi;

import java.io.File;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.GregorianCalendar;
import java.util.List;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Path;
import org.apache.commons.*;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
//import javax.xml.datatype.DatatypeFactory;
import org.apache.camel.Body;
import org.apache.camel.Header;
import externaldoc.ExternalDoc;
import externaldoc.ExternalDoc.Doc;
import externaldoc.ExternalDoc.Doc.Data.Table.Row;
import externaldoc.ExternalDoc.Doc.Data.Table.Row.Col;
import externaldoc.ObjectFactory;
import externaldoc.NewDataSet;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.hssf.usermodel.*;

/**
 * Uses POI to convert an Excel spreadsheet to the desired JAXB XML format.
 */
public class ExcelConverterBean {
    private final static Log log = LogFactory.getLog(ExcelConverterBean.class);

    public ExternalDoc processRowExcelDoc(@Body InputStream body, @Header(""CamelFileNameOnly"") String fn) throws Exception {
        ObjectFactory factory = new ObjectFactory();
        String extension = fn.substring(fn.lastIndexOf(""."") + 1);
        Workbook workbook;
        FormulaEvaluator evaluator;
        if (extension.equalsIgnoreCase(""xls"")) {
        	workbook = new HSSFWorkbook(body);       	
        	evaluator = new HSSFFormulaEvaluator((HSSFWorkbook) workbook); 
        } else if (extension.equalsIgnoreCase(""xlsx"")){      	
          	workbook = new XSSFWorkbook(body);
          	evaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
        } else {
        	System.out.println(""Input file is not an Excel file."");
        	workbook = new XSSFWorkbook();
        	evaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
        }
        	
        Sheet sheet = workbook.getSheetAt(0);
        
        ExternalDoc extDoc = factory.createExternalDoc();
        extDoc.setDoc(factory.createExternalDocDoc());
        extDoc.getDoc().setContext(factory.createExternalDocDocContext());
        extDoc.getDoc().getContext().setRecordType(factory.createExternalDocDocContextRecordType());
        extDoc.getDoc().getContext().getRecordType().setValue(""From_Excel"");
        extDoc.getDoc().getContext().setVersion(""1"");
        extDoc.getDoc().getContext().setActions(""1"");
        extDoc.getDoc().getContext().setStatus(""1"");
        extDoc.getDoc().setData(factory.createExternalDocDocData());
        extDoc.getDoc().getData().getTable().add(factory.createExternalDocDocDataTable());
        JAXBContext jc = JAXBContext.newInstance(ExternalDoc.class);
        Marshaller msl = jc.createMarshaller();
        msl.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        msl.marshal(extDoc, System.out);
		System.out.println(""*** After jaxb ***"");
        try {
        	      	
//            DatatypeFactory dateFactory = DatatypeFactory.newInstance();
            ArrayList<String> headers = new ArrayList<String>();
            boolean headersFound = false;
            int colNum;
            for(Iterator rit = sheet.rowIterator(); rit.hasNext();) {
            	org.apache.poi.ss.usermodel.Row row = (org.apache.poi.ss.usermodel.Row) rit.next();
                if(!headersFound) {  // Skip the first row with column headers
                    headersFound = true;
                    int index = 0;
                    for(Iterator cit = row.cellIterator(); cit.hasNext(); index++) {
                    	Cell cell = (Cell) cit.next();
                    	headers.add(index, cell.getStringCellValue());
                    }
                    continue;
                }
                colNum = 0;
                ExternalDoc.Doc.Data.Table.Row tableRow = factory.createExternalDocDocDataTableRow();
                List<ExternalDoc.Doc.Data.Table.Row.Col> colList = tableRow.getCol();
                for(Iterator cit = row.cellIterator(); cit.hasNext(); ++colNum) {
                    Cell cell = (Cell) cit.next();
                    if(headersFound) {
                    	Col rowCol = factory.createExternalDocDocDataTableRowCol();
                    	switch (cell.getCellType()) {
                    	case Cell.CELL_TYPE_BLANK :    
                    		break;
                    	case Cell.CELL_TYPE_BOOLEAN :
                        	rowCol.setName(headers.get(cell.getColumnIndex()));
                        	rowCol.setVal(cell.getBooleanCellValue()==true ? ""true"" : ""false"");                    		
                        	break;
                    	case Cell.CELL_TYPE_ERROR :
                        	break;
                    	case Cell.CELL_TYPE_FORMULA  :
                        	rowCol.setName(headers.get(cell.getColumnIndex()));
                        	rowCol.setVal(String.valueOf(evaluator.evaluate(cell).formatAsString()));
                        	break;
                    	case Cell.CELL_TYPE_NUMERIC :
                        	rowCol.setName(headers.get(cell.getColumnIndex()));
                    		if (DateUtil.isCellDateFormatted(cell)) {
                               	rowCol.setVal(new SimpleDateFormat(""yyyy-MM-dd"").format(cell.getDateCellValue()));
                    		} else {
                        	//System.out.println(cell.getRowIndex() + "" "" + cell.getColumnIndex());
                    			rowCol.setVal(String.valueOf((int) cell.getNumericCellValue()));
                    		}
                        	break;
                    	case Cell.CELL_TYPE_STRING :
                        	rowCol.setName(headers.get(cell.getColumnIndex()));
                        	rowCol.setVal(cell.getStringCellValue());
                        	break;
                    	default:
                    		break;
                    	}
                    	colList.add(colNum, rowCol);
                    }
                }
                extDoc.getDoc().getData().getTable().get(0).getRow().add(tableRow);
            }
        } catch (Exception e) {
            log.error(""Unable to import Excel file"", e);
            throw new RuntimeException(""Unable to import Excel file"", e);
        }
        return extDoc;
    }

    
    public ExternalDoc processColExcelDoc(@Body InputStream body, @Header(""CamelFileNameOnly"") String fn) throws Exception {
        ObjectFactory factory = new ObjectFactory();
        String extension = fn.substring(fn.lastIndexOf(""."") + 1);
        Workbook workbook;
        FormulaEvaluator evaluator;
        if (extension.equalsIgnoreCase(""xls"")) {
        	workbook = new HSSFWorkbook(body);       	
        	evaluator = new HSSFFormulaEvaluator((HSSFWorkbook) workbook); 
        } else if (extension.equalsIgnoreCase(""xlsx"")){      	
          	workbook = new XSSFWorkbook(body);
          	evaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
        } else {
        	System.out.println(""Input file is not an Excel file."");
        	workbook = new XSSFWorkbook();
        	evaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
        }
        	
        Sheet sheet = workbook.getSheetAt(0);
        
        ExternalDoc extDoc = factory.createExternalDoc();
        extDoc.setDoc(factory.createExternalDocDoc());
        extDoc.getDoc().setContext(factory.createExternalDocDocContext());
        extDoc.getDoc().getContext().setRecordType(factory.createExternalDocDocContextRecordType());
        extDoc.getDoc().getContext().getRecordType().setValue(""From_Excel"");
        extDoc.getDoc().getContext().setVersion(""1"");
        extDoc.getDoc().getContext().setActions(""1"");
        extDoc.getDoc().getContext().setStatus(""1"");
        extDoc.getDoc().setData(factory.createExternalDocDocData());
        extDoc.getDoc().getData().getTable().add(factory.createExternalDocDocDataTable());
        try {
        	      	
//            DatatypeFactory dateFactory = DatatypeFactory.newInstance();

            boolean headersFound = false;
            int colNum = 0;
            ExternalDoc.Doc.Data.Table.Row tableRow = factory.createExternalDocDocDataTableRow();
            List<ExternalDoc.Doc.Data.Table.Row.Col> colList = tableRow.getCol();
            for(Iterator rit = sheet.rowIterator(); rit.hasNext();) {
            	org.apache.poi.ss.usermodel.Row row = (org.apache.poi.ss.usermodel.Row) rit.next();
                if(!headersFound) {  // Skip the first row with column headers
                    headersFound = true;
                    continue;
                }
                Cell cell = row.getCell(1);
                if (cell != null) {
                	Col rowCol = factory.createExternalDocDocDataTableRowCol();
                	rowCol.setName(row.getCell(0).getStringCellValue());
                	switch (cell.getCellType()) {
                	case Cell.CELL_TYPE_BLANK :    
                		break;
                	case Cell.CELL_TYPE_BOOLEAN :
                    	rowCol.setVal(cell.getBooleanCellValue()==true ? ""true"" : ""false"");                    		
                    	break;
                	case Cell.CELL_TYPE_ERROR :
                    	break;
                	case Cell.CELL_TYPE_FORMULA  :
                    	rowCol.setVal(String.valueOf(evaluator.evaluate(cell).formatAsString()));
                    	break;
                	case Cell.CELL_TYPE_NUMERIC :
                		if (DateUtil.isCellDateFormatted(cell)) {
                           	rowCol.setVal(new SimpleDateFormat(""yyyy-MM-dd"").format(cell.getDateCellValue()));
                		} else {
                    	//System.out.println(cell.getRowIndex() + "" "" + cell.getColumnIndex());
                			rowCol.setVal(String.valueOf((int) cell.getNumericCellValue()));
                		}
                    	break;
                	case Cell.CELL_TYPE_STRING :
                    	rowCol.setVal(cell.getStringCellValue());
                    	break;
                	default:
                		break;
                	}
                	colList.add(colNum++, rowCol);
                }
            }
            extDoc.getDoc().getData().getTable().get(0).getRow().add(tableRow);
        } catch (Exception e) {
            log.error(""Unable to import Excel file"", e);
            throw new RuntimeException(""Unable to import Excel file"", e);
        }
        return extDoc;
    }

}


bocamel:1379576635:2013-09-19T15:43:55.109+0000:1379576635:2013-09-19T15:43:55.109+0000:Hi Willem,

I will be glad to test the patch.  Is 2.12.1-SNAPSHOT available from a public Maven repository so I can treat it as any Camel release, or I need to download and deploy it locally myself? 


bocamel:1380275112:2013-09-27T17:45:12.318+0000:1380275112:2013-09-27T17:45:12.318+0000:I have tested on the latest 2.12.1 release and 2.11.2 release.  The problem still exists in both.


njiang:1380325388:2013-09-28T07:43:08.013+0000:1380325388:2013-09-28T07:43:08.013+0000:Can you submit a simple test case to the JIRA? I will dig the issue when I get some time.
bocamel:1380521408:2013-09-30T14:10:08.614+0000:1380521408:2013-09-30T14:10:08.614+0000:Here is a test case in Eclipse project.  It is a Camel Spring project.  Run the main in App will start the route and show the error.
njiang:1381275320:2013-10-09T07:35:20.616+0000:1381275320:2013-10-09T07:35:20.616+0000:Hi John,

I just have a quick look at the test case, the AmbiguousMethodCallException is caused by you have two method with same parameters in the MyBean class and Camel cannot tell which method it should invoke. 

You just need to add the method name like this, the AmbiguousMethodCallException will go away.
{code}
<camel:to uri=""bean:mybean?method=myMethod1"" />
{code}
bocamel:1381296405:2013-10-09T13:26:45.863+0000:1381296405:2013-10-09T13:26:45.863+0000:I knew why there was the exception. That was not what this JIRA issue was for.  I made this exception to reproduce the real issue.  The real issue was that when the exception was thrown, the Camel File component failed to delete/rename the file even when the exception is caught and handled. Because Camel File component failed to remove the file, Camel picked up the file again and thus got into an infinite loop.  I believe the correct behavior should be:

1. The exception was thrown due to ambiguous method.
2. The exception was caught and handled by onException.
3. The file was removed to .camel.
4. Camel moves on to process other files.

But in reality, the file was not removed and infinite failure loop resulted.  Is my understanding correct?

Thanks,
John


muellerc:1381320630:2013-10-09T20:10:30.290+0000:1381320630:2013-10-09T20:10:30.290+0000:Yes, your expectation is right.
njiang:1381544298:2013-10-12T10:18:18.249+0000:1381544298:2013-10-12T10:18:18.249+0000:You should avoid keeping throw exception in the route."
0,CAMEL-6755,Task,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,2,2013-09-16 15:34:48+00:00,2013-09-18 14:12:38+00:00,"This example has some OSGi pieces in it, but it confuses more than it helps.
We should make the example plain non-OSGi.","davsclaus:1379484118:2013-09-18T14:01:58.656+0000:1379484118:2013-09-18T14:01:58.656+0000:The pom.xml file needs fixes as well, it should just be <packaging>jar</packaging> and then all those OSGi stuff also removed.
sachin.handiekar:1379484121:2013-09-18T14:02:01.465+0000:1379484121:2013-09-18T14:02:01.465+0000:Hi,

Please find attached the patch file.

Let me know if there is anything needs to be changed.

Sachin
sachin.handiekar:1379484307:2013-09-18T14:05:07.410+0000:1379484307:2013-09-18T14:05:07.410+0000:I've fixed the pom.xml.
davsclaus:1379484758:2013-09-18T14:12:38.247+0000:1379484758:2013-09-18T14:12:38.247+0000:Thanks for the patches."
0,CAMEL-6754,Improvement,Minor,2.12.0,"2.12.1, 2.13.0","

patch
test

",Resolved,Fixed,"2.12.1, 2.13.0",Willem Jiang,Alessandro Rontani,0,2,2013-09-15 21:00:53+00:00,2013-09-16 07:42:05+00:00,"When locale is set to a language different from english (for example italian), the unit test in org.apache.camel.util.UnitUtilsTest fail, because in the italian locale the decimal separator is the comma, not the dot.


The test compare the results of printUnitFromBytes to static strings formatted with the dot, and in an italian locale fails because it espects ""1.0"" and get instead ""1,0"".


I have patched the test code to make it works in every locale (building the expected results with the current locale decimal separator), and i have attached the patch to this issue.","steeltanuki:1379250110:2013-09-15T21:01:50.969+0000:1379250110:2013-09-15T21:01:50.969+0000:the patch resolving this issue
njiang:1379288191:2013-09-16T07:36:31.583+0000:1379288525:2013-09-16T07:42:05.086+0000:Applied the path into master and camel-2.12.x branches with thanks to Alessandro."
0,CAMEL-6753,Bug,Major,"2.11.0, 2.12.0","2.11.2, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.2, 2.13.0",Willem Jiang,Shay matasaro,0,2,2013-09-15 19:10:24+00:00,2013-09-24 09:59:16+00:00,"when using Camel-CDI with Weld SE 2.0 , the extension fails to load 


org.jboss.weld.exceptions.DefinitionException: WELD-001106 BeanAttributes.getStereotypes() returned null for org.apache.camel.cdi.internal.CamelContextBean@19acc826
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.checkNull(ExternalBeanAttributesFactory.java:109)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:76)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:69)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:83)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:77)
	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:274)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:121)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:261)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:240)
	at org.jboss.weld.event.ObserverNotifier.notifyObserver(ObserverNotifier.java:171)
	at org.jboss.weld.event.ObserverNotifier.notifyObservers(ObserverNotifier.java:130)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:104)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:63)
	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:35)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:58)
	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:517)
	at org.jboss.weld.bootstrap.api.helpers.ForwardingBootstrap.deployBeans(ForwardingBootstrap.java:63)
	at org.jboss.weld.environment.se.Weld.initialize(Weld.java:143)","shay_matasaro:1379243487:2013-09-15T19:11:27.919+0000:1379243487:2013-09-15T19:11:27.919+0000:this is due to the fact that CamelBeanContext return null for getStereotypes, it should return an empty set
shay_matasaro:1379247440:2013-09-15T20:17:20.696+0000:1379247440:2013-09-15T20:17:20.696+0000:https://github.com/apache/camel/pull/44
davsclaus:1379291679:2013-09-16T08:34:39.610+0000:1379291679:2013-09-16T08:34:39.610+0000:Should a new set be returned or can you return a Collections.EMPTY_SET instead?
shay_matasaro:1379305215:2013-09-16T12:20:15.860+0000:1379305215:2013-09-16T12:20:15.860+0000:I'll check the code to see if an EMPTY_SET would work also
should the fix be also ported back to 2.12 and 2.11?
davsclaus:1379305367:2013-09-16T12:22:47.954+0000:1379305367:2013-09-16T12:22:47.954+0000:Your patch has been applied to master, 2.12, and 2.11 branches."
0,CAMEL-6752,Bug,Minor,2.11.1,"2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Willem Jiang,Guy Burton,0,2,2013-09-15 19:02:04+00:00,2013-09-16 07:37:54+00:00,"Attached is a patch and test case for an issue in the bean binding code which prevents binding to an overloaded method with a covariant return type from the base class. 


The fix is to check for method covariance at the last moment before throwing AmbiguousMethodCallException. If all methods remaining are covariant, any one of them can be called. Unfortunately this happens in 3 places in the code- if we pre-filtered the list of methods then we could lose annotations on either of the method signature which could be problematic depending on the resolution type.","guy127917:1379243928:2013-09-15T19:18:48.797+0000:1379243928:2013-09-15T19:18:48.797+0000:Apologies- initial patch had failing tests, will post correct one shortly.
njiang:1379288258:2013-09-16T07:37:38.331+0000:1379288274:2013-09-16T07:37:54.868+0000:Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Guy."
0,CAMEL-6751,Task,Major,2.12.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Christian Müller,0,3,2013-09-15 17:16:10+00:00,2013-09-17 07:46:44+00:00,"Apache CXF 2.7.7 is using Jetty 8.1.12.v20130726
Apache Karaf 3.0.0-TRUNK is using Jetty 8.1.9.x","njiang:1379287297:2013-09-16T07:21:37.257+0000:1379287297:2013-09-16T07:21:37.257+0000:Jetty 8.1.x needs to use Servlet 3.0 API jar, we need to upgrade the servlet API from 2.5 to 3.0 first.
davsclaus:1379317097:2013-09-16T15:38:17.920+0000:1379317097:2013-09-16T15:38:17.920+0000:We should add this to the release notes: http://camel.apache.org/camel-2130-release.html
njiang:1379353696:2013-09-17T01:48:16.228+0000:1379353696:2013-09-17T01:48:16.228+0000:I just updated the released note.
davsclaus:1379374786:2013-09-17T07:39:46.848+0000:1379374786:2013-09-17T07:39:46.848+0000:What about Karaf 2.x with Servlet 3.0? Do we get in problems there?
njiang:1379375091:2013-09-17T07:44:51.153+0000:1379375091:2013-09-17T07:44:51.153+0000:As you know the servlet API is backward compatible, all the camel-http* code are not using the new feature of Servlet 3.0, so it should support servlet API 2.5 and servlet API 3.0 at the same time.
If we deploy the camel-http* feature into Karaf which provide servlet 2.5 API or servlet 3.0 in the runtime, camel-http* should work out of box.
muellerc:1379375204:2013-09-17T07:46:44.627+0000:1379375204:2013-09-17T07:46:44.627+0000:I think Karaf 3.x should be available in the next 6 month (our normal schedule for a new minor Camel version)."
0,CAMEL-6750,Bug,Minor,"2.11.1, 2.12.0","2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Claus Ibsen,Mariusz Kowalczyk,0,2,2013-09-15 10:55:47+00:00,2013-09-16 15:36:48+00:00,"Camel throws GenericFileOperationFailedException for example route:


 <route>
 <from uri=""file:source?delete=true&readLock=fileLock""/>
 <process ref=""processor""/>
 </route>


See on forum:
http://camel.465427.n5.nabble.com/GenericFileOperationFailedException-for-file-deletion-td5739382.html",davsclaus:1379317008:2013-09-16T15:36:48.596+0000:1379317008:2013-09-16T15:36:48.596+0000:Thanks for reporting. The fileLock is now released eager so the file can be deleted.
0,CAMEL-6749,Improvement,Major,2.12.0,None,"
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-15 08:26:40+00:00,2013-09-15 08:28:53+00:00,It uses the TCCL to load the templates. We should use the App CL which then would allow to better load templates from OSGi.,
0,CAMEL-6717,Bug,Major,2.11.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Ralf Kornberger,0,4,2013-09-09 11:58:19+00:00,2014-03-05 13:10:26+00:00,"I'm using Apache Camel with MQTT to fetch data from a Mosquitto broker. Data are published there at high
frequency (< 10s) by serveral devices. After receiving the data, I send an acknowlege message back. This is done by publishing a message
to a topic for each device. I'm using the Fusesource MQTT Client (version 2.5) for this.
I encountered the following problem: after some time (can be 15 minutes up to 1 day) some thing ""weird"" happens.
The application stops receiving or sending any data via MQTT. Looking at it with jstack reveals the following:


""hawtdispatch-DEFAULT-2"" daemon prio=10 tid=0x00007facc1a2f000 nid=0x782d waiting on condition [0x00007fac42bcf000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)



parking to wait for  <0x000000078e792b88> (a java.util.concurrent.CountDownLatch$Sync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:156)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:811)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:969)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1281)
	at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:207)
	at org.fusesource.mqtt.client.Promise.await(Promise.java:88)
	at org.fusesource.mqtt.client.BlockingConnection.publish(BlockingConnection.java:73)
	at org.fusesource.mqtt.client.BlockingConnection.publish(BlockingConnection.java:82)
	at net.centersight.plugins.agent.protomqtt.comm.MQTTManager.sendACKMessage(MQTTManager.java:92)
	at net.centersight.plugins.agent.protomqtt.comm.MQTTCommunication.sendACKMessage(MQTTCommunication.java:116)
	at net.centersight.plugins.agent.protomqtt.camel.AgentMQTTbatchACKer.process(AgentMQTTbatchACKer.java:47)
	at sun.reflect.GeneratedMethodAccessor101.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:341)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:238)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.component.mqtt.MQTTConsumer.processExchange(MQTTConsumer.java:46)
	at org.apache.camel.component.mqtt.MQTTEndpoint$1.onPublish(MQTTEndpoint.java:88)
	at org.fusesource.mqtt.client.CallbackConnection.toReceiver(CallbackConnection.java:815)
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:732)
	at org.fusesource.mqtt.client.CallbackConnection.access$17(CallbackConnection.java:727)
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:660)
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:538)
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:226)
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:96)
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)



   Locked ownable synchronizers:



None



Appearently, both the Camel receiving thread and the Fusesource client thread are hanging at
at org.fusesource.mqtt.client.Promise.await(Promise.java:88)


Since I use BlockingConnection in my sending client, I took a look at the Fusesource MQTT client.
In BlockingConnection.java, function 
public void publish(final UTF8Buffer topic, final Buffer payload, final QoS qos, final boolean retain) throws Exception 


in line 80, a Future is received on publishing. And there is an await() afterwards.
When I change this await() to await(30L, TimeUnit.SECONDS), the problem still occurs, but the application keeps working.
I've put in debug printouts at the trace class which show me that at the time the problem occurs the MQTT client seems to loose the connection to the broker and tries to reestablish it. Debug logs also show that the timeout exception throw by the timeouted await comes every minute for ca. 20 minutes. Then the problem ""vanishes"" and comes again after serval hours.


Ps.: I also posted this at github, in the Fusesource MQTT issue tracker:
https://github.com/fusesource/mqtt-client/issues/21#issuecomment-23861700","muellerc:1378731579:2013-09-09T20:59:39.720+0000:1378731579:2013-09-09T20:59:39.720+0000:I think this issue has to be fixed on the mqtt-client site.
davsclaus:1380591813:2013-10-01T09:43:33.066+0000:1380591813:2013-10-01T09:43:33.066+0000:Yes its a bug in 3rd party library
https://github.com/fusesource/mqtt-client/issues/23
ralfkornberger:1381105120:2013-10-07T08:18:40.909+0000:1381105120:2013-10-07T08:18:40.909+0000:Ok, now we have cyclic references between Apache Camel here and MQTT Client on GitHub . ;-) Thats's fine, but what next? I've tried to get close to the problem, but without real success. So, does anyone have an idea where to start? 
davsclaus:1390893472:2014-01-28T15:17:52.995+0000:1390893472:2014-01-28T15:17:52.995+0000:The word on the street is that this should be fixed in MQTT 1.7 client.
ralfkornberger:1393996226:2014-03-05T13:10:26.456+0000:1393996226:2014-03-05T13:10:26.456+0000:Thanks. I think it working :-) I haven't had a deadlock so far ...."
0,CAMEL-6716,Bug,Minor,2.12.0,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Willem Jiang,Ondrej Fischer,0,5,2013-09-09 10:56:44+00:00,2014-05-20 06:09:50+00:00,"I you attempt to create a ServiceInterfaceStrategy with interface containing multiple methods without parameters, you get NullPointerException.


It's due to following code:
ServiceInterfaceStrategy.java:161



155    private void analyzeServiceInterface(Class<?> serviceInterface) {
156        Method[] methods = serviceInterface.getMethods();
157        for (Method method : methods) {
158            MethodInfo info = analyzeMethod(method);
159            for (int i = 0; i < info.getIn().length; i++) {
160                TypeInfo ti = info.getIn()[i];
161                if (inTypeNameToQName.containsKey(ti.getTypeName())
162                    && (!(ti.getTypeName().equals(""javax.xml.ws.Holder"")))
163                    && (!(inTypeNameToQName.get(ti.getTypeName()).equals(ti.getElName())))) {
164                    LOG.warn(""Ambiguous QName mapping. The type [ ""
165                                                    + ti.getTypeName()
166                                                    + "" ] is already mapped to a QName in this context."");
167                    continue;
168                }
169                inTypeNameToQName.put(ti.getTypeName(), ti.getElName());
170            }
171            if (info.getSoapAction() != null && !"""".equals172(info.getSoapAction())) {
172                soapActionToMethodInfo.put(info.getSoapAction(), info);
173            }
174
175            outTypeNameToQName.put(info.getOut().getTypeName(), info.getOut().getElName());
176
177            addExceptions(method);
178        }
179    }




For the second method without parameters, the null value is already in the inTypeNameToQName, so it tries to evaluate this: !(ti.getTypeName().equals(""javax.xml.ws.Holder""), which fails with NPE.


The question here is, why method without parameters still needs an array of types containing one element with those null values.","davsclaus:1378859032:2013-09-11T08:23:52.955+0000:1378859032:2013-09-11T08:23:52.955+0000:Patches is welcome
githubbot:1399724155:2014-05-10T20:15:55.087+0000:1399724155:2014-05-10T20:15:55.087+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/147

    [CAMEL-6716] ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

    Hi all,
    
    This pull requeste is related to:
    https://issues.apache.org/jira/browse/CAMEL-6716
    
    I've added a second method without parameter in the customerservice.wsdl and add an assert in the **testServiceInterfaceStrategyWithClient** method of **ServiceInterfaceStrategyTest** Test class.
    
    Hope this should be useful and it will be merged.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-6716-serviceinterfacestrategyfix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #147
    
----
commit 7b96bde38f16b4c42af543d9a3d4b94913af26f3
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:06:02Z

    Added new Properties Component Test related to concatenation of properties. First test fails because of unsupported parsing properties.

commit 8fe696c02738baaf4d299a01386a4018c1e0c6e4
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:14:56Z

    Reload Pom.xml

commit 6e59877da99ef208e699284c05221f0c318e1c33
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-10T15:48:13Z

    Fixes Camel-6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

commit d551e36d0c484d6e8603fda73da0d08aea7618e3
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-10T20:06:34Z

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

----

githubbot:1399727292:2014-05-10T21:08:12.085+0000:1399727292:2014-05-10T21:08:12.085+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/147

githubbot:1399727373:2014-05-10T21:09:33.174+0000:1399727373:2014-05-10T21:09:33.174+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/148

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

    Hi all,
    
    This pull requeste is related to:
    https://issues.apache.org/jira/browse/CAMEL-6716
    
    I've added a second method without parameter in the customerservice.wsdl and add an assert in the **testServiceInterfaceStrategyWithClient** method of **ServiceInterfaceStrategyTest** Test class.
    
    Hope this should be useful and it will be merged.
    
    P.S.: I've closed the other pull request and submitted this new one.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-6716-serviceinterfacestrategy

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/148.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #148
    
----
commit 493d725ed30b012590622e812cab9d0282e60964
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-09T10:06:02Z

    Fixes 6716: ServiceInterfaceStrategy fails to create with interface containing multiple methods without parameters

----

acosentino:1399727518:2014-05-10T21:11:58.269+0000:1399727518:2014-05-10T21:11:58.269+0000:Sorry for this two pull request. I've close the first one, and submitted a new one.

Hope it should be helpful.
njiang:1399962257:2014-05-13T14:24:17.687+0000:1399962257:2014-05-13T14:24:17.687+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Andrea
githubbot:1400537390:2014-05-20T06:09:50.032+0000:1400537390:2014-05-20T06:09:50.032+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/148
"
0,CAMEL-6715,Improvement,Major,"2.11.2, 2.12.0","3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Ievgen Tarasov,0,3,2013-09-08 19:57:57+00:00,2019-08-05 12:58:39+00:00,"In a test made with camel-test-blueprint, and where there is more than one Camel context per Bundle, only one of them gets started. Actually this problem was introduced with the fix for CAMEL-6524. Before the fix every Camel Context would be started after it was created. Now only a context which is ""associated"" with the test is getting started.


For camel-test-spring there is a similar problem. Though it looks to me that in spring multiple contexts didnt work even before CAMEL-6524.


I've attached a patch that introduces a simple junit test for this problem (for both blueprint and spring).","davsclaus:1378714928:2013-09-09T16:22:08.879+0000:1378714928:2013-09-09T16:22:08.879+0000:This is not intended for the camel-test to support multiple contexts in the same unit test. The CamelTestSupport classes is intended for a single CamelContext.


davsclaus:1378714970:2013-09-09T16:22:50.669+0000:1378714970:2013-09-09T16:22:50.669+0000:Though we should likely have CamelTestSupport to check if there is 1 camelContext and if not fail with some error indicating this.
eugene.tarasov:1379348068:2013-09-17T00:14:28.176+0000:1379348068:2013-09-17T00:14:28.176+0000:Yes, that would be great. Also, I think it would be helpful to update documentation with this info. I mean these pages:
http://camel.apache.org/blueprint-testing.html
http://camel.apache.org/spring-testing.html

For blueprint-testing.html something like this could be added after words ""you can specify them with a comma-separated list in the getBlueprintDescriptor method."":
bq. However, only *one* of them can have a Camel Context (i.e. there can be only one Camel Context per test bundle).

For spring-testing.html I dont see so obvious please where it can be added. Maybe a _note_ at the end of ""CamelSpringTestSupport"" section. Something like:
bq. Only one Camel Context per test is supported.

davsclaus:1564981119:2019-08-05T12:58:39.725+0000:1564981119:2019-08-05T12:58:39.725+0000:Updated the docs"
0,CAMEL-6714,Bug,Major,2.12.0,None,"
None
",Resolved,Fixed,"2.12.1, 2.13.0",Christian Müller,Christian Müller,0,1,2013-09-07 11:23:59+00:00,2013-09-08 12:53:05+00:00,"Christians-MacBook-Pro:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.12.0
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.12.0/xml/features
karaf@root> features:install camel-stomp
Error executing command: Could not start bundle mvn:org.apache.geronimo.specs/geronimo-jms_1.1_spec/1.1.1 in feature(s) spring-jms-3.1.4.RELEASE, camel-spring-ws-2.12.0, spring-jms-3.2.3.RELEASE, spring-jms-3.0.7.RELEASE, camel-jms-2.12.0, camel-bam-2.12.0, camel-stomp-2.12.0, camel-sjms-2.12.0, camel-jpa-2.12.0: Unresolved constraint in bundle org.apache.geronimo.specs.geronimo-jms_1.1_spec [62]: Unable to resolve 62.0: missing requirement [62.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction.xa)","muellerc:1378609471:2013-09-08T11:04:31.070+0000:1378609471:2013-09-08T11:04:31.070+0000:installing the Geronimo JTA spec before resolves this issue (with the original jre.properties settings from Karaf):

{code}
install mvn:org.apache.geronimo.specs/geronimo-jta_1.1_spec/1.1.1
{code}"
0,CAMEL-6713,Bug,Major,2.12.0,None,"
None
",Closed,Not A Problem,2.12.1,Christian Müller,Christian Müller,0,1,2013-09-07 11:20:17+00:00,2013-09-08 10:47:51+00:00,"Christians-MacBook-Pro:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.2)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.12.0
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.12.0/xml/features
karaf@root> features:install camel-disruptor
Error executing command: Could not start bundle mvn:com.lmax/disruptor/3.2.0 in feature(s) camel-disruptor-2.12.0: Unresolved constraint in bundle com.lmax.disruptor [62]: Unable to resolve 62.0: missing requirement [62.0] osgi.wiring.package; (osgi.wiring.package=sun.misc)",
0,CAMEL-6712,Bug,Minor,"2.11.0, 2.12.0",Future,"
None
",Resolved,Invalid,Future,Claus Ibsen,Max Worgan,0,2,2013-09-06 22:39:40+00:00,2015-02-15 16:54:49+00:00,"a Route defined in java like so:



from(""mina2:tcp://localhost:8888?sync=true&codec=#hl7codec"").transform(ack());




where hl7codec is defined in spring as 



 <bean id=""hl7codec"" class=""org.apache.camel.component.hl7.HL7MLLPCodec""/>



returns HL7 acks as expected. However using the scala dsl:



  ""mina2:tcp://localhost:8888?sync=true&codec=#hl7codec"" ==> { transform(ack()) } 



throws an exception:


org.apache.camel.CamelException: org.apache.mina.filter.codec.ProtocolEncoderException: java.lang.IllegalArgumentException: The message to encode is not a supported type: org.apache.camel.component.hl7.AckExpression","njiang:1384278505:2013-11-13T01:48:25.480+0000:1384278505:2013-11-13T01:48:25.480+0000:How did you create the CamelContext before loading the Scala route?
It looks the h17codec is not load yet."
0,CAMEL-6711,Test,Minor,None,None,"
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Colm O hEigeartaigh,0,2,2013-09-06 14:35:51+00:00,2013-09-09 16:28:57+00:00,This task is to add a test for the ECDSA algorithm to the XML Signature tests introduced in Camel 2.12.0.,"coheigea:1378449830:2013-09-06T14:43:50.863+0000:1378449830:2013-09-06T14:43:50.863+0000:
Please apply the supplied patch. 

Note that the test also requires the ""ecdsa.jks"" currently in camel-crypto. So a ""cp components/camel-crypto/src/test/resources/org/apache/camel/component/crypto/ecdsa.jks components/camel-xmlsecurity/src/test/resources/org/apache/camel/component/xmlsecurity"" is also required.

Colm.
davsclaus:1378715337:2013-09-09T16:28:57.059+0000:1378715337:2013-09-09T16:28:57.059+0000:Thanks for the patch."
0,CAMEL-6710,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.12.1,Jonathan Anstey,Jonathan Anstey,0,1,2013-09-05 15:28:07+00:00,2013-09-05 15:31:03+00:00,No Desc,janstey:1378366263:2013-09-05T15:31:03.947+0000:1378366263:2013-09-05T15:31:03.947+0000:http://git-wip-us.apache.org/repos/asf/camel/commit/d197e4ef
0,CAMEL-6709,Bug,Major,2.12.0,None,"
None
",Resolved,Fixed,2.12.1,Jonathan Anstey,Jonathan Anstey,0,1,2013-09-05 13:58:28+00:00,2013-09-05 14:03:46+00:00,"Getting 


org.codehaus.jackson.map.JsonMappingException: Can not deserialize instance of java.util.ArrayList out of START_OBJECT token


when trying to return the current user using yammer:current. Workaround is to just add ?useJson=true and do marshaling manually. Fixing on master shortly.",janstey:1378361021:2013-09-05T14:03:41.347+0000:1378361021:2013-09-05T14:03:41.347+0000:Fixed with https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=420ab5d2 No need to hold up 2.12 release for this as you can still get the raw info of the current user via useJson=true.
0,CAMEL-6708,Improvement,Major,2.12.0,None,"
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Daniel Williams,0,2,2013-09-05 13:29:13+00:00,2013-10-18 09:34:26+00:00,"RabbitMQConsumer.RabbitConsumer#handleDelivery currently does not handle AMQP.BasicProperties as sent from the RabbitMQ client library and passed onto the consumer.  This poses a problem for downstream functionality.


e.g.


post a message to a queueA
configure camel as from(queueA).to(queueB).end();
pull a message from queueB
deserialize


If the message was pushed with header information such as Type it will be stripped off as the RabbitMQConsumer.RabbitConsume#handleDelivery is invoked cause the RabbitMQProducer to transmit to queueB without the header information.","williamd1618:1378359072:2013-09-05T13:31:12.272+0000:1378359072:2013-09-05T13:31:12.272+0000:Introduction of a new method that will copy properties from the AMQP.BasicProperties using a meta-map of method to header name to copy values using reflection.  Could be optimized to cache Method[]
davsclaus:1378715654:2013-09-09T16:34:14.183+0000:1378715654:2013-09-09T16:34:14.183+0000:Thanks for reporting. Though we should avoid the reflection overhead. And just map the properties using old fashioned java code.
williamd1618:1378719242:2013-09-09T17:34:02.364+0000:1378719242:2013-09-09T17:34:02.364+0000:I do agree.  Perhaps it should simply be a static map of cached Method objects initialized in a static initializer that meet the get<None>(void):Object structure.  This will allow the RabbitMQ client library to grow mutually exclusive the camel-rabbitmq project.  
davsclaus:1378858923:2013-09-11T08:22:03.791+0000:1378858923:2013-09-11T08:22:03.791+0000:Its still better to do regular java code, to avoid reflection overhead.
williamd1618:1381566957:2013-10-12T16:35:57.640+0000:1381566957:2013-10-12T16:35:57.640+0000:I'm submitting a new patch that takes into account pure POJO accesses instead of reflection.  
williamd1618:1381567024:2013-10-12T16:37:04.292+0000:1381567024:2013-10-12T16:37:04.292+0000:Addition of headers values to the Exchange based upon the AMQP.BasicProperties when the Message is pulled from Rabbit.
davsclaus:1382060066:2013-10-18T09:34:26.022+0000:1382060066:2013-10-18T09:34:26.022+0000:Thanks for the patch."
0,CAMEL-6707,Improvement,Major,2.13.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Jörg Schubert,3,7,2013-09-05 09:08:28+00:00,2016-05-14 10:23:50+00:00,"My Goal is routing larger amounts of HTTP-Traffic 


CamelServlet is blocking the HTTP-thread while message is being processed.
I'm currently preparing a patch which uses AsyncContext and starts processor in async mode. Hope that will improve throughput.
The async feature is switchable by parameter. 


I will attach a patch as soon as it works. 


There is one point: To avoid conflicts geronimo-servlet_2.5_spec must be replaced by geronimo-servlet_3.0_spec in parent pom.","davidkarlsen@gmail.com:1393983141:2014-03-05T09:32:21.652+0000:1393983141:2014-03-05T09:32:21.652+0000:Any update on this? We´re in the same situation and have to create our own custom servlet to accommodate async processing.
davidkarlsen@gmail.com:1393990488:2014-03-05T11:34:48.714+0000:1393990488:2014-03-05T11:34:48.714+0000:And here is another user with the same request: http://camel.465427.n5.nabble.com/Camel-Users-f465428i70.html
ms185322:1431459467:2015-05-13T03:37:47.651+0000:1431459467:2015-05-13T03:37:47.651+0000:The issue descriptions mentions a patch the was supposed to be attached if it works. 

So, did the patch work? I am wondering if I should just switch from EAP/Jboss to jetty that supports async processing. May be use Karaf container?
Also any recommendations to increase throughput and avoid thread bound nature of servlet processing is highly appreciated.


davsclaus:1436568256:2015-07-11T06:44:16.477+0000:1436568256:2015-07-11T06:44:16.477+0000:We are on servlet 3.0 now. We could likely make that mandatory to require 3.0+ and offer async in camel-servlet.
davsclaus:1436568310:2015-07-11T06:45:10.089+0000:1436568310:2015-07-11T06:45:10.089+0000:Karaf 2.4 is on servlet 3.0 also
karaf@root> la | grep -i servlet
[  80] [Active     ] [            ] [       ] [   30] Servlet 3.0 (1.0)
davsclaus:1436568337:2015-07-11T06:45:37.761+0000:1436568337:2015-07-11T06:45:37.761+0000:Anyone wanna work on a patch? 
davsclaus:1443394275:2015-09-28T06:51:15.115+0000:1443394275:2015-09-28T06:51:15.115+0000:Contributions is welcome.
arnaudeprez:1460444884:2016-04-12T15:08:04.041+0000:1460504722:2016-04-13T07:45:22.572+0000:If you don't mind, I'll send a patch for this soon!
arnaudeprez:1460598177:2016-04-14T09:42:57.721+0000:1460598177:2016-04-14T09:42:57.721+0000:Still need to make some test but the implementation is mostly done here https://github.com/arnaud-deprez/camel/tree/CAMEL-6707.
I met some problem with httpunit which is by the way not updated since 2008 (http://httpunit.sourceforge.net/) and so it doesn't support servlet-api 3.x.
If you know another library that support servlet 3.x to test it, please let me know, I google a few but found nothing like httpunit.
So I think I'll try to test it with jetty 9.
Rgds,
davsclaus:1460669788:2016-04-15T05:36:28.009+0000:1460669788:2016-04-15T05:36:28.009+0000:There is also arquillian where you can use its shrinkwrap and whatnot to make a WAR that you can then deploy on an embedded jetty.

There is a little demo here
https://github.com/camelinaction/camelinaction2/tree/master/chapter9/arquillian-web
arnaudeprez:1460690615:2016-04-15T11:23:35.283+0000:1460690615:2016-04-15T11:23:35.283+0000:Thx claus, I started to test it with jetty9 component.
I'm off for 3 days now, I'll take a look on monday and try to finish this asap :-)
githubbot:1460990263:2016-04-18T22:37:43.302+0000:1460990263:2016-04-18T22:37:43.302+0000:GitHub user arnaud-deprez opened a pull request:

    https://github.com/apache/camel/pull/949

    CAMEL-6707: add async for servlet

    Add async option in servlet.
    
    # Remarks:
    I have some issues to test servlet with arquillian & jetty 9. Apparently it doesn't take into account the option async-supported in the web.xml (see test). But it works well with tomcat and the jetty component (because here we register the servlet ourself correctly).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/arnaud-deprez/camel CAMEL-6707

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/949.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #949
    
----
commit d1a466a96e5b09a87ad83002305ea16fc00c0985
Author: Arnaud Deprez <arnaud.deprez@lampiris.be>
Date:   2016-04-13T21:38:00Z

    CAMEL-6707: add async for servlet

----

davsclaus:1461277949:2016-04-22T06:32:29.211+0000:1461277949:2016-04-22T06:32:29.211+0000:Thanks the code has been merged.

We need to update the wiki pages for docs how to use this new option
http://camel.apache.org/servlet
githubbot:1461281594:2016-04-22T07:33:14.887+0000:1461281594:2016-04-22T07:33:14.887+0000:Github user arnaud-deprez closed the pull request at:

    https://github.com/apache/camel/pull/949

davsclaus:1463133361:2016-05-13T17:56:01.239+0000:1463133361:2016-05-13T17:56:01.239+0000:Updated the doc
arnaudeprez:1463192630:2016-05-14T10:23:50.950+0000:1463192630:2016-05-14T10:23:50.950+0000:Thx [~davsclaus] for having updated the doc :-)"
0,CAMEL-6706,Improvement,Major,2.12.0,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-04 12:36:43+00:00,2013-09-04 13:00:40+00:00,"If you use 2+ blueprint property placeholders then you can set default values in one of the placeholder, and then optionally override these values in the other.


camel-blueprint property parser should be able to understand that, and favor the non-default value as the answer. Today it picks the first != null value.",
0,CAMEL-6705,Improvement,Minor,2.12.0,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-04 09:33:35+00:00,2013-09-04 10:13:59+00:00,"If stream caching is disabled then we should not spool to disk. This allows components and whatnot to safely use CachedOutputStream and not cause spool to disk, even if stream caching is disabled.",
0,CAMEL-6704,Task,Major,2.11.1,2.11.2,"
None
",Resolved,Fixed,2.11.2,Claus Ibsen,Claus Ibsen,0,1,2013-09-04 08:17:58+00:00,2013-09-04 08:43:55+00:00,"See
http://camel.465427.n5.nabble.com/How-to-get-camel-saxon-working-in-camel-2-11-x-My-Solution-tp5738578.html


For some strange reasons 9.4.0.4 is no longer in central. We can use 9.4.07 which is both in central and as OSGi bundle.",davsclaus:1378255001:2013-09-04T08:36:41.291+0000:1378255001:2013-09-04T08:36:41.291+0000:Ah the 9.4.0.4 was in a pseudo maven repo at smx. We should use the 9.4.0.7 from central so there is no tricks anymore.
0,CAMEL-6703,Bug,Major,2.10.6,"2.11.2, 2.12.0","

bug
closeFolder
pop3

",Resolved,Duplicate,"2.11.2, 2.12.0",Claus Ibsen,bounkong khamphousone,0,2,2013-09-03 13:13:50+00:00,2013-09-04 09:06:43+00:00,"I think I've found a bug in camel-mail source (MailConsumer.java)
If you define a mail endpoint which has closeFolder option to true you may encounter a folder is not open exception.
In fact, the delete action occured during processBatch which is set as an exchange's onCompletion. OnCompletion is executed in a new thread and right after that, we have the finally of the try-catch clause which is executed in a concurrent thread.
Therefore, we can then have a folder that is open at the beginning of the processCommit but becoming closed during the search for an email with the uid because the finally is executed.


Am I wrong or is it a real bug?


I've attached MailConsumer.java that should fix this bug.


Cheers!",davsclaus:1378256660:2013-09-04T09:04:20.278+0000:1378256660:2013-09-04T09:04:20.278+0000:This has already been improved in upcoming releases of 2.11 and 2.12 
0,CAMEL-6702,Bug,Major,None,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-03 10:38:44+00:00,2013-09-03 11:16:57+00:00,"See nabble
http://camel.465427.n5.nabble.com/CookieStore-tp5737517.html",davsclaus:1378178217:2013-09-03T11:16:57.290+0000:1378178217:2013-09-03T11:16:57.290+0000:Expired cookies is now removed by default. And a noop cookie store is using when bridging. Also made it easy to configure a custom cookie store.
0,CAMEL-6701,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Jan Materne,0,2,2013-09-03 09:39:34+00:00,2013-09-04 09:23:07+00:00,"This method does not return the text as written. If there is a text file WITHOUT a last \n this differs.
The implementation in Camel reads line by line using a BufferedReader, so it cant know if there is a \n at the last line.
The implementation of commons-io uses a StringWriter where it copies all bytes into.
https://svn.apache.org/repos/asf/commons/proper/io/trunk/src/main/java/org/apache/commons/io/IOUtils.java","jhm:1378172403:2013-09-03T09:40:03.362+0000:1378172403:2013-09-03T09:40:03.362+0000:JUnit-Test showing the difference.
davsclaus:1378257778:2013-09-04T09:22:58.243+0000:1378257778:2013-09-04T09:22:58.243+0000:This works as designed. I added a note to the javadoc of the behavior of the implementation of loadText.
"
0,CAMEL-6700,Bug,Major,2.11.0,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-03 08:30:20+00:00,2013-09-03 10:18:38+00:00,"Configuring a blueprint xml file with



    <endpoint id=""myNettyServer"" uri=""netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;sslContextParameters=#mySsl""/>




Can lead to ciruclar exceptions



Caused by: org.apache.aries.blueprint.di.CircularDependencyException: [BeanRecipe[name='mySsl'], BeanRecipe[name='.camelBlueprint.factory.mySsl'], BeanRecipe[name='camel-4'], BeanRecipe[name='myNettyServer'], BeanRecipe[name='mySsl']]
	at org.apache.aries.blueprint.container.BlueprintRepository.push(BlueprintRepository.java:343)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:71)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:230)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:145)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:746)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.camel.blueprint.BlueprintContainerRegistry.lookupByNameAndType(BlueprintContainerRegistry.java:54)
	at org.apache.camel.impl.CompositeRegistry.lookupByNameAndType(CompositeRegistry.java:52)
	... 125 more","davsclaus:1378169641:2013-09-03T08:54:01.836+0000:1378169641:2013-09-03T08:54:01.836+0000:The problem is only when you define a SSLContextParameters which you refer to from <endpoint>

{code}
  <camel:sslContextParameters id=""mySsl"">
    <camel:serverParameters clientAuthentication=""REQUIRE""/>
    <camel:keyManagers keyPassword=""changeit"">
      <camel:keyStore resource=""etc/localhost.ks"" password=""changeit""/>
    </camel:keyManagers>
    <camel:trustManagers>
      <camel:keyStore resource=""etc/localhost.ks"" password=""changeit""/>
    </camel:trustManagers>
  </camel:sslContextParameters>
{code}

And with endpoint
{code}
    <endpoint id=""myNettyServer"" uri=""netty-http:http://0.0.0.0:{{port}}/foo?ssl=true&amp;sslContextParameters=#mySsl""/>
{code}"
0,CAMEL-6699,Bug,Major,2.11.0,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,1,2,2013-09-02 13:35:32+00:00,2013-09-02 15:48:49+00:00,"See
http://camel.465427.n5.nabble.com/Referencing-OSGi-services-with-RouteBuilder-classes-for-use-in-CamelContext-tp5734660.html


I can reproduce with stacktrace



Caused by: java.lang.ClassCastException: Proxyfdf03102_b8fa_4caf_b44c_fa565998bb6e cannot be cast to org.apache.camel.builder.RouteBuilder
	at org.apache.camel.model.RouteBuilderDefinition.createRouteBuilder(RouteBuilderDefinition.java:64)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.installRoutes(AbstractCamelContextFactoryBean.java:727)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.setupRoutes(AbstractCamelContextFactoryBean.java:299)
	at org.apache.camel.blueprint.CamelContextFactoryBean.afterPropertiesSet(CamelContextFactoryBean.java:300)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_25]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_25]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_25]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_25]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:297)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:958)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:712)[7:org.apache.aries.blueprint.core:1.1.0]
	... 40 more","davsclaus:1378107794:2013-09-02T15:43:14.046+0000:1378107794:2013-09-02T15:43:14.046+0000:Remember to expose the RouteBuilder class using its interface which is org.apache.camel.RoutesBuilder. eg notice the S in Route***s***Builder.
stibi:1378107982:2013-09-02T15:46:22.156+0000:1378107982:2013-09-02T15:46:22.156+0000:ah, ok :) that's it! Thanks, I'll try.
davsclaus:1378108129:2013-09-02T15:48:49.430+0000:1378108129:2013-09-02T15:48:49.430+0000:Ah there was still a bug in camel-core-xml which I have fixed. Though it may be a common mistake for end users to expose a route builder as osgi service using its class name, I made that mistake at first. "
0,CAMEL-6698,Improvement,Minor,2.10.4,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Lalit Manchanda,0,3,2013-09-02 11:35:21+00:00,2015-02-16 07:01:46+00:00,"EhCache supports non-serializable objects for local heap storage, though the camel-cache does not allow such objects to be put to cache.Should have mechanism/flow to handle such objects","davsclaus:1378178879:2013-09-03T11:27:59.821+0000:1378178879:2013-09-03T11:27:59.821+0000:Patches is welcome
githubbot:1421906080:2015-01-22T13:54:40.330+0000:1421906080:2015-01-22T13:54:40.330+0000:GitHub user arturchyzy opened a pull request:

    https://github.com/apache/camel/pull/375

    CAMEL-6698: Component camel-cache to support non-serializable objects

    Ability to store non-serialiable objects into ehcache cache - i called it objectCache. What i modified:
    - new configuration param to turn on non-serializable cache - objectCache
    - validation to not allow to create object cache which will use object serialization (overflowToDisk and diskPersistence) - overflowToDisk is default
    - storing object into cache without using type converters
    
    Things to consider:
    ```java
    else if (body instanceof Serializable) {
       element = new Element(key, body);
     } else if (config.isObjectCache()) {
       element = new Element(key, body);
    }
    
    ```
    can be optimized to 
    ```java
    else if (body instanceof Serializable || config.isObjectCache()) {
      element = new Element(key, body);
     } 
    ```
    as the same contructor using java.lang.Object will  be taken as body is of java.lang.Object
    
    Usage 
    To use object cache you have to set objectCache param and disable disk cach i.e.
    ```
    cache://TestCache1?objectCache=true&overflowToDisk=false&diskPersistent=false
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/arturchyzy/camel CAMEL-6698

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/375.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #375
    
----
commit 4d6c7d52b79b44198ba16f5e90cf849db81789c0
Author: Artur Chyży <artur.chyzy@gmail.com>
Date:   2015-01-22T13:43:49Z

    CAMEL-6698: Component camel-cache to support non-serializable objects

----

davsclaus:1423893529:2015-02-14T13:58:49.558+0000:1423893529:2015-02-14T13:58:49.558+0000:Thanks for the PR
githubbot:1424041306:2015-02-16T07:01:46.903+0000:1424041306:2015-02-16T07:01:46.903+0000:Github user arturchyzy closed the pull request at:

    https://github.com/apache/camel/pull/375
"
0,CAMEL-6697,Improvement,Major,2.11.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-09-02 09:46:16+00:00,2013-09-02 10:33:42+00:00,"If you have some services your Camel apps uses during testing, then its not easy to enlist them before CamelContext starts.


We should allow people to enlist services from the unit test class, so they can enlist mock services / shared services that are mocked or what, so they can do their unit tests.",davsclaus:1378089222:2013-09-02T10:33:42.800+0000:1378089222:2013-09-02T10:33:42.800+0000:Updated docs also at blueprint testing
0,CAMEL-6696,Bug,Major,"2.10.6, 2.11.1","2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,Willem Jiang,0,1,2013-09-02 09:38:38+00:00,2013-09-03 02:01:58+00:00,"When we specify the serviceClass attribute of cxfEndpoint with CXF_MESSAGE dataformat, camel-cxf will setup the WrapperClass

{In|Out}Interceptor and Holder{In|Out}

Interceptor for the endpoint, but these interceptors are useless and throw some exceptions because camel-cxf doesn't consume under layer message at all and it cannot setup right information for these interceptor to use.","njiang:1378144918:2013-09-03T02:01:58.437+0000:1378144918:2013-09-03T02:01:58.437+0000:Applied the patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x branches."
0,CAMEL-6695,Bug,Minor,"2.10.6, 2.11.1",None,"
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Achim Nierbeck,0,1,2013-09-02 06:51:51+00:00,2013-09-03 11:51:04+00:00,"This is more or less a ""corner-case"" I stumbled upon, though
the HashSet/HashMap (2.5/2.10 camel versions) in the DefaultManagementAgent containing the registered Mbean mbeansRegistered isn't Thread-Safe. 
This has been an issue for us while using the ProducerTemplate in a wrongful way, by instantiating the ProducerTemplate during every Route run. 
As this might be a common mistake by users I'd suggest to improve the mbeansRegistered by using a Synchronized Map.",
0,CAMEL-6694,Improvement,Major,2.12.0,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Grzegorz Grzybek,Raúl Kripalani,0,6,2013-09-01 19:49:04+00:00,2014-04-08 07:55:22+00:00,"Refer to http://camel.465427.n5.nabble.com/Logging-into-the-bundle-log-file-via-to-log-tp5738205p5738413.html for more info.


We should use the Camel Context's Classloader to initialize the Logger instance.","hadrian:1384858392:2013-11-19T18:53:12.825+0000:1384858392:2013-11-19T18:53:12.825+0000:Raul, are you working on this one? Do you think it'll be ready for 2.12.2?
raulvk:1384876914:2013-11-20T00:01:54.572+0000:1384876914:2013-11-20T00:01:54.572+0000:[~hadrian] - yes. I'm trying to get it ready for 2.12.2. I've been snowed under with work these days.
Do we have a ballpark for a release date?
hadrian:1384878354:2013-11-20T00:25:54.427+0000:1384878354:2013-11-20T00:25:54.427+0000:The plan was this past weekend, but there are still a few issues to resolve. Say a couple of days?
hadrian:1384893838:2013-11-20T04:43:58.375+0000:1384893838:2013-11-20T04:43:58.375+0000:I'd say let's leave it for the next release. It'd be very hard to get it right in a few days. Wdyt?
davsclaus:1384903854:2013-11-20T07:30:54.502+0000:1384903854:2013-11-20T07:30:54.502+0000:Yes lets get this release out the door. 
ggrzybek:1396255086:2014-03-31T16:38:06.582+0000:1396255086:2014-03-31T16:38:06.582+0000:Hmm. The problem is in this code of {{org.ops4j.pax.logging.internal.BundleHelper.getCallerBundle(Bundle)}}:
{code:java}
            Class[] classCtx = securityManager.getClassContext();
            /* Skip first 2 classes on call stack since:
             *  classCtx[0] is always SecurityManagerEx.getClassContext()
             *  classCtx[1] is always BundleHelper.getCallerBundle()
             */
            Bundle curBundle = null;
            for (int i = 2; i < classCtx.length; i++)
            {
                Bundle bundle = FrameworkUtil.getBundle(classCtx[i]);
                if (bundle == null)
                {
                    return defaultBundle;
                }
                else if (curBundle == null)
                {
                    curBundle = bundle;
                }
                else if (bundle != curBundle)
                {
                    return bundle;
                }
            }
{code}

which return first bundle, which is not {{org.ops4j.pax.logging.pax-logging-api}} by examining the stack trace.

In the following stack trace:
{noformat}
class org.ops4j.pax.logging.internal.BundleHelper$SecurityManagerEx
class org.ops4j.pax.logging.internal.BundleHelper
class org.ops4j.pax.logging.OSGIPaxLoggingManager
class org.ops4j.pax.logging.slf4j.Slf4jLoggerFactory
class org.slf4j.LoggerFactory
class org.apache.camel.util.CamelLogger
class org.apache.camel.component.log.LogComponent
class org.apache.camel.impl.DefaultComponent
class org.apache.camel.impl.DefaultCamelContext
class org.apache.camel.impl.DefaultProducerTemplate
class org.apache.camel.impl.DefaultProducerTemplate
class org.apache.camel.itest.osgi.core.log.LogRouteTest
class org.junit.runners.model.FrameworkMethod$1
...
{noformat}

the method returns bundle for class {{org.apache.camel.util.CamelLogger}}, and ideally it should return bundle for {{org.apache.camel.itest.osgi.core.log.LogRouteTest}} which sends the message...

I'll check if I can introduce some hacks into {{CamelLogger}}.
ggrzybek:1396314404:2014-04-01T09:06:44.092+0000:1396314404:2014-04-01T09:06:44.092+0000:I did simple trick with user provided logger instance when creating route. Here's sample pax-exam test:
{code:java}
    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();
        registry.bind(""mylogger"", LoggerFactory.getLogger(""org.apache.camel.SIFT""));
        return registry;
    }
...
    @Override
    protected CamelContext createCamelContext() throws Exception {
        CamelContext camelContext = super.createCamelContext();
        camelContext.setUseMDCLogging(true);
        return camelContext;
    }
...
    @Test
    public void testSendMessageToInfoLogWithSiftLogging() throws Exception {
        template.sendBody(""log:org.apache.camel.SIFT?level=info&logger=#mylogger"", ""<level>INFO</level>"");
        template.sendBody(""log:org.apache.camel.SIFT?level=debug&logger=#mylogger"", ""<level>DEBUG</level>"");
        template.sendBody(""log:org.apache.camel.SIFT?level=info&logger=#mylogger"", ""<level>INFO</level>"");
        template.sendBody(""log:org.apache.camel.SIFT?level=error&logger=#mylogger"", ""<level>ERROR</level>"");
    }
{code}

and the log is correctly produced in {{KARAF_BASE/data/log/PAXEXAM-PROBE-143533e1-9f41-4734-ba6c-ab1f1e417fd8.log}}.

The only thing that I don't like is that the *org.apache.camel.SIFT* part in endpoint URI isn't actually used. Do you have an idea how to make it cleaner?
ggrzybek:1396318114:2014-04-01T10:08:34.032+0000:1396318114:2014-04-01T10:08:34.032+0000:The proposed changes for using {{logger}} URI parameter are here: https://github.com/grgrzybek/camel/compare/CAMEL-6694
ggrzybek:1396318790:2014-04-01T10:19:50.675+0000:1396318790:2014-04-01T10:19:50.675+0000:The open ticket for pax-logging is created here: https://ops4j1.jira.com/browse/PAXLOGGING-174.
githubbot:1396496654:2014-04-03T11:44:14.790+0000:1396496654:2014-04-03T11:44:14.790+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/128

    [CAMEL-6694] Make camel log component compatible with MDC Sift appender

    It adds the behaviour, that Camel LogComponent looks for the `org.slf4j.Logger` instance in current repository or uses user-provided logger in URI parameter ""logger"".

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-6694

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/128.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #128
    
----
commit d09cfdd5d273804b2a65ee83ec70175abd371a93
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-01T10:06:36Z

    [CAMEL-6694] Allow user to pass logger instance in camel-log endpoint
    URI
    
    The URI has form: log:logger-name?level=info&logger=#mylogger
    
    ""mylogger"" is registered in context's registry

commit 7d9f281c307a3fe33e99c70cbdae523be980c61e
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-03T10:51:18Z

    [CAMEL-6694] lookup logger in registry when single instance available

commit 45305434b80e3b9168b599f38312969d4d0c115e
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-03T11:38:07Z

    [CAMEL-6694] Added OSGi integration tests for logging with MDC SIFT logger

----

davsclaus:1396564745:2014-04-04T06:39:05.355+0000:1396564745:2014-04-04T06:39:05.355+0000:Thanks the log component has now been improved to support this.

Can we try to take a look at the log-eip to see if we can add support for that too?
http://camel.apache.org/logeip.html

I think it's the same problem with the log eip as the log component with MDC
githubbot:1396565097:2014-04-04T06:44:57.940+0000:1396565097:2014-04-04T06:44:57.940+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/128

githubbot:1396582979:2014-04-04T11:42:59.888+0000:1396582979:2014-04-04T11:42:59.888+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/129

    [CAMEL-6694] Allow log EIP to use provided or registry logger

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-6694-logeip

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/129.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #129
    
----
commit dba21eb2c27d936f0d903981d8dba0343335b300
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-04T11:11:32Z

    [CAMEL-6694] Allow log EIP to use provided or registry logger

----

githubbot:1396590645:2014-04-04T13:50:45.673+0000:1396590645:2014-04-04T13:50:45.673+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/129

davsclaus:1396824447:2014-04-07T06:47:27.431+0000:1396824447:2014-04-07T06:47:27.431+0000:[~njiang] did you backport the last changes to 2.13 and 2.12 branches too? eg the 1st set of commits was backported, so we should ideally also backport the 2nd set.
davsclaus:1396824494:2014-04-07T06:48:14.218+0000:1396824494:2014-04-07T06:48:14.218+0000:Grzegorz we need to document the new functionality in the log component and log eip pages at Camel website. And add a note to the Camel 2.14 release notes.
githubbot:1396911419:2014-04-08T06:56:59.925+0000:1396911419:2014-04-08T06:56:59.925+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/132

    [CAMEL-6694] Adding INFO log about Loggers discovered in Registry

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-6694-logging

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/132.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #132
    
----
commit cd8da7d36b008a6f11e5c00715c1906b1a02a87d
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-08T06:56:32Z

    [CAMEL-6694] Adding INFO log about Loggers discovered in Registry

----

njiang:1396914112:2014-04-08T07:41:52.836+0000:1396914112:2014-04-08T07:41:52.836+0000:Merged the patches into camel master, camel-2.13.x and camel-2.12.x branches.
githubbot:1396914371:2014-04-08T07:46:11.606+0000:1396914371:2014-04-08T07:46:11.606+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/132

ggrzybek:1396914922:2014-04-08T07:55:22.990+0000:1396914922:2014-04-08T07:55:22.990+0000:All relevant documentation updated."
0,CAMEL-6693,Bug,Major,2.12.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,2,2013-08-31 11:07:20+00:00,2013-09-05 14:10:09+00:00,"See
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-12-0-tp5738140.html


Scott found a regressions, and pointed out the fix.","scranton:1378353775:2013-09-05T12:02:55.368+0000:1378353775:2013-09-05T12:02:55.368+0000:I've pulled the Unit Test from https://github.com/CamelCookbook/camel-cookbook-examples/blob/master/camel-cookbook-monitoring/src/test/java/org/camelcookbook/monitoring/managed/ManagedSpringTest.java that originally caught the regression, but now that its part of the normal camel build it does not react to the addition or removal of those two lines. I'm guessing I need to run a test with jmx disabled, and then run a spring test with it enabled to catch this case.

Feel free to add these test cases as it does exercise ManagedResource.
davsclaus:1378361409:2013-09-05T14:10:09.511+0000:1378361409:2013-09-05T14:10:09.511+0000:Thanks for the tests I will add them."
0,CAMEL-6692,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-31 10:11:45+00:00,2013-09-02 08:55:52+00:00,Based on CAMEL-6093 we can now also enlist topics as endpoints in JMX so they can be shown and managed.,
0,CAMEL-6691,Bug,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-31 09:38:32+00:00,2013-09-02 08:55:25+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-2-11-1-SedaComponent-issues-with-Queue-size-tp5738258.html",
0,CAMEL-6690,Bug,Major,"2.10.6, 2.11.1","2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-08-31 01:38:34+00:00,2013-09-16 15:37:32+00:00,"When proxying the WS-Security request through camel route with CXF_MESSAGE data format, we will get the endless loop that eat up the memory.



""qtp967241364-210"" prio=10 tid=0x00007f1de4306800 nid=0x1c9f runnable [0x00007f1d8d451000]
   java.lang.Thread.State: RUNNABLE
	at org.apache.cxf.staxutils.W3CDOMStreamWriter.writeCharacters(W3CDOMStreamWriter.java:292)
	at org.apache.cxf.staxutils.DelegatingXMLStreamWriter.writeCharacters(DelegatingXMLStreamWriter.java:91)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:588)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:564)
	at org.apache.cxf.staxutils.StaxUtils.copy(StaxUtils.java:542)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.writeSoapEnvelopeStart(SoapOutInterceptor.java:160)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:81)
	at org.apache.cxf.binding.soap.interceptor.SoapOutInterceptor.handleMessage(SoapOutInterceptor.java:61)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	- locked <0x00000000e28af4a0> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:530)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:456)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.processor.interceptor.HandleFaultInterceptor.process(HandleFaultInterceptor.java:41)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.fabric.FabricTraceProcessor.process(FabricTraceProcessor.java:81)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:52)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.cxf.CxfConsumer$1.asyncInvoke(CxfConsumer.java:93)
	- locked <0x00000000e2533d18> (a org.apache.cxf.transport.http_jetty.continuations.JettyContinuationWrapper)
	at org.apache.camel.component.cxf.CxfConsumer$1.invoke(CxfConsumer.java:72)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at org.apache.cxf.workqueue.SynchronousExecutor.execute(SynchronousExecutor.java:37)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:107)
	- locked <0x00000000e28af958> (a org.apache.cxf.interceptor.ServiceInvokerInterceptor$2)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	- locked <0x00000000e26edb48> (a org.apache.cxf.phase.PhaseInterceptorChain)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121)
	at org.apache.cxf.transport.http.AbstractHTTPDestination.invoke(AbstractHTTPDestination.java:236)
	at org.apache.cxf.transport.servlet.ServletController.invokeDestination(ServletController.java:214)
	at org.apache.cxf.transport.servlet.ServletController.invoke(ServletController.java:194)
	at org.apache.cxf.transport.servlet.CXFNonSpringServlet.invoke(CXFNonSpringServlet.java:130)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.handleRequest(AbstractHTTPServlet.java:221)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.doPost(AbstractHTTPServlet.java:141)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:713)
	at org.apache.cxf.transport.servlet.AbstractHTTPServlet.service(AbstractHTTPServlet.java:197)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.ops4j.pax.web.service.internal.HttpServiceStarted$1.invoke(HttpServiceStarted.java:182)
	at org.ops4j.pax.web.service.internal.$Proxy6.service(Unknown Source)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:447)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceServletHandler.doHandle(HttpServiceServletHandler.java:70)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:534)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1038)
	at org.ops4j.pax.web.service.jetty.internal.HttpServiceContext.doHandle(HttpServiceContext.java:117)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:374)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:972)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.ops4j.pax.web.service.jetty.internal.JettyServerHandlerCollection.handle(JettyServerHandlerCollection.java:75)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:363)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:483)
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:931)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:992)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:724)",
0,CAMEL-6689,Improvement,Minor,None,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Vitalii Tymchyshyn,0,2,2013-08-30 16:35:50+00:00,2013-11-21 21:22:49+00:00,"ResourceHelper in both resolveMandatoryResourceAsInputStream and resolveMandatoryResourceAsUrl do not decode file path. 


This produces problem with file URIs like file:aaa%20bbb.txt","tivv:1377851807:2013-08-30T16:36:47.914+0000:1377851814:2013-08-30T16:36:54.900+0000:Dunno if the same applies to classpath resources
davsclaus:1377912908:2013-08-31T09:35:08.994+0000:1377912908:2013-08-31T09:35:08.994+0000:This is not intended to decode file paths but use the path as given.

So are you loading resources from the file system which has spaces in the path or what is your use-case?
tivv:1377970840:2013-09-01T01:40:40.708+0000:1377970840:2013-09-01T01:40:40.708+0000:Well, it says it expects an URI parameter. Valid URI has spaces escaped, that is per standard.
My use case is that I am using camel-beanio component that takes beanio mapping file address as an uri parameter (and uses ResourceHelper). 
In my tests I inject spring Resource, call it's getUri and pass result to the component and expect this to work. It works unless project is built in directory that has spaces (""Documens and Settings"" subdir in my case)."
0,CAMEL-6688,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-30 13:37:37+00:00,2013-09-02 08:52:47+00:00,"See CAMEL-6685 


And also
http://camel.465427.n5.nabble.com/Discussion-around-the-bug-CAMEL-6685-tp5738305.html


If shutting down camel context and a timeout is hit, and there is still inflight message, then we could add a new option so end users can turn off any logging after camel context state = stopped. Then any inflight messages that may gets rejected or whatnot will not be logged.


This requires that we pass on camel context to various exceptionhandler and error handler, camel logger etc so they can check the state of camel context before logging.","davsclaus:1378082606:2013-09-02T08:43:26.469+0000:1378082606:2013-09-02T08:43:26.469+0000:See
https://cwiki.apache.org/confluence/display/CAMEL/Graceful+Shutdown

for more details."
0,CAMEL-6687,Bug,Major,2.11.1,"2.11.2, 2.12.0","

bean
method
ognl
simple

",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Anton Koscejev,0,2,2013-08-30 11:50:31+00:00,2015-10-20 13:42:17+00:00,"The following functionality doesn't work, when one of the fields is null: 


http://camel.apache.org/bean-binding.html



You can also use the OGNL support of the Simple expression language. Now suppose the message body is an object which has a method named asXml. To invoke the asXml method we can do as follows:

.bean(OrderService.class, ""doSomething(${body.asXml}, ${header.high})"")

Instead of using .bean as shown in the examples above, you may want to use .to instead as shown:

.to(""bean:orderService?method=doSomething(${body.asXml}, ${header.high})"")



A test case is provided. Instead of getting values of fields ""foo"" and ""bar"" respectively, the first parameter (which should be null) receives value of pojo.toString(), while the second parameter receives the correct value.","davsclaus:1377998100:2013-09-01T09:15:00.131+0000:1377998100:2013-09-01T09:15:00.131+0000:Thanks for reporting and providing a unit test.
koscejev:1378111611:2013-09-02T16:46:51.165+0000:1378111611:2013-09-02T16:46:51.165+0000:No, thank you for fixing it. I'm always impressed how fast these are fixed. :)
Looking forward to 2.12..."
0,CAMEL-6686,Improvement,Major,2.10.2,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Babak Vahdat,Claus Ibsen,0,2,2013-08-30 11:39:25+00:00,2013-09-24 23:09:08+00:00,"See nabble
http://camel.465427.n5.nabble.com/Cluster-in-camel-using-Quartz-ObjectAlreadyExistsException-tp5737167.html


When the 2nd Camel app startup it tries also to schedule the job, but the job is already registered in the quartz scheduler, and you get an exception.


The route policy should deal with that.","bvahdat:1379669152:2013-09-20T17:25:52.131+0000:1379669152:2013-09-20T17:25:52.131+0000:Raised CAMEL-6773 to get this fixed for {{camel-quartz2}} as well. As the Quartz API 1.x is different than it's 2.x counterpart the applied fix here should be first adapted to the Quartz 2.x API.

Would you please setup a new JIRA component for {{camel-quartz2}}?
bvahdat:1379726743:2013-09-21T09:25:43.846+0000:1379726743:2013-09-21T09:25:43.846+0000:Sorry for the noise about adding a new Component for {{camel-quartz2}} in JIRA as I did 't know that my own JIRA account could do that as well. Now I've already added it to the list of the existing components."
0,CAMEL-6685,Bug,Major,2.11.1,2.12.0,"
None
",Resolved,Not A Problem,2.12.0,Claus Ibsen,Antoine DESSAIGNE,0,1,2013-08-30 09:58:38+00:00,2013-08-30 10:30:08+00:00,"When you shutdown a route, it's not completely stopped even after it says so.


If you lanch the following route definition in a context that has a 1 second timeout for shutdown



from(""timer:single?repeatCount=1"")                                           //
        .setBody(constant(""This should never be displayed in the console""))  //
        .delay(FIFTEEN_SECONDS)                                              //
        .to(""stream:out"");                                                   //




Here's what' you have in the console



30 août 2013 11:51:17 org.apache.camel.impl.DefaultCamelContext start
INFO: Apache Camel 2.11.1 (CamelContext: camel-1) is starting
30 août 2013 11:51:17 org.apache.camel.management.ManagementStrategyFactory create
INFO: JMX enabled.
30 août 2013 11:51:18 org.apache.camel.impl.converter.DefaultTypeConverter doStart
INFO: Loaded 172 type converters
30 août 2013 11:51:18 org.apache.camel.impl.DefaultCamelContext doStartOrResumeRouteConsumers
INFO: Route: route1 started and consuming from: Endpoint[timer://single?repeatCount=1]
30 août 2013 11:51:18 org.apache.camel.management.DefaultManagementLifecycleStrategy$TimerListenerManagerStartupListener onCamelContextStarted
INFO: Load performance statistics enabled.
30 août 2013 11:51:18 org.apache.camel.impl.DefaultCamelContext start
INFO: Total 1 routes, of which 1 is started.
30 août 2013 11:51:18 org.apache.camel.impl.DefaultCamelContext start
INFO: Apache Camel 2.11.1 (CamelContext: camel-1) started in 0.340 seconds
30 août 2013 11:51:20 org.apache.camel.impl.DefaultCamelContext doStop
INFO: Apache Camel 2.11.1 (CamelContext: camel-1) is shutting down
30 août 2013 11:51:20 org.apache.camel.impl.DefaultShutdownStrategy doShutdown
INFO: Starting to graceful shutdown 1 routes (timeout 1 seconds)
30 août 2013 11:51:20 org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask run
INFO: Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 1 seconds.
30 août 2013 11:51:21 org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask run
INFO: Waiting as there are still 1 inflight and pending exchanges to complete, timeout in 0 seconds.
30 août 2013 11:51:21 org.apache.camel.impl.DefaultShutdownStrategy doShutdown
ATTENTION: Timeout occurred. Now forcing the routes to be shutdown now.
30 août 2013 11:51:21 org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask run
ATTENTION: Interrupted while waiting during graceful shutdown, will force shutdown now.
30 août 2013 11:51:21 org.apache.camel.impl.DefaultShutdownStrategy doShutdown
INFO: Graceful shutdown of 1 routes completed in 1 seconds
30 août 2013 11:51:21 org.apache.camel.impl.DefaultShutdownStrategy$ShutdownTask run
INFO: Route: route1 shutdown complete, was consuming from: Endpoint[timer://single?repeatCount=1]
30 août 2013 11:51:21 org.apache.camel.impl.DefaultInflightRepository doStop
ATTENTION: Shutting down while there are still 1 in flight exchanges.
30 août 2013 11:51:21 org.apache.camel.impl.DefaultCamelContext doStop
INFO: Apache Camel 2.11.1 (CamelContext: camel-1) uptime 3.356 seconds
30 août 2013 11:51:21 org.apache.camel.impl.DefaultCamelContext doStop
INFO: Apache Camel 2.11.1 (CamelContext: camel-1) is shutdown in 1.015 seconds
30 août 2013 11:51:34 org.apache.camel.impl.converter.DefaultTypeConverter doStart
INFO: Loaded 172 type converters
30 août 2013 11:51:34 org.apache.camel.util.CamelLogger log
ATTENTION: Error processing exchange. Exchange[Message: This should never be displayed in the console]. Caused by: [java.util.concurrent.RejectedExecutionException - null]
java.util.concurrent.RejectedExecutionException
	at org.apache.camel.processor.interceptor.DefaultChannel.continueProcessing(DefaultChannel.java:356)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:327)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:135)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:63)
	at java.util.TimerThread.mainLoop(Timer.java:512)
	at java.util.TimerThread.run(Timer.java:462)




First you can see that it starts the TypeConverter after the shutdown of the context. Then you have a big exception.","davsclaus:1377829790:2013-08-30T10:29:50.963+0000:1377829790:2013-08-30T10:29:50.963+0000:This is NOT a bug as you force shutdown to be aggressive with only 1 sec of shutdown. Then there can be some tasks running or something that may still do some work.

"
0,CAMEL-6684,Bug,Major,"2.10.6, 2.11.1","2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Willem Jiang,Willem Jiang,0,1,2013-08-30 02:40:42+00:00,2013-09-02 08:54:52+00:00,"As camel-cxf RAW message dataformat doesn't pass the content-type header rightly, the request which route by the camel router cannot accept by the server.","njiang:1377835980:2013-08-30T12:13:00.279+0000:1377835980:2013-08-30T12:13:00.279+0000:Applied the patch into master, camel-2.12.x, camel-2.11.x and camel-2.10.x."
0,CAMEL-6683,Bug,Major,2.12.0,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-29 13:29:50+00:00,2013-09-02 09:15:07+00:00,"Dozer doesnt work to well in OSGi. It seems to work with spring, but fails with OSGi blueprint.



2013-08-29 14:44:51,302 | ERROR | l Console Thread | BlueprintContainerImpl           | container.BlueprintContainerImpl  393 | 7 - org.apache.aries.blueprint.core - 1.1.0 | Unable to start blueprint container for bundle blue
org.osgi.service.blueprint.container.ComponentDefinitionException: Error when instantiating bean dozerMapper of class class org.dozer.DozerBeanMapper
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:333)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:806)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:787)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[7:org.apache.aries.blueprint.core:1.1.0]
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)[:1.7.0_25]
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)[:1.7.0_25]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:245)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:183)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:668)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:370)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:261)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:259)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:222)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[11:org.apache.aries.util:1.1.0]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[11:org.apache.aries.util:1.1.0]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1103)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:695)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:483)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4244)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1923)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.updateBundle(Felix.java:2235)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:962)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.update(BundleImpl.java:949)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.karaf.shell.osgi.UpdateBundle.doExecute(UpdateBundle.java:37)[43:org.apache.karaf.shell.osgi:2.3.2]
	at org.apache.karaf.shell.osgi.BundleCommand.doExecute(BundleCommand.java:42)[43:org.apache.karaf.shell.osgi:2.3.2]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[14:org.apache.karaf.shell.console:2.3.2]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[14:org.apache.karaf.shell.console:2.3.2]
	at java.lang.Thread.run(Thread.java:724)[:1.7.0_25]
Caused by: org.dozer.MappingException: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader
	at org.dozer.util.MappingUtils.throwMappingException(MappingUtils.java:82)
	at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:38)
	at org.dozer.DozerInitializer.loadBeanType(DozerInitializer.java:115)
	at org.dozer.DozerInitializer.initialize(DozerInitializer.java:97)
	at org.dozer.DozerInitializer.init(DozerInitializer.java:74)
	at org.dozer.DozerBeanMapper.init(DozerBeanMapper.java:173)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:99)
	at org.dozer.DozerBeanMapper.<init>(DozerBeanMapper.java:94)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.7.0_25]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)[:1.7.0_25]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.7.0_25]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:526)[:1.7.0_25]
	at org.apache.aries.blueprint.utils.ReflectionUtils.newInstance(ReflectionUtils.java:329)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.newInstance(BeanRecipe.java:962)[7:org.apache.aries.blueprint.core:1.1.0]
	at org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:331)[7:org.apache.aries.blueprint.core:1.1.0]
	... 39 more
Caused by: java.lang.ClassNotFoundException: org.dozer.util.DefaultClassLoader
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)[:1.7.0_25]
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)[:1.7.0_25]
	at java.security.AccessController.doPrivileged(Native Method)[:1.7.0_25]
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)[:1.7.0_25]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)[:1.7.0_25]
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)[:1.7.0_25]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.7.0_25]
	at java.lang.Class.forName0(Native Method)[:1.7.0_25]
	at java.lang.Class.forName(Class.java:270)[:1.7.0_25]
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:823)
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:889)
	at org.apache.commons.lang3.ClassUtils.getClass(ClassUtils.java:872)
	at org.dozer.util.DefaultClassLoader.loadClass(DefaultClassLoader.java:36)
	... 52 more","davsclaus:1377821258:2013-08-30T08:07:38.328+0000:1377821258:2013-08-30T08:07:38.328+0000:You should configure dozer using org.apache.camel.converter.dozer.DozerBeanMapperConfiguration as shown on: https://cwiki.apache.org/confluence/display/CAMEL/Dozer+Type+Conversion

Dozer 5.5 works better in OSGi as it also has an OSGi Activator. So when this version is released we can upgrade and have Dozer work better with OSGi Blueprint.
davsclaus:1377822710:2013-08-30T08:31:50.190+0000:1377822710:2013-08-30T08:31:50.190+0000:I asked about a 5.5.0 release of Dozer at
https://groups.google.com/forum/?fromgroups=#!topic/dozer-mapper/jDfxFW4pkqY
davsclaus:1378084507:2013-09-02T09:15:07.199+0000:1378084507:2013-09-02T09:15:07.199+0000:It works better now. Though upgrading to Dozer 5.5.0 works even better. Though Dozer 5.5.0 has not been released yet."
0,CAMEL-6682,Improvement,Minor,2.11.0,None,"
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,2,2013-08-29 09:46:14+00:00,2013-09-02 08:54:34+00:00,"See http://jira.codehaus.org/browse/MVEL-250


We should set/restore the TCCL when MVel compiles so chances are it works in OSGi.",
0,CAMEL-6681,New Feature,Minor,None,"2.11.2, 2.12.0","

patch

",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Bart De Neuter,0,2,2013-08-29 09:41:04+00:00,2013-09-02 08:54:19+00:00,"Allow the user to specify the LockModeType for the JpaConsumer. This is handy when using a DB as a poor man's queue with multiple competing instances. If those instances call a non IDEM POTENT service, the service can be called multiple times. This can be prevented by using pessimistic locking.","bdeneuter:1377740530:2013-08-29T09:42:10.026+0000:1377740530:2013-08-29T09:42:10.026+0000:patch for LockModeType on JpaConsumer
davsclaus:1377741814:2013-08-29T10:03:34.284+0000:1377741814:2013-08-29T10:03:34.284+0000:Thanks for the patch."
0,CAMEL-6680,Improvement,Major,2.11.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-29 06:58:46+00:00,2013-09-02 08:54:04+00:00,We can optimize the simple language using in eg bean ognl expressions and the likes.,
0,CAMEL-6679,Bug,Minor,2.11.0,2.13.0,"
None
",Resolved,Cannot Reproduce,2.13.0,Claus Ibsen,Abdiel E. Sanchez,0,2,2013-08-29 04:10:29+00:00,2013-11-12 10:25:35+00:00,"This issue was recorded on the forum on this link: http://camel.465427.n5.nabble.com/Issue-when-using-ZipSplitter-and-sending-entries-to-a-file-endpoint-td5738179.html#a5738183


I am not sure at this point if this is only relevant to the the ZipSplitter, but that is how I stumbled upon this.  If you use the ZipSplitter and send the entries to a file EndPoint the ""Original File"" entry does not come back.


This code can be used to reproduce it:



from(""seda:decompressFiles"").routeId(""DecompressFiles"") 
  .split(new ZipSplitter()).streaming().shareUnitOfWork() 
     .log(""WE ARE SPLITTING!!!"") 
     .to(""file:{{ClientFileArchiveRoot}}?fileName=zipFileName"") 
     //.to(""activemq:queue:ZipChildFiles"") //You can use seda or direct or here and it will still work correctly 
;




//data.zip has two entries
template.sendBody(""seda:decompressFiles"", new File(""data.zip""));


With this simple example as it stands it does not work.  If you comment out the .to(""file:..."") and uncomment the next line, it will work.


With a zip file with two entries you should get:
[ad #0 - seda://decompressFiles] DecompressFiles   INFO  WE ARE SPLITTING!!!
[ad #0 - seda://decompressFiles] DecompressFiles   INFO  WE ARE SPLITTING!!!


if you comment the to(""file:.."") and uncomment the next line you will get:
[ad #0 - seda://decompressFiles] DecompressFiles   INFO  WE ARE SPLITTING!!!
[ad #0 - seda://decompressFiles] DecompressFiles   INFO  WE ARE SPLITTING!!!
[ad #0 - seda://decompressFiles] DecompressFiles   INFO  WE ARE SPLITTING!!!


which means it is working as expected on the second case.",abdiels:1377720825:2013-08-29T04:13:45.496+0000:1377720825:2013-08-29T04:13:45.496+0000:This is the zip file I was using just for completeness.
0,CAMEL-6678,Improvement,Major,2.11.1,"2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Claus Ibsen,Christian Posta,0,2,2013-08-28 22:03:38+00:00,2013-09-17 10:00:21+00:00,"Camel's Throttler eip uses time slots to calc what tasks need to be delayed and which don't. The time slots don't take into account period elapse. See from this mailing list question:


http://camel.465427.n5.nabble.com/Camel-Throttler-not-throttling-as-expected-td5738158.html


I can recreate, and working on a patch.","ceposta:1379354700:2013-09-17T02:05:00.869+0000:1379354700:2013-09-17T02:05:00.869+0000:Patch which has tests to demonstrate issue, and fix.
davsclaus:1379383221:2013-09-17T10:00:21.129+0000:1379383221:2013-09-17T10:00:21.129+0000:Thanks for the patch."
0,CAMEL-6677,Improvement,Minor,2.11.1,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Christian Posta,0,2,2013-08-28 18:58:03+00:00,2013-09-11 14:57:32+00:00,Right now the jaxb component allows you to filter out non-xml characters. But there might be use cases where you'd want to do something other than just filter (maybe escape? http://blog.lesc.se/2009/03/escape-illegal-characters-with-jaxb-xml.html or replace with something else?) the non-xml characters. JAXB has a mechanism to allow pre-processing of the output of its marshaling and we should expose a way to customize that.,"ceposta:1377687501:2013-08-28T18:58:21.216+0000:1377687501:2013-08-28T18:58:21.216+0000:Working on a patch and tests...
ceposta:1378201018:2013-09-03T17:36:58.061+0000:1378201018:2013-09-03T17:36:58.061+0000:add ability to use custom stream writers + unit tests
davsclaus:1378256607:2013-09-04T09:03:27.426+0000:1378256607:2013-09-04T09:03:27.426+0000:We do not use the xxxRef options, but instead use the actual type it uses. As people can use #foo to lookup the bean from the registry if he needs a lookup. This allows people to configure it both ways.
ceposta:1378268532:2013-09-04T12:22:12.116+0000:1378268532:2013-09-04T12:22:12.116+0000:So option would be xmlStreamWriter=""CustomStreamWriter.class"" and would use camel injector classes to create the actual bean in the registry? very good. i'll update the patch.
thx!
davsclaus:1378269583:2013-09-04T12:39:43.266+0000:1378269583:2013-09-04T12:39:43.266+0000:if you configure in xml, then it ought to be
{code}
<bean id=""myCustomWriter"" class=""xxx""/>
{code}

And then in Camel data format something a like
{code}
<dataFormats>
<jaxb id=""jaxb"" xmlStreamWriter=""#myCustomWriter"" .../>
...
{code}

Though data formats is a bit different than components but the idea should be the same that # can be used.
ceposta:1378269807:2013-09-04T12:43:27.270+0000:1378269807:2013-09-04T12:43:27.270+0000:thx for clarification. i'm not a big fan of the xxRef way, just saw it done like that already and wanted to stay consistent. will change to the above as seems cleaner.
ceposta:1378387081:2013-09-05T21:18:01.858+0000:1378387081:2013-09-05T21:18:01.858+0000:Claus, 

looking for feedback here. data formats don't have good access to the camel context (unless in the data format itself, which not all have), so looking up beans can be hit or miss depending on the data format used. For jaxb it works fine. See revised patch and give suggestions. Check the changes I made for DataFormatDefinition. It correctly resolves refNames that start with '#' but not very pretty :) All tests pass...
davsclaus:1378860347:2013-09-11T08:45:47.415+0000:1378860347:2013-09-11T08:45:47.415+0000:Christian,

Yeah we can make this nicer, so I logged CAMEL-6728 so we have CamelContext at our fingertips.
davsclaus:1378864838:2013-09-11T10:00:38.966+0000:1378864838:2013-09-11T10:00:38.966+0000:Thanks Christian, do you mind updating the docs at: http://camel.apache.org/jaxb
About this new functionality. Its included in 2.12.1 onwards.
ceposta:1378879797:2013-09-11T14:09:57.851+0000:1378879797:2013-09-11T14:09:57.851+0000:Thanks Claus for applying and the extra changes you made to make this work nicely.
I've updated the wiki, should be good to go.

"
0,CAMEL-6676,New Feature,Major,None,None,"

components

",Resolved,Fixed,2.12.0,Willem Jiang,Dhiraj Sureshkumar Bokde,0,5,2013-08-28 17:39:05+00:00,2014-02-27 08:18:09+00:00,Add a component that uses Facebook4J API to expose all its functionality through easy to configure Camel URIs.,"dhirajsb:1377682965:2013-08-28T17:42:45.581+0000:1377682965:2013-08-28T17:42:45.581+0000:The component has been designed to allow access to all of the over 400 methods exposed by the Facebook4J API to work with all Facebook Objects. It also supports over 60 uri properties for all the APIs. 

The component is almost finished, just needs a couple of days more to wrap up unit tests and initial docs before I can submit. Hopefully it can be added to the 2.12.0 release. 
njiang:1377711026:2013-08-29T01:30:26.606+0000:1377711026:2013-08-29T01:30:26.606+0000:Hi Dhiraj,

Could you push the code into github first? I think we can have quick look of you code before you shape it for release :)
BTW, as I just cut a RC of the Camel 2.12.0, we can consider to release this component in Camel 2.12.1.

Willem

dhirajsb:1377740673:2013-08-29T09:44:33.314+0000:1377740673:2013-08-29T09:44:33.314+0000:Sent pull request https://github.com/apache/camel/pull/41 with initial version of the component. 
davsclaus:1377913024:2013-08-31T09:37:04.370+0000:1377913024:2013-08-31T09:37:04.370+0000:Dhiraj do you have documentation for the component as well?
dhirajsb:1377959392:2013-08-31T22:29:52.661+0000:1377985391:2013-09-01T05:43:11.437+0000:Claus, I'm working on the documentation.  Will submit next week.  

dhirajsb:1378043821:2013-09-01T21:57:01.016+0000:1378043821:2013-09-01T21:57:01.016+0000:Added couple of fixes to pull request https://github.com/apache/camel/pull/41

muellerc:1378732198:2013-09-09T21:09:58.657+0000:1378732198:2013-09-09T21:09:58.657+0000:[~dhirajsb]: Camel 2.12.0 is released. Any chance to attach the documentation soon?
dhirajsb:1378820992:2013-09-10T21:49:52.145+0000:1378820992:2013-09-10T21:49:52.145+0000:Sorry about the delay. I am working on it right now, I will add it to this JIRA later today. 

dhirajsb:1378828846:2013-09-11T00:00:46.522+0000:1378828870:2013-09-11T00:01:10.538+0000:Attaching component documentation in Markdown
davsclaus:1379123030:2013-09-14T09:43:50.307+0000:1379123030:2013-09-14T09:43:50.307+0000:Thanks for the docs, and Willem for adding them to our wiki
githubbot:1393460289:2014-02-27T08:18:09.037+0000:1393460289:2014-02-27T08:18:09.037+0000:Github user dhirajsb closed the pull request at:

    https://github.com/apache/camel/pull/41
"
0,CAMEL-6675,Task,Minor,2.12.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Christian Müller,Claus Ibsen,0,4,2013-08-28 14:33:32+00:00,2013-09-30 23:56:42+00:00,Hazelcast 3.x is out. We should migrate to this new major release.,"muellerc:1380544401:2013-09-30T20:33:21.896+0000:1380544401:2013-09-30T20:33:21.896+0000:I'm fixing a check style error. By running
{noformat}
mvn clean install -Psourcecheck
{noformat}
you can make sure the patch follows our Checkstyle rules.
muellerc:1380545087:2013-09-30T20:44:47.270+0000:1380545087:2013-09-30T20:44:47.270+0000:The camel-hazelcast feature doesn't work anymore after applying the patch:
{noformat}
mvn clean install -Pvalidate
...
[INFO]     OK: imports resolved for camel-hawtdb
[WARNING] Failed to validate feature camel-hazelcast
[WARNING] No export found to match com.hazelcast.transaction;version=""[1.9,3)"" (imported by mvn:org.apache.camel/camel-hazelcast/2.13-SNAPSHOT)
[WARNING] No export found to match com.hazelcast.core;version=""[1.9,3)"" (imported by mvn:org.apache.camel/camel-hazelcast/2.13-SNAPSHOT)
[WARNING] No export found to match com.hazelcast.config;version=""[1.9,3)"" (imported by mvn:org.apache.camel/camel-hazelcast/2.13-SNAPSHOT)
[WARNING] No export found to match com.hazelcast.query;version=""[1.9,3)"" (imported by mvn:org.apache.camel/camel-hazelcast/2.13-SNAPSHOT)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
{noformat}

Working on a fix...
muellerc:1380545509:2013-09-30T20:51:49.786+0000:1380545509:2013-09-30T20:51:49.786+0000:Thanks Marios Trivizas for the patch!
bvahdat:1380556602:2013-09-30T23:56:42.191+0000:1380556602:2013-09-30T23:56:42.191+0000:The karaf feature validation is fixed."
0,CAMEL-6674,Improvement,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-28 12:49:02+00:00,2013-09-02 08:53:51+00:00,"See nabble
http://camel.465427.n5.nabble.com/Xpath-parameter-binding-NodeList-vs-Node-tp5738067.html


This avoids the situation with the NodeList -> Node converter that may return null the 1st time, and then its regarded as a misses for conversion in future attempts.


Just be annotation the method from
@Converter


to:
@Converter(allowNull = true)


Should allow to fix this. As then the type converter registry knows that a null response is valid.",
0,CAMEL-6673,Task,Major,2.12.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,2,2013-08-27 10:30:33+00:00,2013-08-28 00:58:08+00:00,As they are runtime required we should shade that directly into camel-core so its included out of the box for everybody.,"njiang:1377622688:2013-08-28T00:58:08.051+0000:1377622688:2013-08-28T00:58:08.051+0000:spi-annotations is already shaded into camel-core by bnd plugin, we don't need to use the shaded plugin to do this kind of job.
So I just revert the change for camel-2.12.0 release."
0,CAMEL-6672,Bug,Minor,2.12.0,None,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Willem Jiang,0,1,2013-08-27 06:53:11+00:00,2013-08-27 10:08:14+00:00,"When using the camel-rabbitmq to consume the message, we need to make sure the exchange and queue declare with the same configuration.
Here is the discussion about it.",
0,CAMEL-6671,Improvement,Major,2.12.0,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-27 06:34:41+00:00,2013-09-05 11:01:15+00:00,"If you want to download a single file, and you know the absolute name of the file, then you should be able to download the file, without using any LIST commands. As some use-cases have permissions disabled for this, so you can only download that file only.


The ftp/sftp consumers should have an option to ?useList=false, so they do not use the list command.","davsclaus:1377563687:2013-08-27T08:34:47.763+0000:1377563687:2013-08-27T08:34:47.763+0000:You should set stepwise=false also. 

And we may want an option to control if we should fail if the file does not exist or just ignore. As when we useList=false, we do not know if the file is there or not. We can just try to download it, and if its not there, we would get an exception. So having an option to ignore that may be desirable as well.
davsclaus:1377569028:2013-08-27T10:03:48.373+0000:1377569028:2013-08-27T10:03:48.373+0000:Putting this on hold as if you use stepwise=false then the LIST command currently in-use will use the pathname, which may be allowed if the user account can download the file, its likely that it can LIST the file itself also.

If not we would have to add new logic that is a bit more complicated to deal with this, and thus putting on hold.
davsclaus:1378342254:2013-09-05T08:50:54.508+0000:1378342254:2013-09-05T08:50:54.508+0000:This would allow people to download a named file where the user does not have permission on the FTP server to execute the LIST command."
0,CAMEL-6670,Improvement,Minor,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Christian Posta,Claus Ibsen,0,4,2013-08-26 14:57:10+00:00,2013-10-11 13:24:55+00:00,"See SO
http://stackoverflow.com/questions/18446689/how-to-get-the-information-that-throttling-limit-has-been-reached


We would need to extend the org.apache.camel.processor.Throttler so it keeps state whether its holding back exchanges due hit limit, or not. Wonder what a name should be. It could be a simple boolean to indicate that. And/or a counter that counts the number of exchanges being hold back. Then ppl can have a graph with the counter.


This data should be exposed in JMX with org.apache.camel.api.management.mbean.ManagedThrottlerMBean","ceposta:1379947556:2013-09-23T22:45:56.469+0000:1379947556:2013-09-23T22:45:56.469+0000:working on a patch..
jwcarman:1380353283:2013-09-28T15:28:03.318+0000:1380353283:2013-09-28T15:28:03.318+0000:I have an idea how to fix this, but I don't know about the implementation as it currently stands.  The access to the timePeriodMillis isn't synchronized, but it's allowed to be modified via JMX, so it probably should be.  Perhaps changing it to AtomicLong?

ceposta:1381262875:2013-10-09T04:07:55.517+0000:1381262875:2013-10-09T04:07:55.517+0000:patch + tests attached. 
davsclaus:1381464472:2013-10-11T12:07:52.232+0000:1381464472:2013-10-11T12:07:52.232+0000:Thanks for the patch and tests. 

Looks good, I just made the inc/dec counter logic a bit simpler to not be needed in the async callback. This also ensures we dec the counter as soon as we start procesing the exchange, so the counter is fully up to date.

We should expose the JMX attribute in ManagedDelayer also. Christian do you want to work on a patch with that?
ceposta:1381468828:2013-10-11T13:20:28.096+0000:1381468828:2013-10-11T13:20:28.096+0000:Thanks Claus. Sure I can do ManagedDelayer. Will open a JIRA for that."
0,CAMEL-6669,Bug,Major,2.11.1,2.12.0,"
None
",Resolved,Cannot Reproduce,2.12.0,Claus Ibsen,Steffen Bollweber,0,2,2013-08-26 12:06:35+00:00,2013-08-28 12:14:52+00:00,"I tried to write a file on a ftp server using a done file to signal the end of the file transmission. I guess the file/ftp component preserves the doneFileName option. But the ftp component doesn't replace the doneFileName=${file:name} correctly. 


My fpt endpoint looks like this: 




.to(ftp:myuser@myserver/mypath?doneFileName=${file:name}.done&charset=utf-8&password={{ftp.passwd}})





But the route generates only a file with name name.done


I also tried the option stepwise=false as described here http://camel.465427.n5.nabble.com/doneFileName-doesn-t-seem-to-work-td4704701.html. With the same result.


I also test this option with the file component and it works.","davsclaus:1377500493:2013-08-26T15:01:33.035+0000:1377500493:2013-08-26T15:01:33.035+0000:Can you double check on your end, as we have unit test that test this use-cases
org.apache.camel.component.file.remote.FtpProducerDoneFileNameTest
davsclaus:1377500606:2013-08-26T15:03:26.856+0000:1377500606:2013-08-26T15:03:26.856+0000:Please use the mailinglist/forum first for help
sbollweber:1377582139:2013-08-27T13:42:19.169+0000:1377582201:2013-08-27T13:43:21.332+0000:This problem also exists in the file component and it only occurs if I try to read the directory from a properties file. 
{code:java}
.to(""file:{{temp-dir}}/out/?doneFileName=${file:name}.done&charset=utf-8"")
{code}
Greetings Steffen
davsclaus:1377663292:2013-08-28T12:14:52.959+0000:1377663292:2013-08-28T12:14:52.959+0000:Added unit test and works fine

https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob;f=camel-core/src/test/java/org/apache/camel/component/file/FilerProducerDoneFileNameRouteTest.java;h=4fbb9fecda83b75bfda60fb0b63aa4076746ef1c;hb=a59bf62587c0e4c270f9a3235f3b2b9acf2c5f69"
0,CAMEL-6668,Improvement,Minor,2.11.1,2.14.0,"

build
m2e
maven
patch

",Closed,Fixed,2.14.0,Gregor Zurowski,Tom Ellis,0,2,2013-08-25 23:25:39+00:00,2014-04-24 01:48:42+00:00,"The m2e eclipse plugin requires additional lifecycle mapping configuration for maven plugins that do not contribute this info.


I've made a first attempt to add these mappings for the maven plugins used by the camel projects in the attached patch, where I've mapped out the plugins that require mapping to all execute.


Importing projects using the m2e 'Import -> Existing Maven Projects' will work, although perhaps not straight off the bat. I found it best to import all the camel projects into a working set, cancel the immediate attempt to build after import, then right click on the working set and go Maven -> Update Project and let it build from there. If a couple of projects such as camel-jibx still give errors, another Update Project on the individual project should fix. Obviously it would be nicer if these directly after import, but I believe there is a build ordering issue. I am unsure of what plugins could actually be set to ignore and that wouldn't affect building/testing within eclipse so have just set all to execute - I'll let those who know the build setup better decide if some can be ignored.


A couple of requirements:


For the camel-groovy project, the GroovyEclipse plugin and GroovyEclipse M2E connector must be obtained from the marketplace.


For the camel-scala project, the Scala IDE plugin and m2eclipse-scala connector must be obtained as described on http://scala-ide.org/docs/user/gettingstarted.html


I was running Eclipse 4.3 Kepler on jdk 7_45 - I found that the cxf codegen maven plugin would use JAX-WS 2.2 when compiling soap wsdls, so I had to add the jaxws21 frontend to ensure these were created with 2.1. This may need to be changed when Camel starts getting built with source/target 1.7?",gzurowski:1398275138:2014-04-24T01:45:38.135+0000:1398275309:2014-04-24T01:48:29.604+0000:The requested functionality has been implemented with CAMEL-7326.
0,CAMEL-6637,Improvement,Minor,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Sam Lewis,0,2,2013-08-14 12:37:08+00:00,2013-08-14 13:09:20+00:00,"The BeanIODataFormat has the properties:



ignoreUnidentifiedRecords
ignoreUnexpectedRecords
ignoreInvalidRecords



In the error handler, these issues are always logged at WARN level regardless of the above settings.


I would say that if the developer is happy to ignore these issues by explicitly configuring them to ignored, when these issues are encountered they should be logged at DEBUG level.",davsclaus:1376456960:2013-08-14T13:09:20.258+0000:1376456960:2013-08-14T13:09:20.258+0000:Thanks.
0,CAMEL-6636,Bug,Major,2.11.0,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Per Jørgen Walstrøm,0,2,2013-08-14 10:27:57+00:00,2013-08-14 10:52:48+00:00,"two routes within the same camel-context are configured as shown below. They post to two different URLs; route1 stating no port (implicitly, this should mean port 80) and route2 stating port 81.


During start-up, the following is logged


{{
12:06:52.316 [main] INFO  o.a.c.component.http4.HttpComponent - Registering PLAIN scheme http4 on port 80
12:06:52.372 [main] INFO  o.a.c.component.http4.HttpComponent - Registering PLAIN scheme http4 on port 81
}}


when the post is actually done, the following is logged


{{
12:18:46.437 Camel (d-2) thread #8 - Threads DEBUG o.a.h.i.c.DefaultClientConnectionOperator - Connecting to bar.com:81
12:18:46.465 Camel (d-2) thread #7 - Threads DEBUG o.a.h.i.c.DefaultClientConnectionOperator - Connecting to example.com:81
}}


Port 81 is re-used also for route1. There are some workarounds for this:



the order of the route configuration is significant. If route2 was configured before route1, everything would work ok
if we explicitly set port 80 in route1 (example.com:80), everything works fine



The DefaultClientConnectionOperator.openConnection() finds the port from the registry.getScheme(target.getSchemeName()) which returns port 81. This is used as default port if no port is set.


The DefaultClientConnectionOperator is deprecated in 4.3, you may want to use PoolingHttpClientConnectionManager (don't know if this solves the problem, though).


Or maybe this is not a Camel problem but a HttpClient bug?



from(""activemq:topic:foo"")
.routeId(""route1"")
.threads()               
.setHeader(HTTP_METHOD, constant(""POST""))
.to(""http4://example.com"");
from(""activemq:topic:foo"")
.routeId(""route2"")
.threads()               
.setHeader(HTTP_METHOD, constant(""POST""))
.to(""http4://bar.com:81"");",davsclaus:1376447645:2013-08-14T10:34:05.769+0000:1376447645:2013-08-14T10:34:05.769+0000:Duplicate of CAMEL-6078
0,CAMEL-6635,Improvement,Major,None,2.12.0,"
None
",Resolved,Abandoned,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-14 08:13:10+00:00,2013-08-14 14:55:18+00:00,"Due the recent SPI which allows to plugin a different scheduler we can improved this and use a non scheduled thread pool, which avoids the suspend/resume and run for at least one poll ""hack"" we have today in the codebase.


Instead we can use a regular thread pool as the scheduler, and then submit the task on demand when receive() is called on the PollingConsumer API.",davsclaus:1376463318:2013-08-14T14:55:18.394+0000:1376463318:2013-08-14T14:55:18.394+0000:Darn the polling consumer logic wasn't too well equipped for this kind. Had to revert to use the old way to allow picking up late files that arrives later when the poll starts.
0,CAMEL-6634,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-14 07:17:38+00:00,2013-08-14 07:18:45+00:00,This is the only option which doesnt today support property placeholders. We should add support for that on this option too.,
0,CAMEL-6633,Test,Minor,None,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2013-08-13 14:04:00+00:00,2013-08-13 15:00:44+00:00,Adding some ws-spec tests to tests/camel-blueprint-cxf-test as examples for more general test cases using cxf with camel.,
0,CAMEL-6632,Bug,Major,2.11.1,,"
None
",Resolved,Abandoned,None,Unassigned,Tommaso Schiavinotto,0,2,2013-08-13 11:58:27+00:00,2015-02-15 17:15:48+00:00,"camel-kestrel missing from component list ***







I've a Camel process (that I run from command line) which route is similar to this one:


public class ProfilerRoute extends RouteBuilder {


 @Override
 public void configure() {   
    from(""kestrel://my_queue?concurrentConsumers=10&waitTimeMs=500"")
        .unmarshal().json(JsonLibrary.Jackson, MyClass.class)
        .process(new Processor() {
                 @Override
                 public void process(Exchange exchange) throws Exception 

{
                     /* Do the real processing [...] */
                     exchange.getIn().setBody(null);
                 }

        })
        .filter(body().isNotNull())
        .to(""file://nowhere"");
 }
}
Note that I'm trashing whatever message after having processed it, being this a pure consumer process.


The process is run by its own. No other process is writing on the queue, the queue is empty. However when I try to kill the process the process is not going to die.


From the logs I see the following lines (indented for readability):


[                      Thread-1] MainSupport$HangupInterceptor  INFO  
                                 Received hang up - stopping the main instance.
[                      Thread-1] MainSupport                    INFO
                                 Apache Camel stopping
[                      Thread-1] GuiceCamelContext              INFO
                                 Apache Camel 2.11.1 (CamelContext: camel-1) 
                                 is shutting down
[                      Thread-1] DefaultShutdownStrategy        INFO
                                 Starting to graceful shutdown 1 routes 
                                 (timeout 300 seconds)
l-1) thread #12 - ShutdownTask DefaultShutdownStrategy        INFO
                                 Waiting as there are still 10 inflight and 
                                 pending exchanges to complete, 
                                 timeout in 300 seconds.
And so on with decreasing timeout. At the end of the timeout I get on the logs:


l-1) thread #12 - ShutdownTask DefaultShutdownStrategy        INFO
                                 Waiting as there are still 10 inflight and 
                                 pending exchanges to complete,
                                 timeout in 1 seconds.
[                      Thread-1] DefaultShutdownStrategy        WARN
                                 Timeout occurred. 
                                 Now forcing the routes to be shutdown now.
l-1) thread #12 - ShutdownTask DefaultShutdownStrategy        WARN
                                 Interrupted while waiting during graceful 
                                 shutdown, will force shutdown now.
[                      Thread-1] KestrelConsumer                INFO  
                                 Stopping consumer for 
                                 kestrel://localhost:22133/my_queue?concurrentConsumers=10&waitTimeMs=500


But the process will not die anyway (even if I try to kill it at this point).


I would have expected that after the waiting time all the threads would realise that a shutdown is going on and stop.


I've read the ""Graceful Shutdown"" document, however I could not find something that explains the behaviour I'm facing.


As you can see from logs I'm using the 2.11.1 version of Apache Camel.","davsclaus:1423991380:2015-02-15T17:09:40.262+0000:1423991380:2015-02-15T17:09:40.262+0000:This is several years ago. Anyone able to reproduce with latest code?
davsclaus:1423991748:2015-02-15T17:15:48.799+0000:1423991748:2015-02-15T17:15:48.799+0000:Kestrel is EOL "
0,CAMEL-6631,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-13 09:46:04+00:00,2013-08-13 12:33:00+00:00,"The org.apache.camel.impl.ScheduledPollConsumer which file/ftp and other scheduled consumer is based upon is using the scheduled thread pool to run the task at X given interval. 


It would be great to allow to plugin a different scheduler to be used, for example camel-quartz with a cron expression. This allows more advanced configuration of the scheduler when it should run.","davsclaus:1376368380:2013-08-13T12:33:00.391+0000:1376368380:2013-08-13T12:33:00.391+0000:See more details at polling consumer docs, and quartz2 for a cron based scheduler"
0,CAMEL-6630,Bug,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Christian Müller,Ales Dolecek,0,2,2013-08-13 09:32:21+00:00,2013-08-20 21:34:11+00:00,"I'm using JAXB format for unmarshaling. It is defined like this:


<dataFormats>
  <jaxb id=""kofax"" contextPath=""com.indracompany.telefonica.assignmanager""
      schema=""classpath:DocumentsDataForAssignManager.xsd""/>
</dataFormats>


And used in route like this:


<unmarshal ref=""kofax""/>


Sometimes however I get following exception:


org.xml.sax.SAXException: FWK005 parse may not be called while parsing.
	at com.sun.org.apache.xerces.internal.jaxp.validation.Util.toSAXException(Util.java:65) ~[na:1.7.0_21]
	at com.sun.org.apache.xerces.internal.jaxp.validation.XMLSchemaFactory.newSchema(XMLSchemaFactory.java:244) ~[na:1.7.0_21]
	at org.apache.camel.converter.jaxb.JaxbDataFormat.createUnmarshaller(JaxbDataFormat.java:347) ~[camel-jaxb-2.11.1.jar:2.11.1]
	at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:171) ~[camel-jaxb-2.11.1.jar:2.11.1]
	at org.apache.camel.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:57) ~[camel-core-2.11.1.jar:2.11.1]


Seems that the problem is same as in CAMEL-1565. That ticket was however related to <validate> element.


Right now I have disabled validation on the jaxb format used for unmarshalling and put extra <validate> in the route. It would be however fine to have this issue fixed as well.","muellerc:1376662433:2013-08-16T22:13:53.233+0000:1376662433:2013-08-16T22:13:53.233+0000:The reason is, the [SchemaFactory|http://download.java.net/jdk7/archive/b123/docs/api/javax/xml/validation/SchemaFactory.html] is not thread safe. WTF...
muellerc:1377004863:2013-08-20T21:21:03.103+0000:1377004863:2013-08-20T21:21:03.103+0000:I created an unit test which shows this issue.

The current implementation needs 9.9 seconds on my machine to unmarshall and 5.8 seconds to marshall 10000 sample xml strings/java objects (single threaded). Of course is fails in the multi threaded case...

By implementing the simplest solution (creating a new SchemaFactory instance per exchange), we got a performance penalty by 20% - 30%.
Because of this, I solved this by pooling the SchemaFactory instances using a LinkedBlockingQueue like we do it already in org.apache.camel.converter.jaxp.StaxConverter."
0,CAMEL-6629,Improvement,Major,"2.10.4, 2.11.1","2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Pratyusha Ghosh,0,2,2013-08-13 07:01:13+00:00,2013-08-29 10:04:10+00:00,"Add requestBufferSize and requestHeaderSize options for jetty server to allow configuration of allowable request header limit
This option is exposed by standalone jetty server but not exposed by camel-jetty.","pratg:1376348603:2013-08-13T07:03:23.156+0000:1376348603:2013-08-13T07:03:23.156+0000:The options should allow to configure the request header size to avoid issues pertaining to ""Status Code: 413 FULL head; Server: Jetty(7.5.4.v20111024)"" in camel 2.10.4
davsclaus:1376350866:2013-08-13T07:41:06.418+0000:1376350866:2013-08-13T07:41:06.418+0000:You can set the socketConnectorProperties option on the jetty component that can set these options.
davsclaus:1376544655:2013-08-15T13:30:55.351+0000:1376544655:2013-08-15T13:30:55.351+0000:There is now options to make it easier to setup these settings on the jetty component.
pratg:1377727243:2013-08-29T06:00:43.391+0000:1377727495:2013-08-29T06:04:55.185+0000:I am configuring jetty endpoint like jetty:http://%s:%d/?sessionSupport=true
How can I set the option for setting requestHeaderSize in the endpoint URL via socketConnectorProperties? I tried appending ""requestHeaderSize=12288"" but did not work. The default is 6kb for Jetty.
davsclaus:1377727697:2013-08-29T06:08:17.420+0000:1377727697:2013-08-29T06:08:17.420+0000:You can also check the source code of camel-jetty where you can possible find unit tests that covers this. And then there is the jetty docs at: http://camel.apache.org/jetty
pratg:1377731277:2013-08-29T07:07:57.134+0000:1377731277:2013-08-29T07:07:57.134+0000:Could not find a way to configure the options in Jetty Endpoint. Request is for adding support for setting ""requestHeaderSize"" & ""requestBufferSize"" in JettyHttpEndpoint.
pratg:1377731452:2013-08-29T07:10:52.604+0000:1377731600:2013-08-29T07:13:20.347+0000:Could not find unit tests covering this in camel-jetty sources.
If feature already available, request to provide example URI endpoint configuration to set these limits.
davsclaus:1377731721:2013-08-29T07:15:21.458+0000:1377731721:2013-08-29T07:15:21.458+0000:See org.apache.camel.component.jetty.JettyRouteWithSocketPropertiesTest
pratg:1377738114:2013-08-29T09:01:54.304+0000:1377739854:2013-08-29T09:30:54.354+0000:I need to create the {{JettyHttpEndpoint}} dynamically like http://%s:%d/?sessionSupport=true&minThreads=%d& *requestHeaderSize=%d* Hence, static configuration on JettyHttpComponent in spring context file will not help in my case. 
Plz consider exposing {{socketConnectorProperties}} as an option on *JettyHttpEndpoint* similar to _sslContextParametersRef_ & _httpClient.XXX_.
davsclaus:1377741850:2013-08-29T10:04:10.540+0000:1377741850:2013-08-29T10:04:10.540+0000:You must configure them on the component level as they are connector specific!"
0,CAMEL-6628,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-12 14:22:05+00:00,2013-08-12 14:55:33+00:00,"There can be situations where you do not want the producer template to emit events for exchange sending + sent.


See nabble
http://camel.465427.n5.nabble.com/Bug-with-addEventNotifier-fires-two-exchange-sent-events-for-each-Exchange-sent-tp5737086.html",davsclaus:1376290533:2013-08-12T14:55:33.532+0000:1376290533:2013-08-12T14:55:33.532+0000:There is now API on ProducerTemplate to turn this on|off (default is on)
0,CAMEL-6627,Bug,Major,None,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-12 12:41:36+00:00,2013-08-12 13:26:16+00:00,"See nabble
http://camel.465427.n5.nabble.com/moveFailed-is-failing-when-streaming-is-on-tp5737065.html


We should ensure the splitter iterator is closed when we are done with splitting due to an exception. The current logic only closes at the end, which you we wont reach if stopOnException is enabled.",
0,CAMEL-6626,Bug,Major,2.11.1,"2.11.2, 2.12.0","

easyfix

",Resolved,Fixed,"2.11.2, 2.12.0",Willem Jiang,Ales Dolecek,0,4,2013-08-12 08:45:29+00:00,2013-08-13 07:16:32+00:00,"Use of searchTerm.toSentDate=now-24h (to poll only mails older than 24 hours) throws NPE. This is because MailConverters#toSearchTerm tries to build ""toSentDate"" criteria from ""fromSentDate"" value:


        if (simple.getToSentDate() != null) {
            String s = simple.getFromSentDate();
            if (s.startsWith(""now"")) {


The middle line should be:


            String s = simple.getToSentDate();","ales_d:1376268926:2013-08-12T08:55:26.816+0000:1376268926:2013-08-12T08:55:26.816+0000:Looking at the code I see that other search criteria are wrong as well - namely:

toSentDate
fromReceivedDate
toReceivedDate

The problem is same in all cases - variable s is initialized from ""fromSentDate"".

The critera were probably created with ""copy-paste"" and the copied code not fixed.

Ales


davsclaus:1376285242:2013-08-12T13:27:22.009+0000:1376285242:2013-08-12T13:27:22.009+0000:Ales, thanks for reporting.

Are you working on a patch to fix this?

We love contributions
http://camel.apache.org/contributing.html
davidkarlsen@gmail.com:1376288921:2013-08-12T14:28:41.044+0000:1376288921:2013-08-12T14:28:41.044+0000:https://github.com/apache/camel/pull/39
ales_d:1376293526:2013-08-12T15:45:26.067+0000:1376293526:2013-08-12T15:45:26.067+0000:The pull request still contains one error left:

        if (simple.getFromReceivedDate() != null) {
            String s = simple.getFromSentDate();
            if (s.startsWith(""now"")) {
davidkarlsen@gmail.com:1376303095:2013-08-12T18:24:55.035+0000:1376303095:2013-08-12T18:24:55.035+0000:I've updated the branch.
njiang:1376349392:2013-08-13T07:16:32.048+0000:1376349392:2013-08-13T07:16:32.048+0000:Applied the patch into master and camel-2.11.x branches with thanks to Ales."
0,CAMEL-6625,Bug,Major,None,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2013-08-12 06:59:14+00:00,2013-08-15 06:49:34+00:00,"currently in CxfConsumer we have code like



                BindingOperationInfo boi = cxfExchange.getBindingOperationInfo();
                // make sure the ""boi"" is remained as wrapped in PAYLOAD mode
                if (dataFormat == DataFormat.PAYLOAD && boi.isUnwrapped()) {
                    boi = boi.getWrappedOperation();
                    cxfExchange.put(BindingOperationInfo.class, boi);
                }





however, the boi could be NULL if the message PAYLOAD not match the ServiceModel, which means can't determine the operation from the PAYLOAD, should add a NPE guarder before boi.isUnwrapped to avoid the NPE",
0,CAMEL-6624,Bug,Major,2.11.1,,"

easyfix

",Resolved,Not A Problem,None,Willem Jiang,Bob Jolliffe,0,2,2013-08-10 09:08:55+00:00,2013-08-12 08:05:09+00:00,"I have a route like the following:


        <route>
            <from uri=""file://tracnet?charset=ISO-8859-1""/>
            <c:split streaming=""true"">
                <c:tokenize token=""\n""/>
                <unmarshal>
                    <csv delimiter=""\t""/>
                </unmarshal>
                <to uri=""log:org.hisp.dhix?showAll=true""/>
            </c:split>
        </route>


My camel context complains that the delimiter should be of length 1 when I try to load this.  It seems it sees my escaped tab as 2 characters?","bobjolliffe:1376100007:2013-08-10T10:00:07.861+0000:1376100007:2013-08-10T10:00:07.861+0000:The exception thrown is:
Caused by: java.lang.IllegalArgumentException: String must have exactly a length of 1: ""\t""
	at org.apache.camel.converter.ObjectConverter.toChar(ObjectConverter.java:101)

This ObjectConverter method does behave correctly when passed a string of ""\t"" so it seems the string escape characters are being protected prior to being passed for conversion.  Also affects flatpack component .. the same object converter method is being used. 
njiang:1376260295:2013-08-12T06:31:35.132+0000:1376265909:2013-08-12T08:05:09.869+0000:I just did some tests with your test case and found the tab character works as design.
You need to use {code}""&#x9;""{code} to specify the tab character in XML.

You can find for information [here|http://www.pcreview.co.uk/forums/tab-characters-xml-file-t3540246.html]

"
0,CAMEL-6623,Improvement,Minor,"2.10.6, 2.11.1, 2.12.0","2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Chris Geer,0,3,2013-08-09 16:57:59+00:00,2013-12-26 01:13:30+00:00,Currently the code assume that the user either has permission to list all the queues on their account or run a query request to get the queue url. In situations where security is more controlled you might have permission to read/write to/from a queue but not have permission to query SQS for the URL. In these cases there needs to be a way to manually build the URL from the pieces in the configuration.,"geerzo:1387830027:2013-12-24T04:20:27.355+0000:1387830027:2013-12-24T04:20:27.355+0000:This patch will manually build the queueURL if both the region and accountID are provided. This allows for attaching to queues that don't allow listing and querying.
njiang:1387991610:2013-12-26T01:13:30.147+0000:1387991610:2013-12-26T01:13:30.147+0000:Applied the patch into master and camel-2.12.x branches with thanks to Chris. I also updated the wiki page for it."
0,CAMEL-6622,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Colm O hEigeartaigh,0,2,2013-08-09 12:46:20+00:00,2013-08-15 11:32:39+00:00,"This task is to support XML Encryption 1.1 functionality in the camel-xmlsecurity component. This includes:


a) Support for the ""GCM"" versions of AES
b) Support for SHA > 1 with the RSA OAEP algorithm
c) Support for MGF algorithms with SHA > 1","coheigea:1376023692:2013-08-09T12:48:12.444+0000:1376023692:2013-08-09T12:48:12.444+0000:
See attached for a patch for this issue + unit tests. I'll leave it up to the committer to decide whether it should only go on trunk or whether it should be backported.

Colm.
davsclaus:1376300893:2013-08-12T17:48:13.643+0000:1376300893:2013-08-12T17:48:13.643+0000:Thanks for the patch.

When adding new options to a data format, then they should be added in camel-core in the model package so these options is also available in XML DSL. Do you mind taking a look at adding that to the patch?
coheigea:1376363450:2013-08-13T11:10:50.827+0000:1376363450:2013-08-13T11:10:50.827+0000:Hi Claus,

In the patch I submitted, I added the ability to set the ""digestAlgorithm"" in model.dataformat.XMLSecurityDataFormat, both via the constructor and via a accessor method. Would it suffice to add the ability to set the ""mgfAlgorithm"" via an accessor here as well, or must it also be set via a constructor? I ask as the constructor argument count is already getting enormous here.

Thanks,

Colm.
davsclaus:1376447835:2013-08-14T10:37:15.443+0000:1376447835:2013-08-14T10:37:15.443+0000:Ah okay so mgfAlgorithm should not be configurable? 
coheigea:1376448100:2013-08-14T10:41:40.444+0000:1376448100:2013-08-14T10:41:40.444+0000:
No it should be configurable, although I don't expect it to be used very often. My question was more abstract: in general in Camel if adding new configuration options for a DataFormat, must it always be added to the constructor of the DataFormat in camel-core? Or will a setX suffice if it is not a commonly used option?

Thanks,

Colm.
davsclaus:1376448263:2013-08-14T10:44:23.571+0000:1376448263:2013-08-14T10:44:23.571+0000:Using getter/setter is the preferred way. Most others dont have ctr parameters. The contributor of the xmlsecurity used ctrl as well and hence why they are there today.


davsclaus:1376448373:2013-08-14T10:46:13.789+0000:1376448373:2013-08-14T10:46:13.789+0000:I am applying the patch right now on master.

Fell free to help updating the docs at
http://camel.apache.org/xmlsecurity-dataformat.html
coheigea:1376536384:2013-08-15T11:13:04.784+0000:1376536384:2013-08-15T11:13:04.784+0000:
Thanks Claus, I have updated the wiki with the new configuration options.

Colm.
davsclaus:1376537505:2013-08-15T11:31:45.868+0000:1376537505:2013-08-15T11:31:45.868+0000:Thanks
davsclaus:1376537559:2013-08-15T11:32:39.601+0000:1376537559:2013-08-15T11:32:39.601+0000:Colm, fell free to add a note on the 2.12 release notes about this new functionality if you want
http://camel.apache.org/camel-2120-release.html"
0,CAMEL-6621,Improvement,Minor,2.11.1,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Jeff Eltgroth,0,2,2013-08-08 20:56:51+00:00,2013-08-09 16:58:22+00:00,"Unable to connect to Amazon SQS queue owned by a different account.  In B2B scenario, would like to have different accounts for owner, writer, and reader of a queue.","jeltgroth:1375966673:2013-08-08T20:57:53.096+0000:1375966673:2013-08-08T20:57:53.096+0000:Attaching patch
njiang:1375983210:2013-08-09T01:33:30.117+0000:1375983238:2013-08-09T01:33:58.968+0000:Applied the patch into master with thanks to Jeff.
I also updated the wiki page of camel-aws-sqs."
0,CAMEL-6620,Improvement,Major,2.11.1,,"
None
",Resolved,Invalid,None,Willem Jiang,Jason Chaffee,0,2,2013-08-08 18:52:34+00:00,2013-08-09 01:03:08+00:00,"I got an exception saying that an authMethod value is required.  So, I went to the docs and there is no mention of authMethod or the acceptable values.  I had to search the code find the AuthMethod enum to know what value is acceptable and to find the authMethod parameter name.","njiang:1375981371:2013-08-09T01:02:51.158+0000:1375981371:2013-08-09T01:02:51.158+0000:I just checked the code AuthMethod is just used in camel-http component, not the camel-http4 component. 
So it is not strange that there is no mention of AuthMethod in the http4 document.
I also checked the camel-http wiki page, there is entry of the options about the AuthMethod.
"
0,CAMEL-6619,Improvement,Trivial,None,None,"
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Colm O hEigeartaigh,0,2,2013-08-08 09:11:17+00:00,2013-08-09 07:45:45+00:00,"This is a patch to ignore line breaks in Apache Santuario in the camel-xmlsecurity component. It's a duplicate of some code in Apache WSS4J. Essentially it tells Apache Santuario not to insert needless line breaks in the generated XML, unless it has already been explicitly set (via a System property).","coheigea:1375924333:2013-08-08T09:12:13.252+0000:1375924333:2013-08-08T09:12:13.252+0000:
A patch for this issue.

Colm.
davsclaus:1376005545:2013-08-09T07:45:45.997+0000:1376005545:2013-08-09T07:45:45.997+0000:Thanks for the patch."
0,CAMEL-6618,Improvement,Minor,None,None,"
None
",Closed,Duplicate,None,Unassigned,Benjamin P. O'Day,0,1,2013-08-08 02:22:26+00:00,2013-08-22 00:07:20+00:00,"should consider upgrading to newer version of Lucene 4.4...not sure what other dependencies/timing would be involved in this upgrade, but the camel-solr and camel-elasticsearch components could also use upgrades to start using Lucene 4.x APIs...","jhm:1376611670:2013-08-16T08:07:50.447+0000:1376611670:2013-08-16T08:07:50.447+0000:CAMEL-5922 wants to update to Lucene 4.0
boday:1377101240:2013-08-22T00:07:20.530+0000:1377101240:2013-08-22T00:07:20.530+0000:duplicate of CAMEL-5922"
0,CAMEL-6617,Bug,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Willem Jiang,0,1,2013-08-08 00:43:10+00:00,2013-08-08 00:51:44+00:00,camel-rabbitmq component doesn't pass the body of the message down the line.,njiang:1375894304:2013-08-08T00:51:44.356+0000:1375894304:2013-08-08T00:51:44.356+0000:Applied the patch into master branch.
0,CAMEL-6616,Improvement,Major,2.11.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Mark Mc Kenna,0,6,2013-08-07 15:12:19+00:00,2016-08-07 14:17:51+00:00,On SMPP producer start if the SMSC returns a negative response on initial bind the Producer.start() method will get stuck in an infinite reconnect loop (assuming the SMSC is returning a negative response due to incorrect parameters),"muellerc:1375877594:2013-08-07T20:13:14.421+0000:1375877594:2013-08-07T20:13:14.421+0000:What do you expect instead?
mark.mckenna:1375922648:2013-08-08T08:44:08.740+0000:1375922648:2013-08-08T08:44:08.740+0000:I would expect the producer to give up after a configurable amount of time / or number of retries.

This also causes issues if you are running within Fuse ESB as the reconnect thread cannot be killed.
davsclaus:1436569894:2015-07-11T07:11:34.002+0000:1436569894:2015-07-11T07:11:34.002+0000:Anyone want to help with this. Seems like a good idea to have some maxReconnect and reconnectDelay options so it can eventually fail.
lb:1453878228:2016-01-27T15:03:48.301+0000:1453878228:2016-01-27T15:03:48.301+0000:I did a little analysis using SmppProducerReconnectIntegrationTest + seleniumsoftware simulator and so far the behavior is:

- if the first connection happens, the producer will try to reconnect if the connection get lost
- if the first connection fails (server down, wrong host/port, wrong credentials) the producer stops without retrying 

So it would be nice to know:
- what are the incorrect parameters leading to an infinite loop (I know it is a little late) 
- what should be the behavior in case of failure of the first connection.
githubbot:1470398131:2016-08-05T19:55:31.875+0000:1470398131:2016-08-05T19:55:31.875+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1112

    CAMEL-6616 smpp maxReconnect param

    As suggest a new param introduced

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1112.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1112
    
----
commit 056c65d9995c4bd024d21f311218b9f93b5fdae5
Author: onders86 <ondersezgin@gmail.com>
Date:   2016-08-05T19:48:48Z

    Merge pull request #1 from apache/master
    
    CAMEL-6616

----

githubbot:1470400035:2016-08-05T20:27:15.206+0000:1470400035:2016-08-05T20:27:15.206+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1112

githubbot:1470409143:2016-08-05T22:59:03.010+0000:1470409143:2016-08-05T22:59:03.010+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1113

    CAMEL-6616 smpp maxReconnect param

    As suggested, new param named maxReconnect added

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1113.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1113
    
----
commit 056c65d9995c4bd024d21f311218b9f93b5fdae5
Author: onders86 <ondersezgin@gmail.com>
Date:   2016-08-05T19:48:48Z

    Merge pull request #1 from apache/master
    
    CAMEL-6616

commit e01c6f81cc84a59bbc682949cdc9a2b7ac92d1b1
Author: önder sezgin <ondersezgin@gmail.com>
Date:   2016-08-05T22:50:41Z

    CAMEL-6616
    
    maxReconnect added

----

githubbot:1470550592:2016-08-07T14:16:32.075+0000:1470550592:2016-08-07T14:16:32.075+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1113

davsclaus:1470550671:2016-08-07T14:17:51.197+0000:1470550671:2016-08-07T14:17:51.197+0000:Thanks for the PR there is a maxReconnect option now"
0,CAMEL-6615,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Hadrian Zbarcea,Colm O hEigeartaigh,0,2,2013-08-07 09:53:31+00:00,2013-08-07 20:14:53+00:00,"This task is to upgrade the Apache Santuario (XML Security for Java) dependency from 1.5.1 -> 1.5.5. Also, to enable ""secureValidation"" by default for the decryption process, which gives automatic protection against some attacks.","coheigea:1375840963:2013-08-07T10:02:43.363+0000:1375840963:2013-08-07T10:02:43.363+0000:
A patch for this issue.

Colm.
hadrian:1375877693:2013-08-07T20:14:53.173+0000:1375877693:2013-08-07T20:14:53.173+0000:Thanks Colm for the patch!"
0,CAMEL-6614,Bug,Minor,None,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-07 08:37:37+00:00,2013-08-07 08:43:55+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-to-Pause-Quartz-Componenent-tp5736101.html",davsclaus:1375836235:2013-08-07T08:43:55.258+0000:1375836235:2013-08-07T08:43:55.258+0000:You can use stop/start instead.
0,CAMEL-6613,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Christian Müller,Benjamin P. O'Day,0,5,2013-08-07 02:57:32+00:00,2013-10-02 18:14:47+00:00,should consider supporting newer version of Solr,"davsclaus:1377124866:2013-08-22T06:41:06.189+0000:1377124888:2013-08-22T06:41:28.763+0000:This requires a camel-lucene upgrade to Lucene 4.x as well I think. And for the OSGi bundles to be released and working.
matriv:1380553267:2013-09-30T23:01:07.176+0000:1380553267:2013-09-30T23:01:07.176+0000:Working on a patch.
matriv:1380622825:2013-10-01T18:20:25.938+0000:1380622825:2013-10-01T18:20:25.938+0000:Lucene already upgraded to 4.4.0 due to elasticsearch ugprade (See CAMEL-6612)
muellerc:1380629069:2013-10-01T20:04:29.539+0000:1380629069:2013-10-01T20:04:29.539+0000:Thanks Marios Trivizas for the patch!
bvahdat:1380663004:2013-10-02T05:30:04.606+0000:1380663004:2013-10-02T05:30:04.606+0000:The patch being applied does:

{code}
updateRequest.addFile((File) body, null);
{code}

I think that's a typo and correctly it should do: 

{code}
updateRequest.addFile((File) body, mimeType);
{code}
matriv:1380668409:2013-10-02T07:00:09.730+0000:1380668409:2013-10-02T07:00:09.730+0000:You are right! I forgot to revert this test with the null and use the extracted mimeType.
Christian could you please apply the change?
muellerc:1380708875:2013-10-02T18:14:35.317+0000:1380708875:2013-10-02T18:14:35.317+0000:Thanks for checking the commit. I have fixed it."
0,CAMEL-6612,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Christian Müller,Benjamin P. O'Day,0,4,2013-08-07 02:19:00+00:00,2013-09-30 20:11:00+00:00,should upgrade to a newer rev when possible...,"matriv:1380528704:2013-09-30T16:11:44.685+0000:1380528704:2013-09-30T16:11:44.685+0000:Uploaded patch for ElasticSearch upgrade to 0.90.3 and Lucene upgrade to 4.4.0
tobias.h.hinz:1380529405:2013-09-30T16:23:25.566+0000:1380529405:2013-09-30T16:23:25.566+0000:klaus@warndorf.de


tobias.h.hinz:1380529644:2013-09-30T16:27:24.454+0000:1380529644:2013-09-30T16:27:24.454+0000:Sorry. Wrong typing.


muellerc:1380543060:2013-09-30T20:11:00.910+0000:1380543060:2013-09-30T20:11:00.910+0000:Thanks Marios Trivizas for the patch!"
0,CAMEL-6611,Improvement,Minor,2.12.0,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-06 10:12:00+00:00,2013-08-06 13:37:35+00:00,"If SSL is enabled then you should use https, but if you send a http request we should detect that its not SSL and send back a nice error page.","davsclaus:1375767176:2013-08-06T13:32:56.645+0000:1375767176:2013-08-06T13:32:56.645+0000:See
https://github.com/netty/netty/issues/160
davsclaus:1375767455:2013-08-06T13:37:35.266+0000:1375767455:2013-08-06T13:37:35.266+0000:The same fix is applied to camel-netty"
0,CAMEL-6610,Bug,Major,"2.11.1, 2.11.2","2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,liugang,0,4,2013-08-06 09:12:35+00:00,2013-08-08 02:46:29+00:00,"when I'm tring to execute below route:



from(""timer:foo"").wireTap(""direct:a"").id(""wiretap_1"").to(""log:a"");
from(""direct:a"").to(""log:b"");




I always got IndexOutOfBoundsException:

Exception in thread ""main"" java.lang.IndexOutOfBoundsException: Index: -1
	at java.util.Collections$EmptyList.get(Collections.java:3212)
	at org.apache.camel.model.ProcessorDefinition.id(ProcessorDefinition.java:1025)
	at org.talend.esb.liugang.camel.wiretap.TestWiretap$1.configure(TestWiretap.java:14)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:276)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:262)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:650)
	at org.talend.esb.liugang.camel.wiretap.TestWiretap.main(TestWiretap.java:10)
I tried on 2.11.1, 2.11.2-SNAPSHOT, both of them have the same problem (not sure 2.12-SNAPSHOT).","njiang:1375894245:2013-08-08T00:50:45.008+0000:1375894245:2013-08-08T00:50:45.008+0000:Applied the patch into master, camel-2.11.x and camel-2.10.x.
gangliu:1375901189:2013-08-08T02:46:29.301+0000:1375901189:2013-08-08T02:46:29.301+0000:Great, Thanks."
0,CAMEL-6609,Bug,Major,"2.10.6, 2.11.1","2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,Willem Jiang,0,2,2013-08-05 23:42:49+00:00,2013-08-19 03:09:02+00:00,"CAMEL-6602 shows an user case which using the CXF failover feature within camel-cxf, the CXF failover feature doesn't work when the CxfProducer uses the async invocation.","njiang:1376852942:2013-08-19T03:09:02.167+0000:1376852942:2013-08-19T03:09:02.167+0000:Applied patch into master and camel-2.11.x and camel-2.10.x branches.

The code should be updated once we move to new version of CXF which has the local fix."
0,CAMEL-6608,Task,Trivial,None,,"
None
",Closed,Fixed,None,Christian Müller,Gardella Juan Pablo,0,2,2013-08-05 19:04:46+00:00,2013-08-07 00:08:37+00:00,"At http://camel.apache.org/camel-jmx.html the links in the section ""Using JMX to manage Apache Camel"" are broken. The links are in the sentence:


""The supported types of management objects are endpoint, route, service, and processor.""


The broken links are endpoint, route, service, and processor.","muellerc:1375706760:2013-08-05T20:46:00.608+0000:1375706760:2013-08-05T20:46:00.608+0000:Thanks for reporting Gardella! I have updated the WIKI page. It should be only in a few hours.
gardellajuanpablo:1375805317:2013-08-07T00:08:37.495+0000:1375805317:2013-08-07T00:08:37.495+0000:Verified. Now the links are not broken."
0,CAMEL-6607,Bug,Major,2.11.1,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,Per Jørgen Walstrøm,2,2,2013-08-05 14:11:07+00:00,2013-08-06 23:17:31+00:00,"This XML will not split on Trip, as Trip has a child which starts with Trip
<Trip>
<Triptype>
</Triptype>
</Trip>


The bug was introduced in https://issues.apache.org/jira/browse/CAMEL-6004
I believe the regex in TokenXMLExpressionIterator needs to be fixed


see enclosed test","njiang:1375740083:2013-08-06T06:01:23.559+0000:1375740083:2013-08-06T06:01:23.559+0000:Yeah, it's a bug of SCAN_BLOCK_TOKEN_REGEX_TEMPLATE, it should make sure it skip the validate xml token.
I will commit the code after running the whole tests.
njiang:1375802251:2013-08-06T23:17:31.812+0000:1375802251:2013-08-06T23:17:31.812+0000:Applied the patch into master, camel-2.11.x and camel-2.10.x branches."
0,CAMEL-6606,Bug,Major,2.11.1,None,"
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,zhang liang,0,2,2013-08-05 10:42:27+00:00,2013-08-23 10:34:54+00:00,"When restart camel, lucene index folder always be empty.
I check the source code. It is in class LuceneIndexer line 145, method openIndexWriter. It seems when camel start, will create a new lucene index folder. Because the variable ""indexCreated"" cannot set by outside.","davsclaus:1377225294:2013-08-23T10:34:54.884+0000:1377225294:2013-08-23T10:34:54.884+0000:The indexer should now use create or append, so it ought to reuse existing index if already exists."
0,CAMEL-6605,Bug,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Pavel Drasil,0,2,2013-08-02 16:30:40+00:00,2013-08-26 15:14:27+00:00,"When custom HttpClientConfigurer is defined for http4-based endpoint as described in the component documantation, the basic authentication and proxy settings are ignored. I am not sure whether this is a bug or feature, but it should be either fixed or documented.


The reason is, that basic authentication and proxy settings are also realized using HttpClientConfigurer and the custom one overrides this one in org.apache.camel.component.http4.HttpComponent.createEndpoint():
1.) Custom HttpClientConfigurer is detected in the parameters map and the parameter is removed from the map (line 188)
2.) Compound HttpClientConfigurer for Basic authentication and Proxy settings is created by the createHttpClientConfigurer() method (line 218). The method tries to detect also the custom HttpClientConfigurer, but its declaration was already removed from the parameters map.
3.) New HttpEndpoint instance is created using the compound HttpClientConfigurer for Basic authentication and Proxy settings (line 221)
4.) Custom HttpClientConfigurer is set to the endpoint instance which overrides the original one (line 277)",davsclaus:1377501035:2013-08-26T15:10:35.410+0000:1377501035:2013-08-26T15:10:35.410+0000:Yeah that seems wrong.
0,CAMEL-6604,Bug,Major,"2.10.6, 2.11.1","2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-08-02 09:59:14+00:00,2013-08-03 07:46:24+00:00,"See nabble
http://camel.465427.n5.nabble.com/stream-caching-to-HTTP-end-point-tp5736608.html",
0,CAMEL-6603,New Feature,Major,"2.10.6, 2.11.1","2.10.7, 2.11.2, 2.12.0","

converter
date
long

",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Christian Müller,David J. M. Karlsen,0,2,2013-08-02 09:16:11+00:00,2013-08-02 21:32:37+00:00,http://camel.465427.n5.nabble.com/Long-lt-gt-Date-TypeConverter-td5736428.html,muellerc:1375436680:2013-08-02T17:44:40.279+0000:1375436680:2013-08-02T17:44:40.279+0000:Thanks for the patch David!
0,CAMEL-6602,Bug,Major,2.9.7,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,Ming ZI,0,2,2013-08-02 06:58:39+00:00,2013-08-08 02:50:54+00:00,"With PAYLOAD data format used, the first element in argument is casted to a CxfPayload instance and the argument is changed into a List<DOMSource> instance by the method ""setParameters"" in class org.apache.camel.component.cxf.CxfEndpoint.
Then FailoverFeature calls retry, the class-cast action throws a ClassCastException.
btw: ""message.remove(DataFormat.class)"" at the end of the method ""setParameters"" dosn't work. The method ""remove"" is inherited from Map, and a new message with data format PAYLOAD is created when retry.","njiang:1375402407:2013-08-02T08:13:27.616+0000:1375402407:2013-08-02T08:13:27.616+0000:Can you submit a simple test case for us to dig the issue?
avina:1375459995:2013-08-03T00:13:15.268+0000:1375459995:2013-08-03T00:13:15.268+0000:a test case
avina:1375636266:2013-08-05T01:11:06.557+0000:1375636266:2013-08-05T01:11:06.557+0000:About the test case:
I compared PAYLOAD with POJO. Both tests failed when the ""synchronous"" property set to ""false"". That's another problem I found. 
With ""synchronous=true"", POJO test passed but PAYLOAD test stuck.
A ClassCastException was thrown at line 869 in CxfEndpoint.java .
Detail:
 javax.xml.transform.dom.DOMSource cannot be cast to org.apache.camel.component.cxf.CxfPayload
njiang:1375678577:2013-08-05T12:56:17.963+0000:1375678577:2013-08-05T12:56:17.963+0000:I just fixed the ClassCastException, but it may take me some time to fix the synchronous issue.
njiang:1375807833:2013-08-07T00:50:33.268+0000:1375807833:2013-08-07T00:50:33.268+0000:Applied the patch into master, camel-2.11.x and camel-2.10.x branches.
Please check out the latest snapshot for verification."
0,CAMEL-6601,Bug,Major,2.11.1,,"
None
",Resolved,Invalid,None,Claus Ibsen,John Yin,0,2,2013-08-02 00:30:01+00:00,2013-08-22 13:36:58+00:00,"When Camel tries to raise an InvalidPayloadException for an ill-formed XML body received from CXF, the InvalidPayloadException constructor throws another exception (CamelRuntimeException) when it tries to collect data for the InvalidPayloadException.  The exception wipes out the useful error information about the invalid payload thus makes it difficult to debug.","njiang:1375408330:2013-08-02T09:52:10.381+0000:1375408330:2013-08-02T09:52:10.381+0000:Because JIRA is not a user forums, please ask the this question in the camel-user mailing list first before filling a JIRA."
0,CAMEL-6600,Task,Minor,2.11.0,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Larry Singer,0,2,2013-08-01 22:58:46+00:00,2016-02-18 15:56:02+00:00,The documentation on http://camel.apache.org/cdi.html give no clue as to how to create the field camelCtx. Is this instantiated locally? Is it injected?,"davsclaus:1436569964:2015-07-11T07:12:44.948+0000:1436569964:2015-07-11T07:12:44.948+0000:Yeah we need to redo that documentation - camel-cdi works better now and for 2.16 release.
davsclaus:1443410907:2015-09-28T11:28:27.571+0000:1443410907:2015-09-28T11:28:27.571+0000:See the camel-example-cdi that is shipped with Camel 
davsclaus:1455782162:2016-02-18T15:56:02.482+0000:1455782162:2016-02-18T15:56:02.482+0000:The CDI documentation has been overhauled as part of the major work on camel-cdi"
0,CAMEL-6599,Bug,Major,2.12.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-01 12:56:27+00:00,2013-08-01 12:57:28+00:00,"The HTTP 1.1 spec requires a HOST header
http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html


The client should include the host
And the server should validate and send back http code 400 if HOST header is missing.",
0,CAMEL-6598,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-08-01 12:03:21+00:00,2013-08-01 12:07:44+00:00,"We add src -> dest.
And only add dest -> src if bi directional.",
0,CAMEL-6597,Improvement,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Willem Jiang,0,1,2013-08-01 08:00:56+00:00,2013-08-02 03:47:47+00:00,"CamelOutputStream should support the JAXWS Async API out of box.
We need to start another thread to handle the response is the Exchange is Async.",njiang:1375386467:2013-08-02T03:47:47.930+0000:1375386467:2013-08-02T03:47:47.930+0000:Applied the patch into master branch.
0,CAMEL-6596,Task,Minor,2.11.1,2.12.0,"
None
",Resolved,Fixed,2.12.0,Christian Müller,Christian Müller,0,3,2013-07-31 20:39:35+00:00,2013-08-04 20:04:57+00:00,"[INFO]   maven-antrun-plugin ...................................... 1.6 -> 1.7
[INFO]   maven-assembly-plugin ............................. 2.2.1 -> 2.4
[INFO]   maven-idea-plugin ...................................... 2.2 -> 2.2.1
[INFO]   net.alchim31.maven:scala-maven-plugin ................ 3.1.2 -> 3.1.5
[INFO]   org.apache.felix:maven-bundle-plugin ................. 2.3.7 -> 2.4.0
[INFO]   maven-antrun-plugin ...................................... 1.6 -> 1.7
[INFO]   maven-archetype-plugin ................................... 2.0 -> 2.2
[INFO]   maven-checkstyle-plugin ............................... 2.9.1 -> 2.10
[INFO]   maven-compiler-plugin .................................. 2.5.1 -> 3.1
[INFO]   maven-failsafe-plugin .................................. 2.13 -> 2.15
[INFO]   maven-surefire-plugin .................................. 2.13 -> 2.15
[INFO]   maven-surefire-report-plugin ........................... 2.13 -> 2.15
[INFO]   maven-war-plugin ......................................... 2.3 -> 2.4
[INFO]   org.apache.tomcat.maven:tomcat7-maven-plugin ............. 2.0 -> 2.1
[INFO]   org.codehaus.mojo:build-helper-maven-plugin .............. 1.7 -> 1.8
[INFO]   org.jvnet.jaxb2.maven2:maven-jaxb2-plugin ............ 0.8.1 -> 0.8.3
[INFO]   org.mortbay.jetty:jetty-maven-plugin  7.6.9.v20130131 -> 8.1.12.v20130726
[INFO]   org.apache.camel:camel-package-maven-plugin  ${project.version} -> 2.11.1
[INFO]   org.apache.camel:camel-package-maven-plugin  ${project.version} -> 2.11.1
[INFO]   maven-antrun-plugin ...................................... 1.6 -> 1.7
[INFO]   com.sun.jersey.contribs:maven-wadl-plugin ............ 1.13 -> 1.17.1
[INFO]   maven-war-plugin ......................................... 2.3 -> 2.4
[INFO]   org.mortbay.jetty:jetty-maven-plugin  7.6.9.v20130131 -> 8.1.12.v20130726
[INFO]   maven-invoker-plugin ..................................... 1.7 -> 1.8
[INFO]   maven-compiler-plugin .................................. 2.5.1 -> 3.1","davsclaus:1375309899:2013-08-01T06:31:39.208+0000:1375309899:2013-08-01T06:31:39.208+0000:Beware that sometimes this breaks being able to cut releases when upgrading plugins.

And the compiler plugin 3.0 or was it 3.1 causes the components to be compiled 2 x times so it was much slower in the build process.
muellerc:1375357218:2013-08-01T19:40:18.809+0000:1375357218:2013-08-01T19:40:18.809+0000:I will test all plugin updates before I commit it. Will do it step by step...
davsclaus:1375401955:2013-08-02T08:05:55.688+0000:1375401955:2013-08-02T08:05:55.688+0000:There is some problems with antrun 1.7 plugin. For example I get this error building camel-spring
{code}
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Spring 2.12-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-spring ---
[INFO]
[INFO] --- maven-antrun-plugin:1.7:run (generate-sources) @ camel-spring ---
[INFO] Executing tasks

main:
     [echo] Copying code together for the XSD generation
     [echo] Generating XSD schema
[schemagen] /Users/davsclaus/workspace/camel/components/camel-spring/target/antrun/build-main.xml:42: warning: 'includeantruntime' was not set, defaulting to build.sysclasspath=last; set to false for repeatable builds
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.740s
[INFO] Finished at: Fri Aug 02 10:03:37 CEST 2013
[INFO] Final Memory: 15M/206M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-antrun-plugin:1.7:run (generate-sources) on project camel-spring: An Ant BuildException has occured: Unable to find a javac compiler;
[ERROR] com.sun.tools.javac.Main is not on the classpath.
[ERROR] Perhaps JAVA_HOME does not point to the JDK.
[ERROR] It is currently set to ""/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home/jre""
[ERROR] around Ant part ...<schemagen destdir=""/Users/davsclaus/workspace/camel/components/camel-spring/target/schema"" srcdir=""/Users/davsclaus/workspace/camel/components/camel-spring/target/schema-src"">... @ 42:179 in /Users/davsclaus/workspace/camel/components/camel-spring/target/antrun/build-main.xml
[ERROR] -> [Help 1]
{code}

So reverting that to 1.6 to have it build for the time being.
muellerc:1375412340:2013-08-02T10:59:00.884+0000:1375412340:2013-08-02T10:59:00.884+0000:Thanks for reverting Claus. I tested it with
{noformat}
cmueller$ mvn -v
Apache Maven 3.1.0 (893ca28a1da9d5f51ac03827af98bb730128f9f2; 2013-06-28 04:15:32+0200)
Maven home: /Applications/apache-maven-3.1.0
Java version: 1.6.0_43, vendor: Apple Inc.
Java home: /Library/Java/JavaVirtualMachines/1.6.0_43-b01-447.jdk/Contents/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.8.4"", arch: ""x86_64"", family: ""mac""
{noformat}
and ii worked. Will switch back to Maven 3.0.5...
dkulp:1375413755:2013-08-02T11:22:35.166+0000:1375413755:2013-08-02T11:22:35.166+0000:We dropped support for Java5 a while ago.   Anyone look at the schemagen maven plugin to handle this instead of antrun?"
0,CAMEL-6595,Bug,Trivial,2.12.0,None,"

cmis
test-patch

",Resolved,Fixed,"2.11.2, 2.12.0",Willem Jiang,Maurizio Turatti,0,2,2013-07-31 17:00:19+00:00,2013-08-01 04:19:19+00:00,"Unit tests for camel-cmis are under package org.apache.camel.componenet instead of org.apache.camel.component


Actions:
1) Rename folder src/test/java/org/apache/camel/componenet to src/test/java/org/apache/camel/component/
2) Fix the package name in each unit test


Affected version: 2.12-SNAPSHOT and before","mturatti:1375261403:2013-07-31T17:03:23.703+0000:1375261403:2013-07-31T17:03:23.703+0000:this is a patch generated with ""git diff --no-prefix > patchfile.txt"" on my own issue branch

I think you have to manually rename the test folder as mentioned in the issue description.
njiang:1375301959:2013-08-01T04:19:19.572+0000:1375301959:2013-08-01T04:19:19.572+0000:Applied patch with thanks to Maurizio."
0,CAMEL-6594,Improvement,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-07-31 14:54:24+00:00,2013-07-31 15:20:45+00:00,"The API allows to add, but you can't remove. We should add support for this.",
0,CAMEL-6593,Bug,Minor,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,David Keen,0,2,2013-07-31 11:37:57+00:00,2013-08-23 07:52:20+00:00,"Predicates defined in the java dsl are not dumped to xml when using jmx.


Eg, this java dsl route:



from(""seda:a"").choice().when(header(""test"").isNotNull()).log(""not null"").end().to(""mock:a"");




Will be dumped as this:



<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>
<route group=""com.example.TestRoute"" id=""route1"" xmlns=""http://camel.apache.org/schema/spring"">
    <from uri=""seda:a""/>
    <choice id=""choice23"">
        <when id=""when24"">
            <expressionDefinition/>
            <log message=""not null"" id=""log20""/>
        </when>
    </choice>
    <to uri=""mock:a"" id=""to17""/>
</route>




The <expressionDefinition> element should contain the expression.


This seems similar to CAMEL-4733.","davidkeen:1375242370:2013-07-31T11:46:10.186+0000:1375242370:2013-07-31T11:46:10.186+0000:Also seems to affect setting properties. Eg:
{code}
.setProperty(""foo"").constant(""bar"")
{code}

Gets dumped with an empty expressionDefinition tag as well.
davsclaus:1377212950:2013-08-23T07:09:10.768+0000:1377212964:2013-08-23T07:09:24.012+0000:This is expected as these builders cannot be represented in plain text, such as simple etc can do.

Though in the future we may be able to map these to a simple text expression we can use to dump eg
{code}
<simple>${header.test} != null</simple>
{code}

davsclaus:1377215540:2013-08-23T07:52:20.861+0000:1377215540:2013-08-23T07:52:20.861+0000:We now dump the predicate in the model though its just a toString representation of the predicate that the ValuerBuilder has built. But at least you can see some information now."
0,CAMEL-6592,Bug,Major,"2.11.1, 2.11.2","2.10.7, 2.11.2, 2.12.0","

javadoc

",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,Antoine DESSAIGNE,0,1,2013-07-30 16:06:26+00:00,2013-08-05 23:29:35+00:00,"The javadoc of org.apache.camel.spi.ShutdownStrategy#setTimeout is invalid.


It says that it's possible to set a negative or 0 value but the default implementation org.apache.camel.impl.DefaultShutdownStrategy#setTimeout will throw an IllegalArgumentException",njiang:1375212303:2013-07-31T03:25:03.380+0000:1375212303:2013-07-31T03:25:03.380+0000:The IlleagelArgumentException is set by CAMEL-6341. I will go ahead and update the java doc.
0,CAMEL-6591,Improvement,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Stephan Siano,0,3,2013-07-30 13:15:47+00:00,2013-08-22 13:01:21+00:00,"If the ssh server disconnects the socket held by an SFTP endpoint (and the disconnect option is not set to true) the next call to this endpoint will fail. A call after the failed call will reconnect (and succeed if the server is available again).


The error message is as follows:
SftpSimpleProduceDisconnectTest
org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest
testSftpSimpleProduce(org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest)
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Hello World]


	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1360)


	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:619)


	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454)


	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450)


	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152)


	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146)


	at org.apache.camel.component.file.remote.sftp.SftpSimpleProduceDisconnectTest.testSftpSimpleProduce(SftpSimpleProduceDisconnectTest.java:50)


	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)


	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)


	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)


	at java.lang.reflect.Method.invoke(Unknown Source)


	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)


	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)


	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)


	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)


	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)


	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)


	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)


	at org.junit.rules.RunRules.evaluate(RunRules.java:20)


	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)


	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)


	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)


	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)


	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)


	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)


	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)


	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)


	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)


	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)


	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)


	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)


	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)


	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)


	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)


	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)


	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: target


	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:536)


	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:524)


	at org.apache.camel.component.file.remote.SftpOperations.storeFile(SftpOperations.java:771)


	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:278)


	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:166)


	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)


	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)


	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)


	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)


	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)


	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)


	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)


	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)


	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)


	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)


	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)


	... 31 more


Caused by: 4: 


	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:332)


	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:534)


	... 46 more


Caused by: java.io.IOException: Pipe closed


	at java.io.PipedInputStream.read(Unknown Source)


	at java.io.PipedInputStream.read(Unknown Source)


	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2665)


	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2691)


	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:2148)


	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:315)


	... 47 more","siano:1375162037:2013-07-30T13:27:17.801+0000:1375162037:2013-07-30T13:27:17.801+0000:test and patch to reconnect closed connections without failing in SFTP
davsclaus:1375164216:2013-07-30T14:03:36.563+0000:1375164216:2013-07-30T14:03:36.563+0000:This is not a bug. If you have disconnect=false, then the session may become in some invalid state, and you need to use redelivery etc.
siano:1375221664:2013-07-31T06:01:04.302+0000:1375221664:2013-07-31T06:01:04.302+0000:Since the sftp server might be unavailable, you might want to have redelivery anyway, but I think that the behaviour with this patch is better.

I was somehow unsure whether to rate this as a bug or as an improvement. The infrastructure is already there and the FTP and FTPS producer endpoint already behave like that, so I codsidered it as a bug, but I have no problems with changing the issue type from bug to improvement.
davsclaus:1377131229:2013-08-22T08:27:09.887+0000:1377131229:2013-08-22T08:27:09.887+0000:Yeah implement the sendNoop for the sftp is a good idea.
davsclaus:1377147681:2013-08-22T13:01:21.496+0000:1377147681:2013-08-22T13:01:21.496+0000:Thanks for the patch."
0,CAMEL-6590,Improvement,Minor,2.11.1,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Willem Jiang,David Keen,0,2,2013-07-30 12:03:28+00:00,2013-07-31 13:38:32+00:00,"Warnings are produced about addition of standard headers when using restlet component. 


Eg, when running https://github.com/bibryam/camel-example-restlet-jdbc:



Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeaders
WARNING: Addition of the standard header ""User-Agent"" is not allowed. Please use the equivalent property in the Restlet API.
Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeaders
WARNING: Addition of the standard header ""Host"" is not allowed. Please use the equivalent property in the Restlet API.
Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeaders
WARNING: Addition of the standard header ""Accept"" is not allowed. Please use the equivalent property in the Restlet API.
Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeaders
WARNING: Addition of the standard header ""Content-Length"" is not allowed. Please use the equivalent property in the Restlet API.
Jul 30, 2013 12:40:19 PM org.restlet.engine.http.header.HeaderUtils addExtensionHeaders
WARNING: Addition of the standard header ""Content-Type"" is not allowed. Please use the equivalent property in the Restlet API.




This clutters up the logs.","davidkeen:1375158051:2013-07-30T12:20:51.460+0000:1375158051:2013-07-30T12:20:51.460+0000:Patchfile which filters the restlet headers. This works for me in a custom HeaderFilterStrategy.
njiang:1375249112:2013-07-31T13:38:32.431+0000:1375249112:2013-07-31T13:38:32.431+0000:Applied the patch into master, camel-2.11.x and camel-2.10.x branches with thanks to David"
0,CAMEL-6589,Improvement,Major,None,"3.0.0-M2, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M2, 3.0.0",Claus Ibsen,Claus Ibsen,0,3,2013-07-30 09:41:00+00:00,2019-03-13 07:59:50+00:00,"This is the norm today. And having 2+ inputs per routes does introduce some issues which isn't fully baked into the codebase, such as JMX mbeans, shutdown logic, route policy and whatnot.


We should limit the DSL / API to accept exactly 1 input per route.",
0,CAMEL-6588,New Feature,Minor,2.11.0,,"
None
",Resolved,Fixed,None,Willem Jiang,Gérald Quintana,0,2,2013-07-30 08:53:05+00:00,2013-08-03 07:06:49+00:00,"In Seda component, BlockingQueue is by default a LinkedBlockingQueue. Make this configurable, in order to plug in a PriorityBlockingQueue or any other BlockingQueue type.


See http://camel.465427.n5.nabble.com/SEDA-with-PriorityBlockingQueue-td5736411.html","njiang:1375407766:2013-08-02T09:42:46.059+0000:1375407766:2013-08-02T09:42:46.059+0000:Applied the patch into master branch with thanks to Gérald.


njiang:1375407846:2013-08-02T09:44:06.950+0000:1375407846:2013-08-02T09:44:06.950+0000:Gérald, 
Do you mind to update the wiki page of [camel-seda|http://camel.apache.org/seda.html]?
gquintana:1375449849:2013-08-02T21:24:09.956+0000:1375449849:2013-08-02T21:24:09.956+0000:Willem,
Here is a paragraph to add to the wiki:

h3. Choosing BlockingQueue implementation
*Available as of Camel 2.12*

By default, the SEDA component always intantiates LinkedBlockingQueue, but you can use different implementation, you can reference your own BlockingQueue implementation, in this case the size option is not used
{code}
<bean id=""arrayQueue"" class=""java.util.ArrayBlockingQueue"">
  <constructor-arg index=""0"" value=""10"" ><!-- size -->
  <constructor-arg index=""1"" value=""true"" ><!-- fairness -->
</bean>
<!-- ... and later -->
<from>seda:array?queue=#arrayQueue</from>
{code} 

Or you can reference a BlockingQueueFactory implementation, 3 implementations are provided LinkedBlockingQueueFactory, ArrayBlockingQueueFactory and PriorityBlockingQueueFactory:
{code}
<bean id=""priorityQueueFactory"" class=""org.apache.camel.component.seda.PriorityBlockingQueueFactory"">
  <property name=""comparator"">
    <bean class=""org.apache.camel.demo.MyExchangeComparator"" />
  </property>
</bean>
<!-- ... and later -->
<from>seda:priority?queueFactory=#priorityQueueFactory&size=100</from>
{code} 

njiang:1375484809:2013-08-03T07:06:49.903+0000:1375484809:2013-08-03T07:06:49.903+0000:Update the wiki page with thanks to Gérald."
0,CAMEL-6557,Bug,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,David Arthur,0,2,2013-07-17 13:24:15+00:00,2013-08-23 09:30:00+00:00,"When my aggregator extends AbstractListAggregationStrategy, I never get aggregator completions from the batch consumer.


If I change my aggregator to be something like:



    Foo foo = newExchange.getIn().getBody(Foo.class);
    List<Foo> list = null;
    Exchange outExchange;
    if (oldExchange == null) {
      list = new LinkedList<Foo>();
      list.add(foo);
      newExchange.getIn().setBody(list);
      outExchange = newExchange;
    } else {
      list = oldExchange.getIn().getBody(List.class);
      list.add(foo);
      outExchange = oldExchange;
    }
    return outExchange;




then it works fine.


I'm guessing this is has something to do with AbstractListAggregationStrategy messing with properties or wrapping the actual exchanges (since the batch completion is triggered based on Exchange.BATCH_SIZE property)",davsclaus:1377221400:2013-08-23T09:30:00.794+0000:1377221400:2013-08-23T09:30:00.794+0000:Thanks for reporting.
0,CAMEL-6556,Improvement,Minor,2.10.6,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Jean-Philippe HAUTIN,0,2,2013-07-17 09:57:27+00:00,2013-08-23 08:35:43+00:00,running camel:run with provided dependencies failed as the dependencies is missing. I think this is the same issue as with the camel:dot goal that as been already corrected in this issue CAMEL-3533,"davsclaus:1377217813:2013-08-23T08:30:13.234+0000:1377217813:2013-08-23T08:30:13.234+0000:Yeah lets try with compile+runtime to get them on the classpath
http://maven.apache.org/developers/mojo-api-specification.html"
0,CAMEL-6555,Task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Claus Ibsen,0,6,2013-07-17 09:08:02+00:00,2014-08-20 14:32:51+00:00,"Netty 4.0 has been released. We should upgrade, though it has new package names. So end users with custom codec need to migrate as well.


So we could indicate that after Camel 2.12 we upgrade to give ppl amble time to adjust.","davsclaus:1375854493:2013-08-07T13:48:13.376+0000:1375854493:2013-08-07T13:48:13.376+0000:The new camel-netty-http is intended to be upgraded for Netty 4.x so when we release Camel 2.12 this component requires Netty 4.x.

The existing camel-netty can be renamed to camel-netty3 having it as netty3 component for backwards compatible Camel users. So their migration is easy, just use netty3 as component name.

In the mean time we have a camel-netty4 module for the work in progress upgrade to Netty 4.x. When this is complete we can do the component renames.

So after the upgrade we have

- camel-netty3  = the old 3.x netty based
- camel-netty   = the new 4.x netty based
davsclaus:1377149293:2013-08-22T13:28:13.034+0000:1377149293:2013-08-22T13:28:13.034+0000:This may take a while to do so I added a note on camel-netty-http that its scheduled for upgrade, so ppl use it with that in mind.
hadrian:1384858081:2013-11-19T18:48:01.525+0000:1384858081:2013-11-19T18:48:01.525+0000:Moved to 2.12.3. Too big a task for a few days.
rcd:1388670590:2014-01-02T21:49:50.879+0000:1388670590:2014-01-02T21:49:50.879+0000:I'm working on a project that I think Camel would be ideal for, and we may need Netty as an endpoint. Obviously, I'd prefer to be using the latest stable version, especially since version 5 is now in the works.

So, is anyone actively working on this? I looked in the Git repository and found the camel-netty4 module, but it looks like nothing has been done beyond a copy/paste of the code for Netty 3. Even the imports haven't been updated to use the new package names.
davsclaus:1388707261:2014-01-03T08:01:01.877+0000:1388707261:2014-01-03T08:01:01.877+0000:Yeah its not being developed right now. Moving to a future release as we might as well jump straight to Netty 5, since they are already working on that with a new revised API.

The effort of upgrading camel-netty to Netty 4/5 API is big, and hence not something you can easily do in a short time.
tterm001:1391234391:2014-02-01T13:59:51.953+0000:1391234455:2014-02-01T14:00:55.129+0000:Is currently someone working on that issue? We would need this component and maybe I could do something on it. But we would also need client mode as consumer and connectionless udp sending. If I see it right then the api change between 4 and 5 is not as big as between 3 and 4.
davsclaus:1391392450:2014-02-03T09:54:10.927+0000:1391392450:2014-02-03T09:54:10.927+0000:No its massive work and postponed for later when someone may get the time.

We love contributions so you are much welcome to get started on this. I suggest to fork and work on a separate branch. And when ready we can merge to the master branch, or just .zip the code and we can add that.
tterm001:1391747388:2014-02-07T12:29:48.736+0000:1391747404:2014-02-07T12:30:04.005+0000:Ok started working on it. I will keep you informed.
davsclaus:1405756847:2014-07-19T16:00:47.941+0000:1405756847:2014-07-19T16:00:47.941+0000:Williem is currently working on this for inclusion in Camel 2.14
njiang:1406266709:2014-07-25T13:38:29.934+0000:1406266709:2014-07-25T13:38:29.934+0000:Created camel-netty4 module and port all the camel-netty module to use netty4 API. 
edmondo1984:1408516371:2014-08-20T14:32:51.553+0000:1408516371:2014-08-20T14:32:51.553+0000:Thanks. I think it is really important to keep labeling components that have dependencies in common with other components.

For example, we were in a situation where we didn't want to use Camel Netty because it used Netty 3.x and we are using Vertx 4.x that uses Netty 3.x. In reality things would have worked because the package names are different. 

So I propose to have a model camel-netty5 and so on, not to break compatibility. 
"
0,CAMEL-6554,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-07-17 08:28:18+00:00,2013-07-17 08:29:40+00:00,No Desc,
0,CAMEL-6553,Improvement,Major,None,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-07-17 07:20:06+00:00,2013-07-17 07:43:23+00:00,"See nabble
http://camel.465427.n5.nabble.com/Turning-off-warning-message-in-ObjectHelper-tp5735616.html",
0,CAMEL-6552,Improvement,Minor,2.11.0,,"
None
",Resolved,Later,None,Unassigned,Daniel Gredler,0,3,2013-07-16 13:49:57+00:00,2017-03-06 03:20:33+00:00,"As part of the properties component, Camel provides abstractions that make it easy for third parties to customize its behavior (e.g. PropertiesParser, PropertiesResolver). However, the resolution of properties file locations cannot be customized, and file locations cannot be dynamically resolved at runtime.


Additionally, Camel's Spring integration allows RouteBuilder instances to dynamically contribute new routes to the Camel context. However, it is not easy to dynamically contribute new properties file locations containing configuration for these routes. The result is that while routes can be contributed dynamically in a decentralized way, route configuration must be centralized.


The attached patch implements one possible solution to this limitation. It adds a new interface (PropertiesLocation), a default implementation (DefaultPropertiesLocation), and two new methods on the PropertiesComponent: setLocation(PropertiesLocation) and addLocation(PropertiesLocation). It also ensures that any PropertiesLocation instances available in the registry (or Spring context) are automatically added to the PropertiesComponent.","davsclaus:1374021803:2013-07-17T08:43:23.111+0000:1374021803:2013-07-17T08:43:23.111+0000:If the intent is to allow adding RouteBuilder at runtime and that these routes have their own properties locations as well. Then I think a better solution would be for these RouteBuilder(s) to have local scoped locations, so they wont clash with each other.

The current patch seems to be intended that you use addLocation() method on PropertiesComponet from these RouteBuilder to add their location(s). Then they are added at global scoped on the shared properties component.


sdanig:1374235605:2013-07-19T20:06:45.521+0000:1374235605:2013-07-19T20:06:45.521+0000:Yep, part of the purpose is to allow decentralized modules to configure not only routes, but also route configuration (from properties files).

The other goal is to allow property file location resolution behavior to be customized. For example, our application uses a custom ""classpath or filesystem"" resource resolution method in other parts of the code, where resources can be either in the filesystem or on the classpath, with filesystem resources taking precedence. With something like the {{PropertiesLocation}} interface, we could provide a custom implementation that finds all {{/my/application/**/integration.properties}} files, without requiring the modules to register each file location independently, and without requiring central configuration of all file locations.

The current patch doesn't expect users to call {{addLocation(...)}} directly (although they can if they want to). The {{addLocation(...)}} method is used internally when {{PropertiesLocation}} instances are found in the registry -- it's a sort of implicit location addition, just like {{RouteBuilders}} are automatically picked up and used to add routes to the Camel context.

You're correct that the clashing of property names is something that you need to be careful about -- but that's also that status quo when dealing with multiple properties files.

The idea of allowing {{RouteBuilder}} instances to have their own properties locations is interesting. What would that look like? An extra collection of properties locations on each {{RouteBuilder}}, and then when initializing routes in the route builder, use a custom clone of the global {{PropertiesComponent}} with the extra locally-scoped locations?
davsclaus:1488519582:2017-03-03T13:39:42.155+0000:1488519582:2017-03-03T13:39:42.155+0000:Its pretty flexible today.

Lets close and people can create new tickets if there is any demand but after looking at latest code
sdanig:1488741633:2017-03-06T03:20:33.439+0000:1488741633:2017-03-06T03:20:33.439+0000:Hi Claus,

It looks like your last comment was truncated somehow. What is the existing flexibility that you were seeing in the latest code?

Thanks!

Daniel"
0,CAMEL-6551,Improvement,Minor,2.10.4,"2.10.6, 2.11.2","
None
",Resolved,Fixed,"2.10.6, 2.11.2",Willem Jiang,Chris Wolf,0,1,2013-07-15 20:52:08+00:00,2013-12-09 06:37:09+00:00,"If the FTP server becomes unavailable, the container log gets flooded with WARN-level messages and gets filled with lines like:
16:32:34,511 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.
16:32:49,048 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.
16:33:03,576 WARN  [org.apache.camel.component.file.remote.FtpConsumer] Cannot connect/login to: ftp://adpt5@localhost:21. Will skip this poll.


i.e. a WARN message gets added to the log every five seconds.  We only need to be notified once per incidence.


The issue is in org.apache.camel.component.file.remote.RemoteFileConsumer.prePollCheck().


I recommend a table of latches, keyed by endpoint key. The latch is set when the initial warning is logged, then cleared upon any subsequent successful connection.",
0,CAMEL-6550,Bug,Major,2.9.2,,"
None
",Resolved,Invalid,None,Claus Ibsen,Jeferson Machado,0,2,2013-07-15 16:39:30+00:00,2013-07-16 06:38:28+00:00,"I couldn't find a way to work with proxy using FTP camel component, someone know how to deal with it ?


Thanks!","davsclaus:1373927908:2013-07-16T06:38:28.225+0000:1373927908:2013-07-16T06:38:28.225+0000:See this page how to get help and how to ask questions etc
http://camel.apache.org/support
"
0,CAMEL-6549,Bug,Minor,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Marek Wiącek,0,1,2013-07-14 09:33:47+00:00,2013-07-16 06:45:28+00:00,"The MBean interface for ManagedBacklogTracer should be named ManagedBacklogTracerMBean rather than ManagedTracerBacklogMBean (see the order  of words) to be compatible with standard MBean naming conventions.


This issue causes problems with some JMX implementations.",
0,CAMEL-6548,Bug,Minor,2.11.2,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Niels Bertram,0,3,2013-07-13 17:47:40+00:00,2013-07-14 08:50:25+00:00,"Sometimes one wants to register a custom extension function net.sf.saxon.lib.ExtensionFunctionDefinition in the saxon xquery engine context.


When providing XQueryBuilder.setConfiguration(Configuration configuration) with such configuration, the method will set the context and also set the initialise flag to false (line 378). This will cause XQueryBuilder.initialize(Exchange exchange) to run next time the builder is used.


Unfortunately the initialize method on line 639 it will create a new saxon Configuration regardless of what was set in the XQueryBuilder.setConfiguration() and renders this function pretty much useless.


The obvious solution to this problem is to check if the configuration is null before creating a new saxon configuration.","niels.bertram:1373709457:2013-07-13T17:57:37.923+0000:1373709457:2013-07-13T17:57:37.923+0000:Sent a patch together with a unit test as pull request to apache:camel-2.11.x on GitHub. Otherwise the commit on my fork is https://github.com/bertramn/camel/commit/52f26be2d2bf43b8bb35b88cc3984bc2548ddab6.
davsclaus:1373761148:2013-07-14T08:19:08.366+0000:1373761148:2013-07-14T08:19:08.366+0000:Willem I am working on this, there is some changes needed on trunk the patch doesn't work with.
njiang:1373761419:2013-07-14T08:23:39.176+0000:1373761419:2013-07-14T08:23:39.176+0000:Claus already started to work on this issue.
davsclaus:1373763025:2013-07-14T08:50:25.782+0000:1373763025:2013-07-14T08:50:25.782+0000:Thanks for the patch.

Saxon has changed its API in latest release so had to do a few changes."
0,CAMEL-6547,Bug,Major,2.11.1,2.11.2,"
None
",Resolved,Fixed,2.11.2,Christian Müller,Christian Müller,0,1,2013-07-13 11:18:24+00:00,2013-07-14 20:31:57+00:00,"cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.1)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.1
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.1/xml/features
karaf@root> features:install camel-leveldb
Error executing command: Could not start bundle wrap:mvn:org.fusesource.leveldbjni/leveldbjni-all/1.6$Bundle-Version=1.6&Export-Package=*;-noimport:=true;version=""1.6"" in feature(s) camel-leveldb-2.11.1: Unresolved constraint in bundle org.fusesource.leveldbjni.leveldbjni-all [62]: No matching native libraries found.",
0,CAMEL-6546,Bug,Major,2.11.1,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Christian Müller,Christian Müller,0,1,2013-07-13 11:16:41+00:00,2013-07-14 20:05:37+00:00,"cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.3.1)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.11.1
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.11.1/xml/features
karaf@root> features:install camel-mybatis
Error executing command: Could not start bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-dbcp/1.4_3 in feature(s) camel-quartz-2.11.1, camel-jpa-2.11.1, camel-bam-2.11.1, camel-mybatis-2.11.1, camel-ibatis-2.11.1: Unresolved constraint in bundle org.apache.servicemix.bundles.commons-dbcp [64]: Unable to resolve 64.0: missing requirement [64.0] osgi.wiring.package; (osgi.wiring.package=javax.transaction)",muellerc:1373803537:2013-07-14T20:05:37.983+0000:1373803537:2013-07-14T20:05:37.983+0000:A work around for Camel 2.11.1 is to install camel-spring before.
0,CAMEL-6545,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Claus Ibsen,0,3,2013-07-13 09:18:18+00:00,2013-08-22 12:59:10+00:00,"See
http://stackoverflow.com/questions/17457231/in-apache-camel-how-can-i-receive-an-error-if-an-endpoint-doesnt-exist


It would be nice if we can configure a seda producer endpoint to fail if sending to a queue with no consumers at runtime, when the producer tries to send to the queue.


.to(""seda:foo?failIfNoConsumers=true"")


Maybe the name should be failIfNoConsumers ?


For example the direct component has an exception DirectConsumerNotAvailableException. So we would need a SedaConsumerNotAvailableException for this component.","ceposta:1375974751:2013-08-08T23:12:31.660+0000:1375974751:2013-08-08T23:12:31.660+0000:I've run into situations like this also. 
I can take a look at adding this :)
ceposta:1376488124:2013-08-14T21:48:44.095+0000:1376488124:2013-08-14T21:48:44.095+0000:Claus, can you give me feedback on this when you get a chance?
njiang:1377111190:2013-08-22T02:53:10.753+0000:1377111190:2013-08-22T02:53:10.753+0000:Applied the patch into master branch with thanks to christina.
I also fix some unit test failures of camel-vm component.
davsclaus:1377123513:2013-08-22T06:18:33.526+0000:1377123513:2013-08-22T06:18:33.526+0000:Thanks for the contribution.

Though there is a few spots to fix, as eg we should not log a WARN and then throw an exception, eg the WARN should be removed. 

Also mind that when we change something in seda then camel-hazelcast, camel-routebox and the new disruptor may be affected as they is related to seda / reuse it etc. So a good idea is to check if they work as expected still or something needs to be changed there also.

ceposta:1377147550:2013-08-22T12:59:10.468+0000:1377147550:2013-08-22T12:59:10.468+0000:Thanks Claus and Willem.
These are good comments, and I will keep in mind for future contributions."
0,CAMEL-6544,Bug,Minor,2.11.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Willem Jiang,Willem Jiang,0,1,2013-07-13 03:01:16+00:00,2013-07-17 08:46:02+00:00,"The StringQuoteHelper.splitSafeQuote can not split the invocation string like this
""*, '', 'arg3'""
The third parameter should be ""arg3"" but camel 2.11.0 treat it as "",arg3"".
Here is the mail thread which discuses about it.",
0,CAMEL-6543,New Feature,Major,None,None,"
None
",Resolved,Delivered,3.x,Unassigned,James Strachan,1,4,2013-07-12 10:57:23+00:00,2023-08-09 09:28:55+00:00,"Given a configuration of an Endpoint, it'd be nice if there was a way for endpoints to expose what a consumer will receive up front (at design time, before it actually runs), in terms of headers (their name & types) and the payload type.


Most of this is documented on the wiki in places already - its useful stuff to konw; but there's no way to introspect an endpoint and know this (so we can, for example, visualise the things exposed by an endpoint - or provide better validation of what can connect to what, what will work or fail; what type conversions could be done after consuming from an endpoint, what headers are available by default in expression languages and so forth.


I guess other steps in a camel flow can change this data too (e.g. adding/removing headers, changing the payload value).


But as a start - and endpoint consumer specific plugin would be great.


e.g. maybe we can add a new method to ComponentConfiguration which allows endpoints to return the header/payload metadata (if its known)
https://cwiki.apache.org/confluence/display/CAMEL/ComponentConfiguration


We could maybe add some annotations, metadata or code which could then be introspected by the generated endpoint documentation:
https://cwiki.apache.org/confluence/display/CAMEL/Endpoint+Annotations


afterall we often define constants for the header values already for a component; so it would be easy to add an annotation and have them discovered; its mostly just being able to find all the headers exposed by default (and which are optional I guess) on messages from an endpoint.","jstrachan:1411434578:2014-09-23T09:09:38.673+0000:1411434578:2014-09-23T09:09:38.673+0000:This could be a good use of bindings; which are nice ways to specify exactly what payload types are expected on particular endpoints using the DSL.
http://camel.apache.org/binding.html

obviously if folks use an explicit convertBodyTo() or invoke a bean class known at compile time; we can also know the payload type

davsclaus:1436570268:2015-07-11T07:17:48.949+0000:1436570268:2015-07-11T07:17:48.949+0000:Yeah something we need to ponder about. Now we got the components to be auto documented for their options. We should look into how to get meta-data about the payload.

For the headers we need to add some kind of annotation that the apt plugin can detect and include in the docs. Similar we can have some meta-data in the @UriEndpoint that can provide information about the payload.
davsclaus:1662079574:2022-09-02T08:46:14.879+0000:1662079574:2022-09-02T08:46:14.879+0000:We have implemented header-names
davsclaus:1691544535:2023-08-09T09:28:55.268+0000:1691544535:2023-08-09T09:28:55.268+0000:lets close this old ticket - Thanks James for giving us Apache Camel"
0,CAMEL-6542,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Raúl Kripalani,Raúl Kripalani,0,2,2013-07-11 23:50:05+00:00,2013-08-30 09:57:24+00:00,"Camel is a highly pluggable and configurable framework that allows you inject custom logic at many points along the route, e.g. Aggregation Strategies, On Prepare strategies, Exchange Notifiers, etc.


We provide the interfaces for developers to implement, but we hardly supply any out-of-the-box strategies for common use cases.


Let's be collectively DRY, and provide a series of ""Camel Toolbox"" utility clases to cover typical use cases.


For example:


Class AggregationStrategies:



storeInProperty(String propertyName)
storeInProperty(String propertyName, Class<?> castAs)
accumulateBodiesInList()
accumulateBodiesInList(Class<?> listType)
filterIncoming(AggregationStrategy aggregationStrategy)
...



(Processors, OnPrepareProcessors, etc.)","raulvk:1373557842:2013-07-11T23:50:42.312+0000:1373557842:2013-07-11T23:50:42.312+0000:Everyone – feel free to contribute your use cases!
davsclaus:1377396079:2013-08-25T10:01:19.057+0000:1377396079:2013-08-25T10:01:19.057+0000:We would need to add some documentation about this to:
http://camel.apache.org/aggregator2

Raul do you mind helping with that?
davsclaus:1377569260:2013-08-27T10:07:40.139+0000:1377569260:2013-08-27T10:07:40.139+0000:Documentation is needed
raulvk:1377827844:2013-08-30T09:57:24.173+0000:1377827844:2013-08-30T09:57:24.173+0000:Documentation on the way!"
0,CAMEL-6541,Bug,Minor,2.8.6,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Joshua Palmer,0,2,2013-07-11 16:51:51+00:00,2013-07-18 08:25:54+00:00,"For jms messages, the useOriginalMessage does not work when headers are changed during the route because the DefaultUnitOfWork's headers are the same object as the in message's headers.


In DefaultUnitOfWork, this.originalInMessage.setHeaders(exchange.getIn().getHeaders()); should be changed to create a copy of the headers instead of directly assigning.


Maybe changed to this.originalInMessage.setHeaders((Map<String,Object>) new CaseInsensitiveMap(exchange.getIn().getHeaders()));",davsclaus:1373533805:2013-07-11T17:10:05.541+0000:1373533805:2013-07-11T17:10:05.541+0000:Well spotted
0,CAMEL-6540,Bug,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-07-11 16:02:28+00:00,2013-07-11 16:07:35+00:00,"Adding a new option sslClientCertHeaders which can be set to true, and then Camel Netty consumer will enrich the Message with headers that has the client certificate information out of the box.


This allows end users to get this details a bit easier, for example to be used in content based routing without having to code to get the details.",
0,CAMEL-6539,New Feature,Trivial,None,2.12.0,"

InputStream
Resource
typeconverter

",Resolved,Fixed,2.12.0,Claus Ibsen,David J. M. Karlsen,0,2,2013-07-11 13:15:55+00:00,2013-07-11 21:14:52+00:00,"I have code and test in https://github.com/davidkarlsen/camel/tree/springResourceConverter
forked off master.
Pull request: https://github.com/apache/camel/pull/29
as patch: https://github.com/apache/camel/pull/29.patch","davsclaus:1373548492:2013-07-11T21:14:52.359+0000:1373548492:2013-07-11T21:14:52.359+0000:Thanks for the patch.

I polished the patch so it could pass the checkstyle and removed @author tags in javadoc as not used, etc."
0,CAMEL-6538,Bug,Minor,None,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-07-11 08:54:42+00:00,2013-07-11 08:57:35+00:00,"There is a potentail NPE in validator component



Caused by: java.lang.NullPointerException
        at org.apache.camel.component.validator.DefaultLSResourceResolver.resolveResource(DefaultLSResourceResolver.java:73)
        at com.sun.org.apache.xerces.internal.util.DOMEntityResolverWrapper.resolveEntity(DOMEntityResolverWrapper.java:109)
        at com.sun.org.apache.xerces.internal.impl.XMLEntityManager.resolveEntity(XMLEntityManager.java:1056)
...




When the resource loader tries to load the XSD, I get a null pointer exception thrown as there is no path before the file name and the DefaultLSResourceResolver trying to call intern() on a null value.",
0,CAMEL-6537,Bug,Minor,2.10.0,"2.10.7, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-07-10 13:31:42+00:00,2013-07-10 14:10:41+00:00,"When using routing slip eip, then we only get the ExchangeSendingEvent, what we miss is the ExchangSentEvent.",
0,CAMEL-6536,Task,Major,2.12.0,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,2,2013-07-10 09:50:26+00:00,2013-07-10 16:11:24+00:00,"In tests/camel-itest-osgi



[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:testCompile (default-testCompile) on project camel-itest-osgi: Compilation failure: Compilation failure:
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[27,28] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: package org.jclouds.blobstore
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[29,28] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: package org.jclouds.blobstore
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[27,28] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: package org.jclouds.blobstore
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[29,28] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: package org.jclouds.blobstore
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[50,8] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: class BlobStoreBlueprintRouteTest
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreBlueprintRouteTest.java:[50,53] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: class BlobStoreBlueprintRouteTest
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[54,8] error: cannot find symbol
[ERROR] symbol:   class BlobStoreContextFactory
[ERROR] location: class BlobStoreRouteTest
[ERROR] /Users/davsclaus/workspace/camel/tests/camel-itest-osgi/src/test/java/org/apache/camel/itest/osgi/jclouds/BlobStoreRouteTest.java:[54,53] error: cannot find symbol
[ERROR] -> [Help 1]




I asked on SO about the upgrade issue about the missing class: http://stackoverflow.com/questions/17567419/jclouds-1-5-to-1-6-upgrade-org-jclouds-blobstore-blobstorecontextfactory-class","davsclaus:1373421398:2013-07-10T09:56:38.314+0000:1373421398:2013-07-10T09:56:38.314+0000:I have disabled these tests so the code can compile.
bvahdat:1373427608:2013-07-10T11:40:08.584+0000:1373427608:2013-07-10T11:40:08.584+0000:The {{BlobStoreContextFactory}} API was marked {{@Deprecated}} in previous release(s) and apparently has been removed in 1.6. There's now a new {{ContextBuilder}} API we should make use of. See this commit of our codebase for an example of how to make use of the new API:

http://svn.apache.org/viewvc?view=revision&revision=r1476525

davsclaus:1373443884:2013-07-10T16:11:24.681+0000:1373443884:2013-07-10T16:11:24.681+0000:Thanks Babak for providing the solution. I have migrated the unit test code and it compiles now."
0,CAMEL-6535,Bug,Minor,2.11.0,,"
None
",Resolved,Invalid,None,Unassigned,Premkumar.TR,0,5,2013-07-10 08:45:23+00:00,2019-10-28 18:20:10+00:00,"I have created a route which getting a messsage from a JMS queue and remove the header and match it with XSD then map it to the destination xml. But while i doing it in a flow it breaks in the mapping and getting the below error.
""Exhausted after delivery attempt: 1 caught: javax.xml.transform.TransformerException: java.lang.NullPointerException""
Please find my Route :
	    <from uri=""jms:queue:INPUTQueue""/>
	    <log message=""LOG : XML File received from input Queue:""/>
	    <log message=""LOG : SOAP Header removel process Started:""/>
            <to uri=""xslt:src/main/resources/Header_Removel_XSL.xsl""/>
            <log message=""LOG : SOAP Header removel Completed: Validation process Started:""/>
            <to uri=""validator:xsds/schema.xsd""/>
            <log message=""LOG : Validation process Completed: Mapping Started""/>
            <to uri=""xslt:src/main/resources/Mapping.xsl""/>
            <log message=""LOG : Mapping Completed:""/>
            <to uri=""jms:queue:OUTPUTQueue""/>
            <log message=""Output Message : ${body}""/>


I have tested the Mapping.xsl alone and its wqorking fine. Please find the error below, Its a showstopper to us so kindly do the needful as ap.


Error Message :


DefaultErrorHandler            ERROR Failed delivery for (MessageId: queue_INPUT_Queue_ID_380a24259dc672ce51f20064110a134f0000000000000001 on ExchangeId: ID-CDC1-L-2C5LYX1-65478-1373437252921-0-1). Exhausted after delivery attempt: 1 caught: javax.xml.transform.TransformerException: java.lang.NullPointerException
javax.xml.transform.TransformerException: java.lang.NullPointerException
	at com.ibm.xtq.xslt.jaxp.TransformerImpl.transform(Unknown Source)[:]
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:128)[camel-core-2.10.0.fuse-71-047.jar:2.10.0.fuse-71-047]
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:101)[camel-core-2.10.0.fuse-71-047.jar:2.10.0.fuse-71-047]","davsclaus:1373419173:2013-07-10T09:19:33.564+0000:1373419173:2013-07-10T09:19:33.564+0000:See this page for getting help
http://camel.apache.org/support

And please use the mailing list / forum first for getting help first.
And when we have confirmed on the mailing list / forum, there is a bug in the code, then we log a JIRA ticket.

muellerc:1373547955:2013-07-11T21:05:55.624+0000:1373547955:2013-07-11T21:05:55.624+0000:As you use the Fuse version, you should ask the question on the Fuse/RedHat mailing list.
cameluser:1500114864:2017-07-15T18:34:24.354+0000:1500114864:2017-07-15T18:34:24.354+0000:I also faced the same issue when using camel routing. I just done a simple route from activemq queue to a bean and it works fine for the first time and i am able to get the exchange but it was retrying to get the message from the same queue which was already consumed resulting into NullPointer Excpetion in my pojo.

My route is very simple
from(queueName).process(new ActionFlowProcess()).to(""bean:JsonPojo?method=toString"");
i got the exchange printed in my pojo method toString. but after that its a nagging issue

""UX_BSL_SR"": {
		""action"" :""BoltCancel"",
		""SR_Header"": {
			""OrderType"": ""BoltOnCancel"",
			""ServiceRequestId"": ""Portal/App-Order-unique no"",
			""RequestorChannelId"": ""Portal/App"",
			""SrDate"": ""2017-07-15 5:55"",
			""BackendChannel"": ""CRM""
			},
		""OrderType"": ""BoltOnCancel"",
		""DeviceID"": """",
		""AccountNumber"":"""",
		""SR_Message"": {
			""OrderId"": ""Portal/App-Order-unique no"",
			""BoltOn"":[
					{					
					""Name"": ""BoltOn Name"",
					""DealEndT"": """"
					},
					{
					""Name"": ""BoltOn Name"",
					""DealEndT"": """"
					}
				],
				""Element1"":"""",
				""Element2"":"""",
				""Element3"":""""			
			}
}
}
BoltCancel
[Camel (camel-1) thread #0 - JmsConsumer[MbAppRequest]] ERROR org.apache.camel.processor.DefaultErrorHandler - Failed delivery for (MessageId: ID:DESKTOP-CH47PTC-61893-1500165070986-4:3:1:1:22 on ExchangeId: ID-DESKTOP-CH47PTC-65415-1500188330138-0-1). Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
java.lang.NullPointerException
	at com.covalense.csmart.model.JsonPojo.toString(JsonPojo.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:405)
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:278)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:251)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:67)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
arians23:1572258010:2019-10-28T18:20:10.671+0000:1572258010:2019-10-28T18:20:10.671+0000:[~davsclaus] Could you please share the resolution description and fix of this issue?"
0,CAMEL-6534,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,stephen samuel,0,4,2013-07-10 00:26:51+00:00,2013-07-23 05:38:49+00:00,"I have open sourced our component for RabbitMQ. I have been using this for a while in my open source projects.
There is already an AMQP component but it does not expose all the properties of the RabbitMQ client.
This component is related to the AMQP component like the activeMQ component relates to the JMS component (a superset of functionality).


I will create a wiki page if you can remind me how to do so; it has been a year since my last contribution.","njiang:1373391292:2013-07-10T01:34:52.549+0000:1373391320:2013-07-10T01:35:20.012+0000:Thanks for the contribution, I just checked the license of ampq-client[1]. It is not Apache License and we cannot release the software if it's license is not compatible with Apache License inside Apache Software Foundation. 
You may consider to contribute the code to camel-extra[2] where we can work around the license issue. 

[1]http://www.rabbitmq.com/java-client.html
[2]http://code.google.com/a/apache-extras.org/p/camel-extra/
davsclaus:1373406374:2013-07-10T05:46:14.974+0000:1373406374:2013-07-10T05:46:14.974+0000:On [1] the web page says its dual licensed

> The library is open-source, and is dual-licensed under the Mozilla Public License v1.1 and the GNU General Public License, v2.

The Mozilla license is an accepted license at ASF according to:
http://www.apache.org/legal/3party.html#define-thirdpartywork

I would assume then we can accept it at ASF?
samspade79:1373847496:2013-07-15T08:18:16.637+0000:1373847496:2013-07-15T08:18:16.637+0000:Mozilla licenses are ok for dependencies according to the Apache guidelines that Claus linked to.
njiang:1373852730:2013-07-15T09:45:30.798+0000:1373852730:2013-07-15T09:45:30.798+0000:Yeah, it should be OK for us to use the MPL one. 
I'm working on merge the patch into trunk.
samspade79:1373876970:2013-07-15T16:29:30.237+0000:1373876970:2013-07-15T16:29:30.237+0000:If you want to create a blank wiki page and link me I'll write up the documentation for it.
njiang:1373909621:2013-07-16T01:33:41.485+0000:1373909621:2013-07-16T01:33:41.485+0000:Hi Stephen,

Here is the [link|https://cwiki.apache.org/confluence/display/CAMEL/RabbitMQ], please update it if you already has the account.

Regards,

Willem
samspade79:1373927596:2013-07-16T06:33:16.473+0000:1373927596:2013-07-16T06:33:16.473+0000:I have an account so I'll do this tonight after work.
davsclaus:1374021904:2013-07-17T08:45:04.308+0000:1374021904:2013-07-17T08:45:04.308+0000:What about OSGi. We need camel-rabbitmq added to the features.xml file, and a test class in tests/camel-itest-karaf.
njiang:1374038233:2013-07-17T13:17:13.786+0000:1374038233:2013-07-17T13:17:13.786+0000:I'm working on the OSGi related task now.
samspade79:1374072041:2013-07-17T22:40:41.676+0000:1374072041:2013-07-17T22:40:41.676+0000:Sorry had some issues at work last couple of days. Will get to this wiki page ASAP promise :)
samspade79:1374332369:2013-07-20T22:59:29.655+0000:1374332369:2013-07-20T22:59:29.655+0000:Doc complete
samspade79:1374376812:2013-07-21T11:20:12.141+0000:1374376812:2013-07-21T11:20:12.141+0000:Uploaded a patch that adds in 2 extra fields to allow durable and auto delete on consumers."
0,CAMEL-6533,Task,Minor,2.11.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Christian Müller,Christian Müller,0,1,2013-07-09 21:53:53+00:00,2013-07-10 20:51:18+00:00,No Desc,muellerc:1373378227:2013-07-09T21:57:07.535+0000:1373378227:2013-07-09T21:57:07.535+0000:Needs to be back ported to the camel-2.11.x branch (release is currently in progress)
0,CAMEL-6532,Task,Minor,2.11.0,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Christian Müller,Christian Müller,0,1,2013-07-09 21:30:15+00:00,2013-07-10 20:49:46+00:00,No Desc,"muellerc:1373376750:2013-07-09T21:32:30.769+0000:1373376750:2013-07-09T21:32:30.769+0000:Needs to be back ported to the camel-2.11.x branch (release is currently in progress):
{noformat}
Christians-MacBook-Pro:camel cmueller$ git push
Counting objects: 7, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 368 bytes, done.
Total 4 (delta 2), reused 0 (delta 0)
To https://git-wip-us.apache.org/repos/asf/camel.git
   23412ab..3a42ec1  master -> master
{noformat}"
0,CAMEL-6531,Task,Minor,2.11.0,None,"
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Christian Müller,Christian Müller,0,1,2013-07-09 19:32:42+00:00,2013-07-10 20:48:10+00:00,No Desc,"muellerc:1373369691:2013-07-09T19:34:51.411+0000:1373369691:2013-07-09T19:34:51.411+0000:Needs to be merged into the camel-2.11.x branch (release is currently in progress):
{noformat}
Christians-MacBook-Pro:camel cmueller$ git push
Counting objects: 7, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 375 bytes, done.
Total 4 (delta 2), reused 0 (delta 0)
To https://git-wip-us.apache.org/repos/asf/camel.git
   6f9c028..beb9a76  master -> master
{noformat}"
0,CAMEL-6530,Task,Minor,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Christian Müller,Christian Müller,0,1,2013-07-09 19:19:35+00:00,2013-07-09 19:22:55+00:00,No Desc,
0,CAMEL-6529,Task,Minor,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Christian Müller,Christian Müller,0,1,2013-07-09 17:41:48+00:00,2013-07-09 17:50:45+00:00,"The Sun jaxp-ri dependency is using by CXF when using the ibm jdk, so that CXF's dependency on the Sun saaj can work with the ibm jdk.","muellerc:1373363077:2013-07-09T17:44:37.245+0000:1373363077:2013-07-09T17:44:37.245+0000:By the way, it's the version CXF is using in there builds..."
0,CAMEL-6528,Task,Minor,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Christian Müller,Christian Müller,0,2,2013-07-09 17:29:11+00:00,2013-07-09 18:41:47+00:00,No Desc,"raulvk:1373366507:2013-07-09T18:41:47.649+0000:1373366507:2013-07-09T18:41:47.649+0000:Nice one, [~muellerc]!"
0,CAMEL-6527,Task,Major,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Christian Müller,Christian Müller,0,1,2013-07-09 17:16:17+00:00,2013-07-09 17:21:15+00:00,No Desc,
0,CAMEL-6526,Bug,Minor,2.11.0,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Peter Leibiger,0,2,2013-07-09 14:51:53+00:00,2017-03-10 10:28:25+00:00,"In a transacted route, checked exceptions are wrapped by a RuntimeCamelException - the CxfConsumer should use the wrapped cause as fault, if it exists.","davsclaus:1436570365:2015-07-11T07:19:25.113+0000:1436570365:2015-07-11T07:19:25.113+0000:Ah so somewhere in the cxf consumer it grabs the caused exception and uses that as a soap fault? 

And are you saying that it picks the wrong exception such as RuntimeCamelException instead of the real cause? Yeah sounds like we should grab the deepest child exception.
davsclaus:1488263783:2017-02-28T14:36:23.586+0000:1488263783:2017-02-28T14:36:23.586+0000:Can you provide an example, unit test or something?
davsclaus:1489112905:2017-03-10T10:28:25.195+0000:1489112905:2017-03-10T10:28:25.195+0000:Its more a CXF issue with that linked ticket that is unresolved after 5 years"
0,CAMEL-6525,Improvement,Trivial,2.11.0,,"
None
",Resolved,Later,None,Unassigned,Peter Leibiger,0,3,2013-07-09 14:47:21+00:00,2017-02-28 14:35:53+00:00,"The CxfConsumer inspects thrown Exceptions for the existence of a @Webfault annotation and sets the fault details if one exists, Cxf's WebFaultOutInterceptor does this also, setting the details in CxfConsumer may be unnecessary.","davsclaus:1390894064:2014-01-28T15:27:44.967+0000:1390894064:2014-01-28T15:27:44.967+0000:What if the end user does not have that WebFaultOutInterceptor  interceptor? Not sure if this is a bug?

Willem any thoughts?"
0,CAMEL-6524,Bug,Major,None,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-07-09 14:42:00+00:00,2013-07-10 10:21:37+00:00,"Reported here:
http://fusesource.com/forums/thread.jspa?threadID=4835&tstart=0


Works with Spring but fails with blueprint.",
0,CAMEL-6523,New Feature,Major,None,None,"
None
",Resolved,Incomplete,None,Unassigned,Rafał Sumisławski,0,3,2013-07-09 14:35:09+00:00,2017-03-03 13:28:18+00:00,"We have started working on a new Camel component. It is an consumer endpoint implementing IPDR (Internet Protocol Detail Record). We have created both: our own implementation of the IPDR protocol and an Apache Camel component. 


More information about IPDR: http://www.tmforum.org/InternetProtocolDetail/4501/home.html


Component requires more tests. We have very limited access to real device implementing IPDR, thus we could only test connection establishing. We are unable to run any more tests with real devices. We would appreciate some help on this ground.","davsclaus:1393914100:2014-03-04T14:21:40.794+0000:1393914100:2014-03-04T14:21:40.794+0000:Hey how does it go? Did you get further with this?
pgancarz:1393916865:2014-03-04T15:07:45.540+0000:1393916865:2014-03-04T15:07:45.540+0000:Hi, we stuck in place where we have to perform some additional tests on real device. So work on this component is frozen now.
However I think we can ask for help from tmforum. Maybe they would be able to help with testing.
I'll try to contact with them.
davsclaus:1436570486:2015-07-11T07:21:26.145+0000:1436570486:2015-07-11T07:21:26.145+0000:Any update on this?"
0,CAMEL-6522,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-07-09 12:59:02+00:00,2013-07-09 14:12:11+00:00,"If you have many netty routes you may want to reuse netty boss / worker pools which allows to control the active number of threads in use.


For example if you have 200 routes with netty then by default they have all their own thread pools. By sharing thread pools we can control the number of threads and for example set that to lower values.",
0,CAMEL-6521,Improvement,Minor,None,"2.10.7, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-07-09 05:41:56+00:00,2013-07-09 05:54:43+00:00,"See AMQ-4588


We would need a similar improvement in camel-core",
0,CAMEL-6520,Task,Major,2.11.0,2.11.1,"
None
",Resolved,Fixed,2.11.1,Christian Müller,Christian Müller,0,1,2013-07-08 21:33:38+00:00,2013-07-08 21:36:13+00:00,No Desc,
0,CAMEL-6519,Task,Major,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Christian Müller,Christian Müller,0,1,2013-07-08 21:25:12+00:00,2013-07-08 21:29:03+00:00,No Desc,
0,CAMEL-6518,Task,Major,"2.10.6, 2.11.0","2.10.7, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.1, 2.12.0",Christian Müller,Christian Müller,0,1,2013-07-08 19:54:09+00:00,2013-07-08 21:23:22+00:00,No Desc,
0,CAMEL-6517,Improvement,Major,"2.12.0, 3.0.0",2.12.0,"
None
",Closed,Fixed,2.12.0,Ioannis Canellos,Ioannis Canellos,0,3,2013-07-08 07:54:23+00:00,2013-07-10 19:57:13+00:00,No Desc,"iocanel:1373252657:2013-07-08T11:04:17.859+0000:1373252657:2013-07-08T11:04:17.859+0000:Pushed 42125feef2e6a7134e36ca2d97301f1c93a27098
muellerc:1373285626:2013-07-08T20:13:46.507+0000:1373285626:2013-07-08T20:13:46.507+0000:Validation of the feature camel-jclouds now fails:

{noformat}
[INFO]     OK: imports resolved for camel-jaxb
[WARNING] Failed to validate feature camel-jclouds
[WARNING] No export found to match org.jclouds.blobstore.util;version=""[1.5,2)"" (imported by mvn:org.apache.camel/camel-jclouds/2.12-SNAPSHOT)
[WARNING] No export found to match org.jclouds.blobstore.options;version=""[1.5,2)"" (imported by mvn:org.apache.camel/camel-jclouds/2.12-SNAPSHOT)
[WARNING] No export found to match org.jclouds.blobstore.domain;version=""[1.5,2)"" (imported by mvn:org.apache.camel/camel-jclouds/2.12-SNAPSHOT)
[WARNING] No export found to match com.google.common.base;version=""[13.0,14)"" (imported by mvn:org.apache.camel/camel-jclouds/2.12-SNAPSHOT)
[WARNING] No export found to match org.jclouds.blobstore;version=""[1.5,2)"" (imported by mvn:org.apache.camel/camel-jclouds/2.12-SNAPSHOT)
[WARNING] No export found to match com.google.common.io;version=""[13.0,14)"" (imported by mvn:org.apache.camel/camel-jclouds/2.12-SNAPSHOT)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 10:02.256s
[INFO] Finished at: Mon Jul 08 22:10:00 CEST 2013
[INFO] Final Memory: 15M/81M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.3.2-SNAPSHOT:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: 6 unresolved imports in feature camel-jclouds -> [Help 1]
{noformat}
bvahdat:1373457433:2013-07-10T19:57:13.027+0000:1373457433:2013-07-10T19:57:13.027+0000:The feature validation is fixed now."
0,CAMEL-6516,Bug,Major,"2.10.4, 2.11.0","2.10.7, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.1, 2.12.0",Willem Jiang,Henrique Viecili,0,2,2013-07-08 06:35:48+00:00,2013-07-10 09:29:32+00:00,"A user following the documentation at http://camel.apache.org/mina.html#MINA-ConfiguringMinaendpointsusingSpringbeanstyle will face an IllegalArgumentException because org.apache.camel.component.mina2.Mina2Component.createEndpoint(Mina2Configuration) calls createEndpoint(null, config) and does not implement/override org.apache.camel.impl.DefaultEndpoint.createEndpointUri()


Stack Trace:
java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.mina2.Mina2Endpoint does not implement createEndpointUri() to create a default value
        at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:154)
(...)


Workaround: define the endpoint inline with mina:tcp://[host]...","njiang:1373238709:2013-07-08T07:11:49.839+0000:1373238709:2013-07-08T07:11:49.839+0000:You can workaround it by applying the endpoint uri parameter yourself when creating the mina endpoint.
{code}
<bean id=""myMinaEndpoint""
      factory-bean=""myMinaFactory""
      factory-method=""createEndpoint"">
    <!-- pass the endpoint uri into the createEndpoint method -->
    <constructor-arg index=""0"" val=""mina://myMinaConfig"" />
    <!-- and here we can pass it our configuration -->
    <constructor-arg index=""1"" ref=""myMinaConfig""/>
</bean>
{code} 
njiang:1373241736:2013-07-08T08:02:16.212+0000:1373241736:2013-07-08T08:02:16.212+0000:I just did a simple test on the camel trunk, the endpointUri will be set with the endpoint name like ""myMinaEndpoint"". I will updated the code by using the endpoint uri which can reflects the config setting. 
viecili:1373259450:2013-07-08T12:57:30.617+0000:1373259450:2013-07-08T12:57:30.617+0000:bare in mind the method taking these 2 arguments is 'protected' as it may affect other injection frameworks
njiang:1373407563:2013-07-10T06:06:03.132+0000:1373407563:2013-07-10T06:06:03.132+0000:Applied the patch into master and camel-2.11.x and camel-2.10.x branches."
0,CAMEL-6515,Improvement,Major,None,"2.10.7, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.1, 2.12.0",Raúl Kripalani,Raúl Kripalani,0,3,2013-07-07 21:28:13+00:00,2014-04-12 12:50:04+00:00,No Desc,"muellerc:1373204333:2013-07-07T21:38:53.709+0000:1373204333:2013-07-07T21:38:53.709+0000:We usually do not upgrade major/minor versions in our bug fix releases. I think we should only do this upgrade in trunk.
raulvk:1373208124:2013-07-07T22:42:04.378+0000:1373208124:2013-07-07T22:42:04.378+0000:Upgraded in trunk (2.12) and 2.11.x and 2.10.x branches.
raulvk:1373210381:2013-07-07T23:19:41.280+0000:1373210381:2013-07-07T23:19:41.280+0000:[~muellerc] - Sorry, I only just saw your comment now! We can revert the change on 2.10.x and 2.11.x if needed. But I think this upgrade will be welcome as it allows Camel to interact with higher versions of MongoDB and to use the new security features in MongoDB 2.4. 

My opinion is that upgrading drivers is generally OK – as they are just lightweight elements that simply provide a connection layer. 

A different story would be to upgrade a library that incorporates/embeds functionality into Camel (e.g. Saxon, Jackson, Spring, etc.). Those upgrades can be more harmful and we should control them more tightly as you outlined above, IMHO. 
muellerc:1373236389:2013-07-08T06:33:09.554+0000:1373236389:2013-07-08T06:33:09.554+0000:It's fine if the upgrade is backwards compatible. This isn't the case for all major/minor dependency upgrades.
bvahdat:1373243158:2013-07-08T08:25:58.694+0000:1373243158:2013-07-08T08:25:58.694+0000:Hi Raul

First of all congratulation for the PMC membership :-) 

Would you please document this dependency upgrade into the [2.12 release notes|https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.12.0+Release#Camel2.12.0Release-DependencyUpgrades]?

I also wonder if there was any *urgent* necessity to upgrade the driver, given that known nasty NPE of it. Would it not be better to wait for the next patch release until this gets fixed properly? Or at least maybe it would make sense to put a {{TODO}} marker to that {{catch}} block so that we don't forget to remove that block as soon as this ""bug"" is fixed.

raulvk:1373244540:2013-07-08T08:49:00.983+0000:1373244540:2013-07-08T08:49:00.983+0000:[~bvahdat] – many thanks ;-)

2.12 release notes updated.

We were 2 minor versions behind and as a result Camel wasn't able to leverage security features introduced in newer versions of MongoDB which are vital in enterprise environments.

The NPE from the driver is not offensive, it simply isn't a nice exception for an API to throw. An InterruptedException or similar would be less misleading (https://jira.mongodb.org/browse/JAVA-605), but I'm not sure it has much priority on their side as the ticket is 10 months old now. Holding off on our side wouldn't have benefitted our users.

Regards,
Raúl.
bvahdat:1397278204:2014-04-12T12:50:04.507+0000:1397278204:2014-04-12T12:50:04.507+0000:Only just for the record: in the context of upgrade to the newest MongoDB driver version 2.12.0 on the master branch, among other things, I've also removed *that* NPE catch block, as in the meanwhile the corresponding [ticket|https://jira.mongodb.org/browse/JAVA-1091] on their side has been fixed."
0,CAMEL-6514,Bug,Minor,"2.10.4, 2.11.0","2.10.7, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.1, 2.12.0",Claus Ibsen,Joerg Heinicke,0,2,2013-07-05 14:10:03+00:00,2013-07-10 16:39:23+00:00,"Hi,
a NPE is thrown if no private key file is supplied in the configuration for SFTP. The error is
Caused by: java.lang.NullPointerException: while trying to get the length of an array loaded from local variable 'foo'
at com.jcraft.jsch.Buffer.putString(Buffer.java:59)
I have analysed the code a bit and found that the problem is caused
by the class SftpOperations. The method createSession sets the userInfo for the seesion by an inline class. Here the method promptKeyboardInteractive does not work correctly if no private key file is supplied. In that case JSCH switches to user/pw authorization and this method is called. But since there is no password maintained the configation object returns NULL. The present implementation adds it to the string array causing the error in JSCH. JSCH either wants a NULL string array or an empty string array (I have tested both). So the code should look e.g. as follows:


            public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt, boolean[] echo) {
                String password = configuration.getPassword();
                if (password == null) 

{
                    return new String[0];
                }

 else {
                    return new String[] 

{ password }

;
                }
            }
With that change JSCH returns
Caused by: java.io.FileNotFoundException: ./data/ssh/id_rsa (No such file or directory)
	at java.io.FileInputStream.open(Native Method)


and that is the real cause of the error 


Best Regards,


Jörg",davsclaus:1373445563:2013-07-10T16:39:23.112+0000:1373445563:2013-07-10T16:39:23.112+0000:Thanks for reporting and with the solution.
0,CAMEL-6513,Task,Major,2.11.0,2.14.0,"

cdi

",Resolved,Fixed,2.14.0,Claus Ibsen,Andreas Dolk,1,5,2013-07-04 15:45:38+00:00,2014-09-07 07:52:12+00:00,"After upgrading from weld 1.1.10 (CDI 1.0) to weld 2.0.2 (CDI 1.1), an Arquillian based test throws an error:


Caused by: java.lang.IncompatibleClassChangeError: Class org.apache.camel.cdi.internal.CamelContextBean does not implement the requested interface javax.enterprise.inject.spi.BeanAttributes
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateStereotypes(ExternalBeanAttributesFactory.java:76)
	at org.jboss.weld.bean.attributes.ExternalBeanAttributesFactory.validateBeanAttributes(ExternalBeanAttributesFactory.java:69)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.processBean(AfterBeanDiscoveryImpl.java:83)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.addBean(AfterBeanDiscoveryImpl.java:77)
	at org.apache.camel.cdi.internal.CamelExtension.registerManagedCamelContext(CamelExtension.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)
	... 112 more","muellerc:1372944375:2013-07-04T21:26:15.390+0000:1372944375:2013-07-04T21:26:15.390+0000:This isn't a bug. We simply have to upgrade to CDI 1.1.
treverix:1372976342:2013-07-05T06:19:02.204+0000:1372976342:2013-07-05T06:19:02.204+0000:Is there a ""fix version"" or a schedule already for this upgrade? We'd like to migrate an application, that uses camel-cdi, to JavaEE7 (glassfish 4 & jboss AS8)
muellerc:1372979857:2013-07-05T07:17:37.390+0000:1372979857:2013-07-05T07:17:37.390+0000:Not yet. If you are able to provide a patch, it will speed up the fix... ;-)
We love contributions [1].

[1] http://camel.apache.org/contributing.html
cmoulliard:1383789060:2013-11-07T09:51:00.375+0000:1383789060:2013-11-07T09:51:00.375+0000:We are working on that with Antoine Sabot-Durand. Should be fixed soon.
davsclaus:1390864282:2014-01-28T07:11:22.451+0000:1390864282:2014-01-28T07:11:22.451+0000:Any updates on this?
githubbot:1410047496:2014-09-07T07:51:36.643+0000:1410047496:2014-09-07T07:51:36.643+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/56

davsclaus:1410047532:2014-09-07T07:52:12.616+0000:1410047532:2014-09-07T07:52:12.616+0000:Thanks got the PR merged, and testing with weld-2 works."
0,CAMEL-6512,New Feature,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,James Strachan,1,2,2013-07-04 15:21:02+00:00,2019-07-31 04:24:25+00:00,"See how to register custom converters in Dozer:
http://dozer.sourceforge.net/documentation/customconverter.html


it'd be nice if when using camel and dozer together; the DozerMapper automatically discovered all the available type converters in the Camel type converter registry; so that a dozer mapper can reuse any camel type converter when mapping properties between different beans.",davsclaus:1436570538:2015-07-11T07:22:18.428+0000:1436570538:2015-07-11T07:22:18.428+0000:camel-dozer has been improved a lot recently. I wonder if this is not already implemented?
0,CAMEL-6511,New Feature,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,James Strachan,0,2,2013-07-04 12:53:09+00:00,2019-07-31 04:24:14+00:00,"I wonder if we can avoid having to explicitly configure in Spring the DozerTypeConverterLoader class along with the explicit org.dozer.DozerBeanMapper; but instead get camel-core to auto-detect (with META-INF/services or similar OSGi tricks) the presence of the camel-dozer library and then just automatically create it. e.g. using a META-INF/services/..../TypeConverterLoader file to force the lazy creation of the DozerTypeConverterLoader object.


Then also automatically scan for all META-INF/services/dozerMapping.xml files and register them all. 


For more info see: 
http://camel.apache.org/dozer-type-conversion.html


Then it would feel like Dozer mapping files are kinda like Camel type converters; that they are just automatically discovered and configured on the fly - if they are defined in the convention-over-configuration way?


e.g. given that camel-dozer is on the classpath, all that is required is you add a META-INF/services/dozer/mapping.xml file to the classpath and hey-presto all the type conversions defined inside it are immediately available to Camel","jstrachan:1372980303:2013-07-05T07:25:03.935+0000:1372980303:2013-07-05T07:25:03.935+0000:From a tooling perspective, it'd be nice if folks could just take any project which depends on camel-dozer and just create a file in META-INF/services/dozerMapping.xml using the Dozer eclipse plugin and then create some mappings and they automatically show up in camel as standard type conversions:
http://dozer.sourceforge.net/documentation/eclipse-plugin/usage-editor.html
davsclaus:1408918815:2014-08-25T06:20:15.102+0000:1408918815:2014-08-25T06:20:15.102+0000:We may wanna give some thoughs to some kind of way a component can enlist some service that reacts upon events such as when a camel context is being created | started | stopped etc. so it can do some work - such as scanning for dozer mappings and auto enlisting them."
0,CAMEL-6510,Improvement,Minor,None,2.12.0,"
None
",Resolved,Not A Problem,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-07-04 09:46:31+00:00,2013-07-17 09:53:18+00:00,"When using EIPs with the aggregation strategy, it would be nice if we could support if its a service, so we can have start|stop callbacks invoked.",davsclaus:1374025998:2013-07-17T09:53:18.356+0000:1374025998:2013-07-17T09:53:18.356+0000:The EIPs already start and stop the aggregation strategy if its a service.
0,CAMEL-6509,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,James Strachan,0,2,2013-07-04 09:04:41+00:00,2014-08-23 07:06:10+00:00,"See the example 7 on the cache page:
http://camel.apache.org/cache.html


it'd be nice if we could easily add a 'lookup in the cache for a given key expression, use it as the payload if its found, otherwise invoke some remote endpoint, update the cache and return that new value'; so folks can easily add caching in front of endpoints.


I'm wondering if this might be more intuitive if its an actual pattern? e.g.



from(""seda:foo"").
  cache(""myCacheName"").xpath(""/foo/customerId"").
     getOrUpdate(""http://the.remote.thingy"").
  // now carry on doing normal camel stuff...




We can then use expressions for the key to use (and possibly for the cache name - or a constant string can be defaulted), then the operations are either get() or getOrUpdate() - the latter taking an Endoint or URI to invoke if there is no value in the cache.


e.g. to just do a cache lookup...



from(""seda:foo"").
  cache(""myCacheName"").xpath(""/foo/customerId"").
     get().
  // now carry on doing normal camel stuff...",
0,CAMEL-6508,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-07-04 07:43:24+00:00,2013-07-28 15:35:49+00:00,"When using recipient list and with aggregation strategy, it would be nicer if we could easily see from the Exchange which endpoint from the recipient list expression its from.


This makes logic in the aggregation strategy easier to implement when merging data from many different endpoints and if they come out of order due parallel work.",
0,CAMEL-6477,Improvement,Major,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Shaun Elliott,0,3,2013-06-21 16:34:54+00:00,2013-06-24 15:54:38+00:00,"Currently the SFTP component only allows key files to be loaded from the OS path. It would be much better of the key file were loaded in from the classpath intead. 


Please the forum conversation for more information:
http://camel.465427.n5.nabble.com/camel-sftp-privateKeyFile-load-from-classpath-tt5734394.html#a5734526","siano:1372022225:2013-06-24T05:17:05.819+0000:1372022225:2013-06-24T05:17:05.819+0000:I have attached a patch to the camel-ftp component that has the following functionality:
1. add a test for the existing (file based) client key authentication
2. add new configuration parameters knownHostsUri and privateKeyUri that allow to give URIs as parameters (including classpath URIs which is the default) plus implementation and test
3. add new configuration parameters knownHosts and privateKey that allow to pass references to byte[] (in the OpenSSH format as the files) containing the private key and known hosts material
4. add a new configuration parameter privateKeyPassphrase, which does the same as the existing privateKeyFilePassphrase (which we should probably deprecate, because it does not only apply to files but to the other privateKey entities, too).
davsclaus:1372031752:2013-06-24T07:55:52.086+0000:1372031752:2013-06-24T07:55:52.086+0000:Thanks for the patch.

I have added some notes to the docs as well.
selliott:1372060478:2013-06-24T15:54:38.965+0000:1372060478:2013-06-24T15:54:38.965+0000:Thanks for the patch and your work to improve this :)"
0,CAMEL-6476,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,3,2013-06-21 12:56:13+00:00,2013-07-22 14:03:16+00:00,"The old stream caching has some flaws such as



copying the existing stream into an internal buffer/type
spool to disk by default
a bit confusing to configure
wrap based
not exposed in JMX
not easy to implement custom strategies



Working on a new strategy that supports



reusing existing stream if it supports marks done (added special for byte array input streams)
memory based only by default wontfix (we leave it backwards compatible as is, ppl can easily turn off overflow to disk now)
threshold for spooling to disk based on memory usage, and payload sizes done
use the internal camel processor to avoid wrapping done
exposed in JMX with runtime stats done
only enabled if explicit turned on done
log at INFO level on startup if enabled and what settings is in use done
configuring in the DSL with a xxxDefinition to make it stand out in the XML DSLs done
configuring of spool directory supporting ENV and JVM system properties done
avoid the leak from CAMEL-6452 done","davsclaus:1371790908:2013-06-21T13:01:48.333+0000:1371790908:2013-06-21T13:01:48.333+0000:For streams with no mark support, we could maybe do a copy on-demand, so when we reset, we can read from the copy, and if we didn't read it all, we just switch over to the original stream at point of break. 
dkulp:1371797006:2013-06-21T14:43:26.147+0000:1371797006:2013-06-21T14:43:26.147+0000:
I'm -1 to having it only memory based by default.  That introduces an immediate DOS attack.   64K is likely way too small now, but there definitely needs to be some sort of point at which it either flips to disk or completely stops buffering and throws an IOException.   Waiting for the OutOfMemoryException is not a good idea.



davidkarlsen@gmail.com:1371798584:2013-06-21T15:09:44.291+0000:1371798584:2013-06-21T15:09:44.291+0000:I guess having a configurable threshold value for when to spool would be the best. And to expose this in the DSL when activating streaming for a context.
davsclaus:1374119273:2013-07-18T11:47:53.768+0000:1374119273:2013-07-18T11:47:53.768+0000:Configuration of stream caching is now much easier and more exposed and easier for end users to see/understand.
Update the docs at http://camel.apache.org/stream-caching.html with examples and details.
davsclaus:1374472996:2013-07-22T14:03:16.981+0000:1374472996:2013-07-22T14:03:16.981+0000:There is now a stream caching strategy in place that is backwards compatible.

It has more options and configurations documented at the stream caching docs.
And when starting up Camel we get better INFO logging that its in use (or not) etc.

And there is JMX stats at runtime, and you can alter the threshold at runtime etc.
And you can add your own rules to determine if spooling to disk or not.

The spool to disk is using the existing CachedOutputStream class from 2.11.
Its java.io.File based.

We may in the future look at adding a SPI so ppl can plugin custom stores, if there is faster impls than using the java.io.File and its FileInputStreams."
0,CAMEL-6475,Improvement,Major,None,2.12.0,"
None
",Resolved,Won't Fix,2.12.0,Claus Ibsen,Claus Ibsen,0,2,2013-06-21 08:38:18+00:00,2013-07-24 10:42:34+00:00,"This causes problems as then people cant turn off stream caching, as camel-cxf forces this down on them anyway.


org.apache.camel.component.cxf.converter.CxfConverter#soapMessageToInputStream","njiang:1371779050:2013-06-21T09:44:10.869+0000:1371779050:2013-06-21T09:44:10.869+0000:Hi Claus, 
camel-http is using the StreamCaching to copy the response message for further access HttpProducer.doExtractResponseBodyAsStream
I think it could be easy to avoid the streamCaching by checking the setting of Exchange in the CachedOutputStream construction method.

BTW, it could consume lots of memory if we don't using the file to cache the stream.
davsclaus:1371779892:2013-06-21T09:58:12.122+0000:1371779892:2013-06-21T09:58:12.122+0000:No the problem is that the logic in the CachedOutputStream is bad, it just spool to file regardless if you have 2gb of free memory etc.
And its confusing to configure because its the only ""thing"" in Camel you configure using those properties, that people never use.

davsclaus:1371780110:2013-06-21T10:01:50.779+0000:1371780110:2013-06-21T10:01:50.779+0000:Frankly the stream cache should NEVER have spooled to disk by default IMHO. 

It makes CXF / Camel look bad in load tests, as it drops performance by a great magnitude due this. And people dont know why.
We should INHO turn off the disk spooling in 2.12. And make stream caching configuration much easier, and expose how its configured and in-use when Camel starts. And have it registered in JMX etc so people can see stats at runtime etc.


davsclaus:1374633754:2013-07-24T10:42:34.584+0000:1374633754:2013-07-24T10:42:34.584+0000:With the improve stream caching in Camel 2.12 we can control this better now."
0,CAMEL-6474,Improvement,Major,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Willem Jiang,0,2,2013-06-21 08:06:24+00:00,2013-07-25 02:46:07+00:00,"XmlConverter will convert the DomSource into SAXSource when it can find the org.apache.xalan.xsltc.trax.DOM2SAX. 
But the DOM2SAX doesn't provide the full support of SAX, which causes the NPE issue when we route the SAXSource into xslt transformer like saxon transformer. 
Here are some discussion on saxon support https://saxonica.plan.io/issues/1814.


BTW, when I changed the transformer to the xalan one, I still the java.util.EmptyStackException. 


So my suggest we need to disable this convertor until we find other good solution.","davsclaus:1372373095:2013-06-28T06:44:55.936+0000:1372373095:2013-06-28T06:44:55.936+0000:Wonder if we should keep this change to 2.12 only, eg as a change like this in a patch release is not something I like to do. As XML / SAX / DOM et all can be tricky to work well in all JDKs / OS / Containers etc. 
njiang:1374691533:2013-07-25T02:45:33.235+0000:1374691533:2013-07-25T02:45:33.235+0000:Just applied the patch into master branch."
0,CAMEL-6473,Bug,Major,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Unassigned,Sergey Galkin,0,3,2013-06-21 07:00:05+00:00,2014-11-10 21:26:00+00:00,"Due to the bug in the DefaultSqlPrepareStatementStrategy there no ability to use NULL values.


Following query will be failed, if we try to use NULL  as a parameter value:


select a, b from foo where (:#param1 IS NOT NULL AND a > 12 ) OR (:#param2 IS NOT NULL AND b > 12)


We'll get an error: 



Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 2, was:1
at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:132) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:74) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.apache.camel.component.sql.SqlProducer$1.doInPreparedStatement(SqlProducer.java:57) ~[camel-sql-2.11.0.jar:2.11.0]
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587) ~[spring-jdbc-3.1.4.RELEASE.jar:3.1.4.RELEASE]


Fix is quite simple: iterator implementation (returned by DefaultSqlPrepareStatementStrategy.createPopulateIterator()) should be changed as follows:



                return new Iterator<Object>() {
                    private NamedQueryParser parser = new NamedQueryParser(query);
                    private String nextParam;
                    private boolean done;

                    @Override
                    public boolean hasNext() {
                        if (done) {
                            return false;
                        }
                        
                        if (nextParam == null) {
                            nextParam = parser.next();
                            if (nextParam == null) {
                                done = true;
                            }
                        }
                        return nextParam != null;
                    }

                    @Override
                    public Object next() {
                        if(!hasNext()){
                            throw new NoSuchElementException();
                        }
                        
                        boolean contains = bodyMap != null ? bodyMap.containsKey(nextParam) : false;
                        contains |= headerMap != null ? headerMap.containsKey(nextParam) : false;
                        if (!contains) {
                            throw new RuntimeExchangeException(""Cannot find key ["" + nextParam + ""] in message body or headers to use when setting named parameter in query ["" + query + ""]"", exchange);
                        }
                            
                        // get from body before header
                        Object next = bodyMap != null ? bodyMap.get(nextParam) : null;
                        if (next == null) {
                            next = headerMap != null ? headerMap.get(nextParam) : null;
                        }

                        nextParam = null;
                        return next;
                    }

                    @Override
                    public void remove() {
                        // noop
                    }
                };",davsclaus:1371944387:2013-06-23T07:39:47.615+0000:1371944387:2013-06-23T07:39:47.615+0000:Thanks for reporting and with the patch.
0,CAMEL-6472,Bug,Major,2.10.0,None,"
None
",Closed,Invalid,None,Unassigned,Pankaj Jain,0,2,2013-06-20 18:40:25+00:00,2013-06-20 21:59:50+00:00,"I am trying to upload the around 100 mb file from one server to different. First I am trying to copy the file from one server to the server where my application is running. Below are the issue I am facing.


1. When file copy is in-progress status, camel application start picking up the file and throwing an exception, file not found because it is used by some other process. How to fix this issue.


2.Before processing the file I am validating the file against the xsd schema and then processed. It processed all the records successfully but at the ends it is throwing an below exception message.


Rollback file strategy:
org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@4c7e10
for file: GenericFile[TestData.xml]


CamelLogger file.GenericFileOnCompletion : Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Error renaming file from C:\in\TestData.xml] 


================
Just I have started to using the camel framework, so does not have an much idea about it.  Waiting for response. Can some one help me to fix this issue.","muellerc:1371736775:2013-06-20T21:59:35.094+0000:1371736775:2013-06-20T21:59:35.094+0000:Use the user mailing list [1] for questions how to use Camel and to getting help.
I will gonna close this issue...

[1] http://camel.apache.org/mailing-lists.html"
0,CAMEL-6471,Improvement,Minor,None,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,2,2013-06-20 11:35:17+00:00,2013-08-15 13:14:28+00:00,"org.apache.camel.component.cxf.CxfPayload#toString


This forces outputting the body even if its streaming mode. This is bad. We should not load the stream into memory.


There is already good logging support by the log component where you can turn on|off logging streams etc.","ay:1376477027:2013-08-14T18:43:47.230+0000:1376477027:2013-08-14T18:43:47.230+0000:Hi Claus,
Will you be integrating this fix to 2.11.x?

Without this fix, toString() called somewhere or even during debugging is turning a non-dom source body into a dom source body.

So I think, it would be very nice to have this fix integrated to the lower codelines.

regards, aki


davsclaus:1376531736:2013-08-15T09:55:36.561+0000:1376531736:2013-08-15T09:55:36.561+0000:Yeah I think it would be okay for 2.11 branch. Aki, feel free to cherry pick the commit to this branch
ay:1376543668:2013-08-15T13:14:28.669+0000:1376543668:2013-08-15T13:14:28.669+0000:integrated the fix into 2.11.x and updated the fix version info.
"
0,CAMEL-6470,Bug,Blocker,None,,"
None
",Closed,Fixed,None,Christian Müller,Christian Müller,0,1,2013-06-20 09:09:29+00:00,2013-06-20 21:43:57+00:00,"Oracle has announced [1], [2] a frame injection vulnerability in Javadoc
generated by Java 5, Java 6 and Java 7 before update 22.


The infrastructure team has completed a scan of our current project
websites and identified over 6000 instances of vulnerable Javadoc
distributed across most TLPs. The chances are the project(s) you
contribute to is(are) affected. A list of projects and the number of
affected Javadoc instances per project is provided at the end of this
e-mail.


Please take the necessary steps to fix any currently published Javadoc
and to ensure that any future Javadoc published by your project does not
contain the vulnerability. The announcement by Oracle includes a link to
a tool that can be used to fix Javadoc without regeneration.


The infrastructure team is investigating options for preventing the
publication of vulnerable Javadoc.


[1]
http://www.oracle.com/technetwork/topics/security/javacpujun2013-1899847.html
[2] http://www.kb.cert.org/vuls/id/225657


camel.apache.org        786 vulnerabilities",
0,CAMEL-6469,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Jason Chaffee,0,2,2013-06-20 05:04:12+00:00,2015-07-11 07:49:53+00:00,"If throwing exceptions are turned off, there is no way to get the same information that is used construct the exception when throwing them.  There should be an exchange property for the StatusLine object in camel-http4 just like there is for the response code.  In fact, if the StatusLine object is available, there is no need for the response code property.","jasonchaffee:1371676045:2013-06-20T05:07:25.580+0000:1371676119:2013-06-20T05:08:39.025+0000:Another options is to simply add the ReasonPhrase as well as the StatusCode to properties on the exchange

I like this better as they are a String and a int so you don't have to have a compile dependency (tight coupling) on httpcomponents to get the info.
davsclaus:1436572193:2015-07-11T07:49:53.673+0000:1436572193:2015-07-11T07:49:53.673+0000:There is now a header with key Exchange.HTTP_RESPONSE_TEXT with the status text."
0,CAMEL-6468,Improvement,Major,2.11.0,,"
None
",Resolved,Duplicate,None,Unassigned,Aaron Whiteside,0,2,2013-06-20 01:55:18+00:00,2013-06-20 10:08:19+00:00,"Add greedy option to ScheduledPollConsumer


Add support to call poll() straight away again if poll() > 0.",davsclaus:1371694099:2013-06-20T10:08:19.834+0000:1371694099:2013-06-20T10:08:19.834+0000:Duplicate of CAMEL-6465
0,CAMEL-6467,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Gérald Quintana,0,2,2013-06-19 18:47:25+00:00,2013-07-12 10:07:08+00:00,Introduce a Camel component to produce messages based on Mustache templates (http://mustache.github.io/),davsclaus:1371692458:2013-06-20T09:40:58.782+0000:1371692458:2013-06-20T09:40:58.782+0000:Thanks for your contribution. I have applied the patch into the code base and added the docs as well. Thanks a lot for the wiki docs. This was much appreciated.
0,CAMEL-6466,Improvement,Minor,2.11.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Nathan Jensen,0,4,2013-06-19 15:27:41+00:00,2013-09-05 12:09:50+00:00,"Our project uses a custom log formatter of type org.apache.camel.component.log.LogFormatter, the only difference is we have changed the defaults from camel's standard defaults.  Unfortunately, by registering a custom formatter we can no longer have a route specifically diverge from the system wide formatter for special cases.


For example, the following works when we don't have a custom formatter but fails when do have a custom formatter:
<touri=""log:pluginName?level=ERROR&showBody=false&showCaughtException=true&showStackTrace=true""/>


It fails with a FailedToCreateRouteException with the message ""There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{showBody=false, showCaughtException=true, showStackTrace=true}

]"".


The root of the problem is that the logic in LogComponent.createEndpoint() only sets the URI parameters on the localFormatter if there is no custom formatter already registered, otherwise it tries to set the parameters on the endpoint itself and not the formatter.


It would be nice if the log route URIs were able to override parameters on the custom formatter for routes that need special cases.","devendra0008@yahoo.com:1377623713:2013-08-28T01:15:13.277+0000:1377623713:2013-08-28T01:15:13.277+0000:hey mate, can you pls send me the custom formatter / test case as that would help me quickly replicating the issue and coming up with a test case.

ndjensen:1377860288:2013-08-30T18:58:08.463+0000:1377860941:2013-08-30T19:09:01.180+0000:Sure, it's just the standard formatter with a few properties set differently.

{code}
<bean id=""defaultLogFormatter"" class=""org.apache.camel.component.log.LogFormatter"">
        <property name=""maxChars"" value=""0"" />
        <property name=""showBody"" value=""false"" />
        <property name=""showCaughtException"" value=""true"" />
        <property name=""showStackTrace"" value=""true"" />
</bean>
{code}

To work around this I had to define the log component with that formatter, and then define a separate component with a separate formatter.

{code}
<bean id=""log"" class=""org.apache.camel.component.log.LogComponent"">
        <property name=""exchangeFormatter"" ref=""defaultLogFormatter"" />        
</bean>
    
<!--  for those special times when you really want to see the content of the message -->
<bean id=""showBodyLogFormatter"" class=""org.apache.camel.component.log.LogFormatter"">
        <property name=""maxChars"" value=""0"" />        
        <property name=""showCaughtException"" value=""true"" />
        <property name=""showStackTrace"" value=""true"" />
</bean>
<bean id=""log-showbody"" class=""org.apache.camel.component.log.LogComponent"">
        <property name=""exchangeFormatter"" ref=""showBodyLogFormatter"" />        
</bean>
{code}

So then to work around this issue where I want to show the body I'd have
{code}<to uri=""log-showbody:something?level=ERROR"" />{code}
but if this ticket was completed I'd be able to have only one log component and show the body with
{code}<to uri=""log:something?level=ERROR&showBody=true"" />{code}
ndjensen:1377861414:2013-08-30T19:16:54.309+0000:1377861414:2013-08-30T19:16:54.309+0000:Edited the comment above to be more descriptive.
davsclaus:1377922011:2013-08-31T12:06:51.067+0000:1377922011:2013-08-31T12:06:51.067+0000:Yeah this is a good idea. You can now configure options to custom log formatter in the endpoint uri. Though you should define the logFormatter as prototype scoped so its not a singleton instance in use.

I added some docs about this at the bottom of:
https://cwiki.apache.org/confluence/display/CAMEL/Log
raulvk:1378354190:2013-09-05T12:09:50.141+0000:1378354190:2013-09-05T12:09:50.141+0000:Hi,

Making the log formatter mutable is okay if you use the ""convention over configuration path"", i.e. you define the logFormatter in the Spring registry and mark it with scope=prototype – as Spring hands out a new instance every time it's requested.

But take into account that the logFormatter can also be injected into the LogComponent as a standard bean property, and in this case it needs to be immutable as it will be shared across all log endpoints...

So perhaps we should (a) clone the LogFormatter when creating a new endpoint or (b) remove the exchangeFormatter from the component level and push it down to the endpoint level...

Regards,
Raúl."
0,CAMEL-6465,Improvement,Minor,2.10.4,"2.10.6, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.6, 2.11.1, 2.12.0",Claus Ibsen,John Liptak,0,2,2013-06-17 20:02:32+00:00,2013-06-25 07:16:18+00:00,No Desc,"jliptak:1371471133:2013-06-17T20:12:13.761+0000:1371471133:2013-06-17T20:12:13.761+0000:While doing performance testing on the JPA component, I found significant performance benefits resulted from 
adding an optional ""greedy"" flag for use in the batch subclass.  The behavior is that if messages are processed, rather than yielding, go back for more work.  For database polling work this has two advantages:
1. you can keep the polling slower so you don't skew your database monitoring with ""do you have work"".
2. you can keep your batch size smaller, allowing you to ensure that batches fit in memory.

add 
    private boolean greedy = false;
plus getters and setters
and change doRun() from
...
                            if (polledMessages == 0 && isSendEmptyMessageWhenIdle()) {
                                // send an ""empty"" exchange
                                processEmptyMessage();
                            }
...
to
...
                            if (polledMessages == 0 && isSendEmptyMessageWhenIdle()) {
                                // send an ""empty"" exchange
                                processEmptyMessage();
                            } else if(polledMessages > 0  && greedy){
                            	done = false; // loop again
                            	retryCounter = -1;
                            	LOG.trace(""Greedy polling after processing {} messages"", polledMessages);
                            }
...


davsclaus:1372115778:2013-06-25T07:16:18.673+0000:1372115778:2013-06-25T07:16:18.673+0000:Thanks for reporting and providing the pseudo code for the solution."
0,CAMEL-6464,Bug,Major,2.10.2,"2.10.5, 2.11.1, 2.12.0","
None
",Closed,Fixed,"2.10.5, 2.11.1, 2.12.0",Christian Müller,Marco Zapletal,0,2,2013-06-17 12:21:25+00:00,2013-06-21 15:32:21+00:00,"JavaMail ignores the timeout values set via the connectionTimeout property.



Within MailConfiguration::createJavaMailProperties the mail.<protocol>.timeout and mail.<protocol>.connectionTimeout parameters are set as long values
In com.sun.mail.util.PropUtil::getInt (line 141) the property is ignored since it is a long value



Changing the type of connectionTimeout from long to int would be the cleanest solution - another suggestion would be to downcast the connectionTimeout in MailConfiguration::createJavaMailProperties","muellerc:1371649429:2013-06-19T21:43:49.092+0000:1371649429:2013-06-19T21:43:49.092+0000:Marco, do you consider to provide a patch and an unit test which shows this issue?
marcozapletal:1371714585:2013-06-20T15:49:45.580+0000:1371714605:2013-06-20T15:50:05.956+0000:The problem of this issue is that setting a long property on com.sun.mail.util.SocketFetcher::getSocket has no effect. However, providing a good test for it is difficult, since the properties are set on the socket on creation and I get no handle of the socket (through the Camel mail component) after creation. 

I am happy to provide a patch, which I would ""test"" by debugging it before attaching it here. Actually, there are two ways to patch it and both are quite simple: (a) changing the type of connectionTimeout from long to int or (b) downcast the long to an int before setting the mail.<protocol>.timeout value. I would opt for (a) but this may break the API - so I would appreciate your opinion on this before providing the patch.
muellerc:1371727476:2013-06-20T19:24:36.747+0000:1371727476:2013-06-20T19:24:36.747+0000:Thanks Marco for reporting this issue. I understood it's hard/impossible to unit test.

I'm also +1 to change the connectionTimeout type from long to int. It's theoretically not backwards compatible, but only if somebody did something like this:
{code}
mailConfiguration.setConnectionTimeout(30000L);
{code}

I think most of the user configure it with the uri or by using
{code}
mailConfiguration.setConnectionTimeout(30000);
{code}
which is backwards compatible.

I will go ahead and and do the proposed fixed in a few minutes. It would be great if you could verify it with the latest SNAPSHOT versions (2.10.x, 2.11.x, 2.12.x). It should be available tomorrow.
marcozapletal:1371799941:2013-06-21T15:32:21.263+0000:1371799941:2013-06-21T15:32:21.263+0000:I can verify that 2.11.1-SNAPSHOT fixes this issue. Thank you Christian for the quick fix."
0,CAMEL-6463,Improvement,Minor,2.9.2,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Daniel Cook,0,2,2013-06-17 11:21:14+00:00,2013-07-23 07:20:41+00:00,"We use camel with Java DSL and a lot of spring dependency injection, we context scan to find the Route Builders.


We have an intermittent problem where camel cannot start due to a null reference being thrown by a route.  Example code (for illustrative purposes) is:


public class MyRouteBuilder extends RouteBuilder {


@Autowired
private MyService myService;


@Override
public void configure() throws Exception {
    from(ENDPOINT)
    .process(myService)
}
}


In the example above occassionally there is a .process(NULL) reference error thrown at runtime; usually only on quick machines.  I stress this is not a problem with our Spring Dependency injection config.


After looking at the camel code, including on master, the problem arrises because the AbstractCamelContextFactoryBean (which the Spring CamelContextFactoryBean extends) installs the routes (calling the route builder's configure() method) into the context in the afterPropertiesSet() method.  There is no guarantee that spring will have initialised the service as the Spring Camel Context does not depend on the bean.  The routes should be installed when spring indicates everything has been initialised, a ContextRefreshed event.


The workaround is not to autowire services used in routes but 'new' them.","daniel.cook:1371688925:2013-06-20T08:42:05.882+0000:1371688925:2013-06-20T08:42:05.882+0000:I resolved this issue, unfortunately the source code is on a work machine and attaching is an issue.  Summary is as follows:

In AbstractCamelContextFactoryBean move initRouteRefs() down to installRoutes() into a separate method called setupRoutes() and make protected.
In SpringCamelContext add a private boolean member variable routesInstalled set to false initially, provide getter and setter.
In CamelContextFactoyBean in the onApplicationEvent() method add the following code after the call to getContext(false):
if (context != null) {
    if (!context.getRoutesInstalled() && event instanceof ContextRefreshedEvent) {
        context.setRoutesInstalled(true);
        try {
            setupRoutes();
        } catch (Exception e) {
            throw WrapRuntimeCamelException(e);
        }
    }
}

davsclaus:1374535230:2013-07-23T07:20:30.834+0000:1374535230:2013-07-23T07:20:30.834+0000:Thanks for reporting and providing a solution.

This has been introduced from Camel 2.12 onwards, as we want to leave the existing releases with current behavior."
0,CAMEL-6462,Wish,Major,None,None,"
None
",Resolved,Invalid,None,Claus Ibsen,Thomas,0,2,2013-06-17 07:56:27+00:00,2013-06-17 08:49:16+00:00,"We need to run camel inside a clustered environment (JBoss 7.x or Wildfly EAP 6.x) with some major challenges:



there are many cron triggered routes using quartz, which should work load balanced (means: a route should work on one note this time and on the other node next time. A job inside a route should not be clustered)
some servlet endpoints, which need be be called load balanced
route manipulation through user interaction during runtime
2 nodes for failover and work balancing



My approach:
Quartz can be clustered, this should be no problem, isnt' it?
For distributed work on both nodes camel context should be active an both nodes with working routes. In this way servlet endpints should be active and accessible on both nodes, aren't they? 
For modifying camel context through GUI (web) I would write a singleton bean which has access to HA-JNDI and iterate over all (in this case two) camel contexts. 


Would this approach work? Do I miss some point? Exists other approaches betting fitting to this problem?


Thank you for your help.","davsclaus:1371430138:2013-06-17T08:48:58.315+0000:1371430138:2013-06-17T08:48:58.315+0000:Hi

Please use the forum or mailing list for this kind of questions.

See these pages for how to get help etc
http://camel.apache.org/support
http://camel.apache.org/discussion-forums.html
http://camel.apache.org/mailing-lists.html
"
0,CAMEL-6461,Bug,Major,2.10.4,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,2,2013-06-17 07:28:53+00:00,2013-07-22 15:32:38+00:00,"See
http://camel.465427.n5.nabble.com/In-came-quartz-route-after-bundle-update-jobs-are-not-triggred-tp5734196.html


In these situations we should use job.name to name the job unique so when you change the endpoint uri and redeploy the apps/bundles, then camel-quartz can find the old job in the quartz persistent store.


There may be logic needed to lookup using job.name as the unique name in these situations, and then allow endpoint uri options to change over time, such as the cron trigger etc. Which should be adjusted accordingly as well.","saltnlight5:1374240828:2013-07-19T21:33:48.885+0000:1374261912:2013-07-20T03:25:12.135+0000:Hello Claus,

I can confirm this problem. Further more, this problem only occur if we enabled Quartz clustering. For non-cluster config, the quartz endpoint will remove the job data upon restart.

I also tried by given job.name unique name, but still same problem.

I would propose to look up the endpoint by trigerName and avoid to store the endpointUri into the jobDetail dataMap to avoid this kind of mismatched problem.
saltnlight5:1374270659:2013-07-20T05:50:59.813+0000:1374270659:2013-07-20T05:50:59.813+0000:I have a patch (git diff) that changed the lookup of endpoint by trigger name and group. This is done in CamelJob.java

Also I have to change QuartzComponent.java on how to handle existing trigger. It didn't set the correct job name/group before. So the patch will do that properly.
saltnlight5:1374300243:2013-07-20T14:04:03.346+0000:1374300243:2013-07-20T14:04:03.346+0000:I noticed my patch has cause this test to fail: QuartzCronRouteWithSmallCacheTest

I am not familiar with the endpoint caching. Would anyone know how exactly does the endpoints are removed and should be recreated when caching is full? What methods are called on QuartzEndpoint when this happens?
 
saltnlight5:1374313942:2013-07-20T17:52:22.672+0000:1374313942:2013-07-20T17:52:22.672+0000:Okay, I see my own mistake in my patch now (I retrieved the wrong group name during lookup.), so I have uploaded second patch: CAMEL-6461-v2.path

This time all tests in camel-quartz passed.
davsclaus:1374478358:2013-07-22T15:32:38.532+0000:1374478358:2013-07-22T15:32:38.532+0000:Thanks for the patch."
0,CAMEL-6460,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,6,3,2013-06-16 12:42:43+00:00,2015-08-25 23:19:34+00:00,"Today camel-jetty and camel-servlet requires camel-http, which has dependency on http client 3.x. We should create a camel-http-core which the shared code, and then let camel-http be the http client component only. And then allow camel-servlet and camel-jetty to dep on camel-http-core and thus not bring in http client 3.1 anymore.


See also
http://camel.465427.n5.nabble.com/camel-jetty-dependency-on-httpclient-3-tp5734180.html","davsclaus:1399329688:2014-05-06T06:41:28.335+0000:1399329688:2014-05-06T06:41:28.335+0000:We keen 2.x stable as-is, and for 3.0 we can work on this.
davsclaus:1418966129:2014-12-19T13:15:29.122+0000:1418966129:2014-12-19T13:15:29.122+0000:Christian Schneider is working on jetty9 support and may get working on this to have a camel-http-core that has no 3rd party dependency which we can use in many of the http components. 
davsclaus:1437612269:2015-07-23T08:44:29.665+0000:1437612269:2015-07-23T08:44:29.665+0000:There are fairly many code changes to archive this, but its mostly internal facing. I almost got all the bits done.


davsclaus:1437627565:2015-07-23T12:59:25.006+0000:1437627565:2015-07-23T12:59:25.006+0000:Phew there was a lot of work to get this done. 

I put the common code in a separate package to avoid split package problems and whatnot.
ndjensen:1440515974:2015-08-25T23:19:34.355+0000:1440515974:2015-08-25T23:19:34.355+0000:Thanks for working this!"
0,CAMEL-6459,Bug,Major,2.10.4,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Hauke Rabe,0,2,2013-06-14 11:54:46+00:00,2013-07-23 07:19:38+00:00,"Source


The initialization of the ReplyManager is triggerd by the first processInOut method call at the JmsProducer.


The concrete instance of the ReplyManager creates on startup an AbstractMessageListenerContainer. The concrete listener container is generally a DefaultMessageListenerContainer which starts a new AsyncMessageListenerInvoker Thread. 


OSGI Scenario


In an osgi envrironment this AsyncMessageListenerInvoker Thread has a class loader reference to the bundle who is triggerd by the first processInOut method call at the JmsProducer.


Let the calling bundle (A) be another bundle as bundle (B) which contains the JmsProducer the AsyncMessageListenerInvoker Thread holds a class loader reference to bundle (A).


Scenario:



Bundle (A) calls a java service of Bundle (B)
Bundle (B) sends a jms message
Bundle (B) receives a response of the jms message
Bundle (B) returns the java service call to Bundle (A)



Problem


At this point everything is alright but when Bundle (A) is undeployed and another Bundle (C) calls a java service of Bundle (B) the AsyncMessageListenerInvoker Thread has a class loader problem.


StackTrace


BundleImpl.loadClass(String) line: 926
BundleClassLoader.findClass(String) line: 176
BundleClassLoader.loadClass(String, boolean) line: 194
BundleClassLoader(ClassLoader).loadClass(String) line: 248
Class<T>.forName0(String, boolean, ClassLoader) line: not available [native method]
Class<T>.forName(String, boolean, ClassLoader) line: 247
ClassLoadingAwareObjectInputStream.load(String, ClassLoader...) line: 77
ClassLoadingAwareObjectInputStream.resolveClass(ObjectStreamClass) line: 46
ClassLoadingAwareObjectInputStream(ObjectInputStream).readNonProxyDesc(boolean) line: 1574
ClassLoadingAwareObjectInputStream(ObjectInputStream).readClassDesc(boolean) line: 1495
ClassLoadingAwareObjectInputStream(ObjectInputStream).readOrdinaryObject(boolean) line: 1731
ClassLoadingAwareObjectInputStream(ObjectInputStream).readObject0(boolean) line: 1328
ClassLoadingAwareObjectInputStream(ObjectInputStream).readObject() line: 350
ActiveMQObjectMessage.getObject() line: 185
ActiveMQObjectMessage.toString() line: 226
MessageFormatter.safeObjectAppend(StringBuffer, Object) line: 304
MessageFormatter.deeplyAppendParameter(StringBuffer, Object, Map) line: 276
MessageFormatter.arrayFormat(String, Object[]) line: 230
MessageFormatter.format(String, Object, Object) line: 152
Slf4jLogger.debug(String, Object, Object) line: 300
PersistentQueueReplyManager(ReplyManagerSupport).onMessage(Message) line: 110
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).doInvokeListener(MessageListener, Message) line: 560
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).invokeListener(Session, Message) line: 498
ExclusivePersistentQueueMessageListenerContainer(AbstractMessageListenerContainer).doExecuteListener(Session, Message) line: 467
ExclusivePersistentQueueMessageListenerContainer(AbstractPollingMessageListenerContainer).doReceiveAndExecute(Object, Session, MessageConsumer, TransactionStatus) line: 325
ExclusivePersistentQueueMessageListenerContainer(AbstractPollingMessageListenerContainer).receiveAndExecute(Object, Session, MessageConsumer) line: 263
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener() line: 1058
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop() line: 1050
DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run() line: 947
Thread.run() line: 662 


JMS Error


<suppressedExceptions class=""java.util.Collections$UnmodifiableRandomAccessList"" resolves-to=""java.util.Collections$UnmodifiableList""><c class=""list""/><list reference=""../c""/></suppressedExceptions><undeclaredThrowable class=""org.apache.camel.InvalidPayloadException""><detailMessage>No body available of type: TransactionServiceResponse but has value: [B@7b9554f9 of type: byte[] on: Message: <?xml version='1.0' encoding='UTF-8'?><org.apache.camel.component.bean.BeanInvocation>&",davsclaus:1374535178:2013-07-23T07:19:38.173+0000:1374535178:2013-07-23T07:19:38.173+0000:Thanks for reporting.
0,CAMEL-6458,Improvement,Minor,None,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Gregor Zurowski,Claus Ibsen,0,5,2013-06-14 11:19:31+00:00,2014-04-04 13:23:49+00:00,"See
http://camel.465427.n5.nabble.com/File-Component-Default-rename-behaviour-tp5734024p5734026.html


We have a fallback that goes back to copy if rename fails. But its slower etc.


So if you need you are renaming between different file systems / OSes / LAN etc it may be better to tell Camel to use a copy strategy for rename.","davsclaus:1376300955:2013-08-12T17:49:15.780+0000:1376300955:2013-08-12T17:49:15.780+0000:Contributions is welcome
matriv:1380631889:2013-10-01T20:51:29.559+0000:1380631889:2013-10-01T20:51:29.559+0000:Working on a patch.
githubbot:1396090300:2014-03-29T18:51:40.125+0000:1396090300:2014-03-29T18:51:40.125+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/124

    CAMEL-6458: Add renameUsingCopy option to File Component

    The new renameUsingCopy option controls whether rename operations are
    performed using a copy and delete strategy. This is primarily used in
    environments where the regular rename operation is unreliable (e.g.
    across different file systems and networks).
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-6458

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/124.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #124
    
----
commit 0f3539682b54900fdcfb815fbc717659d3a6d2a2
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-29T18:33:04Z

    CAMEL-6458: Add renameUsingCopy option to File Component
    
    The new renameUsingCopy option controls whether rename operations are
    performed using a copy and delete strategy. This is primarily used in
    environments where the regular rename operation is unreliable (e.g.
    across different file systems and networks).
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit daed640eb32c40a291482fb2a1b5015aeffb07f6
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-29T18:48:10Z

    CAMEL-6458: Add tests for renameUsingCopy option
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

davsclaus:1396482988:2014-04-03T07:56:28.686+0000:1396482988:2014-04-03T07:56:28.686+0000:Thanks for the patch. Do you mind updating the file2 component page with this new option?
http://camel.apache.org/file2
githubbot:1396486181:2014-04-03T08:49:41.362+0000:1396486181:2014-04-03T08:49:41.362+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/124

gzurowski:1396547699:2014-04-04T01:54:59.089+0000:1396547699:2014-04-04T01:54:59.089+0000:Reopening issue: documentation needs to get updated.
gzurowski:1396589029:2014-04-04T13:23:49.141+0000:1396589029:2014-04-04T13:23:49.141+0000:Added description of renameUsingCopy option to File component documentation: https://camel.apache.org/file2.html."
0,CAMEL-6457,Bug,Major,2.10.0,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Pradeep Narayan,0,2,2013-06-14 07:21:07+00:00,2013-07-22 15:33:18+00:00,"In came-quartz route after bundle update jobs are not triggred.
I created a small example for camel-quartz with persistence(Quatz mysql database). My blueprint.xml looks like


<route id=""CamelQuartzExampleRoute"">
      <from uri=""CamelQuartzJob"" />
      <setBody>
          <method ref=""helloBean"" method=""hello""/>
      </setBody>
      <log message=""The message contains ${body}""/>
      <to uri=""mock:result""/>
    </route>


In the above route I used property placeholder CamelQuartzJob for quartz uri and its value is configured from a configuration file. I deployed this example in jboss fuse and it worked as expected means the job is stored in quartz database and triggered for every 30 seconds. The actual issue is
1.    I changed the quartz uri value configured in configuration file from CamelQuartzJob= quartz://DeleteRecord/DeleteRecordTimer?cron=0/30+?&stateful=true to CamelQuartzJob= quartz://DeleteRecord/DeleteRecordTimer?cron=0/60+?&stateful=true and then did a bundle update for that example project.
2.    The bundle started successfully but the scheduled job is not started for every 60 seconds. From fuse logs  I could see


12:13:00,014 | WARN  | heduler_Worker-1 | CamelJob                         | 261 - org.apache.camel.camel-quartz - 2.10.0.redhat-60024 | Cannot find existing QuartzEndpoint with uri: quartz://DeleteRecord/DeleteRecordTimer?cron=0%2F30+%3F&stateful=true. Creating new endpoint instance.


I believe in camel-quartz we have to use route id or the endpoint id in the quartz database instead of the URI. But not sure about the root cause. Please guide me?","saltnlight5:1374386658:2013-07-21T14:04:18.979+0000:1374386658:2013-07-21T14:04:18.979+0000:This is duplicate of CAMEL-6461, which now has a patch for."
0,CAMEL-6456,Improvement,Minor,"2.10.4, 2.11.0",None,"
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-06-14 06:16:41+00:00,2013-06-14 06:25:57+00:00,"See nabble
http://camel.465427.n5.nabble.com/Question-about-setDelimiter-and-CSVDataFormat-tp5734185.html


To make it consistent and easier to set delimiter to be used for both marshal and unmarshal.",
0,CAMEL-6455,Bug,Minor,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-06-13 19:48:28+00:00,2013-06-20 15:58:01+00:00,"Calling a bean from a route like



                from(""direct:start"")
                    .to(""bean:myBean?method=doSomething()"")
                    .to(""mock:result"");




Notice the method has () as parameters. Which would refer to a method with no-args. 


But if the method has 1 arg like



        public static void doSomething(Exchange exchange) {
            exchange.getIn().setHeader(""foo"", ""bar"");
        }




We get this error about some type converter probem



Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.Exchange with value 




We should have a better error message.


If removing () then Camel can call the method as it can do parameter matching.",
0,CAMEL-6454,Bug,Major,2.11.0,2.12.0,"
None
",Resolved,Not A Problem,2.12.0,Claus Ibsen,Patrick Wiederkehr,0,3,2013-06-13 12:49:44+00:00,2015-03-19 22:49:44+00:00,"Tried to get a route running with a + in the password option.


+ gets interpreted as [space] always get authentication errors.


013-06-13 14:46:15,675 [128.98/WIRK/out] TRACE SftpOperations                 - Session isn't connected, trying to recreate and connect.
2013-06-13 14:46:15,675 [128.98/WIRK/out] DEBUG SftpOperations                 - Using StrickHostKeyChecking: no
2013-06-13 14:46:15,675 [128.98/WIRK/out] TRACE SftpOperations                 - Connecting use connectTimeout: 10000 ...
2013-06-13 14:46:15,675 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Connecting to XXX port 22
2013-06-13 14:46:15,705 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Connection established
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Remote version string: SSH-2.0-OpenSSH_4.2
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Local version string: SSH-2.0-JSCH-0.1.49
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> CheckCiphers: aes256-ctr,aes192-ctr,aes128-ctr,aes256-cbc,aes192-cbc,aes128-cbc,3des-ctr,arcfour,arcfour128,arcfour256
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> aes256-ctr is not available.
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> aes192-ctr is not available.
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> aes256-cbc is not available.
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> aes192-cbc is not available.
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> arcfour256 is not available.
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> CheckKexes: diffie-hellman-group14-sha1
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> diffie-hellman-group14-sha1 is not available.
2013-06-13 14:46:15,735 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_KEXINIT sent
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_KEXINIT received
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha1,diffie-hellman-group1-sha1
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: ssh-rsa,ssh-dss
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: aes128-cbc,3des-cbc,blowfish-cbc,cast128-cbc,arcfour128,arcfour256,arcfour,aes192-cbc,aes256-cbc,rijndael-cbc@lysator.liu.se,aes128-ctr,aes192-ctr,aes256-ctr
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: hmac-md5,hmac-sha1,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: hmac-md5,hmac-sha1,hmac-ripemd160,hmac-ripemd160@openssh.com,hmac-sha1-96,hmac-md5-96
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: none,zlib@openssh.com
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: none,zlib@openssh.com
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: 
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: server: 
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: diffie-hellman-group1-sha1,diffie-hellman-group-exchange-sha1
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: ssh-rsa,ssh-dss
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: aes128-ctr,aes128-cbc,3des-ctr,3des-cbc,blowfish-cbc
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: hmac-md5,hmac-sha1,hmac-sha2-256,hmac-sha1-96,hmac-md5-96
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: none
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: none
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: 
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> kex: client: 
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH > kex: server>client aes128-ctr hmac-md5 none
2013-06-13 14:46:15,765 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH > kex: client>server aes128-ctr hmac-md5 none
2013-06-13 14:46:15,775 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_KEXDH_INIT sent
2013-06-13 14:46:15,775 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> expecting SSH_MSG_KEXDH_REPLY
2013-06-13 14:46:15,805 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> ssh_rsa_verify: signature true
2013-06-13 14:46:15,805 [128.98/WIRK/out] WARN  SftpOperations                 - JSCH -> Permanently added 'XXX' (RSA) to the list of known hosts.
2013-06-13 14:46:15,805 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_NEWKEYS sent
2013-06-13 14:46:15,805 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_NEWKEYS received
2013-06-13 14:46:15,805 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_SERVICE_REQUEST sent
2013-06-13 14:46:15,825 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> SSH_MSG_SERVICE_ACCEPT received
2013-06-13 14:46:15,865 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Authentications that can continue: publickey,keyboard-interactive,password
2013-06-13 14:46:15,865 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Next authentication method: publickey
2013-06-13 14:46:15,865 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Authentications that can continue: keyboard-interactive,password
2013-06-13 14:46:15,865 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Next authentication method: keyboard-interactive
2013-06-13 14:46:16,085 [/src/reschedule] DEBUG FileConsumer                   - Took 0.000 seconds to poll: src\reschedule
2013-06-13 14:46:16,595 [/src/reschedule] DEBUG FileConsumer                   - Took 0.000 seconds to poll: src\reschedule
2013-06-13 14:46:16,886 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Authentications that can continue: password
2013-06-13 14:46:16,886 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Next authentication method: password
2013-06-13 14:46:16,886 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Login trials exceeds 6
2013-06-13 14:46:16,886 [128.98/WIRK/out] INFO  SftpOperations                 - JSCH -> Disconnecting from XXX port 22
2013-06-13 14:46:16,886 [128.98/WIRK/out] TRACE SftpOperations                 - Cannot connect due: Cannot connect to sftp://blckche@XXX:22
2013-06-13 14:46:16,886 [128.98/WIRK/out] WARN  ilePollingConsumerPollStrategy - Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://blckche@XXX:22
2013-06-13 14:46:16,896 [128.98/WIRK/out] DEBUG DeadLetterChannel              - Failed delivery for (MessageId: ID-loyalty4-win7-53562-1371127559742-0-1 on ExchangeId: ID-loyalty4-win7-53562-1371127559742-0-2). On delivery attempt: 0 caught: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot connect to sftp://blckche@XXX:22
2013-06-13 14:46:16,896 [128.98/WIRK/out] DEBUG SendProcessor                  - >>>> Endpoint[direct://error] Exchange[Message: Consumer Consumer[sftp://blckche@XXX/WIRK/out?binary=true&consumer.bridgeErrorHandler=true&delay=3600000&include=.*%5C.DAT&noop=true&password=******&readLock=rename&separator=UNIX&stepwise=false&throwExceptionOnConnectFailed=true] failed polling endpoint: Endpoint[sftp://blckche@XXX/WIRK/out?binary=true&consumer.bridgeErrorHandler=true&delay=3600000&include=.*%5C.DAT&noop=true&password=******&readLock=rename&separator=UNIX&stepwise=false&throwExceptionOnConnectFailed=true]. Will try again at next poll]
2013-06-13 14:46:16,896 [128.98/WIRK/out] ERROR route2                         - Unrecoverable Error occured
2013-06-13 14:46:16,896 [128.98/WIRK/out] DEBUG SendProcessor                  - >>>> Endpoint[log://ch.loyalty.retailo.gcactivator?level=ERROR&multiline=true&showAll=true] Exchange[Message: Consumer Consumer[sftp://blckche@XXX/WIRK/out?binary=true&consumer.bridgeErrorHandler=true&delay=3600000&include=.*%5C.DAT&noop=true&password=******&readLock=rename&separator=UNIX&stepwise=false&throwExceptionOnConnectFailed=true] failed polling endpoint: Endpoint[sftp://blckche@XXX/WIRK/out?binary=true&consumer.bridgeErrorHandler=true&delay=3600000&include=.*%5C.DAT&noop=true&password=******&readLock=rename&separator=UNIX&stepwise=false&throwExceptionOnConnectFailed=true]. Will try again at next poll]
2013-06-13 14:46:16,906 [128.98/WIRK/out] ERROR gcactivator                    - Exchange[
, Id:ID-loyalty4-win7-53562-1371127559742-0-2
, ExchangePattern:InOnly
, Properties:

{CamelToEndpoint=log://ch.loyalty.retailo.gcactivator?level=ERROR&multiline=true&showAll=true, CamelCreatedTimestamp=Thu Jun 13 14:46:16 CEST 2013, CamelFailureRouteId=route1, CamelExceptionCaught=org.apache.camel.component.file.GenericFileOperationFailedException: Cannot connect to sftp://blckche@XXX:22}

, Headers:{}
, BodyType:String
, Body:Consumer Consumer[sftp://blckche@XXX/WIRK/out?binary=true&consumer.bridgeErrorHandler=true&delay=3600000&include=.*%5C.DAT&noop=true&password=******&readLock=rename&separator=UNIX&stepwise=false&throwExceptionOnConnectFailed=true] failed polling endpoint: Endpoint[sftp://blckche@XXX/WIRK/out?binary=true&consumer.bridgeErrorHandler=true&delay=3600000&include=.*%5C.DAT&noop=true&password=******&readLock=rename&separator=UNIX&stepwise=false&throwExceptionOnConnectFailed=true]. Will try again at next poll
, CaughtExceptionType:org.apache.camel.component.file.GenericFileOperationFailedException, CaughtExceptionMessage:Cannot connect to sftp://blckche@XXX:22, StackTrace:org.apache.camel.component.file.GenericFileOperationFailedException: Cannot connect to sftp://blckche@XXX:22
	at org.apache.camel.component.file.remote.SftpOperations.connect(SftpOperations.java:126)
	at org.apache.camel.component.file.remote.RemoteFileConsumer.connectIfNecessary(RemoteFileConsumer.java:147)
	at org.apache.camel.component.file.remote.RemoteFileConsumer.recoverableConnectIfNecessary(RemoteFileConsumer.java:138)
	at org.apache.camel.component.file.remote.RemoteFileConsumer.prePollCheck(RemoteFileConsumer.java:54)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:104)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:141)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:91)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at java.lang.Thread.run(Thread.java:662)
Caused by: com.jcraft.jsch.JSchException: Auth fail
	at com.jcraft.jsch.Session.connect(Session.java:491)
	at org.apache.camel.component.file.remote.SftpOperations.connect(SftpOperations.java:98)
	... 15 more","davsclaus:1371123107:2013-06-13T19:31:47.830+0000:1371123107:2013-06-13T19:31:47.830+0000:See this FAQ
http://camel.apache.org/how-do-i-configure-password-options-on-camel-endpoints-without-the-value-being-encoded.html
dudelidlama:1371166377:2013-06-14T07:32:57.725+0000:1371166377:2013-06-14T07:32:57.725+0000:Hi, Thanks alot! Will solve my problems hopefully. With normal URL escaping it didn't work.
I'll try this RAW(+++) then!
gary.mills@ge.com:1426776322:2015-03-19T22:45:22.055+0000:1426776322:2015-03-19T22:45:22.055+0000:Hi Claus, thanks so much! where would we be? hey I can't get this to work. i've tried each method outlined in the endpoints configuring document directed to, but hoping you can tell me what the heck I am doing wrong. Thanks again Claus!!

2015-03-19 18:30:28,548 | WARN  | Thread-24        | EventHelper                      | ?                                   ? | 139 - org.apache.cam               el.camel-core - 2.12.0.redhat-611424 | Error notifying event Started CamelContext: ftpCamelContext. This exception will be ignored.
org.apache.camel.FailedToCreateRouteException: Failed to create route route2: Route(route2)[[From[sftp://3.40.64.86:10022/fromvan/airliqui... becaus               e of Failed to resolve endpoint: sftp://3.40.64.86:10022/fromvan/airliquide/asia?username=500100471&password=RAW({{+W93j2Wa}})&consumer.delay=60s&re               adLock=changed&move=.processed&passiveMode=true&fastExistsCheck=true due to: Property with key [+W93j2Wa] not found in properties from text: sftp://               3.40.64.86:10022/fromvan/airliquide/asia?username=500100471&password=RAW({{+W93j2Wa}})&consumer.delay=60s&readLock=changed&move=.processed&passiveMo               de=true&fastExistsCheck=true

---------
my properties file:
EFTPUSRAirLiquide = 500100471
EFTPPWDAirLiquide = +W93j2Wa

---------
public void configure() throws Exception {

        String externalFtpAirLiquideAsia = """" + property.get(""EFTPPROTOCOL"") + ""://"" + property.get(""EFTPSVRAirLiquideAsia"") + ""?username="" + property.get(""EFTPUSRAirLiquide"")
                + ""&password=RAW({{"" + property.get(""EFTPPWDAirLiquide"") + ""}})"" + ""&consumer.delay="" + property.get(""EFTPPOLLFREQUENCY"") + ""&readLock="" + property.get(""EFTPREADLOCK"")
                + ""&move=.processed&passiveMode=true&fastExistsCheck=true"";

        from(externalFtpAirLiquideAsia)
        .choice()
                .when(body().isEqualTo(null))
                        .bean(alert, ""noFilePulled"")
                .otherwise()
                        .bean(alert, ""filePulled"")
                        .setHeader(""archiveFileName"", simple(""header.CamelFileName""))
                .to(internalFtpAirLiquideAsia);

gary.mills@ge.com:1426776584:2015-03-19T22:49:44.891+0000:1426776584:2015-03-19T22:49:44.891+0000:if you do an edit you see the squigglies {{"
0,CAMEL-6453,Improvement,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Willem Jiang,0,2,2013-06-13 07:19:01+00:00,2013-06-14 07:35:20+00:00,It could be useful for the customer to access the SSL Authentication information in the camel route by looking up the SSLSession instance from the message header.,"njiang:1371080522:2013-06-13T07:42:02.915+0000:1371080522:2013-06-13T07:42:02.915+0000:Now, you could use the message header ""CamelNettySSLSession"" to look up the SSLSession instance just like this
{code}
SSLSession session = exchange.getIn().getHeader(""CamelNettySSLSession"", SSLSession.class);
{code}
davsclaus:1371166513:2013-06-14T07:35:13.859+0000:1371166513:2013-06-14T07:35:13.859+0000:I added this to the docs of camel-netty."
0,CAMEL-6452,Bug,Major,2.10.4,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Sanjay Deshmukh,0,3,2013-06-13 04:29:32+00:00,2013-07-17 11:41:53+00:00,"FileUtil.getDefaultTempDir() registers a JVM shutdown hook to delete the temporary directory it creates. We are using camel in a web application in Tomcat that gets dynamically reloaded as updates are available, so the JVM is normally never shut down. This is causing 'camel-tmp-*' directories to linger in $CATALINA_HOME/temp, and - more importantly - classloader leaks, which are a major problem for us.


If the thread that gets registered as the shutdown hook were stored in a class variable, I could unregister it when the application is being unloaded.","sanjayd:1371131853:2013-06-13T21:57:33.733+0000:1371131853:2013-06-13T21:57:33.733+0000:Patch to fix issue
njiang:1371141356:2013-06-14T00:35:56.978+0000:1371141356:2013-06-14T00:35:56.978+0000:Hi Sanjay,

I just have a quick look of the path, it looks like you add a cleanup to the FileUtil, but I didn't found the place where you call it. 
Can you give us more detail about unload the application?

Willem
sanjayd:1371148459:2013-06-14T02:34:19.008+0000:1371148459:2013-06-14T02:34:19.008+0000:Hey Willem,

I had planned on leaving it up to the application to call this method when it is unloaded from the app container. I suppose it could also be called from the shutdown routine of a CamelContext, but then that assumes that the app only has one context.

The problem I'm running into is basically that any webapp that runs in an app container and expects to be periodically reloaded will register a new shutdown hook in the same JVM each time the app is loaded. Unless these hooks are removed when each instance is unloaded, all the classloaders will remain in memory and the app container will eventually run out of PermGen space.

Adding this optional cleanup method will enable apps that run in an app container to remove their shutdown hook on their own so their classloaders can be garbage collected, and the app container can continue on. Those apps who expect the JVM to terminate when they are finished executing won't have to call it, and they will continue working as they do now.

Thanks!

Sanjay
davsclaus:1371162156:2013-06-14T06:22:36.411+0000:1371162156:2013-06-14T06:22:36.411+0000:First thanks for reporting this issue with the leak.

I think a better approach is to add a UtilService class in the util package. This class should extends ServiceSupport from the support package. Then we register this as a service to DefaultCamelContext in its doStartCamel() method.

Then we have callbacks for doStart / doStop in the UtilService class where we can do out needed logic, when Camel is starting / stopping.

This also means the default temp dir logic should be *per CamelContext* instead of *per JVM*. This also works much better in WAR containers / OSGi containers et all; where people can hot and redeploy apps. Having JVM hooks and static classes that are initialized with a == null check is (becoming) a bad practice IMHO.


davsclaus:1371163813:2013-06-14T06:50:13.802+0000:1371163813:2013-06-14T06:50:13.802+0000:Well even better this FileUtil temp dir logic is only used when stream caching is enabled. We should ideally IMHO have StreamCaching setup its temp dir it want to use, and cleanup it as well. And remove the logic from the FileUtil so its not required to delete using a JVM shutdown hook.

Then we should also make configuring this on stream caching easier and more ""Camelish"" as today you set some properties on CamelContext. Instead of using a <streamCache tempDir=""xxx"" threshold=""64mb"" xxx/> or something. And then we should expose this in JMX so people can see StreamCacheService in JMX and how its configured. And maybe even reconfigured it at runtime etc.
sanjayd:1371284678:2013-06-15T16:24:38.977+0000:1371284678:2013-06-15T16:24:38.977+0000:Awesome - that gives me a lot more context and definitely sounds like the way to go. I like the per-context or per-streamcache temp dir that gets removed when the context or cache shuts down.

In the meantime, in case anyone else runs into this issue, here's the workaround (i.e. hack) that I added to the cleanup routine of our project:

{code}
    public void cleanShutdownHook() throws Exception {
        Class<?> klass = Class.forName(""java.lang.ApplicationShutdownHooks"");
        Field field = klass.getDeclaredField(""hooks"");
        field.setAccessible(true);

        @SuppressWarnings(""unchecked"")
        Map<Thread, Thread> hooks = (Map<Thread, Thread>) field.get(null);
        Thread target = null;
        for(Thread thread: hooks.values()) {
            if (thread.getClass().getName().equals(""org.apache.camel.util.FileUtil$1"")) {
                target = thread;
                break;
            }
        }

        if (target != null) {
            Runtime.getRuntime().removeShutdownHook(target);
        }
    }
{code}
davsclaus:1374032513:2013-07-17T11:41:53.131+0000:1374032513:2013-07-17T11:41:53.131+0000:Thanks for the patch.

There is a static shutdown method on FileUtil you can use to cleanup this in 2.11 and 2.10 releases.

For Camel 2.12 we introduce StreamCachingStrategy that handles this out of the box, and avoid using static stuff etc. So it becomes per CamelContext instead."
0,CAMEL-6451,Improvement,Minor,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-06-12 15:30:20+00:00,2013-06-13 12:08:41+00:00,"From Scotts talk at CamelOne a question from the audience. About using 


seda:foo?multipleConsumers=true
seda:foo


eg we can only support on option per queue name. We do this validation today for queue size etc. We should expand that to multipleConsumers option as well.",
0,CAMEL-6450,New Feature,Major,2.11.0,Future,"
None
",Closed,Duplicate,Future,Christian Müller,Mayank Gupta,0,3,2013-06-12 12:27:40+00:00,2013-06-14 15:18:23+00:00,"Hi All ,


In my current project requirement , i have to bind SMSC/USSD Gateway in TRx (Transceiver) Mode , the reason behind this , SMSC/USSD Gateway needs to manage the session of ESME on single smpp port and this can accomplish only using TRx bind mode type. But i can't bind SMSC/USSD Gateway in TRx Mode using camel because camel doesn't support TRx mode . This is the general requirement for Camel SMPP component that it needs to fulfill. Please help me to provide the fix ASAP.","davsclaus:1371022472:2013-06-12T15:34:32.080+0000:1371022485:2013-06-12T15:34:45.981+0000:Please respect this community and not log tickets with critical priority. We reserve this levels for serious bugs that affects everyone.

You are asking for a functionality in a component that we do not offer today. So this is a new feature / improvement category. 

This project is community based and we love contributions so feel free to work on this functionality you need and contribute it to ASF.

You can read more here
http://camel.apache.org/contributing.html
mayank.gupta:1371082913:2013-06-13T08:21:53.227+0000:1371082913:2013-06-13T08:21:53.227+0000:Hi Claus ,

Of course i am respecting this community and it is very helpful for us . Actually previously we were using Tx and Rx separately  but now our client is asking for to use TRx mode and this is the show stopper for us. Almost 80 % of the development is completed and we can't rollback for camel smpp component . Without TRx mode can't go for the production,So Please help us to provide the fix for us ASAP.
muellerc:1371194217:2013-06-14T15:16:57.445+0000:1371194217:2013-06-14T15:16:57.445+0000:What do you mean with ""help us to provide the fix for us ASAP""? Do you already work on a fix? How do you plan to implement it?

I will gone close this issue because it duplicates [CAMEL-5963]. So, watch this issue to be up to date and let's further discuss this improvement there.

"
0,CAMEL-6449,Bug,Major,"2.10.4, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Unassigned,kiran kumar reddy,0,2,2013-06-12 06:29:17+00:00,2013-06-14 17:01:24+00:00,"we are getting the following exception when trying to use more than two netty endpoints in a single route. 


java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread. 


Sample route : 


                                             from(""netty:tcp://localhost:7000textline=true"")                               .bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7001?textline=true"")                                 .bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7002?textline=true"") 
.bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7003?textline=true"") 
.bean(DummyProcessor.class) 
.to(""netty:tcp://localhost:7004?textline=true"") 
.bean(DummyProcessor.class); 


camel version : 2.11 
netty 3.6.5


The same is working in 2.10.3 version.","kiranreddykasa:1370990609:2013-06-12T06:43:29.644+0000:1370990651:2013-06-12T06:44:11.319+0000:Test case for simulating the same.It is failing with both 2.10.4 and 2.11.0
njiang:1371198360:2013-06-14T16:26:00.122+0000:1371198360:2013-06-14T16:26:00.122+0000:Hi kiran,
As you know this issue is fixed last week. Can you check out the last camel 2.12-SNAPSHOT to verify the fix?
kiranreddykasa:1371200484:2013-06-14T17:01:24.527+0000:1371200484:2013-06-14T17:01:24.527+0000:Ya i have tested with 2.12-SNAPSHOT and it's working."
0,CAMEL-6448,Bug,Trivial,None,,"

documentation
onException
redelivery

",Closed,Fixed,None,Christian Müller,Ben Kiefer,0,2,2013-06-11 14:08:41+00:00,2013-06-11 19:52:34+00:00,"The example in the documentation on the onException page (http://camel.apache.org/exception-clause.html) shows incorrect configuration of an external redelivery policy.


It currently shows:


 <bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${myprop.max}""/>
    </bean>


     <onException>
         <!-- you can define multiple exceptions just adding more exception elements as show below -->
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>


         <!-- here we reference our redelivery policy defined above -->
         <redeliveryPolicy ref=""myRedeliveryPolicy""/>
     </onException>


But it should be:


 <bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
        <property name=""maximumRedeliveries"" value=""${myprop.max}""/>
    </bean>


     <onException redeliveryPolicyRef=""myRedeliveryPolicy"">
         <exception>com.mycompany.MyFirstException</exception>
         <exception>com.mycompany.MySecondException</exception>
         <!-- more config here -->
     </onException>",muellerc:1370951554:2013-06-11T19:52:34.174+0000:1370951554:2013-06-11T19:52:34.174+0000:Thanks for reporting Ben. I updated the web site. It should be online in a few minutes.
0,CAMEL-6447,Bug,Major,2.11.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Christian Tytgat,2,4,2013-06-11 07:22:47+00:00,2013-08-22 20:42:16+00:00,"I just upgraded from 2.10.4 to 2.11.0 and noticed that nested choice definitions started acting strangely. For example:



            .choice()
                .when(header(Exchange.EXCEPTION_CAUGHT).isNotNull())
                    // 1
                    .setBody(exceptionMessage().append(SystemUtils.LINE_SEPARATOR).append(exceptionStackTrace()))
                    .choice()
                        .when(header(HEADER_CONTROLLER_ID).isNotNull())
                            // 1a
                            .setHeader(Exchange.FILE_NAME, simple(AUDIT_CONTROLLER_FAILED_FILENAME + "".error.log""))
                            .to(ENDPOINT_AUDIT_DIR)
                        .otherwise()
                            // 1b
                            .setHeader(Exchange.FILE_NAME, simple(AUDIT_FAILED_FILENAME + "".error.log""))
                            .to(ENDPOINT_AUDIT_DIR)
                            // INSERTING .end() here solves the issue
                        .endChoice()
                    .log(LoggingLevel.WARN, ""DLQ written: ${in.header.CamelExceptionCaught}""
                .otherwise()
                    // 2
                    .log(LoggingLevel.WARN, ""DLQ written"" + MESSAGE_LOG_FORMAT)
                .end()




I have a test that is supposed to go through 1 and 1a. However it now passes through 1 and 2!
It looks like the endChoice() in 1b has no effect and the otherwise() in 2 is executed instead of 1b. Inserting and end() statement as shown seems to solve the issue, but it looks suspicious.


It's probably a regression introduced by the fix for CAMEL-5953, but I'm not 100% sure.","robinbezuijen:1376272748:2013-08-12T09:59:08.910+0000:1376272748:2013-08-12T09:59:08.910+0000:It looks like this issue was introduced in 2.10.4

The problem is that adding the end() before the endChoice() will only work for 2.10.4 and above because it will break when using 2.10.3 with the following exception:

{code}
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'test-route': Invocation of init method failed; nested exception is java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1256)
{code}



dalewking:1376979582:2013-08-20T14:19:42.475+0000:1376979582:2013-08-20T14:19:42.475+0000:I see a slightly different but probably related problem. Here is a simple route to test it:

{noformat}
    <route>
        <from uri=""timer://myTimer?period=1&amp;repeatCount=1"" />
        <setHeader headerName=""test"">
            <constant>1</constant>
        </setHeader>
        <choice>
            <when>
                <simple>${header.test} &gt; 0</simple>
                <choice>
                    <when>
                        <simple>${header.test} &gt; 5</simple>
                        <log message=""Should not get here"" />
                    </when>
                    <otherwise>
                        <log message=""Should get here"" />
                    </otherwise>
                </choice>
            </when>
            <otherwise>
                <log message=""Why do I get here???"" />
            </otherwise>
        </choice>
    </route>
{noformat}

The output is:

{noformat}
    Should get here 
    Why do I get here???
{noformat}

So it executes both otherwise clauses, which is definitely wrong. I realize that the nesting is not necessary in this simple example, but where I found it, the inner choice was within a split and could not be eliminated. The outer choice was to actually handle the case for when the split would have nothing to split.
davsclaus:1377175336:2013-08-22T20:42:16.917+0000:1377175336:2013-08-22T20:42:16.917+0000:The problem mentioned by Dale, was caused by CAMEL-6364] and only affected trunk (eg 2.12). This has been fixed now.

The endChoice has been fixed on both trunk and 2.11 branch."
0,CAMEL-6446,Improvement,Minor,"2.10.4, 2.11.0","2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Chris Geer,0,2,2013-06-10 16:32:56+00:00,2013-06-25 09:10:24+00:00,Provide the capability to marshall/unmarshall JAXB annotated objects as JSON,"davsclaus:1372122624:2013-06-25T09:10:24.965+0000:1372122624:2013-06-25T09:10:24.965+0000:Thanks for the patch.

Feel free to help with adding some docs to: http://camel.apache.org/json"
0,CAMEL-6445,Bug,Major,None,,"
None
",Closed,Fixed,None,Christian Müller,Ralf Steppacher,0,3,2013-06-10 16:17:32+00:00,2013-06-14 01:22:55+00:00,"To reproduce put the following in a route:


<camel:setHeader headerName=""header1"">
<camel:constant>1</camel:constant>
</camel:setHeader>


<camel:setHeader headerName=""header2"">
<camel:constant>2</camel:constant>
</camel:setHeader>


<camel:setHeader headerName=""header3"">
<camel:constant>3</camel:constant>
</camel:setHeader>


<camel:removeHeaders pattern=""*"" excludePattern=""header1,header2"" />


Expected behavior: ""header3"" should be gone.
Actual behavior: All headers are gone.


Specifying only one exclude pattern works. I.e. 


<camel:removeHeaders pattern=""*"" excludePattern=""header1"" />


removes headers ""header2"" and ""header3"" but leaves ""header1"".","muellerc:1370934879:2013-06-11T15:14:39.930+0000:1370934879:2013-06-11T15:14:39.930+0000:The documentation was misleading about this. I update it and will think about a fix.
At present, you should use a regular expression like this:
{code}
<removeHeaders pattern=""*"" excludePattern=""header1|header2""/>
{code}
davsclaus:1371123304:2013-06-13T19:35:04.124+0000:1371123304:2013-06-13T19:35:04.124+0000:They are all patterns and use reg exp for that. So it works as designed. And the example Christian posted is correct, eg use | for OR in reg exp.
ralfsteppacher:1371129673:2013-06-13T21:21:13.581+0000:1371129673:2013-06-13T21:21:13.581+0000:Well, if it is just a documentation bug, even better. Thanks for the clarification.
muellerc:1371144166:2013-06-14T01:22:46.407+0000:1371144166:2013-06-14T01:22:46.407+0000:I also think we should not make the Camel DSL more complicated if there is already a solution for a given problem."
0,CAMEL-6444,Improvement,Trivial,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Benjamin P. O'Day,Bart Horré,0,2,2013-06-10 14:46:01+00:00,2013-08-07 15:13:34+00:00,"When the route isn't in the same subnet as the elastic search cluster, it won't be autodiscovered. If we can pass the ip as a parameter, we would be able to connect with a TransportClient","barthorre:1370847219:2013-06-10T14:53:39.596+0000:1370847219:2013-06-10T14:53:39.596+0000:I supplied a patch but I'm not really sure how to test this. I set up an ES cluster and was able to connect and index. But that will obviously fail when you try to build it.
boday:1375859585:2013-08-07T15:13:05.318+0000:1375859585:2013-08-07T15:13:05.318+0000:started with Bart Horre's patch and also added support for an explicit port...thanks for the patch Bart

https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=9ecc122b"
0,CAMEL-6443,Bug,Major,2.10.0,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Vitalii Tymchyshyn,0,2,2013-06-10 11:39:36+00:00,2013-10-21 16:52:58+00:00,"It's even worse as because of https://issues.apache.org/jira/browse/CAMEL-6441
if two starts was not successful, engine becomes totally broken.


The only workaround I can see now is to create new component instance for each endpoint.",davsclaus:1374540606:2013-07-23T08:50:06.452+0000:1374540606:2013-07-23T08:50:06.452+0000:Thanks for reporting.
0,CAMEL-6442,Bug,Major,"2.10.4, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Willem Jiang,Willem Jiang,0,1,2013-06-08 08:53:17+00:00,2013-06-14 13:34:58+00:00,"I just create a simple proxy route by using camel-netty-http component like this



        <route id=""front"">
            <from uri=""netty-http:http://0.0.0.0:9001/test"" />
            <to uri=""netty-http:http://localhost:9090/foo"" />
        </route>

        <route id=""back"">
            <from uri=""netty-http:http://0.0.0.0:9090/foo"" />
            <transform>
              <simple>hello world</simple>
            </transform>
        </route>





When I send the get request to http://localhost:9001/test, I got below exception



java.lang.IllegalStateException: await*() in I/O thread causes a dead lock or sudden performance drop. Use addListener() instead or call await*() from a different thread.
	at org.jboss.netty.channel.DefaultChannelFuture.checkDeadLock(DefaultChannelFuture.java:342)
	at org.jboss.netty.channel.DefaultChannelFuture.await0(DefaultChannelFuture.java:306)
	at org.jboss.netty.channel.DefaultChannelFuture.awaitUninterruptibly(DefaultChannelFuture.java:285)
	at org.apache.camel.component.netty.NettyProducer.openChannel(NettyProducer.java:402)
	at org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:473)
	at org.apache.camel.component.netty.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:468)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1188)
	at org.apache.camel.component.netty.NettyProducer.process(NettyProducer.java:210)
	at org.apache.camel.component.netty.http.NettyHttpProducer.process(NettyHttpProducer.java:49)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:123)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:118)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:388)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:189)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:189)
	at org.apache.camel.component.netty.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:118)
	at org.apache.camel.component.netty.handlers.ServerChannelHandler.messageReceived(ServerChannelHandler.java:102)
	at org.apache.camel.component.netty.http.handlers.HttpServerChannelHandler.messageReceived(HttpServerChannelHandler.java:97)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.handler.codec.http.HttpChunkAggregator.messageReceived(HttpChunkAggregator.java:145)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:791)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:459)
	at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:536)
	at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:435)
	at org.jboss.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:564)
	at org.jboss.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:559)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:109)
	at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:90)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)
	at org.jboss.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)
	at org.jboss.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:680)","njiang:1370714539:2013-06-09T02:02:19.568+0000:1370714539:2013-06-09T02:02:19.568+0000:Applied the patch and unit test into trunk.
Here is the [blog|http://nitschinger.at/Never-await-Uninterruptibly-on-Netty-Channels] which helped me to resolve the issue."
0,CAMEL-6441,Bug,Minor,2.10.0,"2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Claus Ibsen,Vitalii Tymchyshyn,0,2,2013-06-07 15:16:58+00:00,2013-07-23 09:26:05+00:00,"Currently if service start produces an exception, stop is called to clear flags. But stop() is noop if service was in stopped state before. This leaves service in starting+stopped unusable state.",davsclaus:1374542765:2013-07-23T09:26:05.349+0000:1374542765:2013-07-23T09:26:05.349+0000:Thanks for reporting.
0,CAMEL-6440,Bug,Major,"2.11.0, 2.12.0","2.11.2, 2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.11.2, 2.12.1, 2.13.0",Willem Jiang,Rene Avontuur,0,3,2013-06-07 09:06:03+00:00,2013-09-18 06:28:26+00:00,"Applying an xpath expression to a message containing a CxfPayload may lead to loss of data. 
A unit test to demonstrate this, has been written.


A work around is converting the CxfPayload to a String, followed by applying xpath to the String.


The unit test fails on current snapshot-version:


testMessageWithIncreasingSize(org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest)  Time elapsed: 1.357 sec  <<< FAILURE!
java.lang.AssertionError: Lengths of testMessage and receiveMessage should be equal (body is CxfPayload), expected:<10000> but was:<3805>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest.execTest(CxfConsumerPayloadXPathTest.java:131)
	at org.apache.camel.component.cxf.CxfConsumerPayloadXPathTest.testMessageWithIncreasingSize(CxfConsumerPayloadXPathTest.java:109)","rene avontuur:1370567272:2013-06-07T09:07:52.098+0000:1370567272:2013-06-07T09:07:52.098+0000:the failing unit test
davsclaus:1374543005:2013-07-23T09:30:05.271+0000:1374543005:2013-07-23T09:30:05.271+0000:You need to enable stream caching
rene avontuur:1376348837:2013-08-13T07:07:17.138+0000:1376348837:2013-08-13T07:07:17.138+0000:adding .StreamCaching() to the route in the unit test has no effect.

Even, in the case stream caching would be the remedy, I think it is still a problem.
The risk is too high that during acceptance testing of such a route no issue is detected, while once in production a few users experience corrupted data. It will then be hard to find the cause.
rene avontuur:1378688899:2013-09-09T09:08:19.334+0000:1378688899:2013-09-09T09:08:19.334+0000:The observed data loss is most likely due to the inability of Camel's DomConverter/XmlConverter to handle linked lists of text nodes correctly. See latest version of the added unit tests for more details.
rene avontuur:1378706218:2013-09-09T13:56:58.597+0000:1378706218:2013-09-09T13:56:58.597+0000:Added a patch that solves THIS issue.

The method: 
private static void append(StringBuilder buffer, Node node) 
probably has a simular issue.

It would be helpful first having more unit tests in DomConverterTest
njiang:1379030380:2013-09-13T07:59:40.054+0000:1379030380:2013-09-13T07:59:40.054+0000:Hi Rene,

I just have quick run with the test and patch.
I found the patch doesn't fix the old version of CxfConsumerPayloadXPathTest, and new version of CxfConsumerPayloadXPathTest is passed if I don't apply the patch.

Can you double check it?

Regards,

Willem
rene avontuur:1379290214:2013-09-16T08:10:14.111+0000:1379290214:2013-09-16T08:10:14.111+0000:Hello Willem,

Regarding the new version of CxfConsumerPayloadXPathTest:
- The annotation above size10000XPathTest() expresses the current behavior, which is not the desired behavior.
For the desired behavior, please change '@Test(expected = ComparisonFailure.class)' into '@Test'.
- The test 'size10000DomFirstOneOnlyTest()' may be removed completely. As it only shows what happens if one does not process all DOM-nodes.

Regarding the old version of CxfConsumerPayloadXPathTest:
- after line 77: receivedMessageByDom = textnode.getNodeValue();  
in order to process all nodes, add:
textnode = (Text) textnode.getNextSibling();
while (textnode != null) {
   //the textnode appears to have siblings!
   receivedMessageByDom = receivedMessageByDom + textnode.getNodeValue();
   textnode = (Text) textnode.getNextSibling();
}

René


njiang:1379456906:2013-09-18T06:28:26.207+0000:1379456906:2013-09-18T06:28:26.207+0000:Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Rene."
0,CAMEL-6439,Improvement,Major,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Claus Ibsen,1,2,2013-06-07 08:52:26+00:00,2016-05-29 09:39:00+00:00,"This allows people to define how many threads they want for handling timeouts, such as they can better handle burst of timeouts.",davsclaus:1464482399:2016-05-29T08:39:59.384+0000:1464482399:2016-05-29T08:39:59.384+0000:There is a new option replyToOnTimeoutMaxConcurrentConsumers to configure how many thread to use. By default there is 1 thread.
0,CAMEL-6438,Task,Major,"2.9.7, 2.10.4, 2.11.0","2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Unassigned,Moulliard Charles,0,1,2013-06-07 04:50:33+00:00,2013-07-23 09:32:32+00:00,"I have experienced strange issues this week with twitter polling consumer when doing search (twitter://search?type=polling&delay=5&keywords=java) - Empty results. According to Yazuka Yamamoto (twitter4j project), this issue is due to the fact that Twiter API 1.0 will be retired end of this week (https://dev.twitter.com/blog/planning-for-api-v1-retirement) and we must migrate to Twitter 4J 3.0.1.


See example


https://gist.github.com/cmoulliard/2ff00d1b867169601644",
0,CAMEL-6437,New Feature,Major,None,Future,"

hdfs
shutdown

",Resolved,Not A Problem,Future,Unassigned,Kevin Faro,0,3,2013-06-06 19:24:31+00:00,2015-07-11 07:52:51+00:00,It would be great to make both the consumer and producer shutdown aware so it could remove the .opened extension when the route is shutdown.,"davsclaus:1370565745:2013-06-07T08:42:25.825+0000:1370565745:2013-06-07T08:42:25.825+0000:Sounds good. Kevin are you working on a patch?
boday:1381564728:2013-10-12T15:58:48.056+0000:1381696673:2013-10-14T04:37:53.707+0000:from the producer perspective, the doStop() already closes any open stream...not sure what else should be done here.

on the consumer side, the istream is closed after each poll completes, but given that the poll could be long-lived, should we interrupt it when prepareShutdown is called?

any other thoughts/suggestions?



davsclaus:1436572371:2015-07-11T07:52:51.039+0000:1436572371:2015-07-11T07:52:51.039+0000:Yeah cannot see what this would help after looking again."
0,CAMEL-6436,Bug,Minor,None,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-06-06 17:40:51+00:00,2013-07-30 14:29:55+00:00,"See SO
http://stackoverflow.com/questions/16948288/apache-camel-rss-feed-processor-skips-with-feeds-of-same-pubdate?noredirect=1#comment24503558_16948288",
0,CAMEL-6435,Improvement,Minor,2.11.0,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Henryk Konsek,0,4,2013-06-06 10:43:16+00:00,2013-08-15 09:48:07+00:00,"In many places within the Camel code base we can find static fields with transient modifier. Static fields are automatically transient, so the latter declaration is obsolete.


We should clean the code base from the obsolete transient keywords.","hekonsek:1370486648:2013-06-06T10:44:08.950+0000:1370486648:2013-06-06T10:44:08.950+0000:Cleaned the very first two modules (revision 65ac71b).
hekonsek:1370500406:2013-06-06T14:33:26.067+0000:1370500406:2013-06-06T14:33:26.067+0000:Next commit: c0dd0c5
bvahdat:1370503003:2013-06-06T15:16:43.043+0000:1370503003:2013-06-06T15:16:43.043+0000:Thanks for looking into this Henryk.

Your previous commit above resolved only 2 such declarations inside the {{camel-ahc}} module. But as you already know there're more than 400 occurrences of this pattern inside our code base. So wonder if you could manage to commit the whole fix in one single step which would also produce less noise on the commit mailing list.
hekonsek:1370515272:2013-06-06T18:41:12.035+0000:1370515272:2013-06-06T18:41:12.035+0000:Actually I don't want to perform a global replace operation as I prefer to review each change I commit into version control. I would rather clean individual modules from time to time, as a low-priority task. I favor little-steps approach instead of massive global refactorings I cannot easily verify :) .

If you feel comfortable with such massive change, feel free to perform it :) .
bvahdat:1370555447:2013-06-07T05:50:47.189+0000:1370555447:2013-06-07T05:50:47.189+0000:Do it the way best fits for you :-)
davsclaus:1375855264:2013-08-07T14:01:04.229+0000:1375855264:2013-08-07T14:01:04.229+0000:Anyone fell free to submit patches for this cleanup.
aynalem:1376495579:2013-08-14T23:52:59.634+0000:1376495579:2013-08-14T23:52:59.634+0000:Claus, here you go https://github.com/apache/camel/pull/40
davsclaus:1376520481:2013-08-15T06:48:01.099+0000:1376520481:2013-08-15T06:48:01.099+0000:Thanks Matthew for the patch
bvahdat:1376529485:2013-08-15T09:18:05.501+0000:1376529485:2013-08-15T09:18:05.501+0000:I also removed the {{transient}} modifier even by the loggers declared as instance variables as since SLF4J version 1.5.3 the logger instances survive serialization so that when using a deserialized class object we prefer to avoid a NPE when the given logger instance variable is accessed inside the logic of the encapsulating object, owning the logger instance variable itself. For more details see the ""Logger serialization"" paragraph here:

http://slf4j.org/faq.html#declared_static
"
0,CAMEL-6434,Bug,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Xiaohui Wu,0,2,2013-06-06 08:19:16+00:00,2013-06-06 13:51:07+00:00,"When running command: mvn camel:run, I know that the config file name and PID can be passed through the configuration in pom.xml like :


			<plugin>
				<groupId>org.apache.camel</groupId>
				<artifactId>camel-maven-plugin</artifactId>
				<version>${camel.version}</version>
				<configuration>
					<useBlueprint>true</useBlueprint>
					<configAdminPid>ConfigApp</configAdminPid>
					<configAdminFileName>/opt/jboss-fuse/jboss-fuse-6.0.0.redhat-024/deploy/ConfigApp.cfg</configAdminFileName>
				</configuration>
			</plugin>
But when I tried to run the command: mvn camel:run to get the content from the config file, I found that only configAdminPid is recognized, while the configAdminFileName did not been picked up.


The stack trace is:
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:486)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.lang.IllegalArgumentException: The persistent file should not be null
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.setPersistentFileForConfigAdmin(CamelBlueprintHelper.java:176)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:103)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.test.blueprint.Main.main(Main.java:81)","njiang:1370497867:2013-06-06T13:51:07.333+0000:1370497867:2013-06-06T13:51:07.333+0000:Applied the patch into master.

It's caused by the property comment of RunMojo, it should start with one star, not two star. "
0,CAMEL-6433,Bug,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Moulliard Charles,1,3,2013-06-06 06:08:45+00:00,2016-04-28 13:53:34+00:00,"When the following camel websocket secure route is deployed on karaf, we get this error 



Caused by: java.io.IOException: Invalid keystore format
	at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:633)[:1.6.0_45]
	at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:38)[:1.6.0_45]
	at java.security.KeyStore.load(KeyStore.java:1185)[:1.6.0_45]
	at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
	at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]
	at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:236)[130:org.apache.camel.camel-core:2.10.0.redhat-60024]






<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:camel=""http://camel.apache.org/schema/spring""
       xsi:schemaLocation=""
       http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/spring
          http://camel.apache.org/schema/spring/camel-spring.xsd"">

    <bean id=""activemq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
        <property name=""brokerURL"" value=""tcp://localhost:61616""/>
    </bean>

  <camel:sslContextParameters
      id=""sslContextParameters"">
    <camel:keyManagers
        keyPassword=""changeit"">
      <camel:keyStore
          resource=""jsse/websocket.jks""
          password=""changeit""/>
    </camel:keyManagers>
    <camel:trustManagers>
      <camel:keyStore
          resource=""jsse/websocket.jks""
          password=""changeit""/>
    </camel:trustManagers>
  </camel:sslContextParameters>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <packageScan>
      <package>com.fusesource.examples.camel.websocket.secure</package>
    </packageScan>
  </camelContext>

...

           from(""activemq:topic:newsTopic"").routeId(""fromJMStoWebSocketSecureNews"")
             .log(LoggingLevel.DEBUG, "">> News info received : ${body}"")
             .delay(5000)
             .to(""websocket://0.0.0.0:8443/newsTopic?sendToAll=true"" +
                     ""&sslContextParametersRef=#sslContextParameters&staticResources=classpath:webapp"");","cmoulliard:1370470164:2013-06-06T06:09:24.395+0000:1370470164:2013-06-06T06:09:24.395+0000:Project works fine using mvn camel:run with same reources
cmoulliard:1370477886:2013-06-06T08:18:06.440+0000:1370477886:2013-06-06T08:18:06.440+0000:Error occurs when keystore load the password

{code}
        if (this.resource == null) {
            ks.load(null, ksPassword);
        } else {
            InputStream is = this.resolveResource(this.parsePropertyValue(this.resource));
            ks.load(is, ksPassword); // ERROR OCCURS HERE
        }
{code}
cmoulliard:1370478162:2013-06-06T08:22:42.856+0000:1370478162:2013-06-06T08:22:42.856+0000:Could this issue be due to the InputStream created by Felix (see screenshot) ?
pberkman:1416306249:2014-11-18T18:24:09.662+0000:1416306249:2014-11-18T18:24:09.662+0000:I get the same issue using Java DSL route and Mina2:

{code}
            if (isTLS) {
                
                MessagingGroup mg = ConfigurationCache.getEntry(instanceName).getMessagingSettings();

                KeyStoreParameters ksp = new KeyStoreParameters();
                ksp.setResource(mg.getSecurityKeystoreFile());
                ksp.setPassword(mg.getSecurityKeystorePass());
                
                KeyManagersParameters kmp = new KeyManagersParameters();
                kmp.setKeyStore(ksp);
                kmp.setKeyPassword(mg.getSecurityPrivateKeyPass());
                
                KeyStoreParameters tsp = new KeyStoreParameters();
                tsp.setResource(mg.getSecurityTruststoreFile());
                tsp.setPassword(mg.getSecurityTruststorePass());
                
                TrustManagersParameters tmp = new TrustManagersParameters();
                tmp.setKeyStore(tsp);
                
                SSLContextServerParameters scsp = new SSLContextServerParameters();
                scsp.setClientAuthentication(ClientAuthentication.REQUIRE.name());
                
                SSLContextParameters scp = new SSLContextParameters();
                scp.setServerParameters(scsp);
                scp.setKeyManagers(kmp);
                scp.setTrustManagers(tmp);

                minaCfg.setSslContextParameters(scp);
            }
{code}

{code}
Exception:
ERROR: Bundle com.nextgate.ms.components.adapters.ngms-listener-hl7v2-mllp [283] Error starting mvn:com.nextgate.ms.components.adapters/ngms-listener-h
l7v2-mllp/9.0.0 (org.osgi.framework.BundleException: Activator start error in bundle com.nextgate.ms.components.adapters.ngms-listener-hl7v2-mllp [283]
.)
java.io.IOException: Invalid keystore format
        at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
        at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
        at java.security.KeyStore.load(KeyStore.java:1214)
        at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)
        at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)
        at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:256)
        at org.apache.camel.component.mina2.Mina2Consumer.setupSocketProtocol(Mina2Consumer.java:159)
        at org.apache.camel.component.mina2.Mina2Consumer.<init>(Mina2Consumer.java:78)
        at org.apache.camel.component.mina2.Mina2Endpoint.createConsumer(Mina2Endpoint.java:55)
        at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
        at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
        at org.apache.camel.impl.RouteService.warmUp(RouteService.java:134)
        at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2263)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2193)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
        at com.nextgate.ms.bundlelib.interfaces.NGMSBundleActivator.startup(NGMSBundleActivator.java:80)
        at com.nextgate.ms.component.adapter.listener.hl7mllp.routes.Activator.start(Activator.java:55)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:745)
ERROR: Bundle com.nextgate.ms.components.adapters.ngms-sender-hl7v2-mllp [284] Error starting mvn:com.nextgate.ms.components.adapters/ngms-sender-hl7v2
-mllp/9.0.0 (org.osgi.framework.BundleException: Activator start error in bundle com.nextgate.ms.components.adapters.ngms-sender-hl7v2-mllp [284].)
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[mina2:tcp://192.168.0.200:8001]. Reason: java.io.IOE
xception: Invalid keystore format
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:409)
        at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
        at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:202)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
        at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:153)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:993)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
        at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
        at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
        at org.apache.camel.impl.RouteService.startChildService(RouteService.java:334)
        at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
        at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2263)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2193)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
        at com.nextgate.ms.bundlelib.interfaces.NGMSBundleActivator.startup(NGMSBundleActivator.java:80)
        at com.nextgate.ms.component.adapter.sender.hl7mllp.routes.Activator.start(Activator.java:56)
        at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
        at org.apache.felix.framework.Felix.activateBundle(Felix.java:2146)
        at org.apache.felix.framework.Felix.startBundle(Felix.java:2064)
        at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
        at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.io.IOException: Invalid keystore format
        at sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:650)
        at sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:55)
        at java.security.KeyStore.load(KeyStore.java:1214)
        at org.apache.camel.util.jsse.KeyStoreParameters.createKeyStore(KeyStoreParameters.java:175)
        at org.apache.camel.util.jsse.KeyManagersParameters.createKeyManagers(KeyManagersParameters.java:108)
        at org.apache.camel.util.jsse.SSLContextParameters.createSSLContext(SSLContextParameters.java:256)
        at org.apache.camel.component.mina2.Mina2Producer.setupSocketProtocol(Mina2Producer.java:313)
        at org.apache.camel.component.mina2.Mina2Producer.<init>(Mina2Producer.java:90)
        at org.apache.camel.component.mina2.Mina2Endpoint.createProducer(Mina2Endpoint.java:49)
        at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:405)
        ... 54 more
{code}
davsclaus:1461820485:2016-04-28T13:14:45.922+0000:1461820485:2016-04-28T13:14:45.922+0000:We need to inject CamelContext on the SSL parameters so when it attempts to load those resources it can have access to the bundle classloader (via Camel's ClassResolver)
davsclaus:1461822287:2016-04-28T13:44:47.629+0000:1461822287:2016-04-28T13:44:47.629+0000:Also I think we should let the ClassResolver load the resource first instead of trying the TCCL and whatnot known tricks.
davsclaus:1461822814:2016-04-28T13:53:34.198+0000:1461822814:2016-04-28T13:53:34.198+0000:There were a bunch of changes so pushing this to master for know"
0,CAMEL-6432,Bug,Major,"2.11.0, 2.12.0",,"
None
",Resolved,Fixed,None,Moulliard Charles,Moulliard Charles,0,1,2013-06-06 05:16:19+00:00,2013-06-07 13:16:51+00:00,"If we package a camel websocket route (""websocket://0.0.0.0:9090/newsTopic?sendToAll=true&staticResources=classpath:webapp"") as a bundle and set the staticResources as parameter (classpath:webapp), then the pages cannot be accessed from the browser


Code should be 



            if (resources[0].equals(""classpath"")) {
                URL url = this.getCamelContext().getClassResolver().loadResourceAsURL(resources[1]);
                context.setBaseResource(Resource.newResource(url));
            } else if (resources[0].equals(""file"")) {
                context.setBaseResource(Resource.newResource(resources[1]));
            }","cmoulliard:1370582211:2013-06-07T13:16:51.094+0000:1370582211:2013-06-07T13:16:51.094+0000:Code committed for 2.12-SNAPSHOT, 2.11.1-SNAPSHOT"
0,CAMEL-6431,New Feature,Major,2.12.0,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,2,2013-06-05 17:47:58+00:00,2013-06-06 09:30:26+00:00,A component to lookup geocodes and addresses. For example you can lookup lat/lng or reverse lookup.,"geerzo:1370426060:2013-06-05T17:54:20.405+0000:1370426060:2013-06-05T17:54:20.405+0000:Claus, as you are designing this, if it can be designed to be able to plug into multiple backend services for validation it would be ideal (i.e. Google vs Bing). That way we could add more over time since some are better for different regions of the world. 
davsclaus:1370426299:2013-06-05T17:58:19.512+0000:1370426299:2013-06-05T17:58:19.512+0000:Yeah let me rename this to camel-google-geocoder as it uses google api.
https://code.google.com/p/geocoder-java/
davsclaus:1370482221:2013-06-06T09:30:21.181+0000:1370482221:2013-06-06T09:30:21.181+0000:On 2nd though lets keep the name as is, and the component as simple as it is.

If someone wants to create a camel-bing-geocoder component, then they can do that."
0,CAMEL-6430,Bug,Major,2.9.5,2.12.0,"

smpp

",Resolved,Invalid,2.12.0,Claus Ibsen,Saurabh Mehan,0,2,2013-06-05 12:19:52+00:00,2013-06-05 13:16:47+00:00,"When many Deliver_SM is passed to smpp endpoint configured in a route in camel. Some of them are not processed by exchange they are just discarded. 


The code is as follows:
from(smppEndpoint)
			.process(new SmsMessageProcessor(channelMessagesBean))
                        .otherwise().end();


50 Deliver_SM request passed but 6 were rejected.


May be there is need to increase the threads. If yes what is the procedure to do this?","davsclaus:1370409391:2013-06-05T13:16:31.177+0000:1370409391:2013-06-05T13:16:31.177+0000:Hi

Please read this page about support and how to get help with Camel
http://camel.apache.org/support

Please do not use JIRA issue tracker for ""why does X not work"" etc.
For that use the forum and/or mailing lists."
0,CAMEL-6429,Bug,Minor,2.10.1,None,"
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Adam Wehner,0,2,2013-06-05 11:45:10+00:00,2013-06-06 17:34:06+00:00,"The syntax propName does not resolve in the onException block and the header is set with the value propName. The syntax ${properties:propName} does work as expected. Further the shorthand syntax also works correctly in the usual route.


<camel:onException>
  <camel:exception>java.lang.Exception</camel:exception>
  <camel:setHeader headerName=""anyHeaderName"">
    <camel:simple>myPropName</camel:simple>
  </camel:setHeader>				
  ..
</camel:onException>","davsclaus:1370409461:2013-06-05T13:17:41.036+0000:1370409461:2013-06-05T13:17:41.036+0000:Can you try upgrade to newer release and as well test with SNAPSHOT. We have fixed property placeholder resolution recently for nested elements, and thus very likely fixed this also.
adam.wehner:1370484736:2013-06-06T10:12:16.638+0000:1370484764:2013-06-06T10:12:44.523+0000:Okay. The issue is fixed in 2.10.4 and 2.11.0. Thanks. From my point of view this issue can be closed.
davsclaus:1370511246:2013-06-06T17:34:06.086+0000:1370511246:2013-06-06T17:34:06.086+0000:Thanks for testing and reporting back"
0,CAMEL-6428,New Feature,Major,2.12.0,None,"

patch

",Resolved,Fixed,2.12.0,Claus Ibsen,Dhiraj Sureshkumar Bokde,0,4,2013-06-05 10:04:47+00:00,2013-09-02 09:14:23+00:00,"Submitting a new component for Salesforce support
Supports Salesforce REST (including blob field retrieval), Batch, and Streaming APIs","dhirajsb:1370398136:2013-06-05T10:08:56.386+0000:1370398136:2013-06-05T10:08:56.386+0000:Source for component, along with camel-salesforce feature
davsclaus:1370413017:2013-06-05T14:16:57.467+0000:1370413017:2013-06-05T14:16:57.467+0000:Dhiraj, this is great.

Do you want to help with documentation also?

We need to add it to
http://camel.apache.org/component-list

And a new page under components. Usually just copy an existing components page and adjust it.
dhirajsb:1370424242:2013-06-05T17:24:02.838+0000:1370424242:2013-06-05T17:24:02.838+0000:Claus, I do not have commit rights so I will write it up and attach it to this issue. Or should I create a doc related issue?
davsclaus:1370425755:2013-06-05T17:49:15.174+0000:1370425755:2013-06-05T17:49:15.174+0000:Yeah its fine to attach a file with the docs in txt or md format or whatever.

To be able to edit the docs you need to have Apache ICLA on file as said here
http://camel.apache.org/how-do-i-edit-the-website.html
bvahdat:1370434823:2013-06-05T20:20:23.799+0000:1370434823:2013-06-05T20:20:23.799+0000:Hi Dhiraj,

Thanks for the contribution. I think {{test-salesforce-login.properties}} is missing inside the provided patch which is required for running the tests. As an example when I run {{SessionIntegrationTest}} inside my IDE I get:

{code}
java.io.FileNotFoundException: test-salesforce-login.properties (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:120)
	at java.io.FileInputStream.<init>(FileInputStream.java:79)
	at org.apache.camel.component.salesforce.LoginConfigHelper.getLoginConfig(LoginConfigHelper.java:34)
	at org.apache.camel.component.salesforce.internal.SessionIntegrationTest.testLogin(SessionIntegrationTest.java:46)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
        ...
        ...
{code}

Also is the folder hierarchy being checked-in intentional? I think the {{camel-salesforce-maven-plugin}} module should go into our maven folder where all other plugins are also there: {{tooling/maven/}}

I made the code to compile using Java 6 which we should still support (The base reflection exception {{ReflectiveOperationException}} is Java 7+)
dhirajsb:1370436588:2013-06-05T20:49:48.887+0000:1370436588:2013-06-05T20:49:48.887+0000:Hi Babak, thanks for the ReflectiveOperationException fix, I missed that one. The test-salesforce-login.properties should contain a Salesforce account for integration test, and I am not sure we can check in a shared one without it becoming a security issue. 

Its easy to create a personal developer account on developerforce.com and create the Merchandise schema by following Tutorial 1 and 2 at http://www.salesforce.com/us/developer/docs/workbook/index.htm

The plugin is dependent on the component and not a generic Camel plugin. I think that's why Claus advised that it be co-located with the component. 
dhirajsb:1370439823:2013-06-05T21:43:43.535+0000:1370439823:2013-06-05T21:43:43.535+0000:Patch to fix error message on missing test-salesforce-login.properties file
davsclaus:1370480358:2013-06-06T08:59:18.079+0000:1370480358:2013-06-06T08:59:18.079+0000:Dhiraj, i had trouble applying the patch. Maybe your local changes and camel master has diverged? Do you mind working on a patch from camel master, so it can be applied easily?

dhirajsb:1370501226:2013-06-06T14:47:06.614+0000:1370501226:2013-06-06T14:47:06.614+0000:Updated login file error patch
davsclaus:1370511191:2013-06-06T17:33:11.233+0000:1370511191:2013-06-06T17:33:11.233+0000:Thanks for the updated patch. Its applied to master.
dhirajsb:1370610805:2013-06-07T21:13:25.848+0000:1370610805:2013-06-07T21:13:25.848+0000:Added support for UriEndpointComponent and EndpointCompleter, along with minor code cleanup
davsclaus:1370645903:2013-06-08T06:58:23.208+0000:1370645903:2013-06-08T06:58:23.208+0000:Thanks for the completer patch. I have applied it to master.
dhirajsb:1370773971:2013-06-09T18:32:51.822+0000:1370773971:2013-06-09T18:32:51.822+0000:Patch for plugin parameters annotations, and integration test pom
njiang:1370803754:2013-06-10T02:49:14.241+0000:1370803754:2013-06-10T02:49:14.241+0000:Hi Dhiraj

I just have a comment of the camel-salesforce-maven-plugin's parameter 
{code}
     @Parameter(property = ""clientId"", required = true)
     protected String clientId;
{code}

As maven plugin support to set property value through -Dxxx=option, I think you should add prefix such as ""camelSalesforce."" to the ""clientId"". In this camel-salesforce-maven-plugin -D setting will not confuse the other maven plugins.

Willem


dhirajsb:1370805572:2013-06-10T03:19:32.512+0000:1370805603:2013-06-10T03:20:03.021+0000:Updated Salesforce plugin parameters patch with camelSalesforce. prefix for system properties per Willem's comment
davsclaus:1371689559:2013-06-20T08:52:39.103+0000:1371689559:2013-06-20T08:52:39.103+0000:Thanks, the latest patch has been applied.

We should add the docs for this new component as well.
davsclaus:1376005591:2013-08-09T07:46:31.722+0000:1376005591:2013-08-09T07:46:31.722+0000:Dhiraj, any update on helping with documentation for this new component?
davsclaus:1377063407:2013-08-21T13:36:47.563+0000:1377063407:2013-08-21T13:36:47.563+0000:Dhiraj can you help with the docs? You can attach a .txt file then the Camel team can add that to the wiki. Or if you have edit rights to the wiki you can add the docs directly.

We would need that for this upcoming release.
davsclaus:1377569385:2013-08-27T10:09:45.843+0000:1377569385:2013-08-27T10:09:45.843+0000:Documentation is missing
dhirajsb:1377725576:2013-08-29T05:32:56.933+0000:1377725576:2013-08-29T05:32:56.933+0000:Initial documentation for Salesforce component. 
dhirajsb:1377726250:2013-08-29T05:44:10.592+0000:1377726250:2013-08-29T05:44:10.592+0000:It looks like some field names were changed in package org.apache.camel.component.salesforce.api.dto to be camel case to satisfy checkstyle rules. However, the XML stream library throws an error if the element name doesn't match the json from Salesforce, which does not use camel case. The XML format tests will fail due to this change. The solution is to either:

a. Revert the checkstyle changes (simple solution)
b. Add an XStreamAlias to all the DTO fields to make sure XML messages can be handled correctly (complex solution). Also, the camel-salesforce-plugin will have to be updated to do the same for generated DTOs. 
davsclaus:1377741909:2013-08-29T10:05:09.530+0000:1377741909:2013-08-29T10:05:09.530+0000:Yeah A sounds good to me. We can configure checkstyle to skip checking this code, as its auto generated.
davsclaus:1377824953:2013-08-30T09:09:13.767+0000:1377824953:2013-08-30T09:09:13.767+0000:Thanks for the docs. I added this page:
https://cwiki.apache.org/confluence/display/CAMEL/Salesforce
bvahdat:1377864244:2013-08-30T20:04:04.272+0000:1377864244:2013-08-30T20:04:04.272+0000:Hi Dhiraj

The typo is corrected now, Thanks!
dhirajsb:1377871088:2013-08-30T21:58:08.753+0000:1377871108:2013-08-30T21:58:28.091+0000:I've submitted a pull request https://github.com/apache/camel/pull/42 for the regression test failures. "
0,CAMEL-6397,Improvement,Minor,2.10.4,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-25 08:17:31+00:00,2013-05-25 08:20:54+00:00,"See nabble
http://camel.465427.n5.nabble.com/jetty-http-dynamic-uri-in-consumer-from-tp5732691.html


And
http://restlet.org/learn/javadocs/2.1/jse/engine/org/restlet/engine/connector/ServerConnectionHelper.html",
0,CAMEL-6396,Bug,Major,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-25 05:26:22+00:00,2013-05-25 06:38:07+00:00,"See SO
http://stackoverflow.com/questions/16667720/connections-are-hanging-in-close-wait-even-after-successful-shutdown-of-camel-co",
0,CAMEL-6395,Bug,Minor,"2.10.4, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-24 14:59:18+00:00,2013-05-24 15:27:50+00:00,"This expression should work out of the box



                    .setHeader(""goto"").simple(""${bean:myBean?method=whereToMate('MyAppV1.2.3', 'blah')}"")",
0,CAMEL-6394,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,James Strachan,James Strachan,0,1,2013-05-24 13:06:00+00:00,2013-05-24 13:10:29+00:00,"Since there is a ComponentConfiguration.getParameterConfiguration() method which returns a Map of ParameterConfiguration it should be easy to convert this into a simple blob of JSON matching the JSON-schema: http://json-schema.org/ so its easy to default the parameter names and types in command line, IDE and web tools",
0,CAMEL-6393,Improvement,Major,2.10.4,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Akitoshi Yoshida,Akitoshi Yoshida,0,2,2013-05-24 12:05:38+00:00,2015-06-18 19:20:14+00:00,"This is a proposed solution to the header cxf to camel header propagation issue mentioned at
http://camel.465427.n5.nabble.com/propagating-multiple-header-entries-from-cxf-to-camel-td5732135.html


First, the current behavior is summarized as 
(using the notation ""source"" -> ""destination"" in the following)


When propagating from Camel to CXF
DefaultCxfBinding's propagate method works as 
List -> List
String -> List containing String


CxfHeaderHelper's propagate method works as
Object -> List containing Object.toString()


When propagating from CXF to Camel
Both DefaultCxfBinding's and CxfHeaderHelper's propagate methods work as
List -> String corresponding to List.get(0)


The proposed behavior will be summarized as follows:


We introduce a boolean property CxfProtocolHeadersMerged in camel exchange.


Propagating from Camel to CXF
List -> List
String -> List containing String


Propagating from CXF to Camel
if CxfProtocolHeadersMerged is true
List with one String-> String
List with more than one Strings -> String corresponding to the merged strings
if CxtProtocolHeadersMerged is false
List with one String -> String
List with more than one Strings -> List


When CxfProtocolHeadersMerged is set to false, the propagation behavior from cxf to camel and camel to cxf is symmetric. A single value header is treated as string in camel, whereas a multiple values header is treated as a list. When CxfProtocolHeadersMerged is set to true, both types of headers are treated as strings in camel.


I think setting the default value of CxfProtocolHeadersMerged to false is more appealing. Although setting the default value to true makes the behavior resemble to the current behavior of having always string valued headers when the headers are propagated from cxf to camel, this behavior is asymmetric and somehow inconsistent, as camel still allows a header with multiple values. 


In contrast, setting the default value to false creates a symmetric behavior in propagating headers of single or multiple values across the camel cxf boarder. And as most headers are single valued, this behavior remains identical to the current behavior for those single valued headers.


I am attaching the patch here.


I modified both DefaultCxfBinding and CxfHeaderHelper without consolidating/reusing one code in the other. I suppose this part is in the middle of consolidation and as such, I kept it as it is.


The test cases included.
Also corrected is the assertion's equals' ordering in somme existing test case (""expected value"", ""test value"") to get the error log printed correctly.


Please have a look at the change.


Thanks.


aki","ay:1369368522:2013-05-24T12:08:42.486+0000:1369368522:2013-05-24T12:08:42.486+0000:not sure what is the best way to attach a file after the switch to git.

so i'm attaching a tar.gz containg
- git diff on the current master.
- a new test case java file

davsclaus:1434626414:2015-06-18T19:20:14.609+0000:1434626414:2015-06-18T19:20:14.609+0000:It is bad when things as complicated as this do not get documented. There is zero documentation at the cxf wiki page."
0,CAMEL-6392,Task,Minor,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Salmaan Zaidi,0,2,2013-05-24 11:35:41+00:00,2013-05-24 13:41:37+00:00,Causes the maven enforcer plugin to fail building a project; citing that ResourceEndpoint is duplicated between camel-core and camel-spring.,"davsclaus:1369369917:2013-05-24T12:31:57.513+0000:1369369917:2013-05-24T12:31:57.513+0000:Its already removed.
zaidis:1369370752:2013-05-24T12:45:52.312+0000:1369370752:2013-05-24T12:45:52.312+0000:Some corroborating evidence for my case ;)
{noformat}
[WARNING] Rule 1: org.apache.maven.plugins.enforcer.BanDuplicateClasses failed with message:
Duplicate classes found:

  Found in:
    org.apache.camel:camel-core:jar:2.11.0:compile
    org.apache.camel:camel-spring:jar:2.11.0:compile
  Duplicate classes:
    org/apache/camel/component/ResourceEndpoint.class
{noformat}
davsclaus:1369372449:2013-05-24T13:14:09.668+0000:1369372449:2013-05-24T13:14:09.668+0000:Ah the felix bundle plugin adds the .class despite its removed from the camel-spring source code since 2.10 onwards.
davsclaus:1369372644:2013-05-24T13:17:24.139+0000:1369372644:2013-05-24T13:17:24.139+0000:Thanks for reporting. The .class should now be removed.
zaidis:1369374097:2013-05-24T13:41:37.344+0000:1369374097:2013-05-24T13:41:37.344+0000:Thanks for fixing it so promptly :)"
0,CAMEL-6391,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,James Strachan,James Strachan,0,3,2013-05-24 09:15:30+00:00,2013-05-26 14:46:59+00:00,"We've got the ComponentConfiguration API which is pretty cool for figuring out what parameters are available on an endpoint; but there's no help for completing the main name/path text of an endpoint. Most endpoints have a main 'path' string once you take away things like user/host/port or whatever parameters there are. 


e.g. name of queue / name of database table / directory/path for file/ftp/scp, name of hadoop file or whatever.


Rather like the Completer APIs in Karaf commands, it'd be nice if we had a little API so Component implementors can implement a simple method in EndpointCompleter to expose completions for UIs/tools/shell.s 


Think of it as like bash completion but for endpoint names/paths.


e.g. imagine a command where you want to create or send to an endpoint; picking the component name, you then need to be able to pick which queue/directory/table to use.


This patch adds a simple API to the ComponentConfiguration API and to the MBean","jstrachan:1369359671:2013-05-24T09:41:11.096+0000:1369359671:2013-05-24T09:41:11.096+0000:I've added some documentation on how to use & implement the API in the wiki: https://cwiki.apache.org/confluence/display/CAMEL/EndpointCompleter
alanfoster:1369385141:2013-05-24T16:45:41.348+0000:1369385141:2013-05-24T16:45:41.348+0000:Hey James, I seem to be getting a 404 for the 'ComponentConfiguration' link pointing to http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/ComponentConfiguration.html

Cheers
bvahdat:1369392201:2013-05-24T18:43:21.514+0000:1369392201:2013-05-24T18:43:21.514+0000:[ComponentConfiguration|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob_plain;f=camel-core/src/main/java/org/apache/camel/ComponentConfiguration.java;hb=master] will be part of the upcoming 2.12.0 release. However the online Javadoc is about the Camel 2.11.0 release.

So when 2.12.0 is out the door we will updated the online Javadoc which should turn that 404 to a 200. As an example see CAMEL-5991.

alanfoster:1369550819:2013-05-26T14:46:59.925+0000:1369550819:2013-05-26T14:46:59.925+0000:Ah, good call! Thanks Babak :)"
0,CAMEL-6390,Bug,Major,2.10.0,None,"
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Vitalii Tymchyshyn,0,2,2013-05-23 12:58:20+00:00,2013-05-30 09:12:29+00:00,"Route with suspended SedaConsumer can't be stopped correctly. Here is test:



 @Test
    public void testOriginalSedaShutdownSuspended() throws Exception {
        SedaEndpoint endpoint = context().getEndpoint(""seda:test"", SedaEndpoint.class);
        context().addRouteDefinition(new RouteDefinition()
                .id(""testRoute"")
                .from(endpoint)
                .to(""log:body"")
        );
        Set<SedaConsumer> consumers = endpoint.getConsumers();
        Assert.assertFalse(consumers.isEmpty());
        for (SedaConsumer sedaConsumer: consumers) {
            sedaConsumer.suspend();
        }
        Assert.assertTrue(context().stopRoute(""testRoute"", 2, TimeUnit.SECONDS, true));
    }","davsclaus:1369438137:2013-05-25T07:28:57.812+0000:1369438137:2013-05-25T07:28:57.812+0000:Works fine. Even if its suspended it may need more than 2 sec to stop properly.
tivv:1369615708:2013-05-27T08:48:28.161+0000:1369615708:2013-05-27T08:48:28.161+0000:It does not work. Original test does not send any message.
Your test also does not work if it either: 
1) Does not send any message
2) Sleep 2000ms after suspension. (that is better as ""do not send"" works on some timing clash, see below)

To be clear:
a) 2000ms is used since default poll timeout is 1000ms. For real test, poll timeout can be lowered down and sleep after suspension used.
b) you test works because it does not have time to exit from queue.pool to really suspend polling thread. 
c) The actual problem is that SedaConsumer first check isSuspending/isSuspended and go for next circle if it is. Shutdown check is done later (after queue.poll), so when suspended it never reaches this shutdown check.
tivv:1369615787:2013-05-27T08:49:47.532+0000:1369615787:2013-05-27T08:49:47.532+0000:The committed test do not show the problem, see my previous comment
davsclaus:1369876349:2013-05-30T09:12:29.526+0000:1369876349:2013-05-30T09:12:29.526+0000:Thanks I have added additional check"
0,CAMEL-6389,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Guillaume Nodet,Guillaume Nodet,0,1,2013-05-23 09:29:46+00:00,2013-05-23 09:34:04+00:00,No Desc,"gnodet:1369272844:2013-05-23T09:34:04.854+0000:1369272844:2013-05-23T09:34:04.854+0000:Fixed in http://git-wip-us.apache.org/repos/asf/camel/commit/6c3f812a
"
0,CAMEL-6388,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Willem Jiang,0,1,2013-05-23 07:00:41+00:00,2013-06-03 08:46:18+00:00,No Desc,njiang:1370220378:2013-06-03T08:46:18.967+0000:1370220378:2013-06-03T08:46:18.967+0000:Applied the patch into master branch.
0,CAMEL-6387,Improvement,Major,2.11.0,,"
None
",Resolved,Duplicate,None,Claus Ibsen,Aaron Whiteside,0,2,2013-05-22 23:11:27+00:00,2013-09-30 13:07:16+00:00,"Implement JndiRegistry.findByTypeWithName() and findByType() using javax.naming.Context.list("""").",matriv:1380462724:2013-09-29T21:52:04.210+0000:1380462724:2013-09-29T21:52:04.210+0000:Duplicate of https://issues.apache.org/jira/browse/CAMEL-6769 which has already been resolved.
0,CAMEL-6386,New Feature,Minor,None,None,"
None
",Resolved,Duplicate,2.13.0,Unassigned,Xavier Marin,0,2,2013-05-22 15:53:46+00:00,2014-03-12 08:22:48+00:00,"Hi, here's a camel-kafka component : http://giwi.free.fr/docs/camel-kafka/","davsclaus:1369545159:2013-05-26T13:12:39.492+0000:1369545159:2013-05-26T13:12:39.492+0000:Hi

I suggest you keep coding on this component until you think its stable and ready. Then you can work on cotributing this to Apache.
See this page for details: http://camel.apache.org/add-new-component-guide.html
giwi:1369645883:2013-05-27T17:11:23.527+0000:1369645883:2013-05-27T17:11:23.527+0000:Hi, yes, it needs some improvements. I must do some refactoring to accept anay version of kafka. 
davsclaus:1394583768:2014-03-12T08:22:48.399+0000:1394583768:2014-03-12T08:22:48.399+0000:There is a new camel-kafka component in Camel 2.13 onwards."
0,CAMEL-6385,Bug,Critical,2.11.0,,"
None
",Resolved,Fixed,None,Willem Jiang,Yuejie Chen,0,2,2013-05-21 16:15:06+00:00,2013-05-24 13:36:45+00:00,"If a route with restlet endponit is created after restlet server is started, restlet can't handle the endpoint correctly, because restlet translate all URI pattern of routes at server starting, but don't it for later attached routes. So we must translate the URI pattern before attach it to restlet after restlet server is started. See http://restlet.tigris.org/issues/show_bug.cgi?id=988.","njiang:1369291523:2013-05-23T14:45:23.678+0000:1369291523:2013-05-23T14:45:23.678+0000:Applied the patch into master, camel-2.11.x and camel-2.10.x with thanks to Yuejie."
0,CAMEL-6384,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-05-21 09:26:44+00:00,2013-05-23 09:14:26+00:00,"This allows tooling such as karaf commands / others to do Camel EIP debugging.


We have org.apache.camel.spi.Debugger for SPI. What we need is a JMX layer to make it friendly for tooling.","davsclaus:1369271666:2013-05-23T09:14:26.635+0000:1369271666:2013-05-23T09:14:26.635+0000:Added docs at
https://cwiki.apache.org/confluence/display/CAMEL/BacklogDebugger"
0,CAMEL-6383,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-05-21 08:56:58+00:00,2013-05-21 12:23:54+00:00,"We should not include tracer mbean/wrapped processor out of the box. As that just adds longer stacktraces and unnessasary processor wrappings.


If people want to use the tracer they should explicit enable it on CamelContext by setting tracing=true.",
0,CAMEL-6382,New Feature,Minor,2.11.0,,"
None
",Resolved,Duplicate,None,Willem Jiang,Saurabh,0,2,2013-05-20 10:06:18+00:00,2013-05-20 13:46:54+00:00,Current implementation of Camel-AWS-SQS does not allow to make use of other implementations of AmazonSQS. For example AmazonSQSBufferedAsyncClient can't be used in current for of implementation.,"saurabhksingh:1369015612:2013-05-20T10:06:52.036+0000:1369015612:2013-05-20T10:06:52.036+0000:I have made the fix and is available at https://github.com/apache/camel/pull/15
njiang:1369028814:2013-05-20T13:46:54.163+0000:1369028814:2013-05-20T13:46:54.163+0000:This issue is resolved in CAMEL-6177 few months ago."
0,CAMEL-6381,Improvement,Minor,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,1,2,2013-05-20 06:22:10+00:00,2013-10-17 09:13:22+00:00,"See
http://stackoverflow.com/questions/16615826/camel-bindy-csv-with-field-concatination


Sometimes the CSV file has data at the end which can be arbitrary length and may even contain comma or other value, eg a log message or something like that.


We would need an option you can set on the @DataField to tell bindy to just grab the data till end of line as is.","asbjorn@aarrestad.com:1381800483:2013-10-15T09:28:03.427+0000:1381800483:2013-10-15T09:28:03.427+0000:Added pull-request for this one
https://github.com/apache/camel/pull/49
davsclaus:1381972402:2013-10-17T09:13:22.010+0000:1381972402:2013-10-17T09:13:22.010+0000:Thanks for the patch."
0,CAMEL-6380,New Feature,Major,2.11.0,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Aaron Whiteside,0,5,2013-05-20 01:11:57+00:00,2017-03-03 13:34:39+00:00,"Allow custom elements to be defined and used in Camel's XML configuration.


The use case I have is that we have a fair number of Processor's that take various options and we dynamically load and unload routes from external XML files (not in any spring contexts). 


Currently we do this by reimplementing Camel's loadRoutesDefinition() method, and supplying additional packages when creating the JAXBContext. It would be good is there were an officially supported mechanism to do this.


We place our custom *Definitions in separate namespaces.


I imagine it wouldn't be too hard to add support to Camel to look for a specific  META-INF/services file and add the additional packages contained within to the JAXBContext, when it is created.


I guess this also means the structure of *Definition classes would need to be documented to allow others to take advantage of them.","njiang:1368991018:2013-05-20T03:16:58.321+0000:1368991018:2013-05-20T03:16:58.321+0000:Even Camel can load extensions jaxb context, I don't think it is easy to add the schema validation and customer parser in current Camel 2.x architecture.
Maybe we can consider it as new feature of Camel 3.0. 
aaronjwhiteside:1369856312:2013-05-30T03:38:32.988+0000:1369858668:2013-05-30T04:17:48.046+0000:Do you mean Camel currently supports loading XML routing definition extensions, if so how?

What I propose shouldn't need a schema validator, JAXB will take care of that the way it does now if you supply incorrect XML. I think all the changes could be made in a class like ModelHelper, and update everything to use it to get the JAXBContext.

I've been looking at the following classes CamelNamespaceHandler, ModelHelper and DefaultCamelContext.loadRoutesDefinition()..

I see 11 usages of JAXBContext.newInstance() in the Camel project (and I think about 4-5 of those we would need to change) that should be changed to use ModelHelper to create the JAXBContext. Then after that we can make ModelHelper pickup the custom packages to use from META-INF/services/org/apache/camel/model/* or some such location.

githubbot:1412808040:2014-10-09T06:40:40.182+0000:1412808040:2014-10-09T06:40:40.182+0000:GitHub user aaronjwhiteside opened a pull request:

    https://github.com/apache/camel/pull/297

    Initial take on CAMEL-6380

    Created a ModelJAXBContextFactory and replaced all usages of JAXBContext.newInstance() with a call to the factory.
    
    This would be the first step in a multistep change, wanted to get feedback on what I have done so far..

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aaronjwhiteside/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/297.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #297
    
----
commit c72d335f066dd041b3abb57937f37fdc7e860357
Author: Aaron Whiteside <aaronjwhiteside@gmail.com>
Date:   2014-10-09T06:12:40Z

    Initial take on CAMEL-6380
    Created a ModelJAXBContextFactory and replaced all usages of JAXBContext.newInstance() with a call to the factory.

----

aaronjwhiteside:1412808165:2014-10-09T06:42:45.350+0000:1412808165:2014-10-09T06:42:45.350+0000:Submitted pull request #297, initial step in the direction of allowing custom xml extensions..
davsclaus:1423898498:2015-02-14T15:21:38.742+0000:1423898498:2015-02-14T15:21:38.742+0000:Thanks Aaron, I have just merged the jaxb context factory so we got that.

This can come handy when we take a stab at generating per component schema for configuring the components / endpoints using XML style.
githubbot:1425581263:2015-03-06T02:47:43.561+0000:1425581263:2015-03-06T02:47:43.561+0000:Github user aaronjwhiteside closed the pull request at:

    https://github.com/apache/camel/pull/297
"
0,CAMEL-6379,Improvement,Minor,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Babak Vahdat,Claus Ibsen,0,2,2013-05-19 08:06:03+00:00,2013-05-27 12:25:47+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-JacksonDataFormat-configuration-in-Spring-XML-tp5732801.html


We need a jsonView attribute so people can configure this directly in <json>.",bvahdat:1369628747:2013-05-27T12:25:47.253+0000:1369628747:2013-05-27T12:25:47.253+0000:Added [two examples|http://camel.apache.org/json#JSON-Include%2FExcludefieldsusingthe%7B%7BjsonView%7D%7Dattributewith%7B%7BJacksonDataFormat%7D%7D] on the Wiki.
0,CAMEL-6378,Improvement,Major,2.12.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-05-18 14:31:27+00:00,2013-08-22 07:14:16+00:00,"When you use Java DSL then the order how you specify transacted / policy / onException matter. 


In XML DSL (we have a chance to fix this internally in Camel, so the order there doesnt not matter as much).


We should add validation to the Java DSL so people can configure this correctly. Otherwise we just have too much on our plate to support any kind of order of all these cross cutting functionality being used in the DSL.


Here is an unit test that required a chance to work correctly (eg onException should be first)



--- a/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionT
+++ b/components/camel-spring/src/test/java/org/apache/camel/spring/interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionT
@@ -28,22 +28,22 @@ public class TransactionalClientDataSourceTransactedWithLocalOnExceptionTest ext
         return new SpringRouteBuilder() {
             public void configure() throws Exception {
                 from(""direct:okay"")
-                    .transacted()
                     // use local on exception
                     .onException(IllegalArgumentException.class)
                         .handled(false)
                         .to(""mock:error"")
                     .end()
+                    .transacted()
                     .setBody(constant(""Tiger in Action"")).beanRef(""bookService"")
                     .setBody(constant(""Elephant in Action"")).beanRef(""bookService"");

                 from(""direct:fail"")
-                    .transacted()
                     // use local on exception
                     .onException(IllegalArgumentException.class)
                         .handled(false)
                         .to(""mock:error"")
                     .end()
+                    .transacted()
                     .setBody(constant(""Tiger in Action"")).beanRef(""bookService"")
                     .setBody(constant(""Donkey in Action"")).beanRef(""bookService"");",davsclaus:1377126856:2013-08-22T07:14:16.552+0000:1377126856:2013-08-22T07:14:16.552+0000:CAMEL-6659 has a better solution.
0,CAMEL-6377,Improvement,Major,2.12.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,4,2013-05-18 14:23:46+00:00,2014-09-09 13:08:25+00:00,"We can optimize the Camel routing engine internally, and redue the need for wrapping processors (those internally used for cross cutting functionality) where they would wrap each other one by one; which then results in larger call stacks during routing.


This also shows to end users when stacktraces is being logged etc, as they tend to be a bit longer with many internal calls.


Though the JVM optimizes this at runtime as it can inline the calls and whatnot. But the stacktraces is still shown expanded.","davsclaus:1368858328:2013-05-18T14:25:28.105+0000:1368858328:2013-05-18T14:25:28.105+0000:Here is a simple sample route
{code}
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""seda:start"")
                        .to(""log:foo"")
                        .to(""log:bar"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                try {
                                    throw new IllegalArgumentException(""Forced to dump stacktrace"");
                                } catch (Exception e) {
                                    e.printStackTrace();

                                    StringWriter sw = new StringWriter();
                                    PrintWriter pw = new PrintWriter(sw);
                                    e.printStackTrace(pw);

                                    String s = sw.toString();
                                    Scanner scanner = new Scanner(s);
                                    scanner.useDelimiter(""\n"");
                                    int count = 0;
                                    while (scanner.hasNext()) {
                                        scanner.next();
                                        count++;
                                    }
                                    System.out.println(""There is "" + count + "" lines in the stacktrace"");
                                }
                            }
                        })
                        .to(""mock:result"");
            }
        };
    }
{code}

Which then in Camel 2.11.0 has 40 lines in the stacktrace
{code}
ava.lang.IllegalArgumentException: Forced to dump stacktrace
	at org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1.process(ReduceStacksNeededDuringRoutingTest.java:55)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:183)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
There is 40 lines in the stacktrace
{code}

And with (only partly optimized) on trunk we have 28 lines:
{code}
java.lang.IllegalArgumentException: Forced to dump stacktrace
	at org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1.process(ReduceStacksNeededDuringRoutingTest.java:55)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:391)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:137)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:350)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:47)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:151)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:118)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:137)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:279)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:186)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
There is 28 lines in the stacktrace
{code}
davsclaus:1369012041:2013-05-20T09:07:21.931+0000:1369888494:2013-05-30T12:34:54.729+0000:Things to do:

1. Naming the API is hard so the names is not set in stone. (*done*)
2. Passing state from before -> after, is the current approach fine? *(done)* (yes this works well)
3. All the current tasks are in the same parent class, this gives a full overview of the ones we have. Should we put them in separate classes, and in a sub package? (*done*) (keep in one class = easy overview, and classes is internal only)
4. Migrate JMX InstrumentationProcessor to a new task *(done for route, not possible yet for each processor due we keep track of redeliveries as well)*
5. Migrate Tracer to a new task (a bit harder as it has some custom tracer factory and whatnot) (the tracer is a bit ugly and should be ditched for Camel 3.0 and rewritten - or just rely on backlog tracer) *(done by disabling tracer out of the box)*
6. Add more javadoc to the API if missing (*done*)
7. Look at DefaultChannel and see if we should merge/migrate it with this new stuff. *(done)* (now DefaultChannel extends CamelInternalProcessor)
8. And consider dropping the Channel name as it was a pseudo name, and EIP term for Channel is better for external communication. Its only internal so end users is not affected. *(for camel 3.0)*
9. All together its important to be backwards compatible and only do internal optimizations. *(done)*
10. Optimized EIPs which would create wrapped UnitOfWorkProcessor, to use internal processor task instead (*done*)
11. Migrate UnitOfWorkProcessor to CamelInternalProcessor, and remove these classes when no longer needed (*done*)
12. for direct derived classes of AsyncDelegateProcessor, replace super.process(exchange, callback) with processor.process(exchange, callback) as it avoids a useless method call (*done*)
13. on wrap when really needed in Policy / Transaction Definition (*done*)
14. optimize WrapProcessor to avoid using AsyncProcessorHelper when wrapped processor is not asynchronous. (*only partially possible*)
15. optimize InstrumentationProcessor to detect if target processor is Async or Sync, and call it directly and accordingly (this avoids the bridge) (*done*)
16. RedeliveryErrorHandler can avoid the processErrorHandler method and reduce one stack-frame (*done*)
17. When calling a Processor using process then we should optimize that for sync vs async and be able to drop 1 frame by avoiding the bridge when in sync mode. (*done*)
18. fix the remaining processors not implementing AsyncProcessor to avoid wrapping (SetBody, Transform, Aggregate, Marshall ...) (*done*)
davsclaus:1369012711:2013-05-20T09:18:31.621+0000:1369012711:2013-05-20T09:18:31.621+0000:Ad 1)
I think the API names for
- org.apache.camel.processor.CamelInternalProcessor
- org.apache.camel.processor.CamelInternalProcessorTask

is open for suggestions for new names. They were named *internal* by purpose to indicate its for internal use only.

We can ponder about this for a bit.
davsclaus:1369087568:2013-05-21T06:06:08.728+0000:1369710891:2013-05-28T11:14:51.021+0000:We are down to 14 when JMX is disabled, and 15 if JMX is enabled
{code}
2013-05-28 13:14:19,165 [ - seda://start] INFO  tacksNeededDuringRoutingTest$1 - There is 14 lines in the stacktrace
2013-05-28 13:14:19,166 [ - seda://start] ERROR tacksNeededDuringRoutingTest$1 - Dump stacktrace to log
java.lang.IllegalArgumentException: Forced to dump stacktrace
	at org.apache.camel.processor.ReduceStacksNeededDuringRoutingTest$1$1.process(ReduceStacksNeededDuringRoutingTest.java:63)
	at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:388)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:174)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:174)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:276)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:138)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
{code}
raulvk:1369186179:2013-05-22T09:29:39.949+0000:1369186179:2013-05-22T09:29:39.949+0000:After syncing up with [~davsclaus] on IRC, I'll contribute to the following tasks from the to-do list above: 1-3, 7.

Additional places where to hunt for wrapping:

- Policy / Transaction Definition
- Inline processors are currently wrapped in WrapProcessor for JMX registration. Can be optimised by offering an abstract ProcessorSupport class for processors to extend.
- EIP processors that wrap logic in a UnitOfWorkProcessor: Wire Tap, Aggregator, Splitter, etc. Optimisable.
gnodet:1369304717:2013-05-23T18:25:17.614+0000:1369304900:2013-05-23T18:28:20.035+0000:Two other things that I have started doing locally:
  * for direct derived classes of AsyncDelegateProcessor, replace super.process(exchange, callback) with processor.process(exchange, callback) as it avoids a useless method call
  * fix the remaining processors not implementing AsyncProcessor to avoid wrapping (SetBody, Transform, Aggregate, Marshall ...)

I can work on that if nobody has any objection or wants to do it.

davsclaus:1369352835:2013-05-24T07:47:15.908+0000:1369352835:2013-05-24T07:47:15.908+0000:Guillaume yeah this sounds good. Fell free to work on it. 
davsclaus:1369352913:2013-05-24T07:48:33.858+0000:1369352913:2013-05-24T07:48:33.858+0000:And maybe some of the EIPs implement AsyncProcessor may not need it, if they are simple actions, like SetBody etc.


davsclaus:1369353097:2013-05-24T07:51:37.524+0000:1369353097:2013-05-24T07:51:37.524+0000:And if we really wanna dig deep, then we can look at where we use code like this:
{code}
            AsyncProcessor async = AsyncProcessorConverterHelper.convert(processor);
{code}

The problem is that then we would need to deal with both plain Processor and AsyncProcessor in the EIPs and call them accordingly, either plain or async. And that complicates the EIP code a bit more. Where as the code above makes it easy for the EIPs.
davsclaus:1369546887:2013-05-26T13:41:27.524+0000:1369546887:2013-05-26T13:41:27.524+0000:I have migrated the code to no longer use the UnitOfWorkProcessor as wrapped processor, eg bullet #11 in the task list.
davsclaus:1369550980:2013-05-26T14:49:40.344+0000:1369550980:2013-05-26T14:49:40.344+0000:I got these fixed as well now, since I have been optimize the code all day along
- for direct derived classes of AsyncDelegateProcessor, replace super.process(exchange, callback) with processor.process(exchange, callback) as it avoids a useless method call
davsclaus:1369713439:2013-05-28T11:57:19.433+0000:1369719707:2013-05-28T13:41:47.644+0000:The following EIPs/processor in camel-core should be migrated to AsyncProcessor *done*
- BatchProcessor
- CamelLogger
- CamelLogProcessor
- ConvertBodyProcessor
- ExchangePatternProcessor
- MarshalProcessor
- OnCompletionProcessor
- PollEnricher
- RollbackProcessor
- SetBodyProcessor
- SortProcessor
- StopProcessor
- StreamResequencer
- ThroughputLogger
- ThrowExceptionProcessor
- TransformProcessor
- UnmarshalProcessor
- AggregateProcessor
- LoadBalancerSupport
- ValidatingProcessor
davsclaus:1369789334:2013-05-29T09:02:14.811+0000:1369789334:2013-05-29T09:02:14.811+0000:We can optimize a number of internal producers, that can only send to internal routes (eg seda / direct) to not use the unit of work producer from the producer cache, as its not needed. The routes they send to has already UoW.

davsclaus:1369791035:2013-05-29T09:30:35.713+0000:1374988369:2013-07-28T13:12:49.350+0000:We can/shoulder optimize SendProcessor (eg the to in routes) which is used a lot. It uses a producer cache under the hood for sending. Though this logic is most really needed for producer that needs to be pooled etc. We can optimize the logic and have a faster executing for non pooled producers.

This can reduce 4 stackframes to 1 instead. *done*
davsclaus:1374965765:2013-07-28T06:56:05.865+0000:1374988330:2013-07-28T13:12:10.441+0000:Delayer could be optimized to avoid the wrapping. *done*
davsclaus:1374969300:2013-07-28T07:55:00.584+0000:1374969300:2013-07-28T07:55:00.584+0000:HandleFault would require logic alike StreamCaching with org.apache.camel.util.MessageHelper#resetStreamCache to allow redeliver error handler to trigger logic to handle faults. 

Though as handle fault is more seldom used, then its possible okay with the wrapping.
davsclaus:1374973396:2013-07-28T09:03:16.452+0000:1374988342:2013-07-28T13:12:22.091+0000:SendProcessor optimization *done*

*before*
{code}
2013-07-28 11:02:39,230 [ - seda://start] INFO  ngSendProcessorTest$MyProducer - There are 16 lines in the stacktrace
2013-07-28 11:02:39,231 [ - seda://start] ERROR ngSendProcessorTest$MyProducer - Dump stacktrace to log
java.lang.IllegalArgumentException: Forced to dump stacktrace
	at org.apache.camel.processor.ReduceStacksNeededDuringRoutingSendProcessorTest$MyProducer.process(ReduceStacksNeededDuringRoutingSendProcessorTest.java:102)
	at org.apache.camel.processor.SendProcessor$1.doInAsyncProducer(SendProcessor.java:101)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:96)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:293)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:202)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:149)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
{code}

*after*
{code}
2013-07-28 11:09:56,882 [ - seda://start] INFO  ngSendProcessorTest$MyProducer - There are 14 lines in the stacktrace
2013-07-28 11:09:56,884 [ - seda://start] ERROR ngSendProcessorTest$MyProducer - Dump stacktrace to log
java.lang.IllegalArgumentException: Forced to dump stacktrace
	at org.apache.camel.processor.ReduceStacksNeededDuringRoutingSendProcessorTest$MyProducer.process(ReduceStacksNeededDuringRoutingSendProcessorTest.java:102)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:99)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:192)
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:293)
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:202)
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:149)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)
{code}
davsclaus:1374995312:2013-07-28T15:08:32.858+0000:1374995312:2013-07-28T15:08:32.858+0000:We have a lot optimized now. This is a great win for Camel 2.12. So lets keep this as is."
0,CAMEL-6376,Bug,Minor,2.11.0,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Guillaume Nodet,0,2,2013-05-17 11:38:49+00:00,2016-04-28 13:54:21+00:00,The reason is that doCatch returns the TryDefinition and the handled() implementation does not support block definitions.,davsclaus:1377211337:2013-08-23T06:42:17.229+0000:1377211384:2013-08-23T06:43:04.173+0000:handled is @deprecated on try .. catch. Maybe its just a known issue as its deprecated.
0,CAMEL-6375,Bug,Major,2.10.4,None,"
None
",Resolved,Fixed,"2.11.1, 2.12.0",Willem Jiang,clement tamisier,2,3,2013-05-17 08:27:38+00:00,2013-05-17 13:14:02+00:00,"If I define a route like this: 


from(""<MyUrl>/test"") 
.setHeader(Exchange.HTTP_RESPONSE_CODE, simple(""400"")); 
my http client get a 200 response code. 


If a add something else on the route like: 
from(""<MyUrl>/test"") 
.setHeader(Exchange.HTTP_RESPONSE_CODE, simple(""400"")) 
.log(""400"").
my http client get a 400 response code as expected. 


forum :
http://camel.465427.n5.nabble.com/route-http-code-td5732728.html","njiang:1368752168:2013-05-17T08:56:08.595+0000:1368752168:2013-05-17T08:56:08.595+0000:What's your from(""<MyUrl>/test"")  looks like, which kind of camel component are you using?
After check the code of DefaultHttpBinding, I didn't found anything wrong.
I just did a quick test on the camel trunk, camel-2.10.x branch, I cannot reproduce the error.
clement tamisier:1368752733:2013-05-17T09:05:33.779+0000:1368752908:2013-05-17T09:08:28.753+0000:I am using ""servlet"" component.
and it works if I use setOutHeader (which is deprecated).
I'll provide soon a test case.
davsclaus:1368761761:2013-05-17T11:36:01.322+0000:1368761761:2013-05-17T11:36:01.322+0000:Ah we have fixed this in the http/servlet/jetty component recently.

Though ideally the org.apache.camel.builder.ProcessorBuilder should check for OUT vs IN; currently looking into that.
njiang:1368764468:2013-05-17T12:21:08.614+0000:1368764468:2013-05-17T12:21:08.614+0000:This issue should be resolved in CAMEL-6349.
davsclaus:1368767642:2013-05-17T13:14:02.053+0000:1368767642:2013-05-17T13:14:02.053+0000:Fixed the DSL with the setHeader / removeHeaders EIPs to work correctly on OUT or IN"
0,CAMEL-6374,Bug,Major,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-17 07:49:52+00:00,2013-05-17 11:17:47+00:00,"See nabble
http://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-tp5732616.html",
0,CAMEL-6373,Bug,Major,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Ivan Koblik,0,2,2013-05-17 07:36:19+00:00,2013-05-17 11:18:06+00:00,"If there are 2 routes from the same source, e.g.:



CamelContext camelContext = new DefaultCamelContext();
final PrinterBean bean1 = new PrinterBean(""bean1"");
final PrinterBean bean2 = new PrinterBean(""bean2"");
RouteBuilder builder = new RouteBuilder(camelContext) {
    @Override
    public void configure() throws Exception {
        from(""vm:producer?multipleConsumers=true"").routeId(""route1"").bean(bean1);
    }

};
RouteBuilder builder2 = new RouteBuilder(camelContext) {
    @Override
    public void configure() throws Exception {
        from(""vm:producer?multipleConsumers=true"").routeId(""route2"").bean(bean2);
    }
};
camelContext.addRoutes(builder);
camelContext.addRoutes(builder2);




And if after starting the context camelContext.start(); I stop and remove one of the routes the other one will stop working as well.



camelContext.stopRoute(""route2"");
camelContext.removeRoute(""route2"");




These messages will not be delivered to bean1:



System.out.println(""Sending message"");
ProducerTemplate producerTemplate = camelContext.createProducerTemplate();
for (int i = 0; i < 100; i++) {
    producerTemplate.sendBody(""vm:producer?multipleConsumers=true"", i);
}







When debugging I noticed that in SedaEndpoint on line 144 it stops shared MulticastProcessor used by the both routes.


Please see this post to get the entire source file:
http://camel.465427.n5.nabble.com/Removing-route-stops-other-routes-from-the-same-producer-td5732616.html",davsclaus:1368760686:2013-05-17T11:18:06.215+0000:1368760686:2013-05-17T11:18:06.215+0000:Thanks for reporting.
0,CAMEL-6372,Improvement,Minor,None,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-17 07:00:06+00:00,2013-05-17 07:17:00+00:00,"See
http://camel.465427.n5.nabble.com/Camel-KratiConsumer-throw-OutOfMemory-tp5732669.html


This can be used for people to limit the poll so we wont read too much data in one poll.",davsclaus:1368746220:2013-05-17T07:17:00.852+0000:1368746220:2013-05-17T07:17:00.852+0000:There is now a maxMessagesPerPoll option you can use
0,CAMEL-6371,Improvement,Major,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Guillaume Nodet,Guillaume Nodet,0,1,2013-05-16 09:25:39+00:00,2013-05-17 12:18:35+00:00,No Desc,gnodet:1368764315:2013-05-17T12:18:35.150+0000:1368764315:2013-05-17T12:18:35.150+0000:Fixed in http://git-wip-us.apache.org/repos/asf/camel/commit/d2b9cfab
0,CAMEL-6370,Improvement,Major,2.11.0,"2.10.5, 2.11.1, 2.12.0","
None
",Closed,Fixed,"2.10.5, 2.11.1, 2.12.0",Christian Müller,Mayank Gupta,0,2,2013-05-16 08:42:16+00:00,2013-06-14 15:46:58+00:00,"Hello All , 


I am currently working on a project requirement to send the Optional Parameters in Submit_SM/Data_SM to SMSC , but i can't find CamelSmppOptionalParameters Header for Producer Message Headers. I need to send the optional parameter in the Data_SM/Submit_SM , Is there any patch available for this ?","mayank.gupta:1368754981:2013-05-17T09:43:01.050+0000:1368755027:2013-05-17T09:43:47.059+0000:Sending optional parameter in Submit_SM/Data_SM is the basic requirement for this smpp component , without optional parameter this component is useless , please try provide patch ASAP.
muellerc:1368759656:2013-05-17T11:00:56.214+0000:1368759656:2013-05-17T11:00:56.214+0000:This component exist since many versions and many people use it without problems. So, it cannot be useless.
If you need a patch asap, I'm afraid you have provide it [1] (look for the chapter ""How to get help faster"") + [2]. Otherwise I will work on it in my spare time if I find some time and do not consider other issues as more important.

[1] http://camel.apache.org/support.html
[2] http://camel.apache.org/contributing.html 

muellerc:1369919927:2013-05-30T21:18:47.548+0000:1369919927:2013-05-30T21:18:47.548+0000:Now, DataSm also return the provided OptinalParameter from the SMSC.
mayank.gupta:1371010457:2013-06-12T12:14:17.684+0000:1371010457:2013-06-12T12:14:17.684+0000:Thanks Christian for great job , But when will community release the fixed camel version for TLV parameters , so that i can used new camel version in my current project requirement.

muellerc:1371196018:2013-06-14T15:46:58.016+0000:1371196018:2013-06-14T15:46:58.016+0000:See http://camel.465427.n5.nabble.com/DISCUSS-Apache-Camel-2-10-5-release-td5732579.html"
0,CAMEL-6369,Bug,Minor,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Dietmar Schinnerl,0,2,2013-05-16 08:35:08+00:00,2013-05-17 06:50:34+00:00,"Before 2.11.0 it was possible to configure GsonDataFormat to use an externally created and configured Gson instance. (Which was especially necessary since it was not possible to configure via GsonDataFormat.) But in 2.11.0 GsonDataFormat implements ServiceSupport which breaks this. Because doStart always creates a new Gson instance although one has been given by a constructor call.


Probably a 



if (this.gson == null) {
  // ... old doStart body ...
}




could do in doStart method.","davsclaus:1368742286:2013-05-17T06:11:26.987+0000:1368742286:2013-05-17T06:11:26.987+0000:Thanks for reporting. 

Would you work on a patch to fix this?
wd_dietmar:1368743491:2013-05-17T06:31:31.282+0000:1368743491:2013-05-17T06:31:31.282+0000:You're welcome.

Patch... not really... :| but following workaround works, so I'm pretty sure it's just the above mentioned if which is missing.

{code:java}
package org.apache.camel.component.gson;

import com.google.gson.Gson;

// Workaround for https://issues.apache.org/jira/browse/CAMEL-6369
public class WorkaroundGsonDataFormat extends GsonDataFormat {

  Gson gson;

  public WorkaroundGsonDataFormat(Gson gson, Class<?> unmarshalType) {
    super(gson, unmarshalType);
    this.gson = gson;
  }

  @Override
  protected void doStart() throws Exception {
    if (this.gson == null) {
      super.doStart();
    }
  }

}
{code}
davsclaus:1368744634:2013-05-17T06:50:34.740+0000:1368744634:2013-05-17T06:50:34.740+0000:Thanks for reporting"
0,CAMEL-6368,Improvement,Major,None,"2.12.1, 2.13.0","
None
",Resolved,Fixed,"2.12.1, 2.13.0",Claus Ibsen,Claus Ibsen,0,2,2013-05-16 07:37:00+00:00,2013-09-18 13:31:00+00:00,"See CAMEL-6366


We need a similar option for the camel-jdbc component as well.","davsclaus:1377396178:2013-08-25T10:02:58.742+0000:1377396178:2013-08-25T10:02:58.742+0000:Contributions is welcome.
sachin.handiekar:1379410020:2013-09-17T17:27:00.611+0000:1379410020:2013-09-17T17:27:00.611+0000:Hi,

I've attach the patch file for this feature. 

I've updated the JdbcProducer and added unit test to cover the use-cases (e.g. SelectOne and SelectList)

Let me know if there is anything I need to change.

Sachin
davsclaus:1379480582:2013-09-18T13:03:02.338+0000:1379480582:2013-09-18T13:03:02.338+0000:Thanks for the patch.
davsclaus:1379482260:2013-09-18T13:31:00.332+0000:1379482260:2013-09-18T13:31:00.332+0000:I added support for the outputClass option as well, so we have similar functionality like the SQL component."
0,CAMEL-6367,Bug,Major,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Not A Problem,"2.11.1, 2.12.0",Claus Ibsen,jeff,0,3,2013-05-16 07:30:29+00:00,2013-05-27 07:32:06+00:00,"A new option is available for the stream:file to close it when done (closeOnDone). This option is appeared in 2.11 after my jira (https://issues.apache.org/jira/browse/CAMEL-6147)


File unlock (or released or closed) looks to doesn't works fine if last line is not passed to the endpoint


Example :


We have a CSV with X line. We want to write a part of it in a file out_1.csv and a second part in a file out_2.csv according to a business rule, in my example the rule is after two lines readed.


An example is : 


from(""file://C:/Temp/camel/rep1/?noop=true"")
    .log(""start process file => ${file:name}"")
    .split()
    .tokenize(""\n"")
        .streaming()
        .process(new Processor() {


            public void process(Exchange exchange) throws Exception {
               // After 2 lines, next lines are rejected via an exchange property
               i++ ; 
               if( i  > 2)  

{
                   exchange.setProperty(""FILE_1"", true );
               }

 else 

{
                   exchange.setProperty(""FILE_1"", false);
               }

            }
       })
       .choice()
       .when(property(""FILE_1"").isEqualTo(Boolean.TRUE))
           .to(""stream:file?fileName=C:/Temp/camel/rep1/out/out_1.csv&closeOnDone=true"")
       .when(property(""FILE_2"").isEqualTo(Boolean.TRUE))
            .to(""stream:file?fileName=C:/Temp/camel/rep1/out/out_2.csv&closeOnDone=true"")
       .end()
    .end()
.log(""end process file => ${file:name}"")
.end()
;


It create two files, and out_1.csv is still locked.


Solution : Seems like the logic in stream producer should sync (lock) and not per method which is wrong.
Or maybe better yet do not have a shared output stream.


By the way, the problem appears not on if there are two files. It appears if the last exchange is not passed to the endpoint.


Example with only one file : 


from(""file://C:/Temp/camel/rep1/?noop=true"")
     .split()
     .tokenize(""\n"")
     .streaming()
          .process(new Processor() {


               public void process(Exchange exchange) throws Exception {
                    // After 2 lines, next lines are rejected via an
                    // exchange property
                    i++;
                    if (i > 2) 

{
                         exchange.setProperty(""FILE_1"", false);
                    }

 else 

{
                         exchange.setProperty(""FILE_1"", true);
                    }

               }
          })
          .choice()
          .when(property(""FILE_1"").isEqualTo(Boolean.TRUE))
          .to(""stream:file?fileName=C:/Temp/camel/rep1/out/out_1.csv&closeOnDone=true"")
          .end()
     .end()
.end();","njiang:1368990819:2013-05-20T03:13:39.052+0000:1368990819:2013-05-20T03:13:39.052+0000:I think you need to update your customer processor, to send the exchange to both file endpoint if you got the last exchange from the spliter. 
0jeff0:1369015452:2013-05-20T10:04:12.397+0000:1369015452:2013-05-20T10:04:12.397+0000:Thanks Willem,

As you can imagine, this example is just for explication.  We have a cascade ( lines are process by more than 20 routes to enrich, reject, validate etc ) of direct route to process line of CSV file.  

The fact that process reject or not a line is based on business rules which dones't care of if it is the first or the last line. If I send the exchange to both endpoint if it is the last line then  I duplicate the information in two "" direction "" which while cause dublication in the rest of the file processing . 


Is there an elegant way to inform the file stream to close if it is the last line ( even if for me it is not  to the camel user to manage the file used by the framework ) ?   

0jeff0:1369093547:2013-05-21T07:45:47.545+0000:1369093547:2013-05-21T07:45:47.545+0000:Hi Willem, 

I hav found a solution, based on the idea of send the exchange to both endpoint : 

public void configure() throws Exception {

		// Properties
		final String PROP_WRITE_IN_FILE_1 = ""PROP_WRITE_IN_FILE_1"";
		final String PROP_WRITE_IN_FILE_2 = ""PROP_WRITE_IN_FILE_2"";
		
		// Routes 
		final String ROUTE_FILE_1 = ""direct:ROUTE_FILE_1"" ;
		final String ROUTE_FILE_2 = ""direct:ROUTE_FILE_2"" ;
		
		// MAIN ROUTE
		from(""file://C:/Temp/camel/rep1/?noop=true"")
			.log(""start process file => ${file:name}"")
			.split()
			.tokenize(""\n"").streaming().process(new Processor() {

				public void process(Exchange exchange) throws Exception {
					// After 2 lines, next lines are rejected via an
					// exchange property
					i++;
					if (i <= 2) {
						exchange.setProperty(PROP_WRITE_IN_FILE_1, true);
						exchange.setProperty(PROP_WRITE_IN_FILE_2, false);
					} else {
						exchange.setProperty(PROP_WRITE_IN_FILE_1, false);
						exchange.setProperty(PROP_WRITE_IN_FILE_2, true);
					}
				}
			})
			.multicast().parallelProcessing()
				.to(ROUTE_FILE_1  , ROUTE_FILE_2 )
			.end()
			.log(""end process file => ${file:name}"")
		.end();

		// OUT FILE 1
		from(ROUTE_FILE_1)
			.process(new Processor() {
				public void process(Exchange exchange) throws Exception {
					if( ! exchange.getProperty(PROP_WRITE_IN_FILE_1, Boolean.class).booleanValue())
					exchange.getIn().setBody(null);
				}
			})
			.to(""stream:file?fileName=C:/Temp/camel/rep1/out/out_1.csv&closeOnDone=true"")
		.end();

		// OUT FILE 2 
		from( ROUTE_FILE_2)
		.process(new Processor() {
				public void process(Exchange exchange) throws Exception {
					if( ! exchange.getProperty(PROP_WRITE_IN_FILE_2, Boolean.class).booleanValue())
					exchange.getIn().setBody(null);
				}
			})
			.to(""stream:file?fileName=C:/Temp/camel/rep1/out/out_2.csv&closeOnDone=true"")
		.end();

	}


It complicate the process but it works... 

For me camel doesn't manage correctly the Content Based Router from the EIP patterns in the file:stream component 




davsclaus:1369440400:2013-05-25T08:06:40.961+0000:1369440400:2013-05-25T08:06:40.961+0000:Polished the code a bit. Though we sync on the process method so only one thread can use the producer.

And closeOnDone option is only for *one file*.
0jeff0:1369611126:2013-05-27T07:32:06.709+0000:1369611126:2013-05-27T07:32:06.709+0000:
As I said, in my comment, the filestream in the 2.11 version doesn't manage correctly stream even with one file if the last exchange is not passed to the endpoint. 

Good news if your commit solves it.

Jeff"
0,CAMEL-6366,Improvement,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,2,2013-05-16 07:26:48+00:00,2013-08-12 07:04:02+00:00,"When using the sql component, the output is always a List<Map>.


It would be nice if you could configure an option to say its a 



selectForObject
selectForList
selectForMap



Like MyBatis can do.


Also we can consider having a way to store the output on a header instead of altering the body.","saltnlight5:1375372484:2013-08-01T23:54:44.660+0000:1375372484:2013-08-01T23:54:44.660+0000:Hi there,

Attached is a patch for this new feature. I have added two new URI params:

{{outputType=Map|List|Object}} default to {{Map}}

Map - just as original, which generate List of Map output
List - generate List of List. Each inner list is a row record values. No column name will be outputted.
Object - generate a List of user custom object and populate fields from each row of record. When using this, you also need to set {{outputClass}} for the type that will be converted to.

{{outputClass=objectTypeClassName}} default to {{null}}

I have updated both Consumer and Producer to check for these flags and perform output accordingly.

I have also added new unit tests that covered the use cases.

Let me know how this works out for you.

Zemian Deng
davsclaus:1375396165:2013-08-02T06:29:25.247+0000:1375396165:2013-08-02T06:29:25.247+0000:Great work.

Object should be a single object returned, eg if you do a SQL like

select count(*) from my_table

Then using type=selectForObject will set the message body as an Object with the 1st value of the 1st row from the ResultSet.
And I guess if you want to convert to specific value, then yeah having a objectType=Integer eg to tell what Camel should convert the instance to, eg like if you use convertBodyTo in the DSL.

Though we should probably be using names like MyBatis that is more intuitive (I should have used these names in the description when I created this ticket).

type=SelectOne = like selectForObject
type=SelectList = like selectForMap

I am not sure if List<List> makes to much sense. I would rather align this with MyBatis than come up with our own types.
I suggest to check out: http://camel.apache.org/mybatis


saltnlight5:1375444162:2013-08-02T19:49:22.365+0000:1375445062:2013-08-02T20:04:22.358+0000:Hi Claus,

Thanks for the feedback. I added the feature with the assumption that you want something already provided by Spring's JdbcTemplate RowMapper provided. Because underneath the camel-sql is already using JdbcTemplate to query data. Currently the outputType=Object will actually map to an object/bean and auto populate setters from each column using a BeanPropertyRowMapper. I thought it's quiet useful to have this option for user to auto converted a query result to list of user objects.

Anyhow, let me read up little more on mybatis impl and then see if I can fully understand what exactly is that you are asking for here. As of now, I am a bit confused. :)
saltnlight5:1375470030:2013-08-03T03:00:30.124+0000:1375470030:2013-08-03T03:00:30.124+0000:I looked over the camel-mybatis and I see what you mean now. I will modify the patch and use {{outputType}}={{SelectOne}}| {{SelectList}} parameter format, and remove the List of List option per your suggestion.
saltnlight5:1375471554:2013-08-03T03:25:54.796+0000:1375471554:2013-08-03T03:25:54.796+0000:Actually I still have few more questions. 

I see camel-mybatis did not implements the {{SelectMap}}, so I assume you don't want that in this camel-sql yet?

I also have a question on the {{SelectOne}} implementation. Now with camel-mybatis, it's the MyBatis that will auto convert a single result object into an Object as part of their xml mapping, but for camel-sql, we don't have this mapping feature. So what exactly do we return when user use query such as {{select * from project where id=101}}? Just a plain Map object? 

For {{SelectOne}} should I assume that if result set has only one column, we simply return that Object as it, but if it has more than one, we return a Map?




saltnlight5:1375520964:2013-08-03T17:09:24.047+0000:1375520964:2013-08-03T17:09:24.047+0000:Okay, I have made some assumptions and providing a second version of the patch. The new URI options work like this:

{{outputType=SelectList|SelectOne}}. It default to {{SelectList}}
{{outputClass=null|<fullClassName>}}. It default to {{null}}

The {{outputType=SelectList}} will function just as original camel-sql output, which produce List of Map result.

The {{outputType=SelectOne}} will produce single object in the following way:
a) If the query has only single column, then that object is returned. (such as {{select count(*) from project}} will return a {{Long}} object.
b) If the query has more than one column, then it will return a {{Map}} of that result.
c) If the {{outputClass}} is set, then it will convert the query result into an Java bean object by calling all the setters that match the column names. It will assume your class has a default constructor to create instance with.
d) If the query resulted in more than one rows, it throws an non-unique result exception.

Let me know what you think.

Zemian Deng


davsclaus:1375838237:2013-08-07T09:17:17.266+0000:1375838237:2013-08-07T09:17:17.266+0000:Thanks Zemian for the patch.

Do you mind helping updating the docs with the new option(s)?
http://camel.apache.org/sql-component
saltnlight5:1375889540:2013-08-07T23:32:20.870+0000:1375889540:2013-08-07T23:32:20.870+0000:Sure. But I don't see the source for the doc in project. Can you point me to it?
davsclaus:1375922936:2013-08-08T08:48:56.871+0000:1375922936:2013-08-08T08:48:56.871+0000:The docs is not in source code repo, but in wiki.

See here for details about how to edit the docs
http://camel.apache.org/contributing.html
saltnlight5:1375977134:2013-08-08T23:52:14.518+0000:1375977134:2013-08-08T23:52:14.518+0000:Okay, thanks. I just sent in my contributor agreement to Apache. I will help the doc once my access is granted to the wiki.
saltnlight5:1376149810:2013-08-10T23:50:10.494+0000:1376149810:2013-08-10T23:50:10.494+0000:I have updated the https://cwiki.apache.org/confluence/display/CAMEL/SQL+Component wiki now. Added two new Options under that table. Please review.

Is there a automated process to push out to http://camel.apache.org/sql-component when new release is done?
davsclaus:1376262242:2013-08-12T07:04:02.950+0000:1376262242:2013-08-12T07:04:02.950+0000:Thanks, the docs looks good.

The doc is automatic synced to the static html pages, it takes some hours to do so."
0,CAMEL-6365,Improvement,Minor,2.11.0,None,"
None
",Resolved,Fixed,2.13.0,Babak Vahdat,Babak Vahdat,0,1,2013-05-16 06:14:43+00:00,2014-02-07 09:33:33+00:00,See http://camel.465427.n5.nabble.com/Upgrade-Spring-3-1-4-RELEASE-3-2-2-RELEASE-tp5732377p5732649.html,"bvahdat:1391733250:2014-02-07T08:34:10.792+0000:1391733250:2014-02-07T08:34:10.792+0000:There's 2 advantages of {{org.apache.camel.util.IOHelper}} utility reusage here:

Mostly you don't want to propagate any potential exceptions back while closing {{org.springframework.context.support.AbstractApplicationContext}} which implements {{java.io.Closable}} since spring 3.2.x. This is exactly the same intention when you close e.g. a {{java.io.FileOutputStream}} after you're done with writing into the file etc.

The coding effort becomes less, so that the following 6 lines of code:

{code}
if (springContext1 != null) {
    springContext1.close();
}

if (springContext2 != null) {
    springContext2.close();
}
{code}

becomes a one liner:

{code}
IOHelper.close(springContext1, springContext2);
{code}
bvahdat:1391736813:2014-02-07T09:33:33.356+0000:1391736813:2014-02-07T09:33:33.356+0000:Also replaced all the occurences of

{code}
springApplicationContext.destroy();
{code}

calls inside the code base with:

{code}
IOHelper.close(springApplicationContext);
{code}
"
0,CAMEL-6364,Improvement,Major,2.11.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Guillaume Nodet,Guillaume Nodet,0,3,2013-05-16 06:09:02+00:00,2013-05-20 08:15:34+00:00,"Some processors can't easily be wrapped currently (in load balancers, finally clauses, try clauses, wire taps, choices).","gnodet:1368764369:2013-05-17T12:19:29.297+0000:1368764369:2013-05-17T12:19:29.297+0000:Fixed in http://git-wip-us.apache.org/repos/asf/camel/commit/66939043 and http://git-wip-us.apache.org/repos/asf/camel/commit/d824bce2
bvahdat:1368975266:2013-05-19T22:54:26.693+0000:1368975266:2013-05-19T22:54:26.693+0000:There's a regression introduced by this ticket:

https://builds.apache.org/job/Camel.trunk.fulltest.java7/org.apache.camel$camel-spring/615/testReport/junit/org.apache.camel.spring.interceptor/TransactionalClientDataSourceTransactedWithLocalOnExceptionTest/testTransactionRollback/

The problem seems to be the following lines by {{CatchProcessor}} whose removal makes the test pass again:

{code}
// If a previous catch clause handled the exception or if this clause does not match, exit
if (exchange.getProperty(Exchange.EXCEPTION_HANDLED) != null || caught == null) {
    callback.done(true);
    return true;
}
{code}
davsclaus:1369003294:2013-05-20T06:41:34.468+0000:1369003294:2013-05-20T06:41:34.468+0000:Babak, well spotted.

The root problem is the order of transacted vs onException being used in Java DSL. 
Ideally they should always be in a fixed order. In XML DSL we can ""fix"" this. But Java DSL is a bit different, and we cannot currently on the 2.x architecture.

I logged a ticket
https://issues.apache.org/jira/browse/CAMEL-6378

And the test is fixed by moving onException before transacted.

In XML DSL we dont have this problem, as we fix it
org.apache.camel.model.RouteDefinitionHelper#prepareRoute

This problem has also been described here
http://camel.apache.org/camel-30-ideas.html

At the section _Route initialization logic for Java DSL and XML DSLs (claus)_


bvahdat:1369005289:2013-05-20T07:14:49.074+0000:1369005289:2013-05-20T07:14:49.074+0000:Claus, as always thanks for the ""speedy"" clarification. :-)

There's still *a lot* I have to learn about Camel internals which presumes enough time. :-(
davsclaus:1369008934:2013-05-20T08:15:34.899+0000:1369008934:2013-05-20T08:15:34.899+0000:Guillaume also noticed another problem and logged that as: https://issues.apache.org/jira/browse/CAMEL-6376
I guess the code above could be a fix for that.

But to keep backwards compatibility we should see if we can fix the Java DSL to allow any kind of ordering with transacted and onException etc. Or validate if the order is wrong and throw an exception so the end users is aware of it and can fix their routes."
0,CAMEL-6363,Improvement,Major,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Willem Jiang,Antoine DESSAIGNE,1,2,2013-05-15 17:06:09+00:00,2013-05-16 02:03:58+00:00,"In the process of upgrading to Camel 2.11.0 we discovered a breaking change that wasn't documented in the change log: StringTemplate now uses <variable> instead of $variable$. This is due to the upgrade to a StringTemplate 4.x release.


Fortunately it's possible to configure in StringTemplate the delimiters to use. Unfortunately the camel-stringtemplate endpoint doesn't allow to specify them.


You'll find attached a patch that fill this gap.


Aside note: the camel-stringtemplate documentation page is out of date and still uses the $variable$ format","njiang:1368640428:2013-05-16T01:53:48.783+0000:1368640428:2013-05-16T01:53:48.783+0000:Applied the patch into trunk and camel-2.11.x branch with thanks to Antonie.
njiang:1368641038:2013-05-16T02:03:58.684+0000:1368641038:2013-05-16T02:03:58.684+0000:I just updated the wiki page of string-template."
0,CAMEL-6362,Improvement,Major,2.11.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Scott England-Sullivan,Aaron Whiteside,0,3,2013-05-15 01:14:39+00:00,2014-01-10 10:52:49+00:00,"If you add more then one MessageListener to a Session then that session will use  a single thread to notify each MessageListener in turn. Which defeats the purpose of using multiple MessageListeners, at least in my opinion.


sessionCount in SjmsEndpoint should be ignored for Consumers, each Consumer (consumerCount) should instead use a dedicated Session, like what happens when transactions are enabled.","sully6768:1383110794:2013-10-30T13:26:34.544+0000:1383110794:2013-10-30T13:26:34.544+0000:Changing from Bug to Improvement as it is meant to increase current performance thresholds.
sully6768:1383110865:2013-10-30T13:27:45.223+0000:1383110865:2013-10-30T13:27:45.223+0000:Update has been committed to trunk.
bvahdat:1383284662:2013-11-01T13:44:22.969+0000:1383284662:2013-11-01T13:44:22.969+0000:Scott, I assume you have not seen [my reply|http://camel.465427.n5.nabble.com/Git-Account-tp5742361p5742425.html] to your post @ dev forum.
sully6768:1383292181:2013-11-01T15:49:41.589+0000:1383292181:2013-11-01T15:49:41.589+0000:Hi Babak,

No reason other than time right now.  I was going to go through and catching up in trunk and then planned to see what branches were available at that time.  We seem to release bug-fix branches quickly at times and I ended up missing a couple of them.  So I just focused on latest to get caught up.

I am also a little concerned with some of the backports breaking backwards compatibility.  My understanding was that minor release were allowing changes in a components behavior where bug fix releases were just that, bug fix only.  This patch actually changes the session pooling behavior.
bvahdat:1383293055:2013-11-01T16:04:15.885+0000:1383293055:2013-11-01T16:04:15.885+0000:Ah I see, thanks for the heads up :-)"
0,CAMEL-6361,Improvement,Trivial,2.8.5,"2.10.5, 2.11.1, 2.12.0","
None
",Closed,Fixed,"2.10.5, 2.11.1, 2.12.0",Christian Müller,metatech,0,2,2013-05-14 13:57:51+00:00,2013-05-21 08:23:32+00:00,"When a ""validator:"" route step reports exceptions, they should include the line/column location.
Here is a small patch that adds support for it.","muellerc:1368539033:2013-05-14T21:43:53.710+0000:1368539033:2013-05-14T21:43:53.710+0000:Thanks for the patch metatech. I changed it a bit and added the missed unit test.
metatech:1369092245:2013-05-21T07:24:05.515+0000:1369092245:2013-05-21T07:24:05.515+0000:[~muellerc] Thanks Christian. However, I did not find the new version in SVN. Which file did you change ?

muellerc:1369095812:2013-05-21T08:23:32.984+0000:1369095812:2013-05-21T08:23:32.984+0000:The Apache Camel code repository was moved to git as we mention at [1].

[1] http://camel.apache.org/source.html
[2] https://git-wip-us.apache.org/repos/asf?p=camel.git;a=history;f=camel-core/src/main/java/org/apache/camel/processor/validation/SchemaValidationException.java;h=6cd8566f5871098fce1f2ae9e33b25c5103c2bc5;hb=master"
0,CAMEL-6360,New Feature,Major,None,2.12.0,"
None
",Closed,Duplicate,2.12.0,Unassigned,Daniel Lorych,0,1,2013-05-14 08:29:12+00:00,2013-05-14 08:30:44+00:00,"The patch adds a new format for the camel-bindy component, making it possible to annotate enumeration types with @DataField, i.e.:


@CsvRecord(separator="";"")
public class Test {
...
    @DataField(pos = 12)
    private Colour colour;
...
}
where Colour is an arbitrary enum type.


The marshalling/unmarshalling is based on the name() and valueOf() methods.


I have extended already existing unit test BindyCarQuoteAndCommaDelimiterTest to test the behavior.",danlo:1368491444:2013-05-14T08:30:44.718+0000:1368491444:2013-05-14T08:30:44.718+0000:Accidentally duplicated CAMEL-6359 issue
0,CAMEL-6359,New Feature,Minor,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Daniel Lorych,0,2,2013-05-14 08:29:02+00:00,2013-05-14 09:05:21+00:00,"The patch adds a new format for the camel-bindy component, making it possible to annotate enumeration types with @DataField, i.e.:



@CsvRecord(separator="";"")
public class Test {
...
    @DataField(pos = 12)
    private Colour colour;
...
}




where Colour is an arbitrary enum type.


The marshalling/unmarshalling is based on the name() and valueOf() methods.


I have extended already existing unit test BindyCarQuoteAndCommaDelimiterTest to test the behavior.","danlo:1368491506:2013-05-14T08:31:46.587+0000:1368491506:2013-05-14T08:31:46.587+0000:Attached patch
danlo:1368491959:2013-05-14T08:39:19.410+0000:1368491959:2013-05-14T08:39:19.410+0000:Attached patch
davsclaus:1368493521:2013-05-14T09:05:21.416+0000:1368493521:2013-05-14T09:05:21.416+0000:Thanks for the patch.

"
0,CAMEL-6358,Bug,Major,2.11.0,None,"
None
",Resolved,Fixed,"2.11.1, 2.12.0",Willem Jiang,Willem Jiang,0,1,2013-05-14 03:03:14+00:00,2013-05-22 03:15:34+00:00,"You will get the below error when



Non-terminating decimal expansion; no exact representable decimal result.
caused by
java.math.BigDecimal.divide(BigDecimal.java:1616)
org.apache.camel.dataformat.bindy.format.BigDecimalFormat.parse(BigDecimalFormat.java:38)
org.apache.camel.dataformat.bindy.format.BigDecimalFormat.parse(BigDecimalFormat.java:23)




When parasering the String 00000123567 with the below model.



@DataField(pos = 1, precision = 10, length = 11, impliedDecimalSeparator = true) 
private BigDecimal	 foobar;




Here is the discussion about the issue.
http://camel.465427.n5.nabble.com/impliedDecimalSeparator-not-working-for-numbers-starting-with-0-tp5732448.html",njiang:1369163734:2013-05-22T03:15:34.852+0000:1369163734:2013-05-22T03:15:34.852+0000:Applied the patch into trunk and camel-2.11.x.
0,CAMEL-6357,Improvement,Minor,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-13 16:22:07+00:00,2013-05-13 16:50:14+00:00,"See nabble
http://camel.465427.n5.nabble.com/Route-with-doTry-calling-service-does-not-have-exchange-in-exchange-out-does-not-work-tp5732293.html


We should let Camel detect that the headers may be the same instance and avoid clearing the old headers when preparing exchanges during routing.


Also added a note on javadoc api of Message to instruct the best practice for copying headers.",
0,CAMEL-6356,Improvement,Major,2.11.0,None,"
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Romain Manni-Bucau,0,2,2013-05-13 13:31:13+00:00,2013-05-25 08:44:26+00:00,No Desc,"davsclaus:1369442666:2013-05-25T08:44:26.721+0000:1369442666:2013-05-25T08:44:26.721+0000:Thanks for the patch.

I used # syntax instead as thats the default reference lookup syntax in Camel."
0,CAMEL-6355,Improvement,Minor,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-13 05:52:46+00:00,2013-05-13 07:24:06+00:00,"See nabble
http://camel.465427.n5.nabble.com/GenericFileConsumer-Idempotent-and-InProgress-repositories-tp5732237.html",
0,CAMEL-6354,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-05-12 10:50:48+00:00,2013-05-12 12:01:15+00:00,"Currently you have to use the org.apache.camel.component.shiro.security.ShiroSecurityTokenInjector which is cumbersome to use.


Just look at the unit tests in org.apache.camel.itest.shiro.ShiroOverJmsTest in tests/camel-itest.


We should allow people to set a header with the username and password, and then let Shrio detect these and use them for creating the security token.",davsclaus:1368331275:2013-05-12T12:01:15.603+0000:1368331275:2013-05-12T12:01:15.603+0000:Update the docs with details.
0,CAMEL-6353,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-05-12 10:44:46+00:00,2013-05-12 10:48:47+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-can-Shiro-be-used-with-camel-to-limit-access-to-a-route-tp5521623p5732069.html",davsclaus:1368326927:2013-05-12T10:48:47.457+0000:1368326927:2013-05-12T10:48:47.457+0000:There is a new {{base64}} option.
0,CAMEL-6352,Bug,Minor,2.10.4,None,"
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-12 08:25:46+00:00,2013-05-12 08:39:07+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-shiro-security-policy-with-alwaysReauthenticate-set-to-false-doesn-t-detect-seperate-user-loggn-td5732043.html",
0,CAMEL-6351,Improvement,Major,None,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-11 10:19:35+00:00,2013-05-11 10:36:30+00:00,"We had supported this for a while with Spring, see section Using property placeholders for any kind of attribute in the XML DSL at:
http://camel.apache.org/using-propertyplaceholder.html


We should add support for this with blueprint as well. Though it requires that we enlist the placeholder as a namespace so blueprint knows about it.",
0,CAMEL-6350,Bug,Minor,None,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-11 08:10:30+00:00,2013-05-11 08:19:54+00:00,"See nabble
http://camel.465427.n5.nabble.com/Setting-Body-in-restlet-route-without-to-does-not-work-tp5732285.html


Same problem we noticed in camel-restlet is in camel-servlet",
0,CAMEL-6349,Bug,Minor,"2.10.0, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-05-10 14:26:33+00:00,2013-05-10 14:29:13+00:00,"See nabble
http://camel.465427.n5.nabble.com/Setting-Body-in-restlet-route-without-to-does-not-work-tp5732285.html",
0,CAMEL-6348,Bug,Major,2.11.0,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,David Arthur,0,2,2013-05-09 22:58:05+00:00,2013-05-10 13:44:12+00:00,"In the HdfsProducer and HdfsConsumer classes, there are calls to get the current security configuration



Configuration auth = Configuration.getConfiguration();




in order to later reset them after HDFS tramples the system with its own config. However, if no security configuration was set, this throws a SecurityException like:



Exception in thread ""main"" org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[hdfs://localhost:50001/tmp/camel/?splitStrategy=MESSAGES%3A4]. Reason: java.lang.SecurityException: Unable to locate a login configuration




My current workaround is to set the system property ""java.security.auth.login.config"" to an empty file. 


It seems like the code should check if a configuration exists before fetching it.","davsclaus:1368159266:2013-05-10T12:14:26.127+0000:1368159266:2013-05-10T12:14:26.127+0000:Are you working on a patch?
mumrah:1368162276:2013-05-10T13:04:36.259+0000:1368162276:2013-05-10T13:04:36.259+0000:Not sure how you guys prefer patches. This was generated with ""git diff --no-prefix HEAD"" from the camel-hdfs directory. Let me know if you prefer something else.
mumrah:1368162365:2013-05-10T13:06:05.770+0000:1368162365:2013-05-10T13:06:05.770+0000:This patch basically swallows SecurityExceptions thrown from Configuration.getConfiguration. I consolidated this code into two static methods in HdfsComponent: getJAASConfiguration and setJAASConfiguration.
davsclaus:1368164652:2013-05-10T13:44:12.061+0000:1368164652:2013-05-10T13:44:12.061+0000:Thanks for the patch."
0,CAMEL-6317,Bug,Major,2.11.0,"2.10.5, 2.11.1, 2.12.0","
None
",Closed,Fixed,"2.10.5, 2.11.1, 2.12.0",Christian Müller,David J. M. Karlsen,0,3,2013-04-25 09:21:15+00:00,2013-06-21 16:23:40+00:00,"This one works:



 <to uri=""validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd"" />




This one doesn't:



 <to uri=""validator:META-INF/xsd/fundscheckmaintainavailablebalance.xsd?useSharedSchema=false"" />




it fails with:



org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'null', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.




The streamsource object in the validator is populated, but the buffered inputstream object has no content","davsclaus:1366870522:2013-04-25T14:15:22.567+0000:1366870522:2013-04-25T14:15:22.567+0000:What error do you see? And how do you run the Camel application? eg in some sort of container etc.
davidkarlsen@gmail.com:1366940385:2013-04-26T09:39:45.438+0000:1366940399:2013-04-26T09:39:59.595+0000:Doh - forgot to add the exception - edited in now.
This test is a unit-test running in eclipse. I usually run the app in spring/jetty.
davsclaus:1367018829:2013-04-27T07:27:09.569+0000:1367018829:2013-04-27T07:27:09.569+0000:This is likely IBM JDK/JVM issue as the option in Camel doesn't do something different really.
IBM JDK may not use same XML libraries as Oracle/SUN JDKs embed.
davsclaus:1367018910:2013-04-27T07:28:30.691+0000:1367018910:2013-04-27T07:28:30.691+0000:Sorry but we dont believe this is a bug in Camel. But due to a bug in the JDK/JVM as state as well on its documentation page.
davidkarlsen@gmail.com:1367296152:2013-04-30T12:29:12.413+0000:1367296152:2013-04-30T12:29:12.413+0000:I have a reproducable case in: git@github.com:davidkarlsen/camel6317.git, which fails consistently on the following 4 different JDKs (all latest version) - and the case failing is actually the one to avoid the JDK bug:

et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/jdk1.7/bin/java -version
java version ""1.7.0_21""
Java(TM) SE Runtime Environment (build 1.7.0_21-b11)
Java HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)

et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/jdk1.6/bin/java -version
java version ""1.6.0_45""
Java(TM) SE Runtime Environment (build 1.6.0_45-b06)
Java HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)



et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/ibm/ibm-java-i386-60/bin/java -version
java version ""1.6.0""
Java(TM) SE Runtime Environment (build pxi3260sr13fp1-20130325_01(SR13 FP1))
IBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux x86-32 jvmxi3260sr13-20130114_134867 (JIT enabled, AOT enabled)
J9VM - 20130114_134867
JIT  - r9_20130108_31100
GC   - 20121212_AA)
JCL  - 20130315_01


et2448@ubuntu:~/projects/ext/github.com/camel-6317$ /opt/ibm/ibm-java-i386-70/bin/java -version
java version ""1.7.0""
Java(TM) SE Runtime Environment (build pxi3270sr4fp1-20130325_01(SR4 FP1))
IBM J9 VM (build 2.6, JRE 1.7.0 Linux x86-32 20130306_140761 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR4_FP1_20130306_1011_B140761
JIT  - r11.b03_20130131_32403ifx1
GC   - R26_Java726_SR4_FP1_20130306_1011_B140761
J9CL - 20130306_140761)
JCL - 20130315_01 based on Oracle 7u13-b08



davidkarlsen@gmail.com:1370589226:2013-06-07T15:13:46.071+0000:1370589226:2013-06-07T15:13:46.071+0000:Ping? The testcase I refer in my git repo could be incorporated into camel?
muellerc:1371729954:2013-06-20T20:05:54.173+0000:1371729954:2013-06-20T20:05:54.173+0000:I can reproduce this issue with 2.12.x on
Apache Maven 3.0.5 (r01de14724cdef164cd33c7c8c2fe155faf9602da; 2013-02-19 14:51:28+0100)
Java version: 1.6.0_43, vendor: Apple Inc.
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.8.4"", arch: ""x86_64"", family: ""mac""
davidkarlsen@gmail.com:1371771408:2013-06-21T07:36:48.785+0000:1371771408:2013-06-21T07:36:48.785+0000:I see it went on several branches - maybe update the fix-versions?"
0,CAMEL-6316,Improvement,Minor,None,2.12.0,"
None
",Resolved,Won't Fix,2.12.0,Claus Ibsen,Claus Ibsen,0,3,2013-04-25 09:01:41+00:00,2013-04-27 07:21:27+00:00,"When marshalling to XML then it would be best if we use a String type instead of byte[].


See nabble
http://camel.465427.n5.nabble.com/JAXB-marshal-generates-byte-array-instead-of-String-tp5715174.html","dkulp:1366955346:2013-04-26T13:49:06.529+0000:1366955346:2013-04-26T13:49:06.529+0000:The ""optimum"" representation really depends on what you are intending to do with the result of the marshall.   If you are just going to send it down an HTTP connection or similar, marshalling to byte[] would perform a lot better (and use about 1/2 the memory) compared to a String.  

Really, this needs to be configurable, likely with an option for InputStream as well (backed by a CachedOutputStream/InputStream for large structures).
davsclaus:1367018487:2013-04-27T07:21:27.679+0000:1367018487:2013-04-27T07:21:27.679+0000:Yeah good point. Also the current architecture is that the marshal is byte based. 

So even configuring a new option only on jaxb data format, will still be byte based as that's how the marshal processor works. And this would require an API change to DataFormat which isn't ideal to do for just this.

The Camel type converter can easily convert to String either implicit/explicit. So lets keep it as is."
0,CAMEL-6315,Task,Minor,2.12.0,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-25 05:28:33+00:00,2013-05-11 06:56:04+00:00,"We should remove the old camel-scala29 module. And then we can upgrade the source code in camel-scala to use the Scala 2.10 apis, which are currently marked as deprecated","davsclaus:1368170909:2013-05-10T15:28:29.081+0000:1368170909:2013-05-10T15:28:29.081+0000:The camel-scala29 component has been removed.

We can then upgrade the source code in camel-scala"
0,CAMEL-6314,Task,Major,2.11.0,2.11.1,"
None
",Resolved,Not A Problem,2.11.1,Claus Ibsen,Ricardo Veguilla,0,3,2013-04-25 03:42:04+00:00,2013-04-25 19:16:48+00:00,"camel-cxf-2.11 depends on cxf-2.7.4.


cxf-rt-transports-http-jetty-2.7.4 depends on jetty-server-8.1.7


camel-jetty depends on jetty-server-7.6.8.


So using both a cxf:bean route and a jetty route results in a java.lang.NoSuchMethodError: org.eclipse.jetty.server.Request.getDispatcherType()Lorg/eclipse/jetty/server/DispatcherType;","davsclaus:1366838662:2013-04-25T05:24:22.852+0000:1366838662:2013-04-25T05:24:22.852+0000:Then exclude the jetty dependencies on cxf, and use the same Jetty version
rveguilla:1366866723:2013-04-25T13:12:03.111+0000:1366866723:2013-04-25T13:12:03.111+0000:Is there any particular reason why I should exclude jetty-8.1.7 (cxf dependency) vs 7.6.8 (camel-jetty dependency)? 
I already tried excluding the camel-jetty dependency, and it worked. 

Any plan to actually fix this?
  
davsclaus:1366867350:2013-04-25T13:22:30.124+0000:1366867350:2013-04-25T13:22:30.124+0000:Well its your decision which Jetty version you want to use.

There is nothing to ""fix"" as its not a bug. Different OS projects uses different versions of JARs. Camel is compatible with X versions of Jetty.

That said its possible about time that we let Camel 2.12 use Jetty 8.x by default, instead of the older 7.x which we have been using for a long time. But thats another story.
davsclaus:1366867706:2013-04-25T13:28:26.649+0000:1366867706:2013-04-25T13:28:26.649+0000:I started a discussion on Camel @dev about the Jetty upgrade
http://camel.465427.n5.nabble.com/DISCUSS-Upgrading-Jetty-version-in-Camel-2-12-tp5731544.html
dkulp:1366888608:2013-04-25T19:16:48.168+0000:1366888608:2013-04-25T19:16:48.168+0000:CXF is compatible and tested with both Jetty 7.6 and Jetty 8.1.  (and 7.5 as well)  I don't think Camel has really been tested thoroughly with anything other than 7.6.  Thus, it's likely better to exclude the versions that CXF pulls in and use the version that Camel would grab."
0,CAMEL-6313,Bug,Minor,"2.10.1, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Daniel Gredler,0,2,2013-04-24 23:12:15+00:00,2017-05-13 06:27:43+00:00,"We are upgrading from 2.10.0 to 2.11.0, and are getting an error on startup.


Example Spring configuration:



<camelContext id=""camel"" handleFault=""true"" autoStartup=""{{autoStartup}}"" xmlns=""http://camel.apache.org/schema/spring"">
    <contextScan />
    <jmxAgent id=""camelAgent"" createConnector=""true"" registryPort=""{{jmxPort}}"" />
</camelContext>

<bean id=""properties"" class=""org.apache.camel.component.properties.PropertiesComponent"">
    <property name=""location"" value=""classpath:foo.properties""/>
</bean>




As you can see, we use the Camel properties component to configure Camel auto-startup, JMX port, etc.


This is the error we're getting on startup:



org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'properties' defined in class path resource [org/apache/camel/component/properties/SpringPropertiesComponentTest.xml]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:83)
	at org.apache.camel.component.properties.SpringPropertiesComponentTest.createApplicationContext(SpringPropertiesComponentTest.java:30)
	at org.apache.camel.spring.SpringTestSupport.setUp(SpringTestSupport.java:52)
	at junit.framework.TestCase.runBare(TestCase.java:139)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'camel-1': Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1455)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109)
	at org.apache.camel.spring.CamelBeanPostProcessor$1.getOrLookupCamelContext(CamelBeanPostProcessor.java:69)
	at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:85)
	at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:394)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1448)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	... 27 more
Caused by: java.lang.IllegalArgumentException: PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1063)
	at org.apache.camel.util.CamelContextHelper.parseBoolean(CamelContextHelper.java:337)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.initCamelContext(AbstractCamelContextFactoryBean.java:543)
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet(AbstractCamelContextFactoryBean.java:266)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	... 40 more



I believe this is a side-effect of the optimization introduced in CAMEL-5508, which was incorporated into 2.10.1 and 2.11.0.


I'll attach a small patch that modifies one of the unit tests in the camel-spring component to reproduce the issue.",davsclaus:1366851528:2013-04-25T08:58:48.082+0000:1366851528:2013-04-25T08:58:48.082+0000:Thanks for reporting and the little patch.
0,CAMEL-6312,Bug,Minor,"2.10.4, 2.11.0","2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-24 18:02:15+00:00,2013-04-25 14:14:18+00:00,"You should be able to set a custom ExceptionHandler on an endpoint, using consumer.exceptionHandler=#myHandler, such as from routes.","davsclaus:1366859502:2013-04-25T11:11:42.600+0000:1366859502:2013-04-25T11:11:42.600+0000:When creating a consumer from endpoint.createConsumer, we need to make sure configureConsumer is also called so it can do the extra configuration needed."
0,CAMEL-6311,Bug,Major,"2.10.4, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-24 17:44:25+00:00,2013-04-25 07:56:27+00:00,"See nabble
http://camel.465427.n5.nabble.com/DeadLetterChanel-does-not-handle-exception-tp5731073.html


You may have a situation when using DeadLetterChannel, and it handles an exception. Then afterwards in the consumer, they should see the Exchange being regarded as handled, with no exception if they call getException.","davsclaus:1366846379:2013-04-25T07:32:59.561+0000:1366846379:2013-04-25T07:32:59.561+0000:This problem is only if you use a custom onException that do *not* have handled=true, then that overrides the handling on the DLC which was the bug."
0,CAMEL-6310,Improvement,Major,"2.9.6, 2.10.4, 2.11.0","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Willem Jiang,Willem Jiang,0,1,2013-04-24 13:05:04+00:00,2013-04-27 07:29:52+00:00,"In most time BlueprintCamelContext is started by calling the maybeStart(), but if we want to start the BlueprintCamelContext from outside we need to start() method to be able to setup the right TCCL.",
0,CAMEL-6309,Bug,Critical,"2.10.2, 2.10.3, 2.10.4, 2.11.0","2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.10.7, 2.11.2, 2.12.0",Akitoshi Yoshida,Bengt Rodehav,3,5,2013-04-24 09:27:41+00:00,2013-07-29 13:10:13+00:00,"It is not possible to upload a file to a sub directory via sftp if the home directory (the directory where you end up directly after login) is root (""/"" or ""\"").


The reason is that after having checked that the sub directory exists (and perhaps created it), Camel tries to go back to the original directory which is ""/"". The SftpOperations.changeCurrentDirectory() method calls the FileUtil.compactPath() method that incorrecly changes ""/"" to ""//"". The bug thus resides in the FileUtil class which is part of camel-core.


I think this bug may cause a number of other errors than the one I have enountered. E g it cannot be possible to change direcotory to ""/"" at all. And, other protocols (like ftp/ftps) might also be affected.


This has been discussed on Camel user list:


http://camel.465427.n5.nabble.com/Problems-with-sftp-in-Camel-2-11-0-td5731359.html","rodehav:1366767288:2013-04-24T09:34:48.964+0000:1366767288:2013-04-24T09:34:48.964+0000:When looking closer at the FileUtil.compactPath() method I notice that it uses the normalizePath() method which in turn does some weird checking of operating system to determine what separator to use. This functionality checks the local operating system (where Camel is running) but does not take into account what separator is being used on the remote server (the sftp server in my case).

The FileUtil class is a generic class that does not know anything about any remote file system's separator - and I don't think it should. Therefore, the FileUtil class can't really be used in SftpOperations since it makes assumptions about separators that it really can't know anything about.

I haven't encountered any erors regarding this yet but it's easy to see that the logic is failing.
rodehav:1366772928:2013-04-24T11:08:48.262+0000:1366772928:2013-04-24T11:08:48.262+0000:I noticed that FtpOperations also call the FileUtil.compactPath() method. This probably means that ftp/ftps will have the same error as sftp.
rodehav:1366845738:2013-04-25T07:22:18.144+0000:1366845738:2013-04-25T07:22:18.144+0000:Patches for verifying the error (FileUtilTest) and fixing the error (FileUtil).
rodehav:1366846440:2013-04-25T07:34:00.117+0000:1366846440:2013-04-25T07:34:00.117+0000:Uploaded patches for extending the FileUtilTest as well as fixing the problem in FileUtil. In FileUtilTest i added four more asserts in testCompactPath(). All of those failed for me before applying the fix. Note that I added the four asserts both for the ""Windows"" case and the ""non-Windows"" case but I have only tested on Windows.
rodehav:1366846937:2013-04-25T07:42:17.725+0000:1366846937:2013-04-25T07:42:17.725+0000:I looked further into the ""weird checking of operating systems"" that I wrote about in a previous comment. Although I still think it is kind of weird that the normalizePath() method is checking the local operating system to determine what separator to use, I am now of the opinion that it really doesn't affect the final outcome. This is because the compactPath() method is called with a separator set to ""/"" which means that the produced path will use ""/"" as separator even if the normalized path will use ""\"" (on Windows anyway). So, this probably works.
louisparks:1373545324:2013-07-11T20:22:04.940+0000:1373545324:2013-07-11T20:22:04.940+0000:I do not get this error when connecting to a windows based Filezilla ftp server.  But I do get it when connecting to a RHEL box.
Has anyone gotten around this?  I would imagine this would affect a lot of people. I know all my FTP routes no longer work.
xandroalmeida:1374473780:2013-07-22T14:16:20.524+0000:1374473780:2013-07-22T14:16:20.524+0000:I encountered this problem using a ftp route .
The work around for this problem is to add one ""/ "" in the path of the FTP directory. ex

/export/home/userone/path => //export/home/userone/path
ay:1374551531:2013-07-23T11:52:11.575+0000:1374551531:2013-07-23T11:52:11.575+0000:Hi Bengt,
thanks for the patch and test cases.
I applied a slightly simpler patch.
regards, aki
rodehav:1375074613:2013-07-29T13:10:13.070+0000:1375074613:2013-07-29T13:10:13.070+0000:Thanks a lot for fixing Aki!"
0,CAMEL-6308,Improvement,Minor,2.10.4,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Chris Wolf,0,2,2013-04-23 23:36:39+00:00,2013-04-24 09:06:25+00:00,"There are frequent requirements (as I read from the mail list) to be able to alter the polling behavior of Consumers based on ScheduledPollConsumer, for example when polling should start and stop. To customize when polling should start, the Endpoint can be configured with ""startScheduler=false"", but then how can we programatically start it without using reflection to override the ""protected"" access of startScheduler()?  It seems to me that if the option, ""startScheduler=false"" is implemented, then the complimentary API, ScheduledPollConsumer.startScheduler() should be ""public"".","davsclaus:1366765585:2013-04-24T09:06:25.532+0000:1366765585:2013-04-24T09:06:25.532+0000:The startScheduler=false was used internally by Camel itself, and not as much intended for end users. But since the option is exposed, we should make it easier to use the API from end user.

Added JMX operations as well."
0,CAMEL-6307,Bug,Minor,2.11.0,"2.11.1, 2.12.0","

argument
beaninvocation
parse

",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,David J. M. Karlsen,0,2,2013-04-23 09:12:52+00:00,2013-04-24 17:16:30+00:00,"When upgradring from 2.10.2 to 2.11.0 I met this regression:


I have a step in my route which invokes a bean:



<camel:to uri=""bean:transferConverter?method=transferToMultimap( ${body} )"" />




after the upgrade it threw:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: BeanInvocation public abstract com.mycomp.Transfer com.mycomp.TransferService.doTransfer(com.mycomp.Transfer) with [com.mycomp.Transfer@7e299629[.....]]]]

Caused by: org.apache.camel.NoTypeConversionAvailableException: No type converter available to convert from type: java.lang.String to the required type: com.mycomp.Transfer with value   
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:181) ~[camel-core-2.11.0.jar:2.11.0]
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.mandatoryConvertTo(BaseTypeConverterRegistry.java:149) ~[camel-core-2.11.0.jar:2.11.0]
        at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterValue(MethodInfo.java:540) ~[camel-core-2.11.0.jar:2.11.0]





If I change the route to:



<camel:to uri=""bean:transferConverter?method=transferToMultimap(${body})"" />




(notice if no whitespace before/after ${body} it works as before).


The problematic code seems to be in org.apache.camel.component.bean.MethodInfo",davsclaus:1366794979:2013-04-24T17:16:19.996+0000:1366794979:2013-04-24T17:16:19.996+0000:Thanks for reporting
0,CAMEL-6306,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,James Strachan,James Strachan,0,2,2013-04-23 07:57:21+00:00,2013-04-24 07:29:37+00:00,"From the current EndpointConfiguration you need a URI or Endpoint to be able to get the configuration object; and there's no way to introspect it to find its properties.


Tools like IDEs or web consoles typically need to start from a blank slate, create a form and let users enter the various properties required to configure and create a new endpoint.


So this issue adds a new ComponentConfiguration API; which is like EndpointConfiguration but can be created on any existing Camel component without any code changes and lets users configure the configuration; then either create a URI string or create an Endpoint directly - or introspect the available properties.


There are 2 implementations; a basic implementation which works with any camel component today and a more advanced implementation which makes use of the @UriEndpoint / @UriParam / @UriParams annotations from CAMEL-6304 to provide better metadata.


The aim is to work with all camel components/endpoints from day 1 but to provide a way for endpoint developers to provide better metadata by using some annotations","jstrachan:1366675645:2013-04-23T08:07:25.895+0000:1366675645:2013-04-23T08:07:25.895+0000:Initial implementation committed - see the test case for an example of the kinds of things you can do with it - and to show it works today on any Camel endpoint; but works better on @UriEndpoint annotated UriEndpointComponent components:

https://github.com/apache/camel/blob/trunk/camel-core/src/test/java/org/apache/camel/impl/ComponentConfigurationTest.java#L69
jstrachan:1366683688:2013-04-23T10:21:28.770+0000:1366683688:2013-04-23T10:21:28.770+0000:Docs on how to use the API here: https://cwiki.apache.org/confluence/display/CAMEL/ComponentConfiguration
alanfoster:1366723453:2013-04-23T21:24:13.608+0000:1366723453:2013-04-23T21:24:13.608+0000:I'm a big fan of this idea! I wonder if it should be merged with 2.10.x/2.11.x too?

It would also be interesting to see if there was a way to support available values + default value if possible

For instance from the JMS component documentation there is an UriParam 'acknowledgementModeName' with specific allowed values

|| Option 	|| Default Value || 	Description ||
| acknowledgementModeName 	|AUTO_ACKNOWLEDGE |	The JMS acknowledgement name, which is one of: SESSION_TRANSACTED, CLIENT_ACKNOWLEDGE, AUTO_ACKNOWLEDGE, DUPS_OK_ACKNOWLEDGE|

It would be nice to expand the annotation type to maybe have

{code:java}
    @UriParam(name = ""acknowledgementModeName"",
            defaultValue = ""AUTO_ACKNOWLEDGE"",
            values = { ""SESSION_TRANSACTED"", ""CLIENT_ACKNOWLEDGE"", ""AUTO_ACKNOWLEDGE"", ""DUPS_OK_ACKNOWLEDGE"" })
    private String acknowledgementModeName;
{code}

{code:java}
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Target({ElementType.FIELD })
public @interface UriParam {
    /**
     * Returns the name of the parameter.
     *
     * If this is not specified then the name of the field or property which has this annotation is used.
     */
    String name() default """";

    /**
     *
     * @return The default value that this uri param will use if none is supplied by the endpoint
     */
    String defaultValue() default """";

    /**
     *
     * @return The range of possible values for this param
     */
    String[] values() default """";

}
{code}

That gives the benefit of offering intelli-sense on IDEs, which would be great.

Obviously there are specific datatypes which you can infer possible values from, ie boolean is true or false, but for string based constants this would certainly be useful!
jstrachan:1366759544:2013-04-24T07:25:44.012+0000:1366759544:2013-04-24T07:25:44.012+0000:Thanks Alan, great ideas!

For default values, I did wonder about creating an empty Endpoint object and using introspection to find the value; then it'd work with all current endpoints and would work with any kind of value too (e.g. boolean / numeric / date etc). The slightly tricky part is that its non-trivial creating an empty/exemplar endpoint as they take various constructor parameters & often need the URI up front to create. I wonder if we should do both though really; try deduce from the code but if that doesn't work let folks use annotations?

Totally agree with possible values though! I was thinking we maybe need to add a Completer API rather like Karaf Commands use to let folks do tab completion on arguments/options to commands in the shell. So that, for example, a JMS, file system or database endpoint could let folks complete on the name of a queue, file or table respectively (letting folks specify a prefix/search string to filter) then in tools we could use a Suggest/Completer/Combo Box. Whenever values are enums or booleans there's no need; but for Strings we need a way to figure out the possible values - either statically with annotations or dynamically with a @Completer API
jstrachan:1366759777:2013-04-24T07:29:37.218+0000:1366759777:2013-04-24T07:29:37.218+0000:BTW I don't see why we can't back port the annotations & APT / doc generator to older versions. I guess the new ComponentConfiguration is a new API; so might not warrant going into a patch release (though it is a pure additional, optional API that doesn't affect behaviour)"
0,CAMEL-6305,Bug,Major,2.11.0,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Willem Jiang,Torsten Mielke,0,2,2013-04-23 07:55:28+00:00,2013-04-27 09:53:21+00:00,A test that extends CamelBlueprintTestSupport does not get its debugBefore() and debugAfter() methods called.,"tmielke:1366675147:2013-04-23T07:59:07.645+0000:1366675188:2013-04-23T07:59:48.224+0000:Attaching slightly modified version of DebugBlueprintTest.java in CAMEL-6305.diff that can serve as unit test for this bug.
 
njiang:1366694191:2013-04-23T13:16:31.874+0000:1366694191:2013-04-23T13:16:31.874+0000:This issue is caused by BlueprintCamelContext is started before the setUp() is called.
We need to introduce a mechanism to avoid staring the BlueprintCamelContext when loading the bundle.
njiang:1366769133:2013-04-24T10:05:33.679+0000:1366769133:2013-04-24T10:05:33.679+0000:It's hard to block the starting process of BlueprintCamelContext before the bundle is start, because CamelContext will be publish as OSGi service after the BlueprintCamelContext is started. And CamelBlueprintTestSupport is looking up the CamelContext from the OSGi service registry. 

I finally find a way to fix this issue by just stop the CamelContext in the setUp method if we need the debug feature.
njiang:1367027601:2013-04-27T09:53:21.030+0000:1367027601:2013-04-27T09:53:21.030+0000:Applied the patch into trunk, camel-2.11.x and camel-2.10.x branches."
0,CAMEL-6304,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,James Strachan,James Strachan,0,1,2013-04-23 07:48:29+00:00,2013-04-24 07:20:54+00:00,"Right now documentation is done on the wiki by hand which is pretty error prone; its also kinda painful to handle every single camel version.


It would be nice to automatically create the component/endpoint configuration documentation as a maven report; we could also include this HTML into the jar so folks can refer to the documentation for the camel components on their classpath.","jstrachan:1366674704:2013-04-23T07:51:44.858+0000:1366674704:2013-04-23T07:51:44.858+0000:The annotations (@UriEndpoint, @UriParam, @UriParams for nested param objects) are in the tooling/spi-annotations jar as that makes it easier to do APT stuff. Then the tooling/apt module contains an APT annotation processor to generate a HTML document from the java code; using the annotations and javadoc comments
jstrachan:1366675433:2013-04-23T08:03:53.329+0000:1366675433:2013-04-23T08:03:53.329+0000:OK a bunch of endpoints have been annotated (e.g. most of the endpoints in camel-core, camel-jms, camel-sjms) so they now have nice HTML docs generated as part of the maven site build; though I've not ported across the javadoc comments from the wiki yet
jstrachan:1366683674:2013-04-23T10:21:14.548+0000:1366683674:2013-04-23T10:21:14.548+0000:See the docs here: https://cwiki.apache.org/confluence/display/CAMEL/Endpoint+Annotations for more details of what the annotations are and how to use them
jstrachan:1366683772:2013-04-23T10:22:52.502+0000:1366683772:2013-04-23T10:22:52.502+0000:Fixed. 

We could raise more issues for the migration of more docs from the wiki into javadoc & to use the annotations & UriEndpointComponent on more components etc
jstrachan:1366759254:2013-04-24T07:20:54.106+0000:1366759254:2013-04-24T07:20:54.106+0000:Kinda similar issues, CAMEL-6304 is about documentation generation from annotations and CAMEL-6306 can use the annotations to give better introspected metadata"
0,CAMEL-6303,Task,Critical,None,2.11.0,"
None
",Closed,Fixed,2.11.0,Willem Jiang,Christian Müller,0,2,2013-04-22 20:59:26+00:00,2013-04-24 09:19:54+00:00,"If you click at [1] from [2], the displayed page is empty. It's the same for all other blog links.
We had the same issue in the past and Dan fixed it manually. I think there is an issue in the Confluence WIKI exporter classes at [3].


[1] http://camel.apache.org/2013/04/22/apache-camel-2110-released.html
[2] http://camel.apache.org/
[3] http://svn.apache.org/repos/asf/cxf/web/src/main/java/org/apache/cxf/cwiki


Best,
Christian","njiang:1366656086:2013-04-23T02:41:26.179+0000:1366656086:2013-04-23T02:41:26.179+0000:I just updated the template.camel file after comparing the template.cxf. 
I'm not sure if it work, and maybe we need to kick the build process again.

muellerc:1366666538:2013-04-23T05:35:38.803+0000:1366666538:2013-04-23T05:35:38.803+0000:I just started the Confluence full export...
njiang:1366677141:2013-04-23T08:32:21.498+0000:1366677141:2013-04-23T08:32:21.498+0000:It looks like the fix works, but I didn't found the latest update for the camel 2.11.0 release.


muellerc:1366678565:2013-04-23T08:56:05.792+0000:1366678565:2013-04-23T08:56:05.792+0000:Yes, it works. And I can see the link to the Camel 2.11.0 release blog entry.

You can close this issue IMO."
0,CAMEL-6302,Bug,Major,2.10.4,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Thomas Termin,0,2,2013-04-22 19:06:52+00:00,2013-04-26 09:01:19+00:00,"The MinaUdpProtocolCodecFactory on the consumer side decodes data from an udp datagram to a byte[].


    byte[] bytes = context.getTypeConverter().convertTo(byte[].class, in);


On the provider side where it gets back to the wire it gets converted to a string:


    String value = context.getTypeConverter().convertTo(String.class, message);


and then set to the ByteBuffer with the given charset.


The result is that the original datagram is not valid anymore. The default codec should the data convert to a byte array or keep the data as byte array.","tterm001:1366628887:2013-04-22T19:08:07.199+0000:1366628887:2013-04-22T19:08:07.199+0000:Attached is a patch with the changes for the codec and a test which results currently in an error. After the fix it will be successful.

tterm001:1366802200:2013-04-24T19:16:40.075+0000:1366802200:2013-04-24T19:16:40.075+0000:camel-mina2 need also the fix for the udp codec.
tterm001:1366802219:2013-04-24T19:16:59.694+0000:1366802219:2013-04-24T19:16:59.694+0000:Patch for camel-mina2
davsclaus:1366938079:2013-04-26T09:01:19.991+0000:1366938079:2013-04-26T09:01:19.991+0000:Thanks for the patches."
0,CAMEL-6301,Improvement,Minor,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-22 09:26:55+00:00,2013-04-22 15:38:01+00:00,"If you want to reset all the jmx performance stats for a route(s) then you would need to do this manually on each route and processor. 


We should have a single method for people to use that does this easily.",davsclaus:1366596270:2013-04-22T10:04:30.772+0000:1366596270:2013-04-22T10:04:30.772+0000:Need to merge to 2.11 branch when we have it setup
0,CAMEL-6300,Bug,Major,2.10.4,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Petr Juza,0,2,2013-04-21 19:50:30+00:00,2013-06-09 20:20:43+00:00,"I have the following route definition:



        from(""direct:billing_"" + operation)
                .routeId(getRouteId(operation))
                .errorHandler(noErrorHandler()) // propagate exceptions to the parent route

                .validate(body().isInstanceOf(
                        com.cleverlance.cleverbss.integration.modules.in.customer.model.Customer.class))

                .beanRef(BILLING_CUSTOMER_ROUTE_BEAN, ""createRequestFor"" + WordUtils.capitalize(operation))

                 // SetCustomer -> XML
                .marshal(jaxbIn)

                .doTry()
                    .to(uri + ""?messageSender=#billingSender"").id(""toURI"")
                .doCatch(AlreadyExistsException.class)
                    .setProperty(exPropertyName, property(Exchange.EXCEPTION_CAUGHT))
                .end()

                .choice()
                    .when(property(exPropertyName).isNull())

                    // XML -> SetCustomerResponse
                    .unmarshal(jaxbOut)
                .endChoice();




And I would like to replace TO in the tests:



        getCamelContext().getRouteDefinition(BillingCustomerRoutes.ROUTE_ID_UPDATE_CUSTOMER)
                .adviceWith(getCamelContext(), new AdviceWithRouteBuilder() {
                    @Override
                    public void configure() throws Exception {                        
                        weaveByType(ToDefinition.class).replace().process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                throw new AlreadyExistsException(""msg"", new AlreadyExists());
                            }
                        });
                    }
                });




When I use weaveById(""toURI"") or weaveByToString(), it doesn't work neither.","pjuza:1366545197:2013-04-21T19:53:17.352+0000:1366545197:2013-04-21T19:53:17.352+0000:Similar problems - http://camel.465427.n5.nabble.com/Mocking-an-endpoint-within-a-try-catch-block-td5727081.html
davsclaus:1366613196:2013-04-22T14:46:36.250+0000:1366613196:2013-04-22T14:46:36.250+0000:Need to merge to 2.11 branch when its setup
pjuza:1370780443:2013-06-09T20:20:43.812+0000:1370780443:2013-06-09T20:20:43.812+0000:Please, is any workaround for this bug? 
We aren't able to test every route where we use doTry-doCatch ..."
0,CAMEL-6299,Improvement,Minor,2.10.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-19 13:33:37+00:00,2013-04-22 15:12:26+00:00,"Services in Camel such as default inflight registry and others should have an id attribute, with their last part of mbean name. That makes it easier to see what the mbean is, when you list its attributes.


Also helps differentiate the services from each other.",davsclaus:1366597159:2013-04-22T10:19:19.997+0000:1366597159:2013-04-22T10:19:19.997+0000:Need to merge to 2.11 branch when we have it setup.
0,CAMEL-6298,Bug,Trivial,"2.9.6, 2.10.4, 2.11.0","2.9.7, 2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.9.7, 2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Pavel Hora,0,2,2013-04-19 13:28:11+00:00,2013-04-22 15:23:53+00:00,"from(uri) 
                .routeId(ROUTE_ID) 
                .validate(body().isInstanceOf(SomeClass.class)) 
                .beanRef(bean, ""someMethod"") 
                .marshal(jaxbIn) 
                .to(uri).id(""meID""); 




Studying Camel source (2.10.4) code i find, that method id(""meID"") is called on ValidateDefinition object and this return empty collection for outputs. 


http://camel.465427.n5.nabble.com/Camel-dont-set-ID-for-ToDefinition-object-td5731143.html","davsclaus:1366591878:2013-04-22T08:51:18.631+0000:1366591878:2013-04-22T08:51:18.631+0000:This problem only applies to java dsl.
davsclaus:1366593808:2013-04-22T09:23:28.993+0000:1366593808:2013-04-22T09:23:28.993+0000:Need to merge to 2.11 branch when we have it setup"
0,CAMEL-6297,Bug,Major,2.10.4,"2.10.5, 2.11.1","
None
",Resolved,Fixed,"2.10.5, 2.11.1",Willem Jiang,Michael Prieß,0,3,2013-04-18 21:11:14+00:00,2013-04-23 02:27:51+00:00,"Hi, 


the latest implementation used the fixed default domain which doesn't work if you specify a custom agent. I removed the fixed default domain name and used the method ManagementAgent.getMBeanObjectDomainName() instead.


In addition I added the attribute InflightExchanges to the route-info command because I really missed it. Would be great if the patch could be integrated into 2.12.


Cheers,


Michael","mpriess:1366290800:2013-04-18T21:13:20.740+0000:1366290817:2013-04-18T21:13:37.353+0000:Appended the patch and a small example to reproduce the problem.
njiang:1366349025:2013-04-19T13:23:45.290+0000:1366349025:2013-04-19T13:23:45.290+0000:Committed the patch into trunk with thanks to Michael, I will back port it into other branches once Camel 2.11.0 is out.
davsclaus:1366615667:2013-04-22T15:27:47.177+0000:1366615667:2013-04-22T15:27:47.177+0000:Maybe this should be patched on the 2.10 branch as well?
njiang:1366655271:2013-04-23T02:27:51.827+0000:1366655271:2013-04-23T02:27:51.827+0000:Merged the patch into trunk, camel-2.11.x and camel-2.10.x branches."
0,CAMEL-6296,Improvement,Major,2.9.4,2.12.0,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Alexis Kinsella,0,2,2013-04-18 09:13:04+00:00,2013-09-17 07:28:58+00:00,"httpConnectionManager.* parameters are not supported for HttpClient3 on Camel-Http component at least for version of camel 2.9.4.


Here is a patch that provides support for httpConnectionManager.* parameters support.


There is no test case provided, but a patch.","alexiskinsella:1366247709:2013-04-18T09:15:09.449+0000:1366247709:2013-04-18T09:15:09.449+0000:The patch needs some review.
njiang:1369163905:2013-05-22T03:18:25.769+0000:1369163905:2013-05-22T03:18:25.769+0000:Applied the patch into trunk."
0,CAMEL-6295,Bug,Major,None,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,John Smith,0,1,2013-04-17 17:15:35+00:00,2014-04-27 08:43:37+00:00,"Simple route 



 from(""cxf:..."").process(myProcessor()).recipientList(simple(""cxf:${header[To]}?...""));
 



needs a break after each run. Just able to send messages to the recipientList-endpoint every ~30 seconds.


Also see (http://camel.465427.n5.nabble.com/cxf-producer-needs-a-break-td5730612.html)",
0,CAMEL-6294,Improvement,Major,2.10.4,Future,"
None
",Resolved,Not A Problem,Future,Willem Jiang,Ulrich Kramer,0,3,2013-04-17 11:56:03+00:00,2014-03-02 11:28:20+00:00,"The following Unittests fail:



package com.sap.camel.util;

import java.io.InputStream;

import junit.framework.Assert;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.converter.stream.CachedOutputStream;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.testng.annotations.Test;

public class StreamCacheBugs {
	
	private CamelContext context;
	public void setUp() {
		
		context = new DefaultCamelContext();
	}

	@Test
	public void multipleConvertionsYielsToEmptyBody() throws Exception {
		Exchange exchange = new DefaultExchange(context);
		Message msg = exchange.getIn();
		CachedOutputStream out = new CachedOutputStream(exchange);
		out.write(""Hello World"".getBytes());
		msg.setBody(out.getStreamCache());
		Assert.assertEquals(msg.getBody(String.class), ""Hello World"");
		Assert.assertEquals(msg.getBody(String.class), ""Hello World"");

	}

	@Test
	public void closingInputStreamYieldsToException() throws Exception {
		Exchange exchange = new DefaultExchange(context);
		Message msg = exchange.getIn();
		CachedOutputStream out = new CachedOutputStream(exchange);
		for ( int i = 0 ; i < 10000; i++) out.write(""0123456789"".getBytes());
		msg.setBody(out.getStreamCache());
		InputStream in = msg.getBody(InputStream.class);
		in.read();
		in.close();
		msg.getBody(String.class);

	}
	
	@Test
	public void cachedOutputStreamsShouldBeClosable() throws Exception {
		Exchange exchange = new DefaultExchange(context);
		Message msg = exchange.getIn();
		CachedOutputStream out = new CachedOutputStream(exchange);
		for ( int i = 0 ; i < 10000; i++) out.write(""0123456789"".getBytes());
		msg.setBody(out.getStreamCache());
		out.close();
		msg.getBody(String.class);
	}

}","njiang:1366227157:2013-04-18T03:32:37.567+0000:1366227157:2013-04-18T03:32:37.567+0000:If you need to read the StreamCache again, you need to call the reset method.
If you close the CachedOutputStream which uses the temp file to store the stream,  you cannot access the stream anymore.
ulrich.kramer:1366234508:2013-04-18T05:35:08.757+0000:1368134143:2013-05-10T05:15:43.569+0000:h3. Multiple convertions

If you call msg.getBody in your Processor twice you don't know if the exchange was created using a StreamCache. To be sure, you always have to call MessageHelper.resetStreamCache before you call Message.getBody.


Wouldn't it be easier to call MessageHelper.resetStreamCache during the convertion of StreamCache to something else?

Additionally there should be no automatic convertion from StreamCache to InputStream (FileInputStreamCache extends InputStream). I think it would be better to extend the StreamCache interface with a method returning an InputStream. This method could be used to convert StreamCache instances to InputStreams. Today two concurrent readers get the same InputStream object.

If you are using normal Apache Camel routes, the StreamCachingInterceptor is calling StreamCache.reset between two steps and everthing is fine. But if you write components using other components (e.g. implement a protocol based on HTTP using the jetty component) there is no interceptor inserted between. So you have always take care when you call Message.getBody.

h3. Closing InputStream

I think it should be possible to call FileInputStreamCache.close without getting an exception on a the following convertion. This could be also achieved by calling MessageHelper.resetStreamCache during each convertion or by setting stream to null in FileInputStreamCache.close.

h3. Closing CachedOutputStream

Many source code analyzers want a stream to be closed before leaving the method. I think it should be easy to hand over the ownership of the temporary file from CachedOutputStream to FileInputStreamCache during the call to getStreamCache

h3. Livecycle Management

The live cycle management behaves differently for small objects such as for large messages. The cached content for messages greater than 64kB is removed at the end of the livecycle of the exchange. Smaller messages can be accessed after the completion of the exchange without an error.

h3. Delay Endpoint

I implemented a DelayEndpoint showing the problems with stream caching. This endpoint immediately acknowledges incomming messages and delays them for a short time before forwarding them to the next processor.

Stream caching is not used explicitly. The jetty component uses stream caching under the hood. 

If I send small messages (less than 64 kB) everthing works fine. For messages larger than 64 kB sometimes a ""Stream close"" exception is thrown and the received message is not complete. 

The reason is that the jetty component (for the HTTP response) and the processor at the end of the route are reading concurrently from FileInputStreamCache.

{code}
package com.sap.camel.util;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.Semaphore;

import junit.framework.Assert;

import org.apache.camel.AsyncCallback;
import org.apache.camel.AsyncProcessor;
import org.apache.camel.CamelContext;
import org.apache.camel.Consumer;
import org.apache.camel.Endpoint;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.Producer;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultConsumer;
import org.apache.camel.impl.DefaultEndpoint;
import org.apache.camel.impl.DefaultProducer;
import org.apache.camel.util.AsyncProcessorConverterHelper;
import org.apache.camel.util.AsyncProcessorHelper;
import org.apache.camel.util.ExchangeHelper;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

class DelayProducer extends DefaultProducer implements AsyncProcessor {
	private Timer timer = new Timer();
	private Processor delegate;
	
	public DelayProducer(Endpoint endpoint, Processor delegate) {
		super(endpoint);
		this.delegate = delegate;
	}
	@Override
	public void process(Exchange exchange) throws Exception {
		AsyncProcessorHelper.process(this, exchange);
	}

	@Override
	public boolean process(final Exchange exchange, final AsyncCallback callback) {
		final Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, true);
		timer.schedule(new TimerTask() {

			@Override
			public void run() {
				try {
					delegate.process(copy);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}}, 0);
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		callback.done(true);
		return true;
	}
	
}

class DelayEndpoint extends DefaultEndpoint {

	private AsyncProcessor consumer = null;
	public DelayEndpoint(String uri, CamelContext context) {
		super(uri,context);
	}
	@Override
	public Producer createProducer() throws Exception {
		return new DelayProducer(this,consumer);
	}

	@Override
	public Consumer createConsumer(Processor processor) throws Exception {
		consumer = AsyncProcessorConverterHelper.convert(processor);
		return new DefaultConsumer(this,processor);
	}

	@Override
	public boolean isSingleton() {
		return true;
	}
	
}

public class StreamCacheBugs {
	
	private CamelContext context;
	
	@BeforeClass
	public void setUp() {
		
		context = new DefaultCamelContext();
	}

	@Test
	public void delay() throws Exception {
        
        final Endpoint timer = new DelayEndpoint(""xxx"", context);
        final StringBuffer actual = new StringBuffer();
        final Semaphore sema = new Semaphore(0);
        context.addRoutes( new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(timer).process(new Processor() {
					@Override
					public void process(Exchange exchange) throws Exception {
						actual.append(exchange.getIn().getBody(String.class));
						sema.release();
					}});
                from(""jetty:http://localhost:4444/streamcache"").setHeader(""dummy"",constant(""xxx"")).to(timer);
            }});
        context.start();
        ProducerTemplate p = context.createProducerTemplate();
		StringBuffer sb = new StringBuffer();
		for ( int i = 0 ; i < 10000; i++) sb.append(""0123456789"");
		for ( int i = 0 ; i < 10;i++) {
			actual.delete(0, actual.length());
			p.sendBody(""jetty:http://localhost:4444/streamcache"",sb.toString());
			sema.acquire();
			Assert.assertEquals(actual.toString(),sb.toString());
		}
        context.stop();
	}

}
{code}
ulrich.kramer:1367462030:2013-05-02T10:33:50.937+0000:1367462030:2013-05-02T10:33:50.937+0000:I replaced StreamCache with the attached implementation. This implementation no longer needs MessageHelper.resetStreamCache, Streams are closable and it revealed the problem in DelayProducer.
ulrich.kramer:1367539302:2013-05-03T08:01:42.355+0000:1367539302:2013-05-03T08:01:42.355+0000:Added size to interface. Added convertes.
davsclaus:1369544619:2013-05-26T13:03:39.845+0000:1369544619:2013-05-26T13:03:39.845+0000:Stream cache has been implemented like this since 1.x days.

"
0,CAMEL-6293,Improvement,Major,2.10.4,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Asbjørn Aarrestad,0,2,2013-04-17 08:10:52+00:00,2013-04-24 09:42:42+00:00,"To improve the ftp communication, the ftpReplyString should be added to the message header when uploading files using ftp or ftps","asbjorn@aarrestad.com:1366157543:2013-04-17T08:12:23.823+0000:1366157543:2013-04-17T08:12:23.823+0000:Pull request available on github: https://github.com/apache/camel/pull/19

davsclaus:1366157682:2013-04-17T08:14:42.251+0000:1366157682:2013-04-17T08:14:42.251+0000:Is there something like this for sftp? Wonder if there is any stats code/text we can grab also?
asbjorn@aarrestad.com:1366158993:2013-04-17T08:36:33.784+0000:1366158993:2013-04-17T08:36:33.784+0000:JSch is using channels and streams. I cannot find any similar code/text to use for sftp. The ChannelSftp class throws exceptions on errors.
davsclaus:1366767762:2013-04-24T09:42:42.246+0000:1366767762:2013-04-24T09:42:42.246+0000:Thanks Asbjørn for the patch.

I modified it slightly, as we use a constant class for constant keys by the Camel components. And prefix the keys with Camel."
0,CAMEL-6292,Improvement,Minor,"2.10.4, 2.11.0",2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-17 07:56:49+00:00,2013-07-17 09:33:49+00:00,"The component archetypes should have the pom.xml changed so they generate a project that use bundle packaging with the felix bundle plugin.


Then the component is ready to install in OSGi.


See nabble
http://camel.465427.n5.nabble.com/Creating-new-processor-components-td5730919.html",davsclaus:1366156866:2013-04-17T08:01:06.191+0000:1366156866:2013-04-17T08:01:06.191+0000:The same should be done for the dataformat archetype as well.
0,CAMEL-6291,Bug,Major,2.10.0,"2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.11.2, 2.12.0",Claus Ibsen,Vitalii Tymchyshyn,0,2,2013-04-16 14:45:35+00:00,2013-08-26 09:50:28+00:00,"Currently <routeContext> is a list of RouteDefinitions with ProcessorDefinitions inside. 
When ProcessorDefinition is asked  to makeProcessor, it calls resolvePropertyPlaceHolder that replaces any placeholder with current routeContext data. This makes it impossible to futher use such ProcessorDefinition with any other routeContext with different placeholder resolution data.","tivv:1369557309:2013-05-26T16:35:09.249+0000:1369557309:2013-05-26T16:35:09.249+0000:http://camel.apache.org/configuring-camel.html says: ""Reusable routes
The routes defined in <routeContext/> can be reused by multiple <camelContext/>.""
So, this is a bug in documented feature. If you think, it's an enhancement, the page should be corrected.
davsclaus:1377481828:2013-08-26T09:50:28.096+0000:1377481828:2013-08-26T09:50:28.096+0000:Thanks for reporting."
0,CAMEL-6290,Improvement,Minor,2.11.0,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-16 14:37:19+00:00,2013-05-17 14:10:58+00:00,"The camel-example-osgi will print to system out. This is annoying in karaf shell. As its hard to use the shell when the example runs.


We should log to the log. And tell the user to use log:tail to see the output



[  78] [Active     ] [            ] [       ] [   80] camel-example-osgi (2.12.0.SNAPSHOT)
karaf@root> >>>> SpringDSL set body:  Tue Apr 16 16:35:51 CEST 2013
lo           >>>> SpringDSL set body:  Tue Apr 16 16:35:53 CEST 2013
^C
karaf@root> >>>> SpringDSL set body:  Tue Apr 16 16:35:55 CEST 2013
stop 78
>>>> SpringDSL set body:  Tue Apr 16 16:35:57 CEST 2013",
0,CAMEL-6289,Improvement,Minor,2.11.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,3,2013-04-16 14:30:57+00:00,2017-02-08 09:42:09+00:00,"We should use the broker.xml file to setup the AMQ broker like we do with the management example.


Then we can have a better stopping order of AMQ + Camel. So we may not get the noise logs.","sachin.handiekar:1379489221:2013-09-18T15:27:01.311+0000:1379489221:2013-09-18T15:27:01.311+0000:Hi,

Please find attached the patch.

Let me know if there is anything needs to be changed.

Sachin
davsclaus:1379491168:2013-09-18T15:59:28.350+0000:1379491168:2013-09-18T15:59:28.350+0000:Its not entirely correct. The loan broker example has 2 examples
- JMS
- WS using CXF

I guess this confuses a bit. 

Ideally we should split the example into 2 sub maven modules, so we have a 
- camel-example-loan-broker-jms
- camel-example-loan-broker-cxf

So they are clearly separated.

And then in the JMS example we should define a server.xml and a client.xml file. The server.xml has the broker configured in the xml file. And the client does not (eg it only has the camel jms component). And the client then uses the tcp transport to connect to the remote broker.



sachin.handiekar:1379491621:2013-09-18T16:07:01.550+0000:1379491621:2013-09-18T16:07:01.550+0000:I should have ask before submitting the patch file.

Will make the changes as per your suggestion, and will split the example into 2 sub maven modules.
godbolerr@gmail.com:1486426534:2017-02-07T08:15:34.751+0000:1486426534:2017-02-07T08:15:34.751+0000:Submitting another patch to take care of suggestions as per : https://issues.apache.org/jira/browse/CAMEL-6289?focusedCommentId=13770908&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13770908

Original folder [camel-example-loan-broker]  needs to be removed and parent pom needs to be updated to include these two new examples.

1.camel-example-loan-broker-jms
2. camel-example-loan-broker-cxf

davsclaus:1486427460:2017-02-07T08:31:00.063+0000:1486427460:2017-02-07T08:31:00.063+0000:Thanks, we will get them into the next release.

Any of the Camel committers if you get the time then take a look at this and get this merged into the codebase."
0,CAMEL-6288,Bug,Minor,2.11.0,Future,"
None
",Resolved,Cannot Reproduce,Future,Unassigned,Claus Ibsen,0,3,2013-04-16 14:04:09+00:00,2014-01-28 15:28:41+00:00,"I am following the readme file of the camel-example-cxf-blueprint example.


After install the example and starting it in Karaf 2.3.1. I open the web url: http://localhost:8181/cxf/camel-example-cxf-blueprint/webservices/incident?wsdl


And notice this in my karaf shell



karaf@root> Warning:  The encoding 'UTF-8' is not supported by the Java runtime.
Warning: encoding ""UTF-8"" not supported, using UTF-8
Warning:  The encoding 'UTF-8' is not supported by the Java runtime.
Warning: encoding ""UTF-8"" not supported, using UTF-8





[ 172] [Active     ] [Created     ] [       ] [   80] camel-example-cxf-blueprint (2.12.0.SNAPSHOT)
karaf@root> web:list
   ID   State         Level  Web-ContextPath           Name
karaf@root> cxf:
cxf:list-busses       cxf:list-endpoints    cxf:start-endpoint    cxf:stop-endpoint
karaf@root> cxf:list-
cxf:list-busses       cxf:list-endpoints
karaf@root> cxf:list-endpoints
Name                      State      Address                                                      BusID
[ReportIncidentService  ] [Started ] [http://localhost:8181/cxf/camel-example-cxf-blueprint/webservices/incident] [org.apache.camel.camel-example-cxf-blueprint-cxf729778718]




I think we in the past had problems with this encoding not supported printed directly to System.out.","davsclaus:1366092274:2013-04-16T14:04:34.154+0000:1366092274:2013-04-16T14:04:34.154+0000:karaf@root> info
Karaf
  Karaf version               2.3.1
  Karaf home                  /opt/apache-karaf-2.3.1
  Karaf base                  /opt/apache-karaf-2.3.1
  OSGi Framework              org.apache.felix.framework - 4.0.3

JVM
  Java Virtual Machine        Java HotSpot(TM) 64-Bit Server VM version 23.7-b01
  Version                     1.7.0_13
  Vendor                      Oracle Corporation
  Uptime                      5 minutes
  Total compile time          24.956 seconds
Threads
  Live threads                48
  Daemon threads              35
  Peak                        50
  Total started               69
Memory
  Current heap size           38,657 kbytes
  Maximum heap size           520,896 kbytes
  Committed heap size         43,776 kbytes
  Pending objects             0
  Garbage collector           Name = 'PS Scavenge', Collections = 141, Time = 0.505 seconds
  Garbage collector           Name = 'PS MarkSweep', Collections = 3, Time = 0.292 seconds
Classes
  Current classes loaded      7,603
  Total classes loaded        7,604
  Total classes unloaded      1
Operating system
  Name                        Mac OS X version 10.8.3
  Architecture                x86_64
  Processors                  4
njiang:1366162383:2013-04-17T09:33:03.078+0000:1366162383:2013-04-17T09:33:03.078+0000:Here are a discussion[1] in the stackoverflow may related to this issue.

[1]http://stackoverflow.com/questions/177242/the-encoding-utf-8-is-not-supported-by-the-java-runtime
davsclaus:1390894121:2014-01-28T15:28:41.375+0000:1390894121:2014-01-28T15:28:41.375+0000:Not a Camel problem."
0,CAMEL-6287,Bug,Major,"2.10.4, 2.10.5",2.12.0,"
None
",Resolved,Won't Fix,2.12.0,Claus Ibsen,Thomas,0,3,2013-04-16 11:22:42+00:00,2013-08-21 14:57:43+00:00,"consumer.bridgeErrorHandler is enabled on file or FTP.


UnknownHostException or other GenericFileOperationFailedException are not routed to onCompletion(). 


I understand the JavaDoc for onCompletion() that every exchange regardless if success or failed would be routed to onCompletion().


In my case I have the need to aggregate every exchange to show a status of the camel route. Failed exchanges need to be inside this monitoring.


See attached unit test.","davsclaus:1368773216:2013-05-17T14:46:56.184+0000:1368773216:2013-05-17T14:46:56.184+0000:Yeah this is currently not supported. The on completions do not get triggered when using the bridge error handler from Java DSL.

davsclaus:1377068263:2013-08-21T14:57:43.053+0000:1377068263:2013-08-21T14:57:43.053+0000:I added notes to javadoc/file2 doc where the consumer.brdigeErrorHandler is documented about this. That when in use, it routes directly to the error handler and does *not* allow onCompletions,interceptors to kick in."
0,CAMEL-6286,Improvement,Minor,2.10.4,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,alex hutter,0,2,2013-04-16 09:26:35+00:00,2013-04-16 11:33:52+00:00,"Switch SqsConsumer from using getProcessor().process() to getAsyncProcessor().process() with a callback to allow use of async processors.


As I understand it is ok to always use the async processor call as its to show that 'the caller supports having the exchange asynchronously processed' rather than specifically always process it asynchronously.","alexhutter:1366075651:2013-04-16T09:27:31.601+0000:1366075651:2013-04-16T09:27:31.601+0000:I give permission for Apache to own the copyright on this patch.
davsclaus:1366083232:2013-04-16T11:33:52.154+0000:1366083232:2013-04-16T11:33:52.154+0000:Thanks for the patch. I med the S3 consumer support async as well."
0,CAMEL-6285,Improvement,Trivial,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-16 05:55:42+00:00,2013-05-17 14:14:13+00:00,"[                      Thread-1] SpringCamelContext             INFO  Uptime 47.576 seconds
[                      Thread-1] SpringCamelContext             INFO  Apache Camel 2.12-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.617 seconds
[         ActiveMQ ShutdownHook] TransportConnector             INFO  Connector tcp://localhost:61616 Stopped
[         ActiveMQ ShutdownHook] BrokerService                  INFO  Apache ActiveMQ 5.8.0 (localhost, ID:davsclaus-air.lan-51404-1366091507878-0:1) uptime 49.248 seconds
[         ActiveMQ ShutdownHook] BrokerService                  INFO  Apache ActiveMQ 5.8.0 (localhost, ID:davsclaus-air.lan-51404-1366091507878-0:1) is shutdown




I think we should do like AMQ, have the uptime reported with leading Apache Camel VERSION NAME so its easier to spot that the uptime belongs to Apache Camel.","davsclaus:1366062974:2013-04-16T05:56:14.438+0000:1366062974:2013-04-16T05:56:14.438+0000:Contributions is welcome. To fix this look in DefaultCamelContext where there is stop logic to shutdown Camel. 
davsclaus:1366063016:2013-04-16T05:56:56.179+0000:1366063016:2013-04-16T05:56:56.179+0000:What we should do is log like this
{code}
Apache Camel 2.12-SNAPSHOT (CamelContext: camel-1) uptime 47.576 seconds
Apache Camel 2.12-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.617 seconds
{code}
"
0,CAMEL-6284,Bug,Minor,None,None,"
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Babak Vahdat,Claus Ibsen,1,2,2013-04-15 16:31:33+00:00,2013-05-02 06:11:16+00:00,"See
http://stackoverflow.com/questions/15977012/apache-camel-fop-component-not-propagating-headers


Patches is welcome from the community.","bvahdat:1367391980:2013-05-01T15:06:20.588+0000:1367446276:2013-05-02T06:11:16.399+0000:The {{FopProducer}} doesn't adhere the MEP properly as it always calls {{Exchange#getOut()}} unconditionally to put the transformation result into the OUT message. However it should better do so *only* if the MEP is InOut and in case of InOnly the transformation result should be set as the body of IN Message.

Fixing this properly would cause regression by the existing tests, so let's keep this part the way it already is.
bvahdat:1367393005:2013-05-01T15:23:25.386+0000:1367393005:2013-05-01T15:23:25.386+0000:The fix is backported to the 2.11.x and 2.10.x branches as well."
0,CAMEL-6283,Bug,Major,"2.9.0, 2.10.4, 2.11.0","2.9.7, 2.10.5, 2.11.0","
None
",Closed,Fixed,"2.9.7, 2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-15 12:49:30+00:00,2013-04-17 19:38:44+00:00,Its the code in ClassLoadingAwareObjectInputStream in camel-sql that has the bug.,
0,CAMEL-6282,Improvement,Major,2.10.4,"2.10.5, 2.11.0","
None
",Closed,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,2,2013-04-15 07:13:20+00:00,2013-05-02 02:30:59+00:00,"We should disable it by default. And then allow people to turn it on, such as during development if they need to see easily if they are having to many misses etc. As that indicate a potential optimization, to avoid the many misses.


We should disable by default as under high load the stats may cause a little performance degrade.","davsclaus:1365991582:2013-04-15T10:06:22.207+0000:1365991582:2013-04-15T10:06:22.207+0000:Added a little docs at:
https://cwiki.apache.org/confluence/display/CAMEL/Type+Converter
bvahdat:1365996001:2013-04-15T11:20:01.181+0000:1365996001:2013-04-15T11:20:01.181+0000:Just wonder if it would not be better to add the {{typeConverterStatisticsEnabled}} field *only once* by the base class {{AbstractCamelContextFactoryBean}} inside the {{camel-core-xml}} module instead of duplicating the setter/getter code both inside the spring/blueprint {{CamelContextFactoryBean}} classes. That's reuse thanks to inheritance.
davsclaus:1366001885:2013-04-15T12:58:05.609+0000:1366001885:2013-04-15T12:58:05.609+0000:Babak,

Yeah that may be possible. I did the code as the other options. Haven't looked closer if there is stuff we could remove and rely on the abstract class.

Fell free to look into this. As it may be applicable for other options. The trick is that the options should use the object types, eg java.lang.Boolean instead of boolean etc. And do not have default values assigned. eg Boolean foo = Boolean.TRUE. As that makes the JAXB unmarshaller include the default values, and make the XML verbose and ugly. And therefore we defer the default value in the code.
bvahdat:1366003382:2013-04-15T13:23:02.986+0000:1366018000:2013-04-15T17:26:40.350+0000:Just for the sake of clarity I attach a local patch of what I'm trying to say. Then we could get rid of all those {{abstract}} methods at the level of {{AbstractCamelContextFactoryBean}} and make a unique implementation at the level of this class. With the attached patch in place I verified that the new tests of this ticket would still run green. I think the original intention of those abstract methods was to make use of the template method design pattern but in this particular case the usage of this pattern doesn't really make sense as we already know the unique implementation of these methods at the abstract level, both valid for Spring as well Blueprint IoC.

I will raise another ticket and work on it *after* 2.11 is out the door. Of course there're tons of other properties we would need to move up as well like {{useMDCLogging}}, {{autoStartup}}, {{threadNamePattern}}, etc.

Last but not least, thanks for your kind response :-)"
0,CAMEL-6281,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Willem Jiang,Christian Müller,0,2,2013-04-14 18:03:54+00:00,2013-04-17 19:33:28+00:00,"By accessing ""http://localhost:8080/camel-example-cxf-tomcat/webservices/incident?wsdl"" I get the following exception:



Apr 14, 2013 7:56:37 PM org.apache.catalina.core.StandardWrapperValve invoke
SEVERE: Allocate exception for servlet CXFServlet
org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'cxf' is defined
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:549)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1095)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:277)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
        at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109)
        at org.apache.cxf.transport.servlet.CXFServlet.loadBus(CXFServlet.java:77)
        at org.apache.cxf.transport.servlet.CXFNonSpringServlet.init(CXFNonSpringServlet.java:71)
        at org.apache.catalina.core.StandardWrapper.initServlet(StandardWrapper.java:1280)
        at org.apache.catalina.core.StandardWrapper.loadServlet(StandardWrapper.java:1193)
        at org.apache.catalina.core.StandardWrapper.allocate(StandardWrapper.java:865)
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:136)
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)
        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:936)
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)
        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1004)
        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:589)
        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
        at java.lang.Thread.run(Thread.java:680)","njiang:1365974086:2013-04-15T05:14:46.590+0000:1365974086:2013-04-15T05:14:46.590+0000:It is caused by remove the below line in the camel-config.xml
{code}
<import resource=""classpath:META-INF/cxf/cxf.xml""/>
{code}

I will dig the CxfServlet code to find out the root cause of it, in the meanwhile I had to add this line back to the camel-config.xml.
njiang:1365974352:2013-04-15T05:19:12.440+0000:1365974352:2013-04-15T05:19:12.440+0000:Fixed on trunk with r1467851. Need to merge into camel-2.11.x branch
muellerc:1366032256:2013-04-15T21:24:16.075+0000:1366032256:2013-04-15T21:24:16.075+0000:It works for me too on trunk"
0,CAMEL-6280,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Willem Jiang,Christian Müller,0,2,2013-04-14 15:05:55+00:00,2013-04-17 19:34:00+00:00,"I get the following exception by deploying this example into Karaf 2.3.1:



karaf@root> install -s mvn:org.apache.camel/camel-example-osgi/2.11.0
Bundle ID: 54
Error executing command: Error installing bundles:
	Unable to start bundle mvn:org.apache.camel/camel-example-osgi/2.11.0: Unresolved constraint in bundle org.apache.camel.camel-example-osgi [54]: Unable to resolve 54.0: missing requirement [54.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.builder)(version>=2.11.0)(!(version>=2.12.0)))","njiang:1365978572:2013-04-15T06:29:32.398+0000:1365978572:2013-04-15T06:29:32.398+0000:It is caused by the camel-spring feature is not install. I will update the README.txt for it.
njiang:1365978806:2013-04-15T06:33:26.169+0000:1365978806:2013-04-15T06:33:26.169+0000:Fixed on trunk with r1467862. Need to merge into camel-2.11.x branch
muellerc:1366031956:2013-04-15T21:19:16.998+0000:1366031956:2013-04-15T21:19:16.998+0000:It works for me too on the trunk"
0,CAMEL-6279,Bug,Major,2.11.0,,"
None
",Closed,Invalid,None,Willem Jiang,Christian Müller,0,2,2013-04-14 14:27:22+00:00,2013-04-15 21:15:45+00:00,"If the server is running and I start the client, I get the following exception:



cmueller$ mvn exec:java -PClient
...
[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.1.1:java (default-cli) on project camel-example-osgi-rmi: An exception occured while executing the Java class. null: InvocationTargetException: Connection refused to host: localhost; nested exception is:
[ERROR] java.net.ConnectException: Connection refused","njiang:1365979973:2013-04-15T06:52:53.105+0000:1365979973:2013-04-15T06:52:53.105+0000:I cannot reproduce this error.
Before running the client, you need to start the server by using ""mvn camel:run"" or deploying the bundle into Karaf.
muellerc:1366031745:2013-04-15T21:15:45.612+0000:1366031745:2013-04-15T21:15:45.612+0000:Cannot reproduce this issue."
0,CAMEL-6278,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Willem Jiang,Christian Müller,0,1,2013-04-14 14:16:00+00:00,2013-04-17 19:30:13+00:00,"If I deploy this example into Karaf 2.3.1 as described, I get the following exception and the service is not available:



karaf@root> osgi:install -s mvn:org.apache.camel/camel-example-reportincident-wssecurity/2.11.0
Bundle ID: 173
karaf@root> Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: java.io.FileNotFoundException: target/custom.properties (No such file or directory)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.component.cxf.CxfEndpoint.resolvePropertyPlaceholders(CxfEndpoint.java:609)
	at org.apache.camel.component.cxf.CxfEndpoint.getAddress(CxfEndpoint.java:871)
	at org.apache.camel.component.cxf.CxfEndpoint.setupServerFactoryBean(CxfEndpoint.java:219)
	at org.apache.camel.component.cxf.CxfSpringEndpoint.createServerFactoryBean(CxfSpringEndpoint.java:186)
	at org.apache.camel.component.cxf.CxfConsumer.<init>(CxfConsumer.java:63)
	at org.apache.camel.component.cxf.CxfEndpoint.createConsumer(CxfEndpoint.java:206)
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:65)
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:80)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:133)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2023)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1953)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1741)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1616)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.io.FileNotFoundException: target/custom.properties (No such file or directory)
	at java.io.FileInputStream.open(Native Method)
	at java.io.FileInputStream.<init>(FileInputStream.java:120)
	at java.io.FileInputStream.<init>(FileInputStream.java:79)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromFilePath(DefaultPropertiesResolver.java:73)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:50)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:134)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:120)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1068)
	at org.apache.camel.component.cxf.CxfEndpoint.resolvePropertyPlaceholders(CxfEndpoint.java:604)
	... 28 more",muellerc:1366113515:2013-04-16T19:58:35.865+0000:1366113515:2013-04-16T19:58:35.865+0000:Works for me too on trunk
0,CAMEL-6277,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Willem Jiang,Christian Müller,0,2,2013-04-14 13:55:27+00:00,2013-04-17 19:34:56+00:00,"cmueller$ mvn jetty:run
..
2013-04-14 15:53:38,288 [main           ] ERROR ContextLoader                  - Context initialization failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myCamelContext:beanPostProcessor': Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: NULL
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: java.lang.NoSuchFieldError: NULL
	at org.springframework.expression.TypedValue.<clinit>(TypedValue.java:32)
	at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:88)
	at org.springframework.expression.spel.support.StandardEvaluationContext.<init>(StandardEvaluationContext.java:74)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:225)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	... 50 more
2013-04-14 15:53:38.291:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-spring-security/src/main/webapp/},file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-spring-security/src/main/webapp/
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myCamelContext:beanPostProcessor': Initialization of bean failed; nested exception is java.lang.NoSuchFieldError: NULL
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
java.lang.NoSuchFieldError: NULL
	at org.springframework.expression.TypedValue.<clinit>(TypedValue.java:32)
	at org.springframework.expression.spel.support.StandardEvaluationContext.setRootObject(StandardEvaluationContext.java:88)
	at org.springframework.expression.spel.support.StandardEvaluationContext.<init>(StandardEvaluationContext.java:74)
	at org.springframework.context.expression.StandardBeanExpressionResolver.evaluate(StandardBeanExpressionResolver.java:124)
	at org.springframework.beans.factory.support.AbstractBeanFactory.evaluateBeanDefinitionString(AbstractBeanFactory.java:1299)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.evaluate(BeanDefinitionValueResolver.java:225)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:201)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)
	at org.springframework.context.support.AbstractApplicationContext.registerBeanPostProcessors(AbstractApplicationContext.java:746)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:457)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2013-04-14 15:53:38.314:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8080","njiang:1365970350:2013-04-15T04:12:30.811+0000:1365970350:2013-04-15T04:12:30.811+0000:It was caused by we upgrade the default version of spring. 
I just committed a quick fix into trunk.
njiang:1365970589:2013-04-15T04:16:29.520+0000:1365970589:2013-04-15T04:16:29.520+0000:fixed on trunk with r1467847. Need to merge into camel-2.11.x branch
muellerc:1366028708:2013-04-15T20:25:08.612+0000:1366028708:2013-04-15T20:25:08.612+0000:Works for me too from trunk"
0,CAMEL-6276,Bug,Major,None,None,"
None
",Closed,Fixed,"2.10.5, 2.11.0",Babak Vahdat,Christian Müller,0,2,2013-04-14 11:02:19+00:00,2013-04-17 19:35:43+00:00,"Client and Server using different port numbers:


Server:



2013-04-14 12:54:55,416 [ing.Main.main()] INFO  BrokerService                  - Using Persistence Adapter: MemoryPersistenceAdapter
2013-04-14 12:54:55,431 [JMX connector  ] INFO  ManagementContext              - JMX consoles can connect to service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi
2013-04-14 12:54:55,560 [ing.Main.main()] INFO  BrokerService                  - Apache ActiveMQ 5.8.0 (myBroker, ID:christians-macbook-pro.fritz.box-56795-1365936895431-0:1) is starting
2013-04-14 12:54:55,567 [ing.Main.main()] INFO  TransportConnector             - Connector vm Started
2013-04-14 12:54:55,575 [ing.Main.main()] INFO  TransportServerThreadSupport   - Listening for connections at: tcp://localhost:1101
2013-04-14 12:54:55,575 [ing.Main.main()] INFO  TransportConnector             - Connector tcp Started




Client



cmueller$ mvn exec:java -PCamelClient
...
[ERROR] Failed to execute goal org.codehaus.mojo:exec-maven-plugin:1.1.1:java (default-cli) on project camel-example-spring-jms: An exception occured while executing the Java class. null: InvocationTargetException: Exception occurred during execution on the exchange: Exchange[Message: 22]: Uncategorized exception occured during JMS processing; nested exception is javax.jms.JMSException: Error while attempting to add new Connection to the pool; nested exception is javax.jms.JMSException: Could not connect to broker URL: tcp://localhost:61610. Reason: java.net.ConnectException: Connection refused -> [Help 1]","bvahdat:1365944153:2013-04-14T20:55:53.014+0000:1365944153:2013-04-14T20:55:53.014+0000:The example breaks if in contrast to what {{README.TXT}} says:

{code}
mvn compile
{code}

One does

{code}
mvn install
{code}

then the generated {{target/custom.properties}} comes into the play for the {{tcp.port}} variable as well however currently this is *only* taken into the account by the server and *not* the 3 clients. So that the clients believe they should connect to the server using the port {{61610}} which is wrong!

bvahdat:1365945184:2013-04-14T21:13:04.805+0000:1365945184:2013-04-14T21:13:04.805+0000:Fixed the example on trunk as well as the 2.10.x branch. Need to backport to the 2.11.x branch when it's ready.
muellerc:1366027948:2013-04-15T20:12:28.395+0000:1366027948:2013-04-15T20:12:28.395+0000:It works for me too on trunk"
0,CAMEL-6275,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Christian Müller,Christian Müller,0,1,2013-04-14 10:48:00+00:00,2013-04-17 19:42:44+00:00,"I think the dependency to the ActiveMQ Kahadb store is missing for ActiveMQ 5.8.0.



cmueller$ mvn exec:java -PCamelServer
...
2013-04-14 12:45:10,160 [ing.Main.main()] ERROR BrokerService                  - Cannot create SystemUsage
java.io.IOException: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter
	at org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:39)
	at org.apache.activemq.broker.BrokerService.createPersistenceAdapter(BrokerService.java:2215)
	at org.apache.activemq.broker.BrokerService.getPersistenceAdapter(BrokerService.java:1111)
	at org.apache.activemq.broker.BrokerService.getSystemUsage(BrokerService.java:1023)
	at org.apache.activemq.xbean.XBeanBrokerService.ensureSystemUsageHasStore(XBeanBrokerService.java:70)
	at org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:58)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:1581)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1522)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:607)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:925)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:186)
	at org.apache.camel.spring.Main.doStart(Main.java:140)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.spring.Main.main(Main.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.mojo.exec.ExecJavaMojo$1.run(ExecJavaMojo.java:283)
	at java.lang.Thread.run(Thread.java:680)
Caused by: java.lang.ClassNotFoundException: org.apache.activemq.store.kahadb.KahaDBPersistenceAdapter
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.apache.activemq.broker.BrokerService.createPersistenceAdapter(BrokerService.java:2210)
	... 34 more",muellerc:1365944701:2013-04-14T21:05:01.319+0000:1365944701:2013-04-14T21:05:01.319+0000:fixed on trunk with r1467828. Need to merge into camel-2.11.x branch
0,CAMEL-6274,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Willem Jiang,Christian Müller,0,2,2013-04-14 10:43:04+00:00,2013-04-17 19:36:12+00:00,"2013-04-14 12:40:23,207 [main           ] ERROR ContextLoader                  - Context initialization failed
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 48 more
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	... 57 more
Caused by: java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487)
	... 65 more
2013-04-14 12:40:23.217:WARN:oejw.WebAppContext:Failed startup of context o.m.j.p.JettyWebAppContext{/,file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/},file:/Users/cmueller/workspaceRelease/camel/examples/camel-example-reportincident/src/main/webapp/
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1338)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
org.apache.camel.FailedToCreateRouteException: Failed to create route route1: Route(route1)[[From[cxf:/incident?bus=#cxf&serviceClass=org.... because of Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:181)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxf:///incident?bus=%23cxf&serviceClass=org.apache.camel.example.reportincident.ReportIncidentEndpoint&wsdlURL=etc%2Freport_incident.wsdl due to: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:507)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by:
java.lang.IllegalArgumentException: Could not find a suitable setter for property: bus as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.cxf.Bus with value #cxf
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:526)
	at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:536)
	at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:430)
	at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
	at org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:258)
	at org.apache.camel.component.cxf.CxfComponent.createEndpoint(CxfComponent.java:84)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:487)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:62)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:191)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
	at org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:861)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:176)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:749)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1828)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1608)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1477)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1445)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:285)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:327)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:941)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:475)
	at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:388)
	at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:293)
	at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:111)
	at org.eclipse.jetty.server.handler.ContextHandler.startContext(ContextHandler.java:740)
	at org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:238)
	at org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1238)
	at org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:683)
	at org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:480)
	at org.mortbay.jetty.plugin.JettyWebAppContext.doStart(JettyWebAppContext.java:256)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:172)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerCollection.doStart(HandlerCollection.java:229)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:95)
	at org.eclipse.jetty.server.Server.doStart(Server.java:275)
	at org.mortbay.jetty.plugin.JettyServer.doStart(JettyServer.java:65)
	at org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.startJetty(AbstractJettyMojo.java:511)
	at org.mortbay.jetty.plugin.AbstractJettyMojo.execute(AbstractJettyMojo.java:364)
	at org.mortbay.jetty.plugin.JettyRunMojo.execute(JettyRunMojo.java:521)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
2013-04-14 12:40:23.241:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:9080","njiang:1365974991:2013-04-15T05:29:51.657+0000:1365975075:2013-04-15T05:31:15.194+0000:This issue has the same reason with CAMEL-6281.
Fixed on trunk with r1467852. Need to merge into camel-2.11.x branch
muellerc:1366027701:2013-04-15T20:08:21.037+0000:1366027701:2013-04-15T20:08:21.037+0000:Works for me too on trunk"
0,CAMEL-6273,Bug,Major,2.11.0,"2.11.1, 2.12.0","
None
",Closed,Invalid,"2.11.1, 2.12.0",Christian Müller,Christian Müller,0,1,2013-04-14 10:22:42+00:00,2013-04-14 21:33:12+00:00,"cmueller$ mvn camel:run
...
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.spring.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:457)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in file [/Users/cmueller/workspaceRelease/camel/examples/camel-example-etl/target/classes/META-INF/spring/camel-context.xml]: Cannot resolve reference to bean 'jpaAdapter' while setting bean property 'jpaVendorAdapter'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jpaAdapter' defined in file [/Users/cmueller/workspaceRelease/camel/examples/camel-example-etl/target/classes/META-INF/spring/camel-context.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/hibernate/ejb/HibernatePersistence
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:329)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:107)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1360)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1118)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:915)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:472)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at org.apache.camel.spring.Main.createDefaultApplicationContext(Main.java:186)
	at org.apache.camel.spring.Main.doStart(Main.java:140)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:148)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:343)
	at org.apache.camel.spring.Main.main(Main.java:73)
	... 6 more
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jpaAdapter' defined in file [/Users/cmueller/workspaceRelease/camel/examples/camel-example-etl/target/classes/META-INF/spring/camel-context.xml]: Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/hibernate/ejb/HibernatePersistence
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:997)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:943)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:485)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:294)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:225)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:291)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:193)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:323)
	... 26 more
Caused by: org.springframework.beans.BeanInstantiationException: Could not instantiate bean class [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/hibernate/ejb/HibernatePersistence
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:162)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:87)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:990)
	... 34 more
Caused by: java.lang.NoClassDefFoundError: org/hibernate/ejb/HibernatePersistence
	at org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter.<init>(HibernateJpaVendorAdapter.java:57)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147)
	... 36 more
Caused by: java.lang.ClassNotFoundException: org.hibernate.ejb.HibernatePersistence
	at java.net.URLClassLoader$1.run(URLClassLoader.java:202)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:190)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:306)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	... 42 more
[ERROR] *************************************","muellerc:1365946392:2013-04-14T21:33:12.972+0000:1365946392:2013-04-14T21:33:12.972+0000:I cannot reproduce the issue. May be I executed ""mvn install -Phibernate"" followed by ""mvn camel:run"". In this case the Hibernate dependencies are not in the class path. Using ""mvn camel:run -Phibernate"" works. Also the openjpa and eclipselink profiles"
0,CAMEL-6272,Improvement,Minor,"2.10.0, 2.11.0","2.10.5, 2.11.0","
None
",Closed,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-04-14 09:21:45+00:00,2013-04-17 19:45:50+00:00,"We should optimize the logic and if a method name with no parameters has been defined, eg



.to(""bean:myBean?method=foo()"")




Or in ognl's such as



.when().simple(""${body.foo()} != null"").to(""direct:foo"")




Then we should optimize the logic to filter out methods with methods, as foo has been declare with no methods explicit by ().",
0,CAMEL-6271,Bug,Minor,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-14 08:43:25+00:00,2013-04-17 19:45:08+00:00,Need to merge to 2.11 branch when created.,
0,CAMEL-6270,Bug,Minor,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,3,2013-04-13 10:02:54+00:00,2013-04-17 19:55:34+00:00,The problem is that jclouds requires guava 13.0.x only and we had imports of 14.0.x in camel-jclouds which causes problems for OSGi.,"muellerc:1366199734:2013-04-17T19:55:34.341+0000:1366199734:2013-04-17T19:55:34.341+0000:Fixed with
Author: davsclaus
Date: Sat Apr 13 10:03:23 2013
New Revision: 1467582

URL: http://svn.apache.org/r1467582
Log:
CAMEL-6261: Fixed install camel-jclouds in Karaf"
0,CAMEL-6269,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,1,2,2013-04-13 08:18:14+00:00,2015-03-25 10:21:17+00:00,"See nabble
http://camel.465427.n5.nabble.com/Callback-after-startup-from-org-apache-camel-main-Main-afterStart-tp5730284.html


We should have an interface / or some methods people can override for start | stop events. Or consider just using the event notifier api from Camel. Though it has many events. And people may just an easier way of getting a callback for Camel has started. Camel has stopped etc.",
0,CAMEL-6268,Improvement,Minor,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-13 08:01:02+00:00,2013-04-17 19:58:41+00:00,"Should be faster to shutdown this pool as you may see WARN logs on stopping Camel


[                      Thread-1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
el-1) thread #2 - ShutdownTask DefaultExecutorServiceManager  INFO  Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0][stream://in?promptMessage=Enter+something%3A+] to terminate...
el-1) thread #2 - ShutdownTask DefaultExecutorServiceManager  INFO  Waited 4.002 seconds for ExecutorService: org.apache.camel.util.concurrent.RejectableThreadPoolExecutor@48b4da9b[Shutting down, pool size = 1, active threads = 1, queued tasks = 0, completed tasks = 0][stream://in?promptMessage=Enter+something%3A+] to terminate...",davsclaus:1365812712:2013-04-13T08:25:12.029+0000:1365812712:2013-04-13T08:25:12.029+0000:Need to merge to 2.11 branch
0,CAMEL-6237,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-03 18:43:45+00:00,2013-04-04 15:11:26+00:00,A karaf command to see the route profile stats. This allows end users at runtime to help them diagnose where in the route time is spent.,"davsclaus:1364985933:2013-04-03T18:45:33.185+0000:1364985933:2013-04-03T18:45:33.185+0000:A litte screen shot of a inprogress work
{code}
Camel Route timerToLog
	Camel Context: blueprintContext

Profile
Id                              Completed     Failed    Last (ms)    Mean (ms)     Min (ms)     Max (ms)    Self (ms)
[timerToLog                  ] [    2026] [       0] [         2] [         1] [         0] [        19] [      2564]
[  setBody1                  ] [    2026] [       0] [         0] [         0] [         0] [         6] [       745]
[  log1                      ] [    2026] [       0] [         1] [         0] [         0] [        11] [       828]
[  to1                       ] [    2026] [       0] [         0] [         0] [         0] [         6] [       219]
^Cs
karaf@root> logout

davsclaus:/opt/apache-karaf-2.3.1$
{code}"
0,CAMEL-6236,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-03 14:31:35+00:00,2013-08-13 06:56:21+00:00,"A new dataformat component that allows you to use any existing data format as a component. For example by sending a message to an endpoint.


eg



...
<to uri=""dataformat:jaxb:unmarshal?contextPath=com.foo.acme&amp;prettyPrint=true""/>
...




This allows people to configure the data formats from endpoint uris as well.",
0,CAMEL-6235,Improvement,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-03 08:40:34+00:00,2013-04-03 09:43:52+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-file-component-preMove-creates-directory-before-read-lock-acquired-tp5728193.html


We should acquire the lock first, and then do the pre move afterwards.",
0,CAMEL-6234,Bug,Major,"2.9.6, 2.10.4",2.11.0,"
None
",Closed,Fixed,2.11.0,Hadrian Zbarcea,Hadrian Zbarcea,0,2,2013-04-02 20:07:41+00:00,2013-05-11 15:50:36+00:00,"BindyCsvDataFormat only holds one model. When multiple models are defined in the same package or field positions overlap, only one @DataField is kept (the last one) overwriting the previous mapping. This leads to unpredictable behavior, from the wrong field value being populated, to format mismatch exceptions for fields of different types.


This behavior is by design, as camel supports deep models, spread over multiple files (see AnnotationModelLoader.loadModels() implementation where whole packages are scanned).


The documentation is rather vague, but I believe supporting multiple models in the same package is not really feasible, and overkill at best. Therefore my preference would be to keep the functionality as is and document the limitation.


Currently the BindyCVSFieldEndingWithSeparatorIssueTest fails due to a conflict between MyCsvRecord.class and BindyDoubleQuotesCsvUnmarshallTest.Order.class defined in the same package. Moving MyCsvRecord to a different package is a trivial fix. I will look into adding some model validation as well to WARN if the model is inconsistent (i.e. has overlaps or gaps).","hadrian:1364922924:2013-04-03T01:15:24.215+0000:1364922924:2013-04-03T01:15:24.215+0000:Patch applied to trunk. Need to backport to 2.10.x and 2.9.x and update docs.
muellerc:1368258406:2013-05-11T15:46:46.146+0000:1368258406:2013-05-11T15:46:46.146+0000:I documented the limitation in the WIKI page.
muellerc:1368258636:2013-05-11T15:50:36.308+0000:1368258636:2013-05-11T15:50:36.308+0000:Because the Camel 2.10.x branch differs from the current trunk and the Camel 2.9.x branch isn't supported anymore, I would not pack porting this fix (until may somebody request it)."
0,CAMEL-6233,Improvement,Major,2.10.3,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Johann Vanackere,2,4,2013-04-02 18:03:03+00:00,2013-05-26 22:49:13+00:00,"BridgePropertyPlaceholderConfigurer does not support recursive properties (as Spring property placeholder does).


Given the following Spring properties file :



project.path=/project
integration.in=${project.path}/in




If I use the expression {{integration.in}} in the from clause of my RouteBuilder, I get an exception :



Invalid directory: ${project.path}/in. Dynamic expressions with ${ } placeholders is not allowed. Use the fileName option to set the dynamic expression.","preben:1364903479:2013-04-02T19:51:19.901+0000:1364903479:2013-04-02T19:51:19.901+0000:Should be supported from 2.11 see https://issues.apache.org/jira/browse/CAMEL-5328 
I wonder if the support can be extended to use the Spring properties notation $ with the BridgePropertyPlaceholderConfigurer instead of {{}}
vanackej:1364918753:2013-04-03T00:05:53.166+0000:1364918753:2013-04-03T00:05:53.166+0000:Indeed, support of Spring properties notation would be nice.
vanackej:1364952676:2013-04-03T09:31:16.427+0000:1364952676:2013-04-03T09:31:16.427+0000:Any idea when Camel 2.11 will be available ? 2.11 release was planned for march 2013, and there is only 4 open issues remaining, so can we expect the release to happen soon ?

I don't complain about this delay, but this issue is blocking one of my projects. So I just want to know if I should wait a few days or if I should find a workaround.
davsclaus:1364966884:2013-04-03T13:28:04.289+0000:1364966884:2013-04-03T13:28:04.289+0000:You can follow the 2.11 release talk at the Camel @dev mailing list
http://camel.465427.n5.nabble.com/DISCUSS-Moving-towards-Camel-2-11-release-tp5725088.html"
0,CAMEL-6232,New Feature,Major,2.10.4,Future,"

spring

",Resolved,Abandoned,Future,Unassigned,David Cifer,0,1,2013-04-02 15:41:19+00:00,2021-04-19 19:11:02+00:00,"We have a spring DSL based Camel system. I wanted to introduce an interceptor for one of the routes, but I wanted to define it on a separate xml file. So when the xml is added to the Spring Context Loader than the interceptor is active otherwise it isn't.


Unfortunately camel support contextScan and packageScan for camel routes defined with JAVA.


My work around currently is having a bean, which have a route definition and start up time camel context is injected. So it registers itself to the route.


But a more fluent solution would be welcome.


More details: http://camel.465427.n5.nabble.com/Refering-implicitly-to-routeContext-td5730047.html#a5730204",edvicif:1365147719:2013-04-05T15:41:59.863+0000:1365147719:2013-04-05T15:41:59.863+0000:I found a shortcoming of the bean solution. If the route what I try to advice has property placeholders. Than it is unable to create the interceptor. Probably because I'm receiving the CamelContext reference before PropertyPlaceHolder initialized.
0,CAMEL-6231,Bug,Major,2.10.4,,"
None
",Resolved,Invalid,None,Willem Jiang,Igor Ivaniuk,0,3,2013-04-02 12:31:59+00:00,2013-05-26 12:48:31+00:00,"I'm having troubles trying to create a route that splits files received from FTP.


Here is the configuration (in Spring DSL):



<camelContext id=""receiveFTP"" trace=""true"" xmlns=""http://camel.apache.org/schema/spring"" >
	<threadPoolProfile id=""receiveFTP-splitter-profile""
                           defaultProfile=""false"" poolSize=""20""
                           maxPoolSize=""30""/>
	<!-- Endpoints -->
	<endpoint id=""FileOutput"" uri=""file:D:/Temp/camel-test/ftpReceive/?fileName=Received_${exchangeId}_${file:onlyname}"" />
	<endpoint id=""FTPSource"" uri=""ftp://192.168.21.11:21/folder/?pollStrategy=#ftpPollStrategy&amp;throwExceptionOnConnectFailed=true&amp;binary=false&amp;passiveMode=true&amp;readLock=rename&amp;delete=true&amp;moveFailed=.failed&amp;include=.*\.txt&amp;delay=1000&amp;localWorkDirectory=../../camel_temp/&amp;username=username&amp;password=password&amp;maxMessagesPerPoll=100&amp;consumer.bridgeErrorHandler=true"" />

	<!-- Routes -->
	<route id=""ReceiveFromFTP"">
		<from ref=""FTPSource"" />
		<threads poolSize=""1"" maxPoolSize=""1"">
			<split streaming=""true"" parallelProcessing=""true"" executorServiceRef=""receiveFTP-splitter-profile"">
				<tokenize token=""\r\n""/>
				<to ref=""FileOutput""/>
			</split>
		</threads>
	</route>
</camelContext>




The FTP location contains a file with several lines, I'm trying to split it, and in the output location I have one file with the following content:



-rw-r--r-- 1 ftp ftp            141 Apr 02 08:04 FTP_ftpTest.txt_20130402081001301.txt



Looks like the Split component doesn't take the payload of the received file. Even more, adding <convertBodyTo type=""java.lang.String""/> before splitting resolves the problem. But I assume this is not expected behavior.","njiang:1364936457:2013-04-03T05:00:57.557+0000:1364936457:2013-04-03T05:00:57.557+0000:Hi,

I just checked the code, and did some basic tests. It looks like Camel should be able handle the payload of file out of box. I'm not sure if there is something wrong with the Charset setting. Can you check the camel error log for more information?

Willem
igor.ivaniuk@intellecteu.com:1364971454:2013-04-03T14:44:14.676+0000:1364971489:2013-04-03T14:44:49.094+0000:There are no errors in Camel log at all.
Here is the debug output in Camel log, that appears on processing the file from FTP. Sorry for log this big:

{noformat}
2013-04-03T10:28:20.290-0500|INFO |Thread:Thread-27|org.apache.camel.spring.SpringCamelContext - Total 1 routes, of which 1 is started.
2013-04-03T10:28:20.290-0500|INFO |Thread:Thread-27|org.apache.camel.spring.SpringCamelContext - Apache Camel 2.10.4-SNAPSHOT (CamelContext: receiveFTP) started in 1.141 seconds
2013-04-03T10:28:21.305-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpConsumer - Not connected/logged in, connecting to: ftp://idstest@192.168.21.11:21
2013-04-03T10:28:21.524-0500|INFO |Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpConsumer - Connected and logged in to: ftp://idstest@192.168.21.11:21
2013-04-03T10:28:21.743-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpConsumer - Took 0.219 seconds to poll: ids/
2013-04-03T10:28:21.743-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpConsumer - Total 1 files to consume
2013-04-03T10:28:21.743-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpOperations - Renaming file: ids/FTP_ftpTest.txt_20130403102739040.txt to: ids//FTP_ftpTest.txt_20130403102739040.txt.camelExclusiveReadLock
2013-04-03T10:28:21.759-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpOperations - Renaming file: ids//FTP_ftpTest.txt_20130403102739040.txt.camelExclusiveReadLock to: ids/FTP_ftpTest.txt_20130403102739040.txt
2013-04-03T10:28:21.759-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.util.FileUtil - Retrying attempt 0 to delete file: ..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt
2013-04-03T10:28:21.759-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.util.FileUtil - Tried 1 to delete file: ..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt with result: true
2013-04-03T10:28:21.993-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpOperations - Retrieve file to local work file result: true
2013-04-03T10:28:21.993-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.util.FileUtil - Tried 1 to rename file: ..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt.inprogress to: ..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt with result: true
2013-04-03T10:28:21.993-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.remote.FtpConsumer - About to process file: RemoteFile[FTP_ftpTest.txt_20130403102739040.txt] using exchange: Exchange[FTP_ftpTest.txt_20130403102739040.txt]
2013-04-03T10:28:21.993-0500|INFO |Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|ExchangeTracer - ID-INDIGO5-59921-1365002690852-4-2 >>> (ReceiveFromFTP) from(ftp://192.168.21.11:21/ids/?binary=false&consumer.bridgeErrorHandler=true&delay=1000&delete=true&include=.*%5C.txt&localWorkDirectory=..%2F..%2Fids_temp%2F&maxMessagesPerPoll=100&moveFailed=.failed&passiveMode=true&password=1ds%23%232013&pollStrategy=%23ftpPollStrategy&readLock=rename&throwExceptionOnConnectFailed=true&username=idstest) --> pipeline <<< Pattern:InOnly, Headers:{CamelFilePath=ids//FTP_ftpTest.txt_20130403102739040.txt, CamelFileName=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLastModified=1365002520000, CamelFileHost=192.168.21.11, breadcrumbId=ID-INDIGO5-59921-1365002690852-4-1, CamelFileAbsolute=false, CamelFileParent=ids, CamelFileNameOnly=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLocalWorkPath=..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt, CamelFileRelativePath=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLength=141, CamelFileAbsolutePath=ids/FTP_ftpTest.txt_20130403102739040.txt}, BodyType:org.apache.camel.component.file.remote.RemoteFile, Body:[Body is file based: RemoteFile[FTP_ftpTest.txt_20130403102739040.txt]]
2013-04-03T10:28:21.993-0500|INFO |Thread:Camel (receiveFTP) thread #15 - Threads|ExchangeTracer - ID-INDIGO5-59921-1365002690852-4-2 >>> (ReceiveFromFTP) pipeline --> split[tokenize(body, \r\n)] <<< Pattern:InOnly, Headers:{CamelFilePath=ids//FTP_ftpTest.txt_20130403102739040.txt, CamelFileName=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLastModified=1365002520000, CamelFileHost=192.168.21.11, breadcrumbId=ID-INDIGO5-59921-1365002690852-4-1, CamelFileAbsolute=false, CamelFileParent=ids, CamelFileNameOnly=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLocalWorkPath=..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt, CamelFileRelativePath=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLength=141, CamelFileAbsolutePath=ids/FTP_ftpTest.txt_20130403102739040.txt}, BodyType:org.apache.camel.component.file.remote.RemoteFile, Body:[Body is file based: RemoteFile[FTP_ftpTest.txt_20130403102739040.txt]]
2013-04-03T10:28:22.024-0500|DEBUG|Thread:Camel (receiveFTP) thread #15 - Threads|org.apache.camel.processor.DefaultErrorHandler - Redelivery enabled: true on error handler: DefaultErrorHandler[Channel[sendTo(Endpoint[file://D:/Temp/ids-test/ftpReceive/?fileName=Received_%24%7BexchangeId%7D_%24%7Bfile%3Aonlyname%7D])]]
2013-04-03T10:28:22.040-0500|DEBUG|Thread:Camel (receiveFTP) thread #15 - Threads|org.apache.camel.processor.MulticastProcessor - Waiting for on-the-fly aggregation to complete aggregating 1 responses for exchangeId: ID-INDIGO5-59921-1365002690852-4-2
2013-04-03T10:28:22.040-0500|INFO |Thread:Camel (receiveFTP) thread #16 - Split|ExchangeTracer - ID-INDIGO5-59921-1365002690852-4-3 >>> (ReceiveFromFTP) from(ftp://192.168.21.11:21/ids/?binary=false&consumer.bridgeErrorHandler=true&delay=1000&delete=true&include=.*%5C.txt&localWorkDirectory=..%2F..%2Fids_temp%2F&maxMessagesPerPoll=100&moveFailed=.failed&passiveMode=true&password=1ds%23%232013&pollStrategy=%23ftpPollStrategy&readLock=rename&throwExceptionOnConnectFailed=true&username=idstest) --> file://D:/Temp/ids-test/ftpReceive/?fileName=Received_%24%7BexchangeId%7D_%24%7Bfile%3Aonlyname%7D <<< Pattern:InOnly, Headers:{CamelFileRelativePath=FTP_ftpTest.txt_20130403102739040.txt, CamelFileHost=192.168.21.11, CamelFileLength=141, CamelFileAbsolute=false, breadcrumbId=ID-INDIGO5-59921-1365002690852-4-1, CamelFileParent=ids, CamelFileLocalWorkPath=..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt, CamelFileName=FTP_ftpTest.txt_20130403102739040.txt, CamelFileNameOnly=FTP_ftpTest.txt_20130403102739040.txt, CamelFileAbsolutePath=ids/FTP_ftpTest.txt_20130403102739040.txt, CamelFilePath=ids//FTP_ftpTest.txt_20130403102739040.txt, CamelFileLastModified=1365002520000}, BodyType:String, Body:-rw-r--r-- 1 ftp ftp            141 Apr 03 10:22 FTP_ftpTest.txt_20130403102739040.txt
2013-04-03T10:28:22.040-0500|DEBUG|Thread:Camel (receiveFTP) thread #16 - Split|org.apache.camel.processor.SendProcessor - >>>> Endpoint[file://D:/Temp/ids-test/ftpReceive/?fileName=Received_%24%7BexchangeId%7D_%24%7Bfile%3Aonlyname%7D] Exchange[null]
2013-04-03T10:28:22.040-0500|DEBUG|Thread:Camel (receiveFTP) thread #16 - Split|org.apache.camel.component.file.FileOperations - Using InputStream to write file: D:\Temp\ids-test\ftpReceive\Received_ID-INDIGO5-59921-1365002690852-4-3_FTP_ftpTest.txt_20130403102739040.txt
2013-04-03T10:28:22.118-0500|DEBUG|Thread:Camel (receiveFTP) thread #16 - Split|org.apache.camel.component.file.GenericFileProducer - Wrote [D:\Temp\ids-test\ftpReceive\Received_ID-INDIGO5-59921-1365002690852-4-3_FTP_ftpTest.txt_20130403102739040.txt] to [Endpoint[file://D:/Temp/ids-test/ftpReceive/?fileName=Received_%24%7BexchangeId%7D_%24%7Bfile%3Aonlyname%7D]]
2013-04-03T10:28:22.118-0500|INFO |Thread:Camel (receiveFTP) thread #16 - Split|ExchangeTracer - ID-INDIGO5-59921-1365002690852-4-3 >>> (ReceiveFromFTP) from(ftp://192.168.21.11:21/ids/?binary=false&consumer.bridgeErrorHandler=true&delay=1000&delete=true&include=.*%5C.txt&localWorkDirectory=..%2F..%2Fids_temp%2F&maxMessagesPerPoll=100&moveFailed=.failed&passiveMode=true&password=1ds%23%232013&pollStrategy=%23ftpPollStrategy&readLock=rename&throwExceptionOnConnectFailed=true&username=idstest) --> file://D:/Temp/ids-test/ftpReceive/?fileName=Received_%24%7BexchangeId%7D_%24%7Bfile%3Aonlyname%7D <<< Pattern:InOnly, Headers:{CamelFileNameProduced=D:\Temp\ids-test\ftpReceive\Received_ID-INDIGO5-59921-1365002690852-4-3_FTP_ftpTest.txt_20130403102739040.txt, CamelFileAbsolutePath=ids/FTP_ftpTest.txt_20130403102739040.txt, CamelFileNameOnly=FTP_ftpTest.txt_20130403102739040.txt, CamelFileParent=ids, CamelFileHost=192.168.21.11, CamelFileRelativePath=FTP_ftpTest.txt_20130403102739040.txt, CamelFileAbsolute=false, CamelFileLocalWorkPath=..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt, CamelFileLastModified=1365002520000, breadcrumbId=ID-INDIGO5-59921-1365002690852-4-1, CamelFilePath=ids//FTP_ftpTest.txt_20130403102739040.txt, CamelFileLength=141, CamelFileName=FTP_ftpTest.txt_20130403102739040.txt}, BodyType:String, Body:-rw-r--r-- 1 ftp ftp            141 Apr 03 10:22 FTP_ftpTest.txt_20130403102739040.txt
2013-04-03T10:28:22.180-0500|INFO |Thread:pool-15-thread-1|com.it.ids.gui.delegates.admin.AccountManagementDelegate - Successfully loaded customers to user-interface table.
2013-04-03T10:28:22.321-0500|DEBUG|Thread:Camel (receiveFTP) thread #17 - Splitter-AggregateTask|org.apache.camel.processor.MulticastProcessor - Done aggregating 1 exchanges on the fly.
2013-04-03T10:28:22.321-0500|DEBUG|Thread:Camel (receiveFTP) thread #17 - Splitter-AggregateTask|org.apache.camel.processor.MulticastProcessor - Signaling we are done aggregating on the fly for exchangeId: ID-INDIGO5-59921-1365002690852-4-2
2013-04-03T10:28:22.321-0500|DEBUG|Thread:Camel (receiveFTP) thread #15 - Threads|org.apache.camel.processor.MulticastProcessor - Done parallel processing 1 exchanges
2013-04-03T10:28:22.321-0500|INFO |Thread:Camel (receiveFTP) thread #15 - Threads|ExchangeTracer - ID-INDIGO5-59921-1365002690852-4-2 >>> (ReceiveFromFTP) pipeline --> split[tokenize(body, \r\n)] <<< Pattern:InOnly, Headers:{CamelFilePath=ids//FTP_ftpTest.txt_20130403102739040.txt, CamelFileName=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLastModified=1365002520000, CamelFileHost=192.168.21.11, breadcrumbId=ID-INDIGO5-59921-1365002690852-4-1, CamelFileAbsolute=false, CamelFileParent=ids, CamelFileNameOnly=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLocalWorkPath=..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt, CamelFileRelativePath=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLength=141, CamelFileAbsolutePath=ids/FTP_ftpTest.txt_20130403102739040.txt}, BodyType:org.apache.camel.component.file.remote.RemoteFile, Body:[Body is file based: RemoteFile[FTP_ftpTest.txt_20130403102739040.txt]]
2013-04-03T10:28:22.477-0500|INFO |Thread:Camel (receiveFTP) thread #15 - Threads|ExchangeTracer - ID-INDIGO5-59921-1365002690852-4-2 >>> (ReceiveFromFTP) pipeline --> split[tokenize(body, \r\n)] <<< Pattern:InOnly, Headers:{CamelFilePath=ids//FTP_ftpTest.txt_20130403102739040.txt, CamelFileName=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLastModified=1365002520000, CamelFileHost=192.168.21.11, breadcrumbId=ID-INDIGO5-59921-1365002690852-4-1, CamelFileAbsolute=false, CamelFileParent=ids, CamelFileNameOnly=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLocalWorkPath=..\..\ids_temp\FTP_ftpTest.txt_20130403102739040.txt, CamelFileRelativePath=FTP_ftpTest.txt_20130403102739040.txt, CamelFileLength=141, CamelFileAbsolutePath=ids/FTP_ftpTest.txt_20130403102739040.txt}, BodyType:org.apache.camel.component.file.remote.RemoteFile, Body:[Body is file based: RemoteFile[FTP_ftpTest.txt_20130403102739040.txt]]
2013-04-03T10:28:22.477-0500|DEBUG|Thread:Camel (receiveFTP) thread #13 - ftp://192.168.21.11:21/ids/|org.apache.camel.component.file.GenericFileOnCompletion - Done processing file: RemoteFile[FTP_ftpTest.txt_20130403102739040.txt] using exchange: Exchange[FTP_ftpTest.txt_20130403102739040.txt]
{noformat}

On receiving FTP file, the BodyType is *BodyType:org.apache.camel.component.file.remote.RemoteFile*
After starting Split - *BodyType:String*.
This is all I can read from the log.
davsclaus:1369543684:2013-05-26T12:48:04.889+0000:1369543684:2013-05-26T12:48:04.889+0000:Removed the <threads>
davsclaus:1369543711:2013-05-26T12:48:31.385+0000:1369543711:2013-05-26T12:48:31.385+0000:You should not use both threads and splitter with parallel."
0,CAMEL-6230,Improvement,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-04-01 08:28:35+00:00,2013-04-02 13:14:11+00:00,"1)
This allows end users to control this, in some situations where they need this.


2)
Also the parameters Map when using raw uri should contain the raw values. Currently AFAIR its only the uri string that is raw.


We need to make this consistent as well.","davsclaus:1364879651:2013-04-02T13:14:11.615+0000:1364879651:2013-04-02T13:14:11.615+0000:Fixed #2.

For #1, we can for now rely on the RAW(value) style. As implementing this would require to parse the parameters possible twice, as we need to discover that useRawUri=true was configured. And that can use property placeholders, so we can't just rely on indexOf for scanning that. 

Not sure if this is worth the extra effort, and further complicating the parameter parsing logic to handle this."
0,CAMEL-6229,Bug,Major,None,None,"
None
",Closed,Fixed,None,Raúl Kripalani,Alan Foster,0,2,2013-03-31 21:33:27+00:00,2013-05-02 02:30:58+00:00,"When exposing a cxf-rs webservice and attempting to talk to another route, using InOut MEP + ActiveMQ the following exception occurs 



22:18:14,813 | INFO  | tp1882786420-364 | route1                           | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Received a request :: 
22:18:14,838 | WARN  | nager[temporary] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'temporary' - trying to recover. Cause: The Consumer is closed
22:18:14,849 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:3"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:4"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:5"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:6"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:7"" on closing pooled connection: The connection is already closed
22:18:14,850 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:8"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:2"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:1"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:9"" on closing pooled connection: The connection is already closed
22:18:14,851 | INFO  | nager[temporary] | PooledConnection                 | 122 - org.apache.activemq.activemq-pool - 5.7.0.fuse-71-047 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-49913-1364764601861-3:3:10"" on closing pooled connection: The connection is already closed
22:18:14,857 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'responseHandler' - trying to recover. Cause: The Consumer is closed
22:18:14,919 | INFO  | responseHandler] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
22:18:14,927 | INFO  | nager[temporary] | faultJmsMessageListenerContainer | 153 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
22:18:14,939 | INFO  | responseHandler] | route2                           | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Response handler successfully received a request!
22:18:14,943 | WARN  | responseHandler] | EndpointMessageListener          | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Execution of JMS message listener failed. Caused by: [org.apache.camel.RuntimeCamelException - org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10]
org.apache.camel.RuntimeCamelException: org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:125)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[153:org.springframework.jms:3.0.7.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_27]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
Caused by: org.springframework.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10; nested exception is javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.springframework.jms.support.JmsUtils.convertJmsAccessException(JmsUtils.java:285)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.support.JmsAccessor.convertJmsAccessException(JmsAccessor.java:168)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:469)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:200)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.sendReply(EndpointMessageListener.java:358)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener$EndpointMessageListenerAsyncCallback.done(EndpointMessageListener.java:211)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:108)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	... 11 more
Caused by: javax.jms.InvalidDestinationException: Cannot publish to a deleted Destination: temp-queue://ID:alan-dell-49913-1364764601861-3:3:10
	at org.apache.activemq.ActiveMQSession.send(ActiveMQSession.java:1731)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:277)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.ActiveMQMessageProducer.send(ActiveMQMessageProducer.java:212)[125:org.apache.activemq.activemq-core:5.7.0.fuse-71-047]
	at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:79)[122:org.apache.activemq.activemq-pool:5.7.0.fuse-71-047]
	at org.apache.activemq.pool.PooledProducer.send(PooledProducer.java:62)[122:org.apache.activemq.activemq-pool:5.7.0.fuse-71-047]
	at org.springframework.jms.core.JmsTemplate.doSend(JmsTemplate.java:592)[153:org.springframework.jms:3.0.7.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSend(JmsConfiguration.java:278)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:217)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:159)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$4.doInJms(JmsConfiguration.java:202)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:466)[153:org.springframework.jms:3.0.7.RELEASE]
	... 15 more
22:18:35,016 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 154 - org.apache.camel.camel-jms - 2.10.0.fuse-71-047 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-49919-1364764620418-0-215]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-49919-1364764620418-0-214 on ExchangeId: ID-alan-dell-49919-1364764620418-0-213) and continue routing.
22:18:35,019 | ERROR | responseHandler] | DefaultErrorHandler              | 147 - org.apache.camel.camel-core - 2.10.0.fuse-71-047 | Failed delivery for (MessageId: ID-alan-dell-49919-1364764620418-0-214 on ExchangeId: ID-alan-dell-49919-1364764620418-0-213). Exhausted after delivery attempt: 1 caught: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:133)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:53)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)[154:org.apache.camel.camel-jms:2.10.0.fuse-71-047]
	at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:209)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:159)[147:org.apache.camel.camel-core:2.10.0.fuse-71-047]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_27]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_27]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_27]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_27]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_27]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
22:18:35,030 | WARN  | tp1882786420-362 | WebApplicationExceptionMapper    | 183 - org.apache.cxf.cxf-rt-frontend-jaxrs - 2.6.0.fuse-71-047 | javax.ws.rs.WebApplicationException: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.returnResponse(CxfRsInvoker.java:149)
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.asyncInvoke(CxfRsInvoker.java:104)
	at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:57)
	at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:167)
	at org.apache.cxf.jaxrs.JAXRSInvoker.invoke(JAXRSInvoker.java:94)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor$1.run(ServiceInvokerInterceptor.java:58)
	at org.apache.cxf.interceptor.ServiceInvokerInterceptor.handleMessage(ServiceInvokerInterceptor.java:94)
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262)
	at org.apache.cxf.phase.PhaseInterceptorChain.resume(PhaseInterceptorChain.java:231)
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:78)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.serviceRequest(JettyHTTPDestination.java:348)
	at org.apache.cxf.transport.http_jetty.JettyHTTPDestination.doService(JettyHTTPDestination.java:312)
	at org.apache.cxf.transport.http_jetty.JettyHTTPHandler.handle(JettyHTTPHandler.java:72)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1040)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:976)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:193)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handleAsync(Server.java:403)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:488)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:79)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:627)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:51)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-alan-dell-49919-1364764620418-0-215 not received. Exchange[Message: [foo.bar.rest.Request@2f417b29]]
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:133)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:53)
	at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)
	at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:209)
	at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:159)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	... 1 more




Using :
Camel 2.10
ActiveMQ Camel 5.7
cxf 2.6
Windows 7","raulvk:1364740522:2013-03-31T22:35:22.401+0000:1364740522:2013-03-31T22:35:22.401+0000:Two things:

# Could be related to CAMEL-5865. The InOut logic was a bit rough around the edges and was much improved in that ticket. Please try your code with Camel 2.10.4 and give us some feedback.
# Please post your route logic. In particular, I'd like to see your AMQ component configuration (JmsConfiguration) and the AMQ endpoint options, of both the producer and the consumer.

Thanks.
alanfoster:1364740628:2013-03-31T22:37:08.992+0000:1364740628:2013-03-31T22:37:08.992+0000:Attached a sample project which allows you to reproduce this error.

Note, I haven't been create a simple JUnit test that extends CamelBlueprintTestSupport, as I get a lot of strange exceptions - I'm not sure if this is a bug or not, but perhaps someone could shed light on it however?

So currently the steps to reproduce this bug actually depend on it being deployed in a container, sorry

  1) install with :  mvn install -Dmaven.test.skip=true
  2) Deploy to a container
  3) Run the junit test manually a couple of times. Sometimes the test will pass, but it also fails quite frequently

Sorry again that I couldn't get it succesfully running as a JUnit test!
raulvk:1364741332:2013-03-31T22:48:52.500+0000:1364741332:2013-03-31T22:48:52.500+0000:Thanks. Can you try with Camel JMS 2.10.4? 

Also, when you say you are on Camel 2.10, you mean Camel 2.10.0? What micro version exactly?
raulvk:1364741837:2013-03-31T22:57:17.301+0000:1364741837:2013-03-31T22:57:17.301+0000:Ok, never mind, I see the Camel version in the logs ;)

I don't know if FuseSource/Red Hat have backmerged some important JMS patches onto their 2.10.0.fuse-71-047 release.

From the logs, it looks like they backmerged the initial support for concurrentConsumers on temp reply queues from Camel 2.10.3, but they didn't merge the latest fixes which actually make this feature useable (CAMEL-5865) in Camel 2.10.4. My reasoning is that I see 10 different temp queues being created for the same request queue, which is exactly what CAMEL-5865 resolves.

Please give it a shot with Camel 2.10.4. You should be able to uninstall the current camel-jms component and install 2.10.4 with:

{code}
install -s mvn:org.apache.camel/camel-jms/2.10.4
{code}

Hopefully no more dependency upgrades will be necessary. 
alanfoster:1364744236:2013-03-31T23:37:16.616+0000:1364744236:2013-03-31T23:37:16.616+0000:[~raulvk] Thanks for the response! I did think that your fixed jira CAMEL-5865 seemed familiar :)

I wasn't able to swap out the camel-jms in the fuse container, but I downloaded service mix 4.5.1 which has camel 2.10.4 in it by default, and it seems to be working, hurray :)
alanfoster:1364744789:2013-03-31T23:46:29.390+0000:1364745386:2013-03-31T23:56:26.476+0000:Ah, I was just about to mark this as resolved, and then I noticed some very odd things in the log files :

{code}
0:28:59,458 | INFO  | tp1937409810-134 | route1                           | 96 - org.apache.camel.camel-core - 2.10.4 | Received a request :: 
00:28:59,461 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Exception inside the DMLC for Temporary ReplyTo Queue for destination responseHandler, refreshing ReplyTo destination
javax.jms.IllegalStateException: The Consumer is closed
	at org.apache.activemq.ActiveMQMessageConsumer.checkClosed(ActiveMQMessageConsumer.java:817)[62:org.apache.activemq.activemq-core:5.7.0]
	at org.apache.activemq.ActiveMQMessageConsumer.receive(ActiveMQMessageConsumer.java:581)[62:org.apache.activemq.activemq-core:5.7.0]
	at org.apache.activemq.pool.PooledMessageConsumer.receive(PooledMessageConsumer.java:67)[59:org.apache.activemq.activemq-pool:5.7.0]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveMessage(AbstractPollingMessageListenerContainer.java:429)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:310)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)[123:org.springframework.jms:3.0.7.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)[123:org.springframework.jms:3.0.7.RELEASE]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_27]
00:28:59,462 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'temporary' - trying to recover. Cause: The Consumer is closed
00:28:59,468 | INFO  | responseHandler] | PooledConnection                 | 59 - org.apache.activemq.activemq-pool - 5.7.0 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-53847-1364772340736-5:17:1"" on closing pooled connection: The connection is already closed
00:28:59,472 | INFO  | responseHandler] | PooledConnection                 | 59 - org.apache.activemq.activemq-pool - 5.7.0 | failed to delete Temporary Queue ""temp-queue://ID:alan-dell-53847-1364772340736-5:17:2"" on closing pooled connection: The connection is already closed
00:28:59,472 | WARN  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Setup of JMS message listener invoker failed for destination 'responseHandler' - trying to recover. Cause: The Session is closed
00:28:59,479 | WARN  | responseHandler] | BrokerRegistry                   | 62 - org.apache.activemq.activemq-core - 5.7.0 | Broker localhost not started so using default instead
00:28:59,482 | WARN  | responseHandler] | BrokerRegistry                   | 62 - org.apache.activemq.activemq-core - 5.7.0 | Broker localhost not started so using default instead
00:28:59,486 | INFO  | responseHandler] | faultJmsMessageListenerContainer | 123 - org.springframework.jms - 3.0.7.RELEASE | Successfully refreshed JMS Connection
{code}

And these are continuously output the log file too

{code}
00:32:11,049 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:11,053 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
00:32:12,055 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:12,056 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
00:32:13,057 | WARN  | responseHandler] | TemporaryQueueReplyManager       | 125 - org.apache.camel.camel-jms - 2.10.4 | Timeout occurred after 20000 millis waiting for reply message with correlationID [Camel-ID-alan-dell-53850-1364772369222-0-126]. Setting ExchangeTimedOutException on (MessageId: ID-alan-dell-53850-1364772369222-0-125 on ExchangeId: ID-alan-dell-53850-1364772369222-0-124) and continue routing.
00:32:13,058 | WARN  | responseHandler] | CorrelationTimeoutMap            | 96 - org.apache.camel.camel-core - 2.10.4 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@4efdd8b, won't evict and will continue trying: java.lang.IllegalStateException: COMPLETE,resumed
{code}

I'm also seeing a lot of other exceptions in the log file too, related to both cxf/camel/activemq, but it seems to handle new requests just fine!

I wonder if this is reproducible on your end at all? :) 

I really wish I could've gotten that JUnit test to run! :(

Edit - I can't seem to reproduce this after a fresh start of servicemix unfortunately... But something did go _very_ wrong! :)
raulvk:1364777126:2013-04-01T08:45:26.188+0000:1364777126:2013-04-01T08:45:26.188+0000:[~alanfoster] - I've reproduced this situation in the past when using the VM Transport and SMX 4.5.0 or above. In my case, the culprit was the activemq-broker.xml hotdeploy feature, which was redeploying the broker soon after the Camel routes started, therefore leaving them in an inconsistent state. 

Try removing this file: SMX_HOME/etc/org.apache.felix.fileinstall-activemq.cfg, deleting the data/ directory and starting afresh.

Also, installing bundles by copying them to the deploy/ directory could be another cause, as Karaf refreshes all linked bundles during the process (possibly the broker too). How do you perform the deployment? 


alanfoster:1364787826:2013-04-01T11:43:46.620+0000:1364787826:2013-04-01T11:43:46.620+0000:[~raulvk] Ah, those conditions do seem to line up with what I am using currently; 
I was installing this code using {{osgi:install -s mvn:org/camel/1.0-SNAPSHOT}} and not the hot deploy directory

I'll close this issue though as you have already fixed this bug in CAMEL-5865, thanks!"
0,CAMEL-6228,Improvement,Minor,2.10.4,,"
None
",Resolved,Abandoned,None,Unassigned,Raúl Kripalani,0,3,2013-03-31 15:30:33+00:00,2019-08-05 09:47:08+00:00,"CxfRsInvoker#asyncInvoke and CxfRsInvoker#syncInvoke forsake the Service Object. Instead it should be passed on to the CxfRsBinding.


Will try and fix for 2.11 as it implies API changes.","muellerc:1373014382:2013-07-05T16:53:02.600+0000:1373014382:2013-07-05T16:53:02.600+0000:If it really implies an API change, we should only fix this in Camel 2.12. now (not in Camel 2.11 because 2.11.0 is already released).
davsclaus:1375856131:2013-08-07T14:15:31.445+0000:1375856131:2013-08-07T14:15:31.445+0000:Raul any update on a fix/change in 2.12 ?
raulvk:1376829080:2013-08-18T20:31:20.100+0000:1376829080:2013-08-18T20:31:20.100+0000:Looking into it.
davsclaus:1436572728:2015-07-11T07:58:48.379+0000:1436572728:2015-07-11T07:58:48.379+0000:Any update on this?"
0,CAMEL-6227,Improvement,Major,2.10.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-31 06:54:18+00:00,2013-03-31 10:29:51+00:00,"See
http://stackoverflow.com/questions/15686032/apache-camel-gson-formatter


We should make it possible to configure those gson options in the DSL.","davsclaus:1364696991:2013-03-31T10:29:51.396+0000:1364696991:2013-03-31T10:29:51.396+0000:Updated wiki page
https://cwiki.apache.org/confluence/display/CAMEL/JSON"
0,CAMEL-6226,New Feature,Major,None,,"
None
",Resolved,Abandoned,None,Unassigned,yazan,0,2,2013-03-29 11:21:30+00:00,2015-07-11 07:59:37+00:00,Add support for MINA 2 Serial Transport http://mina.apache.org/mina-project/userguide/ch6-transports/serial-transport.html,"muellerc:1364529606:2013-03-29T12:00:06.541+0000:1364529606:2013-03-29T12:00:06.541+0000:Yazan, do you consider to work an a patch for it? We love contributions: http://camel.apache.org/contributing.html
yazan:1364823900:2013-04-01T21:45:00.832+0000:1364823900:2013-04-01T21:45:00.832+0000:I'm currently working on this issue."
0,CAMEL-6225,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Chris Geer,0,2,2013-03-29 00:12:43+00:00,2013-03-30 09:22:50+00:00,No Desc,"geerzo:1364487670:2013-03-29T00:21:10.736+0000:1364487670:2013-03-29T00:21:10.736+0000:I will work on this as well.
geerzo:1364496942:2013-03-29T02:55:42.814+0000:1364496942:2013-03-29T02:55:42.814+0000:This patch adds the ability to delete a file after it's uploaded to S3. It adds a new url parameter called ""deleteAfterWrite"". It only works if the body of the message is a java.io.File object. 

I'm not sure this is the best approach but it was the only way I could get it to work. Any suggestions for improvements are welcome.
njiang:1364515189:2013-03-29T07:59:49.166+0000:1364515189:2013-03-29T07:59:49.166+0000:Applied the patch and updated the wiki page with thanks to Chris.
As this is a new feature of Camel, I didn't merge the patch into Camel 2.10.x branch.

"
0,CAMEL-6224,Task,Minor,2.10.4,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Matt McCann,0,2,2013-03-28 18:37:41+00:00,2013-04-10 21:22:38+00:00,"Per Issue CAMEL-1733, exchange related constants have been moved. The File Component documentation hasn't been updated.


I'm happy to take care of this the but ""How To Help"" docs suggest I need to be granted write access.","davsclaus:1364606679:2013-03-30T09:24:39.348+0000:1364606679:2013-03-30T09:24:39.348+0000:Yes Matt follow the guide at
http://camel.apache.org/how-do-i-edit-the-website.html

to be able to edit the wiki docs.
davsclaus:1364606710:2013-03-30T09:25:10.689+0000:1364606710:2013-03-30T09:25:10.689+0000:Can you point to where the doc error is?
moxximus:1365506246:2013-04-09T19:17:26.627+0000:1365506246:2013-04-09T19:17:26.627+0000:http://camel.apache.org/file.html

At the bottom, there is a section on using HEADER_FILE_NAME.
davsclaus:1365546670:2013-04-10T06:31:10.462+0000:1365546670:2013-04-10T06:31:10.462+0000:Ah that link is for the old file component from Camel 1.x.

You should use
http://camel.apache.org/file2.html

The odd thing is that we have changed the old file page to include the file2 page, but Confluence wiki -> html seems always to play tricks. Not sure why you see the old page.

"
0,CAMEL-6223,Bug,Major,"2.6.0, 2.10.3, 2.10.4",None,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Tim Alkemade,0,3,2013-03-28 10:58:18+00:00,2013-05-26 12:46:52+00:00,"On WebSphere 7 with service pack 7.0.0.27. When starting up a web application, I get the NullPointerException in the attached the stacktrace inconsistently. About half the time it fails, half the time it succeeds. I played around with adding and removing different versions of jaxb (2.1.10. 2.2.5, 2.2.6) , parent first / last classloading and different versions of Camel (2.6.0, 2.10.3, 2.10.4) , but none of these actions worked. 
To be clear, it only fails on this specific version of WebSphere. On the 7.0.0.23 version of websphere, tomcat, jboss and jetty the application runs. 
I created a minimal maven project which will produce a war file that reproduces the error.


I posted this issue on the forums, but got no response: http://camel.465427.n5.nabble.com/NullPointerException-with-Camel-WebSphere-7-td5729625.html","njiang:1364512141:2013-03-29T07:09:01.173+0000:1364512141:2013-03-29T07:09:01.173+0000:From your description I guess it may related the JAXB runtime which WebSphere is actually using. As you know JDK1.6 has the JAXB implementation shipped out of box, can you double check the setting with WebSphere?
timalkemade:1364515945:2013-03-29T08:12:25.926+0000:1364515945:2013-03-29T08:12:25.926+0000:I'm not sure which setting in WebSphere you mean. On the 7.0.0.23 fixpack of WebSphere (which also uses JDK1.6), the program was working. It was the same WebSphere instance, I only migrated from 7.0.0.23 to 7.0.0.27, so hopefully the settings should not have changed.
davsclaus:1364516405:2013-03-29T08:20:05.533+0000:1364516405:2013-03-29T08:20:05.533+0000:Have you contacted IBM as its a change in their application server causing this.

Camel relies on a working JAXB. We have seen bugs in JAXB causing NPEs such as when using earlier versions of the JDK 1.7 release which was buggy. Upgrading the JDK fixed that for those users.

timalkemade:1364887372:2013-04-02T15:22:52.926+0000:1364887372:2013-04-02T15:22:52.926+0000:We are in the process of contacting them. But since I saw several similar stacktraces during my google searches, which seemed to be solved in some cases by a fix in camel, I thought it might be worth investigating if this is a similar issue. 
davsclaus:1369543612:2013-05-26T12:46:52.465+0000:1369543612:2013-05-26T12:46:52.465+0000:Its not a Camel bug, but in WAS / JDK"
0,CAMEL-6222,New Feature,Major,None,Future,"
None
",Resolved,Abandoned,Future,Claus Ibsen,Claus Ibsen,0,1,2013-03-28 07:15:37+00:00,2014-01-28 13:24:28+00:00,"When Apache Aries Blueprint has released a version of blueprint-web, we can build a Camel example using it.


Like this example: http://camel.apache.org/servlet-tomcat-no-spring-example.html


But using blueprint-web.","davsclaus:1370232620:2013-06-03T12:10:20.254+0000:1370232620:2013-06-03T12:10:20.254+0000:Pushed code. blueprint-web may need to add support for 3rd party namespaces. I get this error in Tomcat
{code}
Jun 03, 2013 1:59:43 PM org.apache.catalina.core.ApplicationContext log
INFO: Loading Blueprint contexts
[file:/opt/apache-tomcat-7.0.37/webapps/camel-example-blueprintweb/WEB-INF/classes/META-INF/blueprint.xml]
Jun 03, 2013 1:59:43 PM org.apache.catalina.core.ApplicationContext log
SEVERE: Failed to startup blueprint container.
java.lang.IllegalArgumentException: Unsupported namespaces:
[http://camel.apache.org/schema/blueprint]
java.lang.IllegalArgumentException: Unsupported namespaces:
[http://camel.apache.org/schema/blueprint]
at org.apache.aries.blueprint.container.BlueprintContainerImpl.init(BlueprintContainerImpl.java:99)
at org.apache.aries.blueprint.container.BlueprintContainerImpl.<init>(BlueprintContainerImpl.java:73)
at org.apache.aries.blueprint.web.BlueprintContextListener.contextInitialized(BlueprintContextListener.java:86)
at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4797)
at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5291)
at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)
at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)
at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)
at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:633)
at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:977)
at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1655)
at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
at java.util.concurrent.FutureTask.run(FutureTask.java:166)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
at java.lang.Thread.run(Thread.java:722)

Jun 03, 2013 1:59:43 PM org.apache.catalina.core.ApplicationContext log
{code}

Using 1.0.0 version of blueprint-web
davsclaus:1374633989:2013-07-24T10:46:29.069+0000:1374633989:2013-07-24T10:46:29.069+0000:Would need to use pojosr or something as well to simulate osgi registry. This makes it a bit more harder to do easily.
davsclaus:1390886668:2014-01-28T13:24:28.037+0000:1390886668:2014-01-28T13:24:28.037+0000:This is not possible with blueprint-noweb"
0,CAMEL-6221,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Willem Jiang,0,3,2013-03-28 04:00:39+00:00,2017-03-03 13:20:09+00:00,"Current camel-scala handle doesn't support to take the exception classes.


http://camel.465427.n5.nabble.com/Handle-multiple-exceptions-in-scala-dsl-tp5729941.html","njiang:1364428790:2013-03-28T07:59:50.987+0000:1364428790:2013-03-28T07:59:50.987+0000:After digging the code for a while, I found it is impossible to set the multiple exceptions into handle method, as it use implicit manifest parameter to pass the Class related information.

Here is a workaround by calling the onException method directly in the scala code like this
{code}
builder.onException(Class[MyFunctionalException], Class[MyTechnicalException]).to(""mock:error"").handled(true)
{code}

davsclaus:1436572838:2015-07-11T08:00:38.279+0000:1436572838:2015-07-11T08:00:38.279+0000:Anyone who uses Scala would like to help?
edinhodzic:1462438436:2016-05-05T16:53:56.933+0000:1462438436:2016-05-05T16:53:56.933+0000:I'd be keen to give it a go when I get back from my holidays.
davsclaus:1488518409:2017-03-03T13:20:09.598+0000:1488518409:2017-03-03T13:20:09.598+0000:Scala DSL is deprecated"
0,CAMEL-6220,Bug,Major,"2.9.6, 2.10.4","2.9.7, 2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.9.7, 2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-03-27 16:45:34+00:00,2013-03-27 18:00:21+00:00,"For example using a quartz route policy to keep starting and stopping a route may lead to unnecessary processors being wrapped.


A log snippet where we have wrapped 4 times



2013-03-27 17:43:10,004 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]]]
2013-03-27 17:43:10,005 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]]
2013-03-27 17:43:10,005 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]]
2013-03-27 17:43:10,006 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]]
2013-03-27 17:43:10,007 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]]
2013-03-27 17:43:10,008 [amel-1_Worker-4] DEBUG RouteService                   - Starting child service on route: started-and-stopped-route -> RouteContextProcessor[Pipeline[[Channel[Log(started-and-stopped-route)[ ${body}]], Channel[Wrap[org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a] -> org.apache.camel.routepolicy.quartz.StartStopCronRoutePolicyIssueTest$2@20091e0a]]]]",
0,CAMEL-6219,Bug,Major,2.10.4,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Mark Richards,0,5,2013-03-27 15:05:00+00:00,2013-08-23 07:56:47+00:00,"Summary:
When uploading a single file to a vsftpd server from Windows using a Camel ftp:// endpoint results in a 550 Failed to change directory error.
Likely because the changeCurrentDirectory() command in FTPOperations doesn't provide the server pathSeparator when compacting the url.


Recreate:



Start a vsftpd server (this likely affects other FTP servers) in a *nix environment.
Set log4j properties to TRACE for Camel
In Windows, run a simple Java class that includes the following
ProducerTemplate pt = camelContext.createProducerTemplate();
pt.sendBody(""ftp://user@host/subfolder?fileName=test.file&password=12345678&stepwise=false&separator=UNIX"");



Trace:
[2013.03.27 14:53:56] [main]  TRACE FtpOperations -  buildDirectory(test)
[2013.03.27 14:53:56] [main]  TRACE FtpOperations -  changeCurrentDirectory(/var/ftp/pub)
[2013.03.27 14:53:56] [main]  TRACE FtpOperations -  Changing directory: \var\ftp\pub
[2013.03.27 14:53:56] [main]  WARN  RemoteFileProducer -  Writing file failed with: File operation failed: 550 Failed to change directory.
 Cannot change directory to: \var\ftp\pub. Code: 550


As you can see the path swaps from /var/ftp/pub to \var\ftp\pub which is the wrong path separator!


Likely location:
org.apache.camel.component.file.remote.FTPOperations:656
    path = FileUtil.compactPath(path);
org.apache.camel.util.FileUtil:209
    return compactPath(path, File.separatorChar);


File.separatorChar would return the LOCAL OS path, not the REMOTE OS path.
This should use the value specified by separator=UNIX (""/"" not ""\"").


Possible fix would be to use the other compactPath(path,separator) method.


Result:
You cannot upload a single file using FTP in this fashion from a Windows client to a vsftpd server on Linux. I'll have to switch to an alternative product for ftp until this is resolved, but look forward to returning to using Camel for FTP uploads in the future","mark.richards:1364368053:2013-03-27T15:07:33.871+0000:1364368053:2013-03-27T15:07:33.871+0000:Possibly relates to: http://camel.465427.n5.nabble.com/FTP-endpoint-FtpOperation-change-directory-error-tp5502517.html
davsclaus:1364368144:2013-03-27T15:09:04.976+0000:1364368144:2013-03-27T15:09:04.976+0000:Give the 2.10.5-SNAPSHOT a test as we have fixed bugs in camel-ftp since.

markdingram:1365639927:2013-04-11T08:25:27.794+0000:1365639927:2013-04-11T08:25:27.794+0000:This is working for me against 2.10.5-SNAPSHOT, but not in the current 2.12-SNAPSHOT.
rushalias:1368949982:2013-05-19T15:53:02.467+0000:1369063196:2013-05-20T23:19:56.464+0000:I am seeing the same error in 2.11.0 Release. 
Running the FTP client example (src/main/java/org/apache/camel/example/ftp/MyFtpClient.java) shipped with 2.11.0.

I am getting 
org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 550 Failed to change directory.

FTP server is running Linux Server.
Client is running on Mac Book Pro.  

Additionally, same code works just fine in 2.10.4 release. 



rushalias:1369063441:2013-05-20T23:24:01.189+0000:1369063441:2013-05-20T23:24:01.189+0000:I think I have identified source of my observed error.  

Apache Camel version 2.11.0 dependes on commons-net-3.2 while 2.10.4 dependes on commons-net-3.1.  And it seems commons-net's new implementation of __parsePathname method does not strip quotes from the path. 

Testing with commons-net-3.1, will update shortly.  
rushalias:1369064170:2013-05-20T23:36:10.226+0000:1369066320:2013-05-21T00:12:00.772+0000:Excluding commons-net-3.2 and replacing it with commons-net-3.1 seems to have fixed it.

And here is the commons-net bug report: https://issues.apache.org/jira/browse/NET-492

davsclaus:1369078568:2013-05-21T03:36:08.905+0000:1369078568:2013-05-21T03:36:08.905+0000:Thanks for testing and discovering this bug in commons net. We will downgrade to 3.1 on trunk and 2.11 branch.
davsclaus:1377215807:2013-08-23T07:56:47.486+0000:1377215807:2013-08-23T07:56:47.486+0000:A problem in commons net 3.1"
0,CAMEL-6218,Bug,Major,2.10.4,None,"
None
",Resolved,Fixed,"2.10.5, 2.11.0",Raúl Kripalani,Alan Foster,0,4,2013-03-27 12:07:21+00:00,2013-04-03 21:34:38+00:00,"The scnearios are :



when using the transferExchange option only on the producer, I don't get the body back, but not the header.
When I use the transferExchange option on both producer and consumer, I get the headers back, but not the body. And instead I get the following exception




[ryQueueReplyManager[temporary]] TemporaryQueueReplyManager     WARN  Execution of JMS message listener failed. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultExchangeHolder.unmarshal(DefaultExchangeHolder.java:107)
	at org.apache.camel.component.jms.JmsBinding.extractBodyFromJms(JmsBinding.java:128)
	at org.apache.camel.component.jms.JmsMessage.createBody(JmsMessage.java:214)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:136)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onReply(TemporaryQueueReplyHandler.java:54)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.handleReplyMessage(TemporaryQueueReplyManager.java:71)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.onMessage(ReplyManagerSupport.java:113)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)","alanfoster:1364357290:2013-03-27T12:08:10.433+0000:1364357303:2013-03-27T12:08:23.344+0000:Example of the failing test attached
davsclaus:1364358244:2013-03-27T12:24:04.571+0000:1364358244:2013-03-27T12:24:04.571+0000:What Camel version do you use?
muellerc:1364359606:2013-03-27T12:46:46.663+0000:1364359606:2013-03-27T12:46:46.663+0000:Can you try not to use inner classes!?
And can you assign serialVersionUID to your classes!?
alanfoster:1364365265:2013-03-27T14:21:05.412+0000:1364365265:2013-03-27T14:21:05.412+0000:[~davsclaus] Sorry, I forgot to post that information here

I am running this on windows 2008 r2 with the following dependencies

- Camel 2.10
- activemq-camel 5.7

[~muellerc] Apologies, I have just tried this now. After adding them to separate classes and giving them both a serialVersionUID and I still get an exception
alanfoster:1364365872:2013-03-27T14:31:12.619+0000:1364365872:2013-03-27T14:31:12.619+0000:I have also just tried this with the newer versions, and I still get this exception :(

- Camel 2.11-SNAPSHOT
- activemq-camel 5.8
alanfoster:1364366160:2013-03-27T14:36:00.527+0000:1364366160:2013-03-27T14:36:00.527+0000:Out of interest I have also tried running it with activemq-camel 5.9-SNAPSHOT, but that caused all 3 tests to fail with the following stack trace for each

{code}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: foo.Request@6c43da1b]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1347)
	at org.apache.camel.impl.DefaultExchange.setException(DefaultExchange.java:272)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:137)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.BacklogTracerInterceptor.process(BacklogTracerInterceptor.java:84)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:390)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:273)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:335)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:122)
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:60)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:342)
	at foo.ActiveMQTest.testActiveMQInOutBodyResponse(ActiveMQTest.java:48)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:46)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:292)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.NoSuchMethodError: org.apache.camel.util.ObjectHelper.notNull(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)V
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.doStart(ReplyManagerSupport.java:212)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:64)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:54)
	at org.apache.camel.component.jms.JmsProducer.createReplyManager(JmsProducer.java:503)
	at org.apache.camel.component.jms.JmsProducer.initReplyManager(JmsProducer.java:94)
	at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:164)
	at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:129)
	... 77 more
{code}



alanfoster:1364540401:2013-03-29T15:00:01.650+0000:1364540401:2013-03-29T15:00:01.650+0000:I noticed that Camel 2.11 offers camel-sjms, is this the preferred component to use over activemq-camel?

Could someone please confirm if this jira is indeed a bug please, or am I simply misunderstanding the documentation for the transferExchange option?
Thanks!
muellerc:1364606515:2013-03-30T09:21:55.642+0000:1364606515:2013-03-30T09:21:55.642+0000:No, for your fist question. It's the simple/springless JMS component. It will may become the preferred JMS component in the future, but not in 2.11.

I will have a look into this JIRA. If you could attach a complete project or a patch to an existin project in the future, it will take less time to verify the issue you have.
muellerc:1364607371:2013-03-30T09:36:11.185+0000:1364607371:2013-03-30T09:36:11.185+0000:Ok, it works for me. I can attach my simple project later...
davsclaus:1364697630:2013-03-31T10:40:30.253+0000:1364697630:2013-03-31T10:40:30.253+0000:Well the NPE should be fixed in camel-core, that is a bug.

Either we should handle that null, or thrown some other kind of exception saying something is wrong.
davsclaus:1364697734:2013-03-31T10:42:14.551+0000:1364697734:2013-03-31T10:42:14.551+0000:Alan, what exact Camel version was that stacktrace from? eg was it 2.10.0, 2.10.1, etc. We need that so we know exactly which code line the NPE is triggered from.
davsclaus:1364698109:2013-03-31T10:48:29.698+0000:1364698109:2013-03-31T10:48:29.698+0000:I assume its 2.10.0, then we can see that the NPE is because payload is null
http://svn.apache.org/viewvc/camel/tags/camel-2.10.0/camel-core/src/main/java/org/apache/camel/impl/DefaultExchangeHolder.java?view=markup
muellerc:1364722070:2013-03-31T17:27:50.267+0000:1364722070:2013-03-31T17:27:50.267+0000:I created a test which shows it fails with Camel 2.11-SNAPSHOT. It also fails with Camel 2.10.4. The exchange is transfered to the second route, but the response is not transfered back to the first route.
muellerc:1364722139:2013-03-31T17:28:59.828+0000:1364722139:2013-03-31T17:28:59.828+0000:We should fix this before 2.11.0 in my opinion.
alanfoster:1364723408:2013-03-31T17:50:08.968+0000:1364723408:2013-03-31T17:50:08.968+0000:I've just added an example project which has the previously included test failing now. I haven't had any luck tracking down the actual issue yet sadly :(
alanfoster:1364723862:2013-03-31T17:57:42.246+0000:1364723862:2013-03-31T17:57:42.246+0000:Ah, thank you for including an example project [~muellerc], I see you beat me to it! :)

I also have seen some other bugs related in this area; The most important one seems to be a race condition with using InOut + ActiveMQ Component. I'll try making a sample project to show this bug ASAP.
raulvk:1364727013:2013-03-31T18:50:13.254+0000:1364727013:2013-03-31T18:50:13.254+0000:[~alanfoster], I fixed a few bugs and race conditions in camel-jms recently. Take a look if any of [these issues|https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20component%20%3D%20camel-jms%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20assignee%20in%20(currentUser())] could match your findings.
alanfoster:1364734346:2013-03-31T20:52:26.201+0000:1364734346:2013-03-31T20:52:26.201+0000:[~raulvk] Nice work on fixing a lot of those bugs! 

The test i'm writing is having a lot of issues, I am getting a lot of blueprint apache aries ComponentDefinitionExceptions when it attempts to start the org.apache.cxf.cxf-rt-transports-http bundle in JUnit for reason...

I have been able to deploy the route to Karaf just fine however! The exception thrown when inside Karaf is {{Caused By javax.jms.InvalidDestinationException Cannot publish to a deleted Destination: temp-queue://ID:my-computer-1234-etc-etc}} - I'll keep trying to make an actual JUnit test for this though
muellerc:1364892145:2013-04-02T16:42:25.744+0000:1364892145:2013-04-02T16:42:25.744+0000:Regarding to my attached project. The strange thing is, if I set transferExchange=true to both ActiveMQ endpoints (producer and consumer), the first route ""ignore"" the response of the second one. If I set transferExchange=false on the second route, the correct body is received but not the header (because it's and serialized object).
muellerc:1364893427:2013-04-02T17:03:47.440+0000:1364893427:2013-04-02T17:03:47.440+0000:Thanks Raul for looking into it!
raulvk:1364920702:2013-04-03T00:38:22.224+0000:1364920754:2013-04-03T00:39:14.621+0000:Resolved in r1463799.

The JmsBinding is designed to be ""pull-based"", but the Exchange <=> OUT Message relationship was being set too late: after invoking the JmsBinding. Therefore, the latter wasn't able to populate body, headers and properties from the DefaultExchangeHolder in time.

As a side-effect, we now also set the OUT message when the {{transferException}} option is enabled (aside from also setting the Exception, of course). Before we only used to set the exception, but it's a chicken-or-egg situation to be honest.

This is harmless – and even better than before if you ask me, because now there's more context information in the Exchange. All JMS tests pass locally.
muellerc:1364996078:2013-04-03T21:34:38.198+0000:1364996078:2013-04-03T21:34:38.198+0000:Thanks for resolving it!"
0,CAMEL-6217,Improvement,Major,None,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Willem Jiang,Willem Jiang,0,2,2013-03-27 05:29:32+00:00,2013-03-30 13:59:33+00:00,"As the CamelTestSupport supports to create the camel context per test class, it could be handy if the CamelBlueprintTestSupport supports to create the bundle context per test class.","njiang:1364333442:2013-03-27T05:30:42.169+0000:1364333442:2013-03-27T05:30:42.169+0000:Applied the patch into trunk.
davsclaus:1364623173:2013-03-30T13:59:33.062+0000:1364623173:2013-03-30T13:59:33.062+0000:This also helps against those few times there may be a test error due osgi service timeout failure after 30 sec."
0,CAMEL-6216,New Feature,Minor,None,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Chris Geer,0,2,2013-03-27 02:20:21+00:00,2013-03-27 18:23:20+00:00,"S3 allows metadata to be associated with each object stored. This feature will allow that to be defined through the route.


I am working on the patch.","davsclaus:1364359632:2013-03-27T12:47:12.530+0000:1364359632:2013-03-27T12:47:12.530+0000:Ah Chris you are working on a patch. That is good.

Just we are closing down on 2.11.
But if your patch is ready before we start cutting the RC then we can get it included.
geerzo:1364378702:2013-03-27T18:05:02.340+0000:1364378702:2013-03-27T18:05:02.340+0000:Patch to add metadata to object put in S3. 
davsclaus:1364379800:2013-03-27T18:23:20.648+0000:1364379800:2013-03-27T18:23:20.648+0000:Thanks for the patch."
0,CAMEL-6215,Test,Minor,2.11.0,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Piotr Klimczak,0,3,2013-03-26 19:10:27+00:00,2016-01-14 16:52:33+00:00,"Resolve FIX ME on:


@Ignore(""Fix me"")
public class CacheReplicationTest


Cause:



net.sf.ehcache.CacheException: Another unnamed CacheManager already exists in the same VM. Please provide unique names for each CacheManager in the config or do one of following:
1. Use one of the CacheManager.create() static factory methods to reuse same CacheManager with same name or create one if necessary
2. Shutdown the earlier cacheManager before creating new one with same name.","muellerc:1364308218:2013-03-26T22:30:18.182+0000:1364308218:2013-03-26T22:30:18.182+0000:Piotr, do you work on a patch?
nannou9:1364308413:2013-03-26T22:33:33.934+0000:1364308413:2013-03-26T22:33:33.934+0000:YES :)

Please note that i do not have much time- I can spent about 2 hours a day during mid. week, and about 4 hours during weekends but i'm doing my best :)

Greetings,
Piotr
muellerc:1364343577:2013-03-27T08:19:37.957+0000:1364343577:2013-03-27T08:19:37.957+0000:The same fate like me. I have to work in my spare time on Camel... ;-)
Much appreciated!
lb:1452670243:2016-01-13T15:30:43.826+0000:1452670243:2016-01-13T15:30:43.826+0000:This test does not seems to exists anymore"
0,CAMEL-6214,Bug,Major,None,,"
None
",Closed,Not A Problem,None,Unassigned,Alan Foster,0,4,2013-03-26 16:47:13+00:00,2013-03-27 12:07:46+00:00,"I seem to be losing complex type headers when I send them as InOut over activemq for some reason.


It seems to work works fine using the InOut MEP for the 'direct' component though


The complex body is transferred fine, but the header is lost.","alanfoster:1364287926:2013-03-26T16:52:06.216+0000:1364287926:2013-03-26T16:52:06.216+0000:Attached example of failing test case, which uses

Camel 2.10.0
activemq-camel 5.7.0
raulvk:1364289114:2013-03-26T17:11:54.032+0000:1364289114:2013-03-26T17:11:54.032+0000:[~alanfoster] - Objects in JMS properties must be Serializable. Can you try making the Request DTO Serializable?
alanfoster:1364289602:2013-03-26T17:20:02.276+0000:1364289602:2013-03-26T17:20:02.276+0000:Hi [~raulvk], both the request and response objects are currently serializable - although that has caught me out before :)

Here's the relevant code from the attached junit test

{code:java}
    public static class Request implements Serializable {
        public String customerName;
    }

    public static class Response implements Serializable {
        public boolean success;
    }
{code}

It's also worth noting that the seriliazble Request sends correctly in the body, as expected, but the header with the same value doesn't

I have stepped through the code with a debugger, and I can't find exactly when the headers disappear! :(
muellerc:1364306850:2013-03-26T22:07:30.129+0000:1364306850:2013-03-26T22:07:30.129+0000:The inline code documentation says (https://svn.apache.org/repos/asf/camel/trunk/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java -> line 343):
only primitive headers and strings is allowed as properties
see message properties: http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html
raulvk:1364315987:2013-03-27T00:39:47.372+0000:1364315987:2013-03-27T00:39:47.372+0000:Good call, [~muellerc]. I got misled by the existence of the {{Message.setObjectProperty(Object)}} method. 

But the [{{javax.jms.Message}} Javadoc|http://java.sun.com/j2ee/1.4/docs/api/javax/jms/Message.html] states the following:

{quote}
The setObjectProperty method accepts values of class Boolean, Byte, Short, Integer, Long, Float, Double, and String. An attempt to use any other class must throw a JMSException.
{quote}

So it's clear that this use case is unsupported by the underlying spec.
alanfoster:1364349662:2013-03-27T10:01:02.750+0000:1364349662:2013-03-27T10:01:02.750+0000:Thank you [~muellerc], [~raulvk]

I wonder if there are any known workarounds for this?

I don't believe at the minute it will make use of any registered camel type converters which handle serializing to/from string when sending over the wire?
muellerc:1364350100:2013-03-27T10:08:20.129+0000:1364350100:2013-03-27T10:08:20.129+0000:You can marshal your object to json/xml/... before sending to the queue and unmarshal it after you read it. You can use a simple bean for this which use one of the existing type converters or data formats.
davsclaus:1364350668:2013-03-27T10:17:48.253+0000:1364350668:2013-03-27T10:17:48.253+0000:You can use intercept send to endpoint and use a wildcard so you match all activemq. Then you can do some custom logic to transform those headers into a type that the JMS spec supports.

Or implement your own custom messageConverter and do the mapping/conversion yourselves.
alanfoster:1364351048:2013-03-27T10:24:08.775+0000:1364351048:2013-03-27T10:24:08.775+0000:Thank you [~muellerc]. I was thinking it would be nice if I could either explicitly register a type converter which will handle this conversion for me automatically, or, if it made use of the existing type converters implicitly. This would still adhere to the JMS spec, and would take advantage of camel's already existent type converters.

Would this be appropriate to add, or would that be outside of the scope of camel?
davsclaus:1364351979:2013-03-27T10:39:39.151+0000:1364351979:2013-03-27T10:39:39.151+0000:Alan, its out of the scope. There is no standard way to marshal a serializable java object into a type that the JMS spec allows. For that you would need a byte array. Also jms headers is not designed for big data. Instead store your big data in the body. There is a BytesMessage that supports this. Or the Java ObjectMessage type the JMS spec allows.

muellerc:1364352426:2013-03-27T10:47:06.395+0000:1364352426:2013-03-27T10:47:06.395+0000:Or simply use the ""transferExchange"" option. This should work...
alanfoster:1364357054:2013-03-27T12:04:14.208+0000:1364357054:2013-03-27T12:04:14.208+0000:[~muellerc] - I have tried using the transferExchange option before.

The scnearios are :
 - when using the transferExchange option only on the producer, I don't get the body back, but not the header.
 - When I use the transferExchange option on both producer and consumer, I get the headers back, but not the body. And instead I get the following exception

{code:java}
[ryQueueReplyManager[temporary]] TemporaryQueueReplyManager     WARN  Execution of JMS message listener failed. Caused by: [java.lang.NullPointerException - null]
java.lang.NullPointerException
	at org.apache.camel.impl.DefaultExchangeHolder.unmarshal(DefaultExchangeHolder.java:107)
	at org.apache.camel.component.jms.JmsBinding.extractBodyFromJms(JmsBinding.java:128)
	at org.apache.camel.component.jms.JmsMessage.createBody(JmsMessage.java:214)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:41)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:136)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onReply(TemporaryQueueReplyHandler.java:54)
	at org.apache.camel.component.jms.reply.TemporaryQueueReplyManager.handleReplyMessage(TemporaryQueueReplyManager.java:71)
	at org.apache.camel.component.jms.reply.ReplyManagerSupport.onMessage(ReplyManagerSupport.java:113)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.lang.Thread.run(Thread.java:662)
{code}
alanfoster:1364357266:2013-03-27T12:07:46.477+0000:1364357266:2013-03-27T12:07:46.477+0000:I shall raise a new issue for this exception that is occurring, and attach the test case for it - as this original Jira is correctly closed, as it working as expected.

This is available at CAMEL-6218"
0,CAMEL-6213,Bug,Major,2.10.0,,"
None
",Resolved,Incomplete,None,Claus Ibsen,Sergio Besada,0,3,2013-03-26 11:15:19+00:00,2013-05-26 12:45:34+00:00,"This problem happens in the version 2.10.x but not happens in the version 2.8.x .The problem is that, when you have a cxf web service endpoint and you want to send a response to this web service but you have several routes. This problem only happen when you have several routes in the same beans.xml (spring configuration and DSL). At the end of the routes, you send the response to the web service (first endpoint in our routes) but the response never arrives, instead of that, the web service client throws a Exception ""Caused by: java.net.SocketException: Unexpected end of file from server""","njiang:1364274438:2013-03-26T13:07:18.084+0000:1364274438:2013-03-26T13:07:18.084+0000:Can you submit a simple test case to reproduce the error.
It's hard to tell what's wrong from your description :(
davsclaus:1369543534:2013-05-26T12:45:34.130+0000:1369543534:2013-05-26T12:45:34.130+0000:No response from reporter and not clear what the problem is"
0,CAMEL-6212,Improvement,Major,2.10.4,Future,"
None
",Resolved,Fixed,Future,Claus Ibsen,Jason Chaffee,0,4,2013-03-26 09:04:41+00:00,2015-03-25 10:32:05+00:00,"It would be nice to be able to marshal/unmarshal into json, but using jaxb annotations.  Both Jackson and Jettison support this.","muellerc:1364261129:2013-03-26T09:25:29.175+0000:1364261129:2013-03-26T09:25:29.175+0000:Jason, do you consider to work on a patch?
You know we love contributions... ;-)

http://camel.apache.org/contributing.html
jasonchaffee:1364266129:2013-03-26T10:48:49.979+0000:1364266129:2013-03-26T10:48:49.979+0000:If/when I get some extra type I will take a stab at it.  
geerzo:1370092614:2013-06-01T21:16:54.638+0000:1370092614:2013-06-01T21:16:54.638+0000:Patch to add support to camel-jackson to handle JAXB objects.
geerzo:1370092871:2013-06-01T21:21:11.711+0000:1370092871:2013-06-01T21:21:11.711+0000:I don't have permission to edit this ticket but I'd recommend we split this into two tickets, one for Jackson and one for XStream. That way we can possibly apply the Jackson patch while we wait for a XStream patch.
geerzo:1370853291:2013-06-10T16:34:51.445+0000:1370853291:2013-06-10T16:34:51.445+0000:Split the Jackson patch to CAMEL-6446
davsclaus:1427250725:2015-03-25T10:32:05.341+0000:1427250725:2015-03-25T10:32:05.341+0000:This is possible today"
0,CAMEL-6211,Improvement,Major,None,,"
None
",Closed,Invalid,None,Unassigned,Jason Chaffee,0,2,2013-03-26 09:01:36+00:00,2013-03-26 18:56:54+00:00,Subject says it all.,"jasonchaffee:1364260168:2013-03-26T09:09:28.027+0000:1364260168:2013-03-26T09:09:28.027+0000:I just got the latest and see it has been updated to the 2.x since I last looked.  
jasonchaffee:1364260199:2013-03-26T09:09:59.558+0000:1364260199:2013-03-26T09:09:59.558+0000:see last comment
davidkarlsen:1364295414:2013-03-26T18:56:54.480+0000:1364295414:2013-03-26T18:56:54.480+0000:Duplicate of https://issues.apache.org/jira/browse/CAMEL-6122"
0,CAMEL-6210,Task,Major,None,,"
None
",Closed,Fixed,None,Unassigned,Christian Müller,0,1,2013-03-25 22:17:51+00:00,2013-03-26 17:55:37+00:00,The news links from http://camel.apache.org/ (e.g. http://camel.apache.org/2013/03/11/apache-camel-296-released.html) points to an empty page.,muellerc:1364291737:2013-03-26T17:55:37.995+0000:1364291737:2013-03-26T17:55:37.995+0000:Thanks to Dan for fixing it.
0,CAMEL-6209,Sub-task,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Piotr Klimczak,0,1,2013-03-25 21:55:01+00:00,2019-08-05 09:46:46+00:00,"Update docs.


Important todos:
1. Explain cacheManager names when CacheComponent is declares as a bean (cannot have two CacheManagers with same name- incl. default name)
2. cacheManager name taken from bean name
3. doStart on CacheManagerFactory is not any more invoked on endpoint creation (first usage) but right before cacheManager creation.
4. Explain singletons for cache protocols/beans",
0,CAMEL-6208,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2013-03-25 14:31:41+00:00,2013-03-26 08:52:39+00:00,"It could be handy if the RichTestUri supports the ProducerTemplate requestBody, asyncSend APIs.",njiang:1364251925:2013-03-26T06:52:05.580+0000:1364251925:2013-03-26T06:52:05.580+0000:Applied the patch into trunk.
0,CAMEL-6207,Test,Minor,2.10.4,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-03-25 13:17:08+00:00,2013-03-25 13:24:47+00:00,"We have some JMX tests in camel-core, that enables create connector. But seems to not cleanup that flag after testing.


eg ManagedRouteWithOnExceptionTest",
0,CAMEL-6206,Improvement,Major,2.10.4,2.11.0,"
None
",Resolved,Incomplete,2.11.0,Claus Ibsen,Gardella Juan Pablo,0,2,2013-03-25 13:05:08+00:00,2013-04-03 13:30:03+00:00,"With Spring we can use default scope beans, but with camel it is not possible. We have to make public the interface that it is used as a bean. This feature is useful to encapsulate in a package collaborators of a route for example.","davsclaus:1364967003:2013-04-03T13:30:03.952+0000:1364967003:2013-04-03T13:30:03.952+0000:If you log a JIRA ticket then fill in much more details what you mean. 

Also favor contacting us on the mailing list / forum first to discuss the idea etc. Then only thereafter a JIRA ticket can/should be created."
0,CAMEL-6205,Improvement,Major,2.10.4,None,"
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Christian Tytgat,0,2,2013-03-25 08:21:26+00:00,2013-03-27 11:05:35+00:00,"Currently the file producer will sync all file operations to disk. This is an expensive operation as it bypasses the OS's write cache.
Some use cases don't require this level of data protection, and prefer to trade for better performance. (for example, for audit & logging purposes).","davsclaus:1364171926:2013-03-25T08:38:46.942+0000:1364171926:2013-03-25T08:38:46.942+0000:Yeah this seems like a good idea. Are you working on a patch?

We love contributions. You can read more here
http://camel.apache.org/contributing.html
syberyan:1364172329:2013-03-25T08:45:29.229+0000:1364172338:2013-03-25T08:45:38.961+0000:I'll try submitting a patch in the coming days.
syberyan:1364273540:2013-03-26T12:52:20.329+0000:1364273540:2013-03-26T12:52:20.329+0000:Patch attached
davsclaus:1364353535:2013-03-27T11:05:35.994+0000:1364353535:2013-03-27T11:05:35.994+0000:Thanks for the patch."
0,CAMEL-6204,Bug,Minor,2.10.4,"2.10.5, 2.11.0","

ObjectHelper
camel-core,
load
resource
util

",Resolved,Fixed,"2.10.5, 2.11.0",Willem Jiang,Piotr Klimczak,0,3,2013-03-24 20:12:21+00:00,2013-03-25 16:15:36+00:00,"As i could not found any test for ObjectHelper.loadResourceAsStream and i have feced some unexpected behaviur I have created a simple unit test.


The expected result is to get all resources loaded.
Unfortunately ObjectHelper.loadResourceAsStream does no allow to load resource from relative path and for path with leading ""/"".
I my opinion it is a bug.



    public void testLoadResourceAsStream() {
        InputStream res1 = ObjectHelper.loadResourceAsStream(""org/apache/camel/util/ObjectHelperResourceTestFile.properties"");
        InputStream res2 = ObjectHelper.loadResourceAsStream(""/org/apache/camel/util/ObjectHelperResourceTestFile.properties"");

        assertNotNull(""Cannot load resource without leading \""/\"""", res1);
        assertNotNull(""Cannot load resource with leading \""/\"""", res2);
    }","nannou9:1364131165:2013-03-24T21:19:25.708+0000:1364134060:2013-03-24T22:07:40.271+0000:Test result

Tests run: 4470, Failures: 0, Errors: 0, Skipped: 1

The above tests includes the new test for loadResourceAsStream.
nannou9:1364131969:2013-03-24T21:32:49.166+0000:1364131969:2013-03-24T21:32:49.166+0000:The loadResurceAsURL also need a patch so will reupload the patch in few moments.
nannou9:1364134086:2013-03-24T22:08:06.555+0000:1364134086:2013-03-24T22:08:06.555+0000:Done.

Greetings,
Piotr
njiang:1364150672:2013-03-25T02:44:32.632+0000:1364150672:2013-03-25T02:44:32.632+0000:Applied the patch with thanks to Piotr after fixing the missing file issue of ObjectHelperResourceTestFile.properties.
davsclaus:1364199336:2013-03-25T16:15:36.457+0000:1364199336:2013-03-25T16:15:36.457+0000:Thanks for the patch."
0,CAMEL-6203,Improvement,Major,None,,"

camel-cache
ehcache
properties

",Resolved,Won't Fix,None,Unassigned,Piotr Klimczak,0,3,2013-03-24 07:33:34+00:00,2017-03-03 13:40:45+00:00,"There should be a way to configure camel-cache with properties file using DefaultPropertiesResolver#loadPropertiesFromClasspath. So the route might look like this:



from(""cache://myCache?configurationFile=classpath:com/foo/mycache.properties"")...




instead of 



from(""cache://MyApplicationCache"" +
          ""?maxElementsInMemory=1000"" +
          ""&memoryStoreEvictionPolicy="" +
              ""MemoryStoreEvictionPolicy.LFU"" +
          ""&overflowToDisk=true"" +
          ""&eternal=true"" +
          ""&timeToLiveSeconds=300"" +
          ""&timeToIdleSeconds=true"" +
          ""&diskPersistent=true"" +
          ""&diskExpiryThreadIntervalSeconds=300"")




This improvement was added due to Henryk Konsek request.","hekonsek:1364114586:2013-03-24T16:43:06.523+0000:1364114586:2013-03-24T16:43:06.523+0000:You can recognize the type of configuration using the file extension.
davsclaus:1364170325:2013-03-25T08:12:05.473+0000:1364170353:2013-03-25T08:12:33.770+0000:Should we introduce a new configuration format, when ehcache already has its own format. Which end users ideally should use instead?

The uri options is just for some basic use cases to quickly configure it.


On the other side we could allow to configure endpoints from an external resource in a generic way. So people can define a .properties file, or .json file etc. (or even xml if we want). And map that to endpoint uri parameters.

So maybe ponder a bit more about this, and consider a general way instead.

You can do this a bit with the property placeholders today:
{code}
from(""cache://MyApplicationCache:{{cache.options}}"")
{code}

And then have a .properties with
{code}
cache.options=?maxElementsInMemory=1000&maxElementsInMemory=1000 ...
{code}

But with a general solution it can maybe be more friendly
{code}
from(""cache://MyApplicationCache?endpointConfigurationFile=classpath:com/foo/myCache.properties""
{code}

Would need to find a option name that don't clash with existing options, and would be reserved for this kind of general functionality.

myCache.properties
{code}
maxElementsInMemory=1000
maxElementsInMemory=1000
...
{code}

"
0,CAMEL-6202,Bug,Trivial,2.10.4,"2.9.7, 2.10.5, 2.11.0","

logging

",Closed,Fixed,"2.9.7, 2.10.5, 2.11.0",Christian Müller,Chris Wolf,0,2,2013-03-22 21:38:11+00:00,2013-03-22 22:06:25+00:00,"In the method scheduleRoute(...) there is logging code that looks like:



  if (LOG.isInfoEnabled()) {
    LOG.info(""Scheduled trigger: {} for action: {} on route: "", 
        new Object[]{trigger.getFullName(), action, route.getId()});
  }




...but it's missing parameter placeholder for the routeId.  It should be:



  if (LOG.isInfoEnabled()) {
    LOG.info(""Scheduled trigger: {} for action: {} on route: {}"", 
        new Object[]{trigger.getFullName(), action, route.getId()});
  }",muellerc:1363961185:2013-03-22T22:06:25.417+0000:1363961185:2013-03-22T22:06:25.417+0000:Thanks for reporting Chris! It's now fixed.
0,CAMEL-6201,Bug,Major,None,2.13.0,"
None
",Resolved,Incomplete,2.13.0,Claus Ibsen,Sven Handt,0,2,2013-03-22 15:15:51+00:00,2013-11-12 10:29:13+00:00,"Camel File component: If a file name contains German umlauts, a GenericFileOperationFailedException is thrown (see screenshot). But that seems only to occur on Linux systems, on a Windows system, the processing of the file works properly.","svenhandt:1363936707:2013-03-22T15:18:27.462+0000:1363936707:2013-03-22T15:18:27.462+0000:If it's a bug, is there a proper work around possible?
davsclaus:1384223353:2013-11-12T10:29:13.673+0000:1384223353:2013-11-12T10:29:13.673+0000:Camel uses java.io.File to do the rename, so if that API cannot do it, then Camel cannot do it either.

Though from Camel 2.9 onwards there is a copyAndDeleteOnRenameFail option that will not rename the file but copy it instead.
"
0,CAMEL-6200,Bug,Major,2.10.4,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-03-22 14:34:47+00:00,2013-03-22 14:37:07+00:00,"The contract should be to return null if not found.


lookupByName should be similar to lookupByNameAndType which has a try .. catch.",
0,CAMEL-6199,Bug,Major,2.10.0,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,2,2013-03-22 10:48:05+00:00,2021-08-04 14:58:44+00:00,"For example when you add / remove routes dynamically to a Camel app that starts from a JMS endpoint. Then the jms consumer may use a private thread pool for the listener container. That thread pool is enlisted in JMX.


We should ensure the thread pool is shutdown and removed from JMX when the route is removed.",
0,CAMEL-6198,Bug,Trivial,2.10.4,,"
None
",Resolved,Won't Fix,None,Christian Müller,Pierre-Alban DEWITTE,0,2,2013-03-21 21:08:24+00:00,2013-03-21 21:55:13+00:00,"With code abode csvConfig.setDelimiter(';') has no effect
CsvDataFormat csv = new CsvDataFormat();
		CSVConfig csvConfig = new CSVConfig();
		csvConfig.setDelimiter(';');
		csvConfig.setFieldHeader(true);


		from(""file://in/?include=.*.csv).unmarshal(csv).process(new MyProcessor());


When i add csv.setDelimiter("";""); everything works fine.","muellerc:1363872845:2013-03-21T21:34:05.299+0000:1363872845:2013-03-21T21:34:05.299+0000:CSVConfig is part of commons-csv. Unfortunately, the current trunk [1] doesn't contain this class. I think the only thing we can do is adding a note to our WIKI page.

[1] http://svn.apache.org/repos/asf/commons/proper/csv/trunk/src/main/java/org/apache/commons/csv/
padewitte:1363873673:2013-03-21T21:47:53.206+0000:1363873673:2013-03-21T21:47:53.206+0000:OK that's sound good for me. I just lost a couple of minutes on it and i wanted to share :)
muellerc:1363873936:2013-03-21T21:52:16.528+0000:1363873936:2013-03-21T21:52:16.528+0000:I added a note to our WIKI page.
muellerc:1363874113:2013-03-21T21:55:13.377+0000:1363874113:2013-03-21T21:55:13.377+0000:Yeah, thanks for sharing. We appreciate it!"
0,CAMEL-6197,Bug,Critical,2.10.4,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Seb C,0,4,2013-03-21 15:49:35+00:00,2013-06-02 19:33:43+00:00,"We have an application that creates a lot of channels, resulting in a lot of producers with a Cometd local session attached. These local sessions just add up till we get a out of memory.","muellerc:1363875790:2013-03-21T22:23:10.337+0000:1363875790:2013-03-21T22:23:10.337+0000:Do you consider to work on a patch? And also on a unit test which show the issue?

http://camel.apache.org/contributing.html
calbazasebastian:1363958984:2013-03-22T21:29:44.813+0000:1363958984:2013-03-22T21:29:44.813+0000:Sure, will do
muellerc:1363960625:2013-03-22T21:57:05.791+0000:1363960625:2013-03-22T21:57:05.791+0000:Cool. Looking forward to your patch...
davsclaus:1369543414:2013-05-26T12:43:34.822+0000:1369543414:2013-05-26T12:43:34.822+0000:Any update on a patch?
calbazasebastian:1369577917:2013-05-26T22:18:37.250+0000:1369577917:2013-05-26T22:18:37.250+0000:Check https://github.com/calbazasebastian/camel/commits/sebi/6197_cometd_oom 
The simplest solution is to disconnect the session that is created by the producer... I added an isLocalSession check to close just the local ones as these are lightweight objects and are not sweeped.
davsclaus:1370159556:2013-06-02T15:52:36.350+0000:1370159556:2013-06-02T15:52:36.350+0000:Thanks for reporting and providing a patch with a solution.
bvahdat:1370172823:2013-06-02T19:33:43.536+0000:1370172823:2013-06-02T19:33:43.536+0000:The ticket is marked as fixed but I don't see any commit for this on any branch, e.g. on master this's the current history I see:

{code}
commit ddf7ba9b9140eaaab3c784732bfd6eeb1f0114d2
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sun Jun 2 17:22:49 2013 +0200

    CAMEL-6157: Added support for named parameters to camel-jdbc, like we have in camel-sql. Thanks to Devendra Khanolkar for contribution.

commit bd34771fa19702b9c8f7e86ac56b4a92d2c35169
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sun Jun 2 11:42:08 2013 +0200

    CAMEL-6413: Fixed race condition in file consumer, as read lock release should be executed last.

commit 211f90657478df858e02f0bbf8d912d2199b0484
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sun Jun 2 11:22:13 2013 +0200

    CAMEL-6412: Trying to fix the broken build.

commit 6ca055d399b7528175f0192f5d948350e1ee7258
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sun Jun 2 00:11:18 2013 +0200

    CAMEL-6412: Fixed the Maven build warning about camel-validator-test-resources.jar

commit bdf64e05c8f5b045bb0cbee07a181a06bd516355
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sat Jun 1 19:38:40 2013 +0200

    Polished.

commit 1da8850907623866acaa648f6378596e79f0db69
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Sat Jun 1 19:30:52 2013 +0200

    Polished.

commit d5b16f55799a5cdfc2b69bcab62ecbd0962e0f53
Author: Claus Ibsen <davsclaus@apache.org>
Date:   Sat Jun 1 07:28:10 2013 +0200

    Upgrade to Groovy 2.1.4

commit 343fd1cf5b08953072f4f3b5bb344dbfad87343c
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 21:56:14 2013 +0200

    Upgrade to Bouncy Castle 1.48 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore). Also cleaned up all the @deprecated Bouncy

commit 9016ac6a22871097ce55d47a4af166f7c73a1f0f
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 19:53:51 2013 +0200

    Resolved the deprecated API usage after upgrade to Ehcache 2.7.0.

commit 8c57bd4d204e9ecb2bcb54e5733e5b322ac9f710
Author: Babak Vahdat <bvahdat@apache.org>
Date:   Fri May 31 19:37:15 2013 +0200

    Upgrade to Ehcache 2.7.0 which is already an OSGi bundle out-of-the-box (no need for a SMX bundle anymore).
{code}"
0,CAMEL-6196,Bug,Trivial,2.10.4,"2.10.5, 2.11.1, 2.12.0","

shutdown

",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Willem Jiang,Per Jørgen Walstrøm,0,3,2013-03-21 15:15:40+00:00,2013-05-26 12:43:16+00:00,"defaultShutdownStrategy.setTimeout(0L);


may give the following when shutting down and inflight exchanges do not complete


Camel (camel) thread #2 - ShutdownTask INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in 0 seconds.
Camel (camel) thread #2 - ShutdownTask INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -1 seconds.
Camel (camel) thread #2 - ShutdownTask INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -2 seconds.
[...]
Camel (camel) thread #2 - ShutdownTask INFO org.apache.camel.impl.DefaultShutdownStrategy - Waiting as there are still 2 inflight and pending exchanges to complete, timeout in -323 seconds.","davsclaus:1363851812:2013-03-21T15:43:32.820+0000:1363851812:2013-03-21T15:43:32.820+0000:Per are you working on a patch? Seems like we should either deny setting the timeout as 0 or negative (eg must be positive).
Or all to have unlimited timeout (I guess this can be a bit dangerous, as if a message is stuck, you would need to kill the processor or have trouble getting the Camel app stopped/killed)
pjwalstrom:1363904819:2013-03-22T06:26:59.421+0000:1363904819:2013-03-22T06:26:59.421+0000:I would love to submit a patch, how do I do that?

I suggest the following solution
1) if timeout == 0, the shutdown will be forced immediately
2) if timeout < 0, throw new IllegalArgumentException

you could argue in 2) that negative values should be treated as 0 (which probably would be the easiest solution), but I think this would be confusing. The user sets a negative number for some strange reason. He doesn't expect it silently to be substituted with a 0

muellerc:1363910195:2013-03-22T07:56:35.267+0000:1363910195:2013-03-22T07:56:35.267+0000:Per, we love contributions. You can find more information how to contribute at http://camel.apache.org/contributing.html

Thanks in advance,
Christian"
0,CAMEL-6195,Improvement,Trivial,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,David Valeri,Christian Posta,0,1,2013-03-21 14:46:15+00:00,2013-03-21 16:44:37+00:00,Unit tests for streamDownload option in https://issues.apache.org/jira/browse/CAMEL-6090 don't test that a stream was actually used as the underlying implementation for the GenericFile/RemoteFile that gets sent in the exchange. Patch forthcoming..,ceposta:1363849105:2013-03-21T14:58:25.720+0000:1363849105:2013-03-21T14:58:25.720+0000:Patch for tests
0,CAMEL-6194,New Feature,Minor,2.10.4,2.13.0,"

features
newbie

",Resolved,Fixed,2.13.0,Claus Ibsen,Matt McCann,0,2,2013-03-21 13:50:28+00:00,2013-10-12 08:45:05+00:00,"@Consumed functions are not called until after an exchange has been routed out of the JPA component. Executing @Consumed functions is part of the stated functionality of the JPA component so it seems logical that the @Consumed function should be called as part of routing an exchange, not after the exchange has been routed.


If possible, I think it'd be preferable to modify the @Consumed behavior though davsclaus has suggested the possible creation of an @PreConsumed annotation.


I'm happy to implement this ticket this weekend if I can get some consensus on which path is preferred by the community. This would be my first patch on the project so I figure I ought not to run off on my own.","davsclaus:1363852079:2013-03-21T15:47:59.816+0000:1363852079:2013-03-21T15:47:59.816+0000:Matt sounds good.

You can read on this page about how to contribute patches
http://camel.apache.org/contributing.html

For example attaching a .patch file to this JIRA ticket.

Or if you are a github person, then there is some notes on that link as well.

The patch should be against the ""trunk"". As we accept new code on the trunk. And backport bug fixes etc to older branches on a case by case basis.

moxximus:1364196261:2013-03-25T15:24:21.536+0000:1364196261:2013-03-25T15:24:21.536+0000:Starting work at https://github.com/mcmonster/camel
moxximus:1364463517:2013-03-28T17:38:37.225+0000:1364463517:2013-03-28T17:38:37.225+0000:Patch is now available. I'll write up some unit tests later this week.

I've added an @Preconsumed annotation that executes before the exchange is processed. This annotation allows the resulting changes in the record due to being consumed to be visible to components further down the route.

So what's the policy regarding dependencies? I added Google's guava library as a dependency in the patch (Their ""Optional"" construct is awesome). It's released under the same license as Camel.
moxximus:1364463793:2013-03-28T17:43:13.353+0000:1364463793:2013-03-28T17:43:13.353+0000:Opened pull request. https://github.com/apache/camel/pull/18
davsclaus:1364469625:2013-03-28T19:20:25.817+0000:1364469625:2013-03-28T19:20:25.817+0000:Hi MAtt

Thanks for the patch. It would be better if the patch does not introduce new JAR dependency, eg as you do with google guava. 

I would assume the @PreConsume should be possible to do in a similar was as the @Consume we already have.

moxximus:1364469905:2013-03-28T19:25:05.843+0000:1364469905:2013-03-28T19:25:05.843+0000:O it definitely is do-able without the Guava library, I just like it.

I'll remove the dependency and resubmit the patch.
moxximus:1365506169:2013-04-09T19:16:09.107+0000:1365506169:2013-04-09T19:16:09.107+0000:Sorry for the slow fix. Work has been a bit hectic.
davsclaus:1365546777:2013-04-10T06:32:57.505+0000:1365546777:2013-04-10T06:32:57.505+0000:Can you attach the file again and use an unique name so we are sure we pick the right attachment. Seems like we get the old attachments when selecting the one with the date from april. 
moxximus:1365598480:2013-04-10T20:54:40.898+0000:1365598480:2013-04-10T20:54:40.898+0000:Attached the right one this time. Spaced out and attached the old patch before.
davsclaus:1365816872:2013-04-13T09:34:32.678+0000:1365816872:2013-04-13T09:34:32.678+0000:Matt do you mind working on an unit test as well?
moxximus:1366179112:2013-04-17T14:11:52.452+0000:1366179112:2013-04-17T14:11:52.452+0000:Sure thing. I'll try to get it done this week.
moxximus:1366956560:2013-04-26T14:09:20.837+0000:1366956560:2013-04-26T14:09:20.837+0000:Claus, I haven't forgotten about this. Things have been a bit crazy the past two weeks. I'll try to get to it this weekend.
davsclaus:1368169336:2013-05-10T15:02:16.704+0000:1368169336:2013-05-10T15:02:16.704+0000:Hi Matt,

Did you get a chance to work on this?
davsclaus:1381538705:2013-10-12T08:45:05.884+0000:1381538705:2013-10-12T08:45:05.884+0000:Thanks for the patch. Managed to get them put together and into the code."
0,CAMEL-6193,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-21 13:37:11+00:00,2013-05-02 02:30:58+00:00,"See CAMEL-6154


The issue is that even if mapMailMessage=true, then the mail message is read on demand, and not during the mail consumer.


This causes problem as in CAMEL-6154, when using pollEnrich as the mail consumer will finish the poll, and close the mail folder. And then the message is aggregated afterwards, causing a folder closed exception.


We dont see this in regular routes where we consume <from imap"" because the consumer closes at the very end of the routing, and we have accessed the mail message during the routing.


This is a little behavior change in the component, so lets do it on 2.11.",
0,CAMEL-6192,Task,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-21 13:25:02+00:00,2013-03-21 13:30:48+00:00,"Remove this line from our log4j. properties files:
log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer


This rendered does not log any caused exception(s) so you can not see the full strack trace and error messages when exceptions is being wrapped.",
0,CAMEL-6191,Bug,Minor,"2.10.3, 2.10.4","2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Claus Ibsen,Xavier Fournet,0,3,2013-03-21 12:59:22+00:00,2013-05-17 06:10:26+00:00,"The simple langage permit to access to a map element by specifying the key between [], ie ${body[key]}
When the key contains a space the behavior is not the same for a simple expression or a simple predicate:
* expression ${body[my key]} will access to the ""my key"" element -> correct
* expression ${body['my key']} will access to the ""my key"" element -> correct
* predicate ${body[my key]} == 'value' will access to the ""mykey"" element -> incorrect
* predicate ${body['my key']} == 'value' will access to the ""my key"" element -> correct




See attached testcase, the current ouput is



618 [main] INFO route1 - VALUE1
624 [main] INFO route1 - VALUE1
629 [main] INFO route1 - VALUE2
633 [main] INFO route1 - VALUE2
641 [main] INFO route1 - test1 is false
648 [main] INFO route1 - test2 is true
652 [main] INFO route1 - test3 is true
657 [main] INFO route1 - test4 is false




but it should be



618 [main] INFO route1 - VALUE1
624 [main] INFO route1 - VALUE1
629 [main] INFO route1 - VALUE2
633 [main] INFO route1 - VALUE2
641 [main] INFO route1 - test1 is true
648 [main] INFO route1 - test2 is true
652 [main] INFO route1 - test3 is false
657 [main] INFO route1 - test4 is false","davsclaus:1363852561:2013-03-21T15:56:01.385+0000:1363852561:2013-03-21T15:56:01.385+0000:Well it would be best practice to use quotes in the key name, eg 'my key', then that works fine
davsclaus:1363853450:2013-03-21T16:10:50.197+0000:1363853450:2013-03-21T16:10:50.197+0000:I added a note on the simple page.

When your keys have spaces, then you must use enclose the key in single quotes.
xfournet:1363861314:2013-03-21T18:21:54.556+0000:1363861314:2013-03-21T18:21:54.556+0000:Humm... not convainced with the resolution ""Not a problem"".
I'm not very fan of the best practice you recommend since it is just redundant with the [].
Anyway even with that, if it is not enforced it could be still a problem for an user that is not aware of it. We spend a lot of time to track this problem so it could be avoided for others user if this issue is fixed either by:
* parse the predicate in the same way than the expression. While debugging I see that the problem is located in org.apache.camel.language.simple.SimplePredicateParser#removeIgnorableWhiteSpaceTokens that transforms the tokens field from $\{body[Header Key]\} == 'VALUE1' to $\{body[HeaderKey]\}=='VALUE1' 
* enforce the ""must"" in the documentation and reject the expression that use an unquoted key with space in order to avoid strange behaviors

muellerc:1363929338:2013-03-22T13:15:38.358+0000:1363929338:2013-03-22T13:15:38.358+0000:[~davsclaus]: Is there a constraint why we cannot offer the same behavior for predicates and expressions? I agree with Xavier that ['key with space'] is a bit cumbersome compared with [key with space] (I know, it's only two chars, but could save some time for people who are lazy in reading the java doc ;-) ).
davsclaus:1364877739:2013-04-02T12:42:19.896+0000:1364877739:2013-04-02T12:42:19.896+0000:Sorry the notification mail got lost for me somehow.

Its very common to use quotes for strings when it contains a space when passing that in as a single argument, such as on the command shell, java parameter, other programming languages.

So IMHO requiring to use a quoted string when it has a space is valid for me.

Though I agree we should look into improving the parser to see if we can parse the expression or predicate as much alike as possible.
antoine.dessaigne:1368675797:2013-05-16T11:43:17.373+0000:1368675797:2013-05-16T11:43:17.373+0000:Hi, I've just added a patch that fixes this issue.
davsclaus:1368742226:2013-05-17T06:10:26.182+0000:1368742226:2013-05-17T06:10:26.182+0000:Thanks for the patch."
0,CAMEL-6190,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-20 15:16:29+00:00,2013-06-03 06:21:20+00:00,"See stream caching
http://camel.apache.org/stream-caching.html


If you enable it then it spool to disk for sizes > 64KB. Today that limit is a bit low. We should bump that up to higher value.


Also we should log when Camel startup at INFO level what stream cache settings is being in use, so people can easier notice this.


Also the stream cache implementation ought to use java nio with memory mapped files, instead of that old java.io.File that is slow.","davsclaus:1370211680:2013-06-03T06:21:20.044+0000:1370211680:2013-06-03T06:21:20.044+0000:Camel logs when starting if stream caching is in use.

And the default threshold is changed from 64kb to 128kb"
0,CAMEL-6189,Bug,Major,"2.10.0, 2.11.0","2.10.5, 2.11.0","

cache

",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Henrik Filtenborg Sørensen,0,2,2013-03-20 14:23:03+00:00,2013-03-20 15:09:27+00:00,"The operation CamelCacheCheck does not check to see if the cache element is expired before setting the header CamelCacheElementWasFound. This is due to the way isKeyInCache() from EHCache works. 


I believe the bug/quirk has existed since the very beginning of the camel-cache component. The patch is made against 2.11.0-SNAPSHOT.


The patch uses getQuiet() instead of isKeyInCache(). getQuiet() checks for element expiry before returning the element from the cache. getQuiet does not alter the cache element in any way (usage statistics etc) but removes the element from the cache if it is expired.


See the thread on Camel User Forum: http://camel.465427.n5.nabble.com/Camel-cache-CamelCacheCheck-and-expiry-on-cached-elements-td5729404.html",davsclaus:1363763367:2013-03-20T15:09:27.950+0000:1363763367:2013-03-20T15:09:27.950+0000:Thanks for the patch.
0,CAMEL-6188,Bug,Major,2.10.4,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Fried Hoeben,0,2,2013-03-20 13:20:03+00:00,2013-03-28 02:25:58+00:00,"The CXF consumer copies the content-type http header to the camel exchange. This header may indicate the character set used in the request (for instance ""text/xml;charset=UTF-8""), and if so this should be made available in the normal place for Camel (i.e. a property in the exchange called 'CamelCharsetName').


This may (of course) be done in each route by a separate processor, but it simplifies life if this is done by default. (org.apache.camel.component.cxf.DefaultCxfBinding.populateExchangeFromCxfRequest() seems the logical place)


Sample processor that performs this job.



import java.nio.charset.Charset;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.util.ExchangeHelper;
import org.apache.http.entity.ContentType;

/**
 * Processor to ensure the exchange's charset name property is in sync with
 * its content type.
 */
public class CharsetProcessor implements Processor {
    @Override
    public void process(Exchange exchange) throws Exception {
        String contentTypeHeader = ExchangeHelper.getContentType(exchange);
        if (contentTypeHeader != null) {
            ContentType contentType = ContentType.parse(contentTypeHeader);
            if (contentType != null) {
                Charset charset = contentType.getCharset();
                exchange.setProperty(Exchange.CHARSET_NAME, charset.name());
            }
        }
    }
}",njiang:1364408758:2013-03-28T02:25:58.934+0000:1364408758:2013-03-28T02:25:58.934+0000:Applied the patch into trunk.
0,CAMEL-6157,Improvement,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Henryk Konsek,0,4,2013-03-12 19:02:43+00:00,2013-07-18 08:49:00+00:00,"Juan pointed that currently it is difficult to create SQL-injection safe query with JDBC component. We could provide option to send query parameters via message header.



from(""direct:sql"").to(""jdbc:testDB"");
...
producerTemplate.sendBodyAndHeader(""direct:sql"", ""JDBC_PARAMETERS"", ""fooValue"", ""insert into foo values (?)"");




[1] http://camel.465427.n5.nabble.com/Dinamyc-SQL-with-arguments-tp5729003.html","gardellajuanpablo:1363148858:2013-03-13T12:27:38.037+0000:1363148858:2013-03-13T12:27:38.037+0000:It is difficult not only with JDBC component, for SQL component too. I mean dynamic queries with parameters.
hekonsek:1363149098:2013-03-13T12:31:38.809+0000:1363149098:2013-03-13T12:31:38.809+0000:SQL component doesn't support dynamic queries. For dynamic queries you should use JDBC component.
devendra0008@yahoo.com:1368725717:2013-05-17T01:35:17.096+0000:1368725717:2013-05-17T01:35:17.096+0000:Gents, Can you pls review the test case? I can have a crack at this feature.

Thanks
-Dev
davsclaus:1368739524:2013-05-17T05:25:24.023+0000:1368739524:2013-05-17T05:25:24.023+0000:Dev, thanks for the test.

I suggest to look at the SQL component as it now supports named parameters
http://camel.apache.org/sql-component

Maybe we should use same syntax in this component also. The code from camel-sql that parses the named parameters, can be ported to this component.
devendra0008@yahoo.com:1369699902:2013-05-28T08:11:42.499+0000:1369699902:2013-05-28T08:11:42.499+0000:Claus,
Can you please review the attached test and the JdbcProducer.java.
I had to incorporate the DefaultPreparedStatementStrategy class into this component.
I'm just trying to figure out if this is what you were referring to when you said similar convention as the sql component.

Thanks
-Dev
davsclaus:1369788790:2013-05-29T08:53:10.632+0000:1369788790:2013-05-29T08:53:10.632+0000:Yeah good idea with the copy of DefaultPreparedStatementStrategy. The code seems fine. Maybe polish it a bit.

devendra0008@yahoo.com:1369948376:2013-05-31T05:12:56.361+0000:1369948376:2013-05-31T05:12:56.361+0000:Hi Claus,

Thanks for your inputs, much appreciated!
Cleaned up the @Test and added an updateCount to the @JdbcProducer. Tried a few -ve tests and it appears to be working well so far.
Please see attached code.

Thanks
-Dev
davsclaus:1370157837:2013-06-02T15:23:57.217+0000:1370157837:2013-06-02T15:23:57.217+0000:Thanks for your contribution. I polished the patch a bit and made it work with non named parameters, eg just using ? as well."
0,CAMEL-6156,Task,Minor,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Claus Ibsen,0,2,2013-03-12 16:49:25+00:00,2013-03-14 03:13:09+00:00,"-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test
Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 15.935 sec <<< FAILURE!
testInvokeGreeter(org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test)  Time elapsed: 14.627 sec  <<< FAILURE!
java.lang.AssertionError: mock://result Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1318)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1300)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:372)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:351)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:339)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:177)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:627)
	at org.apache.camel.test.cxf.blueprint.CxfConsumerSoap12Test.testInvokeGreeter(CxfConsumerSoap12Test.java:80)


Running org.apache.camel.test.cxf.blueprint.CxfEndpointBeansTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.136 sec
Running org.apache.camel.test.cxf.blueprint.CxfPayloadProviderRouterTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.595 sec
Running org.apache.camel.test.cxf.blueprint.CxfTransportBlueprintTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.506 sec


Results :


Failed tests:
  CxfConsumerSoap12Test.testInvokeGreeter:80->CamelTestSupport.assertMockEndpointsSatisfied:627 mock://result Received message count. Expected: <1> but was: <0>","njiang:1363198379:2013-03-14T02:12:59.478+0000:1363198580:2013-03-14T02:16:20.676+0000:I just ran the test in my box by using JDK 1.6 and cannot reproduce the error.
Now the error can be reproduced if I use JDK 1.7.0_12-ea."
0,CAMEL-6155,Bug,Major,"2.9.6, 2.10.4","2.9.7, 2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.9.7, 2.10.5, 2.11.0",Willem Jiang,Willem Jiang,0,1,2013-03-12 07:57:19+00:00,2013-03-21 01:26:17+00:00,"When I was working on CAMEL-6147, I found the file stream is never closed, even it met the close condition.","njiang:1363130762:2013-03-13T07:26:02.325+0000:1363130762:2013-03-13T07:26:02.325+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-6154,Bug,Major,"2.10.3, 2.10.4","2.10.5, 2.11.0","

imap
pollenrich
quartz
timer

",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Sven Smets,0,2,2013-03-11 09:34:08+00:00,2013-05-02 02:30:58+00:00,"There is a NPE when using the imap mail component with quartz or the timer and pollEnrich as dicussed here:
http://camel.465427.n5.nabble.com/Schedule-file-mail-endpoint-td3356666.html#a3357538


I reproduced it on version 2.10.3 and 2.10.4 with
 <route id=""myTest"">
     <from uri=""timer://foo?fixedRate=true&period=10000""/>
     <pollEnrich uri=""imap://userName@hostName?password=***""/> 
     <to uri=""log:testroute?showAll=true&level=INFO""/>
  </route>


We need to use it with the quartz component (so we can use a cron expression), but get the same error
 <route id=""myTest"">
     <from uri=""quartz://testTimer?cron=0+?""/>
     <pollEnrich uri=""imap://userName@hostName?password=***""/> 
     <to uri=""log:testroute?showAll=true&level=INFO""/>
  </route>


11/03/2013 10:32:04 [DefaultQuartzScheduler-context_Worker-1] ERROR org.apache.camel.processor.DefaultErrorHandler  - Failed delivery for (MessageId: ID-W7-009430-52415-1362994261595-0-3 on ExchangeId: ID-W7-009430-52415-1362994261595-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: [Body is null]]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange[MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4]. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]
org.apache.camel.CamelExchangeException: Error occurred during aggregation. Exchange[Message: [Body is null]]. Caused by: [org.apache.camel.RuntimeCamelException - Failed to extract body due to: null. Exchange: Exchange[MailMessage: com.sun.mail.imap.IMAPMessage@411a3fe4]. Message: com.sun.mail.imap.IMAPMessage@411a3fe4]
	at org.apache.camel.processor.PollEnricher.process(PollEnricher.java:194)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:308)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:46)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:44)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.processor.loadbalancer.QueueLoadBalancer.process(QueueLoadBalancer.java:71)[camel-core-2.10.4.jar:2.10.4]
	at org.apache.camel.component.quartz.QuartzEndpoint.onJobExecute(QuartzEndpoint.java:113)[camel-quartz-2.10.4.jar:2.10.4]
	at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:61)[camel-quartz-2.10.4.jar:2.10.4]
	at org.quartz.core.JobRunShell.run(JobRunShell.java:216)[quartz-1.8.5.jar:]
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)[quartz-1.8.5.jar:]","davsclaus:1363832739:2013-03-21T10:25:39.281+0000:1363832739:2013-03-21T10:25:39.281+0000:The NPE was burried in the mail binding. Which I have added a fix for.

If you have the time then it would be good to try out 2.10.5 SNAPSHOT to see if that fixes your problem.

Is there something special about the mail you consume? eg if you just do <from uri=""imap:...""> can you consume the mails then also?
sven 88:1363835875:2013-03-21T11:17:55.473+0000:1363835875:2013-03-21T11:17:55.473+0000:It don't work, I have added the error log.

As a workarround i use the CronScheduledRoutePolicy with a start and stop time and this works as expected (see the code below)

        from(the mail uri)
        .noAutoStartup()
        .routePolicy(routePolicy)
        .bean(MailAttachmentsHandler.class);

the MailAttachmentsHandler:
 public void process(Exchange exchange) throws Exception {
        CamelContext context = exchange.getContext();
        ProducerTemplate producer = context.createProducerTemplate();

        for (String name : exchange.getIn().getAttachmentNames()) {
            if (name.matches(regex)) {
                DataHandler attachment = exchange.getIn().getAttachment(name);
                byte[] data = context.getTypeConverter().convertTo(byte[].class, attachment.getInputStream());

                Map<String, Object> headers = new HashMap<String, Object>();
                // used to write to file
                headers.put(Exchange.FILE_NAME, name);
                producer.sendBodyAndHeaders(queueEndpointUri, data, headers);
            }
        }
        producer.stop();
    }
davsclaus:1363841988:2013-03-21T12:59:48.818+0000:1363841988:2013-03-21T12:59:48.818+0000:If you are using log4j, then can you check if you have enabled 
{code}
log4j.throwableRenderer=org.apache.log4j.EnhancedThrowableRenderer
{code}

That option has a bug not logging the caused stacktraces, so the actual NPE you now have is not in the error.log.

If so can you try again. Disabling that log4j option. So we can have the caused stacktrace, to track down the NPE in camel-mail?
sven 88:1363843152:2013-03-21T13:19:12.418+0000:1363843152:2013-03-21T13:19:12.418+0000:updated the error log
davsclaus:1363843360:2013-03-21T13:22:40.203+0000:1363843360:2013-03-21T13:22:40.203+0000:Ah thanks, I can see the problem is that the mail folder gets closed and the mail message is accessed on-demand afterwards.

You can set closeFolder=false to fix that problem.
sven 88:1363843895:2013-03-21T13:31:35.508+0000:1363843895:2013-03-21T13:31:35.508+0000:Thanks, now it works.
davsclaus:1363844279:2013-03-21T13:37:59.537+0000:1363844279:2013-03-21T13:37:59.537+0000:Okay I logged CAMEL-6193 to fix this better."
0,CAMEL-6153,Task,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-11 07:32:56+00:00,2013-03-11 08:58:49+00:00,"See discussion at
http://camel.465427.n5.nabble.com/DISCUSS-Rename-camel-redis-and-camel-neo4j-to-include-spring-in-their-name-tp5728870.html",
0,CAMEL-6152,Bug,Minor,2.10.4,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Willem Jiang,Luz,0,1,2013-03-09 09:36:52+00:00,2013-05-02 02:30:57+00:00,"Steps to reproduce:
write a big content(whiche exceeds any write buffer) to the route
.setHeader(""stream"").constant(new File(""test.txt"")).to(""stream:header"");


The source code does not make sense here: org.apache.camel.component.stream.StreamProducer, line 183



boolean systemStream = outputStream != System.out || outputStream != System.err;



should be more like:



boolean systemStream = outputStream == System.out || outputStream == System.err;



By the way:
the line 168 is weird too:



boolean expiredStream = force || headerStream || reachedLimit;  // evaluation order is important!



this would (without this bug) always close header streams after every message.",njiang:1363800377:2013-03-21T01:26:17.245+0000:1363800377:2013-03-21T01:26:17.245+0000:This issue was resolved by CAMEL-6155.
0,CAMEL-6151,Improvement,Major,"2.10.4, 2.11.0","2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Aaron Whiteside,1,2,2013-03-09 01:54:42+00:00,2013-06-05 13:56:00+00:00,"My use case is that some routes will be dynamically redployed at runtime.


Ideally instead of retrying when a direct endpoints consumer disappears temporarily it would be nice if the direct producer would block for a configurable duration waiting for a consumer to come, back, into existence.


The default would obviously be not to block, to maintain backwards compatibility.


Something along these lines:



direct:xxxx?block=true&timeout=5000","aaronjwhiteside:1363035519:2013-03-12T04:58:39.842+0000:1363035519:2013-03-12T04:58:39.842+0000:Patch attached,

All camel-core tests pass except RouteAutoStartupTest, and I'm not even sure that is due to my changes?
aaronjwhiteside:1363124543:2013-03-13T05:42:23.512+0000:1363124543:2013-03-13T05:42:23.512+0000:New patch, fixed a typo.
davsclaus:1363245426:2013-03-14T15:17:06.889+0000:1363245426:2013-03-14T15:17:06.889+0000:Will have to ponder about this as it complicated this simple component with all the locking / synchronization and whatnot.
aaronjwhiteside:1363250498:2013-03-14T16:41:38.501+0000:1363254865:2013-03-14T17:54:25.014+0000:Let me know what your concerns are and I can try and alleviate/address them? :)

Is there a dev/staging branch this can be applied to, to run it over all the unit tests in the tree? I admit I only run the camel-core tests and even those take about half an hour.
davsclaus:1365487839:2013-04-09T14:10:39.171+0000:1365487839:2013-04-09T14:10:39.171+0000:The blocking behavior should only be in use if the options has been set. So its much better to in DirectEndpoint to create a producer accordingly to the options
- DirectProducer = the current default
- DirectBlockingProducer = a new which has the blocking behavior.

Then the code can be separated and avoid complicated synchronization code and whatnot.

The blocking should just loop and re-check if the consumer is there, until it either times out, or get a consumer.
aaronjwhiteside:1366385875:2013-04-19T23:37:55.299+0000:1366385875:2013-04-19T23:37:55.299+0000:Refactored all producer blocking/locking into a DirectBlockingProducer class.
davsclaus:1370245906:2013-06-03T15:51:46.212+0000:1370245906:2013-06-03T15:51:46.212+0000:Thanks Aaron for the patch. I made it a bit simpler to avoid any side effects or any changes for existing direct users.


aaronjwhiteside:1370246206:2013-06-03T15:56:46.231+0000:1370246318:2013-06-03T15:58:38.189+0000:Can you put back the ability to make the direct endpoints block by default?

Also spin locking, is.. icky imho. Why would using a real lock have side effects for existing users?
davsclaus:1370249215:2013-06-03T16:46:55.639+0000:1370249215:2013-06-03T16:46:55.639+0000:You can configure this on the component also, and therefore configure this once.
aaronjwhiteside:1370275089:2013-06-03T23:58:09.285+0000:1370275089:2013-06-03T23:58:09.285+0000:Thanks!
davsclaus:1370411760:2013-06-05T13:56:00.859+0000:1370411760:2013-06-05T13:56:00.859+0000:Added to direct-vm as well."
0,CAMEL-6150,New Feature,Major,None,Future,"

jta
xa

",Resolved,Fixed,Future,Unassigned,Scott England-Sullivan,2,4,2013-03-08 18:35:26+00:00,2021-04-19 19:10:27+00:00,"Add native JTA support to Camel and push the Spring TX support up to the Spring Component.  This effort should allow Camel to use any provider of JTA without the introduction of proprietary APIs into the Camel Core.


Spring TX support should be maintained but in the Camel Spring Component, not in the core API.


Best Regards,
Scott ES","davsclaus:1369543209:2013-05-26T12:40:09.120+0000:1369543209:2013-05-26T12:40:09.120+0000:We need TX API for camel-blueprint also. So makes sense to look into have some abstraction api in camel-core, that camel-spring / camel-blueprint / other components can leverage.
davsclaus:1618830627:2021-04-19T19:10:27.295+0000:1618830627:2021-04-19T19:10:27.295+0000:There is camel-jta now"
0,CAMEL-6149,Sub-task,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-08 14:41:23+00:00,2013-03-19 17:48:42+00:00,This allows people using karaf / SMX to have Camel message tracing from their shell command.,
0,CAMEL-6148,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-08 14:40:33+00:00,2013-03-19 17:49:40+00:00,"A new type of message tracer in Camel that stores the traced messages in an internal backlog queue, which can be access on demand by management API.


This allows us to build a karaf command to show messages traces, and allow end users to integrate this easier with their JMX tooling etc.


The name BacklogTracer was chosen as MessageTracer would be ambiguous with the existing Tracer. 


The existing Tracer is too fine grained and has some awkward issues as well.","davsclaus:1362726835:2013-03-08T15:13:55.513+0000:1362726835:2013-03-08T15:13:55.513+0000:We should add options to control if the backlog tracer should
- drain on dump  = true|false ; whether to drain the queue when dumping
- retain period = N period ; to retain only the messages for the last N period, eg last 5 minutes

davsclaus:1363686580:2013-03-19T17:49:40.899+0000:1363686580:2013-03-19T17:49:40.899+0000:We have a basic implementation now. That is good for now. Can always improve if needed. For example with more options on the Karaf command, such as filtering messages etc."
0,CAMEL-6147,New Feature,Major,2.10.4,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,jeff,0,2,2013-03-08 14:36:01+00:00,2013-03-18 13:55:11+00:00,"We should improve the stream:file to be able to auto close when it
detects the splitter is done, as we have a completed property on the
exchange to tell us.


We can add an option on stream:file like  closeOnDone=true


Like in this example : 


       from(""file://C:/Temp/camel/input_test/?noop=true"")
              .split()
              .tokenize(""\n"")
                     // Business lock with possible reject / enrich etc ...
                     .streaming()
                     .to(""stream:file?fileName=C:/Temp/camel/output_test/out.csv&closeOnDone=true"")
                .end()
       .end();","njiang:1363131495:2013-03-13T07:38:15.124+0000:1363131495:2013-03-13T07:38:15.124+0000:Applied the patch into trunk and updated the camel-stream wiki page.
0jeff0:1363586111:2013-03-18T13:55:11.627+0000:1363586111:2013-03-18T13:55:11.627+0000:good news, eager to use it !"
0,CAMEL-6146,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-08 12:15:09+00:00,2013-03-08 13:12:08+00:00,"The tracer MBean has identity hashcode appended, but that is not needed. We should loose that, so the mbean name is fixed name, which makes it easier for people and tooling to leverage.


org.apache.camel:context=localhost/camel-1,type=tracer,name=Tracer(0x548bb8b2)


Should be
org.apache.camel:context=localhost/camel-1,type=tracer,name=Tracer",
0,CAMEL-6145,Improvement,Minor,2.10.4,None,"
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-03-08 07:41:19+00:00,2013-03-08 08:20:57+00:00,"If you use jxpath as a language in a filter or content based eip, you may want to configure it to be lenient, so it can filter on values that do not exists on the given message (in case some messages do not have that information etc).


This can be done by configuring the lenient option on the JXPathContext.",
0,CAMEL-6144,Improvement,Major,2.9.2,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Shivakumar,6,6,2013-03-08 00:02:31+00:00,2014-11-20 12:10:27+00:00,"Listing two problems here. And a solution that is needed to fix these problems.


1) A Race condition leading to below ConstraintViolationException when two Camel Aggregator's trying to insert into the AGGREGATION DB table for same correlationkey(ID). 


""org.hibernate.exception.ConstraintViolationException: ORA-00001: unique constraint (USLDB_UAT2.AGGREGATION_PK) violated
at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:74)
at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125)
at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110)
at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129)
at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81)
at $Proxy171.executeUpdate(Unknown Source)
at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:73)
at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:1)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587)
at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:615)
at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:137)
at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:113)
at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:113)
at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:260)
at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:197)
at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(As...""


2) A similar Race condition happens when more than one Camel Aggregator(s) tries to update a row in the AGGREGATION table. This problem does not lead into any exceptions. But it leads into missing exchanges. Because both the Aggregator's are trying to update the same row in the AGGREGATION table, But one update is overwritten by other update, thus losing an exchange.


SOLUTION:
==========
Optimistic locking should be enabled / applied  for JdbcAggregationRepository to handle this race condition.","muellerc:1362678817:2013-03-08T01:53:37.917+0000:1362678817:2013-03-08T01:53:37.917+0000:Shivakumar, do you consider to work on a patch?

http://camel.apache.org/contributing.html
cgshiva:1362688911:2013-03-08T04:41:51.389+0000:1362688911:2013-03-08T04:41:51.389+0000:We are working on a workaround for this problem. But that workaround may not be to implement Optimistic locking. So anyone is welcome to have this fixed. If we think the workaround is coming well then we can push that. 
cgshiva:1362689051:2013-03-08T04:44:11.261+0000:1362689051:2013-03-08T04:44:11.261+0000:Christian: Also this post is related to https://issues.apache.org/jira/browse/CAMEL-6042 . So if the person working on https://issues.apache.org/jira/browse/CAMEL-6042 considers fixing JdbcAggregationRepository that would fix this problem too.
davsclaus:1369543108:2013-05-26T12:38:28.003+0000:1369543108:2013-05-26T12:38:28.003+0000:Yeah the aggregator eip now supports optimistick locking. The jdbc implementation needs to implement this logic. eg just throw back that exception from the api in the org.apache.camel.spi.OptimisticLockingAggregationRepository
davsclaus:1374635577:2013-07-24T11:12:57.169+0000:1374635577:2013-07-24T11:12:57.169+0000:For JDBC we would need to add an API to camel so people can add custom logic to map exceptions from the various JDBC drivers/vendors to a situation where they want to retry - for example with constraint violation.

We could have a default that just takes the name of the exception and if it has the word constraint in the name we assume its constraint errors. People with more needs can do their own mapping.
davsclaus:1374637269:2013-07-24T11:41:09.262+0000:1374637269:2013-07-24T11:41:09.262+0000:There is now some support for this. See the SQL component wiki page for more details.

krsmes:1410355933:2014-09-10T21:32:13.458+0000:1410355933:2014-09-10T21:32:13.458+0000:I don't understand how the current implementation (2.13.x) solves problem #2 from the description:

bq. A similar Race condition happens when more than one Camel Aggregator(s) tries to update a row in the AGGREGATION table. This problem does not lead into any exceptions. But it leads into missing exchanges. Because both the Aggregator's are trying to update the same row in the AGGREGATION table, But one update is overwritten by other update, thus losing an exchange.

Simple example: 
* I'm awaiting completion based on counting 5 messages.  
* The current data in the aggregation table indicates 3 have been aggregated so far.  
* If I have either two threads or two process with a camel route that listens to a queue and then aggregates:
** thread one gets the existing message from the aggregation table (#3)
** thread two gets the existing message from the aggregation table (#3)
** thread one aggregates and adds its message to the aggregation table (#4)
** thread two does the same then I've lost the message from thread one  

But there is no exception in this case -- the optimistic lock is only on the message key, there's no versioning going on.

What is wrong with my understanding of the AggregateProcessor and AggregateRepository that prevents the current implementation from  missing exchanges?
ben.truitt:1410356673:2014-09-10T21:44:33.627+0000:1410356673:2014-09-10T21:44:33.627+0000:[~krsmes] - I think the problem is that this issue's description reports two separate (but related) problems, by its own admission: ""Listing two problems here. ""

I suggest creating a separate issue for the problem that you've pointed out still seems to exist."
0,CAMEL-6143,Test,Minor,2.10.5,2.10.7,"
None
",Resolved,Won't Fix,2.10.7,Unassigned,Claus Ibsen,0,2,2013-03-07 16:57:16+00:00,2013-09-15 20:42:35+00:00,"There is two tests with spring and hazelcast that hangs and timeout after a long time.


Need to look into why.","muellerc:1379248955:2013-09-15T20:42:35.470+0000:1379248955:2013-09-15T20:42:35.470+0000:As we discontinue the support of Camel 2.10.x, we don't fix these tests."
0,CAMEL-6142,Improvement,Major,2.10.4,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-03-07 14:11:53+00:00,2013-03-07 14:15:14+00:00,"Somewhere in the massive code of Hadoop it override and set the auth configuartion to



javax.security.auth.login.Configuration.setConfiguration(new HadoopConfiguration())




Which causes camel-hdfs to not work in environments with Auth, such as Karaf et all.


We would have to keep and restore the current auth when using camel-hdfs to ensure the auth is restored after using hadoop, so Karaf still works.",
0,CAMEL-6141,Bug,Minor,2.10.0,"2.10.5, 2.11.0","

patch

",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Alain Corbière,0,2,2013-03-07 13:45:04+00:00,2013-03-07 13:56:12+00:00,"To generate dot file for Transform message, there is a problem with the url link (http://camel.apache.org/message-translator.html and not http://camel.apache.org/message-transform.htm).",davsclaus:1362635772:2013-03-07T13:56:12.730+0000:1362635772:2013-03-07T13:56:12.730+0000:Thanks for the patch.
0,CAMEL-6140,Improvement,Minor,2.10.4,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Pat Fox,0,2,2013-03-07 11:54:20+00:00,2013-03-07 13:48:21+00:00,"At the moment org.apache.camel.api.management.mbean.ManagedThreadPoolMBean does not seem to give visibility of how much space is left in the ThreadPoolExecutor's TaskQueue.  


It is possible to get the remaining Capacity from the ThreadPoolExecutor associated blocking queue, so it would be nice to expose that on the ManagedThreadPoolMBean.","pgfox:1362628619:2013-03-07T11:56:59.426+0000:1362628619:2013-03-07T11:56:59.426+0000:a possible patch 
davsclaus:1362635170:2013-03-07T13:46:10.540+0000:1362635170:2013-03-07T13:46:10.540+0000:Thanks Pat for the patch.

I fixed some checkstyle issues (eg code formatting). Eg see here how to run the checkstyle test
http://camel.apache.org/building.html"
0,CAMEL-6139,New Feature,Minor,"2.10.0, 2.10.2, 2.10.3, 2.10.4",None,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Gardella Juan Pablo,0,5,2013-03-07 11:33:16+00:00,2013-09-21 00:03:46+00:00,"Allow split the content of a Zip in a stream way. Each item is an InputStream.
Related thread: http://camel.465427.n5.nabble.com/zip-file-best-practices-td5713437.html","gardellajuanpablo:1362627499:2013-03-07T11:38:19.047+0000:1362627499:2013-03-07T11:38:19.047+0000:Maven project with a test and the source code.
hekonsek:1362990637:2013-03-11T16:30:37.800+0000:1362990637:2013-03-11T16:30:37.800+0000:Keep in mind that we probably should extend existing ZipFile data format [1] instead of creating new component. I mentioned this already in the discussion [2].

[1] http://camel.apache.org/zip-dataformat.html
[2] http://camel.465427.n5.nabble.com/zip-file-best-practices-tp5713437p5728846.html
njiang:1363130173:2013-03-13T07:16:13.882+0000:1363130173:2013-03-13T07:16:13.882+0000:Applied the patch into trunk with thanks ot Gardella.

As the ZipDataFormat is not using ZipInputStream, and we still need to setup the expression on the splite DSL, I just changed the ZipSplitter to implement the interface of Expression. 

The test route is changed to
{code}
from(""file..."").split((new ZipSplitter())
 .streaming().convertBodyTo(String.class).to(""mock:processZipEntry"")
{code}

I also updated the unit test to verify the message body at the same time.  

hekonsek:1363131325:2013-03-13T07:35:25.126+0000:1363131325:2013-03-13T07:35:25.126+0000:I meant Zip *File* data format [1]. Sorry for the confusion. ZipFile Data Format uses ZipInputStream, so I suggest to enhance it instead of providing separated slitter.

[1] http://camel.apache.org/zip-file-dataformat.html
gardellajuanpablo:1373009941:2013-07-05T15:39:01.411+0000:1373009941:2013-07-05T15:39:01.411+0000:The implementation included is not working fine. I had replace the implementation that I had provided for the new one and I have this error:

org.apache.camel.ExpressionEvaluationException: org.springframework.expression.spel.SpelEvaluationException: EL1011E:(pos 34): Method call: Attempted to call method size() on null context object.

I will provide a test as soon as possible.


 
gardellajuanpablo:1373024600:2013-07-05T19:43:20.121+0000:1373024600:2013-07-05T19:43:20.121+0000:camel-zipsplitter2.zip contains one more test: ZipProcessRouteBuilderIT.java

In the test is possible reproduce the error that I mentioned.
njiang:1373839893:2013-07-15T06:11:33.421+0000:1373839893:2013-07-15T06:11:33.421+0000:The patch is applied into Camel trunk, the fix version of camel-2.12.x.
When I changed the camel version to 2.12-SNAPSHOT, the test passed.

njiang:1373844554:2013-07-15T07:29:14.838+0000:1373844554:2013-07-15T07:29:14.838+0000:I just found the AggregationStrategy after the split doesn't work as expected, so I commit a quick fix and update the test case for it.
massfords:1379680180:2013-09-20T20:29:40.585+0000:1379680180:2013-09-20T20:29:40.585+0000:I don't see ZipSplitter in the 2.12.0 sources. Are you sure it's been included in the 2.12.0 release? The org.apache.camel.builder package only has an xml subpackage, no zip subpackage.
muellerc:1379680691:2013-09-20T20:38:11.423+0000:1379680691:2013-09-20T20:38:11.423+0000:It's here: https://git-wip-us.apache.org/repos/asf?p=camel.git;a=blob;f=components/camel-zipfile/src/main/java/org/apache/camel/dataformat/zipfile/ZipSplitter.java;h=df195f2c295d12325050d29f547c3e9b7b86b2f2;hb=127b8654d5cf99bb8b3b579a23656b238658e366
massfords:1379693026:2013-09-21T00:03:46.233+0000:1379693026:2013-09-21T00:03:46.233+0000:I just realized it's not part of camel-core. I found the docs on the DataFormat section. Sorry for the confusion."
0,CAMEL-6138,Bug,Major,2.11.0,2.11.0,"

build
xmlrpc

",Resolved,Fixed,2.11.0,Willem Jiang,Roy Phillips,0,2,2013-03-07 11:08:12+00:00,2013-03-07 19:05:51+00:00,Building the camel-xmlrpc component via Maven: mvn install will create a .jar without the dataformat package included; this seems to be because the property camel.osgi.export.pkg only specifies the compoenent package,"sothach:1362625801:2013-03-07T11:10:01.550+0000:1362625801:2013-03-07T11:10:01.550+0000:Patches the pom.xml build file to fix missing package problem
davsclaus:1362654351:2013-03-07T19:05:51.555+0000:1362654351:2013-03-07T19:05:51.555+0000:Thanks for reporting and providing patches."
0,CAMEL-6137,New Feature,Major,2.10.4,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Carsten Erker,0,3,2013-03-07 11:05:09+00:00,2017-02-28 14:01:55+00:00,"Currently, Camel sends FTP SITE commands only after log-in and before uploading a file. 


In general, SITE commands can be virtually anything: We now got a use case where we need to communicate with an FTP server in terms of SITE commands, most of the time without the need to upload anything. I.e., send a SITE command, capture the reply and hand it back to the application.


In camel-ftp, this could be done with a new property which tells the component to not upload a file and get the server response, e.g. in the body or as a header attribute. This is only needed for the producer side.


We'd like to provide the code for this.","davsclaus:1362635820:2013-03-07T13:57:00.341+0000:1362635820:2013-03-07T13:57:00.341+0000:Patches is welcome
cerker:1363860504:2013-03-21T18:08:24.244+0000:1363860537:2013-03-21T18:08:57.245+0000:Just sent a pull request on Github: https://github.com/apache/camel/pull/16

Changes:

_Part 1_
- Added a new option ""upload"" to the producer which works according to option ""download"" in the FTP consumer: If false, no file will be uploaded, no temporary file will be created, no done file will be created, but the Exchange.FILE_NAME_PRODUCED header will be set. Defaults to true.
- Since I wanted the ""upload"" option to work similar as the ""download"" option, I added an isUploadFile() method to the GenericFileProducer in camel-core. This is the only change in camel-core.

_Part 2_
- Added a new option ""siteCommandCapture"" to the RemoteFileConfiguration: if true, the output of the site commands will be returned in the exchange's body as a List<String> with the output of each executed site command as a list element in order of execution. If false, the body remains untouched. Defaults to false.

The default behaviour remains as before.
davsclaus:1364095785:2013-03-24T11:29:45.092+0000:1364095785:2013-03-24T11:29:45.092+0000:Why is this ticket marked as resolved? I don't think we have added any of the patches to the code base.
cerker:1364097887:2013-03-24T12:04:47.603+0000:1364097887:2013-03-24T12:04:47.603+0000:{quote}Why is this ticket marked as resolved?{quote}
I am sorry about this, I thought I read somewhere that the issue should be set to ""fixed"" after providing a patch; this was the only way to do so. After taking another look on Camel's contributing page: It doesn't actually say so. Just reopened the issue.
githubbot:1423894565:2015-02-14T14:16:05.694+0000:1423894565:2015-02-14T14:16:05.694+0000:Github user gmcdonald closed the pull request at:

    https://github.com/apache/camel/pull/16
"
0,CAMEL-6136,Bug,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Roy Phillips,0,2,2013-03-07 10:26:42+00:00,2013-03-07 13:02:58+00:00,"When processing an XMLRPC request in Async mode, the original In message headers are not preserved (copied to the Out message)
This works correctly for sync mode, but the async callback handler does not copy the message headers as the XmlRpcProducer.processor() method does,","sothach:1362623294:2013-03-07T10:28:14.956+0000:1362623294:2013-03-07T10:28:14.956+0000:Patches XmlRpcAsyncCallBack.java to fix issue CAMEL-6136
sothach:1362623465:2013-03-07T10:31:05.335+0000:1362623465:2013-03-07T10:31:05.335+0000:Adds two test cases to XmlRpcComponentTest.java to verify header preservation
njiang:1362632578:2013-03-07T13:02:58.455+0000:1362632578:2013-03-07T13:02:58.455+0000:Applied the patch into trunk with thanks to Roy."
0,CAMEL-6135,Bug,Major,2.10.4,"2.9.6, 2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.5, 2.11.0",Willem Jiang,Willem Jiang,0,2,2013-03-06 13:46:49+00:00,2013-03-07 12:59:06+00:00,"CompositeRegistry#lookup just lookups iterating the registries it has. it should catch the exception to make sure it go through all the registries.


Here is the mail thread about it.
http://camel.465427.n5.nabble.com/Catch-NoSuchComponentException-in-org-apache-camel-impl-CompositeRegistry-lookup-td5728645.html","njiang:1362632346:2013-03-07T12:59:06.839+0000:1362632346:2013-03-07T12:59:06.839+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-6134,Bug,Major,2.11.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,2,2013-03-06 13:26:59+00:00,2015-02-15 15:49:38+00:00,"The BlobStoreBlueprintRouteTest test fails in tests/camel-itest-osgi, when running



mvn clean test -Dtest=BlobStoreBlueprintRouteTest




It cannot find the transient provider, which seems to be located in jclouds-blobstore JAR in the META/INF/services directory.


org.jclouds.blobstore.TransientApiMetadata


Migrating to the new builder API I get this error



java.util.NoSuchElementException: key [transient] not in the list of providers or apis: {}
	at org.jclouds.ContextBuilder.newBuilder(ContextBuilder.java:172)
	at org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest.doPreSetup(BlobStoreBlueprintRouteTest.java:52)




Not sure what it takes to get service loader to work in OSGi / Karaf.","iocanel:1362548088:2013-03-06T13:34:48.113+0000:1362548088:2013-03-06T13:34:48.113+0000:The service loader doesn't work inside OSGi. 
So I've added some bits to jclouds itself so that it registers its own stuff founds under META-INF/service to the Service Registry. I'll have a look and see why its borked.
davsclaus:1393888044:2014-03-04T07:07:24.350+0000:1393888044:2014-03-04T07:07:24.350+0000:[~iocanel] wonder if this is still a problem with jclouds 1.7.1 ?
davsclaus:1423986578:2015-02-15T15:49:38.854+0000:1423986578:2015-02-15T15:49:38.854+0000:The test works now"
0,CAMEL-6133,Bug,Major,2.10.4,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Thomas,1,3,2013-03-06 09:36:59+00:00,2013-04-16 19:33:52+00:00,"Test case:
To parse XHTML we use jtidy and a xslt script. The xslt component works in this case better when a SAXSource is used because the SAXSource can use it's own XMLReader with it's own CatalogResolver. 


Problem:
After transforming the body with xslt component the SAXSource is debug logged by org.apache.camel.processor.SendProcessor. This log will ""destroy"" the SAXSource resulting in an premature end of file. See http://www.danielschneller.com/2008/01/saxparseexception-1-1-premature-end-of.html


Workaround:
Switch log level of SendProcessor to INFO or WARN or something else but not DEBUG.


Logging in camel should clone SAXSource before reading.


May be a problem by used logger framework? I use log4j.","davsclaus:1362536194:2013-03-06T10:16:34.004+0000:1362536194:2013-03-06T10:16:34.004+0000:Can you attach a unit test / Camel route with this problem.

t.gueldner:1366075718:2013-04-16T09:28:38.109+0000:1366075718:2013-04-16T09:28:38.109+0000:I've attached a unit test to reproduce the bug.
davsclaus:1366085967:2013-04-16T12:19:27.411+0000:1366085967:2013-04-16T12:19:27.411+0000:The problem is that you log the body with
{code}
                        .log(LoggingLevel.WARN, ""${body}"")
{code}

That does output the message body as a String, which mean the data will be read. And as its stream based it cannot be re-read when you want to XSLT the message.

You can enable stream caching to support this.
http://camel.apache.org/stream-caching.html
davsclaus:1366088562:2013-04-16T13:02:42.067+0000:1366088562:2013-04-16T13:02:42.067+0000:I am improving {{org.apache.camel.util.MessageHelper#extractBodyForLogging}} to skip more messages bodies that are Source based. 

But the problem you have is as said in the previous comment.
davsclaus:1366089124:2013-04-16T13:12:04.149+0000:1366089124:2013-04-16T13:12:04.149+0000:Thanks for the test case."
0,CAMEL-6132,New Feature,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Quinn Stevenson,Claus Ibsen,3,6,2013-03-06 07:46:43+00:00,2019-07-31 15:02:57+00:00,"We should introduce a proper camel-test-karaf component that end users can use to do Camel and Karaf integration tests.


The code we have in tests/camel-itest-karaf is for internal usage and testing of Camel. The code is not polished and intended for end users.


We should create a new module for that, and take the good parts of camel-itest-karaf and make it user friendly etc. And of course have docs to go with as well.


And when its good, we can use that in camel-itest-karaf also (eat our own dog food)","hqstevenson:1458799618:2016-03-24T14:06:58.807+0000:1458799618:2016-03-24T14:06:58.807+0000:I have a start on this I put together while working with a customer - I'll get a PR going so it can be reviewed.

However, with the discussion going on about what version(s) of Karaf will be supported, should we have a module for each version of karaf?  (something like camel-test-karaf-v2 and camel-test-karaf-v4)
davsclaus:1458800156:2016-03-24T14:15:56.111+0000:1458800156:2016-03-24T14:15:56.111+0000:Karaf 2 is no longer supported.

Moving forward we focus on Karaf 4. Karaf 3.x is in maintenance mode and we do not want to put so much effort in that release.
davsclaus:1459044654:2016-03-27T10:10:54.794+0000:1459044654:2016-03-27T10:10:54.794+0000:I found some code here that can be usable
https://github.com/ANierbeck/Camel-Pax-Exam-Demo/blob/master/route-control/src/test/java/de/nierbeck/camel/exam/demo/control/route/KarafRoutingTest.java

For example how to execute commands, as it would be nice to be able to run the camel commands in your unit tests, and greb the output.

Also the injeciton of the feature service is nice so you can install custom features also.


davsclaus:1459052474:2016-03-27T12:21:14.518+0000:1459052474:2016-03-27T12:21:14.518+0000:Just improved the tests in camel-itest-karaf so it install features a bit later and can lookup your Camel app
https://github.com/apache/camel/blob/master/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf/AbstractFeatureTest.java#L108

Some of that may be good to have in a camel-test-karaf module. So you can lookup your Camel app and access it.
hqstevenson:1459339278:2016-03-30T20:01:18.452+0000:1459339278:2016-03-30T20:01:18.452+0000:The first iteration on this will create the camel-test-karaf module, and move the AbstractFeatureTest class from the camel-itest-karaf module to the new camel-test-karaf module.

I'm also going to include some of the configuration to help keep the Karaf instances from hanging around after the tests.

I should have the PR ready tomorrow 
githubbot:1459359609:2016-03-31T01:40:09.503+0000:1459359609:2016-03-31T01:40:09.503+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/923

    CAMEL-6132 - Initial version of camel-test-karaf

    This PR provides the structure modifications.  The AbstractFeatureTest class used by camel-itest-karaf is now in the camel-test-karaf module, and has been enhanced to reduce the possibility of dangling Karaf instances.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-6132

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/923.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #923
    
----
commit 6f6a17c9847aa2df318dc5f313eecf57c16fa0a9
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-03-30T20:27:59Z

    CAMEL-6132 - Initial version of the camel-test-karaf module

commit b9564c913eff011496e0a62ca9c126332735372f
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-03-31T01:35:54Z

    Cleanup checkstyle errors

----

githubbot:1459589825:2016-04-02T17:37:05.459+0000:1459589825:2016-04-02T17:37:05.459+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/923

hqstevenson:1462424280:2016-05-05T12:58:00.893+0000:1462424280:2016-05-05T12:58:00.893+0000:Sorry - got pulled onto some other items for a bit. 

I see the CamelKarafTestSupport class is being used in the camel-itest-osgi tests now, so I'm not sure whats left for this JIRA.

Is there anything else before we call this one done?
davsclaus:1462424661:2016-05-05T13:04:21.418+0000:1462424661:2016-05-05T13:04:21.418+0000:Yeah I think we need to do an example such as camel-example-blueprint that is a little osgi project where you use this new module to test that application, as if you were an end user.

The usage in camel-itest-osgi and camel-itest-karaf is different from end user, as we use to test installing features, and installing selected pieces where we install a custom blueprint xml file, and then install features and whatnot.

We need a focus as if you were end user on a single end user project. Then ideally all you have to do is to write test methods and out of the box your project is loaded and installed.
hqstevenson:1462425048:2016-05-05T13:10:48.537+0000:1462425048:2016-05-05T13:10:48.537+0000:Sounds Good - but I have a question on the example.

I've used Pax Exam in two different scenarios, and I'm not sure which one is the right one for the example.

In one case, I use the Pax Exam tests in the same module where the code I'm testing lives.  In the other case, the Pax Exam tests are in a completely separate module, and just use the jar for the component they are testing.  Both uses have their merits/downfalls - but I'm not sure which one makes the most sense for the example.

One thought I had was to update the blueprint example with a Pax test to demonstrate the first scenario and then have the example projects demonstrate the second usage.

Thoughts?
hqstevenson:1462427740:2016-05-05T13:55:40.373+0000:1462427740:2016-05-05T13:55:40.373+0000:Sorry - typo.  I meant to say ""update the blueprint archetype"" - not example (since it doesn't exist yet).

The camel-example-cdi-osgi uses Pax Exam w/Karaf as well - I could look at updating that example to use CamelKarafTestSupport as well.
davsclaus:1462430580:2016-05-05T14:43:00.235+0000:1462430580:2016-05-05T14:43:00.235+0000:I would focus on blueprint for camel-test-karaf as the vast majority is using that.

And yeah the archetype can be updated as well. Its often easier to have a code example working with the working bits, then the archetype can be updated then, as otherwise you may have to do many archetype builds to get it to generate correct code.

In the fabric8 project we are a bit smarter as we generate archetypes from existing working examples. Then we know they work ;)
https://github.com/fabric8io/ipaas-quickstarts/blob/master/archetypes-catalog/pom.xml#L30
hqstevenson:1463649944:2016-05-19T17:25:44.092+0000:1463649944:2016-05-19T17:25:44.092+0000:I opened a pull request with the initial version of camel-example-blueprint ( https://github.com/apache/camel/pull/987 ).  Can you take a look and see what you think?

I hit a few issues while doing this that should be addressed:
 -  I had to use Pax Exam 4.8.0.  Pax Exam 4.9.1 failed for some reason - I'm not really sure why
 -  The example is using version 2.18.1 of the maven-surefire-plugin and the maven-failsafe-plugin.  I had issues with 2.19.1 in the past, and I didn't get around to tracking those down, or even seeing if they would hit me for this example project
 - The logging is behaving very strangely.  I'm not sure what's going on there - I'm getting a lot of debug output as well as some failures starting bundles in the CamelBlueprintTestSupport-based tests.  I could use some help tracking it down.
hqstevenson:1464182212:2016-05-25T21:16:52.903+0000:1464182212:2016-05-25T21:16:52.903+0000:Any comments on the example as it stands?
hqstevenson:1471325812:2016-08-16T13:36:52.733+0000:1471325812:2016-08-16T13:36:52.733+0000:I was hoping to get some feedback on this - nothing?
davsclaus:1474421530:2016-09-21T09:32:10.667+0000:1474421530:2016-09-21T09:32:10.667+0000:For 2.18 this is a kind of preview module and then we will get community feedback and work to improved this for 2.19.0 release.
ajs6f:1487839345:2017-02-23T16:42:25.233+0000:1487839345:2017-02-23T16:42:25.233+0000:There is currently a {{camel-test-karaf}} bundle and feature available in 2.18.2. Is this the same effort?
davsclaus:1487841711:2017-02-23T17:21:51.717+0000:1487841711:2017-02-23T17:21:51.717+0000:Yes it may still need a bit more polishing and love.

Contributions is welcome
ajs6f:1487842746:2017-02-23T17:39:06.421+0000:1487844221:2017-02-23T18:03:41.912+0000:I would love to help, and I am currently wresting with getting an example up. I keep running into errors with JNDI (?!), e.g. as shown below. I have experience with Camel and Karaf, but it dates from five or more years ago, and times have changed. I am subclassing {{CamelKarafTestSupport}} and I show below the stacktrace my current {{@Configuration}} method. (The full code is [here|https://github.com/ajs6f/fcrepo3-shim].) Any advice much appreciated, and if I can get a working example I will make a point of at least writing a tutorial and hopefully sending a PR with whatever improvements I can find. I'm just stumped by this JNDI business. I think I must be missing something obvious... 

{noformat}
javax.naming.NoInitialContextException: Unable to find the InitialContextFactory org.apache.camel.util.jndi.CamelInitialContextFactory.
	at org.apache.aries.jndi.ContextHelper.getInitialContext(ContextHelper.java:150)
	at org.apache.aries.jndi.OSGiInitialContextFactoryBuilder.getInitialContext(OSGiInitialContextFactoryBuilder.java:51)
	at javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:684)
	at javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:313)
	at javax.naming.InitialContext.init(InitialContext.java:244)
	at javax.naming.InitialContext.<init>(InitialContext.java:216)
	at org.apache.camel.test.junit4.CamelTestSupport.createJndiContext(CamelTestSupport.java:592)
	at org.apache.camel.test.junit4.CamelTestSupport.createRegistry(CamelTestSupport.java:578)
	at org.apache.camel.test.junit4.CamelTestSupport.createCamelContext(CamelTestSupport.java:572)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:278)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:246)

{noformat}

{noformat}
    @Configuration
    public Option[] config() {
        MavenUrlReference camelRepo = maven().groupId(""org.apache.camel.karaf"").artifactId(""apache-camel"")
                        .classifier(""features"").type(""xml"").version(CAMEL_VERSION);
        MavenUrlReference jenaRepo = maven().groupId(""org.apache.jena"").artifactId(""jena-osgi-features"")
                        .classifier(""features"").type(""xml"").version(""3.2.0"");
        MavenUrlReference enterpriseRepo = maven().groupId(""org.apache.karaf.features"").artifactId(""enterprise"")
                        .classifier(""features"").type(""xml"").version(""4.0.7"");

        MavenArtifactProvisionOption shim = mavenBundle().groupId(""edu.si"").artifactId(""fcrepo3-shim-core"")
                        .version(""0.0.1-SNAPSHOT"").start();
        
        Option[] options = new Option[] { features(enterpriseRepo, ""jndi""), features(jenaRepo, ""jena""),
                features(camelRepo, ""camel-test""), shim };
        return ArrayUtils.addAll(configure(), options);
    }
{noformat}
hqstevenson:1487845049:2017-02-23T18:17:29.449+0000:1487845049:2017-02-23T18:17:29.449+0000:Claus is correct in the statement that this still needs quite a bit of love.  I started it by combining on what was already in the Camel codeline with some stuff I'd done for a customer, and I ran out of time before I got very far.

I'd love to have some help on this one - I'll see if I can pull your example (or find the one I had), but it may take me a few days (kinda busy with customers right now).
davsclaus:1487845314:2017-02-23T18:21:54.359+0000:1487845314:2017-02-23T18:21:54.359+0000:JndiContext comes from when using DefaultCamelContext that uses JNDI as registry by default. Somewhere that camel-test-karaf module needs to setup a OSGi based CamelContext (typically using blueprint or something).

ajs6f:1487848475:2017-02-23T19:14:35.374+0000:1487849300:2017-02-23T19:28:20.166+0000:[~hqstevenson], thank you for any time you are willing to spend with this!

[~davsclaus], thanks for the pointer! I will try to override whatever behavior is currently setting up the {{CamelContext}} and see if I can make some progress that way.
ajs6f:1487849502:2017-02-23T19:31:42.096+0000:1487849502:2017-02-23T19:31:42.096+0000:[~davsclaus], success! Thanks for the pointer! I overrode:
{noformat}
    @Override
    protected CamelContext createCamelContext() {
        return new OsgiDefaultCamelContext(bundleContext);
    }
{noformat}
and added {{camel-core-osgi}}
{noformat}
MavenArtifactProvisionOption camelOsgi = mavenBundle().groupId(""org.apache.camel"").artifactId(""camel-core-osgi"")
                        .version(""2.18.2"").start();
{noformat}
to the mix. I think that bundle should be part of the ""default"" results of {{org.apache.camel.test.karaf.AbstractFeatureTest.configure(String...)}}. I will send a PR with these changes, for your consideration. Now on to writing some tests-- I'm sure I will have more questions but I will take them to the lists.

Thanks!
ajs6f:1491544483:2017-04-07T13:54:43.448+0000:1491544483:2017-04-07T13:54:43.448+0000:Just wanted to note that I haven't lost sight of this ticket and I will be bringing in a PR soon for the few small improvements I was able to make the Camel code to get my tests to run. "
0,CAMEL-6131,Improvement,Minor,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Aaron Whiteside,0,3,2013-03-06 00:45:04+00:00,2013-03-06 07:26:30+00:00,RouteDefinition.toString() should include the route Id,"njiang:1362524557:2013-03-06T07:02:37.412+0000:1362524557:2013-03-06T07:02:37.412+0000:Applied the patch into trunk.
davsclaus:1362525990:2013-03-06T07:26:30.770+0000:1362525990:2013-03-06T07:26:30.770+0000:Please do not categorize it as a bug when its not. We want our JIRA tickets to be accurate"
0,CAMEL-6130,Bug,Critical,"2.9.5, 2.10.4","2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Aaron Whiteside,0,2,2013-03-05 21:05:27+00:00,2013-03-12 11:47:43+00:00,"EndpointHelper.setReferenceProperties() does not work with OSGiServiceRegistry


setReferenceProperties() is hard-coded to lookup services of type Object.class.


It should use reflection to determine the type that the setter method accepts and then use that type to lookup the reference in the service registry.


At the moment this issue is stopping #bean references in Endpoints from being resolved when using an OSGiServiceRegistry, in OSGi you need to know the class of the service you want before hand.","aaronjwhiteside:1362497816:2013-03-05T23:36:56.417+0000:1362497816:2013-03-05T23:36:56.417+0000:Patch that fixes the issue, it's a little ugly but I didn't want to rewrite EndpointHelper or IntrospectionSupport.

Passes all camel-core unit tests.
davsclaus:1362537063:2013-03-06T10:31:03.563+0000:1362537063:2013-03-06T10:31:03.563+0000:I think the fix should be on the OSGi side instead. So if Object.class is provided as type then it should ignore that. Or rely on the fact that any type is an Object.
aaronjwhiteside:1362556388:2013-03-06T15:53:08.347+0000:1362556388:2013-03-06T15:53:08.347+0000:I don't think that is possible, you need to know the exact type of a service to retrieve it from a BundleContext.

http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleContext.html

Passing in Object.class returns nothing because nothing is explicitly registered against that class.
davsclaus:1362557308:2013-03-06T16:08:28.086+0000:1362557308:2013-03-06T16:08:28.086+0000:You can use this method and provide null as the class
http://www.osgi.org/javadoc/r4v43/core/org/osgi/framework/BundleContext.html#getServiceReferences(java.lang.Class, java.lang.String)

Frankly the end user has not provided any class but only the name of the bean to use. So if the service is register with class FooImpl.class, and we want to lookup this service using the name ""foo"", then we should be able to do

getServiceReferences(null, ""foo"");

If the setter type is a Foo (eg the interface) then Camel (with your patch) would call
getServiceReferences(Foo.class, ""foo"");

But what happens if the service was registered with 
FooImpl.class as the class type.

Would the OSGi service registry be smart enough to know that FooImpl and Foo is the ""same""
aaronjwhiteside:1362557976:2013-03-06T16:19:36.542+0000:1362558274:2013-03-06T16:24:34.866+0000:The javadoc for that method says:

{quote}
clazz - The class under whose name the service was registered. Must not be null.
{quote}

I think in this case the _user_ is the Endpoint who is trying to lookup a property/bean and inject it into a method. So the method it finds to inject into determines the type? I think EndpointHelper.setReferenceProperties() is only used in that specific scenario and not by the wider public.

Services in OSGi CAN be registered with any type, interface or not. But the general rule of thumb is you NEVER register a classes concert type, abstract types are OK, only the service interface. This is the essence of loosely coupled services, so I don't see this happening in practice.

If the service was registered with it's concert class and you try and look it up by an interface it implements, you will not be able to find it. Mind you in OSGi you can expose/register a service via many interfaces/abstract classes.

So no the OSGi service registry wouldn't be smart enough to figure it out by itself.
davsclaus:1362558719:2013-03-06T16:31:59.044+0000:1362558719:2013-03-06T16:31:59.044+0000:Ah it was getAllServiceReferences

clazz - The class name with which the service was registered or null for all services.
aaronjwhiteside:1362558969:2013-03-06T16:36:09.174+0000:1362558969:2013-03-06T16:36:09.174+0000:Ah OK, So I still see a potential problem with that..

Service property's have no unique constraint in OSGi, so there could be a a hundred services registered with the property name=hello, of all different types. So we would have to iterate through the list trying to inject each one until one fits? If you're OK with that approach I could implement it. Though I would be worried at the number of services it would find... potential performance issue.


aaronjwhiteside:1362562984:2013-03-06T17:43:04.858+0000:1362562984:2013-03-06T17:43:04.858+0000:I've had more time to think about this, and I don't think we should go with this approach.

In endpoint helper we would have to call Registry.findByTypeWithName() passing Object.class then index into the result keyed by the bean name to get the object. 

I'm not sure that all Registry implementations would work correctly this way? For me at least it still makes more sense to figure out the specific type and try and lookup a bean with that specific type and name.

What do you think?
davsclaus:1362565165:2013-03-06T18:19:25.476+0000:1362565165:2013-03-06T18:19:25.476+0000:Yeah in light of the best practice in OSGi to register a service by its interface, and assuming the endpoint options will be using the interface as its type as well. So there is a 1:1 match. Then it makes sense to use the setter type in the lookup.

If there is a type hierachy from the setter type, we could walk up the tree (and select the interfacaes), and do re-lookup, if we could not find a match. Though this may be overkill? 

aaronjwhiteside:1362565516:2013-03-06T18:25:16.890+0000:1362565516:2013-03-06T18:25:16.890+0000:I think that's not a bad idea, I've cleaned up the first patch a bit - so let me attach the cleaned up version. Then I'll work on a version that returns a set of possible types to try and lookup/inject.
aaronjwhiteside:1362566315:2013-03-06T18:38:35.080+0000:1362566315:2013-03-06T18:38:35.080+0000:Latest patch, cleaned up.
davsclaus:1362566724:2013-03-06T18:45:24.067+0000:1362566724:2013-03-06T18:45:24.067+0000:Great, it would be good if we could add an unit test to tests/camel-itest-osgi to have an actual unit test running in osgi environment.
aaronjwhiteside:1362567028:2013-03-06T18:50:28.536+0000:1362567028:2013-03-06T18:50:28.536+0000:second patch had a bug in it.. this one fixes that
aaronjwhiteside:1362567251:2013-03-06T18:54:11.137+0000:1362567251:2013-03-06T18:54:11.137+0000:You wouldn't happen to know which profiles to enable to run the tests under tests/camel-itest-osgi?

davsclaus:1362568120:2013-03-06T19:08:40.546+0000:1362568120:2013-03-06T19:08:40.546+0000:You can run the tests just by
{code}
mvn clean install
{code}

Or a specific test class with
{code}
mvn clean test -Dtest=FooTest
{code}

The profiles is there to not run the tests on the CI servers as they may hang the CI servers. Though the situation recently with pax-exam 2.6 and karaf 2.3 may improve this.
aaronjwhiteside:1362574254:2013-03-06T20:50:54.363+0000:1362574274:2013-03-06T20:51:14.408+0000:Forth patch, this one gets all the possible setter methods and then tries to inject each one until it succeeds or fails (due to conversion error or one of the setter methods throws an error).

I added a todo comment, because I think we should really be suppressing these errors instead of just failing outright? But currently the existing behavior is preserved and all camel-core unit tests pass.

I've taken a look at OSGiIntegrationTestSupport used in tests/camel-itest-osgi and I can see that we never actually use the real OsgiServiceRegistry the JndiRegistry is always used by default. 

I'll continue to look at adding a real OSGi test, but in the meantime is the latest patch good enough to be applied? 
davsclaus:1362616417:2013-03-07T08:33:37.669+0000:1362616417:2013-03-07T08:33:37.669+0000:camel-ahc uses builder pattern for its configuration so it failed due the code changes. We should allow builder pattern by default when using the set property IMHO. So I am testing with this enabled.
davsclaus:1362624726:2013-03-07T10:52:06.353+0000:1362624726:2013-03-07T10:52:06.353+0000:When using spring (spring-dm) or blueprint in the OSGi tests, then they use an OSGi CamelContext that setup all the registry and whatnot to use the OSGi versions. So eg OSGiRegistry would be used over JndiRegistry etc.

This happens automatic for you.

On the other hand if you create CamelContext manually you would need to use the osgi version of it, and setup all that other stuff manually.

aaronjwhiteside:1362647457:2013-03-07T17:10:57.093+0000:1362647457:2013-03-07T17:10:57.093+0000:Cleaned up EndpointHelper moved all the messy logic back into IntrospectionSupport.setProperty()

All camel-core unit tests pass.
davsclaus:1362654019:2013-03-07T19:00:19.075+0000:1362654019:2013-03-07T19:00:19.075+0000:Thanks applied patch #5 to trunk and 2.10 branch"
0,CAMEL-6129,Bug,Major,"2.9.2, 2.10.3","2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-03-05 17:09:58+00:00,2013-03-12 20:55:09+00:00,"See nabble
http://camel.465427.n5.nabble.com/Prolems-with-parametrized-bean-method-call-via-simple-tp5728319.html",
0,CAMEL-6128,Bug,Major,"2.10.0, 2.10.1, 2.10.2, 2.10.3, 2.10.4",None,"
None
",Resolved,Fixed,"2.10.5, 2.11.0",Willem Jiang,Willem Jiang,0,1,2013-03-05 08:02:56+00:00,2013-03-05 11:50:52+00:00,"When using Get the request object from the CxfPayload Message, we will get this kind of error.


Caused by: javax.xml.bind.UnmarshalException



with linked exception:
[javax.xml.bind.UnmarshalException: Namespace URIs and local names to the unmarshaller needs to be interned.]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.handleStreamException(UnmarshallerImpl.java:425)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:362)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal(UnmarshallerImpl.java:332)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshal(FallbackTypeConverter.java:253)[236:org.apache.camel.camel-jaxb:2.10.0]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.unmarshall(FallbackTypeConverter.java:165)[236:org.apache.camel.camel-jaxb:2.10.0]
        at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:90)[236:org.apache.camel.camel-jaxb:2.10.0]
        ... 48 more
Caused by: javax.xml.bind.UnmarshalException: Namespace URIs and local names to the unmarshaller needs to be interned.
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.handleEvent(UnmarshallingContext.java:642)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:254)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportError(Loader.java:249)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.Loader.reportUnexpectedChildElement(Loader.java:114)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext$DefaultRootLoader.childElement(UnmarshallingContext.java:1049)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext._startElement(UnmarshallingContext.java:478)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallingContext.startElement(UnmarshallingContext.java:459)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.handleStartElement(StAXStreamConnector.java:242)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.StAXStreamConnector.bridge(StAXStreamConnector.java:176)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        at com.sun.xml.bind.v2.runtime.unmarshaller.UnmarshallerImpl.unmarshal0(UnmarshallerImpl.java:360)[158:org.apache.servicemix.bundles.jaxb-impl:2.2.1.1_2]
        ... 52 more",njiang:1362455452:2013-03-05T11:50:52.134+0000:1362455452:2013-03-05T11:50:52.134+0000:Applied patch into trunk and 2.10.x-fixes branch.
0,CAMEL-6127,Bug,Major,2.10.3,"2.9.6, 2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.5, 2.11.0",Claus Ibsen,PhilippJ,0,2,2013-03-04 16:26:52+00:00,2013-03-04 16:44:15+00:00,"We wanted to inject/autowire (with a Spring context.xml) a custom InflightRepository as described here http://camel.apache.org/advanced-configuration-of-camelcontext-using-spring.html
but this is not possible due to an obvious copy-and-past bug in 
org.apache.camel.core.xml.AbstractCamelContextFactoryBean.afterPropertiesSet()


Line 182


InflightRepository inflightRepository = getBeanForType(InflightRepository.class);
        if (delayer != null) 

{
            LOG.info(""Using custom InflightRepository: "" + inflightRepository);
            getContext().setInflightRepository(inflightRepository);
        }



is:
""if (delayer != null)"" 


should be:
""if (inflightRepository != null)""",davsclaus:1362386402:2013-03-04T16:40:02.667+0000:1362386402:2013-03-04T16:40:02.667+0000:Thanks for reporting. Will get this fixed soon.
0,CAMEL-6126,Wish,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Claus Ibsen,0,2,2013-03-04 15:26:20+00:00,2014-01-03 07:25:26+00:00,"In a vanilla Apache Karaf 2.3.1, installing first camel feature. Then you end up at bundle
[  78] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)


Then install camel-cxf feature we end up with a massive new bundles installed:
[ 163] [Active     ] [            ] [       ] [   50] Apache CXF Compatibility Bundle Jar (2.7.3)
[ 164] [Active     ] [Created     ] [       ] [   50] camel-cxf-transport (2.11.0.SNAPSHOT)
[ 165] [Active     ] [Created     ] [       ] [   50] camel-cxf (2.11.0.SNAPSHOT)


eg we jump from bundle 79 to 163 for stuff CXF need.


It would be good some day in the future to allow people to slice and dice CXF to install only what they use/need.","njiang:1388092427:2013-12-27T05:13:47.612+0000:1388092427:2013-12-27T05:13:47.612+0000:We don't need to install the CXF Compatibility Bundle Jar bundle since 2.7.x, I will updated the camel-cxf feature for it shortly.
njiang:1388705126:2014-01-03T07:25:26.222+0000:1388705126:2014-01-03T07:25:26.222+0000:Now we don't install cxf feature by default since camel-2.13.x."
0,CAMEL-6125,Task,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-03-04 13:09:24+00:00,2013-03-07 13:57:49+00:00,"Upgraded to Karaf 2.3.1, and ran the osgi tests in camel-itest-osgi. And the following fails



davsclaus:~/workspace/camel/tests/camel-itest-osgi/target/surefire-reports$ find *.txt | xargs grep FAIL
org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.782 sec <<< FAILURE!
org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheManagerFactoryRefTest)  Time elapsed: 10.19 sec  <<< FAILURE!
org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 9.39 sec <<< FAILURE!
org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheRoutesManagementTest)  Time elapsed: 8.8 sec  <<< FAILURE!
org.apache.camel.itest.osgi.cache.CacheTest.txt:Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 10.348 sec <<< FAILURE!
org.apache.camel.itest.osgi.cache.CacheTest.txt:testCache:org.apache.camel.itest.osgi.cache.CacheTest.testCache:KarafTestContainer{mvn:org.apache.karaf/apache-karaf/2.3.1/tar.gz}(org.apache.camel.itest.osgi.cache.CacheTest)  Time elapsed: 9.579 sec  <<< FAILURE!
org.apache.camel.itest.osgi.jclouds.BlobStoreBlueprintRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 12.413 sec <<< FAILURE!
org.apache.camel.itest.osgi.jclouds.BlobStoreRouteTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 11.859 sec <<< FAILURE!
org.apache.camel.itest.osgi.servlet.ServletComponentTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 18.594 sec <<< FAILURE!
org.apache.camel.itest.osgi.servlet.ServletServicesTest.txt:Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 17.807 sec <<< FAILURE!","davsclaus:1362539078:2013-03-06T11:04:38.340+0000:1362539078:2013-03-06T11:04:38.340+0000:The Cache tests fails due bundle has a missing file that EHCache needs. Logged ticket about this: https://issues.apache.org/jira/browse/SMX4-1395
davsclaus:1362539696:2013-03-06T11:14:56.194+0000:1362539696:2013-03-06T11:14:56.194+0000:I have reverted camel-cache back to ehcache 2.5 and it works now.
davsclaus:1362546036:2013-03-06T13:00:36.381+0000:1362546036:2013-03-06T13:00:36.381+0000:Got the servlet test fixed.
davsclaus:1362547641:2013-03-06T13:27:21.553+0000:1362547641:2013-03-06T13:27:21.553+0000:Logged a ticket about the jclouds tests as thats a bigger problem
https://issues.apache.org/jira/browse/CAMEL-6134
davsclaus:1362635869:2013-03-07T13:57:49.069+0000:1362635869:2013-03-07T13:57:49.069+0000:Have created a separate ticket about the jclouds tests."
0,CAMEL-6124,Bug,Minor,2.11.0,None,"
None
",Resolved,Abandoned,Future,Unassigned,Julian Thiel,0,4,2013-03-04 12:46:50+00:00,2013-08-26 17:41:41+00:00,"Hi,


I'm trying to create an SharePoint 2013 CMIS Endpoint with the following URI:


""cmis://http://ip:port/_vti_bin/cmis/rest?repositoryId=ID&username=USER&password=PW""


When I call ""context.getEndpoint(URI)"" i'm getting the Exception:


Exception in thread ""main"" org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: URI due to: The service method invoked requires an optional capability not supported by the repository.


Before I tried Camel I was using the Apache Chemistry API to connect to the SharePoint Repository and it worked well! If Camel is using the same API why is it not working?


Hope you can fix it!


Kind regards,
Julian Thiel","muellerc:1362420467:2013-03-05T02:07:47.908+0000:1362420467:2013-03-05T02:07:47.908+0000:Camel is using org.apache.chemistry.opencmis:chemistry-opencmis-client-impl:jar:0.8.0.
With version did you tried it?
Can you please share the complete stack trace?
juth:1362443223:2013-03-05T08:27:03.879+0000:1362443223:2013-03-05T08:27:03.879+0000:I've tried it with 0.8.0 and also 0.9.0 beta and i got no problems. For chemistry the url for the connection looked a bit diffrent:

{code}http://ip:port/_vti_bin/cmis/rest/REPOOSITORYID?getRepositoryInfo{code}

But this one is also not working with camel.

Here the stack trace:
{code}
Exception in thread ""main"" org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[cmis://http://ls-sp2013/_vti_bin/cmis/rest?repositoryId=B1E077F6-2439-4BD0-BED2-D946DCF3435C&username=testuser&password=test1234] <<< in route: Route[[From[file:/testfolder/?noop=true]] -> [process[com.le... because of Failed to resolve endpoint: cmis://http://ls-sp2013/_vti_bin/cmis/rest?password=test1234&repositoryId=B1E077F6-2439-4BD0-BED2-D946DCF3435C&username=testuser due to: The service method invoked requires an optional capability not supported by the repository.
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:879)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:172)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:742)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1821)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1601)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1470)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1438)
	at com.legodo.camel.cmis.CamelSharePoint.transfer(CamelSharePoint.java:40)
	at com.legodo.camel.cmis.CamelSharePoint.main(CamelSharePoint.java:16)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cmis://http://ls-sp2013/_vti_bin/cmis/rest?password=test1234&repositoryId=B1E077F6-2439-4BD0-BED2-D946DCF3435C&username=testuser due to: The service method invoked requires an optional capability not supported by the repository.
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:492)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:61)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:459)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:177)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)
	... 9 more
Caused by: org.apache.chemistry.opencmis.commons.exceptions.CmisNotSupportedException: The service method invoked requires an optional capability not supported by the repository.
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.convertStatusCode(AbstractAtomPubService.java:444)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.read(AbstractAtomPubService.java:564)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.AbstractAtomPubService.getRepositoriesInternal(AbstractAtomPubService.java:727)
	at org.apache.chemistry.opencmis.client.bindings.spi.atompub.RepositoryServiceImpl.getRepositoryInfo(RepositoryServiceImpl.java:64)
	at org.apache.chemistry.opencmis.client.bindings.impl.RepositoryServiceImpl.getRepositoryInfo(RepositoryServiceImpl.java:69)
	at org.apache.chemistry.opencmis.client.runtime.SessionImpl.connect(SessionImpl.java:717)
	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.createSession(SessionFactoryImpl.java:90)
	at org.apache.chemistry.opencmis.client.runtime.SessionFactoryImpl.createSession(SessionFactoryImpl.java:64)
	at org.apache.camel.component.cmis.CMISSessionFacade.initSession(CMISSessionFacade.java:66)
	at org.apache.camel.component.cmis.CMISComponent.createEndpoint(CMISComponent.java:35)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:93)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:473)
	... 18 more
{code} 
davsclaus:1363060236:2013-03-12T11:50:36.517+0000:1363060236:2013-03-12T11:50:36.517+0000:Julia, you gotta track down this issue on your end, as you are the one which has access to a MS SharePoint server. I suggest to check what happens at CMISSessionFacade and see what options/configuration camel-cmis is using. I guess there is some option turned on, that MS SharePoint does not support. So maybe they need to be turned off or something.
davsclaus:1363773573:2013-03-20T17:59:33.027+0000:1363773573:2013-03-20T17:59:33.027+0000:Any update on this?
juth:1363827537:2013-03-21T08:58:57.392+0000:1363827537:2013-03-21T08:58:57.392+0000:No sorry. Didn't got the time to try it yet."
0,CAMEL-6123,Bug,Critical,"2.9.5, 2.10.3","2.9.6, 2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.5, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,2,2013-03-04 12:41:33+00:00,2013-03-22 00:33:27+00:00,"When performing an InOut JMS exchange with a certain requestTimeout, if the reply message is received in time, but the following formula stands true: 


T0 + T1 >= T!, where:


T0 = JMS response time
T1 = remaining route processing time following the reply
T! = requestTimeout


Then camel-jms will throw an ExchangeTimedOutException regardless of the fact that the reply was truly received in time.


I'm surprised this bug has gone unnoticed until now, as it's been present since mid-2010.


Example unit test:



    @Test
    public void testTimeoutNotTriggered() throws Exception {
        getMockEndpoint(""mock:exception"").expectedMessageCount(0);
        template.requestBody(""activemq:test"", ""<hello />"");
        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

                onException(ExchangeTimedOutException.class)
                    .handled(true)
                    .to(""mock:exception"");

                from(""activemq:test"")
                    .inOut(""activemq:test?requestTimeout=500"")
                    .delay(constant(1000));
                
                from(""activemq:test"")
                    .log(""test"");
            }
        };
    }","raulvk:1362372151:2013-03-04T12:42:31.517+0000:1362372151:2013-03-04T12:42:31.517+0000:This happens because the entry is removed from the CorrelationTimeoutMap too late, after the subsequent processing has been invoked and returns.
davsclaus:1363742729:2013-03-20T09:25:29.341+0000:1363742729:2013-03-20T09:25:29.341+0000:Any status on this. As we are closing in on a 2.11.0 release.
raulvk:1363883607:2013-03-22T00:33:27.484+0000:1363883607:2013-03-22T00:33:27.484+0000:Fixed in trunk, 2.10.x and 2.9.x branches."
0,CAMEL-6122,Improvement,Major,None,2.11.0,"

jackson2

",Resolved,Fixed,2.11.0,Claus Ibsen,David J. M. Karlsen,0,3,2013-03-04 09:54:59+00:00,2013-03-05 09:13:21+00:00,"Upgrade to jackson2.
Note: Jackson2 has changed GAV.
GroupId is now com.fasterxml.jackson","davidkarlsen@gmail.com:1362363647:2013-03-04T10:20:47.480+0000:1362363647:2013-03-04T10:20:47.480+0000:Thread on mailinglist: http://camel.465427.n5.nabble.com/jackson2-td5727987.html.
Patch: https://github.com/davidkarlsen/camel/commit/f7d8576409bd3dfa511e029508f65ca1c007d2db

davsclaus:1362444865:2013-03-05T08:54:25.410+0000:1362444865:2013-03-05T08:54:25.410+0000:Thanks.

I had to upgrade camel-mongodb as well as it uses camel-jackson. And also the osgi features.xml file."
0,CAMEL-6121,Improvement,Major,2.10.3,"2.9.7, 2.10.5, 2.11.0","
None
",Closed,Fixed,"2.9.7, 2.10.5, 2.11.0",Christian Müller,Anurag Gupta,0,2,2013-03-03 19:33:59+00:00,2013-03-17 18:22:06+00:00,http://camel.465427.n5.nabble.com/camel-smpp-optional-param-issue-td5728376.html .,"anuragg:1362544585:2013-03-06T12:36:25.405+0000:1362544585:2013-03-06T12:36:25.405+0000:Attached the patch which includes support for optional params and modified the test case as well. The optional params have to be set in exchange headers and value of which should be OptionalParam(jsmpp object) . 
muellerc:1362605388:2013-03-07T05:29:48.799+0000:1362605388:2013-03-07T05:29:48.799+0000:With this patch, the user has to build the OptionalParameter array which is send to the SMSC.
With CAMEL-6116, we will return a Map<String, Object> to the user which represents the send optional parameters from the SMSC. I don't like this asymmetry. I also think the user should not have to know the JSMPP specific objects.
I'm working on a solution where the user should provide a Map<String, Object> with the optional parameters.

muellerc:1363508274:2013-03-17T16:17:54.588+0000:1363508274:2013-03-17T16:17:54.588+0000:[~anuragg]: Could you please verify whether this fix resolves your issue!?
anuragg:1363515726:2013-03-17T18:22:06.301+0000:1363515726:2013-03-17T18:22:06.301+0000:Thanks Christian. I'll verify soon and let you know."
0,CAMEL-6120,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,2,2013-03-02 17:45:09+00:00,2013-03-11 07:30:50+00:00,"See
https://github.com/scranton/example-security-camel-ssh/blob/master/src/main/resources/META-INF/spring/camel-context.xml


Having to create a custom key factory to use a classloader is too complicated.


We should use the code from util package in camel-core ResourceHelper which we use in other components to load resource files from classpath / file etc.","davsclaus:1362217551:2013-03-02T17:45:51.603+0000:1362217551:2013-03-02T17:45:51.603+0000:See nabble
http://camel.465427.n5.nabble.com/camel-ssh-SSH-keys-authentication-tp5727572.html
scranton:1362426009:2013-03-05T03:40:09.289+0000:1362426009:2013-03-05T03:40:09.289+0000:Attached patch that adds certResource parameter (deprecating certFilename) that uses ResourceHelper to load key from file, classpath or http. I also update the camel-ssh example, and add a camel-ssh-security example using certResource...

I also pushed updates to https://github.com/scranton/camel/tree/CAMEL-6120 - I can submit github pull request if easier...
davsclaus:1362442394:2013-03-05T08:13:14.913+0000:1362442394:2013-03-05T08:13:14.913+0000:Thanks Scott. I have applied the patch to trunk.

I think with the BC dependency we need to add that to the features.xml file, so camel-ssh can be installed in Karaf out of the box.

Also can you update the documentation for the camel-ssh component.

And it would be excellent if you added a page about these 2 examples at
http://camel.apache.org/examples

And explained the example and highlighted interesting parts of the code of the example, as we do with the other examples we have. Also maybe add some notes about you should have Apache Karaf running when staring the example so it can connect to it (eg if you run using mvn camel:run).
davsclaus:1362654561:2013-03-07T19:09:21.844+0000:1362654561:2013-03-07T19:09:21.844+0000:Scott, when you have a bit time it would be good to get the docs updated so we have this ready for Camel 2.11
scranton:1362899729:2013-03-10T15:15:29.240+0000:1362899729:2013-03-10T15:15:29.240+0000:Doc updated to provide more information on
* new certResource option that uses ResourceHelper
* deprecated certFilename
* details on use of SSH component as a producer endpoint
* details on configuring username/password and certificate authentication
davsclaus:1362958250:2013-03-11T07:30:50.641+0000:1362958250:2013-03-11T07:30:50.641+0000:Thanks Scott"
0,CAMEL-6119,Improvement,Minor,None,2.11.0,"

aggregator

",Resolved,Fixed,2.11.0,Benjamin P. O'Day,Benjamin P. O'Day,0,1,2013-03-02 15:39:20+00:00,2013-03-03 05:28:39+00:00,"add support in the Aggregator EIP for checking for a new header (AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE) to trigger flushing of all groups and be inclusive of the current message...


per http://camel.465427.n5.nabble.com/aggregator-force-completion-with-header-td5728368.html",boday:1362259719:2013-03-03T05:28:39.645+0000:1362259719:2013-03-03T05:28:39.645+0000:r1452002
0,CAMEL-6118,New Feature,Major,None,2.11.1,"
None
",Resolved,Invalid,2.11.1,Raúl Kripalani,Raúl Kripalani,0,3,2013-03-01 16:08:25+00:00,2013-03-05 18:42:00+00:00,"I can see something like this being very useful in many cases:



from(""foo:bar"")
   .filter(and(xpath(""//weather = 'cloudy'""), simple(""${property.skyColor} != 'dark grey'"")))
   .setBody(constant(""It's gonna rain...""))
.end();","davsclaus:1362126018:2013-03-01T16:20:18.487+0000:1362126018:2013-03-01T16:20:18.487+0000:You can do this using the PredicateBuilder where you can combine your predicates.

raulvk:1362127516:2013-03-01T16:45:16.613+0000:1362127516:2013-03-01T16:45:16.613+0000:Sweet! I wondered how come no one had requested this before, as it's quite a life-saver. This feature needs better documentation - I'll take care of that.
davsclaus:1362127811:2013-03-01T16:50:11.759+0000:1362127811:2013-03-01T16:50:11.759+0000:I did a blog many years ago
http://www.davsclaus.com/2009/02/apache-camel-and-using-compound.html

And the predicate page have some examples
http://camel.apache.org/predicate.html
preben:1362138250:2013-03-01T19:44:10.487+0000:1362138250:2013-03-01T19:44:10.487+0000:Real exiting feature that deserves more promotion.
Is this possible in blueprint/spring xml too where you can mix eg. simple and xpath expressions ?

raulvk:1362372523:2013-03-04T12:48:43.317+0000:1362372523:2013-03-04T12:48:43.317+0000:[~pax], agree that it's gone unnoticed for a long time. Buried in a doc page that's not very popular, as when one is browsing references, they tend to jump from [Architecture|http://camel.apache.org/architecture.html] straight to the expression language of choice. 

I'll add a notice to all Expression Language pages to advertise this powerful feature.

It's not available for Blueprint/Spring AFAIK.
preben:1362480120:2013-03-05T18:42:00.832+0000:1362480120:2013-03-05T18:42:00.832+0000:[~raulvk] This deserves to be supported in Spring/Blueprint especially since you in 2.11 can externalize scripts and load it from classpath, file or http. 
Would be powerfull to use compound expressions loaded from eg. the filesystem and be able to change them on the fly via osgi config admin, or be able to clear/reload the expression via jmx as you can with eg. xslt cache.
Wouldn't it be worth to reopen the issue for that ?"
0,CAMEL-6117,Improvement,Major,None,"2.9.7, 2.10.5, 2.11.0","

empty
service_type
smpp

",Closed,Fixed,"2.9.7, 2.10.5, 2.11.0",Christian Müller,Ioannis Alexandrakis,0,2,2013-03-01 15:20:55+00:00,2013-03-27 16:01:56+00:00,"Hello all,


At some point I had to connect to an SMSC, which did not accept any service_type. It just wanted it to be empty. Otherwise I was getting ""invalid service type"" error. I was not able to set it as 'empty', so I commented out the default ""CMT"" service type value and worked like a charm. If I wanted to set it, I could do it in the uri or the exchange's header. But I wasn't able to put empty in any of those ways.


Whoever has it on default would have to explicitly set it though (either on the uri, or on the exchange header)","muellerc:1364360387:2013-03-27T12:59:47.593+0000:1364360387:2013-03-27T12:59:47.593+0000:We cannot change the default behavior without breaking backwards compatibility what we do not want.

I suggest to add an option serviceType which can be empty. Will this work for you?
muellerc:1364360697:2013-03-27T13:04:57.860+0000:1364360697:2013-03-27T13:04:57.860+0000:And you are sure you mean the service type and not the system type?
Only the system type is used to connect to the SMSC, not the service type. Can you please check this.
i.alexandrakis:1364360700:2013-03-27T13:05:00.539+0000:1364360700:2013-03-27T13:05:00.539+0000:Hmmm, I figured as much, about the backwards compatibility. Adding the option for the serviceType to be empty is more or less the same, so it's OK.
i.alexandrakis:1364361446:2013-03-27T13:17:26.663+0000:1364361446:2013-03-27T13:17:26.663+0000:I meant the serviceType. I do not have the wireshark dump anymore, but I am pretty sure it was sent to the SMSC (if I remember correctly in the login-handshake operation), and it (the SMSC) was complaining about an 'invalid service type'. I tried them all (CMT, CPT, etc, the 'CMT' was supposed to work since I wanted to send/receive sms), and as soon as I emptied it (in the patch I modified the serviceType = """"), it worked.
muellerc:1364369880:2013-03-27T15:38:00.683+0000:1364369880:2013-03-27T15:38:00.683+0000:Hmmm, there is not patch...
However, I 'fixed' this for both options to be safe...
i.alexandrakis:1364370149:2013-03-27T15:42:29.998+0000:1364370149:2013-03-27T15:42:29.998+0000:Ooops sorry, I guess I forgot it. It was just the line in SmppConfiguration.java
(I guess that, for backwards compatibility as you specified, the following, which I resorted to, is not acceptable. However, I just did the following, so attaching the patch right now would be useless..)

-
private String serviceType = ""CMT"";

+
private String serviceType = """";"
0,CAMEL-6116,Improvement,Major,None,"2.9.7, 2.10.5, 2.11.0","

optional
parameters

",Closed,Fixed,"2.9.7, 2.10.5, 2.11.0",Christian Müller,Ioannis Alexandrakis,0,3,2013-03-01 15:15:26+00:00,2013-03-08 04:33:14+00:00,"Hello all,


I am currently working on a project requiring the use of camel-smpp. I stumbled upon some problems integrating with the customer's SMSC, and I modified the code of camel-smpp in order to fit my needs (just adding some functionality though, not removing any).


More specifically, for submitting a new message, the delivery receipt held the corresponding submit_sm id in the optional parameters (as receipted_message_id). With the current trunk code, I did not get the optional parameters of the delivery receipt, so I could not match the delivery receipt to the outgoing sms. As a solution I just looped all the optional parameters and put them into a map as a header (and instead of checking each optional parameter name, I just put whatever jsmpp was sending back, so if someone wants to put other optional parameters to jsmpp too, they would simply automatically be populated back in camel-smpp.)


Please find the patch attached","muellerc:1362134591:2013-03-01T18:43:11.008+0000:1362134591:2013-03-01T18:43:11.008+0000:Thanks for reporting Ioannis. I have to modify your patch to pass our check style checks: http://camel.apache.org/building.html

I also miss the unit test ;-)
Will work on this now...
i.alexandrakis:1362198667:2013-03-02T12:31:07.505+0000:1362199111:2013-03-02T12:38:31.081+0000:Yep sorry 'bout that, I didn't run the checkstyle (thanx for the info)... I attached a second patch. (No unit test though yet...)
muellerc:1362605031:2013-03-07T05:23:51.446+0000:1362605031:2013-03-07T05:23:51.446+0000:I'm wondering why we should not return the optional parameter values as Byte, Short, Integer if the type is org.jsmpp.bean.OptionalParameter.Byte, org.jsmpp.bean.OptionalParameter.Short or org.jsmpp.bean.OptionalParameter.Int.
For other parameter we already return Integer, Byte, ...

I trending to change this...
i.alexandrakis:1362619491:2013-03-07T09:24:51.410+0000:1362619491:2013-03-07T09:24:51.410+0000:This would be a nice solution, and you may change it so, if you like (or I could do it, I don't know how this works).

However, my main thinking was that even though camel-smpp returns Byte, Integer etc, it does this as a separate header in the SmppMessage. So whoever uses those headers, already knows which types they are (e.g. in the documentation the CamelSmppSourceAddrTon is byte and so on). In the optional parameters' case, I created a Map with arbitrary names inside (whatever jsmpp spits out, so whoever wanted to use them would have to know the jsmpp return types for those optional parameters beforehand). So, for simplicity (and testing, to overview them in the log as strings and not have to modify them), I just created them as a Map<String, String>.
muellerc:1362688359:2013-03-08T04:32:39.320+0000:1362688359:2013-03-08T04:32:39.320+0000:Slightly different patch is applied to trunk, camel-2.10.x and camel-2.9.x.
WIKI is updated.
Camel 2.11.0 release notes is also updated."
0,CAMEL-6115,New Feature,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Guillaume Nodet,Guillaume Nodet,0,1,2013-03-01 08:02:17+00:00,2013-05-17 12:18:01+00:00,"When deploying Camel routes in a container, it would be very handy if the container could intercept route creation.


See the following branch
https://github.com/gnodet/camel/commits/smx5",gnodet:1368764281:2013-05-17T12:18:01.103+0000:1368764281:2013-05-17T12:18:01.103+0000:Fixed in https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=5270d5c1
0,CAMEL-6114,Improvement,Trivial,None,,"
None
",Closed,Fixed,None,Unassigned,Laurynas Lubys,0,2,2013-02-28 19:02:31+00:00,2013-03-01 00:39:03+00:00,"http://camel.apache.org/validation.html lists an option ""failIfNoBody"". It should read ""failOnNullBody"". ""failIfNoBody"" option fails when creating endpoint. I've added a test case demonstrating the usage",muellerc:1362069457:2013-03-01T00:37:37.945+0000:1362069457:2013-03-01T00:37:37.945+0000:Thanks for reporting Laurynas. I updated the WIKI page. It should be online in a few hours.
0,CAMEL-6113,Improvement,Major,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,David J. M. Karlsen,0,1,2013-02-28 14:14:05+00:00,2013-05-26 12:35:21+00:00,"The Spring 3.1.x series won't get any more fixes, maybe it's time to move on to  latest 3.2.x?
CAMEL-4778 is somewhat related.",
0,CAMEL-6112,Task,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-02-28 10:40:49+00:00,2013-03-04 14:08:27+00:00,"There is some new releases of Aries Blueprint et all.


We should align and use the same versions as Apache Karaf 2.3.1 is being released and uses.","davsclaus:1362374333:2013-03-04T13:18:53.255+0000:1362374333:2013-03-04T13:18:53.255+0000:karaf@root> list -t 0 | grep -i aries
[   7] [Active     ] [Created     ] [   20] Apache Aries Blueprint Core (1.1.0)
[   8] [Active     ] [Created     ] [   20] Apache Aries Blueprint CM (1.0.1)
[  10] [Active     ] [            ] [   20] Apache Aries Proxy Service (1.0.1)
[  11] [Active     ] [            ] [   20] Apache Aries Util (1.1.0)
[  12] [Active     ] [            ] [   20] Apache Aries Proxy API (1.0.0)
[  13] [Active     ] [            ] [   20] Apache Aries Blueprint API (1.0.0)
[  23] [Active     ] [            ] [   30] Apache Aries JMX API (1.1.0)
[  27] [Active     ] [            ] [   30] Apache Aries JMX Core (1.1.1)
[  35] [Active     ] [            ] [   30] Apache Aries JMX Blueprint Core (1.1.0)
[  38] [Active     ] [            ] [   30] Apache Aries JMX Blueprint API (1.1.0)"
0,CAMEL-6111,Bug,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-02-28 08:46:58+00:00,2013-02-28 10:38:46+00:00,"Argh Aries Blueprint may parse the same blueprint xml file concurrently. Assume its the influence of pojosr that may trigger this. As running Camel on Karaf has not seen started the same XML file twice.


See nabble
http://camel.465427.n5.nabble.com/camel-blueprint-test-issues-tp5728260.html",davsclaus:1362019126:2013-02-28T10:38:46.854+0000:1362019126:2013-02-28T10:38:46.854+0000:This issue is only on 2.11
0,CAMEL-6110,Improvement,Minor,2.10.4,None,"
None
",Closed,Fixed,"2.9.6, 2.10.5, 2.11.0",Christian Müller,Christian Müller,0,1,2013-02-28 05:11:11+00:00,2013-02-28 05:25:12+00:00,No Desc,
0,CAMEL-6109,Bug,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Matt Pavlovich,0,2,2013-02-27 22:23:10+00:00,2013-02-28 14:38:02+00:00,"Example route:


<doTry>
   <to ... >
</doTry>


<doCatch>
    <exception>java.lang.Exception</exception>
    <to uri=""log.... ""/>
</doCatch>


The <to uri=""log...""/> line will execute every time, regardless if there is an exception or not.


I believe the preferred behavior would be that the route should fails to load/validate.  Alternatively, the <to uri=""log.."" /> should not run when there is not an exception.


Thanks!","davsclaus:1362000187:2013-02-28T05:23:07.586+0000:1362000187:2013-02-28T05:23:07.586+0000:The doCatch should be *inside* the doTry, as documented in its documentation: http://camel.apache.org/try-catch-finally.html
davsclaus:1362004345:2013-02-28T06:32:25.876+0000:1362004345:2013-02-28T06:32:25.876+0000:On 2nd though lets add validation to the Camel model so we can detect the mis configuration of having doCatch outside doTry etc. Then we can tell the end user about this mis configuration so they can fix it.
mattrpav:1362033482:2013-02-28T14:38:02.121+0000:1362033482:2013-02-28T14:38:02.121+0000:Thanks, Claus. The syntax check to alert users to the incorrect configuration was what I was hoping for. 

It can be a little confusing since for users coming from a plain Java coding background. When programming plain Java code the try {} closes before the catch {} opens.

Thanks!"
0,CAMEL-6108,Sub-task,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Chris Geer,3,7,2013-02-27 21:46:47+00:00,2023-07-24 15:12:54+00:00,We love contributions as you know. May you find time to work on it?,"sully6768:1362126016:2013-03-01T16:20:16.852+0000:1362126016:2013-03-01T16:20:16.852+0000:Hello,

Is this for Camel SJMS or Camel JMS?  I totally agree that SJMS must add JTA support.  Given that Camel JMS is a Spring API I would think that it should maintain support for the native Spring Transaction API.

Thoughts?

Scott ES
davsclaus:1362126379:2013-03-01T16:26:19.042+0000:1362126379:2013-03-01T16:26:19.042+0000:Yes Scott I agree. camel-jms should IMHO be *as-is* using the Spring API and what it offers.
And spring TX can already support JTA / XA and local jms TX as well.

So this does not make sense for me to change camel-jms.

What is needed though is those related issues to add TX to OSGi blueprint that uses the JTA API.

For camel-sjms it makes sense to support the JTA API.
geerzo:1362144763:2013-03-01T21:32:43.332+0000:1362144763:2013-03-01T21:32:43.332+0000:I guess my main driver for wanting to refactor the current JMS component is that the ActiveMQ component actually extends from it which means the ActiveMQ component is tied to Spring as well. I'm ok changing to using the SJMS component instead of the ActiveMQ component as long as I can get similar capabilities.

Is there any benefit to have an ActiveMQ specific component that extends from SJMS?
sully6768:1362391789:2013-03-04T18:09:49.319+0000:1362391789:2013-03-04T18:09:49.319+0000:Hi Chris,

There would be benefit to having the Camel ActiveMQ component extend SJMS but that would be a longer term plan.  I expect SJMS to be volatile for several releases given one, this is its initial release and I expect to see bug and enhancements as it becomes more mainstream and two, there are still a number of improvements that need to happen (JTA Support, externalize the JMS Container, etc).

If you need the ActiveMQ benefit and XA or JTA your only current options are Camel ActiveMQ.

Best Regards,
Scott ES
raulvk:1362393562:2013-03-04T18:39:22.068+0000:1362393562:2013-03-04T18:39:22.068+0000:Camel JMS is a true veteran and one of the most widely used components alongside camel-cxf, camel-http and the ones embedded in camel-core. Given its installation base, I don't think it's wise to refactor it into a whole different technology base.

That said, I'd expect us (the Camel team) to encourage camel-sjms as the first choice for JMS integration as soon as it's been more extensively tested in the trenches, as Scott ES explains.

And perhaps do a few renames once that happens:

- camel-jms => camel-springjms
- camel-sjms => camel-jms

But it'd have to happen on a major release, so it's a very long-term vision.
geerzo:1362394473:2013-03-04T18:54:33.219+0000:1362394473:2013-03-04T18:54:33.219+0000:Scott, I understand the plan now so I removed my idea from the 3.0 ideas page. Maybe we rename this JIRA to ""Support XA Transactions in SJMS""?

Raul, 3.0 would be the perfect place to do that change. I agree, renaming would make things clearer.
sully6768:1362395233:2013-03-04T19:07:13.058+0000:1362395233:2013-03-04T19:07:13.058+0000:That makes good sense Chris.  I have asked for a camel-sjms component to be added to JIRA Camel also so it can be more easily tracked.

Thanks Chris.
hadrian:1362395553:2013-03-04T19:12:33.331+0000:1362395553:2013-03-04T19:12:33.331+0000:Not really relevant, but there you go. Component created for camel-sjms.
muellerc:1362414005:2013-03-05T00:20:05.836+0000:1362414005:2013-03-05T00:20:05.836+0000:My impression, after talking with Chris in Portland, was to get completely ride of Spring TX in Camel. Also by using the ""transacted"" DSL stuff. There are many good reasons for this (some people don't want to use Spring, some people looking for a small memory/deplyment footprint, ...).

Of course, this would be another JIRA. I'm wondering whether I misunderstood it?
geerzo:1362432763:2013-03-05T05:32:43.622+0000:1362432763:2013-03-05T05:32:43.622+0000:Christian, you are correct, my preference would be to be able to run camel with full transaction support and not need to have any spring jars in my classpath. First step for me is JMS since that is where I have my most obvious spring dependency. At the moment I am able to utilize XA transactions in camel, started from OSGI components, without the ""transacted"" DSL stuff using just the blueprint transaction attributes in the XML. Eventually I will have to use more from camel directly though. 
mattrpav:1363682298:2013-03-19T16:38:18.904+0000:1363682298:2013-03-19T16:38:18.904+0000:I agree, the sjms component can't have any feature-loss if it will become the 'jms' component for 3.0. Additionally, I agree that a spring-less solution would be ideal.

I'm tied up on projects, but please update this ticket when you'd like more testing to occur. I can definitely help then.



davsclaus:1662079550:2022-09-02T08:45:50.048+0000:1662079550:2022-09-02T08:45:50.048+0000:There is camel-jta for XA/TX support "
0,CAMEL-6076,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Christian Müller,Christian Müller,1,1,2013-02-12 18:19:35+00:00,2019-03-23 09:06:20+00:00,"In favor of the xxx option, we should remove the duplicated xxxRef options from our components. This make our code and documentation more lean. We should deprecate it as soon as possible and remove it in Camel 3.0.","muellerc:1369473843:2013-05-25T17:24:03.218+0000:1369473843:2013-05-25T17:24:03.218+0000:The following components still use the xxxRef syntax and needs to be updated:
- GAuth
- GHttp
- GTask
- GMail
- Jetty
- JMS
- Mongodb
- Netty
- Servlet
- Websocket"
0,CAMEL-6075,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Ioannis Canellos,Ioannis Canellos,0,1,2013-02-12 17:25:36+00:00,2013-02-12 17:35:56+00:00,No Desc,
0,CAMEL-6074,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-02-12 14:57:02+00:00,2013-02-13 06:58:50+00:00,We use activemq for testing with JMS.,
0,CAMEL-6073,Bug,Major,"2.9.5, 2.10.3",None,"
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,1,2013-02-12 14:23:36+00:00,2013-02-12 17:05:48+00:00,See http://camel.465427.n5.nabble.com/VM-Queues-Disconnected-after-Karaf-Bundle-Update-tt5727205.html.,"raulvk:1360659948:2013-02-12T17:05:48.604+0000:1360659948:2013-02-12T17:05:48.604+0000:Committed in r1445263 (trunk), r1445265 (2.10.x branch), 1445266 (2.9.x branch)."
0,CAMEL-6072,Bug,Major,"2.9.5, 2.10.3",None,"
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,1,2013-02-12 14:21:17+00:00,2013-02-12 17:06:24+00:00,"ServiceSupport#shutdown should return immediately to avoid executing service shutdown logic twice, which could easily cause problems in the state of components, endpoints, consumers, etc.","raulvk:1360659984:2013-02-12T17:06:24.367+0000:1360659984:2013-02-12T17:06:24.367+0000:Committed in r1445263 (trunk), r1445265 (2.10.x branch), 1445266 (2.9.x branch)."
0,CAMEL-6071,Improvement,Major,None,Future,"
None
",Resolved,Duplicate,Future,Claus Ibsen,Claus Ibsen,0,2,2013-02-12 13:28:19+00:00,2013-02-13 07:03:02+00:00,"The ScheduledPollConsumer is a poller that is scheduled. You configure it to poll every X interval.


We should allow the scheduler to backoff if there has been no messages after a while. This avoids overloading the remote system being polled. 


For example a FTP server being constantly polled for new files. Maybe during the night there is no files being transffered. 


Yes you can use route policy to turn routes on|off.


But maybe if we just allow to easily configure this scheduler poller to backoff if no messages. And we would need an upper limit as well to avoid the delay being too large.


As its using the JDK scheduled thread pool. We can not use uneven backoff. But possible just allow it to skip the poll if no messages last time. And then only do every 2nd poll, evert 3rd pool, every 4h pool etc. Until a X max limit.


And if there is a message, then the backoff will reset itself.",preben:1360652475:2013-02-12T15:01:15.474+0000:1360652475:2013-02-12T15:01:15.474+0000:Already created as https://issues.apache.org/jira/browse/CAMEL-4876
0,CAMEL-6070,New Feature,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,1,2,2013-02-12 13:16:18+00:00,2015-02-26 15:11:12+00:00,"For example when you do testing with advice-with, blueprint property placeholders and other kind of options, then today you can configure this by overriding and implementing a number of methods from the CamelTestSupport class.


We should offer this kind of configuration using annotations as well. This may be a nicer way of doing this in the long run.","JKarasek:1424934672:2015-02-26T15:11:12.248+0000:1424934672:2015-02-26T15:11:12.248+0000:I'm going to work on this one. More info here:
http://camel.465427.n5.nabble.com/Would-like-to-work-on-CAMEL-6070-td5763192.html"
0,CAMEL-6069,Bug,Minor,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Anders Holmgren,0,3,2013-02-12 04:19:55+00:00,2015-02-18 11:14:26+00:00,"We recently upgraded to 2.10.x and discovered that the file poller no longer works on our NAS. We have hit similar issues with other open source libraries in the past.


The problem occurs when MarkerFileExclusiveReadLockStrategy.acquireExclusiveReadLock is called and tries to create the new file. This actually works but also results in a Permission denied IOException (strange but true). 


A simple fix for this is to change the acquireExclusiveReadLock method as follows. 



    public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations,
                                            GenericFile<File> file, Exchange exchange) throws Exception {
        String lockFileName = getLockFileName(file);
        LOG.trace(""Locking the file: {} using the lock file name: {}"", file, lockFileName);

        // create a plain file as marker filer for locking (do not use FileLock)
        File lock = new File(lockFileName);
        boolean acquired = false;
        try
        {
            acquired = lock.createNewFile();
        }
        catch (IOException e)
        {
            if (lock.exists())
            {
                acquired = true;
            }
            else
            {
                throw e;
            }
        }

        return acquired;
    }




Note the same problem occurring with Spring Batch can be found here","davsclaus:1360630029:2013-02-12T08:47:09.476+0000:1360630029:2013-02-12T08:47:09.476+0000:Thanks for reporting.
andersmholmgren:1360783785:2013-02-14T03:29:45.330+0000:1360783785:2013-02-14T03:29:45.330+0000:thanks Claus
barisacar:1424229266:2015-02-18T11:14:26.947+0000:1424229266:2015-02-18T11:14:26.947+0000:[~andersmholmgren] - are you _certain_ that it was the thread/process that raised the exception that created the file, and not some other process?

We are having problems with the current implementation as per your proposal, as it introduces race conditions into the locking mechanism, and allows multiple threads or processes to lock the same file at once.
See http://camel.465427.n5.nabble.com/FileUtil-createNewFile-race-condition-issue-td5762853.html#a5762897"
0,CAMEL-6068,Bug,Major,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Akitoshi Yoshida,0,2,2013-02-11 20:53:33+00:00,2013-02-12 09:04:12+00:00,"We observed a deadlock situation that seems to be caused by the change that came in with CAMEL-5712, which changed the way how CamelBlueprintContext is started to solve another issue.


The current code listens to the service registered event for org.osgi....BlueprintContainer (supposedly for its associated BP container) and decides to start itself if not started. From the description of the ticket, this change was intended to make sure the starting of the context occurs after its BP container is registered. 


In that case, should it be checking whether the received event belongs to the same bundle? This checking is missing in the current code and consequently, it may wrongly react to the event from another bundle's container registration event. When this happens under some specific timing situation, it may also lead to a deadlock.


So, should we be checking the event source in CamelBlueprintContext's serviceChanged method?


Regards, aki


Stack trace from 2.10.3
========================================================================
Name: Blueprint Extender: 3
State: BLOCKED on java.lang.Object@9064b42 owned by: Blueprint Extender: 2
Total blocked: 13  Total waited: 38


Stack trace:
 org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:212)
org.apache.aries.blueprint.container.BlueprintRepository.createInstance(BlueprintRepository.java:198)
org.apache.aries.blueprint.container.BlueprintRepository.create(BlueprintRepository.java:137)
org.apache.aries.blueprint.container.BlueprintContainerImpl.getComponentInstance(BlueprintContainerImpl.java:709)
org.apache.camel.blueprint.BlueprintContainerRegistry.lookup(BlueprintContainerRegistry.java:41)
org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:68)
org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)
org.apache.camel.blueprint.BlueprintComponentResolver.resolveComponent(BlueprintComponentResolver.java:39)
org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:314)



locked java.util.HashMap@1660de94org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:456)
org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)
org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:186)
org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)
org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)
org.apache.camel.model.FromDefinition.resolveEndpoint(FromDefinition.java:72)
org.apache.camel.impl.DefaultRouteContext.getEndpoint(DefaultRouteContext.java:90)
org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:851)
org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)
org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722)
org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789)
org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575)
org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
locked org.apache.camel.blueprint.BlueprintCamelContext@5011bafaorg.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:127)
org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:96)
org.eclipse.osgi.internal.serviceregistry.FilteredServiceListener.serviceChanged(FilteredServiceListener.java:104)
org.eclipse.osgi.framework.internal.core.BundleContextImpl.dispatchEvent(BundleContextImpl.java:861)
org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:230)
org.eclipse.osgi.framework.eventmgr.ListenerQueue.dispatchEventSynchronous(ListenerQueue.java:148)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEventPrivileged(ServiceRegistry.java:819)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.publishServiceEvent(ServiceRegistry.java:771)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistrationImpl.register(ServiceRegistrationImpl.java:130)
org.eclipse.osgi.internal.serviceregistry.ServiceRegistry.registerService(ServiceRegistry.java:214)
org.eclipse.osgi.framework.internal.core.BundleContextImpl.registerService(BundleContextImpl.java:433)
org.apache.aries.blueprint.container.BlueprintContainerImpl.registerService(BlueprintContainerImpl.java:410)
org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:346)
org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
locked java.util.concurrent.atomic.AtomicBoolean@3cb3ada
locked java.util.concurrent.atomic.AtomicBoolean@31b4d206
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
java.util.concurrent.FutureTask.run(FutureTask.java:138)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
java.lang.Thread.run(Thread.java:722)



========================================================================
Name: Blueprint Extender: 2
State: BLOCKED on
org.apache.camel.blueprint.BlueprintCamelContext@5011bafa owned by: Blueprint Extender: 3
Total blocked: 24  Total waited: 58


Stack trace:
 org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:1053)
org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
org.apache.camel.impl.DefaultComponent.setProperties(DefaultComponent.java:222)
org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:64)
org.apache.camel.component.file.GenericFileComponent.createEndpoint(GenericFileComponent.java:36)
org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:461)
org.apache.camel.core.xml.AbstractCamelEndpointFactoryBean.getObject(AbstractCamelEndpointFactoryBean.java:46)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
java.lang.reflect.Method.invoke(Method.java:597)
org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:226)
org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:824)
org.apache.aries.blueprint.container.BeanRecipe.getInstance(BeanRecipe.java:234)
org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:706)
org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:64)



locked java.lang.Object@9064b42
org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:219)
locked java.lang.Object@9064b42
org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:147)
org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:631)
org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:337)
org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:230)
locked java.util.concurrent.atomic.AtomicBoolean@53b00227
locked java.util.concurrent.atomic.AtomicBoolean@5648a168
java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)
java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
java.util.concurrent.FutureTask.run(FutureTask.java:138)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)
java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)
java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
java.lang.Thread.run(Thread.java:722)",davsclaus:1360631052:2013-02-12T09:04:12.459+0000:1360631052:2013-02-12T09:04:12.459+0000:Thanks for the patch.
0,CAMEL-6067,New Feature,Minor,"2.10.2, 2.10.3",2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Vishal,1,3,2013-02-11 19:31:24+00:00,2013-08-25 09:56:54+00:00,"Although there is an option for defining stateful jobs in the quartz component via stateful=true, the jobs created are eventually deleted when Camel shutsdown. 
Please see,
http://camel.465427.n5.nabble.com/Quartz-triggers-being-deleted-when-shutting-down-Camel-tt5727257.html
An option is needed to instruct Camel to not remove stateful jobs when coming down.","saltnlight5:1374585384:2013-07-23T21:16:24.463+0000:1374585384:2013-07-23T21:16:24.463+0000:Hi,

I would like help provide a patch for this feature.

To add this feature, we need to change the behavior when existing trigger is detected when route is started. Currently it throws an exception unless Quartz is configured in clustered mode. So this needs to be changed to update existing trigger instead (just like clustered mode). Would anyone oppose to this?

Also as Vishal pointed out, there is no good reason to explicitly set startTime() when endpoint is started for the trigger. It should be removed and let Quartz calculate it. If we don't set one, Quartz will set to current date as default anyway. Any repercussions for removing it that you can think of?

Zemian Deng
saltnlight5:1374671765:2013-07-24T21:16:05.223+0000:1374671765:2013-07-24T21:16:05.223+0000:Here is a patch for this feature. Default is ""deleteJob=true"" 

Few notes on the changes.

1) Per my comment above, I have to remove the check on duplicate name when adding trigger to scheduler and NOT throw exception. (I fixed the QuartzNameCollisionTest as result of this.) This will now rely on user to ensure to give UNIQUE trigger name per endpoint, or they could be picking up an existing trigger for multiple endpoints!

2) If user decided to use ""deleteJob=false"", and then later changed the trigger name, then there is no way to delete the old trigger from the scheduler! You need to ensure they toggle the flag and have it removed before changing trigger name.

3) I have removed setStartTime(new Date()) and set similar behavior of trigger's MISFIRE_INSTRUCTION code instead. This allow the user to pick up existing trigger and reuse their misfire behavior if they like.

I have tested this path to some extends with a OracleXE database. Let me know what you think.

Zemian
davsclaus:1375856858:2013-08-07T14:27:38.254+0000:1375856858:2013-08-07T14:27:38.254+0000:Ad 3)
The code comment explains why. You most likely not want misfires to fire if you have stopped and started a server etc. Or at least you should be able to easily dictate what to do. 

So if you have a stateful job you may want to keep the trigger in the scheduler store, and still stop / start servers in a controlled fashion, and not have misfires trigger if it was started again. 

Not sure if there should be another option to fast-forward to now on startup, so ppl can turn this on|off according to their needs.
saltnlight5:1376055970:2013-08-09T21:46:10.486+0000:1376055970:2013-08-09T21:46:10.486+0000:Claus,

The term ""stateful"" in Quartz does not mean retain trigger after stop scheduler. It simply will re-persist the job data map between job run, and not execute same job instance concurrently. If you change this usage/meaning in camel, it will be very confusing for users.

As far as misfire concern, each trigger type in Quartz has their own misfire mode, and they do just that: control whether to fast forward to now or even just ignore it etc. If user wants different misfire policy than the one we set then he/she can pre-create the trigger first and use the same name in the camel URI.

To me, it doesn't make sense to reset/call startTime() if you were to retrieve existing trigger.


davsclaus:1377392589:2013-08-25T09:03:09.475+0000:1377392589:2013-08-25T09:03:09.475+0000:Adding options: deleteJob, pauseJob so ppl can decide what to do when stopping. The deleteJob is the default behavior."
0,CAMEL-6066,Task,Major,None,None,"
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-02-11 14:59:56+00:00,2013-02-14 15:35:32+00:00,"Just to not forget


[15:53:55] <dkulp> cibsen: ping
[15:58:54] hadrian (~hadrian@cpe-107-015-170-016.nc.res.rr.com) joined the channel.
[15:59:23] <cibsen> dkulp pong
[15:59:43] <dkulp> I acidentally deleted the commit email where you reverted the axiom version.....
[15:59:46] <dkulp> That shouldn't be needed.
[16:00:09] <cibsen> you mean the downgrade?
[16:00:20] <dkulp> The abdera bundles embed the axiom stuff internally, so the Axiom bundles shouldn't be loaded into OSGi at all.
[16:00:23] <cibsen> you cannot install camel-atom / camel-rss in karaf 2.3.0
[16:00:34] <cibsen> ah so we should remove it from the features.xml file?
[16:00:40] <dkulp> Right.",davsclaus:1360566011:2013-02-11T15:00:11.637+0000:1360566011:2013-02-11T15:00:11.637+0000:This may apply to 2.10 and 2.9 branches as well.
0,CAMEL-6065,Improvement,Major,2.11.0,Future,"
None
",Resolved,Fixed,Future,Unassigned,Harald Wellmann,0,4,2013-02-11 13:41:45+00:00,2021-04-19 19:09:32+00:00,"When tunneling a bean invocation through a JMS queue using SJMS, inOut() is not sufficient to specify the exchange pattern. ""exchangePattern=InOut"" must be added explicitly to the endpoint URI.","hwellmann:1360561824:2013-02-11T13:50:24.294+0000:1360561824:2013-02-11T13:50:24.294+0000:The attached patch contains a passing test SyncBeanInOutIT and a failing test SyncBeanInOutWithoutExchangePatternIT.

The failing test contains a route definition

from(""direct:calculatorProxy"").inOut(""sjms:calculator-queue"");

The passing test only differs by

from(""direct:calculatorProxy"").inOut(""sjms:calculator-queue?exchangePattern=InOut"");
earcam:1360567713:2013-02-11T15:28:33.603+0000:1360567713:2013-02-11T15:28:33.603+0000:
Had a similar problem - the reply is sent but isn't unmarshalled correctly (class cast on BeanInvocation cannot be cast to Xyz)
sully6768:1360580496:2013-02-11T19:01:36.369+0000:1360580496:2013-02-11T19:01:36.369+0000:Thanks for the patch Harald.  I will take a look at it.

Best Regards,
Scott ES
davsclaus:1424085963:2015-02-16T19:26:03.772+0000:1424085963:2015-02-16T19:26:03.772+0000:Yeah its because camel-sjms producer is determined at route startup time if its an InOnly or InOut.

If you use camel-jms (the other one) then it determines this based on the exchange and MEP at runtime.
davsclaus:1424086608:2015-02-16T19:36:48.427+0000:1424086608:2015-02-16T19:36:48.427+0000:Well basically sjms is too tight coupled with the endpoints in either InOnly or InOut mode.

This would require a redesign on camel-sjms to support a more elastic mode at runtime. Pushing this for future work.
davsclaus:1424086752:2015-02-16T19:39:12.505+0000:1424086752:2015-02-16T19:39:12.505+0000:Thanks for the tests cases. They work out of the box with camel-jms
davsclaus:1618830572:2021-04-19T19:09:32.555+0000:1618830572:2021-04-19T19:09:32.555+0000:sjms has been overhauled"
0,CAMEL-6064,Bug,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Scott Cranton,0,2,2013-02-11 13:00:42+00:00,2013-02-12 09:10:47+00:00,"As scenario for Wire Tap onPrepare is deep cloning the message body, I'd expect original instance to stay with main route, and deep copy to go to specified Wire Tap endpoint. This would require onPrepare to process the new Exchange.","scranton:1360559033:2013-02-11T13:03:53.023+0000:1360559033:2013-02-11T13:03:53.023+0000:Fix and updated Unit Test in Github.com pull request - https://github.com/apache/camel/pull/12
davsclaus:1360631447:2013-02-12T09:10:47.845+0000:1360631447:2013-02-12T09:10:47.845+0000:Thanks Scott for the patch."
0,CAMEL-6063,Improvement,Minor,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Thomas Vautrin,0,2,2013-02-11 10:59:45+00:00,2013-02-12 09:22:48+00:00,"In a route with a component which create a MimeMessage and set it in body, the mail producer ignores the type of body and create his own MimeMessage from body content and headers.


The patch add the control of type and disable the override of MailProducer with his own message.


The MimeMessage contained in body is sent directly.


Patch contains test and fix",davsclaus:1360632168:2013-02-12T09:22:48.102+0000:1360632168:2013-02-12T09:22:48.102+0000:Thanks for the patch.
0,CAMEL-6062,Improvement,Minor,2.10.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Myriam Khairallah,0,2,2013-02-11 10:39:12+00:00,2015-08-12 12:29:30+00:00,"Hello,


I've got following camel context definition:



<camelContext id=""myContext"" xmlns=""http://camel.apache.org/schema/spring"" trace=""true"">
        <camel:properties>
                <property key=""http.proxyScheme"" value=""{{http.proxyScheme}}""/>
                <property key=""http.proxyHost"" value=""{{http.proxyHost}}""/>
                <property key=""http.proxyPort"" value=""8080""/>
        </camel:properties>

        <propertyPlaceholder id=""properties"" location=""classpath:net.atos.acdwb.core.cfg""/>

        <routeBuilder ref=""wallboardRoute"" />
</camelContext>




Here the placeholders as defined in net.atos.acdwb.core.cfg:



# ...
http.proxyScheme=http
http.proxyHost=myHost
# ...




This file is available in the classpath as other spring placeholders are detected within the context file. Even so, I get following exception when attempting to run my unittest:


(...)
Caused by: java.lang.IllegalStateException: Scheme 'http.proxyscheme' not registered.
        at org.apache.http.conn.scheme.SchemeRegistry.getScheme(SchemeRegistry.java:71)
        at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:127)
(...)


According to Claus, placeholders are not supported on these Camel properties. 


I thing it would be very helpful, though.


Thanks and regards,
Myriam",davsclaus:1375856974:2013-08-07T14:29:34.184+0000:1375856974:2013-08-07T14:29:34.184+0000:This is a little more tricky to do than first thought.
0,CAMEL-6061,New Feature,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Daniel Gredler,0,3,2013-02-10 21:37:25+00:00,2013-02-16 20:01:34+00:00,"The existing ZipDataFormat and zip() DSL elements actually implement ""deflate"" (de)compression, and Camel currently has no real support for zip (de)compression.


The attached patch leaves the existing ZipDataFormat and corresponding DSL elements as-is (so as not to affect backwards compatibility), but adds a new ZipDataFormat2 class, which supports the actual zip format.


Once this patch is applied, the scope of CAMEL-6049 will only be the non-backwards-compatible changes: renaming the ZipDataFormat and ZipDataFormat2 classes, modifying the DSL, etc.","sdanig:1360669576:2013-02-12T19:46:16.949+0000:1360669576:2013-02-12T19:46:16.949+0000:Attaching a second patch that changes the data format name to ZipFileDataFormat, and uses the exchange ID as the Zip file entry name if no file name is specified in the incoming headers (instead of just ""file"").
sdanig:1360752740:2013-02-13T18:52:20.451+0000:1360752740:2013-02-13T18:52:20.451+0000:Attaching version 3 of the patch, which adds Java and XML DSL elements for the new ZipFileDataFormat.
sdanig:1360927986:2013-02-15T19:33:06.271+0000:1360927986:2013-02-15T19:33:06.271+0000:Patch the fourth, wherein the new data format is moved to a new camel-zipfile component and everyone lives happily ever after.
davsclaus:1360980448:2013-02-16T10:07:28.668+0000:1360980448:2013-02-16T10:07:28.668+0000:Thanks for the patch.

I polished it, and let it generate the file name as the file component would do.

We need some documentation at
http://camel.apache.org/data-format.html

Do you want to help with that?
sdanig:1361015086:2013-02-16T19:44:46.895+0000:1361015086:2013-02-16T19:44:46.895+0000:Thanks, Claus! I've created a new Confluence page for this data format, and added a link to the new page in the data format list. Have a look and let me know if you see something missing.
hekonsek:1361016094:2013-02-16T20:01:34.740+0000:1361016094:2013-02-16T20:01:34.740+0000:Thanks for the documentation page Daniel. I think we're done with the component then. Thank you for your contribution."
0,CAMEL-6060,Bug,Blocker,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,2,2013-02-10 06:18:16+00:00,2014-05-08 12:19:21+00:00,"Running Camel 2.11 in Karaf 2.3.0, can not resolve languages when using spring-dm apps.


[  78] [Active     ] [Created     ] [       ] [   50] camel-blueprint (2.11.0.SNAPSHOT)
[  79] [Active     ] [            ] [       ] [   50] mvel2 (2.1.3.Final)
[  80] [Active     ] [            ] [       ] [   50] camel-mvel (2.11.0.SNAPSHOT)
[  81] [Active     ] [            ] [       ] [   80] A Camel Spring-DM Route (1.0.0)
Exception in thread ""SpringOsgiExtenderThread-2"" org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Transform[mvel

{request.body.substring(0, 4)}] <<< in route: Route[[From
[timer:foo?period=5000]
] -> [SetBody[bean{helloBe... because of No language could be found for: mvel


	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1328)


	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)


	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:282)


	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)


	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)


	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)


	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)


	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)


	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)


	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)


	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)


	at java.lang.Thread.run(Thread.java:680)


Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Transform[mvel{request.body.substring(0, 4)}

] <<< in route: Route[[From[timer:foo?period=5000]] -> [SetBody[bean{helloBe... because of No language could be found for: mvel
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:879)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:172)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:742)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1821)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1601)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1470)
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1438)
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)
	... 10 more
Caused by: org.apache.camel.NoSuchLanguageException: No language could be found for: mvel
	at org.apache.camel.core.osgi.OsgiLanguageResolver.resolveLanguage(OsgiLanguageResolver.java:63)
	at org.apache.camel.impl.DefaultCamelContext.resolveLanguage(DefaultCamelContext.java:1009)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:177)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:168)
	at org.apache.camel.model.TransformDefinition.createProcessor(TransformDefinition.java:59)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:459)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:177)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)
	... 20 more","davsclaus:1360448952:2013-02-10T06:29:12.571+0000:1360448952:2013-02-10T06:29:12.571+0000:Okay camel-mvel does not export the language as a service in OSGi.
Its just empty for camel-mvel


It works for groovy etc
camel-groovy (88) provides:
---------------------------
language = groovy
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 232

davsclaus:1360449603:2013-02-10T06:40:03.335+0000:1360449603:2013-02-10T06:40:03.335+0000:It works for Camel 2.10.3 in Karaf 2.2.10:

[  75] [Active     ] [            ] [       ] [   50] Apache ServiceMix :: Bundles :: mvel2 (2.0.18.3)
[  76] [Active     ] [            ] [       ] [   50] camel-mvel (2.10.3)
karaf@root> ls 76
You are about to access system bundle 76.  Do you wish to continue (yes/no): 
camel-mvel (76) provides:
-------------------------
language = mvel
objectClass = org.apache.camel.spi.LanguageResolver
service.id = 212
davsclaus:1360449740:2013-02-10T06:42:20.148+0000:1360449740:2013-02-10T06:42:20.148+0000:And also for Camel 2.10.3 in Karaf 2.3.0
davsclaus:1360451628:2013-02-10T07:13:48.441+0000:1360451628:2013-02-10T07:13:48.441+0000:This is also a problem for blueprint. The language cannot be resolved due its not registered in the osgi service registry.
davsclaus:1360547811:2013-02-11T09:56:51.442+0000:1360547811:2013-02-11T09:56:51.442+0000:Okay I think I found the issue.

camel-mvel JAR has flawed MANIFEST.MF generated by the tooling.

This is the packages it imports:
{code}
Import-Package: org.apache.camel;version=""[2.11,2.12)"",org.apache.camel.
 language;version=""[2.11,2.12)"",org.apache.camel.support;version=""[2.11,
 2.12)"",org.mvel2;version=""[2.1,3)""
{code}

So we import these packages from Camel
- org.apache.camel
- org.apache.camel.language
- org.apache.camel.support

But we need to import the spi package, which is in fact used by the MvelLanguage.java file.
See the import in the top of its source code

{code}
package org.apache.camel.language.mvel;

import org.apache.camel.Expression;
import org.apache.camel.Predicate;
import org.apache.camel.spi.Language;
import org.apache.camel.support.LanguageSupport;

/**
 * An <a href=""http://mvel.codehaus.org/"">MVEL</a> {@link Language} plugin
 * 
 * @version 
 */
public class MvelLanguage extends LanguageSupport {

    public Predicate createPredicate(String expression) {
        expression = loadResource(expression);
        return new MvelExpression(this, expression, Boolean.class);
    }

    public Expression createExpression(String expression) {
        expression = loadResource(expression);
        return new MvelExpression(this, expression, Object.class);
    }

}
{code}

davsclaus:1360548132:2013-02-11T10:02:12.676+0000:1360548132:2013-02-11T10:02:12.676+0000:And this is the generated MANIFEST.MF file from Camel 2.10.3 release.
Notice it has import of ""org.apache.camel.spi""

{code}
Import-Package: org.apache.camel;version=""[2.10,2.11)"",org.apache.camel.
 language;version=""[2.10,2.11)"",org.apache.camel.spi;version=""[2.10,2.11
 )"",org.apache.camel.support;version=""[2.10,2.11)"",org.mvel2;version=""[2
 .0,3)""
Karaf-Info: Camel;camel-mvel=2.10.3
{code}
davsclaus:1360556939:2013-02-11T12:28:59.918+0000:1360556939:2013-02-11T12:28:59.918+0000:I had to force adding the spi package, and not the MANIFEST.MF has that package included out of the box.
cp1:1399522761:2014-05-08T12:19:21.543+0000:1399522761:2014-05-08T12:19:21.543+0000:Probably the same error for jsonpath language implementation:

{code}
2014-05-08 16:08:21,179 | ERROR | ExtenderThread-8 | ContextLoaderListener            | 141 - org.springframework.osgi.extender - 1.2.1 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=cbonds-adapter, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route update-route at: >>> Choice[[When[jsonpath{$.items} -> [Log[Json ${body}], process[ref:updateProcessor], To[mock:parsed]]], When[jsonpath{$.error} -> [Log[Json Error ${body}], Stop]]] Otherwise[[Log[Json Other ${body}], Stop]]] <<< in route: Route(update-route)[[From[direct:update-table]] -> [OnExcept... because of No language could be found for: jsonpath
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:122)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:316)[144:org.apache.camel.camel-spring:2.13.0]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:96)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:334)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:948)[127:org.springframework.context:3.2.4.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[140:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)[141:org.springframework.osgi.extender:1.2.1]
	at java.lang.Thread.run(Thread.java:745)[:1.7.0_55]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route update-route at: >>> Choice[[When[jsonpath{$.items} -> [Log[Json ${body}], process[ref:updateProcessor], To[mock:parsed]]], When[jsonpath{$.error} -> [Log[Json Error ${body}], Stop]]] Otherwise[[Log[Json Other ${body}], Stop]]] <<< in route: Route(update-route)[[From[direct:update-table]] -> [OnExcept... because of No language could be found for: jsonpath
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:910)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:778)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2041)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1791)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1665)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1633)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:254)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)[144:org.apache.camel.camel-spring:2.13.0]
	... 10 more
Caused by: org.apache.camel.NoSuchLanguageException: No language could be found for: jsonpath
	at org.apache.camel.core.osgi.OsgiLanguageResolver.resolveLanguage(OsgiLanguageResolver.java:63)[144:org.apache.camel.camel-spring:2.13.0]
	at org.apache.camel.impl.DefaultCamelContext.resolveLanguage(DefaultCamelContext.java:1135)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:154)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:143)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ExpressionNode.createPredicate(ExpressionNode.java:120)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:110)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:77)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:31)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.createProcessor(ProcessorDefinition.java:459)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ChoiceDefinition.createProcessor(ChoiceDefinition.java:135)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:499)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)[136:org.apache.camel.camel-core:2.13.0]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)[136:org.apache.camel.camel-core:2.13.0]
	... 19 more
{code}"
0,CAMEL-6059,Bug,Minor,2.11.0,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-02-09 14:24:25+00:00,2013-02-09 14:32:27+00:00,"karaf@root> features:install camel-rss
Error executing command: Manifest not present in the first entry of the zip mvn:org.apache.ws.commons.axiom/axiom-impl/1.2.14


I think we got a JAR that is flawed 1.2.14",davsclaus:1360391547:2013-02-09T14:32:27.476+0000:1360391547:2013-02-09T14:32:27.476+0000:Downgraded to the 1.2.12 that works in OSGi.
0,CAMEL-6058,New Feature,Major,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,1,6,2013-02-09 10:38:45+00:00,2018-05-12 10:12:07+00:00,"The ftp consumer is currently single threaded, and will download files in sequence.


We should add functionality to allow concurrent downloads. Its a bit hard to do as we would need a new ftp client per download. And that client needs to login, and traverse to the dir where the file is, and download the file.


And then we need to have that all work together, and report errors etc.","snurmine:1526091127:2018-05-12T10:12:07.137+0000:1526091127:2018-05-12T10:12:07.137+0000:Some thoughts:

GenericFileOperations could support concurrency. For example changeCurrentDirectory is not safe for concurrent usage. Most operations depend on which directory operations instance is currently. Providing absolute path as parameter could be more natural. GenericFileOperations#retrieveFile could return some kind Future for example. If GenericFileOperations can't be changed, then another interface for concurrent operations could be made. 

Polling could be parallel to downloading files. But polling should wait until there is enough capacity. This could be implemented by blocking queue. Otherwise component might queue too many files.

Another issue is ordering of files. For example if the order is alphabetical and folder has file ""a.txt"" and ""b.txt"", then exchange having file ""a.txt"" must complete before exchange having file ""b.txt"". Probably waiting on completion of ""parent"" exchange (in this case ""b.txt"" waits for ""a.txt"") before handling exchange forward after retrieve. This would allow downloading to start for multiple files parallel and actual processing be ordered.

 

 "
0,CAMEL-6057,Improvement,Minor,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Vitalii Tymchyshyn,0,4,2013-02-08 20:51:18+00:00,2013-02-10 16:52:32+00:00,"trunk components/camel-spring/src/main/java/org/apache/camel/spring/spi/ApplicationContextRegistry.java
has next method:
   @Override
    public <T> Map<String, T> findByTypeWithName(Class<T> type) 

{
        return applicationContext.getBeansOfType(type);
    }


but this method does not look into application context parent contexts.
org.springframework.beans.factory.BeanFactoryUtils#beansOfTypeIncludingAncestors should be used instead.","davsclaus:1360383516:2013-02-09T12:18:36.772+0000:1360383516:2013-02-09T12:18:36.772+0000:When do you use parent context in Spring? Do you have use-cases using that?
davidkarlsen@gmail.com:1360393123:2013-02-09T14:58:43.715+0000:1360393170:2013-02-09T14:59:30.377+0000:The typical usecase is to have the servicelayer and infrastructure beans in a shared parent context, and having the web/view stuff (e.g. controllers, viewresolvers) as child contexts of this (in a WebApplicationContext).
msvab:1360398549:2013-02-09T16:29:09.420+0000:1360398549:2013-02-09T16:29:09.420+0000:When you have multiple Spring DispatcherServlets within a single webapp and each of these servlets have their own app contexts, you might want to share beans between them. So you add a another context with these shared beans, which is the parent of each of the servlet contexts.
tivv:1360403293:2013-02-09T17:48:13.341+0000:1360403293:2013-02-09T17:48:13.341+0000:As for me, I am using static parent context in tests to provide test beans that are created in test code (e.g. mocks).

I've found this bug, when camel-jpa could not find my test entity factory. Fortunately, I could add explicit jpa component bean with property filled.
tivv:1360406077:2013-02-09T18:34:37.492+0000:1360406077:2013-02-09T18:34:37.492+0000:Fix is in pull request https://github.com/apache/camel/pull/10
davsclaus:1360486352:2013-02-10T16:52:32.661+0000:1360486352:2013-02-10T16:52:32.661+0000:Thanks for the patch."
0,CAMEL-6056,Bug,Major,"2.10.3, 2.10.4, 2.11.0","2.10.5, 2.11.0","

file
ftp
move

",Resolved,Fixed,"2.10.5, 2.11.0",Claus Ibsen,Christian Schaefer,8,7,2013-02-08 12:23:28+00:00,2013-03-25 16:54:41+00:00,"Moving files stored on a ftp server to another directory specified by the move parameter is not working in camel versions 2.10.3, 2.10.4-SNAPSHOT and 2.11-SNAPSHOT.
(The ftp user got write permission.)
Whereas the file is moved as expected when using version 2.10.2


The stacktrace I got when executing the test on camel version 2.10.3:



11:04:56,822 WARN  [org.apache.camel.component.file.GenericFileOnCompletion] (Camel (camel-1) thread #1 - ftp://myftp.com) Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - File operation failed: 550 Failed to change directory.
 Cannot change directory to: . Code: 550]: org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 550 Failed to change directory.
 Cannot change directory to: . Code: 550
	at org.apache.camel.component.file.remote.FtpOperations.doChangeDirectory(FtpOperations.java:704) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.FtpOperations.changeCurrentDirectory(FtpOperations.java:660) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.FtpOperations.buildDirectory(FtpOperations.java:284) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:100) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy.commit(GenericFileRenameProcessStrategy.java:86) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.processStrategyCommit(GenericFileOnCompletion.java:134) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.onCompletion(GenericFileOnCompletion.java:82) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileOnCompletion.onComplete(GenericFileOnCompletion.java:53) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:55) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:226) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.doneUow(UnitOfWorkProcessor.java:199) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.processSync(UnitOfWorkProcessor.java:139) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:115) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:336) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:92) [camel-ftp-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:189) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:155) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92) [camel-core-2.10.4-SNAPSHOT.jar:2.10.4-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:439) [rt.jar:1.6.0_37]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317) [rt.jar:1.6.0_37]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180) [rt.jar:1.6.0_37]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204) [rt.jar:1.6.0_37]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [rt.jar:1.6.0_37]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [rt.jar:1.6.0_37]
	at java.lang.Thread.run(Thread.java:662) [rt.jar:1.6.0_37]


The anonymized test case:



    @Test
    public void testFTPMove() throws Exception{
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""ftp://user@ftpserver.com:21"" +
                        ""/folder/subfolder/"" +
                        ""?password=mypassword"" +
                        ""&ftpClient.dataTimeout=30000"" +
                        ""&binary=true"" +
                        ""&move=.success"" +
                        ""&antInclude=file*.txt"")
                .log(""${body}"");
            }
        });
        Thread.sleep(3000);
        context.stop();
    }","csch:1360298725:2013-02-08T12:45:25.093+0000:1360298798:2013-02-08T12:46:38.558+0000:CAMEL-5989 could be related to this Issue, whereas in CAMEL-5989 it worked with 2.10.4-SNAPSHOT (referring to comments) which is not the case in this issue.
supbrah:1363259049:2013-03-14T19:04:09.550+0000:1363259049:2013-03-14T19:04:09.550+0000:Any ETA on this? Really hampering my development.
mukraker:1363259658:2013-03-14T19:14:18.620+0000:1363259658:2013-03-14T19:14:18.620+0000:I cannot move forward with the time-critical work I need to accomplish without a fix for this issue. Hope it gets resolved soon.
rlu:1363259959:2013-03-14T19:19:19.663+0000:1363259959:2013-03-14T19:19:19.663+0000:Patch for wrong separator handling when client and server are running on different os
rlu:1363260532:2013-03-14T19:28:52.784+0000:1363260532:2013-03-14T19:28:52.784+0000:There are 2 discussions in camel-user mailing list referring to this issue:
 * Files cannot be moved on FTP
 * camel-ftp 2.10.4 fails to connect on windows
davsclaus:1363313286:2013-03-15T10:08:06.371+0000:1363313286:2013-03-15T10:08:06.371+0000:The patch breaks unit tests on Windows when applied to the trunk. 
Its generally best if you would run the unit tests of the component before submitting patches.
davsclaus:1363315953:2013-03-15T10:52:33.842+0000:1363315953:2013-03-15T10:52:33.842+0000:Okay I think I got that fixed as well for all the unit test failures on Windows.
davsclaus:1363399607:2013-03-16T10:06:47.625+0000:1363399607:2013-03-16T10:06:47.625+0000:Thanks for the patches et all. The codebase has been a mix with this patch and backporting the code to what we used in Camel 2.10.2 to have a working solution.

It would be good if people could give the SNAPSHOT of the upcoming 2.10 or 2.11 releases at test spin in your environment to see if it works for you now.
rlu:1363656304:2013-03-19T09:25:04.915+0000:1363668715:2013-03-19T12:51:55.076+0000:i have tested 2.10.5-SNAPSHOT and 2.11-SNAPSHOT on windows client against RHEL FTP server. The exception is gone, but files are not moved.

Working with windows client and ftp server still works as expected.
rlu:1363754722:2013-03-20T12:45:22.793+0000:1364201681:2013-03-25T16:54:41.444+0000:in my opinion the issue is _not_ fixed for 2.11.0
Tests using: camel-ftp-2.11-20130320.060217-416 NOK
             camel-ftp-2.10.5-20130315.195808-8 OK
0jeff0:1363761543:2013-03-20T14:39:03.672+0000:1363761543:2013-03-20T14:39:03.672+0000:Same problem with sftp 
fbalicchia:1363763324:2013-03-20T15:08:44.268+0000:1363763324:2013-03-20T15:08:44.268+0000:summarizing file is not move in the following env
with both ftp and ftps

* client windows -> RHEL FTP server   KO
* client windows -> Apache Ftp (Linux e windows)   OK

* client unixLike -> RHEL FTP server   Ok
* client unixLike -> Apache Ftp (Linux e windows) Ok

Is it correct ?
davsclaus:1363766530:2013-03-20T16:02:10.332+0000:1363766530:2013-03-20T16:02:10.332+0000:I have not been able to reproduce any kind of problem. 

For Camel 2.11 I have added a new camel-example-ftp that can be used to test this in the future as well.

I have an Windows XP box with a FileZilla FTP server, and I can upload and download files from my osx laptop without problems.
I have tried with both 2.10.2 and 2.11-SNAPSHOT.

Though I am adding an extra check in the codebase for that double slash that was reported initially in this ticket.
davsclaus:1363766852:2013-03-20T16:07:32.694+0000:1363766852:2013-03-20T16:07:32.694+0000:I have committed a fix on 2.11 and 2.10 branch for the double slash issue. Fell free to give that a test spin.
0jeff0:1363836783:2013-03-21T11:33:03.930+0000:1363836832:2013-03-21T11:33:52.813+0000:Hey all ! 

I have made a test with the camel-ftp-2.11-20130320.060217-416.jar;
My client    : Windows 7 ( JRE jdk1.7.0_10)
My FTPServer : Solaris( SunOS 5.10 via /usr/lib/ssh/sftp-server)

It works fine only with double quote :

from(""sftp://but@XXX.XXX.XXX.XXX//tmp/JFL/?password=secret"")
   .log(""File=>${file:name}"")
.end();

With no need to &separator=UNIX&stepwise=false

JF


rlu:1364201538:2013-03-25T16:52:18.600+0000:1364201538:2013-03-25T16:52:18.600+0000:i have tested it with camel-2.10.5-20130315.195808-8.jar and it work as expected. Thanks!

    client windows -> RHEL FTP server OK
    client windows -> Apache Ftp (windows) OK
"
0,CAMEL-6055,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Ioannis Canellos,Ioannis Canellos,0,1,2013-02-08 12:10:14+00:00,2013-02-08 14:35:04+00:00,No Desc,
0,CAMEL-6054,New Feature,Major,2.10.3,"2.10.4, 2.11.0","

patch

",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Thomas Vautrin,0,2,2013-02-08 10:57:49+00:00,2013-02-12 12:53:35+00:00,"The transactions are not started when the seda consumer is used.


If the messages are stored in MapStore, seda consumer doesn't wait the end of transaction to remove data. It's a problem if the server crashes because data are lost.


The patch allows to resolve this problem because the message in mapstore will be removed only when the transaction will be finished.","tvautrin:1360292326:2013-02-08T10:58:46.608+0000:1360292840:2013-02-08T11:07:20.587+0000:Here the patch to fix/improve for seda consumer :)
davsclaus:1360383781:2013-02-09T12:23:01.293+0000:1360383781:2013-02-09T12:23:01.293+0000:Thomas, do you have an unit test to go with the patch?

Also i wonder if there is other hazelcast types that SEDA that can benefit from TX support.
Maybe also people should be allowed to configure transaction on|off.
tvautrin:1360385008:2013-02-09T12:43:28.993+0000:1360385008:2013-02-09T12:43:28.993+0000:Claus, no test is provided with the patch because the validation of the feature ""transaction"" is heavy (embeded database, change hazelcast default configuration to add MapStore,... ).

Concerning other hazelcast types, the SEDA system is so different from the others (No listeners & operations associated) that I am not sure that is relevant.

I will looking for if I can find others improvements

davsclaus:1360544085:2013-02-11T08:54:45.793+0000:1360544085:2013-02-11T08:54:45.793+0000:Okay sounds good. I still think we should have an option to turn transaction on|off.
tvautrin:1360545772:2013-02-11T09:22:52.591+0000:1360547523:2013-02-11T09:52:03.114+0000:Claus,

I updated the patch with the ""transactional"" attribut to enable or not the transaction. (Disable by default)
davsclaus:1360633885:2013-02-12T09:51:25.911+0000:1360633885:2013-02-12T09:51:25.911+0000:Thanks for the patch.

I renamed the option to transacted. This is the name we use in other components.
I updated the docs as well, and added a little unit test, though no rollback test etc. But you can see the begin/commits from TRACE logging.
tvautrin:1360634542:2013-02-12T10:02:22.509+0000:1360634542:2013-02-12T10:02:22.509+0000:Nice,

I can't wait that version 2.11 be released to get this :)"
0,CAMEL-6053,New Feature,Major,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-02-08 10:54:09+00:00,2013-02-08 14:57:43+00:00,"When using camel-test-blueprint, you may use the config admin to refer to properties to be used.


We should allow end users from the unit test class to override these properties so they can use alternative values for unit testing.","davsclaus:1360301610:2013-02-08T13:33:30.606+0000:1360301610:2013-02-08T13:33:30.606+0000:Okay stuff in the code base, need to update the docs with examples.
davsclaus:1360306663:2013-02-08T14:57:43.090+0000:1360306663:2013-02-08T14:57:43.090+0000:Added extensive docs to the using property placeholder wiki page"
0,CAMEL-6052,Improvement,Minor,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Łukasz Dywicki,0,2,2013-02-08 10:45:30+00:00,2013-02-09 12:43:50+00:00,New releases of jython contains necessary META-INF entries thus com.sun.script bridge is not needed.,"ldywicki:1360291650:2013-02-08T10:47:30.647+0000:1360291650:2013-02-08T10:47:30.647+0000:https://github.com/apache/camel/pull/9
davsclaus:1360385030:2013-02-09T12:43:50.655+0000:1360385030:2013-02-09T12:43:50.655+0000:Thanks for the patch."
0,CAMEL-6051,Improvement,Minor,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-02-07 18:28:52+00:00,2013-02-07 18:32:35+00:00,"See nabble
http://camel.465427.n5.nabble.com/convertBodyTo-object-array-tp5727124.html


This allows to convert body to in XML DSL to Object[] etc.",
0,CAMEL-6050,Task,Minor,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Babak Vahdat,Babak Vahdat,0,1,2013-02-07 16:29:55+00:00,2013-02-07 16:33:41+00:00,No Desc,
0,CAMEL-6049,Improvement,Major,2.10.3,,"
None
",Resolved,Not A Problem,None,Onder Sezgin,Daniel Gredler,0,2,2013-02-07 16:24:15+00:00,2017-07-10 06:03:58+00:00,"The existing ZipDataFormat and .zip( ) DSL are misnamed, and actually use deflate compression, causing confusion among users [1, 2].


Release 3.0 would be a good chance to (a) rename these classes and methods to reflect reality, and to (b) add a different set of zip classes and DSL elements that actually perform zip (de)compression.


[1] http://markmail.org/thread/b6b6wibxpsqwwysy
[2] http://hillert.blogspot.com/2009/10/camellos-iii-zipping-files-with-apache.html",onders:1499637838:2017-07-10T06:03:58.892+0000:1499637838:2017-07-10T06:03:58.892+0000:I think this enhancement is already done. Marking.
0,CAMEL-6048,Bug,Minor,None,None,"

xml
xmljson

",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Arne M. Størksen,0,2,2013-02-07 15:54:01+00:00,2013-02-07 18:05:46+00:00,"An XML-file with an attribute called type will not get converted to JSON, even if the TypeHintsEnum.NO is used. The problem is that the XMLSerializer in json-lib has typeHintsCompatibility=true as default. It should be explicitly set to false along with typeHintsEnabled.",davsclaus:1360231546:2013-02-07T18:05:46.754+0000:1360231546:2013-02-07T18:05:46.754+0000:Thanks for the patch.
0,CAMEL-6047,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,3,2013-02-07 14:35:59+00:00,2013-02-28 05:40:53+00:00,"This component
http://camel.apache.org/validation.html


Will validate the message body by default.
It would be nice if you can refer to a message header to validate instead.



.to(""validator:myschema.xsd?headerName=myData"")




For example a new option named headerName to refer to a header.","laurynasl:1361109474:2013-02-17T21:57:54.928+0000:1361109474:2013-02-17T21:57:54.928+0000:Hello,
I'm attaching the patch to allow the validation of xml in headers. 

You will notice that I added two parameters to the validator component: ""headerName"" -- the name of the header to validate and ""failOnNullHeader"" -- i added this option separately to avoid confusion that would arise when validating a header and specifying ""failOnNullBody"". The correct way forward would be to merge these two together, but that is probably not possible because of backwards compatibility.
davsclaus:1361271125:2013-02-19T18:52:05.330+0000:1361271125:2013-02-19T18:52:05.330+0000:Laurynas, thanks for the patch.

Good idea about the new option names to keep it similar to the body.
davsclaus:1361273897:2013-02-19T19:38:17.255+0000:1361273897:2013-02-19T19:38:17.255+0000:Applied the patch to trunk.


davsclaus:1361273945:2013-02-19T19:39:05.731+0000:1361273945:2013-02-19T19:39:05.731+0000:Do you want to help with updating the docs?
http://camel.apache.org/validation

Some notes about how to edit (requires an ICLA on file though)
http://camel.apache.org/how-do-i-edit-the-website.html
laurynasl:1361327829:2013-02-20T10:37:09.947+0000:1361327829:2013-02-20T10:37:09.947+0000:I would like to work on the docs, though I haven't sent an ICLA yet, so I can't really do it. 
I intend to fax the ICLA later today or tomorrow.
muellerc:1361361676:2013-02-20T20:01:16.186+0000:1361361676:2013-02-20T20:01:16.186+0000:Thanks for your contribution Laurynas!
I don't think we need the ""failOnNullHeader"" option. With a filter or content based router can do it already (throw an exception or do not validate the header if it's null).
davsclaus:1362001253:2013-02-28T05:40:53.198+0000:1362001253:2013-02-28T05:40:53.198+0000:Added a little to the docs. Fell free to improve."
0,CAMEL-6046,Bug,Major,2.8.1,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Jaakko Salmela,0,2,2013-02-07 14:14:01+00:00,2013-02-07 15:17:25+00:00,"Forcing idempotent=false doesn't seem to work with ftp-endpoint



<from uri=""sftp://user@server.aalto.fi//payments?password=*****&amp;connectTimeout=20000&amp;stepwise=false&amp;idempotent=false&amp;noop=true&amp;delay=60000""/>




Will copy files with a same name only once.


However it works with file-endpoint



<from uri=""file:/payments?idempotent=false&amp;noop=true&amp;delay=60000""/>




the files are copied every time, like they should be.",davsclaus:1360221445:2013-02-07T15:17:25.975+0000:1360221445:2013-02-07T15:17:25.975+0000:Thanks for reporting.
0,CAMEL-6045,Bug,Major,2.6.0,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Christoph Giera,0,4,2013-02-07 14:00:50+00:00,2023-10-23 07:19:40+00:00,"see http://camel.465427.n5.nabble.com/Camel-Email-Component-Missing-Attachments-td3386382.html#a5727102


The disposition field is optional(see RFC 2183), so it is possible that camel misses attachments.



                if (disposition != null && (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE))) {
                    // only add named attachments
                    String fileName = part.getFileName();
                    if (fileName != null) {
                        LOG.debug(""Mail contains file attachment: "" + fileName);
                        // Parts marked with a disposition of Part.ATTACHMENT are clearly attachments
                        CollectionHelper.appendValue(map, fileName, part.getDataHandler());
                    }
                }




Adding the fileName check to the if should resolve the issue.","cgiera:1360218287:2013-02-07T14:24:47.275+0000:1360218287:2013-02-07T14:24:47.275+0000:Test with changed if worked on my side. I've just added the fileName check to the if:
{noformat}
				if ((disposition != null && (disposition
						.equalsIgnoreCase(Part.ATTACHMENT) || disposition
						.equalsIgnoreCase(Part.INLINE)))
						|| fileName != null) {
					LOG.debug(""Mail contains file attachment: "" + fileName);
					// Parts marked with a disposition of Part.ATTACHMENT
					// are clearly attachments
					CollectionHelper.appendValue(map, fileName,
							part.getDataHandler());

				}
{noformat}
cgiera:1360218555:2013-02-07T14:29:15.550+0000:1360218555:2013-02-07T14:29:15.550+0000:I still use camel 2.6 due to some customer restrictions(java 5), but I couldn't find a branch for 2.6 to provide a patch for this version. So i will add a patch for the trunk version.
cgiera:1360218694:2013-02-07T14:31:34.706+0000:1360218694:2013-02-07T14:31:34.706+0000:patch added
davsclaus:1360220013:2013-02-07T14:53:33.492+0000:1360220013:2013-02-07T14:53:33.492+0000:Thanks for the patch.
vitamon:1376974950:2013-08-20T13:02:30.148+0000:1376975590:2013-08-20T13:13:10.455+0000:{code} if ((disposition != null && (disposition.equalsIgnoreCase(Part.ATTACHMENT) || disposition.equalsIgnoreCase(Part.INLINE)))
                        || fileName != null)
{code}
There is a problem with the filename check:
If filename==null, but everything else is ok, it will be added to the map. There should be ""&& filename != null"".
Please correct in future versions.  
 
ceposta:1380008054:2013-09-24T15:34:14.080+0000:1380008054:2013-09-24T15:34:14.080+0000:Vitalii, 
Not sure the sub-task is valid. Can you review my comments on it?
Seems that since disposition is optional, it shouldn't make a difference if it's null or not and whether there is a fileName.
vitamon:1380015656:2013-09-24T17:40:56.612+0000:1380015656:2013-09-24T17:40:56.612+0000:The problem is not with disposition, but with fileName. I had a case when disposition was not null, but the fileName == null. (mail from Microsoft Exchange Server btw). The fileName should not be null in any case. Or the map entry (null -> part) will be added, which is not good and causes NPEs.
vitamon:1380016070:2013-09-24T17:47:50.103+0000:1380016070:2013-09-24T17:47:50.103+0000:Here's extract from my code:
{code}
Map<String, DataHandler> attachments = exchange.getIn().getAttachments();
if (attachments.size() > 0) {
     for (String name : attachments.keySet()) {
         if (StringUtils.isNotBlank(name)) { // <--- added this to avoid null attachment names
            DataHandler dh = attachments.get(name);
{code}
ceposta:1380016214:2013-09-24T17:50:14.370+0000:1380016214:2013-09-24T17:50:14.370+0000:Yes, that makes sense. Thanks for the clarification. I've attached a fix to CAMEL-6654"
0,CAMEL-6044,Improvement,Minor,None,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Claus Ibsen,1,2,2013-02-07 09:35:47+00:00,2016-03-23 09:13:22+00:00,"See
http://camel.465427.n5.nabble.com/Mocking-an-endpoint-in-a-blueprint-that-contains-a-property-placeholder-tp5726972.html


There may be an issue when using property placeholders and you refer to a new component, and then the component resolver cannot find that.",davsclaus:1458695602:2016-03-23T09:13:22.112+0000:1458695602:2016-03-23T09:13:22.112+0000:Assume after so long time it works now.
0,CAMEL-6043,Improvement,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Christian Müller,1,6,2013-02-06 21:53:19+00:00,2013-02-28 05:30:55+00:00,See http://camel.465427.n5.nabble.com/BeanInfo-performance-issues-td5726912.html for details.,"njiang:1360263112:2013-02-08T02:51:52.056+0000:1360263112:2013-02-08T02:51:52.056+0000:I just went thought the patch, current it just suppose to take a map which works a cache from the camel context. But user need to setup the map first before we use it. Just as Claus has mentioned in the mail we could use LRUSoftCache to this kind of cache. BTW, LRUSoftCache is thread safe.

Now the generic cache facility which could be provide by Camel just come across my mind. The Cache can be managed by JMX, and it can meet out needs of cache in different camel component. Maybe we could use it later in BeanInfo. 
njiang:1360279772:2013-02-08T07:29:32.587+0000:1360279772:2013-02-08T07:29:32.587+0000:Applied the patch with thanks to Antoine.
davsclaus:1361930312:2013-02-27T09:58:32.125+0000:1361930312:2013-02-27T09:58:32.125+0000:I further improved on this and let the cache be enabled by default, and controlled by the bean component.
davsclaus:1361930369:2013-02-27T09:59:29.234+0000:1361930369:2013-02-27T09:59:29.234+0000:This further improved performance for bean and simple language when using OGNL like expressions, that is evaluated at runtime. Now the cache ensures we do not introspect the same class types over and over again."
0,CAMEL-6042,Improvement,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Aaron Whiteside,5,5,2013-02-06 20:55:29+00:00,2013-07-24 12:19:31+00:00,"AggregateProcessor/AggregationRepository does not deal with optimistic locking - and will not work correctly in a distributed environment.


I started to write a Voldemort specific AggregationRepository I saw that the AggregateProcessor does not deal with optimistic locking. It uses a single AggregateProcessor instance specific lock.


In a distributed environment where there are many Camel instances on many servers using a shared data store for the AggregationRepository this will not work.


Consider the following scenario using a persistent/shared AggregationRepository:


Camel instance A on server A, receives Exchange 1..



AggregateProcessor first acquires instance specific lock.
AggregateProcessor calls oldExchange = AggregationRepository.get()
oldExchange is null



Camel instance B on server B, receives Exchange 2..



AggregateProcessor first acquires instance specific lock.
AggregateProcessor calls oldExchange = AggregationRepository.get()
oldExchange is null



Camel instance A & B at the same time both call..



AggregateProcessor calls AggregationStrategy with the new exchange and old null exchange
aggregationRepository.add() with the result (the new exchange)




Camel instance A succeeds to store the new exchange.
Camel instance B fails with an exception stating that something is already stored using that exchange id.
	
at this point I could write my AggregationRepository implementation to ignore the existing entry and overwrite it. But this would mean the exiting exchange is lost and never aggregated.





A possible solution would be:
a) Remove the lock from AggregateProcessor 
 a1) Put the lock in the MemoryAggregationRepository or 
 a2) Use a ConcurrentHashMap.putIfAbsent method (and then continue on to do B below).


b) Introduce an AggregationRepositoryOptimisticLockException (name it whatever you want) that is thrown when an AggregationRepository detects that someone is trying to add() the same exchange id at the same time.
Upon receiving this exception the AggregateProcessor would re-get() the oldExchange (now not null) from the AggregationRepository and call the AggregationStrategy again to aggregate the old and the new exchanges.


This would ensure that no exchanges fail to aggregate in a distributed environment. Given that the underlying AggregationRepository is able to detect concurrent add()'s. Which most should be able to (using conditional updates).


For example:
SQL could try and insert into a table with a unique constraint on the correlation id. When the constraint is violated JPA/JDBC/whatever will throw a unique constraint violation exception which can be converted into a AggregationRepositoryOptimisticLockException.


And HawtDB supports optimistic locking out of the box, by throwing a OptimisticUpdateException when it detects concurrent updates. So updating this component to take advantage of this feature should be very simple.","aaronjwhiteside:1360442282:2013-02-10T04:38:02.904+0000:1360442282:2013-02-10T04:38:02.904+0000:Patch to add optimistic locking support to AggregateProcessor

New classes:
* OptimisticLockingAwareAggregationStrategy
* OptimisticLockingAggregationRepository


All camel-core unit tests pass.

Optimistic locking is disabled by default, but when I changed the default to enabled and ran all the camel-core unit tests again, everything still passes.

Wrote a simple DistributedAggregationRepositoryTest which tests using a shared AggregationRepository between two CamelContext instances.

I obviously need to write more distributed tests, but this is a start. I'm putting it out there for feedback.

I would really like if this could possibly be introduced into 2.11 as an experimental feature.

I tried to add the feature without changing the structure of AggregateProcessor too much. So things may be a bit messy, but they should still be easy to follow for someone who understood the original.

The only real hick-up I ran into was that almost every single AggregationStrategy seemed to be modifying the oldExchange and returning that as the ""aggregated"" Exchange. When I removed the global lock, this caused a lot of unit tests to fail. So I added a hack to pass a copy() of the oldExchange to the AggregationStrategy instead of the original. But only in the case where we are using the MemoryAggregationRepository as this relies on value identity to do it's conditional updates.

The issue of AggregationStrategies modifying the oldExchange is a faux pas, at least in my opinion. Especially when using an in memory repository, as the oldExchange is still referenced and you need not even bother add()ing the ""aggregated"" exchange to the repo. The global lock seemed to negate this problem. But changing everything to be ""correct"" and breaking backwards compatibility was out of the scope for this change, at least for me. So I added in the aforementioned hack.

I also plan to write a patch to bring optimistic locking to the JdbcAggregationRepository. I looked at adding support to HawtDB and LevelDB. But it turns out HawtDB only supports optimistic locking at the page level, and not true conditional update (as far as I could tell?). LevelDB doesn't seem to support any kind of locking, thread safety or conditional updates at all - so no optimistic locking for it either.


davsclaus:1360543971:2013-02-11T08:52:51.186+0000:1360543971:2013-02-11T08:52:51.186+0000:Aaron the use-case with server A and B in the description. Wouldn't that use-case only be an issue when Exchange 1 and Exchange 2 has the same ""correlation key"". If they are 2 different correlation keys, then you ought to be able to add to the repo concurrently.

Also an Exchange ID *must* be unique across CamelContext's and multiple JVMs. (eg globally unique). So you can never get 2 different Exchange's with the same Exchange ID.


Another issue is the recoverable aggregation repository. Currently if you run in a distributed environment, then you would need some way of ensuring a recovered task only runs on one server. That's another ticket to look at.
aaronjwhiteside:1360567242:2013-02-11T15:20:42.604+0000:1360567242:2013-02-11T15:20:42.604+0000:Hi Claus,

You are correct I mean exchanges with the same correlation key. Sorry I didn't explicitly state that.

If the repository supports optimistic locking, then only one camel instance should be able to recover any one exchange. Because no matter how many concurrent updates with optimistic locking only one will succeed. I haven't gotten that far with writing my VoldemortAggregationRepository yet.. as I stopped to work on this patch.

I also need to write a test for the distributed timeout scenario, as that is the same problem.
davsclaus:1360568073:2013-02-11T15:34:33.059+0000:1360568073:2013-02-11T15:34:33.059+0000:Hi Aaron,

Ah good, yeah I then think your work is on the right track, and we should work on getting that folded into the camel-core.

aaronjwhiteside:1360604393:2013-02-12T01:39:53.177+0000:1360604393:2013-02-12T01:39:53.177+0000:Hi Claus,

Latest patch, minor fixes.

Better logging for timeout and interval aggregation completion.

Added two new tests for distributed timeout and distributed interval aggregation.


davsclaus:1360645897:2013-02-12T13:11:37.664+0000:1360645897:2013-02-12T13:11:37.664+0000:Thanks Aaron, do you mind formatting your code accordingly to the checkstyle rules?

eg see, at Building with checkstyle
http://camel.apache.org/building.html

We run this maven goal to ensure the source code is ""similar"" in shape.
aaronjwhiteside:1360680883:2013-02-12T22:54:43.776+0000:1360680883:2013-02-12T22:54:43.776+0000:Same patch but with code style check passing.
aaronjwhiteside:1360830446:2013-02-14T16:27:26.480+0000:1360830446:2013-02-14T16:27:26.480+0000:Is there anything else stopping this patch from being committed to trunk?
davsclaus:1360903381:2013-02-15T12:43:01.798+0000:1360903381:2013-02-15T12:43:01.798+0000:Aaron, if you have a cure for the flu, then it would help get people back to their fets quicker
davsclaus:1360917613:2013-02-15T16:40:13.132+0000:1360917613:2013-02-15T16:40:13.132+0000:Okay the flu is getting better.

Aaron, do you mind adding more javadoc details to OptimisticLockingAggregationRepository. And it would be good to note a bit about what happens the 1st time, where oldExchange may be null?

And as always more tests will always help.

Also why is DistributedCompletionIntervalTest not using a shared repo and has optimistick locking enabled?
davsclaus:1360918113:2013-02-15T16:48:33.825+0000:1360918127:2013-02-15T16:48:47.744+0000:Thanks for the patch. I have applied it to trunk.

aaronjwhiteside:1360926543:2013-02-15T19:09:03.403+0000:1360927309:2013-02-15T19:21:49.832+0000:Oh somehow I missed that DistributedCompletionIntervalTest isn't correct, I'll provide another patch soon. Thanks for pointing it out.. I think it was a copy and paste error on my behalf.

Thank you for getting this committed.

I'll also prepare another patch with javadoc updates to OptimisticLockingAggregationRepository.
And some more unit tests for various scenarios.
davsclaus:1360978873:2013-02-16T09:41:13.726+0000:1360978873:2013-02-16T09:41:13.726+0000:I wonder if we should have some forced delay if an optimistick lock exception was thrown before we try again. What if there is many concurrent nodes that try to update the same correlation id, then you hit many optimisick lock exceptions and have many retries at the same time, putting pressure on the shared repo.

Wonder if we should have a little delay, that may be a bit random to spread out the chances of hit on next attempts.
aaronjwhiteside:1361033219:2013-02-17T00:46:59.597+0000:1361033219:2013-02-17T00:46:59.597+0000:Fixed DistributedCompletionIntervalTest and updated Javadoc.

As for optimistic lock retry delays, for my use case I wouldn't have more then two or three exchanges with the same correlation id running though our camel cluster - So I don't expect many retry attempts. But that doesn't mean someone else would not.

How does adding a OptimisticLockRetryStrategy sound? My experience has been that exponential back-off is best.. as I dislike non-deterministic random things, what are your thoughts? 
davsclaus:1361177917:2013-02-18T16:58:37.613+0000:1361177917:2013-02-18T16:58:37.613+0000:Yeah that sounds fine, for starters just something simple on a default implementation with a backoff value and a a max upper limit.
davsclaus:1361179062:2013-02-18T17:17:42.169+0000:1361179062:2013-02-18T17:17:42.169+0000:Thanks for the last patch, applied it to trunk.
davsclaus:1362001402:2013-02-28T05:43:22.911+0000:1362001402:2013-02-28T05:43:22.911+0000:Aaron, how goes with that retry strategy? We should get this implemented before we can cut Camel 2.11.
aaronjwhiteside:1362034444:2013-02-28T14:54:04.263+0000:1362034444:2013-02-28T14:54:04.263+0000:Working on it, I haven't forgotten.. 

Just been a little busy lately, I have the functionality working, just need to figure out the AggregateDefinition changes and unit tests.
aaronjwhiteside:1362065963:2013-02-28T23:39:23.681+0000:1362065963:2013-02-28T23:39:23.681+0000:When do we expect the 2.11 release to be cut?
muellerc:1362091332:2013-03-01T06:42:12.087+0000:1362091332:2013-03-01T06:42:12.087+0000:In general, we only wait for Karaf 2.3.1 which is in vote already. This means in the next couple of days if possible...
davsclaus:1362099698:2013-03-01T09:01:38.699+0000:1362099698:2013-03-01T09:01:38.699+0000:Aaron,

An alternative is to configure the retry strategy on the repository, eg OptimisticLockingAggregationRepository then we can keep this configuration out of the DSL. 

I am not sure if the configuration fits in the DSL as its only applicable in the scenario when you use the OptimisticLockingAggregationRepository, which you would need to configure as well.
cgshiva:1362557791:2013-03-06T16:16:31.693+0000:1362557791:2013-03-06T16:16:31.693+0000:Hi Christian / Claus,  We are facing the same problem. Pasting the exception below. We are using Camel's JDBCAggregationRepository in Clustered environment. Is this the problem that you fixed ?. If so when this would be released ?

""org.hibernate.exception.ConstraintViolationException: ORA-00001: unique constraint (USLDB_UAT2.AGGREGATION_PK) violated

	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:74)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:49)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:125)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:110)
	at org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:129)
	at org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81)
	at $Proxy171.executeUpdate(Unknown Source)
	at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:73)
	at org.springframework.jdbc.core.support.AbstractLobCreatingPreparedStatementCallback.doInPreparedStatement(AbstractLobCreatingPreparedStatementCallback.java:1)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:587)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:615)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:137)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository$1.doInTransaction(JdbcAggregationRepository.java:113)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:130)
	at org.apache.camel.processor.aggregate.jdbc.JdbcAggregationRepository.add(JdbcAggregationRepository.java:113)
	at org.apache.camel.processor.aggregate.AggregateProcessor.doAggregation(AggregateProcessor.java:260)
	at org.apache.camel.processor.aggregate.AggregateProcessor.process(AggregateProcessor.java:197)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(As...""
aaronjwhiteside:1362558606:2013-03-06T16:30:06.899+0000:1362558606:2013-03-06T16:30:06.899+0000:Support was added to support optimistic locking in AggregationRepository's, each capable repository must first implement the new interface OptimisticLockingAggregationRepository.

I know it is possible for the JDBCAggregationRepository to support optimistic locking, I just haven't gotten around to add it yet.

You could always add the support yourself and submit it back as a patch. :)

The essence of it would be done by adding a version column and always doing UPDATE blah SET version=version+1 WHERE VERSION=<expected version>. When the update fails because the version did not match. You would throw an OptimisticLockingException.. and the AggregateProcessor would retry it until it succeeds.

On that note, I really must finish the OptimisticLockingRetryPolicy I'm working on.. 

davsclaus:1362654633:2013-03-07T19:10:33.269+0000:1362654633:2013-03-07T19:10:33.269+0000:Yeah good idea about the jdbc as well. Feel free to log a JIRA so we wont forget.
cgshiva:1362672208:2013-03-08T00:03:28.856+0000:1362672208:2013-03-08T00:03:28.856+0000:Just created https://issues.apache.org/jira/browse/CAMEL-6144 for the problem.
  
davsclaus:1363742872:2013-03-20T09:27:52.030+0000:1363742872:2013-03-20T09:27:52.030+0000:Aaron, any update?

We are closing in on the 2.11.0 release.
davsclaus:1364359989:2013-03-27T12:53:09.543+0000:1364359989:2013-03-27T12:53:09.543+0000:Aaron, I added a little note on the aggregate doc page about this new option.
https://cwiki.apache.org/confluence/display/CAMEL/Aggregator2

It would be great if you would prepare some more meat for the docs. Such as a section we can add about using this new functionality.
If you cannot edit the docs yourself, you can attach a .txt file to this JIRA ticket with your docs. Then we can take that and add to the wiki.

I would like the docs to be ready so we have it ready for the 2.11 release.

In the code base I added a little random delay (between 0-1000 millis), so when we retry we spread the timing a bit, to avoid clashing with the other party. We can later add more fancy configurations to control this. 
davsclaus:1364360505:2013-03-27T13:01:45.957+0000:1364360505:2013-03-27T13:01:45.957+0000:The unit tests should probably be improved, and use a aggregation repository where you force throwing those optimistic locking exception. Instead of relying on some cpu thread timing. This allows you also to record if there was a optimistic locking etc. And makes unit test easier.
davsclaus:1365202211:2013-04-06T06:50:11.600+0000:1365202211:2013-04-06T06:50:11.600+0000:Created a sub tasks for the unit tests improvements
aaronjwhiteside:1366093701:2013-04-16T14:28:21.955+0000:1366093701:2013-04-16T14:28:21.955+0000:Sorry for missing the 2.11 release, I was on vacation.

Please find attached a patch with support for a retry policy and more unit tests.
davsclaus:1374639571:2013-07-24T12:19:31.713+0000:1374639571:2013-07-24T12:19:31.713+0000:Added support for SQL and HawtDB as well in Camel 2.12."
0,CAMEL-6041,Bug,Major,None,"2.10.5, 2.11.0","

maven
patch
test

",Resolved,Fixed,"2.10.5, 2.11.0",Willem Jiang,Slava,0,3,2013-02-06 16:25:58+00:00,2013-05-31 11:20:56+00:00,"Address fields quite often contain comma at the end of an addressLine1 field. Example - ""PROBLEM SOLVER"",""8506 SIX FORKS ROAD,"",""SUITE 104"",""RALEIGH"",""NC"",""27615"",""US""
Bindy will append next field to such one shifting all others to the left.","zinksl:1360139375:2013-02-06T16:29:35.696+0000:1360140711:2013-02-06T16:51:51.170+0000:Test project with suggested patch(for version 2.10.3). 
Situations with separator at the beginning of field still requires attention. Though in real life such use cases are probably rare.
davsclaus:1369541563:2013-05-26T12:12:43.707+0000:1369541563:2013-05-26T12:12:43.707+0000:Thanks for the patch. Willem can you take a look?
njiang:1369970456:2013-05-31T11:20:56.797+0000:1369970456:2013-05-31T11:20:56.797+0000:Applied the patch into trunk and merged back into camel-2.10.x branch."
0,CAMEL-6040,Improvement,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Akitoshi Yoshida,0,3,2013-02-06 12:50:06+00:00,2013-03-13 07:18:16+00:00,"Under stream caching, data may be stored in a temporary file depending on the size of the data. For some scenarios, it is desirable to protect the content of the file from unauthorized access. 


I would like to propose for adding a simple encryption option in Camel's CachedOutputStream so that it can encrypt the cached content using an internally generated key and only the associated cache object can read the data from the file.


This is analogue to CXF-4596.


Please look at the attached code and I would appreciate your comments.


Regards, Aki","njiang:1360128391:2013-02-06T13:26:31.978+0000:1360128391:2013-02-06T13:26:31.978+0000:Hi Aki,

The patch looks good. I just have a small question about the cipherTransformation setting, what if the user doesn't set any thing on the cipherTransformation. I'm not sure what will be Cipher.getInstance(transformation)  return when transformation is null. 
Can we just set up a default value for the cipherTransformation?
njiang:1360129333:2013-02-06T13:42:13.978+0000:1360129333:2013-02-06T13:42:13.978+0000:Ah, camel will not encrypt the tmp file when the cipherTransformation is null.

ay:1360131245:2013-02-06T14:14:05.521+0000:1360131245:2013-02-06T14:14:05.521+0000:Hi Willem,
thanks for picking this up quick. Right. The encryption is only enabled when the name is set to a valid cipher transformation name. By default, we can keep this prop to be null so that encryption is disabled.

regards, aki


njiang:1360135138:2013-02-06T15:18:58.722+0000:1360135138:2013-02-06T15:18:58.722+0000:Applied the patch into trunk with a minor update with thanks to Aki.

Aki, Do you mind to update [this|http://camel.apache.org/stream-caching.html] wiki page?
ay:1360135458:2013-02-06T15:24:18.901+0000:1360135458:2013-02-06T15:24:18.901+0000:not at all. I'll update the page.

bvahdat:1360188699:2013-02-07T06:11:39.666+0000:1360188699:2013-02-07T06:11:39.666+0000:Willem the class {{CipherPair}} has not been committed which caused the build to break on the CI-Server.
njiang:1360192493:2013-02-07T07:14:53.588+0000:1360192493:2013-02-07T07:14:53.588+0000:Hi Babak,

I'm sorry for that, I just committed the missing pice. Now the CI-Server should be happy about it.
njiang:1363130296:2013-03-13T07:18:16.688+0000:1363130296:2013-03-13T07:18:16.688+0000:Applied the patch into trunk with thanks to Aki."
0,CAMEL-6039,Improvement,Major,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Unassigned,Rich Newcomb,0,2,2013-02-06 07:06:05+00:00,2013-02-28 05:57:24+00:00,"The attached patch provides the following improvements for the camel-bindy fixed length record data format:



full support for fixed-length header and footer records
allows delimited (variable length) fields to be defined within ""fixed-length"" records
enables the length of a data field to be defined dynamically by another field in the same record
fixed-length records can be defined using ordinal / relative pos values



New annotation properties:
------------------
@DataField
 + lengthPos (int) – Optionally identifies a data field in the record that defines the fixed length for this field
 + delimiter (String) – Optional delimiter to be used if this field has a variable length


@FixedLengthRecord
 + hasHeader (boolean) – Indicates that the record(s) of this type may be preceded by a single header record at the beginning of the file / stream
 + hasFooter (boolean) – Indicates that the record(s) of this type may be followed by a single footer record at the end of the file / stream
 + skipHeader (boolean) – Configures the data format to skip marshalling / unmarshalling of the header record
 + skipFooter (boolean) – Configures the data format to skip marshalling / unmarshalling of the footer record
 + isHeader (boolean) – Identifies this FixedLengthRecord as a header record
 + isFooter (boolean) – Identifies this FixedLengthRecord as a footer record","rnewcomb:1360106044:2013-02-06T07:14:04.428+0000:1360106044:2013-02-06T07:14:04.428+0000:Patch attached.  I will update the documentation once the code is committed.  Please advise if any modifications are necessary or desired.
rnewcomb:1360106226:2013-02-06T07:17:06.457+0000:1360106226:2013-02-06T07:17:06.457+0000:Re-attached with camel root directory as patch root
davsclaus:1360221719:2013-02-07T15:21:59.926+0000:1360221719:2013-02-07T15:21:59.926+0000:Rich, the patch looks good.

You added dependency on commons-lang. What do you use that for?
davsclaus:1360221763:2013-02-07T15:22:43.259+0000:1360221763:2013-02-07T15:22:43.259+0000:If we should keep commons-lang, then it should be added to the camel-bindy in the features.xml file as well.
davsclaus:1360221908:2013-02-07T15:25:08.840+0000:1360221908:2013-02-07T15:25:08.840+0000:If  you only use it for a counter, then you should use AtomicInteger instead, as thats from the JDK out of the box.
rnewcomb:1360223734:2013-02-07T15:55:34.847+0000:1360223734:2013-02-07T15:55:34.847+0000:Updated patch to remove dependency upon commons-lang
rnewcomb:1360229516:2013-02-07T17:31:56.441+0000:1360229516:2013-02-07T17:31:56.441+0000:Minor update to patch to add parameter checking for mutually exclusive fields in FixedLengthRecord. (e.g., can not have isHeader and hasFooter.)
davsclaus:1360231226:2013-02-07T18:00:26.528+0000:1360231226:2013-02-07T18:00:26.528+0000:Thanks Rich for the patch. I have applied it to trunk.

Fell free to improved the docs, and add a note to the 2.11 release notes about this great new improvements to camel-bindy.

Btw you are most welcome to take a look at the other bindy tickets we have logged. For example there is a ticket about the issue with bindy not liking to have multiple root objects in the same java package. There is a ticket logged a about that.
rnewcomb:1360624857:2013-02-12T07:20:57.691+0000:1360624857:2013-02-12T07:20:57.691+0000:Single line change to correct a unit test / example.  I discovered this small discrepancy when writing the documentation for this enhancement.
rnewcomb:1360624981:2013-02-12T07:23:01.363+0000:1360624981:2013-02-12T07:23:01.363+0000:Wiki documentation for Bindy and 2.11.0 release notes are updated.
davsclaus:1360627556:2013-02-12T08:05:56.415+0000:1360627556:2013-02-12T08:05:56.415+0000:I have applied the 2nd patch.
rnewcomb:1360877327:2013-02-15T05:28:47.093+0000:1360877364:2013-02-15T05:29:24.592+0000:Attached is a supplemental patch (patch3) & unit tests for an edge case that was not fully handled in the initial entry for this ticket.  

The patch causes Bindy to throw an exception when non-mapped, extraneous data is encountered at the end of a parsed fixed-length record. This behavior parallels the behavior for absolute fixed-length records, where the record length is declared up front and an exception is thrown if the length of the parsed line does not match that length.  It follows that an exception should also be thrown for records with variable-length elements (e.g. delimited, or dynamically-defined field length) when it is determined that more data is presented on a line than was declared for the record.

I will add a callout in the documentation to explain this behavior / requirement once the patch is applied.

davsclaus:1360903251:2013-02-15T12:40:51.491+0000:1360903251:2013-02-15T12:40:51.491+0000:Thanks Rich, 3rd patch applied to trunk.
davsclaus:1362001461:2013-02-28T05:44:21.082+0000:1362001461:2013-02-28T05:44:21.082+0000:Rich, any more work to do? If not then we should mark this ticket as resolved.
rnewcomb:1362002205:2013-02-28T05:56:45.466+0000:1362002244:2013-02-28T05:57:24.226+0000:I think the ticket is complete. I left it open while monitoring integration tests in my pre-production environment this week. Everything looked good. Resolving the ticket."
0,CAMEL-6038,Bug,Minor,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-02-05 12:22:06+00:00,2013-02-05 12:32:00+00:00,"See
http://fusesource.com/forums/thread.jspa?messageID=16745&#16745",
0,CAMEL-6037,Bug,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Robin Lutter,0,2,2013-02-05 09:49:14+00:00,2013-03-25 16:17:13+00:00,"ftpClientParameters are already (partially) urldecoded in method FtpEndpoint.createRemoteFileOperations when calling for IntrospectionSupport.setProperties, this results in wrong password strings. for example uri=ftp://ftp2.server/path?fileName=testfile.txt&username=user&password=se%2Bcure 
'se+cure' -> 'se cure' 


I think it is caused by DefaultCamelContext.normalizeEndpointUri",davsclaus:1364199433:2013-03-25T16:17:13.217+0000:1364199433:2013-03-25T16:17:13.217+0000:Fixed by CAMEL-6176
0,CAMEL-6036,Task,Trivial,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Jan Materne,0,2,2013-02-04 20:10:06+00:00,2013-02-05 09:31:30+00:00,"The comment does not fit to the code in camel/trunk/tests/camel-itest/src/test/java/org/apache/camel/itest/async/HttpAsyncDslTest.java


The ""e1"" snippet is part of the documentation (http://camel.apache.org/async.html), so it should be fixed.


Code:
// do some CPU heavy processing of the message (we simulate and delay just 500 ms)
.unmarshal(mySecureDataFormat).delay(1000).to(""bean:handleOrder"").to(""mock:order"");
// END SNIPPET: e1


The delay is 1000, but the comment says 500ms.",njiang:1360001903:2013-02-05T02:18:23.115+0000:1360001903:2013-02-05T02:18:23.115+0000:Fix the typo in the code base. The page should be OK a while later.
0,CAMEL-6035,Bug,Minor,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Michael Wirth,0,2,2013-02-04 08:52:27+00:00,2013-02-05 08:14:42+00:00,"interceptSendToEndpoint with a DelegateAsyncProcessor fails.
The intercepted target processor don't implement the interave Service and therfore won't 'start' the target services.


Caused by: java.lang.IllegalStateException: SendProcessor has not been started: sendTo(Endpoint[log://foo])
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at AdviceWithTest$ContainerWideInterceptor$1.process(AdviceWithTest.java:94)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:60)
	at org.apache.camel.impl.InterceptSendToEndpoint$1.process(InterceptSendToEndpoint.java:132)","davsclaus:1359970861:2013-02-04T17:41:01.994+0000:1359970861:2013-02-04T17:41:01.994+0000:Yeah you would need to use WrapProcessor instead of Processor to ensure the target processor gets started as expected.
{code}
    static class ContainerWideInterceptor implements InterceptStrategy {

        private static final transient Logger LOG = LoggerFactory.getLogger(ContainerWideInterceptor.class);
        private static int count;

        public Processor wrapProcessorInInterceptors(final CamelContext context, final ProcessorDefinition<?> definition,
                                                     final Processor target, final Processor nextTarget) throws Exception {

            return new DelegateAsyncProcessor(new WrapProcessor(new Processor() {

                public void process(Exchange exchange) throws Exception {
                    // we just count number of interceptions
                    count++;
                    LOG.info(""I am the container wide interceptor. Intercepted total count: "" + count);
                    nextTarget.process(exchange);
                }

                @Override
                public String toString() {
                    return ""ContainerWideInterceptor["" + target + ""]"";
                }
            }, target));
        }

        public int getCount() {
            return count;
        }
    }
{code}

We may want to add some API to make this easier for end users.
davsclaus:1360023282:2013-02-05T08:14:42.516+0000:1360023282:2013-02-05T08:14:42.516+0000:Thanks for reporting."
0,CAMEL-6034,New Feature,Major,None,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Claus Ibsen,0,1,2013-02-02 18:21:25+00:00,2015-03-25 09:17:50+00:00,"We should allow the ClassResolver API to add packages so end users can add their own package names. So looking up classes etc can use these known packages as prefixes. This avoids typing in long FQN.


We would need some API in XML DSL to make that easier to configure.


This can also benefit the simple language with the new type function etc.",
0,CAMEL-6033,Bug,Minor,2.11.0,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Christian Müller,0,2,2013-02-02 17:28:41+00:00,2013-02-04 17:33:26+00:00,"See http://camel.465427.n5.nabble.com/Wrong-test-for-allowRedeliveryWhileStopping-possible-bug-td5726184.html for details.


The assumption is if we use ""allowRedeliveryWhileStopping(false)"" in an error handler definition which use a dead letter channel, the message should be send to the configured dead letter channel if we are in a delivery by stopping Camel (instead of dropping the message).","muellerc:1359797895:2013-02-02T17:38:15.148+0000:1359797895:2013-02-02T17:38:15.148+0000:I added a (slightly modified) unit test to show the bug: http://svn.apache.org/viewvc?view=revision&revision=1441777
I added a @Ignore annotation so that the build will not fail.
It would be great if one of the key committer could have a look at it (I'm too busy with other tasks).
davsclaus:1359945166:2013-02-04T10:32:46.883+0000:1359945166:2013-02-04T10:32:46.883+0000:It was not designed to move the message to DLC, but reject redelivery during stopping/shutdown.

I will see what we can do to make this special case for DLC.
davsclaus:1359953154:2013-02-04T12:45:54.982+0000:1359953154:2013-02-04T12:45:54.982+0000:I have a potential solution. Though some tests in CXF now fails; will need to look into this. All other tests passes fine.
davsclaus:1359954067:2013-02-04T13:01:07.304+0000:1359954067:2013-02-04T13:01:07.304+0000:Okay it was the CXF test that was wrong.
davsclaus:1359960149:2013-02-04T14:42:29.920+0000:1359960149:2013-02-04T14:42:29.920+0000:allowRedeliveryWhileStopping is a new option in Camel 2.11
muellerc:1359970406:2013-02-04T17:33:26.556+0000:1359970406:2013-02-04T17:33:26.556+0000:Thanks Claus!"
0,CAMEL-6032,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-02-02 13:50:09+00:00,2013-02-07 19:04:02+00:00,"See CAMEL-6031


We should also allow people with camel-servletlistener to plugin a registry of their choice.


And we should not require JNDI. But let the end user easy turn that off.",
0,CAMEL-6031,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-02-02 13:43:33+00:00,2013-02-02 18:18:32+00:00,"CamelContext uses Jndi registry by default if not running in spring/blueprint etc. And end user has not explicit configured a different registry.


In some cases the jndi registry may not work suc as gae, and we can fallback and use simple registry instead.


We can add an option on CamelContext so people can turn this behavior off, in case they must use JNDI.",
0,CAMEL-6030,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-02-02 11:58:49+00:00,2013-02-02 13:25:35+00:00,"This component should not have spring dependency.


See also
http://stackoverflow.com/questions/14661137/camel-and-google-app-engine-without-spring",
0,CAMEL-6029,Improvement,Major,2.11.0,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Hadrian Zbarcea,Hadrian Zbarcea,2,3,2013-02-02 00:03:09+00:00,2017-02-28 13:59:09+00:00,"(see the 3.0 roadmap )


No matter what choices and changes we make in the core, many tests in components will start failing. That is because virtually all unit tests in components test much more than the component itself, by setting up routes, etc. A simple thing would be do create something like xyzTestSupport (where xyz in 

{""Component"", ""Configuration"", ""Endpoint"", ""Producer"", ""Consumer"", ""Language"", etc... }

), that test a respective area without setting up routes and possibly use a minimal CamelContext (w/o component discover and/or other features). Moving component unit tests to such a framework is not complicated, a bit tedious, but hopefully we'll benefit (yet again) from community contributions and gain new committers in the process. This is probably the first thing that should be done that will allow us to be more productive with the other improvements. It can also be done in 2.x and won't require any incompatible changes.",
0,CAMEL-6028,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Benjamin P. O'Day,Claus Ibsen,0,2,2013-02-01 11:49:14+00:00,2013-10-17 16:46:03+00:00,"When using camel-hdfs to write to files, without using split strategy. Then the file is always the same which is the file configured on the endpoint.


We should add support for the CamelFileName header so you can give the file a new name, relative to the endpoint configuration. Then it works more like the file producer would do.","boday:1381960701:2013-10-17T05:58:21.147+0000:1381960701:2013-10-17T05:58:21.147+0000:added support for this in commit: de4cb2b98259fb7c9777e8c0ca79f841956b9994


boday:1381961266:2013-10-17T06:07:46.184+0000:1381961266:2013-10-17T06:07:46.184+0000:upon review, this probably could use Expression support as well...adding that next
boday:1381999563:2013-10-17T16:46:03.375+0000:1381999563:2013-10-17T16:46:03.375+0000:added Expression support in Commit: 4c3d1526c9d285e138a16b9fd275171f4255ec65"
0,CAMEL-6026,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,2,2013-02-01 07:35:20+00:00,2013-03-20 13:59:01+00:00,"We should let user get control of http connection by provides the options for use.
Here is the mailing thread about it.
http://camel.465427.n5.nabble.com/Camel-http4-component-throws-Connection-refused-error-tp5726673.html","njiang:1363134682:2013-03-13T08:31:22.424+0000:1363134682:2013-03-13T08:31:22.424+0000:Added connectionTimeToLive option on the HttpComponent to let user control the connection live time.
davsclaus:1363742833:2013-03-20T09:27:13.834+0000:1363742833:2013-03-20T09:27:13.834+0000:Willem have you updated the docs. And if so is there more work, if not then close this ticket.
njiang:1363759141:2013-03-20T13:59:01.939+0000:1363759141:2013-03-20T13:59:01.939+0000:Updated the wiki page of camel-http4 for it."
0,CAMEL-5995,Improvement,Minor,"2.9.5, 2.10.3","2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Alexis Kinsella,0,2,2013-01-22 14:27:29+00:00,2013-01-25 07:24:12+00:00,"Hi, 


The software I'm working on rely on some logging from Instrumentation Processor. Since release of Camel 2.9 there were some changes that made logging less workable.


Therefore I propose some improvments in that class.


I hope it can help.","davsclaus:1358897866:2013-01-23T07:37:46.482+0000:1358897866:2013-01-23T07:37:46.482+0000:What improvements are you looking for?


alexiskinsella:1358899961:2013-01-23T08:12:41.483+0000:1358900339:2013-01-23T08:18:59.732+0000:The goal is to trace processors which are involded during the process of an exchange on a route.
Since routes are dynamically assembled in the software i'm working on, it is a good way to track each exchanges across processors of a route.
Tracing exchanges on camel routes allows to diagnose and audit afterward what happened.

InstrumentationProcessor does not allow to reveal the identity of some processors involved in exchange processing because of there wrapped nature (WrapProcessor, DelegateProcessor). That the reason of the proposed improvement in getTraceLabel methods.
davsclaus:1359069852:2013-01-25T07:24:12.364+0000:1359069852:2013-01-25T07:24:12.364+0000:Improved logic in route node which looks for the label to use by the tracer. Now it handles wrapped / delegate processors as well."
0,CAMEL-5994,Bug,Critical,"2.9.5, 2.10.3","2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Alexis Kinsella,1,3,2013-01-22 14:17:37+00:00,2013-01-25 08:43:16+00:00,"CamelJobs rely on some endpoints LRU cache from camel context. If i'm not wrong, since LRU Cache relies on SoftReferences, Garbage Collector can decide to evict some entries and especially QuartzEndpoints.


It happens that sometimes endpoints evicted from LRU Caches are QuartzEndpoints. Since QuartzEnpoints are searched from CamelJob in LRU cache, they are not reachable anymore.


The side effect, is that CamelJob isntance initializes a new QuartzEndpoint, but loadbalancer is not initialized since it is initialized from QuartzConsumer.


The result is that quartz triggers jobs that instanciate Quartz endpoints with unintialized load balancers which are unable to call processor from the routes associated.


I have joined a fix that rely on the search of QuartzEndpoints from initalized routes of Camel context.


Fundamentally, the search of endpoints should not rely on endpoints LRU cache. It is a broken design.


Hope it helps.


By the way, there are other issues related to QuartzEndpoint load balancer initalization: If quartz starts before startup of Camel routes you will have the same issue: Correctly initialized QuartzEndpoints are not in LRU cache since Camel has not started routes (and so endpoints and consumers). Quartz will trigger job, and camel job will search for QuartzEndpoint and put it in LRUCache with uninitialized load balancer.","denis.delangle:1358920784:2013-01-23T13:59:44.762+0000:1358920784:2013-01-23T13:59:44.762+0000:I made a pull request based on this patch and with a testcase https://github.com/apache/camel/pull/7. This patch solved my problem (described in CAMEL-5993)
denis.delangle:1358920899:2013-01-23T14:01:39.360+0000:1358920899:2013-01-23T14:01:39.360+0000:JUnit test that reproduce the bug and that is fixed by the correction in CamelJob
davsclaus:1359074596:2013-01-25T08:43:16.283+0000:1359074596:2013-01-25T08:43:16.283+0000:Thank guys for help with fixing this issue"
0,CAMEL-5993,Bug,Major,"2.10.2, 2.10.3","2.10.4, 2.11.0","
None
",Resolved,Duplicate,"2.10.4, 2.11.0",Unassigned,Denis Delangle,0,2,2013-01-22 08:03:31+00:00,2013-01-23 13:57:17+00:00,"Using camel-quartz in my camel based application (V 2.10.3), I
schedule a backup every day at 19h20 using this expression
from(quartz://backup?cron=0+20+19+?).process(...


the trigger is successfully executed the first day at 19h20, but
failed the next day with this stacktrace.
[ERROR] 2013-01-19 19:20:00,003 org.quartz.core.ErrorLogger Job
(DEFAULT.quartz-endpoint148 threw an exception.
org.quartz.SchedulerException: Job threw an unhandled exception. [See
nested exception: org.apache.camel.ResolveEndpointFailedException:
Failed to resolve endpoint: quartz://backup?cron=0+20+19+%3F++ due
to: A Quartz job already exists with the name/group: backup/Camel]
        at org.quartz.core.JobRunShell.run(JobRunShell.java:227)
        at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:549)
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to
resolve endpoint: quartz://backup?cron=0+20+19+%3F++ due to: A
Quartz job already exists with the name/group: backup/Camel
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:479)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:492)
        at org.apache.camel.component.quartz.CamelJob.execute(CamelJob.java:50)
        at org.quartz.core.JobRunShell.run(JobRunShell.java:216)
        ... 1 more
Caused by: java.lang.IllegalArgumentException: A Quartz job already
exists with the name/group: backup/Camel
        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:137)
        at org.apache.camel.component.quartz.QuartzComponent.createEndpoint(QuartzComponent.java:54)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:91)
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:461)
        ... 4 more


I scheduled other tasks running every 5 minutes without any errors.


Looking at the code, I understand it can append when endpoints are
removed from the LRU of the camelContext (endoints field from
DefaultCamelContext).","denis.delangle:1358813232:2013-01-22T08:07:12.334+0000:1358813232:2013-01-22T08:07:12.334+0000:Here is a UnitTest to reproduce the bug with a LRU cache size of 1.
The bug is also present with the parameter stateful=true
alexiskinsella:1358836359:2013-01-22T14:32:39.465+0000:1358836359:2013-01-22T14:32:39.465+0000:Hi, I just create some issue related to this one: https://issues.apache.org/jira/browse/CAMEL-5994

I guess the fix proposed could help you. Can you have a look and tell me what do you think about it ?
denis.delangle:1358920637:2013-01-23T13:57:17.053+0000:1358920637:2013-01-23T13:57:17.053+0000:Patch provided in CAMEL-5994 seems to fix this issue"
0,CAMEL-5992,Bug,Trivial,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Jan Materne,0,2,2013-01-22 07:26:49+00:00,2013-01-22 07:32:51+00:00,"Page http://camel.apache.org/controlbus.html
Section ""Using Simple language""


The ""l"" is missing:
""Notice: its easier to use the route command to contro lifecycle of routes.""


s/to contro lifecycle/to control lifecycle/","davsclaus:1358811170:2013-01-22T07:32:50.996+0000:1358811170:2013-01-22T07:32:50.996+0000:Thanks Jan for reporting.
I am fixing the typo.

If you want to help with the docs, then take a look at
http://camel.apache.org/how-do-i-edit-the-website.html

And as well how to contribute in general such as code patches etc
http://camel.apache.org/contributing.html

"
0,CAMEL-5991,Task,Major,2.10.3,2.10.4,"
None
",Resolved,Fixed,2.10.4,Willem Jiang,Christian Müller,0,3,2013-01-21 22:48:32+00:00,2013-01-24 07:20:15+00:00,See http://camel.apache.org/javadoc.html,"njiang:1358899272:2013-01-23T08:01:12.455+0000:1358899272:2013-01-23T08:01:12.455+0000:I deployed the java doc of camel 2.10.0 into the web site.
muellerc:1358900545:2013-01-23T08:22:25.991+0000:1358900545:2013-01-23T08:22:25.991+0000:If I click on the link http://camel.apache.org/maven/current/camel-core/apidocs/index.html on this page, it still shows the Camel :: Core 2.9.0 API Javadoc.
njiang:1358902135:2013-01-23T08:48:55.087+0000:1358902135:2013-01-23T08:48:55.087+0000:It's caused by the browser cache, if you open another browser, you can see the java doc version is changed.
BTW, you can also find more java doc of camel 2.10.0 [here|http://camel.apache.org/maven/camel-2.10.0/]
bvahdat:1358902957:2013-01-23T09:02:37.996+0000:1358902957:2013-01-23T09:02:37.996+0000:Would it be possible to document the required procedure for this on the Wiki (which Apache box, which folder, etc.) so that other committers are also able do the same in case you're in holiday?

http://camel.apache.org/developers.html

Then we could also take over the same steps for adding the missing online schemas:

http://camel.apache.org/schema/

And just a side-question: why not provide the latest & greatest 2.10.3 Javadoc online which I assume would have a better & more precise Javadoc compared to 2.10.0?

njiang:1358918141:2013-01-23T13:15:41.197+0000:1358918332:2013-01-23T13:18:52.053+0000:Now apache web site is managed by svn, you need to check out the camel website from ""https://svn.apache.org/repos/infra/websites/production/camel/content""
If you just want to update the schema you can just check out 
""https://svn.apache.org/repos/infra/websites/production/camel/content/schema""
If you want to update the javadoc you can just checkout 
""https://svn.apache.org/repos/infra/websites/production/camel/content/maven""

I'm already updated the wiki of [release guide| https://cwiki.apache.org/confluence/display/CAMEL/Release+Guide]

As we don't change the API in the patch release, I think use the first major version of java doc should be OK.
muellerc:1358938557:2013-01-23T18:55:57.369+0000:1358938557:2013-01-23T18:55:57.369+0000:Thanks Willem
bvahdat:1358981668:2013-01-24T06:54:28.321+0000:1358981668:2013-01-24T06:54:28.321+0000:Willem, thanks for the update. Regarding my side-question, I think you misunderstood me. What I mean is that the Javadoc of 2.10.3 *IS* more precise, clean and up to date compared to 2.10.0. As all committers (including you) work on it to make it even better and better from day to day we would have a *BETTER* online Javadoc *if* we would make use of 2.10.3.

Nevertheless I'm O.K. with the 2.10.0 online Javadoc as well.  
njiang:1358983215:2013-01-24T07:20:15.917+0000:1358983215:2013-01-24T07:20:15.917+0000:Hi Babak,

I got your point, as I didn't get the Javadoc update progress automatic, it could be handy if we have a maven plugin to do this kind of job. 
I just spent an hour to write a Java programe to generate the shells which could use wget to download doc jars and use jar to extract the files for me."
0,CAMEL-5990,Improvement,Minor,2.10.3,"2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.10.5, 2.11.0",Freeman Yue Fang,Bengt Rodehav,0,1,2013-01-21 18:31:06+00:00,2013-05-02 02:30:00+00:00,"camel-quickfix uses QuickFix/J version 1.5.2. 2012-12-10, QuickFIX/J version 1.5.3 was released.


Version 1.5.3 of QuickFix/J includes support for the latest versions of the Fix standard (Fix 5.0 SP1 and SP2) which is probably important to many.


Note that a request must be made to the servicemix team to create an OSGi'ified version of the jar.",
0,CAMEL-5989,Bug,Major,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Joe Luo,0,3,2013-01-21 16:36:31+00:00,2013-02-08 12:45:24+00:00,"I have a rather simple camel route involving sftp endpoints:
from(""sftp://jluo@192.168.0.196/outbox?password=*****&binary=true&autoCreate=true&move=.done"").to(""sftp://jluo@192.168.0.196/inbox?password=*****&autoCreate=true&binary=true"");


The camel sftp consumer and producer endpoints are pointing to my Mac OSX host (192.168.0.196). When I ran the camel route on Windows machine (here I was using Windows 7 Pro 64-bit OS) to try to use sftp to consume and produce files from/to Mac OSX machine, I got following error:
 15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_NEWKEYS received
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_SERVICE_REQUEST sent
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> SSH_MSG_SERVICE_ACCEPT received
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentications that can continue: publickey,keyboard-interactive,password
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Next authentication method: publickey
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentications that can continue: keyboard-interactive,password
15:46:59,941 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Next authentication method: keyboard-interactive
15:47:00,003 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Authentication succeeded (keyboard-interactive).
15:47:00,003 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Channel isn't connected, trying to recreate and connect.
15:47:00,003 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Connecting use connectTimeout: 10000 ...
15:47:00,034 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | Connected to sftp://jluo@192.168.0.196:22
15:47:00,034 | INFO  | 168.0.196/outbox | SftpConsumer                     |  -  -  | Connected and logged in to: sftp://jluo@192.168.0.196:22
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,034 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | doPollDirectory from absolutePath: outbox, dirName: null
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | changeCurrentDirectory(outbox)
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Changing directory: outbox
15:47:00,034 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | Polling directory: outbox
15:47:00,034 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | listFiles(.)
15:47:00,050 | TRACE | 168.0.196/outbox | SftpConsumer                     |  -  -  | Found 3 in directory: outbox
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | changeCurrentDirectory(/Users/jluo)
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | getCurrentDirectory()
15:47:00,050 | TRACE | 168.0.196/outbox | SftpOperations                   |  -  -  | Changing directory: \
15:47:00,050 | WARN  | 168.0.196/outbox | eFilePollingConsumerPollStrategy |  -  -  | Trying to recover by disconnecting from remote server forcing a re-connect at next poll: sftp://jluo@192.168.0.196:22
15:47:00,050 | DEBUG | 168.0.196/outbox | SftpConsumer                     |  -  -  | Disconnecting from: sftp://jluo@192.168.0.196:22
15:47:00,050 | INFO  | 168.0.196/outbox | SftpOperations                   |  -  -  | JSCH -> Disconnecting from 192.168.0.196 port 22
15:47:00,066 | INFO  | 68.0.196 session | SftpOperations                   |  -  -  | JSCH -> Caught an exception, leaving main loop due to socket closed
15:47:00,066 | WARN  | 168.0.196/outbox | SftpConsumer                     |  -  -  | Consumer Consumer[sftp://jluo@192.168.0.196/outbox?autoCreate=true&binary=true&move=.done&password=******] failed polling endpoint: Endpoint[sftp://jluo@192.168.0.196/outbox?autoCreate=true&binary=true&move=.done&password=******]. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - Cannot change directory to: ]
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: \
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:434)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:407)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.remote.SftpConsumer.pollDirectory(SftpConsumer.java:52)[camel-ftp-2.10.3.jar:2.10.3]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:107)[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:142)[camel-core-2.10.3.jar:2.10.3]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:92)[camel-core-2.10.3.jar:2.10.3]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_33]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_33]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_33]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_33]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_33]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_33]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_33]


I tried to run the same camel route on my Mac OSX host (so it was from Mac OSX -> Mac OSX) and everything worked fine. In another word, running the camel route on an Unix like OS, it worked fine. It looks like a bug was introduced from 2.9.x to 2.10 that relates to Windows since I also tested on Camel 2.9.2 version and when I run the same route on Windows machine with camel 2.9.2, it worked fine though.","jluo:1358757684:2013-01-21T16:41:24.488+0000:1358757684:2013-01-21T16:41:24.488+0000:It looks like very similar as CAMEL-5970 and they might be the same issue though.
davsclaus:1358830585:2013-01-22T12:56:25.501+0000:1358830585:2013-01-22T12:56:25.501+0000:CAMEL-5564 causes this regression.
ay:1358957334:2013-01-24T00:08:54.351+0000:1358957334:2013-01-24T00:08:54.351+0000:Hi Claus,
this issue seems to be unrelated to CAMEL-5574, as it is occurring with no-stepwise mode and when trying to go back to root ""/"" (but incorrectly to ""\""). Whereas CAMEL-5574 only changed the stepwise traversal behavior in 2.10.2. I suspect, if Joe uses the stepwise mode (and likely also with the non-stepwise mode), it will work with 2.10.2 but unfortunately not with 2.10.3 because of rev 1410217 in trunk that changed FileUtil.java. This change interferes with the directory path comparison in SFTPOperations's. And this mismatch was fixed with rev 1424437 in trunk and the current 2.10.4-SNAPSHOT should contains the fix.

Hi Joe,
I may be wrong with my assumption, but can you try your scenario with 2.10.4-SNAPSHOT to see if the problem is resolved? (I think 2.10.2 will also work for you). 

regards, aki

jluo:1359006490:2013-01-24T13:48:10.617+0000:1359006490:2013-01-24T13:48:10.617+0000:Hi, Aki

Yeah, you are right. I tried 2.10.2 and 2.10.4-SNAPSHOT, both versions worked fine on Windows OS. As well as both ""stepwise"" modes ""true|false"" worked fine too on Windows now.

Thanks for the help!

Cheers,
/Joe

davsclaus:1359017569:2013-01-24T16:52:49.173+0000:1359017569:2013-01-24T16:52:49.173+0000:Thanks Aki for digging into this, much appreciated.

"
0,CAMEL-5988,New Feature,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Antonin Stefanutti,James Strachan,1,3,2013-01-21 15:52:47+00:00,2021-04-19 19:08:58+00:00,"This looks a handy way to add a @Startup annotation:
https://gist.github.com/635719


wonder if something like this could be added to Camel for now until CDI 2.0 / JSR 330 v2 has something like this standardised?


Would be nice to be able to easily create eager services that startup immediately","davsclaus:1458695674:2016-03-23T09:14:34.548+0000:1458695674:2016-03-23T09:14:34.548+0000:Antonie I assume we can start apps nicely with cdi today?

antonin.stefanutti:1458711479:2016-03-23T13:37:59.190+0000:1458711490:2016-03-23T13:38:10.019+0000:There are a couple of events that the apps can observe to do some startup but not yet an equivalent of the {{@Startup}} annotation (It's been in discussion for years now :( ).

The Camel CDI extension already has the logic so I wonder whether we could introduce a container-agnostic Camel  annotation that the user could use. That being said, Spring rather uses the opposite logic with {{lazy-init}} defaulting to {{false}} and eagerly pre-instantiates all singleton beans at startup so that may only be applicable to CDI.

I already created https://issues.jboss.org/browse/CDI-473 a long time ago so I'll try to reiterate on it for CDI 2.0.
"
0,CAMEL-5987,Bug,Minor,"2.9.0, 2.10.0","2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-01-21 08:09:45+00:00,2013-01-21 10:00:11+00:00,"The bean processor and bean invocation logic may in cases when the EIP annotations is used on beans, cause the callback to be called twice.


Noticed this problem during investigation of See CAMEL-5905",
0,CAMEL-5986,Improvement,Major,2.11.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Antonin Stefanutti,Karim de Fombelle,1,4,2013-01-20 19:24:01+00:00,2016-01-28 18:08:31+00:00,"Camel-CDI offers a mechanism to resolve property placeholders like  {{property1}} in an endpoint URI as described in camel documentation
These placeholders could come from ConfigSource loaded via the deltaspike configuration CDI extension and its ConfigResolver class according comments on class org.apache.camel.cdi.component.properties.CdiPropertiesParser
Anyway this choice is surprising because the documentation of the org.apache.deltaspike.core.api.config.PropertyFileConfig specifies the following:



 *  <p>Please note that the configuration will only be available
 *  after the boot is finished. This means that you cannot use
 *  this configuration inside a CDI Extension before the boot
 *  is finished!</p>




camel-cdi maven module contains a test class org.apache.camel.cdi.component.properties.PropertiesComponentTest which IMHO does not illustrate the real use we would need in a CDI container.
It shows placeholders replaced after the boot of the CDI container, which is inline with the javadoc above but probably not really useful.



context.resolvePropertyPlaceholders(""{{directEndpoint}}_{{directEndpoint}}"");




But from my standpoint the real benefit would be to use such a feature as follows:



@RunWith(Arquillian.class)
@ApplicationScoped
public class CamelCdiCamel5986Test {

    @Inject
    @Mock(""mock:{{property1}}"")
    private MockEndpoint mockEndpoint;

    @Deployment
    public static Archive<?> createDeployment() {
        JavaArchive jar = ShrinkWrap.create(JavaArchive.class)
                        .addClass(TestRouteBuilder.class)
                        .addClass(CdiConfigFile.class)
                        .addAsResource(""META-INF/camel.properties"")//according CdiConfigFile
                        .addPackages(true, ConfigurationExtension.class.getPackage())
                        .addPackages(true, CdiCamelContext.class.getPackage())
                        .addAsManifestResource(EmptyAsset.INSTANCE, ""beans.xml"");
        return jar;
    }

    //test crashes with a org.jboss.weld.exceptions.DeploymentException (...) Could not add Routes: [Route[[From[direct:begin]] -> [To[mock:{{property1}}]]]]
    @Test
    public void testConfiguration() {
        assertNotNull(""mockEndpoint is null"", mockEndpoint);
    }

    @ContextName
    public static class TestRouteBuilder extends RouteBuilder {

        @Override
        public void configure() throws Exception {
            from(""direct:begin"").to(""mock:{{property1}}"");
        }

    }

    /**
     * Copy of class from camel-cdi test class org.apache.camel.cdi.support.CdiConfigFile
     */
    public static class CdiConfigFile implements PropertyFileConfig {

        private static final long serialVersionUID = 1L;

        @Override
        public String getPropertyFileName() {
            return ""META-INF/camel.properties"";
        }

    }

}




But the test crashes failing to resolve the placeholder {{property1}} with the complete stack stack attached.
Obviously I have a camel.properties file in my classpath, but it is ignored.
Just adding the attached META-INF/apache-deltaspike.properties file in the classpath makes the test green.","muellerc:1358771952:2013-01-21T20:39:12.328+0000:1358771952:2013-01-21T20:39:12.328+0000:Hi Karim,
thanks for reporting. You may not aware of this, but you created a lot of noise. You edited this issue so often, that all people subscribed to issues@camel.apache.org received until now 33 mails [1] - for only one issue!

[1] http://mail-archives.apache.org/mod_mbox/camel-issues/201301.mbox/browser
kawork:1358778737:2013-01-21T22:32:17.451+0000:1358778737:2013-01-21T22:32:17.451+0000:Hi Christian, sorry for the inconvenience (I was not aware, struggling with wiki markup to find syntax for {{{{property1}}}}).
Will pay attention then. 
davsclaus:1439002158:2015-08-08T10:49:18.187+0000:1439002158:2015-08-08T10:49:18.187+0000:Try with latest code as camel-cdi has been improved over the years and also recently.
antonin.stefanutti:1453975706:2016-01-28T18:08:26.814+0000:1453975706:2016-01-28T18:08:26.814+0000:Covered by the example: https://github.com/apache/camel/tree/83d0d1b01db6a6df7953a2a14342367d0775a80c/examples/camel-example-cdi-properties"
0,CAMEL-5985,Bug,Major,None,,"
None
",Resolved,Not A Problem,None,Willem Jiang,Luca Foppiano,0,2,2013-01-20 16:21:09+00:00,2013-01-21 08:48:30+00:00,"Using the last SNAPSHOT from SVN, when I try to test the SearchConsumer of the camel-twitter component I get a ClassCastException on the line 


List<Status> tweets = qr.getTweets();


because the qr.getTweets() return a List<Tweet> and not a List<Status>.","njiang:1358716144:2013-01-21T05:09:04.597+0000:1358716144:2013-01-21T05:09:04.597+0000:Hi, 
I guess you are using some kind of old version of twitter4j lib, as the twitter4j 3.0 getTweets() returns a List<Status>.
Can you double check the version of the twitter4j-core? 
Please make sure you are using the twitter4j 3.0.

Willem
lfoppiano:1358721621:2013-01-21T06:40:21.362+0000:1358721621:2013-01-21T06:40:21.362+0000:Hi Willem, yes, you're right.. I did not realized that I had a explicit dependency on the wrong version... You can close this ticket. 
njiang:1358729310:2013-01-21T08:48:30.834+0000:1358729310:2013-01-21T08:48:30.834+0000:It just a twitter4j library setup issue."
0,CAMEL-5984,Improvement,Minor,2.10.3,,"
None
",Resolved,Fixed,None,Willem Jiang,Luca Foppiano,0,2,2013-01-20 11:13:10+00:00,2013-01-21 08:06:16+00:00,"Would be nice to have a parameter, I choosen 'lang' to specify the language a search on twitter is done. 


Something like twitter://search?keywords=camel&lang=es would return all the twits containing camel in Spanish. There is also a constant that can be used in the headers to change at runtime the language ( TwitterConstants.TWITTER_SEARCH_LANGUAGE = CamelTwitterSearchLanguage)


I have attached a patch for SearchProducer and SearchConsumer.","njiang:1358724832:2013-01-21T07:33:52.966+0000:1358724832:2013-01-21T07:33:52.966+0000:Applied the patch with thanks to Luca. I just the use the ObjectHelper from camel-core to avoid introducing the dependency of common-lang.
njiang:1358725557:2013-01-21T07:45:57.990+0000:1358725557:2013-01-21T07:45:57.990+0000:Updated the wiki page of camel-twitter."
0,CAMEL-5983,Task,Major,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Babak Vahdat,Babak Vahdat,0,1,2013-01-20 10:09:23+00:00,2013-01-21 20:51:45+00:00,"We've got bunch of (negative) tests on the current codebase expecting a thrown XYZException however they don't realize if the expected exception is not thrown, the typical pattern for this is:



try {
 doSomething_With_Expectation_Of_A_Thrown_XYZException();
} catch (XYZException e) {
 // expected
}




Which correctly should be:



try {
 doSomething_With_Expectation_Of_A_Thrown_XYZException();
 fail(""Should have thrown an exception"");
} catch (XYZException e) {
 // expected
}","bvahdat:1358649127:2013-01-20T10:32:07.802+0000:1358649127:2013-01-20T10:32:07.802+0000:Fixed the tests *not* being false-postive on the trunk as well as the 2.10.x brunch:

http://svn.apache.org/viewvc?view=revision&revision=1435812
http://svn.apache.org/viewvc?view=revision&revision=1435814


bvahdat:1358649364:2013-01-20T10:36:04.213+0000:1358649364:2013-01-20T10:36:04.213+0000:Indeed there are 4 false-positive tests on the trunk codebase which I'm attaching to this ticket as *partial* fix. 
bvahdat:1358650283:2013-01-20T10:51:23.525+0000:1358650283:2013-01-20T10:51:23.525+0000:The previous two commits include two {{camel-mongodb}} tests being fixed as well however I could not verify if they are really false-positive or not as a *real* run of them would require a MongoDb installation.
Any committer having such a installation is welcome to verify these tests *truly*.  
bvahdat:1358665893:2013-01-20T15:11:33.290+0000:1358665893:2013-01-20T15:11:33.290+0000:Actually there were even much more tests being affected than I initially thought:

http://svn.apache.org/viewvc?view=revision&revision=1435861
http://svn.apache.org/viewvc?view=revision&revision=1435863
bvahdat:1358666562:2013-01-20T15:22:42.181+0000:1358667313:2013-01-20T15:35:13.111+0000:Updated the attached *partial* patch as well which now includes more negative tests being *effectively* false-positive.
bvahdat:1358760030:2013-01-21T17:20:30.055+0000:1358760030:2013-01-21T17:20:30.055+0000:O.K. already fixed bunch of the tests being attached to this ticket (see {{CAMEL-5983-partial.patch}}). Following the list of the ones which still need to be fixed:

{code}
CxfEndpointUtilsTest
JettyHttpProducerSimulate404ErrorTest
MixedPropagationTransactedTest
TransactionalClientDataSourceMixedTransactedTest
ObjectPoolTest
{code}

Hope to find a free time slot by the next days to fix them as well.

bvahdat:1358772705:2013-01-21T20:51:45.245+0000:1358772705:2013-01-21T20:51:45.245+0000:All the remaining tests being mentioned by the previous post have been now fixed as well."
0,CAMEL-5982,Improvement,Minor,2.10.3,,"
None
",Resolved,Fixed,None,Willem Jiang,Luca Foppiano,0,2,2013-01-20 09:17:57+00:00,2013-01-21 08:07:42+00:00,"Despite filterOld parameter is presented as a generic functionality is not used in the Producer but only in the consumer.


I have attached a patch to use the filterOld in the SearchProducer in order to not present only the new results","njiang:1358726862:2013-01-21T08:07:42.414+0000:1358726862:2013-01-21T08:07:42.414+0000:Applied the patch into trunk with thanks to Luca. I also fixed some issue that the lastId is updated by different thread at the same time.
"
0,CAMEL-5981,Bug,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-01-19 15:42:06+00:00,2014-07-17 14:35:53+00:00,"The Enricher may call callback.done(false) two times if there was an exception during enrichment.


Noticed this problem during investigation of See CAMEL-5905",
0,CAMEL-5980,Improvement,Minor,"2.9.0, 2.10.0",Future,"
None
",Resolved,Invalid,Future,Onder Sezgin,Claus Ibsen,0,6,2013-01-19 08:13:56+00:00,2017-01-26 06:48:53+00:00,"See nabble
http://camel.465427.n5.nabble.com/MailComponent-s-claim-to-handle-special-mail-multipart-formats-and-attachments-tp5724859.html


We should see if we can fix the Camel code to handle those null data.","axelr:1358737966:2013-01-21T11:12:46.763+0000:1358737966:2013-01-21T11:12:46.763+0000:if have tried to strip the email to minimal size, so don't be confused that the PDF attachments can't be opened within the email client.
But this email (file) can be opened and viewed by Outlook and Thunderbird without any errors.

Currently I am using a CustomMailBinding with a modified extractAttachmentsFromMultipart:

...
          if (part.isMimeType(""multipart/*"")) {
              LOG.trace(""Part #"" + i + "": is mimetype: multipart/*"");
              extractAttachmentsFromMultipart((Multipart) part.getContent(), map);
          } else {
              String disposition = """";
              try {
              	disposition = part.getDisposition();
              } catch(ParseException ex) {
              	LOG.trace(""part.getDisposition failed:"", ex);
              }
              String filename = null ;
              try {
              	filename = part.getFileName();
              } catch(ParseException ex) {
              	LOG.trace(""part.getFileName failed:"", ex);
              }
...

because part.getFileName and part.getDisposition seems to fail in this mail.
joesan:1359854163:2013-02-03T09:16:03.609+0000:1359854163:2013-02-03T09:16:03.609+0000:I could try to look into this issue. Do we have a JUnit test that I could use to reproduce this error? Is the MailAttachmentTest.java the right JUnit to reproduce this issue?
axelr:1359855169:2013-02-03T09:32:49.679+0000:1359855169:2013-02-03T09:32:49.679+0000:I don't know the existing Camel tests (I am just using Camel ;-)) but with the following jUnit test I could reproduce the problem: 


	@Test
	public void testEmailFile() throws FileNotFoundException, MessagingException, InterruptedException {

		Properties props = System.getProperties();

		Session mailSession = Session.getDefaultInstance(props, null);

		InputStream source = new FileInputStream(new File(""Exception Mail.eml""));
		MimeMessage message = new MimeMessage(mailSession, source);

		Endpoint endpoint = context.getEndpoint(""pop3:localhost?mapMailMessage=false"");
		Exchange exchange = endpoint.createExchange(ExchangePattern.InOnly);
																																				exchange.setIn(new MailMessage(message));
		exchange.getIn().getAttachments();

		template.send(""direct:email-file"", exchange);
		assertNull(exchange.getException());

		Thread.sleep(2000);
	}

Perhaps this helps.

davsclaus:1359855497:2013-02-03T09:38:17.634+0000:1359855497:2013-02-03T09:38:17.634+0000:Alex and Joe, cool we love contributions.
http://camel.apache.org/contributing.html

Lets put this on the roadmap for the upcoming releases.
muellerc:1359856679:2013-02-03T09:57:59.225+0000:1359856679:2013-02-03T09:57:59.225+0000:And if you are interested in the existing unit tests of camel-mail, you can find it here: https://svn.apache.org/repos/asf/camel/trunk/components/camel-mail/src/test/java/org/apache/camel/component/mail/
joesan:1359857669:2013-02-03T10:14:29.686+0000:1359857669:2013-02-03T10:14:29.686+0000:@Alex: I tried running your test case and below is what I get to see:

org.apache.camel.RuntimeCamelException: Error populating the initial mail message attachments
	at org.apache.camel.component.mail.MailMessage.populateInitialAttachments(MailMessage.java:124)
	at org.apache.camel.impl.DefaultMessage.createAttachments(DefaultMessage.java:209)
	at org.apache.camel.impl.DefaultMessage.getAttachments(DefaultMessage.java:274)
	at org.apache.camel.component.mail.MailAttachmentTest.testEmailFile(MailAttachmentTest.java:120)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:157)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:76)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:195)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:63)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: javax.mail.internet.ParseException: Expected parameter value, got ""null""
	at javax.mail.internet.ParameterList.<init>(ParameterList.java:262)
	at javax.mail.internet.ContentDisposition.<init>(ContentDisposition.java:100)
	at javax.mail.internet.MimeBodyPart.getDisposition(MimeBodyPart.java:1076)
	at javax.mail.internet.MimeBodyPart.getDisposition(MimeBodyPart.java:303)
	at org.apache.camel.component.mail.MailBinding.extractAttachmentsFromMultipart(MailBinding.java:309)
	at org.apache.camel.component.mail.MailBinding.extractAttachmentsFromMail(MailBinding.java:287)
	at org.apache.camel.component.mail.MailMessage.populateInitialAttachments(MailMessage.java:121)
	... 34 more

I will try to debug and see if I could fix this soon.
joesan:1359891417:2013-02-03T19:36:57.800+0000:1359891461:2013-02-03T19:37:41.719+0000:I was not able to analyze the cause for this exception. So I tried to follow a different approach. This is what I tried:

(1) Installed Apache James mail server on my machine
(2) Wrote a simple program to send and receive emails on my localhost (James server)
(3) Used the email attachment as given above.

I do not see any errors in this scenario. Attached is the sample program (EmailTest.java) and the corresponding debug log file (debug_log.txt). Could anyone offer me additional hints on what could be done? 

Thanks for the support!
axelr:1359936496:2013-02-04T08:08:16.206+0000:1359936496:2013-02-04T08:08:16.206+0000:I am not an email expert, but the difference seems to be that you construct essential parts of the mail manually instead of using the mail/file as it is. Maybe the way I did (in the junit test) is wrong but at least I have got the same exception as we have seen on our live system when one of these emails wered received.
As I wrote in the forum the mail isn't a typical mail (and may contain some unusual or perhaps even wrong formats) but it is a mail which was created and forwarded by Outlook and can be red/displayed without errors by Outlook and Thunderbird. So to reproduce the error the mail (in the test) must be constructed as unmodified as possible.
joesan:1359980182:2013-02-04T20:16:22.410+0000:1359980182:2013-02-04T20:16:22.410+0000:I used exactly the same attachment that we have as above to test it. Would it be possible for you to try the attached test program against the email attachment? and let me know the results?
axelr:1360027924:2013-02-05T09:32:04.910+0000:1360027987:2013-02-05T09:33:07.329+0000:EmailExceptionTest.java:
This is junit test I have written with Mock JavaMail (http://java.net/projects/mock-javamail). Perhaps this helps.
davsclaus:1362654775:2013-03-07T19:12:55.026+0000:1362654775:2013-03-07T19:12:55.026+0000:Anyone working on a patch to let camel-mail work around those null values?
rickjdev@gmail.com:1460026036:2016-04-07T18:47:16.259+0000:1460026036:2016-04-07T18:47:16.259+0000:I took a look at this. There are a couple places in MailBinding that can be tweaked to cope with a null file name, but a ParseException is thrown when trying to retrieve the file name parameter list for the ContentDisposition on the message/rfc822 attachment. It looks like we'd just have to catch the exception in MailBinding.extractAttachmentsFromMultipart() and drop the attachment or create a disposition with no parameter list.

The tweaks to MailBinding I tried are just to replace a null attachmentFilename in addAttachmentsToMultipart() with an empty string, and to generate a place holder for the null fileName in extractAttachmentsFromMultipart(), because it's used as a map key.

What do you think?
davsclaus:1460064346:2016-04-08T05:25:46.450+0000:1460064346:2016-04-08T05:25:46.450+0000:Rich yeah that sounds good. You are welcome to work on a patch / PR
http://camel.apache.org/contributing
rickjdev@gmail.com:1460702860:2016-04-15T14:47:40.899+0000:1460702860:2016-04-15T14:47:40.899+0000:Should this work when sending the test email as a MimeMessage in a MailMessage on the Exchange.in? That doesn't look like it can work without a MimeMultipart converter, which breaks other unit tests. The problem is that a converter will not handle the default case of a text/plain message correctly. It expects to not find a converter, and so just return the body, which is the text. But a MimeMessage needs the converter to retrieve the MimeMultipart message body.

There are some other quirks with the sample email I don't understand. For example, the entire message can be retrieved but the ""[Untitled].pdf"" attachment doesn't appear as a body part. However, it's still in the MimeMultipart when I look at it as a string. The other pdf shows up as a separate part. I'm not sure if this is a problem with the email itself, although it looks OK. When I get a chance I'll try isolating that.
rickjdev@gmail.com:1460969230:2016-04-18T16:47:10.154+0000:1460969230:2016-04-18T16:47:10.154+0000:First pass to address the problem. There are TODOs to flag issues that need to be addressed one way or another, depending on feedback. Some cleanup will certainly be needed.
onders:1485300394:2017-01-25T07:26:34.006+0000:1485300394:2017-01-25T07:26:34.006+0000:Hi, I am trying to reproduce the issue,

when i ran the junit case on windows, i see error as below;

java.lang.AssertionError: expected null, but was:<org.apache.camel.component.direct.DirectConsumerNotAvailableException: No consumers available on endpoint: direct://email-file. Exchange[ID-TT10772507-58856-1485328987571-1-2]>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotNull(Assert.java:755)
	at org.junit.Assert.assertNull(Assert.java:737)
	at org.junit.Assert.assertNull(Assert.java:747)
	at org.apache.camel.component.mail.EmailExceptionTest.testEmailFileNew(EmailExceptionTest.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)

then i changed the consuming endpoint as below;

{code}
template.send(""log:logging?level=WARN&showAll=true"", exchange);
{code}

then there is no error.

however, when i ran junit test case on mac(unix), i got the error as Axel mentioned.

I am not sure if this is really a problem.
onders:1485344625:2017-01-25T19:43:45.824+0000:1485379018:2017-01-26T05:16:58.201+0000:tried on mac os once again (being suspicious about the platform) and verify what i saw on windows and mac(yesterday) was correct. It was incorrect. Today i have tried both macos and windows. they all seem ok. i don't think this is reproducible unless somebody else also can try and see the same error as Axel did. Unless nobody can reproduce, i propose the issue got resolved. and please reopen if you can reproduce again. thanks.
axelr:1485384533:2017-01-26T06:48:53.827+0000:1485384533:2017-01-26T06:48:53.827+0000:I am not sure, but it seems that the CAMEL-5980FirstPass.patch (s. attachments) is used (at least) with 2.18. Maybe only parts of it - but dispositions are now verified with the MailBinding.validDisposition method. 
"
0,CAMEL-5979,New Feature,Minor,2.10.3,"2.9.7, 2.10.5, 2.11.0","
None
",Closed,Fixed,"2.9.7, 2.10.5, 2.11.0",Christian Müller,Yogesh Rao,0,3,2013-01-17 10:46:24+00:00,2013-03-13 05:57:43+00:00,"I am facing an issue with camel-quickfix component for the following scenario.


We have a FIX message coming in to the Quickfix/J engine i.e. logon request with only the senderID and TargetID populated and the engine successfully processes the logon request based on the configuration. The subsequent requests for Single Order (Tag # 35 = D) the message received contains the optional values SenderSubID and TargetSubID populated, the message is picked up by the camel component without any issue but its only when a reply has to sent to the sender the component ends up throwing a error i.e. IllegalStateException : Unknown Session... I looked into the code https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/main/java/org/apache/camel/component/quickfixj/QuickfixjConsumer.java and found the issue. The session ID is being reconstructed from the in value being set into the exchange object, which as per API used would construct the session containing SenderID,SenderSubID,TargetID and TargetSubID which is getting compared to the session set during the logon process which only contains the SenderID and TargetID and hence doesn't matches and returns a null. On receiving the null value the code ends up throwing the IllegalStateException. Looking at the QuickFixJConsumer code i do understand the importance of reconstructing the SessionID object from the Message set as Out in Exchange but from what i read about various client implementations on using FIX the above scenario mentioned also holds good. For now I have gone ahead and patched the QuickFixJConsumer code for my project by picking up the session id set in Exchange object rather than recreating it using the MessageUtils. But i feel in a longer run a elegant solution has to be put in place rather than user of camel patching the code up for their use 
In case you need any further details do let me know..","davsclaus:1358392354:2013-01-17T11:12:34.997+0000:1358392354:2013-01-17T11:12:34.997+0000:Please spend more time to format the description so its readable.

Nobody bother to read it and work on the ticket if you dont take the time to make it understandable.
yogu13:1358725302:2013-01-21T07:41:42.273+0000:1358725302:2013-01-21T07:41:42.273+0000:Will try to work on the description but have a issue with the priority reduced to minor. Can you let me why it has been changed. As i see it camel-quickfix right now is not supporting one of the popularly used scenario in FIX domain.
muellerc:1359266197:2013-01-27T13:56:37.578+0000:1359266197:2013-01-27T13:56:37.578+0000:See also the discussion on the users mailing list: http://camel.465427.n5.nabble.com/Camel-QuickFix-Component-issue-td5725622.html
muellerc:1359298553:2013-01-27T22:55:53.739+0000:1359298553:2013-01-27T22:55:53.739+0000:A few questions:
- In trunk, the SessionID is recreated with the in message and not the out message. Could you check whether this issue is still there?
- Can you share your code? How do you solved your issue?
- Can we create the SessionID before we send the exchange to the processor? Than we can store it in the exchange for later usage.
yogu13:1359498374:2013-01-30T06:26:14.063+0000:1359498374:2013-01-30T06:26:14.063+0000:Hello Christian,

Answer to your comments 

1. Yes the issue persists, It was my bad that i mentioned in the description that the SessionID is recreated from out Message whereas i should have written it is being constructed from in message.
2. Yes the only change i have done to the trunk code is instead of 
    SessionID messageSessionID = MessageUtils.getReverseSessionID(exchange.getIn().getBody(quickfix.Message.class));
   I have used is the already created session which is set as part of header, for which the code change is
    SessionID messageSessionID = exchange.getIn().getHeader(""SessionID"",SessionID.class);
 This helps me pick up the same session from which the request had come in. 
3. I think that is already being done. Its just that in the code we trying to recreate a new sessionID instead of using the already set SessionID found as part of the header.

I will modify my description to reflect ""in message"" instead of ""out message"" for tracking purposes. I am also trying to think would there be a scenario wherein the already written code would hold good then perhaps we might have to toggle the SessionID creation based on some property/switch.

Thank you!
 
yogu13:1359888304:2013-02-03T18:45:04.831+0000:1359888304:2013-02-03T18:45:04.831+0000:Christian,

Let me know if my fix is fine.. i can go ahead and check in the changes in camel's svn.
muellerc:1360160764:2013-02-06T22:26:04.043+0000:1360160764:2013-02-06T22:26:04.043+0000:[~yogu13]: Can you attach your path to this ticket so that we can review and apply it?
yogu13:1360553939:2013-02-11T11:38:59.274+0000:1360553939:2013-02-11T11:38:59.274+0000:patch for picking up the session id already set as header instead of recreating it from Message object
yogu13:1360554073:2013-02-11T11:41:13.402+0000:1360554073:2013-02-11T11:41:13.402+0000:christian,

I am assuming you were asking for a patch instead of path.. Please find the patch attached.
yogu13:1362081644:2013-03-01T04:00:44.447+0000:1362081644:2013-03-01T04:00:44.447+0000:Christian,

Any updates on the patch attached ?
yogu13:1362621276:2013-03-07T09:54:36.493+0000:1362621276:2013-03-07T09:54:36.493+0000:Christian,

We are waiting for a fix, is the attached patch any good? please let us know at earliest.

Thank you!
muellerc:1362690936:2013-03-08T05:15:36.279+0000:1362690936:2013-03-08T05:15:36.279+0000:If I apply this patch, two tests failed:
{noformat}
mvn clean install -Psourcecheck
...
processInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.268 sec  <<< FAILURE!
...
setExceptionOnInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.006 sec  <<< FAILURE!
...
Tests run: 42, Failures: 2, Errors: 0, Skipped: 0
{noformat}

Could you please check this.
muellerc:1363103883:2013-03-12T23:58:03.229+0000:1363103883:2013-03-12T23:58:03.229+0000:It's now fixed in trunk (r1455750), camel-2.10.x (r1455752) and camel-2.9.y (r1455760, r1455762).
Could you please verify whether the fix works for you?

And thanks again for the patch...
yogu13:1363125463:2013-03-13T05:57:43.550+0000:1363125463:2013-03-13T05:57:43.550+0000:I have been using the patch in my code long time ago and the code fix has been working for us. We had tampered the camel-quickfix jar for us, now will upgrade the version of camel to check if it works.. This would take time but I am sure should work.

Thank you for the fix...

Cheers!
-Yogesh "
0,CAMEL-5978,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Ralf Steppacher,1,3,2013-01-17 08:58:27+00:00,2013-05-25 14:53:19+00:00,"Camel 2.10 introduced the BridgePropertyPlaceholderConfigurer bean as a replacement of the Spring <context:property-placeholder>.


The latter



may ignore missing property files (ignore-resource-not-found=""true"")
falls back to system properties if a requested property could not be
found in the (potentially non-existent) properties file.



This functionality is not available in the BridgePropertyPlaceholderConfigurer. It would be great if it could be added.",davsclaus:1369464799:2013-05-25T14:53:19.784+0000:1369464799:2013-05-25T14:53:19.784+0000:Yeah already implemented in 2.11.0
0,CAMEL-5977,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-01-16 16:32:32+00:00,2013-01-17 13:55:15+00:00,"Currently when using sql producer it expects the parameters in a given order.
Though if the message body is map based, we can support key'ed style instead of index based.


This allows us to bind t



select * from foo where id = #id# and country = #code#","davsclaus:1358402115:2013-01-17T13:55:15.606+0000:1358402115:2013-01-17T13:55:15.606+0000:The style for named parameters is
{code}
  .to(""sql:select * from projects where license = :#lic and id > :#min order by id"")
{code}

The doc page for SQL component has been updated with examples."
0,CAMEL-5976,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2013-01-16 14:43:39+00:00,2013-01-17 13:45:54+00:00,"The camel-sql component can only produce. We should add support for batch consumer: http://camel.apache.org/batch-consumer.html
Then people can use it for use-cases where they need to pickup new rows from table foo, and after processing the row(s) then delete/mark the rows as processed.


This is a common use-case with JDBC. This is supported by camel-jpa. But would be nice with camel-sql, so people can do this with plain JDBC and SQL queries.",
0,CAMEL-5975,Bug,Major,"2.9.0, 2.10.0","2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-01-16 10:43:41+00:00,2013-01-16 10:54:11+00:00,"For example installing camel-example-jmx in Apache Karaf you get this exception



Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.component.jmx.jaxb"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.internal.bind.v2.ContextFactory.createContext(ContextFactory.java:186)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_37]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_37]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_37]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:143)
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:310)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:412)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:375)
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:279)
	at org.apache.camel.component.jmx.NotificationXmlFormatter.getMarshaller(NotificationXmlFormatter.java:158)
	at org.apache.camel.component.jmx.NotificationXmlFormatter.format(NotificationXmlFormatter.java:130)
	... 48 more",
0,CAMEL-5974,Improvement,Major,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,3,2013-01-16 00:14:12+00:00,2013-02-04 02:19:05+00:00,"DefaultJmsMessageListenerContainer uses org.springframework.core.task.SimpleAsyncTaskExecutor as the default task executor. 


This causes a lot of thread thrash when setting a positive idleTaskExecutionLimit. New threads are created every time the consumers are refreshed, i.e. closed down and started again to keep the minimum number of them around (= concurrentConsumers).


Replace with org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor instead, with the following config:



corePoolSize = concurrentConsumers
maxPoolSize = maxConcurrentConsumers","raulvk:1358267753:2013-01-16T00:35:53.008+0000:1358267753:2013-01-16T00:35:53.008+0000:Fixed in trunk in r1433767, and 2.10.x branch in r1433765.
bvahdat:1358599670:2013-01-19T20:47:50.777+0000:1358599670:2013-01-19T20:47:50.777+0000:This fix causes more than 100 camel-jms unit-tests to fail:

https://builds.apache.org/job/Camel.trunk.fulltest/1195/org.apache.camel$camel-jms/#showFailuresLink

Reverting back the change of this ticket on my workspace makes *all* the camel-jms tests to pass again!

It also causes test failure by other Maven modules as well:

https://builds.apache.org/job/Camel.trunk.fulltest/1195/org.apache.camel$camel-example-loan-broker/testReport/org.apache.camel.loanbroker.queue.version/LoanBrokerQueueTest/testClientInvocation/

Again reverting back r1433767 on my workspace would make this test to pass again.

Could you please take a look at this?
raulvk:1358617124:2013-01-20T01:38:44.735+0000:1358617124:2013-01-20T01:38:44.735+0000:[~bvahdat] - sure. Thanks a lot for the heads-up! I find this strange, because I found it to work on my test system. The regression seems to only affect only InOut invocations. I hope I'll find the time tomorrow to fix it.
davsclaus:1358636344:2013-01-20T06:59:04.171+0000:1358636344:2013-01-20T06:59:04.171+0000:In light of this I would -1 the change on the patch branches as people in production shouldn't be affected. So IMHO any change should only go to the upcoming 2.11 branch.
raulvk:1358652993:2013-01-20T11:36:33.404+0000:1358652993:2013-01-20T11:36:33.404+0000:I reverted the changes on both branches while I drill into what's going on. 

[~davsclaus], I'd like to investigate further before we take a decision. With the current Task Executor, 8 hours of operation with very little messaging traffic gave us a thread thrash of around 40.000 JMS threads created/destroyed - crazy! That's why I believe this enhancement to be beneficial for folks running on 2.10.x too.

I'll keep you updated on the next few days.
raulvk:1359913376:2013-02-04T01:42:56.388+0000:1359915545:2013-02-04T02:19:05.357+0000:Finally decided to create an option called 'defaultTaskExecutorType' which can take values SimpleAsync or ThreadPool, depending on the Task Executor type to use. Backwards functionality is preserved when this option is not specified.
raulvk:1359913514:2013-02-04T01:45:14.688+0000:1359913514:2013-02-04T01:45:14.688+0000:Committed in r1442002 (trunk) and r1442004 (2.10.x branch)."
0,CAMEL-5973,Bug,Minor,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,2,2013-01-15 16:24:35+00:00,2013-01-15 17:07:59+00:00,"Looking into an issue with property placeholder



    <propertyPlaceholder id=""properties"" location=""blueprint:myblueprint.placeholder"" propertiesParserRef=""jasypt""/>",
0,CAMEL-5972,Improvement,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Aaron Whiteside,0,3,2013-01-15 15:46:22+00:00,2013-01-18 14:58:17+00:00,"OsgiServiceRegistry.lookupByType() should use BundleContext.getServiceReferences()


The object name should be retrieved from the service property's. I suggest a property called ""name"".


The filter ""(name=*)"" could be used to only return services with the property name.","njiang:1358447044:2013-01-18T02:24:04.720+0000:1358447044:2013-01-18T02:24:04.720+0000:Applied the patch into trunk.
davsclaus:1358476069:2013-01-18T10:27:49.848+0000:1358476069:2013-01-18T10:27:49.848+0000:This causes a NPE now

{code}
Caused by: org.apache.camel.NoSuchBeanException: Cannot lookup: CamelBeanParameterMappingStrategy from registry: org.apache.camel.core.osgi.OsgiServiceRegistry@7ead510 with expected type: interface org.apache.camel.component.bean.ParameterMappingStrategy due: java.lang.NullPointerException
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:58)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:62)
	at org.apache.camel.component.bean.BeanInfo.createParameterMappingStrategy(BeanInfo.java:149)
	at org.apache.camel.component.bean.BeanInfo.<init>(BeanInfo.java:92)
	at org.apache.camel.component.bean.ConstantBeanHolder.<init>(ConstantBeanHolder.java:44)
	at org.apache.camel.model.language.MethodCallExpression.createExpression(MethodCallExpression.java:184)
	at org.apache.camel.model.language.ExpressionDefinition.createExpression(ExpressionDefinition.java:168)
	at org.apache.camel.model.TransformDefinition.createProcessor(TransformDefinition.java:59)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:459)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:177)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)
	... 20 more
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1310)
	at org.apache.camel.core.osgi.OsgiServiceRegistry.lookup(OsgiServiceRegistry.java:65)
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:49)
	... 30 more
Caused by: java.lang.NullPointerException
	at java.util.concurrent.ConcurrentLinkedQueue.offer(ConcurrentLinkedQueue.java:273)
	at java.util.concurrent.ConcurrentLinkedQueue.add(ConcurrentLinkedQueue.java:237)
	at org.apache.camel.core.osgi.OsgiServiceRegistry.lookup(OsgiServiceRegistry.java:59)
	... 31 more
{code}


davsclaus:1358476818:2013-01-18T10:40:18.337+0000:1358476818:2013-01-18T10:40:18.337+0000:Reverting the 2 commits from this ticket, resolves the NPE.
njiang:1358481388:2013-01-18T11:56:28.705+0000:1358481388:2013-01-18T11:56:28.705+0000:It's my fault, I didn't check the result of the array of ServiceReference array.
I will commit a quick fix for it after running some tests.
davsclaus:1358492297:2013-01-18T14:58:17.657+0000:1358492297:2013-01-18T14:58:17.657+0000:Thanks Willem for the fix"
0,CAMEL-5971,Bug,Major,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Joe Luo,0,2,2013-01-15 13:13:51+00:00,2013-02-01 11:47:03+00:00,"I have a simple camel route that takes file from a camel-file consumer endpoint and sends to a camel-hdfs producer endpoint:


<from uri=""file:/local/workspace/inbox?delete=true""/>
<to uri=""hdfs://localhost:9000/local/workspace/outbox/file1""/>


However, my Hadoop server only creates a zero length file ""file1.opened"" unless I stop camel route or a splitting condition is met with a ""splitStratedy"" option added to URI. In above cases, a file called ""file1"" is created with proper contents and the ""file1.opened"" is disappeared.  


It looks like that close() function of HdfsOutputStream is never called unless the camel route/context is stopping or we are splitting the file by looking at source code.","njiang:1358233256:2013-01-15T15:00:56.538+0000:1358233256:2013-01-15T15:00:56.538+0000:It's not a effective to write the hdfs is we close the stream every time.
Maybe we can consider to add a option to make sure the camel-hdfs producer to close the stream once the producer is finished the processing.
davsclaus:1358300616:2013-01-16T09:43:36.425+0000:1358300616:2013-01-16T09:43:36.425+0000:There is some idle task in the hdfs producer. I would assume that ought to close the stream if the producer is not busy.

Though camel-hdfs is a bit odd. I would have liked it was implemented more like camel-file etc. In fact we have another JIRA ticket about that.
njiang:1358377440:2013-01-17T07:04:00.693+0000:1358377440:2013-01-17T07:04:00.693+0000:Yeah, from the usage of the user, it looks like we need to change the file name dynamically. 
I think most people uses HDFS to store the large size file, so we didn't hit this kind of request before.

davsclaus:1358814066:2013-01-22T08:21:06.922+0000:1358814066:2013-01-22T08:21:06.922+0000:Why is closing a stream not efficient? 

Is the idea to keep the stream open just in case there is a lot of writes to HDFS?
But even if the stream is open, the data must be flushed at some point? Or does HDFS only let ""other parties"" see the file when the stream is closed.
So you can write to the stream 1000 times and only when you close its visibile for other parties?

I dont see a point of keeping the stream open, when the end user has no way of closing it after usage.
Either we should
- always close the stream after writing in the producer
- use some background task to close the stream if idle for more than X
- allow people to explicit close the stream in some way
- add new option: closeStream=true|false which people can turn off|on to have old behavior etc


njiang:1359503420:2013-01-30T07:50:20.695+0000:1359503420:2013-01-30T07:50:20.695+0000:It's not a common practice that we close the HDFS OutputStream and try to append the data later.
It could more easy to make the data is consistent if we just make sure the file is visible for the other parties when the stream is closed.
Here is a page[1] to explain this.
I think when we provide the option of closeStream, I don't think we need to check the append option at the same time.

[1]http://blog.cloudera.com/blog/2009/07/file-appends-in-hdfs/  "
0,CAMEL-5970,Bug,Major,"2.9.5, 2.10.3","2.9.6, 2.10.4","
None
",Resolved,Fixed,"2.9.6, 2.10.4",Claus Ibsen,Yalim Aytul,0,3,2013-01-15 05:29:03+00:00,2013-02-05 19:16:38+00:00,"cd fails on successful connection with 2.10.3 or 2.9.5


sftp endpoint [sftp://sftp-user@127.0.0.1/incoming?disconnect=true&privateKeyFile=sftp-user.ppk&privateKeyFilePassphrase=******]


Below log excerpt is with 2.8.0, cd works and sftp cd command successfully goes into '/home/sftp-user' directory



20130114 18:42:52,956 INFO  [Camel (camel-1) thread #0 - sftp://user@host/outgoing] RemoteFileConsumer[133]: Connected and logged in to: sftp://user@host:22
20130114 18:42:52,956 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[339]: getCurrentDirectory()
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[68]: doPollDirectory from absolutePath: outgoing, dirName: null
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[348]: changeCurrentDirectory(outgoing)
20130114 18:42:52,959 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: outgoing
20130114 18:42:52,966 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[81]: Polling directory: outgoing
20130114 18:42:52,966 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[415]: listFiles(.)
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpConsumer[94]: Found 2 in directory: outgoing
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[348]: changeCurrentDirectory(/home/sftp-user)
20130114 18:42:52,982 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: /
20130114 18:42:52,988 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: home
20130114 18:42:52,994 TRACE [Camel (camel-1) thread #0 - sftp://user@host/outgoing] SftpOperations[389]: Changing directory: sftp-user
20130114 18:42:53,000 DEBUG [Camel (camel-1) thread #0 - sftp://user@host/outgoing] GenericFileConsumer[84]: Took 0.044 seconds to poll: outgoing


Same route fails with 2.95. or 2.10.3 cd command fails.



20130114 19:15:53,530 INFO  [Camel (camel-1) thread #0 - file://../test_outbound/] RemoteFileProducer[193]: Connected and logged in to: Endpoint[sftp://user@host/incoming?disconnect=true&knownHostsFile=env%2FunitTest%2Fknown_hosts&privateKeyFile=env%2FunitTest%2Fkeys%2Fsftp-user.ppk&privateKeyFilePassphrase=******&separator=Auto]
20130114 19:15:53,530 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[305]: buildDirectory(incoming,false)
20130114 19:15:53,530 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[372]: getCurrentDirectory()
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[381]: changeCurrentDirectory(/home/sftp-user)
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[372]: getCurrentDirectory()
20130114 19:15:53,670 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[430]: Changing directory: \
20130114 19:15:53,749 TRACE [Camel (camel-1) thread #0 - file://../test_outbound/] SftpOperations[430]: Changing directory: home
20130114 19:15:53,796 WARN  [Camel (camel-1) thread #0 - file://../test_outbound/] RemoteFileProducer[71]: Writing file failed with: Cannot change directory to: home


Looks like separator is bad but I tried all 3 options (Windows,Unix,Auto)... none worked.","yaytul:1358288044:2013-01-16T06:14:04.986+0000:1358288044:2013-01-16T06:14:04.986+0000:Complete test log file (some names are obfuscated)
davsclaus:1358830615:2013-01-22T12:56:55.158+0000:1358830615:2013-01-22T12:56:55.158+0000:CAMEL-5564 caused this regression.
davsclaus:1358830663:2013-01-22T12:57:43.539+0000:1358830663:2013-01-22T12:57:43.539+0000:If you use Camel 2.9.3 or older then it ought to work.
davsclaus:1359074675:2013-01-25T08:44:35.037+0000:1359074675:2013-01-25T08:44:35.037+0000:Should be fixed in upcoming releases.
yaytul:1359977219:2013-02-04T19:26:59.207+0000:1359977219:2013-02-04T19:26:59.207+0000:Thanks for taking care of this so quickly.
pant_deepak:1360062998:2013-02-05T19:16:38.836+0000:1360062998:2013-02-05T19:16:38.836+0000:Can you please tell me if this could happen in Apache Camel 2.8.4 or 2.8.5 bundled with Apache Service Mix 4.4.1 and 4.4.2 respectively. My routes work most of the times and then once every few days I would see following information logged in the log files.

org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: /home/msftpusr
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:423)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:388)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.remote.SftpOperations.buildDirectory(SftpOperations.java:335)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:243)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:156)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:51)[156:org.apache.camel.camel-ftp:2.8.4]
	at org.apache.camel.impl.converter.AsyncProcessorTypeConverter$ProcessorToAsyncProcessorBridge.process(AsyncProcessorTypeConverter.java:50)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:114)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:284)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:109)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:80)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:318)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:209)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DefaultChannel.process(DefaultChannel.java:306)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:116)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:79)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:139)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:106)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:78)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:98)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:89)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:69)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:353)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:176)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:137)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:138)[91:org.apache.camel.camel-core:2.8.4]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:90)[91:org.apache.camel.camel-core:2.8.4]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)[:1.6.0_31]
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:317)[:1.6.0_31]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:150)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$101(ScheduledThreadPoolExecutor.java:98)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.runPeriodic(ScheduledThreadPoolExecutor.java:180)[:1.6.0_31]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:204)[:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)[:1.6.0_31]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)[:1.6.0_31]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_31]
Caused by: 4: 
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:285)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:421)[156:org.apache.camel.camel-ftp:2.8.4]
	... 60 more
Caused by: java.io.IOException: Pipe closed
	at java.io.PipedInputStream.read(PipedInputStream.java:291)[:1.6.0_31]
	at java.io.PipedInputStream.read(PipedInputStream.java:361)[:1.6.0_31]
	at com.jcraft.jsch.ChannelSftp.fill(ChannelSftp.java:2333)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp.header(ChannelSftp.java:2359)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp._realpath(ChannelSftp.java:1819)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:268)[158:org.apache.servicemix.bundles.jsch:0.1.44.2]
	... 61 more
"
0,CAMEL-5969,Improvement,Major,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Aaron Whiteside,0,2,2013-01-14 18:21:17+00:00,2013-03-13 07:22:37+00:00,"OsgiServiceRegistry to lookup services with filter on name=blah


When using the # bean resolver prefix in plain OSGi (not blueprint) the only way to lookup a service is by specifying the full registered class/interface name of that service.


The OsgiServiceRegistry should also try and lookup a service like the OsgiComponentResolver does using a filter on a service property. I suggest that the filter be on a property called ""name"".


This means the method public <T> T lookup(String name, Class<T> type) should try to lookup the service with the class from the type parameter and filter on ""(name="" + name "")""...",njiang:1363130557:2013-03-13T07:22:37.798+0000:1363130557:2013-03-13T07:22:37.798+0000:The patch was applied into trunk.
0,CAMEL-5968,Bug,Major,2.9.2,"2.9.6, 2.10.5, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.5, 2.11.0",Christian Schneider,Krishnan,0,2,2013-01-14 09:55:59+00:00,2013-02-27 14:06:55+00:00,"We have a simple camel route definied in Java DSL:


from(""wmq:queue:ESB_TEST_IN"").routeId(""IN"").
autoStartup(true).
log(""${body}"");


This route receives JMS messages from a WebLogicJMS queue with name ESB_TEST_IN and logs the body to the log file.
The route works fine when autoStartup is set to true. But when autoStartup is set to false then the creation of the WebLogic InitialContext failed because of an ClassNotFoundException regarding weblogic.jndi.WLInitialContextFactory and the following message is written to the karaf log file:


2012-12-07 12:03:21,502 WARN : DefaultJmsMessageListenerContainer | Setup of JMS message listener invoker failed for destination 'ESB_TEST_IN' - trying to recover. Cause: Destination [ESB_TEST_IN] not found in JNDI; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory [Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory] [org.springframework.jms.listener.DefaultMessageListenerContainer | mer[ESB_TEST_IN] | org.springframework.jms.3.0.7.RELEASE(id=135)]


This issue's related to https://jira.talendforge.org/browse/TESB-7884","cschneider:1358155584:2013-01-14T17:26:24.332+0000:1358155584:2013-01-14T17:26:24.332+0000:I used Weblogic to access ejbs in a POC some time ago. There we had to use the dynamic import feature for the weblogic jars to make it work. So that may be something to try here.
kckcs:1358211914:2013-01-15T09:05:14.134+0000:1358211914:2013-01-15T09:05:14.134+0000:Can you please elaborate on the dynamic import feature usage. Currently the project includes maven-bundle-plugin with configuration->instructions set to 

<Import-Package>*, weblogic.jndi</Import-Package>
<DynamicImport-Package>*</DynamicImport-Package>
cschneider:1358213252:2013-01-15T09:27:32.394+0000:1358213252:2013-01-15T09:27:32.394+0000:Hi Krishnan, your setup look fine. You probably do not even need the Dynamic-Import. I overlooked that you use the karaf command to start the route. I guess the problem is that a different classloader is used when starting the route with the karaf command.
cschneider:1358216829:2013-01-15T10:27:09.567+0000:1358216829:2013-01-15T10:27:09.567+0000:I just looked into the camel karaf commands code but found no classloader stuff there. Can you get me a weblogic jms Installation? Then I will try to debug this.

kckcs:1358221071:2013-01-15T11:37:51.403+0000:1358221071:2013-01-15T11:37:51.403+0000:Hi Christian,

I have emailed you the weblogic installation info. 

Thanks
cschneider:1358470761:2013-01-18T08:59:21.385+0000:1358470761:2013-01-18T08:59:21.385+0000:I tested with the example provided in the TESB issue (unfortunately private). 
When I set the route to autotstart it works. When I start it by hand I get this error:

- retrying in 5000 ms. Cause: JndiObjectTargetSource failed to obtain new target object; nested exception is javax.naming.NoInitialContextException: Cannot instantiate class: weblogic.jndi.WLInitialContextFactory [Root exception is java.lang.ClassNotFoundException: weblogic.jndi.WLInitialContextFactory]

I did a second setup with a second route that feeds messages into the queue and is auto started. When I then start the main route by hand I get a different exception.
On first call or route-start I get the exception on second call no exception happens but it does not work anyway.

2013-01-18 09:52:12,497 | INFO  | l Console Thread | Console                          | 13 - org.apache.karaf.shell.console - 2.2.10 | Exception caught while executing command
java.lang.AssertionError: Class does not implement remote interface
	at weblogic.utils.Debug.assertion(Debug.java:67)
	at weblogic.rmi.internal.StubGenerator.<init>(StubGenerator.java:128)
	at weblogic.rmi.internal.StubGenerator.<init>(StubGenerator.java:85)
	at weblogic.rmi.internal.StubGenerator.hotCodeGenClass(StubGenerator.java:782)
	at weblogic.rmi.internal.StubGenerator.getStubClass(StubGenerator.java:766)
	at weblogic.rmi.internal.StubGenerator.generateStub(StubGenerator.java:793)
	at weblogic.rmi.internal.StubGenerator.generateStub(StubGenerator.java:786)
	at weblogic.rmi.extensions.StubFactory.getStub(StubFactory.java:74)
	at weblogic.rmi.extensions.server.ServerHelper.exportObject(ServerHelper.java:227)
	at weblogic.rmi.internal.wls.CEReferenceHelperImpl.exportObject(CEReferenceHelperImpl.java:20)
	at weblogic.rmi.extensions.PortableRemoteObject.exportObject(PortableRemoteObject.java:34)
	at weblogic.messaging.dispatcher.DispatcherImpl.export(DispatcherImpl.java:85)
	at weblogic.messaging.dispatcher.DispatcherManager.export(DispatcherManager.java:74)
	at weblogic.jms.dispatcher.JMSDispatcherManager.exportLocalDispatcher(JMSDispatcherManager.java:229)
	at weblogic.jms.client.JMSConnectionFactory.setupJMSConnection(JMSConnectionFactory.java:214)
	at weblogic.jms.client.JMSConnectionFactory.createConnectionInternal(JMSConnectionFactory.java:285)
	at weblogic.jms.client.JMSConnectionFactory.createConnection(JMSConnectionFactory.java:191)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.6.0_37]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)[:1.6.0_37]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)[:1.6.0_37]
	at java.lang.reflect.Method.invoke(Method.java:597)[:1.6.0_37]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:309)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:196)
	at $Proxy72.createConnection(Unknown Source)
	at org.springframework.jms.support.JmsAccessor.createConnection(JmsAccessor.java:184)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.createSharedConnection(AbstractJmsListeningContainer.java:403)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.establishSharedConnection(AbstractJmsListeningContainer.java:371)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.establishSharedConnection(DefaultMessageListenerContainer.java:749)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.doStart(AbstractJmsListeningContainer.java:278)
	at org.springframework.jms.listener.AbstractJmsListeningContainer.start(AbstractJmsListeningContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer.start(DefaultMessageListenerContainer.java:555)
	at org.apache.camel.component.jms.JmsConsumer.startListenerContainer(JmsConsumer.java:85)
	at org.apache.camel.component.jms.JmsConsumer.prepareAndStartListenerContainer(JmsConsumer.java:150)
	at org.apache.camel.component.jms.JmsConsumer.doStart(JmsConsumer.java:134)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1723)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2014)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1950)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1878)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1891)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:1773)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:733)
	at org.apache.camel.karaf.commands.RouteStart.doExecute(RouteStart.java:54)
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:38)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.commands.basic.AbstractCommand.execute(AbstractCommand.java:35)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.CommandProxy.execute(CommandProxy.java:78)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:474)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:400)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:183)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:120)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:89)[13:org.apache.karaf.shell.console:2.2.10]
	at org.apache.karaf.shell.console.jline.Console.run(Console.java:173)[13:org.apache.karaf.shell.console:2.2.10]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_37]
2013-01-18 09:52:37,813 | INFO  | l Console Thread | OsgiSpringCamelContext           | 65 - org.apache.camel.camel-core - 2.10.0 | Route: IN started and consuming from: Endpoint[wmq://queue:QueueBJNDI]

kckcs:1358471688:2013-01-18T09:14:48.250+0000:1358471688:2013-01-18T09:14:48.250+0000:We'd then tried to load the classes(connectionfactory,desitinationresolver) invoking within the route's config method to resolve ""Cause: JndiObjectTargetSource failed..""

private void initResolver() {
try { ConnectionFactory cf = (ConnectionFactory) getContext().getRegistry().lookup(""jndiFactoryBean""); Connection con = cf.createConnection(); Session session = con.createSession(false, Session.AUTO_ACKNOWLEDGE); DestinationResolver resolver = (DestinationResolver) getContext().getRegistry().lookup(""jndiDestinationResolver""); resolver.resolveDestinationName(session, ""QueueBJNDI"", false); session.close(); con.close(); } catch (JMSException e) { e.printStackTrace(); }
}

But this workaround is possible only when the server  <property name=""cache"" value=""true"" /> cache's enabled. Also when the server disconnects and reconnects (may be a shutdown or network issue), route doesn't work.
cschneider:1358500581:2013-01-18T17:16:21.938+0000:1358500581:2013-01-18T17:16:21.938+0000:I can confirm now that the problem should be the thread context classloader. When setting this to an invalid classloader I am able to reproduce the problem even outside OSGi. So the solution should be to set the thread context classloader to the classloader of the user bundle before executing the route start in the camel command.
cschneider:1358741212:2013-01-21T12:06:52.032+0000:1358741212:2013-01-21T12:06:52.032+0000:I have developed a patch to the camel commands that solves this problem. Will fine tune it a bit and then add to this issue.
cschneider:1358748324:2013-01-21T14:05:24.918+0000:1358748324:2013-01-21T14:05:24.918+0000:Add a thread context classloader with the bundle classloader in the start command.

The patch is a little larger as I needed to change other methods in CamelController to retrieve the BundleContext.

I also changed the pom to enable deployment with camel 2.9.2 and karaf 2.2.6. These changes would not go into trunk.
cschneider:1358751279:2013-01-21T14:54:39.043+0000:1358751279:2013-01-21T14:54:39.043+0000:Switched to camelContext.getApplicationContextClassLoader() to get hold of the bundle classloader like proposed by Claus. Added the context classloader to stop and resume. 

cschneider:1358755230:2013-01-21T16:00:30.330+0000:1358755230:2013-01-21T16:00:30.330+0000:http://svn.apache.org/viewvc?view=revision&revision=1436431
http://svn.apache.org/viewvc?view=revision&revision=1436432

cschneider:1358756857:2013-01-21T16:27:37.767+0000:1358756857:2013-01-21T16:27:37.767+0000:backported to 2.9.x:
http://svn.apache.org/viewvc?view=revision&revision=1436456
cschneider:1361945215:2013-02-27T14:06:55.135+0000:1361945215:2013-02-27T14:06:55.135+0000:Found that I forgot part of the merge for 2.10.4. I fixed the issue on the 2.10.x branch and marked the issue as solved for 2.10.5.
"
0,CAMEL-5967,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,2,2013-01-14 07:32:39+00:00,2013-03-08 00:53:48+00:00,Current camel transport for CXF only support to specify the camel context reference as an element if we configure the transport from Spring. it could be more handy if we can specify the camel context from the attribute like blueprint support does.,"davsclaus:1358556621:2013-01-19T08:50:21.005+0000:1358556621:2013-01-19T08:50:21.005+0000:Willem you have committed code. Is there any doc updates needed, or any changes end user need to know, eg is this backwards compatible or not?
njiang:1362675228:2013-03-08T00:53:48.300+0000:1362675228:2013-03-08T00:53:48.300+0000:
It's just enhancement to support the same configuration as camel-cxf blueprint does, ppl can still use the old way to configure the reference of camel context.

BTW, I already updated the wiki[1] for it.
[1]http://camel.apache.org/camel-transport-for-cxf.html"
0,CAMEL-5966,Bug,Major,None,None,"
None
",Resolved,Not A Problem,None,Willem Jiang,chenwei,0,2,2013-01-14 07:27:13+00:00,2013-01-16 07:10:53+00:00,"I want to use exchange.getOut().addAttachment(String contentId, DataHandler dh),but I have no way to add a content-disposition header to DataHandler. if camel can provide another method exchange.getOut().addAttachment(String contentId, Attachment att), it would be better.","njiang:1358122588:2013-01-14T08:16:28.533+0000:1358122588:2013-01-14T08:16:28.533+0000:Hi, 

What's the Attachement Object you want to use?
Can you show me an example? I don't quit understand the issue that you just meet.



cww1769:1358124911:2013-01-14T08:55:11.834+0000:1358124911:2013-01-14T08:55:11.834+0000:here is my code:
String contentId = ""id1"";
DataHandler dh = new DataHandler(""hello, world"",""text/plain"");
exchange.getOut().addAttachment(contentId, dh);	

the out message has an attachment with two headers: content-type and content-id, but I want the attachment has other headers like content-disposition. Now, you see, I have no way to add thoes headers.
If there is xchange.getOut().addAttachment(String contnetId, org.apache.cxf.message.Attachment att), then I can set thoese headers.
njiang:1358143024:2013-01-14T13:57:04.795+0000:1358143024:2013-01-14T13:57:04.795+0000:Hi, 
We can not add the CXF related API into the camel Message API, I think you should do it by applying a custom CxfBinding to the camel-cxf endpoint,
or trying to access the Cxf Message from Camel Message headers with the key like this:
{code}
org.apache.cxf.message.Message cxfMessage = in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class);
{code}

Willem
cww1769:1358184312:2013-01-15T01:25:12.331+0000:1358184312:2013-01-15T01:25:12.331+0000:Willem:
thanks for your advice, by the way, what does the ""in"" mean in your code? is it exchange.getIn()
njiang:1358231834:2013-01-15T14:37:14.659+0000:1358231834:2013-01-15T14:37:14.659+0000:Yes, it is the message which you can get from exchange.getIn().

BTW, please send a mail to the user@camel.apache.org before you create a JIRA for it.

This issue is more like a usage issue not the bug of camel.
cww1769:1358291453:2013-01-16T07:10:53.053+0000:1358291453:2013-01-16T07:10:53.053+0000:willem：
thanks， I can only get a NULL by in.getHeader... I will send an email for help. thanks again."
0,CAMEL-5965,Bug,Major,"2.9.6, 2.10.4","2.9.6, 2.10.4","
None
",Resolved,Fixed,"2.9.6, 2.10.4",Claus Ibsen,Christian Müller,0,2,2013-01-13 15:57:16+00:00,2013-02-03 11:57:29+00:00,"christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.10.4-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
...
[INFO]     OK: imports resolved for camel-jmx
[INFO]     OK: imports resolved for camel-ahc
[INFO]     OK: imports resolved for camel-amqp
[INFO]     OK: imports resolved for camel-apns
[WARNING] Failed to validate feature camel-atom
[WARNING] No export found to match org.apache.james.mime4j (imported by mvn:org.apache.abdera/abdera-parser/1.1.3)
[WARNING] No export found to match org.apache.james.mime4j (imported by mvn:org.apache.ws.commons.axiom/axiom-api/1.2.14)
[WARNING] No export found to match org.apache.james.mime4j.stream (imported by mvn:org.apache.ws.commons.axiom/axiom-api/1.2.14)
[WARNING] No export found to match org.apache.james.mime4j.stream (imported by mvn:org.apache.abdera/abdera-parser/1.1.3)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------","muellerc:1358071742:2013-01-13T18:09:02.429+0000:1358071742:2013-01-13T18:09:02.429+0000:Same issue on 2.9.6-SNAPSHOT
davsclaus:1359863849:2013-02-03T11:57:29.564+0000:1359863849:2013-02-03T11:57:29.564+0000:Fixed both 2.9 and 2.10 branches."
0,CAMEL-5964,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Fixed,2.11.0,Christian Müller,Christian Müller,0,3,2013-01-13 15:26:25+00:00,2013-01-13 22:10:14+00:00,"christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
INFO]     OK: imports resolved for camel-smpp
[INFO]     OK: imports resolved for camel-snmp
[INFO]     OK: imports resolved for camel-soap
[INFO]     OK: imports resolved for camel-solr
[INFO]     OK: imports resolved for camel-spring-batch
[WARNING] Failed to validate feature camel-spring-integration
[WARNING] No export found to match org.springframework.retry;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[WARNING] No export found to match org.springframework.classify;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[WARNING] No export found to match org.springframework.retry.support;version=""[1.0.2, 2.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.0.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 24.222s
[INFO] Finished at: Sun Jan 13 14:30:29 CET 2013
[INFO] Final Memory: 12M/81M
[INFO] ------------------------------------------------------------------------","muellerc:1358062889:2013-01-13T15:41:29.932+0000:1358062889:2013-01-13T15:41:29.932+0000:{noformat}
christian-muellers-macbook-pro:features cmueller$ mvn install -Pvalidate
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF-8
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Platforms :: Apache Karaf :: Features 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
...
[INFO]     OK: imports resolved for camel-xmpp
[INFO]     OK: imports resolved for camel-xstream
[INFO]     OK: imports resolved for camel-zookeeper
[INFO] == Done! ==========================
[INFO] 
[INFO] --- maven-site-plugin:3.2:attach-descriptor (attach-descriptor) @ apache-camel ---
[INFO] 
[INFO] --- build-helper-maven-plugin:1.7:attach-artifact (attach-artifacts) @ apache-camel ---
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ apache-camel ---
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ apache-camel ---
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/pom.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/apache-camel/2.11-SNAPSHOT/apache-camel-2.11-SNAPSHOT.pom
[INFO] Installing /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml to /Users/cmueller/.m2/repository/org/apache/camel/karaf/apache-camel/2.11-SNAPSHOT/apache-camel-2.11-SNAPSHOT-features.xml
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
{noformat}
davsclaus:1358068603:2013-01-13T17:16:43.045+0000:1358068603:2013-01-13T17:16:43.045+0000:Its actually this ticket CAMEL-5931
There is a patch for that.

But I think Babak upgraded Spring Integration to 2.2.0 in the mean time.
As I was waiting for Karaf to be able to support Spring 3.1, before being able to apply the patch.

I suggest if you got some time to look at the patch in CAMEL-5931, and see if it can be applied/merged, as there is some other changes as well that could be good to get into the codebase. Fell free to assign the ticket if you have the time.
davsclaus:1358068651:2013-01-13T17:17:31.110+0000:1358068651:2013-01-13T17:17:31.110+0000:And it was Spring Integration 2.2.0 that now requires that spring-retry project. And hence why the features could not validate anymore.
muellerc:1358069679:2013-01-13T17:34:39.747+0000:1358069679:2013-01-13T17:34:39.747+0000:@[~davsclaus]]: adding spring-retry as dependency to the feature file resolved the issue.
davsclaus:1358071547:2013-01-13T18:05:47.346+0000:1358071547:2013-01-13T18:05:47.346+0000:The patch in CAMEL-5931 has *more* than just adding spring-retry. That was my point of suggesting to look at that ticket and merge the patch into the codebase.
bvahdat:1358083126:2013-01-13T21:18:46.852+0000:1358083126:2013-01-13T21:18:46.852+0000:Sorry it was my bad to not check the camel-spring-integration feature while upgrading.
muellerc:1358086214:2013-01-13T22:10:14.763+0000:1358086214:2013-01-13T22:10:14.763+0000:[~bvahdat]: Don't worry. The feature file validates again. I will have a look at CAMEL-5931 as Claus suggested."
0,CAMEL-5963,New Feature,Major,2.10.3,"3.21.0, 4.0-M1, 4.0.0","
None
",Resolved,Fixed,"3.21.0, 4.0-M1, 4.0.0",Yasser Zamani,Christian Müller,6,12,2013-01-13 12:47:38+00:00,2023-01-30 08:59:46+00:00,See http://camel.465427.n5.nabble.com/camel-smpp-in-trx-mode-td5724608.html for details,"davsclaus:1358556672:2013-01-19T08:51:12.570+0000:1358556672:2013-01-19T08:51:12.570+0000:Is this not a new functionality, if so then I suggest to avoid backporting to risk causing regressions and side effects.
mayank.gupta:1371596681:2013-06-19T07:04:41.936+0000:1371596681:2013-06-19T07:04:41.936+0000:Hi Christian , 

In got stuck in using TRx with camel and its show stopper for our current project , you planned to provide fix in this summer 2013 , can you suggest date when will you release fixed version ? Please help me to get out from this problem.

Regards , 
Mayank
muellerc:1371647657:2013-06-19T21:14:17.509+0000:1371647657:2013-06-19T21:14:17.509+0000:I cannot give you dates. I don't know when I can spend my time to work on this issue and get this fixed (I have some more important issues on my list). Also the releases are done by the PMC/committer. It's not only my vote. But I'm confident we get this resolved in summer this year, if we find an solution where the majority agree with (this is the tricky part).

Do you use the smpp component consumer AND producer?
The enhancement for the consumer is simple in my opinion. But for the producer this isn't the case. Imagine the following route definition:
{code:java}
from(""direct:start"")
  .to(""smpp:..."");
{code}

From the camel point of view, you use a producer. But by using TRX, this producer also receives messages.
How we should deal with it? What solution do you have in mind?
Sure, we can register a ""DefaultMessageReceiverListener"" which discards all the messages, but this isn't helpful.
sash_dce@yahoo.com:1371781523:2013-06-21T10:25:23.058+0000:1371781523:2013-06-21T10:25:23.058+0000:The inability of the SMPP component to provide TRX support is stopping many of us to not use the component for USSD as most of the gateways in our region just support TRX( with TX sometimes). Anyhow - since this is in the camel roadmap, I am sure you guys will come out with the functionality enhancement. I would only suggest to do this sooner to increase the acceptance of the component. 

Coming back to the discussion - 
1. I think this will apply both to the consumer and the producer. This will mean  that the binding mode is a configurable item (TRX, TX and RX) defaulting to TX for producer and RX for consumer. 
2. As of now the producer and the consumer both have there own SMPPSession. This session should recide with the endpoint and created  by the createProducer/createConsumer only once in case the mode is TRX ( for other modes it will continue to work as it is ) . 
3. While using a TRX mode, the user will have to create an endpoint and then refer the same in the process ( I am not sure on this part and would need your guidance on the same). 
{noformat}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
  <endpoint id=""trxEndPoint""  uri=""smpp://smppclient@localhost:2775?
           password=password&amp;enquireLinkTimer=3000&amp;transactionTimer=5000&amp;mode=""TRX""/>
  <route>
    <from ref=""trxEndPoint""/>
    <to uri=""jms:incomingOrders""/>
  </route>
  <route>
    <from ref=""jms:incomingOrders""/>
    <to uri=""trxEndPoint""/>
  </route>
</camelContext>
{noformat}

Please guide. 

Thanks, 
Sandeep
hadrian:1384703344:2013-11-17T23:49:04.656+0000:1384703344:2013-11-17T23:49:04.656+0000:Camel could support such a scenario. Christian is right that is rather unusual. The Camel model does not preclude one from having consumers and producers sharing a session. There is one caveat to this, it may be possible to have some constraints on the routes, i.e. one must always have multiple routes and respond to messages in a certain way. That however would be a protocol constraint, not camel per se. The configuration of what messages go where would be done via uri configuration.

Unfortunately, I don't have access to a service/account that would allow me to properly test this, but if users are really interested in this feature, please ping here and we could do it together.
doikor:1429146934:2015-04-16T09:15:34.862+0000:1429146934:2015-04-16T09:15:34.862+0000:Hi I'm interested in getting the TRX functionality working with camel-smpp. I could do some testing against a simulator and if its working try out it against an actual SMSC system. Though everything I've done against both the selenium-software SMPPSim (http://www.seleniumsoftware.com/user-guide.htm) and OpenSmpp (https://github.com/OpenSmpp/opensmpp) simulators has worked in real production use.
chathuraka.waas@gmail.com:1470781570:2016-08-10T06:26:10.701+0000:1470781570:2016-08-10T06:26:10.701+0000:Hi, i'm working on a project having this exact issue. My SMSC provider is only providing me a connections with TRX and i'm unable to connect. I dont have much knowladge on Apache Camel SMPP component. But i can help you guys to test a fix since i already have the SMCS details with me. Let me know if there's anything i can do to get this fix up. 
almailer:1470877763:2016-08-11T09:09:23.551+0000:1470877763:2016-08-11T09:09:23.551+0000:Hi,

I'm also interested in the possibility of TRX mode in camel-smpp (which is really nice btw, thanks!)

My proposed approach would be:

a new producer URI parameter ""transceiverPublishUri"" which specifies 
1) that the producer session will bind with type TRX
2) the producer will register a message listener in which a ProducerTemplate will be used to publish any received messages to the URI specified in the URI parameter.

In this case, an example transceiver route would look like:

{code}
from(""direct:in"")
  .to(""smpp://123@localhost:8065?transceiverPublishUri=direct:transceiverOut"");

from(""direct:transceiverOut"")
  .log(""Received a incoming message (e.g. a delivery receipt)"")
  .stop();
{code}

I'm only just getting started with Camel, so I don't know if this approach has drawbacks. The positives I see is that it should be a small change which is backwards compatible, and it is very clear what will be happening to the messages being returned by the transceiver session. In most cases, where users want just to be able to transmit short messages in a transceiver session, the trivial stop() route will be sufficient for their needs. If there is some long-running processing to do on receipt of a delivery receipt, it can be made asynchronous with a SEDA endpoint (again, up to the consumer of the component to choose according to their needs).

I have access to a SMSC simulator and possibly access to some real SMPP systems for testing, so could report on how that goes. I would appreciate feedback on the approach though.
skshhi:1474928770:2016-09-27T06:26:10.338+0000:1474928770:2016-09-27T06:26:10.338+0000:I am also facing the same problem. My SMSC provider also provides me only TRX connection.
nitin.m.gupt:1528846229:2018-06-13T07:30:29.149+0000:1528846229:2018-06-13T07:30:29.149+0000:Please mention the workaround in Camel (if any) as this has become a show stopper for me as well.
davsclaus:1662079300:2022-09-02T08:41:40.727+0000:1662079300:2022-09-02T08:41:40.727+0000:Any in the community can help with this?
yasserzamani:1671948961:2022-12-25T14:16:01.958+0000:1671948961:2022-12-25T14:16:01.958+0000:[~davsclaus] yes I have some free times and like to work on adding this feature :) should I assign to myself?

[~muellerc]  I guess it would be possible via a hash map storing sessions at component level. In general, once a producer or consumer endpoint with enabled TRX is going to be instantiated, it checks that hash map if there is already a session with its specific URI ID. If so then it uses that component level session (obviously it creates a new one if not). So simply Camel users should understand that they will loose incoming messages if they haven't defined a consumer with same URI ID.
davsclaus:1671955117:2022-12-25T15:58:37.379+0000:1671955117:2022-12-25T15:58:37.379+0000:Yes you are welcome to assign. Muller no longer works on Apache Camel
yasserzamani:1672212147:2022-12-28T15:22:27.120+0000:1672212147:2022-12-28T15:22:27.120+0000:Hi all. PR provided. Please see its description for more info. Please test if it's still possible for you. thanks!
davsclaus:1672219160:2022-12-28T17:19:20.251+0000:1672219160:2022-12-28T17:19:20.251+0000:Thanks for the PR we will look at it. Can you update the documentation (see src/main/docs) it would be good to have a section about this new feature.
yasserzamani:1672272700:2022-12-29T08:11:40.505+0000:1672272700:2022-12-29T08:11:40.505+0000:Thanks for heads up! Yes that's what I wasn't sure about where to put documentation. I guessed that it is generated automatically from java method comments so I documented it there at [https://github.com/apache/camel/pull/8955/files#diff-11288280d1ad5bd000c4cf593bd19b90dc2fbd9ebb96d5af3ade049d42d80020R599]

Am I right? I hope I'll see them in uri parameters table in docs automatically, right?

 

But anyway yes thatnks for providing the location where I can add a section for more details. I'll add them.
yasserzamani:1672376514:2022-12-30T13:01:54.085+0000:1672376514:2022-12-30T13:01:54.085+0000:[~davsclaus] thanks, done :)

 "
0,CAMEL-5962,Improvement,Minor,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-01-12 14:36:58+00:00,2013-01-13 15:20:33+00:00,"Loading resources from xslt using XsltResourceLoader should fallback and use same scheme prefix as configured on endpoint, if no prefix is given.


eg if you configure the endpoint to be file based, then includes which has no prefix, should be file based as well.


Currently we fallback always to classpath, which covers most use case. But if the end user are using file then it doesnt make sense to fallback to classpath.",
0,CAMEL-5961,New Feature,Major,2.10.3,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Ramkumar KB,8,5,2013-01-12 14:30:08+00:00,2019-07-05 03:47:08+00:00,"It would great to have a camel-dropwizard component. The details on dropwizard can be found here:



http://dropwizard.codahale.com/
Github: https://github.com/codahale/dropwizard



Since Dropwizard works off a standard JVM (w/o the need of an app-server) and same holds good for Camel, a camel-dropwizard integration would make AppServer reduntant for serving RESTful webservices with Enterprise Integration (Dropwizard internally uses a highly tuned variant of Jetty for HTTP).


Even a camel with Metrics could be a good idea to collect JVM metrics about different routes. https://github.com/codahale/metrics 


Any thoughts or comments?","davsclaus:1359341129:2013-01-28T10:45:29.297+0000:1359341129:2013-01-28T10:45:29.297+0000:Yeah at first glance this could be a good idea.

Users listening on this. Remember to use the JIRA voting system. And of course fell free to comment. Or work on such a component. We love contributions.
aldrinleal:1388849460:2014-01-04T23:31:00.627+0000:1388849502:2014-01-04T23:31:42.635+0000:Not sure how Dropwizard would integrate with Camel (since Dropwizard is based on Guice, and Camel's Guice Support is, as we say in Brazil, ""mais feio que bater na mãe""), but here's what I've made using Spring instead, to measure Exchange Events of interest

https://gist.github.com/aldrinleal/8262171

Note it depends on a kludge to tag those exchanges. In my routes, I define the CamelMetricSuffix Exchange Property (as shown in the gist)

(Besides that, we're using metrics-spring - https://github.com/ryantenney/metrics-spring#maven)
If there's enough interest to turn this into a Camel Module, just let me know. I do have a CLA ready.

Thanks


njiang:1388948161:2014-01-06T02:56:01.764+0000:1388948161:2014-01-06T02:56:01.764+0000:I like the way you use Metric to monitor the Exchange states, we can create a new component for it.

If you want to work with Dropwizard, you can take a look at the [camel-restlet|http://camel.apache.org/restlet.html] or [camel-cxfrs|http://camel.apache.org/cxfrs.html], these component just route the REST request to the Camel router and Camel doesn't care if you uses Spring or Guice to do the DI work.

aldrinleal:1388957766:2014-01-06T05:36:06.381+0000:1388957766:2014-01-06T05:36:06.381+0000:Interesting. I used to think that Dropwizard required Guice, but instead, it doesn't depend on any DI Container at all.

I'll think about it"
0,CAMEL-5960,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Claus Ibsen,0,3,2013-01-12 11:57:07+00:00,2013-03-06 14:38:14+00:00,"We have id, camelId etc. It would be nice with a routeId, so people easily can grab the route id, such as doing logging etc.



  from(...)
     .log(""Routing at ${routeId} with payload ${body}"")
     ...




See
http://camel.apache.org/simple","aynalem:1362481986:2013-03-05T19:13:06.295+0000:1362481986:2013-03-05T19:13:06.295+0000:please review patch at: https://github.com/apache/camel/pull/14
njiang:1362506634:2013-03-06T02:03:54.174+0000:1362506634:2013-03-06T02:03:54.174+0000:Applied patch with thanks to Matthew.
davsclaus:1362551894:2013-03-06T14:38:14.460+0000:1362551894:2013-03-06T14:38:14.460+0000:Remember to update the simple documentation with this new function
http://camel.apache.org/simple"
0,CAMEL-5959,Improvement,Minor,2.10.0,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-01-12 11:33:59+00:00,2013-01-12 12:20:23+00:00,"See
http://camel.465427.n5.nabble.com/Retrieve-failed-Route-from-deadLetterChannel-tp5725420.html


We should store the route id where we failed, this allows end users to get that as a detail if they route to another route as part of DLC. You can get the current route, but if you let DLC be a route, then its that route you get, and not the route that failed.


So we need to store this as part of the RedeliveryErrorHandler logic inside camel-core.


We do have failed endpoint store already. eg if it failed sending a message to an endpoint. But we lack the route id.","davsclaus:1357963662:2013-01-12T12:07:42.836+0000:1357963662:2013-01-12T12:07:42.836+0000:Added a note to the docs at
https://cwiki.apache.org/confluence/display/CAMEL/Dead+Letter+Channel"
0,CAMEL-5958,Improvement,Minor,2.10.3,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Luca Burgazzoli,1,5,2013-01-11 15:37:23+00:00,2021-04-16 05:07:59+00:00,"It looks like camel-bindy does not take into account the class specified in the method:


    bindy(BindyType.Csv, MyCamelBeans.TEST.class)


I have class MyCamelBeans which includes several ""bindies"" among which I have a really simple MyCamelBeans.TEST:


    class MyCamelBeans {
        @CsvRecord(separator="";"",isOrdered=true)
        public static final class TEST 

{
            @DataField(trim=true,pos=  1) public String tradingDate;
            @DataField(trim=true,pos=  2) public String isinCode;
        }


        ... some other @CsvRecord ....
    }


I also have some @FixedLengthRecord classes defined in the same package.
If I run the following route:


    from(""file:data/test?noop=true&idempotent=true&fileName=test.csv&delay=60000"")
        .split(body(String.class).tokenize(""\n"")).streaming()
        .unmarshal().bindy(BindyType.Csv, MyCamelBeans.TEST.class)
        .to(""log:DS?level=INFO&showHeaders=true"");


Camel (2.10.3) fails with an NPE:


    java.lang.NullPointerException
            at org.apache.camel.dataformat.bindy.BindyCsvFactory.setDefaultValuesForFields(BindyCsvFactory.java:583)
            at org.apache.camel.dataformat.bindy.BindyCsvFactory.bind(BindyCsvFactory.java:230)


if I remove the other bindies, camel-bindy works as expected. 


Looking at the code, I've found that in BindyAbstractFactory.java :


    /**



method uses to initialize the model representing the classes who will
bind the data. This process will scan for classes according to the
package name provided, check the annotated classes and fields.
     *
@throws Exception
     */
    public void initModel() throws Exception 
Unknown macro: {        // Find classes defined as Model        if (packageNames != null)  {
            initModelClasses(this.packageNames);
        } else if (type != null) {
            // use the package name from the type as it may refer to types in the same package
            String pckName = type.getPackage().getName();
            initModelClasses(pckName);
        } else {
            throw new IllegalArgumentException(""Either packagenames or type should be configured"");
        }    } 



Looks like bindy scan the package even a class has been specified. 


Accordin to Claus, bindy needs to be refactored so it



requires the class type (no more packages)
uses the class type as root model
... and initializes the model from the root, and follow and
references to other classes (if the root has childs)



This avoids picking up any other models.
And we would know to marshal/unmarshal based on the root.","lb:1387348176:2013-12-18T14:29:36.235+0000:1387348176:2013-12-18T14:29:36.235+0000:I've committed some work to my camel fork on github : 
https://github.com/lburgazzoli/camel/commit/34e05bce2b0b8c708a8a8de673f1d7ece28519af

There still are some test cases to fix and some code is still a little rough but I would greatly appreciate any feedback.  
njiang:1388691251:2014-01-03T03:34:11.786+0000:1388691251:2014-01-03T03:34:11.786+0000:Hi Luca,

I just reviewed the patch, you removed the package support of BindyCsvFactory. 
I think it could be better if we deprecate the API first, then use the class type directly when user specify it.

Regards,

Willem
lb:1388711308:2014-01-03T09:08:28.447+0000:1388711308:2014-01-03T09:08:28.447+0000:Hi Willem,
I've removed the package support camel-wide (e.g. org.apache.camel.builder.DataFormatClause).

The patch's target was Camel 3.0 (or any version on which you can break API compatibility) but I can check if I can re-introduce the package support. One of the issues I see is that as today camel-bindy returns a Map<?,?> of models (even if a class is used as source for models) so in the current test cases: 

Map<?, ?> map = (Map<?, ?>) mock.getReceivedExchanges().get(0).getIn().getBody(List.class).get(0);
WeatherModel model = (WeatherModel) map.values().iterator().next();

After my patch:

WeatherModel model = mock.getReceivedExchanges().get(0).getIn().getBody(WeatherModel.class);

I see two options:
1) re-introduce the package support, deprecate the API and construct a Map<?,?> of models even if the user specify a class
2) apply the patch to a camel version on which API compatibility can be broken
 
Let me know and I'll work on it :-)


githubbot:1411185339:2014-09-20T11:55:39.847+0000:1411185339:2014-09-20T11:55:39.847+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/83

githubbot:1411205448:2014-09-20T17:30:48.004+0000:1411205448:2014-09-20T17:30:48.004+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/271

    CAMEL-5958: Bindy ignores bean class type

    re-build PR against latest sources

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/camel CAMEL-5958

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/271.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #271
    
----
commit 1c293a9c7083ed593a706f42ae6da7247741d9a9
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-10-27T15:04:33Z

    CAMEL-5958: Bindy ignores bean class type (initial work)

commit 402f911aaaf3ddaebdad2b143557bd0179813721
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-06T14:07:11Z

    Merge remote-tracking branch 'upstream/master'

commit ab71ee66d0f69369fa76d09d4a75159b24215c5f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-06T21:07:18Z

    Merge remote-tracking branch 'upstream/master'

commit 54440df7c2afefe7324bd5e235c693ccc12e8cff
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-06T21:17:23Z

    CAMEL-5958: Bindy ignores bean class type (initial work)

commit 8d8e9cb8624cd54354dab12b843b82a94cc14baa
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-07T15:55:11Z

    Merge remote-tracking branch 'upstream/master'

commit 08c97b5030687abf551a61ee7905465632927081
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-10T19:02:43Z

    Merge remote-tracking branch 'upstream/master'

commit 095202dc8ee0d551381f275383f4d8afc9d5ac14
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-22T10:14:58Z

    Merge remote-tracking branch 'upstream/master'

commit ce4e7928904abaa321a1e13e48e7d4f83ec428c2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-24T17:19:34Z

    Merge remote-tracking branch 'upstream/master'

commit c1005b5731b3eecbe1d56aa3692707b3ed3bf56f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-26T09:58:21Z

    Merge remote-tracking branch 'upstream/master'

commit 1b5c9be1affcfd80484071ec5da310733ed53f78
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-26T17:01:28Z

    CAMEL-5958: Bindy ignores bean class type (some more work)

commit ab2719e2b6253a0114ec284b4fdfce15851ebb7c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-29T21:46:27Z

    CAMEL-5958: Bindy ignores bean class type: load models recursively

commit 2657ac1ba1099867132854780d7901c84fcb439d
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-12-17T13:16:37Z

    Merge remote-tracking branch 'upstream/master'

commit 34e05bce2b0b8c708a8a8de673f1d7ece28519af
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-12-18T14:03:34Z

    CAMEL-5958: Bindy ignores bean class type

commit 8a2457896aa4f49246463f1c8b9f9e1736d3d08b
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-12-18T15:57:51Z

    CAMEL-5958: Bindy ignores bean class type

commit a6c89854ed13cabe263ad653b4c01299d7ece919
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2014-09-20T11:54:57Z

    Merge branch 'master' into CAMEL-5958

commit 3aeed745fa1603da13512008070a9e8231ac5e07
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2014-09-20T17:29:48Z

    CAMEL-5958: Bindy ignores bean class type

----

davsclaus:1417649151:2014-12-04T07:25:51.926+0000:1417649151:2014-12-04T07:25:51.926+0000:I think we should schedule this for Camel 3.0 where we can refactor camel-bindy - and drop the old package name and package scan approach. 
githubbot:1438419438:2015-08-01T16:57:18.575+0000:1438419438:2015-08-01T16:57:18.575+0000:Github user ke4qqq closed the pull request at:

    https://github.com/apache/camel/pull/271

lb:1438575585:2015-08-03T12:19:45.912+0000:1438575585:2015-08-03T12:19:45.912+0000:I saw that the [PR|https://github.com/apache/camel/pull/271] has been closed, is there a date by which you'd expect to release a new version of camel that can incorporate the PR ? If good enough of course :-)
githubbot:1438838793:2015-08-06T13:26:33.220+0000:1438838793:2015-08-06T13:26:33.220+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/586

    CAMEL-5958: Bindy ignores bean class type

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/camel CAMEL-5958

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/586.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #586
    
----
commit 1c293a9c7083ed593a706f42ae6da7247741d9a9
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-10-27T15:04:33Z

    CAMEL-5958: Bindy ignores bean class type (initial work)

commit 402f911aaaf3ddaebdad2b143557bd0179813721
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-06T14:07:11Z

    Merge remote-tracking branch 'upstream/master'

commit ab71ee66d0f69369fa76d09d4a75159b24215c5f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-06T21:07:18Z

    Merge remote-tracking branch 'upstream/master'

commit 54440df7c2afefe7324bd5e235c693ccc12e8cff
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-06T21:17:23Z

    CAMEL-5958: Bindy ignores bean class type (initial work)

commit 8d8e9cb8624cd54354dab12b843b82a94cc14baa
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-07T15:55:11Z

    Merge remote-tracking branch 'upstream/master'

commit 08c97b5030687abf551a61ee7905465632927081
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-10T19:02:43Z

    Merge remote-tracking branch 'upstream/master'

commit 095202dc8ee0d551381f275383f4d8afc9d5ac14
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-22T10:14:58Z

    Merge remote-tracking branch 'upstream/master'

commit ce4e7928904abaa321a1e13e48e7d4f83ec428c2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-24T17:19:34Z

    Merge remote-tracking branch 'upstream/master'

commit c1005b5731b3eecbe1d56aa3692707b3ed3bf56f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-26T09:58:21Z

    Merge remote-tracking branch 'upstream/master'

commit 1b5c9be1affcfd80484071ec5da310733ed53f78
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-26T17:01:28Z

    CAMEL-5958: Bindy ignores bean class type (some more work)

commit ab2719e2b6253a0114ec284b4fdfce15851ebb7c
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-11-29T21:46:27Z

    CAMEL-5958: Bindy ignores bean class type: load models recursively

commit 2657ac1ba1099867132854780d7901c84fcb439d
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-12-17T13:16:37Z

    Merge remote-tracking branch 'upstream/master'

commit 34e05bce2b0b8c708a8a8de673f1d7ece28519af
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-12-18T14:03:34Z

    CAMEL-5958: Bindy ignores bean class type

commit 8a2457896aa4f49246463f1c8b9f9e1736d3d08b
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2013-12-18T15:57:51Z

    CAMEL-5958: Bindy ignores bean class type

commit a6c89854ed13cabe263ad653b4c01299d7ece919
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2014-09-20T11:54:57Z

    Merge branch 'master' into CAMEL-5958

commit 3aeed745fa1603da13512008070a9e8231ac5e07
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2014-09-20T17:29:48Z

    CAMEL-5958: Bindy ignores bean class type

commit 95edacb6a6f3a106e4569ed65ee0f86109388d4b
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-06-07T18:04:04Z

    Upgrade QuickFIX-J to version 1.6.0

commit 4a008d9cf2931f2d9c76b2f916cad8df25158fff
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-06-07T18:48:02Z

    Merge remote-tracking branch 'upstream/master' into CAMEL-5958

commit fa2afe2f80b8b83de69dc224badf756228603f6d
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-01T20:44:26Z

    Merge branch 'master' of github.com:lburgazzoli/camel

commit 9744d3593d9e75c974742e774c56f8c62bd520f5
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-01T21:51:10Z

    Merge remote-tracking branch 'upstream/master'
    
    Conflicts:
    	components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjComponentTest.java
    	components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/QuickfixjEngineTest.java

commit c523e5644d7eeb8ff4f236a6cca32c602482c6ec
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-21T20:33:01Z

    Merge remote-tracking branch 'upstream/master'

commit ece0643a8c7124131c5171d51973a02e74da8fea
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-21T20:34:42Z

    Merge branch 'master' into CAMEL-5958

commit 6bb2f2d6ca9610546bc6bcd70bde264e3e0a479a
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-21T20:45:59Z

    merge main codebase

commit 80121f94f63e60497353733c19ace5d4b574bb95
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-22T13:32:39Z

    CAMEL-5958 : merge main codebase

commit 88aef642f298560bb603ee2e05338da0f6791607
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-22T13:33:20Z

    Merge remote-tracking branch 'upstream/master'

commit 373bf34ebedefed8b28ba55129b8efa40b5a9408
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-22T13:33:38Z

    Merge branch 'master' into CAMEL-5958

commit d0bd39eb57ac3deaad08a686c510717150cf4fec
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-07-29T13:27:43Z

    Merge branch 'master' into CAMEL-5958

commit 048fa3a692ceb6c19b880ac1ff7d66ab113389eb
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-08-01T17:33:55Z

    Merge branch 'master' of github.com:lburgazzoli/camel

commit f09613d35dadd28702ec8bda1e61385e7888c6f7
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-08-01T17:34:29Z

    Merge remote-tracking branch 'upstream/master'

commit 23e5ab8876be711282c51d4d8d74a3e686089fae
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2015-08-04T16:12:11Z

    Merge remote-tracking branch 'upstream/master'

----

davsclaus:1438909967:2015-08-07T09:12:47.549+0000:1438909967:2015-08-07T09:12:47.549+0000:Luca, thanks for the hard work on this. There was a lot of code changes to make this work.

githubbot:1438910861:2015-08-07T09:27:41.645+0000:1438910861:2015-08-07T09:27:41.645+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/586

lb:1438911066:2015-08-07T09:31:06.964+0000:1438911722:2015-08-07T09:42:02.869+0000:Camel has deserved me well in some project so I'm more than happy to contribute back some code"
0,CAMEL-5957,Bug,Major,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Benoit REILHES,0,2,2013-01-11 13:26:10+00:00,2013-01-18 16:13:51+00:00,"See nabble :
http://camel.465427.n5.nabble.com/Bug-with-completionSize-on-AggregatorProcessor-td5725364.html","davsclaus:1357964519:2013-01-12T12:21:59.660+0000:1357964519:2013-01-12T12:21:59.660+0000:Benoit, thanks for reporting. Are you working on a patch?
davsclaus:1358496831:2013-01-18T16:13:51.874+0000:1358496831:2013-01-18T16:13:51.874+0000:Thanks for reporting."
0,CAMEL-5956,Bug,Major,None,2.13.0,"
None
",Resolved,Not A Problem,2.13.0,Claus Ibsen,Claus Ibsen,1,1,2013-01-11 09:34:49+00:00,2013-11-12 10:46:43+00:00,"See nabble
http://camel.465427.n5.nabble.com/Proxy-BeanInvocations-turning-into-first-class-payloads-tp5724721.html",
0,CAMEL-5955,Improvement,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Willem Jiang,0,1,2013-01-11 02:20:40+00:00,2013-01-11 02:53:24+00:00,"We need the LocalAddress just as the camel-mina provides.
It is useful for resolving the issue of CAMEL-5951.","njiang:1357844004:2013-01-11T02:53:24.838+0000:1357844004:2013-01-11T02:53:24.838+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5954,Improvement,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Willem Jiang,0,2,2013-01-11 01:34:31+00:00,2013-01-11 08:06:05+00:00,The LanguageExpression and ScriptBuilder don't bind the same variables which could be used to access from Exchange. It could be better if they are using the same variables for script user.,"njiang:1357845546:2013-01-11T03:19:06.177+0000:1357845546:2013-01-11T03:19:06.177+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.
davsclaus:1357861158:2013-01-11T07:39:18.537+0000:1357861158:2013-01-11T07:39:18.537+0000:I think there were some languages/templates that have ""in"" as reserved word etc. So just need to take precaution if adding ""in"" by default.
I am not sure though if the script will fail to compile/evaluate, or its just that people cannot use ""in"" but would have to use ""request"" instead.


njiang:1357861756:2013-01-11T07:49:16.625+0000:1357861756:2013-01-11T07:49:16.625+0000:@Claus,
yes, ""in"" could cause some trouble, I will add some test to verify it and polish the patch it is needed.
njiang:1357862765:2013-01-11T08:06:05.942+0000:1357862765:2013-01-11T08:06:05.942+0000:Just found the javascript and python are using ""in"" as the key words.
So we need to avoid the ""in"" variable at this time."
0,CAMEL-5953,Bug,Major,2.10.3,None,"
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Raúl Kripalani,0,4,2013-01-10 20:57:30+00:00,2013-02-04 08:13:16+00:00,"This routing code leads to the exception below:



from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""log:test"")
            .unmarshal().xstream().endChoice()
        .otherwise()
            .to(""log:test"")
        .end();




Exception:



Caused by: java.lang.ClassCastException: org.apache.camel.model.RouteDefinition cannot be cast to org.apache.camel.model.ChoiceDefinition
	at org.apache.camel.model.ProcessorDefinition.endChoice(ProcessorDefinition.java:1256)
	at com.mycompany.MyRoute.configure(MyRoute.java:40)
	at org.apache.camel.builder.RouteBuilder.checkInitialized(RouteBuilder.java:322)
	at org.apache.camel.builder.RouteBuilder.configureRoutes(RouteBuilder.java:276)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:262)
	[...]




Also happens if we try to add another when instead of an otherwise.


Tried using end(), endParent(), but they all lead to the same exception.","bvahdat:1357906634:2013-01-11T20:17:14.134+0000:1357906634:2013-01-11T20:17:14.134+0000:I just quickly looked at this and IMHO it's a regression caused by CAMEL-4044. For example if you would revert one of the changes made there for {{ProcessorDefinition}} (line 1215 on trunk) where:

{code}
if (defn instanceof TryDefinition) {
{code}

has been changed to:

{code}
if (defn instanceof TryDefinition || defn instanceof ChoiceDefinition) {
{code}

Then your route would be fine without any nasty {{ClassCastException}}. However it's not that easy as this change would cause some existing {{camel-core}} tests to fail, *mainly* at the places where the code has been changed through CAMEL-4044 itself. As Claus has already mentioned there that fix has a poor code coverage.
njiang:1357932595:2013-01-12T03:29:55.649+0000:1357932595:2013-01-12T03:29:55.649+0000:To workaround this issue, you can use the direct endpoint to break the main route to some smaller routes.
{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""direct:unmarshal"")
        .otherwise()
            .to(""log:test"")
        .end();

from(""direct:unmarshal"").to(""log:test"")
            .unmarshal().xstream();
{code}
davsclaus:1357964736:2013-01-12T12:25:36.389+0000:1357964873:2013-01-12T12:27:53.035+0000:See this FAQ
http://camel.apache.org/why-can-i-not-use-when-or-otherwise-in-a-java-camel-route.html

You can do this
{code}
from(""direct:abc"")
    .choice()
        .when(simple(""${body} == 'Please do not fail'""))
            .to(""log:test"")
            .unmarshal(new XStreamDataFormat())
        .otherwise()
            .to(""log:test"")
        .end();
{code}
davsclaus:1359865566:2013-02-03T12:26:06.218+0000:1359865566:2013-02-03T12:26:06.218+0000:I found a possible solution."
0,CAMEL-5952,Bug,Major,2.11.0,None,"
None
",Resolved,Not A Problem,None,Willem Jiang,Moulliard Charles,0,2,2013-01-10 17:35:23+00:00,2013-01-11 09:37:17+00:00,"When we would like to authenticate a user using camel-spring-security & camel-cxf, we get the following message even if we have been able to retrieve a Subject from CamelExchange (see screenshot).



Class SpringSecurityPolicyAutorization

    ...

    protected Authentication getAuthentication(Message message) {

        Subject subject = message.getHeader(Exchange.AUTHENTICATION, Subject.class); // NOT NULL - SEE SCREENSHOT

        Authentication answer = null;
        if (subject != null) {
            answer = getAuthenticationAdapter().toAuthentication(subject);
        }
        
        // ANSWER IS NULL as the following code return null in     DefaultAuthenticationAdapter

    public Authentication toAuthentication(Subject subject) {
        if (subject == null || subject.getPrincipals().size() == 0) {
            return null;
        }
        Set<Authentication> authentications  = subject.getPrincipals(Authentication.class);
        
        // IN OUR CASE, the Set size is equal to zero
        if (authentications.size() > 0) {
            // just return the first one 
            return authentications.iterator().next();
        } else {
            return convertToAuthentication(subject);
        }
    }

    /**
     * You can add the customer convert code here
     */
    protected Authentication convertToAuthentication(Subject subject) {
        return null;        
    }




Camel Route Config



<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xmlns:cxf=""http://camel.apache.org/schema/cxf""
       xmlns:spring-security=""http://www.springframework.org/schema/security""
       xsi:schemaLocation=""
        http://www.springframework.org/schema/beans
  		  http://www.springframework.org/schema/beans/spring-beans.xsd
	    http://www.springframework.org/schema/security
	      http://www.springframework.org/schema/security/spring-security.xsd
  		http://camel.apache.org/schema/spring
		  http://camel.apache.org/schema/spring/camel-spring.xsd
		http://camel.apache.org/schema/spring-security
		   http://camel.apache.org/schema/spring-security/camel-spring-security.xsd
		http://camel.apache.org/schema/cxf
		  http://camel.apache.org/schema/cxf/camel-cxf.xsd"">

    <bean id=""accessDecisionManager"" class=""org.springframework.security.access.vote.AffirmativeBased"">
        <property name=""allowIfAllAbstainDecisions"" value=""true""/>
        <property name=""decisionVoters"">
            <list>
                <bean class=""org.springframework.security.access.vote.RoleVoter""/>
            </list>
        </property>
    </bean>

    <spring-security:authentication-manager alias=""authenticationManager"">
        <spring-security:authentication-provider user-service-ref=""userDetailsService""/>
    </spring-security:authentication-manager>

    <spring-security:user-service id=""userDetailsService"">
        <spring-security:user name=""jim"" password=""jimspassword"" authorities=""ROLE_USER, ROLE_ADMIN""/>
        <spring-security:user name=""charles"" password=""charlespassword"" authorities=""ROLE_USER, ROLE_ADMIN""/>
        <spring-security:user name=""bob"" password=""bobspassword"" authorities=""ROLE_USER""/>
    </spring-security:user-service>

    <authorizationPolicy id=""admin"" access=""ROLE_ADMIN""
                         authenticationManager=""authenticationManager""
                         accessDecisionManager=""accessDecisionManager""
                         xmlns=""http://camel.apache.org/schema/spring-security""/>

    <cxf:cxfEndpoint id=""WS""
                     address=""http://localhost:9090/training/WebService""
                     serviceClass=""com.fusesource.training.CustomerService"">
        <cxf:outInterceptors>
            <ref bean=""loggingOutInterceptor""/>
        </cxf:outInterceptors>
        <cxf:inInterceptors>
            <ref bean=""loggingInInterceptor""/>
            <ref bean=""wss4jInInterceptor""/>
        </cxf:inInterceptors>
    </cxf:cxfEndpoint>

    <bean id=""loggingOutInterceptor"" class=""org.apache.cxf.interceptor.LoggingOutInterceptor""/>
    <bean id=""loggingInInterceptor"" class=""org.apache.cxf.interceptor.LoggingInInterceptor""/>

    <bean id=""wss4jInInterceptor"" class=""org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"">
        <constructor-arg>
            <map>
                <entry key=""action"" value=""UsernameToken Timestamp""/>
                <entry key=""passwordType"" value=""PasswordDigest""/>
                <entry key=""passwordCallbackClass"" value=""com.fusesource.training.camel.UTPasswordCallback""/>
            </map>
        </constructor-arg>
    </bean>

    <camelContext trace=""false"" xmlns=""http://camel.apache.org/schema/spring"">
        <route id=""cxf-to-client"">
            <from uri=""cxf:bean:WS""/>
            <policy ref=""admin"">
               <log message="">>> SOAP Action : ${in.header.SOAPAction}""/>
            </policy>
        </route>
    </camelContext>


</beans>","cmoulliard:1357861841:2013-01-11T07:50:41.899+0000:1357861841:2013-01-11T07:50:41.899+0000:Here is the trick tobe done when we detect that we get something from CXF, ....

{code}
    protected Authentication convertToAuthentication(Subject subject) {
        Authentication answer = null;
        for (Principal principal : subject.getPrincipals()) {
            if (principal instanceof WSUsernameTokenPrincipal) {
                WSUsernameTokenPrincipal ut = (WSUsernameTokenPrincipal) principal;
                answer = new UsernamePasswordAuthenticationToken(ut.getName(), ut.getPassword());
                break;
            }
        }
        return answer;
    }

}
{code}
njiang:1357864681:2013-01-11T08:38:01.297+0000:1357864681:2013-01-11T08:38:01.297+0000:Hi Charles,

There is an integration test[1] with the CXF WS-Security and Spring Security in the camel.
As you already figured out, we need to convert the Subject which is get from CXF to the Spring security understands AuthenticationToken.

[1]https://svn.apache.org/repos/asf/camel/trunk/tests/camel-itest/src/test/java/org/apache/camel/itest/security
cmoulliard:1357868237:2013-01-11T09:37:17.401+0000:1357868237:2013-01-11T09:37:17.401+0000:Question : Where this conversion should take place ? Which component should be responsible or that transformation ?
1) camel-spring-security component 
2) SecurityPolicy (to be created and used byt camel-spring-security) including a typeConverter 
3) By the project using it"
0,CAMEL-5951,Bug,Major,"2.10.2, 2.10.3",None,"
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Steven Scott,0,3,2013-01-10 16:30:45+00:00,2013-01-19 06:55:24+00:00,"in Rfc3164SyslogDataFormat, the remoteAddress of the SyslogMessage is set from the Mina or Netty headers. There's a copy/paste error for Netty: it correctly checks for the existence of the CamelNettyRemoteAddress header, but then attempts to set the remoteAddress from a CamelMinaRemoteAddress header.


(there's no camel-syslog component in JIRA)","njiang:1357845596:2013-01-11T03:19:56.203+0000:1357845596:2013-01-11T03:19:56.203+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.
codingismy11to7:1358323387:2013-01-16T16:03:07.618+0000:1358323387:2013-01-16T16:03:07.618+0000:Another copy/paste error - set the message.remoteAddress instead of localAddress from the NETTY_LOCAL_ADDRESS (at least on 2.10.x branch where I was looking)
codingismy11to7:1358323556:2013-01-16T16:05:56.306+0000:1358323556:2013-01-16T16:05:56.306+0000:actually, looking at the camel-netty code in 2.10...it looks like netty doesn't provide any local address info (see NettyConstants and NettyEndpoint.createExchange)
njiang:1358444944:2013-01-18T01:49:04.696+0000:1358444944:2013-01-18T01:49:04.696+0000:Hi Steven,

Did you have chance to checkout the latest camel-2.10.x branch?
I backported the patch of CAMEL-5955 into 2.10.x branches. You should be able to get the  NETTY_LOCAL_ADDRESS from message header. Can you double check it?

Willem
codingismy11to7:1358498139:2013-01-18T16:35:39.329+0000:1358498173:2013-01-18T16:36:13.098+0000:Sorry, I didn't know CamelNettyLocalAddress got added - I was looking at 2.10.2, not the latest code

the ""message.setRemoteAddress(exchange.getIn().getHeader(""CamelNettyLocalAddress"", String.class));"" typo still applies though

thanks!
davsclaus:1358502722:2013-01-18T17:52:02.164+0000:1358502722:2013-01-18T17:52:02.164+0000:Steven, is there still a problem with the latest code on the 2.10 branch?
codingismy11to7:1358502819:2013-01-18T17:53:39.171+0000:1358502819:2013-01-18T17:53:39.171+0000:yes

https://fisheye6.atlassian.com/browse/camel/trunk/components/camel-syslog/src/main/java/org/apache/camel/component/syslog/Rfc3164SyslogDataFormat.java?r=1431820

line 57: the remote address of the message is set from the netty local address instead of the message's local address
codingismy11to7:1358502904:2013-01-18T17:55:04.369+0000:1358502904:2013-01-18T17:55:04.369+0000:I linked to trunk, but the same line is in 2.10.x and 2.9.x
njiang:1358548837:2013-01-19T06:40:37.531+0000:1358548837:2013-01-19T06:40:37.531+0000:Hi Steven,

It's my bad, I didn't update the code after I copy past it.
I just commit a quick fix for it, please feel free to check out the code and verify it.
"
0,CAMEL-5950,Bug,Major,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Alexandre Gattiker,0,2,2013-01-10 15:13:47+00:00,2013-01-11 07:17:56+00:00,"from(""direct:causeFailure"")
		.split().body().parallelProcessing()
		.setHeader(CacheConstants.CACHE_OPERATION, constant(CacheConstants.CACHE_OPERATION_DELETEALL))
		.to(""cache://MyTestCache"");





 		String[] body = new String[] { ""a"", ""b"" };
		template.sendBody(body);





net.sf.ehcache.ObjectExistsException: Cache MyTestCache already exists
	at net.sf.ehcache.CacheManager.addCacheNoCheck(CacheManager.java:1294)
	at net.sf.ehcache.CacheManager.addCache(CacheManager.java:1184)
	at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:137)
	at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:56)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:709)
	at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:80)
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:290)
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:275)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)","njiang:1357859611:2013-01-11T07:13:31.632+0000:1357859611:2013-01-11T07:13:31.632+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.
agattiker:1357859876:2013-01-11T07:17:56.877+0000:1357859876:2013-01-11T07:17:56.877+0000:That was super fast. Thank you very much!"
0,CAMEL-5949,Bug,Minor,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2013-01-10 12:47:49+00:00,2013-01-10 13:17:12+00:00,"We should not have default values for <errorHandler> in the XML DSL as when looking at the model at runtime, these values would be set, and appear as in use.


The <errorHandler> is a bit special as its for configuring all the error handlers. Which mean the default level = ERROR option will in the model be as if the end user configured level = ERROR which is only supported on the logging error handler, and not the others etc. Causing problem.


The logging error handler builder has already default values, so its safe to remove the redundant default value from the model.",
0,CAMEL-5948,Bug,Minor,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Babak Vahdat,Babak Vahdat,0,1,2013-01-10 11:48:38+00:00,2013-01-10 20:58:51+00:00,"See the thread here:


http://camel.465427.n5.nabble.com/Question-camel-cxf-amp-CXF-MESSAGE-td5725227.html",bvahdat:1357822731:2013-01-10T20:58:51.163+0000:1357822731:2013-01-10T20:58:51.163+0000:The new behaviour now is (instead of a thrown {{ClassCastException}}) that the returned {{Iterator}} iterates over the corresponding Java primitive wrapper objects of the given elements inside the passed primitive type array object.
0,CAMEL-5947,Task,Major,None,None,"
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2013-01-10 08:47:52+00:00,2013-01-11 02:14:38+00:00,as abdera 1.1.3 is finally out so we needn't bind to old axiom 1.2.10,"ffang:1357841678:2013-01-11T02:14:38.482+0000:1357841678:2013-01-11T02:14:38.482+0000:commit fix
http://svn.apache.org/viewvc?rev=1431781&view=rev for trunk
http://svn.apache.org/viewvc?rev=1431788&view=rev for 2.10.x branch
http://svn.apache.org/viewvc?rev=1431806&view=rev for 2.9.x branch"
0,CAMEL-5946,Improvement,Major,2.10.3,,"
None
",Closed,Invalid,None,Unassigned,Raúl Kripalani,0,2,2013-01-09 17:20:51+00:00,2013-01-09 18:40:13+00:00,"If you enable stream caching on the Camel context, you cannot disable it on a per-route basis with Java DSL. It is possible with Spring DSL, nevertheless.","bvahdat:1357726714:2013-01-09T18:18:34.296+0000:1357726714:2013-01-09T18:18:34.296+0000:This's indeed possible, see the second route [here|https://svn.apache.org/repos/asf/camel/trunk/camel-core/src/test/java/org/apache/camel/processor/StreamCachingPerRouteTest.java].

raulvk:1357727984:2013-01-09T18:39:44.231+0000:1357727984:2013-01-09T18:39:44.231+0000:[~bvahdat] Thanks for that reference! It looks like this option is not documented.

I'll go ahead and document it.
"
0,CAMEL-5915,Task,Minor,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,2,2012-12-28 03:32:32+00:00,2013-01-07 14:38:44+00:00,camel-spring-test has the classes from the camel-test which is caused by it exports the wrong package.,"njiang:1356665407:2012-12-28T11:30:07.326+0000:1356665407:2012-12-28T11:30:07.326+0000:The patch is reverted as it is not good solution.
There are some discussion about the patch[1]

[1]http://camel.465427.n5.nabble.com/Re-svn-commit-r1426385-camel-trunk-components-camel-test-spring-pom-xml-td5724658.html
davsclaus:1357529127:2013-01-07T11:25:27.728+0000:1357529127:2013-01-07T11:25:27.728+0000:Willem I assume this is now fixed as part of the removal of the old junit3 based classes from camel-test?
njiang:1357540699:2013-01-07T14:38:19.263+0000:1357540699:2013-01-07T14:38:19.263+0000:yeah, this issue should be resolved."
0,CAMEL-5914,Task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Dejan Bosanac,0,2,2012-12-27 15:45:00+00:00,2012-12-28 19:38:04+00:00,"Hi, just wondering if web-console-standalone should be in the distro or not. According to the docs, it should, but I'm not so sure as it's a pretty big. Anyhow, I'll attach the patch if it's supposed to be in or change a docs to point people where they can find it if not.","davsclaus:1356680577:2012-12-28T15:42:57.441+0000:1356680577:2012-12-28T15:42:57.441+0000:Yeah we should not included it in the distro. I have updated the docs to point to download from maven central.

The standalone web console doesn't make much sense as it cannot manage any Camel app in a container, but only what you got in the same WAR.

Camel 3.x will have a new console that is lighter and more versatile.
dejanb:1356694684:2012-12-28T19:38:04.385+0000:1356694684:2012-12-28T19:38:04.385+0000:Thanks Claus, I was playing with the REST api exposed by the console and noticed this. I agree it's too bulky for distribution."
0,CAMEL-5913,Bug,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,1,2012-12-27 12:50:41+00:00,2015-02-15 17:08:16+00:00,"Notice this test
org.apache.camel.component.jetty.JettyHttpGetWithParamAsExchangeHeaderTest#testHttpGetWithISO8859EncodedParamsViaURI


It was set as @Ignore, and it revealed a possible double encoding issue with uri parameters, if you have already decimal encoded it.",davsclaus:1358495334:2013-01-18T15:48:54.323+0000:1358495334:2013-01-18T15:48:54.323+0000:This only applies to the http/http4/jetty components
0,CAMEL-5912,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,2,2012-12-27 12:47:50+00:00,2013-05-02 02:29:59+00:00,"See CAMEL-5458


A new urlRewrite option allows to plugin custom rewriters.
This allow people to write their own, or use what we offers out of the box, such as a new camel-urlrewrite component that uses the http://www.tuckey.org/urlrewrite/ project.","dejanb:1356590221:2012-12-27T14:37:01.724+0000:1356590221:2012-12-27T14:37:01.724+0000:There's just a small typo

{code}diff --git a/components/pom.xml b/components/pom.xml
index 09e33ab..332b774 100644
--- a/components/pom.xml
+++ b/components/pom.xml
@@ -161,7 +161,7 @@
     <module>camel-syslog</module>
     <module>camel-tagsoup</module>
     <module>camel-twitter</module>
-    <module>camel-urlrewite</module>
+    <module>camel-urlrewrite</module>
     <module>camel-velocity</module>
     <module>camel-websocket</module>
     <module>camel-xmlbeans</module>{code}
davsclaus:1356680365:2012-12-28T15:39:25.945+0000:1356680365:2012-12-28T15:39:25.945+0000:There is no Karaf features yet, until we get an osgi bundle. I have logged a SMX ticket."
0,CAMEL-5911,New Feature,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,2,2012-12-26 08:52:41+00:00,2015-08-13 08:04:33+00:00,"When using seda/vm queues, you may have 0..n active consumers. 


There may be use-cases where you want to discard a message if there is no current active consumers to process the message.","davsclaus:1369892835:2013-05-30T13:47:15.617+0000:1369892835:2013-05-30T13:47:15.617+0000:This is a bit more tough as the consumers/producers may have different uris, eg you may only set ?discardOnNoConsumers=true on the producer side. That means there is two endpoints in play. One for the consumer, and another for the producer. And therefore its harder from the producer to figure out if there is any active consumers.

As it should be tied to the queue, and not endpoint. This requires a little API change and a bit more code refactoring to support.
solimo:1388929936:2014-01-05T21:52:16.204+0000:1388929936:2014-01-05T21:52:16.204+0000:I think your concerns are no longer valid, because code has been improved since May 2013, so both VM (stripting uri arguments) and SEDA (queue reference) can be easily associated with consumers. Please, take a look at solution on [GitHub|https://github.com/rbudzko/camel/commit/9a8c280cdf471a31f0358e2b1e84ca8df9159545]."
0,CAMEL-5910,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,2,2012-12-26 08:42:24+00:00,2012-12-27 13:10:02+00:00,"Current MailProducer doesn't store the Mail message into the camel message header which cause some truble when the user want to access the message id[1].


[1] http://camel.465427.n5.nabble.com/How-To-Get-The-SMTP-Message-ID-tp5724581.html","davsclaus:1356567875:2012-12-27T08:24:35.380+0000:1356567875:2012-12-27T08:24:35.380+0000:Willem remember to add a note in the mail doc page about this new header in *Camel 2.11*
njiang:1356585002:2012-12-27T13:10:02.010+0000:1356585002:2012-12-27T13:10:02.010+0000:Applied the patch into trunk and updated the wiki page."
0,CAMEL-5909,Task,Minor,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2012-12-23 09:36:31+00:00,2014-08-23 07:04:53+00:00,"jsendnsca 2.1.0 will be an OSGi bundle out of the box. Just need to get that released and on a maven repo.


The code in camel-nagios need to be migrated.","davsclaus:1356229845:2012-12-23T10:30:45.474+0000:1356229845:2012-12-23T10:30:45.474+0000:See
https://code.google.com/p/jsendnsca/issues/detail?id=31"
0,CAMEL-5908,Bug,Major,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Willem Jiang,Igor Azarny,0,2,2012-12-23 08:53:49+00:00,2012-12-29 10:31:01+00:00,"Websocket consumer cannot be started for simple route 
        <camel:route>
            <camel:from uri=""websocket://localhost:9998/cnt""/>
            <camel:to uri=""stream:out""/>
        </camel:route>


Root cause:


Websoket component has not serlvet object. 


WebsoketComponent#line:170
// Don't provide a Servlet object as Producer/Consumer will create them later on
connectorRef = new ConnectorRef(server, connector, null);


WebsoketComponent#line:190
if (prodcon instanceof WebsocketConsumer) {
      // connect websocket consumer, to servlet
      connectorRef.servlet.connect((WebsocketConsumer) prodcon);
}


Stack trace is:
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.websocket.WebsocketComponent.connect(WebsocketComponent.java:192)
        at org.apache.camel.component.websocket.WebsocketEndpoint.connect(WebsocketEndpoint.java:90)
        at org.apache.camel.component.websocket.WebsocketConsumer.start(WebsocketConsumer.java:36)
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:1763)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2059)
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:1995)
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:1923)
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1702)
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1583)
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)
        at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)
        at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)
        at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)",njiang:1356389289:2012-12-25T06:48:09.085+0000:1356389289:2012-12-25T06:48:09.085+0000:Applied the patch into trunk and 2.10.x branch.
0,CAMEL-5907,Bug,Minor,2.10.0,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Daniel Gredler,0,2,2012-12-22 02:55:50+00:00,2013-01-02 07:11:40+00:00,"We have embedded Camel in an EAR that we deploy to Weblogic. The Camel context is configured via Spring:



    <camelContext id=""camel"" handleFault=""true"" autoStartup=""{{autoStartup}}"" xmlns=""http://camel.apache.org/schema/spring"">
        <contextScan />
        <jmxAgent id=""camelAgent"" createConnector=""true"" registryPort=""{{jmxPort}}"" />
    </camelContext>



You can see that we create a JMX connector to allow for remote management.


However, we have run into PermGen space issues, because our application is leaking class loaders when the application is undeployed or redeployed.


After digging around (and addressing some Jasper Reports ThreadLocal sloppiness), it appears that the only issue left is that the sun.rmi.transport.ObjectTable class maintains a static reference to all available RMI targets. Unfortunately, one of these targets is the JMX connector created by Camel, which was obviously loaded via our application's classloader.


Thus, ObjectTable has a static reference to the Camel JMX RMI target, which has a reference to the app's class loader, which in turn has references to all classes loaded (and generated) for that single deployment of the application – and none of these classes can be GC'ed.


After digging through the code for Camel's DefaultManagementAgent, I'm inclined to believe that the fix is fairly simple:



Update createJmxConnector(String) to cache the reference to the created Registry in an instance variable.




Update doStop() to check if we have a cached Registry instance, and if we do, call UnicastRemoteObject.unexportObject(registry, true);



Some app servers have workarounds for this sort of leak (see ""RMI targets"" in Table 1 at [1]), but Weblogic doesn't seem to.


I'll also attach a screenshot of the memory analysis (more info at [2]).


[1] http://pic.dhe.ibm.com/infocenter/wasinfo/v8r5/index.jsp?topic=%2Fcom.ibm.websphere.express.doc%2Fae%2Fctrb_memleakdetection.html


[2] http://www.yourkit.com/docs/kb/class_loaders.jsp","davsclaus:1356147211:2012-12-22T11:33:31.712+0000:1356147211:2012-12-22T11:33:31.712+0000:Thanks for reporting.

Would you be able to work on a patch with your suggested fix?

There is a bit information about how to create and contribute patches at:
http://camel.apache.org/contributing.html
sdanig:1356295290:2012-12-24T04:41:30.889+0000:1356295290:2012-12-24T04:41:30.889+0000:Yep, no problem. I've contributed a couple of patches before :-)

I'm including a unit test that verifies that the registry is cleaned up when the Camel context is stopped. The class that I added the test to doesn't really run the tests if you're on Windows, so watch out for that!
davsclaus:1357081900:2013-01-02T07:11:40.358+0000:1357081900:2013-01-02T07:11:40.358+0000:Thanks for the patch."
0,CAMEL-5906,New Feature,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-12-21 13:45:49+00:00,2013-01-04 13:14:40+00:00,"I have been toying with this idea for a while. And years ago I think we had a JIRA ticket similar to this.


As Camel can run without Spring we ought to have a simple way of starting/stopping a CamelContext in a web-app without using Spring.


For example using a servlet listener. And then have servlet-init parameters to configure the camel context, and refer to route builders and whatnot.


Yes in the future CDI and other frameworks will also help with this. But that takes time to mature and for ppl to get familar to use. And web containers to support etc.


Servlets is supported by any container and also old school containers.","davsclaus:1356068762:2012-12-21T13:46:02.945+0000:1356068762:2012-12-21T13:46:02.945+0000:See also
http://stackoverflow.com/questions/13965874/using-apache-camel-in-a-web-application-without-using-spring
davsclaus:1357263658:2013-01-04T09:40:58.310+0000:1357263658:2013-01-04T09:40:58.310+0000:There is a new camel-servletlistener component for this.
I also create a new example: servlet-tomcat-no-spring to showcase it.
davsclaus:1357276480:2013-01-04T13:14:40.245+0000:1357276480:2013-01-04T13:14:40.245+0000:Updated docs as well."
0,CAMEL-5905,Bug,Minor,2.10.0,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-21 11:52:45+00:00,2013-01-21 12:17:58+00:00,"I noticed a situation with a negative in-flight counter.


Seems related to situations with handling an exception. Will have to dig deeper. Just wanted to log a JIRA.",davsclaus:1358741878:2013-01-21T12:17:58.595+0000:1358741878:2013-01-21T12:17:58.595+0000:Fixed some issues recently. Lets see if this resurfaces.
0,CAMEL-5904,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-12-21 10:53:28+00:00,2013-01-04 08:34:46+00:00,"Netty 3.6.0 changed a bit how it shutdown its resources. So its not an easy upgrade.


Some of the tests is hanging etc
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.069 sec
Running org.apache.camel.component.netty.NettyOptionTest
Process 1356085163560 is killed.","davsclaus:1356064219:2012-12-21T12:30:19.118+0000:1356064219:2012-12-21T12:30:19.118+0000:There is also some issues with the SSL tests
davsclaus:1356065065:2012-12-21T12:44:25.254+0000:1356065065:2012-12-21T12:44:25.254+0000:Okay found some issues in tests not cleaning up properly. Now only the SSL tests that has an issue with the upgrade
davsclaus:1357259686:2013-01-04T08:34:46.717+0000:1357259686:2013-01-04T08:34:46.717+0000:It was a bug in Netty 3.6.0. Its fixed in 3.6.1"
0,CAMEL-5903,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-12-21 10:52:29+00:00,2013-01-02 13:46:32+00:00,The SMX team released a number of new bundles recently. We should upgrade our Karaf feature file to pickup these new releases.,davsclaus:1357105592:2013-01-02T13:46:32.431+0000:1357105592:2013-01-02T13:46:32.431+0000:We got most of them. We need to wait with upgrading lucene and solr as we need more osgi bundles for lucene
0,CAMEL-5902,Improvement,Trivial,2.8.1,,"

documentation

",Resolved,Fixed,None,Willem Jiang,Dan S,0,2,2012-12-20 13:03:46+00:00,2012-12-20 15:04:56+00:00,"At the http://camel.apache.org/hdfs.html page the following is listed for
the HDFS Maven dependency
<dependency>
    <groupId>org.apache.camel</groupId>
    <artifactId>camel-hadoop</artifactId>
    <version>x.x.x</version>
    <!-- use the same version as your Camel core version -->
</dependency>


There is no artifactId camel-hadoop it should be camel-hdfs.","njiang:1355987080:2012-12-20T15:04:40.126+0000:1355987080:2012-12-20T15:04:40.126+0000:Thanks for pointing that out, I just fixed the issue on the wiki page."
0,CAMEL-5901,New Feature,Major,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-20 10:46:22+00:00,2012-12-20 10:48:49+00:00,"There may be situations where you do not want a producer Channel pool, but instead use a single shared Channel instead.",
0,CAMEL-5900,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Cannot Reproduce,2.11.0,Unassigned,Vincent Lombart,0,2,2012-12-20 00:54:00+00:00,2012-12-21 13:03:36+00:00,"On some routes we noticed that the StreamResequencer was not resequencing correctly. By playing with the Camel unit test (org.apache.camel.processor.StreamResequencerTest) I was able to reproduce the problem.


Test setup: 
1. In the createRouteBuilder() method change the capacity and timeout to avoid false problems. I used:
from(""direct:start"").resequence(header(""seqnum"")).stream().capacity(10000).timeout(20000L).to(""mock:result"");


2. In the testMultithreaded() method change numMessages to a high number (I used 9000).


3. Run the unit test several times until it fails. It does not fail consistently which probably indicates a race condition / wrong synchronization. You might have to adapt the numbers above to have it fail on other configurations.


The testSendMessagesInWrongOrderButReceiveThemInCorrectOrder() often fails with


java.lang.AssertionError: mock://result Received message count. Expected: <4> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1318)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1300)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:372)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:351)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:339)
	at org.apache.camel.processor.StreamResequencerTest.testSendMessagesInWrongOrderButReceiveThemInCorrectOrder(StreamResequencerTest.java:56)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at junit.framework.TestCase.runTest(TestCase.java:168)
	at junit.framework.TestCase.runBare(TestCase.java:134)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:110)
	at junit.framework.TestResult.runProtected(TestResult.java:128)
	at junit.framework.TestResult.run(TestResult.java:113)
	at junit.framework.TestCase.run(TestCase.java:124)
	at junit.framework.TestSuite.runTest(TestSuite.java:243)
	at junit.framework.TestSuite.run(TestSuite.java:238)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)


I also often get the testMultithreaded() that fails with:


Exception in thread ""pool-2-thread-2"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: msg5181]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1287)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:618)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146)
	at org.apache.camel.processor.StreamResequencerTest$Sender.run(StreamResequencerTest.java:147)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.camel.CamelExchangeException: No consumers available on endpoint: Endpoint[direct://start]. Exchange[Message: msg5181]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:56)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)
	... 5 more
Exception in thread ""pool-2-thread-1"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: msg5184]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1287)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:618)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146)
	at org.apache.camel.processor.StreamResequencerTest$Sender.run(StreamResequencerTest.java:147)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: org.apache.camel.CamelExchangeException: No consumers available on endpoint: Endpoint[direct://start]. Exchange[Message: msg5184]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:56)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)
	... 5 more","bvahdat:1356056743:2012-12-21T10:25:43.895+0000:1356056743:2012-12-21T10:25:43.895+0000:Regarding the test:

{code}
testSendMessagesInWrongOrderButReceiveThemInCorrectOrder()
{code}

When you define a timeout of 20 seconds inside the route (e.g. {{timeout(20000L)}}) then you would need to wait _at least_ for this amount of time by the MockEndpoint before asserting on it, like:

{code}
resultEndpoint.setResultWaitTime(25000L);
resultEndpoint.expectedBodiesReceived(""msg1"", ""msg2"", ""msg3"", ""msg4"");
...
{code}

And concerning the test:

{code}
testMultithreaded()
{code}

Well 9000 messages you have defined here is ""a bit more"" than just 100 messages. So you need to give it a bit of time for processing until it's done, on my box I set the result wait timeout to {{40 seconds}} by this test to make it pass:

{code}
...
resultEndpoint.expectedBodiesReceived(bodies);
resultEndpoint.setResultWaitTime(40000L);
resultEndpoint.assertIsSatisfied();
...
{code}

Also be aware of the {{4 ms}} the {{Sender}} sleeps before sending *each* exchange which for 9000 messages brings a bit of delay into the play as well.

Please better provide a concrete unit-test of yours showing the problem you're facing, then it's easier for us to follow the problem (and probably fix it if any).
Also a *much* better approach would be to _first_ ask for help @ the user forum as we already say this by the blue box below:

http://camel.apache.org/support.html

lombart:1356066192:2012-12-21T13:03:12.907+0000:1356066192:2012-12-21T13:03:12.907+0000:I am sorry not to have followed these rules. I will close this issue, create a test case as simple as possible and post for help in the user forum. Thanks for your help.

Vincent"
0,CAMEL-5899,Bug,Major,2.10.0,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-19 16:38:03+00:00,2012-12-20 10:04:37+00:00,We should at most wait for the connection timeout to trigger.,
0,CAMEL-5898,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,christian ohr,0,4,2012-12-19 14:15:38+00:00,2013-01-07 12:19:29+00:00,"Extended Java DSL in camel-groovy for Groovy routes:



use Closures as argument for Processor, Expression, Predicate, or AggregationStrategy
add data formats for XmlSlurper and XmlParser
add TypeConverter for GStrings
depend on modularized groovy 2.0.x libs instead of groovy-all



Not sure how the Groovy language relates to camel-script, or whether it has been superceded, so I left it as is.","njiang:1355945517:2012-12-20T03:31:57.487+0000:1355945517:2012-12-20T03:31:57.487+0000:Hi Christian,
It's nice to see new added feature of the Closures which could make the camel route of groovy code more clean to read :) 
njiang:1355958219:2012-12-20T07:03:39.454+0000:1355958219:2012-12-20T07:03:39.454+0000:Hi Christian

The patch is awesome, I just commit the patch with thanks for you help.
I noticed you add some resource files like below to extends the groovy.
{code}
src/main/resources/META-INF/services/org.codehaus.groovy.runtime.ExtensionModule
src/main/resources/dsld/CamelGroovyMethods.dsld
src/main/resources/gdsl/CamelGroovyMethods.gdsl
{code}
As you know we need to make sure camel work within OSGi platform. My question is does groovy support to load these file in OSGi? 

 
davsclaus:1355960233:2012-12-20T07:37:13.525+0000:1355960233:2012-12-20T07:37:13.525+0000:Thanks Christian for working on this. Lovely to get attention to Groovy so we will get a DSL for it which is much deserved for this great language as well.

Keep the stuff coming. And would you mind working with documentation also?

We should have a new page with some details about using Camel and Groovy DSL.
In fact we should maybe have a new page for DSL. That gives end users an overview of all the DSLs we have now
- Java
- XML using Spring
- XML using Blueprint
- Scala
- Groovy
- Kotlin (on the way)


christian.ohr:1355964613:2012-12-20T08:50:13.609+0000:1356007308:2012-12-20T20:41:48.936+0000:I certainly will add documentation for it (growing in https://cwiki.apache.org/confluence/display/CAMEL/Groovy+DSL).

Regarding OSGi: I might need to add a BundleActivator implementation in case Groovy can't handle it by itself. But I expect that this should not be necessary (the extensions are loaded by a static initializer).

gdsl (Idea) and dsld (Eclipse) are just hints to the respective editors so that the auto-complete function works even with methods that are not statically available.
bvahdat:1356221098:2012-12-23T08:04:58.655+0000:1356221098:2012-12-23T08:04:58.655+0000:Willem, did you locally build successfully through maven before checking-in the changes into svn as on my box I get the same error as on the CI-Server:

https://builds.apache.org/job/Camel.trunk.notest/1738/console

{code}
[ERROR] The build could not read 2 projects -> [Help 1]
[ERROR]   
[ERROR]   The project org.apache.camel:camel-script:2.11-SNAPSHOT (/home/jenkins/jenkins-slave/workspace/Camel.trunk.notest/camel-trunk/components/camel-script/pom.xml) has 1 error
[ERROR]     'dependencies.dependency.version' for org.codehaus.groovy:groovy:jar is missing. @ line 92, column 21
[ERROR]   
[ERROR]   The project org.apache.camel:camel-solr:2.11-SNAPSHOT (/home/jenkins/jenkins-slave/workspace/Camel.trunk.notest/camel-trunk/components/camel-solr/pom.xml) has 2 errors
[ERROR]     'dependencies.dependency.version' for org.codehaus.groovy:groovy:jar is missing. @ line 130, column 17
[ERROR]     'dependencies.dependency.version' for org.codehaus.groovy:groovy-xml:jar is missing. @ line 140, column 17
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/ProjectBuildingException
{code}

davsclaus:1356221349:2012-12-23T08:09:09.567+0000:1356221349:2012-12-23T08:09:09.567+0000:Its my bad I am fixing this now. We need to use groovy-all to avoid classloading issues."
0,CAMEL-5897,Bug,Major,2.10.3,"2.9.6, 2.10.4","
None
",Resolved,Fixed,"2.9.6, 2.10.4",Raúl Kripalani,Raúl Kripalani,0,1,2012-12-18 17:58:05+00:00,2012-12-18 21:20:25+00:00,"There's a null-check missing in CxfPayloadConverter which triggers a NPE if the payload is the result from a SOAP Fault, in which case the CxfPayload object contains no body sources at all.


Stack trace, in this case what triggers type converters is Stream Caching, but it could happen in other cases where the FallbackConverter is utilized.



Exception in thread ""default-workqueue-3"" org.apache.camel.TypeConversionException: Error during type conversion from type: org.apache.camel.component.cxf.CxfPayload to the required type: org.apache.camel.StreamCache with value org.apache.camel.component.cxf.CxfPayload headers: []body: null due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)
	at org.apache.camel.core.osgi.OsgiTypeConverter.convertTo(OsgiTypeConverter.java:102)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)
	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)
	at org.apache.camel.processor.interceptor.StreamCachingInterceptor.process(StreamCachingInterceptor.java:46)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
[...]
        at org.apache.camel.component.cxf.CxfClientCallback.handleException(CxfClientCallback.java:82)
	at org.apache.cxf.interceptor.ClientOutFaultObserver.onMessage(ClientOutFaultObserver.java:59)
	at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1540)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:426)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)
	at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$AWQThreadFactory$1.run(AutomaticWorkQueueImpl.java:351)
	at java.lang.Thread.run(Thread.java:680)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927)
	at org.apache.camel.impl.converter.StaticMethodFallbackTypeConverter.convertTo(StaticMethodFallbackTypeConverter.java:50)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)
	... 56 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.converter.CxfPayloadConverter.convertTo(CxfPayloadConverter.java:150)
	at sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)
	... 59 more","raulvk:1355825190:2012-12-18T18:06:30.931+0000:1355825190:2012-12-18T18:06:30.931+0000:The bug was not introduced in r1376523 as suggested initially, it was there before."
0,CAMEL-5896,New Feature,Major,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-18 14:57:36+00:00,2012-12-19 09:52:14+00:00,"This allows people to configure any of the many netty options, also the ones which we wont have a corresponding camel option for.


We can use the uri prefix for that, so ""option.xxx"" becomes ""xxx"" option to netty.",
0,CAMEL-5895,Wish,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Charlie Mordant,1,2,2012-12-18 13:27:30+00:00,2015-07-11 13:13:05+00:00,"It would be good to support Tomcat websocket implementation even if it's considered as non-stable.


Regards","davsclaus:1436591578:2015-07-11T13:12:58.646+0000:1436591578:2015-07-11T13:12:58.646+0000:You can use ahc-websocket which is agnostic and works on various servlet containers.

Also there is a websocket java spec we should use instead so its not tomcat only."
0,CAMEL-5894,Wish,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Charlie Mordant,0,2,2012-12-18 13:24:53+00:00,2022-09-02 08:40:40+00:00,"It would be nice to have the ability to route to websocket error channel.


Regards","davsclaus:1436591709:2015-07-11T13:15:09.304+0000:1436591709:2015-07-11T13:15:09.304+0000:Yeah although you can use Camel's error handler and route to a ws channel of choice that you use as error-channel. Not sure if there is some standard for configured WS to have a specific error channel.

Contributions is welcome to look into this."
0,CAMEL-5893,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,2,2012-12-18 08:12:42+00:00,2012-12-21 14:04:35+00:00,No Desc,njiang:1356069875:2012-12-21T14:04:35.883+0000:1356069875:2012-12-21T14:04:35.883+0000:Applied the patch into trunk.
0,CAMEL-5892,Task,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Moulliard Charles,0,1,2012-12-18 07:33:22+00:00,2015-07-11 13:15:35+00:00,No Desc,
0,CAMEL-5891,Improvement,Major,2.10.0,Future,"
None
",Resolved,Implemented,Future,Claus Ibsen,Robert Davies,0,3,2012-12-18 06:47:16+00:00,2016-03-23 09:17:12+00:00,Update the AMQP Component to support AMQP 1.0 version of the specification,"davsclaus:1358495369:2013-01-18T15:49:29.907+0000:1358495369:2013-01-18T15:49:29.907+0000:Is there a new qpid release that is AMQP 1.0 ?
davsclaus:1358741966:2013-01-21T12:19:26.187+0000:1358741966:2013-01-21T12:19:26.187+0000:I wonder if we should look into using apache qpid proton and its simpler client message API for a camel-ampq component? Then we have a light-weight component and not sitting on top of camel-jms and all the spring stuff.
davsclaus:1363060728:2013-03-12T11:58:48.504+0000:1363060728:2013-03-12T11:58:48.504+0000:Looks like apache qpid is not yet 1.0 compliant. At least they do not say so on their web-page
http://qpid.apache.org/compatibility.html
ceposta:1375096040:2013-07-29T19:07:20.826+0000:1375096040:2013-07-29T19:07:20.826+0000:Qpid Messaging API as well as proton supports 1.0. I can take a look at what would it would take to port the current impl to the latest libraries.

Might be worth trying what Claus mentions.. to use the proton client libs for this component? The qpid jms lib can still be used with the camel-jms component.
davsclaus:1458695832:2016-03-23T09:17:12.165+0000:1458695832:2016-03-23T09:17:12.165+0000:We are using qpid that is the 1.0 spec"
0,CAMEL-5890,Bug,Major,"2.9.4, 2.9.5, 2.10.2, 2.10.3",None,"
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-12-18 03:59:56+00:00,2013-01-18 01:54:22+00:00,"As the RequestEntityConverter.toRequestEntity(String str, Exchange exchange) doesn't has check if the exchange is null, it caused the NPE as the user complain in camel user mailing list[1]


[1]http://camel.465427.n5.nabble.com/Content-Enrich-Error-when-upgrading-Apache-Camel-from-2-9-2-to-any-higher-version-td5724244.html


Here is the stack trace.



CaughtExceptionType:org.apache.camel.TypeConversionException, CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value ... 
The complete Stack Trace : 
Exchange[ExchangePattern:InOnly, BodyType:String, Body:, CaughtExceptionType:org.apache.camel.TypeConversionException, CaughtExceptionMessage:Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException, StackTrace:org.apache.camel.TypeConversionException: Error during type conversion from type: com.ecc.DamBean to the required type: org.apache.commons.httpclient.methods.RequestEntity with value com.ecc.DamBean@8811a59 due Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:98)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390)	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343)	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Enricher.process(Enricher.java:114)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:148)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:61)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:57)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:185)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:909)	at java.lang.Thread.run(Thread.java:662)Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: org.apache.commons.httpclient.methods.RequestEntity with value due java.lang.NullPointerException	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94)	... 44 moreCaused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1271)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:927)	at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:47)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:253)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.marshall(FallbackTypeConverter.java:222)	at org.apache.camel.converter.jaxb.FallbackTypeConverter.convertTo(FallbackTypeConverter.java:94)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:289)	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:111)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:72)	at org.apache.camel.impl.MessageSupport.getBody(MessageSupport.java:47)	at org.apache.camel.component.http.HttpProducer.createRequestEntity(HttpProducer.java:390)	at org.apache.camel.component.http.HttpProducer.createMethod(HttpProducer.java:343)	at org.apache.camel.component.http.HttpProducer.process(HttpProducer.java:91)	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Enricher.process(Enricher.java:114)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334)	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73)	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:275)	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:183)	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:139)	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)	... 1 moreCaused by: java.lang.NullPointerException	at org.apache.camel.component.http.RequestEntityConverter.toRequestEntity(RequestEntityConverter.java:51)	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)	at java.lang.reflect.Method.invoke(Method.java:597)	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:923)	... 50 more]","njiang:1358445262:2013-01-18T01:54:22.941+0000:1358445262:2013-01-18T01:54:22.941+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5889,Improvement,Major,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Oleg Kozlov,0,2,2012-12-17 22:14:53+00:00,2013-01-05 12:33:34+00:00,"This is related to issue https://issues.apache.org/jira/browse/CAMEL-5803


It looks like the fix included tokenizeXML() method, but there is still not tokenize()  


I have a usecase where I have to split my in message body (text) by semi-colon character for downstream processing, so I need to be able to do something like the following in Scala DSL:


split(_.in) 
tokenize("";"")


I fix would be very welcome, also, if there is a work around with TokenizeLanguage etc - please let me know, thank you!",davsclaus:1357360413:2013-01-05T12:33:33.995+0000:1357360413:2013-01-05T12:33:33.995+0000:The tokenize and tokenizePair has been added.
0,CAMEL-5888,Bug,Minor,2.10.2,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Gennadiy Bukhmatov,0,2,2012-12-17 20:10:59+00:00,2012-12-21 13:51:33+00:00,"When I call removeRouteDefinition for DefaultCamelContext, the route doesn't removed from collection of routes.
   public synchronized void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception 

{
        String id = routeDefinition.idOrCreate(nodeIdFactory);
        stopRoute(id);
        removeRoute(id);
    }

it is just remove it from running route service if context is running.
When we do restart context this route started again. 
Workaround for this issue is call  removeRouteDefinitions and wrap single route into collection.


But when I call removeRouteDefinitions - it is process correctly: remove from collections of definitions and after removed from running route services.
    public synchronized void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception {
        this.routeDefinitions.removeAll(routeDefinitions);
        for (RouteDefinition routeDefinition : routeDefinitions) 

{
            removeRouteDefinition(routeDefinition);
        }

    }","davsclaus:1356067239:2012-12-21T13:20:39.195+0000:1356067239:2012-12-21T13:20:39.195+0000:Is your route properly stopped? It looks like if its not in stopped state the route is not removed.

"
0,CAMEL-5887,Bug,Major,2.10.3,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Luc Leclerc,0,2,2012-12-17 15:13:30+00:00,2012-12-22 15:34:45+00:00,"Here is the unit test with 3 tests (expected results and the strange behavior) : http://pastebin.com/JUnLFy70


A second adviceWith() on a second route will change the behavior from the first route during an Exception.


adviceWith is only used once per route, as suggested in the recommendation : http://camel.apache.org/advicewith.html
""It is recommended to only advice a given route once (you can of course advice multiple routes). If you do it multiple times, then it may not work as expected, especially when any kind of error handling is involved. The Camel team plan for Camel 3.0 to support this as internal refactorings in the routing engine is needed to support this properly.""","davsclaus:1356161685:2012-12-22T15:34:45.506+0000:1356161685:2012-12-22T15:34:45.506+0000:Thanks for reporting, and providing a test case."
0,CAMEL-5886,New Feature,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-17 14:44:54+00:00,2012-12-17 15:06:00+00:00,"See
http://stackoverflow.com/questions/8442166/how-to-allow-more-concurrent-client-connections-with-netty


We should allow to configure the backlog",
0,CAMEL-5885,Bug,Major,2.10.3,None,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Luc Leclerc,0,2,2012-12-17 14:42:54+00:00,2013-01-15 08:20:43+00:00,"Here is the unit test with the 2 tests (expected result and the strange behavior) : http://pastie.org/5684461


Extra parameters using httpClient is forcing the use of the endpoint and prevent the intercept from working.





Edit: Updated the link to the updated unit test.","davsclaus:1356162304:2012-12-22T15:45:04.440+0000:1356162304:2012-12-22T15:45:04.440+0000:This is working as designed.

You intercept the simpleProvider uri, and on the 2nd test you have a different url, they are not the same.

Instead you can use wildcards in the intercept, so you can match both uris.

See the added unit test
http://svn.apache.org/viewvc?rev=1425300&view=rev
lleclerc:1358164088:2013-01-14T19:48:08.565+0000:1358164160:2013-01-14T19:49:20.876+0000:There was a problem in the unit test. It should be provider instead of simpleProvider from the previous unit test. I updated the link to the new one.
lleclerc:1358164280:2013-01-14T19:51:20.604+0000:1358164280:2013-01-14T19:51:20.604+0000:I was using wrong version of camel.
davsclaus:1358209243:2013-01-15T08:20:43.843+0000:1358209243:2013-01-15T08:20:43.843+0000:Thanks. I have changed the resolution to ""not a problem"". "
0,CAMEL-5884,New Feature,Major,None,Future,"
None
",Resolved,Abandoned,Future,Willem Jiang,Claus Ibsen,1,3,2012-12-17 09:55:52+00:00,2022-09-02 08:40:19+00:00,"Currently when using a cxf consumer in a route, then all the operations is serviced by this route.


This may confuse some people. As well some may want one route per operation.
We should look into how we can support this.


Today people would need to use the recipient list and direct endpoints to suport this. But many people dont know about this. See this example: http://camel.apache.org/cxf-tomcat-example.html


I guess this is not so easy, as you would then have mutliple routes with the same CXF ""webservice"". But we would like to have this level of indirection.


And then I guess if a operation name is not bound to any route, then a soap fault should be thrown. Or we should allow to let Camel fail on startup saying that operation XXX is not bound to any consumer/route. Or something like that. Or allow people to turn this on|off.","fmasood:1427297969:2015-03-25T23:39:29.892+0000:1427297969:2015-03-25T23:39:29.892+0000:We actually have this problem in of the projects I was doing. In the end, I created a gateway route, which then on the basis of operation names further route to other routes. I made everything configurable so that names of other routes and transport also become customisable. One thing though, I had to write an intercetptor to fetch the soap operation name. This all thing can be done in the cxc component and i am happy to take this lira."
0,CAMEL-5883,Bug,Minor,"2.9.0, 2.10.0","2.9.7, 2.10.7, 2.11.2, 2.12.0","
None
",Resolved,Fixed,"2.9.7, 2.10.7, 2.11.2, 2.12.0",Willem Jiang,Claus Ibsen,0,3,2012-12-17 08:51:09+00:00,2015-04-27 14:53:36+00:00,"When using doneFileName then the file is deleted on each completion of files in the batch. And you get WARN logs about the done file cannot be deleted, because the 1st already deleted the file.


We should defer and only delete the done file on the last in the batch.","njiang:1373479692:2013-07-11T02:08:12.905+0000:1373479692:2013-07-11T02:08:12.905+0000:The patch doesn't take the dynamic done file into consideration. 
Here is a [discussion|http://camel.465427.n5.nabble.com/Done-file-not-deleted-tp5735497.html] about it.

dornseif:1430117616:2015-04-27T14:53:36.587+0000:1430117616:2015-04-27T14:53:36.587+0000:There is a real issue with multiple done files that needs addressed.  Only removing the last done file is not an acceptable solution in every case.  This discussion http://camel.465427.n5.nabble.com/Done-file-not-deleted-td5735497.html#a5766387 indicated this jira would be re-opened.  Could you please review and maybe as part of the fix add a boolean to allow deleting multiple done files?  I think the concept of multiple done files is a real world case.

Tom
"
0,CAMEL-5882,New Feature,Major,None,Future,"
None
",Resolved,Invalid,Future,Unassigned,Brett E. Meyer,0,3,2012-12-16 21:30:52+00:00,2013-05-26 12:03:57+00:00,"Numerous features are in available in Hibernate that are not provided by JPA.  Although camel-jpa provides core functionality, what should we add to camel-hibernate?","3riverdev:1355664794:2012-12-16T21:33:14.280+0000:1355664794:2012-12-16T21:33:14.280+0000:[~muellerc] & [~davsclaus], can you guys help brainstorm what you might like added?  Should we try to incorporate some of the basic functionality, or continue to rely on JPA solely?
muellerc:1355735169:2012-12-17T17:06:09.792+0000:1355735169:2012-12-17T17:06:09.792+0000:I'm not a Hibernate pro...
If you have some features in mind which should be added to camel-hibernate,
propose it, wait 72 hours, implement it ;-)

davsclaus:1369541020:2013-05-26T12:03:40.580+0000:1369541020:2013-05-26T12:03:40.580+0000:Moved ticket to: https://code.google.com/a/apache-extras.org/p/camel-extra/issues/detail?id=40"
0,CAMEL-5881,Improvement,Minor,2.10.3,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Preben Asmussen,0,2,2012-12-16 20:32:30+00:00,2012-12-21 14:05:34+00:00,"FTP endpoints should support charset property like the File endpoint does. Currently you have to remember to set the CamelCharsetName Exchange property if you want to have the message body transformed to another charset.
See http://camel.465427.n5.nabble.com/Problem-w-FTP-producer-and-charset-td5723604.html


I'll work on a patch and attach it later.","preben:1355825301:2012-12-18T18:08:21.022+0000:1355825301:2012-12-18T18:08:21.022+0000:Attached ftp charset patch
preben:1355825771:2012-12-18T18:16:11.447+0000:1355825771:2012-12-18T18:16:11.447+0000:I fell over this issue https://issues.apache.org/jira/browse/CAMEL-3787 and wonder if we could solve this using charset property.
 
I haven't had the time to look into it yet. 
Any comments ?
njiang:1355899019:2012-12-19T14:36:59.763+0000:1355899019:2012-12-19T14:36:59.763+0000:Hi Preben,

I just applied the your patch with a minor modification on FtpConsumerWithCharsetTest.testConsumerWithCharset to use UTF_8 charset by default.

For the CAMEL-3787, I think the key should be on the ftp client configure to find out right charset that the server is using.
njiang:1356069934:2012-12-21T14:05:34.704+0000:1356069934:2012-12-21T14:05:34.704+0000:Applied the patch into trunk."
0,CAMEL-5880,Bug,Minor,2.10.3,"2.10.5, 2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.10.5, 2.11.1, 2.12.0",Babak Vahdat,Babak Vahdat,0,2,2012-12-16 12:20:38+00:00,2013-05-01 07:04:50+00:00,See http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-td5723769.html,"bvahdat:1355632162:2012-12-16T12:29:22.530+0000:1355632723:2012-12-16T12:38:43.279+0000:As the evidence consider running [this example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java] and look at the log entry of the second route:

{code}
2012-12-16 13:23:04,198 [ssage Processor] INFO  OrderStatusRequestLog          - Exchange[
, Id:ID-Babaks-iMac-local-50218-1355660581337-0-24
, ExchangePattern:InOnly
, Properties:{CamelToEndpoint=log://OrderStatusRequestLog?multiline=true&showAll=true&showOut=true, CamelCreatedTimestamp=Sun Dec 16 13:23:04 CET 2012, CamelFilterMatched=true}
, Headers:{EventCategory=AppMessageReceived, breadcrumbId=ID-Babaks-iMac-local-50218-1355660581337-0-23, MessageType=H, SessionID=FIX.4.2:MARKET->TRADER}
, BodyType:quickfix.fix42.OrderStatusRequest
, Body:8=FIX.4.29=8235=H34=249=TRADER52=20121216-12:23:04.19456=MARKET11=XYZ37=abc54=155=GOOG10=145
, Out: null
]
{code}
bvahdat:1355636510:2012-12-16T13:41:50.108+0000:1355636510:2012-12-16T13:41:50.108+0000:Correspondingly what [the documentation|http://camel.apache.org/quickfix.html#Quickfix-Example] claims to be the case for [this example|https://svn.apache.org/repos/asf/camel/trunk/components/camel-quickfix/src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java] is wrong.

stevebate:1361902619:2013-02-27T02:16:59.228+0000:1361902619:2013-02-27T02:16:59.228+0000:Patch to fix the RequestReplyExample.
bvahdat:1361923933:2013-02-27T08:12:13.707+0000:1361923933:2013-02-27T08:12:13.707+0000:Applying the provided patch on trunk causes regression by {{QuickfixjConsumerTest}} and {{QuickfixjProducerTest}}:

{code}
~/dev/workspace/camel/components/camel-quickfix>svn st
M       src/test/java/org/apache/camel/component/quickfixj/examples/RequestReplyExample.java
M       src/main/java/org/apache/camel/component/quickfixj/MessagePredicate.java
M       src/main/java/org/apache/camel/component/quickfixj/converter/QuickfixjConverters.java
M       src/main/java/org/apache/camel/component/quickfixj/QuickfixjConsumer.java
M       src/main/java/org/apache/camel/component/quickfixj/QuickfixjEndpoint.java
~/dev/workspace/camel/components/camel-quickfix>mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: QuickFIX/J 2.11-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.11-SNAPSHOT:package (default) @ camel-quickfix ---
[INFO] Generated /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/classes/META-INF/services/org/apache/camel/component.properties containing the Camel component quickfix
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.13:test (default-test) @ camel-quickfix ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.quickfixj.QuickfixjComponentTest
<20130227-07:36:21, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:21, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:21, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:22, FIX.4.4:ACCEPTOR->INITIATOR, event> (Session FIX.4.4:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:22, FIX.4.4:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.4:ACCEPTOR->INITIATOR)
<20130227-07:36:22, FIX.4.4:INITIATOR->ACCEPTOR, event> (Session FIX.4.4:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:22, FIX.4.4:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.4:INITIATOR->ACCEPTOR)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, outgoing> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130227-07:36:23.02956=ACCEPTOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, incoming> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130227-07:36:23.02956=ACCEPTOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Accepting session FIX.4.4:ACCEPTOR->INITIATOR from anonymous(121165166))
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Acceptor heartbeat set to 30 seconds)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Received logon)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, event> (Initiated logon request)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130227-07:36:23.03856=INITIATOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130227-07:36:23.03856=INITIATOR98=0108=3010=004)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, event> (Responding to logon request)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, event> (Received logon)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130227-07:36:23.04456=INITIATOR94=0147=Test164=ID10=166)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130227-07:36:23.04456=INITIATOR94=0147=Test164=ID10=166)
<20130227-07:36:23, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130227-07:36:23.04556=INITIATOR94=0147=Test164=ID10=168)
<20130227-07:36:23, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130227-07:36:23.04556=INITIATOR94=0147=Test164=ID10=168)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.555 sec
Running org.apache.camel.component.quickfixj.QuickfixjConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running org.apache.camel.component.quickfixj.QuickfixjConsumerTest
Tests run: 4, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.176 sec <<< FAILURE!
processInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.171 sec  <<< FAILURE!
org.mockito.exceptions.verification.NeverWantedButInvoked: 
exchange.setException(
    isA(java.lang.Exception)
);
Never wanted here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)
But invoked here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:133)

	at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)

setExceptionOnInOutExchange(org.apache.camel.component.quickfixj.QuickfixjConsumerTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.mockito.exceptions.verification.junit.ArgumentsAreDifferent: 
Argument(s) are different! Wanted:
exchange.setException(
    isA(java.lang.IllegalStateException)
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)
Actual invocation has different arguments:
exchange.setException(
    java.lang.NullPointerException
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumer.onExchange(QuickfixjConsumer.java:45)

	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:513)
	at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)

Running org.apache.camel.component.quickfixj.QuickfixjConvertersTest
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.628 sec
Running org.apache.camel.component.quickfixj.QuickfixjEngineTest
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130227-07:36:23, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130227-07:36:23, FIX.4.2:MARKET->TRADER, event> (Session FIX.4.2:MARKET->TRADER schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.2:MARKET->TRADER, event> (Created session: FIX.4.2:MARKET->TRADER)
<20130227-07:36:23, FIX.4.2:TRADER->MARKET, event> (Session FIX.4.2:TRADER->MARKET schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:23, FIX.4.2:TRADER->MARKET, event> (Created session: FIX.4.2:TRADER->MARKET)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=6835=A34=149=TRADER52=20130227-07:36:24.99056=MARKET98=0108=12010=193)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=6835=A34=149=TRADER52=20130227-07:36:24.99056=MARKET98=0108=12010=193)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Accepting session FIX.4.2:MARKET->TRADER from anonymous(1183562193))
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Acceptor heartbeat set to 120 seconds)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, event> (Initiated logon request)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Received logon)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, outgoing> (8=FIX.4.29=6835=A34=149=MARKET52=20130227-07:36:24.99256=TRADER98=0108=12010=195)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, incoming> (8=FIX.4.29=6835=A34=149=MARKET52=20130227-07:36:24.99256=TRADER98=0108=12010=195)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, event> (Responding to logon request)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, event> (Received logon)
<20130227-07:36:24, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=9235=C34=249=TRADER52=20130227-07:36:24.99456=MARKET94=0147=Test164=ID33=158=Content10=146)
<20130227-07:36:24, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=9235=C34=249=TRADER52=20130227-07:36:24.99456=MARKET94=0147=Test164=ID33=158=Content10=146)
<20130227-07:36:25, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:25, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.074 sec
Running org.apache.camel.component.quickfixj.QuickfixjProducerTest
Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 5.048 sec <<< FAILURE!
processInOutExchangeSuccess(org.apache.camel.component.quickfixj.QuickfixjProducerTest)  Time elapsed: 5.036 sec  <<< FAILURE!
org.mockito.exceptions.verification.WantedButNotInvoked: 
Wanted but not invoked:
message.setBody(
    8=FIX.4.29=2535=C49=TARGET56=SENDER10=194
);
-> at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)
Actually, there were zero interactions with this mock.

	at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)

Running org.apache.camel.component.quickfixj.QuickfixjSpringTest
<20130227-07:36:30, FIX.4.2:ACCEPTOR->INITIATOR, event> (Session FIX.4.2:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:30, FIX.4.2:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.2:ACCEPTOR->INITIATOR)
<20130227-07:36:30, FIX.4.2:INITIATOR->ACCEPTOR, event> (Session FIX.4.2:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130227-07:36:30, FIX.4.2:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.2:INITIATOR->ACCEPTOR)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.727 sec

Results :

Failed tests: 
  QuickfixjConsumerTest.processInOutExchange:134 
exchange.setException(
    isA(java.lang.Exception)
);
Never wanted here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:134)
But invoked here:
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.processInOutExchange(QuickfixjConsumerTest.java:133)

  QuickfixjConsumerTest.setExceptionOnInOutExchange:114 
Argument(s) are different! Wanted:
exchange.setException(
    isA(java.lang.IllegalStateException)
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumerTest.setExceptionOnInOutExchange(QuickfixjConsumerTest.java:114)
Actual invocation has different arguments:
exchange.setException(
    java.lang.NullPointerException
);
-> at org.apache.camel.component.quickfixj.QuickfixjConsumer.onExchange(QuickfixjConsumer.java:45)

  QuickfixjProducerTest.processInOutExchangeSuccess:155 
Wanted but not invoked:
message.setBody(
    8=FIX.4.29=2535=C49=TARGET56=SENDER10=194
);
-> at org.apache.camel.component.quickfixj.QuickfixjProducerTest.processInOutExchangeSuccess(QuickfixjProducerTest.java:155)
Actually, there were zero interactions with this mock.


Tests run: 42, Failures: 3, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.834s
[INFO] Finished at: Wed Feb 27 08:36:30 CET 2013
[INFO] Final Memory: 13M/1011M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.13:test (default-test) on project camel-quickfix: There are test failures.
[ERROR] 
[ERROR] Please refer to /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
{code}
stevebate:1361936166:2013-02-27T11:36:06.475+0000:1361936166:2013-02-27T11:36:06.475+0000:This is an updated patch with modifications for the unit tests. However, I'd wait to apply the patches until we've discussed the issue with the InOut MEP and the overwriting of the inbound message (which requires the new Exchange copy behavior in the patch).
stevebate:1367200866:2013-04-29T10:01:06.876+0000:1367200866:2013-04-29T10:01:06.876+0000:Any more updates on this issue?
bvahdat:1367205541:2013-04-29T11:19:01.958+0000:1367205541:2013-04-29T11:19:01.958+0000:Please give me time to find some free cycle, then will dig into this and try to understand what exactly is going on.
bvahdat:1367289831:2013-04-30T10:43:51.418+0000:1367289831:2013-04-30T10:43:51.418+0000:Steve,

In the meanwhile the changes of CAMEL-5979 has been applied which is the following commit:

http://svn.apache.org/viewvc?view=revision&revision=r1455750

So apparently the way we retrieve the {{messageSessionID}} has been changed on the consumer side through that ticket. Now with your patch in place I end up with OOM while doing {{mvn clean install}} on this module, but this was not the case before CAMEL-5979! Have you got any idea what the conflict is.

Also your included patch contains the change by {{MessagePredicate}} where reversing the SessionID has been removed but the comment {{Reverse session ID for reply}} is still there. So which one should be correct, the code or the comment?

Fell free to comment on CAMEL-5979 as well if you as *QuickFIX/J Guru* think the changes of CAMEL-5979 were not appropriate or if there would be a better way to do that.

bvahdat:1367306899:2013-04-30T15:28:19.063+0000:1367306899:2013-04-30T15:28:19.063+0000:This is what I get if I apply your patch. Actually all tests pass well, but then at the end get {{java.lang.OutOfMemoryError: PermGen space}}. On the other hand if {{@Ignore}} the Spring test {{org.apache.camel.component.quickfixj.QuickfixjSpringTest}} then the OOM disappears.

{code}
~/dev/workspace/camel/components/camel-quickfix>echo $MAVEN_OPTS
-Xms1024m -Xmx1024m -XX:MaxPermSize=1024m
~/dev/workspace/camel/components/camel-quickfix>mvn test
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: QuickFIX/J 2.12-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-quickfix ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-quickfix ---
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.12-SNAPSHOT:generate-components-list (default) @ camel-quickfix ---
[INFO] Generated /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/generated/camel/components/META-INF/services/org/apache/camel/component.properties containing the Camel component quickfix
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-quickfix ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-quickfix ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.14.1:test (default-test) @ camel-quickfix ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.component.quickfixj.QuickfixjComponentTest
<20130430-15:20:57, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:57, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:57, FIX.4.4:ACCEPTOR->INITIATOR, event> (Session FIX.4.4:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.4:ACCEPTOR->INITIATOR)
<20130430-15:20:57, FIX.4.4:INITIATOR->ACCEPTOR, event> (Session FIX.4.4:INITIATOR->ACCEPTOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:57, FIX.4.4:INITIATOR->ACCEPTOR, event> (Created session: FIX.4.4:INITIATOR->ACCEPTOR)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, outgoing> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130430-15:20:58.86856=ACCEPTOR98=0108=3010=011)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, incoming> (8=FIX.4.49=7235=A34=149=INITIATOR52=20130430-15:20:58.86856=ACCEPTOR98=0108=3010=011)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Accepting session FIX.4.4:ACCEPTOR->INITIATOR from anonymous(84419191))
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Acceptor heartbeat set to 30 seconds)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Received logon)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, event> (Responding to Logon request)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, event> (Initiated logon request)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130430-15:20:58.87556=INITIATOR98=0108=3010=009)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=7235=A34=149=ACCEPTOR52=20130430-15:20:58.87556=INITIATOR98=0108=3010=009)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, event> (Received logon)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130430-15:20:58.88056=INITIATOR94=0147=Test164=ID10=170)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=249=ACCEPTOR52=20130430-15:20:58.88056=INITIATOR94=0147=Test164=ID10=170)
<20130430-15:20:58, FIX.4.4:ACCEPTOR->INITIATOR, outgoing> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130430-15:20:58.88156=INITIATOR94=0147=Test164=ID10=172)
<20130430-15:20:58, FIX.4.4:INITIATOR->ACCEPTOR, incoming> (8=FIX.4.49=8135=C34=349=ACCEPTOR52=20130430-15:20:58.88156=INITIATOR94=0147=Test164=ID10=172)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:58, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:58, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:58, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.455 sec
Running org.apache.camel.component.quickfixj.QuickfixjConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec
Running org.apache.camel.component.quickfixj.QuickfixjConsumerTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.167 sec
Running org.apache.camel.component.quickfixj.QuickfixjConvertersTest
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.627 sec
Running org.apache.camel.component.quickfixj.QuickfixjEngineTest
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
<20130430-15:20:59, FIX.4.4:FOO->BAR, error> (java.io.IOException: java.io.IOException: Endpoint unavailable: vm:1234 (Next retry in 30000 milliseconds))
<20130430-15:20:59, FIX.4.2:MARKET->TRADER, event> (Session FIX.4.2:MARKET->TRADER schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.2:MARKET->TRADER, event> (Created session: FIX.4.2:MARKET->TRADER)
<20130430-15:20:59, FIX.4.2:TRADER->MARKET, event> (Session FIX.4.2:TRADER->MARKET schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:20:59, FIX.4.2:TRADER->MARKET, event> (Created session: FIX.4.2:TRADER->MARKET)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=6835=A34=149=TRADER52=20130430-15:21:00.81756=MARKET98=0108=12010=174)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=6835=A34=149=TRADER52=20130430-15:21:00.81756=MARKET98=0108=12010=174)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Accepting session FIX.4.2:MARKET->TRADER from anonymous(1620729172))
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Acceptor heartbeat set to 120 seconds)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, event> (Initiated logon request)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Received logon)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, event> (Responding to Logon request)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, outgoing> (8=FIX.4.29=6835=A34=149=MARKET52=20130430-15:21:00.81956=TRADER98=0108=12010=176)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, incoming> (8=FIX.4.29=6835=A34=149=MARKET52=20130430-15:21:00.81956=TRADER98=0108=12010=176)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, event> (Received logon)
<20130430-15:21:00, FIX.4.2:TRADER->MARKET, outgoing> (8=FIX.4.29=9235=C34=249=TRADER52=20130430-15:21:00.82156=MARKET94=0147=Test164=ID33=158=Content10=118)
<20130430-15:21:00, FIX.4.2:MARKET->TRADER, incoming> (8=FIX.4.29=9235=C34=249=TRADER52=20130430-15:21:00.82156=MARKET94=0147=Test164=ID33=158=Content10=118)
<20130430-15:21:00, FIX.4.4:FOO->BAR, event> (Session FIX.4.4:FOO->BAR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:21:00, FIX.4.4:FOO->BAR, event> (Created session: FIX.4.4:FOO->BAR)
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.079 sec
Running org.apache.camel.component.quickfixj.QuickfixjProducerTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 sec
Running org.apache.camel.component.quickfixj.QuickfixjSpringTest
<20130430-15:21:01, FIX.4.2:ACCEPTOR->INITIATOR, event> (Session FIX.4.2:ACCEPTOR->INITIATOR schedule is daily, 00:00:00-UTC - 00:00:00-UTC)
<20130430-15:21:01, FIX.4.2:ACCEPTOR->INITIATOR, event> (Created session: FIX.4.2:ACCEPTOR->INITIATOR)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.529 sec
java.lang.OutOfMemoryError: PermGen space

Results :

Tests run: 42, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 12.485s
[INFO] Finished at: Tue Apr 30 17:21:06 CEST 2013
[INFO] Final Memory: 14M/1011M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.14.1:test (default-test) on project camel-quickfix: Execution default-test of goal org.apache.maven.plugins:maven-surefire-plugin:2.14.1:test failed: The forked VM terminated without saying properly goodbye. VM crash or System.exit called ?
[ERROR] Command was/bin/sh -c cd /Users/bvahdat/dev/workspace/camel/components/camel-quickfix && /Library/Java/JavaVirtualMachines/1.6.0_32-b05-420.jdk/Contents/Home/bin/java -jar /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefirebooter5621841200692637059.jar /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefire8781436168046582511tmp /Users/bvahdat/dev/workspace/camel/components/camel-quickfix/target/surefire/surefire_08815624006783717081tmp
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException
{code}
bvahdat:1367323489:2013-04-30T20:04:49.193+0000:1367323489:2013-04-30T20:04:49.193+0000:O.K. found a solution for now to make {{maven clean install}} work properly:

{code}
<build>
  <plugins>
    <plugin>
      <artifactId>maven-surefire-plugin</artifactId>
      <configuration>
        <!--
          TODO: should fork per test as otherwise the build would cause 'java.lang.OutOfMemoryError: PermGen space'.
          interestingly found a quick & dirty solution for this which would be to remove the <filter> tag inside the
          test resource QuickfixjSpringTest-context.xml then the build would run perfectly without a need to fork always!
        -->
        <forkMode>always</forkMode>
      </configuration>
    </plugin>
  </plugins>
</build>
{code}
bvahdat:1367332339:2013-04-30T22:32:19.135+0000:1367332339:2013-04-30T22:32:19.135+0000:Thanks for providing the patch which is backported to the 2.11.x as well as 2.10.x branches. Fixed CS and modified POM as well to avoid OOM for now while running the tests *all together* ({{mvn test}}).
bvahdat:1367363090:2013-05-01T07:04:50.759+0000:1367363090:2013-05-01T07:04:50.759+0000:See also [my answer|http://camel.465427.n5.nabble.com/camel-quickfix-RequestReplyExample-java-io-IOException-tp5723769p5731828.html] to your question @ user forum."
0,CAMEL-5879,New Feature,Minor,None,None,"
None
",Closed,Won't Fix,None,Unassigned,Claus Ibsen,0,6,2012-12-15 11:53:07+00:00,2019-03-18 09:30:11+00:00,"See
http://code.google.com/p/jmapper-framework/


It may be nice to add this as a data format, or type converter or something like that.","alessandro.vurro:1355572174:2012-12-15T19:49:34.067+0000:1355572174:2012-12-15T19:49:34.067+0000:JMapper is extremely easy to use, allows you to write dynamics conversions, to perform introspection, all with the performance of static code.
You can choose to write the configuration or using annotations or using xml files.
If the Camel framework needs features that aren't present between those of JMapper, please contact me, I will be happy to develop them.
davsclaus:1488261453:2017-02-28T13:57:33.344+0000:1488261453:2017-02-28T13:57:33.344+0000:Its a github now
https://github.com/jmapper-framework/jmapper-core
arun12376:1552648407:2019-03-15T19:13:27.629+0000:1552648407:2019-03-15T19:13:27.629+0000:Is this component is ready to use ? . I am not able to find  camel-jmapper component
dmvolod:1552871965:2019-03-18T09:19:25.481+0000:1552871965:2019-03-18T09:19:25.481+0000:[~arun12376], as JMapper framework is not developing anymore for 2 years, this not good idea to build this component right now.

[~davsclaus], [~ancosen], what do you think to close this issue as not implemented.
acosentino:1552872073:2019-03-18T09:21:13.905+0000:1552872073:2019-03-18T09:21:13.905+0000:[~dmvolod] it makes sense. Please close as out of date."
0,CAMEL-5878,Task,Major,2.10.3,None,"
None
",Resolved,Fixed,2.12.0,Christian Müller,Christian Müller,2,3,2012-12-14 17:44:05+00:00,2013-05-26 12:02:08+00:00,See http://blog.springsource.org/2012/12/13/spring-framework-3-2-goes-ga/ for details,davsclaus:1369540928:2013-05-26T12:02:08.723+0000:1369540928:2013-05-26T12:02:08.723+0000:Requires Karaf 2.3.2
0,CAMEL-5877,Bug,Major,2.10.3,2.10.4,"
None
",Resolved,Fixed,2.10.4,Daniel Kulp,Akitoshi Yoshida,0,2,2012-12-14 12:01:08+00:00,2012-12-19 19:52:46+00:00,"There is one concrete issue to report and there is an additional point that I would like to bring up.


First, the concrete issue is that CxfEndpoints' findName does not currently handle SAXSource. Consequently, the it fails to find the element name when the payload source is of SAXSource.


This issue can be observed sporadically, as there is a chance the Source could be SAXSource. Because of the nature of this problem explained below, this issue may be observed non-deterministically and consequently it is not often observed.


What is happening is that, when a conversion to CxfPayload is triggered, CxfPayloadConverter's convertTo method arbitrarily picks a converter that can convert the input to Source. The code goes into BaseTypeConverterRegistry and searches for a matching converter in its type mappings' entry set. As this set has no deterministic ordering and there are several matching converters, an arbitrary converter is picked up. THe chance of getting the SAXSource converter is small but not zero. Therefore, when this happens, CxfEndpoint's findName is not finding the element name as there is no handling for SAXSource. Interestingly, the DOMSource converter is the most frequently picked converter, followed by the StaxSource converter.


So, SAXSource handling needs to be added in CXFEndpoint's findName method.


The second point is about the preferred Source held in CxfPayload. I think for jdk 1.6 or above, StAXSource could be the preferred source. In that case, we can use the StAXSource converter instead of arbitrarily picking one of the Source converters. We can adjust CxfPayloadConverter's convertTo method to look up for the StAXSource converter first.


I am attaching a proposed patch (the correction for the first issue and the suggestion regarding the second point, assuming StAXSource is preferred.). Could you review it and comment on it?


Thanks.


Regards, aki","ay:1355457773:2012-12-14T12:02:53.212+0000:1355457773:2012-12-14T12:02:53.212+0000:from trunk
dkulp:1355836554:2012-12-18T21:15:54.718+0000:1355836554:2012-12-18T21:15:54.718+0000:
I've done some heavy modifications to the patch and committed a fix.  For the most part, if the incoming object/message is in a form that we can directly create a Source for it, I did that to avoid any of the ""magic"".   For some things (like xalan or Saxon) that may prefer a StreamSource, the may allow it to remain as a StreamSource.  If it's already a DOM, it can use a DOMSource as well.  Can you give that a look and see if that works better for your use case?
ay:1355917966:2012-12-19T19:52:46.640+0000:1355917966:2012-12-19T19:52:46.640+0000:Hi Dan,
it looks very good.
thanks.
regards, aki
"
0,CAMEL-5876,Bug,Minor,2.10.2,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Markus W Mahlberg,0,2,2012-12-14 10:54:33+00:00,2013-02-03 12:10:21+00:00,"webapp-servlet.xml
...
    <camel:camelContext id=""MyCamelContext"" autoStartup=""false"">
        <camel:route id=""testroute"">
            <camel:from uri=""timer:test?period=5s"">
            </camel:from>
            <camel:log message=""Consumed from timer""/>
        </camel:route>
    </camel:camelContext>
...




When set up like this, the route testroute is not started when the camelContext is started, even when autoStartup=""true"" is explicitly added to testroute.


What I would expect is that the route is started automatically when camelContext is started, as long as the route has no autoStartup=""false"" property, since autoStartup=true is the default behavior for routes as far as I understand the docs.


If the current behavior is the intended one, the reversion of the default behavior of routes should be pointed out in the docs.","davsclaus:1355466670:2012-12-14T14:31:10.950+0000:1355466670:2012-12-14T14:31:10.950+0000:Can you point out what does not work. We have a bunch of unit tests so I would assume this works. Just dont wanna dig into the code base, before you have tried again and ensured its indeed something wrong.
davsclaus:1359864621:2013-02-03T12:10:21.561+0000:1359864621:2013-02-03T12:10:21.561+0000:This is as designed, when autoStartup=false, on <camelContext> then all routes is not started etc. You need to start Camel first.

"
0,CAMEL-5875,Bug,Major,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Luc Leclerc,0,2,2012-12-13 21:13:18+00:00,2012-12-17 14:49:10+00:00,"It is the second bug I found related to AdviceWith, we might want to copy/paste all the test, to make sure AdviceWith can be used before the CamelContext is started with all it's functionality.


http://camel.465427.n5.nabble.com/Bug-AdviceWith-not-working-with-weaveAddFirst-weaveAddLast-td5724054.html","njiang:1355450640:2012-12-14T10:04:00.597+0000:1355450640:2012-12-14T10:04:00.597+0000:Applied patch into trunk, camel-2.10.x and camel-2.9.x branches.
lleclerc:1355726950:2012-12-17T14:49:10.400+0000:1355726950:2012-12-17T14:49:10.400+0000:I confirm that it works in 2.10.4-SNAPSHOT.
Thanks!"
0,CAMEL-5874,Task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-12-13 12:58:33+00:00,2012-12-13 15:03:32+00:00,"As the in message header could be used when route the message from xmlrpc endpoint to other endpoint, we need to put the in message headers into the out message.",njiang:1355382212:2012-12-13T15:03:32.596+0000:1355382212:2012-12-13T15:03:32.596+0000:Applied the patch into trunk.
0,CAMEL-5873,Task,Major,None,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-12-13 12:54:12+00:00,2012-12-14 10:03:23+00:00,"As new release versions of CXF are out, we need to consider update the CXF version in camel.","njiang:1355450603:2012-12-14T10:03:23.951+0000:1355450603:2012-12-14T10:03:23.951+0000:Upgraded the version of cxf on trunk, camel-2.10.x and camel-2.9.x."
0,CAMEL-5872,Improvement,Minor,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-13 09:44:49+00:00,2013-01-05 13:40:00+00:00,"See
http://stackoverflow.com/questions/13838921/how-to-do-type-conversion-with-the-scala-camel-dsl


To make it easier for ppl to understand/migrate to Scala DSL, we should have the same eip names in scala as in java.",
0,CAMEL-5871,Bug,Major,"2.8.0, 2.9.0, 2.10.0, 2.11.0",2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Antoine Bertrand,0,3,2012-12-13 08:46:24+00:00,2012-12-22 15:47:02+00:00,"Bindy is unable to parse correctly a CSV file if a field begin with a ' (single quote).


This case is valid for foreign names/words or french apostrophe:


order.csv
10,A9,Patric,'T jo,ISIN,XD12345678,BUY,Share,2500.45,USD,08-01-2009","nexus6b:1355360069:2012-12-13T08:54:29.935+0000:1355360069:2012-12-13T08:54:29.935+0000:Patch against the latest trunk.

The bug is due to the quoting characters being hard coded into the unmarshaller and doesn't take the quote char provided via the annotations.

To solve that, we set a default quoting character ('""' double quote) and make it accessible to the unmarshaller. We add a flag for the marshaler to produce or note a quoted csv file with the provided quoted character.
njiang:1355371226:2012-12-13T12:00:26.925+0000:1355371226:2012-12-13T12:00:26.925+0000:Hi Antonie,
Thanks for the patch, I just noticed that you ignore the test of BindyUnmarshalCommaIssueTest.testBindyUnmarshalSingleQuoteCommaIssueTwo.  
As this feature break the old behavior, We can just only apply the patch into the trunk.
davsclaus:1356162422:2012-12-22T15:47:02.148+0000:1356162422:2012-12-22T15:47:02.148+0000:Cannot backport as it breaks old behavior."
0,CAMEL-5870,Task,Major,2.10.3,None,"
None
",Resolved,Won't Fix,"2.9.6, 2.10.4, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,2,2012-12-12 19:23:30+00:00,2013-01-07 12:21:24+00:00,"Spring's DefaultMessageListenerContainer leaks MessageConsumers, Sessions and Connections when maxMessagesPerTask is greater than -1 (i.e. you have defined how many messages you'll process in each task).


Here is the bug report: https://jira.springsource.org/browse/SPR-10092.


This happens if you first call DLMC.stop(), followed by DLMC.destroy(). The stop() method pauses the consuming tasks, and the destroy() method ""forgets"" to free the underlying resources.


We use DLMC.stop() when suspending the JmsConsumer.


To circumvent this issue, let's destroy the DLMC directly even when suspending the consumer. It's the safest option for now.","davsclaus:1355366405:2012-12-13T10:40:05.006+0000:1355366405:2012-12-13T10:40:05.006+0000:The bug is not in Camel but in spring-jms. So people can upgrade to newer spring releases when they are out.

Though if you change anything in Camel, mind that this will affect
http://camel.apache.org/routepolicy.html

if ppl use the throttling route policy to throttle jms consumers. As the sheer number of suspend/resume with the destroy may cause degrations / other issues down the road.
davsclaus:1357532484:2013-01-07T12:21:24.137+0000:1357532484:2013-01-07T12:21:24.137+0000:This bug is fixed in Spring Framework.

People can/should use start|stop with JMS routes if they want to stop/destroy all the JMS resources.

The bug in Spring is only affected when using suspend/resume, and using Spring 3.1.3 or older.
"
0,CAMEL-5869,New Feature,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2012-12-12 15:12:04+00:00,2015-07-11 13:18:44+00:00,"Currently we only allow to bind to a single port when using netty consumer.


It may be desirable to allow to expose multiple ports for the same consumer.","davsclaus:1355735477:2012-12-17T17:11:17.122+0000:1355735477:2012-12-17T17:11:17.122+0000:We should make it possible to define a mapping between port and pipeline factory.
Then people can have plain and SSL connectors and whatnot. And it gives them full power to configure this."
0,CAMEL-5868,Task,Minor,"2.9.0, 2.9.5, 2.10.0, 2.10.2, 2.10.3","2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Filippo Balicchia,0,2,2012-12-12 14:49:12+00:00,2012-12-14 10:09:04+00:00,"Like 
https://issues.apache.org/jira/browse/SMX4-759
the same fix in IMHO need to be applied to Camel Maven Archetypes","njiang:1355450944:2012-12-14T10:09:04.148+0000:1355450944:2012-12-14T10:09:04.148+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5867,Bug,Major,2.10.0,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-12-12 13:58:09+00:00,2012-12-15 13:37:49+00:00,"The jetty component creates a default jetty http client, even if its not needed.",
0,CAMEL-5866,Bug,Major,2.10.3,"2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Raúl Kripalani,Raúl Kripalani,0,1,2012-12-12 10:44:54+00:00,2012-12-18 00:15:25+00:00,"Where the Exchange object is available, pass it to TypeConverter.convertTo.


Currently, when Camel happens to pick a Type Converter requiring the Exchange, conversion may fail (as there's no check for this situation).


See CAMEL-5864 as an example.",
0,CAMEL-5835,Bug,Minor,None,"2.9.6, 2.10.4, 2.11.0","

thread-safety

",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Claus Ibsen,Peter Sramka,0,3,2012-11-29 21:25:26+00:00,2013-01-07 12:21:55+00:00,"The javadoc for org.apache.camel.builder.xml.XPathBuilder states that it is thread-safe, but an inspection of the source code in the trunk reveals that there are thread-safety bugs.","petesramka:1354198862:2012-11-29T22:21:02.309+0000:1354198974:2012-11-29T22:22:54.262+0000:h4.Background
Java concurrency is a deep and subtle topic. I have found that knowledge of this topic is often lacking, even with very intelligent and experienced Java programmers. Consequently, there is much Java code in existence with concurrency bugs.

Concurrency in Java is intimately inter-twined with the Java Memory Model. The Java Memory Model was updated via _JSR 133: Java Memory Model and Thread Specification Revision_. Starting with Java 2 SE 5.0, all Java Virtual Machines are required to use this updated Java Memory Model. The results of _JSR 133_ are included in the Java Platform Standard Edition Documentation. This _JSR 133 (Java Memory Model) FAQ_ is a brief, but very well-written, synopsis of _JSR 133_: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html

A basic discussion of Java concurrency is contained in the _Essential Classes Trail_ within the _Trails Covering the Basics_ of _The Java Tutorials_: http://docs.oracle.com/javase/tutorial/essential/concurrency/index.html

This page from the _Essential Classes Trail_ briefly describes _Memory Consistency Errors_: http://docs.oracle.com/javase/tutorial/essential/concurrency/memconsist.html

For a more detailed discussion of Java concurrency, I highly recommend the book _Java Concurrency in Practice_, which was written by the primary members of the _JSR 166_ Expert Group (_Concurrency Utilities_): http://jcip.net/

Please be advised that there are many sources of so-called ""expert"" information about Java concurrency, including published books and lectures of prestigious university professors, that are filled with fundamental technical errors. Consequently, there are many smart Java programmers who believe certain things about Java concurrency that are just plain wrong. As an example, _The ""Double-Checked Locking is Broken"" Declaration_ exposes one widely-used, but flawed, technique: http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
----
h4.Thread-Safe Classes
There are many techniques for writing thread-safe code, but one of the simplest and most effective is to write thread-safe classes. Here are a couple of excellent quotes from page 18 of _Java Concurrency in Practice_ (http://jcip.net/):

""A class is _thread-safe_ if it behaves correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code.""

""Thread-safe classes encapsulate any needed synchronization so that clients need not provide their own.""

A class is ""accessed from multiple threads"" when:
* Any instance of that class is ""accessed from multiple threads""
or
* The class object itself -- the collection of all static fields and methods of the class -- is ""accessed from multiple threads"".

Note that the statements above do not include the phrase ""accessed from multiple threads _simultaneously_"". It is a widely-held, but incorrect belief, that if a class is never accessed by more than one thread at a time, then all thread-safety considerations may be safely ignored for that class. If a class is accessed from multiple threads, but not simultaneously, mutual exclusion is not a concern, but memory visibility is. For more information about memory visibility and the related topic of memory consistency errors, please refer to the previous section.

To determine if a particular class is thread-safe, all of the following must be analyzed:
* The source code of the class in question
* The source code of all classes that the class in question extends either directly or indirectly
* The source code of all interfaces that the class in question implements either directly or indirectly
petesramka:1354199863:2012-11-29T22:37:43.559+0000:1354199863:2012-11-29T22:37:43.559+0000:For example, shown here are all uses of the instance variable bodyFunction. Access to this variable is ""incorrectly synchronized,"" as defined by this _JSR 133 (Java Memory Model) FAQ_: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html
!screenshot-1.jpg!
davsclaus:1354240672:2012-11-30T09:57:52.354+0000:1354240672:2012-11-30T09:57:52.354+0000:There is no problem with the default functions as they dont share any state or whatsoever. They are just anonym inlined functions as shown in the code above.
davsclaus:1354240844:2012-11-30T10:00:44.784+0000:1354240844:2012-11-30T10:00:44.784+0000:The functions are now being forced created when starting the builder. So they will never be null anymore.
petesramka:1354258793:2012-11-30T14:59:53.352+0000:1354259673:2012-11-30T15:14:33.209+0000:The changes made to the code did not make the class thread-safe. Perhaps it would help to:
1) Study the documentation that I presented in the comments section.
and/or
2) Get a Java thread-safety guru involved.
davsclaus:1354259710:2012-11-30T15:15:10.794+0000:1354259710:2012-11-30T15:15:10.794+0000:Peter

Maybe you provide a patch for the Camel team to review.
petesramka:1354267903:2012-11-30T17:31:43.405+0000:1354267903:2012-11-30T17:31:43.405+0000:I can create the patch fairly quickly. However, I have to get legal clearance from my employer before I can make a submission to Camel. It make take awhile. I apologize for the delay..."
0,CAMEL-5834,Task,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Claus Ibsen,0,1,2012-11-29 10:44:17+00:00,2013-01-18 15:51:04+00:00,"A number of new data formats is added to camel-cxf, but they are not documented.","davsclaus:1354157128:2012-11-29T10:45:28.779+0000:1354157128:2012-11-29T10:45:28.779+0000:See the DataFormat.java file for the new types which has javadoc with more details. That need just to be added to the CXF docs table.
Also with what Camel version these new formats was added.
davsclaus:1358495464:2013-01-18T15:51:04.675+0000:1358495464:2013-01-18T15:51:04.675+0000:Thanks Willem for the doc update"
0,CAMEL-5833,Bug,Major,2.10.2,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,liugang,0,2,2012-11-29 09:37:23+00:00,2012-11-29 10:36:56+00:00,"if I have following route:



				from(""cxf:http://localhost:8091/save2file?dataFormat=RAW&wsdlURL=file:wsdl/se.wsdl"").process(new Processor() {
					
					public void process(Exchange exchange) throws Exception {
//						System.out.println(exchange.getIn().getBody(String.class)); // the saved file content is none
						System.out.println(exchange.getIn().getBody());            // this works fine
					}
				}).to(""file://output?fileName=message.txt"");




as comment, if in Processor, I put:



System.out.println(exchange.getIn().getBody());




Then, it works fine, the file created, and the content is correct.
but if I changed getBody() to getBody(String.class):



System.out.println(exchange.getIn().getBody(String.class));




then, the file created by with empty content.


Actually, the problem existed for a long time.","davsclaus:1354156604:2012-11-29T10:36:44.310+0000:1354156604:2012-11-29T10:36:44.310+0000:Hi

Please use the mailing lists first to get help with Camel as we say here
http://camel.apache.org/support

Your problem is related to the fact that the data is only re-adable once because its stream based. dataFormat=RAW.
And so when you print the data using system out, then the data is no longer re-readable so when you write the file its empty.

You can enable stream caching
http://camel.apache.org/stream-caching.html

To have Camel cache the stream, so it can be re-readable."
0,CAMEL-5832,Improvement,Minor,2.10.2,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,3,2012-11-28 14:29:16+00:00,2019-08-05 09:33:24+00:00,"If people do something stupid to send a message to a queue which has a JMSReplyTo that goes back to the same queue, then that message would go in looping (endless).


We should maybe add some check for this, and add some option people can turn on|off this check. And if the check is enabled it would detect this and not send back a reply to itself.


There may be some odd use-cases where people send back reply messages to the same queue. And maybe have some dynamic router logic that can break the chain when done.","devendra0008@yahoo.com:1370189387:2013-06-03T00:09:47.759+0000:1370189387:2013-06-03T00:09:47.759+0000:Hi Claus,
I'll have a crack at this.

Thanks
-Dev
devendra0008@yahoo.com:1371165768:2013-06-14T07:22:48.021+0000:1371165768:2013-06-14T07:22:48.021+0000:Hi Claus,

I wrote a quick test to try and see if this what you are after.
Can you please eyeball it real quick?

Thanks
-Dev
devendra0008@yahoo.com:1372715544:2013-07-02T05:52:24.170+0000:1372715544:2013-07-02T05:52:24.170+0000:G'day Claus,

Please find the attached @EndpointMessageListener and @JmsConfiguration classes.
My thinking is, we catch the trap set by the message sender (i.e. if the sender is trying to send us a msg and asking the JmsConsumer to reply back to the same queue, effectively creating an endless loop) at runtime. I couldnt find a way to determine this condition at route creation time, so had to put a check within the onMessage() method.
Please ignore the old test that I attached at 14th of June. Attached is a new test which can help create a short lived endless loop.

Let me know your thoughts.

Thanks
-Dev"
0,CAMEL-5831,Bug,Major,2.11.0,2.11.0,"
None
",Closed,Not A Problem,2.11.0,Claus Ibsen,Myriam Khairallah,0,2,2012-11-28 14:15:51+00:00,2012-11-30 08:40:44+00:00,"Hello,


while wanting to introduce MDC logging within our camel projects, we encounter an error concerning the predefined value ""camel.breadcrumbId"".


When the fromEndpoint is ""direct"", the breadcrumId is not displayed on the output log, though it is available within the message headers.


Please find attached a little project containing three routes and a unittest class.


The test ""testRoute1"", which tests a route with only ""direct"" endpoints, will show you that at no step of the process, the BreadcrumbId is displayed.


Regards,
Myriam","myriam.k:1354083403:2012-11-28T14:16:43.030+0000:1354083403:2012-11-28T14:16:43.030+0000:Test project for MDC logging
davsclaus:1354096583:2012-11-28T17:56:23.858+0000:1354096583:2012-11-28T17:56:23.858+0000:The MDC logging in Camel only supports the out of the box keys listed here
http://camel.apache.org/mdc-logging.html
myriam.k:1354144604:2012-11-29T07:16:44.991+0000:1354144604:2012-11-29T07:16:44.991+0000:Hi Claus,

sorry to insist, but I am actually talking about one of the ""out of the box keys listed"" - the breadcrumbId, which is accessible via the key word ""camel.breadcrumbId"" in the log4j.properties.

Could you please have another look ?

Thanks and regards,
Myriam
davsclaus:1354176950:2012-11-29T16:15:50.510+0000:1354176950:2012-11-29T16:15:50.510+0000:Hi

You are doing it wrong in your unit test

You should use the existing CamelContext, when creating an exchange as shown below:
{code}
        Exchange exchange = new DefaultExchange(context);
{code}

What you do is wrong by creating n new DefaultCamelContext, that is not the context from your blueprint xml file.
myriam.k:1354236044:2012-11-30T08:40:44.674+0000:1354236044:2012-11-30T08:40:44.674+0000:Hi Claus,

thanks for the clarification, helps to get day after day a bit smarter in the camel world ! ;-)

Regards,
Myriam"
0,CAMEL-5830,Bug,Major,2.10.2,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Ulrich Kramer,0,1,2012-11-28 08:17:44+00:00,2012-11-28 17:17:02+00:00,"When an exception occures during the startup of a route Route::getConsumer() might return null.
During the shutdown of this route the logging in DefaultCamelContext::stopRouteService yields to a NullPointerException:


log.info(""Route: "" + route.getId() + "" stopped, was consuming from: "" + route.getConsumer().getEndpoint())",
0,CAMEL-5829,Improvement,Minor,None,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Claus Ibsen,0,3,2012-11-28 07:59:16+00:00,2013-06-07 08:41:42+00:00,"The read lock strategy may log at WARN level if they cannot acquire a read lock on a file. Some ppl may want to lower this level to not have this in their logs.



  WARN  | org.apache.camel.component.file.strategy.FileChangedExclusiveReadLockStrategy | Cannot acquire read lock within 60000 millis. Will skip the file: GenericFile[\Projects\xxx\somefile.txt] -




We should add a new option which can be set on the read lock strategies. Just like you can set the timeout value.





 Option 
 Default 
 Description 


readLockLoggingLevel 
 WARN 
 Camel 2.11: Logging level used when a read lock could not be acquired. By default a WARN is logged. You can change this level, for example to OFF to not have any logging. This option is only applicable for readLock of types: changed, fileLock, rename 





This option is only applicable for



FileChangedExclusiveReadLockStrategy
FileLockExclusiveReadLockStrategy
GenericFileRenameExclusiveReadLockStrategy","davsclaus:1354241010:2012-11-30T10:03:30.334+0000:1354241010:2012-11-30T10:03:30.334+0000:Rich you wanna take a stab at this? 
nerses_am:1369659001:2013-05-27T20:50:01.756+0000:1369659001:2013-05-27T20:50:01.756+0000:Hi Claus,

What about FtpChangedExclusiveReadLockStrategy and SftpChangedExclusiveReadLockStrategy. I think they should have them as well. If so we can add the option to GenericFileExclusiveReadLockStrategy interface.
davsclaus:1369687430:2013-05-28T04:43:50.890+0000:1369687430:2013-05-28T04:43:50.890+0000:Yeah it should be supported on both file + ftp.

Contributions is much welcome
http://camel.apache.org/contributing.html
barthorre:1370490738:2013-06-06T11:52:18.206+0000:1370490738:2013-06-06T11:52:18.206+0000:I took a stab at it, but since we're not able to disable logging programmatically via slf4j, I saw no other option than providing a setter for readLockLoggingLevel on the GenericFileExclusiveReadLockStrategy and check that value with an if clause before writing the log statement.

Not sure if this is a valid aproach
nerses_am:1370524284:2013-06-06T21:11:24.902+0000:1370524284:2013-06-06T21:11:24.902+0000:Oops, I was looking at this yesterday, and already created a patch. I've submitted a pull request on github. 

Bart, that's exactly what I've done. 
barthorre:1370556808:2013-06-07T06:13:28.201+0000:1370556808:2013-06-07T06:13:28.201+0000:Nice, I'll definitely check your implementation out!
davsclaus:1370562432:2013-06-07T07:47:12.746+0000:1370562432:2013-06-07T07:47:12.746+0000:Thanks guys for working on this.

I am looking at the pull request to be included."
0,CAMEL-5828,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.12.0,Willem Jiang,Eric,1,5,2012-11-27 20:01:54+00:00,2013-06-03 16:16:22+00:00,"My system is an hybrid of CAMEL and LMAX Disruptor, where threads consuming from LMAX ringbuffer are feeding a ""pool"" of SEDA queues in a round-robin fashion.  This system operates at very high-speed such as consumers from the SEDA queues and their producers are constantly blocking on the queues.  Having a non-blocking, high-performance endpoint like LMAX Disruptor would be a great addition to CAMEL.


LMAX Disruptor website: http://lmax-exchange.github.com/disruptor/","ladoe00:1354019155:2012-11-27T20:25:55.256+0000:1354019155:2012-11-27T20:25:55.256+0000:Github project with a pretty good head start: https://github.com/sirchia/camel-disruptor
davsclaus:1363756112:2013-03-20T13:08:32.533+0000:1363756112:2013-03-20T13:08:32.533+0000:Yeah we love contributions.

So just keep hacking on that github project and complete the missing pieces. And add unit tests, documentation et all.

Then when its mature and ready, then we can take a look at donating it to ASF for inclusion in Apache Camel.


sirchia:1364479130:2013-03-28T21:58:50.208+0000:1364479130:2013-03-28T21:58:50.208+0000:The repo/project is mine. Nice to see somebody else expressing interest in it!

I created it with the intention of doing exactly that, making it mature enough for donation to ASF, but I ran into some nasty multi-threading issues when used in high load scenarios causing some messages to be lost. 

I was busy analysing if this was caused by Disruptor, Camel core or my attempt of integrating them (most likely :)) but other activities have kept me from making significant progress there.

I'll see if I can rekindle my efforts and of course any assistance would be most welcome! 
See my profile/github for contact info. 
ladoe00:1364491113:2013-03-29T01:18:33.087+0000:1364491269:2013-03-29T01:21:09.495+0000:Great to see you in here.  I have integrated your code in my system, but I have seen a problem with the exchange being copied when the consumer takes it from the ring buffer.  The unit of work was modified by two threads, were one would make it null and the other would throw a NPE.  To fix it, I made the copy before inserting in the ring buffer, by make a correlated copy of the exchange.  I have a Unit Test to reproduce it on demand.

I also copied all the unit tests from the Seda component, and ported them to the disruptor component.  I have ported about 30% of them so far, all tests passing.  I have also modified the code base a little bit, making the Component in charge of creating the endpoints and managing the different disruptor instances.  Just like the seda endpoints, you now can reference a disruptor using a URI with or without the options:

From(""disruptor:test?concurrentConsumers=3"")
Will reference the same disruptor instance as
From(""disruptor:test"")

I haven't done extensive performance tests yet, so I can't comment on your multithread issues.

I am now at the stage of handling when a asynchronous request-reply is timing out, and removing the exchange (on making the consumer ignore the exchange) from the ring buffer.  Maybe the new version 3.0 would help, but I am not sure yet.

sirchia:1368084199:2013-05-09T15:23:19.021+0000:1368084199:2013-05-09T15:23:19.021+0000:I've progressed pretty far with the implementation, unit tests and documentation (thanks Eric for your help). The end result compares favorabel to the SEDA component in terms of throughput and latency, especially where multiple consumers are involved.
 
I've made a component 'disruptor' that should serve as a drop-in replacement for the 'seda' endpoint. In order to enable even more use-cases I want to provide an additional component to replace the 'vm' component as well. Its implementation (DisruptorVmComponent) is as minimal an increment to the DisruptorComponent as the VmComponent is to the SedaComponent. My 1st question is: should I make two separate projects producing a disruptor.jar and a disruptor-vm.jar where the latter has a dependency on the 1st or is it ok for the disruptor.jar to contain both components (similar to camel-core.jar)?

Finally I was wondering if there is a possibility/are plans to be able to realize an override of the default multicast behaviour to use the Disruptor instead of the normal SEDA-like implementation? This would allow applications using multicast routes to utilize the power of the Disruptor without having to re-define their routes to the Disruptor based multicasting equivalent.

Once I got the answers to my questions processed into the code base, I'll offer it for inclusion in Apache Camel. Would you prefer a big patch file or Github pull request? Any additional things I should take into account?
sirchia:1369062278:2013-05-20T23:04:38.522+0000:1369062278:2013-05-20T23:04:38.522+0000:This patch contains everything required to add a new Camel disruptor and disruptor-vm component (in one bundle). If preferred over a patch file, a pull request by the name of 'CAMEL-5828 - Added camel-disruptor component' is also offered on Github.com.

I've got some documentation (in line with the SEDA Camel component) ready prepared. Please let me know how and in what format it should be offered to be included on the Camel website.

I hope it can be included in Camel 2.12. Please let me know if there is anything that needs correction/improvement.
njiang:1369117083:2013-05-21T14:18:03.646+0000:1369117083:2013-05-21T14:18:03.646+0000:Hi Riccardo,

It's really good to have a new component in Camel 2.12.
As we don't want to introduce any other third part dependencies to the camel-core, so we may need to do some change on the camel-core to make the seda implementation to be plug-able.

Willem 
njiang:1369196222:2013-05-22T12:17:02.548+0000:1369196222:2013-05-22T12:17:02.548+0000:Applied the patch with thanks to Riccardo, after fixing some CS issues and some mini bug fix.
I also add camel-disruptor feature for the new component.
It looks like we need to some addition work to export the sun.misc from karaf to load the com.lmax.disruptor. I will work on it later.

Riccardo, do you mind to wrap up the component with some document like this http://camel.apache.org/seda.html ?

 
sirchia:1369198198:2013-05-22T12:49:58.847+0000:1369198198:2013-05-22T12:49:58.847+0000:As I mentioned earlier I have already prepared some documentation quite similar to the seda doc.
I'll have to extend it a little to also cover the disruptor-vm endpoints similar to http://camel.apache.org/vm.html
The documentation is currently in Markdown format.

My question was: how to provide this documentation and in what format? Markdown, plain HTML without any styling, plain text, etc?
njiang:1369208386:2013-05-22T15:39:46.439+0000:1369208386:2013-05-22T15:39:46.439+0000:Hi Riccardo

I think Markdown is OK, if you don't have the right the update the wiki page, I can do that for you.

I found DisruptorUnitOfWorkTest failed sometimes, so I dug the code for a while. I just found camel-distruptor consumer doesn't copy the handovers of from the exchange as the seda consumer does. So when the Notify is matched, the onCompletion method could not be called yet.

Here are the code of DisruptorConsumer
{code}
 private Exchange prepareExchange(final Exchange exchange) {
        // send a new copied exchange with new camel context
        // don't copy handovers as they are handled by the Disruptor Event Handlers
        final Exchange newExchange = ExchangeHelper
                .copyExchangeAndSetCamelContext(exchange, endpoint.getCamelContext(), false);
        // set the from endpoint
        newExchange.setFromEndpoint(endpoint);
        return newExchange;
    }
{code}
Can you give me more explanations about the code?

sirchia:1369237948:2013-05-22T23:52:28.192+0000:1369237948:2013-05-22T23:52:28.192+0000:Hey Willem,

I attached a README.md to this issue to be used for documentaion.

Regarding the problem with unit tests: I've tried many times but unfortunately I'm unable to reproduce it... Can you post some stacktrace/additional details to explain what exactly is going wrong?

To explain why it differs from the implementation of SEDA: the main cause lies in the fact that the SedaConsumer itself is responsible for distributing the exchange to multiple consumers where the Disruptor logic takes care of the multicasting in my component. This implies that the synchronization point should also lie within the Disruptor logic. 

To compare the solutions: 
SedaConsumer copies the incoming exchange (including handover synchronisations) to prepare for distribution to the processors. If the exchange is multicasted, the handover completion synchronisations are taken out of the copied exchange, it is distributed to all processors and it triggers the synchronisations after they have all finished.

The Disruptor stores the published exchange (which was copied earlier by the DisruptorProducer) in a pre-allocated, mutable ExhangeEvent on the RingBuffer (managed by the DisrutprReference). The DisruptorReference knows how many unique DisruptorConsumers are consuming from that Disruptor and passes this information along to the ExhangeEvent. The ExchangeEvent is then given to all registered DisruptorConsumers, each executing on their own thread, which copy the exchange (without the handover synchronisations) and notify the ExchangeEvent when they are done processing. The ExchangeEvent counts all finished consumers and upon completion of the last performs the handover synchronisation.

I have a change pending (will post patch tomorrow) that takes the handoverCompletions from the published exchange before it is provided to all consumers (more in line with how SEDA works).

I noticed however that while I was fixing some other threading issues ealier (coincidentally also regarding handover sync etc), I introduced some severe performance problems making the disruptor slower than the SEDA component :) 
This happened because I tried to improve upon the request-reply behaviour of SEDA in multicast scenarios (make it more feature rich), however it is not worth doing so when it will cost the main advantage of the Disruptor.

The pending patch will rollback these changes and as mentioned make the code more clear on the completion synchronisation.

Riccardo
sirchia:1369263977:2013-05-23T07:06:17.853+0000:1369263977:2013-05-23T07:06:17.853+0000:And here is the patch.

Note that it is incremental to the previous one.

If the problem with the handover completion synchronisations still occurs, I'm gonna need a little more info as I can't reproduce it (my computer appears to be either too fast or too slow :)

Riccardo
njiang:1369266018:2013-05-23T07:40:18.585+0000:1369266018:2013-05-23T07:40:18.585+0000:Hi Riccardo,
Here is the stack trace of DisruptorUnitOfWorkTest if I remove the Thread.sleep code.

{code}
testDisruptorUOW(org.apache.camel.component.disruptor.DisruptorUnitOfWorkTest)  Time elapsed: 0.182 sec  <<< FAILURE!
java.lang.AssertionError: expected:<onCompleteA> but was:<null>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.apache.camel.component.disruptor.DisruptorUnitOfWorkTest.testDisruptorUOW(DisruptorUnitOfWorkTest.java:54)
{code}

Here is my system information
{code}
Apache Maven 3.0.4 (r1232337; 2012-01-17 16:44:56+0800)
Maven home: /usr/share/maven
Java version: 1.6.0_41, vendor: Apple Inc.
Java home: /Library/Java/JavaVirtualMachines/1.6.0_41-b02-445.jdk/Contents/Home
Default locale: en_US, platform encoding: MacRoman
OS name: ""mac os x"", version: ""10.7.5"", arch: ""x86_64"", family: ""mac""
{code}

Willem
njiang:1369267319:2013-05-23T08:01:59.522+0000:1369267319:2013-05-23T08:01:59.522+0000:Riccardo, 
I just applied your new patch into the trunk, the issue is still there if you change the tests as I showed.
It looks the onCompliation method is called after the exchange is done. 
sirchia:1369272757:2013-05-23T09:32:37.285+0000:1369272757:2013-05-23T09:32:37.285+0000:Maybe I missed it, but I can't find what you did to trigger the problem? As there is no sleep in that unit test, where did you put it to trigger/workaround the problem?

Anyway, I understand what seems to be the problem. I'll also look into it.

Please let me know if you've found out anything that may help solving this issue.
njiang:1369284735:2013-05-23T12:52:15.854+0000:1369284735:2013-05-23T12:52:15.854+0000:Hi Riccardo,

Can you check out the latest camel code from https://git-wip-us.apache.org/repos/asf/camel.git?
I made some changes when I applied your patch to fix some check style issues, it could be easy for me to apply the patch if we are working on same repository.

DisruptorUnitOfWorkTest is use notify to check exchange onDone event, in seda component, the exchange onDone event is sent after the Synchronization.onComplete() is called, but it is different in camel-disruptor component.

Willem


 
sirchia:1369350779:2013-05-24T07:12:59.841+0000:1369350779:2013-05-24T07:12:59.841+0000:I updated to the version of the code from the Git repo you sent me and indeed, I also get the same problem now.
I've spent some time on it yesterday, but haven't yet figured out why this fails.

Something noteworthy is that it did not seem to fail on the state of the Apache Camel repo on Github on 1st of May.
So something changed to camel-core in the meantime may have invalidated some assumptions of the implementation.
sirchia:1369666340:2013-05-27T22:52:20.561+0000:1369666340:2013-05-27T22:52:20.561+0000:This patch fixes the problem that was detected in the DisruptorUnitOfWorkTest.

The problem was that final processing and synchronisation (which should be considered part of the processing of that exchange) in the DisruptorConsumer was done after the unit of work was considered done.

The final processing was previously done on the AsyncCallback, which is called after the CamelInternalProcessorTasks in CamelInternalProcessor.InternalCallback#done. 

To solve the issue, the final processing is instead registered as a Synchronization on the exchange, so org.apache.camel.impl.DefaultUnitOfWork#done processes it before the UOW is processed as done.

Let me know if there's anything else that should be improved and Claus: good too see that this component can be included in 2.12.0!


njiang:1369980877:2013-05-31T14:14:37.379+0000:1369980877:2013-05-31T14:14:37.379+0000:Applied the fixDisruptorUnitOfWorkTest.patch into master with thanks to Riccardo.

njiang:1370247382:2013-06-03T16:16:22.563+0000:1370247382:2013-06-03T16:16:22.563+0000:Updated the [wiki page|https://cwiki.apache.org/confluence/display/CAMEL/Disruptor].
"
0,CAMEL-5827,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Luca Burgazzoli,0,2,2012-11-27 17:53:47+00:00,2013-04-05 08:11:04+00:00,"The communication with some legacy systems often relies on old protocols and formats not easy to change and among that you may have to deal with fixed lenght records on which decimal numbers are not represented with a decimal separator but the number of decimal places is defined by the protocol definition (e.g. COBOL copy-book).


Example:


@DataField(pos = 1, length = 5, precision = 2, implied-decimal-separator = true)
private BigDecimal amount;


The string ""12345"" maps to 123.45 in Java.","davsclaus:1354239660:2012-11-30T09:41:00.576+0000:1354239660:2012-11-30T09:41:00.576+0000:You forgot to add the AbstractNumberFormat .java file to the patch.

Also if you know how to use Maven, it would be good if the patch passed our checkstyle ruling

See here, about building with checkstyle
http://camel.apache.org/building.html
lb:1354247461:2012-11-30T11:51:01.247+0000:1354247461:2012-11-30T11:51:01.247+0000:I've rebuild the patch and successfully ran checkstyle against my code.
 

davsclaus:1354247790:2012-11-30T11:56:30.655+0000:1354247790:2012-11-30T11:56:30.655+0000:Thanks. If I run a mvn clean install, I get these 2 errors now

{code}
Running org.apache.camel.dataformat.bindy.csv.BindyComplexCsvGenerateHeaderMarshallTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.98 sec <<< FAILURE!
Running org.apache.camel.dataformat.bindy.csv.BindyComplexCsvMarshallTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.77 sec <<< FAILURE!
{code}

Do you get that?
lb:1354253056:2012-11-30T13:24:16.829+0000:1354253056:2012-11-30T13:24:16.829+0000:Yes I get them. 
Do you think they are related to my patch? 
davsclaus:1354254408:2012-11-30T13:46:48.064+0000:1354254408:2012-11-30T13:46:48.064+0000:Yes as the test works fine before the patch.
lb:1354520111:2012-12-03T15:35:11.366+0000:1354520111:2012-12-03T15:35:11.366+0000:New patch available, should fix all the the previous issues.

However I have a question related to how a float should be marshalled/un-marshalled: 

Let's take the class org.apache.camel.dataformat.bindy.model.complex.generateheader.Order in which the field amount is defined as follow:

@DataField(pos = 9, precision = 2)
private BigDecimal amount;

This will properly un-marshall 10.00 and 10 but if I format it back I can only have 10 regardless of the precison. Should we have to take into account the precision when formatting? Or to add an additional parameter to properly represent the decimal part?
   
  


 

davsclaus:1354527157:2012-12-03T17:32:37.099+0000:1354527157:2012-12-03T17:32:37.099+0000:Lucas, yeah I think you found an issue. 

With 2 as precision, it should be
10.00

eg using 2 digits for precious.

If this bug is also present in current code, then feel free to log a 2nd JIRA. Then we can apply this patch. And you are welcome to work on a patch for that other problem.
lb:1354528518:2012-12-03T17:55:18.441+0000:1354528518:2012-12-03T17:55:18.441+0000:Yes this bug affects the current code but as it looks quite easy to fix in my patch (in fact the latest one did revert the behavior), what if I open a new jira and link it with this one? 
davsclaus:1354528602:2012-12-03T17:56:42.710+0000:1354528602:2012-12-03T17:56:42.710+0000:Yeah that is good also
lb:1354600265:2012-12-04T13:51:05.640+0000:1354600265:2012-12-04T13:51:05.640+0000:Fix also CAMEL-5846
davsclaus:1355711085:2012-12-17T10:24:45.247+0000:1355711085:2012-12-17T10:24:45.247+0000:Thanks for your contribution."
0,CAMEL-5826,Bug,Major,2.9.0,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Rich Newcomb,Shrish Srivastava,0,3,2012-11-27 14:05:52+00:00,2012-11-29 11:06:17+00:00,"when trying to tokenize a stream having namespaces, no tokens are produced with inheritNamespaceTagName property.


-------------------------------------------------------------------


<route id=""hrp.connectorsCtxt.sddRcvFile2"">
<from
                           uri=""file:C:\Temp\esb\sdd\in?recursive=true&preMove=.processing&move=../.processed"" />
                    <camel:split streaming=""true"">
                           <tokenize token=""suiviDemande"" inheritNamespaceTagName=""suivisDemandes"" xml=""true""/>
                           <log message=""${header.CamelSplitIndex} : ${in.body}"" />
                    </camel:split>
             </route>


-------------------------------------------------------------------","rnewcomb:1354069102:2012-11-28T10:18:22.424+0000:1354069102:2012-11-28T10:18:22.424+0000:The attached patch provides a solution for the issue that was reported on this ticket.  The XML Tokenizer was not parsing nodes that have namespace prefixes.  This was true for the ""inherit namespaces"" node as well as all explicitly-prefixed nodes that would otherwise match a non-prefixed token tag.  The issue occurs primarily when non-prefixed node names are configured on a tokenizer that is used to parse XML documents containing fully-qualified nodes.

The patch addresses this issue by matching node names for the configured token and the namespace provider without respect to the prefix value.  This loose-matching behavior occurs unless an explicit prefix value is specified.  The explicit namespace value will still be used for matching if it is provided.

It should be noted that this treatment of XML namespaces is a little loose.  Issues can occur if two different elements (in different namespaces) share a non-qualified name that matches the token tag.  Also, the use of explicit namespace prefixes (e.g. ns1,  ns2, etc.) is only beneficial if all documents that will be parsed by the tokenizer use the exact same namespace prefix values. 

It may be possible to expand the tokenizer to include more robust namespace matching.  For example, explicit namespace values could be specified as part of the tokenizer configuration, and logic could be written to match parsed nodes against those values.   I will be happy to investigate that route if there is interest.

I will update documentation, etc as appropriate once this patch is committed.
davsclaus:1354094639:2012-11-28T17:23:59.414+0000:1354094639:2012-11-28T17:23:59.414+0000:Yes Rich is right. The streaming based tokenizer is not a full solution for all namespace combos that you can throw at it. There is some other solution that supports that, such as camel-stax, camel-vtdxml, or god forbid the xpath from the JDK (though it loads it all in memory).

Anyway thanks to Rich we have a patch that should fix your use-case as well.

Rich fell free to work on the docs.
davsclaus:1354158377:2012-11-29T11:06:17.793+0000:1354158377:2012-11-29T11:06:17.793+0000:Marking this as fixed so Hadrian wont stop cutting a release because its listed as unresolved. The doc update is most likely only to add something to release notes etc."
0,CAMEL-5825,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2012-11-27 13:13:20+00:00,2015-07-11 13:32:26+00:00,"The Camel Karaf commands can show runtime information about running Camel apps in Karaf. As you can host many bundles with many Camel Context's you have N+ Camels in the same JVM.


The Camel Karaf commands should all have a parameter to let the user pick the camel id to use (its unique JMX name). Then that can be used as filter, to pick for example routes etc, if using camel:route-info.


This is a ticket to just remember to check the commands, as some may have this already.


But maybe we should start enforcing to pick the camel id, and use tab completion for that. As for Camel routes, you can have routes with same id, in different camel apps.


camel:route-info TAB (to pick among context id) TAB (to pick the routes for the given selected context id).",
0,CAMEL-5824,Improvement,Minor,2.10.2,"2.10.3, 2.11.0","

performance

",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Sotaro Kimura,0,1,2012-11-26 22:57:14+00:00,2012-11-29 11:07:54+00:00,"In testing hbase client using camel-hbase component,
data put performance is low.
( about 20 put operation / second, I use Core i7 2700K machine.)


I confirmed performance bottleneck.
And I find bottleneck below



Everytime camel-hbase component put data,
  camel-hbase component creates and closes HTableInterface.
But HTableInterface create cost is high.
   So camel-hbase component performance is low.



Performance problem is fixed by using HTablePool at HBaseProducer,
data put performance is improved 20 operetion/second to 200 operation/second.


Modified source is below( and attach patchfile.txt)



HBaseProducer.java(orig)
----------------------------
104            table.close();
----------------------------
HBaseProducer.java(improved)
----------------------------
104            tablePool.putTable(table);
----------------------------",skimura:1353941873:2012-11-26T22:57:53.844+0000:1353941873:2012-11-26T22:57:53.844+0000:Patchfile
0,CAMEL-5823,Bug,Major,2.10.2,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Akitoshi Yoshida,0,2,2012-11-26 12:34:39+00:00,2012-11-29 11:07:06+00:00,"When you have a camel route from a CXF oneway endpoint to some endpoint, cxfConsumer currently uses the input message to fill the cxf's response message at the cxf endpoint. This can lead to a problem in CXF as there can be an exception raised during this step.


To avoid this issue, I think we should not fill the cxf response if the cxf's exchange is set to oneway.


I have attached a test case and a possible fix for this issue.


There is also one question regarding this part of the processing in CxfConsumer. I noticed that there are no exception handling in that part in camel and therefore the exception is not visible in camel. I was not sure if this was intentional or if we should be setting the exception to camel's exchange in that case so that this exception is also picked up by camel.","ay:1353905490:2012-11-26T12:51:30.338+0000:1353905490:2012-11-26T12:51:30.338+0000:from trunk
njiang:1353976956:2012-11-27T08:42:36.060+0000:1353976956:2012-11-27T08:42:36.060+0000:This issue is introduced by the fix of CAMEL-5810. Thanks for the Aki quick patch.

For the exception handling on the CxfConsumer side, we don't intend to let CxfConsumer to do further work.
As the exception is came from camel processor chain which should be handled by the camel error handler.
In this Cxf Consumer just need to marshal the exception to the client side.
ay:1353982594:2012-11-27T10:16:34.672+0000:1353982594:2012-11-27T10:16:34.672+0000:Hi Willem,
Thanks for the quick update.

I thought the issue was indirectly related to CAMEL-4030, which earlier caused another issue CAMEL-4452.

But regarding these two old issues, I am fine with the current model of the inonly processing to stick to the in-message, which, I originally thought at the time of CAMEL-4452, could lead to confusion at the cxf consumer and therefore should provide an option to override this behavior.

regards, aki
njiang:1353991582:2012-11-27T12:46:22.351+0000:1353991582:2012-11-27T12:46:22.351+0000:After revisit the issues I think you new patch makes things clear.
BTW, I just commit the patch into trunk and merged them back to camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5822,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-11-25 18:22:23+00:00,2012-11-25 18:45:30+00:00,"When using the throughput logger (eg send to log endpoint with groupSize=100 etc) then we log throughputs to the log.


What we need is a JMX operation to reset the stats, so the throughput can be reset and use current progress.


For example after warming up the system for a while. Its nice to reset the stats to get it refreshed.",
0,CAMEL-5821,Bug,Major,"2.9.3, 2.9.4, 2.10.0, 2.10.1, 2.10.2","2.9.6, 2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.9.6, 2.10.4, 2.11.0",Willem Jiang,Cott Lang,0,3,2012-11-24 22:57:40+00:00,2015-11-12 03:50:39+00:00,"I have several Jetty endpoints that use ?chunked=false


They all stopped working in 2.9.3. The parameter is ignored and chunked encoding is used.


I'm suspicious of CAMEL-5367 and CAMEL-5274 due to the timing, but nothing else.","davsclaus:1353806567:2012-11-25T09:22:47.432+0000:1353806567:2012-11-25T09:22:47.432+0000:What versions of Camel have you tested with? Have you tried the latest releases?

cott@internetstaff.com:1353833558:2012-11-25T16:52:38.770+0000:1353833558:2012-11-25T16:52:38.770+0000:2.9.3, 2.9.4, 2.10.0, 2.10.1, and 2.10.2 :)

njiang:1353876551:2012-11-26T04:49:11.512+0000:1353876551:2012-11-26T04:49:11.512+0000:Can I have a look at your route ?
If you don't set the length of message, Jetty will use the chunked encoding by default.

cott@internetstaff.com:1354863806:2012-12-07T15:03:26.505+0000:1354863806:2012-12-07T15:03:26.505+0000:Willem, I'm not entirely sure what you're asking to see?

I'm not relying on a default, I'm setting chunked=false. This works up through 2.9.2.


njiang:1354864847:2012-12-07T15:20:47.862+0000:1354864847:2012-12-07T15:20:47.862+0000:Hi Cott,

I want to see how do you use the camel-jetty component.
Maybe a simple test case can help me dig the issue.


njiang:1359097683:2013-01-25T15:08:03.527+0000:1359097683:2013-01-25T15:08:03.527+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches."
0,CAMEL-5820,New Feature,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-11-24 08:31:45+00:00,2012-11-24 18:54:49+00:00,"See nabble
http://camel.465427.n5.nabble.com/Dynamic-route-ids-with-Spring-DSL-tp5722975.html


This would allow people to set ids of their routes using placeholders.",davsclaus:1353751682:2012-11-24T18:08:02.229+0000:1353751682:2012-11-24T18:08:02.229+0000:This requires a change in the XSD so the id attribute can be a String instead of ID type.
0,CAMEL-5819,New Feature,Major,None,"2.11.1, 2.12.0","
None
",Resolved,Fixed,"2.11.1, 2.12.0",Claus Ibsen,Claus Ibsen,1,2,2012-11-24 08:26:03+00:00,2013-06-04 14:48:11+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-netty-timeout-handler-tp5723149.html


We should add the timeout option to netty producer.


Netty has partial support for timeout. But would have to check how we can better tap into this
http://static.netty.io/4.0/api/io/netty/handler/timeout/package-frame.html","davsclaus:1370328491:2013-06-04T14:48:11.638+0000:1370328491:2013-06-04T14:48:11.638+0000:There is now a requestTimeout option.
We already have a connectionTimeout."
0,CAMEL-5818,Bug,Major,"2.9.4, 2.10.0, 2.10.1, 2.10.2","2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,C S,0,2,2012-11-23 13:56:21+00:00,2012-11-25 10:58:27+00:00,"This might relate to CAMEL-5024


The following route works ok in camel 2.9.3 




from(""direct:sampleUri"")
  .errorHandler(deadLetterChannel(""direct:errorhandler"").disableRedelivery())
  .multicast()
    .stopOnException()
    .split(simple(""${body.list}""))
      .streaming()
      .stopOnException()
      .process(new Processor() {
        @Override
	public void process(Exchange exchange) throws Exception {

	
	}
	
     }).end()
    .end()
    .to(""direct:somewhere_else_1"")
    .to(""direct:somewhere_else_2"")
.end();




-> if an exception is thrown by body.list the errorhandler kicks in and the
message is handled by ""direct:errorhandler"". Since 2.9.4 (and also with the latest version, 2.10.2) the errorhandler is no longer
active.","davsclaus:1353752910:2012-11-24T18:28:30.494+0000:1353752910:2012-11-24T18:28:30.494+0000:I think I have fixed the side effects from CAMEL-5024, can you try with SNAPSHOT code?
davsclaus:1353812307:2012-11-25T10:58:27.599+0000:1353812307:2012-11-25T10:58:27.599+0000:This works now again."
0,CAMEL-5817,New Feature,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Leonid Kof,0,2,2012-11-23 11:53:19+00:00,2013-02-28 05:42:29+00:00,"There is a need for an LDAP component capable of more than just look-ups.
I've already developed such a component, the issue is created just in order to contribute it to Camel.","leonid.kof:1361190607:2013-02-18T20:30:07.492+0000:1361190607:2013-02-18T20:30:07.492+0000:Component source as a patch
leonid.kof:1361191368:2013-02-18T20:42:48.035+0000:1361191368:2013-02-18T20:42:48.035+0000:I do grant the rights on this patch to the ASF, but I cannot find the checkbox, as described here [http://camel.apache.org/contributing.html]:
{quote}
 So after creating the ticket, then attach the patch and remember to tick off the grant ASF license, otherwise we can not commit the patch.
{quote}
davsclaus:1361235441:2013-02-19T08:57:21.195+0000:1361235441:2013-02-19T08:57:21.195+0000:Thanks for your contribution. I have applied the patch.

I fixed some checkstyle issues reported. You can see how to run with checkstyle here:
http://camel.apache.org/building.html"
0,CAMEL-5816,Bug,Minor,None,"2.10.4, 2.11.0","
None
",Resolved,Fixed,"2.10.4, 2.11.0",Moulliard Charles,Moulliard Charles,0,1,2012-11-23 11:25:17+00:00,2012-12-11 11:49:20+00:00,NPE is generated when using camel karaf command and JMX is disabled,
0,CAMEL-5815,New Feature,Major,2.11.0,2.11.0,"

patch

",Resolved,Implemented,2.11.0,Willem Jiang,Andrej Zachar,0,5,2012-11-22 17:13:32+00:00,2016-05-01 10:53:42+00:00,"The camel spring-ws consumer doesn't currently support the WS-Addressing Action and camel cannot dispatch such a message properly. There is only one workaround available using a xpath, which is not a very straight forward solution.


Based on my previous experience with the patch for attachments and headers I would like to implement this functionality.


Please let me know if you have any comments or ideas that are left.


In the solution I would like to implement a new universal endpoint mapping key:


action 


which will act as the same as the key soapaction but it will add also a possibility to retrieve action from soap wsa:action header instead of current http SOAPAction.


BTW: Are there any ideas how should be supported wsa:replyTo inside the camel-spring-ws or how should be supported other attributes of WS-Addressing?


Cheers,
Andrej","davsclaus:1353753072:2012-11-24T18:31:12.078+0000:1353753072:2012-11-24T18:31:12.078+0000:Andrey,

This sounds good. I have given your wiki account karma to assign tickets.
azachar:1353758867:2012-11-24T20:07:47.327+0000:1353758867:2012-11-24T20:07:47.327+0000:Hello Claus, 
thank you for your answer.

Does it means that I can commit into SVN directly or I should provide you my patch into this thread? Actually I have a basic solution ready including tests. So I can create patch against 2.10.1 branch.

Best regards,
Andrej
muellerc:1353766914:2012-11-24T22:21:54.673+0000:1353766914:2012-11-24T22:21:54.673+0000:Andrej, please attach your patch. One of the committers will take care of it.
davsclaus:1353805385:2012-11-25T09:03:05.612+0000:1353805385:2012-11-25T09:03:05.612+0000:Andrej, no you are not there yet.

See this page and read about how to become a committer etc
http://camel.apache.org/contributing.html

You JIRA account can just assign tickets, so we can see that you are working on this more easily. As you seem keen on helping with the spring-ws component. And after that possible other tickets etc.

Also if you want to help with documentation then read this page about the need for signing an ICLA
http://camel.apache.org/how-do-i-edit-the-website.html

That would be lovely as you can then improve the spring-ws docs, and also the other parts. 

davsclaus:1353805473:2012-11-25T09:04:33.834+0000:1353805473:2012-11-25T09:04:33.834+0000:We apply patches on trunk, and then backport to previous branches. So your attached patch should be applied on trunk first, and then we backport that to the 2.10 branch. Though as the difference between trunk and 2.10 branch of spring-ws probably is identical, then your work against 2.10 should be fairly easy to apply on trunk.

azachar:1354142008:2012-11-29T06:33:28.721+0000:1354596358:2012-12-04T12:45:58.272+0000:Hello Claus, 
I am sending you my first implementation of the WS-Addressing consuming. 
The patch add supported following routes uri definitions:

<from uri=""spring-ws:action:<your wsa action>?endpointMapping=#wsaEndpointMapping""/>
<from uri=""spring-ws:action:<your wsa action>:<your wsa to>?endpointMapping=#wsaEndpointMapping""/>
<from uri=""spring-ws:to:<your wsa to address>?endpointMapping=#wsaEndpointMapping""/>
<form uri=""spring-ws:to:<your wsa to address>:<your wsa action>?endpointMapping=#wsaEndpointMapping""/>

		
If you need to specify reply action for response or fault response you can use similar params to spring ws's @Action, e.g. the output and the fault action. This will cause to generate a response using the WS-Adressing with the explicit stated actions other wise is default response action used as the same as in spring ws impl.
		
		<route>
			<from
				uri=""spring-ws:action:http://www.stockquotes.edu/WSAddresingActionReply?outputAction=http://myOuputAction&amp;faultAction=http://myFaultAction&amp;endpointMapping=#wsaEndpointMapping"" />
			<to uri=""mock:testOutputAndFault"" />
		</route>
The fault and output params are in this patch supported for spring-ws:action, for spring-ws:to action i will impl. them soon.


In the examples above I am using the wsaEndpointMapping, which is a brand new implementation of EndpointMapping for action and to préfixes. Impl. is based and extends spring ws addressing classes to avoid duplicities. Also are supported actors and roles.





<bean id=""wsaEndpointMapping""
		class=""org.apache.camel.component.spring.ws.bean.WSACamelEndpointMapping"">
		<property name=""messageSender""> <!-- for replyTo -->
			 <!--here is used only sample in memory sender, but it could be mail for instance or http sender. 
			 I think at this point should be here a class that manage reply using camel. For example it would be nice to specify here 
			 <to uri=""direct:sendMail""> instead of the raw mail impl. of WebServiceMessageSender. This needs to be clarified with the comunity.
			 -->
			<bean 
				class=""net.javacrumbs.springws.test.helper.InMemoryWebServiceMessageSender"" />
		</property>
	</bean>

You can also specify the sender in order to support wsa replyTo. This functionality is still under the conceptual development and It would be nice to discuss it with you.

Anyway I think the first part of work (consuming) is done and I am looking forward to hear about your comments.
Tests are essential part of the patch. Documentation will be delivered at the end of impl. - it depends on our father discussion.

The patch is created against the trunk.

PS: I have created eclipse project using maven but -Psetup.eclipse did not prepare a formatter. Could you suggest what to do in order to get your code formatter? Thanks.


Your camel's rider,
Andrej
davsclaus:1354239327:2012-11-30T09:35:27.336+0000:1354239327:2012-11-30T09:35:27.336+0000:Hi Andrej

You can run the code checking, as shown here (Building with checkstyle)
http://camel.apache.org/building.html

Then it reports if there is problem. And then you can fix that.
And if so then please fix and add another patch.

I dont use Eclipse so i dont know about any pre setup code style.
azachar:1354242295:2012-11-30T10:24:55.908+0000:1354242295:2012-11-30T10:24:55.908+0000:Hello Claus, 
I have done this several times, but still the formatter is not there. Are you sure, it is there?

Best regards,
Andrej
azachar:1354325860:2012-12-01T09:37:40.250+0000:1354325860:2012-12-01T09:37:40.250+0000:Hello Claus, 
I have found the answer - http://camel.465427.n5.nabble.com/Procedure-to-format-AND-checkstyle-in-Eclipse-according-to-Camel-rules-td470833.html. Everything is located in trunk/etc/eclipse. I am wondering why the command mvn eclipse:eclipse (if you have checked out only one component spring-ws) cannot setup formater and other templates. I thought that maven will download all dependencies... Anyway I imported all common settings and formaters manually and I have cleaned check style errors too. So next patch will be nicer :) 
davsclaus:1354527274:2012-12-03T17:34:34.180+0000:1354527274:2012-12-03T17:34:34.180+0000:Good, looking forward to the next patch.
azachar:1354596312:2012-12-04T12:45:12.004+0000:1354596588:2012-12-04T12:49:48.613+0000:Hello!
I am sending you the complete WS-Addressing implementation for the producer and consumer including tests and source code checkstyle fixes. The patch can be found at https://issues.apache.org/jira/secure/attachment/12555926/camel-spring-ws-trunk-WS-Addressing-Support-IncludingTets.patch

This patch also provide implementation for the producer, where you can provide replyTo and faultTo WS-Addressing params.

For example you can type this:

<to
				uri=""spring-ws:http://google.com?wsAddressingAction=http://turnOnWSA.com&amp;replyTo=http://reply.to&amp;faultTo=http://fault.to&amp;webServiceTemplate=#webServiceTemplate&amp;endpointMapping=#endpointMapping"" />


Also i have added support for the actorOrRole+ultimateReceiver for the default and WSA endpoint.


I am looking forward to hear from you.

In the mean time I try to prepare a complete documentation for your wiki.

Best regards,
Andrej
davsclaus:1354674248:2012-12-05T10:24:08.697+0000:1354674248:2012-12-05T10:24:08.697+0000:Willem do have time to look at this patch and if so apply to trunk?
njiang:1354689376:2012-12-05T14:36:16.049+0000:1354689376:2012-12-05T14:36:16.049+0000:@Andrej 
I just have a quick look of your big patch, I found there are some tests are ignored.
What's your plan about these test cases?

BTW, I have a question of the WSA producer (client), how did you implement the ultimate receiver?
For the spring-ws the server is leveraging the MessageDispatcher which could be a servlet to receive the message, you may need to find way to mapping the message to the producer from the ultimate receiver. 

njiang:1354689516:2012-12-05T14:38:36.529+0000:1354689516:2012-12-05T14:38:36.529+0000:@Claus, 

I will take care of the patch tomorrow.
azachar:1354690796:2012-12-05T14:59:56.312+0000:1354690796:2012-12-05T14:59:56.312+0000:Hello Willem, 
well, initially I did not expect that this patch would grow into this size. Actually I have done more, but I didn't want to include it, it would be may be too much to process at the beginning. So once you are done, I will send you some additional features regarding wsa:replyTo response sender within a camel route. But if you want it now, I can send it :)

Ad 1)
The ultimate receiver and actors+roles are done exactly like in Spring WS, e.g. AbstractAddressingEndpointMapping.
So my new endpoint WSACamelEndpointMapping has this functionality out-of-box, because it is inherited from the spring-ws's AbstractAddressingEndpointMapping.

The classical CamelEndpointMapping has the ultimate receiver and actorsOrRoles propagated into 
SoapEndpointInvocationChain(endpoint, interceptors, actorsOrRoles, isUltimateReceiver);

That is all what was done regarding ultimate receiver and actors+roles.

Ad 2) Because I am working by TDD, I have done tests but a corresponding functionality is still not developed.  Initially I though that I will do it, but I found some problems on the way that did not allow me to do it. If you want I can discuss it with you, but for now, feel free to remove them! 

I hope I have answered your questions.

Cheers,
Andrej
njiang:1354725254:2012-12-06T00:34:14.059+0000:1354725254:2012-12-06T00:34:14.059+0000:Hi Andrej

As we are not plan to release the Camel 2.11.0 at the end of this year. I think we could have some time to enhance this feature this month. I will try to commit the patch today.

If you are using git, you can do the commit in some small step, and attache them to the sub issue. It could make me more easier to digest the patches :)

Cheers,

Willem
njiang:1354749421:2012-12-06T07:17:01.533+0000:1354749421:2012-12-06T07:17:01.533+0000:Applied the camel-spring-ws-trunk-WS-Addressing-Support-IncludingTets.patch with thanks to Andrej.
azachar:1355036443:2012-12-09T15:00:43.252+0000:1355036648:2012-12-09T15:04:08.095+0000:Hello Willem and Claus!
thanks for your quick integration! 

As I said I have ready the last patch containing an initial proposal of the reply to solution using the camel channel again.

Image the sample situation:

1. Sent from the client a WSA message with the param wsa:replyTo=""mailto:andrej@chocolatejar.eu"" to the server  

2. On the server the camel spring-ws component somehow resolve the message, prepare an answer by route processing and than

3. before replying back to the client with a response you can reply by the definition of WSA to a different location, e.g. using reply To you can specify to delivery message by email instead of http response. 

Here we go: what if I want to prepare the reply message by a camel route again ? or use camel mail component to responde?

That's why I created the initial solution for this problem using custom messageSender, e.g. CamelDirectSender like this: 

 <bean id=""camelDirectMessageSender""		  class=""org.apache.camel.component.spring.ws.bean.CamelDirectSender"">
  <property name=""camelContext"" ref=""camelContext"" />
</bean>

<route>
  <from uri=""spring-ws:to:http://sender-camel.com?messageSender=#camelDirectMessageSender&amp;endpointMapping=#wsaEndpointMapping"" />		   
  <to uri=""okResponse"" />
</route>

<route>
  <from uri=""direct:mailto:andrej@chocolatejar.eu"" />
			.... you can process the reply to as you wish, for example using other component camel:mail:.....
</route>

Please let me know, what do you think about this solution.

In the patch, you can find test CamelDirectSender  (CamelDirectSenderTest-context.xml) that shows more how to use it 
 

Your camel rider, 
Andrej
azachar:1355036733:2012-12-09T15:05:33.442+0000:1355036733:2012-12-09T15:05:33.442+0000:PS: @Willem I try to make next changes using git if needed.
azachar:1355036809:2012-12-09T15:06:49.242+0000:1355036809:2012-12-09T15:06:49.242+0000:PS2: This a related issue in Spring-WS that allows us to create CamelDirectSender, https://jira.springsource.org/browse/SWS-817
njiang:1355110642:2012-12-10T11:37:22.973+0000:1355110642:2012-12-10T11:37:22.973+0000:Hi Andrej,

The solution you provided sounds good to me. I just apply the patch into the trunk.

Willem
davsclaus:1367016044:2013-04-27T06:40:44.742+0000:1367016044:2013-04-27T06:40:44.742+0000:Can we get some documentation added to
http://camel.apache.org/spring-web-services.html

This is missing!
azachar:1367053935:2013-04-27T17:12:15.446+0000:1367053935:2013-04-27T17:12:15.446+0000:Hello Clause,
I had created it a long time ago, but because of some legal issues related to  publishing via apache wiki  it was not resolved. 

Here is missing documentation:



I hope you will get it!

Best regards,
Andrej



davsclaus:1367104326:2013-04-28T07:12:06.340+0000:1367104326:2013-04-28T07:12:06.340+0000:Andrej

Unfortunately I can't see the docs. Can you attach the docs as a file attachment to this JIRA? Then we can accept that and include in the docs.
muellerc:1368172965:2013-05-10T16:02:45.030+0000:1368172965:2013-05-10T16:02:45.030+0000:[~azachar]: I would like to close this issue, but we need the WIKI updated before. Do you have a change to provide the needed documentation?
bvahdat:1370504156:2013-06-06T15:35:56.008+0000:1370504156:2013-06-06T15:35:56.008+0000:Just to let you know that on master branch I replaced the hacked version of:

{code}
org.springframework.ws.soap.addressing.server.AbstractAddressingEndpointMapping
{code}

with the original one as https://jira.springsource.org/browse/SWS-817 has been already resolved in Spring Web Services 2.1.3. The commit is:

https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commit;h=7edb7679
azachar:1370514620:2013-06-06T18:30:20.407+0000:1370514620:2013-06-06T18:30:20.407+0000:Thank you!



davsclaus:1380587150:2013-10-01T08:25:50.479+0000:1380587150:2013-10-01T08:25:50.479+0000:Thanks for the documentation. 

Do you mind attaching the documentation in a friendly format so we can add it to the Camel wiki documentation at
http://camel.apache.org/spring-web-services.html

eg take a look at that link, and see what should be added.
And then you can attach a .txt file to this JIRA with the new additions.

The word document seems your own work. What we need is documentation we can add to the existing Camel documentation."
0,CAMEL-5814,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-11-22 05:58:04+00:00,2012-11-27 08:23:03+00:00,XmlRpcClient should be able to configured with URI options or some pluggable interface.,njiang:1353975783:2012-11-27T08:23:03.420+0000:1353975783:2012-11-27T08:23:03.420+0000:Applied the patch into trunk.
0,CAMEL-5813,Improvement,Major,None,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Chris Geer,0,2,2012-11-21 22:01:52+00:00,2012-11-26 10:10:32+00:00,"This will add a converter to the flatpack component to support conversion to an XML Document. The document will differ based on whether or not the ""splitRows"" option was selected. If it was selected there will be multiple documents, each on with either a <DatasetHeader>, <DatasetRecord> or <DatasetTrailer> element. If the splitRows option is false there will be a single document with <Dataset> element containing 1 -> * of <DatasetHeader>, <DatasetRecord> or <DatasetTrailer> elements.","geerzo:1353506928:2012-11-21T22:08:48.567+0000:1353506928:2012-11-21T22:08:48.567+0000:Patch adds conversion method for XML Document and two tests. First test is for split=false second is for split=true. Tested on trunk and 2.10.x branch.
njiang:1353537047:2012-11-22T06:30:47.723+0000:1353537047:2012-11-22T06:30:47.723+0000:Applied the patch to the trunk with thanks to Chris."
0,CAMEL-5812,New Feature,Minor,2.10.2,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Claus Ibsen,Ge@@ru,0,2,2012-11-21 14:19:44+00:00,2012-11-25 10:05:15+00:00,"Relative to issue SMX4-1281 and CAMEL-5299, CamelContextAware interface doesn't work correctly on blueprint+servicemix and so could be helpful permit to retrieve CamelContext from ProducerTemplate, in this way through @EndpointInjection i can inject ProducerTemplate object and then on my method do something like this:
CamelContext context = producer.getContext();


Currently, a workaround is this:
CamelContext context = ((DefaultProducerTemplate)producer).getContext();


but a clean solution is best.


On DefaultProducerTemplate is already available getContext so add getContext() on ProducerTemplate interface is easy (I don't know what are others classes that implements ProducerTemplate).


I hope for this in camel-2.10.3 (and on smx-4.5.x) 


Thanks","davsclaus:1353806967:2012-11-25T09:29:27.841+0000:1353806967:2012-11-25T09:29:27.841+0000:There is a slight API change so this is going into 2.11
davsclaus:1353809115:2012-11-25T10:05:15.232+0000:1353809115:2012-11-25T10:05:15.232+0000:Okay the change is so little so we can backport to 2.10"
0,CAMEL-5811,Improvement,Minor,2.10.2,None,"
None
",Resolved,Cannot Reproduce,2.11.0,Claus Ibsen,Maxence Dewil,0,2,2012-11-20 14:53:39+00:00,2012-12-03 17:33:17+00:00,"When a Stax implementation is forced for your project (ex: Woodstox), then an exception is thrown when the application shuts down.


How to reproduce:


In your application classpath, create the following files:
META-INF\services\javax.xml.stream.XMLEventFactory
META-INF\services\javax.xml.stream.XMLInputFactory
META-INF\services\javax.xml.stream.XMLOuputFactory


Then edit each file and set its content:
in javax.xml.stream.XMLEventFactory set com.ctc.wstx.stax.WstxEventFactory
in javax.xml.stream.XMLInputFactory set com.ctc.wstx.stax.WstxInputFactory
in javax.xml.stream.XMLOuputFactory set com.ctc.wstx.stax.WstxOutputFactory


Exception:


java.lang.ClassNotFoundException: org.apache.xalan.xsltc.trax.DOM2SAX
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1680) [catalina.jar:6.0.33]
	at org.apache.catalina.loader.WebappClassLoader.loadClass(WebappClassLoader.java:1526) [catalina.jar:6.0.33]
	at org.apache.camel.util.ObjectHelper.doLoadClass(ObjectHelper.java:816) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.ObjectHelper.loadClass(ObjectHelper.java:741) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.converter.jaxp.XmlConverter.<clinit>(XmlConverter.java:95) [camel-core-2.10.2.jar:2.10.2]
	at sun.misc.Unsafe.ensureClassInitialized(Native Method) [na:1.6.0_22]
	at sun.reflect.UnsafeFieldAccessorFactory.newFieldAccessor(UnsafeFieldAccessorFactory.java:25) [na:1.6.0_22]
	at sun.reflect.ReflectionFactory.newFieldAccessor(ReflectionFactory.java:122) [na:1.6.0_22]
	at java.lang.reflect.Field.acquireFieldAccessor(Field.java:918) [na:1.6.0_22]
	at java.lang.reflect.Field.getFieldAccessor(Field.java:899) [na:1.6.0_22]
	at java.lang.reflect.Field.get(Field.java:358) [na:1.6.0_22]
	at org.apache.catalina.loader.WebappClassLoader.clearReferencesStaticFinal(WebappClassLoader.java:2037) [catalina.jar:6.0.33]
	at org.apache.catalina.loader.WebappClassLoader.clearReferences(WebappClassLoader.java:1929) [catalina.jar:6.0.33]
	at org.apache.catalina.loader.WebappClassLoader.stop(WebappClassLoader.java:1833) [catalina.jar:6.0.33]
	at org.apache.catalina.loader.WebappLoader.stop(WebappLoader.java:740) [catalina.jar:6.0.33]
	at org.apache.catalina.core.StandardContext.stop(StandardContext.java:4920) [catalina.jar:6.0.33]
	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) [catalina.jar:6.0.33]
	at org.apache.catalina.core.ContainerBase.stop(ContainerBase.java:1110) [catalina.jar:6.0.33]
	at org.apache.catalina.core.StandardEngine.stop(StandardEngine.java:468) [catalina.jar:6.0.33]
	at org.apache.catalina.core.StandardService.stop(StandardService.java:604) [catalina.jar:6.0.33]
	at org.apache.catalina.core.StandardServer.stop(StandardServer.java:788) [catalina.jar:6.0.33]
	at org.apache.catalina.startup.Catalina.stop(Catalina.java:662) [catalina.jar:6.0.33]
	at org.apache.catalina.startup.Catalina.start(Catalina.java:629) [catalina.jar:6.0.33]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_22]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_22]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_22]
	at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_22]
	at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:289) [bootstrap.jar:6.0.33]
	at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:414) [bootstrap.jar:6.0.33]","davsclaus:1354162339:2012-11-29T12:12:19.698+0000:1354162339:2012-11-29T12:12:19.698+0000:Yeah we need to look into if we can avoid this static code block, which IMHO is not a good idea to use in todays JVMs where apps come and go.
davsclaus:1354162384:2012-11-29T12:13:04.608+0000:1354162384:2012-11-29T12:13:04.608+0000:This exception is that just logged, or does it prevent the application from shutting down completely?
maxence.dewil:1354187682:2012-11-29T19:14:42.062+0000:1354187682:2012-11-29T19:14:42.062+0000:The exception is logged and does not prevent the application from shutting down (this is why I set the priority to 'minor').
davsclaus:1354239099:2012-11-30T09:31:39.280+0000:1354239099:2012-11-30T09:31:39.280+0000:At what logging error do you see this error? Maybe you can attach a piece of your log file?
maxence.dewil:1354514594:2012-12-03T14:03:14.592+0000:1354515151:2012-12-03T14:12:31.201+0000:Hi, sorry but I tried to reproduce the problem with the steps I described above and.. the problem is gone.
If I am the only one encountering this exception, I think we can close the issue.

davsclaus:1354527197:2012-12-03T17:33:17.521+0000:1354527197:2012-12-03T17:33:17.521+0000:Okay, if you find a way to reproduce it all the time, then just come back."
0,CAMEL-5810,Bug,Major,2.10.2,None,"
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Willem Jiang,Maxence Dewil,0,2,2012-11-20 14:28:14+00:00,2012-11-22 09:53:19+00:00,"See this topic for the description: 
http://camel.465427.n5.nabble.com/doCatch-returns-null-td5722851.html","maxence.dewil:1353393303:2012-11-20T14:35:03.133+0000:1353393303:2012-11-20T14:35:03.133+0000:The problem is reproduced in the attached Maven project.

How to reproduce:
1. Do a mvn package to generate the war.
2. Deploy the war on a servlet container (ex: Tomcat on port 8083)
3. Open src\test\soapUI\MyWebService-soapui-project.xml in soapUI
maxence.dewil:1353393706:2012-11-20T14:41:46.334+0000:1353394832:2012-11-20T15:00:32.677+0000:Workarounds:

1. Use the 'recipientList' idiom as describred in the doc : http://camel.apache.org/cxf-tomcat-example.html .
2. Move the logic outside of the doTry/doCatch statements.
njiang:1353534912:2012-11-22T05:55:12.616+0000:1353534912:2012-11-22T05:55:12.616+0000:Applied the patch into trunk, camel-2.10.x and camel-2.9.x branches.
maxence.dewil:1353549199:2012-11-22T09:53:19.088+0000:1353549199:2012-11-22T09:53:19.088+0000:That was quick! Thank you!"
0,CAMEL-5809,Improvement,Major,None,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-11-20 13:53:04+00:00,2012-11-21 09:24:31+00:00,"When doing request/reply over JMS then by default a single threaded listener is used to orchestrate the reply as they come back. 


If you want to process the reply message concurrently, you would have to use threads EIP as well.


However we should allow end users to configure the concurrentConsumer/maxConcurrentConsumers options.
This can be supposed for Exclusive reply queues, but would be more troublesome for shared reply queues. We had issues with this in the past.",
0,CAMEL-5808,Improvement,Minor,2.10.0,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,1,2012-11-20 11:08:11+00:00,2012-11-20 11:12:45+00:00,"The camel-ahc component uses buffers to transfer data to/from AHC client. These buffers uses the default initial size from the JDK which is very low.


We should add option to configure this size. And let it default be 4kb.",
0,CAMEL-5807,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,3,2012-11-20 07:38:37+00:00,2013-02-16 19:31:48+00:00,"It would be nice with an out of the box data format that can decode/encode to Base64.


For example using Commons Codec
http://commons.apache.org/codec/apidocs/org/apache/commons/codec/binary/Base64.html


It has a number of options to set line length etc. that should be configurable.


See
http://stackoverflow.com/questions/13288461/fusesource-how-to-encode-decode-base64-within-a-route","laurynasl:1360502691:2013-02-10T21:24:51.709+0000:1360502813:2013-02-10T21:26:53.571+0000:Hi,
I've attached the maven project for camel base64 data format. So far this is only the basic data format that is not integrated into Java DSL or Spring XML. If there is any interest in further development here, I would be glad to work on it. 

davsclaus:1360540282:2013-02-11T07:51:22.040+0000:1360540282:2013-02-11T07:51:22.040+0000:Thanks Laurynas for the contribution.

I have added the camel-base64 to the trunk code.
Fell free to work on adding base64 to the DSL (though that requires a bit of work to do).

Also we need documentation for this new data format. Do you mind helping with that?
davsclaus:1360911446:2013-02-15T14:57:26.525+0000:1360911446:2013-02-15T14:57:26.525+0000:Added to the DSL and docs as well.
hekonsek:1361014308:2013-02-16T19:31:48.584+0000:1361014308:2013-02-16T19:31:48.584+0000:+1 for this essential data format :)"
0,CAMEL-5806,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Raúl Kripalani,0,3,2012-11-19 15:41:57+00:00,2015-04-15 14:51:49+00:00,"Jetty Consumer: DefaultHttpBinding#parseBody inserts a null body into the message if the incoming request is for HTTP Method GET.


If I'm not mistaken, according to the HTTP spec the payload is only null if the Content-Length header is 0 or if it doesn't exist. Hence, we have a shortcoming in the Camel HTTP components.


Even though it's unusual, there are reasons why a client could send payload with a GET request. Take a look at the search operation in the Elastic Search API, as an example.",richard.peter:1426768074:2015-03-19T20:27:54.442+0000:1429080709:2015-04-15T14:51:49.128+0000:This change broke us when we attempted to upgrade to 2.15.0.  Our clients stream in binary data and the InputStream initially shows no data as being available so now our posts never parse.  InputStream.available is not a safe check for testing if no data will be available.
0,CAMEL-5805,Sub-task,Major,None,None,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,1,2012-11-19 13:47:26+00:00,2013-05-02 02:29:57+00:00,We need provide camel-xmlrpc featureand xmlrpc-client bundle for user to use.,njiang:1353385714:2012-11-20T12:28:34.870+0000:1353385714:2012-11-20T12:28:34.870+0000:Applied patch into trunk.
0,CAMEL-5804,Improvement,Minor,2.10.2,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Jason Chaffee,0,4,2012-11-18 22:13:37+00:00,2017-02-28 13:56:06+00:00,"It would be nice if the Scala DSL could support marshal() and unmarshal() as in the examples below:



from(""direct:a"").unmarshal().jaxb().to(""direct:test"")





from(""direct:a"").marshal().json().to(""direct:test"")","davsclaus:1353293703:2012-11-19T10:55:03.664+0000:1353293703:2012-11-19T10:55:03.664+0000:See the other JIRA ticket comment
jasonchaffee:1353438929:2012-11-21T03:15:29.050+0000:1353438929:2012-11-21T03:15:29.050+0000:Part of the problem is that only the Java DSL and XML DSL are ever documented for these EIPs.  It took me a little bit of digging before I figured out how to get unmarshal/marshal to work properly in the Scala DSL.

I admit that I am a Scala newbie so I might not not what is the best practice for doing this in Scala, but it seems to be me there is no reason the Scala DSL cannot be fluent like the Java DSL, but maybe that is frowned upon in the Scala world."
0,CAMEL-5803,Improvement,Minor,2.10.2,"2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.10.3, 2.11.0",Claus Ibsen,Jason Chaffee,0,4,2012-11-18 22:10:02+00:00,2012-12-18 22:56:42+00:00,"The Scala DSL does not properly support the splitter for tokenize and tokenizeXML.  The DSL should be modified to allow this:



from(""direct:a"").split().tokenizeXML(""order"").parallelProcessing().streaming().to(""direct:test"")




or this:



from(""direct:a"").split().tokenize(""\n"").parallelProcessing().streaming().to(""direct:test"")","davsclaus:1353293648:2012-11-19T10:54:08.753+0000:1353293648:2012-11-19T10:54:08.753+0000:The Scala DSL is independent from Java DSL, and there will be constructs that are not 100% identical between them.

The splitter ought to support a generic Expression, and for that you can use the TokenizeLanguage from camel-core to create an expression that is like the Java DSL tokenizeXML.


davsclaus:1353295780:2012-11-19T11:29:40.429+0000:1353295780:2012-11-19T11:29:40.429+0000:I added support for using tokenizeXML as shown below
{code}
    new RouteBuilder {
       ""direct:b"" ==> {
         split(tokenizeXML(""person"")) {
           to(""log:b"")
           to(""mock:b"")
         }
       }
    }
{code}
jasonchaffee:1353337918:2012-11-19T23:11:58.196+0000:1353337918:2012-11-19T23:11:58.196+0000:Part of the problem is that only the Java DSL and XML DSL are ever documented for these EIPs.  However, in this case, I could not find tokenizeXML anywhere in the Scala DSL.
oleg.kozlov:1355751992:2012-12-17T21:46:32.638+0000:1355751992:2012-12-17T21:46:32.638+0000:Could you also add tokenize() method to Scala DSL ? It is probably just as useful, thank you!
oleg.kozlov:1355752084:2012-12-17T21:48:04.961+0000:1355752084:2012-12-17T21:48:04.961+0000:I actually have a use case where I need to use split() with tokenize() by a different character ("";"") and my application is using Scala DSL, a patch or a fix in the next build would be super helpful!

Thanks!
alanfoster:1355842602:2012-12-18T22:56:42.851+0000:1355842602:2012-12-18T22:56:42.851+0000:[~oleg.kozlov] patches is welcome"
0,CAMEL-5802,Test,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,2,2012-11-18 16:16:39+00:00,2015-07-11 13:32:48+00:00,"The osgi tests is run late in a full test suite, and you would need to enable a profile to include them.


We should create a CI project that only runs the OSGi tests. So it does a full build of the project (no tests), and then only run OSGi tests.


This allows us to quicker run OSGi tests. And have them run regularly as part of CI servers.",
0,CAMEL-5801,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,2,2012-11-18 12:48:05+00:00,2012-11-24 19:01:32+00:00,"If you want to change default thread naming pattern you would need to use a <bean> tag in XML DSL. We should make this easier with a new attribute on <camelContext> to set this.


<camelContext threadNamePattern=""xxxX"" ...>


We have an attribute already for setting JMX naming pattern. 


See
http://stackoverflow.com/questions/13372675/configure-camel-thread-names-with-spring-dsl","davsclaus:1353754892:2012-11-24T19:01:32.295+0000:1353754892:2012-11-24T19:01:32.295+0000:There is such a new attribute.

Updated the docs with details
http://camel.apache.org/threading-model.html"
0,CAMEL-5800,Bug,Major,2.10.2,2.11.0,"
None
",Resolved,Not A Problem,2.11.0,Claus Ibsen,Kot Kot,0,2,2012-11-18 06:41:31+00:00,2012-11-18 16:21:54+00:00,"I try to dynamicly route massages from cxf client to different cxf services...
if I configure client route builder this way 
        from(""direct:grabberService"").
                recipientList().simple(""jms:queue:grabber-default-grabber-command-queue"")
It works fine: client correctly handles the message.
but if I configure it using xpath which produces the same result as the constant above:
      from(""direct:grabberService"").


                recipientList().
               xpath(""concat('jms:queue:grabber-',//grabberServerName/text(),'-command-queue')"", String.class)


it produces an error on the server
org.apache.cxf.binding.soap.SoapFault: Error reading XMLStreamReader.
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:242) ~[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:61) ~[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	at org.apache.cxf.phase.PhaseInterceptorChain.doIntercept(PhaseInterceptorChain.java:262) ~[cxf-api-2.6.3.jar:2.6.3]
	at org.apache.cxf.transport.ChainInitiationObserver.onMessage(ChainInitiationObserver.java:121) [cxf-api-2.6.3.jar:2.6.3]
	at org.apache.camel.component.cxf.transport.CamelDestination.incoming(CamelDestination.java:163) [camel-cxf-transport-2.10.2.jar:2.10.2]
	at org.apache.camel.component.cxf.transport.CamelDestination$ConsumerProcessor.process(CamelDestination.java:190) [camel-cxf-transport-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:61) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:122) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:298) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:117) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:334) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:220) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.RouteInflightRepositoryProcessor.processNext(RouteInflightRepositoryProcessor.java:48) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:73) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86) [camel-core-2.10.2.jar:2.10.2]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:104) [camel-jms-2.10.2.jar:2.10.2]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:500) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:468) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:326) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:264) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1071) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1063) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:960) [spring-jms-3.1.3.RELEASE.jar:3.1.3.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110) [na:1.7.0_09]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603) [na:1.7.0_09]
	at java.lang.Thread.run(Thread.java:722) [na:1.7.0_09]
Caused by: com.ctc.wstx.exc.WstxEOFException: Unexpected EOF in prolog
 at [row,col 

{unknown-source}

]: [1,0]
	at com.ctc.wstx.sr.StreamScanner.throwUnexpectedEOF(StreamScanner.java:677) ~[woodstox-core-asl-4.1.4.jar:4.1.4]
	at com.ctc.wstx.sr.BasicStreamReader.handleEOF(BasicStreamReader.java:2116) ~[woodstox-core-asl-4.1.4.jar:4.1.4]
	at com.ctc.wstx.sr.BasicStreamReader.nextFromProlog(BasicStreamReader.java:2022) ~[woodstox-core-asl-4.1.4.jar:4.1.4]
	at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1114) ~[woodstox-core-asl-4.1.4.jar:4.1.4]
	at com.ctc.wstx.sr.BasicStreamReader.nextTag(BasicStreamReader.java:1137) ~[woodstox-core-asl-4.1.4.jar:4.1.4]
	at org.apache.cxf.binding.soap.interceptor.ReadHeadersInterceptor.handleMessage(ReadHeadersInterceptor.java:139) ~[cxf-rt-bindings-soap-2.6.3.jar:2.6.3]
	... 50 common frames omitted


and this error on the server


 Error 2012-11-18 00:39:26,507 [http-bio-9090-exec-10] ERROR errors.GrailsExceptionResolver  - SoapFault occurred when processing request: [POST] /camera/form_load/7
Error reading XMLStreamReader.. Stacktrace follows:
Message: Error reading XMLStreamReader.
    Line | Method
->>   75 | unmarshalFault      in org.apache.cxf.binding.soap.interceptor.Soap11FaultInInterceptor



- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -



     46 
 handleMessage       in     ''


     35 
 handleMessage . . . in     ''


    262 
 doIntercept         in org.apache.cxf.phase.PhaseInterceptorChain


    112 
 onMessage . . . . . in org.apache.cxf.interceptor.AbstractFaultChainInitiatorObserver


     69 
 handleMessage       in org.apache.cxf.binding.soap.interceptor.CheckFaultInterceptor


     34 
 handleMessage . . . in     ''


    262 
 doIntercept         in org.apache.cxf.phase.PhaseInterceptorChain


    801 
 onMessage . . . . . in org.apache.cxf.endpoint.ClientImpl


    114 
 handleResponse      in org.apache.camel.component.cxf.transport.CamelOutputStream


    102 
 commitOutputMessage in     ''


     63 
 doClose             in     ''


    186 
 close . . . . . . . in org.apache.cxf.io.CachedOutputStream


     56 
 close               in org.apache.cxf.transport.AbstractConduit


     62 
 handleMessage . . . in org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor


    262 
 doIntercept         in org.apache.cxf.phase.PhaseInterceptorChain


    531 
 doInvoke . . . . .  in org.apache.cxf.endpoint.ClientImpl


    464 
 invoke              in     ''


    367 
 invoke . . . . . .  in     ''


    320 
 invoke              in     ''


     89 
 invokeSync . . . .  in org.apache.cxf.frontend.ClientProxy


    134 
 invoke              in org.apache.cxf.jaxws.JaxWsClientProxy


     45 
 getCameraSettings . in intellicams.web.source.GrabberManagerService


     68 
 getCameraSettings   in intellicams.web.source.CameraService


     36 
 form_load . . . . . in intellicams.web.source.service.CameraController


   1110 
 runWorker           in java.util.concurrent.ThreadPoolExecutor


    603 
 run . . . . . . . . in java.util.concurrent.ThreadPoolExecutor$Worker
^    722 
 run                 in java.lang.Thread







let me know if you need more information","kotkot:1353192689:2012-11-18T06:51:29.458+0000:1353192689:2012-11-18T06:51:29.458+0000:This is the service route 
        from(""jms://queue:grabber-"" + grabberName + ""-command-queue"").to( ExchangePattern.InOut,""direct:GrabberService"");

davsclaus:1353226784:2012-11-18T16:19:44.944+0000:1353226784:2012-11-18T16:19:44.944+0000:Hi

Please try to use the mailing list / discussion forum first to discuss your issue, than jumping to create a JIRA ticket. As we say in the top of this page: http://camel.apache.org/support

davsclaus:1353226914:2012-11-18T16:21:54.336+0000:1353226914:2012-11-18T16:21:54.336+0000:Your issue is that when using the xpath epxression the message payload is not re-readable afterwards, because the input stream is not cached (re-readable).

See about stream caching
http://camel.apache.org/stream-caching.html

Or convert the message body to a String so its re-readable.
{code}
from
  .convertBodyTo(String.class)
  .receipientList
{code}"
0,CAMEL-5799,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Sergey Zhemzhitsky,0,2,2012-11-17 18:45:08+00:00,2012-11-19 10:25:09+00:00,No Desc,"davsclaus:1353227012:2012-11-18T16:23:32.205+0000:1353227012:2012-11-18T16:23:32.205+0000:Thanks for this patch.

Is there a copy/paste mistake in the doDeleteList method. You have update in there, I assume it should be delete.
davsclaus:1353227094:2012-11-18T16:24:54.321+0000:1353227094:2012-11-18T16:24:54.321+0000:Sergey, are you capable of editing the docs yourself? To include details about this new functionality.
http://camel.apache.org/how-do-i-edit-the-website.html

If not do you have an suggestions for docs. You can post here as comment, or attach a file with docs etc

szhemzhitsky:1353239391:2012-11-18T19:49:51.194+0000:1353239391:2012-11-18T19:49:51.194+0000:Hello Claus,

update in doDeleteList is a copy-paste mistake. New patch has been attached.
Thanks for notice. Internally mybatis calls update for insert and delete statements, so the tests were passed successfully.

I don't have permissions to edit the wiki at the moment, so docs.update.txt has been attached with docs update. I tried to follow the wiki syntax. *executorType* option has been added in the options section. Docs for the *statementType* have been updated. And sections for *UpdateList* and *DeleteList* stamentTypes have been added.



davsclaus:1353291909:2012-11-19T10:25:09.389+0000:1353291909:2012-11-19T10:25:09.389+0000:Thanks for the patch, and doc updates."
0,CAMEL-5798,Bug,Major,2.10.2,2.11.0,"
None
",Resolved,Invalid,2.11.0,Claus Ibsen,Bengt Rodehav,0,4,2012-11-17 08:53:02+00:00,2013-03-25 16:19:02+00:00,"This has been discussed on the mailing list:


http://camel.465427.n5.nabble.com/Saxon-and-saxon9he-td5722663.html


It seems like the camel-saxon feature only has been tested on Servicemix and not on a pure Karaf installation. Servicemix comes with a pre-installed XmlResolver while Karaf doesn't and it seems like camel-saxon requires an XmlResolver. It should therefore be added to the camel-saxon feature.","muellerc:1353124180:2012-11-17T11:49:40.805+0000:1353124180:2012-11-17T11:49:40.805+0000:I have no issues to install camel-saxon 2.10.2 on Karaf 2.3.0 and Java 1.6.0_37, Mac OS 10.8.2:

{noformat}
christian-muellers-macbook-pro:bin cmueller$ ./karaf clean
        __ __                  ____      
       / //_/____ __________ _/ __/      
      / ,<  / __ `/ ___/ __ `/ /_        
     / /| |/ /_/ / /  / /_/ / __/        
    /_/ |_|\__,_/_/   \__,_/_/         

  Apache Karaf (2.3.0)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or 'osgi:shutdown' to shutdown Karaf.
          
karaf@root> features:chooseurl camel 2.10.2
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.10.2/xml/features          
karaf@root> features:install camel-saxon
karaf@root> list
START LEVEL 100 , List Threshold: 50
   ID   State         Blueprint      Level  Name
[  68] [Active     ] [            ] [   50] camel-core (2.10.2)
[  69] [Active     ] [Created     ] [   50] camel-karaf-commands (2.10.2)
[  70] [Active     ] [            ] [   50] Apache ServiceMix :: Bundles :: saxon9he (9.3.0.11_2)
[  71] [Active     ] [            ] [   50] camel-saxon (2.10.2)
{noformat}

Do you use Java 7?
rodehav:1353156784:2012-11-17T20:53:04.473+0000:1353156784:2012-11-17T20:53:04.473+0000:Installing the feature works but when you actually use the route you will (at least I did) get a problem. E g my route is something like this:

  file(""..."").choice().when(xpath(""Xpath expression"").saxon()).log(""match"").otherwise().log(""No match"");

When I actually drop a file in the directory to be processed I get an exception. I think the problem was that an XmlResolver couldn't be found.

Have you tried to actually create a route (that uses ""xpath().saxon()"") and see if it works?
rodehav:1353166785:2012-11-17T23:39:45.541+0000:1353166785:2012-11-17T23:39:45.541+0000:I attached a sample maven project with a simple, spring based, route that uses xpath and saxon. I took the camel-example-osgi project and modified it a bit.

+On *ServiceMix 4.4.2* this works:+

* features:install camel-saxon
* install -s mvn:org.apache.camel/saxon-problem/2.10.2

+On *Karaf 2.3.0* this does NOT work:+

* features:install camel-saxon
* features:install camel-spring
* install -s mvn:org.apache.camel/saxon-problem/2.10.2

I get the following exception:

_2012-11-17 23:58:07,640 | ERROR | ExtenderThread-2 | ContextLoaderListener            | BundleApplicationContextListener   50 | 75 - org.springframework.osgi.extender - 1.2.1 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=org.apache.camel.saxon-problem, config=osgibundle:/META-INF/spring/*.xml))
org.apache.camel.RuntimeCamelException: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Choice[[When[xpath{/Expression_to_match} -> [To[log:match]]]] Otherwise[[To[log:nomatch]]]] <<< in route: Route[[From[file://in]] -> [Choice[[When[xpath{/Expression_t... because of javax.xml.xpath.XPathFactoryConfigurationException: No XPathFctory implementation found for the object model: http://saxon.sf.net/jaxp/xpath/om
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1270)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:120)[79:org.apache.camel.camel-spring:2.10.2]
	at org.apache.camel.spring.CamelContextFactoryBean.onApplicationEvent(CamelContextFactoryBean.java:280)[79:org.apache.camel.camel-spring:2.10.2]
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:97)[59:org.springframework.context:3.0.7.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:303)[59:org.springframework.context:3.0.7.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:911)[59:org.springframework.context:3.0.7.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.finishRefresh(AbstractOsgiBundleApplicationContext.java:235)[74:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$4.run(AbstractDelegatedExecutionApplicationContext.java:358)[74:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[74:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.completeRefresh(AbstractDelegatedExecutionApplicationContext.java:320)[74:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor$CompleteRefreshTask.run(DependencyWaiterApplicationContextExecutor.java:132)[75:org.springframework.osgi.extender:1.2.1]
	at java.lang.Thread.run(Thread.java:662)[:1.6.0_22]
Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> Choice[[When[xpath{/Expression_to_match} -> [To[log:match]]]] Otherwise[[To[log:nomatch]]]] <<< in route: Route[[From[file://in]] -> [Choice[[When[xpath{/Expression_t... because of javax.xml.xpath.XPathFactoryConfigurationException: No XPathFctory implementation found for the object model: http://saxon.sf.net/jaxp/xpath/om
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:873)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:722)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1789)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1575)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1444)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.spring.SpringCamelContext.doStart(SpringCamelContext.java:179)[79:org.apache.camel.camel-spring:2.10.2]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:60)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1412)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.spring.SpringCamelContext.maybeStart(SpringCamelContext.java:228)[79:org.apache.camel.camel-spring:2.10.2]
	at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:118)[79:org.apache.camel.camel-spring:2.10.2]
	... 10 more
Caused by: org.apache.camel.RuntimeExpressionException: javax.xml.xpath.XPathFactoryConfigurationException: No XPathFctory implementation found for the object model: http://saxon.sf.net/jaxp/xpath/om
	at org.apache.camel.builder.xml.XPathBuilder.getNamespaceContext(XPathBuilder.java:460)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.builder.xml.XPathBuilder.setNamespaces(XPathBuilder.java:479)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.language.NamespaceAwareExpression.configureNamespaceAware(NamespaceAwareExpression.java:75)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.language.NamespaceAwareExpression.configurePredicate(NamespaceAwareExpression.java:69)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.language.XPathExpression.configurePredicate(XPathExpression.java:184)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:161)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.language.XPathExpression.createPredicate(XPathExpression.java:141)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.language.ExpressionDefinition.createPredicate(ExpressionDefinition.java:143)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.ExpressionNode.createPredicate(ExpressionNode.java:120)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.ExpressionNode.createFilterProcessor(ExpressionNode.java:110)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.WhenDefinition.createProcessor(WhenDefinition.java:77)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.ChoiceDefinition.createProcessor(ChoiceDefinition.java:137)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:441)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:870)[68:org.apache.camel.camel-core:2.10.2]
	... 20 more
Caused by: javax.xml.xpath.XPathFactoryConfigurationException: No XPathFctory implementation found for the object model: http://saxon.sf.net/jaxp/xpath/om
	at javax.xml.xpath.XPathFactory.newInstance(Unknown Source)[:2.1.0]
	at org.apache.camel.builder.xml.XPathBuilder.getXPathFactory(XPathBuilder.java:418)[68:org.apache.camel.camel-core:2.10.2]
	at org.apache.camel.builder.xml.XPathBuilder.getNamespaceContext(XPathBuilder.java:456)[68:org.apache.camel.camel-core:2.10.2]
	... 34 more_

+On the other hand, on *Karaf 2.3.0* this does work:+

* features:install camel-core
* features:install camel-spring
* install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5
* install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/9.4.0.4_1
* install -s mvn:org.apache.camel/saxon-problem/2.10.2

This implies that the xmlresolver is needed and is in fact present by default in ServiceMix 4.4.2.

+But, strangely enough, this does NOT work on *Karaf 2.3.0*:+

* features:install camel-core
* features:install camel-spring
* install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5
* install -s mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/9.3.0.11_2
* install -s mvn:org.apache.camel/saxon-problem/2.10.2

I just changed the Saxon version from the latest to the one used in the camel-saxon feature.

I'm not sure what this means. It seems like the xmlresolver is necessary but I do not know why it only works with a newer Saxon. I also don't know what makes it work under ServiceMix 4.4.2.

rodehav:1353226117:2012-11-18T16:08:37.784+0000:1353226117:2012-11-18T16:08:37.784+0000:The above tests were made on Windows XP Professional version 2002 service pack 3 and Java 1.6.0_22. I have also the same problems on Windows 7 and Java 1.6.0_37. I don't think that the Java version is the problem here.
davsclaus:1353368943:2012-11-20T07:49:03.493+0000:1353368943:2012-11-20T07:49:03.493+0000:Well the OSGi bundles of Saxon is also different. 9.4 is about 1mb larger than 9.3. And the non OSGi JARs is much larger, in the area of 9mb.

rodehav:1353408491:2012-11-20T18:48:11.147+0000:1353408491:2012-11-20T18:48:11.147+0000:Still, the 9.3 version does work under ServiceMix 4.4.2 so it can't be all wrong...

Claus, I remember that in the posting on the mailing list you noted that the ServiceMix version of the Saxon jar was much smaller than the Saxon version. However, when I looked inside the jars they looked very similar (size wise). It's as if the Saxon version of the jar was not compressed. I think that might explain the big difference in size.
muellerc:1353501303:2012-11-21T20:35:03.232+0000:1353501303:2012-11-21T20:35:03.232+0000:org.apache.servicemix.bundles.saxon-9.4.0.4_1.jar contains the META-INF/services/javax.xml.transform.TransformerFactory and META-INF/services/javax.xml.xpath.XPathFactory files which are missing in the prior versions.

org.apache.servicemix.bundles.xmlresolver-1.2_3 is installed with the default SMX features boot path.

${SMX}/system.properties comtains:
javax.xml.parsers.DocumentBuilderFactory=org.apache.xerces.jaxp.DocumentBuilderFactoryImpl
javax.xml.transform.TransformerFactory=org.apache.xalan.processor.TransformerFactoryImpl

--> May be Xalan is used by SMX?

${KARAF}/system.properties doesn't has this entries.  -> It fails with saxon bundles prior 9.4.0.4_1

Can you check this?
rodehav:1353557981:2012-11-22T12:19:41.013+0000:1353557981:2012-11-22T12:19:41.013+0000:Christian,

I think you're on to something here although I can't seem to get it to work.

I tried to modify a pure Karaf 2.3.0 as folllows:

* I added the two lines you mentioned to system.properties. It causes Karaf to hang on startup (without a message).
* I then noted that the org.apache.xerces and org.apache.xalan packages are exported by bundle 0 in Servicemix. Therefore, I copied the org.osgi.framework.bootdelegation property in custom.properties to the custom.properties in Karaf. Karaf still hangs on startup...

Nevertheless, it is clear that Servicemix is configured (in many different ways) to make the xml resolving work. Also camel-saxon assumes that this works but then does not work on a plain Karaf 2.3.0.

Perhaps someone knowledgeable about the details of Servicemix configuration can look at this. I think there are a couple of possibilities:

* Find out exactly what configuration options are needed to get camel-saxon work on plain Karaf. Then either
** Change Karaf standard configuration (not a good idea I think)
** Document (in Camel) what must be done to make camel-saxon work on plain Karaf.
* Upgrade the Saxon version to the one I use (or later) that can work if the *org.apache.servicemix.bundles.xmlresolver*  is installed first. Then add this bundle to the camel-saxon feature.

I very much prefer the last option. Perhaps it could be part of the next Camel version (2.10.3)?

muellerc:1353582101:2012-11-22T19:01:41.240+0000:1353582101:2012-11-22T19:01:41.240+0000:The camel-saxon feature for camel 2.11.0-SNAPSHOT is defined as
{code}
<feature name='camel-saxon' version='2.11-SNAPSHOT' resolver='(obr)' start-level='50'>
  <feature version='2.11-SNAPSHOT'>camel-core</feature>
  <bundle dependnecy='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/1.2_5</bundle>
  <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/9.4.0.4_1</bundle>
  <bundle>mvn:org.apache.camel/camel-saxon/2.11-SNAPSHOT</bundle>
</feature>
{code}
I think we are fine here.

The camel-saxon feature for camel 2.10.3-SNAPSHOT is defined as
{code}
<feature name='camel-saxon' version='2.10.3-SNAPSHOT' resolver='(obr)' start-level='50'>
  <feature version='2.10.3-SNAPSHOT'>camel-core</feature>
  <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/9.3.0.11_2</bundle>
  <bundle>mvn:org.apache.camel/camel-saxon/2.10.3-SNAPSHOT</bundle>
</feature>
{code}
This will not work in Karaf 2.3.0 :-(
Any reason not to upgrade to 9.4.0.4_1?

May be we have the same issue for Camel 2.9.5-SNAPSHOT?
{code}
<feature name='camel-saxon' version='2.9.5-SNAPSHOT' resolver='(obr)' start-level='50'>
  <feature version='2.9.5-SNAPSHOT'>camel-core</feature>
  <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.saxon/9.1.0.8_2</bundle>
  <bundle>mvn:org.apache.camel/camel-saxon/2.9.5-SNAPSHOT</bundle>
</feature>
{code}

I will contact the Karaf guys.
rodehav:1353583038:2012-11-22T19:17:18.450+0000:1353583038:2012-11-22T19:17:18.450+0000:The 2.11.0-SNAPSHOT version looks perfect to me. Has it been like that all along or is it a result from this JIRA?

I will probably upgrade to 2.11 when it's released but for those remaining on 2.10.x (or 2.9.x) I agree that an upgrade seems like the right thing to do. Given that 2.10.3 is due soon, I think this fix should be included there.
stephane_deraco:1353592335:2012-11-22T21:52:15.598+0000:1353592335:2012-11-22T21:52:15.598+0000:Hi, I think there is a typo in the camel-saxon feature: for xmlresolver, we have 'dependnecy' instead of 'dependency' (see post of Christian for Camel 2.11.0-SNAPSHOT)

Maybe this explains that?
muellerc:1353597103:2012-11-22T23:11:43.244+0000:1353597103:2012-11-22T23:11:43.244+0000:Well spotted, Stéphane. It's now fixed...
But this is not the reason for this issue - unfortunately...
davsclaus:1353628601:2012-11-23T07:56:41.685+0000:1353628601:2012-11-23T07:56:41.685+0000:Camel 2.10 and below is targeted for Karaf 2.2.x.
Camel 2.11 is targeted for Karaf 2.3.0.

So you cannot expect 2.10 to work flawless in Karaf 2.3.0 which is using a major new release of Felix, OSGi 4.3, and Aries 1.0. Where as Karaf 2.2.x is using Felix 3.x, OSGi 4.2, and Aries 0.3.

Also I think gnodet found some issues with those SMX bundles for XML resolvers and what else is there, they didn't work to well with OSGi. He said something about improving their factory loader in OSGi.

And frankly Karaf is a general purpose container. So some modifcations is maybe needed for you. For example in Karaf 2.2.x there was a jre.properties file you had to override to have it work with CXF / Camel etc. You may need something similar for Karaf 2.3.x etc.
davsclaus:1353628670:2012-11-23T07:57:50.325+0000:1353628670:2012-11-23T07:57:50.325+0000:Bength,

Use <xquery> in your application instead of <xpath> and it works. Because <xquery> is directly using the saxon library, and won't use any xpath factory finder that dont work well in OSGi.

So you example would work fine if you change <xpath> to <xquery>.
rodehav:1353765535:2012-11-24T21:58:55.341+0000:1353765535:2012-11-24T21:58:55.341+0000:Claus, I think a lot of people (like myself) are using the latest Camel version (2.10.2) with the latest Karaf version (2.3.0). I do understand that it's not possible to verify each combination of Camel and Karaf. However, normally Karaf is very backwards compatible so it's usually no problem to upgrade to the latest Karaf.

Does that mean that the camel-saxon feature is verified to work with Karaf 2.2.x? I haven't tried that (but I will).
rodehav:1353766596:2012-11-24T22:16:36.075+0000:1353766596:2012-11-24T22:16:36.075+0000:Just tried the camel-saxon feature with Karaf 2.2.9. I get the same exception. This I think proves that the Karaf version is not the problem. The problem, I think, is that the camel-saxon feature has only been verified on ServiceMix and not on pure Karaf. Alternatively, camel-saxon has only been verified by making sure that the feature can be installed but not that it can actually be used.

In other words, what has been done on Camel 2.11-SNAPSHOT should also be done on 2.10-SNAPSHOT otherwise it won't work. There is no sense in leaving the feature as is since it does not work on Karaf 2.3.0 nor on Karaf 2.2.x.
davsclaus:1353805536:2012-11-25T09:05:36.632+0000:1353805536:2012-11-25T09:05:36.632+0000:In 2.2.9 you need to override that jre.properties file to make it work.
rodehav:1353807386:2012-11-25T09:36:26.893+0000:1353807386:2012-11-25T09:36:26.893+0000:OK, yes I guess that is another way of making it work. However, I haven't seen this documented anywhere. Generally I think it is a bad approach to require configuring the container to make it work since it makes it very hard to put a lot of different things in the container - they sometimes need incompatible tweaks.

I remember that I've had a discussing about this with Guillaume Nodet sometime back. I think he recommended to be restrictive about opening up JVM packages (via jre.properties) and instead install bundles who export those packages. I agree with that approach for a couple of reasons:

* Like I said, when you start tweaking the jre.properties you easily end up in situations where you can't have two different features co-existing.
* I prefer having the possibility to use a pure Karaf installation and instead use the supported ""feature"" system to add features. It means I don't have customize the container which is worth quite a lot to me.
* Tweaking the jre.properties requires more knowledge and more documentation. It's a less simple approach.

Both ways work of course. Like I said I will go for 2.11 when it's released so I'm fine. Meanwhile I use my own feature that does exactly what 2.11 will do. I just don't see the reason to use a different (more complicated) approach for 2.10.x since it makes life harder for those who use camel-saxon on that branch.
muellerc:1355749569:2012-12-17T21:06:09.594+0000:1355749569:2012-12-17T21:06:09.594+0000:I sent a mail to dev@karaf and dev@servicemix and asked for their opinion.
davsclaus:1364199542:2013-03-25T16:19:02.879+0000:1364199542:2013-03-25T16:19:02.879+0000:Camel 2.10.x requires Karaf 2.2.x
Camel 2.11.x requires Karaf 2.3.x"
0,CAMEL-5797,Improvement,Major,None,Future,"
None
",Resolved,Fixed,Future,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,2,2012-11-16 16:38:06+00:00,2015-02-02 19:10:37+00:00,"We now provide pax-exam-karaf for itests, since Karaf 2.3.0, but it can also support previous Karaf versions. So, it would help a lot for the Camel tests on Karaf.",davsclaus:1422875437:2015-02-02T19:10:37.493+0000:1422875437:2015-02-02T19:10:37.493+0000:Willem have done this
0,CAMEL-5796,Bug,Major,2.10.2,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Babak Vahdat,Babak Vahdat,0,2,2012-11-16 14:52:53+00:00,2012-11-18 19:11:20+00:00,"Given the property myKey defined as:



myKey=myValue




Then consider the following trivial route:



<route>
  <from uri=""activemq:queue:okay"" />
    <transacted />
    <setHeader headerName=""myHeader"">
      <constant>{{myKey}}</constant>
    </setHeader>
  <to uri=""mock:test"" />
</route>




Because of the usage of the transacted DSL the property placeholder {{myKey}} will not be resolved to myValue properly. This behaviour would disappear if you would remove the transacted DSL. And I'm observing the same behaviour using the setBody DSL as well.","bvahdat:1353060487:2012-11-16T18:08:07.290+0000:1353060487:2012-11-16T18:08:07.290+0000:Tried this through all the 2.10.x as well as the 2.9.x releases and it doesn't work. So concluding no regression being broken.
bvahdat:1353211230:2012-11-18T12:00:30.251+0000:1353211230:2012-11-18T12:00:30.251+0000:Attaching a potential patch which would resolve this (including unit-test).

Would appreciate any feedback the experienced riders would give about this.

Right now with this patch in place on my workspace I'm running a full build to verify no potential side-effect.
davsclaus:1353213730:2012-11-18T12:42:10.216+0000:1353213730:2012-11-18T12:42:10.216+0000:The patch is a good attempt in the correct file to fix this issue. Though as you have noticed it worked fine without the transacted policy.

The issue is that when you use transacted/policy, it wraps the outputs, and then its a bit different logic that creates the child processors, than if the transacted was not there. And that part of the code was missing logic that pre-prepares the definitions before the processors is created.

I am attaching a better patch with this fix.

Also we can have unit test in camel-core, as you can use policy instead of transacted. They are the same.
davsclaus:1353223156:2012-11-18T15:19:16.596+0000:1353223156:2012-11-18T15:19:16.596+0000:Babak, I suggest you mix our patches. So its the fix from my patch in the core, and then add your additional unit tests as well. Then we have the optional fix for this.
davsclaus:1353223195:2012-11-18T15:19:55.155+0000:1353223195:2012-11-18T15:19:55.155+0000:The workaround is to use <simple>${properties:myKey}</simple> instead.
bvahdat:1353226015:2012-11-18T16:06:55.951+0000:1353226015:2012-11-18T16:06:55.951+0000:O.K. thanks for your support. :-)

Just give me please a bit time then I'll commit the fix and close this ticket (hopefully tomorrow).

bvahdat:1353237080:2012-11-18T19:11:20.333+0000:1353237080:2012-11-18T19:11:20.333+0000:Still added another test using the bridgePropertyPlaceholder Camel Bean to make sure this variant would work as well, but only applied on the trunk & the 2.10.x branch (available since 2.10.0). Thanks to Claus for providing a better patch.  "
0,CAMEL-5795,Improvement,Minor,2.10.2,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Jason Chaffee,0,3,2012-11-16 08:21:23+00:00,2015-07-09 12:11:26+00:00,"There are very few Scala DSL examples for the components, only Java.  However, in many cases the Java DSL is very different than the Scala DSL and it is not easy to figure out how to accomplish the same thing in Scala.  


Therefore, I feel there should always be a Java example, a xml example, and a Scala exaample.  


I can add examples of differences between Java and Scala if needed.","jasonchaffee:1353025669:2012-11-16T08:27:49.571+0000:1353025669:2012-11-16T08:27:49.571+0000:Here is one example,

Java Example:

{code}
from(""direct:a"").unmarshal().gzip().to(""mock:a"");
{code}

To accomplish the same thing in Scala it is not easy to figure out and it is quite different.

Scala Example,

{code}
import org.apache.camel.model.dataformat.GzipDataFormat

from(""direct:a"").unmarshal(new GzipDataFormat()).to(""mock:a"");
{code}

Normally, you would expect to use this class:

{code}
import org.apache.camel.impl.GzipDataFormat
{code}

It is very confusing and there is no documentation on this.  

hekonsek:1353029265:2012-11-16T09:27:45.311+0000:1353029265:2012-11-16T09:27:45.311+0000:I'm not happy with Scala examples as well. I'll try to improve them within the next few months."
0,CAMEL-5794,Bug,Minor,"2.10.0, 2.10.1, 2.10.2",None,"
None
",Resolved,Fixed,"2.10.3, 2.11.0",Willem Jiang,Willem Jiang,0,1,2012-11-16 08:02:51+00:00,2012-11-18 16:25:56+00:00,No Desc,
0,CAMEL-5793,Improvement,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Jan-Helge Bergesen,0,2,2012-11-16 07:15:16+00:00,2012-11-25 17:33:09+00:00,"Create a ""from()"" endpoint with configuration:



 from(""seda:something?size=10000&blockWhenFull=true"")...




Let clients push to the endpoint without options:



 to(""seda:something"")...
 



Camel then creates two seda endpoints: one bounded (with options) and one unbounded.
Both endpoints receive messages from the client, but the unbounded one doesn't seem to do much other than buffer things?


Possible this leads to duplicates on the process following ""from"" (not tested).


For our case, this lead to an OOM under an extreme (200-300% of expected peak) load test.


Will attach screenshots from jVisualVM.","jhberges:1353021421:2012-11-16T07:17:01.507+0000:1353021421:2012-11-16T07:17:01.507+0000:clients-without-seda-options.png show the MBeans created when the clients only refer to the seda endpoint without options.


clients-without-seda-options.png show the MBeans created when the clients refer to the seda endpoint with all options, as the ""from"" DSL states.

davsclaus:1353813093:2012-11-25T11:11:33.524+0000:1353813093:2012-11-25T11:11:33.524+0000:There will be 2 endpoints, but the queue itself will be shared. Though its the 1st endpoint that creates the queue, that determines the queue size. So if ""seda:something"" creates the queue first, its unbounded.

davsclaus:1353826561:2012-11-25T14:56:01.369+0000:1353826561:2012-11-25T14:56:01.369+0000:From Camel 2.11 onwards we now validate the queue size when a shared queue is being used by another endpoint. And if the sub sequent endpoints have a different queue size, then Camel will now fail creating the endpoint. This would allow end users to fix their mistakes.


davsclaus:1353835954:2012-11-25T17:32:34.257+0000:1353835954:2012-11-25T17:32:34.257+0000:Camel was working as designed. Though for Camel 2.11 we have improved this to validate the endpoints and fail if they have been mis-configured. As well there is INFO logging of the endpoints with the queues and their sizes in use. This allows end users to spot their mis configurations better.

Its generally best to configure the size on the consumer, and leave out this option when using the producer."
0,CAMEL-5792,Test,Major,2.10.0,"2.9.5, 2.10.3, 2.11.0","
None
",Resolved,Fixed,"2.9.5, 2.10.3, 2.11.0",Claus Ibsen,Claus Ibsen,0,3,2012-11-15 13:27:52+00:00,2012-12-20 12:56:16+00:00,"Doing CI tests on Windows spotted this on multiple occasions. It may be an issue in the Camel validator component itself.


Test Name   
Duration   
Age   
>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeParentSchemaImport 	0.647	1
>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testDotSlashSchemaImport 	0.08	1
>>> org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeDoubleSlashSchemaImport 	0.067	1



org.apache.camel.FailedToCreateRouteException: Failed to create route route3 at: >>> DoTry[[To[validator:org/apache/camel/component/validator/doubleslash/child.xsd], To[mock:valid], DoCatch[ [class org.apache.camel.ValidationException] -> [To[mock:invalid]]], DoFinally[[To[mock:finally]]]]] <<< in route: Route[[From[direct:start]] -> [DoTry[[To[validator:org/apach... because of Failed to resolve endpoint: validator://org/apache/camel/component/validator/doubleslash/child.xsd due to: java.io.FileNotFoundException: Cannot find resource in classpath for URI: org/apache/camel/component/validator/doubleslash/.//parent.xsd
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:873)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:171)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:723)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1795)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:667)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:629)
	at org.apache.camel.itest.validator.ValidatorSchemaImportTest.testRelativeDoubleSlashSchemaImport(ValidatorSchemaImportTest.java:98)","muellerc:1352990689:2012-11-15T22:44:49.249+0000:1352990689:2012-11-15T22:44:49.249+0000:IMO, this should be fixed in org.apache.camel.util.FileUtil and tested in org.apache.camel.util.FileUtilTest
davsclaus:1353021692:2012-11-16T07:21:32.384+0000:1353021692:2012-11-16T07:21:32.384+0000:Yeah its an issue in compactPath method in FileUtil. I have a Windows test ran overnight to verify no regressions caused by this fix.
bvahdat:1355735389:2012-12-17T17:09:49.024+0000:1355735389:2012-12-17T17:09:49.024+0000:Indeed this fix caused a regression on Windows by the following test:

https://svn.apache.org/repos/asf/camel/trunk/components/camel-ftp/src/test/java/org/apache/camel/component/file/remote/sftp/SftpProducerFileWithPathNoStepwiseTest.java

{code:java}
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Hello World]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1287)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:618)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:454)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:450)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:152)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:146)
	at org.apache.camel.component.file.remote.sftp.SftpProducerFileWithPathNoStepwiseTest.testProducerFileWithPathNoStepwise(SftpProducerFileWithPathNoStepwiseTest.java:45)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)
	at org.junit.rules.RunRules.evaluate(RunRules.java:18)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:300)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot change directory to: \C:\dev\workspace\camel\components\camel-ftp
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:434)
	at org.apache.camel.component.file.remote.SftpOperations.changeCurrentDirectory(SftpOperations.java:391)
	at org.apache.camel.component.file.remote.SftpOperations.buildDirectory(SftpOperations.java:338)
	at org.apache.camel.component.file.GenericFileProducer.writeFile(GenericFileProducer.java:238)
	at org.apache.camel.component.file.GenericFileProducer.processExchange(GenericFileProducer.java:151)
	at org.apache.camel.component.file.remote.RemoteFileProducer.process(RemoteFileProducer.java:49)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:86)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:63)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:366)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:175)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:111)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:150)
	... 31 more
Caused by: 2: /C:/dev/workspace/camel/components/camel-ftp/C:devworkspacecamelcomponentscamel-ftp
	at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2569)
	at com.jcraft.jsch.ChannelSftp._stat(ChannelSftp.java:2018)
	at com.jcraft.jsch.ChannelSftp.cd(ChannelSftp.java:316)
	at org.apache.camel.component.file.remote.SftpOperations.doChangeDirectory(SftpOperations.java:432)
	... 49 more
{code}
bvahdat:1355979376:2012-12-20T12:56:16.705+0000:1355979376:2012-12-20T12:56:16.705+0000:Assuming you were too busy to comment on my previous post, anyway I already fixed this regression (see http://www.jcraft.com/jsch/ChangeLog)."
0,CAMEL-5791,Improvement,Major,2.10.2,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Akitoshi Yoshida,0,2,2012-11-14 10:38:07+00:00,2012-11-27 08:23:57+00:00,"Adding some blueprint scenario tests for camel-cxf using camel-test-blueprint.


I put this in a separate test-only component under the tests folder. I can't put the test classes directly within camel-cxf because of the way how the bundle context is generated, namely the jars on the classpath are scanned and added to the context. Hence, the tests are in a separate component that refer to all the bundle jars that they need.


I don't know if the tests folder is the the right location for this test component, though.","ay:1352861290:2012-11-14T10:48:10.651+0000:1352861290:2012-11-14T10:48:10.651+0000:from trunk

njiang:1353975837:2012-11-27T08:23:57.019+0000:1353975837:2012-11-27T08:23:57.019+0000:Applied the patch into trunk."
0,CAMEL-5790,Improvement,Major,2.10.2,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Jason Chaffee,0,3,2012-11-14 08:30:19+00:00,2013-11-08 08:56:02+00:00,"Currently, it aws-s3 tries to list objects and if that fails it attempts to create a new bucket.  This logic shouldn't be done by default. Also, you may only want to download a single file and if the listing fails, you can't do so.


For example, this code is currently causing a 404 in the aws-s3 endpoint.  This keeps the component from ever downloading anything, even the bucket already exists. I am not sure why this fails.



getS3Client().listObjects(new ListObjectsRequest(bucketName, null, null, null, 0));




However, if I change the code to download a single file using the same bucket name, it works.



getS3Client().getObject(new GetObjectRequest(bucketName, filename));","njiang:1352855230:2012-11-14T09:07:10.887+0000:1352855230:2012-11-14T09:07:10.887+0000:Hi, 
I'm not sure what kind of bucketName are you using?
Maybe we should consider to setup the delimiter of the ListObjectsRequest.

jasonchaffee:1352901622:2012-11-14T22:00:22.299+0000:1352901622:2012-11-14T22:00:22.299+0000:Hey Willem, I tried to to use the ""/"" delimiter but it still failed.  Here is my bucketName, with some characters changed for company reasons.

{code}
s3-bar-foo-prod-synd/6a31c532-cd0f-12e1-a11d-12412f02b582/premium
{code}
jasonchaffee:1352903262:2012-11-14T22:27:42.397+0000:1352903262:2012-11-14T22:27:42.397+0000:Also, I should add that in my use case there might be several files of 10MB - 50MB and I really only one download a single file by timestamp, which is built into the file name.  The current component has not support for just getting a single specified file.
jasonchaffee:1352912190:2012-11-15T00:56:30.571+0000:1352912190:2012-11-15T00:56:30.571+0000:I created a patch that takes a fileName parameter and doesn't check or try to create the bucket, it just tries to get the S3Object.  This is not a patch I would expect to be applied as it is hacky and it has no tests.  It is purely to show what I am trying to that I can't currently do.
muellerc:1352983167:2012-11-15T20:39:27.941+0000:1352983212:2012-11-15T20:40:12.343+0000:Jason, do you consider to work on a patch and an unit test? This would speed up to get this issue resolved.

http://camel.apache.org/contributing.html
http://camel.apache.org/building.html


jasonchaffee:1352983371:2012-11-15T20:42:51.203+0000:1352983371:2012-11-15T20:42:51.203+0000:Yes, I will look into doing it.  It just might take me a little while as I need to finish some other things first.  
muellerc:1352985624:2012-11-15T21:20:24.583+0000:1352985624:2012-11-15T21:20:24.583+0000:No hurry.
And don't hesitate to ask if you need some help. There are some smart people out there which like to help... ;-)

And this wiki page is also interesting for you: http://camel.apache.org/how-do-i-edit-the-website.html
njiang:1383872162:2013-11-08T08:56:02.160+0000:1383872162:2013-11-08T08:56:02.160+0000:Applied the patch into trunk."
0,CAMEL-5789,Improvement,Major,"2.9.4, 2.10.2","2.9.5, 2.10.3, 2.11.0","
None
",Closed,Fixed,"2.9.5, 2.10.3, 2.11.0",Christian Müller,Christian Müller,0,1,2012-11-13 21:44:47+00:00,2012-11-13 22:01:55+00:00,No Desc,
0,CAMEL-5788,Improvement,Major,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Willem Jiang,Willem Jiang,0,2,2012-11-12 05:24:45+00:00,2013-01-21 05:51:07+00:00,"Current PGP dataformat cannot take keyfile userid and username parameters from the message header dynamically, we need to update the dataformat to provide this kind of feature.
Here is the mail thread[1] about it
[1]http://camel.465427.n5.nabble.com/How-to-set-the-dynamic-key-information-in-camel-PGP-encryption-decryption-tp5722562.html","davsclaus:1352771312:2012-11-13T09:48:32.842+0000:1352771312:2012-11-13T09:48:32.842+0000:Remember to update the wiki docs with this change
davsclaus:1358556976:2013-01-19T08:56:16.597+0000:1358556976:2013-01-19T08:56:16.597+0000:Willem you committed code a long time ago. Can you please update any docs, and get this ticket resolve so its ready for 2.11 release.
njiang:1358718667:2013-01-21T05:51:07.136+0000:1358718667:2013-01-21T05:51:07.136+0000:Hi Claus,
I'm sorry for it. I will pay more attention on the document updating.
I just Updated the wiki page, now the issue can be closed."
0,CAMEL-5787,Improvement,Minor,None,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Claus Ibsen,0,1,2012-11-10 21:11:49+00:00,2012-12-22 17:48:21+00:00,"See nabble
http://camel.465427.n5.nabble.com/DISCUSS-Remove-non-Camel-JARs-from-binary-distro-tp5722218.html


We should not include 3rd party JARs in the distro, as the examples is Maven based and will download on the fly what is needed.


There is a Jasypt tool which can be run from command line, so we may need to leave the slf4j-api in place which is mandatory dependency.",davsclaus:1356169701:2012-12-22T17:48:21.387+0000:1356169701:2012-12-22T17:48:21.387+0000:Keeping jasypt in optional see ppl can use the jasypt tooling we have documented.
0,CAMEL-5786,Task,Major,None,2.11.0,"
None
",Resolved,Duplicate,2.11.0,Unassigned,Christian Müller,0,2,2012-11-10 12:25:27+00:00,2013-01-20 18:11:46+00:00,We have to have a WIKI page for the new camel-mina2 component in Camel 2.11.0.,davsclaus:1358564734:2013-01-19T11:05:34.010+0000:1358564734:2013-01-19T11:05:34.010+0000:CAMEL-4855
