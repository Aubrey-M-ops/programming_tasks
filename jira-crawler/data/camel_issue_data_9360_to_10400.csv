,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-10970,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-08 18:08:49+00:00,2017-03-09 16:49:28+00:00,We can add JMX api and expose it out of the box.,
0,CAMEL-10969,Improvement,Major,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,Claus Ibsen,Claus Ibsen,1,3,2017-03-08 18:06:43+00:00,2017-09-25 06:52:21+00:00,"We use our own json parser in JSonSchemaHelper in different places as part of the catalog stuff we have done over the last 3-4 years. And as it has expanded to be used in more places than just as in the beginning in apt, we are duplicating some of that code around.


We could consider shading in json-simple in camel-core and camel-catalog.
And where its used in apt, maven plugins and elsewhere.","lb:1489022051:2017-03-09T09:14:11.667+0000:1489022051:2017-03-09T09:14:11.667+0000:There is also https://github.com/FasterXML/jackson-jr which among other things supports:

- Object binding (https://github.com/FasterXML/jackson-jr#readingwriting-simple-objects-beans-listarrays-thereof)
- Fluent builder to generate JSon (https://github.com/FasterXML/jackson-jr#writing-with-composers)
davsclaus:1489454816:2017-03-14T09:26:56.246+0000:1489454816:2017-03-14T09:26:56.246+0000:I wonder if Apache Johnzon is not good as its a sister ASF project and implements the json-p spec
https://johnzon.apache.org/
lb:1491193326:2017-04-03T12:22:06.060+0000:1491193326:2017-04-03T12:22:06.060+0000:Yeah Johnzon looks good too
lb:1503010190:2017-08-18T06:49:50.922+0000:1503010190:2017-08-18T06:49:50.922+0000:Would it be ok to have two new top level modules:

- camel-catalog-model
- camel-catalog-core

That are built early and then can be shaded in platforms/camel-catalog and camel-core ?
davsclaus:1503332031:2017-08-22T00:13:51.619+0000:1503332031:2017-08-22T00:13:51.619+0000:Lets wait to post 2.20 release to not cause and problems. Frankly the shading of caffeine can cause spring boot to report weird exeptions on stopping.
davsclaus:1506210431:2017-09-24T07:47:11.586+0000:1506210431:2017-09-24T07:47:11.586+0000:The json-simple parser from google is no longer maintained, but a 2.x version is more active and take over by Cliffon Labs at
https://cliftonlabs.github.io/json-simple/

The power of this library is that its a single JAR and has no other dependencies - its small and we can then shade that into camel-core and camel-catalog, and the apt compiler plugin can use it as well.

Then its a little implementation detail, and should not cause classpath issues, as otherwise it would be with a big popular library like jackson does.

There is also Apache Johnzon but its a bigger library, but the good side is that its JSON-P spec implementation and its a sister Apache project.
davsclaus:1506215408:2017-09-24T09:10:08.620+0000:1506215408:2017-09-24T09:10:08.620+0000:Okay got a json-simple (which is now maintained) working with camel-core and camel-catalog which can now parse compact single-line and pretty formatted json files.
davsclaus:1506219657:2017-09-24T10:20:57.355+0000:1506219657:2017-09-24T10:20:57.355+0000:There is a branch here
https://github.com/apache/camel/tree/json-simple

And you can turn on|off prettyPrint mode on the camel-connector-maven-plugin (default on)
https://github.com/apache/camel/blob/json-simple/connectors/camel-connector-maven-plugin/src/main/java/org/apache/camel/maven/connector/ConnectorMojo.java#L81

And you have json in pretty print such as (its hardcoded to use tab in json-simple so we cannot change to use 2 spaces etc)
https://github.com/apache/camel/blob/json-simple/connectors/examples/foo-connector/src/main/resources/camel-connector-schema.json

The API is the same as before, you just use JSonSchemaHelper from camel-catalog
https://github.com/apache/camel/blob/json-simple/platforms/camel-catalog/src/main/java/org/apache/camel/catalog/JSonSchemaHelper.java#L42

... which now supports:

old single-line mode
pretty printed mode
or any json mode (assuming the parser works well)
davsclaus:1506220421:2017-09-24T10:33:41.181+0000:1506220421:2017-09-24T10:33:41.181+0000:A problem with json-simple is that the order of the parsed json is not as given in the json file
https://github.com/cliftonlabs/json-simple/issues/17
davsclaus:1506234110:2017-09-24T14:21:50.599+0000:1506234110:2017-09-24T14:21:50.599+0000:Okay got the parser fixed by patching it, then we can use it as the order matters of those options. We can consider adding a order=1, order=2 .. order=N attribute to output in the json schema as well, so other parsers that don't respect ordering can then use that order attribute to sort.
davsclaus:1506254668:2017-09-24T20:04:28.148+0000:1506254668:2017-09-24T20:04:28.148+0000:Okay I have tested all of the source code and have it all working, so I have merged over the json-simple branch to master and we should have this implemented now.
lb:1506289966:2017-09-25T05:52:46.575+0000:1506289966:2017-09-25T05:52:46.575+0000:Should we open a new issue targeting 3.x to have a proper typed model for the catalog items ?  
davsclaus:1506293541:2017-09-25T06:52:21.625+0000:1506293541:2017-09-25T06:52:21.625+0000:Yeah sure you are welcome to do that"
0,CAMEL-10968,Sub-task,Minor,None,2.23.0,"
None
",Resolved,Done,2.23.0,Zoran Regvart,John Poth,0,2,2017-03-08 16:43:03+00:00,2018-07-18 11:03:46+00:00,No Desc,"jpoth:1489481659:2017-03-14T16:54:19.416+0000:1489481659:2017-03-14T16:54:19.416+0000:See https://issues.apache.org/jira/browse/CXF-7270 for more details
zregvart:1531883026:2018-07-18T11:03:46.648+0000:1531883026:2018-07-18T11:03:46.648+0000:[~jpoth] CXF-7270 is resolved in CXF 3.2.0, I'm doing some work for Java 10+ support in CAMEL-12618 and I think this can be closed."
0,CAMEL-10967,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-08 16:12:41+00:00,2017-03-09 12:33:03+00:00,"Like we have for regular Camel components, but for connectors",
0,CAMEL-10966,Bug,Trivial,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Nicolas Cisco,0,3,2017-03-08 15:47:27+00:00,2017-03-13 16:06:19+00:00,"Salesforce Maven Plugin doesn't escape strings when doing the camel-salesforce:generate phase.


Enums objects (`sobject-picklist.vm`) are created without escaping characters, this results in creating invalid clases that don't compile.","nickcis:1488968503:2017-03-08T18:21:43.155+0000:1488968503:2017-03-08T18:21:43.155+0000:This is the PR: https://github.com/apache/camel/pull/1511 related with this issue
zregvart:1488968765:2017-03-08T18:26:05.721+0000:1488968765:2017-03-08T18:26:05.721+0000:Thank you for your contribution :)
githubbot:1488969858:2017-03-08T18:44:18.488+0000:1488969858:2017-03-08T18:44:18.488+0000:Github user NickCis closed the pull request at:

    https://github.com/apache/camel/pull/1511

zregvart:1489055802:2017-03-09T18:36:42.176+0000:1489055802:2017-03-09T18:36:42.176+0000:[~nickcis] found further issues with string escaping, see [this GitHub comment|https://github.com/apache/camel/pull/1511#issuecomment-285435852].
githubbot:1489132114:2017-03-10T15:48:34.993+0000:1489132114:2017-03-10T15:48:34.993+0000:GitHub user NickCis opened a pull request:

    https://github.com/apache/camel/pull/1526

    CAMEL-10966 Salesforce Maven Plugin doesn't escape strings when doing the camel-salesforce:generate phase

    [Jira Ticket](https://issues.apache.org/jira/browse/CAMEL-10966)
    
    Continuing with the previous [PR](https://github.com/apache/camel/pull/1511). 
    
    This PR fixes escaping in `sobject-pojo` file.
    
    In addition, it directly uses _apache lang3 EscapeUtils_ instead of relying in _Velocity Escape Tools_. This last change is done due to a bug in slash (`/`) escaping of the library.
    
    Some tests were included, i think i coded them in an ugly way, please help me improve them.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NickCis/camel salesforce-maven-plugin-escaping

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1526.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1526
    
----
commit 512f5372c8c5736f3b56d9f908aea3c05812f21d
Author: Nicolas Cisco <nicolas.cisco@semperti.com>
Date:   2017-03-09T18:53:58Z

    Escaping strings in SObject Pojo

commit 265d774ab93e02def6f25d1e43fb468e35018136
Author: Nicolas Cisco <nicolas.cisco@semperti.com>
Date:   2017-03-09T18:59:07Z

    Removed used use of Velocity Escape Utils, using apache commons lang3 StringEscapeUtils in order to prevent slash escaping

commit fec2c93c4c046750d6d5f0eebf8d5f60ca3f79bb
Author: Nicolas Cisco <nicolas.cisco@semperti.com>
Date:   2017-03-10T15:40:31Z

    Adding test cases for template generation

----

zregvart:1489377848:2017-03-13T12:04:08.875+0000:1489377848:2017-03-13T12:04:08.875+0000:[PR#1526|https://github.com/apache/camel/pull/1526] has been merged, thanks to [~nickcis] for the contribution.
githubbot:1489392379:2017-03-13T16:06:19.366+0000:1489392379:2017-03-13T16:06:19.366+0000:Github user NickCis closed the pull request at:

    https://github.com/apache/camel/pull/1526
"
0,CAMEL-10965,Bug,Major,2.17.1,,"

interceptors
multicast
seda

",Resolved,Not A Problem,None,Unassigned,Hubertus Willuhn,0,2,2017-03-08 15:42:20+00:00,2017-03-09 08:59:44+00:00,"Calling an SEDA endpoint from another route using multicast will not call any interceptSendToEndpoint definition in the target route.


I created a small test for this. See attachment.


I think this is an unwanted behavior. However if using interceptFrom all is fine.","davsclaus:1488965977:2017-03-08T17:39:37.868+0000:1488965977:2017-03-08T17:39:37.868+0000:Its not the same endpoint, your intercept is not the same as the multicast. Use * as wildcard for intercept. See its doc
http://camel.apache.org/intercept
h.willuhn:1489013530:2017-03-09T06:52:10.297+0000:1489013530:2017-03-09T06:52:10.297+0000:Sorry for replying, but I want to clarify this: So the endpoint uri must be equal over all references (including parameters)? I already knew this for example with SEDA endpoints and the concurrentConsumer parameters were its meaningful. However the option failIfNoConsumers should only apply to the producer or am I wrong?
davsclaus:1489021184:2017-03-09T08:59:44.594+0000:1489021184:2017-03-09T08:59:44.594+0000:Yes and hence why you can use the wildcards"
0,CAMEL-10964,Bug,Major,2.18.2,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tadayoshi Sato,Tadayoshi Sato,0,2,2017-03-08 12:38:30+00:00,2017-03-09 15:16:06+00:00,"Inside a RouteBuilder another bean is injected from registry using @BeanInject:



public class GreeterBuilder extends RouteBuilder {

    @BeanInject
    Configuration configuration;

    @Override
    public void configure() throws Exception {
        from(""cxf:bean:routerEndpoint"")
            ...
    }
...




CXF http-jetty transport is configured with reverse proxy inside blueprint context like this:



<blueprint ...>
  <httpj:engine-factory bus=""cxf"">
    <httpj:engine port=""7771"">
      <httpj:connector>
        <bean id=""connector"" class=""org.eclipse.jetty.server.ServerConnector"">
          <argument ref=""server"" />
          <argument>
            <array>
              <ref component-id=""httpConnectionFactory"" />
            </array>
          </argument>
          <property name=""port"" value=""7771"" />
        </bean>
      </httpj:connector>
    </httpj:engine>
  </httpj:engine-factory>

  <bean id=""server"" class=""org.eclipse.jetty.server.Server"" />

  <bean id=""httpConfiguration"" class=""org.eclipse.jetty.server.HttpConfiguration"">
    <property name=""customizers"">
      <list>
        <bean class=""org.eclipse.jetty.server.ForwardedRequestCustomizer"" />
      </list>
    </property>
  </bean>

  <bean id=""httpConnectionFactory"" class=""org.eclipse.jetty.server.HttpConnectionFactory"">
    <argument ref=""httpConfiguration"" />
  </bean>
  ...




However, the reverse proxy won't work as long as @BeanInject is present in the RouteBuilder bean.


The root cause is that the camel-blueprint's CamelInjector triggers earlier startup of the blueprint Camel context before the route is fully up, so the http-jetty transport configuration is not correctly connected to the CXF endpoint.","tadayosi:1488948151:2017-03-08T12:42:31.691+0000:1488948151:2017-03-08T12:42:31.691+0000:Actually I confirmed that this issue is already fixed by CAMEL-10513, but I'd like to write an itest for the issue so that it won't regress in the future.
githubbot:1489013151:2017-03-09T06:45:51.648+0000:1489013151:2017-03-09T06:45:51.648+0000:GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1517

    CAMEL-10964: Add an itest for Jetty reverse proxy config with @BeanInject in RouteBuilder

    Actual fix for the issue is provided by CAMEL-10513.
    
    https://issues.apache.org/jira/browse/CAMEL-10964

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10964

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1517.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1517
    
----
commit 99124d83d19e849c066d7ba919562be5af1ef05e
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-03-09T06:07:03Z

    CAMEL-10964: Add an itest for Jetty reverse proxy config with @BeanInject in RouteBuilder
    
    Actual fix for the issue is provided by CAMEL-10513.

----

githubbot:1489043766:2017-03-09T15:16:06.433+0000:1489043766:2017-03-09T15:16:06.433+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1517
"
0,CAMEL-10963,Bug,Minor,None,2.19.0,"

easyfix

",Resolved,Fixed,2.19.0,Claus Ibsen,Shane Kelly,0,3,2017-03-08 11:23:47+00:00,2017-03-09 09:55:51+00:00,"In the KinesisFirehoseProducer.createRequest() method, you have this line:


~~~~
putRecordRequest.setDeliveryStreamName(getEndpoint().getEndpointKey());
~~~~


but the deliverStreamName should be set using getEndpoint().getStreamName()","davsclaus:1488949318:2017-03-08T13:01:58.675+0000:1488949318:2017-03-08T13:01:58.675+0000:Shane, you are welcome to provide a github PR with a fix
githubbot:1488961448:2017-03-08T16:24:08.032+0000:1488961448:2017-03-08T16:24:08.032+0000:GitHub user tigertoes opened a pull request:

    https://github.com/apache/camel/pull/1515

    CAMEL-10963 Correcting getEndpointKey call

    This should fix the underlying issue (sorry about that!).
    
    I do want to put an integration test much like the others, but I think that's best followed up with another PR? Or if you can wait a little bit I can produce it as part of this one.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tigertoes/camel CAMEL-10963

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1515.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1515
    
----
commit 737544a428abed2ad9501755efcd64e3ae60c7ee
Author: Tony Tiger <thatrascaltiger@gmail.com>
Date:   2017-03-08T16:15:00Z

    CAMEL-10963 Correcting getEndpointKey call

----

davsclaus:1488972635:2017-03-08T19:30:35.087+0000:1488972635:2017-03-08T19:30:35.087+0000:Thanks for the PR
githubbot:1489024551:2017-03-09T09:55:51.364+0000:1489024551:2017-03-09T09:55:51.364+0000:Github user tigertoes closed the pull request at:

    https://github.com/apache/camel/pull/1515
"
0,CAMEL-10962,Improvement,Major,None,2.19.0,"
None
",Resolved,Won't Fix,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-08 10:22:14+00:00,2017-03-08 11:52:22+00:00,"Instead of one option as http uri, lets separate this into host, port and path so its easier for tooling to use, and also how some of the other http components do.","davsclaus:1488945142:2017-03-08T11:52:22.131+0000:1488945142:2017-03-08T11:52:22.131+0000:All the http components rely on URI today. It would take too much to separate into 5 fields: protocol, host, port, path, query parameters"
0,CAMEL-10961,Bug,Major,2.18.2,"2.18.4, 2.19.0","
None
",Closed,Fixed,"2.18.4, 2.19.0",Claus Ibsen,Andreas Ländle,0,4,2017-03-08 08:58:10+00:00,2017-06-13 08:18:57+00:00,"2017-03-08T07:28:43,282 | INFO  | Camel (jms-context) thread #0 - JmsConsumer[QUEPOSTDATA] | ZooKeeperElection                | 84 - org.apache.camel.camel-zookeeper - 2.18.2 | Initializing ZookeeperElection with uri 'zookeeper:localhost:2181,localhost:2182,localhost:2183/aq-um-bridge/master'
2017-03-08T07:28:43,329 | WARN  | Camel (jms-context) thread #0 - JmsConsumer[QUEPOSTDATA] | ZooKeeperElection                | 84 - org.apache.camel.camel-zookeeper - 2.18.2 | Error setting up election node /aq-um-bridge/master/BH5PMD2H-4a1cc867-94ec-409c-8bbf-a36e4fc8966e
java.lang.NullPointerException
	at org.apache.camel.component.zookeeper.operations.SetDataOperation.getResult(SetDataOperation.java:42) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.operations.ZooKeeperOperation.get(ZooKeeperOperation.java:70) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.ZooKeeperProducer.synchronouslySetData(ZooKeeperProducer.java:234) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.ZooKeeperProducer.process(ZooKeeperProducer.java:88) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:209) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:139) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.createCandidateNode(ZooKeeperElection.java:146) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.testAndCreateCandidateNode(ZooKeeperElection.java:116) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperElection.isMaster(ZooKeeperElection.java:92) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.component.zookeeper.policy.ZooKeeperRoutePolicy.onExchangeBegin(ZooKeeperRoutePolicy.java:79) [84:org.apache.camel.camel-zookeeper:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor$RoutePolicyAdvice.before(CamelInternalProcessor.java:490) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:145) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97) [56:org.apache.camel.camel-core:2.18.2]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:112) [61:org.apache.camel.camel-jms:2.18.2]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:721) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:681) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:651) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:317) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:235) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1166) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1158) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055) [72:org.apache.servicemix.bundles.spring-jms:4.3.5.RELEASE_1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) [?:?]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) [?:?]
	at java.lang.Thread.run(Unknown Source) [?:?]




Please let me know what other information I should contribute. My guess is that this is just a timing problem; because the zookeeper instances were up and running (on the same server).
Also I noticed that there was no election-rote created after this error - so my guess is that routes in this state would never run, effectivly leading to a dead-node (failover to this node would never happen).","alaendle:1489110438:2017-03-10T09:47:18.602+0000:1489110438:2017-03-10T09:47:18.602+0000:My guess is that this was already handled with the change of ZooKeeperProducer in https://github.com/apache/camel/pull/1229/files.
Maybe this change could/should be merged to the v2.18.x-Branch so that this problem is at least fixed with the next v2.18.x release?
davsclaus:1489112623:2017-03-10T10:23:43.861+0000:1489112623:2017-03-10T10:23:43.861+0000:Its a too big change for a patch.
alaendle:1489114689:2017-03-10T10:58:09.160+0000:1489115018:2017-03-10T11:03:38.054+0000:Sorry, I fear this was a misunderstanding. I didn't want to have all the new features regarding curator included. I just wanted to ask to include the three lines into the process-Method of ZooKeeperProducer.java to avoid the NPE:

{code}
       if (connection == null) {
            connection = this.zkm.getConnection();
        }
{code}

Not more not less. Maybe you want to consider this.
acosentino:1489115887:2017-03-10T11:18:07.880+0000:1489115887:2017-03-10T11:18:07.880+0000:I guess it should be fine to add only that check
davsclaus:1489117354:2017-03-10T11:42:34.916+0000:1489117354:2017-03-10T11:42:34.916+0000:You are welcome to provide a github PR with such a fix
http://camel.apache.org/contributing
githubbot:1489119494:2017-03-10T12:18:14.132+0000:1489119494:2017-03-10T12:18:14.132+0000:GitHub user alaendle opened a pull request:

    https://github.com/apache/camel/pull/1522

    CAMEL-10961: Backported parts of CAMEL-10292 in order to fix possible…

    … NPE in ZooKeeperProducer.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alaendle/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1522.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1522
    
----
commit dc46e915da034a0a07ff7348f19b711e0c6e4387
Author: Andreas Ländle <andreas.laendle@de.bosch.com>
Date:   2017-03-10T12:17:12Z

    CAMEL-10961: Backported parts of CAMEL-10292 in order to fix possible NPE in ZooKeeperProducer.

----

githubbot:1489120571:2017-03-10T12:36:11.446+0000:1489120571:2017-03-10T12:36:11.446+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1522
"
0,CAMEL-10960,Test,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,2,2017-03-08 08:53:39+00:00,2017-03-14 09:34:00+00:00,"Wonder if other also get this error



Failed tests:
org.apache.camel.component.aws.ec2.EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair(org.apache.camel.component.aws.ec2.EC2ComponentSpringTest)
  Run 1: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>
  Run 2: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>
  Run 3: EC2ComponentSpringTest.ec2CreateAndRunTestWithKeyPair:92->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>

org.apache.camel.component.aws.ec2.EC2ProducerTest.ec2CreateAndRunTestWithKeyPair(org.apache.camel.component.aws.ec2.EC2ProducerTest)
  Run 1: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>
  Run 2: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>
  Run 3: EC2ProducerTest.ec2CreateAndRunTestWithKeyPair:209->Assert.assertEquals:631->Assert.assertEquals:645->Assert.failNotEquals:834->Assert.fail:88 expected:<0> but was:<2>


Tests run: 267, Failures: 2, Errors: 0, Skipped: 2","acosentino:1488934552:2017-03-08T08:55:52.520+0000:1488934552:2017-03-08T08:55:52.520+0000:I tested locally this morning and I didn't get the error.
davsclaus:1488949767:2017-03-08T13:09:27.339+0000:1488949767:2017-03-08T13:09:27.339+0000:Okay I havent seen those on CI servers either, so its likely just on my laptop
acosentino:1488949961:2017-03-08T13:12:41.108+0000:1488949961:2017-03-08T13:12:41.108+0000:On CI servers the errors were present this morning."
0,CAMEL-10959,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-08 08:50:04+00:00,2017-03-08 18:00:56+00:00,"The Java APIs in camel-catalog has some great logic for validating and getting information about Camel components et all.


Today we would like to have this Java API out of the box at runtime in camel-core so we can leverage this, for example for the upcoming health check.


We do a bit of copy/paste of some of the code today in camel-catalog. Instead we can put that in a camel-catalog-core that is built first and then copied inside camel-core and camel-catalog and where else for reuse.","davsclaus:1488940485:2017-03-08T10:34:45.076+0000:1488940485:2017-03-08T10:34:45.076+0000:Its easier and better to move the camel-catalog source code to camel-catalog-core and then copy it in camel-core and camel-catalog.
davsclaus:1488967256:2017-03-08T18:00:56.891+0000:1488967256:2017-03-08T18:00:56.891+0000:There is a RuntimeCamelCatalog now in camel-core"
0,CAMEL-10958,Task,Major,2.19.0,2.19.0,"
None
",Closed,Fixed,2.19.0,Claus Ibsen,Thomas Cunningham,0,2,2017-03-07 21:39:51+00:00,2020-04-24 12:52:55+00:00,"camel-scala-starter was removed here : 


https://github.com/jboss-fuse/camel/commit/e92581befe5096451d1617c25e7ca494d907c2d2


But references to it still exist and should be removed : 


lilguylaptop:camel cunningt$ grep -r camel-scala-starter *
apache-camel/pom.xml:      <artifactId>camel-scala-starter</artifactId>
apache-camel/src/main/descriptors/common-bin.xml:        <include>org.apache.camel:camel-scala-starter</include>
parent/pom.xml:        <artifactId>camel-scala-starter</artifactId>
platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml:        <artifactId>camel-scala-starter</artifactId>","githubbot:1488915272:2017-03-08T03:34:32.279+0000:1488915272:2017-03-08T03:34:32.279+0000:GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1512

    CAMEL-10958 camel-scala-starter starter module removed but references to it still exist

    https://issues.apache.org/jira/browse/CAMEL-10958
    
    Remove references to camel-scala-starter.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-10958

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1512.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1512
    
----
commit b203fa75fb44558d59c4c7b08278ca2d00ba59c9
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-03-08T03:30:15Z

    CAMEL-10958 camel-scala-starter starter module removed but references to it still exist

----

tcunning:1488915324:2017-03-08T03:35:24.013+0000:1488915324:2017-03-08T03:35:24.013+0000:Submitted pull

https://github.com/apache/camel/pull/1512

githubbot:1489043766:2017-03-09T15:16:06.386+0000:1489043766:2017-03-09T15:16:06.386+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1512
"
0,CAMEL-10957,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-03-07 20:27:24+00:00,2017-03-07 20:29:31+00:00,We should log a warning instead of just ignoring any exceptions while unmarshalling responses of Composite API REST resources.,
0,CAMEL-10956,Improvement,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Unassigned,Luca Burgazzoli,3,3,2017-03-07 14:19:51+00:00,2021-02-24 08:50:17+00:00,"As today we can add files as ""classpath:camel/*.xml"" and camel picks them up but we should make it more flexible like collecting/discovering all the beans/service of type ""RouteBuilderManager"" (name is just an hint) and delegate the loading of the routes (and eventually theirs reload) to such managers.


By default we'll provide the one to load the Java/XML but developer can add custom loaders so that routs can be load from yaml, json, scripting languages etc. and they can also have theirs custom logic to reload a route.","onders:1546180277:2018-12-30T22:31:17.231+0000:1546180277:2018-12-30T22:31:17.231+0000:below would be also a nice feature addition to this feature in the subject.

- If the route uri contains properties injected either from properties file, db and whatnot.., reload of a route should be triggered. (Not sure how such event triggering and handling would be possible in case of toD is in use because naturally the route uri will have placeholder either from properties, messsage headers etc...maybe toD s can be excluded..)"
0,CAMEL-10955,Improvement,Minor,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-07 08:56:37+00:00,2019-10-29 15:30:03+00:00,"On the CamelContext add a public api that is called just before Camel starts the routes and just before it shutdown then. This allows tooling to instrument at these points to do custom stuff they may need.


If they instrument on start / stop on CamelContext then these methods perform too much and the tooling cant hook into at the right time.","davsclaus:1572246132:2019-10-28T15:02:12.297+0000:1572246132:2019-10-28T15:02:12.297+0000:CamelStartingRoutesEvent
CamelStoppingRoutesEvent
"
0,CAMEL-10954,Bug,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Thomas Cunningham,0,2,2017-03-06 21:02:58+00:00,2017-03-06 22:37:26+00:00,"Trying to build master, getting an error on a missing org.apache.camel:camel-box2, which I can't find in camel :


lilguylaptop:camel cunningt$ grep -r camel-box2 * | grep pom.xml
platforms/spring-boot/components-starter/camel-box2-starter/pom.xml:  <artifactId>camel-box2-starter</artifactId>
platforms/spring-boot/components-starter/pom.xml:    <module>camel-box2-starter</module>
lilguylaptop:camel cunningt$","zregvart:1488806542:2017-03-06T21:22:22.334+0000:1488806542:2017-03-06T21:22:22.334+0000:I think `camel-box2-starter` should be removed, see CAMEL-9047.
zregvart:1488811046:2017-03-06T22:37:26.181+0000:1488811046:2017-03-06T22:37:26.181+0000:Removed {{camel-box2-starter}}."
0,CAMEL-10953,Improvement,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Peter van Gestel,0,3,2017-03-06 18:04:10+00:00,2017-03-07 16:50:34+00:00,Use camel headers to add message attributes when publishing a message to SNS.,"githubbot:1488796882:2017-03-06T18:41:22.574+0000:1488796882:2017-03-06T18:41:22.574+0000:GitHub user PeterOsudio opened a pull request:

    https://github.com/apache/camel/pull/1508

    CAMEL-10953 Add message attribute support to AWS SNS publisher

    I copied the message attribute capability from the SQS Producer to SNS Producer. I didn't want to refactor the code too much to avoid the duplicate code.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PeterOsudio/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1508.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1508
    
----
commit 6b0a632f5853ddb46f3ae22132a37153dc0ea000
Author: Peter van Gestel <peter.van.gestel@osudio.com>
Date:   2017-03-06T18:23:33Z

    CAMEL-10953 add message attribute support to sns producer

commit 7509ec284d6df2693f3635998d7be2667fbeff1f
Author: Peter van Gestel <peter.van.gestel@osudio.com>
Date:   2017-03-06T18:39:04Z

    CAMEL-10953 solve checkstyle issues

----

davsclaus:1488875060:2017-03-07T16:24:20.800+0000:1488875060:2017-03-07T16:24:20.800+0000:Thanks for the PR
githubbot:1488876634:2017-03-07T16:50:34.452+0000:1488876634:2017-03-07T16:50:34.452+0000:Github user PeterOsudio closed the pull request at:

    https://github.com/apache/camel/pull/1508
"
0,CAMEL-10952,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Tony Tiger,0,2,2017-03-06 16:31:43+00:00,2017-03-08 10:41:10+00:00,"Kinesis Firehose is a separate API and SDK that has minor differences from that of vanilla flavoured Kinesis. The biggest difference is that Firehose is a ""produce-only"" Endpoint and can't really be a consumer as data from Firehose is eventually persisted into S3.","thatrascaltiger:1488789443:2017-03-06T16:37:23.028+0000:1488789443:2017-03-06T16:37:23.028+0000:I have started work on this on [my own fork here|https://github.com/apache/camel/compare/master...tigertoes:kinesis_firehose], if anyone is watching and would like to give me early feedback on this it would be very much appreciated.
davsclaus:1488848753:2017-03-07T09:05:53.756+0000:1488848753:2017-03-07T09:05:53.756+0000:Sounds good. Because the component is only a producer then you should extend DefaultEndpoint and not ScheduledPollEndpoint.

davsclaus:1488848863:2017-03-07T09:07:43.333+0000:1488848863:2017-03-07T09:07:43.333+0000:And in the producer you likely need to do something about the put result to be able to let the Camel user access that and know if the result was okay or not, or access the result if needed or something.

But keep hacking on the code.
davsclaus:1488848903:2017-03-07T09:08:23.398+0000:1488848903:2017-03-07T09:08:23.398+0000:And Camel 2.19 is still being developed for a month so you will have time to make it into 2.19
thatrascaltiger:1488855636:2017-03-07T11:00:36.289+0000:1488855636:2017-03-07T11:00:36.289+0000:Thank you for your feedback, I've made several more commits as per your suggestions which I think should address them.

Other component classes are extending the now deprecated UriEndpointComponent (which was deprecated in CAMEL-10735). Is there another suitable class or pattern to extend from?
davsclaus:1488856085:2017-03-07T11:08:05.979+0000:1488856085:2017-03-07T11:08:05.979+0000:DefaultComponent
githubbot:1488863122:2017-03-07T13:05:22.220+0000:1488863122:2017-03-07T13:05:22.220+0000:GitHub user tigertoes opened a pull request:

    https://github.com/apache/camel/pull/1510

    CAMEL-10952 Initial work adding Kinesis Firehose

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tigertoes/camel kinesis_firehose

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1510.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1510
    
----
commit 4313fb44d934c69cf13d7d5f14cc1f9b92b961c5
Author: Tony Tiger <thatrascaltiger@gmail.com>
Date:   2017-03-06T16:34:03Z

    CAMEL-10952 Initial work adding Kinesis Firehose

----

githubbot:1488940870:2017-03-08T10:41:10.233+0000:1488940870:2017-03-08T10:41:10.233+0000:Github user tigertoes closed the pull request at:

    https://github.com/apache/camel/pull/1510
"
0,CAMEL-10951,Bug,Major,2.18.2,2.18.3,"
None
",Resolved,Fixed,2.18.3,Nicola Ferraro,James Netherton,0,3,2017-03-06 15:13:54+00:00,2017-03-07 15:27:24+00:00,"Some components default their endpoint configuration using constant fields. For example, the camel-mail MailConfiguration class has:



private String from = MailConstants.MAIL_DEFAULT_FROM;




When the MailComponentConfiguration is generated, it has a field defaulted as follows:



private String from = ""MailConstants.MAIL_DEFAULT_FROM"";




Not sure exactly how many components are impacted by this but there's a few listed if you do:



grep ""DEFAULT"" $(find . -name ""*ComponentConfiguration.java"")","davsclaus:1488785590:2017-03-06T15:33:10.074+0000:1488785590:2017-03-06T15:33:10.074+0000:Ah yeah then we need to grab the field value it represent. We do have some code that does this in the camel-route-parser
davsclaus:1488785775:2017-03-06T15:36:15.345+0000:1488785775:2017-03-06T15:36:15.345+0000:The code is something a like
{code}
            FieldSource field = getField(clazz, block, (SimpleName) arg);

                    // the field may be initialized using variables, so we need to evaluate those expressions
                    Object fi = field.getInternal();
                    if (fi instanceof VariableDeclaration) {
                        Expression exp = ((VariableDeclaration) fi).getInitializer();
                        String uri = CamelJavaParserHelper.getLiteralValue(clazz, block, exp);
                        if (!Strings.isBlank(uri)) {
                            // we want the position of the field, and not in the route
                            int position = ((VariableDeclaration) fi).getStartPosition();
                            uris.add(new ParserResult(node, position, uri));
                        }
                    }
                }
{code}

See the CamelJavaParserHelper

Its that initialize stuff that is another expression you can then grab and then find its value is a string, integer or something

davsclaus:1488848950:2017-03-07T09:09:10.230+0000:1488848950:2017-03-07T09:09:10.230+0000:Just to be sure this is only a problem on master branch? 2.18.x are fine right?
jamesnetherton:1488850070:2017-03-07T09:27:50.670+0000:1488850070:2017-03-07T09:27:50.670+0000:Problem seems to be present on the 2.18.x branch too:

https://github.com/apache/camel/blob/camel-2.18.x/components-starter/camel-mail-starter/src/main/java/org/apache/camel/component/mail/springboot/MailComponentConfiguration.java#L119
nferraro:1488859519:2017-03-07T12:05:19.291+0000:1488859519:2017-03-07T12:05:19.291+0000:[~davsclaus] I'm trying your approach, but cannot get useful info. There's something I'm missing...

Even if manage to evaluate the initializer expression (the field initializer returns null), are you sure we can get its value? I mean, the maven plugin does not use the application classpath, so it should not be able to evaluate an expression like ""MailConstants.XXX"" because it doesn't know what ""MailConstants"" is.. unless we so some hacks with the classloader...

I'm trying a naive approach in the meantime.
davsclaus:1488860261:2017-03-07T12:17:41.169+0000:1488860261:2017-03-07T12:17:41.169+0000:Ah yeah that may be correct. We could at first skip those fields to not generate a default value. Then maybe later we can find a way
davsclaus:1488860318:2017-03-07T12:18:38.304+0000:1488860318:2017-03-07T12:18:38.304+0000:We could maybe log some kind of WARN or something and then see how many there are. We can always change  the source code to set the default value as a String directly instead of the constant reference.
nferraro:1488860668:2017-03-07T12:24:28.926+0000:1488860668:2017-03-07T12:24:28.926+0000:Let me check if the (simpler) approach I've found works for other components..
nferraro:1488866505:2017-03-07T14:01:45.063+0000:1488866505:2017-03-07T14:01:45.063+0000:Committed upstream. The affected components are:
- box
- ganglia
- mail
- netty
- netty4
- ssh
- xmlsecurity

Claus, the patch may not win the code award for 2017, but it makes what we need :). Should we apply it also for 2.18.3?
davsclaus:1488866690:2017-03-07T14:04:50.536+0000:1488866740:2017-03-07T14:05:40.219+0000:Yeah backport please, you may need to regen the starters on 2.18.x so the code are fully aligned - yeah it takes some time but its important to have good spring boot support for camel
nferraro:1488871644:2017-03-07T15:27:24.007+0000:1488871644:2017-03-07T15:27:24.007+0000:Backported to branch 2.18.x."
0,CAMEL-10950,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,James Netherton,James Netherton,0,3,2017-03-06 13:53:42+00:00,2017-03-07 12:50:27+00:00,"One of the drawbacks with the docker-java library used in the camel-docker component is that it depends on Jersey for the JAX-RS client.


This can be problematic if you already have another JAX-RS implementation on the classpath.


Therefore, it'd be nice if you could specify the DockerCmdExecFactory that you want to work with. By default it'd be JerseyDockerCmdExecFactory, but you could choose to use the NettyDockerCmdExecFactory if you wanted to avoid Jersey. 


Similarly, users could implement their own DockerCmdExecFactory and have camel-docker load this when it comes to build the Docker client.","davsclaus:1488785820:2017-03-06T15:37:00.029+0000:1488785820:2017-03-06T15:37:00.029+0000:Are you working on a PR?
jamesnetherton:1488787343:2017-03-06T16:02:23.057+0000:1488787343:2017-03-06T16:02:23.057+0000:Yep - just testing some mods now, so will hopefully have a PR ready soon. I'll assign this issue to myself.
githubbot:1488801756:2017-03-06T20:02:36.062+0000:1488801756:2017-03-06T20:02:36.062+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1509

    CAMEL-10950: Enable configuration of a custom DockerCmdExecFactory

    https://issues.apache.org/jira/browse/CAMEL-10950

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10950

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1509.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1509
    
----
commit 16f60a5caaf05fd928060300d1ce25c85683df4b
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2017-03-06T12:14:43Z

    CAMEL-10950: Enable configuration of a custom DockerCmdExecFactory

----

githubbot:1488848895:2017-03-07T09:08:15.852+0000:1488848895:2017-03-07T09:08:15.852+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1509
"
0,CAMEL-10949,Bug,Minor,None,"2.18.4, 2.19.0","
None
",Resolved,Fixed,"2.18.4, 2.19.0",Onder Sezgin,Ravi Godbole,0,3,2017-03-06 13:41:31+00:00,2017-04-04 15:42:27+00:00,"Routebuider configuration in which only resource URI is different while port is same.
1. newsTopic
2. stockQuoteTopic


 Ideally other clients connecting to newsTopic should get messages published
 on this topic only but they are also getting messages published on stockQuoteTopic.


 On further investigation I found out that memory store used to by sendAll
 is shared by all resource uri for a given port in the server.


 from(""activemq:topic:newsTopic"").to(""websocket://
 0.0.0.0:9090/newsTopic?sendToAll=true"");
        from(""activemq:topic:stockQuoteTopic"").to(""websocket://
 0.0.0.0:9090/stockQuoteTopic?sendToAll=true"");


 Sample Ouput received from client 


 2017-03-06 15:35:15.789:INFO::main: Logging initialized @313ms
 Connected to server


 Message received from server:MSFT        [ published on stockQuoteTopic. Expected ..]
 Message received from server:CNBC News   [ published on newsTopic. should not have received ]
 Message received from server:BBC News    [ published on newsTopic. should not have received ]","davsclaus:1488862302:2017-03-07T12:51:42.466+0000:1488862302:2017-03-07T12:51:42.466+0000:Contributions is welcome
githubbot:1491198705:2017-04-03T13:51:45.644+0000:1491198705:2017-04-03T13:51:45.644+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1590

    CAMEL-10949 - websocket clients will get messages on which uri they a…

    …re subscribed to if sendToAll set to true

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10949

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1590.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1590
    
----
commit b4c9ec2db90e4dc4d8e9e20dbe85be748976237e
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-04-03T13:49:31Z

    CAMEL-10949 - websocket clients will get messages on which uri they are subscribed toif sendToAll set to true

----

davsclaus:1491287902:2017-04-04T14:38:22.896+0000:1491287902:2017-04-04T14:38:22.896+0000:Thanks for the PR
githubbot:1491291747:2017-04-04T15:42:27.139+0000:1491291747:2017-04-04T15:42:27.139+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1590
"
0,CAMEL-10948,Bug,Minor,None,"2.17.7, 2.18.4, 2.19.0","
None
",Resolved,Fixed,"2.17.7, 2.18.4, 2.19.0",Andrea Cosentino,Andrea Cosentino,0,3,2017-03-06 12:16:19+00:00,2017-04-19 08:09:44+00:00,We need to use the same trick as the mail component in the consumer side.,"lmilev:1492521212:2017-04-18T21:13:32.584+0000:1492521212:2017-04-18T21:13:32.584+0000:Hello, we had an issue running hdfs test.
Reportedly it also fails in CI, although sure-fire doesn't treat it as error.

This is an irc log:

zregvart> OneOneOneOne: I think this line should be removed
           https://github.com/apache/camel/blob/master/components/camel-hdfs2/s
           rc/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java#L44
zregvart:1492521340:2017-04-18T21:15:40.866+0000:1492521340:2017-04-18T21:15:40.866+0000:[~ancosen] This seems to overwrite the URI parameter value given with default value, I think this [HdfsEndpoint.java#L44|https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsEndpoint.java#L44] line needs to be removed as the {{initialDelay}} is already set to {{HdfsConsumer.DEFAULT_CONSUMER_INITIAL_DELAY}} in field initialization at [HdfsConfiguration.java#L74|https://github.com/apache/camel/blob/master/components/camel-hdfs2/src/main/java/org/apache/camel/component/hdfs2/HdfsConfiguration.java#L74].
The tests actually fail on CI (see [Build #1288 Console output|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.java8/1288/org.apache.camel$camel-hdfs2/console]) but are not reported as failed, which is strange.
It fails with:  {{\[ERROR\] There was a timeout or other error in the fork}}
acosentino:1492521511:2017-04-18T21:18:31.334+0000:1492521511:2017-04-18T21:18:31.334+0000:Thanks for spotting this. I will fix it tomorrow :-)
acosentino:1492560584:2017-04-19T08:09:44.506+0000:1492560584:2017-04-19T08:09:44.506+0000:Fixed."
0,CAMEL-10947,Task,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tadayoshi Sato,Claus Ibsen,0,3,2017-03-06 11:12:04+00:00,2017-04-11 06:47:57+00:00,"The new camel-box component that is migrated to box 2 api needs to



use log4j v2 for testing (see the other components how to do that)
karaf feature to be adjusted (so it can install and work on karaf)","davsclaus:1488848975:2017-03-07T09:09:35.494+0000:1488848975:2017-03-07T09:09:35.494+0000:Contributions is welcome
davsclaus:1491526127:2017-04-07T08:48:47.643+0000:1491526127:2017-04-07T08:48:47.643+0000:Tada are you working on this, if not then please unassign so we can have someone else work on it as we need this for 2.19 release
tadayosi:1491527240:2017-04-07T09:07:20.377+0000:1491527240:2017-04-07T09:07:20.377+0000:Oops, I thought to work on it but then have been away from it for other tasks. I'll work on it next week. Is that fine?
davsclaus:1491529326:2017-04-07T09:42:06.913+0000:1491529326:2017-04-07T09:42:06.913+0000:Yeah this is fine
githubbot:1491794714:2017-04-10T11:25:14.094+0000:1491794714:2017-04-10T11:25:14.094+0000:GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1610

    CAMEL-10947: camel-box - Upgrade to log4j2 and fix Karaf feature

    https://issues.apache.org/jira/browse/CAMEL-10947

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10947

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1610.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1610
    
----
commit 02202c3d34cc64988cc5b75739dd347d767f658f
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2017-04-10T11:21:29Z

    CAMEL-10947: camel-box - Upgrade to log4j2 and fix Karaf feature

----

githubbot:1491801232:2017-04-10T13:13:52.132+0000:1491801232:2017-04-10T13:13:52.132+0000:Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1610

githubbot:1491846319:2017-04-11T01:45:19.422+0000:1491846319:2017-04-11T01:45:19.422+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1612

    CAMEL-10947 Fixed missing alignment on ${htmlunit-version} property

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10947-prop

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1612.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1612
    
----
commit da505f984cb3cb5fcde42303277b4477f44baa71
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-11T01:40:38Z

    CAMEL-10947 Fixed missing alignment on ${htmlunit-version} property

----

githubbot:1491864477:2017-04-11T06:47:57.528+0000:1491864477:2017-04-11T06:47:57.528+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1612
"
0,CAMEL-10946,Bug,Minor,2.18.2,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Francis,0,2,2017-03-06 10:51:38+00:00,2017-03-07 08:23:44+00:00,"I have a known_hosts file in \src\main\resources and I want the ftp-component to use this known_hosts file when connecting to an sftp server (and not be dependent on the ~/.ssh/known_hosts file).
When using this option (in combination with the option useUserKnownHostsFile=false), camel starts up fine 



if (isNotEmpty(sftpConfig.getKnownHostsFile())) {



 is being triggered from SftpOperations.java and I can see that useUserKnownHostsFile and knownHostsFile is set correctly - seen in this picture:

However when some files are added to SFTP server and 



if (isNotEmpty(sftpConfig.getKnownHostsFile())) {



 triggers then the values are overridden:



In logs I see these repeating lines each time a file is added to SFTP server:



..
{""@timestamp"":""2017-03-06T13:02:04.016+02:00"",""@version"":1,""message"":""JSCH -> Permanently added '10.xx.x.xxx' (RSA) to the list of known hosts."",""logger_name"":""org.apache.camel.component.file.remote.SftpOperations""
{""@timestamp"":""2017-03-06T13:02:04.016+02:00"",""@version"":1,""message"":""Server asks for confirmation (yes|no): C:\\Users\\francis.zarins/.ssh/known_hosts does not exist.\nAre you sure you want to create it?. Camel will answer no."",
..
{""@timestamp"":""2017-03-06T13:02:35.320+02:00"",""@version"":1,""message"":""JSCH -> Permanently added '10.xx.x.xxx' (RSA) to the list of known hosts.""
{""@timestamp"":""2017-03-06T13:02:35.336+02:00"",""@version"":1,""message"":""Server asks for confirmation (yes|no): C:\\Users\\francis.zarins/.ssh/known_hosts does not exist.\nAre you sure you want to create it?. Camel will answer no."",
..","davsclaus:1488769075:2017-03-06T10:57:55.113+0000:1488769075:2017-03-06T10:57:55.113+0000:Try with 2.18.3 - I think we have fixed something in it
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-18-3-tp5794857.html
fzarins:1488770363:2017-03-06T11:19:23.248+0000:1488770363:2017-03-06T11:19:23.248+0000:[~davsclaus] thanks for the super fast answer! We need to use a maven dependency in the project so I can't import it from .tar and I don't see 2.18.3 in https://mvnrepository.com/artifact/org.apache.camel/camel-core.
davsclaus:1488770473:2017-03-06T11:21:13.938+0000:1488770473:2017-03-06T11:21:13.938+0000:Read that link again, there is a link to the staging repo where the 2.18.3 JARs are
fzarins:1488781427:2017-03-06T14:23:47.431+0000:1488781457:2017-03-06T14:24:17.144+0000:I think I found out why options in are being overridden, this might be related to the configs on our side. Will investigate and update in a while.
fzarins:1488813448:2017-03-06T23:17:28.096+0000:1488813448:2017-03-06T23:17:28.096+0000:[~davsclaus], so the problem was with our ProducerTemplate which made use of the from(..) definiton, it trimmed off the **useUserKnownHostsFile** and **knownHostsUri** and they were not being added.

Sorry for the trouble, this ticket can be closed as it's not a problem with Camel.
davsclaus:1488846224:2017-03-07T08:23:44.981+0000:1488846224:2017-03-07T08:23:44.981+0000:Thanks and good to hear you found the problem"
0,CAMEL-10945,Test,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-06 08:56:40+00:00,2017-03-06 09:12:38+00:00,"All the unit test fails
https://builds.apache.org/job/Camel.trunk.fulltest.java8/1180/#showFailuresLink",
0,CAMEL-10944,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-05 17:47:22+00:00,2022-03-28 09:21:49+00:00,"When you do a graceful stop of a Kafka route you should be able to auto commit so the offset is up to date on the broker, so any new consumer that failover, or if you start the route again, it will pickup from the right spot. Otherwise you have duplicates.


The kafka consumer will auto commit in the background every 5th sec but if we dont explicit auto commit on stop then we only have the last offset from the last background thread run and therefore have much higher chances of duplicates.


We should add option so users can control if auto commit on stop is sync,async,none


We should do sync so its forced in case its the JVM shutting down and we cant do async in the background. And ppl can set it to none if they want as it is today",
0,CAMEL-10943,Task,Major,None,Future,"
None
",Resolved,Abandoned,Future,Jean-Baptiste Onofré,Claus Ibsen,0,2,2017-03-05 14:27:26+00:00,2019-08-06 10:24:04+00:00,"More OSGi pain with this new release.


For example
http://stackoverflow.com/questions/42608617/apache-camel-on-karaf-with-spring-dsl-osgi/42609554#42609554",jbonofre:1558652343:2019-05-24T06:59:03.441+0000:1558652343:2019-05-24T06:59:03.441+0000:I'm reviewing the examples and eventually fix.
0,CAMEL-10942,Improvement,Major,None,None,"
None
",Resolved,Invalid,None,Unassigned,Abdullah Saif AlQassabi,0,2,2017-03-05 09:44:29+00:00,2017-03-05 09:54:52+00:00,"hi,


I am trying to get operationName header from exchange when I try to call a web service but it returns empty, and it seems the operation name can be get from SOAP Headers. 


is there any way to get the SOAPHeaders from the exchange as when we get the normal headers?",acosentino:1488678876:2017-03-05T09:54:36.602+0000:1488678876:2017-03-05T09:54:36.602+0000:Please use the user mailing list for this kind of questions.
0,CAMEL-10941,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-04 16:33:41+00:00,2017-03-06 13:04:38+00:00,"In the adoc files. 


And then if the website that is generated from adoc or the html files requires those, we can add them back use some tooling that inserts them again.


It looks annoying on github",
0,CAMEL-10940,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-04 15:26:42+00:00,2017-03-04 15:58:38+00:00,"So its easier to spot which are path parameters and which are query.


We should have separate tables and also show the uri syntax closer to these tables.",
0,CAMEL-10939,Bug,Minor,2.19.0,,"
None
",Resolved,Fixed,None,Zoran Regvart,Zoran Regvart,0,1,2017-03-04 13:11:49+00:00,2017-03-04 13:17:43+00:00,"As uncovered in CAMEL-10935 the change introduced in CAMEL-10928 failed two tests.


The root cause for the test failure was that the Endpoint created at RestletComponent::createConsumer is not started, which leads to NullPointerException at RestletConsumer:65 as the restletBinding of the RestletEndpoint is created on Endpoint start.


The reason tests originally passed is because both RestletConsumer and RestletProducer used the same Endpoint originally created and started by the RestletProducer.


CAMEL-10928 changed the Endpoint parameter restletMethods to restletMethod for the RestletProducer whilst the RestletConsumer is using restletMethods, this results in differing Endpoint URIs which results in not getting the same Endpoint in the RestletConsumer as in RestletProduicer.",
0,CAMEL-10938,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Luca Burgazzoli,0,3,2017-03-04 10:17:28+00:00,2017-03-24 15:06:43+00:00,No Desc,"davsclaus:1488614527:2017-03-04T16:02:07.524+0000:1488614527:2017-03-04T16:02:07.524+0000:As today the camel-salesforce component requires a file containing login credential to be placed in the source tree to have the test running but it would be nice to have additional strategies like:

- use env vars
- use system properties

The test profile should then have multiple activation condition.
zregvart:1490339203:2017-03-24T15:06:43.335+0000:1490339203:2017-03-24T15:06:43.335+0000:Now the tests can be run configured with environment variables ({{SALESFORCE_USERNAME}}), system properties ({{-Dsalesforce.username}}) or using the {{test-salesforce-login.properties}} file."
0,CAMEL-10937,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-04 10:09:08+00:00,2017-03-04 12:21:35+00:00,"So if you do



                KafkaComponent kafka = new KafkaComponent();
                kafka.setBrokers(""{{kafka.host}}:{{kafka.port}}"");




Then those property placeholder should be resolved by Camel and set as their actual value when the component is starting up.


Then you can configure this from just java code as well. As <bean> style have property placeholders but then its either blueprint or spring style. If we allow to use Camel style then users can do this more consistently.",davsclaus:1488601274:2017-03-04T12:21:14.560+0000:1488601295:2017-03-04T12:21:35.788+0000:This is a standard option to turn on|off (on by default) on component and hence why every component now have generated that for spring boot etc
0,CAMEL-10936,Bug,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Luca Burgazzoli,0,2,2017-03-04 09:28:55+00:00,2017-03-23 12:10:48+00:00,"As per SalesforceSession's login exception handling [1] a message is computed to report both the error code and its description but then, when an object of type RestError is created, the computed message is used to set the RestError's code. 


IMHO, the error code provided by SalesForce should be reported as it is, then the computed message can be set for  RestError's message so instead of:



errors.add(new RestError(msg, error.getErrorDescription()));




It should be:



errors.add(new RestError(error.getError(), msg));




This helps to easily handle different error codes as one do not need to parse the error message. 


[1] https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/SalesforceSession.java#L199",zregvart:1490242248:2017-03-23T12:10:48.449+0000:1490242248:2017-03-23T12:10:48.449+0000:Fixed as suggested thanks [~lb]!
0,CAMEL-10935,Test,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Claus Ibsen,0,2,2017-03-04 08:53:25+00:00,2017-03-04 13:18:25+00:00,"See CI server
https://builds.apache.org/job/Camel.trunk.fulltest.java8/1177/#showFailuresLink


I wonder if its due the recent code change from zregvart ?","davsclaus:1488588834:2017-03-04T08:53:54.154+0000:1488588834:2017-03-04T08:53:54.154+0000:org.apache.camel.component.restlet.RestRestletProducerGetTest.testRestletProducerGet
org.apache.camel.component.restlet.RestRestletProducerGetUriParameterTest.testRestletProducerGet


zregvart:1488604705:2017-03-04T13:18:25.012+0000:1488604705:2017-03-04T13:18:25.012+0000:Resolved by CAMEL-10928"
0,CAMEL-10934,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-03 19:16:02+00:00,2017-03-03 19:36:30+00:00,Found bug CAMEL-10927 with the work from Jakub. We should initialize this in a better way so the repo is created better with CamelContext injected.,
0,CAMEL-10933,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-03 13:30:48+00:00,2017-03-06 11:23:00+00:00,No Desc,
0,CAMEL-10932,New Feature,Minor,2.19.0,None,"
None
",Resolved,Done,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-03-03 12:27:06+00:00,2017-03-16 22:00:57+00:00,"As a result of discussion resulting from CAMEL-10809 (GitHub PR comment a need for a rest-swagger component has arisen.
A component that would leverage the SPI support introduced in CAMEL-10164 and create REST endpoints preconfigured with the Swagger specification. This would allow choosing the client component (e.g. http4, jetty, undertow...) and have a higher level abstraction over the REST API.
I think a good start would getting the Producer support first, and than expand into specification first design for Consumers.","githubbot:1488516339:2017-03-03T12:45:39.978+0000:1488516339:2017-03-03T12:45:39.978+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1504

    CAMEL-10932 REST Swagger component

    Submitted for review, thanks in advance for your feedback :+1: 
    
    This includes the initial implementation of the `rest-swagger` component
    that allows for a higher level abstraction over the REST API usage from
    other Camel components that implement the `RestProducerFactory` SPI
    combined with Swagger (Open API) specifications.
    
    The most simple usage would be:
    
        to(""rest-swagger:getPetById?endpoint=https://api.petstore.com"")
    
    Which would pick up the Swagger specification from `swagger.json` and
    try to find a single component that implements the `RestProducerFactory`
    SPI.
    
    Typical use case would be specifying the component to delegate to and
    the path to the specification file, assuming that client configured and
    added `petstore` component to the Camel context:
    
        to(""rest-swagger:getPetById:apis/petstore.json?""
           + ""endpoint=https://api.petstore.com""
           + ""&componentName=petstore""
          )

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10932

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1504.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1504
    
----
commit d3daf72ecaacb2e9bd992037dfb169635b8d8e84
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-03-03T11:40:54Z

    CAMEL-10932 REST Swagger component
    
    This includes the initial implementation of the `rest-swagger` component
    that allows for a higher level abstraction over the REST API usage from
    other Camel components that implement the `RestProducerFactory` SPI
    combined with Swagger (Open API) specifications.
    
    The most simple usage would be:
    
        to(""rest-swagger:getPetById?endpoint=https://api.petstore.com"")
    
    Which would pick up the Swagger specification from `swagger.json` and
    try to find a single component that implements the `RestProducerFactory`
    SPI.
    
    Typical use case would be specifying the component to delegate to and
    the path to the specification file, assuming that client configured and
    added `petstore` component to the Camel context:
    
        to(""rest-swagger:getPetById:apis/petstore.json?""
           + ""endpoint=https://api.petstore.com""
           + ""&componentName=petstore""
          )

----

githubbot:1488771118:2017-03-06T11:31:58.253+0000:1488771118:2017-03-06T11:31:58.253+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1504

zregvart:1488773159:2017-03-06T12:05:59.861+0000:1488773159:2017-03-06T12:05:59.861+0000:Will resow this in camel-core/swagger-java see discussion on the GitHub PR.
zregvart:1489553814:2017-03-15T12:56:54.510+0000:1489553814:2017-03-15T12:56:54.510+0000:Actually I think this merits a component
githubbot:1489644173:2017-03-16T14:02:53.199+0000:1489644173:2017-03-16T14:02:53.199+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1544

    CAMEL-10932 REST Swagger component

    **Please review this, thank you** :1st_place_medal: 
    
    This includes the initial implementation of the `rest-swagger` component
    that allows for a higher level abstraction over the REST API usage from
    other Camel components that implement the `RestProducerFactory` SPI
    combined with Swagger (Open API) specifications.
    
    The most simple usage would be:
    
        to(""rest-swagger:getPetById"")
    
    Which would pick up the Swagger specification from `swagger.json` and
    try to find a single component that implements the `RestProducerFactory`
    SPI and invoke the `getPetById` operation.
    
    Other way of using this component could be:
    
        to(""rest-swagger:http://petstore.swagger.io/v2/swagger.json#getPetById"")
    
    That loads the Swagger specification from the
    `http://petstore.swagger.io/v2/swagger.json` URL and invokes the
    `getPetById` operation.
    
    More concise way of configuring would be to configure most properties
    on the component add it to CamelContext, and use only `operationId` path
    parameter when triggering the exchange:
    
        // add `petstore` component to the CamelContext
        RestSwaggerComponent petstore =
            new RestSwaggerComponent(camelContext);
        petstore.setSpecificationUri(""http://petstore.swagger.io/v2/swagger.json"");
        petstore.setComponentName(""undertow"");
        camelContext.addComponent(""petstore"", petstore);
    
    And then use `operationId` in endpoint definition:
    
        ProducerTemplate template = camelContext.getProducerTemplate();
        template.requestBodyAndHeaders(""petstore:getPetById"", null, ""petId"",
            petId);

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel swagger-awesome-respin

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1544.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1544
    
----
commit b68d5553283cd46511147eba200191c5df21c619
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-03-16T11:54:47Z

    CAMEL-10932 REST Swagger component
    
    This includes the initial implementation of the `rest-swagger` component
    that allows for a higher level abstraction over the REST API usage from
    other Camel components that implement the `RestProducerFactory` SPI
    combined with Swagger (Open API) specifications.
    
    The most simple usage would be:
    
        to(""rest-swagger:getPetById"")
    
    Which would pick up the Swagger specification from `swagger.json` and
    try to find a single component that implements the `RestProducerFactory`
    SPI and invoke the `getPetById` operation.
    
    Other way of using this component could be:
    
        to(""rest-swagger:http://petstore.swagger.io/v2/swagger.json#getPetById"")
    
    That loads the Swagger specification from the
    `http://petstore.swagger.io/v2/swagger.json` URL and invokes the
    `getPetById` operation.
    
    More concise way of configuring would be to configure most properties
    on the component add it to CamelContext, and use only `operationId` path
    parameter when triggering the exchange:
    
        // add `petstore` component to the CamelContext
        RestSwaggerComponent petstore =
            new RestSwaggerComponent(camelContext);
        petstore.setSpecificationUri(""http://petstore.swagger.io/v2/swagger.json"");
        petstore.setComponentName(""undertow"");
        camelContext.addComponent(""petstore"", petstore);
    
    And then use `operationId` in endpoint definition:
    
        ProducerTemplate template = camelContext.getProducerTemplate();
        template.requestBodyAndHeaders(""petstore:getPetById"", null, ""petId"",
            petId);

----

githubbot:1489670975:2017-03-16T21:29:35.661+0000:1489670975:2017-03-16T21:29:35.661+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1544
"
0,CAMEL-10931,Bug,Major,2.18.2,2.19.0,"
None
",Resolved,Fixed,2.19.0,Scott Cranton,Scott Cranton,0,3,2017-03-03 10:56:13+00:00,2017-03-10 15:17:15+00:00,No Desc,"davsclaus:1488510044:2017-03-03T11:00:44.818+0000:1488510044:2017-03-03T11:00:44.818+0000:AFAIR you set the outType=""foo[]"" with the [] to indicate array/list type. Same as inType etc.
davsclaus:1488510226:2017-03-03T11:03:46.514+0000:1488510226:2017-03-03T11:03:46.514+0000:However the javadoc on these model/verbs could be improved. You are welcome to add some text that tells about how to specify a list with the [] style.
scranton:1488511547:2017-03-03T11:25:47.892+0000:1488511547:2017-03-03T11:25:47.892+0000:Should I open a separate issue around updating doc, or submit PR against this issue number?
davsclaus:1488513843:2017-03-03T12:04:03.826+0000:1488513843:2017-03-03T12:04:03.826+0000:A PR with this number is fine and thanks for helping
davsclaus:1488515043:2017-03-03T12:24:03.569+0000:1488515043:2017-03-03T12:24:03.569+0000:Scott I granted your user karma to self assign tickets
davsclaus:1489039010:2017-03-09T13:56:50.012+0000:1489039048:2017-03-09T13:57:28.646+0000:Scott, just a gentle reminder.

I suppose you get a little time this weekend or so to provide a PR?

Its the setter of
org.apache.camel.model.rest.VerbDefinition#setOutType

And also for in type you can do the same with [] as list.
org.apache.camel.model.rest.VerbDefinition#setType

davsclaus:1489039092:2017-03-09T13:58:12.494+0000:1489039092:2017-03-09T13:58:12.494+0000:And also on RestBindingDefinition there is setters for them as well, so they should be changed too
scranton:1489039499:2017-03-09T14:04:59.938+0000:1489039499:2017-03-09T14:04:59.938+0000:will do... distracted with my Cookbook updates... :-)
scranton:1489063151:2017-03-09T20:39:11.808+0000:1489063151:2017-03-09T20:39:11.808+0000:Looking at the code, shouldn't RestDefinition typeList and outTypeList be deprecated, and all of the documentation updated to say to use type(myClass[]) and outType(myClass[]) everywhere instead? That's all typeList and outTypeList are doing anyways, i.e. appending ""[]"" to the class name...

https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java#L423
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/model/rest/RestDefinition.java#L446

Recommending / documenting that you just use type(class[]) and outType(class[]) everyone would make Java and XML DSLs consistent...

Thoughts?
davsclaus:1489065050:2017-03-09T21:10:50.440+0000:1489065050:2017-03-09T21:10:50.440+0000:Yeah that makes sese. However it requires some code change to make the code that takes a class type and gets the canonical name support arrays as it may not represent that correctly - to ensure when using Java it works as well.


githubbot:1489123102:2017-03-10T13:18:22.944+0000:1489123102:2017-03-10T13:18:22.944+0000:GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1524

    CAMEL-10931: deprecated typeList and outTypeList, and removed references from rest-api doc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-10931

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1524.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1524
    
----
commit 4f9d81b7b3afa14b57c0893c81f954d0d100ee84
Author: Scott Cranton <scott@cranton.com>
Date:   2017-03-10T13:17:00Z

    CAMEL-10931: deprecated typeList and outTypeList, and removed references from rest-api doc

----

scranton:1489123201:2017-03-10T13:20:01.319+0000:1489123201:2017-03-10T13:20:01.319+0000:I deprecated typeList and outTypeList, and removed references from rest-api.adoc.

I could not find where the rest-dsl doc is maintained in source to update that. Is that only on confluence? 
githubbot:1489130170:2017-03-10T15:16:10.090+0000:1489130170:2017-03-10T15:16:10.090+0000:Github user scranton closed the pull request at:

    https://github.com/apache/camel/pull/1524
"
0,CAMEL-10930,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-03-03 08:26:55+00:00,2017-03-03 09:09:00+00:00,This would be needed so Camel can compile with Java 9. And groovy dsl is also deprecated and to be moved to camel extra,
0,CAMEL-10929,Bug,Minor,None,None,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-03-02 21:15:39+00:00,2017-03-02 21:17:31+00:00,"When creating the HTTP request the Undertow producer creates it with path that includes the whole URL for the request, not only the path and query part of the request.
In the end this results in HTTP request like:



POST http://api.example.com/path?query
...",
0,CAMEL-10928,Bug,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-03-02 20:27:26+00:00,2017-03-04 13:17:43+00:00,"The RestProducerFactory::createProducer contract uses endpoint property restletMethods which is used solely by the Restlet consumer, the proper property should be restletMethod.
This makes all requests issue a GET rather than the one passed in the verb parameter.",
0,CAMEL-10927,New Feature,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Jakub Korab,Jakub Korab,0,3,2017-03-02 15:11:27+00:00,2017-03-04 15:08:55+00:00,Add IdempotentRepository implementation that uses a Kafka topic as a log.,"githubbot:1488439485:2017-03-02T15:24:45.870+0000:1488439485:2017-03-02T15:24:45.870+0000:GitHub user jkorab opened a pull request:

    https://github.com/apache/camel/pull/1502

    CAMEL-10927: Added KafkaIdempotentRepository

    Pull request contains Kafka topic-based IdempotentRepository. Also contains refactorings of existing camel-kafka test support classes that were required to simplify the embedded Kafka and Zookeeper implementations, and fixed state-leakage issue in unit tests.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jkorab/camel CAMEL-10927

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1502.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1502
    
----
commit ea4089e9eb7a55fef65d780a74c5c4191f0f22ab
Author: Jakub Korab <jakub.korab@gmail.com>
Date:   2017-02-24T13:51:26Z

    Kafka test resource refactoring

commit 00c479958943c158b9ba75f6006060380eaf53b4
Author: Jakub Korab <jakub.korab@gmail.com>
Date:   2017-02-28T17:23:50Z

    Refactored embedded test infrastructure

commit 43df88ef8eab22dd868f96a53e0586297be81846
Author: Jakub Korab <jakub.korab@gmail.com>
Date:   2017-03-02T15:14:07Z

    CAMEL-10927 Added complete KafkaIdempotentRepository with supporting tests.

commit 86ca918f71e25c57b925670d78abcf1de05a087e
Author: Jakub Korab <jakub.korab@gmail.com>
Date:   2017-03-02T15:20:40Z

    Removed unnecessary synchronized block.

----

davsclaus:1488515095:2017-03-03T12:24:55.655+0000:1488515095:2017-03-03T12:24:55.655+0000:Jakub I granted your user karma to self assign tickets.

There is some more comments on the PR before its ready. But great work and good to see your contribute source code to Camel as well
githubbot:1488611335:2017-03-04T15:08:55.761+0000:1488611335:2017-03-04T15:08:55.761+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1502
"
0,CAMEL-10926,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-03-02 12:33:59+00:00,2017-03-02 12:41:47+00:00,It's de facto required to set the Host header on HTTP requests. The Undertow component does not set it. This is very inconvenient as it breaks virtual hosts.,"zregvart:1488429446:2017-03-02T12:37:26.683+0000:1488429446:2017-03-02T12:37:26.683+0000:Actually, client _SHOULD_ set it by [HTTP 1.1|https://tools.ietf.org/html/rfc7230#section-5.4]."
0,CAMEL-10925,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Nicola Ferraro,Nicola Ferraro,0,3,2017-03-02 11:35:48+00:00,2017-04-12 11:15:05+00:00,Spring-boot 1.5.1.RELEASE upgrades some dependencies (eg. Jetty 9.4.x) and some integration tests are failing. We should run integration tests and try to fix incompatibilities.,"davsclaus:1489390524:2017-03-13T15:35:24.902+0000:1489390524:2017-03-13T15:35:24.902+0000:I ran them today and had these errors

{code}
Results :

Tests in error:
org.apache.camel.itest.springboot.CamelCacheTest.componentTests(org.apache.camel.itest.springboot.CamelCacheTest)
  Run 1: CamelCacheTest.componentTests:44->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »
  Run 2: CamelCacheTest.componentTests:44->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »

org.apache.camel.itest.springboot.CamelCometdTest.componentTests(org.apache.camel.itest.springboot.CamelCometdTest)
  Run 1: CamelCometdTest.componentTests:43->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »
  Run 2: CamelCometdTest.componentTests:43->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »

org.apache.camel.itest.springboot.CamelHbaseTest.componentTests(org.apache.camel.itest.springboot.CamelHbaseTest)
  Run 1: CamelHbaseTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  Run 2: CamelHbaseTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget

  CamelJiraTest.org.apache.camel.itest.springboot.CamelJiraTest » Runtime Could ...
org.apache.camel.itest.springboot.CamelMongodbGridfsTest.componentTests(org.apache.camel.itest.springboot.CamelMongodbGridfsTest)
  Run 1: CamelMongodbGridfsTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  Run 2: CamelMongodbGridfsTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget

org.apache.camel.itest.springboot.CamelMybatisTest.componentTests(org.apache.camel.itest.springboot.CamelMybatisTest)
  Run 1: CamelMybatisTest.componentTests:44->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »
  Run 2: CamelMybatisTest.componentTests:44->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »

  CamelScalaTest.org.apache.camel.itest.springboot.CamelScalaTest » Runtime Coul...
  CamelSpringWsTest.org.apache.camel.itest.springboot.CamelSpringWsTest » Runtime
org.apache.camel.itest.springboot.CamelWebsocketTest.componentTests(org.apache.camel.itest.springboot.CamelWebsocketTest)
  Run 1: CamelWebsocketTest.componentTests:44->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »
  Run 2: CamelWebsocketTest.componentTests:44->AbstractSpringBootTestSupport.runComponentTest:68->AbstractSpringBootTestSupport.runComponentTest:72 »


Tests run: 218, Failures: 0, Errors: 9, Skipped: 0
{code}
davsclaus:1489453327:2017-03-14T09:02:07.605+0000:1489453327:2017-03-14T09:02:07.605+0000:I setup a CI job to run these tests once per day
https://builds.apache.org/view/A-D/view/Camel/job/camel.trunk.itest.springboot/
nferraro:1489560203:2017-03-15T14:43:23.495+0000:1489560203:2017-03-15T14:43:23.495+0000:It seems that all tests fail in CI, can you run it with ""-X"" to have a stack trace of the exception?
nferraro:1489563806:2017-03-15T15:43:26.696+0000:1489563806:2017-03-15T15:43:26.696+0000:We have 3 components for mongodb:
- camel-mongodb
- camel-mongodb-gridfs
- camel-mongodb3

Since the spring-boot bom uses mongodb v3, I wonder if we can remove/deprecate the other 2 starters. [~ancosen]?
davsclaus:1489564443:2017-03-15T15:54:03.333+0000:1489564443:2017-03-15T15:54:03.333+0000:gridfs and the others are not the same. 
acosentino:1489566654:2017-03-15T16:30:54.831+0000:1489566654:2017-03-15T16:30:54.831+0000:Are different components.. Maybe we can deprecate camel-mongodb but not for 2.19.0
nferraro:1489568275:2017-03-15T16:57:55.899+0000:1489568275:2017-03-15T16:57:55.899+0000:Ok, so let's leave them. The failing tests are now ok. Some issues were related to classes removed in Jetty 9.4 (as usual). I tried to leave backward compatibility with Jetty 9.3.

I'll try to go deeper with tests to investigate if we have other issues (e.g. running unit tests in spring-boot mode).

[~davsclaus] can you investigate why all tests are failing in CI?
davsclaus:1489568482:2017-03-15T17:01:22.092+0000:1489568482:2017-03-15T17:01:22.092+0000:Lets wait for tomorrow so the CI uses latest code
davsclaus:1489635921:2017-03-16T11:45:21.725+0000:1489635921:2017-03-16T11:45:21.725+0000:The CI server could not build a new SNAPSHOT due that compiler error in salesforce so lets wait another day ;)
davsclaus:1489796585:2017-03-18T08:23:05.788+0000:1489796585:2017-03-18T08:23:05.788+0000:There is a -X flag now on the mvn but the tests keep failing with that shrinkwrap error, and there is not so much detail
https://builds.apache.org/view/A-D/view/Camel/job/camel.trunk.itest.springboot/6/consoleText

I wonder if there is another way to run tests without shrinkwrap or something? Maybe just as plain spring boot tests. 
nferraro:1489800153:2017-03-18T09:22:33.673+0000:1489800153:2017-03-18T09:22:33.673+0000:I've tried to reproduce a clean build like the one done in CI, and pushed a possible fix...
davsclaus:1489800546:2017-03-18T09:29:06.795+0000:1489800546:2017-03-18T09:29:06.795+0000:I kicked a new build
https://builds.apache.org/view/A-D/view/Camel/job/camel.trunk.itest.springboot/7/console

And it seems it gets further now the SNAPSHOT jars cannot be found

Caused by: org.eclipse.aether.resolution.ArtifactResolutionException: Could not find artifact org.apache.camel:camel-amqp-starter:jar:2.19.0-SNAPSHOT in central (http://repo1.maven.org/maven2)

So its maybe a matter of trying to find out how to add Apache SNAPSHOT repo so it can download those JARs - they ought to be published there
http://repository.apache.org/snapshots/
nferraro:1489974699:2017-03-20T09:51:39.666+0000:1489974699:2017-03-20T09:51:39.666+0000:It's strange but I can't reproduce it locally. I've added the apache snapshots repo to the list of repos used to retrieve artifacts. Can you kick a new build?
davsclaus:1489975983:2017-03-20T10:13:03.224+0000:1489975983:2017-03-20T10:13:03.224+0000:Building
https://builds.apache.org/view/A-D/view/Camel/job/camel.trunk.itest.springboot/10/
davsclaus:1489976208:2017-03-20T10:16:48.116+0000:1489976208:2017-03-20T10:16:48.116+0000:Ah we need to wait for CI server to do a full rebuild of the master branch. So tomorrow we can try again
davsclaus:1491966888:2017-04-12T11:14:48.474+0000:1491966888:2017-04-12T11:14:48.474+0000:The CI server is now succesful and tests over 200+ tests
https://builds.apache.org/view/A-D/view/Camel/job/camel.trunk.itest.springboot/"
0,CAMEL-10924,Sub-task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2017-03-02 10:38:39+00:00,2017-03-10 13:43:38+00:00,No Desc,davsclaus:1488967332:2017-03-08T18:02:12.550+0000:1488967332:2017-03-08T18:02:12.550+0000:There is a RuntimeCamelCatalog now in camel-core that has validation API based on the components that are on the classpath.
0,CAMEL-10923,Sub-task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-03-02 10:37:35+00:00,2017-03-10 13:43:44+00:00,"It would be nice to let the camel-catalog also list what verification scopes a component supports i.e.



camel-http supports validation of options and connectivity
camel-file does not have a connectivity so it supports parameters validation only



We can use ""@Metadata"" to add such info",
0,CAMEL-10922,Sub-task,Minor,None,,"
None
",Resolved,Fixed,None,Unassigned,John Poth,0,1,2017-03-02 08:57:52+00:00,2017-03-06 09:18:55+00:00,"Plugin fails with error:



Caused by: java.lang.IllegalArgumentException: Prefix '' is already bound to ''
        at com.sun.xml.txw2.StartTag.addNamespaceDecl(StartTag.java:191)
        at com.sun.xml.txw2.ContainerElement._namespace(ContainerElement.java:333)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.base/java.lang.reflect.Method.invoke(Method.java:547)
        at com.sun.xml.txw2.ContainerElement.invoke(ContainerElement.java:134)
        at com.sun.proxy.$Proxy49._namespace(Unknown Source)
        at com.sun.tools.xjc.addon.episode.PluginImpl.run(PluginImpl.java:174)
        at com.sun.tools.xjc.model.Model.generateCode(Model.java:292)
        at org.jvnet.mjiip.v_2_2.XJC22Mojo.generateCode(XJC22Mojo.java:66)
        at org.jvnet.mjiip.v_2_2.XJC22Mojo.doExecute(XJC22Mojo.java:41)
        at org.jvnet.mjiip.v_2_2.XJC22Mojo.doExecute(XJC22Mojo.java:28)
        at org.jvnet.jaxb2.maven2.RawXJC2Mojo.doExecute(RawXJC2Mojo.java:505)
        at org.jvnet.jaxb2.maven2.RawXJC2Mojo.execute(RawXJC2Mojo.java:328)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        ... 21 more",
0,CAMEL-10921,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2017-03-02 08:47:28+00:00,2017-03-02 08:52:02+00:00,"We need a Karaf feature, we still miss some bundles but for the moment we can wrap them.",
0,CAMEL-10890,Task,Major,2.19.0,None,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Claus Ibsen,0,3,2017-02-24 08:07:49+00:00,2017-03-02 08:28:31+00:00,"We have 3 test  that fails in jetty9, netty4-http and restlet
https://builds.apache.org/job/Camel.trunk.fulltest.java8/lastCompletedBuild/testReport/


Its testBindingModeOffWithContract


Its related to the new contract/validator stuff that Tomo contributed.","davsclaus:1487894897:2017-02-24T08:08:17.011+0000:1487894897:2017-02-24T08:08:17.011+0000:Tomo I wonder if you have time to look into these 3 failing tests?
igarashitm:1487900265:2017-02-24T09:37:45.306+0000:1487900265:2017-02-24T09:37:45.306+0000:Sorry it's my bug, I'll submit a PR once local tests pass.
githubbot:1487954750:2017-02-25T00:45:50.073+0000:1487954750:2017-02-25T00:45:50.073+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1492

    CAMEL-10890 Failed test in some http components

    Instead of handling all the cases in ContractAdvice, added INPUT/OUTPUT property copy when message copy occurs between IN and OUT. This enables it to keep type metadata in sync in much cleaner way.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10890

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1492.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1492
    
----
commit 35dd44918efdbbbeeaf08bdb9004737f5ad0c070
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-02-24T16:39:30Z

    CAMEL-10890 Failed test in some http components
    
    Instead of handling all the cases in ContractAdvice, added INPUT/OUTPUT property copy when message copy occurs between IN and OUT. This enables it to keep type metadata in sync in much cleaner way.

----

githubbot:1488261520:2017-02-28T13:58:40.246+0000:1488261520:2017-02-28T13:58:40.246+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1492

igarashitm:1488414511:2017-03-02T08:28:31.012+0000:1488414511:2017-03-02T08:28:31.012+0000:Those http tests passed here:
https://builds.apache.org/job/Camel.trunk.fulltest.java8/1174/"
0,CAMEL-10889,New Feature,Major,2.18.2,2.19.0,"
None
",Resolved,Implemented,2.19.0,Nicola Ferraro,Jörg Larbig,0,2,2017-02-24 07:30:30+00:00,2017-03-16 15:58:36+00:00,"camel-telegram component should support the Formatting options from the bot api 
https://core.telegram.org/bots/api to be able to send formatted messages (in my case HTML style)


Please also add camel-telegram to the components list in Jira",
0,CAMEL-10888,Bug,Major,None,"2.17.6, 2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.3, 2.19.0",Onder Sezgin,Claus Ibsen,0,2,2017-02-23 18:18:25+00:00,2017-02-25 19:01:25+00:00,"See SO
http://stackoverflow.com/questions/42385355/apache-camel-spring-webservices-springwebserviceconsumer-does-not-read-answer-fr","githubbot:1487907803:2017-02-24T11:43:23.547+0000:1487907803:2017-02-24T11:43:23.547+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1489

    CAMEL-10888 - Has problem with returning proper response due invalid IN vs OUT code

    handling in exchange pattern

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10888

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1489.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1489
    
----
commit f0bb2f7f861deaa2cb20e1786d7daca0ed4164c2
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-02-24T11:38:04Z

    CAMEL-10888 - handling in exchange pattern

----

githubbot:1488020485:2017-02-25T19:01:25.356+0000:1488020485:2017-02-25T19:01:25.356+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1489
"
0,CAMEL-10887,Bug,Minor,2.18.2,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Mattias Andersson,0,2,2017-02-23 12:51:01+00:00,2017-02-23 16:59:18+00:00,"we are packing camel-core-2.18.2 together using pack200.exe and get the following error:


pack200.exe"" -r camel-core-2.18.2.jar


Exception in thread ""main"" java.io.IOException: null ref
        at com.sun.java.util.jar.pack.NativeUnpack.start(Native Method)
        at com.sun.java.util.jar.pack.NativeUnpack.run(NativeUnpack.java:198)
        at com.sun.java.util.jar.pack.NativeUnpack.run(NativeUnpack.java:247)
        at com.sun.java.util.jar.pack.UnpackerImpl.unpack(UnpackerImpl.java:138)
        at com.sun.java.util.jar.pack.Driver.main(Driver.java:354)


The offending class in the jar-file seems to be: org/apache/camel/com/github/benmanes/caffeine/cache/stats/StatsCounter


Should this class really be part of the jar-file (and other classes from caffeine). We excluded the class when we pack and then it works!! 


There is no problem using camel-core-2.17.x and pack200.exe","davsclaus:1487830828:2017-02-23T14:20:28.825+0000:1487830828:2017-02-23T14:20:28.825+0000:The class is in the JAR
 1760 Sun Jan 22 16:42:44 CET 2017 org/apache/camel/com/github/benmanes/caffeine/cache/stats/StatsCounter.class
mattias1972:1487831350:2017-02-23T14:29:10.266+0000:1487831350:2017-02-23T14:29:10.266+0000:So you are not considering it an error that you cannot use pack200.exe on camel-core-2.18.2.jar? 

Br,
/Mattias
mattias1972:1487832706:2017-02-23T14:51:46.655+0000:1487832706:2017-02-23T14:51:46.655+0000:Just to explain further what I mean. camel-core-2.18.2.jar has several dependencies (sl4j, jaxb-core,jax-impl)  but it's only classes from caffeine that is part of the camel-core-2.18.2 jar-file? 
Is it by design that these classes are included and not a dependency?
davsclaus:1487839171:2017-02-23T16:39:31.670+0000:1487839171:2017-02-23T16:39:31.670+0000:Yes caffine is shaded into the jar as its an internal cache implementation that Camel uses.

The logging apis has always been external dependencies, and ditto about jaxb
mattias1972:1487840298:2017-02-23T16:58:18.164+0000:1487840358:2017-02-23T16:59:18.428+0000:I was just curios to why you but those classes in there, but now I know. So I guess its a big no no to use caffeine in your own camel component. Well anyway this is not a problem for us. Thanks for your fast response. "
0,CAMEL-10886,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-02-23 11:40:16+00:00,2017-02-23 11:47:43+00:00,"The Limits API since version v39.0, but apparently the affects are seen regardless of specifying the version, have been extended to include additional JSON data – per connected application API usage.
This breaks the JSON response deserialization as these are unknown fields.",zregvart:1487821663:2017-02-23T11:47:43.670+0000:1487821663:2017-02-23T11:47:43.670+0000:The responses from Limits API that include per-application limits are now supported.
0,CAMEL-10885,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Claus Ibsen,0,4,2017-02-23 09:16:08+00:00,2019-06-12 05:11:14+00:00,"See nabble
http://camel.465427.n5.nabble.com/Mask-password-using-log-component-tp5794301.html


We can add a mask option to the Log EIP. It would then take the toString to be logged, and then run a series of reg exp to search/replace sensitive information such as password and passphrase.


We need to do this for key=value, xml and json format. So it kinda works on most common formats.


We can then add this in the docs that this is what it can do, so users can use it as-is or not. Only if they have very special cases they would then need to write their own mask method and call as a bean from the log message.


We can also add such functionality to the log component itself, eg <to uri=""log:xxx"">.


So they reuse the same masking algorithm.


See UriSupport which have masking for uris with key=value","igarashitm:1489554734:2017-03-15T13:12:14.367+0000:1489554734:2017-03-15T13:12:14.367+0000:Hi [~davsclaus],
How about adding LoggingStrategy or something at CamelContext level so that it can be configured at once? then add strategy option to the Log EIP/Component to override for each invocation. We can add keyvalue/xml/json mask into DefaultLoggingStrategy so it can be used OOTB. To be backward compatible, LoggingStrategy should be NO-OP by default though.
igarashitm:1489555761:2017-03-15T13:29:21.133+0000:1489555761:2017-03-15T13:29:21.133+0000:Ah It doesn't have to do anything at CamelContext level, Log EIP/Component would just lookup the LoggingStrategy instance from registry if it's not configured at processor level.
davsclaus:1489625243:2017-03-16T08:47:23.779+0000:1489625243:2017-03-16T08:47:23.779+0000:Yeah I suggest to do the interface and get a basic implementation that only works with the Log EIP.
Then we look at the global thing afterwards as it touches upon the log component etc. And maybe other places where we do logging.

As the log component uses a different interface called ExchangeFormatter to log its message. So log EIP and log component are not using any shared logic. 

And then later we can look at find a good spot for some kind of easy switch to turn on mask in logging on|off. And allow to plugin a custom implementation of the search/replace.
igarashitm:1489637923:2017-03-16T12:18:43.958+0000:1489637923:2017-03-16T12:18:43.958+0000:Thanks, that's a good point! I'll work on Log EIP first then.
githubbot:1490229451:2017-03-23T08:37:31.208+0000:1490229451:2017-03-23T08:37:31.208+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1561

    CAMEL-10885 Add mask option to log EIP

    Introduced a StringFormatter interface to plugin a formatter into the Log EIP processor. MaskingStringFormatter is the implementation which masks sensitive information like password and passphrase for key=value, XML and JSON.
    
    Like Log Component looks for a ExchangeFormatter with the name ""logFormatter"" in registry to be used for a default formatter, LogDefinition looks for a ""logEipFormatter"" for the default formatter. It can be overridden by specifying formatterRef option in Log DSL. It also introduced a series of logWithFormatter()/logWithFormatterRef() to be used in Java DSL.
    
    Any feedback would be really appreciated. As those addition of the methods doesn't look really cool, that would be great if you could have better idea...
    
    In the meantime, as it seems there's no log-eip.adoc in the src/main/docs/eips yet, I'll look into how it could be generated and add more commit here once it succeeds.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10885

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1561.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1561
    
----
commit 128a80dc56b5f190385b688cf7f049f2630fb528
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-03-17T08:18:13Z

    CAMEL-10885 Add mask option to log EIP
    
    Introduced a StringFormatter interface to plugin a formatter into the Log EIP processor. MaskingStringFormatter is the implementation which masks sensitive information like password and passphrase for key=value, XML and JSON.

----

githubbot:1490658829:2017-03-28T07:53:49.342+0000:1490658829:2017-03-28T07:53:49.342+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1561

githubbot:1490897586:2017-03-31T02:13:06.311+0000:1490897586:2017-03-31T02:13:06.311+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1586

    CAMEL-10885 A follow-up - masking formatter should be applied in all …

    …process()

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10885-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1586.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1586
    
----
commit ef02fa49951713f9a7e0a9bb88bb67d0f5fa7ec6
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-03-31T00:39:25Z

    CAMEL-10885 A follow-up - masking formatter should be applied in all process()

----

githubbot:1490975645:2017-03-31T23:54:05.865+0000:1490975645:2017-03-31T23:54:05.865+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1586
"
0,CAMEL-10884,Improvement,Trivial,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-02-23 08:59:21+00:00,2017-02-23 11:39:57+00:00,"To help you manage disk space usage of your local Maven repository add a cleanrepo profile that would remove all Camel artifacts from the local Maven repository. To be run with



$ mvn -Pcleanrepo","zregvart:1487815227:2017-02-23T10:00:27.097+0000:1487815227:2017-02-23T10:00:27.097+0000:You can now invoke {{mvn -Prepoclean}} from the source tree root, which will remove all versions and all Camel artefacts, or from a single module subdirectory to remove only artefacts of that module."
0,CAMEL-10883,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Rohan Hart,0,2,2017-02-22 20:24:07+00:00,2017-02-23 18:43:21+00:00,"Adding support for ""continue"" processing in Undertow is trivially done in UndertowConsumer.


However, the processing of delayed payloads could truncate the data - for me this happened reliably if the payload was more than 16KB. This has been replaced by a standard blocking channel which supports the processing expectations of Undertow's HttpServerExchange.","githubbot:1487846601:2017-02-23T18:43:21.373+0000:1487846601:2017-02-23T18:43:21.373+0000:Github user RohanHart closed the pull request at:

    https://github.com/apache/camel/pull/1482
"
0,CAMEL-10882,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-22 20:16:59+00:00,2017-02-22 20:27:37+00:00,"Instead of using a number value, you should use the string value such as put, get, update etc.",
0,CAMEL-10881,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,2,2017-02-22 13:46:15+00:00,2017-03-08 17:00:56+00:00,"We can port the example from Fabric8


https://github.com/fabric8io/fabric8-ipaas/tree/master/cassandra


https://github.com/fabric8-quickstarts/cassandra-client


That would be great to show what we can do in Kubernetes/Openshift platform.","davsclaus:1488962523:2017-03-08T16:42:03.363+0000:1488962523:2017-03-08T16:42:03.363+0000:I think the example should be renamed to camel-example-cassandra-kubernetes
acosentino:1488963656:2017-03-08T17:00:56.909+0000:1488963656:2017-03-08T17:00:56.909+0000:Sure. Naming is not my strenght :-)"
0,CAMEL-10880,Bug,Minor,None,,"
None
",Resolved,Invalid,None,Unassigned,Aleksey Sushko,0,2,2017-02-22 13:36:39+00:00,2017-02-23 09:39:19+00:00,"First CamelContext create endpoint ""direct-vm"".
Second CamelContext create ProducerTemplate to this endpoint.


Several attempts to start and stop the second CamelContext lead to clearing the list of all registered components ""direct-vm"".
See More Forum [Stop component ""direct-vm"" from another OSGI camelContext|http://camel.465427.n5.nabble.com/
Stop-component-direct-vm-from-another-OSGI-camelContext-tp5794194.html].
It shows the call stack. Trigger list cleaning. At the same time all the routes are still in the running.","davsclaus:1487749346:2017-02-22T15:42:26.986+0000:1487749346:2017-02-22T15:42:26.986+0000:Discussed at the user forum as its likely an end user problem
alexey-s:1487804905:2017-02-23T07:08:25.568+0000:1487813421:2017-02-23T09:30:21.093+0000:And where is your decision about the removal of absolutely all components of ""direct-vm""?
Other components live in their OSGi bundle. Now they do not have access.

I did not see the problem. It is clear the list ""direct-vm"". 
How to use camel-scr affects the ""direct-vm""?
davsclaus:1487813959:2017-02-23T09:39:19.747+0000:1487813959:2017-02-23T09:39:19.747+0000:Use the mailing list for getting help"
0,CAMEL-10879,Wish,Major,2.18.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Ralf Steppacher,0,2,2017-02-22 13:06:02+00:00,2017-02-22 13:40:45+00:00,"The current implementation of the org.apache.camel.Exchange is not thread safe. For routes that employ custom, multi-threaded processors with concurrent access to the exchange, it would be beneficial to be able to request a thread-safe exchange implementation.


OR


A factory mechanism that would allow 3rd parties to contribute an implementation of the exchange interface that suits their specific needs. Thread safety or other. (For this, the current implementation of DefaultExchange should be reviewed and optimized for sub-classing.)","davsclaus:1487740063:2017-02-22T13:07:43.561+0000:1487740063:2017-02-22T13:07:43.561+0000:Exchange is not intended for sub-classing hence its final
ralfsteppacher:1487742034:2017-02-22T13:40:34.713+0000:1487742045:2017-02-22T13:40:45.829+0000:So what about the first suggestion? Camel core comes with a thread-safe implementation built in, and the integrator can choose between thread safe or not by means of a route attribute? Or something alike?"
0,CAMEL-10878,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Claus Ibsen,0,2,2017-02-22 12:57:40+00:00,2017-02-23 13:16:52+00:00,"Today HTTP clients do tend to guess if they should use GET or POST etc. And you can override this with a message header. But it would also be good to specify that explicit as an uri parameter,


Today you have to do



from(""direct:start"")
  .setHeader(Exchange.HTTP_METHOD, constant(org.apache.camel.component.http4.HttpMethods.POST))
  .to(""http4://www.google.com"")
  .to(""mock:results"");




But it would be good if you can do



from(""direct:start"")
  .to(""http4://www.google.com?httpMethod=POST"")
  .to(""mock:results"");","davsclaus:1487739730:2017-02-22T13:02:10.505+0000:1487739730:2017-02-22T13:02:10.505+0000:We could then let httpMethod be optional, and let it do as today.

And if its declared then it take precedence, eg a HTTP header cannot override it?
acosentino:1487740413:2017-02-22T13:13:33.589+0000:1487740413:2017-02-22T13:13:33.589+0000:This is something really good as starting point for a novice.
davsclaus:1487740540:2017-02-22T13:15:40.367+0000:1487740540:2017-02-22T13:15:40.367+0000:Ah sadly not really as the http components are tangled together with http-common / jetty / http / http4 / undertow et all so its actually more complex.
acosentino:1487740588:2017-02-22T13:16:28.999+0000:1487740588:2017-02-22T13:16:28.999+0000:Ah yeah, that's true. Maybe it's a moderate one :-)
acosentino:1487740902:2017-02-22T13:21:42.246+0000:1487740902:2017-02-22T13:21:42.246+0000:I'll take a look here and I agree: if httpMethod uri parameter is declared then the header cannot override it.
davsclaus:1487741011:2017-02-22T13:23:31.485+0000:1487741011:2017-02-22T13:23:31.485+0000:Yeah and we should make those httpMethod options as an enum. And we can put that information in its documentation that if its specified then it take precedence and is used."
0,CAMEL-10877,Sub-task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-02-22 10:09:38+00:00,2017-03-23 14:28:08+00:00,No Desc,
0,CAMEL-10876,Sub-task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-02-22 10:09:17+00:00,2017-03-22 16:17:58+00:00,No Desc,
0,CAMEL-10875,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-02-22 10:08:42+00:00,2017-03-23 14:28:22+00:00,No Desc,
0,CAMEL-10874,Bug,Major,2.18.2,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Andrea Cosentino,Nick Houghton,0,4,2017-02-22 05:57:41+00:00,2017-02-22 09:43:38+00:00,"In JettyHttpComponent, ""createHttpClientTransport"" method the number of selectors is derived by:



int selectors = Runtime.getRuntime().availableProcessors() / 2;




If the number of available processors is 1, divided by 2, cast to int is 0 which causes an IllegalArgumentException.


The safe way to do this is via Math.max, like the Jetty code does:



int selector = Math.max(1, Runtime.getRuntime().availableProcessors() / 2);




As per the code this is only exercised when maxThreads is not null, otherwise the default constructor is called and selectors are created properly.","davsclaus:1487721038:2017-02-22T07:50:38.613+0000:1487721038:2017-02-22T07:50:38.613+0000:Thanks Nick, I wonder if you want to try to provide a fix as a github PR
http://camel.apache.org/contributing

https://github.com/apache/camel/
acosentino:1487721103:2017-02-22T07:51:43.565+0000:1487721103:2017-02-22T07:51:43.565+0000:I'll wait for your PR some days then :-)
githubbot:1487725693:2017-02-22T09:08:13.077+0000:1487725693:2017-02-22T09:08:13.077+0000:GitHub user nhoughto opened a pull request:

    https://github.com/apache/camel/pull/1483

    CAMEL-10874: Ensure Jetty client selector count is a minimum of 1.

    As per https://issues.apache.org/jira/browse/CAMEL-10874

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nhoughto/camel defect-CAMEL-10874

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1483.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1483
    
----
commit 7586bfe23b202e1a85ab1e04ec3bae206b595472
Author: Nick Houghton <nhoughto@gmail.com>
Date:   2017-02-22T08:59:00Z

    CAMEL-10874 - Ensure Jetty client selector count is a minimum of 1.

----

acosentino:1487727756:2017-02-22T09:42:36.509+0000:1487727756:2017-02-22T09:42:36.509+0000:In 2.17.x I don't see selectors computed in that way.
githubbot:1487727818:2017-02-22T09:43:38.275+0000:1487727818:2017-02-22T09:43:38.275+0000:Github user nhoughto closed the pull request at:

    https://github.com/apache/camel/pull/1483
"
0,CAMEL-10873,Bug,Major,"2.18.2, 2.19.0","2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Daniele Fognini,0,2,2017-02-21 16:17:41+00:00,2017-02-24 13:20:19+00:00,"SJMS Consumers attempt rollback of the JMS Session if an exception is thrown along the Camel route. The rollback is attempted where the exception occurs and not on the original synchronous pipeline.


For example with ActiveMQ and the thread component (see attached unit test)



AtomicInteger counter = new AtomicInteger();

from(destination + ""?acknowledgementMode=SESSION_TRANSACTED&transacted=true"")
   .threads()
   .process(exchange -> {
      if (counter.incrementAndGet() < TRANSACTION_REDELIVERY_COUNT) {
          throw new IllegalArgumentException();
      }
    })
    .to(""mock:async.exception"")




`Session.rollback()` must be called by the ActiveMQ Thread, but is attempted by the asynchronous Camel thread, resulting in a dead-lock:



""Camel (camel-1) thread #0 - Threads"" Id=26 BLOCKED on java.lang.Object@4b9df8a owned by ""ActiveMQ Session Task-1"" Id=22
    org.apache.activemq.ActiveMQMessageConsumer.rollback(ActiveMQMessageConsumer.java:1212)
    org.apache.activemq.ActiveMQMessageConsumer$5.afterRollback(ActiveMQMessageConsumer.java:1091)
    org.apache.activemq.TransactionContext.afterRollback(TransactionContext.java:162)
    org.apache.activemq.TransactionContext.rollback(TransactionContext.java:287)
    org.apache.activemq.ActiveMQSession.rollback(ActiveMQSession.java:603)
    org.apache.camel.component.sjms.tx.SessionTransactionSynchronization.onFailure(SessionTransactionSynchronization.java:54)
    org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:101)
    org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:234)
    org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
    org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:675)
    org.apache.camel.processor.CamelInternalProcessor$UnitOfWorkProcessorAdvice.after(CamelInternalProcessor.java:630)
    org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:247)
    org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:258)
    org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:553)
    org.apache.camel.processor.Pipeline$1.done(Pipeline.java:147)
    org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:87)
    java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
    java.util.concurrent.FutureTask.run(FutureTask.java:266)
    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    java.lang.Thread.run(Thread.java:745)

""ActiveMQ Session Task-1"" Id=22 WAITING on java.util.concurrent.CountDownLatch$Sync@6955cb39
    sun.misc.Unsafe.park(Native Method)
    java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
    java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
    java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)
    java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)
    java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)
    org.apache.camel.impl.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:75)
    org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:105)
    org.apache.camel.component.sjms.consumer.InOnlyMessageHandler.handleMessage(InOnlyMessageHandler.java:65)
    org.apache.camel.component.sjms.consumer.AbstractMessageHandler.onMessage(AbstractMessageHandler.java:89)
    org.apache.activemq.ActiveMQMessageConsumer.dispatch(ActiveMQMessageConsumer.java:1401)
    org.apache.activemq.ActiveMQSessionExecutor.dispatch(ActiveMQSessionExecutor.java:131)
    org.apache.activemq.ActiveMQSessionExecutor.iterate(ActiveMQSessionExecutor.java:202)
    org.apache.activemq.thread.PooledTaskRunner.runTask(PooledTaskRunner.java:133)
    org.apache.activemq.thread.PooledTaskRunner$1.run(PooledTaskRunner.java:48)
    java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
    java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
    java.lang.Thread.run(Thread.java:745)",davsclaus:1487913619:2017-02-24T13:20:19.850+0000:1487913619:2017-02-24T13:20:19.850+0000:Thanks for the unit test
0,CAMEL-10872,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Luca Burgazzoli,0,1,2017-02-21 14:10:30+00:00,2017-03-14 06:01:09+00:00,No Desc,
0,CAMEL-10871,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Antoine DESSAIGNE,0,3,2017-02-21 13:54:04+00:00,2017-02-21 16:52:28+00:00,"When you consume messages from Kafka, you receive the records by batches and then you bulk-acknowledge the records.


In some situation it can be useful to retrieve whether or not the messages your receiving is the last one in the batch. It's especially useful in order to aggregate messages in order to insert them in batch in ElasticSearch.","githubbot:1487656606:2017-02-21T13:56:46.756+0000:1487656606:2017-02-21T13:56:46.756+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1480

    CAMEL-10871 - When consuming from Kafka indicates whether or not the record is the last one in the batch

    (see JIRA ticket for more information)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-10871

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1480.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1480
    
----
commit bc2b41ccca9f0257006ff87135467be108f48a2d
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-02-21T13:55:45Z

    CAMEL-10871 - When consuming from Kafka indicates whether or not the record is the last one in the batch

----

davsclaus:1487664590:2017-02-21T16:09:50.205+0000:1487664590:2017-02-21T16:09:50.205+0000:Thanks for the PR
antoine.dessaigne:1487667128:2017-02-21T16:52:08.549+0000:1487667128:2017-02-21T16:52:08.549+0000:Thanks for merging it !
githubbot:1487667148:2017-02-21T16:52:28.248+0000:1487667148:2017-02-21T16:52:28.248+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1480
"
0,CAMEL-10870,Improvement,Major,None,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Antoine DESSAIGNE,0,3,2017-02-21 11:56:59+00:00,2017-02-21 13:32:43+00:00,"When you use a vendor-specific JDBC type in camel-sql you need to use its value instead of its label.


For instance, if you use oracle if you want to call a stored procedure that returns a FIXED_CHAR type you need to write:



<to uri=""sql-stored:PROCEDURE1(OUT 999 result)?dataSource=oracle""/>




All values are defined here: https://docs.oracle.com/cd/E16338_01/appdev.112/e13995/constant-values.html#oracle_jdbc_OracleTypes_ARRAY


You can notice that there are negative values in this list (CURSOR for instance). Unfortunately the negative values aren't handled by the parser which leads to the following exception



org.apache.camel.component.sql.stored.template.ast.ParseRuntimeException: Field -10 not found from java.procedureName.Types
	at org.apache.camel.component.sql.stored.template.ast.ParseHelper.parseSqlType(ParseHelper.java:41)
	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.OutParameter(SSPTParser.java:92)
	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.Parameter(SSPTParser.java:60)
	at org.apache.camel.component.sql.stored.template.generated.SSPTParser.parse(SSPTParser.java:23)
	at org.apache.camel.component.sql.stored.template.TemplateParser.parseTemplate(TemplateParser.java:31)
	at org.apache.camel.component.sql.stored.CallableStatementWrapperFactory.getTemplateStoredProcedure(CallableStatementWrapperFactory.java:71)
	at org.apache.camel.component.sql.stored.CallableStatementWrapper.populateStatement(CallableStatementWrapper.java:104)
	at org.apache.camel.component.sql.stored.SqlStoredProducer$1.execute(SqlStoredProducer.java:69)
	at org.apache.camel.component.sql.stored.CallableStatementWrapper.call(CallableStatementWrapper.java:55)
	at org.apache.camel.component.sql.stored.SqlStoredProducer.process(SqlStoredProducer.java:43)","githubbot:1487649617:2017-02-21T12:00:17.460+0000:1487649617:2017-02-21T12:00:17.460+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1479

    CAMEL-10870 - Allow to use negative vendor-specific JDBC types in camel-sql stored procedure

    (see JIRA ticket for more information)
    
    Note: the `SSPTParserTokenManager.java` file is automatically updated when modifying the template, I have no control over this file.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-10870

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1479.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1479
    
----
commit c3a3f8eae7ff05fba80d3c24c35bb054c2d904e5
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-02-21T11:58:26Z

    CAMEL-10870 - Allow to use negative vendor-specific JDBC types in camel-sql stored procedure

----

davsclaus:1487655013:2017-02-21T13:30:13.894+0000:1487655013:2017-02-21T13:30:13.894+0000:Thanks for the PR
antoine.dessaigne:1487655142:2017-02-21T13:32:22.346+0000:1487655142:2017-02-21T13:32:22.346+0000:Thanks [~davsclaus] for merging it !
githubbot:1487655163:2017-02-21T13:32:43.544+0000:1487655163:2017-02-21T13:32:43.544+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1479
"
0,CAMEL-10869,Improvement,Minor,2.18.2,"2.17.6, 2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.3, 2.19.0",Claus Ibsen,Mikael Andersson Wigander,0,2,2017-02-21 10:45:50+00:00,2017-02-24 12:47:23+00:00,"When TRACE level is on using a ftp component the password is displayed in plain text.


{{2017-02-21 11:26:28:361 o.a.c.c.f.remote.RemoteFileProducer DEBUG - Not already connected/logged in. Connecting to: ftp://192.168.170.33/mgr/out?allowNullBody=false&consumer.bridgeErrorHandler=true&disconnect=true&password=xxxxxx&pollStrategy=%23defaultPollStrategy&throwExceptionOnConnectFailed=true&username=mgr
2017-02-21 11:26:28:361 o.a.c.c.file.remote.FtpOperations TRACE - Connecting using FTPClient: org.apache.commons.net.ftp.FTPClient@456abb66
2017-02-21 11:26:28:361 o.a.c.c.file.remote.FtpOperations TRACE - Connecting to ftp://mgr@192.168.170.33:21 using connection timeout: 10000
2017-02-21 11:26:28:377 o.a.c.c.file.remote.FtpOperations TRACE - Using SoTimeout=300000
2017-02-21 11:26:28:377 o.a.c.c.file.remote.FtpOperations TRACE - Attempting to login user: mgr using password: gsxr1100
2017-02-21 11:26:28:845 o.a.c.c.file.remote.FtpOperations TRACE - User mgr logged in: true}}","davsclaus:1487645294:2017-02-21T10:48:14.745+0000:1487645294:2017-02-21T10:48:14.745+0000:That is by design. Any DEBUG or TRACE logging can log such details. So run with INFO in production.
hakuseki:1487645482:2017-02-21T10:51:22.750+0000:1487645482:2017-02-21T10:51:22.750+0000:OK, but for a configuration where you have properties file with accounts and using jasypt for encrypting passwords it would be easy to change the logging level to TRACE and rerun and then reveal the password…

davsclaus:1487824613:2017-02-23T12:36:53.968+0000:1487824613:2017-02-23T12:36:53.968+0000:If you want the password masked you are welcome to provide a github PR with a fix
https://github.com/apache/camel/
davsclaus:1487911643:2017-02-24T12:47:23.960+0000:1487911643:2017-02-24T12:47:23.960+0000:Now the password is masked"
0,CAMEL-10868,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-02-21 10:41:15+00:00,2017-02-22 09:11:54+00:00,No Desc,
0,CAMEL-10867,Sub-task,Minor,None,,"
None
",Resolved,Fixed,None,John Poth,John Poth,0,1,2017-02-21 10:19:36+00:00,2017-03-06 09:21:41+00:00,"Current workaround 



export MAVEN_OPTS=""--add-exports=java.xml/com.sun.org.apache.xml.internal.resolver.tools=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xml.internal.resolver=ALL-UNNAMED --add-modules java.activation""




Stacktrace:



[WARNING] Error injecting: org.jvnet.mjiip.v_2.XJC2Mojo
java.lang.IllegalAccessError: superclass access check failed: class org.jvnet.jaxb2.maven2.resolver.tools.MavenCatalogResolver (in unnamed module @0x1b5a1d85) cannot access class com.sun.org.apache.xml.internal.resolver.tools.CatalogResolver (in module java.xml) because module java.xml does not export com.sun.org.apache.xml.internal.resolver.tools to unnamed module @0x1b5a1d85
	at java.base/java.lang.ClassLoader.defineClass1(Native Method)
	at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:977)
	at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:172)
	at java.base/java.net.URLClassLoader.defineClass(URLClassLoader.java:543)
	at java.base/java.net.URLClassLoader.access$100(URLClassLoader.java:83)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:451)
	at java.base/java.net.URLClassLoader$1.run(URLClassLoader.java:445)
	at java.base/java.security.AccessController.doPrivileged(Native Method)
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:444)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClassFromSelf(ClassRealm.java:401)
	at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:42)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)
	at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)
	at java.base/java.lang.Class.getDeclaredConstructors0(Native Method)
	at java.base/java.lang.Class.privateGetDeclaredConstructors(Class.java:3053)
	at java.base/java.lang.Class.getDeclaredConstructors(Class.java:2315)
	at com.google.inject.spi.InjectionPoint.forConstructorOf(InjectionPoint.java:245)
	at com.google.inject.internal.ConstructorBindingImpl.create(ConstructorBindingImpl.java:99)
	at com.google.inject.internal.InjectorImpl.createUninitializedBinding(InjectorImpl.java:658)
	at com.google.inject.internal.InjectorImpl.createJustInTimeBinding(InjectorImpl.java:881)
	at com.google.inject.internal.InjectorImpl.createJustInTimeBindingRecursive(InjectorImpl.java:804)
	at com.google.inject.internal.InjectorImpl.getJustInTimeBinding(InjectorImpl.java:282)
	at com.google.inject.internal.InjectorImpl.getBindingOrThrow(InjectorImpl.java:214)
	at com.google.inject.internal.InjectorImpl.getProviderOrThrow(InjectorImpl.java:1005)
	at com.google.inject.internal.InjectorImpl.getProvider(InjectorImpl.java:1037)
	at com.google.inject.internal.InjectorImpl.getProvider(InjectorImpl.java:1000)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1050)
	at org.eclipse.sisu.space.AbstractDeferredClass.get(AbstractDeferredClass.java:48)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory$1.call(ProviderInternalFactory.java:65)
	at com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:115)
	at org.eclipse.sisu.bean.BeanScheduler$Activator.onProvision(BeanScheduler.java:176)
	at com.google.inject.internal.ProvisionListenerStackCallback$Provision.provision(ProvisionListenerStackCallback.java:126)
	at com.google.inject.internal.ProvisionListenerStackCallback.provision(ProvisionListenerStackCallback.java:68)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:63)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1015)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1091)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1011)
	at org.eclipse.sisu.inject.Guice4$1.get(Guice4.java:162)
	at org.eclipse.sisu.inject.LazyBeanEntry.getValue(LazyBeanEntry.java:81)
	at org.eclipse.sisu.plexus.LazyPlexusBean.getValue(LazyPlexusBean.java:51)
	at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:263)
	at org.codehaus.plexus.DefaultPlexusContainer.lookup(DefaultPlexusContainer.java:255)
	at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getConfiguredMojo(DefaultMavenPluginManager.java:517)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:121)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:543)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)","jpoth:1487653532:2017-02-21T13:05:32.646+0000:1487653532:2017-02-21T13:05:32.646+0000:Might be worth switching to CXF xjc plugin to avoid having to set MAVEN_OPTS before building.
jpoth:1487757478:2017-02-22T17:57:58.160+0000:1487757478:2017-02-22T17:57:58.160+0000:Issue created with maven-jaxb2-plugin https://github.com/highsource/maven-jaxb2-plugin/issues/114"
0,CAMEL-10866,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-21 09:58:31+00:00,2017-02-22 10:12:34+00:00,A bunch of camel-catalog-xxx modules are in catalog-xxx folders. We should rename them to match their maven artifact id so they are consistent like the other folders we have.,
0,CAMEL-10865,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-21 08:44:04+00:00,2017-02-21 13:16:24+00:00,So we can also have a repository/catalog of Camel connectors,
0,CAMEL-10864,Sub-task,Minor,None,,"
None
",Resolved,Fixed,None,John Poth,John Poth,0,1,2017-02-20 11:43:24+00:00,2017-03-06 09:21:36+00:00,"See https://github.com/asciidoctor/asciidoctorj/issues/515, might be more related to JRuby than to asciidoctor.


As a workaround set



export MAVEN_OPTS=""--add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.util.regex=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED""",
0,CAMEL-10863,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,None,John Poth,John Poth,0,1,2017-02-20 10:28:52+00:00,2017-03-06 09:21:43+00:00,"Maven WAR plugin fails on Java 9 because of a dependency on XStream.


XStream issue: https://github.com/x-stream/xstream/issues/74
War plugin issue: https://issues.apache.org/jira/browse/MWAR-397


Work around can be to set 



 export MAVEN_OPTS=""--add-opens java.base/java.util=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED""




Modules that fail are:



[INFO] Camel :: Example :: ActiveMQ :: Tomcat                      
[INFO] Camel :: Example :: CDI :: REST :: Servlet                   
[INFO] Camel :: Example :: CXF :: Tomcat                            
[INFO] Camel :: Example :: Report Incident                          
[INFO] Camel :: Example :: Restlet :: JDBC                          
[INFO] Camel :: Example :: Servlet REST Blueprint                   
[INFO] Camel :: Example :: Servlet Tomcat                           
[INFO] Camel :: Example :: Servlet Tomcat without Spring            
[INFO] Camel :: Example :: Spring :: Web Services                   
[INFO] Camel :: Example :: Spring :: Security                       
[INFO] Camel :: Example :: Swagger :: (XML)",
0,CAMEL-10862,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Claus Ibsen,0,1,2017-02-19 19:02:48+00:00,2017-02-20 09:24:12+00:00,It uses 0.0.0.0:8500 by default for the client to lookup the consul agent/server. We should make it easier to configurable on the route policy.,davsclaus:1487502278:2017-02-19T19:04:38.024+0000:1487502278:2017-02-19T19:04:38.024+0000:And mind this should also be configurable from XML DSL so ideally just simple as simple as getter/setter on the route policy itself
0,CAMEL-10861,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-19 11:37:20+00:00,2017-02-19 12:00:40+00:00,We can make the route policy JMX managed so people can from JMX see if its master or slave etc.,
0,CAMEL-10860,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-19 11:35:51+00:00,2017-02-19 11:47:58+00:00,It uses a max long value. Instead we should have a value of a sensitive value such as 10 seconds or something.,
0,CAMEL-10859,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Onder Sezgin,Claus Ibsen,0,2,2017-02-18 08:37:48+00:00,2017-02-24 12:58:47+00:00,"See nabble
http://camel.465427.n5.nabble.com/Error-encrypting-value-using-camel-jasypt-2-18-1-jar-td5794000.html","githubbot:1487912327:2017-02-24T12:58:47.560+0000:1487912327:2017-02-24T12:58:47.560+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1487
"
0,CAMEL-10858,Improvement,Minor,2.19.0,None,"
None
",Closed,Fixed,2.19.0,Claus Ibsen,Lionel Palacin,0,3,2017-02-17 20:46:05+00:00,2017-02-19 18:53:35+00:00,"Since 7.4.0, Bonita Engine enables CSRF protection by default. Therefore the client has to deal with providing the right token in the request headers. 
This improvement make sure that request header propagate the right information to work whether or not CSRF is enabled on Bonita side.","lionel.palacin@gmail.com:1487335589:2017-02-17T20:46:29.082+0000:1487335589:2017-02-17T20:46:29.082+0000:I'd like to add the reference to camel-bonita but the component is not present in the list. 
githubbot:1487335676:2017-02-17T20:47:56.418+0000:1487335676:2017-02-17T20:47:56.418+0000:GitHub user lio-p opened a pull request:

    https://github.com/apache/camel/pull/1475

    CAMEL-10858: Add CSRF support

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lio-p/camel CAMEL-10858--Add-CSRF-Support

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1475.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1475
    
----
commit f2907346acfa5c69d6779d37eed00783dfb3c978
Author: lionel-bonitasoft <lionel.palacin@bonitasoft.com>
Date:   2017-02-17T20:47:07Z

    Add CSRF support

----

davsclaus:1487381795:2017-02-18T09:36:35.882+0000:1487381795:2017-02-18T09:36:35.882+0000:Thanks for the PR
githubbot:1487501615:2017-02-19T18:53:35.806+0000:1487501615:2017-02-19T18:53:35.806+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1475
"
0,CAMEL-10857,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,1,2017-02-17 18:01:08+00:00,2017-03-07 20:27:45+00:00,The integration tests in Salesforce require manual customization of Salesforce instance they're run against. The tests should prepare this instance with everything that is needed to make the tests easier to run and maintain.,"zregvart:1488889478:2017-03-07T20:24:38.057+0000:1488889478:2017-03-07T20:24:38.057+0000:This should change the way Salesforce environment is setup for integration tests, previously one would need to manually configure the instance while now it should be done automatically with the help of _Salesforce Migration Tool_.

Definitions for currently used packaged applications, approval process, classes, test documents, layouts, field customizations and custom objects, permission sets, profiles, test reports and tabs should be included and maintained over time."
0,CAMEL-10856,Bug,Major,2.18.2,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Gary Brown,0,1,2017-02-17 10:51:08+00:00,2017-02-20 09:31:38+00:00,"When the ZipkinTracer is used from XML, the tracer's doStart() method is not called - resulting in the EventNotiifer not being registered and therefore not detecting when the exchange sends a message.


The same issue affects the opentracing component that is currently in development.",objectiser:1487299932:2017-02-17T10:52:12.341+0000:1487299932:2017-02-17T10:52:12.341+0000:This test can reproduce the problem by adding a second route (with e.g. direct call).
0,CAMEL-10855,Bug,Major,None,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2017-02-17 10:10:08+00:00,2017-02-17 10:53:32+00:00,"See SO
http://stackoverflow.com/questions/42000191/camel-advicewith-behaves-differently-when-changing-the-order-of-weave-statements/42288144#42288144",
0,CAMEL-10854,Task,Minor,None,,"
None
",Resolved,Fixed,None,Claus Ibsen,Frank Wein,0,2,2017-02-17 09:55:49+00:00,2017-02-17 11:07:42+00:00,"The website at http://camel.apache.org/walk-through-an-example.html contains a macro error:
[...] used to connect to ActiveMQ
Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20",davsclaus:1487296852:2017-02-17T10:00:52.354+0000:1487296852:2017-02-17T10:00:52.354+0000:The old clunky website is being replaced with a newer in the future. We are in the process of migrating the docs (but it takes time).
0,CAMEL-10853,Improvement,Minor,2.18.1,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Christian Ribeaud,0,3,2017-02-17 09:34:09+00:00,2017-02-18 09:33:21+00:00,"In Camel org.apache.commons.csv.CSVFormat is indirectly configured via org.apache.camel.model.dataformat.CsvDataFormat. Although it is possible to tell CSVFormat to trim leading and trailing blanks via CSVFormat.withTrim, this property can NOT be set in CsvDataFormat.


Workaround


As a workaround, one could do the following:



CsvDataFormat dataFormat = new CsvDataFormat(""\t"") {

            @Override
            protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {
                // This is how we force the engine to trim the values
                org.apache.camel.dataformat.csv.CsvDataFormat csvDataFormat = (org.apache.camel.dataformat.csv.CsvDataFormat) dataFormat;
                CSVFormat format = csvDataFormat.getFormat();
                csvDataFormat.setFormat(format.withTrim());
                super.configureDataFormat(csvDataFormat, camelContext);
            }
        };




Question


Are they other properties which should be considered?","davsclaus:1487300891:2017-02-17T11:08:11.792+0000:1487300891:2017-02-17T11:08:11.792+0000:Yeah try to take a look and see if you can spot other options
christianr:1487312608:2017-02-17T14:23:28.554+0000:1487312608:2017-02-17T14:23:28.554+0000:Identified following candidates: _ignoreHeaderCase_, _trim_ and _trailingDelimiter_. I will make a pull request.
githubbot:1487318624:2017-02-17T16:03:44.069+0000:1487318624:2017-02-17T16:03:44.069+0000:GitHub user ribeaud opened a pull request:

    https://github.com/apache/camel/pull/1473

    [CAMEL-10853] Support 'ignoreHeaderCase', 'trim' and 'trailingDelimiter'

    The next time, I will need your formatter. I spent quite some time fixing **Checkstyle** errors...
    And I still did not fix the EOL issue. But anyway, you're probably to review, reformat the code anyway. Cheers, christian.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ribeaud/camel feature/CAMEL-10853

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1473.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1473
    
----
commit 9947591d1b6e1373b6248d1493ceebed2ef92dff
Author: Christian Ribeaud <christian@ribeaud.ch>
Date:   2017-02-17T15:58:21Z

    [CAMEL-10853] Support properties 'ignoreHeaderCase', 'trim' and
    'trailingDelimiter'.

----

githubbot:1487322156:2017-02-17T17:02:36.385+0000:1487322156:2017-02-17T17:02:36.385+0000:Github user ribeaud closed the pull request at:

    https://github.com/apache/camel/pull/1473

githubbot:1487325657:2017-02-17T18:00:57.205+0000:1487325657:2017-02-17T18:00:57.205+0000:GitHub user ribeaud opened a pull request:

    https://github.com/apache/camel/pull/1474

    [CAMEL-10853] Add support for some more properties

    OK, now it looks better...

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ribeaud/camel feature/CAMEL-10853

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1474.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1474
    
----
commit 2d425d3545399148421ada31abc50fbc082e64ba
Author: Christian Ribeaud <christian@ribeaud.ch>
Date:   2017-02-17T17:55:18Z

    [CAMEL-10853] Add support for some more properties

----

githubbot:1487381598:2017-02-18T09:33:18.673+0000:1487381598:2017-02-18T09:33:18.673+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1474
"
0,CAMEL-10852,Bug,Major,None,None,"
None
",Resolved,Invalid,None,Unassigned,Sarath Kumar Navarajan,0,2,2017-02-17 05:30:36+00:00,2017-02-23 12:37:57+00:00,"i have a front end UI which calls a rest service in camel, i have a request in which am trying to explicitly set the content type as image/jpeg in the Camel exchange.getOut().setHeader(""Content-Type"",""image/jpeg"");
and setting the byte array in exchange.getOut().setBody(byte[]), this should actually get the file to be previewed in the browser but JAXRSOutInterceptor changes the content type to text/html thereby displaying the byte[] as string on the browser. kindly guide me through if am wrong somewhere or if i have missed out anything to be added.","nsarathk:1487294550:2017-02-17T09:22:30.039+0000:1487294550:2017-02-17T09:22:30.039+0000:Am using Camel 2.16.1, 
davsclaus:1487824677:2017-02-23T12:37:57.807+0000:1487824677:2017-02-23T12:37:57.807+0000:Please use the user forum or user mailing list first to get help"
0,CAMEL-10851,Improvement,Minor,2.18.2,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Tristan Hill,0,2,2017-02-16 18:17:22+00:00,2017-02-20 09:09:27+00:00,"It seems that the purpose of getBody(Class<T> type) is to convert the message body to the requested type.  When this is used on a  getUnitOfWork().getOriginalInMessage() message though the conversion doesn't happen.  Debugging indicates this is because the message's exchange variable is null.


For example requesting a string type when using a File queue fails as a conversion from GenericFile to String is required.


It seems like the exchange should be set/copied when the originalInMessage is created (in the DefaultUnitOfWork constructor) so this functionality can work.


Reference to mailing list dicussion: http://mail-archives.apache.org/mod_mbox/camel-dev/201702.mbox/ajax/%3Ce8b612e0-60ab-1a51-b024-87b48e024c51%40me.uk.eu.org%3E",davsclaus:1487301554:2017-02-17T11:19:14.094+0000:1487301554:2017-02-17T11:19:14.094+0000:You can convert it yourself by calling getBody and then convert afterwards using camel type converters
0,CAMEL-10850,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-16 18:16:29+00:00,2017-02-17 17:00:24+00:00,"Like we do for components and others.


In this
org.apache.camel.maven.packaging.ReadmeComponentMojo


We should add for EIPs which do this in camel-core/src/main/docs/eips and do for each EIP we have",
0,CAMEL-10849,Bug,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Luca Burgazzoli,0,4,2017-02-16 14:27:59+00:00,2019-01-08 19:03:52+00:00,"If I creates two salesforce consumers, I can't set different options per channel as the client is configured on component level so i.e. you can't set a per channel replay id as only the first one is taken into account:



    from('salesforce:comments-1?updateTopic=true&sObjectQuery=SELECT Id, CommentId__c FROM Comment_Event__c')
        .to(""log:salesforce-comments?level=INFO&showHeaders=false&multiline=false"")
    from('salesforce:comments-2?updateTopic=true&sObjectQuery=SELECT Id FROM Case')
        .to(""log:salesforce-cases?level=INFO&showHeaders=false&multiline=false"")","zregvart:1487299599:2017-02-17T10:46:39.439+0000:1487300164:2017-02-17T10:56:04.554+0000:Its not all that well documented, but you can set per channel replay ids via the {{initialReplayIdMap}} property, it accepts a map keyed by channel name for which replay id is the value. It is somewhat odd that the CometD listeners are on per-component level not per-endpoint level, the original reasoning behind this could be optimization -- so to have only one connection to Salesforce (per component), and multiple subscribers (per consumer endpoint).

Perhaps having a endpoint property {{replayId}} that would override any values for the channel in {{initialReplayIdMap}} or value in {{defaultReplayId}} would be the solution?

Wonder if [~sirlatrom] or [~dhirajsb] could chime in?

lb:1487300360:2017-02-17T10:59:20.834+0000:1487300360:2017-02-17T10:59:20.834+0000:I did set the replay id per channel using the map but it is not taken into account as once the SubscriptionHelper get initialized, the initialReplayIdMap is not more taken into account
sirlatrom:1487586579:2017-02-20T18:29:39.425+0000:1487586579:2017-02-20T18:29:39.425+0000:I believe it has to do with the session being bound to the component through its configuration, and the CometD listeners getting their messages over an authenticated session.
zregvart:1487737058:2017-02-22T12:17:38.296+0000:1487737058:2017-02-22T12:17:38.296+0000:[~lb] I've committed a fix for this. The CometD client is still tied to the component, I think this makes sense as the number of clients connected to Salesforce is limited (per edition you run). I've change the way the replay support is configured and those properties (`defaultReplayId` and `initialReplayIdMap`) set on endpoint configuration should be taken into account, and preferred over the configuration on the component.

With the CometD client tied to component, this means that you cannot configure per-endpoint HTTP client, I don't see it as a great disadvantage, but it could be addressed by creating a new CometD client if the HTTP client on the component and on the endpoint differ.

Can you give it a spin and close this if it's now OK for you?
lb:1487812772:2017-02-23T09:19:32.812+0000:1487812772:2017-02-23T09:19:32.812+0000:A few notes:
- it would be nice to keep logging the replay id used for a channel
- on endpoint level, it could make more sense to have also replayId instead of defaultReplayId/defaultReplayIdMap as most of the time you'll end up writing {{from(""salesforce:comments-1?defaultReplayId=-1&..."")}} and defaultReplayId is a little misleading, {{from(""salesforce:comments-1?replayId=-1&..."")}} is much clean IMHO.
sirlatrom:1487825411:2017-02-23T12:50:11.464+0000:1487825493:2017-02-23T12:51:33.063+0000:[~lb] I agree about logging; though it is possible to see already it if you enable debug logging level for the CometD client, as it is part of the subscribe message payload, and you could log it in your consuming route by reading the corresponding exchange header.

As per the current naming, it is to signify that unless you specify initial {{replayId}} values per channel using the {{initialReplayIdMap}}, the default specified by {{defaultReplayId}} should be used.

Use case:
Keep 3 instances of a service running that subscribe to the same topic. They use Idempotent Consumer (http://camel.apache.org/idempotent-consumer.html) to only process each message once, but at the end of each route, the replayId from the message is stored, e.g. in Redis with a 24h TTL (since replayIds older than that are invalid anyway). When the application starts up, the initial replayIds are read from Redis and populated into the {{initialReplayIdMap}}. Topics for which no replayId is stored (or it expired per TTL) will then have {{defaultReplayId}} instead.

Does that make sense?
lb:1487836768:2017-02-23T15:59:28.058+0000:1487836768:2017-02-23T15:59:28.058+0000:Yes it make sense but what I meant was that when you want to set a replyId on the uri string, thus bound to a specific channel, having something named initialReplayIdMap or defaultReplayId does not make much sense whereas they are perfectly meaningful on component level.
sirlatrom:1487843343:2017-02-23T17:49:03.000+0000:1487843343:2017-02-23T17:49:03.000+0000:[~lb] I agree completely. So at the endpoint level, there would only be a single replayId URI parameter, {{replayId}}, which would override any default or initial replay IDs. This would only be useful if you're not actually using the replay functionality, or if you always want to play back the past 24 hours by setting the value to {{-2}}. Am I missing any other obvious use cases?
dhirajsb:1487849805:2017-02-23T19:36:45.210+0000:1487849805:2017-02-23T19:36:45.210+0000:IIRC, the way that field was set was at the client level, which is wrong, it should really be just added to a map that the SF extension should then use. Or it could be an endpoint property, which I think you are making it now. That should be the only change required, since the SF extension does use a map from what I recall. 
zregvart:1487900752:2017-02-24T09:45:52.363+0000:1487900752:2017-02-24T09:45:52.363+0000:[~lb] [~sirlatrom] [~dhirajsb] Thank you for the feedback, I've added two additional (small) changes:
 - logging at INFO level on subscription noting the replay ID sent (if sent)
 - {{replayId}} Endpoint URI option that has preference over all other {{*replayId}} options

Do you think we can resolve this now?
lb:1487913661:2017-02-24T13:21:01.641+0000:1487913661:2017-02-24T13:21:01.641+0000:[~zregvart] thx so much
hnguyen15:1546945432:2019-01-08T19:03:52.516+0000:1546945432:2019-01-08T19:03:52.516+0000:[~zregvart] [~lb] In version 2.23.0 when I set initialReplayIdMap to a value when the route starts everything behave like normal and I am fine with the replays. I'm getting an issue every time the route re-subscribes it tries to replay from the map again. The initialReplayIdMap needs to zero out (don't see any code that modifies the initialReplayIdMap) so we can default to -1 so we can wait for new replay ids. Eventually if i leave the route on for over 24 hours it eventually breaks because the replay id 24h time to live.

 

My app keeps track of the last replay id that happens so if the app is down at startup it will replay from the last replay id and listens for new ones.

 

Thanks for any help. "
0,CAMEL-10848,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Luca Burgazzoli,0,2,2017-02-16 14:24:20+00:00,2017-02-17 14:30:00+00:00,"There is a little bit of mismatch between the channel name used in the endpoint and the channel name one has to set in the initialReplayIdMap:



endpoint require a simple name like ""my-channel""
initialReplayIdMap requires a full path like ""/topic/my-channel""



IMHO, initialReplayIdMap keys should match endpoint channel name.","zregvart:1487313000:2017-02-17T14:30:00.495+0000:1487313000:2017-02-17T14:30:00.495+0000:You can now use {{""/topic/<topic name>""}} and just {{""<topic name>""}} when specifying {{initialReplayIdMap}}."
0,CAMEL-10847,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,2,2017-02-16 11:20:09+00:00,2017-02-16 20:47:27+00:00,"We should allow to specify the display name for options in case you dont want a compute derived name.


We should add that to @UriParam @UriPath and @Metadata 


And then fallback to use a humanize computed value, eg loginConfig -> Login Config. queueSize -> Queue Size and so on.",
0,CAMEL-10846,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-02-16 10:50:24+00:00,2017-03-27 17:31:34+00:00,"When Salesforce API returns 404 status indicating that an SObject could not be found using one of the operations for retrieving the SObjects, it should throw an more descriptive SalesforceException, for instance NoSuchSObjectException.
Also add an option that would return null in case of 404 status instead of throwing an exception, with the default to throw the exception.","lb:1487213605:2017-02-16T10:53:25.996+0000:1487213605:2017-02-16T10:53:25.996+0000:The http code should also be set in an header, maybe SalesforceApiReturnCode
zregvart:1490607094:2017-03-27T17:31:34.362+0000:1490607094:2017-03-27T17:31:34.362+0000:I've split the response status/message into separate issue (CAMEL-11078)"
0,CAMEL-10845,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Luca Burgazzoli,0,2,2017-02-16 10:19:25+00:00,2019-08-06 10:15:09+00:00,"One of the things that was missing in previous Java 8 DSL improvement rounds was the possibility to use Suppliers to provides objects to the routes.


As today:



    from(""direct:start"")
        .idempotentConsumer()
            .header(""messageId"")
            .messageIdRepository(createRepo())
        .to(""mock:result"");




With suppliers:



    from(""direct:start"")
        .idempotentConsumer()
            .header(""messageId"")
            .messageIdRepository(this::createRepo)
        .to(""mock:result"");




Adding that does not result in such a big improvement for the DSL but it adds some overhead to the underlying definitions as we may need to add additional variables to hold the suppliers and other stuffs to convert suppliers i.e. to expression clause so we should have a look at this issue in Camel 3.0 (where we may have the chance to do a deeper refactor and suppliers may play better).","davsclaus:1565055821:2019-08-06T09:43:41.953+0000:1565057704:2019-08-06T10:15:04.920+0000:I am adding suppliers so the DSL is a bit more modern with java 8 style.

For expression / predicate we should take a 2nd look as that would be cool. Okay the enanced DSL on ExpressionClause get java 8 support for function, supplier etc. So lets keep it for now."
0,CAMEL-10844,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-16 08:37:11+00:00,2017-02-16 10:08:38+00:00,"They have no value. Its the json schema that we use, and the website documentation is generated as adoc files etc.",
0,CAMEL-10843,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Unassigned,Claus Ibsen,0,5,2017-02-16 08:33:59+00:00,2017-04-14 11:23:09+00:00,"We need a little bit of documentation for these


[INFO]
[WARNING] 	Missing .adoc other documentation  : 11
[WARNING] 		hystrix
[WARNING] 		ribbon
[WARNING] 		scala
[WARNING] 		scr
[WARNING] 		shiro
[WARNING] 		spring-dm
[WARNING] 		spring-javaconfig
[WARNING] 		test-cdi
[WARNING] 		test-karaf
[WARNING] 		test-spring
[WARNING] 		testng","onders:1487585687:2017-02-20T18:14:47.771+0000:1487585687:2017-02-20T18:14:47.771+0000:i like to help with some of them
davsclaus:1487645809:2017-02-21T10:56:49.875+0000:1487645809:2017-02-21T10:56:49.875+0000:Thanks onder you are surely welcome to provide PRs
lb:1491977224:2017-04-12T14:07:04.393+0000:1491977224:2017-04-12T14:07:04.393+0000:[~onders] have you made any progress ?


lb:1491977760:2017-04-12T14:16:00.869+0000:1491977760:2017-04-12T14:16:00.869+0000:I think we can skip adding documentation for:

- hystrix as there is a hystrix eip
- spring-dm as it is deprecated
- scala as it is deprecated
- testng as it is deprecated
- scr as it is deprecated

Make sense ?
igarashitm:1491979191:2017-04-12T14:39:51.228+0000:1491979191:2017-04-12T14:39:51.228+0000:[~lb] I also have some time to work on this, if you don't finish everything please leave remaining to me, I'll work on tomorrow morning (GMT+9)
githubbot:1491996385:2017-04-12T19:26:25.066+0000:1491996385:2017-04-12T19:26:25.066+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1621

    CAMEL-10843 - very initial, checking it in considering better than no…

    …thing

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10843

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1621.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1621
    
----
commit 5d177fb987df5b9a02d5efbc9bcab42d3079abaa
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2017-04-12T19:21:59Z

    CAMEL-10843 - very initial, checking it in considering better than nothing

----

onders:1491996938:2017-04-12T19:35:38.016+0000:1491996938:2017-04-12T19:35:38.016+0000:[~lb] Hi, I'd written very very initial things about ribbon before i was very busy with work and thinking of discussions around deprecating components before 2.19 release, i'd not found a chance to add anything and even trying to do something about the other components. I've just sent a PR for that one, considering better than nothing. As it is very initial, feel free to dump my PR. please just let me know, i don't mind closing it.

Apart from my situation, i agree your suggestion around skipping some of them.

[~igarashitm] if you want, you can carry on and if you want to share, we can split them up and share and maybe finish quicker(even though i am not sure if i can give them go in the following two weeks.)

Thanks 
githubbot:1492029316:2017-04-13T04:35:16.816+0000:1492029316:2017-04-13T04:35:16.816+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1623

    CAMEL-10843 Aligned component adoc name

    shiro, spring-javaconfig, test-cdi had their document already, just those file name are not in expected shape. test-karaf and test-spring don't have adoc. I'll work on those 2 from now.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10843

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1623.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1623
    
----
commit f1064b074ef17068e735804bb187c6661dc9ddb2
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-13T03:11:27Z

    CAMEL-10843 Aligned component adoc name

----

lb:1492034107:2017-04-13T05:55:07.781+0000:1492034107:2017-04-13T05:55:07.781+0000:Going to merge the two PR, thx
githubbot:1492037690:2017-04-13T06:54:50.523+0000:1492037690:2017-04-13T06:54:50.523+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1623

githubbot:1492039586:2017-04-13T07:26:26.082+0000:1492039586:2017-04-13T07:26:26.082+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1621

davsclaus:1492041200:2017-04-13T07:53:20.182+0000:1492041200:2017-04-13T07:53:20.182+0000:Thanks for the help with this.
davsclaus:1492046585:2017-04-13T09:23:05.638+0000:1492046585:2017-04-13T09:23:05.638+0000:We have something now. Thanks for the help
githubbot:1492057459:2017-04-13T12:24:19.107+0000:1492057459:2017-04-13T12:24:19.107+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1627

    CAMEL-10843 Added adoc for camel-test-spring

    Ported from existing wiki doc

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10843-test-spring

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1627.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1627
    
----
commit 77b2d3fee592b39493f0491fef2c9f7ea33e35a4
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-13T09:04:41Z

    CAMEL-10843 Added adoc for camel-test-spring

----

githubbot:1492060143:2017-04-13T13:09:03.620+0000:1492060143:2017-04-13T13:09:03.620+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1627

igarashitm:1492109666:2017-04-14T02:54:26.665+0000:1492109666:2017-04-14T02:54:26.665+0000:I found ignite component doesn't have a adoc yet. I'll port the wiki to adoc and submit a PR today.
githubbot:1492128231:2017-04-14T08:03:51.094+0000:1492128231:2017-04-14T08:03:51.094+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1631

    CAMEL-10843 Ported camel-ignite wiki doc into adoc

    Auto generation for the component/endpoint options doesn't work for now, not yet sure why, maybe it has multiple endpoints? Also the ignite entry is removed from components/readme.adoc on each full build like camel-solr. I'll look into why.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10843-ignite

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1631.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1631
    
----
commit fd0dca9f15916cda945a047808a1d4b01ff9cba7
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-14T07:02:12Z

    CAMEL-10843 Ported camel-ignite wiki doc into adoc

----

githubbot:1492140189:2017-04-14T11:23:09.066+0000:1492140189:2017-04-14T11:23:09.066+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1631
"
0,CAMEL-10842,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-16 08:16:05+00:00,2017-02-16 12:25:26+00:00,"Lets take a look at generating the json output using boolean, numeric values when they are. So we dont have


""secret"": ""false""


but have


""secret"": false","davsclaus:1487205831:2017-02-16T08:43:51.769+0000:1487205831:2017-02-16T08:43:51.769+0000:For example before
{code}
{
 ""component"": {
    ""kind"": ""component"",
    ""scheme"": ""salesforce"",
    ""syntax"": ""salesforce:operationName:topicName"",
    ""title"": ""Salesforce"",
    ""description"": ""The salesforce component is used for integrating Camel with the massive Salesforce API."",
    ""label"": ""api,cloud,crm"",
    ""deprecated"": ""false"",
    ""async"": ""false"",
    ""javaType"": ""org.apache.camel.component.salesforce.SalesforceComponent"",
    ""firstVersion"": ""2.12.0"",
    ""groupId"": ""org.apache.camel"",
    ""artifactId"": ""camel-salesforce"",
    ""version"": ""2.19.0-SNAPSHOT""
  },
  ""componentProperties"": {
    ""loginConfig"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": ""false"", ""type"": ""object"", ""javaType"": ""org.apache.camel.component.salesforce.SalesforceLoginConfig"", ""deprecated"": ""false"", ""secret"": ""false"", ""description"": ""To use the shared SalesforceLoginConfig as login configuration"" },
    ""loginUrl"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": ""false"", ""type"": ""string"", ""javaType"": ""java.lang.String"", ""deprecated"": ""false"", ""secret"": ""false"", ""defaultValue"": ""https://login.salesforce.com"", ""description"": ""Salesforce login URL defaults to https://login.salesforce.com"" },
    ""clientId"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": ""false"", ""type"": ""string"", ""javaType"": ""java.lang.String"", ""deprecated"": ""false"", ""secret"": ""true"", ""description"": ""Salesforce connected application Consumer Key"" },
    ""clientSecret"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": ""false"", ""type"": ""string"", ""javaType"": ""java.lang.String"", ""deprecated"": ""false"", ""secret"": ""true"", ""description"": ""Salesforce connected application Consumer Secret"" },
{code}

And after
{code}
{
 ""component"": {
    ""kind"": ""component"",
    ""scheme"": ""salesforce"",
    ""syntax"": ""salesforce:operationName:topicName"",
    ""title"": ""Salesforce"",
    ""description"": ""The salesforce component is used for integrating Camel with the massive Salesforce API."",
    ""label"": ""api,cloud,crm"",
    ""deprecated"": false,
    ""async"": false,
    ""javaType"": ""org.apache.camel.component.salesforce.SalesforceComponent"",
    ""firstVersion"": ""2.12.0"",
    ""groupId"": ""org.apache.camel"",
    ""artifactId"": ""camel-salesforce"",
    ""version"": ""2.19.0-SNAPSHOT""
  },
  ""componentProperties"": {
    ""loginConfig"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": false, ""type"": ""object"", ""javaType"": ""org.apache.camel.component.salesforce.SalesforceLoginConfig"", ""deprecated"": false, ""secret"": false, ""description"": ""To use the shared SalesforceLoginConfig as login configuration"" },
    ""loginUrl"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": false, ""type"": ""string"", ""javaType"": ""java.lang.String"", ""deprecated"": false, ""secret"": false, ""defaultValue"": ""https://login.salesforce.com"", ""description"": ""Salesforce login URL defaults to https://login.salesforce.com"" },
    ""clientId"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": false, ""type"": ""string"", ""javaType"": ""java.lang.String"", ""deprecated"": false, ""secret"": true, ""description"": ""Salesforce connected application Consumer Key"" },
    ""clientSecret"": { ""kind"": ""property"", ""group"": ""security"", ""label"": ""security"", ""required"": false, ""type"": ""string"", ""javaType"": ""java.lang.String"", ""deprecated"": false, ""secret"": true, ""description"": ""Salesforce connected application Consumer Secret"" },
{code}
davsclaus:1487205872:2017-02-16T08:44:32.505+0000:1487205872:2017-02-16T08:44:32.505+0000:The version numbers must still be string type as they have dot in the versions and also -SNAPSHOT or -mycompany etc.
davsclaus:1487215326:2017-02-16T11:22:06.975+0000:1487215326:2017-02-16T11:22:06.975+0000:Got this working, however need to improve the parser for floating point numbers, but we dont have any options that use that value I think"
0,CAMEL-10841,Bug,Minor,"2.17.5, 2.18.2","2.17.6, 2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.3, 2.19.0",Stephan Siano,Stephan Siano,0,1,2017-02-16 07:54:06+00:00,2017-02-16 10:04:35+00:00,"I'm using an enpoint like this one : 



sftp://myserver/folder1/folder2?idempotent=true&stepwise=false&...&move=../archive



With 2.18.2, I have logs like this : 



  2017-02-15T13:23:47.314 [Camel (camel-1) thread #10 - sftp://myserver/folder1/folder2] WARN  o.a.c.c.file.remote.SftpOperations - Cannot delete file: folder1/folder2/../archive/myfile.txt
com.jcraft.jsch.SftpException: No such file
	at com.jcraft.jsch.ChannelSftp.throwStatusError(ChannelSftp.java:2873)
	at com.jcraft.jsch.ChannelSftp.rm(ChannelSftp.java:1985)
	at org.apache.camel.component.file.remote.SftpOperations.deleteFile(SftpOperations.java:435)
	at org.apache.camel.component.file.strategy.GenericFileProcessStrategySupport.renameFile(GenericFileProcessStrategySupport.java:100)




the issue was introduced with CAMEL-10712


Thanks to Guillaume Lundy for pointing that out","siano:1487209487:2017-02-16T09:44:47.188+0000:1487209487:2017-02-16T09:44:47.188+0000:unfortunately the deleteFile calls are spread all over the camel-file and the camel-ftp components, so changing the way exceptions are thrown for this issue is not reasonable.

I will just reduce the log level for the log to debug. This will normally not fill up the log with confusing entries, but will make it possible to analyze issues if they occur. Other similar issues (e.g. when creating directories) are also logged with debug in the file component."
0,CAMEL-10810,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-09 08:54:59+00:00,2017-02-11 11:40:52+00:00,"Lets remove the .0 so the versions are shorter and easier for the eye, eg


2.18.0 -> 2.18
1.5.0 -> 1.5


And so on. And only if the last digit is .0 we can do this.


This is done in the tooling/maven/camel-package-maven-plugin where there is some code to build those readme files etc.",
0,CAMEL-10809,New Feature,Minor,2.19.0,,"
None
",Closed,Won't Fix,None,Zoran Regvart,Zoran Regvart,0,2,2017-02-08 18:14:24+00:00,2017-02-13 09:10:41+00:00,"Camel core includes, albeit unpromoted feature implemented in CAMEL-10164 that allows the creation of producers from api specifications. One such integration was done in Swagger component, so you can create producers using the specified apiDoc parameter.
I would like to change this a bit, and introduce a RestEndpointConfigurer that would allow you to customize the endpoint, so a step before the producer customization/creation takes place.
This would allow for two things:



separation of concerns (configuring endpoint, creating producers)
possible extension to consumers (create specification first rest consumers)



I would also like to propose the new rest endpoint URI syntax in addition to the existing one, in the form of:


rest:<component>[:componentSpecific]


Or in case of Swagger, something like:


rest:swagger:operationId


For example, complete endpoint uri for getting a pet out of petstore (Swagger example) would be:


rest:swagger:getPetById?apiDoc=petstore.json","githubbot:1486549640:2017-02-08T18:27:20.740+0000:1486549640:2017-02-08T18:27:20.740+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1454

    CAMEL-10809 Introduce configurator SPI for rest support in camel-core

    This removes the `SwaggerRestProducerFactory` and moves the
    responsibility of configuring rest clients to a new SPI
    (`RestEndpointConfigurer`).
    
    The rest endpoint URI has been changed to allow for syntax like:
    
        rest:<component>[:componentSpecific]
    
    Or in case of Swagger:
    
        rest:swagger:getPetById?apiDoc=petstore.json
    
    The SPI is discovered in the `META-INF/services/org/apache/camel/rest`
    properties file with the prefix `configurer.` so any other components
    wishing to configure rest endpoints via this configurer SPI should add
    `rest` file with `configurer.class` property.
    
    I would like feedback on the following issues:
     - instead of `META-INF/.../rest` use different properties file?
     - design of the RestEndpointConfigurer SPI interface (for instance: is
    it sufficient so that it can be used to plug in headers, or
    authentication callbacks for rest)
     - integration with service discovery ({{service:...}})?
     - properties missing from Swagger specification (notably host, and
    port) -- current idea is that that should be provided from
    `RestConfiguration`

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10809

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1454.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1454
    
----
commit 59515f67706e588c2a86f2ba180be62c3264eb3a
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-02-08T18:25:44Z

    CAMEL-10809 Introduce configurator SPI for rest...
    
    ... support in camel-core
    
    This removes the `SwaggerRestProducerFactory` and moves the
    responsibility of configuring rest clients to a new SPI
    (`RestEndpointConfigurer`).
    
    The rest endpoint URI has been changed to allow for syntax like:
    
        rest:<component>[:componentSpecific]
    
    Or in case of Swagger:
    
        rest:swagger:getPetById?apiDoc=petstore.json
    
    The SPI is discovered in the `META-INF/services/org/apache/camel/rest`
    properties file with the prefix `configurer.` so any other components
    wishing to configure rest endpoints via this configurer SPI should add
    `rest` file with `configurer.class` property.
    
    I would like feedback on the following issues:
     - instead of `META-INF/.../rest` use different properties file?
     - design of the RestEndpointConfigurer SPI interface (for instance: is
    it sufficient so that it can be used to plug in headers, or
    authentication callbacks for rest)
     - integration with service discovery ({{service:...}})?
     - properties missing from Swagger specification (notably host, and
    port) -- current idea is that that should be provided from
    `RestConfiguration`

----

githubbot:1486948099:2017-02-13T09:08:19.866+0000:1486948099:2017-02-13T09:08:19.866+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1454

zregvart:1486948241:2017-02-13T09:10:41.013+0000:1486948241:2017-02-13T09:10:41.013+0000:Per [GitHub comment|https://github.com/apache/camel/pull/1454#issuecomment-279324224] decided upon trying to make a `rest-swagger` component instead."
0,CAMEL-10808,Improvement,Minor,2.18.2,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,0loky0,0,1,2017-02-08 16:17:29+00:00,2017-02-13 09:37:22+00:00,"Hi,


There are two examples of camel in a spring boot context in the source code: 


https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot
https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot-starter


Which are very similar (POC of timer) in term of code, configuration and test. 
After a winmerge of these two example and as a java camel users, a merge/refactoring could be done.


Only one could be keep and defined as best pratice.


regards,


JF",
0,CAMEL-10807,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.20.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2017-02-08 16:06:23+00:00,2017-05-05 12:51:44+00:00,A we have now camel-reactive-streams it would be nice to have a Reactor Core implementation of the camel-reactive-streams API,"githubbot:1493698404:2017-05-02T12:13:24.213+0000:1493698404:2017-05-02T12:13:24.213+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/1671

    WIP - CAMEL-10807 : Create camel-reactor component

    This PR aims to provide an implementation of [CamelReactiveStreamsService](https://github.com/apache/camel/blob/master/components/camel-reactive-streams/src/main/java/org/apache/camel/component/reactive/streams/api/CamelReactiveStreamsService.java) based on [Spring's Reactor Core](https://projectreactor.io).
    
    @nicolaferraro would you mind do a second review before mergin it ?


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-10807

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1671.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1671
    
----
commit 76c79e651d9f47b77fd41d084c50e6c83986569d
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-03-29T16:08:35Z

    CAMEL-10807: Create camel-reactor component

commit 403a768bd3396a25c79f47539a15804c7a3ab4ae
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-04-27T16:03:34Z

    CAMEL-10807: fixing backpressure

commit 44338f174125d13fa5bd34b2c112852e81458364
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-04-28T00:13:43Z

    CAMEL-10807: upgraded to reactor 3.0.7 to fix a bug with emitter processor

commit 18d1efc997efd2e9648532a7035f157f44fd9b4f
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-05-02T11:56:24Z

    CAMEL-10807: Create camel-reactor component

----

githubbot:1493959904:2017-05-05T12:51:44.865+0000:1493959904:2017-05-05T12:51:44.865+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/1671
"
0,CAMEL-10806,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.22.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2017-02-08 16:05:23+00:00,2018-05-08 11:07:25+00:00,A we have now camel-reactive-streams it would be nice to have a RxJava 2 implementation of the camel-reactive-streams API,"githubbot:1525748045:2018-05-08T10:54:05.774+0000:1525748045:2018-05-08T10:54:05.774+0000:nicolaferraro opened a new pull request #2328: CAMEL-10806: Add a RxJava2 module
URL: https://github.com/apache/camel/pull/2328
 
 
   I've just fixed backpressure issues on top of the work by @lburgazzoli.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525748046:2018-05-08T10:54:06.837+0000:1525748046:2018-05-08T10:54:06.837+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/2328

    CAMEL-10806: Add a RxJava2 module

    I've just fixed backpressure issues on top of the work by @lburgazzoli.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10806

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2328.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2328
    
----
commit 07504adbc3142735f06ebaa283a536058b80eca1
Author: lburgazzoli <lburgazzoli@...>
Date:   2017-05-26T14:56:58Z

    CAMEL-10806: Create camel-rxjava2 component

commit 55f1eef21b57178004a59e0911615d9ece1ed9bc
Author: nferraro <ni.ferraro@...>
Date:   2018-05-08T10:40:25Z

    CAMEL-10806: fix backpressure issues in camel-rxjava2

----

githubbot:1525748774:2018-05-08T11:06:14.420+0000:1525748774:2018-05-08T11:06:14.420+0000:lburgazzoli closed pull request #2328: CAMEL-10806: Add a RxJava2 module
URL: https://github.com/apache/camel/pull/2328
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/apache-camel/pom.xml b/apache-camel/pom.xml
index 8a4b80a4edc..6ac762f7683 100644
--- a/apache-camel/pom.xml
+++ b/apache-camel/pom.xml
@@ -845,6 +845,10 @@
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-reactor</artifactId>
     </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-rxjava2</artifactId>
+    </dependency>
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-rest-swagger</artifactId>
@@ -2139,6 +2143,11 @@
       <artifactId>camel-reactor-starter</artifactId>
       <version>${project.version}</version>
     </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-rxjava2-starter</artifactId>
+      <version>${project.version}</version>
+    </dependency>
     <dependency>
       <groupId>org.apache.camel</groupId>
       <artifactId>camel-rest-swagger-starter</artifactId>
diff --git a/apache-camel/src/main/descriptors/common-bin.xml b/apache-camel/src/main/descriptors/common-bin.xml
index 3ab0c73c6ea..82a5bf14103 100644
--- a/apache-camel/src/main/descriptors/common-bin.xml
+++ b/apache-camel/src/main/descriptors/common-bin.xml
@@ -220,6 +220,7 @@
         <include>org.apache.camel:camel-rabbitmq</include>
         <include>org.apache.camel:camel-reactive-streams</include>
         <include>org.apache.camel:camel-reactor</include>
+        <include>org.apache.camel:camel-rxjava2</include>
         <include>org.apache.camel:camel-restlet</include>
         <include>org.apache.camel:camel-rest-swagger</include>
         <include>org.apache.camel:camel-ribbon</include>
@@ -528,6 +529,7 @@
         <include>org.apache.camel:camel-rabbitmq-starter</include>
         <include>org.apache.camel:camel-reactive-streams-starter</include>
         <include>org.apache.camel:camel-reactor-starter</include>
+        <include>org.apache.camel:camel-rxjava2-starter</include>
         <include>org.apache.camel:camel-restlet-starter</include>
         <include>org.apache.camel:camel-rest-swagger-starter</include>
         <include>org.apache.camel:camel-ribbon-starter</include>
diff --git a/bom/camel-bom/pom.xml b/bom/camel-bom/pom.xml
index b589e03ffc2..9f8ecd3bbc5 100644
--- a/bom/camel-bom/pom.xml
+++ b/bom/camel-bom/pom.xml
@@ -2108,6 +2108,16 @@
         <artifactId>camel-rx-starter</artifactId>
         <version>${project.version}</version>
       </dependency>
+      <dependency>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>camel-rxjava2</artifactId>
+        <version>${project.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>camel-rxjava2-starter</artifactId>
+        <version>${project.version}</version>
+      </dependency>
       <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-salesforce</artifactId>
diff --git a/components/camel-reactor/src/test/resources/log4j2.properties b/components/camel-reactor/src/test/resources/log4j2.properties
index 536f7f60bef..55688f6f004 100644
--- a/components/camel-reactor/src/test/resources/log4j2.properties
+++ b/components/camel-reactor/src/test/resources/log4j2.properties
@@ -17,7 +17,7 @@
 
 appender.file.type = File
 appender.file.name = file
-appender.file.fileName = target/camel-reactive-streams-test.log
+appender.file.fileName = target/camel-reactor-test.log
 appender.file.layout.type = PatternLayout
 appender.file.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n
 appender.stdout.type = Console
diff --git a/components/camel-rxjava2/pom.xml b/components/camel-rxjava2/pom.xml
new file mode 100644
index 00000000000..8585f1050cd
--- /dev/null
+++ b/components/camel-rxjava2/pom.xml
@@ -0,0 +1,104 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the ""License""); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+  http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an ""AS IS"" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+    <modelVersion>4.0.0</modelVersion>
+
+    <parent>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>components</artifactId>
+        <version>2.22.0-SNAPSHOT</version>
+    </parent>
+
+    <artifactId>camel-rxjava2</artifactId>
+    <packaging>jar</packaging>
+    <name>Camel :: RxJava2</name>
+    <description>RxJava2 based back-end for Camel's reactive streams component</description>
+
+    <properties>
+      <!-- use by camel-catalog -->
+      <firstVersion>2.22.0</firstVersion>
+      <label>reactive,streams</label>
+
+      <camel.osgi.export.pkg>org.apache.camel.component.rxjava2.*</camel.osgi.export.pkg>
+    </properties>
+
+    <dependencies>
+
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-core</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-reactive-streams</artifactId>
+        </dependency>
+
+        <dependency>
+            <groupId>org.reactivestreams</groupId>
+            <artifactId>reactive-streams</artifactId>
+            <version>${reactive-streams-version}</version>
+        </dependency>
+
+        <dependency>
+            <groupId>io.reactivex.rxjava2</groupId>
+            <artifactId>rxjava</artifactId>
+            <version>${rxjava2-version}</version>
+        </dependency>
+        <dependency>
+            <!-- See https://github.com/ReactiveX/RxJava/issues/5999 -->
+            <groupId>com.github.akarnokd</groupId>
+            <artifactId>rxjava2-extensions</artifactId>
+            <version>${rxjava2-extensions-version}</version>
+        </dependency>
+
+        <!-- test dependencies -->
+        <dependency>
+            <groupId>org.apache.camel</groupId>
+            <artifactId>camel-test</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-api</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-core</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.apache.logging.log4j</groupId>
+            <artifactId>log4j-slf4j-impl</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>junit</groupId>
+            <artifactId>junit</artifactId>
+            <scope>test</scope>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-core</artifactId>
+            <version>${mockito-version}</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
+
+</project>
diff --git a/components/camel-rxjava2/src/main/docs/rxjava2-component.adoc b/components/camel-rxjava2/src/main/docs/rxjava2-component.adoc
new file mode 100644
index 00000000000..806301f60d8
--- /dev/null
+++ b/components/camel-rxjava2/src/main/docs/rxjava2-component.adoc
@@ -0,0 +1,16 @@
+## RxJava2 Component
+
+*Available as of Camel version 2.22*
+
+Maven users will need to add the following dependency to their `pom.xml`
+for this component:
+
+[source,xml]
+------------------------------------------------------------
+<dependency>
+    <groupId>org.apache.camel</groupId>
+    <artifactId>camel-rxjava2</artifactId>
+    <version>x.x.x</version>
+    <!-- use the same version as your Camel core version -->
+</dependency>
+------------------------------------------------------------
\ No newline at end of file
diff --git a/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaCamelProcessor.java b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaCamelProcessor.java
new file mode 100644
index 00000000000..adb4de11091
--- /dev/null
+++ b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaCamelProcessor.java
@@ -0,0 +1,120 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import java.io.Closeable;
+import java.io.IOException;
+import java.util.Objects;
+import java.util.concurrent.atomic.AtomicReference;
+
+import hu.akarnokd.rxjava2.processors.MulticastProcessor;
+import io.reactivex.BackpressureStrategy;
+import io.reactivex.Flowable;
+import io.reactivex.FlowableEmitter;
+import io.reactivex.processors.FlowableProcessor;
+import org.apache.camel.Exchange;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsBackpressureStrategy;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsDiscardedException;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsHelper;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsProducer;
+import org.apache.camel.util.ObjectHelper;
+import org.reactivestreams.Publisher;
+
+final class RxJavaCamelProcessor implements Closeable {
+    private final String name;
+    private final RxJavaStreamsService service;
+    private final AtomicReference<FlowableEmitter<Exchange>> camelEmitter;
+    private FlowableProcessor<Exchange> publisher;
+    private ReactiveStreamsProducer camelProducer;
+
+    RxJavaCamelProcessor(RxJavaStreamsService service, String name) {
+        this.service = service;
+        this.name = name;
+        this.camelProducer = null;
+        this.camelEmitter = new AtomicReference<>();
+        this.publisher = MulticastProcessor.create(1); // Buffered downstream if needed
+    }
+
+    @Override
+    public void close() throws IOException {
+        detach();
+    }
+
+    Publisher<Exchange> getPublisher() {
+        return publisher;
+    }
+
+    synchronized void attach(ReactiveStreamsProducer producer) {
+        Objects.requireNonNull(producer, ""producer cannot be null, use the detach method"");
+
+        if (this.camelProducer != null) {
+            throw new IllegalStateException(""A producer is already attached to the stream '"" + name + ""'"");
+        }
+
+        if (this.camelProducer != producer) {
+            detach();
+
+            ReactiveStreamsBackpressureStrategy strategy = producer.getEndpoint().getBackpressureStrategy();
+            Flowable<Exchange> flow = Flowable.create(camelEmitter::set, BackpressureStrategy.MISSING);
+
+            if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.OLDEST)) {
+                flow.onBackpressureDrop(this::onBackPressure)
+                    .doAfterNext(this::onItemEmitted)
+                    .subscribe(this.publisher);
+            } else if (ObjectHelper.equal(strategy, ReactiveStreamsBackpressureStrategy.LATEST)) {
+                flow.doAfterNext(this::onItemEmitted)
+                    .onBackpressureLatest()
+                    .subscribe(this.publisher);
+            } else {
+                flow.doAfterNext(this::onItemEmitted)
+                    .onBackpressureBuffer()
+                    .subscribe(this.publisher);
+            }
+
+            camelProducer = producer;
+        }
+    }
+
+    synchronized void detach() {
+        this.camelProducer = null;
+        this.camelEmitter.set(null);
+    }
+
+    void send(Exchange exchange) {
+        if (service.isRunAllowed()) {
+            FlowableEmitter<Exchange> emitter = ObjectHelper.notNull(camelEmitter.get(), ""FlowableEmitter"");
+            emitter.onNext(exchange);
+        }
+    }
+
+    // **************************************
+    // Helpers
+    // **************************************
+
+    private void onItemEmitted(Exchange exchange) {
+        if (service.isRunAllowed()) {
+            ReactiveStreamsHelper.invokeDispatchCallback(exchange);
+        }
+    }
+
+    private void onBackPressure(Exchange exchange) {
+        ReactiveStreamsHelper.invokeDispatchCallback(
+            exchange,
+            new ReactiveStreamsDiscardedException(""Discarded by back pressure strategy"", exchange, name)
+        );
+    }
+}
diff --git a/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsConstants.java b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsConstants.java
new file mode 100644
index 00000000000..6f46846d263
--- /dev/null
+++ b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsConstants.java
@@ -0,0 +1,38 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import org.apache.camel.AsyncCallback;
+
+/**
+ * Useful constants used in the Camel Reactive Streams component.
+ */
+public final class RxJavaStreamsConstants {
+    public static final String SERVICE_NAME =  ""rxjava2"";
+
+    /**
+     * An implementation of the {@link AsyncCallback} that does nothing.
+     */
+    public static final AsyncCallback EMPTY_ASYNC_CALLBACK = new AsyncCallback() {
+        @Override
+        public void done(boolean doneSync) {
+        }
+    };
+
+    private RxJavaStreamsConstants() {
+    }
+}
diff --git a/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsService.java b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsService.java
new file mode 100644
index 00000000000..6b8cee00965
--- /dev/null
+++ b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsService.java
@@ -0,0 +1,342 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
+import java.util.function.Function;
+import java.util.function.Supplier;
+
+import io.reactivex.Flowable;
+import io.reactivex.Single;
+import org.apache.camel.CamelContext;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsCamelSubscriber;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsConsumer;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsHelper;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsProducer;
+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;
+import org.apache.camel.component.reactive.streams.util.BodyConverter;
+import org.apache.camel.component.reactive.streams.util.ConvertingPublisher;
+import org.apache.camel.component.reactive.streams.util.ConvertingSubscriber;
+import org.apache.camel.component.reactive.streams.util.UnwrapStreamProcessor;
+import org.apache.camel.spi.Synchronization;
+import org.apache.camel.support.ServiceSupport;
+import org.apache.camel.util.function.Suppliers;
+import org.reactivestreams.Publisher;
+import org.reactivestreams.Subscriber;
+
+final class RxJavaStreamsService extends ServiceSupport implements CamelReactiveStreamsService {
+    private final CamelContext context;
+    private final Supplier<UnwrapStreamProcessor> unwrapStreamProcessorSupplier;
+    private final ConcurrentMap<String, RxJavaCamelProcessor> publishers;
+    private final ConcurrentMap<String, ReactiveStreamsCamelSubscriber> subscribers;
+    private final ConcurrentMap<String, String> publishedUriToStream;
+    private final ConcurrentMap<String, String> requestedUriToStream;
+
+    RxJavaStreamsService(CamelContext context) {
+        this.context = context;
+        this.publishers = new ConcurrentHashMap<>();
+        this.subscribers = new ConcurrentHashMap<>();
+        this.publishedUriToStream = new ConcurrentHashMap<>();
+        this.requestedUriToStream = new ConcurrentHashMap<>();
+        this.unwrapStreamProcessorSupplier = Suppliers.memorize(UnwrapStreamProcessor::new);
+    }
+
+    @Override
+    public String getId() {
+        return RxJavaStreamsConstants.SERVICE_NAME;
+    }
+
+    // ******************************************
+    // Lifecycle
+    // ******************************************
+
+    @Override
+    public void doStart() throws Exception {
+    }
+
+    @Override
+    public void doStop() throws Exception {
+        for (RxJavaCamelProcessor processor : publishers.values()) {
+            processor.close();
+        }
+        for (ReactiveStreamsCamelSubscriber subscriber : subscribers.values()) {
+            subscriber.close();
+        }
+    }
+
+    // ******************************************
+    //
+    // ******************************************
+
+    @Override
+    public Publisher<Exchange> fromStream(String name) {
+        return getCamelProcessor(name).getPublisher();
+    }
+
+    @Override
+    public <T> Publisher<T> fromStream(String name, Class<T> type) {
+        final Publisher<Exchange> publisher = fromStream(name);
+
+        if (Exchange.class.isAssignableFrom(type)) {
+            return Publisher.class.cast(publisher);
+        }
+
+        return Flowable.fromPublisher(publisher).map(BodyConverter.forType(type)::apply);
+    }
+
+    @Override
+    public ReactiveStreamsCamelSubscriber streamSubscriber(String name) {
+        return subscribers.computeIfAbsent(name, n -> new ReactiveStreamsCamelSubscriber(name));
+    }
+
+    @SuppressWarnings(""unchecked"")
+    public <T> Subscriber<T> streamSubscriber(String name, Class<T> type) {
+        final Subscriber<Exchange> subscriber = streamSubscriber(name);
+
+        if (Exchange.class.equals(type)) {
+            return Subscriber.class.cast(subscriber);
+        }
+
+        return new ConvertingSubscriber<>(subscriber, context);
+    }
+
+    @Override
+    public Publisher<Exchange> toStream(String name, Object data) {
+        return doRequest(
+            name,
+            ReactiveStreamsHelper.convertToExchange(context, data)
+        );
+    }
+
+    @Override
+    public Function<?, ? extends Publisher<Exchange>> toStream(String name) {
+        return data -> toStream(name, data);
+    }
+
+    @Override
+    public <T> Publisher<T> toStream(String name, Object data, Class<T> type) {
+        return new ConvertingPublisher<>(toStream(name, data), type);
+    }
+
+    @Override
+    public <T> Function<Object, Publisher<T>> toStream(String name, Class<T> type) {
+        return data -> toStream(name, data, type);
+    }
+
+    @Override
+    public Publisher<Exchange> from(String uri) {
+        final String name = publishedUriToStream.computeIfAbsent(uri, camelUri -> {
+            try {
+                String uuid = context.getUuidGenerator().generateUuid();
+
+                context.addRoutes(new RouteBuilder() {
+                    @Override
+                    public void configure() throws Exception {
+                        from(camelUri).to(""reactive-streams:"" + uuid);
+                    }
+                });
+
+                return uuid;
+            } catch (Exception e) {
+                throw new IllegalStateException(""Unable to create source reactive stream from direct URI: "" + uri, e);
+            }
+        });
+
+        return fromStream(name);
+    }
+
+    @Override
+    public <T> Publisher<T> from(String name, Class<T> type) {
+        final Publisher<Exchange> publisher = from(name);
+
+        if (Exchange.class.isAssignableFrom(type)) {
+            return Publisher.class.cast(publisher);
+        }
+
+        return Flowable.fromPublisher(publisher).map(BodyConverter.forType(type)::apply);
+    }
+
+    @Override
+    public Subscriber<Exchange> subscriber(String uri) {
+        try {
+            String uuid = context.getUuidGenerator().generateUuid();
+            context.addRoutes(new RouteBuilder() {
+                @Override
+                public void configure() throws Exception {
+                    from(""reactive-streams:"" + uuid)
+                        .to(uri);
+                }
+            });
+
+            return streamSubscriber(uuid);
+        } catch (Exception e) {
+            throw new IllegalStateException(""Unable to create source reactive stream towards direct URI: "" + uri, e);
+        }
+    }
+
+    @Override
+    public <T> Subscriber<T> subscriber(String uri, Class<T> type) {
+        return new ConvertingSubscriber<>(subscriber(uri), context);
+    }
+
+    @Override
+    public Publisher<Exchange> to(String uri, Object data) {
+        String streamName = requestedUriToStream.computeIfAbsent(uri, camelUri -> {
+            try {
+                String uuid = context.getUuidGenerator().generateUuid();
+                context.addRoutes(new RouteBuilder() {
+                    @Override
+                    public void configure() throws Exception {
+                        from(""reactive-streams:"" + uuid)
+                            .to(camelUri);
+                    }
+                });
+
+                return uuid;
+            } catch (Exception e) {
+                throw new IllegalStateException(""Unable to create requested reactive stream from direct URI: "" + uri, e);
+            }
+        });
+
+        return toStream(streamName, data);
+    }
+
+    @Override
+    public Function<Object, Publisher<Exchange>> to(String uri) {
+        return data -> to(uri, data);
+    }
+
+    @Override
+    public <T> Publisher<T> to(String uri, Object data, Class<T> type) {
+        Publisher<Exchange> publisher = to(uri, data);
+
+        return Flowable.fromPublisher(publisher).map(BodyConverter.forType(type)::apply);
+    }
+
+    @Override
+    public <T> Function<Object, Publisher<T>> to(String uri, Class<T> type) {
+        return data -> to(uri, data, type);
+    }
+
+    @Override
+    public void process(String uri, Function<? super Publisher<Exchange>, ?> processor) {
+        try {
+            context.addRoutes(new RouteBuilder() {
+                @Override
+                public void configure() throws Exception {
+                    from(uri)
+                        .process(exchange -> {
+                            Exchange copy = exchange.copy();
+                            Object result = processor.apply(Flowable.just(copy));
+                            exchange.getIn().setBody(result);
+                        })
+                        .process(unwrapStreamProcessorSupplier.get());
+                }
+            });
+        } catch (Exception e) {
+            throw new IllegalStateException(""Unable to add reactive stream processor to the direct URI: "" + uri, e);
+        }
+    }
+
+    @Override
+    public <T> void process(String uri, Class<T> type, Function<? super Publisher<T>, ?> processor) {
+        process(
+            uri,
+            publisher -> processor.apply(
+                Flowable.fromPublisher(publisher).map(BodyConverter.forType(type)::apply)
+            )
+        );
+    }
+
+    // ******************************************
+    // Producer
+    // ******************************************
+
+    @Override
+    public void attachCamelProducer(String name, ReactiveStreamsProducer producer) {
+        getCamelProcessor(name).attach(producer);
+    }
+
+    @Override
+    public void detachCamelProducer(String name) {
+        getCamelProcessor(name).detach();
+    }
+
+    @Override
+    public void sendCamelExchange(String name, Exchange exchange) {
+        getCamelProcessor(name).send(exchange);
+    }
+
+    private RxJavaCamelProcessor getCamelProcessor(String name) {
+        return publishers.computeIfAbsent(name, key -> new RxJavaCamelProcessor(this, key));
+    }
+
+    // ******************************************
+    // Consumer
+    // ******************************************
+
+    @Override
+    public ReactiveStreamsCamelSubscriber attachCamelConsumer(String name, ReactiveStreamsConsumer consumer) {
+        ReactiveStreamsCamelSubscriber subscriber = streamSubscriber(name);
+        subscriber.attachConsumer(consumer);
+
+        return subscriber;
+    }
+
+    @Override
+    public void detachCamelConsumer(String name) {
+        ReactiveStreamsCamelSubscriber subscriber = streamSubscriber(name);
+        subscriber.detachConsumer();
+    }
+
+    // *******************************************
+    // Helpers
+    // *******************************************
+
+    protected Publisher<Exchange> doRequest(String name, Exchange data) {
+        ReactiveStreamsConsumer consumer = streamSubscriber(name).getConsumer();
+        if (consumer == null) {
+            throw new IllegalStateException(""No consumers attached to the stream "" + name);
+        }
+
+        Single<Exchange> source = Single.<Exchange>create(
+            emitter -> data.addOnCompletion(new Synchronization() {
+                @Override
+                public void onComplete(Exchange exchange) {
+                    emitter.onSuccess(exchange);
+                }
+
+                @Override
+                public void onFailure(Exchange exchange) {
+                    Throwable throwable = exchange.getException();
+                    if (throwable == null) {
+                        throwable = new IllegalStateException(""Unknown Exception"");
+                    }
+
+                    emitter.onError(throwable);
+                }
+            })
+        ).doOnSubscribe(
+            subs -> consumer.process(data, RxJavaStreamsConstants.EMPTY_ASYNC_CALLBACK)
+        );
+
+        return source.toFlowable();
+    }
+}
diff --git a/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceFactory.java b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceFactory.java
new file mode 100644
index 00000000000..2f0b11be83e
--- /dev/null
+++ b/components/camel-rxjava2/src/main/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceFactory.java
@@ -0,0 +1,29 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;
+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsServiceFactory;
+import org.apache.camel.component.reactive.streams.engine.ReactiveStreamsEngineConfiguration;
+
+public class RxJavaStreamsServiceFactory implements CamelReactiveStreamsServiceFactory {
+    @Override
+    public CamelReactiveStreamsService newInstance(CamelContext context, ReactiveStreamsEngineConfiguration configuration) {
+        return new RxJavaStreamsService(context);
+    }
+}
diff --git a/components/camel-rxjava2/src/main/resources/META-INF/LICENSE.txt b/components/camel-rxjava2/src/main/resources/META-INF/LICENSE.txt
new file mode 100644
index 00000000000..6b0b1270ff0
--- /dev/null
+++ b/components/camel-rxjava2/src/main/resources/META-INF/LICENSE.txt
@@ -0,0 +1,203 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/components/camel-rxjava2/src/main/resources/META-INF/NOTICE.txt b/components/camel-rxjava2/src/main/resources/META-INF/NOTICE.txt
new file mode 100644
index 00000000000..2e215bf2e6b
--- /dev/null
+++ b/components/camel-rxjava2/src/main/resources/META-INF/NOTICE.txt
@@ -0,0 +1,11 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Apache Camel distribution.                    ==
+   =========================================================================
+
+   This product includes software developed by
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Please read the different LICENSE files present in the licenses directory of
+   this distribution.
diff --git a/components/camel-rxjava2/src/main/resources/META-INF/services/org/apache/camel/reactive-streams/rxjava2 b/components/camel-rxjava2/src/main/resources/META-INF/services/org/apache/camel/reactive-streams/rxjava2
new file mode 100644
index 00000000000..8003909e805
--- /dev/null
+++ b/components/camel-rxjava2/src/main/resources/META-INF/services/org/apache/camel/reactive-streams/rxjava2
@@ -0,0 +1,17 @@
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the ""License""); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+class=org.apache.camel.component.rxjava2.engine.RxJavaStreamsServiceFactory
\ No newline at end of file
diff --git a/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceBackpressureTest.java b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceBackpressureTest.java
new file mode 100644
index 00000000000..38a6fc38e93
--- /dev/null
+++ b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceBackpressureTest.java
@@ -0,0 +1,165 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+
+import io.reactivex.Flowable;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsBackpressureStrategy;
+import org.apache.camel.component.rxjava2.engine.suport.TestSubscriber;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class RxJavaStreamsServiceBackpressureTest extends RxJavaStreamsServiceTestSupport {
+
+    @Test
+    public void testBufferStrategy() throws Exception {
+        getReactiveStreamsComponent().setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.BUFFER);
+
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""timer:gen?period=20&repeatCount=20"")
+                    .setBody()
+                    .header(Exchange.TIMER_COUNTER)
+                    .to(""reactive-streams:integers"");
+            }
+        });
+
+        Flowable<Integer> integers = Flowable.fromPublisher(crs.fromStream(""integers"", Integer.class));
+        ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();
+        CountDownLatch latch = new CountDownLatch(1);
+
+        Flowable.range(0, 50)
+            .zipWith(integers, (l, i) -> i)
+            .timeout(2000, TimeUnit.MILLISECONDS, Flowable.empty())
+            .doOnComplete(latch::countDown)
+            .subscribe(queue::add);
+
+        context.start();
+
+        Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));
+        Assert.assertEquals(20, queue.size());
+
+        int num = 1;
+        for (int i : queue) {
+            Assert.assertEquals(num++, i);
+        }
+    }
+
+    @Test
+    public void testDropStrategy() throws Exception {
+        getReactiveStreamsComponent().setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.OLDEST);
+
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""timer:gen?period=20&repeatCount=20"")
+                    .setBody()
+                    .header(Exchange.TIMER_COUNTER)
+                    .to(""reactive-streams:integers"");
+            }
+        });
+
+        final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();
+        final CountDownLatch latch = new CountDownLatch(1);
+        final CountDownLatch latch2 = new CountDownLatch(2);
+
+        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>() {
+            @Override
+            public void onNext(Integer o) {
+                queue.add(o);
+                latch.countDown();
+                latch2.countDown();
+            }
+        };
+
+        subscriber.setInitiallyRequested(1);
+
+        crs.fromStream(""integers"", Integer.class).subscribe(subscriber);
+        context.start();
+
+        Assert.assertTrue(latch.await(5, TimeUnit.SECONDS));
+        Thread.sleep(1000); // wait for all numbers to be generated
+
+        subscriber.request(19);
+        Assert.assertTrue(latch2.await(1, TimeUnit.SECONDS));
+
+        Thread.sleep(200); // add other time to ensure no other items arrive
+        Assert.assertEquals(2, queue.size());
+
+        int sum = queue.stream().reduce((i, j) -> i + j).get();
+        Assert.assertEquals(3, sum); // 1 + 2 = 3
+
+        subscriber.cancel();
+    }
+
+    @Test
+    public void testLatestStrategy() throws Exception {
+        getReactiveStreamsComponent().setBackpressureStrategy(ReactiveStreamsBackpressureStrategy.LATEST);
+
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""timer:gen?period=20&repeatCount=20"")
+                    .setBody()
+                    .header(Exchange.TIMER_COUNTER)
+                    .to(""reactive-streams:integers"");
+            }
+        });
+
+        final ConcurrentLinkedQueue<Integer> queue = new ConcurrentLinkedQueue<>();
+        final CountDownLatch latch1 = new CountDownLatch(1);
+        final CountDownLatch latch2 = new CountDownLatch(2);
+
+        TestSubscriber<Integer> subscriber = new TestSubscriber<Integer>() {
+            @Override
+            public void onNext(Integer o) {
+                queue.add(o);
+                latch1.countDown();
+                latch2.countDown();
+            }
+        };
+
+        subscriber.setInitiallyRequested(1);
+
+        crs.fromStream(""integers"", Integer.class).subscribe(subscriber);
+        context.start();
+
+        Assert.assertTrue(latch1.await(5, TimeUnit.SECONDS));
+        Thread.sleep(1000); // wait for all numbers to be generated
+
+        subscriber.request(19);
+        Assert.assertTrue(latch2.await(1, TimeUnit.SECONDS));
+
+        Thread.sleep(200); // add other time to ensure no other items arrive
+
+        // TODO: the chain caches two elements instead of one: change it if you find an EmitterProcessor without prefetch
+        // Assert.assertEquals(2, queue.size());
+        Assert.assertEquals(3, queue.size());
+
+        int sum = queue.stream().reduce((i, j) -> i + j).get();
+        // Assert.assertEquals(21, sum); // 1 + 20 = 21
+        Assert.assertEquals(23, sum); // 1 + 2 + 20 = 23
+
+        subscriber.cancel();
+    }
+}
diff --git a/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceEventTypeTest.java b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceEventTypeTest.java
new file mode 100644
index 00000000000..b3f4bb4a8f7
--- /dev/null
+++ b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceEventTypeTest.java
@@ -0,0 +1,164 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import io.reactivex.Flowable;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsConstants;
+import org.junit.Assert;
+import org.junit.Test;
+import org.reactivestreams.Subscriber;
+
+public class RxJavaStreamsServiceEventTypeTest extends RxJavaStreamsServiceTestSupport {
+
+    @Test
+    public void testOnCompleteHeaderForwarded() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:numbers?forwardOnComplete=true"")
+                    .to(""mock:endpoint"");
+            }
+        });
+
+        Subscriber<Integer> numbers = crs.streamSubscriber(""numbers"", Integer.class);
+
+        context.start();
+
+        Flowable.<Integer>empty().subscribe(numbers);
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:endpoint"");
+        endpoint.expectedMessageCount(1);
+        endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE, ""onComplete"");
+        endpoint.expectedBodiesReceived(new Object[]{null});
+        endpoint.assertIsSatisfied();
+    }
+
+    @Test
+    public void testOnCompleteHeaderNotForwarded() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:numbers"")
+                    .to(""mock:endpoint"");
+            }
+        });
+
+        Subscriber<Integer> numbers = crs.streamSubscriber(""numbers"", Integer.class);
+
+        context.start();
+
+        Flowable.<Integer>empty().subscribe(numbers);
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:endpoint"");
+        endpoint.expectedMessageCount(0);
+        endpoint.assertIsSatisfied(200);
+    }
+
+    @Test
+    public void testOnNextHeaderForwarded() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:numbers"")
+                    .to(""mock:endpoint"");
+            }
+        });
+
+        Subscriber<Integer> numbers = crs.streamSubscriber(""numbers"", Integer.class);
+
+        context.start();
+
+        Flowable.just(1).subscribe(numbers);
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:endpoint"");
+        endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE, ""onNext"");
+        endpoint.expectedMessageCount(1);
+        endpoint.assertIsSatisfied();
+
+        Exchange ex = endpoint.getExchanges().get(0);
+        Assert.assertEquals(1, ex.getIn().getBody());
+    }
+
+    @Test
+    public void testOnErrorHeaderForwarded() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:numbers?forwardOnError=true"")
+                    .to(""mock:endpoint"");
+            }
+        });
+
+        Subscriber<Integer> numbers = crs.streamSubscriber(""numbers"", Integer.class);
+
+        context.start();
+
+        RuntimeException ex = new RuntimeException(""1"");
+
+        Flowable.just(1)
+            .map(n -> {
+                if (n == 1) {
+                    throw ex;
+                }
+                return n;
+            })
+            .subscribe(numbers);
+
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:endpoint"");
+        endpoint.expectedMessageCount(1);
+        endpoint.expectedHeaderReceived(ReactiveStreamsConstants.REACTIVE_STREAMS_EVENT_TYPE, ""onError"");
+        endpoint.assertIsSatisfied();
+
+        Exchange exch = endpoint.getExchanges().get(0);
+        Assert.assertEquals(ex, exch.getIn().getBody());
+    }
+
+    @Test
+    public void testOnErrorHeaderNotForwarded() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:numbers"")
+                    .to(""mock:endpoint"");
+            }
+        });
+
+        Subscriber<Integer> numbers = crs.streamSubscriber(""numbers"", Integer.class);
+
+        context.start();
+
+        RuntimeException ex = new RuntimeException(""1"");
+
+        Flowable.just(1)
+            .map(n -> {
+                if (n == 1) {
+                    throw ex;
+                }
+                return n;
+            })
+            .subscribe(numbers);
+
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:endpoint"");
+        endpoint.expectedMessageCount(0);
+        endpoint.assertIsSatisfied(200);
+    }
+}
diff --git a/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceSubscriberTest.java b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceSubscriberTest.java
new file mode 100644
index 00000000000..8c9632a26d2
--- /dev/null
+++ b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceSubscriberTest.java
@@ -0,0 +1,151 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import java.util.concurrent.atomic.AtomicLong;
+
+import io.reactivex.Flowable;
+import org.apache.camel.Exchange;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.junit.Assert;
+import org.junit.Test;
+import org.reactivestreams.Publisher;
+import org.reactivestreams.Subscriber;
+
+public class RxJavaStreamsServiceSubscriberTest extends RxJavaStreamsServiceTestSupport {
+
+    @Test
+    public void testSubscriber() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:sub1"")
+                    .to(""mock:sub1"");
+                from(""reactive-streams:sub2"")
+                    .to(""mock:sub2"");
+                from(""timer:tick?period=50"")
+                    .setBody()
+                        .simple(""random(500)"")
+                    .to(""mock:sub3"")
+                    .to(""reactive-streams:pub"");
+            }
+        });
+
+        Subscriber<Integer> sub1 = crs.streamSubscriber(""sub1"", Integer.class);
+        Subscriber<Integer> sub2 = crs.streamSubscriber(""sub2"", Integer.class);
+        Publisher<Integer> pub = crs.fromStream(""pub"", Integer.class);
+
+        pub.subscribe(sub1);
+        pub.subscribe(sub2);
+
+        context.start();
+
+        int count = 2;
+
+        MockEndpoint e1 = getMockEndpoint(""mock:sub1"");
+        e1.expectedMinimumMessageCount(count);
+        e1.assertIsSatisfied();
+
+        MockEndpoint e2 = getMockEndpoint(""mock:sub2"");
+        e2.expectedMinimumMessageCount(count);
+        e2.assertIsSatisfied();
+
+        MockEndpoint e3 = getMockEndpoint(""mock:sub3"");
+        e3.expectedMinimumMessageCount(count);
+        e3.assertIsSatisfied();
+
+        for (int i = 0; i < count; i++) {
+            Exchange ex1 = e1.getExchanges().get(i);
+            Exchange ex2 = e2.getExchanges().get(i);
+            Exchange ex3 = e3.getExchanges().get(i);
+
+            assertEquals(ex1.getIn().getBody(), ex2.getIn().getBody());
+            assertEquals(ex1.getIn().getBody(), ex3.getIn().getBody());
+        }
+    }
+
+    @Test
+    public void testSingleConsumer() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:singleConsumer"")
+                    .process()
+                        .message(m -> m.setHeader(""thread"", Thread.currentThread().getId()))
+                    .to(""mock:singleBucket"");
+            }
+        });
+
+        context.start();
+
+        Flowable.range(0, 1000).subscribe(
+            crs.streamSubscriber(""singleConsumer"", Number.class)
+        );
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:singleBucket"");
+        endpoint.expectedMessageCount(1000);
+        endpoint.assertIsSatisfied();
+
+        Assert.assertEquals(
+            1,
+            endpoint.getExchanges().stream()
+                .map(x -> x.getIn().getHeader(""thread"", String.class))
+                .distinct()
+                .count()
+        );
+
+        // Ensure order is preserved when using a single consumer
+        AtomicLong num = new AtomicLong(0);
+
+        endpoint.getExchanges().stream()
+            .map(x -> x.getIn().getBody(Long.class))
+            .forEach(n -> Assert.assertEquals(num.getAndIncrement(), n.longValue()));
+    }
+
+    @Test
+    public void testMultipleConsumers() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""reactive-streams:multipleConsumers?concurrentConsumers=3"")
+                    .process()
+                        .message(m -> m.setHeader(""thread"", Thread.currentThread().getId()))
+                    .to(""mock:multipleBucket"");
+            }
+        });
+
+        context.start();
+
+        Flowable.range(0, 1000).subscribe(
+            crs.streamSubscriber(""multipleConsumers"", Number.class)
+        );
+
+        MockEndpoint endpoint = getMockEndpoint(""mock:multipleBucket"");
+        endpoint.expectedMessageCount(1000);
+        endpoint.assertIsSatisfied();
+
+        Assert.assertEquals(
+            3,
+            endpoint.getExchanges().stream()
+                .map(x -> x.getIn().getHeader(""thread"", String.class))
+                .distinct()
+                .count()
+        );
+        // Order cannot be preserved when using multiple consumers
+    }
+}
diff --git a/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceTest.java b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceTest.java
new file mode 100644
index 00000000000..71fee035d76
--- /dev/null
+++ b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceTest.java
@@ -0,0 +1,402 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.Function;
+
+import io.reactivex.Flowable;
+import io.reactivex.disposables.Disposable;
+import org.apache.camel.Exchange;
+import org.apache.camel.ProducerTemplate;
+import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
+import org.apache.camel.impl.DefaultExchange;
+import org.apache.camel.impl.JndiRegistry;
+import org.apache.camel.util.ExchangeHelper;
+import org.junit.Assert;
+import org.junit.Test;
+import org.reactivestreams.Publisher;
+
+public class RxJavaStreamsServiceTest extends RxJavaStreamsServiceTestSupport {
+    
+    // ************************************************
+    // Setup
+    // ************************************************
+
+    @Override
+    protected JndiRegistry createRegistry() throws Exception {
+        JndiRegistry registry = super.createRegistry();
+        registry.bind(""hello"", new SampleBean());
+
+        return registry;
+    }
+
+    public static class SampleBean {
+        public String hello(String name) {
+            return ""Hello "" + name;
+        }
+    }
+
+    // ************************************************
+    // fromStream/from
+    // ************************************************
+
+    @Test
+    public void testFromStreamDirect() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            public void configure() {
+                from(""direct:reactive"")
+                    .to(""reactive-streams:numbers"");
+            }
+        });
+
+        context.start();
+        ProducerTemplate template = context.createProducerTemplate();
+
+        AtomicInteger value = new AtomicInteger(0);
+
+        Flowable.fromPublisher(crs.fromStream(""numbers"", Integer.class))
+            .doOnNext(res -> Assert.assertEquals(value.incrementAndGet(), res.intValue()))
+            .subscribe();
+
+        template.sendBody(""direct:reactive"", 1);
+        template.sendBody(""direct:reactive"", 2);
+        template.sendBody(""direct:reactive"", 3);
+    }
+
+    @Test
+    public void testFromStreamTimer() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""timer:tick?period=5&repeatCount=30"")
+                    .setBody()
+                        .header(Exchange.TIMER_COUNTER)
+                    .to(""reactive-streams:tick"");
+            }
+        });
+
+        final int num = 30;
+        final CountDownLatch latch = new CountDownLatch(num);
+        final AtomicInteger value = new AtomicInteger(0);
+
+        Flowable.fromPublisher(crs.fromStream(""tick"", Integer.class))
+            .doOnNext(res -> Assert.assertEquals(value.incrementAndGet(), res.intValue()))
+            .doOnNext(n -> latch.countDown())
+            .subscribe();
+
+        context.start();
+
+        latch.await(5, TimeUnit.SECONDS);
+
+        Assert.assertEquals(num, value.get());
+    }
+
+    @Test
+    public void testFromStreamMultipleSubscriptionsWithDirect() throws Exception {
+        context.start();
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:reactive"")
+                    .to(""reactive-streams:direct"");
+            }
+        });
+
+        CountDownLatch latch1 = new CountDownLatch(2);
+        Flowable.fromPublisher(crs.fromStream(""direct"", Integer.class))
+            .doOnNext(res -> latch1.countDown())
+            .subscribe();
+
+        CountDownLatch latch2 = new CountDownLatch(2);
+        Flowable.fromPublisher(crs.fromStream(""direct"", Integer.class))
+            .doOnNext(res -> latch2.countDown())
+            .subscribe();
+
+        template.sendBody(""direct:reactive"", 1);
+        template.sendBody(""direct:reactive"", 2);
+
+        Assert.assertTrue(latch1.await(5, TimeUnit.SECONDS));
+        Assert.assertTrue(latch2.await(5, TimeUnit.SECONDS));
+    }
+
+    @Test
+    public void testMultipleSubscriptionsWithTimer() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""timer:tick?period=50"")
+                    .setBody().header(Exchange.TIMER_COUNTER)
+                    .to(""reactive-streams:tick"");
+            }
+        });
+
+        CountDownLatch latch1 = new CountDownLatch(5);
+        Disposable disp1 = Flowable.fromPublisher(crs.fromStream(""tick"", Integer.class)).subscribe(res -> latch1.countDown());
+
+        context.start();
+
+        // Add another subscription
+        CountDownLatch latch2 = new CountDownLatch(5);
+        Disposable disp2 = Flowable.fromPublisher(crs.fromStream(""tick"", Integer.class)).subscribe(res -> latch2.countDown());
+
+        assertTrue(latch1.await(5, TimeUnit.SECONDS));
+        assertTrue(latch2.await(5, TimeUnit.SECONDS));
+
+        // Un subscribe both
+        disp1.dispose();
+        disp2.dispose();
+
+        // No active subscriptions, warnings expected
+        Thread.sleep(60);
+
+        // Add another subscription
+        CountDownLatch latch3 = new CountDownLatch(5);
+        Disposable disp3 = Flowable.fromPublisher(crs.fromStream(""tick"", Integer.class)).subscribe(res -> latch3.countDown());
+
+        assertTrue(latch3.await(5, TimeUnit.SECONDS));
+        disp3.dispose();
+    }
+
+    @Test
+    public void testFrom() throws Exception {
+        context.start();
+
+        Publisher<Exchange> timer = crs.from(""timer:reactive?period=250&repeatCount=3"");
+
+        AtomicInteger value = new AtomicInteger(0);
+        CountDownLatch latch = new CountDownLatch(3);
+
+        Flowable.fromPublisher(timer)
+            .map(exchange -> ExchangeHelper.getHeaderOrProperty(exchange, Exchange.TIMER_COUNTER, Integer.class))
+            .doOnNext(res -> Assert.assertEquals(value.incrementAndGet(), res.intValue()))
+            .doOnNext(res -> latch.countDown())
+            .subscribe();
+
+        Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+    }
+
+    // ************************************************
+    // fromPublisher
+    // ************************************************
+
+    @Test
+    public void testFromPublisher() throws Exception {
+        context.start();
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:source"")
+                    .to(""direct:stream"")
+                    .setBody()
+                        .simple(""after stream: ${body}"");
+            }
+        });
+
+        crs.process(""direct:stream"",
+            publisher ->
+                Flowable.fromPublisher(publisher)
+                    .map(e -> {
+                        int i = e.getIn().getBody(Integer.class);
+                        e.getOut().setBody(-i);
+
+                        return e;
+                    }
+                )
+        );
+
+        for (int i = 1; i <= 3; i++) {
+            Assert.assertEquals(
+                ""after stream: "" + (-i),
+                template.requestBody(""direct:source"", i, String.class)
+            );
+        }
+    }
+
+    @Test
+    public void testFromPublisherWithConversion() throws Exception {
+        context.start();
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:source"")
+                    .to(""direct:stream"")
+                    .setBody()
+                        .simple(""after stream: ${body}"");
+            }
+        });
+
+        crs.process(""direct:stream"",
+            Integer.class,
+            publisher ->
+                Flowable.fromPublisher(publisher).map(Math::negateExact)
+        );
+
+        for (int i = 1; i <= 3; i++) {
+            Assert.assertEquals(
+                ""after stream: "" + (-i),
+                template.requestBody(""direct:source"", i, String.class)
+            );
+        }
+    }
+
+    // ************************************************
+    // toStream/to
+    // ************************************************
+
+    @Test
+    public void testToStream() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            public void configure() {
+                from(""reactive-streams:reactive"")
+                    .setBody().constant(""123"");
+            }
+        });
+
+        context.start();
+
+        Publisher<Exchange> publisher = crs.toStream(""reactive"", new DefaultExchange(context));
+        Exchange res = Flowable.fromPublisher(publisher).blockingFirst();
+
+        Assert.assertNotNull(res);
+
+        String content = res.getIn().getBody(String.class);
+
+        Assert.assertNotNull(content);
+        Assert.assertEquals(""123"", content);
+    }
+
+    @Test
+    public void testTo() throws Exception {
+        context.start();
+
+        AtomicInteger value = new AtomicInteger(0);
+        CountDownLatch latch = new CountDownLatch(1);
+
+        Flowable.just(1, 2, 3)
+            .flatMap(e -> crs.to(""bean:hello"", e, String.class))
+            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> latch.countDown())
+            .subscribe();
+
+        Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+    }
+
+    @Test
+    public void testToWithExchange() throws Exception {
+        context.start();
+
+        AtomicInteger value = new AtomicInteger(0);
+        CountDownLatch latch = new CountDownLatch(1);
+
+        Flowable.just(1, 2, 3)
+            .flatMap(e -> crs.to(""bean:hello"", e))
+            .map(e -> e.getOut())
+            .map(e -> e.getBody(String.class))
+            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> latch.countDown())
+            .subscribe();
+
+        Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+    }
+
+    @Test
+    public void testToFunction() throws Exception {
+        context.start();
+
+        AtomicInteger value = new AtomicInteger(0);
+        CountDownLatch latch = new CountDownLatch(1);
+        Function<Object, Publisher<String>> fun = crs.to(""bean:hello"", String.class);
+
+        Flowable.just(1, 2, 3)
+            .flatMap(fun::apply)
+            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> latch.countDown())
+            .subscribe();
+
+        Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+    }
+
+    @Test
+    public void testToFunctionWithExchange() throws Exception {
+        context.start();
+
+        AtomicInteger value = new AtomicInteger(0);
+        CountDownLatch latch = new CountDownLatch(1);
+        Function<Object, Publisher<Exchange>> fun = crs.to(""bean:hello"");
+
+        Flowable.just(1, 2, 3)
+            .flatMap(fun::apply)
+            .map(e -> e.getOut())
+            .map(e -> e.getBody(String.class))
+            .doOnNext(res -> Assert.assertEquals(""Hello "" + value.incrementAndGet(), res))
+            .doOnNext(res -> latch.countDown())
+            .subscribe();
+
+        Assert.assertTrue(latch.await(2, TimeUnit.SECONDS));
+    }
+
+    // ************************************************
+    // subscriber
+    // ************************************************
+
+    @Test
+    public void testSubscriber() throws Exception {
+        context.start();
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:reactor"")
+                    .to(""mock:result"");
+            }
+        });
+
+        Flowable.just(1, 2, 3)
+            .subscribe(crs.subscriber(""direct:reactor"", Integer.class));
+
+        MockEndpoint mock = getMockEndpoint(""mock:result"");
+        mock.expectedMessageCount(3);
+        mock.assertIsSatisfied();
+
+        int idx = 1;
+        for (Exchange ex : mock.getExchanges()) {
+            Assert.assertEquals(new Integer(idx++), ex.getIn().getBody(Integer.class));
+        }
+    }
+
+    // ************************************************
+    // misc
+    // ************************************************
+
+    @Test(expected = IllegalStateException.class)
+    public void testOnlyOneCamelProducerPerPublisher() throws Exception {
+        context.addRoutes(new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""direct:one"")
+                    .to(""reactive-streams:stream"");
+                from(""direct:two"")
+                    .to(""reactive-streams:stream"");
+            }
+        });
+
+        context.start();
+    }
+}
diff --git a/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceTestSupport.java b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceTestSupport.java
new file mode 100644
index 00000000000..4ce1dd23541
--- /dev/null
+++ b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/RxJavaStreamsServiceTestSupport.java
@@ -0,0 +1,59 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsComponent;
+import org.apache.camel.component.reactive.streams.ReactiveStreamsConstants;
+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreams;
+import org.apache.camel.component.reactive.streams.api.CamelReactiveStreamsService;
+import org.apache.camel.test.junit4.CamelTestSupport;
+import org.apache.camel.util.ObjectHelper;
+
+class RxJavaStreamsServiceTestSupport extends CamelTestSupport {
+    protected CamelReactiveStreamsService crs;
+
+    @Override
+    protected CamelContext createCamelContext() throws Exception {
+        CamelContext context = super.createCamelContext();
+
+        context.addComponent(
+            ReactiveStreamsConstants.SCHEME,
+            ReactiveStreamsComponent.withServiceType(RxJavaStreamsConstants.SERVICE_NAME)
+        );
+
+        return context;
+    }
+
+    @Override
+    protected void doPostSetup() throws Exception {
+        this.crs = CamelReactiveStreams.get(context);
+    }
+
+    @Override
+    public boolean isUseRouteBuilder() {
+        // You need to start the context if ""use route builder"" is set to false
+        return false;
+    }
+
+    protected ReactiveStreamsComponent getReactiveStreamsComponent() {
+        return ObjectHelper.notNull(
+            context.getComponent(ReactiveStreamsConstants.SCHEME, ReactiveStreamsComponent.class),
+            ReactiveStreamsConstants.SCHEME
+        );
+    }
+}
diff --git a/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/suport/TestSubscriber.java b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/suport/TestSubscriber.java
new file mode 100644
index 00000000000..a50eac9b898
--- /dev/null
+++ b/components/camel-rxjava2/src/test/java/org/apache/camel/component/rxjava2/engine/suport/TestSubscriber.java
@@ -0,0 +1,73 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.rxjava2.engine.suport;
+
+import org.reactivestreams.Subscriber;
+import org.reactivestreams.Subscription;
+
+/**
+ * A subscriber for tests.
+ */
+public class TestSubscriber<T> implements Subscriber<T> {
+
+    protected Subscription subscription;
+
+    private long initiallyRequested;
+
+    public TestSubscriber() {
+    }
+
+    public long getInitiallyRequested() {
+        return initiallyRequested;
+    }
+
+    public void setInitiallyRequested(long initiallyRequested) {
+        this.initiallyRequested = initiallyRequested;
+    }
+
+    public void request(long exchanges) {
+        this.subscription.request(exchanges);
+    }
+
+    public void cancel() {
+        this.subscription.cancel();
+    }
+
+    @Override
+    public void onSubscribe(Subscription subscription) {
+        this.subscription = subscription;
+
+        if (initiallyRequested > 0) {
+            subscription.request(initiallyRequested);
+        }
+    }
+
+    @Override
+    public void onNext(T t) {
+
+    }
+
+    @Override
+    public void onError(Throwable throwable) {
+
+    }
+
+    @Override
+    public void onComplete() {
+
+    }
+}
diff --git a/components/camel-rxjava2/src/test/resources/log4j2.properties b/components/camel-rxjava2/src/test/resources/log4j2.properties
new file mode 100644
index 00000000000..6510773060a
--- /dev/null
+++ b/components/camel-rxjava2/src/test/resources/log4j2.properties
@@ -0,0 +1,33 @@
+## ---------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the ""License""); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+##      http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an ""AS IS"" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ---------------------------------------------------------------------------
+
+appender.file.type = File
+appender.file.name = file
+appender.file.fileName = target/camel-rxjava2-test.log
+appender.file.layout.type = PatternLayout
+appender.file.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n
+appender.stdout.type = Console
+appender.stdout.name = stdout
+appender.stdout.layout.type = PatternLayout
+appender.stdout.layout.pattern = %d [%-15.15t] %-5p %-30.30c{1} - %m%n
+rootLogger.level = INFO
+rootLogger.appenderRef.file.ref = file
+
+#rootLogger.appenderRef.stdout.ref = stdout
+#logger.debug.name = org.apache.camel.component.reactive.streams
+#logger.debug.level = DEBUG
+#logger.debug.additivity = true
diff --git a/components/pom.xml b/components/pom.xml
index 74b4e4c276f..485a8d862ff 100644
--- a/components/pom.xml
+++ b/components/pom.xml
@@ -251,6 +251,7 @@
     <module>camel-rss</module>
     <module>camel-ruby</module>
     <module>camel-rx</module>
+    <module>camel-rxjava2</module>
     <module>camel-sap-netweaver</module>
     <module>camel-saxon</module>
     <module>camel-salesforce</module>
diff --git a/parent/pom.xml b/parent/pom.xml
index e9fb482e9de..f053bb33296 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -598,6 +598,7 @@
     <rome-version>1.0</rome-version>
     <rxjava-version>1.3.8</rxjava-version>
     <rxjava2-version>2.1.13</rxjava2-version>
+    <rxjava2-extensions-version>0.19.0</rxjava2-extensions-version>
     <saaj-impl-version>1.3.2_2</saaj-impl-version>
     <saxon-bundle-version>9.8.0-10_1</saxon-bundle-version>
     <saxon-version>9.8.0-10</saxon-version>
@@ -1819,6 +1820,11 @@
         <artifactId>camel-reactor</artifactId>
         <version>${project.version}</version>
       </dependency>
+      <dependency>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>camel-rxjava2</artifactId>
+        <version>${project.version}</version>
+      </dependency>
       <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-rest-swagger</artifactId>
@@ -3258,6 +3264,11 @@
         <artifactId>camel-reactor-starter</artifactId>
         <version>${project.version}</version>
       </dependency>
+      <dependency>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>camel-rxjava2-starter</artifactId>
+        <version>${project.version}</version>
+      </dependency>
       <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-rest-swagger-starter</artifactId>
diff --git a/platforms/spring-boot/components-starter/camel-rxjava2-starter/pom.xml b/platforms/spring-boot/components-starter/camel-rxjava2-starter/pom.xml
new file mode 100644
index 00000000000..8eb528ef45f
--- /dev/null
+++ b/platforms/spring-boot/components-starter/camel-rxjava2-starter/pom.xml
@@ -0,0 +1,53 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>org.apache.camel</groupId>
+    <artifactId>components-starter</artifactId>
+    <version>2.22.0-SNAPSHOT</version>
+  </parent>
+  <artifactId>camel-rxjava2-starter</artifactId>
+  <packaging>jar</packaging>
+  <name>Spring-Boot Starter :: Camel :: RxJava2</name>
+  <description>Spring-Boot Starter for RxJava2 based back-end for Camel's reactive streams component</description>
+  <dependencies>
+    <dependency>
+      <groupId>org.springframework.boot</groupId>
+      <artifactId>spring-boot-starter</artifactId>
+      <version>${spring-boot-version}</version>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-rxjava2</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+    <!--START OF GENERATED CODE-->
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-core-starter</artifactId>
+    </dependency>
+    <dependency>
+      <groupId>org.apache.camel</groupId>
+      <artifactId>camel-spring-boot-starter</artifactId>
+    </dependency>
+    <!--END OF GENERATED CODE-->
+  </dependencies>
+</project>
diff --git a/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/LICENSE.txt b/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/LICENSE.txt
new file mode 100644
index 00000000000..6b0b1270ff0
--- /dev/null
+++ b/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/LICENSE.txt
@@ -0,0 +1,203 @@
+
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      ""License"" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      ""Licensor"" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      ""Legal Entity"" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      ""control"" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      ""You"" (or ""Your"") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      ""Source"" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      ""Object"" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      ""Work"" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      ""Derivative Works"" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      ""Contribution"" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, ""submitted""
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as ""Not a Contribution.""
+
+      ""Contributor"" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a ""NOTICE"" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an ""AS IS"" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets ""[]""
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same ""printed page"" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the ""License"");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an ""AS IS"" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
+
diff --git a/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/NOTICE.txt b/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/NOTICE.txt
new file mode 100644
index 00000000000..2e215bf2e6b
--- /dev/null
+++ b/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/NOTICE.txt
@@ -0,0 +1,11 @@
+   =========================================================================
+   ==  NOTICE file corresponding to the section 4 d of                    ==
+   ==  the Apache License, Version 2.0,                                   ==
+   ==  in this case for the Apache Camel distribution.                    ==
+   =========================================================================
+
+   This product includes software developed by
+   The Apache Software Foundation (http://www.apache.org/).
+
+   Please read the different LICENSE files present in the licenses directory of
+   this distribution.
diff --git a/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/spring.provides b/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/spring.provides
new file mode 100644
index 00000000000..1cea613c1e7
--- /dev/null
+++ b/platforms/spring-boot/components-starter/camel-rxjava2-starter/src/main/resources/META-INF/spring.provides
@@ -0,0 +1,17 @@
+## ---------------------------------------------------------------------------
+## Licensed to the Apache Software Foundation (ASF) under one or more
+## contributor license agreements.  See the NOTICE file distributed with
+## this work for additional information regarding copyright ownership.
+## The ASF licenses this file to You under the Apache License, Version 2.0
+## (the ""License""); you may not use this file except in compliance with
+## the License.  You may obtain a copy of the License at
+##
+##      http://www.apache.org/licenses/LICENSE-2.0
+##
+## Unless required by applicable law or agreed to in writing, software
+## distributed under the License is distributed on an ""AS IS"" BASIS,
+## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+## See the License for the specific language governing permissions and
+## limitations under the License.
+## ---------------------------------------------------------------------------
+provides: camel-rxjava2
diff --git a/platforms/spring-boot/components-starter/pom.xml b/platforms/spring-boot/components-starter/pom.xml
index dd6467deb0b..fbf27e1eba8 100644
--- a/platforms/spring-boot/components-starter/pom.xml
+++ b/platforms/spring-boot/components-starter/pom.xml
@@ -267,6 +267,7 @@
     <module>camel-rss-starter</module>
     <module>camel-ruby-starter</module>
     <module>camel-rx-starter</module>
+    <module>camel-rxjava2-starter</module>
     <module>camel-salesforce-starter</module>
     <module>camel-sap-netweaver-starter</module>
     <module>camel-saxon-starter</module>
diff --git a/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml b/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
index 86e7100f0e1..e32f3ed5362 100644
--- a/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
+++ b/platforms/spring-boot/spring-boot-dm/camel-spring-boot-dependencies/pom.xml
@@ -83,7 +83,7 @@
       <dependency>
         <groupId>com.dropbox.core</groupId>
         <artifactId>dropbox-core-sdk</artifactId>
-        <version>3.0.6</version>
+        <version>3.0.7</version>
       </dependency>
       <dependency>
         <groupId>com.github.dozermapper</groupId>
@@ -2304,6 +2304,16 @@
         <artifactId>camel-rx-starter</artifactId>
         <version>${project.version}</version>
       </dependency>
+      <dependency>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>camel-rxjava2</artifactId>
+        <version>${project.version}</version>
+      </dependency>
+      <dependency>
+        <groupId>org.apache.camel</groupId>
+        <artifactId>camel-rxjava2-starter</artifactId>
+        <version>${project.version}</version>
+      </dependency>
       <dependency>
         <groupId>org.apache.camel</groupId>
         <artifactId>camel-salesforce</artifactId>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1525748774:2018-05-08T11:06:14.971+0000:1525748774:2018-05-08T11:06:14.971+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2328

lb:1525748845:2018-05-08T11:07:25.885+0000:1525748845:2018-05-08T11:07:25.885+0000:Thx [~nferraro]"
0,CAMEL-10805,Bug,Minor,2.16.1,,"
None
",Resolved,Invalid,None,Unassigned,Anton,0,3,2017-02-08 08:43:54+00:00,2017-02-23 12:39:59+00:00,"JettyHttpComponent creates QueuedThreadPool instance in it's connect(HttpConsumer), but does not stop/shuts down it neither in disconnect(HttpConsumer) nor in doStop().


By default QueuedThreadPool operates with non-daemon threads (_daemon=false) and in case of gracefully shutdown, JVM will not be able to be stopped(process will still operates) due existence of these threads.",davsclaus:1486515660:2017-02-08T09:01:00.511+0000:1486515660:2017-02-08T09:01:00.511+0000:2.16.x is EOL. Can you test with a newer release and also newer Jetty version
0,CAMEL-10804,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Claus Ibsen,0,3,2017-02-08 07:57:16+00:00,2017-02-12 08:27:05+00:00,"We need a little example about salesforce as its not so easy to get started using.


There is a little start here
https://github.com/apache/camel/tree/master/examples/camel-example-twitter-salesforce","davsclaus:1486511852:2017-02-08T07:57:32.292+0000:1486511852:2017-02-08T07:57:32.292+0000:[~zregvart] I assume you can help with this
zregvart:1486514240:2017-02-08T08:37:20.831+0000:1486514240:2017-02-08T08:37:20.831+0000:Yes, its a complicated component and the documentation needs a bit of love. I think example would help.
githubbot:1486531012:2017-02-08T13:16:52.486+0000:1486531012:2017-02-08T13:16:52.486+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1452

    CAMEL-10804 Create a Salesforce example

    This adds configuration for `Camel Salesman` Connected App on Salesforce
    developer instance running under `Camelus Bactrianus`
    (cbactrianus@gmail.com) user.
    
    Given a Tweet's user uses its `name` as `Last Name` and `screenName` as
    custom property `Twitter Screen Name` to create a contact in the
    Developer Edition Salesforce instance. The `Twitter Screen Name` field
    is defined as unique so in order not to create duplicate Contacts an
    update-or-insert operation is performed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10804

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1452.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1452
    
----
commit 629d66e91f57c42d49596ac05ddeb6cb58e1745c
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-02-08T13:14:52Z

    CAMEL-10804 Create a Salesforce example
    
    This adds configuration for `Camel Salesman` Connected App on Salesforce
    developer instance running under `Camelus Bactrianus`
    (cbactrianus@gmail.com) user.
    
    Given a Tweet's user uses its `name` as `Last Name` and `screenName` as
    custom property `Twitter Screen Name` to create a contact in the
    Developer Edition Salesforce instance. The `Twitter Screen Name` field
    is defined as unique so in order not to create duplicate Contacts an
    update-or-insert operation is performed.

----

githubbot:1486544417:2017-02-08T17:00:17.818+0000:1486544417:2017-02-08T17:00:17.818+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1452

githubbot:1486544824:2017-02-08T17:07:04.387+0000:1486544824:2017-02-08T17:07:04.387+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1453

    CAMEL-10804 Create a Salesforce example

    Adds documentation to the example.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10804

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1453.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1453
    
----
commit 80deaac9e3dea34b5ccdc2e793e592ed1c301fa7
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-02-08T17:03:44Z

    CAMEL-10804 Create a Salesforce example
    
    Adds documentation to the example.

----

githubbot:1486545298:2017-02-08T17:14:58.818+0000:1486545298:2017-02-08T17:14:58.818+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1453
"
0,CAMEL-10803,Improvement,Major,2.19.0,,"
None
",Resolved,Won't Do,None,Unassigned,Zoran Regvart,0,3,2017-02-07 17:59:34+00:00,2021-04-11 08:10:14+00:00,"To facilitate reuse, the Undertow component should be based on http-common component.
The `UndertowComponent` should extend `HttpCommonComponent` and `UndertowEndpoint` should extend `HttpCommonEndpoint`.
Following that options defined in the http-common component should be also supported in the Undertow component.","githubbot:1486462008:2017-02-07T18:06:48.473+0000:1486462008:2017-02-07T18:06:48.473+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1450

    CAMEL-10803 Base undertow component on http-common

    # Please don't merge
    
    I would like some feedback on this first. Still to do:
    - [x] Make `UndertowComponent` and `UndertowEndpoint` extend `HttpCommonComponent` and `HttpCommonEndpoint`
    - [ ] Implement support for options from `http-common` component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10803

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1450.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1450
    
----

----

githubbot:1526006290:2018-05-11T10:38:10.346+0000:1526006290:2018-05-11T10:38:10.346+0000:zregvart closed pull request #1450: CAMEL-10803 Base undertow component on http-common
URL: https://github.com/apache/camel/pull/1450
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/components/camel-undertow/src/main/docs/undertow-component.adoc b/components/camel-undertow/src/main/docs/undertow-component.adoc
index 68fdea4fde9..5de51f9bdf5 100644
--- a/components/camel-undertow/src/main/docs/undertow-component.adoc
+++ b/components/camel-undertow/src/main/docs/undertow-component.adoc
@@ -38,7 +38,7 @@ You can append query options to the URI in the following format,
 
 
 // component options: START
-The Undertow component supports 4 options which are listed below.
+The Undertow component supports 8 options which are listed below.
 
 
 
@@ -48,6 +48,10 @@ The Undertow component supports 4 options which are listed below.
 | **undertowHttpBinding** (advanced) | To use a custom HttpBinding to control the mapping between Camel message and HttpClient. |  | UndertowHttpBinding
 | **sslContextParameters** (security) | To configure security using SSLContextParameters |  | SSLContextParameters
 | **hostOptions** (advanced) | To configure common options such as thread pools |  | UndertowHostOptions
+| **httpBinding** (advanced) | To use a custom HttpBinding to control the mapping between Camel message and HttpClient. |  | HttpBinding
+| **httpConfiguration** (advanced) | To use the shared HttpConfiguration as base configuration. |  | HttpConfiguration
+| **allowJavaSerialized Object** (advanced) | Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk. | false | boolean
+| **headerFilterStrategy** (filter) | To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter header to and from Camel message. |  | HeaderFilterStrategy
 | **resolveProperty Placeholders** (advanced) | Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders. | true | boolean
 |=======================================================================
 // component options: END
@@ -70,30 +74,63 @@ with the following path and query parameters:
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |=======================================================================
 | Name | Description | Default | Type
-| **httpURI** | *Required* The url of the HTTP endpoint to use. |  | URI
+| **httpUri** | *Required* The url of the HTTP endpoint to call. |  | URI
 |=======================================================================
 
-#### Query Parameters (17 parameters):
+#### Query Parameters (50 parameters):
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |=======================================================================
 | Name | Description | Default | Type
+| **chunked** (common) | If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response | true | boolean
+| **disableStreamCache** (common) | Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body. | false | boolean
+| **headerFilterStrategy** (common) | To use a custom HeaderFilterStrategy to filter header to and from Camel message. |  | HeaderFilterStrategy
+| **transferException** (common) | If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk. | false | boolean
+| **httpBinding** (common) | To use a custom HttpBinding to control the mapping between Camel message and HttpClient. |  | HttpBinding
+| **async** (consumer) | Configure the consumer to work in async mode | false | boolean
 | **bridgeErrorHandler** (consumer) | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN or ERROR level and ignored. | false | boolean
 | **httpMethodRestrict** (consumer) | Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT etc. Multiple methods can be specified separated by comma. |  | String
-| **matchOnUriPrefix** (consumer) | Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found. | true | Boolean
-| **optionsEnabled** (consumer) | Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off. | false | boolean
+| **matchOnUriPrefix** (consumer) | Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found. | false | boolean
+| **responseBufferSize** (consumer) | To use a custom buffer size on the javax.servlet.ServletResponse. |  | Integer
+| **eagerCheckContentAvailable** (consumer) | Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present. This can be turned on in case HTTP clients do not send streamed data. | false | boolean
 | **exceptionHandler** (consumer) | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN or ERROR level and ignored. |  | ExceptionHandler
 | **exchangePattern** (consumer) | Sets the exchange pattern when the consumer creates an exchange. |  | ExchangePattern
-| **cookieHandler** (producer) | Configure a cookie handler to maintain a HTTP session |  | CookieHandler
+| **optionsEnabled** (consumer) | Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off. | false | boolean
+| **traceEnabled** (consumer) | Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off. | false | boolean
+| **bridgeEndpoint** (producer) | If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint's URI for request. You may also set the option throwExceptionOnFailure to be false to let the HttpProducer send all the fault response back. | false | boolean
+| **connectionClose** (producer) | Specifies whether a Connection Close header must be added to HTTP Request. By default connectionClose is false. | false | boolean
+| **copyHeaders** (producer) | If this option is true then IN exchange headers will be copied to OUT exchange headers according to copy strategy. Setting this to false allows to only include the headers from the HTTP response (not propagating IN headers). | true | boolean
+| **httpMethod** (producer) | Configure the HTTP method to use. The HttpMethod header cannot override this option if set. |  | HttpMethods
+| **ignoreResponseBody** (producer) | If this option is true The http producer won't read response body and cache the input stream | false | boolean
 | **keepAlive** (producer) | Setting to ensure socket is not closed due to inactivity | true | Boolean
 | **options** (producer) | Sets additional channel options. The options that can be used are defined in org.xnio.Options. To configure from endpoint uri then prefix each option with option. such as option.close-abort=true&option.send-buffer=8192 |  | Map
+| **preserveHostHeader** (producer) | If the option is true HttpProducer will set the Host header to the value contained in the current exchange Host header useful in reverse proxy applications where you want the Host header received by the downstream server to reflect the URL called by the upstream client this allows applications which use the Host header to generate accurate URL's for a proxied service | false | boolean
 | **reuseAddresses** (producer) | Setting to facilitate socket multiplexing | true | Boolean
 | **tcpNoDelay** (producer) | Setting to improve TCP protocol performance | true | Boolean
-| **throwExceptionOnFailure** (producer) | If the option is true HttpProducer will ignore the Exchange.HTTP_URI header and use the endpoint's URI for request. You may also set the option throwExceptionOnFailure to be false to let the producer send all the fault response back. | true | Boolean
-| **transferException** (producer) | Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code. | false | Boolean
-| **headerFilterStrategy** (advanced) | To use a custom HeaderFilterStrategy to filter header to and from Camel message. |  | HeaderFilterStrategy
+| **throwExceptionOnFailure** (producer) | Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code. | true | boolean
+| **cookieHandler** (producer) | Configure a cookie handler to maintain a HTTP session |  | CookieHandler
+| **okStatusCodeRange** (producer) | The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included. | 200-299 | String
+| **urlRewrite** (producer) | Refers to a custom org.apache.camel.component.http.UrlRewrite which allows you to rewrite urls when you bridge/proxy endpoints. See more details at http://camel.apache.org/urlrewrite.html |  | UrlRewrite
+| **mapHttpMessageBody** (advanced) | If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping. | true | boolean
+| **mapHttpMessageFormUrl EncodedBody** (advanced) | If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping. | true | boolean
+| **mapHttpMessageHeaders** (advanced) | If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping. | true | boolean
 | **synchronous** (advanced) | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported). | false | boolean
 | **undertowHttpBinding** (advanced) | To use a custom UndertowHttpBinding to control the mapping between Camel message and undertow. |  | UndertowHttpBinding
+| **proxyAuthDomain** (proxy) | Proxy authentication domain to use with NTML |  | String
+| **proxyAuthHost** (proxy) | Proxy authentication host |  | String
+| **proxyAuthMethod** (proxy) | Proxy authentication method to use |  | String
+| **proxyAuthPassword** (proxy) | Proxy authentication password |  | String
+| **proxyAuthPort** (proxy) | Proxy authentication port |  | int
+| **proxyAuthScheme** (proxy) | Proxy authentication scheme to use |  | String
+| **proxyAuthUsername** (proxy) | Proxy authentication username |  | String
+| **proxyHost** (proxy) | Proxy hostname to use |  | String
+| **proxyPort** (proxy) | Proxy port to use |  | int
+| **authDomain** (security) | Authentication domain to use with NTML |  | String
+| **authHost** (security) | Authentication host to use with NTML |  | String
+| **authMethod** (security) | Authentication methods allowed to use as a comma separated list of values Basic Digest or NTLM. |  | String
+| **authMethodPriority** (security) | Which authentication method to prioritize to use either as Basic Digest or NTLM. |  | String
+| **authPassword** (security) | Authentication password |  | String
+| **authUsername** (security) | Authentication username |  | String
 | **sslContextParameters** (security) | To configure security using SSLContextParameters |  | SSLContextParameters
 |=======================================================================
 // endpoint options: END
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
index 6b28f2a5ae2..e670d00e1df 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/DefaultUndertowHttpBinding.java
@@ -162,9 +162,9 @@ public void populateCamelHeaders(HttpServerExchange httpExchange, Map<String, Ob
 
         String path = httpExchange.getRequestPath();
         UndertowEndpoint endpoint = (UndertowEndpoint) exchange.getFromEndpoint();
-        if (endpoint.getHttpURI() != null) {
+        if (ObjectHelper.isNotEmpty(endpoint.getHttpUri())) {
             // need to match by lower case as we want to ignore case on context-path
-            String endpointPath = endpoint.getHttpURI().getPath();
+            String endpointPath = endpoint.getHttpUri().getPath();
             String matchPath = path.toLowerCase(Locale.US);
             String match = endpointPath.toLowerCase(Locale.US);
             if (match != null && matchPath.startsWith(match)) {
@@ -285,7 +285,7 @@ public Object toHttpResponse(HttpServerExchange httpExchange, Message message) t
 
         int code = message.getHeader(Exchange.HTTP_RESPONSE_CODE, defaultCode, int.class);
 
-        httpExchange.setResponseCode(code);
+        httpExchange.setStatusCode(code);
 
         TypeConverter tc = message.getExchange().getContext().getTypeConverter();
 
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/RestUndertowHttpBinding.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/RestUndertowHttpBinding.java
index c99487153f4..0f83479f7f1 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/RestUndertowHttpBinding.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/RestUndertowHttpBinding.java
@@ -36,7 +36,7 @@ public void populateCamelHeaders(HttpServerExchange httpExchange, Map<String, Ob
         // so we need to map those placeholders with data from the incoming request context path
 
         UndertowEndpoint endpoint = (UndertowEndpoint) exchange.getFromEndpoint();
-        String consumerPath = endpoint.getHttpURI().getPath();
+        String consumerPath = endpoint.getHttpUri().getPath();
 
         if (useRestMatching(consumerPath)) {
 
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java
index d9c648535fb..d4d9a0c9d81 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java
@@ -117,7 +117,7 @@ public void failed(final IOException e) {
         this.endpoint = endpoint;
         this.request = request;
         this.body = body;
-        throwExceptionOnFailure = endpoint.getThrowExceptionOnFailure();
+        throwExceptionOnFailure = endpoint.isThrowExceptionOnFailure();
     }
 
     @Override
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java
index 09d2ee05fce..ac29d5e65c2 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowComponent.java
@@ -28,7 +28,7 @@
 import org.apache.camel.Endpoint;
 import org.apache.camel.Processor;
 import org.apache.camel.Producer;
-import org.apache.camel.impl.UriEndpointComponent;
+import org.apache.camel.http.common.HttpCommonComponent;
 import org.apache.camel.spi.Metadata;
 import org.apache.camel.spi.RestApiConsumerFactory;
 import org.apache.camel.spi.RestConfiguration;
@@ -42,15 +42,11 @@
 import org.apache.camel.util.URISupport;
 import org.apache.camel.util.UnsafeUriCharactersEncoder;
 import org.apache.camel.util.jsse.SSLContextParameters;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * Represents the component that manages {@link UndertowEndpoint}.
  */
-public class UndertowComponent extends UriEndpointComponent implements RestConsumerFactory, RestApiConsumerFactory, RestProducerFactory {
-    private static final Logger LOG = LoggerFactory.getLogger(UndertowEndpoint.class);
-
+public class UndertowComponent extends HttpCommonComponent implements RestConsumerFactory, RestApiConsumerFactory, RestProducerFactory {
     private Map<UndertowHostKey, UndertowHost> undertowRegistry = new ConcurrentHashMap<UndertowHostKey, UndertowHost>();
 
     @Metadata(label = ""advanced"")
@@ -100,13 +96,15 @@ protected Endpoint createEndpoint(String uri, String remaining, Map<String, Obje
                         uriHttpUriAddress.getQuery(),
                         uriHttpUriAddress.getFragment()),
                 parameters);
-        endpoint.setHttpURI(httpUri);
+
+        // the one set via createEndpointInstance is null, we need to set the value now
+        endpoint.setHttpUri(httpUri);
 
         return endpoint;
     }
 
     protected UndertowEndpoint createEndpointInstance(URI endpointUri, UndertowComponent component) throws URISyntaxException {
-        return new UndertowEndpoint(endpointUri.toString(), component);
+        return new UndertowEndpoint(endpointUri.toString(), component, null);
     }
 
     @Override
@@ -270,7 +268,7 @@ protected void doStart() throws Exception {
     }
 
     public void registerConsumer(UndertowConsumer consumer) {
-        URI uri = consumer.getEndpoint().getHttpURI();
+        URI uri = consumer.getEndpoint().getHttpUri();
         UndertowHostKey key = new UndertowHostKey(uri.getHost(), uri.getPort(), consumer.getEndpoint().getSslContext());
         UndertowHost host = undertowRegistry.get(key);
         if (host == null) {
@@ -282,7 +280,7 @@ public void registerConsumer(UndertowConsumer consumer) {
     }
 
     public void unregisterConsumer(UndertowConsumer consumer) {
-        URI uri = consumer.getEndpoint().getHttpURI();
+        URI uri = consumer.getEndpoint().getHttpUri();
         UndertowHostKey key = new UndertowHostKey(uri.getHost(), uri.getPort(), consumer.getEndpoint().getSslContext());
         UndertowHost host = undertowRegistry.get(key);
         host.unregisterHandler(consumer.getHttpHandlerRegistrationInfo());
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowConsumer.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowConsumer.java
index 817eb6e2f38..ebb4bc50486 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowConsumer.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowConsumer.java
@@ -17,9 +17,14 @@
 package org.apache.camel.component.undertow;
 
 import java.io.IOException;
+import java.io.InputStream;
 import java.nio.ByteBuffer;
+import java.nio.channels.Channels;
+import java.nio.channels.ReadableByteChannel;
 
 import io.undertow.Handlers;
+import io.undertow.io.IoCallback;
+import io.undertow.io.Sender;
 import io.undertow.server.HttpHandler;
 import io.undertow.server.HttpServerExchange;
 import io.undertow.server.handlers.form.EagerFormParsingHandler;
@@ -28,18 +33,24 @@
 import io.undertow.util.Methods;
 import io.undertow.util.MimeMappings;
 import io.undertow.util.StatusCodes;
+
 import org.apache.camel.Exchange;
+import org.apache.camel.InvalidPayloadException;
+import org.apache.camel.Message;
 import org.apache.camel.Processor;
 import org.apache.camel.TypeConverter;
 import org.apache.camel.impl.DefaultConsumer;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.xnio.IoUtils;
 
 /**
  * The Undertow consumer which is also an Undertow HttpHandler implementation to handle incoming request.
  */
 public class UndertowConsumer extends DefaultConsumer implements HttpHandler {
 
+    static final int CHUNK_BUFF_SIZE = 1024 * 1024;
+
     private static final Logger LOG = LoggerFactory.getLogger(UndertowConsumer.class);
 
     private HttpHandlerRegistrationInfo registrationInfo;
@@ -70,9 +81,9 @@ public HttpHandlerRegistrationInfo getHttpHandlerRegistrationInfo() {
             UndertowEndpoint endpoint = getEndpoint();
 
             registrationInfo = new HttpHandlerRegistrationInfo();
-            registrationInfo.setUri(endpoint.getHttpURI());
+            registrationInfo.setUri(endpoint.getHttpUri());
             registrationInfo.setMethodRestrict(endpoint.getHttpMethodRestrict());
-            registrationInfo.setMatchOnUriPrefix(endpoint.getMatchOnUriPrefix());
+            registrationInfo.setMatchOnUriPrefix(endpoint.isMatchOnUriPrefix());
         }
         return registrationInfo;
     }
@@ -88,10 +99,12 @@ public HttpHandler getHttpHandler() {
     public void handleRequest(HttpServerExchange httpExchange) throws Exception {
         HttpString requestMethod = httpExchange.getRequestMethod();
 
-        if (Methods.OPTIONS.equals(requestMethod) && !getEndpoint().isOptionsEnabled()) {
+        final UndertowEndpoint endpoint = getEndpoint();
+        final Sender responseSender = httpExchange.getResponseSender();
+        if (Methods.OPTIONS.equals(requestMethod) && !endpoint.isOptionsEnabled()) {
             String allowedMethods;
-            if (getEndpoint().getHttpMethodRestrict() != null) {
-                allowedMethods = ""OPTIONS,"" + getEndpoint().getHttpMethodRestrict();
+            if (endpoint.getHttpMethodRestrict() != null) {
+                allowedMethods = ""OPTIONS,"" + endpoint.getHttpMethodRestrict();
             } else {
                 allowedMethods = ""GET,HEAD,POST,PUT,DELETE,TRACE,OPTIONS,CONNECT,PATCH"";
             }
@@ -100,7 +113,7 @@ public void handleRequest(HttpServerExchange httpExchange) throws Exception {
             httpExchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_TYPE, MimeMappings.DEFAULT_MIME_MAPPINGS.get(""txt""));
             httpExchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_LENGTH, 0);
             httpExchange.getResponseHeaders().put(Headers.ALLOW, allowedMethods);
-            httpExchange.getResponseSender().close();
+            responseSender.close();
             return;
         }
 
@@ -112,7 +125,7 @@ public void handleRequest(HttpServerExchange httpExchange) throws Exception {
 
         //create new Exchange
         //binding is used to extract header and payload(if available)
-        Exchange camelExchange = getEndpoint().createExchange(httpExchange);
+        Exchange camelExchange = endpoint.createExchange(httpExchange);
 
         //Unit of Work to process the Exchange
         createUoW(camelExchange);
@@ -125,27 +138,130 @@ public void handleRequest(HttpServerExchange httpExchange) throws Exception {
         }
 
         Object body = getResponseBody(httpExchange, camelExchange);
-        TypeConverter tc = getEndpoint().getCamelContext().getTypeConverter();
+        TypeConverter tc = endpoint.getCamelContext().getTypeConverter();
 
         if (body == null) {
             LOG.trace(""No payload to send as reply for exchange: "" + camelExchange);
             httpExchange.getResponseHeaders().put(ExchangeHeaders.CONTENT_TYPE, MimeMappings.DEFAULT_MIME_MAPPINGS.get(""txt""));
-            httpExchange.getResponseSender().send(""No response available"");
+            responseSender.send(""No response available"");
+
+            return;
+        }
+
+        final Message message = fetchMessage(camelExchange);
+        final boolean chunked = message.getHeader(Exchange.HTTP_CHUNKED, endpoint.isChunked(), Boolean.class);
+        if (chunked) {
+            sendChunked(responseSender, message);
         } else {
             ByteBuffer bodyAsByteBuffer = tc.convertTo(ByteBuffer.class, body);
-            httpExchange.getResponseSender().send(bodyAsByteBuffer);
+            responseSender.send(bodyAsByteBuffer);
         }
-        httpExchange.getResponseSender().close();
     }
 
-    private Object getResponseBody(HttpServerExchange httpExchange, Exchange camelExchange) throws IOException {
-        Object result;
-        if (camelExchange.hasOut()) {
-            result = getEndpoint().getUndertowHttpBinding().toHttpResponse(httpExchange, camelExchange.getOut());
+    /**
+     * Sends the given message body as HTTP/1.1 chunked transfer.
+     *
+     * @param responseSender
+     *            Undertow {@link Sender} to transfer the body to
+     * @param message
+     *            Camel message from which the body is sent
+     * @throws InvalidPayloadException
+     *             if the message does not contain a body of {@link ReadableByteChannel} or {@link InputStream} type
+     * @throws IOException
+     */
+    void sendChunked(final Sender responseSender, final Message message) throws InvalidPayloadException, IOException {
+        final Object body = message.getBody();
+
+        if (body instanceof ReadableByteChannel) {
+            sendChunked(responseSender, (ReadableByteChannel) body);
         } else {
-            result = getEndpoint().getUndertowHttpBinding().toHttpResponse(httpExchange, camelExchange.getIn());
+            final InputStream stream = message.getMandatoryBody(InputStream.class);
+
+            sendChunked(responseSender, Channels.newChannel(stream));
         }
-        return result;
+    }
+
+    /**
+     * Sends the bytes received on the {@link ReadableByteChannel} to the exchange using HTTP/1.1 chuncked transfer.
+     * 
+     * @param httpExchange
+     *            Undertow HTTP exchange to transfer upon
+     * @param channel
+     *            the channel on which the response to be sent resides
+     * @throws IOException
+     */
+    void sendChunked(final Sender responseSender, final ReadableByteChannel channel) throws IOException {
+        final ByteBuffer buffy = ByteBuffer.allocate(CHUNK_BUFF_SIZE);
+
+        final int read = channel.read(buffy);
+        if (read == -1) {
+            return;
+        }
+
+        buffy.flip();
+        final IoCallback callback = new IoCallback() {
+            @Override
+            public void onComplete(final HttpServerExchange exchange, final Sender sender) {
+                if (buffy.hasRemaining()) {
+                    sender.send(buffy, this);
+                } else {
+                    buffy.clear();
+
+                    try {
+                        final int read = channel.read(buffy);
+                        if (read == -1) {
+                            responseSender.close();
+                            return;
+                        }
+
+                        buffy.flip();
+                        sender.send(buffy, this);
+                    } catch (final IOException e) {
+                        try {
+                            handleException(""Unable to read from the given body"", e);
+                        } finally {
+                            exchange.endExchange();
+                            IoUtils.safeClose(exchange.getConnection());
+                        }
+                    }
+                }
+            }
+
+            @Override
+            public void onException(final HttpServerExchange exchange, final Sender sender,
+                    final IOException exception) {
+                try {
+                    handleException(""Unable to send response to client"", exception);
+                } finally {
+                    exchange.endExchange();
+                    IoUtils.safeClose(exchange.getConnection());
+                }
+            }
+        };
+
+        responseSender.send(buffy, callback);
+    }
+
+    /**
+     * Returns the OUT, or if not present the IN message.
+     *
+     * @param exchange
+     *            exchange containing IN or OUT messages
+     * @return OUT or IN message if OUT message is not present
+     */
+    Message fetchMessage(final Exchange exchange) {
+        if (exchange.hasOut()) {
+            return exchange.getOut();
+        } else {
+            return exchange.getIn();
+        }
+    }
+
+    Object getResponseBody(HttpServerExchange httpExchange, Exchange camelExchange) throws IOException {
+        final Message message = fetchMessage(camelExchange);
+        final UndertowHttpBinding undertowHttpBinding = getEndpoint().getUndertowHttpBinding();
+
+        return undertowHttpBinding.toHttpResponse(httpExchange, message);
     }
 
 }
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java
index dcd08cef015..2b946c81389 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowEndpoint.java
@@ -20,9 +20,11 @@
 import java.net.URISyntaxException;
 import java.util.Locale;
 import java.util.Map;
+
 import javax.net.ssl.SSLContext;
 
 import io.undertow.server.HttpServerExchange;
+
 import org.apache.camel.AsyncEndpoint;
 import org.apache.camel.Consumer;
 import org.apache.camel.Exchange;
@@ -30,14 +32,10 @@
 import org.apache.camel.PollingConsumer;
 import org.apache.camel.Processor;
 import org.apache.camel.Producer;
-import org.apache.camel.http.common.cookie.CookieHandler;
-import org.apache.camel.impl.DefaultEndpoint;
-import org.apache.camel.spi.HeaderFilterStrategy;
+import org.apache.camel.http.common.HttpCommonEndpoint;
 import org.apache.camel.spi.HeaderFilterStrategyAware;
-import org.apache.camel.spi.Metadata;
 import org.apache.camel.spi.UriEndpoint;
 import org.apache.camel.spi.UriParam;
-import org.apache.camel.spi.UriPath;
 import org.apache.camel.util.jsse.SSLContextParameters;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -45,34 +43,23 @@
 import org.xnio.OptionMap;
 import org.xnio.Options;
 
+
 /**
  * The undertow component provides HTTP-based endpoints for consuming and producing HTTP requests.
  */
 @UriEndpoint(firstVersion = ""2.16.0"", scheme = ""undertow"", title = ""Undertow"", syntax = ""undertow:httpURI"",
         consumerClass = UndertowConsumer.class, label = ""http"", lenientProperties = true)
-public class UndertowEndpoint extends DefaultEndpoint implements AsyncEndpoint, HeaderFilterStrategyAware {
+public class UndertowEndpoint extends HttpCommonEndpoint implements AsyncEndpoint, HeaderFilterStrategyAware {
 
     private static final Logger LOG = LoggerFactory.getLogger(UndertowEndpoint.class);
     private UndertowComponent component;
     private SSLContext sslContext;
     private OptionMap optionMap;
 
-    @UriPath @Metadata(required = ""true"")
-    private URI httpURI;
     @UriParam(label = ""advanced"")
     private UndertowHttpBinding undertowHttpBinding;
-    @UriParam(label = ""advanced"")
-    private HeaderFilterStrategy headerFilterStrategy = new UndertowHeaderFilterStrategy();
     @UriParam(label = ""security"")
     private SSLContextParameters sslContextParameters;
-    @UriParam(label = ""consumer"")
-    private String httpMethodRestrict;
-    @UriParam(label = ""consumer"", defaultValue = ""true"")
-    private Boolean matchOnUriPrefix = true;
-    @UriParam(label = ""producer"", defaultValue = ""true"")
-    private Boolean throwExceptionOnFailure = Boolean.TRUE;
-    @UriParam(label = ""producer"", defaultValue = ""false"")
-    private Boolean transferException = Boolean.FALSE;
     @UriParam(label = ""producer"", defaultValue = ""true"")
     private Boolean keepAlive = Boolean.TRUE;
     @UriParam(label = ""producer"", defaultValue = ""true"")
@@ -81,15 +68,14 @@
     private Boolean reuseAddresses = Boolean.TRUE;
     @UriParam(label = ""producer"", prefix = ""option."", multiValue = true)
     private Map<String, Object> options;
-    @UriParam(label = ""consumer"",
-            description = ""Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off."")
-    private boolean optionsEnabled;
-    @UriParam(label = ""producer"")
-    private CookieHandler cookieHandler;
-
-    public UndertowEndpoint(String uri, UndertowComponent component) throws URISyntaxException {
-        super(uri, component);
+
+    public UndertowEndpoint(String uri, UndertowComponent component, URI httpUri) throws URISyntaxException {
+        super(uri, component, httpUri);
         this.component = component;
+
+        // set Undertow component defaults
+        setHeaderFilterStrategy(new UndertowHeaderFilterStrategy());
+        setMatchOnUriPrefix(true);
     }
 
     @Override
@@ -140,50 +126,6 @@ public SSLContext getSslContext() {
         return sslContext;
     }
 
-    public URI getHttpURI() {
-        return httpURI;
-    }
-
-    /**
-     * The url of the HTTP endpoint to use.
-     */
-    public void setHttpURI(URI httpURI) {
-        this.httpURI = httpURI;
-    }
-
-    public String getHttpMethodRestrict() {
-        return httpMethodRestrict;
-    }
-
-    /**
-     * Used to only allow consuming if the HttpMethod matches, such as GET/POST/PUT etc. Multiple methods can be specified separated by comma.
-     */
-    public void setHttpMethodRestrict(String httpMethodRestrict) {
-        this.httpMethodRestrict = httpMethodRestrict;
-    }
-
-    public Boolean getMatchOnUriPrefix() {
-        return matchOnUriPrefix;
-    }
-
-    /**
-     * Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found.
-     */
-    public void setMatchOnUriPrefix(Boolean matchOnUriPrefix) {
-        this.matchOnUriPrefix = matchOnUriPrefix;
-    }
-
-    public HeaderFilterStrategy getHeaderFilterStrategy() {
-        return headerFilterStrategy;
-    }
-
-    /**
-     * To use a custom HeaderFilterStrategy to filter header to and from Camel message.
-     */
-    public void setHeaderFilterStrategy(HeaderFilterStrategy headerFilterStrategy) {
-        this.headerFilterStrategy = headerFilterStrategy;
-    }
-
     public SSLContextParameters getSslContextParameters() {
         return sslContextParameters;
     }
@@ -195,36 +137,12 @@ public void setSslContextParameters(SSLContextParameters sslContextParameters) {
         this.sslContextParameters = sslContextParameters;
     }
 
-    public Boolean getThrowExceptionOnFailure() {
-        return throwExceptionOnFailure;
-    }
-
-    /**
-     * If the option is true, HttpProducer will ignore the Exchange.HTTP_URI header, and use the endpoint's URI for request.
-     * You may also set the option throwExceptionOnFailure to be false to let the producer send all the fault response back.
-     */
-    public void setThrowExceptionOnFailure(Boolean throwExceptionOnFailure) {
-        this.throwExceptionOnFailure = throwExceptionOnFailure;
-    }
-
-    public Boolean getTransferException() {
-        return transferException;
-    }
-
-    /**
-     * Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server.
-     * This allows you to get all responses regardless of the HTTP status code.
-     */
-    public void setTransferException(Boolean transferException) {
-        this.transferException = transferException;
-    }
-
     public UndertowHttpBinding getUndertowHttpBinding() {
         if (undertowHttpBinding == null) {
             // create a new binding and use the options from this endpoint
             undertowHttpBinding = new DefaultUndertowHttpBinding();
             undertowHttpBinding.setHeaderFilterStrategy(getHeaderFilterStrategy());
-            undertowHttpBinding.setTransferException(getTransferException());
+            undertowHttpBinding.setTransferException(isTransferException());
         }
         return undertowHttpBinding;
     }
@@ -281,28 +199,6 @@ public void setOptions(Map<String, Object> options) {
         this.options = options;
     }
 
-    public boolean isOptionsEnabled() {
-        return optionsEnabled;
-    }
-
-    /**
-     * Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off.
-     */
-    public void setOptionsEnabled(boolean optionsEnabled) {
-        this.optionsEnabled = optionsEnabled;
-    }
-
-    public CookieHandler getCookieHandler() {
-        return cookieHandler;
-    }
-
-    /**
-     * Configure a cookie handler to maintain a HTTP session
-     */
-    public void setCookieHandler(CookieHandler cookieHandler) {
-        this.cookieHandler = cookieHandler;
-    }
-
     @Override
     protected void doStart() throws Exception {
         super.doStart();
diff --git a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowHelper.java b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowHelper.java
index 3500cae6c12..8b9f60e9a07 100644
--- a/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowHelper.java
+++ b/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowHelper.java
@@ -48,7 +48,7 @@ public static String createURL(Exchange exchange, UndertowEndpoint endpoint) {
         // rest producer may provide an override url to be used which we should discard if using (hence the remove)
         String uri = (String) exchange.getIn().removeHeader(Exchange.REST_HTTP_URI);
         if (uri == null) {
-            uri = endpoint.getHttpURI().toASCIIString();
+            uri = endpoint.getHttpUri().toASCIIString();
         }
 
         // resolve placeholders in uri
@@ -98,7 +98,7 @@ public static URI createURI(Exchange exchange, String url, UndertowEndpoint endp
             queryString = exchange.getIn().getHeader(Exchange.HTTP_QUERY, String.class);
         }
         if (queryString == null) {
-            queryString = endpoint.getHttpURI().getRawQuery();
+            queryString = endpoint.getHttpUri().getRawQuery();
         }
         // We should user the query string from the HTTP_URI header
         if (queryString == null) {
@@ -117,7 +117,9 @@ public static void appendHeader(Map<String, Object> headers, String key, Object
             Object existing = headers.get(key);
             List<Object> list;
             if (existing instanceof List) {
-                list = (List<Object>) existing;
+                @SuppressWarnings(""unchecked"")
+                final List<Object> tmp = (List<Object>) existing;
+                list = tmp;
             } else {
                 list = new ArrayList<Object>();
                 list.add(existing);
@@ -149,7 +151,7 @@ public static HttpString createMethod(Exchange exchange, UndertowEndpoint endpoi
             queryString = uri.getQuery();
         }
         if (queryString == null) {
-            queryString = endpoint.getHttpURI().getRawQuery();
+            queryString = endpoint.getHttpUri().getRawQuery();
         }
 
         // compute what method to use either GET or POST
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerSendChunkedResponseTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerSendChunkedResponseTest.java
new file mode 100644
index 00000000000..38fe62e2b39
--- /dev/null
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowConsumerSendChunkedResponseTest.java
@@ -0,0 +1,140 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.component.undertow;
+
+import java.io.BufferedInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.Socket;
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+
+import org.apache.camel.Exchange;
+import org.apache.camel.Processor;
+import org.apache.camel.builder.RouteBuilder;
+import org.junit.Before;
+import org.junit.Test;
+
+public class UndertowConsumerSendChunkedResponseTest extends BaseUndertowTest {
+
+    private final class DummyInputStream extends InputStream {
+        int c;
+
+        @Override
+        public int read() throws IOException {
+            if (c < TRANSFER_SIZE) {
+                return Math.abs(c++) % 255;
+            } else {
+                return -1;
+            }
+        }
+    }
+
+    static final int BUFFER_SIZE = 8192;
+
+    static final int TRANSFER_SIZE = BUFFER_SIZE * 2 + BUFFER_SIZE / 2;
+
+    private byte[] expected;
+
+    @Before
+    public void calculateExpectedDigest() throws NoSuchAlgorithmException, IOException {
+        MessageDigest digest = MessageDigest.getInstance(""SHA1"");
+
+        int read = -1;
+        byte[] buffy = new byte[64 * 1024];
+
+        try (InputStream in = new DummyInputStream()) {
+            while ((read = in.read(buffy)) != -1) {
+                digest.update(buffy, 0, read);
+            }
+        }
+
+        expected = digest.digest();
+    }
+
+    @Test
+    public void shouldTransferInChunks() throws IOException, NoSuchAlgorithmException {
+        int chunkLength = 0;
+        int sumChunkLength = 0;
+
+        MessageDigest received = MessageDigest.getInstance(""SHA1"");
+
+        try (Socket socket = new Socket(""localhost"", getPort());
+                OutputStream out = socket.getOutputStream();
+                InputStream in = socket.getInputStream()) {
+            out.write(""GET /chunked HTTP/1.1\r\n\r\n"".getBytes());
+
+            int read = -1;
+            while ((read = in.read()) != -1) {
+                if (read == '\r' && in.read() == '\n' && in.read() == '\r' && in.read() == '\n') {
+                    // we have reached end of headers
+                    break;
+                }
+            }
+
+            int data;
+            while ((data = in.read()) != -1) {
+                if (Character.isDigit(data)) {
+                    chunkLength = chunkLength * 16 + Character.digit(data, 16);
+                    // still reading chunk length
+                    continue;
+                } else {
+                    sumChunkLength += chunkLength;
+                }
+
+                if (chunkLength == 0) {
+                    break;
+                }
+
+                // read the '\n', '\r' was read by the while loop condition and it did not pass isDigit test
+                assertEquals(""The last byte between two chunks should be `\\n`"", '\n', in.read());
+
+                byte[] buffy = new byte[chunkLength];
+                chunkLength = 0;
+
+                read = in.read(buffy);
+                assertEquals(""Should have read the chunk size"", '\r', chunkLength, read);
+
+                received.update(buffy);
+
+                assertEquals(""The second to last byte at the end of the chunk should be `\\r`"", '\r', in.read());
+                assertEquals(""The last byte at the end of the chunk should be `\\n`"", '\n', in.read());
+            }
+        }
+
+        assertEquals(""Sum of all chunks should be the transfered length"", TRANSFER_SIZE, sumChunkLength);
+        assertEquals(""The very last chunk should be 0-length"", 0, chunkLength);
+        assertArrayEquals(""The digest of transfered bytes should be as expected"", expected, received.digest());
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                from(""undertow:http://localhost:{{port}}/chunked?chunked=true"").process(new Processor() {
+                    @Override
+                    public void process(final Exchange exchange) throws Exception {
+                        exchange.getIn().setBody(new BufferedInputStream(new DummyInputStream(), BUFFER_SIZE));
+                    }
+                });
+            }
+        };
+    }
+
+}
diff --git a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java
index 57cf2c696eb..fc890bce49a 100644
--- a/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java
+++ b/components/camel-undertow/src/test/java/org/apache/camel/component/undertow/UndertowHttpProducerTest.java
@@ -18,13 +18,17 @@
 
 import org.apache.camel.Exchange;
 import org.apache.camel.builder.RouteBuilder;
+import org.apache.camel.component.mock.MockEndpoint;
 import org.junit.Test;
 
 public class UndertowHttpProducerTest extends BaseUndertowTest {
 
     @Test
     public void testHttpSimple() throws Exception {
-        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""GET"");
+        final MockEndpoint mock = getMockEndpoint(""mock:input"");
+
+        mock.expectedHeaderReceived(Exchange.HTTP_METHOD, ""GET"");
+        mock.expectedHeaderReceived(""Host"", ""localhost:"" + getPort());
 
         String out = template.requestBody(""http://localhost:{{port}}/foo"", null, String.class);
         assertEquals(""Bye World"", out);
@@ -34,7 +38,10 @@ public void testHttpSimple() throws Exception {
 
     @Test
     public void testHttpSimpleHeader() throws Exception {
-        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""POST"");
+        final MockEndpoint mock = getMockEndpoint(""mock:input"");
+
+        mock.expectedHeaderReceived(Exchange.HTTP_METHOD, ""POST"");
+        mock.expectedHeaderReceived(""Host"", ""localhost:"" + getPort());
 
         String out = template.requestBodyAndHeader(""http://localhost:{{port}}/foo"", null, Exchange.HTTP_METHOD, ""POST"", String.class);
         assertEquals(""Bye World"", out);
@@ -44,9 +51,11 @@ public void testHttpSimpleHeader() throws Exception {
 
     @Test
     public void testHttpSimpleHeaderAndBody() throws Exception {
+        final MockEndpoint mock = getMockEndpoint(""mock:input"");
 
-        getMockEndpoint(""mock:input"").expectedBodiesReceived(""Hello World"");
-        getMockEndpoint(""mock:input"").expectedHeaderReceived(Exchange.HTTP_METHOD, ""POST"");
+        mock.expectedBodiesReceived(""Hello World"");
+        mock.expectedHeaderReceived(Exchange.HTTP_METHOD, ""POST"");
+        mock.expectedHeaderReceived(""Host"", ""localhost:"" + getPort());
 
         String out = template.requestBodyAndHeader(""http://localhost:{{port}}/foo"", ""Hello World"", Exchange.HTTP_METHOD, ""POST"", String.class);
         assertEquals(""Bye World"", out);
diff --git a/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java b/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java
index 04f494ef409..4d0edddcf6c 100644
--- a/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java
+++ b/platforms/spring-boot/components-starter/camel-undertow-starter/src/main/java/org/apache/camel/component/undertow/springboot/UndertowComponentConfiguration.java
@@ -17,6 +17,9 @@
 package org.apache.camel.component.undertow.springboot;
 
 import org.apache.camel.component.undertow.UndertowHttpBinding;
+import org.apache.camel.http.common.HttpBinding;
+import org.apache.camel.http.common.HttpConfiguration;
+import org.apache.camel.spi.HeaderFilterStrategy;
 import org.apache.camel.util.jsse.SSLContextParameters;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.NestedConfigurationProperty;
@@ -45,6 +48,31 @@
      * To configure common options such as thread pools
      */
     private UndertowHostOptionsNestedConfiguration hostOptions;
+    /**
+     * To use a custom HttpBinding to control the mapping between Camel message
+     * and HttpClient.
+     */
+    @NestedConfigurationProperty
+    private HttpBinding httpBinding;
+    /**
+     * To use the shared HttpConfiguration as base configuration.
+     */
+    @NestedConfigurationProperty
+    private HttpConfiguration httpConfiguration;
+    /**
+     * Whether to allow java serialization when a request uses
+     * context-type=application/x-java-serialized-object. This is by default
+     * turned off. If you enable this then be aware that Java will deserialize
+     * the incoming data from the request to Java and that can be a potential
+     * security risk.
+     */
+    private Boolean allowJavaSerializedObject = false;
+    /**
+     * To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter
+     * header to and from Camel message.
+     */
+    @NestedConfigurationProperty
+    private HeaderFilterStrategy headerFilterStrategy;
     /**
      * Whether the component should resolve property placeholders on itself when
      * starting. Only properties which are of String type can use property
@@ -78,6 +106,39 @@ public void setHostOptions(
         this.hostOptions = hostOptions;
     }
 
+    public HttpBinding getHttpBinding() {
+        return httpBinding;
+    }
+
+    public void setHttpBinding(HttpBinding httpBinding) {
+        this.httpBinding = httpBinding;
+    }
+
+    public HttpConfiguration getHttpConfiguration() {
+        return httpConfiguration;
+    }
+
+    public void setHttpConfiguration(HttpConfiguration httpConfiguration) {
+        this.httpConfiguration = httpConfiguration;
+    }
+
+    public Boolean getAllowJavaSerializedObject() {
+        return allowJavaSerializedObject;
+    }
+
+    public void setAllowJavaSerializedObject(Boolean allowJavaSerializedObject) {
+        this.allowJavaSerializedObject = allowJavaSerializedObject;
+    }
+
+    public HeaderFilterStrategy getHeaderFilterStrategy() {
+        return headerFilterStrategy;
+    }
+
+    public void setHeaderFilterStrategy(
+            HeaderFilterStrategy headerFilterStrategy) {
+        this.headerFilterStrategy = headerFilterStrategy;
+    }
+
     public Boolean getResolvePropertyPlaceholders() {
         return resolvePropertyPlaceholders;
     }


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1526006290:2018-05-11T10:38:10.854+0000:1526006290:2018-05-11T10:38:10.854+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1450

tadayosi:1555299868:2019-04-15T11:44:28.967+0000:1555299868:2019-04-15T11:44:28.967+0000:[~zregvart] Just came across this JIRA. Isn't it already resolved?  Maybe it's good idea to close it too.
zregvart:1555300944:2019-04-15T12:02:24.658+0000:1555300944:2019-04-15T12:02:24.658+0000:[~tadayosi] this was never implemented fully so never merged. Seems that undertow producer is not as trivial and supporting all the options in the producer is a difficult."
0,CAMEL-10802,Bug,Minor,2.18.2,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Giovanni Condello,0,2,2017-02-07 17:12:00+00:00,2017-02-23 18:20:42+00:00,"We are having a strange issue while using the FlexibleAggregationStrategy
with spring boot. Below is a sample and trivial route I just made up
to demonstrate the issue:



from(""direct:should-work"")
                .id(""should-work"")
                .log(LoggingLevel.INFO, ""Before the first split the
body is ${body} and has class ${body.getClass()}"")
                .split(body(),
AggregationStrategies.flexible().pick(body()).accumulateInCollection(LinkedList.class))
                .log(LoggingLevel.INFO, ""During the first split the
body is ${body} and has class ${body.getClass()}"")
                .end()
                .log(LoggingLevel.INFO, ""Before the second split the
body is ${body} and has class ${body.getClass()}"")
                .split(body(),
AggregationStrategies.flexible().pick(body()).accumulateInCollection(LinkedList.class))
                .log(LoggingLevel.INFO, ""During the second split the
body is ${body} and has class ${body.getClass()}"")
                .end()
                .log(LoggingLevel.INFO, ""After the second split the
body is ${body} and has class ${body.getClass()}"")





Along with the relevant unit test:



   @Test
    public void shouldProduceMessages() throws InterruptedException {
        // we expect that a number of messages is automatic done by the Camel
        // route as it uses a timer to trigger
        NotifyBuilder notify = new
NotifyBuilder(camelContext).whenDone(1).and().whenExactlyFailed(0).create();

        producerTemplateShouldWork.sendBody(Arrays.asList(""FIRST"", ""SECOND""));

        assertTrue(notify.matches(10, TimeUnit.SECONDS));
    }




The test fails with the following unexpected exception:



java.lang.ClassCastException: Cannot cast java.util.LinkedHashSet to
java.util.LinkedList
at java.lang.Class.cast(Class.java:3369) ~[na:1.8.0_111]
at org.apache.camel.util.toolbox.FlexibleAggregationStrategy.safeInsertIntoCollection(FlexibleAggregationStrategy.java:281)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.util.toolbox.FlexibleAggregationStrategy.injectAsCollection(FlexibleAggregationStrategy.java:264)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.util.toolbox.FlexibleAggregationStrategy.aggregate(FlexibleAggregationStrategy.java:235)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.doAggregateInternal(MulticastProcessor.java:942)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.doAggregate(MulticastProcessor.java:924)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:644)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.Splitter.process(Splitter.java:108)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
~[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:497)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:225)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)
[camel-core-2.18.2.jar:2.18.2]
at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:370)
[camel-core-2.18.2.jar:2.18.2]
at broken.MySpringBootRouterTest.shouldProduceMessages(MySpringBootRouterTest.java:41)
[test-classes/:na]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~[na:1.8.0_111]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~[na:1.8.0_111]
at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
[junit-4.12.jar:4.12]
at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
[junit-4.12.jar:4.12]
at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
[junit-4.12.jar:4.12]
at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:75)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:86)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:84)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:252)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:94)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
[junit-4.12.jar:4.12]
at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
[junit-4.12.jar:4.12]
at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:191)
[spring-test-4.3.6.RELEASE.jar:4.3.6.RELEASE]
at org.junit.runner.JUnitCore.run(JUnitCore.java:137) [junit-4.12.jar:4.12]
at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
[junit-rt.jar:na]
at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)
[junit-rt.jar:na]
at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)
[junit-rt.jar:na]
at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
[junit-rt.jar:na]
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111]
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
~[na:1.8.0_111]
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
~[na:1.8.0_111]
at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111]
at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
[idea_rt.jar:na]




And from the log we can see that it has failed at the second aggregate
step of the route.
Just for fun, I've also tried changing the second aggregation to
produce HashSet, and here's the resulting exchange:



[Message[ID-CAMERA-GIO-51647-1486214369840-0-21], SECOND, FIRST]




So it looks like either spring or camel are trying to aggregate back
into an HashSet of messages instead of an empty one


If anyone wants to have a deeper look, I've put online a small test
project here:


https://gitlab.com/g.condello/camel-split-join-issue","davsclaus:1486511635:2017-02-08T07:53:55.631+0000:1486511635:2017-02-08T07:53:55.631+0000:Can you try without spring boot. I would assume it wouldn't matter. And maybe just create a plain junit test that can run standalone.
gcotgi:1486518299:2017-02-08T09:44:59.930+0000:1486518299:2017-02-08T09:44:59.930+0000:Hi, 

I've updated my repository with a plain java main and a spring-only version that uses XML configuration.

Unless I've configured the Spring Camel Context wrong, it seems that this issue affects only the spring boot version.

You can find the updated code at the old address.
davsclaus:1487845242:2017-02-23T18:20:42.660+0000:1487845242:2017-02-23T18:20:42.660+0000:Thanks for the test project"
0,CAMEL-10801,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-02-07 16:57:07+00:00,2017-02-07 17:02:46+00:00,No Desc,
0,CAMEL-10800,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-07 15:14:59+00:00,2017-02-07 17:27:29+00:00,"So the camel-connector-plugin can generate the json schema file to be included in the source code you check in git along side camel-connector.json so you have all the details at your finger tips.


Its the files camel-connector-schema.json and camel-component-schema.json which currently are built in the target/classes folder. We can make the built into src/main/resources so they are more visible to the developers.",
0,CAMEL-10799,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-07 13:39:54+00:00,2017-03-15 22:18:05+00:00,"We could make the camel-connector-plugin be able to generate spring boot autoconfiguration as well, just like regular components.


But mind that a connector is a facade on top of a component so there is already the spring boot auto configuration on the components, eg twitter, salesforce etc.",
0,CAMEL-10798,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.20.0,Tomohisa Igarashi,Claus Ibsen,0,4,2017-02-07 12:08:59+00:00,2017-06-06 07:52:59+00:00,"They currently have the same @UriEndpoint that represents all of their possible endpoint combinations. This usually works fine for Camel components. But some components such as twitter, ignite, hazelcast etc do have to many different endpoints that have very specific options per different endpoint.


We should split up this in different components so they are separated.


So we have


twitter-status
twitter-search
twitter-direct


Or something.


This will also help tooling, documentation, et all so they are clearly separated and there are no confusion. For example twitter mention do not support the delay option which only twitter search uses etc.","davsclaus:1486440585:2017-02-07T12:09:45.766+0000:1486440585:2017-02-07T12:09:45.766+0000:We may consider this for 2.19 to make this sooner, and we can have a way of supporting old uri syntaxes and make it log WARN so people have time to migrate.
githubbot:1492699216:2017-04-20T22:40:16.210+0000:1492699216:2017-04-20T22:40:16.210+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1648

    CAMEL-10798 Splitted camel-ignite component for each endpoint

    I've been looking for a easy way to get around CAMEL-11150, but it turned out it's easier to address CAMEL-10798. This splits the ignite component into 7 which corresponds to each ignite endpoint, and also it preserves existing IgniteComponent with deprecated flag. In this way the old syntax like `ignite:cache` is still allowed with having WARN log saying that the syntax has been deprecated.
    
    I wonder it may be a bit too big change at this stage as 2.19.0 release is around the corner though. If so let's just have it after the release.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10798-ignite

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1648.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1648
    
----
commit c5b52455871b6e17d06fd21dcee0a0957f32525c
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-19T14:21:30Z

    CAMEL-10798 Splitted camel-ignite component for each endpoint

----

githubbot:1492737732:2017-04-21T09:22:12.779+0000:1492737732:2017-04-21T09:22:12.779+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1648

githubbot:1493069655:2017-04-25T05:34:15.924+0000:1493069655:2017-04-25T05:34:15.924+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1657

    CAMEL-10798 Splitted hazelcast component into 11 which correspond to …

    …each of endpoints
    
    For post 2.19 release

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10798-hazelcast

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1657.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1657
    
----
commit 91e7a0a6bb53426b859c5933643f21220321f12f
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-24T14:26:02Z

    CAMEL-10798 Splitted hazelcast component into 11 which correspond to each of endpoints

----

githubbot:1494287888:2017-05-09T07:58:08.152+0000:1494287888:2017-05-09T07:58:08.152+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1657

acosentino:1494287943:2017-05-09T07:59:03.196+0000:1494287943:2017-05-09T07:59:03.196+0000:We still miss the twitter component and kubernetes component too I guess.
igarashitm:1494288081:2017-05-09T08:01:21.979+0000:1494288081:2017-05-09T08:01:21.979+0000:Yes I'm working on twitter now, I'll look at kubernates after that!
acosentino:1494288265:2017-05-09T08:04:25.651+0000:1494288265:2017-05-09T08:04:25.651+0000:Thanks Tomo, I have a bunch of new features to add for Kubernetes, but first I'll wait for your refactoring :-)
igarashitm:1494288630:2017-05-09T08:10:30.587+0000:1494288630:2017-05-09T08:10:30.587+0000:Oh OK I'll try harder&quicker - created subtasks for twitter and kubernates to track this more accurately.
acosentino:1494288702:2017-05-09T08:11:42.815+0000:1494288702:2017-05-09T08:11:42.815+0000:No rush [~igarashitm], we have time :-)"
0,CAMEL-10797,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-07 11:11:07+00:00,2017-02-07 13:05:36+00:00,"Most of the Camel endpoint uris are configured as a scheme:context-path?options where the uri has some values in the context-path, eg log:foo, direct:bar, file:inbox, etc.


However in some rare cases you can use an endpoint without any context-path and only with query parameters, this is currently not supported in Camel.


To workaround this people have sometimes used mycomponent:dummy. However we can support uris with just mycomponent or mycomponent?foo=123",
0,CAMEL-10796,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Claus Ibsen,0,1,2017-02-07 09:51:37+00:00,2017-02-07 14:26:43+00:00,"spring-boot shell / commands is deprecated and we should remove this from this example
https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot",
0,CAMEL-10795,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Claus Ibsen,0,5,2017-02-07 08:46:29+00:00,2017-03-10 13:43:54+00:00,"Related to CAMEL-10026 about Health Check API


We need some way for Camel components to be able to more easily validate if they can connect to their remote system.


And for that the user must configure the Camel component/endpoint accordingly with details such as username/password/tokens/ other beans etc.


How this is done varies from Camel component to component, but most of them uses endpoint options.


So we may want to introduce some interface (whether the name Pingable is a good name is up for discussion)



interface Pingable {
    PingResult ping(Map<String, String> config);
    boolean canPing(Map<String, String> config);
}

class PingResult {
 private boolean isSuccess();
 private String errorMessage();
}




This API is just a little suggestion.


The parameters should ideally be type less, eg Map<String, String> as the user configures this in endpoint uris, XML DSL etc. and therefore we should be able to do this without having to use Java code per see.


Also we may want to have canPing as a method to check if the component can accept the ping or not. In some cases it may not be able to do the ping.


For example camel-http component would just require the following information in the Map<String, String>


httpUri=http://myserver/foo/bar


Where httpUri is the name of the option accordingly to the table at
https://github.com/apache/camel/blob/master/components/camel-http/src/main/docs/http-component.adoc


And then it depends on each Camel component how they do the ping check, the http component may do a HTTP HEAD or a HTTP GET etc and check the HTTP response code etc.


Notice this is not intended entirely for runtime health check, but for validating/testing Camel components can work with the user given configuration to connect to the remote system.","lb:1486432301:2017-02-07T09:51:41.314+0000:1486432301:2017-02-07T09:51:41.314+0000:This validation does not requires any route and so on, like spinning up a new camel context and ask a component to validate the options correct ?
In that case should we expect the camel context to be have the registry set-up or we should grab all the stuffs from the given map ? I'm thinking about i.e ssl context parameters which is usually taken from the registry and should be there when a connection attempt is made.

davsclaus:1486432944:2017-02-07T10:02:24.004+0000:1486432944:2017-02-07T10:02:24.004+0000:Yes no route is required. 

This helps with tooling and also allows us to have detains in the documentation which options is used to configure the connection details so the component can connect. Today you have a lot of options and it may not always be so easy to see which of these I must use to configure that stuff.

We can consider adding some kind of label=""ping"" or whatever to the UriParams etc so they stand out in the docs.

For more complex stuff like SSL we can cross that bridge a bit later. They are frankly a bit harder to configure with the SSLContext and if you need keystores and certificates and all that jazz.

However for many SaaS components and the likes, then API tokens etc are maybe more what they use.
lb:1486544770:2017-02-08T17:06:10.961+0000:1486616516:2017-02-09T13:01:56.866+0000:A potential API could be:

{code:java}
/** 
 * 
 */
enum ValidationScope {
    // only check connectivity, if make sense for the component
    connectivity,
    // only check parameters correctness
    parameters
}

/**
 *
 */
enum ValidationStatus {
  OK,
  ERROR,    
  // scope not supported, i.e. a component does not have a connection  
  UNSUPPORTED 
}

/**
 * Represent a validation result
 */
class ValidationResult {

    /**
     * @return the status
     */
    ValidationStatus getStatus();

    /** 
     * @return the error codes and their description
     */
    Map<String, String> getErrorDetails();

     /** 
     * @return the errors associated to input
     */
    Map<String, String> getParameterErrors();
}

interface Component {
    /**
     * We can call it twice if we want two validation and make the external service coarse grained
     *
     * @return a validation result, depending of the scope the method may return one or more results (i.e. one per wrong parameter)
     */
    ValidationResult validateOptions(ValidationScope scope, Map<String, String> options);
}
{code}

acosentino:1486616681:2017-02-09T13:04:41.760+0000:1486616681:2017-02-09T13:04:41.760+0000:Nice!
lb:1486696495:2017-02-10T11:14:55.461+0000:1486696495:2017-02-10T11:14:55.461+0000:In addition we may add an hook to let developers to add their own rules so that you may enforce that all the jms queues have a common syntax
rhuss:1486697609:2017-02-10T11:33:29.990+0000:1486697609:2017-02-10T11:33:29.990+0000:Looks good to me in general. Some remarks:

* Maybe {{validate()}} is a bit better than {{vaildateOptions()}} ? Since it might be also that a connection fails even when the options are valid (because the targeted backend has issues at the moment). Hmm, maybe even 'validate' does not catch this use case (where the options are valid, but still a connection test fails). Maybe {{check()}} or {{test()}} does fit better ?
* Should it be possible to provide a aggregate scope like ""all"" ? If so, then the result needs to be an aggregation, too, with individual result for each check.
* If a scope of ""connectivity"" is provided, but the component can't check the connectivity because the ""parameters"" are not valid, shouldn't this be reflected in the return value, too ?

On a second thought, I'm not sure now whether we should stuff all these use cases in a single, general purpose method, because I see some quite orthogonal use cases:

* Validate whether a set of configuration options is syntactically valid ({{validate(Map opts)}})
* Check whether a connection is possible ({{test(Map opts)}}). Valid options are a prerequisite for this.
* Use {{test()}} it for health-checks. For this use case it would be awesome if the result could contains also some metrics (e.g. how long the connection took).

still in brainstorming mode ;-)
lb:1486698438:2017-02-10T11:47:18.852+0000:1486707497:2017-02-10T14:18:17.304+0000:The original idea had ""all"" as scope and returned a list of ValidationResult so you can find out which step failed but we removed it in favor of a ""two step"" validation for which you first validate the options then the connectivity, but we can bring it back of course.

ValidationResult may also have some meta-data that the component can fill (i.e. with metric or anything else).

About naming/methods, I'd like to keep the Component interface minimal so maybe we can have something like Component.getComponentValidator() (or whatever name make sense) which then can have much fine grained methods.


rhuss:1487300972:2017-02-17T11:09:32.833+0000:1487300972:2017-02-17T11:09:32.833+0000:I think, too, that one specific check a time with a single result makes sense.

Think it make sense to use delegated object for the validation / check. 

w.r.t to naming, maybe its better to use a not-so-specific name like {{Validator}} (for me I always associated validation of configuration, however this is a bit more like checking also connections). Maybe {{Checker}}, {{Verifier}} or {{Tester}} ?

So maybe something along the lines 

{code:java}

interface Verifier {

     // actual action
    verify(Map<String, String> options);
  
    enum Scope {
      // only check connectivity, if make sense for the component
      connect,
      // only check parameters correctness
      validate
   }

   enum Status {
    OK,
    ERROR,    
    UNSUPPORTED 
  }

   interface Result {

    Status getStatus();
    Scope getScope();

    // Still to think about generic meta data ...
    Map<String, String> getErrorDetails();
    Map<String, String> getParameterErrors();
    ....
  }
}

interface Component {
   Verifier getVerifier(Verifier.Scope scope)
}
{code}
rhuss:1487680609:2017-02-21T20:36:49.846+0000:1487680609:2017-02-21T20:36:49.846+0000:In case of an error, it would be nice to have a feedback _which_ option caused the error (if detectable). E.g. when the the backend receives a ""connection refused"" then the provided connection parameter is faulty. In case of a 403, its the user and/or password (so more than one configuration key can be ""invalid"").

That way a UI using this APi could easily mark the fields which are wrong, a long with the message what went wrong for this parameter.

Though I don't know yet whether the typeless {{Map<String,String> getErrorDetails()}} is enough to capture this use case. 

Any ideas ?
lb:1487716339:2017-02-22T06:32:19.369+0000:1487716339:2017-02-22T06:32:19.369+0000:This should be the job of {code:java}Map<String, String> getParameterErrors(){code}
rhuss:1487717750:2017-02-22T06:55:50.645+0000:1487717750:2017-02-22T06:55:50.645+0000:Ah, ok. How would we model, when an error is due because of the combination of two parameters ? (e.g. the classical ""user or password"" ?) Or is this out of scope for now ?

Maybe it could be a 

{code}
Map<String, List<String>> getParameterErrors() 
{code}

where the keys are the _error messages_ and the value is a list of _parameter keys_. Or is this to counter intuitive ?
lb:1487718253:2017-02-22T07:04:13.684+0000:1487718253:2017-02-22T07:04:13.684+0000:Maybe we can wrap them like:

{code:java}
class Error {
    String code;
    String description;
    List<String> parameters;
    Map<String, String> attributes;
}

interface Result {
    ...
    List<Error> getErrors()
}
{code}

Make sense ?
rhuss:1487719006:2017-02-22T07:16:46.710+0000:1487719006:2017-02-22T07:16:46.710+0000:Looks good. Wdym with {{attributes}} ?

btw, like the {{code}} field as it might help later in I18N of error messages on the client side ....  (although one could also consider a second {{List<Error> getErrors(Locale locale)}} method on {{Result}}, too. But this can be added later and requires no change on the existing interface)


lb:1487720574:2017-02-22T07:42:54.971+0000:1487720574:2017-02-22T07:42:54.971+0000:attributes is meant to carries any additional information we can get from the validation step, maybe useless so more like a placeholder for the moment.
davsclaus:1487724088:2017-02-22T08:41:28.142+0000:1487724088:2017-02-22T08:41:28.142+0000:I suggest to keep it simpler and not try to make it too feature rich / complex from the beginning.

The username / password thing is that the systems dont report back - unknown user etc, but just ""access denied"" as otherwise you can use that as an weak spot to know if a username exists or not, if the system reports back a special error for that.


rhuss:1487725909:2017-02-22T09:11:49.694+0000:1487725909:2017-02-22T09:11:49.694+0000:[~davsclaus] aggreed to no overengineer (but leave some empty which could be filled by extending, not changing. even when these spots never will be 'filled').

For the username / password thing we would report both back both parameters as be the source of the problem (when getting back a 401 from the backend which also not tell us which of those parameters is wrong). I don't see a security problem here (actually thats why I opt for multiple parameter keys per error to avoid this). (in this example: description == ""Wrong credentials"", parameters == [ ""user"", ""password"" ] if this connector use these fields for authentication).

This method is also used for plain validation, so not only connection checking (that's why I'd like to call 'verifier' imply both validation + checking). 

When we allow for multiple parameter keys to be returned in errors we also help in reporting back complex validation logic errors (like ""authtoken"" _or_ ""user"" / ""password"" needs to be provided).

nferraro:1487727510:2017-02-22T09:38:30.029+0000:1487727510:2017-02-22T09:38:30.029+0000:I like the last proposal. Seems simple but also flexible, allowing to provide both types of validation results. I think we should start with this proposal and see what other needs arise during implementation of some checks.
We will also need to develop some sort of helper methods and constants to have e.g. a list of common error codes across components/connectors.
lb:1489124603:2017-03-10T13:43:23.938+0000:1489124603:2017-03-10T13:43:23.938+0000:A basic implementation is now available with a concrete implementation for the following components:

- camel-http
- camel-http4
- camel-salesforce
- camel-servicenow
- camel-twitter

In  addition:
- validation is available via JMX as component action
- scopes supported by the component is available in the camel-catalog in the component section, i.e.

{code:}
{
  ""component"": {
    ... 
    ""verifiers"": ""PARAMETERS,CONNECTIVITY"",
    ...
  }
}
{code:}

"
0,CAMEL-10794,Bug,Major,2.15.2,,"
None
",Resolved,Invalid,None,Unassigned,Hao Lu,0,2,2017-02-07 00:48:28+00:00,2017-02-07 08:10:08+00:00,"We're using camel 2.15.2 to do url routing, for different url mapping to backend endpoints which are all rest service based.


The workflow looks like client directly hit our camel application, then based on predefined url path we add customized processor to request headers, then route to backend service. Until get the response from downstream service, again add customized headers to response then return to client side.


So far total daily request is more than 20 million per server, we found out available memory is getting lower and lower to indicate a slow memory leak.


After analyze the java heap dump on that server, it's clearly saying the instance of ""org.apache.camel.impl.DefaultInflightRepository"" is using most heap.


Inside DefaultInflightRepository instance, there's a ConcurrentMap ""inflight"" which actually hold most data, the pattern is per daily hit 20 million requests we'll have incremental 400-500 size to ConcurrentMap.


Please refer to sample data from heap dump as below.


key: ""ID-hostname-0-125588844""
Value:""org.apache.camel.impl.DefaultExchange @ 0x76ba87bc0""


From camel message history, we can see that our camel application already send the request to downstream service that is working fine.
While the callback response never get called, so camel not remove the key from ConcurrentMap.


Can you help to check this issue with camel and is there any issue related to netty4-http component?",davsclaus:1486426208:2017-02-07T08:10:08.926+0000:1486426208:2017-02-07T08:10:08.926+0000:Please use the user mailing list / user forum first to get help. And also test with latest Camel release. Camel 2.15.x is EOL and not supported.
0,CAMEL-10793,New Feature,Minor,None,2.22.0,"

cloud

",Resolved,Fixed,2.22.0,Luca Burgazzoli,Luca Burgazzoli,0,6,2017-02-06 16:18:08+00:00,2018-05-30 12:27:00+00:00,"As today we have a ServiceCall EIP that makes it easy to call external services in a cloud environment leveraging external service registry such as kubernetes, consul, etcd, spring-cloud & co so It could make sense to add a way for a route to register itself in such registries and be available as a service for other to consume.


Something like:




    // programmatic config
    from(""jetty:http://0.0.0.0:8001/service1"")
        .serviceRegistry()
            .name(""service-1"")
            .host(""...."")
            .port(8001)
            .meta(""camel.protocol"", ""http"")
            .meta(""camel.component"", ""jetty"")
            .meta(""camel.context.path"", ""/service1"")
            .end()
        .to(""direct:service-1"")

    // Inherit from a global config and eventually override it
    from(""jetty:http://0.0.0.0:8002/service2"")
      .serviceRegistry(""service-2"")
          .configRef(""service-registry-conf"")
          .port(8002)
      .to(""direct:service-2"")

    // Smart auto configuration
    //   i.e. if the endpoint implements DiscoverableService
    from(""jetty:http://0.0.0.0:8003/service3"")
      .serviceRegistry(""service-3"")
      .to(""direct:service-3"")




Beside making camel play better in cloud environment,  you can use the service call to connect camel based micro services with minimal configuration as the registration may provide some additional meta data that the service call can use for auto-configuration (of course not all the registries can do it).


The future Health  API/Service may then also be configured to remove or invalidate the service if the route is reported as not healthy.","davsclaus:1504840273:2017-09-08T11:11:13.966+0000:1504840273:2017-09-08T11:11:13.966+0000:I suggest to move this to 2.21
njiang:1524766982:2018-04-27T02:23:02.805+0000:1524766982:2018-04-27T02:23:02.805+0000:How about we introduce another service registry component which can wrap the old components?
{code} from(""service:jetty:http://0.0.0.0:8001/service1?servicename= jetty1"") {code}
We may need to update camel API to expose the consumer endpoint address to the registry.
BTW, the registry setting could be a part of camel context.
  
Any thought?
lb:1524778704:2018-04-27T05:38:24.531+0000:1524780442:2018-04-27T06:07:22.221+0000:I think it could work too. 

The rationale behind the DSL is that I may not want to expose the full URI but only the options that are needed to contact the service, i.e. for http based services we don't need to expose the implementation (jetty, undertow) but only the protocol (http/s)  so I think a service component would work nice with endpoints/consumers that implements an interface like DiscoverableService which greatly reduce the amount of option one may need to set on the URI.
lb:1524799409:2018-04-27T11:23:29.597+0000:1524799511:2018-04-27T11:25:11.419+0000:Maybe we can introduce something like RegistrationConfiguration so one van use it as ref like:

{code}
  from(“service:...?serviceId=myservice&serviceConfig=#myConfig”)
{code}


So we can have a global/sharable config that the service component can eventually override using uri options. 

Let me work on a POC next week.

njiang:1524804134:2018-04-27T12:42:14.587+0000:1524804134:2018-04-27T12:42:14.587+0000:+1 for the DiscoverableService interface, and we may need a common solution for look up the address like 0.0.0.0. 
Now I'm think if we can use some annotation (with the aspect advise) in the Route to minimize the configuration (we don't even need to create the service component for wrapping the service).

lb:1524809978:2018-04-27T14:19:38.438+0000:1524809978:2018-04-27T14:19:38.438+0000:service component may be also useful to clearly state which route should be exposed and what not 
githubbot:1527567349:2018-05-29T12:15:49.810+0000:1527567349:2018-05-29T12:15:49.810+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/2352

    camel service registry

    This PR is the initial work to ease the process to expose routes as services [CAMEL-10793](https://issues.apache.org/jira/browse/CAMEL-10793).
    
    A simple example is:
    
    ```java
    from(""service:my-service:undertow:http://0.0.0.0:8080/the/context/path"")
        .log(""Route ${routeId} has been invoked"");
    ```
    
    As undertow component, supports service registration, this endpoint will be registered to a given Service Registry (we now have a binding for consul, zookeeper and spring-cloud) as `my-service` along with some metadata such as the protocol and the context path. This allow to invoke the service on another jvm instance by name, like:
    
    ```java
    from(""direct:call"")
        .serviceCall(""my-service"")
    ```
    
    **NOTE**: The implementation is not yet complete so you still need to do some manual configuration and the number of supported component that support service registration is limited to those extending `camel-http-common` and `undertow`  .
    **NOTE**: integration with spring-cloud is not as easy as it should be so I had to introduce two new modules: camel-spring-cloud-zookeeper and camel-spring-cloud-consul.
    
    Any feedback would be really appreciated.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-12485

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2352.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2352
    
----
commit 8959683c39d8d8ff368c91fd2362dc149149cbd3
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-07T17:00:52Z

    CAMEL-12485: camel cloud : create camel-service component

commit cbdb3b64c1c79886d17337517f498fb7804f5fed
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-10T16:33:38Z

    CAMEL-12502: camel cloud : create a service route policy

commit 07594d2fa19d8987eca783a2a7afab70846094b0
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-10T20:31:49Z

    CAMEL-12485: camel cloud : create camel-service component

commit 54b1405759298991a116502a6e60d203f3e91965
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-11T10:33:33Z

    CAMEL-12505: service-call : include ServiceDefinition metatdata when computing the final URI

commit 4468cc1e54f0fc2314d34b0172d06c5548de4bc4
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-14T12:49:37Z

    CAMEL-12485: camel cloud : create camel-service component

commit bb9e10539ff0cdcc26539981534bdf39205b760e
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-15T13:06:54Z

    fix consul kv test

commit e62ffebe643eef2897cd393a37a1a7aa4248ca94
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-17T15:02:40Z

    CAMEL-12518: camel cloud : leverage spring-cloud ServiceRegistry to register routes

commit e10065dcf25a0ae61a2eeeaa2c20157c577945f3
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T10:57:51Z

    CAMEL-12502: camel cloud : create a service route policy

commit 5079e5335a8ee0a92fa70c4f1ff29006c2d51165
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T14:35:40Z

    CAMEL-12531: camel cloud : create a spring cloud based camel-service example

commit 51ed886d139a11e9d83e57d8d3806fdbccd92f5f
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T18:23:40Z

    CAMEL-12518: camel cloud : leverage spring-cloud ServiceRegistry to register routes

commit a887bbe8b07871e2f7713e6a89f2febcf4707f33
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T18:25:12Z

    CAMEL-12531: camel cloud : create a spring cloud based camel-service example

commit ad6e928bd388eeee070020793f9c6bc72c04758a
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-24T13:16:08Z

    CAMEL-12518: camel cloud : leverage spring-cloud ServiceRegistry to register routes

commit 2611407c6f996a010aa5ca240c21652b45502c82
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T11:38:55Z

    CAMEL-12502: camel cloud : create a service route policy

commit aaceeea8250b928fb870408cc7c3aab13e9d7a08
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T13:00:08Z

    CAMEL-12502: camel cloud : create a service route policy

commit 1b655e17a7d01f8083b5cd2d76b837d279ded4bb
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T13:03:57Z

    CAMEL-12502: camel cloud : create a service route policy

commit fee9b5c3b95c741526e0c768270ce0f9a0695679
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T14:08:27Z

    service registry doc

----

githubbot:1527567788:2018-05-29T12:23:08.749+0000:1527567788:2018-05-29T12:23:08.749+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2352

githubbot:1527581077:2018-05-29T16:04:37.023+0000:1527581077:2018-05-29T16:04:37.023+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/2353

    camel service registry

    This PR is the initial work to ease the process to expose routes as services [CAMEL-10793](https://issues.apache.org/jira/browse/CAMEL-10793).
    
    A simple example is:
    
    ```java
    from(""service:my-service:undertow:http://0.0.0.0:8080/the/context/path"")
        .log(""Route ${routeId} has been invoked"");
    ```
    
    As undertow component, supports service registration, this endpoint will be registered to a given Service Registry (we now have a binding for consul, zookeeper and spring-cloud) as `my-service` along with some metadata such as the protocol and the context path. This allow to invoke the service on another jvm instance by name, like:
    
    ```java
    from(""direct:call"")
        .serviceCall(""my-service"")
    ```
    
    **NOTE**: The implementation is not yet complete so you still need to do some manual configuration and the number of supported component that support service registration is limited to those extending `camel-http-common` and `undertow`  .
    **NOTE**: integration with spring-cloud is not as easy as it should be so I had to introduce two new modules: camel-spring-cloud-zookeeper and camel-spring-cloud-consul.
    
    Any feedback would be really appreciated.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-12485-pr

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2353.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2353
    
----
commit c927df33aca97744ede41b76e726d4ecef8d3563
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-29T15:08:00Z

    CAMEL-12485: camel cloud : create camel-service component

commit 349639992a22a5c67978c3620ac2af0f003c1d86
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-10T16:33:38Z

    CAMEL-12502: camel cloud : create a service route policy

commit 95dbeb2794d23538a218a275896a51ad723db550
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-10T20:31:49Z

    CAMEL-12485: camel cloud : create camel-service component

commit dfb11b311717cf25068728703ce1542af087cd69
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-11T10:33:33Z

    CAMEL-12505: service-call : include ServiceDefinition metatdata when computing the final URI

commit 8f5486d5e8920daa2d80367a0148c6f4aec5f059
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-14T12:49:37Z

    CAMEL-12485: camel cloud : create camel-service component

commit 3e368ca037bc243a8d6678bfcd734f485e8c319c
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-15T13:06:54Z

    fix consul kv test

commit c08e704a29954c41d2a13c690424df68bd951ce3
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-17T15:02:40Z

    CAMEL-12518: camel cloud : leverage spring-cloud ServiceRegistry to register routes

commit 4988f0c4ff40f83c6d9fe18f1b6d5be6a3a17ad4
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T10:57:51Z

    CAMEL-12502: camel cloud : create a service route policy

commit ea88ec23da3e9e886e2cdbbe87992615c11b6c6d
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T14:35:40Z

    CAMEL-12531: camel cloud : create a spring cloud based camel-service example

commit 5ec6c5ed1f10c369e23296aba2671577fb2d3334
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T18:23:40Z

    CAMEL-12518: camel cloud : leverage spring-cloud ServiceRegistry to register routes

commit 086bdfff5fa13e58976f6a77b5b0ef3e05769046
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-23T18:25:12Z

    CAMEL-12531: camel cloud : create a spring cloud based camel-service example

commit bbc6e5fc7fe686d37ee085bd4600dfd1166c28b2
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-24T13:16:08Z

    CAMEL-12518: camel cloud : leverage spring-cloud ServiceRegistry to register routes

commit b02d2da88b9459149dcedd1f37d83f5c63eef70b
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T11:38:55Z

    CAMEL-12502: camel cloud : create a service route policy

commit b412b6282298fe03e9bf80d4cccae675130a27a5
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T13:00:08Z

    CAMEL-12502: camel cloud : create a service route policy

commit 2adbaab0ebda6a5c6a27dbd2ccd29ec558b09ab3
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T13:03:57Z

    CAMEL-12502: camel cloud : create a service route policy

commit 14666bfe1b3d81458aee1cf383b7262a513c61e8
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-28T14:08:27Z

    service registry doc

commit c09d5fc8ce116fe11d0726cd1839688d9eaf3103
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-29T14:48:19Z

    service registry

commit 67a86f57424b976053d86f316b64d44e27437b51
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-29T15:14:24Z

    fix typos

commit 2a7e54e9fea7d8e00d8e104a3b14d3756e33a6dc
Author: lburgazzoli <lburgazzoli@...>
Date:   2018-05-29T16:01:31Z

    regen

----

githubbot:1527645928:2018-05-30T10:05:28.481+0000:1527645928:2018-05-30T10:05:28.481+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/2353
"
0,CAMEL-10792,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Luca Burgazzoli,0,2,2017-02-06 11:02:07+00:00,2022-12-07 12:16:32+00:00,"See mailing list discussion:


http://mail-archives.apache.org/mod_mbox/camel-dev/201702.mbox/%3CCAGB5yNkLzmr%3DQhBCOX9u%3D-X16pGaWkLUZ%2BvY7Jf_JRrudbzh_Q%40mail.gmail.com%3E","lb:1544943307:2018-12-16T14:55:07.870+0000:1544943307:2018-12-16T14:55:07.870+0000:Instead of a hierarchical registry we may think to have a single registry which is created by the camel context whici allows to ""bind"" objects and a number of ""beans repository"" that are used to bridge camel context with external frameworks such as spring, blueprint.

So we could have the BeansRepository that is basically what the registry is today:

{code}
public interface BeansRepository extends Ordered {
    Object lookupByName(String name);
    <T> T lookupByNameAndType(String name, Class<T> type);
    <T> Map<String, T> findByTypeWithName(Class<T> type);
    <T> Set<T> findByType(Class<T> type);
}
{code}

And the registry then extends BeansRepository:

{code}
public interface Registry extends BeansRepository {
    void bind(String name, Object bean);
}
{code}

The internal registry then has lower priority and it is queried only when none of the repositories has the require beans.
davsclaus:1551059806:2019-02-25T09:56:46.717+0000:1551059806:2019-02-25T09:56:46.717+0000:Thanks Luca, this is a good idea, and we had talked a bit in the past to make it easier to register beans with Camel such as from unit tests etc. Now with Camel 3 we can make the API modifications that is needed for this."
0,CAMEL-10791,Improvement,Minor,2.18.2,2.19.0,"
None
",Resolved,Fixed,2.19.0,Onder Sezgin,Uladzimir Zhuraulevich,0,3,2017-02-06 08:08:37+00:00,2017-03-14 18:38:11+00:00,"Would be great to have an option to ask camel-zipfile to catch empty folders too.


http://camel.465427.n5.nabble.com/camel-zipfile-td5793495.html


Thanks.","onders:1489036421:2017-03-09T13:13:41.034+0000:1489036421:2017-03-09T13:13:41.034+0000:i'll try to have a look.
githubbot:1489364011:2017-03-13T08:13:31.757+0000:1489364011:2017-03-13T08:13:31.757+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1529

    CAMEL-10791-added option to handle empty directories while unzipping

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10791

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1529.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1529
    
----
commit d7434c995fc7681a132099edc638af69d3f68d5f
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-13T08:03:35Z

    CAMEL-10791-added option to handle empty directories while unzipping

commit 35f492b2485717a8ce3bc45c7fa3e6aefba486a7
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-13T08:04:44Z

    CAMEL-10791-added option to handle empty directories while unzipping

commit 083b17a779c7d1bc3b6636cd93f4da0fddac3ec2
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-13T08:07:55Z

    CAMEL-10791-added option to handle empty directories while unzipping

commit 04edee18ab27057dac62888330b3191f95b61130
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-13T08:09:09Z

    CAMEL-10791-added option to handle empty directories while unzipping

commit 56410a17adce7116d07e2e3d8c1dd6ba751a7a82
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-03-13T08:10:23Z

    CAMEL-10791-added option to handle empty directories while unzipping

----

githubbot:1489486782:2017-03-14T18:19:42.782+0000:1489486782:2017-03-14T18:19:42.782+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1529
"
0,CAMEL-10790,Improvement,Major,2.18.2,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Claus Ibsen,0,1,2017-02-05 09:08:40+00:00,2017-02-09 17:30:25+00:00,The gridfs should have mongodb- as prefix as its confusing what it is otherwise.,
0,CAMEL-10789,Bug,Minor,"2.18.0, 2.18.1, 2.18.2",2.18.3,"
None
",Resolved,Fixed,2.18.3,Claus Ibsen,Surjit Sen,0,1,2017-02-04 22:52:29+00:00,2017-03-01 09:13:42+00:00,"The following sample code works fine with version 2.17.4 (JDK 1.7), but fails on Camel 2.18.0, 2.18.1 and 2.18.2 (JDK 1.8)



from(""direct:process"")
        .process(new Processor() {
            public void process(Exchange exchange) {
                List<String> alist = new ArrayList<String>();
                alist.add(""1"");
                alist.add(""99"");
                exchange.getIn().setHeader(""ITEMS"", alist);
                exchange.getIn().setHeader(""TOTAL_LOOPS"", alist.size());
            }
        })
        .loop(simple(""${header.TOTAL_LOOPS}"", Integer.class))
          .setHeader(""item"", simple(""${header.ITEMS[${property.CamelLoopIndex}]}"", String.class))
          .log(LoggingLevel.INFO, LOG_CLASS_NAME, simple(""item = ${header.item} and TOTAL_MAPS = ${header.TOTAL_LOOPS}"").getText())
        .end()
        .end();




With 2.18.x, the following exception gets thrown:



2017-02-03 21:13:31 ERROR DefaultErrorHandler:204 - Failed delivery for (MessageId: ID-CATL0W10D4DG4R1-55822-1486174410756-0-1 on ExchangeId: ID-CATL0W10D4DG4R1-55822-1486174410756-0-2). Exhausted after delivery attempt: 1 caught: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: [${property.CamelLoopIndex}] on java.util.ArrayList due to: java.lang.IndexOutOfBoundsException: Key: ${property.CamelLoopIndex} not found in bean: [1, 99] of type: java.util.ArrayList using OGNL path [[${property.CamelLoopIndex}]]",
0,CAMEL-10788,Bug,Major,None,"2.17.6, 2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.3, 2.19.0",Claus Ibsen,Ton Swieb,0,3,2017-02-04 18:55:18+00:00,2017-02-06 14:02:16+00:00,"When more then one handler is added to two different endpoints that run on the same port a handler loop occurs.


See unit test in pull request for the example.","githubbot:1486205999:2017-02-04T18:59:59.760+0000:1486205999:2017-02-04T18:59:59.760+0000:GitHub user tonswieb opened a pull request:

    https://github.com/apache/camel/pull/1447

    CAMEL-10788 : Fixed handler loop when multiple endpoints on the same …

    …port have more then one handler

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tonswieb/camel CAMEL-10788

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1447.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1447
    
----
commit 98c0d2dfc498f691e5b017bd8c8061f5ba9d843e
Author: Ton Swieb <ton.swieb@finalist.nl>
Date:   2017-02-04T18:58:24Z

    CAMEL-10788 : Fixed handler loop when multiple endpoints on the same port have more then one handler

----

davsclaus:1486264594:2017-02-05T11:16:34.184+0000:1486264594:2017-02-05T11:16:34.184+0000:Thanks for the PR
githubbot:1486360936:2017-02-06T14:02:16.342+0000:1486360936:2017-02-06T14:02:16.342+0000:Github user tonswieb closed the pull request at:

    https://github.com/apache/camel/pull/1447
"
0,CAMEL-10787,Bug,Major,None,None,"
None
",Closed,Won't Fix,None,Thomas Diesler,Thomas Diesler,0,2,2017-02-03 15:40:45+00:00,2017-02-03 17:12:52+00:00,No Desc,"githubbot:1486107832:2017-02-03T15:43:52.003+0000:1486107832:2017-02-03T15:43:52.003+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1444

    [CAMEL-10787] Camel BOM does not export lucene

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10787

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1444.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1444
    
----
commit c41390d4338d8970d2605db2ca66011440b6436c
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-02-03T15:41:29Z

    [CAMEL-10787] Camel BOM does not export lucene

----

githubbot:1486113141:2017-02-03T17:12:21.619+0000:1486113141:2017-02-03T17:12:21.619+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1444
"
0,CAMEL-10786,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Sergey Beryozkin,Sergey Beryozkin,0,1,2017-02-03 14:36:09+00:00,2017-04-07 11:10:37+00:00,"This component will provide a support for communicating with Microsoft Azure services. Blob service will be supported first.
Support for Queue service will come next","sergey_beryozkin:1486707741:2017-02-10T14:22:21.868+0000:1486707741:2017-02-10T14:22:21.868+0000:The initial component code will offer only the disabled test support, a dedicated JIRA issue will be opened for the test issue tracked and the possible options discussed  
sergey_beryozkin:1491534637:2017-04-07T11:10:37.772+0000:1491534637:2017-04-07T11:10:37.772+0000:Hi Claus, thanks, I've been keeping this JIRA open till a possible 3rd party PR synchronization against the new component, but it will be indeed better to open new issues related to this component going forward, cheers "
0,CAMEL-10785,New Feature,Major,None,2.22.0,"
None
",Resolved,Fixed,2.22.0,Onder Sezgin,Paolo Antinori,3,4,2017-02-03 14:14:38+00:00,2018-04-02 06:35:43+00:00,"http://revapi.org/modules/revapi-maven-plugin/


Is a Maven plugin to help preventing breaking public APIs or to keep track of major change between version.


This is the output of a sample run over camel-core/2.17.0 vs. camel-core/2.18.0


https://camel-revapi.netlify.com/revapi-report.html


The plugin is quite powerful in its capabilities.


This is the list of the event it can detect:


http://revapi.org/modules/revapi-java/differences.html


But it can obviously be pre-configured to disable not interesting finds or to completely whitelist some occurrences.


See for example, how the guys of Drools configure their:


https://github.com/etirelli/droolsjbpm-knowledge/blob/647deee821281a507035a96025ac44d626e535ab/kie-api/src/build/revapi-config.json


The plugin can make the build job fail, in case it finds a breaking change (probably too strict requirement for Camel) or just produce it's report.


I'm attaching my sample pom.xml if people want to have something to start playing with.","acosentino:1486102692:2017-02-03T14:18:12.145+0000:1486102692:2017-02-03T14:18:12.145+0000:Looks interesting, I guess it can be useful for the project
onders:1521776165:2018-03-23T11:36:05.112+0000:1521776165:2018-03-23T11:36:05.112+0000:I would like to try something around this.

Would it still be good buildtool ?

There was a discussion around the subject for drools. [https://github.com/kiegroup/drools/pull/1154]

You may want to take a look.
githubbot:1522122933:2018-03-27T11:55:33.632+0000:1522122933:2018-03-27T11:55:33.632+0000:GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2273

    CAMEL-10785 - add revapi integration (considering current SNAPHOT and…

    … latest version of release) for camel-core to avoid maintenance problems for whole codebase

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onderson/camel CAMEL-10785

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2273.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2273
    
----
commit ba3c1838619f433bf0f7c509bea4ab3cde5ea951
Author: Sezgin <onder.sezgin@...>
Date:   2018-03-27T11:40:36Z

    CAMEL-10785 - add revapi integration (considering current SNAPHOT and latest version of release) for camel-core to avoid maintenance problems for whole codebase

----

githubbot:1522198963:2018-03-28T09:02:43.677+0000:1522198963:2018-03-28T09:02:43.677+0000:davsclaus commented on issue #2273: CAMEL-10785 - add revapi integration (considering current SNAPHOT and…
URL: https://github.com/apache/camel/pull/2273#issuecomment-376814418
 
 
   That json file should possible be disabled in the RAT check (see verify with headers)
   http://camel.apache.org/release-guide.html
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1522306099:2018-03-29T14:48:19.872+0000:1522306099:2018-03-29T14:48:19.872+0000:onderson commented on issue #2273: CAMEL-10785 - add revapi integration (considering current SNAPHOT and…
URL: https://github.com/apache/camel/pull/2273#issuecomment-377259571
 
 
   added to exclude list.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1522622068:2018-04-02T06:34:28.964+0000:1522622068:2018-04-02T06:34:28.964+0000:onderson closed pull request #2273: CAMEL-10785 - add revapi integration (considering current SNAPHOT and…
URL: https://github.com/apache/camel/pull/2273
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/revapi/ignore.json b/camel-core/src/revapi/ignore.json
new file mode 100644
index 00000000000..4d8e5fd2ae1
--- /dev/null
+++ b/camel-core/src/revapi/ignore.json
@@ -0,0 +1,24 @@
+{
+    ""revapi"" : {
+        ""java"": {
+            ""missing-classes"": {
+              ""behavior"": ""ignore""
+            }
+          },
+        ""ignore"" : [ 
+        {
+          ""code"" : ""java.class.nonPublicPartOfAPI""
+        },
+        {
+          ""code"" : ""java.method.returnTypeChanged"",
+          ""package"" : ""org.apache.camel.management.mbean"",
+          ""classSimpleName"" : ""ManagedClaimCheck"",
+          ""methodName"": ""getDefinition"",
+          ""elementKind"": ""method"",
+          ""justification"": ""Needed for Claim-Check EIP"",
+          ""oldType"": ""org.apache.camel.model.ExpressionNode"",
+          ""newType"": ""org.apache.camel.model.ProcessorDefinition<?>""
+        }
+      ]
+    }
+}
\ No newline at end of file
diff --git a/parent/pom.xml b/parent/pom.xml
index a97c7d04587..e95bf1ffb6d 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -590,6 +590,8 @@
     <restlet-version>2.3.12</restlet-version>
     <restlet-woodstox-version>4.3.0</restlet-woodstox-version>
     <restlet-yaml-version>1.13</restlet-yaml-version>
+    <revapi-java-version>0.15.1</revapi-java-version>
+    <revapi-maven-plugin-version>0.10.0</revapi-maven-plugin-version>
     <rhino-bundle-version>1.7.7.1_1</rhino-bundle-version>
     <rhino-version>1.7.7.1</rhino-version>
     <rhino-js-version>1.7R2</rhino-js-version>
@@ -5434,6 +5436,36 @@
         </plugins>
       </build>
     </profile>
+	
+    <profile>
+      <id>revapi</id>
+      <build>
+        <plugins>
+          <plugin>
+            <groupId>org.revapi</groupId>
+            <artifactId>revapi-maven-plugin</artifactId>
+            <version>${revapi-maven-plugin-version}</version>
+            <dependencies>
+              <dependency>
+                <groupId>org.revapi</groupId>
+                <artifactId>revapi-java</artifactId>
+                <version>${revapi-java-version}</version>
+              </dependency>
+            </dependencies>
+            <configuration>
+              <analysisConfigurationFiles>
+                <file>${project.basedir}/src/revapi/ignore.json</file>
+              </analysisConfigurationFiles>
+            </configuration>
+            <executions>
+              <execution>
+                <goals><goal>check</goal></goals>
+              </execution>
+            </executions>
+          </plugin>
+        </plugins>
+      </build>
+    </profile>
 
     <profile>
       <id>dependencycheck</id>
diff --git a/pom.xml b/pom.xml
index 55d3ac4a67c..4cdf4dad426 100644
--- a/pom.xml
+++ b/pom.xml
@@ -292,7 +292,8 @@
                 <exclude>**/file-sig-api.txt</exclude>
                 <exclude>**/Tasks__c.java</exclude>
                 <exclude>**/additional-spring-configuration-metadata.json</exclude>
-                <exclude>**/*.proto</exclude>
+		<exclude>**/*.proto</exclude>
+		<exclude>**/src/revapi/ignore.json</exclude>
                 <!-- Maven Wrapper -->
                 <exclude>.mvn/**/*</exclude>
               </excludes>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1522622069:2018-04-02T06:34:29.958+0000:1522622069:2018-04-02T06:34:29.958+0000:Github user onderson closed the pull request at:

    https://github.com/apache/camel/pull/2273

githubbot:1522622088:2018-04-02T06:34:48.012+0000:1522622088:2018-04-02T06:34:48.012+0000:onderson commented on issue #2273: CAMEL-10785 - add revapi integration (considering current SNAPHOT and…
URL: https://github.com/apache/camel/pull/2273#issuecomment-377866598
 
 
   Thanks @davsclaus . 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-10784,Improvement,Minor,None,2.19.0,"
None
",Resolved,Won't Fix,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-02-03 12:35:21+00:00,2017-03-08 12:56:16+00:00,"Connectors should allow to rename Camel options so you can use a different name if you like.


For example some of the Camel component option names can be harder to understand, so by allowing to redefine those as a new name can make it easier for users to use the connector.",davsclaus:1488948976:2017-03-08T12:56:16.751+0000:1488948976:2017-03-08T12:56:16.751+0000:You can change the display name etc in the json so any tooling can show that instead
0,CAMEL-10783,Bug,Major,2.18.2,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Thomas Diesler,Thomas Diesler,0,3,2017-02-03 10:34:21+00:00,2017-02-03 14:03:36+00:00,"Caused by: java.lang.IllegalStateException: OneTimeXMLReader.parse() can only be used once!
	at org.apache.camel.converter.jaxp.XMLReaderPool$OneTimeXMLReader.checkValid(XMLReaderPool.java:132)
	at org.apache.camel.converter.jaxp.XMLReaderPool$OneTimeXMLReader.setContentHandler(XMLReaderPool.java:178)
	at org.apache.xml.dtm.ref.DTMManagerDefault.getDTM(DTMManagerDefault.java:461)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:701)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1275)
	at org.apache.xalan.transformer.TransformerImpl.transform(TransformerImpl.java:1253)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:141)




CrossRef: https://issues.jboss.org/browse/ENTESB-6531","tdiesler:1486089417:2017-02-03T10:36:57.595+0000:1486089417:2017-02-03T10:36:57.595+0000:The XMLReaderPool currently uses a OneTimeXMLReader, which prevents setter access after the parse method has been called.

The JDK's DTMManagerDefault however attempts to reset handlers in a finally clause

{code}
        } finally {
          // Reset the ContentHandler, DTDHandler, ErrorHandler to the DefaultHandler
          // after creating the DTM.
          if (reader != null && !(m_incremental && incremental)) {
            reader.setContentHandler(m_defaultHandler);
            reader.setDTDHandler(m_defaultHandler);
            reader.setErrorHandler(m_defaultHandler);
            
            // Reset the LexicalHandler to null after creating the DTM.
            try {
              reader.setProperty(""http://xml.org/sax/properties/lexical-handler"", null);
            }
            catch (Exception e) {}
          }
          releaseXMLReader(reader);
        }
{code}
githubbot:1486094962:2017-02-03T12:09:22.280+0000:1486094962:2017-02-03T12:09:22.280+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1441

    [CAMEL-10783] XSLT transform cannot use default DTM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10783

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1441.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1441
    
----
commit b265e3cfa475ca1752cc354612704a1305206af9
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-02-03T11:02:38Z

    [CAMEL-10783] XSLT transform cannot use default DTM

----

githubbot:1486096991:2017-02-03T12:43:11.457+0000:1486096991:2017-02-03T12:43:11.457+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1442

    [CAMEL-10783] XSLT transform cannot use default DTM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10783m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1442.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1442
    
----
commit 5c52ec0b54d2989fbbf361d2768feed0f82e8fbb
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-02-03T11:02:38Z

    [CAMEL-10783] XSLT transform cannot use default DTM

----

githubbot:1486097488:2017-02-03T12:51:28.113+0000:1486097488:2017-02-03T12:51:28.113+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1441

davsclaus:1486098866:2017-02-03T13:14:26.535+0000:1486098866:2017-02-03T13:14:26.535+0000:Thanks for the PR
githubbot:1486101816:2017-02-03T14:03:36.988+0000:1486101816:2017-02-03T14:03:36.988+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1442
"
0,CAMEL-10782,Bug,Minor,"2.16.4, 2.18.2","2.17.6, 2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.3, 2.19.0",Claus Ibsen,Stefan Roos,0,2,2017-02-03 09:56:46+00:00,2017-02-28 10:01:01+00:00,"Camel cannot fetch files from users home directory when using readlock=changed. 


Route from URI is defined like this:


<from uri=""sftp://testi@server:22?password=password&include=PSOP_123-.*\.(xml|pdf)&delete=true&readLock=changed&readLockTimeout=360000&readLockCheckInterval=180000&readLockMinAge=10s&maxMessagesPerPoll=100""/>


And from TRACE logs I can see stuff like this:


2017-02-03 10:59:45,146 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Using full directory listing to update file information for RemoteFile[PSOP_123-sdfsd.xml]. Consider enabling fastExistsCheck option.
2017-02-03 10:59:45,146 | TRACE | //testi@infra:22 | SftpOperations                   | 225 - org.apache.camel.camel-ftp - 2.16.4 | listFiles
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | List files PSOP_123-sdfsd.xml found 23 files
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Previous last modified: 0, new last modified: 0
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Previous length: 0, new length: 0
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | New older than threshold: 1486112375150
2017-02-03 10:59:45,150 | TRACE | //testi@infra:22 | ChangedExclusiveReadLockStrategy | 225 - org.apache.camel.camel-ftp - 2.16.4 | Exclusive read lock not granted. Sleeping for 20000 millis.


User home directory contains only 1 file, which does match to include parameter. It does seem, that camel-ftp is trying to check file readlock from the server root. 


When placing the files to a subdirectory in users home, this does not happen.","davsclaus:1486087168:2017-02-03T09:59:28.876+0000:1486087168:2017-02-03T09:59:28.876+0000:Can rely on the FTP client to provide the timstampe / file size. And if the client returns 0 all the time, then there is nothing Camel can do.

Can you do TRACE logging from the sub folders where it shows those values.

Then try to reach out to the FTP client project and see if they can find an issue/bug in their library.
StefanR:1486095250:2017-02-03T12:14:10.175+0000:1486095250:2017-02-03T12:14:10.175+0000:What was apparrently happening was that, when file was created it was zero in length. So camel-ftp went sleeping for short time, because it could not get readlock (minsize 1). After that it tried to reCheck the file, but for some reason from the server root, / , and not from users home, /home/testi/. File count which was reported by camel-ftp, matches the count from that servers root (home dir count would be less than 10 files/dirs).

I found a way around this by setting source directory to ""./"" like this:
<from uri=""sftp://testi@infra:22/./?password=passu&amp;.....

With that kind of from URI it does seem to work normally.

davsclaus:1486095546:2017-02-03T12:19:06.202+0000:1486095546:2017-02-03T12:19:06.202+0000:Can you try test with latest 2.18.2 release
StefanR:1486422488:2017-02-07T07:08:08.765+0000:1486422488:2017-02-07T07:08:08.765+0000:Yes its the same thing with Camel 2.18.2.

I created and started following route:

        from(""sftp://testi@infra:22/""
        		+""?password=passu""
        		+""&include=.*xml""
        		+""&delete=true""
        		+""&readLock=changed""
        		+""&readLockTimeout=30000""
        		+""&readLockCheckInterval=10000""
        		+""&readLockMinAge=5s""
        		+""&maxMessagesPerPoll=100""
        		).routeId(""SFTP-TEST-ROUTE"")
        .log(""got file ${in.header.camelFileName}"")
        .to(""file:sftp-files"");

And then created a file with ""cat > test.xml"", now camel firts sees it as empty, so it will sleep.
Then when trying to check it again:
[                          main] DefaultCamelContext            INFO  Apache Camel 2.18.2 (CamelContext: camel-1) started in 1.159 seconds

[ad #0 - sftp://testi@infra:22/] angedExclusiveReadLockStrategy WARN  Cannot acquire read lock within 30000 millis. Will skip the file: RemoteFile[test.xml]
[ad #0 - sftp://testi@infra:22/] angedExclusiveReadLockStrategy WARN  Cannot acquire read lock within 30000 millis. Will skip the file: RemoteFile[test.xml]


And after modifying the route by changing the directory from ""/"" to ""/./"":
        from(""sftp://testi@infra:22/./""

And starting it:

[                          main] DefaultCamelContext            INFO  Apache Camel 2.18.2 (CamelContext: camel-1) started in 1.060 seconds
[ #0 - sftp://testi@infra:22/./] SFTP-TEST-ROUTE                INFO  got file test.xml



 

StefanR:1486425636:2017-02-07T08:00:36.083+0000:1486425636:2017-02-07T08:00:36.083+0000:Added full trace log from camel 2.18.2 session with similar incident. Notice how list file count changes after camel goes to sleeping (from 10 files to 23).
StefanR:1487299376:2017-02-17T10:42:56.943+0000:1487299376:2017-02-17T10:42:56.943+0000:Actually camel is not able to retrieve the files ever from the root of the users home directory, when readLock=changed.
This is because parent dir is resolved to ""/"" in SftpChangedExclusiveReadLockStrategy:

line 81:
                files = operations.listFiles(file.getParent());

File absolute path is ""test.xml"" because leading slash is stripped away from the path,
so in getParent the parent is resolved to ""//"", which will the be normalized in the methods last line to ""/"".
So getParent method returns server root as an argument to listFiles method.

I don't know what would be the best way to fix this, but I will continue to investigate it if I have the time...


davsclaus:1488245787:2017-02-28T09:36:27.618+0000:1488245787:2017-02-28T09:36:27.618+0000:Can you try with fastExistsCheck=true"
0,CAMEL-10781,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,2,2017-02-03 09:35:54+00:00,2017-02-08 12:18:00+00:00,"In this table
https://github.com/apache/camel/tree/master/components#other-components


We should add the `Available From` column with the version when it was added.","onders:1486526984:2017-02-08T12:09:44.198+0000:1486526984:2017-02-08T12:09:44.198+0000:any help still needed?
davsclaus:1486527480:2017-02-08T12:18:00.219+0000:1486527480:2017-02-08T12:18:00.219+0000:Oh thanks but we have implemented this now"
0,CAMEL-10780,Test,Trivial,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-02-03 08:56:36+00:00,2017-02-03 13:25:27+00:00,"I was hoping on doing some refactoring of DefaultFactoryFinder but, the functionality I was hoping on doing turned out not to need it. So at the end I was left with this unit test for DefaultFactoryFinder that could help someone refactoring in the future.","githubbot:1486099527:2017-02-03T13:25:27.243+0000:1486099527:2017-02-03T13:25:27.243+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1440
"
0,CAMEL-10779,Improvement,Minor,None,2.19.0,"

authentication
oauth2

",Closed,Fixed,2.19.0,Zoran Regvart,Mabrouk Belhout,0,3,2017-02-02 14:42:03+00:00,2017-02-08 08:36:24+00:00,"We had to connect to a Salesforce partner instance. Our partner did not provide login/password but instead a clientid clientsecret and refreshtoken.


Today in camel-salesforce component, authentication is forced to be login/password based.


This improvement should provide an alternative using refresh_token method of oauth.


Objective is to enrich the SalesforceSession.getLoginRequest(HttpConversation) method and add 
fields.put(""grant_type"", ""refresh_token"");
as an alternative to 
fields.put(""grant_type"", ""password"");


this has impacts on SalesforceLoginConfig class and other authentication involved classes.","githubbot:1486363697:2017-02-06T14:48:17.234+0000:1486363697:2017-02-06T14:48:17.234+0000:GitHub user ajaira opened a pull request:

    https://github.com/apache/camel/pull/1448

    [CAMEL-10779] Authentication : provide a way to use refresh_token mode in addition to password method

    Objective is to enrich the SalesforceSession.getLoginRequest(HttpConversation) method and add 
    fields.put(""grant_type"", ""refresh_token"");
    as an alternative to 
    fields.put(""grant_type"", ""password"");
    
    jira: https://issues.apache.org/jira/browse/CAMEL-10779

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ajaira/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1448.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1448
    
----
commit 18a6353f9b1638ae4ca6337f7d071b0f35e47f0c
Author: Jaira abderrahim <abderrahim.jaira.externe@capgemini.com>
Date:   2017-02-06T14:35:36Z

    Authentication : provide a way to use refresh_token mode in addition to password method

commit 9d9e6d19c4d88f3f0d2fbf356dd45af8b882ebc1
Author: Jaira abderrahim <abderrahim.jaira.externe@capgemini.com>
Date:   2017-02-06T14:42:55Z

    Merge branch 'master' of https://github.com/ajaira/camel

----

davsclaus:1486459868:2017-02-07T17:31:08.699+0000:1486459868:2017-02-07T17:31:08.699+0000:Thanks for the PR
mabroukb:1486461130:2017-02-07T17:52:10.789+0000:1486461130:2017-02-07T17:52:10.789+0000:PR provided and merged into 2.19.0
githubbot:1486514184:2017-02-08T08:36:24.381+0000:1486514184:2017-02-08T08:36:24.381+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1448
"
0,CAMEL-10778,Bug,Major,2.18.1,,"
None
",Closed,Invalid,None,Grzegorz Grzybek,Paolo Antinori,0,1,2017-02-02 14:24:02+00:00,2017-02-02 14:38:02+00:00,"Bug is still present with 2.19.0-SNAPSHOT, tested on 2017/02/02


Probably a race condition.


an xml containing this section:



  <bean id=""jetty9"" class=""org.apache.camel.component.jetty9.JettyHttpComponent9"">
    <property name=""sslContextParameters"" ref=""mySslContext"" />
  </bean> 

  <camelContext trace=""true"" id=""camel"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <!--from uri=""jetty:https://localhost:8091/invoke?sslContextParametersRef=mySslContext&amp;matchOnUriPrefix=true""/-->
            <from uri=""jetty9:https://localhost:8091/invoke?matchOnUriPrefix=true""/>
            <process ref=""processor""/>
        </route>
    </camelContext>




generates this exception:



[         Blueprint Extender: 1] ServerConnector                INFO  Started ServerConnector@178a115{ssl-http/1.1}{localhost:8091}
[         Blueprint Extender: 1] Server                         INFO  Started @13602ms
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: route1 started and consuming from: Endpoint[jetty9:https://localhost:8091/invoke?matchOnUriPrefix=true]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.17.0.redhat-630187 (CamelContext: camel) started in 0.915 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.17.0.redhat-630187 (CamelContext: camel) is shutting down
[         Blueprint Extender: 1] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[amel) thread #0 - ShutdownTask] ServerConnector                INFO  Stopped ServerConnector@178a115{ssl-http/1.1}{localhost:8091}
[amel) thread #0 - ShutdownTask] ContextHandler                 INFO  Stopped o.e.j.s.ServletContextHandler@1f733f5e{/,null,UNAVAILABLE}
[amel) thread #0 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: route1 shutdown complete, was consuming from: Endpoint[jetty9:https://localhost:8091/invoke?matchOnUriPrefix=true]
[         Blueprint Extender: 1] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.17.0.redhat-630187 (CamelContext: camel) uptime 0.982 seconds
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.17.0.redhat-630187 (CamelContext: camel) is shutdown in 0.050 seconds
[         Blueprint Extender: 1] BlueprintContainerImpl         ERROR Unable to start blueprint container for bundle org.jboss.fuse.samples.camel-jetty-ssl-server-blueprint/3.0.0
org.apache.camel.RuntimeCamelException: Cannot auto create component: jetty9
	at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:410)
	at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:386)
	at org.apache.camel.blueprint.handler.CamelNamespaceHandler$CamelDependenciesFinder.process(CamelNamespaceHandler.java:1048)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.processProcessors(BlueprintContainerImpl.java:529)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:361)
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:269)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at org.apache.aries.blueprint.container.ExecutorServiceWrapper.run(ExecutorServiceWrapper.java:106)
	at org.apache.aries.blueprint.utils.threading.impl.DiscardableRunnable.run(DiscardableRunnable.java:48)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.IllegalArgumentException: Cannot add component as its already previously added: jetty9
	at org.apache.camel.impl.DefaultCamelContext.addComponent(DefaultCamelContext.java:370)
	at org.apache.camel.impl.DefaultCamelContext.getComponent(DefaultCamelContext.java:401)
	... 16 more","paolo.antinori:1486017482:2017-02-02T14:38:02.102+0000:1486017482:2017-02-02T14:38:02.102+0000:sorry, I made a mistake when testing this on 2.19.0.

It works with that version, or at least it doesn't fails consistently as it does on 2.17.1, so I think we can close this."
0,CAMEL-10777,Bug,Minor,"2.16.3, 2.17.3",,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Miroslav Borský,0,4,2017-02-01 15:01:44+00:00,2017-09-21 10:58:52+00:00,"The following proxy will accept incoming calls on http://localhost:8888/lb and respond to them.



<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"" xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"">
	<camelContext id=""test-ctx"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<route streamCache=""true"">
			<from uri=""jetty:http://0.0.0.0:8888/lb/?matchOnUriPrefix=true"" />
			<removeHeaders pattern=""CamelServlet.*""/>
			<removeHeaders pattern=""CamelHttpServlet.*""/>
			<removeHeader headerName=""CamelHttpUri""/>
			<loadBalance inheritErrorHandler=""false"">
                <failover maximumFailoverAttempts=""1"" />
				<to uri=""jetty:http://localhost:8889/1/?bridgeEndpoint=true&amp;throwExceptionOnFailure=true"" />
				<to uri=""jetty:http://localhost:8888/2/?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"" />
			</loadBalance>
		</route>
		<route>
			<from uri=""jetty:http://0.0.0.0:8888/2/?matchOnUriPrefix=true"" />
			<setBody><constant>2</constant></setBody>
		</route>
	</camelContext>
</blueprint>




When nothing runs on port 8889 (the first node in the failover), the expected behaviour is to respond always with the number 2.
The observed behaviour is, that service respond with returning the request back for the first call. If the second call is made within a short time (up to 30 second in my case), the service will respond correctly.


Workaround is to use for example http4 instead of jetty:http.


Tried with camel 2.17.3 and 2.16.3","acosentino:1485932629:2017-02-01T15:03:49.465+0000:1485932629:2017-02-01T15:03:49.465+0000:Did you try with Camel 2.18.x or master? 2.17.x is EOL, 2.16.x is not active.
mborsky:1485933408:2017-02-01T15:16:48.027+0000:1485933408:2017-02-01T15:16:48.027+0000:No, I did not try with 2.18.x. I do not have easy access to prepared environment with this version.
davsclaus:1505962732:2017-09-21T10:58:52.791+0000:1505962732:2017-09-21T10:58:52.791+0000:Jetty producer is deprecated"
0,CAMEL-10776,Improvement,Minor,2.19.0,,"
None
",Resolved,Invalid,None,Unassigned,Christopher Harris,0,2,2017-02-01 10:36:59+00:00,2017-02-03 13:59:56+00:00,"Optimisations to issue CAMEL-10772, Check if there are no arguments/parameters then just return the doInvoke.","chrisjheap:1485917065:2017-02-01T10:44:25.900+0000:1485917065:2017-02-01T10:44:25.900+0000:Pull Request
https://github.com/apache/camel/pull/1437

davsclaus:1486101596:2017-02-03T13:59:56.033+0000:1486101596:2017-02-03T13:59:56.033+0000:The PR caused side-effects"
0,CAMEL-10775,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,2,2017-02-01 09:01:40+00:00,2017-02-02 20:07:09+00:00,"It would be good if we can get information when a component was added to Apache Camel. So users can see if its a new component or old etc.


We could maybe hack a script that iterates all the components and then find out via git log / branch or what it takes to see when it was in the git repo and from that branch / tag find the version number.


We could then add those versions manually to @Metadata or something on the @UriEndpoint so we can get that information in the component json schema and as well at runtime.


We basically need just a one-off to get this information for now, and then in the future we can add the version manually when we add new components.","zregvart:1485913849:2017-02-01T09:50:49.043+0000:1485914021:2017-02-01T09:53:41.067+0000:GNU Awk script to fetch version information from git log with patch information, run with:
{code}
$ git log -p pom.xml|gawk -f component-versions.gawk
{code}
from {{components}} directory
davsclaus:1485914438:2017-02-01T10:00:38.989+0000:1485914438:2017-02-01T10:00:38.989+0000:Thanks a lot Zoran that is brilliant.

I got the java pieces in place so its a matter of adding those versions from your script
davsclaus:1485918535:2017-02-01T11:08:55.062+0000:1485918535:2017-02-01T11:08:55.062+0000:Notice that the script reports

camel-ironmq,2.18-SNAPSHOT

But this was added in 2.17
https://github.com/apache/camel/tree/camel-2.17.x/components/camel-ironmq


davsclaus:1485921802:2017-02-01T12:03:22.207+0000:1485921802:2017-02-01T12:03:22.207+0000:Ah when its -SNAPSHOT its the previous version, eg 2.17.0 and so on.
davsclaus:1485945958:2017-02-01T18:45:58.645+0000:1485945958:2017-02-01T18:45:58.645+0000:Got as far as camel-spring
zregvart:1485961337:2017-02-01T23:02:17.626+0000:1485961337:2017-02-01T23:02:17.626+0000:Yeah, I forgot to mention that gawk script is a quick hack, didn't I? Sorry about that, try this version, and run it with:

{code}
$ git log -p pom.xml|tac|gawk -f component-versions.gawk
{code}

_Might_ be ok...
davsclaus:1485998148:2017-02-02T09:15:48.672+0000:1485998148:2017-02-02T09:15:48.672+0000:Thanks Zoran your script helps alot. When there was SNAPSHOT i did a check in maven central to find out.
davsclaus:1485999309:2017-02-02T09:35:09.933+0000:1485999309:2017-02-02T09:35:09.933+0000:We need a little extra stuff for the json data formats to set that version in their schema files
davsclaus:1485999359:2017-02-02T09:35:59.066+0000:1485999359:2017-02-02T09:35:59.066+0000:And we should output in the catalog report if any components / data formats / languages have missing first version, so we can spot those to get them also corrected
davsclaus:1486016749:2017-02-02T14:25:49.082+0000:1486016749:2017-02-02T14:25:49.082+0000:[WARNING] 	Components without firstVersion defined: 15
[WARNING] 		aws-cw.json
[WARNING] 		aws-ddb.json
[WARNING] 		aws-ddbstream.json
[WARNING] 		aws-ec2.json
[WARNING] 		aws-kinesis.json
[WARNING] 		aws-s3.json
[WARNING] 		aws-sdb.json
[WARNING] 		aws-ses.json
[WARNING] 		aws-sns.json
[WARNING] 		aws-sqs.json
[WARNING] 		aws-swf.json
[WARNING] 		etcd.json
[WARNING] 		xmlrpc.json
[WARNING] 		xmlsecurity.json
[WARNING] 		xmpp.json
davsclaus:1486020906:2017-02-02T15:35:06.624+0000:1486020906:2017-02-02T15:35:06.624+0000:[WARNING] 	DataFormats without firstVersion defined: 10
[WARNING] 		gzip.json
[WARNING] 		serialization.json
[WARNING] 		string.json
[WARNING] 		zip.json
[WARNING] 		crypto.json
[WARNING] 		pgp.json
[WARNING] 		json-gson.json
[WARNING] 		json-jackson.json
[WARNING] 		json-johnzon.json
[WARNING] 		json-xstream.json
davsclaus:1486029115:2017-02-02T17:51:55.210+0000:1486029115:2017-02-02T17:51:55.210+0000:Okay we got this for all components, data formats, and languages.

We could then potentially enrich the readme adoc maven tooling to include this information, so all the docs shows which Camel version it was introduced.
davsclaus:1486029128:2017-02-02T17:52:08.696+0000:1486029128:2017-02-02T17:52:08.696+0000:And we can add the version number to this table as well
https://github.com/apache/camel/tree/master/components#components
davsclaus:1486037229:2017-02-02T20:07:09.209+0000:1486037229:2017-02-02T20:07:09.209+0000:Oh I forgot we should make it output the available in the adoc readme files as well"
0,CAMEL-10774,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-31 13:33:58+00:00,2017-02-03 19:31:46+00:00,"We should find a way to add the other kind of Camel artifacts such as camel-swagger-java, camel-zipkin, and so on which are not a component, data format, language etc.


See also CAMEL-10773",
0,CAMEL-10773,Bug,Major,2.18.2,None,"
None
",Resolved,Invalid,None,Unassigned,Thomas Diesler,0,2,2017-01-31 13:03:58+00:00,2017-01-31 14:31:58+00:00,"$ jar -tf ~/.m2/repository/org/apache/camel/camel-catalog/2.18.2/camel-catalog-2.18.2.jar | grep swagger
org/apache/camel/catalog/docs/swagger-java.adoc
org/apache/camel/catalog/docs/swagger.adoc




Maybe this is true for other components, dataformats, languages too.","davsclaus:1485839560:2017-01-31T13:12:40.027+0000:1485839560:2017-01-31T13:12:40.027+0000:That is not a Camel component, data format, language or EIP pattern. Those are the ones the camel catalog has JSon information about.
And then it holds all the website documentation from the adoc files and hence you can see those two .adoc files.

There are other Camel artifacts like that such as 

camel-eclipse, camel-blueprint, camel-cdi, camel-jasypt, camel-rx, camel-scala, camel-servletlistener, camel-shiro, camel-stax, camel-swagger, camel-swagger-java, camel-test-*, camel-urlrewrite, camel-zipkin
tdiesler:1485842503:2017-01-31T14:01:43.372+0000:1485842503:2017-01-31T14:01:43.372+0000:Should a given runtime catalog not report whether e.g. camel-swagger is supported?
davsclaus:1485844318:2017-01-31T14:31:58.830+0000:1485844318:2017-01-31T14:31:58.830+0000:Any runtime should be able to override and provide their view of the catalog"
0,CAMEL-10772,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Christopher Harris,0,3,2017-01-31 11:24:09+00:00,2017-01-31 18:44:53+00:00,"Convention over configuration


Improvement in AbstractCamelInvocationHandler.invokeProxy, to auto detect if the invocation is binding capable. 


It is determined by checking the parameter count and annotation types on each parameter, and only use binding if it is capable. Otherwise fallback on to the old bean invocation way.","chrisjheap:1485833339:2017-01-31T11:28:59.283+0000:1485833339:2017-01-31T11:28:59.283+0000:Pull Request

https://github.com/apache/camel/pull/1434
davsclaus:1485859489:2017-01-31T18:44:49.910+0000:1485859489:2017-01-31T18:44:49.910+0000:Thanks for the PR
githubbot:1485859493:2017-01-31T18:44:53.750+0000:1485859493:2017-01-31T18:44:53.750+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1434
"
0,CAMEL-10771,Bug,Major,"2.17.0, 2.18.1","2.17.6, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.2, 2.19.0",Andrea Cosentino,Jochen Riedlinger,0,2,2017-01-31 10:27:26+00:00,2017-01-31 15:31:50+00:00,"Although I have configured the endpoint-/port name I get this WARNING in my logs:


2017-01-31 09:27:10.662 | WARN | org.apache.camel.component.cxf.CxfEndpoint | http-0.0.0.0:8443-1 | The endpoint/port name of cxf://https://someURL?cxfEndpointConfigurer=%23myWSCxfEndpointConfigurer&dataFormat=PAYLOAD&defaultOperationName=defaultOperation&portName=%7Bhttp%3A%2F%2Fexample.com%2Fx%2y%2FGz%7DMyBinding_soap12&wrapped=true&wrappedStyle=true&wsdlURL=wsdl-reference%2Fmywsdl.wsdl is empty, cxf will try to load the first one in wsdl for you. | org.apache.camel.component.cxf.CxfEndpoint.checkName(CxfEndpoint.java:646)


The cause for this is that the ""checkName"" method checks the instance variable ""portName"" and not ""portNameString"" (see attached screenshot).
Therefore I think it's better if the lines


checkName(portName, ""endpoint/port name"");
checkName(serviceName, ""service name"");


get replaced by


checkName(getPortName(), ""endpoint/port name"");
checkName(getServiceName(), ""service name"");


I'll send a Pull Request soon....","githubbot:1485830596:2017-01-31T10:43:16.306+0000:1485830596:2017-01-31T10:43:16.306+0000:GitHub user jochenr opened a pull request:

    https://github.com/apache/camel/pull/1433

    CAMEL-10771: check endpoint/port and service names via getter instead of

    instance variables

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jochenr/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1433.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1433
    
----
commit aa129b077801fc8ae13a7e784095b9151b169153
Author: jochenr <jochenr@users.noreply.github.com>
Date:   2017-01-31T10:41:30Z

    CAMEL-10771: check endpoint/port and service names via getter instead of
    instance variables

----

j_ri:1485830660:2017-01-31T10:44:20.507+0000:1485830660:2017-01-31T10:44:20.507+0000:https://github.com/apache/camel/pull/1433

githubbot:1485847910:2017-01-31T15:31:50.002+0000:1485847910:2017-01-31T15:31:50.002+0000:Github user jochenr closed the pull request at:

    https://github.com/apache/camel/pull/1433
"
0,CAMEL-10770,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-31 08:40:03+00:00,2017-01-31 10:43:02+00:00,No Desc,"davsclaus:1485826991:2017-01-31T09:43:11.904+0000:1485826991:2017-01-31T09:43:11.904+0000:Because Spring Boot is so popular we may consider add support for it in 2.18.x by dropping the deprecated APIs in 2.18.x so it works against Spring Boot 1.5.x, but keep the spring boot version to 1.4.x.
davsclaus:1485830582:2017-01-31T10:43:02.831+0000:1485830582:2017-01-31T10:43:02.831+0000:Okay gave a little test with 2.18.2 and spring boot 1.5.1 and they work fine together. Its just the deprecated FarJarRouteBuilder etc you should not use."
0,CAMEL-10769,Improvement,Major,2.19.0,None,"
None
",Closed,Fixed,2.19.0,Claus Ibsen,Bob Paulin,0,3,2017-01-31 04:09:39+00:00,2017-01-31 13:48:56+00:00,Tika Metadata values can also have string arrays.  Adding support for it.,"githubbot:1485807354:2017-01-31T04:15:54.364+0000:1485807354:2017-01-31T04:15:54.364+0000:GitHub user bobpaulin opened a pull request:

    https://github.com/apache/camel/pull/1432

    CAMEL-10769 - Added Tika Mutlivalue metadata support.  

    Solicited the Tika Community for feedback on the component and Tim Allison suggested supporting more than just single value metadata.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bobpaulin/camel bug/tika-metadata-multivalue

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1432.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1432
    
----
commit 15d47770e67b2423c4732beefd6deeec344e91c5
Author: Bob Paulin <bob@bobpaulin.com>
Date:   2017-01-31T04:14:12Z

    CAMEL-10769 - Added Tika Mutlivalue metadata support.  Thanks Tim
    Allison!

----

githubbot:1485824911:2017-01-31T09:08:31.703+0000:1485824911:2017-01-31T09:08:31.703+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1432

davsclaus:1485824951:2017-01-31T09:09:11.880+0000:1485824951:2017-01-31T09:09:11.880+0000:Thanks for the PR
bobpaulin:1485841736:2017-01-31T13:48:56.173+0000:1485841736:2017-01-31T13:48:56.173+0000:Closed.  Thanks!"
0,CAMEL-10768,Improvement,Major,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,Claus Ibsen,Tim Dudgeon,0,4,2017-01-30 18:41:53+00:00,2017-05-28 16:00:34+00:00,"Unlike similar components it seems that the Dropbox component does not allow to specify key parameters (such as the file name) using headers.
Doing so would make it much more useful.
See discussion here:
http://camel.465427.n5.nabble.com/Specifying-file-names-using-Dropbox-component-td5793105.html","davsclaus:1488331282:2017-03-01T09:21:22.788+0000:1488331282:2017-03-01T09:21:22.788+0000:Contributions is welcome
davsclaus:1488862487:2017-03-07T12:54:47.757+0000:1488862487:2017-03-07T12:54:47.757+0000:The camel-box is now using the new v2 api. 

People is welcome to look into if headers is supported today and if not contribute support for this.
thomaslehoux:1495887806:2017-05-27T20:23:26.440+0000:1495887806:2017-05-27T20:23:26.440+0000:[~davsclaus] You speak about camel-dropbox and not camel-box, right ?

I took a look of the camel-dropbox component and made a patch in order to support setting options with headers. It's for all endpoint options except accessToken and clientIdentifier, for which, IMO, it was not relevant. I can create a PR if you want.
githubbot:1495916583:2017-05-28T04:23:03.821+0000:1495916583:2017-05-28T04:23:03.821+0000:GitHub user tlehoux opened a pull request:

    https://github.com/apache/camel/pull/1722

    CAMEL-10768: Dropbox component support specifying route params using headers

    This a patch to support setting options with headers for dropbox component. It's for all endpoint options except accessToken and clientIdentifier, for which, IMO, it was not relevant. 
    - remotePath
    - localPath
    - newRemotePath
    - uploadMode
    - query

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tlehoux/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1722.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1722
    
----
commit 1a544e57af3afb21c39c26edfaab98456472c9c9
Author: Thomas Lehoux <tlehoux@gmail.com>
Date:   2017-05-28T04:11:43Z

    Dropbox component support specifying route params using headers

----

davsclaus:1495953846:2017-05-28T14:44:06.118+0000:1495953846:2017-05-28T14:44:06.118+0000:Thanks for the PR
githubbot:1495958434:2017-05-28T16:00:34.393+0000:1495958434:2017-05-28T16:00:34.393+0000:Github user tlehoux closed the pull request at:

    https://github.com/apache/camel/pull/1722
"
0,CAMEL-10767,Bug,Major,2.19.0,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Zoran Regvart,Zoran Regvart,0,2,2017-01-30 18:12:00+00:00,2017-01-30 20:04:41+00:00,"A change was made to swagger-modules in swagger-core#208335a08cae610d3b5eaea75f5552efaf15477b (version 1.5.12) that changed java.lang.Double type with java.math.BigDecimal which in turn made swager-parser incompatible in the version used (1.0.22).


This was later fixed in swagger-parser swagger-parser#d7ac638f4355cc043a14dfcd244264aa1440c627 and released as version 1.0.25.


Version of swagger-parser needs to be updated to 1.0.25.","githubbot:1485771349:2017-01-30T18:15:49.475+0000:1485771349:2017-01-30T18:15:49.475+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1431

    CAMEL-10767 Versions of swagger-models and swag...

    ...ger-parser in conflict
    
    A change was made to `swagger-modules` in `swagger-core`[1] (version
    1.5.12) that changed `java.lang.Double` type with `java.math.BigDecimal`
    which in turn made `swager-parser` incompatible in the version used
    (1.0.22).
    
    This was later fixed in `swagger-parser`[2] and released as version
    1.0.25.
    
    Version of `swagger-parser` updated to 1.0.25, added a test to parse the
    petstore example to catch any further version mismatches.
    
    [1] https://github.com/swagger-api/swagger-core/commit/208335a08cae610d3b5eaea75f5552efaf15477b
    [2] https://github.com/swagger-api/swagger-parser/commit/d7ac638f4355cc043a14dfcd244264aa1440c627

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10767

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1431.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1431
    
----
commit 8fc774293dfa7a957829f35a27cba6943ab914b5
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-30T17:48:16Z

    CAMEL-10767 Versions of swagger-models and swag...
    
    ...ger-parser in conflict
    
    A change was made to `swagger-modules` in `swagger-core`[1] (version
    1.5.12) that changed `java.lang.Double` type with `java.math.BigDecimal`
    which in turn made `swager-parser` incompatible in the version used
    (1.0.22).
    
    This was later fixed in `swagger-parser`[2] and released as version
    1.0.25.
    
    Version of `swagger-parser` updated to 1.0.25, added a test to parse the
    petstore example to catch any further version mismatches.
    
    [1] https://github.com/swagger-api/swagger-core/commit/208335a08cae610d3b5eaea75f5552efaf15477b
    [2] https://github.com/swagger-api/swagger-parser/commit/d7ac638f4355cc043a14dfcd244264aa1440c627

----

githubbot:1485777584:2017-01-30T19:59:44.276+0000:1485777584:2017-01-30T19:59:44.276+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1431
"
0,CAMEL-10766,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Unassigned,Dmitry Volodin,0,5,2017-01-30 15:40:34+00:00,2017-02-03 12:02:43+00:00,"We required Camel ElasticSearch component with latest ElasticSearch 5.x API support. For backward compatibility we've migrated curent camel-elasticsearch to the new camel-elasticsearch5.
As ${lucene-version} was defined globally, it affected on both ElasticSearch API versions - 2.4.3 and 5.1.2 and one of the components doesn't work correctly. I was removed global Apache Lucene library global definition and place it to the dependent components. Please correct dependencies if needed. Also uploaded new component and all changes as patch.","acosentino:1485820583:2017-01-31T07:56:23.791+0000:1485820583:2017-01-31T07:56:23.791+0000:Are you able to open a Pull Request on Github? It makes easier the review process..
githubbot:1485841400:2017-01-31T13:43:20.445+0000:1485841400:2017-01-31T13:43:20.445+0000:GitHub user dmvolod opened a pull request:

    https://github.com/apache/camel/pull/1435

    CAMEL-10766: Create a new camel-elasticsearch5 component for supporting ElasticSearch 5.x Java API

    For backward compatibility we've migrated current camel-elasticsearch to the new camel-elasticsearch5.
    As ${lucene-version} was defined globally, it affected on both ElasticSearch API versions - 2.4.3 and 5.1.2 and one of the components doesn't work correctly. I removed global Apache Lucene library definition and place it to the dependent components. Please correct dependencies if needed. Also uploaded new component and all changes as patch.
    The following camel-elasticsearch functions were removed as ElasticSearch API deprecated (removed) features:
    - consistencyLevel parameter (replaced with waitForActiveShards)
    - local JVM ES cluster running (not supported anymore)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmvolod/camel CAMEL-10766

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1435.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1435
    
----
commit c95db786d08bed09ecf783b8c565be05d4fdd79e
Author: Dmitry Volodin <dmvolod@gmail.com>
Date:   2017-01-31T11:47:33Z

    CAMEL-10766: Create a new camel-elasticsearch5 component for supporting
    ElasticSearch 5.x Java API

----

dmvolod:1485841444:2017-01-31T13:44:04.791+0000:1485841444:2017-01-31T13:44:04.791+0000:I've submitted a pull request on Github...
githubbot:1485997519:2017-02-02T09:05:19.573+0000:1485997519:2017-02-02T09:05:19.573+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1435

davsclaus:1485997635:2017-02-02T09:07:15.694+0000:1485997635:2017-02-02T09:07:15.694+0000:Thanks for the PR it has been merged.

We need a karaf feature for this as well.
[~ancosen] wonder if you are aware of the newer ES JARs are OSGi bundles already? Because the older JARs are wrapped and from the SMX team. So if they are not we need the SMX team to do a bundle release for the newer version
davsclaus:1485998199:2017-02-02T09:16:39.238+0000:1485998199:2017-02-02T09:16:39.238+0000:I wonder if its too soon to deprecate the old camel-elasticsearch component?
acosentino:1485998244:2017-02-02T09:17:24.437+0000:1485998244:2017-02-02T09:17:24.437+0000:No, ES JARs are not OSGi bundles already. I'll take care of creating the bundles on SMX :-)
acosentino:1485998328:2017-02-02T09:18:48.842+0000:1485998328:2017-02-02T09:18:48.842+0000:In my opinion it is too soon for deprecation. I guess a lot of users still rely on ES 2.
dmvolod:1486007285:2017-02-02T11:48:05.802+0000:1486007285:2017-02-02T11:48:05.802+0000:Yes, ES 2.4.x will officially support until 28.02.2018
https://www.elastic.co/support/eol"
0,CAMEL-10765,Improvement,Major,2.18.1,2.19.0,"
None
",Closed,Fixed,2.19.0,Claus Ibsen,Thomas Papke,0,3,2017-01-30 14:08:10+00:00,2017-01-30 18:26:13+00:00,"I use camel-cxf component, which currently bring some transitive ""oauth"" jars:



[INFO] +- org.apache.camel:camel-cxf:jar:2.18.1:compile
[INFO] |  \- org.apache.cxf:cxf-rt-rs-security-oauth:jar:3.1.9:compile
[INFO] |     \- net.oauth.core:oauth-provider:jar:20100527:compile
[INFO] |        \- net.oauth.core:oauth:jar:20100527:compile




I have looked at the camel-cxf documentation and also scan the code of camel-cxf, but here is currently no oauth(1) handling implemented. So I assume this dependency is not correctly defined. I have tried to remove it, but camel-cxf seems to transitive rely on cxf-rt-rs-client.


Proposal for change:



Remove oauth dependency and proper define dependency to cxf-rt-rs-client (since this module compile against org.apache.cxf.jaxrs.client):

diff --git a/components/camel-cxf/pom.xml b/components/camel-cxf/pom.xml
index 5c917bc..0415781 100644
--- a/components/camel-cxf/pom.xml
+++ b/components/camel-cxf/pom.xml
@@ -110,7 +110,7 @@
     </dependency>
     <dependency>
         <groupId>org.apache.cxf</groupId>
-        <artifactId>cxf-rt-rs-security-oauth</artifactId>
+        <artifactId>cxf-rt-rs-client</artifactId>
         <version>${cxf-version}</version>
     </dependency>





With this patch, camel-cxf module still run successfully.","davsclaus:1485760442:2017-01-30T15:14:02.076+0000:1485760442:2017-01-30T15:14:02.076+0000:Would you try to provide the patch as a github PR?
http://camel.apache.org/contributing

githubbot:1485762908:2017-01-30T15:55:08.954+0000:1485762908:2017-01-30T15:55:08.954+0000:GitHub user Thopap opened a pull request:

    https://github.com/apache/camel/pull/1428

    CAMEL-10765: Remove unused oauth dependency from camel-cxf pom

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Thopap/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1428.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1428
    
----
commit f37c5576fa32d499359d0aaeb4be5f8e3e8782fb
Author: Thomas Papke <thomas.papke@icw.de>
Date:   2017-01-30T15:49:07Z

    CAMEL-10765: Remove unused oauth dependency from camel-cxf pom

----

thopap:1485762962:2017-01-30T15:56:02.567+0000:1485762962:2017-01-30T15:56:02.567+0000:Create a pull request: https://github.com/apache/camel/pull/1428
davsclaus:1485765923:2017-01-30T16:45:23.487+0000:1485765923:2017-01-30T16:45:23.487+0000:Thanks for the PR
githubbot:1485771973:2017-01-30T18:26:13.849+0000:1485771973:2017-01-30T18:26:13.849+0000:Github user Thopap closed the pull request at:

    https://github.com/apache/camel/pull/1428
"
0,CAMEL-10764,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-01-30 13:55:32+00:00,2017-01-30 17:14:18+00:00,"The BrowserCompatHostnameVerifier has been deprecated in HttpClient
version 4.4, instead DefaultHostnameVerifier should be used. The trunk of Apache HttpComponents, version 5.0 removes BrowserCompatHostnameVerifier, so this brings future compatibility to the component.


The version of HttpClient needs to be upgraded to 4.5.3 because of HTTPCLIENT-1802.","githubbot:1485755899:2017-01-30T13:58:19.667+0000:1485755899:2017-01-30T13:58:19.667+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1427

    CAMEL-10764 The use of BrowserCompatHostname...

    ...Verifier is deprecated
    
    The BrowserCompatHostnameVerifier has been deprecated in HttpClient
    version 4.4, instead DefaultHostnameVerifier should be used. The commit
    also changes the type of `x509HostnameVerifier` from
    `X509HostnameVerifier` to `HostnameVerifier`.
    
    Due to HTTPCLIENT-1802[1] version of HttpClient was upgraded to 4.5.3
    from 4.5.2.
    
    Compatibility note: this changes the getter `getX509HostnameVerifier`
    from `X509HostnameVerifier` to `HostnameVerifier` so any client code
    using this getter needs to be changed. For the setter
    `setX509HostnameVerifier` this is not an issue as the deprecated
    `X509HostnameVerifier` extends from `HostnameVerifier`.
    
    [1] https://issues.apache.org/jira/browse/HTTPCLIENT-1802

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10764

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1427.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1427
    
----
commit 4dfdd7eebd5f2db655edafb5e7ff4042bec39912
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-30T09:13:58Z

    CAMEL-10764 The use of BrowserCompatHostname...
    
    ...Verifier is deprecated
    
    The BrowserCompatHostnameVerifier has been deprecated in HttpClient
    version 4.4, instead DefaultHostnameVerifier should be used. The commit
    also changes the type of `x509HostnameVerifier` from
    `X509HostnameVerifier` to `HostnameVerifier`.
    
    Due to HTTPCLIENT-1802[1] version of HttpClient was upgraded to 4.5.3
    from 4.5.2.
    
    Compatibility note: this changes the getter `getX509HostnameVerifier`
    from `X509HostnameVerifier` to `HostnameVerifier` so any client code
    using this getter needs to be changed. For the setter
    `setX509HostnameVerifier` this is not an issue as the deprecated
    `X509HostnameVerifier` extends from `HostnameVerifier`.
    
    [1] https://issues.apache.org/jira/browse/HTTPCLIENT-1802

----

githubbot:1485767658:2017-01-30T17:14:18.793+0000:1485767658:2017-01-30T17:14:18.793+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1427
"
0,CAMEL-10763,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-01-30 13:29:07+00:00,2017-01-30 13:57:42+00:00,"It would be easier to create new components based on camel-http4 if the HttpComponent::createEndpoint would delegate to several create* methods instead of having all the logic in one method.


I've encountered this while experimenting on a component that could be based on camel-http4 but with HttpComponent::createEndpoint performing a lot of logic needed to create the Endpoint one would end up with a lot of duplication between the HttpComponent and one's own implementation.","githubbot:1485754437:2017-01-30T13:33:57.469+0000:1485754437:2017-01-30T13:33:57.469+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1426

    CAMEL-10763 Make HTTP4 component easy to extend

    I've re-factored the creation of `HttpClientBuilder` and `HttpClientConnectionManager` into separate methods. This makes `createEndpoint` contain less logic so that the component that could be based on `camel-http` could use these new metod to create it's own `Endpoint` implementation.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10763

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1426.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1426
    
----
commit 6b79bd33b56f1d0c924b43382452fa2042922829
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-27T19:19:10Z

    Extract HttpClientBuilder creation
    
    This commit extracts creation of `HttpClientBuilder` in a separate
    method `createHttpClientBuilder`, this method can be then reused from a
    component based on the `HttpComponent`.
    
    (cherry picked from commit e3601df1eb06988ca326dedfd7bb0f5508a3bb1a)

commit 65a19d3334edb3a6a4e267a570c08bb75a8d9010
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-27T19:42:37Z

    Extract HttpClientConnectionManager creation
    
    This commit extracts creation of `HttpClientConnectionManager` in a
    separate method `createConnectionManager`, this method can be then
    reused from a component based on the `HttpComponent`.
    
    (cherry picked from commit dd8b972ea5e7e0cc3e94f30d7261900cb780305f)

----

githubbot:1485755302:2017-01-30T13:48:22.301+0000:1485755302:2017-01-30T13:48:22.301+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1426
"
0,CAMEL-10762,Task,Minor,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Thomas Diesler,0,2,2017-01-30 10:05:53+00:00,2017-10-25 14:27:57+00:00,"Camel uses a plethora of different guava versions



$ cat parent/pom.xml | grep guava-version
    <cassandra-driver-guava-version>18.0</cassandra-driver-guava-version>
    <elasticsearch-guava-version>18.0</elasticsearch-guava-version>
    <google-guava-version>19.0</google-guava-version>
    <jackrabbit-guava-version>15.0</jackrabbit-guava-version>
    <jclouds-google-guava-version>16.0.1</jclouds-google-guava-version>
    <jclouds-google-guava-version-range>[16.0,17.0)</jclouds-google-guava-version-range>
    <mustache-guava-version>16.0</mustache-guava-version>
    <swagger-scala-guava-version>15.0</swagger-scala-guava-version>
    <swagger-java-guava-version>18.0</swagger-java-guava-version>","davsclaus:1485745612:2017-01-30T11:06:52.830+0000:1485745867:2017-01-30T11:11:07.859+0000:Its not Camel that are using them, its those 3rd party libraries and most of them are not compatible. So you can never use the same version of guava. But maybe one or two of them can be using a different version that others are using as well etc.

Also mind that OSGi may have a locked down version range which cannot work with a newer version but it works fine outside OSGi etc."
0,CAMEL-10761,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-30 09:30:45+00:00,2017-01-30 18:38:46+00:00,No Desc,
0,CAMEL-10730,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.19.0,Unassigned,Steffen Eitelmann,0,3,2017-01-20 14:11:19+00:00,2017-01-27 18:18:07+00:00,"The telegram type ""Document"" is a general file (as opposed to photos, videos or audio files) and can be in any format. A Document can also be one of the already supported types, but then it's uncompressed (e.g. photos).


The benefits of using the Document type are:



Receiving and sending uncompressed files
Receiving and sending files of any format



Also see: https://core.telegram.org/bots/api#document","Neffez:1484892706:2017-01-20T14:11:46.938+0000:1484892706:2017-01-20T14:11:46.938+0000:Pull request: https://github.com/apache/camel/pull/1413
nferraro:1485493408:2017-01-27T13:03:28.188+0000:1485493408:2017-01-27T13:03:28.188+0000:Merged
githubbot:1485512287:2017-01-27T18:18:07.302+0000:1485512287:2017-01-27T18:18:07.302+0000:Github user Neffez closed the pull request at:

    https://github.com/apache/camel/pull/1413
"
0,CAMEL-10729,Improvement,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Andrea Cosentino,Andrea Cosentino,0,2,2017-01-20 10:48:51+00:00,2017-02-03 20:06:24+00:00,"Actually when we are using the includeBody with default value (true), it's up to the user to close the S3Object after it is completely consumed.


This lead to problems, because each time an GetObjectRequest to S3 is done a connection is open and the connection pool is exhausted after a while. We can add this option and add the S3Object.close() call into a SynchronizationAdapter to pass to exchange.OnCompletion method.","davsclaus:1484919355:2017-01-20T21:35:55.331+0000:1484919355:2017-01-20T21:35:55.331+0000:Can you maybe add a bit more javadoc what it would mean if autocloseBody = false, and includeBody = true means. Eg that the user must close that body manually himself. That is not so obvious from the docs.
acosentino:1484919555:2017-01-20T21:39:15.004+0000:1484919555:2017-01-20T21:39:15.004+0000:Sure. Sorry about this."
0,CAMEL-10728,Bug,Minor,2.18.1,"2.19.1, 2.20.0","
None
",Resolved,Fixed,"2.19.1, 2.20.0",Claus Ibsen,Ankur Saxena,0,4,2017-01-20 05:48:34+00:00,2017-05-24 08:30:58+00:00,"I think there is a problem with multi-insert on MongoDB component as it fails to gracefully handle a BasicDBList. The logic below always sets the SingleInsert flag to true if the type converter is able to convert the exchange to a DBObject interface. This is implemented by BasicDBList and BasicDBObject.


Further details below :


I am trying to do a multiple insert using the camel mongo db component.


My Pojo representation is :



 Person {
 String firstName;
 String lastName;
 }




I have a processor which constructs a valid List of Person pojo and is a valid json structure. When this list of Person is sent to the mongodb producer , on invocation of createDoInsert the type conversion to BasicDBObject fails. This piece of code below looks to be the problem. Should it have more fall backs / checks in place to attempt the list conversion down further below as it fails on the very first cast itself. Debugging the MongoDbProducer the exchange object being received is a BasicDBList which implements DBObject. This causes the singleInsert flag to remain set at true which fails the insertion below as we get a BasicDBList instead of a BasicDBObject :



   if(singleInsert) {
        BasicDBObject insertObjects = (BasicDBObject)insert;
        dbCol.insertOne(insertObjects);
        exchange1.getIn().setHeader(""CamelMongoOid"", insertObjects.get(""_id""));
    }




The Camel MongoDbProducer code fragment



private Function<Exchange, Object> createDoInsert() {
    return (exchange1) -> {
        MongoCollection dbCol = this.calculateCollection(exchange1);
        boolean singleInsert = true;
        Object insert = exchange1.getIn().getBody(DBObject.class);
        if(insert == null) {
            insert = exchange1.getIn().getBody(List.class);
            if(insert == null) {
                throw new CamelMongoDbException(""MongoDB operation = insert, Body is not conversible to type DBObject nor List<DBObject>"");
            }

            singleInsert = false;
            insert = this.attemptConvertToList((List)insert, exchange1);
        }

        if(singleInsert) {
            BasicDBObject insertObjects = (BasicDBObject)insert;
            dbCol.insertOne(insertObjects);
            exchange1.getIn().setHeader(""CamelMongoOid"", insertObjects.get(""_id""));
        } else {
            List insertObjects1 = (List)insert;
            dbCol.insertMany(insertObjects1);
            ArrayList objectIdentification = new ArrayList(insertObjects1.size());
            objectIdentification.addAll((Collection)insertObjects1.stream().map((insertObject) -> {
                return insertObject.get(""_id"");
            }).collect(Collectors.toList()));
            exchange1.getIn().setHeader(""CamelMongoOid"", objectIdentification);
        }

        return insert;
    };
}





My route is as below :



    <route id=""uploadFile"">
    <from uri=""jetty://http://0.0.0.0:9886/test""/>
    <process ref=""fileProcessor""/>
    <unmarshal>
        <csv>

            <header>fname</header>
            <header>lname</header>

        </csv>

    </unmarshal>

    <process ref=""mongodbProcessor"" />
    <to uri=""mongodb:mongoBean?database=axs175&amp;collection=insurance&amp;operation=insert"" />




and the MongoDBProcessor constructing the List of Person Pojo



@Component
public class MongodbProcessor implements Processor {
@Override
public void process(Exchange exchange) throws Exception {

    ArrayList<List<String>> personlist = (ArrayList) exchange.getIn().getBody();
    ArrayList<Person> persons = new ArrayList<>();
    for(List<String> records : personlist){
        Person person = new Person();
        person.setFname(records.get(0));
        person.setLname(records.get(1));
        persons.add(person);
    }
exchange.getIn().setBody(persons);

}
}","davsclaus:1484919460:2017-01-20T21:37:40.380+0000:1484919460:2017-01-20T21:37:40.380+0000:You are welcome to work on a github PR / patch file with a fix / improvement
itsavvy.ankur:1485207094:2017-01-24T05:31:34.816+0000:1485207094:2017-01-24T05:31:34.816+0000:Hi [~davsclaus] , I tried to replicate this in  MongoDbConversionsTest like below :
A pojo list 
{code}
 @SuppressWarnings(""unused"")
    private class MyPojoTest {
        public int number = 123;
        public String text = ""hello"";
        public String[] array = {""daVinci"", ""copernico"", ""einstein""};
        // CHECKSTYLE:OFF
        public String _id = ""testInsertPojo"";
        // CHECKSTYLE:ON

        MyPojoTest(){

        }
        MyPojoTest(String id){
            this._id=id;
        }
    }


    private class MyPojoTestList{

        MyPojoTest myPojoTest1 = new MyPojoTest(""testInsertPojo1"");
        MyPojoTest myPojoTest2 = new MyPojoTest(""testInsertPojo2"");

        ArrayList<MyPojoTest> myPojoTestArrayList = new ArrayList<MyPojoTest>();

        public ArrayList<MyPojoTest> getMyPojoTestArrayList() {
            myPojoTestArrayList.add(myPojoTest1);
            myPojoTestArrayList.add(myPojoTest2);
            return myPojoTestArrayList;
        }
    }
    
{code}

The test method :
{code}
 @Test
    public void testInsertListOfPojo() {
        assertEquals(0, testCollection.count());
        Object result = template.requestBody(""direct:insertPojo"", new MyPojoTestList().getMyPojoTestArrayList());
        DBObject b = testCollection.find(new BasicDBObject(""_id"", ""testInsertPojo1"")).first();
        assertNotNull(""No record with 'testInsertPojo1' _id"", b);
    }
    
{code}


The above test worked fine, this makes me wonder why I get an exception during typeconversion. I have debugged my route and code which also contains a list of Pojo on the exchange.
An exception is thrown instead of returning null when I send the list of pojo above, where as returns null in the unit tests.

{code}
@Converter
    public static DBObject fromAnyObjectToDBObject(Object value) {
        BasicDBObject answer;
        try {
            Map<?, ?> m = OBJECT_MAPPER.convertValue(value, Map.class);
            answer = new BasicDBObject(m);
        } catch (Exception e) {
            LOG.warn(""Conversion has fallen back to generic Object -> DBObject, but unable to convert type {}. Returning null. {}"",
                    value.getClass().getCanonicalName(), e.getClass().getCanonicalName() + "": "" + e.getMessage());
            return null;
        }
        return answer;
    }
{code}

Having checked the route configurations, not quite sure what is the deviation when I set the list of pojo on the exchange and when being sent via unit tests.
githubbot:1495007127:2017-05-17T15:45:27.425+0000:1495007127:2017-05-17T15:45:27.425+0000:GitHub user NKame opened a pull request:

    https://github.com/apache/camel/pull/1701

    CAMEL-10728 fix handling of BasicDBList and allow better use of multi insert

    Context: camel-mongodb, multi insert. Handle the case where the input is a BasicDBList. Adds a configuration header to tell the component to avoid trying to convert the body to a DBObject when the user knows a multi insert is needed (""CamelMongoDbMultiInsert"").
    
    See
    https://issues.apache.org/jira/browse/CAMEL-10504
    https://issues.apache.org/jira/browse/CAMEL-10728

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/NKame/camel master2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1701.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1701
    
----
commit 579a149fc1ce6cdee7331e89622ddfee74dcbf82
Author: Damien Bonvillain <d.bonvillain@groupeonepoint.com>
Date:   2017-05-17T15:44:16Z

    CAMEL-10728 fix handling of BasicDBList and allow better use of multi insert.
    
    Context: camel-mongodb, multi insert. Handle the case where the input is a BasicDBList. Adds a configuration header to tell the component to avoid trying to convert the body to a DBObject when the user knows a multi insert is needed (""CamelMongoDbMultiInsert"").
    
    See
    https://issues.apache.org/jira/browse/CAMEL-10504
    https://issues.apache.org/jira/browse/CAMEL-10728

----

damien_b:1495007178:2017-05-17T15:46:18.861+0000:1495007178:2017-05-17T15:46:18.861+0000:PR posted https://github.com/apache/camel/pull/1701
davsclaus:1495585052:2017-05-24T08:17:32.842+0000:1495585052:2017-05-24T08:17:32.842+0000:Damien, do you mind create a PR for camel-mondodb3 as well?
githubbot:1495585858:2017-05-24T08:30:58.263+0000:1495585858:2017-05-24T08:30:58.263+0000:Github user NKame closed the pull request at:

    https://github.com/apache/camel/pull/1701
"
0,CAMEL-10727,Bug,Minor,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Johan Vandeweerd,0,2,2017-01-19 15:40:13+00:00,2017-03-06 10:51:38+00:00,"I have a known_hosts file on my classpath and I want the ftp-component to use this known_hosts file when connecting to an sftp server (and not be dependent on the ~/.ssh/known_hosts file). 
The documentation (http://camel.apache.org/ftp2.html) mentions that u can use the option knownHostsUri to configure the (classpath) location of a known_hosts file. 
When using this option (in combination with the option useUserKnownHostsFile=false), camel fails to connect to the server because of a NullPointerException (see below). 
When debugging, it seems that the list of known_hosts from the classpath are first loaded succesfully (SftpOperations:268) but afterwards the known_hosts are ALWAYS overridden (SftpOperations:284). When setting the option useUserKnownHostsFile to false, there is no file to load (no fallback to the known_hosts file from the home directory) and the exception is thrown. 
I made a small github project (https://github.com/johanvandeweerd/camel-sftp) that can be cloned and run to reproduce the error. You can play with the options in SftpRouteBuilder. 


Stacktrace:



2017-01-17 18:19:33.397  WARN 2652 --- [           main] o.a.c.c.file.remote.SftpConsumer         : Error auto creating directory: pub/example due Cannot connect to sftp://demo@test.rebex.net:22. This exception is ignored. 

org.apache.camel.component.file.GenericFileOperationFailedException: Cannot connect to sftp://demo@test.rebex.net:22 
        at org.apache.camel.component.file.remote.SftpOperations.connect(SftpOperations.java:146) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.component.file.remote.RemoteFileConsumer.connectIfNecessary(RemoteFileConsumer.java:203) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.component.file.remote.SftpConsumer.doStart(SftpConsumer.java:53) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:3371) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:3688) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:3624) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3544) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3308) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3162) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:182) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2957) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2953) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2976) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2953) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2920) [camel-core-2.18.1.jar:2.18.1] 
        at org.apache.camel.spring.boot.RoutesCollector.maybeStart(RoutesCollector.java:141) [camel-spring-boot-2.18.1.jar:2.18.1] 
        at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:116) [camel-spring-boot-2.18.1.jar:2.18.1] 
        at org.apache.camel.spring.boot.RoutesCollector.onApplicationEvent(RoutesCollector.java:41) [camel-spring-boot-2.18.1.jar:2.18.1] 
        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:383) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:337) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:882) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.finishRefresh(EmbeddedWebApplicationContext.java:144) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:545) [spring-context-4.3.5.RELEASE.jar:4.3.5.RELEASE] 
        at org.springframework.boot.context.embedded.EmbeddedWebApplicationContext.refresh(EmbeddedWebApplicationContext.java:122) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:761) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:371) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1186) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1175) [spring-boot-1.4.3.RELEASE.jar:1.4.3.RELEASE] 
        at be.engine31.camel.Application.main(Application.java:10) [classes/:na] 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91] 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91] 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91] 
        at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91] 
        at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147) [idea_rt.jar:na] 
Caused by: java.lang.NullPointerException: null 
        at com.jcraft.jsch.Util.checkTilde(Util.java:489) ~[jsch-0.1.54.jar:na] 
        at com.jcraft.jsch.KnownHosts.setKnownHosts(KnownHosts.java:54) ~[jsch-0.1.54.jar:na] 
        at com.jcraft.jsch.JSch.setKnownHosts(JSch.java:317) ~[jsch-0.1.54.jar:na] 
        at org.apache.camel.component.file.remote.SftpOperations.createSession(SftpOperations.java:284) ~[camel-ftp-2.18.1.jar:2.18.1] 
        at org.apache.camel.component.file.remote.SftpOperations.connect(SftpOperations.java:115) ~[camel-ftp-2.18.1.jar:2.18.1] 
        ... 38 common frames omitted","davsclaus:1484877958:2017-01-20T10:05:58.002+0000:1484877958:2017-01-20T10:05:58.002+0000:Thanks for reporting. I added a NPE fix. You can give the 2.18.2-SNAPSHOT a test try when the CI server build a new one later over the weekend.

Or build from source yourself and try.
johanvandeweerd:1484878524:2017-01-20T10:15:24.237+0000:1484878524:2017-01-20T10:15:24.237+0000:Nice! I'll test it when the snapshot version is available and will give feedback.
johanvandeweerd:1485937540:2017-02-01T16:25:40.812+0000:1485937540:2017-02-01T16:25:40.812+0000:Bit later than expected but I tested the 2.18.2 and it's ok now. Thanks!"
0,CAMEL-10726,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-01-19 13:44:35+00:00,2017-01-19 20:45:09+00:00,"Some systems exchange messages correlating on custom JMS properties, not on JMSCorrelationID. For instance systems that include non JMS clients consuming and replying to messages.


Camel JMS could add an option to use a custom JMS property and to set the correlation id on that property, and correlate the reply based on that property value from the reply message.","githubbot:1484805218:2017-01-19T13:53:38.243+0000:1484805218:2017-01-19T13:53:38.243+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1410

    CAMEL-10726 Correlation of JMS InOut exchanges ...

    ...with custom JMS property
    
    This commit adds a new configuration option `correlationProperty` if set
    its value will be used instead of `JMSCorrelationID` JMS message
    property to correlate messages in InOut (request-reply) exchange.
    
    Also, if this `correlationProperty` is set, `JMSCorrelationID` will not
    be consulted on the incoming message or set on the outgoing message.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10726

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1410.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1410
    
----
commit 7634cab488d473f5f57bbe10a3130b972489a045
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-19T13:45:01Z

    CAMEL-10726 Correlation of JMS InOut exchanges ...
    
    ...with custom JMS property
    
    This commit adds a new configuration option `correlationProperty` if set
    its value will be used instead of `JMSCorrelationID` JMS message
    property to correlate messages in InOut (request-reply) exchange.
    
    Also, if this `correlationProperty` is set, `JMSCorrelationID` will not
    be consulted on the incoming message or set on the outgoing message.

----

githubbot:1484829863:2017-01-19T20:44:23.899+0000:1484829863:2017-01-19T20:44:23.899+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1410
"
0,CAMEL-10725,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Claus Ibsen,0,3,2017-01-19 10:04:32+00:00,2018-06-18 11:22:17+00:00,"We should use io.zipkin.brave 4.x instead of that older 3.x which was not official part of zipkin.


OSGi users may need a new SMX bundle of the 4.x as well if its not osgi already.","acosentino:1484791838:2017-01-19T10:10:38.661+0000:1484791838:2017-01-19T10:10:38.661+0000:Has the project from com.github.kristofa been merged into brave?
acosentino:1484792295:2017-01-19T10:18:15.884+0000:1484792295:2017-01-19T10:18:15.884+0000:Yes, it has been merged. Looks good and the brave 4.x is already an OSGi bundle.
acosentino:1484802856:2017-01-19T13:14:16.177+0000:1484802856:2017-01-19T13:14:16.177+0000:Migrated. Camel-example-zipkin works fine and the OSGi feature is ok.
githubbot:1529290870:2018-06-18T11:01:10.737+0000:1529290870:2018-06-18T11:01:10.737+0000:GitHub user adriancole opened a pull request:

    https://github.com/apache/camel/pull/2383

    Spikes Brave 5 conversion

    This is CAMEL-10725
    
    I still think the instrumentation could use revisiting, but the point of this change isn't to do that, rather to port the code to the new apis.
    
    I would love for someone to pick this up and carry it over the finish line if possible.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adriancole/camel brave5

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2383.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2383
    
----
commit 6b05839e9d224f93ac9877c75b9ad8e646215ac3
Author: Adrian Cole <acole@...>
Date:   2018-06-18T10:57:53Z

    Spikes Brave 5 conversion

----

githubbot:1529292137:2018-06-18T11:22:17.740+0000:1529292137:2018-06-18T11:22:17.740+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/2383
"
0,CAMEL-10724,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-18 16:57:23+00:00,2017-04-11 12:11:05+00:00,"loopDoWhile
multicast",
0,CAMEL-10723,Task,Minor,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Unassigned,Pontus Ullgren,0,3,2017-01-18 14:01:11+00:00,2017-01-19 11:19:54+00:00,"The component also allows for producing to a kinesis stream. The documentation only mentions consuming messages.


In the example a AmazonKinesisClient should be used instead of a AmazonDynamoDBStreamsClient


The examples could use a better URI that also includes the reference to the amazonKinesisClient ie from(""aws-kinesis://ceteststream?amazonKinesisClient=#kinesisClient"")


In the description for the URI options it seems that trim_horizon and latest should be given as lower case. However they must be uppercase (as the default value shows).","githubbot:1484719644:2017-01-18T14:07:24.360+0000:1484719644:2017-01-18T14:07:24.360+0000:GitHub user ullgren opened a pull request:

    https://github.com/apache/camel/pull/1408

    CAMEL-10723: Improved camel-aws kinesis documentation

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ullgren/camel CAMEL-10723

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1408.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1408
    
----
commit fa29b6bc8f8f749bff19d412e9b0a77da9ec8d19
Author: Pontus Ullgren <pontus.ullgren@redpill-linpro.com>
Date:   2017-01-18T14:02:28Z

    CAMEL-10723: Improved camel-aws kinesis documentation

----

pontus.ullgren:1484720001:2017-01-18T14:13:21.889+0000:1484720001:2017-01-18T14:13:21.889+0000:I've also updated the confluence wiki with the same.
davsclaus:1484790590:2017-01-19T09:49:50.630+0000:1484790590:2017-01-19T09:49:50.630+0000:Thanks for the PR
githubbot:1484795994:2017-01-19T11:19:54.372+0000:1484795994:2017-01-19T11:19:54.372+0000:Github user ullgren closed the pull request at:

    https://github.com/apache/camel/pull/1408
"
0,CAMEL-10722,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-18 12:18:23+00:00,2017-01-18 12:23:46+00:00,No Desc,
0,CAMEL-10721,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,5,2017-01-18 12:06:51+00:00,2017-03-01 09:23:14+00:00,"Introduce Camel Connectors.


A Camel Connectors is a simplified and pre-configured Camel component which has been setup for a specific use-case, such as ""add new contact to salesforce"", or ""add calender entry"" or whatever.


This would allow to build a marketplace/catalog of Camel connectors which would be easier to use for business use-cases. 


The connector is based on one of the existing Camel components (or 3rd party component) by which you can specify in a camel-connector.json file which options to pre-select and as well specify other default values etc. 


Then a maven plugin will build this as a Camel component, so at runtime its just a regular Camel component. 


And because they are just regular Camel component then there is no problem running them in Camel applications. 


In addition all existing JMX, tooling et all just sees this as Camel components and can use that.


Also at design time, for example the IDEA plugin will see the connector as a 3rd party Camel component and offer code assistance to it etc.","davsclaus:1484800244:2017-01-19T12:30:44.195+0000:1484800244:2017-01-19T12:30:44.195+0000:Need to add an action concept, so you specify 1 or more actions, which is what the user selects to use the connector. Then it becomes even easier. These action then have a set of options / pre-configured options they use.


davsclaus:1484800298:2017-01-19T12:31:38.172+0000:1484800298:2017-01-19T12:31:38.172+0000:Also we can consider adding some type metadata as well so the connector can advertise that its accepting XML and that its exporting JSON etc. 
"
0,CAMEL-10720,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-18 11:33:34+00:00,2017-01-18 11:43:51+00:00,"So we can better indicate in the XSD schema as well that an option is deprecated.


For example ""bean"" in method call expression
http://camel.apache.org/schema/blueprint/camel-blueprint-2.18.1.xsd",
0,CAMEL-10719,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Mike Barlotta,0,5,2017-01-17 15:45:04+00:00,2018-01-21 16:55:04+00:00,"add management via JMX to ThrottlingExceptionRoutePolicy route policy.


See how we do it for the existing
org.apache.camel.api.management.mbean.ManagedThrottlingInflightRoutePolicyMBean","mbarlotta:1484655837:2017-01-17T20:23:57.207+0000:1484663674:2017-01-17T22:34:34.590+0000:Had a question re: logging and changing the logging levels via JMX management. 
The ThrottlingInflightRoutePolicy and corresponding management classes allow the logging level to be changed. 
This is affecting the CamelLogger on ThrottlingInflightRoutePolicy. However, the ThrottlingInflightRoutePolicy is logging using a logger defined in RoutePolicySupport. Also looking around the code it looks like other managed classes do not allow changing of the log level. 

Was going to move forward and not add the ability to change the log level but wanted to check first.
mbarlotta:1484656517:2017-01-17T20:35:17.721+0000:1484656517:2017-01-17T20:35:17.721+0000:Another question:
Do we want to be able to force close or force open the circuit from JMX?
githubbot:1484659468:2017-01-17T21:24:28.163+0000:1484659468:2017-01-17T21:24:28.163+0000:GitHub user CodeSmell opened a pull request:

    https://github.com/apache/camel/pull/1404

    CAMEL-10719 add JMX management to ThrottlingExceptionRoutePolicy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/CodeSmell/camel CAMEL-10719

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1404.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1404
    
----
commit 62b3a0b86befb3ca954ef40ef71920764b804b08
Author: CodeSmell <mbarlotta@gmail.com>
Date:   2017-01-17T21:22:27Z

    CAMEL-10719 add JMX management to ThrottlingExceptionRoutePolicy

----

githubbot:1484876192:2017-01-20T09:36:32.351+0000:1484876192:2017-01-20T09:36:32.351+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1404

davsclaus:1484876213:2017-01-20T09:36:53.008+0000:1484876213:2017-01-20T09:36:53.008+0000:Thanks for the PR
codecracker2014:1516487681:2018-01-21T06:34:41.682+0000:1516487681:2018-01-21T06:34:41.682+0000:Hi  i'm using ThrottlingExceptionRoutePolicy policy to detect availability of a web service and stop route for some time, but before onExchangeDone called error handler moves the current message to dead letter queue. I want to avoid putting messages to DLQ for specific situation which can be handled using ThrottlingExceptionRoutePolicy.
Is it possible with ThrottlingExceptionRoutePolicy not to put current message to DLQ where ThrottlingExceptionRoutePolicy needs to take action. 
g1antfan:1516524904:2018-01-21T16:55:04.932+0000:1516524904:2018-01-21T16:55:04.932+0000:Answered here: [https://github.com/apache/camel/commit/4f65a942465d82acea52a5012c00bec81d1183e6#commitcomment-27002609]"
0,CAMEL-10718,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Mike Barlotta,0,4,2017-01-17 15:40:59+00:00,2018-01-21 16:54:37+00:00,"Our project recently needed a circuit breaker that stop consuming messages from the from endpoint. I noticed that the Camel circuit breakers consumed from the endpoint even in the open mode and controlled access to the to endpoints on the route.


Based on a Stack Overflow answer, I created a circuit breaker that will stop consuming from the starting endpoint based on exceptions being thrown. It is using a RoutePolicy and imitates the existing ThrottlingInflightRoutePolicy as well as the CircuitBreakingLoadBalancer.


This is in the PR 1400
https://github.com/apache/camel/pull/1400","davsclaus:1484700205:2017-01-18T08:43:25.933+0000:1484700205:2017-01-18T08:43:25.933+0000:Thanks for the PR
codecracker2014:1516514047:2018-01-21T13:54:07.993+0000:1516514047:2018-01-21T13:54:07.993+0000:Hi  i'm using ThrottlingExceptionRoutePolicy policy to detect availability of a web service and stop route for some time, but before onExchangeDone called error handler moves the current message to dead letter queue. I want to avoid putting messages to DLQ for specific situation which can be handled using ThrottlingExceptionRoutePolicy.
Is it possible with ThrottlingExceptionRoutePolicy not to put current message to DLQ where ThrottlingExceptionRoutePolicy needs to take action. 
g1antfan:1516524877:2018-01-21T16:54:37.364+0000:1516524877:2018-01-21T16:54:37.364+0000:Answered here: https://github.com/apache/camel/commit/4f65a942465d82acea52a5012c00bec81d1183e6#commitcomment-27002609"
0,CAMEL-10717,Bug,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Thomas Cunningham,0,2,2017-01-17 14:57:20+00:00,2017-01-17 18:04:18+00:00,"Getting an error trying to do a versions:set and trying to set a new version :


[INFO] Scanning for projects...
[ERROR] [ERROR] Some problems were encountered while processing the POMs:
[FATAL] Non-resolvable parent POM for org.apache.camel:components-starter:[unknown-version]: Could not find artifact org.apache.camel:camel-starter-parent:pom:2.19.0-SNAPSHOT and 'parent.relativePath' points at wrong local POM @ line 20, column 11


Need to fix the relativePath.","githubbot:1484638155:2017-01-17T15:29:15.586+0000:1484638155:2017-01-17T15:29:15.586+0000:GitHub user cunningt opened a pull request:

    https://github.com/apache/camel/pull/1403

    CAMEL-10717 Fix relativePath in camel/platforms/spring-boot/components-starter/pom.xml

    https://issues.apache.org/jira/browse/CAMEL-10717

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cunningt/camel CAMEL-10717

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1403.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1403
    
----
commit f5e3b484837dd485b79df513cdee4ab0ff8fbf33
Author: Tom Cunningham <tcunning@redhat.com>
Date:   2017-01-17T15:28:03Z

    CAMEL-10717 Fix relativePath in camel/platforms/spring-boot/components-starter/pom.xml

----

githubbot:1484647396:2017-01-17T18:03:16.423+0000:1484647396:2017-01-17T18:03:16.423+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1403
"
0,CAMEL-10716,Bug,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,2,2017-01-17 10:31:33+00:00,2017-01-17 13:02:48+00:00,"There is a check in the DefaultCompositeApiClient that checks if the configured version is at least 34.0, this check wrongly reports an error if the version is configured exactly at 34.0.","githubbot:1484620982:2017-01-17T10:43:02.549+0000:1484620982:2017-01-17T10:43:02.549+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1402

    CAMEL-10716 Salesforce Composite API wrongly checks for minimum supported version

    Fixes an issue when the Batch request and the configured componentversion is version 34.0.
    
    Added unit test and refactored the check into separate method to make the unit test easier to write.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10716

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1402.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1402
    
----
commit e0d2dfa55fb42f8da4d631328b1c3f196a8ed283
Author: Zoran Regvart <zoran@regvart.com>
Date:   2017-01-17T10:33:42Z

    CAMEL-10716 Salesforce Composite API wrongly ch...
    
    ...ecks for minimum supported version
    
    Fixes an issue when the Batch request and the configured component
    version is version 34.0.

----

githubbot:1484626911:2017-01-17T12:21:51.399+0000:1484626911:2017-01-17T12:21:51.399+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1402
"
0,CAMEL-10715,New Feature,Minor,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-17 09:25:51+00:00,2017-06-28 13:05:41+00:00,"paolo.antinori


As you know ZooKeeper, do you mind creating a ZooKeeper ServiceDiscovery implementation ?


Some references:


https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/cloud/ServiceDiscovery.java
https://github.com/apache/camel/blob/master/components/camel-consul/src/main/java/org/apache/camel/component/consul/cloud/ConsulServiceDiscovery.java",
0,CAMEL-10714,Improvement,Major,None,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Kevin Anthony Earls,Kevin Anthony Earls,0,3,2017-01-17 09:13:38+00:00,2017-02-03 20:56:48+00:00,"This is a follow up to CAMEL-10577.   See the discussion here for details: 


https://github.com/apache/camel/pull/1388","githubbot:1486105787:2017-02-03T15:09:47.090+0000:1486105787:2017-02-03T15:09:47.090+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/1443

    CAMEL-10714 Replace ByteArrayOutputStream with OutputStreamBuilder

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-10714

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1443.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1443
    
----
commit 2337c6e7aa2f79e8a18360092e9da3c47daf75f9
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2017-02-03T15:08:35Z

    CAMEL-10714 Replace ByteArrayOutputStream with OutputStreamBuilder

----

davsclaus:1486123526:2017-02-03T20:05:26.615+0000:1486123526:2017-02-03T20:05:26.615+0000:Thanks for the PR
githubbot:1486126608:2017-02-03T20:56:48.813+0000:1486126608:2017-02-03T20:56:48.813+0000:Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/1443
"
0,CAMEL-10713,Bug,Major,None,"2.17.6, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.6, 2.18.2, 2.19.0",Claus Ibsen,Patrick McGloin,0,3,2017-01-17 08:45:43+00:00,2017-01-18 09:31:03+00:00,"If I try to transfer a file to a directory that does not exist using Camel SCP I see a warning like this in the log:


[scp] WARN scp: /home/user/scp/1234: No such file or directory
It looks like the code says that Camel will just log a warning when such an error occurs. There is no exception in the code, so it looks like the file was transferred when it was not.


https://github.com/apache/camel/blob/52a739feb9da8acd29067304c7c8356bbc5ef4dd/components/camel-jsch/src/main/java/org/apache/camel/component/scp/ScpOperations.java#L347


The error codes for SCP are:


1 General error in file copy 
2 Destination is not directory, but it should be 


http://support.attachmate.com/techdocs/2116.html


The fix should have the SCP Endpoint raise an error if the return code is not 0.  


See the following discussion.  


http://camel.465427.n5.nabble.com/Camel-SCP-Warnings-td5792552.html","davsclaus:1484615571:2017-01-17T09:12:51.047+0000:1484615571:2017-01-17T09:12:51.047+0000:Are you working on a github PR or patch file?
https://github.com/apache/camel/
patrickmcgloin:1484616853:2017-01-17T09:34:13.083+0000:1484616853:2017-01-17T09:34:13.083+0000:Yes, I will give it a go.
githubbot:1484695162:2017-01-18T07:19:22.806+0000:1484695162:2017-01-18T07:19:22.806+0000:GitHub user patrickmcgloin opened a pull request:

    https://github.com/apache/camel/pull/1405

    CAMEL-10713 SCP not handling errors for failed transfers correctly

    This fix works for all existing Unit Tests and I can see the error in the logs when I use the new jar file to do an SCP transfer:
    
    Throwable exception.getCause [java.io.IOException: [scp] Return Code [1] scp: /scpDemo/: Is a directory].
    
    I tried to add a new Unit Test for this case but was unable to do so, the test past when it should have failed.  This is what I tried:
    
        @Test
        public void testScpProduceWithFolderCausesError() throws Exception {
            Assume.assumeTrue(this.isSetupComplete());
    
            getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"");
    
            String uri = getScpUri() + ""?username=admin&password=admin&knownHostsFile="" + getKnownHostsFile();
            Map<String, Object> headers = new HashMap<String, Object>();
            headers.put(Exchange.FILE_PATH, ""folder/"");
            headers.put(Exchange.FILE_NAME, “folder2/hello.txt"");
    
            template.sendBodyAndHeaders(uri, ""Hello World"", headers);
    
            assertMockEndpointsSatisfied();
        }  

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/patrickmcgloin/camel scp-error-handling

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1405.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1405
    
----
commit 87f5913aa0cb9fc51d264762177db3214df802cb
Author: Patrick McGloin <patrickmcgloin@patricks-macbook-air.local>
Date:   2017-01-17T21:24:48Z

    CAMEL-10713 SCP not handling errors for failed transfers correctly

commit b3b4ed1bf0bcae5c5c2d89ed64f4d9b3464a381e
Author: Patrick McGloin <patrickmcgloin@patricks-macbook-air.local>
Date:   2017-01-18T07:12:14Z

    Indentation fix

commit d36d0deb5dcf6f479b041a77eca1f5e76d53851f
Author: Patrick McGloin <patrickmcgloin@patricks-macbook-air.local>
Date:   2017-01-18T07:14:32Z

    Newline at end of file

----

githubbot:1484703063:2017-01-18T09:31:03.260+0000:1484703063:2017-01-18T09:31:03.260+0000:Github user patrickmcgloin closed the pull request at:

    https://github.com/apache/camel/pull/1405
"
0,CAMEL-10712,Bug,Minor,2.17.4,"2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",Stephan Siano,Stephan Siano,0,1,2017-01-17 07:11:11+00:00,2017-01-17 08:41:41+00:00,"If an SFTP endpoint is configured to delete files after successful processing, the processing takes a long time, and the SFTP server closes the connection while the (successful) processing takes place the file will not be deleted. There is no log about that (not even on debug level).",
0,CAMEL-10711,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Marco Collovati,0,4,2017-01-16 21:39:54+00:00,2017-01-22 19:13:09+00:00,"When using camel-api-component-maven-plugin we must also add
build-helper-maven-plugin to ensure that generated sources are added
to the project for compilation.


To avoid this configuration step it is possible to add the source path
directly from the plugin by calling MavenProject.addCompileSourceRoot
and MavenProject.addTestCompileSourceRoot.



project.addCompileSourceRoot(this.generatedSrcDir.getAbsolutePath());
project.addTestCompileSourceRoot(this.generatedTestDir.getAbsolutePath());




This can maybe be done at the end of the execute method of ApiComponentGeneratorMojo and AbstractApiMethodGeneratorMojo.


It could also be a nice idea to add  boolean properties  in AbstractGeneratorMojo in order to enable or disable the automatic addition of the source.



@Parameter(defaultValue = ""true"", property = PREFIX + ""addCompileSourceRoot"", required = false)
private boolean addCompileSourceRoot = true;
@Parameter(defaultValue = ""true"", property = PREFIX + ""addTestCompileSourceRoot"", required = false)
private boolean addTestCompileSourceRoot = true;





if (this.addCompileSourceRoot) {
  project.addCompileSourceRoot(this.generatedSrcDir.getAbsolutePath());
}
if (this.addTestCompileSourceRoot) {
 project.addTestCompileSourceRoot(this.generatedTestDir.getAbsolutePath());
}","davsclaus:1484708604:2017-01-18T11:03:24.177+0000:1484708604:2017-01-18T11:03:24.177+0000:[~dhirajsb] if you get a chance you are welcome to provide some feedback on this ticket, and whether its something we can do.

And if so then Marco you would be welcome to provide a PR with this improvement.
mcollovati:1484711482:2017-01-18T11:51:22.445+0000:1484711482:2017-01-18T11:51:22.445+0000:I'll be glad to work on a PR if feedback is positive
dhirajsb:1484739936:2017-01-18T19:45:36.523+0000:1484739936:2017-01-18T19:45:36.523+0000:+1 Sounds like a good enhancement. Will it also handle situations where user might be generating source in the default src/java directory? 
mcollovati:1484742935:2017-01-18T20:35:35.683+0000:1484743009:2017-01-18T20:36:49.642+0000:I can't see any problem setting *src/\{main,test\}/java* as generated source directories; moreover compile source roots are added only if they are not already present.
mcollovati:1484746022:2017-01-18T21:27:02.642+0000:1484746022:2017-01-18T21:27:02.642+0000:A question about the all-it integration test: the plugin is bound only to *generate-test-sources* phase, so, in this case, the sources added with *addCompileSourceRoot* will not be compiled.

Is this a real usage scenario? Should we somehow check if sources in *generatedSrcDir* are already compiled and otherwise add them with *addTestCompileSourceRoot* (as done with build-helper-maven-plugin) ?
dhirajsb:1484818717:2017-01-19T17:38:37.671+0000:1484818717:2017-01-19T17:38:37.671+0000:Doesn't it have access to the _current_ execution phase and then choose where to add sources? 
mcollovati:1484833520:2017-01-19T21:45:20.888+0000:1484833520:2017-01-19T21:45:20.888+0000:With the maven API version in use (2.2.1) it seems there is no way to get the current execution phase.
Maybe I'm wrong; I'll investigate further on this.

As a workaround we could always add _generatedSrcDir_ to _TestCompileSourceRoot_; the drawback is that the sources in _generatedSrcDir_ will be compiled twice and present both in _target/classes_ and _target/test-classes_
mcollovati:1484841103:2017-01-19T23:51:43.448+0000:1484841103:2017-01-19T23:51:43.448+0000:Another possible solution is to use an enum to drive the source addition

{code:java}
   public enum SourceRoots {
        source, both, test, none
    }
    @Parameter(defaultValue = ""both"")
    protected SourceRoots sourceRoots = SourceRoots.both;
{code}

This way with a single configuration we can specify if we want to make source available:
* only _compile_ phase (*SourceRoots.source*),
* only _test-compile_ phase (*SourceRoots.test*),
* _generatedSrcDir_ to _compile_ phase and _generatedTestDir_ to _test-compile_ phase (*SourceRoots.both*),
* not adding sources at all (*SourceRoots.none*),


githubbot:1485073839:2017-01-22T16:30:39.863+0000:1485073839:2017-01-22T16:30:39.863+0000:GitHub user mcollovati opened a pull request:

    https://github.com/apache/camel/pull/1418

    CAMEL-10711: Added automatic source roots addition in api maven plugin

    A property has been added: **addCompileSourceRoots** to automatically make generated source directory available in compilation phases.
    Available values are:
    
    * **source**: adds both _generatedSrcDir_ and _generatedTestDir_ as compile source roots
    * **test**: adds both _generatedSrcDir_ and _generatedTestDir_ as test compile source roots
    * **all**: adds _generatedSrcDir_ to compile source roots and _generatedTestDir_ as test compile source roots
    * **none**: do not add generated directories at all
    
    The default value is **all**.
    
    The integration test *all-it* has been modified to remove *build-helper-maven-plugin* 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mcollovati/camel CAMEL-10711/api-maven-plugin-compile-roots

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1418.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1418
    
----
commit 72b137c100e99f9066bc1869d53269d0f12f9640
Author: Marco Collovati <(none)>
Date:   2017-01-22T16:19:57Z

    CAMEL-10711: Added automatic source roots addition in api maven plugin

----

davsclaus:1485083395:2017-01-22T19:09:55.360+0000:1485083395:2017-01-22T19:09:55.360+0000:Thanks for the PR
githubbot:1485083589:2017-01-22T19:13:09.596+0000:1485083589:2017-01-22T19:13:09.596+0000:Github user mcollovati closed the pull request at:

    https://github.com/apache/camel/pull/1418
"
0,CAMEL-10710,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-16 16:07:33+00:00,2017-01-16 16:12:15+00:00,No Desc,
0,CAMEL-10709,Bug,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-16 08:58:44+00:00,2017-01-16 09:37:58+00:00,No Desc,
0,CAMEL-10708,Bug,Minor,2.18.1,"2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",Claus Ibsen,Jochen Riedlinger,0,2,2017-01-16 07:07:04+00:00,2017-01-17 09:07:13+00:00,"trying to set username and passsword on a CxfEndpoint (in a Java-DSL camel route) I experience a NullPointerException, because the properties map is not initialized.


here you can see my code example:
https://github.com/jochenr/wildfly-camel-examples/blob/master/camel-cxf-jaxws-cdi/src/main/java/org/wildfly/camel/examples/cxf/jaxws/JavaDSLRouteBuilder.java#L54-L67",davsclaus:1484527231:2017-01-16T08:40:31.107+0000:1484527231:2017-01-16T08:40:31.107+0000:You are welcome to work on a github PR or patch file
0,CAMEL-10707,Bug,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Nicola Ferraro,Nicola Ferraro,0,2,2017-01-14 18:03:47+00:00,2017-01-17 10:53:48+00:00,"Camel ServiceHelper suspends and resumes services in a wrong way:



Resume: https://github.com/apache/camel/blob/camel-2.18.1/camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java#L313
Suspend: https://github.com/apache/camel/blob/camel-2.18.1/camel-core/src/main/java/org/apache/camel/util/ServiceHelper.java#L384



When suspending a service, Camel checks if the service is implementing the Suspendable (marker) interface, while that interface is ignored when resuming it.


If you take a non Suspendable service like the TimerConsumer (it is not Suspendable but it is a SuspendableService, like many others...), the ServiceHelper will call the ""stop()"" method when suspending it, and the ""resume()"" method when resuming it. Practically it'll remain stopped (""resume()"" is not implemented in > 90% of the components), since ""start()"" should be called after a stop operation.


So the ThrottlingInflightRoutePolicy, that suspends a route when there are too many exchanges and resumes it when they get lower than a threshold, is broken for many components (the route is stopped, but it's never restarted correctly).",
0,CAMEL-10706,New Feature,Major,None,None,"
None
",Resolved,Information Provided,Future,Unassigned,Christian Posta,0,3,2017-01-13 17:06:51+00:00,2022-09-02 09:25:04+00:00,Have had some asks about Saga pattern and using Camel to implement that. Axon framework seems to have some support we may be able to plug into the camel route lifecycle.,davsclaus:1662081904:2022-09-02T09:25:04.547+0000:1662081904:2022-09-02T09:25:04.547+0000:There is narayano 
0,CAMEL-10705,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Antoine DESSAIGNE,0,2,2017-01-13 13:35:18+00:00,2017-01-13 13:43:55+00:00,Right now the SSL configuration of the camel-kafka component is only configurable using 14 endpoint parameters. It would be easier if we can use an SSLContextParameters object like for the SSL configuration of other Camel components.,"githubbot:1484285791:2017-01-13T13:36:31.412+0000:1484285791:2017-01-13T13:36:31.412+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1398

    CAMEL-10705 - Allow to use an SSLContextParameters object for Kafka

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-10705

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1398.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1398
    
----
commit 39742f911c7cf7aeec71f880712ccd808e51ccbe
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-01-13T13:35:42Z

    CAMEL-10705 - Allow to use an SSLContextParameters object for Kafka

----

githubbot:1484286215:2017-01-13T13:43:35.103+0000:1484286215:2017-01-13T13:43:35.103+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1398
"
0,CAMEL-10704,Bug,Major,"2.17.4, 2.18.1","2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",Stephan Siano,Stephan Siano,0,1,2017-01-13 12:30:06+00:00,2017-01-13 13:39:51+00:00,"Any XSLT transformation will fail if the XML document that needs to be transformed contains a default namespace and camel-saxon is present.


The same transformation will just work fine without camel-saxon (e.g. if the test is executed in camel-core).


Example: If you try to transform the following XML document with XSLT and have camel-saxon in the classpath, an exception will be thrown:



<?xml version=""1.0"" encoding=""UTF-8""?>
<Message xmlns=""http://www.camel.apache.org/envelope"">
    <Version>2.0</Version>
</Message>





org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-WDFN34057358A-51410-1484310448314-0-2]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1710)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:677)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:163)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:168)
	at org.apache.camel.component.xslt.PayloadWithDefaultNamespaceTest.test_map_only(PayloadWithDefaultNamespaceTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
Caused by: java.lang.NullPointerException
	at net.sf.saxon.event.ReceivingContentHandler.startPrefixMapping(ReceivingContentHandler.java:269)
	at org.apache.camel.converter.jaxp.StAX2SAXSource.parse(StAX2SAXSource.java:140)
	at org.apache.camel.converter.jaxp.StAX2SAXSource.parse(StAX2SAXSource.java:343)
	at net.sf.saxon.event.Sender.sendSAXSource(Sender.java:451)
	at net.sf.saxon.event.Sender.send(Sender.java:153)
	at net.sf.saxon.Controller.makeSourceTree(Controller.java:1927)
	at net.sf.saxon.s9api.XsltTransformer.transform(XsltTransformer.java:573)
	at net.sf.saxon.jaxp.TransformerImpl.transform(TransformerImpl.java:185)
	at org.apache.camel.builder.xml.XsltBuilder.process(XsltBuilder.java:141)
	at org.apache.camel.impl.ProcessorEndpoint.onExchange(ProcessorEndpoint.java:103)
	at org.apache.camel.component.xslt.XsltEndpoint.onExchange(XsltEndpoint.java:131)
	at org.apache.camel.impl.ProcessorEndpoint$1.process(ProcessorEndpoint.java:71)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:541)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:529)
	at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:365)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:497)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:225)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:161)
	... 31 more",
0,CAMEL-10703,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-13 10:36:27+00:00,2017-01-13 11:59:24+00:00,Currently we have for simple languge. But we could have an api for other languages as well. This will just be a sanity check if the expression/predicate can be created.,
0,CAMEL-10702,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-13 10:28:17+00:00,2017-01-13 11:31:32+00:00,"When using jsonpath for predicates the syntax can be a bit complex to understand and learn for even the simplest things.


So having to do



                        .when().jsonpath(""$.store.book[?(@.price < ${header.cheap})]"")




We can try to let Camel be smart and help you with a easy syntax when you have one operator and in predicate mode, so this can be just



                        .when().jsonpath(""store.book.price < ${header.cheap}"")




Then camel-jsonpath will parse this and build the complexer jsonpath syntax on your behalf.


Not having to remember the complexities of [?@.] and other hard to remember symbols to just say a simple predicate if X < Y etc.","davsclaus:1484278287:2017-01-13T11:31:27.423+0000:1484278287:2017-01-13T11:31:27.423+0000:And you can also do
{code}
                        .when().jsonpath(""price < ${header.cheap}"")
{code}"
0,CAMEL-10701,Bug,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Andrea Cosentino,Antoine DESSAIGNE,0,2,2017-01-13 09:32:26+00:00,2017-01-13 11:02:42+00:00,"Previously, KAFKA-3218 prevented from loading properly Kafka in an OSGi environment. There is a workaround to this bug in camel-kafka.


Unfortunatly, now that they have fixed the bug, this workaround prevents from loading SASL authentication settings in OSGi environments. The bug was fixed in Kafka 0.10.1.0 and camel uses this version in the 2.18.x branch.



Caused by: javax.security.auth.login.LoginException: classe LoginModule introuvable : org.apache.kafka.common.security.plain.PlainLoginModule
    at javax.security.auth.login.LoginContext.invoke(LoginContext.java:794)
    at javax.security.auth.login.LoginContext.access$000(LoginContext.java:195)
    at javax.security.auth.login.LoginContext$4.run(LoginContext.java:682)
    at javax.security.auth.login.LoginContext$4.run(LoginContext.java:680)
    at java.security.AccessController.doPrivileged(Native Method)
    at javax.security.auth.login.LoginContext.invokePriv(LoginContext.java:680)
    at javax.security.auth.login.LoginContext.login(LoginContext.java:587)
    at org.apache.kafka.common.security.authenticator.AbstractLogin.login(AbstractLogin.java:69)
    at org.apache.kafka.common.security.authenticator.LoginManager.<init>(LoginManager.java:46)
    at org.apache.kafka.common.security.authenticator.LoginManager.acquireLoginManager(LoginManager.java:68)
    at org.apache.kafka.common.network.SaslChannelBuilder.configure(SaslChannelBuilder.java:78)
    ... 29 more","githubbot:1484271279:2017-01-13T09:34:39.572+0000:1484271279:2017-01-13T09:34:39.572+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1396

    CAMEL-10701 - Use proper classloader for loading authentication settings in Kafka

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-10701

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1396.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1396
    
----
commit ef805ef5b1ac45a0cb0f9c9b9f3f4274774937c8
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-01-13T09:33:25Z

    CAMEL-10701 - Use proper classloader for loading authentication settings in Kafka

----

githubbot:1484276562:2017-01-13T11:02:42.575+0000:1484276562:2017-01-13T11:02:42.575+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1396
"
0,CAMEL-10700,Improvement,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2017-01-12 11:44:42+00:00,2017-01-13 17:02:37+00:00,"Because we cannot resolve property placeholders at design time we need a way to let the simple parser deal with having {{ }} in the string. As you get this kind of error today



davsclaus:/Users/davsclaus/workspace/camel/examples/camel-example-cdi-xml (master)/$ mvn camel:validate
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: CDI :: Camel XML 2.19.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- camel-maven-plugin:2.19.0-SNAPSHOT:validate (default-cli) @ camel-example-cdi-xml ---
[INFO] Using Camel version: 2.19.0-SNAPSHOT
[INFO] Endpoint validation success: (5 = passed, 0 = invalid, 0 = incapable, 0 = unknown components)
[WARNING] Simple validation error at: camel-context(camel-context.xml:44)

	functionEnd has no matching start token at location 21
	${body} == '{{poison}}'
	                     *

[WARNING] Simple validation error: (0 = passed, 1 = invalid)","davsclaus:1484280594:2017-01-13T12:09:54.068+0000:1484280594:2017-01-13T12:09:54.068+0000:Oh it was not a duplicate, this is still a problem"
0,CAMEL-10699,Improvement,Minor,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2017-01-12 08:50:06+00:00,2017-01-12 08:58:17+00:00,"So you can get a short error message instead of the verbose error with the * marker. That is not so good for tooltips and tooling and whatnot, where you just need to short error and nothing more.",
0,CAMEL-10698,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-11 21:08:48+00:00,2017-01-13 12:09:28+00:00,"When we get some details in the model we can find out if its a predicate or expression and use that in the validator to validate that correctly.


Now it can fail with



[INFO] --- camel-maven-plugin:2.19.0-SNAPSHOT:validate (default-cli) @ camel-example-spring-boot ---
[INFO] Using Camel version: 2.19.0-SNAPSHOT
[INFO] Endpoint validation success: (3 = passed, 0 = invalid, 0 = incapable, 0 = unknown components)
[WARNING] Simple validation error at: org.apache.camel.example.spring.boot.MySpringBootRouter.configure(MySpringBootRouter.java:34)

	Unexpected token ! at location 8
	${body} !> 50
	        *

[WARNING] Simple validation error: (0 = passed, 1 = invalid)




In a route with



        from(""timer:trigger"")
            .filter().simple(""${body} !> 50"")
                .to(""log:out"");","davsclaus:1484140485:2017-01-11T21:14:45.080+0000:1484140485:2017-01-11T21:14:45.080+0000:Got this fixed for Java parser, need a bit for the XML parser"
0,CAMEL-10697,Improvement,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Antoine DESSAIGNE,0,3,2017-01-11 16:25:09+00:00,2017-01-12 09:59:22+00:00,"This bug is described in KAFKA-1894, they provide a workaround that consist of calling the wakeup method from another thread. It would be nice if this workaround was included in the camel-kafka consumer","antoine.dessaigne:1484137521:2017-01-11T20:25:21.443+0000:1484137521:2017-01-11T20:25:21.443+0000:There is a PR for this issue, I don't know why the bot didn't saw it. Here it is : https://github.com/apache/camel/pull/1394
antoine.dessaigne:1484185541:2017-01-12T09:45:41.363+0000:1484185541:2017-01-12T09:45:41.363+0000:I'll do my best impersonating the bot :)

GitHub user adessaigne opened a pull request:

https://github.com/apache/camel/pull/1394

CAMEL-10697 - Workaround KAFKA-1894 by calling the wakeup method

You can merge this pull request into a Git repository by running:

$ git pull https://github.com/adessaigne/camel CAMEL-10697

Alternatively you can review and apply these changes as the patch at:

https://github.com/apache/camel/pull/1394.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

This closes #1394
davsclaus:1484185990:2017-01-12T09:53:10.302+0000:1484185990:2017-01-12T09:53:10.302+0000:Thanks for the PR
githubbot:1484186362:2017-01-12T09:59:22.234+0000:1484186362:2017-01-12T09:59:22.234+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1394
"
0,CAMEL-10696,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Antoine DESSAIGNE,0,3,2017-01-11 15:45:50+00:00,2017-01-13 13:45:53+00:00,"As Kafka supports resuming from any offsets, it would be nice if this feature was available camel-kafka component.


Since Kafka needs the offset of each partition, its state (where to resume from) should be somehow similar to a Map. We cannot use an IdempotentRepository because it behaves like a Set.


If we create a standard API for holding the state as a Map then we can reuse it for other purpose like resuming database reads from a particular index.","githubbot:1484121046:2017-01-11T15:50:46.105+0000:1484121046:2017-01-11T15:50:46.105+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/1393

    CAMEL-10696 - Allow Kafka to resume from any offset

    I created a new `StateRepository` _standard_ API in order to hold its state (the offset of each partition). This state looks like a `Map` whereas the `IdempotentRepository` behaves like a `Set` (that's why a created a new API).
    Moreover this API can be later on reuse for other purpose like keeping the last index of database reads.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-10696

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1393.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1393
    
----
commit eae0b4fcb69f6376412adfa52f52268d957a9d55
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2017-01-11T15:48:02Z

    CAMEL-10696 - Allow Kafka to resume from any offset based using a new ""standard"" API to hold its state

----

githubbot:1484185125:2017-01-12T09:38:45.108+0000:1484185125:2017-01-12T09:38:45.108+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/1393

antoine.dessaigne:1484190473:2017-01-12T11:07:53.386+0000:1484190473:2017-01-12T11:07:53.386+0000:[~davsclaus] Did I forgot to do something regarding this ticket ? Thx.
davsclaus:1484280178:2017-01-13T12:02:58.988+0000:1484280178:2017-01-13T12:02:58.988+0000:Thanks for the work
antoine.dessaigne:1484286353:2017-01-13T13:45:53.886+0000:1484286353:2017-01-13T13:45:53.886+0000:Sure, no problem. Thanks for merging it."
0,CAMEL-10695,Bug,Minor,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-11 13:52:26+00:00,2017-01-11 15:45:31+00:00,"If MQTTEndpoint's doStop method is execuded but a the MQTT connection is not established, the endpoint throws a TimeoutException like:



Caused by: java.util.concurrent.TimeoutException
at org.fusesource.mqtt.client.Promise.await(Promise.java:83)
at org.apache.camel.component.mqtt.MQTTEndpoint.doStop(MQTTEndpoint.java:300)
at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)
at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:142)
at org.apache.camel.impl.DefaultCamelContext.stopServices(DefaultCamelContext.java:3361)
at org.apache.camel.impl.DefaultCamelContext.addEndpoint(DefaultCamelContext.java:522)
at org.apache.camel.component.ref.RefEndpoint.doStart(RefEndpoint.java:81)",
0,CAMEL-10694,Bug,Major,2.18.1,,"
None
",Resolved,Invalid,None,Claus Ibsen,Baltej Singh,0,2,2017-01-10 22:36:29+00:00,2017-01-11 09:00:20+00:00,"The simple example that shows the issues with various {{}}, =$simple

{file:onlyname}

 and ${bean:...} combinations


------------fileNaming.properties ------------ 




trace=false in.path=c:/temp/in
in.path0=c:/temp/test/in0
in.path1=c:/temp/test/in1
in.path2=c:/temp/test/in2
in.path3=c:/temp/test/in3
archive.path=c:/temp/test/archive/
common.fname.pattern=$simple{file:onlyname}
datetime.fname.pattern=$simple{date:now:yyyy-MM-dd_hh-mm-ss.SSS}-$simple{file:onlyname}
incounter.datetime.fname.pattern=${bean:inboundCounter.incrementAndGet}-$simple{date:now:yyyy-MM-dd_hh-mm-ss.SSS}





---------Begin camel context-----------




<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:camel=""http://camel.apache.org/schema/spring"" xmlns:p=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd        http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">


	<bean class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer""
		id=""bridgePropertyPlaceholder"">
		<p:property name=""location"" value=""classpath:fileNaming.properties"" />
	</bean>
	
	<bean class=""java.util.concurrent.atomic.AtomicLong"" id=""inboundCounter"" />
	  
	<camelContext id=""testFileNamingContext"" trace=""{{trace}}""
		xmlns=""http://camel.apache.org/schema/spring"">
		<route id=""workingRoute"">
			<camel:description>This route produces: C:\temp\test\in\done\0-workingRoute-testNaming.xml</camel:description>
			<from
				uri=""file:c:/temp/test/in?moveFailed=.failed/$simple{file:onlyname}&amp;move=done/${bean:inboundCounter.getAndIncrement}-workingRoute-$simple{file:onlyname}"" />
			<log message=""workingRoute"" />
			<to id=""_toW"" uri=""mock://complete"" />
		</route>

		<route id=""errorRoute0"">
			<camel:description>Using {{common.fname.pattern}} causes inboundCounter bean reference to fail.   This route produces: C:\temp\test\in0\done\inboundCounter.getAndIncrement-errorRoute0-testNaming.xml </camel:description>
			<from
				uri=""file:c:/temp/test/in0?move=done/${bean:inboundCounter.getAndIncrement}-errorRoute0-{{common.fname.pattern}}"" />
			<log message=""errorRoute0"" />
			<to id=""_to0"" uri=""mock://complete"" />
		</route>
		
		<route id=""errorRoute1"">
			<camel:description>Using {{in.path1}} and {{archive.path}} causes inboundCounter bean reference to fail. This route produces:  C:\temp\test\archive\inboundCounter.getAndIncrement-errorRoute1-testNaming.xml </camel:description>
			<from
				uri=""file:{{in.path1}}?move={{archive.path}}/${bean:inboundCounter.getAndIncrement}-errorRoute1-$simple{file:onlyname}"" />
			<log message=""errorRoute1"" />
			<to id=""_to1"" uri=""mock://complete"" />
		</route>

		<route id=""errorRoute2"">
			<camel:description>This route produces:  C:\temp\test\in2\done\inboundCounter.getAndIncrement-errorRoute2-testNaming.xml</camel:description>
			<from
				uri=""file:{{in.path2}}?move=done/${bean:inboundCounter.getAndIncrement}-errorRoute2-{{common.fname.pattern}}"" />
			<log message=""errorRoute2"" />
			<to id=""_to2"" uri=""mock://complete"" />
		</route>


		<route id=""errorRoute3"">
			<camel:description>This route produces: C:\temp\test\archive\inboundCounter.getAndIncrement-errorRoute3-testNaming.xml </camel:description>
			<from
				uri=""file:{{in.path3}}?move={{archive.path}}/${bean:inboundCounter.getAndIncrement}-errorRoute3-{{common.fname.pattern}}"" />
			<log message=""errorRoute3"" />
			<to id=""_to3"" uri=""mock://complete"" />
		</route>
	</camelContext>
</beans>





------------


Note that NO errors are thrown in console


---------Begin camel context Console-----------



[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Total 5 routes, of which 5 are started.
[pache.camel.spring.Main.main()] SpringCamelContext             INFO  Apache Camel 2.18.1 (CamelContext: testFileNamingContext) started in 2.402 seconds
[d #3 - file://c:/temp/test/in0] errorRoute0                    INFO  errorRoute0
[d #4 - file://c:/temp/test/in1] errorRoute1                    INFO  errorRoute1
[d #5 - file://c:/temp/test/in2] errorRoute2                    INFO  errorRoute2
[d #6 - file://c:/temp/test/in3] errorRoute3                    INFO  errorRoute3
[d #6 - file://c:/temp/test/in3] errorRoute3                    INFO  errorRoute3





=====================


----------Begin listing -----------



C:\temp\test>tree
Folder PATH listing for volume RAW7121218
Volume serial number is 0C09-AE01
C:.
├───archive
├───in
│   └───done
├───in0
│   └───done
├───in1
├───in2
│   └───done
└───in3

C:\temp\test>ls -1R
.:
archive
in
in0
in1
in2
in3

./archive:
inboundCounter.getAndIncrement-errorRoute1-testNaming.xml
inboundCounter.getAndIncrement-errorRoute3-testNaming.xml

./in:
done

./in/done:
0-workingRoute-testNaming.xml

./in0:
done

./in0/done:
inboundCounter.getAndIncrement-errorRoute0-testNaming.xml

./in1:

./in2:
done

./in2/done:
inboundCounter.getAndIncrement-errorRoute2-testNaming.xml

./in3:",davsclaus:1484096420:2017-01-11T09:00:20.082+0000:1484096420:2017-01-11T09:00:20.082+0000:Use the mailing list / user forum to get help first
0,CAMEL-10693,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-10 15:17:30+00:00,2017-02-06 17:31:12+00:00,As Spring Boot shell is deprecated and will be removed in future versions we should deprecate camel-spring-boot commands,
0,CAMEL-10692,Bug,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Andrea Cosentino,Thomas Diesler,0,2,2017-01-10 15:07:56+00:00,2017-01-10 15:39:08+00:00,No Desc,"githubbot:1484032153:2017-01-10T15:09:13.718+0000:1484032153:2017-01-10T15:09:13.718+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1391

    [CAMEL-10692] OptaPlanner cannot load config from deployment

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10692

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1391.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1391
    
----
commit fe4b3f9ca39133fe85bd298c72e65c8b66aa62cc
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-01-10T15:08:24Z

    [CAMEL-10692] OptaPlanner cannot load config from deployment

----

githubbot:1484032213:2017-01-10T15:10:13.323+0000:1484032213:2017-01-10T15:10:13.323+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1392

    [CAMEL-10692] OptaPlanner cannot load config from deployment

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10692m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1392.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1392
    
----
commit f2d6586f936369c8e325d631830c82f2fed3df10
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2017-01-10T15:08:24Z

    [CAMEL-10692] OptaPlanner cannot load config from deployment

----

githubbot:1484033365:2017-01-10T15:29:25.036+0000:1484033365:2017-01-10T15:29:25.036+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1391

githubbot:1484033948:2017-01-10T15:39:08.727+0000:1484033948:2017-01-10T15:39:08.727+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1392
"
0,CAMEL-10691,Improvement,Minor,2.17.3,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Chandra Bose Renganathan,0,2,2017-01-10 13:58:37+00:00,2017-01-17 13:28:21+00:00,"HttpRestServletResolveConsumerStrategy should pick the path with longest prefix match.


The JAX-RS specification has defined strict sorting and precedence rules for matching URI expressions and is based on a most specific match wins algorithm.


For camel also it should be same.


This is an example use case:



@Override
public final void configure() throws Exception {
LOG.info(""Configuring Camel routes"");
from(""jetty:http://localhost:8080/crud?matchOnUriPrefix=true"")
.to(""cxfbean:crudService"");

from(""jetty:http://localhost:8080/?matchOnUriPrefix=true"")
.process(new StaticProcessor(""/"", ""index.html"", staticFileRoot));
}","davsclaus:1484096476:2017-01-11T09:01:16.288+0000:1484096476:2017-01-11T09:01:16.288+0000:Servlet is not a JAX-RS spec.

davsclaus:1484280264:2017-01-13T12:04:24.774+0000:1484280264:2017-01-13T12:04:24.774+0000:But yeah its a good idea. Anyone is welcome to try to dig into this.
davsclaus:1484629779:2017-01-17T13:09:39.855+0000:1484629779:2017-01-17T13:09:39.855+0000:There is a bit more code changes for this, so doing this on master"
0,CAMEL-10690,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2017-01-10 13:56:12+00:00,2017-01-11 10:35:49+00:00,Actually we can only store data in our InfluxDB. No way to query.,
0,CAMEL-10689,Bug,Minor,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-10 13:54:29+00:00,2017-01-10 15:43:47+00:00,"When invoking component-list on a spring-boot shell, the command component-list throws the following error:



2017-01-10 14:51:48.857 ERROR 16924 --- [pool-1-thread-4] o.crsh.shell.impl.command.CRaSHSession   : Error while evaluating request 'camel component-list camel-1' camel component-list camel-1: exception: Could not find factory class for resource: META-INF/services/org/apache/camel/component/bean-component

org.apache.camel.NoFactoryAvailableException: Could not find factory class for resource: META-INF/services/org/apache/camel/component/bean-component
	at org.apache.camel.impl.DefaultFactoryFinder.doFindFactoryProperties(DefaultFactoryFinder.java:140) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:78) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.impl.DefaultFactoryFinder.findClass(DefaultFactoryFinder.java:70) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.getComponentParameterJsonSchema(DefaultCamelContext.java:1435) ~[camel-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.AbstractLocalCamelController.listComponents(AbstractLocalCamelController.java:580) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.ComponentListCommand.performContextCommand(ComponentListCommand.java:53) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.AbstractContextCommand.executeLocal(AbstractContextCommand.java:74) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.commands.AbstractContextCommand.execute(AbstractContextCommand.java:42) ~[camel-commands-core-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]
	at org.apache.camel.springboot.commands.crsh.CamelCommandsFacade.runCommand(CamelCommandsFacade.java:95) ~[camel-commands-spring-boot-2.19.0-SNAPSHOT.jar:2.19.0-SNAPSHOT]",
0,CAMEL-10688,Bug,Major,2.18.1,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2017-01-10 13:43:33+00:00,2017-01-10 13:53:12+00:00,Similar to CAMEL-10635 and the other mongodb components.,
0,CAMEL-10687,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2017-01-10 13:11:18+00:00,2017-01-10 14:58:58+00:00,We should let the tooling generate the adoc titles so they are consistent.,
0,CAMEL-10686,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-10 11:30:09+00:00,2017-02-22 10:07:51+00:00,No Desc,
0,CAMEL-10685,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Antonin Stefanutti,RasPelikan,0,3,2017-01-10 11:08:31+00:00,2017-04-14 07:26:29+00:00,"The ""transacted"" configuration requires a Spring environment. We use JavaEE and we needed to use ""transacted"". We ported the Spring implementation of the TransactionErrorHandler to JavaEE.


There is only one major difference: Spring's TransactionErrorHandler derives from org.apache.camel.processor.RedeliveryErrorHandler which brings the behavior that redelivery is done within the transaction. In our implementation there is a RedeliveryErrorHandler which uses the TransactionErrorHandler to force a rollback and create a new transaction for each redelivery.


Example usage:



errorHandler(transactionErrorHandler() //
                .setTransactionPolicy(""PROPAGATION_SUPPORTS"") //
                .maximumRedeliveries(5) //
                .maximumRedeliveryDelay(5000) //
                .collisionAvoidancePercent(10) //
                .backOffMultiplier(1.5));
from(""direct:sample"") //
                .transacted(""PROPAGATION_REQUIRES_NEW"")
                .to(""bean:sampleBean"");","RasPelikan:1484017756:2017-01-10T11:09:16.359+0000:1484017756:2017-01-10T11:09:16.359+0000:Adding a pull-requrest link in the near future...
githubbot:1484025552:2017-01-10T13:19:12.955+0000:1484025552:2017-01-10T13:19:12.955+0000:GitHub user RasPelikan opened a pull request:

    https://github.com/apache/camel/pull/1390

    CAMEL-10685: Added camel-cdi-jee component

    The ""transacted"" configuration requires a Spring environment. We use JavaEE and we needed to use ""transacted"". We ported the Spring implementation of the TransactionErrorHandler to JavaEE.
    
    There is only one major difference: Spring's TransactionErrorHandler derives from org.apache.camel.processor.RedeliveryErrorHandler which brings the behavior that redelivery is done within the transaction. In our implementation there is a RedeliveryErrorHandler which uses the TransactionErrorHandler to force a rollback and create a new transaction for each redelivery.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/RasPelikan/camel CAMEL-10685_JavaEE-transacted

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1390.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1390
    
----
commit 36c0fd1b3a82ca893da5d727a37466dc5214eef5
Author: Stephan Pelikan <stephan.pelikan@wdw-elab.de>
Date:   2017-01-10T12:59:19Z

    Added camel-cdi-jee component

----

githubbot:1492125989:2017-04-14T07:26:29.272+0000:1492125989:2017-04-14T07:26:29.272+0000:Github user RasPelikan closed the pull request at:

    https://github.com/apache/camel/pull/1390
"
0,CAMEL-10684,Improvement,Minor,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2017-01-09 20:15:49+00:00,2017-01-09 20:34:17+00:00,Currently SimpleValidationResult sets the exception message. But we should check if its a SimpleParserException which has a getIndex so we know where the error is,
0,CAMEL-10683,Improvement,Major,None,2.19.0,"
None
",Closed,Won't Fix,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-09 17:19:16+00:00,2017-02-07 06:05:38+00:00,"As today the auto configuration properties are auto generated by tooling only if a component has options, it would be nice instead to create a configuration object for each class annotated with @UriParams so i.e. we can reuse the configuration to configure additional elements like service-call eip",
0,CAMEL-10682,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2017-01-09 17:16:45+00:00,2017-02-06 17:28:03+00:00,No Desc,
0,CAMEL-10681,Bug,Minor,2.18.1,2.19.0,"
None
",Resolved,Not A Bug,2.19.0,Luca Burgazzoli,Sumit Kumar,0,2,2017-01-09 08:28:52+00:00,2017-01-10 08:53:57+00:00,"camel-ehcache component fail to initialize cache for the provided value of configUri.


Different option to setup the configUri were attempted, but everytime it gives the error
Caused by: java.lang.IllegalArgumentException: CacheConfiguration must be specified 
        at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:308) 
        at org.apache.camel.component.ehcache.EhcacheConfiguration.getMandatoryConfiguration(EhcacheConfiguration.java:243) 
        at org.apache.camel.component.ehcache.EhcacheManager.getCache(EhcacheManager.java:72) 
        at org.apache.camel.component.ehcache.EhcacheManager.getCache(EhcacheManager.java:88) 


As per documentation, the configuration option is ""The default cache configuration to be used to create caches if configUri is not set"".
So if i am setting up configUri than the error for configuration should not come.


The approaches attempted for configUri are documented in the camel user forum at the below link


http://camel.465427.n5.nabble.com/Camel-EhCache-2-18-1-Exception-during-initialization-td5792164.html","lb:1483925205:2017-01-09T09:26:45.013+0000:1483925205:2017-01-09T09:26:45.013+0000:[~urwithsumit@gmail.com] can you provide the ehcache conf ?
urwithsumit@gmail.com:1483926033:2017-01-09T09:40:33.035+0000:1483926033:2017-01-09T09:40:33.035+0000:config file 
urwithsumit@gmail.com:1483926227:2017-01-09T09:43:47.267+0000:1483926227:2017-01-09T09:43:47.267+0000:Attached the config file.


lb:1483927284:2017-01-09T10:01:24.847+0000:1483927304:2017-01-09T10:01:44.799+0000:So the issue is that there's no cache named ""appCache"" in the config file so that the ehcache cache manager does not know how to create it unless you provide a cache configuration via the ""configuration"" option. If you define your cache in the xml file, it should work with classpath:... only.

Can you please confirm ?
urwithsumit@gmail.com:1483993319:2017-01-10T04:21:59.867+0000:1483993319:2017-01-10T04:21:59.867+0000:It worked with your suggestion. I had removed the caching code earlier, so i just tested with a basic route as below:

from(""ehcache://fileProfilesCachePrimary?configUri=classpath:ehcache/ehcache-config.xml&keyType=java.lang.String"").log(""Cache Loaded..."") ;

On Starting the app, below comes successfully in the console: 

2017-01-09 20:17:13,668 [t.Server.main()] INFO  SpringCamelContext             - Route: route7 started and consuming from: ehcache://fileProfilesCachePrimary?configUri=classpath%3Aehcache%2Fehcache-config.xml&keyType=java.lang.String
"
0,CAMEL-10650,Improvement,Major,None,2.19.0,"
None
",Resolved,Resolved,2.19.0,Nicola Ferraro,Claus Ibsen,0,3,2016-12-23 11:45:57+00:00,2017-04-12 14:00:16+00:00,"Camel has org.apache.camel.util.jsse.SSLContextParameters from
http://camel.apache.org/camel-configuration-utilities.html


We should allow to configure this from spring boot auto configuration so people can easier setup this in the application properties file etc.","nferraro:1484630387:2017-01-17T13:19:47.772+0000:1484630425:2017-01-17T13:20:25.215+0000:We should add support for multi-level configuration to support this (and the result won't be great, since there are 5 levels and keys are not shown by the IDE after a certain limit). Currently our nested config manages up to 2 levels.
davsclaus:1484630688:2017-01-17T13:24:48.880+0000:1484630688:2017-01-17T13:24:48.880+0000:We can flattern the keys so they are less deep. 
nferraro:1484638649:2017-01-17T15:37:29.337+0000:1484638649:2017-01-17T15:37:29.337+0000:No.. the actual problem is not the number of levels but the length of the property that (in any case) goes out of the IntelliJ context window.

Anyway, the feature is useful, even with less aid from the IDE. We have the doc.
nferraro:1491437949:2017-04-06T08:19:09.580+0000:1491437986:2017-04-06T08:19:46.307+0000:[~davsclaus] There are multiple issues with code generation when code is splitted in multiple classes in different modules (will open other jiras for 2.20).. 

I'm thinking to provide a default value of the context parameters in the spring-boot module (manually coded). That value can be configured in a common place for every module:

{code}
camel:
  ssl:
    enabled: true
    config:
      cert-alias: xxx
      key-managers:
        provider: yyy
...
{code}

Each module using SSLContextParameters will try to lookup the default value from the registry if a specific value is not provided in their configuration.

This is in line with spring-boot way of handling ssl (https://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl).

Wdyt?
davsclaus:1491438661:2017-04-06T08:31:01.675+0000:1491438661:2017-04-06T08:31:01.675+0000:Yeah this sounds good.
githubbot:1491557960:2017-04-07T17:39:20.883+0000:1491557960:2017-04-07T17:39:20.883+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1607

    CAMEL-10650: global sslContextParameters

    Submitting for a review.
    It basically adds global ssl parameters that can be configured using spring-boot properties. There is no ide autocompletion at the moment, bu I'll add it. A sample configuration is contained in the tests e.g. of `camel-undertow-starter`.
    
    To create a global ssl config, I needed to take care of:
    - Change each component using SSLContextParameters to lookup the new default if no configuration is given
    - Not clash with spring xml configuration of SSLContextParameters, so I avoided putting into the registry an instance of SSLContextParameters, instead I put a GlobalSSLContextParametersSupplier class.
    - Make sure that taking a default does not change the behaviour of the component: for components where the presence of a SSLContextParameters in the config turns on the SSL mode, I've put a flag named ""useGlobalSslContextParameters"" to disable the feature. For some components, the default is false (do not use the global config).
    
    For http/tcp components there is no need of such flag since SSL is enabled by other means (e.g. ""https://"" in the uri). Some components have their own flag to enable SSL.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1607.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1607
    
----
commit 854774eca5c8caec34fc41bb8d52386ecd581537
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-04-06T12:52:06Z

    CAMEL-10650: adding sslContextParameters to spring-boot configuration

----

githubbot:1491890951:2017-04-11T14:09:11.441+0000:1491890951:2017-04-11T14:09:11.441+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1607

nferraro:1491898795:2017-04-11T16:19:55.529+0000:1491898807:2017-04-11T16:20:07.882+0000:Now that ssl context parameters should be enabled explicitly, there's no need to set the flag ""camel.ssl.enabled=true"". I should change the condition that lead to the creation of the SSLParametersSupplier in the registry.
nferraro:1491976816:2017-04-12T14:00:16.396+0000:1491976816:2017-04-12T14:00:16.396+0000:Added docs and completing."
0,CAMEL-10649,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-23 08:49:08+00:00,2016-12-23 10:07:36+00:00,"There are two new model types which needs class javadoc / javadoc on setters etc.


[WARNING] 	Missing javadoc on models: 2
[WARNING] 		typeFilter
[WARNING] 		transformers",davsclaus:1482458847:2016-12-23T10:07:27.743+0000:1482458847:2016-12-23T10:07:27.743+0000:I got this fixed
0,CAMEL-10648,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-22 18:58:45+00:00,2016-12-22 20:19:39+00:00,So people can start up routes without connections to brokers and have Camel recover and connect when the broker is online,"davsclaus:1482409179:2016-12-22T20:19:39.161+0000:1482409179:2016-12-22T20:19:39.161+0000:There is also a recoveryInterval option to configure how frequent to try to recover, using 5 sec by default like camel-jms does."
0,CAMEL-10647,Task,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-12-22 15:40:02+00:00,2016-12-22 18:31:24+00:00,This has dependency on some artifacts from platforms which it should not do.,davsclaus:1482397571:2016-12-22T17:06:11.807+0000:1482397571:2016-12-22T17:06:11.807+0000:And there was also a problem in camel-dropbox
0,CAMEL-10646,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,James Strachan,0,2,2016-12-22 14:48:46+00:00,2022-09-24 09:06:35+00:00,"it'd be nice if we could use json path expressions on beans too; so that if some JSON gets unmarshalled via jackson we could still use jsonPath on the object.


Here's a possible implementation approach (though maybe there's a more optimal approach?)
http://stackoverflow.com/a/27754489/2068211


Maybe this code https://github.com/apache/camel/blob/master/components/camel-jsonpath/src/main/java/org/apache/camel/jsonpath/JsonPathEngine.java#L114 should check if the body can't be converted to a File, String or InputStream it tries to convert the payload to something like JSonPathNavigator (a new interface we create). If it can be converted we use that interface to transform the payload.


Then we could have decoupled ways to convert objects into navigable formats (e.g. Maps / Lists)?


e.g. 



public JacksonJsonPathNavigator implements JSonPathNavigator {
  public Object convert(Object input) {
    ObjectMapper mapper = new ObjectMapper();
    return mapper.convertValue(input, Map.class);
  }
}




This is how we've used saxon in the past with different libraries to perform XPath navigation (e.g. c24 stuff). 


Another approach could just be to try convert the object to a Map and have a Jackson based converter that can convert objects with a Jackon annotation to a Map using the above code?","davsclaus:1482463567:2016-12-23T11:26:07.039+0000:1482463567:2016-12-23T11:26:07.039+0000:Yeah I am making jackson an optional adapter so if its on the classpath, we will attempt to use it to read the message body into a Map type which json path can support.
davsclaus:1482466603:2016-12-23T12:16:43.948+0000:1482466603:2016-12-23T12:16:43.948+0000:Okay just add jackson to the classpath, or add camel-jackson as dependency and you have POJOs OOTB.

jstrachan:1482470926:2016-12-23T13:28:46.908+0000:1482470926:2016-12-23T13:28:46.908+0000:awesome thanks!"
0,CAMEL-10645,Bug,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-12-22 14:23:02+00:00,2016-12-23 07:59:43+00:00,No Desc,
0,CAMEL-10644,Bug,Minor,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-12-22 14:21:28+00:00,2016-12-22 15:04:41+00:00,No Desc,
0,CAMEL-10643,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-22 12:12:48+00:00,2016-12-22 12:27:17+00:00,"We should add a JMS ExceptionListener that logs all errors out of the box like we do with Spring JMS.


We can then have options to configure the logging level which is WARN by default.",
0,CAMEL-10642,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,James Strachan,0,1,2016-12-22 11:58:31+00:00,2019-07-31 14:49:24+00:00,"there's an interesting concept in AWS Step Functions for input and output processing: https://states-language.net/spec.html#filters


namely that given some raw in, you can specify an `input` expression for filtering the raw input before sending it to an endpoint; then a `result` path expression where the result can be stored in the raw input; then the `output` expression which is used to filter the resulting raw input & output for the next step.


i.e. its a simple way to compose inputs and outputs into a single message using a path expression language (in this case JsonPath).


It might be nice to add the same kind of mechanism to the DSL. e.g. right now we take the output and pass it to the next step in the route. However it might be nice if folks could specify where the output goes in the initial raw input; for example to compose the results from a number of endpoints into a single message.


One issue with the current camel Expression API is there's no concept of storing a result at a `reference path`. 


e.g. if the raw input was



{
  ""title"": ""Numbers to add"",
  ""numbers"": { ""val1"": 3, ""val2"": 4 }
}




and we used



""InputPath"": ""$.numbers"",
""ResultPath"": ""$.sum""




to then invoke an endpoint that sums the numbers, we'd get the result output:



{
  ""title"": ""Numbers to add"",
  ""numbers"": { ""val1"": 3, ""val2"": 4 },
  ""sum"": 7
}




so it may only be a subset of Languages we can support this 'resultPath` behaviour. At least JsonPath supports this at the implementation. So in speudo code its something like 



jsonpath.set(rawInput, endpointOutput)



 


So we'd need to add a new interface that an Expression may support; UpdateExpression or something like that, along these lines:



/** takes the value and updates it inside the input exchange payload */
public interface UpdateExpression extends Expression {
   public Object update(Exchange rawInput, Object value, Class clazz);
}




Which for now we'd only implement with JsonPath but could support other languages over time (e.g. XPath should be fine too)


In terms of a DSL we may want to have a `ToDefinition` like step which has a language and optional input, result, output expressions. Maybe something like...



from(""foo"").invoke().jsonPath().input(""$"").result(""$"").output(""$"").to(""whatnot"")




I'm not totally sure about the 'invoke' name here but figured we'd need something different from 'to' to differentiate it in the Java DSL? Then `invoke().jsonPath()` would return an InvokeExpression. Then for the 'InvokeDefinition' we'd need to specify a language along with optional expressions (input, output, result) then the ""to"" would be the last expression so that the DSL returns back to the usual DSL again.


We may want to use the idea of default expressions; so that if nothing is provided then for jsonPath we assume $ so that if you wish to not send any input or output you use an explicit null for those expressions.",
0,CAMEL-10641,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,John Poth,Claus Ibsen,0,4,2016-12-22 10:32:03+00:00,2017-01-05 15:55:26+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-core-not-detecting-converters-on-bundle-restart-in-karaf4-tp5791503.html


So even if the CamelContext instance itself is shutdown, then somehow type converters that are static method calls somehow are causing issues. We should instead attempt to unload the type converters when stopping.


However we need to ensure that this is called after CamelContext is stopped because the type converters are still to be used during shutdown of Camel itself.","davsclaus:1482375768:2016-12-22T11:02:48.843+0000:1482375768:2016-12-22T11:02:48.843+0000:It may be even tricker if its some classloading hell with osgi, so even if we remove type converters explicit it may not matter anyway.

Maybe its just to discourage using custom type converters as static methods in your own Camel bundles. We can then add a note / log a warn about that if we detect a static method. 
davsclaus:1482376097:2016-12-22T11:08:17.508+0000:1482376097:2016-12-22T11:08:17.508+0000:The activator calls unload to late and CamelContext has been stopped/cleared

{code}
2016-12-22 12:06:44,015 | DEBUG | xFrameworkWiring | Activator                        | 55 - org.apache.camel.camel-core - 2.19.0.SNAPSHOT | Bundle stopped: org.apache.camel.camel-netty
2016-12-22 12:06:44,017 | DEBUG | xFrameworkWiring | Activator                        | 55 - org.apache.camel.camel-core - 2.19.0.SNAPSHOT | Unloaded 0 type converters from bundle: org.apache.camel.camel-netty [60]
2016-12-22 12:06:44,030 | DEBUG | xFrameworkWiring | Activator                        | 55 - org.apache.camel.camel-core - 2.19.0.SNAPSHOT | Bundle started: org.apache.camel.camel-netty
{code}

So its likely some weird classloading issues with OSGi with static methods or something.
yogu13:1482382267:2016-12-22T12:51:07.571+0000:1482382330:2016-12-22T12:52:10.670+0000:Example of converter attached. This uses camel 2.18.1

As soon as its dropped into deploy folder of karaf, exceptions of InvalidPayload can be noticed in Karaf log once camel-core bundle is restarted the converter starts working.
githubbot:1483598503:2017-01-05T14:41:43.672+0000:1483598503:2017-01-05T14:41:43.672+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1377

    CAMEL-10641: Load Camel TypeConverters when a new TypeConverterLoader…

    … OSGI service is detected
    
    https://issues.apache.org/jira/browse/CAMEL-10641
    
    Note https://github.com/apache/camel/pull/1371 is needed to run the tests.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10641

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1377.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1377
    
----
commit 636ffe7394edc9030fb71a601c3c991c894f7673
Author: jpoth <poth.john@gmail.com>
Date:   2017-01-05T14:40:40Z

    CAMEL-10641: Load Camel TypeConverters when a new TypeConverterLoader OSGI service is detected

----

jpoth:1483598513:2017-01-05T14:41:53.743+0000:1483598513:2017-01-05T14:41:53.743+0000:Hi guys,

The example above embeds both a Camel route and a Camel TpyeConverter. If you separate them in two different bundles it should work. In our scenario, there's a timing issue where type converters are first [loaded|https://github.com/apache/camel/blob/c653828bae3b934fd03d16186a4251554d9b4a80/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java#L195] and only later on is our Converter [detected|https://github.com/apache/camel/blob/c653828bae3b934fd03d16186a4251554d9b4a80/components/camel-core-osgi/src/main/java/org/apache/camel/core/osgi/OsgiTypeConverter.java#L68] without reloading the Converter registry.

Hope this helps,

John.
githubbot:1483601812:2017-01-05T15:36:52.700+0000:1483601812:2017-01-05T15:36:52.700+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1377

yogu13:1483602926:2017-01-05T15:55:26.821+0000:1483602926:2017-01-05T15:55:26.821+0000:John

 Camel does not mandate Routes and converters to be part of separate bundles, neither should it enforce this going ahead

"
0,CAMEL-10640,Bug,Major,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Andrea Cosentino,Thomas Günter,0,4,2016-12-22 10:28:58+00:00,2016-12-22 13:09:11+00:00,"Provided custom AsyncHttpClientConfig is not used by WsEndpoint.java.


Current implementation: 


WsEndpoint.java:109
    protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {
        AsyncHttpClient client;
        if (config == null) {
            config = new DefaultAsyncHttpClientConfig.Builder().build();
            client = new DefaultAsyncHttpClient(config);
        } else {
            client = new DefaultAsyncHttpClient();
        }
        return client;
    }




Expected implementation:


WsEndpoint.java:109
    protected AsyncHttpClient createClient(AsyncHttpClientConfig config) {
        AsyncHttpClient client;
        if (config == null) {
            config = new DefaultAsyncHttpClientConfig.Builder().build();
            client = new DefaultAsyncHttpClient(config);
        } else {
            client = new DefaultAsyncHttpClient(config);
        }
        return client;
    }","davsclaus:1482376268:2016-12-22T11:11:08.086+0000:1482376268:2016-12-22T11:11:08.086+0000:Thanks do you want to provide this patch on github as a github PR?
http://camel.apache.org/contributing
githubbot:1482380354:2016-12-22T12:19:14.425+0000:1482380354:2016-12-22T12:19:14.425+0000:GitHub user tomguenter opened a pull request:

    https://github.com/apache/camel/pull/1364

    CAMEL-10640 Custom AsyncHttpClientConfig not used in WsEndpoint

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1364.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1364
    
----
commit 2f5fab9c4f725505cee9b12de98cf46640924ce6
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-03T13:58:29Z

    [maven-release-plugin] prepare release camel-2.18.0

commit 54a02453f4611b47daea7f270623f2d4e974750d
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-03T13:59:42Z

    [maven-release-plugin] prepare for next development iteration

commit 244eb03876bb4e7d95b04b4f4ae48322e47e3bb4
Author: Franz Forsthofer <franz.forsthofer@sap.com>
Date:   2016-10-04T11:59:42Z

    CAMEL-10368: Unused deflater in ZipDataFormat

commit da8694f8c5392881ac5ab49c37a7947451bb65af
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-04T22:28:22Z

    [maven-release-plugin] prepare release camel-2.18.0

commit e6d985d2f997b40711073e011849dc8498c225d7
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-04T22:28:59Z

    [maven-release-plugin] prepare for next development iteration

commit 1df40f5f5097eca6c208cdef24be9a75dbcb2510
Author: Stephan Siano <stephan.siano@sap.com>
Date:   2016-10-04T14:25:20Z

    CAMEL-10370: Conversion to CxfPayload throws Exception for Non-XML payload

commit ea4b27fbe1ff44d546c018c1436cab701a8705cf
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-10-06T09:11:59Z

    CAMEL-10358: do not clear the registry too early

commit ef88e60af5dab348c779216b008c5dfe7730cc06
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T15:49:18Z

    CAMEL-10366: Include input/output/deprecated in the spring model json schema files so they are similar to EIP model files. Thanks to Aurelien Pupier for reporting this.

commit 63439e174e2fbc7b89994e5df3a3723b02c55c58
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T15:53:41Z

    Fixed syntax on endpoint for component docs in camel-chronicele

commit f374df8d6704d2f121db92d0814531e2ad979205
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-05T16:11:32Z

    Fixed camel-chronoicle component docs and schema

commit 17c3407fef17f29aeaef0f578e1fc6ca3427fa9c
Author: Robert Gemmell <robbie@apache.org>
Date:   2016-10-04T11:20:28Z

    CAMEL-10367: remove stale dependency and version prop, fix a couple typos

commit 3bc4cf5a6e146da6df5233a5ca8eb32f1e180a64
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:47:35Z

    added the missing license and notice file to the camel-cm-sms component

commit f3eff6d82dcf670187ed7ddc4cb07e917b35dd41
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:54:38Z

    added the missing license and notice file to the camel-servicenow component

commit 6081e236162a4d908b412080e608407361bc544c
Author: Christian Mueller <cmueller@apache.org>
Date:   2016-10-06T05:57:37Z

    added the missing license and notice file to the camel-telegram component

commit 461d4dd69ce2591487df6db1d27416558ae53c83
Author: Claus Ibsen <davsclaus@apache.org>
Date:   2016-10-07T13:40:30Z

    CAMEL-10372: Fixed camel-stream component doc

commit 20cf933edde90b48ee371cf89aaacb2833ad8a8b
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2016-10-09T20:15:46Z

    Update schema files with release 2.18.0 references
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit ac002c88d28faec0b59d52a8b2427c23f1540a5a
Author: Michael Lück <michael.lueck@hm-ag.de>
Date:   2016-10-04T09:18:04Z

    added method to check for key existence

commit 201aeb22f7a8eea16690028f2b0969a452ca6bec
Author: Michael Lück <michael.lueck@hm-ag.de>
Date:   2016-10-05T13:22:51Z

    added null check before trying to call containsKey (prevent NPE)

commit 9916ee431192e1215a87900b5c5c622822d2e98c
Author: Andrea Cosentino <ancosen@gmail.com>
Date:   2016-10-11T07:54:45Z

    Fixed CS

commit f655c94110ae14a3db5b2ce6409684deaa619846
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-09-29T17:25:18Z

    CAMEL-10357: camel-servicenow: add per release model

commit fa1789a36ea81cc03394e2e8806d8d4e8d2197a2
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-10-10T16:39:44Z

    CAMEL-10378: Upgrade log4j2 to v2.7

commit 37a12df6a3d6780495b249b959a25966b62afb69
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T19:09:15Z

    CAMEL-10381 - fix NPE from component configuration

commit 7a1ee6bedc1c3572e7abdb0262f08d3435e5d293
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T21:55:12Z

    remove non spring boot compatible starters

commit 645d024b442bb130eaebbff41a494ac313bc6868
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T22:17:27Z

    CAMEL-10381 - fix NPE from component configuration

commit fbcaded8349754e574d6900dca863bbdec71b6c9
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-11T22:17:58Z

    add missed test case

commit 6d663971259650b626303ca30e77004abcdd3b0a
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:02:37Z

    CAMEL-10381 - fix NPE from calendar component configuration

commit 8de429e1236f1f2fb24098a924eb651ede85adc8
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:06:18Z

    fix test error

commit b15c2f5d62eb0285c5d48b9e9199e48abce365aa
Author: Jonathan Anstey <janstey@gmail.com>
Date:   2016-10-12T02:07:48Z

    fix CS

commit 8965cad85337014340b2eb9a44db386d40669c30
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-10-11T15:42:34Z

    CAMEL-10379: Improved component description

commit 467ded8f388e85df728927d0b0c3f7fb87fb89d4
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-10-12T08:22:15Z

    Minor improvements to camel-zipkin docs

----

githubbot:1482380453:2016-12-22T12:20:53.678+0000:1482380453:2016-12-22T12:20:53.678+0000:Github user tomguenter closed the pull request at:

    https://github.com/apache/camel/pull/1364

tom_guenter:1482381287:2016-12-22T12:34:47.139+0000:1482381287:2016-12-22T12:34:47.139+0000:Correct pull request added manually due to invalid original pull request.
acosentino:1482382988:2016-12-22T13:03:08.157+0000:1482382988:2016-12-22T13:03:08.157+0000:Thanks.
githubbot:1482383351:2016-12-22T13:09:11.346+0000:1482383351:2016-12-22T13:09:11.346+0000:Github user tomguenter closed the pull request at:

    https://github.com/apache/camel/pull/1365
"
0,CAMEL-10639,Improvement,Minor,None,Future,"
None
",Resolved,Not A Problem,Future,Unassigned,Claus Ibsen,0,1,2016-12-22 09:01:08+00:00,2019-07-31 14:50:18+00:00,"To easily manage all the routes in the master/slave scenario with the CuratorRoutePolicy. Today you need to configure this on every route you want managed.


But with a RoutePolicyFactory we can configure this once and it manages all the routes.",davsclaus:1564555818:2019-07-31T14:50:18.453+0000:1564555818:2019-07-31T14:50:18.453+0000:Use zookeeper-master for master/slave stuff
0,CAMEL-10638,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-12-22 07:19:04+00:00,2017-01-11 12:04:45+00:00,"As today the ServiceCall is implemented loading a ProcessorFactory using a ServiceLoader like system but this may cause issues as if you have multiple components providing an implementation of the ServiceCall SPI so i.e. if you have both consul and etcd components in the classpath, the following set-up will be initialized with the first ServiceCall SPI found in the classpath regardless of the consulConfiguration/etcdConfiguration:



from(""timer:consul?period=1s"")
    .serviceCall()
        .name(""consul"")
        .consulConfiguration()
        ...
    .end();
from(""timer:etcd?period=1s"")
    .serviceCall()
        .name(""etcd"")
        .etcdConfiguration()
        ...
    .end();




It may be better to have a different way to set-up the ServiceCall so that each element (server discovery, load balancer, server chooser) is provided instead of created by the ServiceCall ProcessorFactory.


A possible - high level - definition of the classes may look like:



interface ServiceCallLoadBalancer extends Processor {
}

interface ServiceCallServer {
    String getServiceId();
    String getHost();
    int getPort();
    Map<String, String> getMetadata();    
}

interface ServiceCallServerDiscovery {
    List<ServiceCallServer> getInitialListOfServers(String serviceId);
    List<ServiceCallServer> getUpdatedListOfServers(String serviceId); 
}

interface ServiceCallServerDiscoveryAware {
    void setServerDiscovery(ServiceCallServerDiscovery serverDiscovery);
}

interface ServiceCallServerChooser {
    ServiceCallServer choose(List<ServiceCallServer> serverList)
}

interface ServiceCallServerChooserAware {
    void setServerChooser(ServiceCallServerChooser serverDiscovery);
}

class ServiceCallConfiguration {
    public void setServiceId(String serviceid);
    public void setComponent(String component);
    public void setUri(String uri);
    public void setExpression(Expression expression);

    public void setLoadBalancer(String loadBalancerRef);
    public void setLoadBalancer(ServiceCallLoadBalancer<ServiceCallServer> loadBalancer);

    public void setServerDiscovery(String serverDiscoveryRef);
    public void setServerDiscovery(ServiceCallServerDiscovery<ServiceCallServer> serverDiscovery);

    public void setServerChooser(String serverChooserRef);
    public void setServerChooser(ServiceCallServerChooser<ServiceCallServer> serverChooser);
}

class ServiceCallDefinition extends ServiceCallConfiguration {
    public void setConfiguration(ServiceCallConfiguration configuration);
    public void setConfiguration(String configurationRef);
}

class DefaultServiceCallLoadBalancer implements CamelContextAware, ServiceCallServerDiscoveryAware, ServiceCallServerChooserAware, ServiceCallLoadBalancer {
    ...
}




The configuration part will be similar to the one we have today except the etcdConfiguration/consulConfiguration/etc will be removed in favor of a generic one, like:



ServiceCallServerDiscovery sd = new EtcdServiceCallServerDiscovery(conf);

from(""timer:consul?period=1s"")
    .serviceCall()
        .name(""consul"")
        .loadBalancer(""my-load-balancer"")
        .serverDiscovery(sd)
        .serverChooser(servers -> servers.get(0))
        .end();




There will be a default implementation of the load balancer so defining it may not be needed but environment like spring-cloud could provide a different implementation.


davsclaus what do you think ?","davsclaus:1482364241:2016-12-22T07:50:41.505+0000:1482364241:2016-12-22T07:50:41.505+0000:Yeah sure as long as configuring it in XML DSL is also easy as shown here in Java DSL.
lb:1482369444:2016-12-22T09:17:24.694+0000:1482369444:2016-12-22T09:17:24.694+0000:Yeah, it should be not far from how it is as today
lb:1483403109:2017-01-03T08:25:09.697+0000:1483403109:2017-01-03T08:25:09.697+0000:[~davsclaus]

I've committed a final refactor of the EIP on my fork, here the diff: https://github.com/apache/camel/compare/master...lburgazzoli:CAMEL-10638

The main difference against current setup is that the specific etcd/ribbon/dns configuration have disappeared and replaced by component configuration so i.e. a ribbon setup may looks like:

{code:xml}
<beans xmlns=""http://www.springframework.org/schema/beans""
       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
       xsi:schemaLocation=""
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://camel.apache.org/schema/spring
         http://camel.apache.org/schema/spring/camel-spring.xsd"">

  <!-- setup a static ribbon server list with these 2 servers to start with -->
  <bean id=""discovery"" class=""org.apache.camel.impl.cloud.StaticServiceDiscovery"">
    <property name=""servers"" value=""localhost:9090,localhost:9091""/>
  </bean>

  <bean id=""balancer"" class=""org.apache.camel.component.ribbon.cloud.RibbonLoadBalancer"">
    <constructor-arg index=""0"">
      <bean class=""org.apache.camel.component.ribbon.RibbonConfiguration""/>
    </constructor-arg>
  </bean>

  <camelContext xmlns=""http://camel.apache.org/schema/spring"">

    <!-- service call configuration to use ribbon -->
    <serviceCallConfiguration id=""ribbon"" loadBalancerRef=""balancer"" serviceDiscoveryRef=""discovery""/>

    <route>
      <from uri=""direct:start""/>
      <serviceCall name=""myService""/>
      <to uri=""mock:result""/>
    </route>

    <route>
      <from uri=""jetty:http://localhost:9090""/>
      <to uri=""mock:9090""/>
      <transform>
        <constant>9090</constant>
      </transform>
    </route>

    <route>
      <from uri=""jetty:http://localhost:9091""/>
      <to uri=""mock:9091""/>
      <transform>
        <constant>9091</constant>
      </transform>
    </route>
  </camelContext>

</beans>
{code}

I've also created a org.apache.camel.cloud package which contains basic building blocks for service discovery, load balancing and so on one can reuse, the service call then leverage such interfaces.

May I kindly ask you for a quick review ?
davsclaus:1483421871:2017-01-03T13:37:51.714+0000:1483421871:2017-01-03T13:37:51.714+0000:Can you only configure this now using <bean> style?

That is not desireable. Using <bean> is hard and complex and people have to remember class names and much more. Its okay you can do it as an alternative way.

But the point is that you configure all your Camel stuff inside <camelContext> like must of the stuff you can do with data formats, endpoints, hystrix etc.

This gives us type safe configuration, tooling support, documentation in the xsd, dsl etc.
lb:1483424722:2017-01-03T14:25:22.664+0000:1483424722:2017-01-03T14:25:22.664+0000:Yes for this first part of the refactor. 

I'm thinking how to do add a type safe support inside <camelContext> which allow both flexibility (i.e. you can use ribbon with consul) and simplicity since some time but I've not yet found a good balance.

What seems a good trade-off is adding specific elements as children of serviceCallConfiguration or serviceCall, like:

{code:xml}
<serviceCallConfiguration>

  <ribbonLoadBalancer>
   ..
  </ribbonLoadBalancer>

  <consulServiceDiscovery>
    ..
  </consulServiceDiscovery>  

</<serviceCallConfiguration>
{code}

Would that be reasonable ?


davsclaus:1483424924:2017-01-03T14:28:44.960+0000:1483424924:2017-01-03T14:28:44.960+0000:Yeah sure for the latter.
lb:1483953240:2017-01-09T17:14:00.211+0000:1483953256:2017-01-09T17:14:16.925+0000:[~davsclaus]

You can now configure the eip using type safe xml dsl, like: 

{code:xml}
   <serviceCallConfiguration id=""service-call"">
        <etcdServiceDiscovery servicePath=""/etcd-services-0/""/>
        <ribbonLoadBalancer/>
    </serviceCallConfiguration>

    <route>
        <from uri=""direct:sc1""/>
        <serviceCall name=""http-service"" configurationRef=""service-call""/>
    </route>
   
    <route>
        <from uri=""direct:sc2""/>
        <serviceCall name=""http-service"">
            <staticServiceDiscovery>
                <servers>service1@localhost:9101,service1@localhost:9102,</servers>
                <servers>service2@localhost:9201</servers>
            </staticServiceDiscovery>
            <ribbonLoadBalancer/>
        <serviceCall>
    </route>
{code}

So now you can safely mix different technologies.
As I've changed lot of things, a quick review would be really appreciated.


davsclaus:1484010562:2017-01-10T09:09:22.334+0000:1484010562:2017-01-10T09:09:22.334+0000:I wonder if the stuff we have in .remote should be moved to .cloud so its all there?
It looks a bit mixed today.

This is both in impl.remote and model.remote that should be moved to their impl.cloud and model.cloud.


lb:1484010719:2017-01-10T09:11:59.368+0000:1484010719:2017-01-10T09:11:59.368+0000:Will do
lb:1484022320:2017-01-10T12:25:20.346+0000:1484022320:2017-01-10T12:25:20.346+0000:done, anything else ?
davsclaus:1484022881:2017-01-10T12:34:41.713+0000:1484022881:2017-01-10T12:34:41.713+0000:No nothing major. It looks good its a lot of code changes but helps improve / mature this service call stuff.

Adding a package.html for the javadoc for the new cloud package would be good.

And then make sure the model has documented all its options. You can see the errors by running mvn install in the platforms/catalog folder."
0,CAMEL-10637,Task,Trivial,None,"2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",Andrea Cosentino,JC,0,4,2016-12-21 23:16:06+00:00,2016-12-22 12:19:41+00:00,"In current snapshot (e4c6ab4e3ac0ce80c2430fe333bbd0a88de65826), IllegalStateException is not thrown in components/camel-ignite/src/main/java/org/apache/camel/component/ignite/messaging/IgniteMessagingEndpoint.java.



 76     public Consumer createConsumer(Processor processor) throws Exception {
 77         // Validate options.
 78         if (topic == null) {
 79             new IllegalStateException(""Cannot initialize an Ignite Messaging Producer with a null topic."");
 80         }
 81","davsclaus:1482364434:2016-12-22T07:53:54.952+0000:1482364434:2016-12-22T07:53:54.952+0000:Yeah if it was null you would have got a NPE in the constructor.
Also the exception message is wrong it should have said consumer instead of producer.

Contributions is welcome with a little fix as patch or better as github PR
http://camel.apache.org/contributing
githubbot:1482378183:2016-12-22T11:43:03.136+0000:1482378183:2016-12-22T11:43:03.136+0000:GitHub user lifove opened a pull request:

    https://github.com/apache/camel/pull/1363

    CAMEL-10637: Throw IllegalStateException with a correct exception mes…

    Patch for https://issues.apache.org/jira/browse/CAMEL-10637

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lifove/camel CAMEL-10637

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1363.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1363
    
----
commit c9e1bf33aaff20b4698f926b0a11589167beab65
Author: JC <jc@lifove.net>
Date:   2016-12-22T11:32:57Z

    CAMEL-10637: Throw IllegalStateException with a correct exception message

----

githubbot:1482380076:2016-12-22T12:14:36.790+0000:1482380076:2016-12-22T12:14:36.790+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1363

acosentino:1482380381:2016-12-22T12:19:41.884+0000:1482380381:2016-12-22T12:19:41.884+0000:Thanks :-)"
0,CAMEL-10636,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-21 18:28:02+00:00,2016-12-21 19:54:34+00:00,Because we now have metadata for all the component options we can also output their default values and labels etc like we do for endpoints.,
0,CAMEL-10635,Bug,Minor,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Andrea Cosentino,Claus Ibsen,0,2,2016-12-21 13:49:24+00:00,2016-12-23 07:59:29+00:00,"The component is wrong at
https://github.com/apache/camel/blob/master/components/camel-mongodb-gridfs/src/main/java/org/apache/camel/component/gridfs/GridFsComponent.java#L42


Where it stores the first looked up client and store that for remainder. So if there are other endpoints referring to other clients then that wont work as the db is not null next time.


Instead the client should be looked up per endpoint and not stored as state on the component.","acosentino:1482369811:2016-12-22T09:23:31.293+0000:1482369820:2016-12-22T09:23:40.085+0000:We have exactly the same problem in camel-mongodb and camel-mongodb3

https://github.com/apache/camel/blob/master/components/camel-mongodb/src/main/java/org/apache/camel/component/mongodb/MongoDbComponent.java#L53"
0,CAMEL-10634,Bug,Minor,"2.18.0, 2.18.1",2.18.2,"
None
",Resolved,Fixed,2.18.2,Claus Ibsen,Aurelien Pupier,0,3,2016-12-21 13:46:29+00:00,2016-12-21 16:01:21+00:00,"the 2.18.1 camel catalog contains some invalid entries, these entries should not be part of the catalog:



camel-spark-rest
camel-ibatis
camel-jclouds
camel-ejb
camel-quartz



see https://github.com/jboss-fuse/camel/blob/camel-2.18.x-redhat/components-starter/README.adoc and https://github.com/apache/camel/blame/39a9f52232fcaa1d82b290622d24aa45523094d0/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/SpringBootStarterMojo.java#L85


davsclaus said it was surely fixed in 2.19 branch


edit:
when we compare https://github.com/apache/camel/tree/master/components-starter and https://github.com/apache/camel/tree/master/components-starter we can notice that the folders for the mentioned artifacts were removed","davsclaus:1482300975:2016-12-21T14:16:15.178+0000:1482300975:2016-12-21T14:16:15.178+0000:You are welcome to provide a PR
aurelien.pupier:1482301542:2016-12-21T14:25:42.335+0000:1482301974:2016-12-21T14:32:54.369+0000:it's in progress, I'm rebuilding everything to ensure that the catalog is well generated.

EDIT: PR created: https://github.com/apache/camel/pull/1361
githubbot:1482301955:2016-12-21T14:32:35.083+0000:1482301955:2016-12-21T14:32:35.083+0000:GitHub user apupier opened a pull request:

    https://github.com/apache/camel/pull/1361

    CAMEL-10634: Remove folders which create wrong catalog entries

    see https://issues.apache.org/jira/browse/CAMEL-10634 for details

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apupier/camel CAMEL-10634-camel-2.18.x-FixSpringBootCatalog

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1361.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1361
    
----
commit cc084664e7a136b0a7a5ee3aeaa07fef3926d1e1
Author: Aurelien Pupier <apupier@redhat.com>
Date:   2016-12-21T13:51:42Z

    CAMEL-10634: Remove folders which create wrong catalog entries

----

githubbot:1482307281:2016-12-21T16:01:21.192+0000:1482307281:2016-12-21T16:01:21.192+0000:Github user apupier closed the pull request at:

    https://github.com/apache/camel/pull/1361
"
0,CAMEL-10633,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,James Strachan,0,2,2016-12-21 11:48:43+00:00,2017-01-05 08:57:58+00:00,"if you marshal to json then send to a HTTP endpoint you'll be missing the fact that the payload is now in JSON format. It seems a reasonable default to add this - so that a HTTP endpoint can know it can parse the payload as JSON.


e.g.



from(""activemq:foo.bar"").
  to(""dataformat:json-jackson:marshal"").
    /// TODO camel should now expose that the content type is json
  to(""http://foo.bar/"")","davsclaus:1482364609:2016-12-22T07:56:49.671+0000:1482364609:2016-12-22T07:56:49.671+0000:I think we should add an option to configure whether to set content-type header or not. And turn this on by default.
Then it always set the correct content-type header.

for example you mave consume from XML -> pojo -> json and then because there is maybe an existing content-type=application/xml header then it would still be this header and therefore wrong when the content is now json.

And with this new option people can turn it off if they want the old behavior of no header at all.

We can look into doing this for more of the data formats, there are others for xml, yaml etc.
jstrachan:1482463610:2016-12-23T11:26:50.686+0000:1482463610:2016-12-23T11:26:50.686+0000:Agreed. Actually we should probably do a better job OOTB of setting content types more often (especially if we know the payload is a String, XML, YAML, JSON). e.g. lets have a MIME type for a POJO (or Java Serialisation or whatever)
davsclaus:1482473281:2016-12-23T14:08:01.959+0000:1482473281:2016-12-23T14:08:01.959+0000:There is a new contentTypeHeader which is default true for data formats which will tell the data format to include that content type header if possible.

Then we can add logic to the various data formats to include the type, we likely need to allow to do this in each implementation in case they need to set it specially.
davsclaus:1482475865:2016-12-23T14:51:05.593+0000:1482475865:2016-12-23T14:51:05.593+0000:We now do this for xml and json data formats when marshalling."
0,CAMEL-10632,Improvement,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Claus Ibsen,0,2,2016-12-21 10:38:50+00:00,2016-12-21 10:53:31+00:00,So you can use it from endpoint dataformat:jackson:marhsal instead of having to fiddle with dataformat:json:marshal?library=Jackson,jstrachan:1482288798:2016-12-21T10:53:18.179+0000:1482288798:2016-12-21T10:53:18.179+0000:ah you can use {code}dataformat:json-jackson:marshal{code}
0,CAMEL-10631,Task,Minor,None,Future,"
None
",Open,Unresolved,Future,Andrea Cosentino,Claus Ibsen,0,2,2016-12-21 08:17:57+00:00,2016-12-21 08:18:46+00:00,"We should document the aggregation repository we have which is both local and remote, and also recoverable
https://github.com/apache/camel/tree/master/components/camel-infinispan/src/test/java/org/apache/camel/component/infinispan/processor/aggregate


In the docs at
https://github.com/apache/camel/blob/master/components/camel-infinispan/src/main/docs/infinispan-component.adoc",
0,CAMEL-10629,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-20 20:32:56+00:00,2016-12-21 15:58:59+00:00,"We have fine grained details on each endpoint options. But the component options dont have @UriParam etc and are therefore often not labeled or have secure = true|false.


We should add those using @Metadata annotation on the component level so we have that for the component docs and for tooling","davsclaus:1482287675:2016-12-21T10:34:35.406+0000:1482303550:2016-12-21T14:59:10.618+0000:Done for 
- camel-core
- a..s components"
0,CAMEL-10628,Bug,Major,"2.18.0, 2.18.1",2.18.2,"
None
",Resolved,Fixed,2.18.2,Andrea Cosentino,Joe Luo,0,3,2016-12-20 19:52:46+00:00,2016-12-29 07:01:11+00:00,"I have a camel route using Rest DSL with Jetty component:



<camelContext id=""camel"" trace=""true"" streamCache=""true"" xmlns=""http://camel.apache.org/schema/blueprint"">
      <restConfiguration component=""jetty"" bindingMode=""off"" scheme=""https"" host=""localhost"" port=""9080"" contextPath=""/"">
        <endpointProperty key=""sslContextParametersRef"" value=""sslContextParameter""/>
        <endpointProperty key=""handlers"" value=""#securityHandler""/>
        <endpointProperty key=""matchOnUriPrefix"" value=""true""/>
      </restConfiguration>
      <rest path=""/customerservice"">
          <get uri=""/customers"" >
              <to uri=""direct:processGet""/>
          </get>
          <get uri=""/customers/{id}"" >
              <to uri=""direct:processGet""/>
          </get>
          <post uri=""/customers"" consumes=""application/json"" produces=""application/json"">
              <to uri=""direct:processPost""/>
          </post>
      </rest>




The underlying camel jetty component is configured with sslContextParametersRef and a Jetty Handler org.eclipse.jetty.security.ConstraintSecurityHandler to enforce SecurityConstraints on the Jetty endpoint. 


If I remove the Jetty ConstraintSecurityHandler, it works fine, for instance:



<camelContext id=""camel"" trace=""true"" streamCache=""true"" xmlns=""http://camel.apache.org/schema/blueprint"">
      <restConfiguration component=""jetty"" bindingMode=""off"" scheme=""https"" host=""localhost"" port=""9080"" contextPath=""/"">
        <endpointProperty key=""sslContextParametersRef"" value=""sslContextParameter""/>
        <!--endpointProperty key=""handlers"" value=""#securityHandler""/-->
        <endpointProperty key=""matchOnUriPrefix"" value=""true""/>
      </restConfiguration>




But when I add the Jetty ConstraintSecurityHandler back to the camel Rest DSL, I am getting following error:



***
%% Initialized:  [Session-1, SSL_NULL_WITH_NULL_NULL]
qtp1424237190-118, fatal error: 40: no cipher suites in common
javax.net.ssl.SSLHandshakeException: no cipher suites in common
%% Invalidated:  [Session-1, SSL_NULL_WITH_NULL_NULL]
qtp1424237190-118, SEND TLSv1 ALERT:  fatal, description = handshake_failure
qtp1424237190-118, WRITE: TLSv1 Alert, length = 2
qtp1424237190-118, fatal: engine already closed.  Rethrowing javax.net.ssl.SSLHandshakeException: no cipher suites in common




The root cause is that if we want to add a Jetty hander, we need to stop Jetty server. As part of Jetty server stop process, it's SslConnectionFactory also needs to stop, as well as SslContextFactory. Here is doStop() method of SslContextFactory in Jetty 9.2.x code base:



public class SslContextFactory extends AbstractLifeCycle
...
    protected void doStop() throws Exception
     {
         _context = null;
         super.doStop();
     }




We can see that it resets SSLContext to null. When the jetty server restarts, SslContextFactory creates a new SSLContext object instead, therefore, losing all the SSL properties from the original <camel:sslContextParameters> configuration. 


We need to preserve the SSLContext before stopping the jetty server so we can reset the SSLContext back after the jetty server is restarted.","acosentino:1482279106:2016-12-21T08:11:46.967+0000:1482279106:2016-12-21T08:11:46.967+0000:Can you reproduce the same issue with 2.18.1?
joeluo:1482279970:2016-12-21T08:26:10.557+0000:1482279993:2016-12-21T08:26:33.589+0000:I have not tried it on 2.18.1 yet. But as long as we use Jetty 9.2.x code base, it will have the same behaviour. However, with Jetty 9.3.x, the doStop() method of Jetty SslContextFactory had been changed, again:
{code}
     protected void doStop() throws Exception
     {
         _factory = null;
         super.doStop();
         _certAliases.clear();
         _certWilds.clear();
     }
{code}

So the same fix might not work well with Jetty 9.3.x code base though.
acosentino:1482280317:2016-12-21T08:31:57.815+0000:1482280334:2016-12-21T08:32:14.668+0000:Maybe we can apply the patch on 2.17.x and 2.18.x but not on master (there we are on 9.3.x at the moment).

[~davsclaus] what do you think?
davsclaus:1482283970:2016-12-21T09:32:50.212+0000:1482283970:2016-12-21T09:32:50.212+0000:Yeah sure for 2.17.x and 2.18.x
acosentino:1482290882:2016-12-21T11:28:02.358+0000:1482290882:2016-12-21T11:28:02.358+0000:This can't go in 2.17.x because there we are still based on Jetty8 and 

org.eclipse.jetty.server.SslConnectionFactory

doesn't exist in Jetty 8
acosentino:1482292609:2016-12-21T11:56:49.510+0000:1482292609:2016-12-21T11:56:49.510+0000:Not sure but, how did you test the patch on 2.17.x? It can't compile with this fix.
joeluo:1482909930:2016-12-28T15:25:30.318+0000:1482910012:2016-12-28T15:26:52.518+0000:I changed <jetty-version> to ""$\{jetty9-version}"" in the camel/parent/pom.xml file:
{code}
diff --git a/parent/pom.xml b/parent/pom.xml
index 14bf7bc..0a262d2 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -311,7 +311,7 @@
     <jetty6-version>6.1.26</jetty6-version>
     <jetty8-version>8.1.17.v20150415</jetty8-version>
     <jetty9-version>9.2.19.v20160908</jetty9-version>
-    <jetty-version>${jetty8-version}</jetty-version>
+    <jetty-version>${jetty9-version}</jetty-version>
     <!-- jetty-plugin 8.1.7 does not exists -->
     <jetty-plugin-version>8.1.16.v20140903</jetty-plugin-version>
{code}
It allowed me to compile the component and test. 

Yeah, the solution will break backward compatibility with Jetty 8 as camel 2.17 and 2.18 support both Jetty 8 and Jetty 9. Giving the fact that Jetty 8 has been EOL two years back, should we only support Jetty 9 from now on?
acosentino:1482966071:2016-12-29T07:01:11.235+0000:1482966071:2016-12-29T07:01:11.235+0000:We support Jetty9 only from 2.18.x.

In 2.17.x we will stay with Jetty8 as default, so this patch can be applied only on 2.18.x"
0,CAMEL-10627,New Feature,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2016-12-20 18:31:37+00:00,2019-07-25 13:54:58+00:00,"Tweeted about live reload for XML
https://twitter.com/davsclaus/status/811226802874175488


And wonder if we can do it for Java DSL (limited possibilities).


But we still need to build that tool that parses your Java code and build the route model in memory (we do fetch endpoints and expressions today). And with that in mind, we could build the model, and output as XML for live java update.


There are some corner cases and if you use Java lamdas etc its not possible.


Then again people can use JRebel or other tooling for hot reload of Java .class files.",davsclaus:1564034098:2019-07-25T13:54:58.729+0000:1564034098:2019-07-25T13:54:58.729+0000:You can use camel-quarkus
0,CAMEL-10626,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,John Poth,0,3,2016-12-20 15:07:39+00:00,2016-12-22 14:23:17+00:00,See the asynchronous Proxy-based API and WebClient API.,"jpoth:1482217678:2016-12-20T15:07:58.547+0000:1482217678:2016-12-20T15:07:58.547+0000:I will provide a PR
githubbot:1482217791:2016-12-20T15:09:51.910+0000:1482217791:2016-12-20T15:09:51.910+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1360

    Add async support for camel-cxf JAX-RS producer

    https://issues.apache.org/jira/browse/CAMEL-10626

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10626

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1360.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1360
    
----
commit 4c894c8da518fd6efd6a86c089a30d12df4999c6
Author: jpoth <poth.john@gmail.com>
Date:   2016-11-22T18:07:26Z

    Add async support for camel-cxf JAX-RS producer

----

jpoth:1482218742:2016-12-20T15:25:42.800+0000:1482228157:2016-12-20T18:02:37.545+0000:This PR adds support for both the asynchronous [Proxy-based API|http://cxf.apache.org/docs/jax-rs-client-api.html#JAX-RSClientAPI-Asynchronousproxyinvocations] and [WebClient API|http://cxf.apache.org/docs/jax-rs-client-api.html#JAX-RSClientAPI-Asynchronousproxyinvocations]. All options supported in synchronous routes are supported. An additional method has been added to the [CxfRsBinding|https://github.com/apache/camel/pull/1360/commits/4c894c8da518fd6efd6a86c089a30d12df4999c6#diff-ace254e58e3086687364efa0376dc5daR109] interface for flexibility. 

Important note: [Endpoints|https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/impl/DefaultEndpoint.java#L81] are asynchronous by default. The _synchronous_ Uri parameter will now have to be explicitly set to true if synchronous producers are desired.
githubbot:1482310879:2016-12-21T17:01:19.907+0000:1482310879:2016-12-21T17:01:19.907+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1360

davsclaus:1482310892:2016-12-21T17:01:32.772+0000:1482310892:2016-12-21T17:01:32.772+0000:Thanks John.

Do you mind adding about this to the 2.19 release notes
http://camel.apache.org/camel-219-release.html
jpoth:1482313543:2016-12-21T17:45:43.773+0000:1482313543:2016-12-21T17:45:43.773+0000:Thanks Claus for looking into this!

I've submitted my ICLA via snail mail :) (email). I'll update the website as soon as I have the rights.

Cheers,

John.
jpoth:1482385811:2016-12-22T13:50:11.565+0000:1482385811:2016-12-22T13:50:11.565+0000:Done :)

I should also probably edit the component [docs|http://camel.apache.org/cxfrs.html] (and .adoc file) to make it clearer that the synchronous parameter is supported for Producer endpoints as well. Will do once 2.19 is out?

Thanks again,

John.
davsclaus:1482387797:2016-12-22T14:23:17.714+0000:1482387797:2016-12-22T14:23:17.714+0000:For .adoc you just updated it now and provide a PR with the changes.

For wiki you can do the same, just add *Camel 2.19* in the docs to indicate its from that release.
"
0,CAMEL-10625,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-12-20 10:36:59+00:00,2016-12-20 12:26:08+00:00,"From 1.5.7 there is a way to set maximum thread-pool size and to allow setting coreSize < maximumSize by creating a thread pool which can sustain maximumSize concurrency and will return threads to the system during periods of relative inactivity.


https://github.com/Netflix/Hystrix/wiki/Configuration#allowmaximumsizetodivergefromcoresize


These options can be useful for users to setup Hystrix in a complete way.",
0,CAMEL-10624,New Feature,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Oliver Wulff,1,3,2016-12-20 10:02:41+00:00,2019-08-06 09:22:47+00:00,"Add a new processor to set custom MDC properties in a route:
<setMDC name=""foo""><header name=""bar""></setMDC>


The above command will create an MDC property with key ""camel.foo""


Enhance the current MDCUnitOfWork to support all MDC values starting with ""camel.*""",davsclaus:1565054567:2019-08-06T09:22:47.184+0000:1565054567:2019-08-06T09:22:47.184+0000:This is not really an EIP. You can use a bean/processor for that.
0,CAMEL-10623,Task,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Thomas Diesler,0,2,2016-12-20 09:57:29+00:00,2016-12-20 12:37:04+00:00,"cxf-3.1.9 distributed with camel-2.19.x is not compatible with cxf-3.1.6 from wildfly-10.1.0.Final



Caused by: java.lang.NoSuchMethodError: org.apache.cxf.message.Message.remove(Ljava/lang/Class;)Ljava/lang/Object;
	at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:1239)
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:470)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:416)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:133)




CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1546","githubbot:1482199156:2016-12-20T09:59:16.759+0000:1482199156:2016-12-20T09:59:16.759+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1357

    [CAMEL-10623] Camel CXF version not compatible with WildFly CXF

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10623

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1357.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1357
    
----
commit a5d14422edf6f5c972c759545ff144488b08ae72
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-12-20T09:58:31Z

    [CAMEL-10623] Camel CXF version not compatible with WildFly CXF

----

githubbot:1482199525:2016-12-20T10:05:25.155+0000:1482199525:2016-12-20T10:05:25.155+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1358

    [CAMEL-10623] Camel CXF version not compatible with WildFly CXF

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10623m

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1358.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1358
    
----
commit 895a91b5c4a8f20ebaca37848ddd9c703f42c920
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-12-20T09:58:31Z

    [CAMEL-10623] Camel CXF version not compatible with WildFly CXF

----

githubbot:1482208624:2016-12-20T12:37:04.798+0000:1482208624:2016-12-20T12:37:04.798+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1358

githubbot:1482208624:2016-12-20T12:37:04.812+0000:1482208624:2016-12-20T12:37:04.812+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1357
"
0,CAMEL-10622,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-12-20 08:54:29+00:00,2017-01-16 17:55:59+00:00,As components-starter is platform specific (spring-boot) it should be moved to platforms/spring-boot/components-starter,
0,CAMEL-10621,Bug,Major,2.18.1,2.21.0,"
None
",Resolved,Fixed,2.21.0,Claus Ibsen,Remco Schoen,0,2,2016-12-20 07:58:41+00:00,2018-01-23 15:32:59+00:00,"I'm trying to create an API with Rest DSL and Swagger Java components. For hosting the API I want to use Jetty and use Basic Authentication to secure it.


With Jetty 8 the code below works, but with Camel 2.18.1 my code fails in Jetty 9 with this error:
No LoginService for org.eclipse.jetty.security.authentication.BasicAuthenticator


It seems that when the security handler is re-added for the api-docs, the loginService is gone and can not be found anymore in the beans store of the server. I see in Jetty configuration examples that the loginService is also added as a bean to the Jetty server. If it has been added, it can be found when re-adding the security handler.","r.schoen@topdesk.com:1482192329:2016-12-20T08:05:29.567+0000:1482192329:2016-12-20T08:05:29.567+0000:Used dependencies:
    compile group: 'org.apache.camel', name: 'camel-core', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-spring', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-jetty', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-swagger-java', version: '2.18.1'
    compile group: 'org.apache.camel', name: 'camel-jackson', version: '2.18.1'

davsclaus:1516691795:2018-01-23T15:16:35.189+0000:1516691795:2018-01-23T15:16:35.189+0000:Thanks I was able to reproduce this with latest code, and are working on a fix
davsclaus:1516692779:2018-01-23T15:32:59.971+0000:1516692779:2018-01-23T15:32:59.971+0000:Thanks for the sample code."
0,CAMEL-10620,Task,Trivial,None,None,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Chris Schultz,0,2,2016-12-19 20:21:58+00:00,2017-01-18 11:15:33+00:00,"The documentation for Camel AMQP uses the connection factory:
org.apache.qpid.jms.JmsConnectionFactory


I think the connection factory should actually be different for AMQP v1.0?:
org.apache.qpid.amqp_1_0.jms.impl.ConnectionFactoryImpl","davsclaus:1482207319:2016-12-20T12:15:19.723+0000:1482207319:2016-12-20T12:15:19.723+0000:Here is how to edit the website
http://camel.apache.org/how-do-i-edit-the-website.html
davsclaus:1482207345:2016-12-20T12:15:45.513+0000:1482207345:2016-12-20T12:15:45.513+0000:And a PR to update the docs in the source code is welcome
https://github.com/apache/camel/blob/master/components/camel-amqp/src/main/docs/amqp-component.adoc
davsclaus:1484709333:2017-01-18T11:15:33.900+0000:1484709333:2017-01-18T11:15:33.900+0000:Fixed the adoc"
0,CAMEL-10619,Improvement,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-12-19 18:39:58+00:00,2016-12-19 18:50:19+00:00,"So its easier to configure shutdown timeout, and the other values you can set",
0,CAMEL-10618,Improvement,Major,None,2.19.0,"
None
",Resolved,Done,2.19.0,Nicola Ferraro,Claus Ibsen,0,2,2016-12-19 18:24:16+00:00,2023-10-24 14:07:12+00:00,"I wonder if we can add some logic that can auto detect if we run in spring boot and if you have configured a spring boot data source using the spring boot style



spring.datasource.url: jdbc:mysql://localhost:3306/o365investigations

spring.datasource.username: <snip>

spring.datasource.password: <snip>

spring.datasource.driver-class-name: com.mysql.jdbc.Driver




And then fallback and use that data source if none has been explicit configured on the component.


And wonder if we can do this in a way that don't require special coding?


We could maybe add to camel-sql, that it attempts to lookup in registry of all types of DataSource and if there is only one instance, it uses that.","davsclaus:1482143123:2016-12-19T18:25:23.585+0000:1482143123:2016-12-19T18:25:23.585+0000:See nabble
http://camel.465427.n5.nabble.com/sql-component-using-spring-boot-datasource-tp5791719.html
nferraro:1486975597:2017-02-13T16:46:37.144+0000:1486975597:2017-02-13T16:46:37.144+0000:Using a fallback strategy if the registry contains only 1 datasource (implemented at component level).

I could have put 'spring-boot-starter-jdbc' into the transitive dependencies of our starter, but doing so, spring-boot forces you to bind a datasource to the registry. I left it optional (test dependency in the starter)."
0,CAMEL-10617,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-19 18:13:45+00:00,2016-12-19 18:17:42+00:00,"If you want to start asyncStartListener=true then the endpoint should not eager start the connection which would fail if the connection to a remote broker is not possible.


This defeats the purpose of asyncStartListener=true which is intended to defer starting this till on-demand.",
0,CAMEL-10616,Bug,Minor,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Minh Tran,0,2,2016-12-18 23:20:29+00:00,2017-01-05 10:21:23+00:00,"In my main application, I can override the timeout by declaring my own ShutdownStrategy bean and setting the timeout property. However this seems to be ignored during unit tests and always uses 10s timeouts.


The bean is certainly being picked up because I see the following logging



org.apache.camel.spring.boot.CamelAutoConfiguration - Using custom ShutdownStrategy: org.apache.camel.impl.DefaultShutdownStrategy@5b8b9b2d




This is preventing me from doing any debugging during unit tests as it will always end the jvm before I can inspect anything.","davsclaus:1482143618:2016-12-19T18:33:38.589+0000:1482143618:2016-12-19T18:33:38.589+0000:How are you doing your unit test, can you attach some sample project or point to a github repo with a sample?
mtran:1482158934:2016-12-19T22:48:54.223+0000:1482158934:2016-12-19T22:48:54.223+0000:You need a unit test that runs the route in its own thread so that your unit test will end and camel will shutdown the context. The following exhibits the problem. You can set a breakpoint in org.apache.camel.processor.exceptionpolicy.DefaultExceptionPolicyStrategy.findMatchedExceptionPolicy() (this was what I was debugging) and wait for longer than 10sec.

{noformat}
@RunWith(CamelSpringBootRunner.class)
@SpringBootTest
public class MyTest {
	@Configuration
	@EnableAutoConfiguration
	public static class Config extends SpringRouteBuilder {

		@Override
		public void configure() throws Exception {
			from(""activemq:queue:a"").onException(RuntimeException.class).handled(true).end()
                             .throwException(RuntimeException.class, ""something bad happened"");
		}

		@Bean
		public ShutdownStrategy shutdownStrategy() {
			DefaultShutdownStrategy strat = new DefaultShutdownStrategy();
			// this is ignored
			strat.setTimeout(60000);
			return strat;
		}

	}

	@Produce(uri = ""activemq:queue:a"")
	private ProducerTemplate producer;

	@Test
	public void testHello() throws InterruptedException {
		producer.sendBody(""hello"");
	}
}
{noformat}

If we can just override the shutdown timeout in unit tests, this wouldn't be an issue. Looks like it might be fixed in 2.18.2 according to linked issue CAMEL-10619?


davsclaus:1482230616:2016-12-20T18:43:36.278+0000:1482230616:2016-12-20T18:43:36.278+0000:Yeah CAMEL-10619 allows to configure this easier. But nevertheless a custom ShutdownStrategy @Bean should take precedence over default settings.
davsclaus:1483577293:2017-01-05T08:48:13.271+0000:1483577293:2017-01-05T08:48:13.271+0000:Added unit test but cannot reproduce the issue. The custom shutdown are in use.

It could be that your unit tests are using mocks which has a default 10 sec timeout.
mtran:1483582726:2017-01-05T10:18:46.094+0000:1483582726:2017-01-05T10:18:46.094+0000:If you run the unit test, you'll see the following appear in the logs

INFO  org.apache.camel.impl.DefaultShutdownStrategy - Starting to graceful shutdown 1 routes (timeout 10 seconds)

Wouldn't you expect that message to say timeout in 60 seconds?
mtran:1483582883:2017-01-05T10:21:23.891+0000:1483582883:2017-01-05T10:21:23.891+0000:And there are no assertions of mocks being done in that unit test so I don't believe the mock timeout is related here."
0,CAMEL-10615,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-17 15:23:41+00:00,2016-12-19 10:00:54+00:00,"So people can bridge the error handler etc.


See nabble
http://camel.465427.n5.nabble.com/Catching-Exception-tp5791552.html


Mind this is only possible for the exceptions that the JMS client propagates to Camel.","davsclaus:1482037706:2016-12-18T13:08:26.002+0000:1482037706:2016-12-18T13:08:26.002+0000:The batch consumer has been improved. Lets see if we can improve the regular consumer.
davsclaus:1482112854:2016-12-19T10:00:54.336+0000:1482112854:2016-12-19T10:00:54.336+0000:You can use asyncStartListener for the consumer to start async and keep trying until its connected."
0,CAMEL-10614,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-12-17 11:56:52+00:00,2016-12-17 13:32:11+00:00,No Desc,"acosentino:1481952731:2016-12-17T13:32:11.196+0000:1481952731:2016-12-17T13:32:11.196+0000:It now works in Karaf. I decided to switch to okhttp connector, because okhttp client is much more OSGi-friendly, while Jersey is not a very good friend of OSGi world."
0,CAMEL-10613,Task,Minor,None,2.21.0,"
None
",Resolved,Fixed,2.21.0,Andrea Cosentino,Claus Ibsen,0,2,2016-12-17 11:46:54+00:00,2017-12-07 08:05:38+00:00,"There is an unit test error when upgrading.


Also take a look at camel-restlet karaf feature as it seems it uses a different jackson version than the regular java does.",
0,CAMEL-10612,New Feature,Major,None,None,"
None
",Resolved,Done,2.19.0,Nicola Ferraro,Nicola Ferraro,2,4,2016-12-17 10:41:13+00:00,2017-04-07 09:25:34+00:00,"We have a component for rx-java v1. rx-java v2 now is out and compatible with the reactive-stream specs, like many other reactive frameworks (including vert.x). We may want to implement a new component to integrate with any framework that comply with the reactive-streams specs (Akka-Streams and Slick among the others).","davsclaus:1482365507:2016-12-22T08:11:47.915+0000:1482365507:2016-12-22T08:11:47.915+0000:Sounds good Nicola, wonder if you have time to work on this so we can potentially have this in the next 2.19 release?
nferraro:1482367682:2016-12-22T08:48:02.725+0000:1482368072:2016-12-22T08:54:32.098+0000:Yeah, I can work on it. I'm evaluating some options: 

1. We can upgrade rx-java to v.2 and expose the new rx-java api plus the reactive streams api through the camel-rx component. In this case the implementation of Publisher and Subscriber will be backed by rx Observable and Observer.

2. We can create a module that is independent from rx and uses a simple implementation of the specs. I thought it was difficult to follow this path but a Camel Producer is more or less a reactive streams Publisher, while a Camel Consumer is equivalent to a Subscriber. I created a basic Publisher from a Camel Producer, adding a pool of worker threads for pushing data downstream, and it was easy to pass the reactive streams TCK for active publishers. So this can be done easily.

What I don't like about the current camel-rx module is that it is non-standard. It adds support for rx but it does not contain a component.

The suggested way of using it is like:
{code}
ReactiveCamel rx = new ReactiveCamel(camelContext);
Observable<Message> observable = rx.toObservable(""activemq:MyMessages"");
{code}

The way a component should work (my opinion) is:
{code}
// builder
from(""activemq:MyMessages"")
.transform().xxx().yyy()
.to(""reactive-streams:incoming"");

// Rx-java, Akka streams, ... 
Publisher pub = CamelStreams.get(context).getPublisher(""incoming"");
// subscribe and do anything with the publisher
{code}

I know you probably can use this latter pattern with the current camel-rx impl by creating an Observable from a ""direct:xxx"" endpoint, but it's a bit odd.

Maybe I'm missing some pieces. Thoughts?

davsclaus:1482368778:2016-12-22T09:06:18.558+0000:1482368778:2016-12-22T09:06:18.558+0000:Yeah it would be great with a Camel component as well for this, then it's integrated well with any Camel routes.

And yeah your Client API seems good with the CamelStreams. I think we need both kinds, Camel component and the client API so people can work with the reactive API in Java code.
lb:1482372433:2016-12-22T10:07:13.280+0000:1482372433:2016-12-22T10:07:13.280+0000:
Can we do both 1 and 2 and a mix ?

I mean:
- if you only have camel-reactive-stream in the classpath --> use the custom implementation
- if you have camel-reactive-stream and camel-rx n the classpath --> use the rx implementation   (maybe discover it via a service loader like impl, registry etc)

However you should be able to choose the implementation i.e:

- ReactiveCamelStreams.get(context) --> would try to find an implementation and fallback to our internal impl
- RxCamelStreams.get(context) --> would return an rx  implementation (available only if camel-rx is available)
- VertxCamelStreams.get(context) --> would return a vertx implementation (available only if camel-vertex is available)

Make sense ?






nferraro:1482374568:2016-12-22T10:42:48.191+0000:1482374568:2016-12-22T10:42:48.191+0000:It makes a lot of sense :)

I'll need to investigate how they can be mixed together, but it seems the right direction.
lb:1482375241:2016-12-22T10:54:01.205+0000:1482375241:2016-12-22T10:54:01.205+0000:An interesting side effect of this is that in spring-boot you may have the underlying implementation auto configured so that you can change i.e. the thread pool size or any other aspect of the implementation without changing the camel-code
githubbot:1484880614:2017-01-20T10:50:14.613+0000:1484880614:2017-01-20T10:50:14.613+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1412

    CAMEL-10612: camel-reactive-streams

    
    I publish a preview of the reactive-stream component, asking for a review.
    
    The purpose of the component is to allow Camel to exchange messages with any 
    asynchronous stream processing system compatible with the reactive-streams specs 
    (rx-java, akka-streams, vertx, ..., the list will grow).
    
    I've included in the component the reactive-streams TCK to ensure compliance with the specs.
    All streams produced by Camel are open streams (otherwise called hot streams).
    
    ## basic usage
    From Camel to an external stream engine:
    ```
    from(""timer:tick"")
    .setBody().header(Exchange.TIMER_COUNTER)
    .to(""reactive-streams:integers"");
    
    Publisher<Integer> integers = CamelReactiveStreams.get(context).getPublisher(""integers"", Integer.class)
    // use it eg. in rxjava2
    Observable.fromPublisher(integers)
    	.map(...)
    	.flatMap(...)
    	.subscribe();
    ```
    
    From an external engine to Camel:
    ```
    from(""reactive-streams:numbers"")
    .to(""log:INFO"");
    
    Subscriber<Integer> numbers = CamelReactiveStreams.get(context).getSubscriber(""numbers"", Integer.class);
    // use it eg. in rxjava2
    Flowable.range(0, 40)
    	.subscribe(numbers); // a stream with numbers from 0 to 39
    ```
    
    Converting a Consumer into a Subscriber and a Producer into a Publisher has been straightforward.
    The difficult part has been managing backpressure correctly. I left the door open for different implementations of the engine, but it may be not so easy to implement them because of the way backpressure should interact with Camel mechanisms.
    
    Backpressure is a fundamental part of the specs and establishes mechanisms by which a Publisher
    can deal with slow Subscribers. Whithin a suscription, subscribers give constant feedbacks to the publishers indicating the number of items they are willing to receive (almost like TCP flow control window).
    
    Camel (afaik) has not direct support for this kind of flow control, but has similar concepts, like throttling and route policy.
    So here's how implemented backpressure.
    
    ## backpressure in producer
    (from Camel route to an external subscriber)
    
    Backpressure is handled by an internal buffer that caches exchanges before delivering them to the subscribers.
    It is important to avoid a buffer overflow. Eg. a route like `from(""jms:xx"").to(""reactive-streams:pub"")` can cause easily a out-of-memory error if the queue contains a lot of messages (eg. after a shutdown).
    
    To avoid this kind of problems, both throttling and ThrottlingInflightRoutePolicy can be used.
    Throttling (`from("".."").throttle()..`) just delays messages, so it cannot deal with idle/too-slow subscribers.
    A `ThrottlingInflightRoutePolicy` is the preferred way to deal with slow subscribers. Exchanges are considered completed only when they are received by all subscribers, so users can set a maximum number of inflight exchanges in the policy then route suspension/resume will be controlled by backpressure: a slow subscriber will cause periodic route suspensions.
    
    A snippet from the Junit test:
    ```
    ThrottlingInflightRoutePolicy policy = new ThrottlingInflightRoutePolicy();
    policy.setMaxInflightExchanges(10);
    policy.setScope(ThrottlingInflightRoutePolicy.ThrottlingScope.Route);
    
    from(""timer:tick?period=50"")
    .routePolicy(policy)
    .to(""reactive-streams:pub"");
    ```
    
    When a subscriber of the `pub` stream becomes idle, about 10 messages are accumulated in the internal buffer,
    then the route is suspended. When the subscriber starts processing the messages again, the route is resumed.
    It works also with multiple subscribers (in practice, the slowest one controls the suspension/resume).
    
    The `ThrottlingInflightRoutePolicy` should (must) be used eg. when consuming from JMS.
    In some circumstances (eg. http consumer), suspending the route is not the best approach, so it's better handling backpressure by just buffering (the default approach).
    
    ## backpressure in consumer
    (from an external publisher to a Camel route)
    When consuming items from a reactive-streams publisher, the maximum number of inflight exchanges can be set as endpoint option.
    The subscriber associated with the consumer interact with the publisher to keep the number of messages in the route lower than the threshold.
    
    The number of concurrent consumers can also be set as endpoint option. By setting 1 consumer (the default) exchanges are processed by a single thread, so
    the order of items in the stream is maintained. This value can be increased and the items will be processed concurrently (so not preserving the order).
    
    A snippet from the tests:
    ```
    from(""reactive-streams:numbers?concurrentConsumers=5&maxInflightExchanges=10"")
    .to(""mock:endpoint"");
    ```
    
    ## TODOS
    - write proper documentation
    - move some global options to the producer endpoint (need to find a way to do it properly) 
    - add the possibility to handle ""onError"" and ""onComplete"" events in the Camel route
    - improve context shutdown by closing correctly all streams
    - test with other frameworks (currently using rxjava2, reactive-streams TCK and custom pub/sub)
    - check osgi compliance
    - add the ReactiveStreamService  to the spring-boot application context in the starter
    - maybe add direct usage of Camel endpoints directly
    - improve it after feedbacks
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10612

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1412.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1412
    
----
commit 1142a4139f6f5930cfa63339ac61fa1f80c5a757
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-12-21T17:59:01Z

    CAMEL-10612: Reactive streams producer

commit afc4eee98fcca1a6705fd58901262be453e5736d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-12-27T17:29:22Z

    CAMEL-10612: First complete implementation

commit fd88fe0b97c232161d3d3df7203bcc26d27eb517
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-03T11:46:39Z

    CAMEL-10612: Implemented subscriber verification and rx implementation

commit 91cd0fc981b9616980a9a5befec41b17b487d447
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-03T16:09:05Z

    CAMEL-10612: Support switching to a different implementation

commit f99e7b40f4dbe9e49b0d4208db01594f32d21a26
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-03T17:16:02Z

    CAMEL-10612: Added internal engine configuration

commit 46cf793200ffcde69c9d0dc041020266e8063d9f
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-04T18:59:58Z

    CAMEL-10612: Make sure backpressure can be combined with throttling route policy

commit 807a5bd7b44142ed8f58e19b615efc18ae4fa7cd
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-12T17:36:21Z

    CAMEL-10612: more consistent structure

commit 861340af92916c58852aa75cdb1281fcd4545779
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-13T11:53:55Z

    CAMEL-10612: fixes and test updates

commit 6c45fc46032625cd80dd3852c1257d0d88f8d97a
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-13T12:20:52Z

    CAMEL-10612: enhanced publisher backpressure with mixed slow and fast subscribers

commit 7a6b987500374b268af7cec22ebfdd1b5b2a18e9
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-15T09:32:04Z

    CAMEL-10612: fixed issue with route restart

commit 5f6c24e5d4dfca4be2f0e143de12b4482e9c21d6
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-15T09:40:27Z

    CAMEL-10612: fixed stream completion

commit bd7d4d7f84e408cdd96af785f20933dc1d89ab18
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-19T17:51:56Z

    CAMEL-10650: added backpressure strategy

commit 8124a17be32dcdf90174fdd4d258edc95e40b04f
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-20T00:03:17Z

    CAMEL-10650: added javadoc

commit 9f6ae4fed93c5d11addba88402e340a18caaa3f7
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-20T09:57:38Z

    CAMEL-10650: rebase with master

commit 4f9e9a8208f3a2295b29e442ed9f52185d943a14
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2017-01-20T10:21:22Z

    CAMEL-10650: source check

----

githubbot:1485498916:2017-01-27T14:35:16.242+0000:1485498916:2017-01-27T14:35:16.242+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1412

nferraro:1485499776:2017-01-27T14:49:36.741+0000:1485499776:2017-01-27T14:49:36.741+0000:What still needs to be done:
- allow automatic discovery of publishers and subscribers
- make the buffer strategy a.. strategy
- write proper documentation
- move some global options to the producer endpoint (need to find a way to do it properly)
- add the possibility to handle ""onError"" and ""onComplete"" events in the Camel route
- improve context shutdown by closing correctly all streams
- test with other frameworks (currently using rxjava2, reactive-streams TCK and custom pub/sub)
- check osgi compliance
- add the ReactiveStreamService to the spring-boot application context in the starter
- add bidirectional in-out communication from camel to the external lib (using processors or similar)
lb:1485500733:2017-01-27T15:05:33.327+0000:1485500733:2017-01-27T15:05:33.327+0000:[~nferraro] really good work ;)
davsclaus:1485680508:2017-01-29T17:01:48.552+0000:1485680508:2017-01-29T17:01:48.552+0000:Can we please use junit for unit testing. camel-testng is deprecated and we should use junit so working on components is more the same.
nferraro:1485687105:2017-01-29T18:51:45.057+0000:1485687105:2017-01-29T18:51:45.057+0000:[~davsclaus] the usage of testng is due to the implementation of the reactive-streams TCK (https://github.com/reactive-streams/reactive-streams-jvm/issues/216). 

Currently both kind of tests should be run by surefire. Camel component tests are using Junit as usual. 
Is that a problem?
nferraro:1485737102:2017-01-30T08:45:02.017+0000:1485737102:2017-01-30T08:45:02.017+0000:I was looking at the last point of adding a reactive way to exchange data (input-output) bewteen camel and an external lib and I'd like to implement something like this:
http://docs.spring.io/spring/docs/5.0.0.M4/spring-framework-reference/html/web-reactive.html#web-reactive-server-annotation

For Camel, it's a standard bean call that could be embedded in a route like:
{code}
from(""timer:aaa"")
.bean(myBean)
{code}

But the argument and return types should be converted automatically to/from observables. Parameters can be converted to observables using standard type converters, but the return types should be unboxed in some way.

I think we don't apply conversions to return types automatically, so I think we can add eg. ""return type converter hooks"". 
Something like this: https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/component/bean/MethodInfo.java#L319-L333

But pluggable in the components. Wdyt?
davsclaus:1485745325:2017-01-30T11:02:05.520+0000:1485745325:2017-01-30T11:02:05.520+0000:Nicola

Ah okay yeah its fine if its the TCK tests
davsclaus:1485745800:2017-01-30T11:10:00.602+0000:1485745800:2017-01-30T11:10:00.602+0000:Nicola, I dont think it may have to be component specific about type conversion.
That link to the java bean component is because the bean component is ""special"". 

I would suggest to see if you can do something in the reactive streams component, and do conversions there, because its this component that knows about the types used by observables. Also you may look at fallback type converter where you can do selective type conversion, maybe you need that if types are Mono / Flux or what those reactive types are. 
nferraro:1486348628:2017-02-06T10:37:08.638+0000:1486348628:2017-02-06T10:37:08.638+0000:Hi, I think we are almost done with this. I've also added examples and documentation, and also a client API that can use Camel endpoints directly. I've added in-only and in-out communication (both ways). For the auto-conversion during bean call (question above), I left it to be manually specified by the user for now (there's an example).

The API has changed since the beginning of this issue, but I think now it's more consistent.

Users can define complex streams in Camel and pass them to the reactive framework, or just use URIs:
{code}
// send the content of all files in ""inbox"" to a http URL
Flux.from(camel.from(""file:inbox"", String.class)) // Reactor Core 3
  .flatMap(file -> camel.to(""http://theurl/hello""))
  // continue
  .subscribe();
{code}

The ""from"" and ""to"" methods create camel routes that use the reactive-streams component under the hood. They have a ""fromStream"" (was ""getPublisher"") and ""toStream"" counterpart that allow defining more complex routes in the Camel DSL side (they also allow to have fine grained control over eg. backpressure).

I've also defined some rest services using the client API only (see examples).

[~davsclaus] and [~lb], if you have time, can you give me the last feedback?
lb:1486540861:2017-02-08T16:01:01.462+0000:1486540861:2017-02-08T16:01:01.462+0000:Looks good to me
davsclaus:1491526212:2017-04-07T08:50:12.551+0000:1491526212:2017-04-07T08:50:12.551+0000:Can we resolve this ticket and if there is more work in the future open new tickets for 2.20 release?
nferraro:1491528334:2017-04-07T09:25:34.604+0000:1491528334:2017-04-07T09:25:34.604+0000:Resolved. Other work on related components (reactor, reactive-java2) has already been scheduled."
0,CAMEL-10611,Improvement,Major,None,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Grzegorz Grzybek,Grzegorz Grzybek,0,2,2016-12-16 14:54:43+00:00,2017-06-28 12:13:24+00:00,"Just like with CXF-7183, we need analogous relation at NamespaceHandler level - just like a relation between XSDs.


camel-cxf and camel-cxf-transport related NamespaceHandlers load XSD schemas that import CXF schemas - the namespace handlers themselves have to do it as well.","davsclaus:1481888077:2016-12-16T19:34:37.177+0000:1481888077:2016-12-16T19:34:37.177+0000:Is this change backwards compatible?

We need to be sure Camel 2.18.x at least runs just as before on existing Karaf versions with older blueprint-core that comes pre-installed.

ggrzybek:1482112803:2016-12-19T10:00:03.105+0000:1482112803:2016-12-19T10:00:03.105+0000:I'll of course check it, but the change should be transparent when running on earlier blueprint-core versions. The added code is used when blueprint-core's NamespaceHandlerRegistryImpl asks handler to provide URI for namespace - this doesn't happen before blueprint-core 1.6.x.
ggrzybek:1487895617:2017-02-24T08:20:17.258+0000:1487895617:2017-02-24T08:20:17.258+0000:Fixed in 2.19.x: https://github.com/apache/camel/commit/e8976d1384dea61ebaeaf93911ef34d81e69a938
Fixed in 2.18.x: https://github.com/apache/camel/commit/4d936e3a22855af88d55a244427a3fd37d892171"
0,CAMEL-10610,Improvement,Minor,2.18.1,,"
None
",Resolved,Invalid,None,Unassigned,Aurelien Pupier,0,2,2016-12-16 10:41:48+00:00,2016-12-16 10:55:40+00:00,"[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:82: warning: method inOnly in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information.
[WARNING]   def inOnly = wrap(target.inOnly)
[WARNING]                            ^
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:84: warning: method inOut in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information.
[WARNING]   def inOut = wrap(target.inOut)
[WARNING]                           ^
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:131: warning: method routingSlip in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information.
[WARNING]   def routingSlip(header: String) = wrap(target.routingSlip(header))
[WARNING]                                                 ^
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAbstractDefinition.scala:133: warning: method routingSlip in class ProcessorDefinition is deprecated: see corresponding Javadoc for more information.
[WARNING]   def routingSlip(header: String, separator: String) = wrap(target.routingSlip(header, separator))
[WARNING]                                                                    ^
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\dsl\SAggregateDefinition.scala:56: warning: method groupExchanges in class AggregateDefinition is deprecated: see corresponding Javadoc for more information.
[WARNING]   def groupExchanges = wrap(target.groupExchanges)
[WARNING]                                    ^
[WARNING] C:\git\camel\components\camel-scala\src\main\scala\org\apache\camel\scala\RichMessage.scala:42: warning: method createExchangeId in trait Message is deprecated: see corresponding Javadoc for more information.
[WARNING]   def createExchangeId = message.createExchangeId
[WARNING]                                  ^
[WARNING] warning: there were 18 feature warnings; re-run with -feature for details
[WARNING] 7 warnings found","davsclaus:1481856817:2016-12-16T10:53:37.289+0000:1481856817:2016-12-16T10:53:37.289+0000:They are there because its a 1:1 with camel-core and the methods are deprecated there
aurelien.pupier:1481856940:2016-12-16T10:55:40.295+0000:1481856940:2016-12-16T10:55:40.295+0000:ok, understood, thanks for the explanation."
0,CAMEL-10609,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-16 09:53:13+00:00,2016-12-16 09:56:09+00:00,To make it easier to skip N items when splitting or something.,
0,CAMEL-10608,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,John Poth,John Poth,0,3,2016-12-15 17:47:39+00:00,2016-12-19 09:13:03+00:00,Provide an option/way to list all endpoints in all camel-contexts.,"davsclaus:1481801024:2016-12-15T19:23:44.405+0000:1481801024:2016-12-15T19:23:44.405+0000:Contributions is welcome
http://camel.apache.org/contributing

Yeah maybe if the parameter is empty or * it matches using that wildcard, eg it would be nice to match, eg foo* to match all camel context that starts with the name foo. I think we have some support for that in some of the other commands. So peak around in the source and see.
githubbot:1481873199:2016-12-16T15:26:39.589+0000:1481873199:2016-12-16T15:26:39.589+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1355

    CAMEL-10608 Karaf endpoint-list command to support wildcard expressions

    https://issues.apache.org/jira/browse/CAMEL-10608

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10608

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1355.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1355
    
----

----

githubbot:1482109983:2016-12-19T09:13:03.853+0000:1482109983:2016-12-19T09:13:03.853+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1355
"
0,CAMEL-10607,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,2,2016-12-15 15:54:08+00:00,2017-02-08 08:34:36+00:00,"See SO
http://stackoverflow.com/questions/41164377/calling-no-params-webservice-operation-from-camel-route-using-cxf


We could detect that it expect 0 parameters and then don't do any parameter mappings so the service can be easily called.","githubbot:1486473127:2017-02-07T21:12:07.394+0000:1486473127:2017-02-07T21:12:07.394+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1451

    CAMEL-10607

    I think getParams should return empty array when body is null.
    This solves https://issues.apache.org/jira/browse/CAMEL-10607

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10607

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1451.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1451
    
----

----

davsclaus:1486514073:2017-02-08T08:34:33.987+0000:1486514073:2017-02-08T08:34:33.987+0000:Thanks for the PR
githubbot:1486514076:2017-02-08T08:34:36.907+0000:1486514076:2017-02-08T08:34:36.907+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1451
"
0,CAMEL-10606,Improvement,Major,None,"2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",James Netherton,James Netherton,0,2,2016-12-15 15:42:38+00:00,2016-12-15 16:56:54+00:00,"Currently the quartz2 endpoint implements isSingleton() and returns false.


This causes issues if you try to do something like:



camelContext.getEndpoint(""quartz2://foo?cron=5+*+*+*+*"")




Which can trigger the endpoint start() method to be called and results in:



Caused by: java.lang.IllegalArgumentException: Trigger key myGroup.longPeriodTimer is already in use by quartz2://foo/longPeriodTimer?cron=5+*+*+*+*
	at org.apache.camel.component.quartz2.QuartzEndpoint.ensureNoDupTriggerKey(QuartzEndpoint.java:446)
	at org.apache.camel.component.quartz2.QuartzEndpoint.addJobInScheduler(QuartzEndpoint.java:380)
	at org.apache.camel.component.quartz2.QuartzEndpoint.doStart(QuartzEndpoint.java:340)




The quartz1 endpoint implements isSingleton to return true. I see no reason why quartz2 should be any different.","githubbot:1481790037:2016-12-15T16:20:37.467+0000:1481790037:2016-12-15T16:20:37.467+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1350

    CAMEL-10606: Change quartz2 endpoint to be a singleton

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10606

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1350.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1350
    
----
commit 6cea29e0b46e5e4d0b329ee62465cea431cacfca
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-12-15T16:15:50Z

    CAMEL-10606: Change quartz2 endpoint to be a singleton

----

githubbot:1481792214:2016-12-15T16:56:54.281+0000:1481792214:2016-12-15T16:56:54.281+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1350
"
0,CAMEL-10605,Task,Minor,None,2.18.2,"
None
",Resolved,Fixed,2.18.2,Claus Ibsen,Claus Ibsen,0,1,2016-12-15 12:23:06+00:00,2016-12-15 15:27:37+00:00,"We should add the camel-tarfile as wiki doc for the data formats, as we currently only have it as .adoc. 
https://github.com/apache/camel/blob/master/components/camel-tarfile/src/main/docs/tarfile-dataformat.adoc",davsclaus:1481786857:2016-12-15T15:27:37.646+0000:1481786857:2016-12-15T15:27:37.646+0000:http://camel.apache.org/tar-dataformat.html
0,CAMEL-10604,Improvement,Minor,None,"2.16.5, 2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.16.5, 2.17.5, 2.18.2, 2.19.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-12-15 10:53:11+00:00,2016-12-15 11:09:39+00:00,By default the option will be false,
0,CAMEL-10603,Bug,Major,2.18.1,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Thomas Günter,0,2,2016-12-15 10:47:37+00:00,2016-12-15 16:13:06+00:00,"Using a ahc URI including the realm parameter leads into an unknown parameter exception:


""ahc:http://www.yahoo.com?clientConfig.realm.principal=testPrincipal&clientConfig.realm.password=testPassword&clientConfig.realm.scheme=BASIC""


Causes Exception:
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: ahc://http://www.google.com?clientConfig.realm.principal=testPrincipal due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{realm.principal=testPrincipal}

]


Suggestion for org.apache.camel.component.ahc.AhcComponent:


Line #44:
private static final String CLIENT_REALM_CONFIG_PREFIX = ""clientConfig.realm."";


Line #94ff:
Map<String, Object> realmParams = IntrospectionSupport.extractProperties(parameters, CLIENT_REALM_CONFIG_PREFIX);
                realmBuilder = new Realm.Builder(realmParams.get(""principal"").toString(), realmParams.get(""password"").toString());
                realmParams.remove(""principal"");
                realmParams.remove(""password"");
                setProperties(realmBuilder, realmParams);
                validateParameters(uri, realmParams, null);",davsclaus:1481789584:2016-12-15T16:13:04.473+0000:1481789584:2016-12-15T16:13:04.473+0000:Thanks for the patch
0,CAMEL-10602,Bug,Major,"2.18.0, 2.18.1, 2.19.0","2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Grzegorz Grzybek,Aurelien Pupier,0,3,2016-12-15 09:53:12+00:00,2016-12-16 14:33:14+00:00,"Using a simple Content-based Router example leads to this issue.
With 2.17.3, it is working fine.


we can notice that the route is up and running before the timeout occurs (I dropped a file to the endpoint and it was well executed)



[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Fuse CBR Quickstart 1.0.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-blueprint-cbr ---
[INFO] Deleting C:\install\eclipse-neon\eclipse\ws_fusetooling_dev with space\cbr218\target
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ camel-blueprint-cbr ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-blueprint-cbr ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ camel-blueprint-cbr ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ camel-blueprint-cbr ---
[INFO] Not compiling test sources
[INFO] 
[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ camel-blueprint-cbr ---
[INFO] Tests are skipped.
[INFO] 
[INFO] --- maven-bundle-plugin:3.2.0:bundle (default-bundle) @ camel-blueprint-cbr ---
[INFO] 
[INFO] >>> camel-maven-plugin:2.18.1:run (default-cli) > test-compile @ camel-blueprint-cbr >>>
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ camel-blueprint-cbr ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-blueprint-cbr ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ camel-blueprint-cbr ---
[INFO] Not copying test resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ camel-blueprint-cbr ---
[INFO] Not compiling test sources
[INFO] 
[INFO] <<< camel-maven-plugin:2.18.1:run (default-cli) < test-compile @ camel-blueprint-cbr <<<
[INFO] 
[INFO] --- camel-maven-plugin:2.18.1:run (default-cli) @ camel-blueprint-cbr ---
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
[                      Thread-2] RawBuilder                     INFO  Copy thread finished.
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle cbr218/1.0.0.SNAPSHOT is waiting for namespace handlers [http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is starting
[         Blueprint Extender: 1] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 1] DefaultManagementAgent         INFO  ManagementAgent detected JVM system properties: {org.apache.camel.jmx.createRmiConnector=true}
[KTOP-9NT300B:1099/jmxrmi/camel] DefaultManagementAgent         INFO  JMX Connector thread started and listening at: service:jmx:rmi:///jndi/rmi://DESKTOP-9NT300B:1099/jmxrmi/camel
[         Blueprint Extender: 1] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 1] XPathBuilder                   INFO  Created default XPathFactory com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl@3f24f264
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Route: cbr-route started and consuming from: file://work/cbr/input
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[         Blueprint Extender: 1] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) started in 0.535 seconds
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Receiving order ID-DESKTOP-9NT300B-51935-1481791551205-0-1
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Sending order ID-DESKTOP-9NT300B-51935-1481791551205-0-1 to another country
[ead #2 - file://work/cbr/input] cbr-route                      INFO  Done processing ID-DESKTOP-9NT300B-51935-1481791551205-0-1
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle cbr218/1.0.0.SNAPSHOT
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is shutting down
[mel.test.blueprint.Main.main()] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 300 seconds)
[text) thread #3 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: cbr-route shutdown complete, was consuming from: file://work/cbr/input
[mel.test.blueprint.Main.main()] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) uptime 28.869 seconds
[mel.test.blueprint.Main.main()] BlueprintCamelContext          INFO  Apache Camel 2.18.1 (CamelContext: cbr-example-context) is shutdown in 0.019 seconds
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.18.1
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[mel.test.blueprint.Main.main()] CamelBlueprintHelper           INFO  Deleting work directory target/bundles/1481791550078
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
[ERROR] *************************************
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-5,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 2 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
	at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:505)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 49.194 s
[INFO] Finished at: 2016-12-15T09:46:35+01:00
[INFO] Final Memory: 44M/547M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.1:run (default-cli) on project camel-blueprint-cbr: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.




my first guess is that Camel 2.18.1 is starting faster and that some events occurs in the same milliseconds (considering the the jvm precision): https://github.com/apache/camel/blame/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L344","davsclaus:1481768643:2016-12-15T10:24:03.671+0000:1481768643:2016-12-15T10:24:03.671+0000:This can be re-produced using

mvn archetype:generate
choose camel-archetype-blueprint
select 2.18.1 version
create the project
modify the pom.xml and remove <scope>test</scope> for all the loggers
mvn compile camel:run

{code}
davsclaus:/Users/davsclaus/Documents/workspace/blue/$ mvn clean compile camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ blue ---
[INFO] Deleting /Users/davsclaus/Documents/workspace/blue/target
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to /Users/davsclaus/Documents/workspace/blue/target/classes
[INFO]
[INFO] >>> camel-maven-plugin:2.18.1:run (default-cli) > test-compile @ blue >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ blue ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 3 source files to /Users/davsclaus/Documents/workspace/blue/target/test-classes
[INFO] /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java uses unchecked or unsafe operations.
[INFO] /Users/davsclaus/Documents/workspace/blue/src/test/java/com/foo/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: Recompile with -Xlint:unchecked for details.
[INFO]
[INFO] <<< camel-maven-plugin:2.18.1:run (default-cli) < test-compile @ blue <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.1:run (default-cli) @ blue ---
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory /Users/davsclaus/Documents/workspace/blue/src/main/resources/OSGI-INF/blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
Dec 15, 2016 11:21:22 AM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
[mel.test.blueprint.Main.main()] BlueprintExtender              INFO  Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.18.1
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopping
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator stopped
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
[ERROR] *************************************
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40.306 s
[INFO] Finished at: 2016-12-15T11:21:55+01:00
[INFO] Final Memory: 31M/341M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.1:run (default-cli) on project blue: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
{code}
davsclaus:1481768835:2016-12-15T10:27:15.152+0000:1481768835:2016-12-15T10:27:15.152+0000:Its also a problem with 2.18.0
davsclaus:1481777991:2016-12-15T12:59:51.803+0000:1481777991:2016-12-15T12:59:51.803+0000:The example: camel-example-transformer-blueprint
Will fail on shutdown instead, eg if you rub

   mvn compile camel:run

Then it startup and when it stops it fails
{code}
2016-12-15 13:58:11,554 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.cm/1.0.6
2016-12-15 13:58:11,557 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.camel.camel-example-transformer-blueprint/2.19.0.SNAPSHOT
2016-12-15 13:58:11,558 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Stopping Camel Context TransformerBlueprint
2016-12-15 13:58:11,558 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) is shutting down
2016-12-15 13:58:11,559 [t Dispatcher: 1] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 2 routes (timeout 300 seconds)
2016-12-15 13:58:11,563 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: timer-route shutdown complete, was consuming from: timer://foo?period=5s
2016-12-15 13:58:11,564 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: xslt-route shutdown complete, was consuming from: direct://a
2016-12-15 13:58:11,564 [t Dispatcher: 1] INFO  DefaultShutdownStrategy        - Graceful shutdown of 2 routes completed in 0 seconds
2016-12-15 13:58:11,598 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) uptime 28.194 seconds
2016-12-15 13:58:11,599 [t Dispatcher: 1] INFO  BlueprintCamelContext          - Apache Camel 2.19.0-SNAPSHOT (CamelContext: TransformerBlueprint) is shutdown in 0.040 seconds
2016-12-15 13:58:11,599 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.camel.camel-blueprint/2.19.0.SNAPSHOT
2016-12-15 13:58:11,600 [int.Main.main()] INFO  BlueprintExtender              - Destroying BlueprintContainer for bundle org.apache.aries.blueprint.core/1.4.4
2016-12-15 13:58:11,604 [int.Main.main()] INFO  Activator                      - Camel activator stopping
2016-12-15 13:58:11,605 [int.Main.main()] INFO  Activator                      - Camel activator stopped
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
[ERROR] *************************************
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 2992msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 1 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
	at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
	at org.apache.camel.maven.RunMojo.execute(RunMojo.java:505)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:355)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:155)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:216)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:160)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 54.780 s
[INFO] Finished at: 2016-12-15T13:58:26+01:00
[INFO] Final Memory: 56M/814M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.19.0-SNAPSHOT:run (default-cli) on project camel-example-transformer-blueprint: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
{code}


ggrzybek:1481806728:2016-12-15T20:58:48.455+0000:1481806765:2016-12-15T20:59:25.260+0000:See my comments in CAMEL-10476.

I'm guessing (I wasn't here when it was designed) that {{camel:run}} *should* work after {{mvn clean compile}} - when you have nice {{target/classes}} filled with compiled java sources and processed resources - just like it was (probably) designed.

And it may work with spring or CDI, because they're quite independent on what's contained in MANIFEST.MF.

Blueprint is different (OSGi is different - but it's another topic) because MANIFEST.MF is crucial - that's how felix-connect (formerly known as PojoSR) finds _bundles_ - a _bundle_ is just classpath element that contains MANIFEST.MF.

In camel-archetype-blueprint we use:
{noformat}
      <!-- to generate the MANIFEST.MF of the bundle -->
      <plugin>
        <groupId>org.apache.felix</groupId>
        <artifactId>maven-bundle-plugin</artifactId>
        <version>3.2.0</version>
        <extensions>false</extensions>
        <executions>
          <execution>
            <id>bundle-manifest</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>manifest</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
{noformat}

to generate manifest in ... {{prepare-package}} phase.

So minimal command that succeeds is {{mvn clean prepare-package camel:run}}.

There are two uses of {{CamelBlueprintHelper.createBundleContext()}}:
* a JUnit @Test that extends {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport}}
* a {{mvn camel:run}} invocation ({{org.apache.camel.maven.RunMojo}}) configured with {{<useBlueprint>}} (or when blueprint descriptor is autodetected)

These two cases call {{CamelBlueprintHelper.createBundleContext()}} with {{includeTestBundle}} flag:
* {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport#includeTestBundle()}} by default (no Camel test overrides it) returns {{true}}
* {{RunMojo}} calls (blueprint case) {{org.apache.camel.test.blueprint.Main.main()}} with some arguments - but no argument changes {{org.apache.camel.test.blueprint.Main#includeSelfAsBundle}} field which is always {{false}}

So for JUnit test we have {{includeTestBundle==true}} which means Tinybundles will be used to pack our test classes and add it to mini-registry (felix-connect)
For {{camel:run}} we have {{includeTestBundle==false}} which means we have to find a _bundle_ with blueprint descriptor describing our context differently - {{mvn prepare-package}} is enough.

There are of course quirks - if you do {{mvn clean package}} and then {{mvn test}} (without {{clean}}) we may end up with *two* _bundles_ having the same blueprint descriptor. That's another (more annoying actually) incarnation of {{mvn clean compile camel:run}} problem where we have *no* _bundles_ with blueprint descriptors.

My view is - current state is ok, as unit tests (that's what camel-test-blueprint was for) run before packaging - we're testing *any* blueprint descriptor - possibly one from {{src/main/resources}} (main route) and maybe some mocks from {{src/test/resources}}.
But with {{camel:run}} we're actually running the main route/context of the artifact, so we need at least it's MANIFEST.MF.

What do you think?
aurelien.pupier:1481846466:2016-12-16T08:01:06.876+0000:1481846466:2016-12-16T08:01:06.876+0000:1) this is a regression, so whatever was the issue, this can't be ok anyway (but if there are workarounds they are welcome)
2) I tried to simplify here, but I reproduce the issue even when calling ""clean package org.apache.camel:camel-maven-plugin:run"" which is what we were already doing by default
3) this is another issue that should be addressed that a prepare-package need to be called before the camel:run (but with less priority)
4) seems that you spotted other issues with combination of mvn clean package and mvn clean --> should be addressed also but it also a far lower priority
davsclaus:1481847330:2016-12-16T08:15:30.877+0000:1481847330:2016-12-16T08:15:30.877+0000:Ah yeah they changed how the project is built for 2.18 onwards due the older 2.x maven-bundle-plugin was not supporting Java 8. And to upgrade to maven-bundle-plugin 3.x several things changed how it does that, including how that manifest stuff is generated etc. We could maybe tie camel:run to prepare-package phase or something so its run prior or something.
davsclaus:1481849895:2016-12-16T08:58:15.778+0000:1481849895:2016-12-16T08:58:15.778+0000:Okay got it working if I change the phase to prepare-package, but then it runs the unit tests first

{code}
* @execute phase=""prepare-package""
{code}


ggrzybek:1481849943:2016-12-16T08:59:03.241+0000:1481849943:2016-12-16T08:59:03.241+0000:I'll check how maven-bundle-plugin affected the build.
+1 to camel:run (at least in useBlueprint=true) tied to prepare-package (just like maven-bundle-plugin:manifest goal)
ggrzybek:1481850025:2016-12-16T09:00:25.962+0000:1481850025:2016-12-16T09:00:25.962+0000:bq. but then it runs the unit tests first
IMO that's good and as-designed. camel:run may be used any time - with or without tests. so ordinary {{-DskipTests}} could be used.
davsclaus:1481850065:2016-12-16T09:01:05.331+0000:1481850065:2016-12-16T09:01:05.331+0000:The unit tests can be skipped with
{code}
mvn camel:run -Dmaven.test.skip=true
{code}

Which is something tooling etc can control, but I would like to see if we can do this by default in mvn camel:run
ggrzybek:1481850081:2016-12-16T09:01:21.822+0000:1481850081:2016-12-16T09:01:21.822+0000:I'm checking now what's the reason of:
{noformat}
[INFO] Starting Camel ...
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR] 
java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:472)
	at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.NoClassDefFoundError: org/osgi/framework/InvalidSyntaxException
	at org.apache.camel.test.blueprint.Main.createBundleContext(Main.java:151)
	at org.apache.camel.test.blueprint.Main.createBundleContext(Main.java:147)
	at org.apache.camel.test.blueprint.Main.doStart(Main.java:107)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
	at org.apache.camel.test.blueprint.Main.main(Main.java:82)
	... 6 more
Caused by: java.lang.ClassNotFoundException: org.osgi.framework.InvalidSyntaxException
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 13 more
{noformat}

when doing (yesterday it worked) {{mvn clean compile camel:run}}.
davsclaus:1481851303:2016-12-16T09:21:43.289+0000:1481851303:2016-12-16T09:21:43.289+0000:Thanks for the diving into this. 

I have pushed fixes to master and 2.18.x branches.
aurelien.pupier:1481853322:2016-12-16T09:55:22.923+0000:1481853322:2016-12-16T09:55:22.923+0000:I don't understand why changing the phase tie for camel:run is fixing the issue as when calling ""clean package org.apache.camel:camel-maven-plugin:run"" I reproduce the issue.

Seems a good thing to fix it anyway. It is fixing the point ""4) seems that you spotted other issues with combination of mvn clean package and mvn clean --> should be addressed also but it also a far lower priority"" that I mentioned before.

Unfortunately, I don't understand why it is fixing the initial issue.

aurelien.pupier:1481856606:2016-12-16T10:50:06.360+0000:1481856606:2016-12-16T10:50:06.360+0000:I confirm that the initial issue is still present. I tried with the 2.18.2-SNAPSHOT which contains Claus' commit.
davsclaus:1481859903:2016-12-16T11:45:03.497+0000:1481859903:2016-12-16T11:45:03.497+0000:2.18.2-SNAPSHOT works for me
{code}
davsclaus:/Users/davsclaus/Documents/workspace/blue/$ mvn camel:run -Dmaven.test.skip=true
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ blue >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ blue ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ blue ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ blue ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ blue ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ blue ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ blue ---
[INFO]
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ blue <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ blue ---
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory /Users/davsclaus/Documents/workspace/blue/src/main/resources/OSGI-INF/blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
Dec 16, 2016 12:44:33 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator starting
[mel.test.blueprint.Main.main()] Activator                      INFO  Camel activator started
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle com.foo.blue/1.0.0.SNAPSHOT is waiting for namespace handlers [http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0, http://camel.apache.org/schema/blueprint]
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[         Blueprint Extender: 3] ManagedManagementStrategy      INFO  JMX is enabled
[         Blueprint Extender: 3] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.450 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2016-12-16 12:44:37
^C[                      Thread-1] MainSupport$HangupInterceptor  INFO  Received hang up - stopping the main instance.
davsclaus:/Users/davsclaus/Documents/workspace/blue/$
{code}
aurelien.pupier:1481860530:2016-12-16T11:55:30.314+0000:1481860530:2016-12-16T11:55:30.314+0000:failing for me skipping test or not

{noformat}
C:\Users\Aurelien Pupier\test>mvn camel:run -Dmaven.test.skip=true
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ test ---
[INFO] Nothing to compile - all classes are up to date
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ test ---
[INFO] Not copying test resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ test ---
[INFO] Not compiling test sources
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ test ---
[INFO] Tests are skipped.
[INFO]
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ test ---
[INFO]
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ test ---
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory C:\Users\Aurelien Pupier\test\src\main\resources\OSGI-INF\blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Dec 16, 2016 12:54:19 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
                                                                                                                                                                                                                                                                                                                                                                                                                                       [ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:479)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
        at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
        at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
        at org.apache.camel.test.blueprint.Main.main(Main.java:82)
        ... 6 more
[ERROR] *************************************
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-3,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 3 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
        at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
        at org.apache.camel.maven.RunMojo.execute(RunMojo.java:512)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 48.642 s
[INFO] Finished at: 2016-12-16T12:55:04+01:00
[INFO] Final Memory: 37M/516M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{noformat}

{noformat}
C:\Users\Aurelien Pupier\test>mvn camel:run
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building A Camel Blueprint Route 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] >>> camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) > prepare-package @ test >>>
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ test ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 2 source files to C:\Users\Aurelien Pupier\test\target\classes
[INFO]
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ test ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:testCompile (default-testCompile) @ test ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 3 source files to C:\Users\Aurelien Pupier\test\target\test-classes
[INFO] /C:/Users/Aurelien Pupier/test/src/test/java/test/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: C:\Users\Aurelien Pupier\test\src\test\java\test\BlueprintBeanPropertiesOverrideFromTestRouteTest.java uses unchecked or unsafe operations.
[INFO] /C:/Users/Aurelien Pupier/test/src/test/java/test/BlueprintBeanPropertiesOverrideFromTestRouteTest.java: Recompile with -Xlint:unchecked for details.
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ test ---
[INFO] Surefire report directory: C:\Users\Aurelien Pupier\test\target\surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running test.BlueprintBeanPropertiesOverrideFromFileRouteTest
[                          main] CamelBlueprintHelper           INFO  Using Blueprint XML file: /C:/Users/Aurelien%20Pupier/test/target/classes/OSGI-INF/blueprint/blueprint-bean.xml
Dec 16, 2016 12:52:02 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
Dec 16, 2016 12:52:02 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[                          main] Activator                      INFO  Camel activator starting
[                          main] Activator                      INFO  Camel activator started
[                          main] Activator                      INFO  Camel activator starting
[                          main] Activator                      INFO  Camel activator started
[                          main] CamelBlueprintHelper           INFO  Updating ConfigAdmin Configuration PID=HelloBean, factoryPID=null, bundleLocation=null by overriding properties {greeting=Hello from file}
[         Blueprint Extender: 1] BlueprintContainerImpl         INFO  Bundle BlueprintBeanPropertiesOverrideFromFileRouteTest/1.0.0 is waiting for namespace handlers [http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0, http://camel.apache.org/schema/blueprint]
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromFileRouteTest INFO  Testing: testRoute(test.BlueprintBeanPropertiesOverrideFromFileRouteTest)
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromFileRouteTest INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[                          main] ManagedManagementStrategy      INFO  JMX is enabled
[                          main] DefaultRuntimeEndpointRegistry INFO  Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.239 seconds
[                          main] MockEndpoint                   INFO  Asserting: mock://result is satisfied
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello from file at 2016-12-16 12:52:05
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromFileRouteTest INFO  Testing done: testRoute(test.BlueprintBeanPropertiesOverrideFromFileRouteTest)
[                          main] rtiesOverrideFromFileRouteTest INFO  Took: 1.252 seconds (1252 millis)
[                          main] rtiesOverrideFromFileRouteTest INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                          main] DefaultShutdownStrategy        INFO  Starting to graceful shutdown 1 routes (timeout 10 seconds)
[text) thread #1 - ShutdownTask] DefaultShutdownStrategy        INFO  Route: timerToLog shutdown complete, was consuming from: timer://foo?period=5000
[                          main] DefaultShutdownStrategy        INFO  Graceful shutdown of 1 routes completed in 0 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.272 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.017 seconds
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.309 sec
Running test.BlueprintBeanPropertiesOverrideFromTestRouteTest
Dec 16, 2016 12:52:05 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
Dec 16, 2016 12:52:05 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[                          main] rtiesOverrideFromTestRouteTest INFO  Updating ConfigAdmin Configuration PID=HelloBean, factoryPID=null, bundleLocation=null by overriding properties {greeting=Hello from test}
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime
[                     Thread-10] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.001 seconds
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromTestRouteTest INFO  Testing: testRoute(test.BlueprintBeanPropertiesOverrideFromTestRouteTest)
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromTestRouteTest INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.021 seconds
[ntext) thread #2 - timer://foo] timerToLog                     INFO  The message contains Hello from test at 2016-12-16 12:52:06
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] rtiesOverrideFromTestRouteTest INFO  Testing done: testRoute(test.BlueprintBeanPropertiesOverrideFromTestRouteTest)
[                          main] rtiesOverrideFromTestRouteTest INFO  Took: 1.022 seconds (1022 millis)
[                          main] rtiesOverrideFromTestRouteTest INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.024 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.002 seconds
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.189 sec
Running test.BlueprintBeanRouteTest
Dec 16, 2016 12:52:07 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
Dec 16, 2016 12:52:07 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintBeanRouteTest         INFO  Testing: testRoute(test.BlueprintBeanRouteTest)
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintBeanRouteTest         INFO  Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is starting
[                          main] BlueprintCamelContext          INFO  StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[                          main] BlueprintCamelContext          INFO  Route: timerToLog started and consuming from: timer://foo?period=5000
[                          main] BlueprintCamelContext          INFO  Total 1 routes, of which 1 are started.
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.032 seconds
[ntext) thread #4 - timer://foo] timerToLog                     INFO  The message contains Hi from Camel at 2016-12-16 12:52:08
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintBeanRouteTest         INFO  Testing done: testRoute(test.BlueprintBeanRouteTest)
[                          main] BlueprintBeanRouteTest         INFO  Took: 1.033 seconds (1033 millis)
[                          main] BlueprintBeanRouteTest         INFO  ********************************************************************************
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutting down
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) uptime 1.036 seconds
[                          main] BlueprintCamelContext          INFO  Apache Camel 2.18.2-SNAPSHOT (CamelContext: blueprint-bean-context) is shutdown in 0.003 seconds
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.165 sec

Results :

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0

[INFO]
[INFO] --- maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ test ---
[INFO]
[INFO] <<< camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) < prepare-package @ test <<<
[INFO]
[INFO] --- camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) @ test ---
[INFO] You can skip tests from the command line using: mvn camel:run -Dmaven.test.skip=true
[INFO] camel-blueprint detected on classpath
[INFO] OSGi Blueprint XML files detected in directory C:\Users\Aurelien Pupier\test\src\main\resources\OSGI-INF\blueprint
[INFO] Using org.apache.camel.test.blueprint.Main to initiate a CamelContext
[INFO] Starting Camel ...
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
Dec 16, 2016 12:52:11 PM org.ops4j.pax.swissbox.tinybundles.core.metadata.RawBuilder run
INFO: Copy thread finished.
[ERROR] *************************************
[ERROR] Error occurred while running main from: org.apache.camel.test.blueprint.Main
[ERROR]
java.lang.reflect.InvocationTargetException
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.apache.camel.maven.RunMojo$1.run(RunMojo.java:479)
        at java.lang.Thread.run(Thread.java:745)
Caused by: java.lang.RuntimeException: Gave up waiting for BlueprintContainer from bundle ""MyBundle""
        at org.apache.camel.test.blueprint.CamelBlueprintHelper.waitForBlueprintContainer(CamelBlueprintHelper.java:363)
        at org.apache.camel.test.blueprint.Main.doStart(Main.java:111)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:138)
        at org.apache.camel.main.MainSupport.run(MainSupport.java:390)
        at org.apache.camel.test.blueprint.Main.main(Main.java:82)
        ... 6 more
[ERROR] *************************************
                                                                           [WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] was interrupted but is still alive after waiting at least 15000msecs
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-1,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-2,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] thread Thread[ForkJoinPool.commonPool-worker-4,5,org.apache.camel.test.blueprint.Main] will linger despite being asked to die via interruption
[WARNING] NOTE: 3 thread(s) did not finish despite being asked to  via interruption. This is not a problem with exec:java, it is a problem with the running code. Although not serious, it should be remedied.
[WARNING] Couldn't destroy threadgroup org.apache.camel.maven.RunMojo$IsolatedThreadGroup[name=org.apache.camel.test.blueprint.Main,maxpri=10]
java.lang.IllegalThreadStateException
        at java.lang.ThreadGroup.destroy(ThreadGroup.java:778)
        at org.apache.camel.maven.RunMojo.execute(RunMojo.java:512)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
        at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
        at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
        at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
        at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
        at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
        at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
        at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:497)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
        at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
        at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
        at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 58.326 s
[INFO] Finished at: 2016-12-16T12:52:57+01:00
[INFO] Final Memory: 51M/549M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.18.2-SNAPSHOT:run (default-cli) on project test: null: MojoExecutionException: InvocationTargetException: Gave up waiting for BlueprintContainer from bundle ""MyBundle"" -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{noformat}
ggrzybek:1481864406:2016-12-16T13:00:06.974+0000:1481864406:2016-12-16T13:00:06.974+0000:One more fix:
* master: https://github.com/apache/camel/commit/ddcbd0f948d0f4b8c2a4a5b99f78f2880c4d21de
* camel-2.18.x: https://github.com/apache/camel/commit/74fd151016b0cc64e6eddd098bf355fc35743ce0
aurelien.pupier:1481869994:2016-12-16T14:33:14.013+0000:1481869994:2016-12-16T14:33:14.013+0000:yeah it works, thank you!"
0,CAMEL-10601,Test,Minor,None,None,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,2,2016-12-15 08:57:26+00:00,2017-02-28 12:27:59+00:00,"This causes CI server to fail sometimes if the port number is already in use


org.apache.camel.component.gridfs.GridFsConsumerTest.testAttribute


Failing for the past 1 build (Since Unstable#1067 )
Took 37 ms.
Error Message


Cannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfiguration
Stacktrace


java.lang.IllegalStateException: Cannot load configuration class: org.apache.camel.component.gridfs.EmbedMongoConfiguration
Caused by: java.lang.IllegalStateException: Unable to load cache item
Caused by: java.lang.ExceptionInInitializerError
Caused by: java.lang.RuntimeException: 
java.io.IOException: Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:35949
2016-12-14T23:31:17.332+0000 E NETWORK  [initandlisten]   addr already in use


Caused by: java.io.IOException: 
Could not start process: failed errno:98 Address already in use for socket: 0.0.0.0:35949
2016-12-14T23:31:17.332+0000 E NETWORK  [initandlisten]   addr already in use","godbolerr@gmail.com:1488254627:2017-02-28T12:03:47.787+0000:1488254627:2017-02-28T12:03:47.787+0000:It seems that port is already assigned like this. 

private static final int PORT = findAvailableTcpPort();

Is it consistent across CI builds ? 
davsclaus:1488256079:2017-02-28T12:27:59.349+0000:1488256079:2017-02-28T12:27:59.349+0000:Yeah it seems it has been fixed"
0,CAMEL-10600,Improvement,Minor,2.18.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Greg Vanore,0,2,2016-12-14 17:53:02+00:00,2017-02-28 10:51:06+00:00,"I had noticed that IntrospectionSupport uses the type converter system, so was hoping to inject my application config POJOs and then have them converted to the appropriate type for certain properties where the configuration is on a per-object basis.


My test setup was...



... create a route, from(""file://tmp/test?noop=true&idempotentRepository=#foo"").
... add a bean to my test registry, Runnable with name foo.
... register a converter that took a Runnable and just hardcoded a MemoryIdempotentRepository as the result. I know this is strange but I just wanted to prove the conversion took place.



Conversion didn't take place, so I set a breakpoint and took a look at IntrospectionSupport. (2.18.1) On lines 531-534, a little bit of logic makes sure that the reference is the exact type of the setter, or the setter is skipped. This effectively aborts type conversions for references.


I did a casual check through history, looks like this was introduced around 2.13.0.


The most obvious workaround for this is for us to use a CompositeRegistry and use an established nomenclature (e.g. accountName/idempotentRepository for us to do the fetch and conversion in one spot.


If you deem this a non-feature, it would be nice to at least pass the parameter type to the CamelContextHelper#lookup utility. That way, when we write our custom registry, the lookups will supply a type hint (e.g. lookupByNameAndType instead of just lookupByName. Then we won't be forced to come up with a nomenclature that we have to parse, or we could choose to make a generic TypeConverterRegistry that does a lookup by name and then a mandatory conversion.","davsclaus:1481854758:2016-12-16T10:19:18.738+0000:1481854773:2016-12-16T10:19:33.777+0000:This is not so idel to do a type conversion of the reference, as there may be overloaded setter methods and you need to find the best match to use first that are not doing unnecessary type conversions.
davsclaus:1481854820:2016-12-16T10:20:20.103+0000:1481854820:2016-12-16T10:20:20.103+0000:So maybe only if any of the regular setter didn't match nicely it can attempt a fallback with type conversion based on the parameter types of the setters.
grevan:1481890974:2016-12-16T20:22:54.592+0000:1481890974:2016-12-16T20:22:54.592+0000:I agree that doing a type conversion always is not ideal. A conversion as a fallback before giving up sounds good though.
davsclaus:1488250266:2017-02-28T10:51:06.408+0000:1488250266:2017-02-28T10:51:06.408+0000:Lets keep current behavior which works fine"
0,CAMEL-10569,Improvement,Minor,2.19.0,,"
None
",Resolved,Duplicate,None,Zoran Regvart,Zoran Regvart,0,1,2016-12-08 10:37:38+00:00,2016-12-14 09:30:36+00:00,"As per discussion in CAMEL-10452, Data Transfer Objects (DTOs) generated by camel-salesforce-maven-plugin could contain additional metadata. This metadata could be used to get the list of fields in the SObject, to provide label plural form (needed in some APIs), or URLs of SObjects.


The simplest option would be to add a method that returns existing SObjectDescription populated with the data received from the metadata service during the generation of DTOs.",
0,CAMEL-10568,Bug,Major,2.18.0,"2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",Claus Ibsen,Adam Campbell,0,3,2016-12-07 22:29:44+00:00,2016-12-08 14:17:07+00:00,"It looks like CAMEL-9820 has not resolved SFTP readLockMinAge functionality.


When I run the latest version, I get a new last modified time as negative. I think this is because both types are int so it is performing the calculation as an int and then converting it to long.


It should work if this line:


newLastModified = f.getAttrs().getMTime() * 1000;


Is changed to:


newLastModified = f.getAttrs().getMTime() * 1000L;


TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - List files outgoing/Promo/dev/test.dat found 1 files
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - Previous last modified: -9223372036854775808, new last modified: -616826120
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - Previous length: -9223372036854775808, new length: 12921172
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - New older than threshold: 1481147995902
TRACE o.a.c.c.f.r.s.SftpChangedExclusiveReadLockStrategy - Read lock acquired.","davsclaus:1481155547:2016-12-08T08:05:47.278+0000:1481155547:2016-12-08T08:05:47.278+0000:Thanks for reporting. I wonder if you can do a patch or better as a github PR
http://camel.apache.org/contributing
githubbot:1481176712:2016-12-08T13:58:32.938+0000:1481176712:2016-12-08T13:58:32.938+0000:GitHub user adamcamp opened a pull request:

    https://github.com/apache/camel/pull/1337

    CAMEL-10568 Fix SftpChangedExclusiveReadLockStrategy integer overflow bug

    https://issues.apache.org/jira/browse/CAMEL-10568

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adamcamp/camel CAMEL-10568

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1337.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1337
    
----
commit df2f7cd2bb2e5816b59e854eb9e1a75b660f5e79
Author: acampbel <adam.campbell@neustar.biz>
Date:   2016-12-08T13:55:28Z

    CAMEL-10568 Fix integer overflow bug

----

davsclaus:1481177754:2016-12-08T14:15:54.829+0000:1481177754:2016-12-08T14:15:54.829+0000:Thanks for the PR
githubbot:1481177827:2016-12-08T14:17:07.448+0000:1481177827:2016-12-08T14:17:07.448+0000:Github user adamcamp closed the pull request at:

    https://github.com/apache/camel/pull/1337
"
0,CAMEL-10567,Improvement,Minor,None,"2.16.5, 2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.16.5, 2.17.5, 2.18.2, 2.19.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-12-07 16:54:59+00:00,2016-12-14 20:26:35+00:00,By default the option will be false.,
0,CAMEL-10566,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-07 15:16:15+00:00,2016-12-07 15:21:19+00:00,Its not supported on osgi/karaf.,
0,CAMEL-10565,Improvement,Major,None,2.19.0,"
None
",Resolved,Done,2.19.0,Nicola Ferraro,Nicola Ferraro,0,1,2016-12-07 15:07:25+00:00,2017-03-24 12:15:42+00:00,"The undertow component creates 1 worker thread per CPU and this can be a problem when running in docker containers on machines with 64+ cores (Java containers currently see the number of CPUs of the host machine, even when resource limitation is enabled).


We need to add configuration options to the component to limit the number of threads (and possibly other available options).",
0,CAMEL-10564,Bug,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Nicola Ferraro,Nicola Ferraro,0,1,2016-12-07 14:57:33+00:00,2016-12-13 09:17:10+00:00,"Setting properties like:



camel.component.netty-http.configuration.maximum-pool-size=20




... to configure the netty-http-starter component produce class-cast errors.



Caused by: java.lang.ClassCastException: org.apache.camel.component.netty.NettyConfiguration cannot be cast to org.apache.camel.component.netty.http.NettyHttpConfiguration
	at org.apache.camel.component.netty.http.NettyHttpEndpoint.getConfiguration(NettyHttpEndpoint.java:151) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.netty.http.NettyHttpEndpoint.createConsumer(NettyHttpEndpoint.java:83) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.netty.http.NettyHttpComponent.doCreateConsumer(NettyHttpComponent.java:369) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.netty.http.NettyHttpComponent.createConsumer(NettyHttpComponent.java:264) ~[camel-netty-http-2.18.1.jar:2.18.1]
	at org.apache.camel.component.rest.RestEndpoint.createConsumer(RestEndpoint.java:489) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.EventDrivenConsumerRoute.addServices(EventDrivenConsumerRoute.java:69) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.DefaultRoute.onStartingServices(DefaultRoute.java:103) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.RouteService.doWarmUp(RouteService.java:167) ~[camel-core-2.18.1.jar:2.18.1]
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:141) ~[camel-core-2.18.1.jar:2.18.1]
	... 31 common frames omitted





The reason is that the netty-http Component, that inherits from the netty component, requires a subclass of NettyConfiguration (NettyHttpConfiguration), while the generated starter is using the parent class.",
0,CAMEL-10563,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-12-06 16:23:30+00:00,2016-12-13 13:20:24+00:00,No Desc,lb:1481599206:2016-12-13T11:20:06.260+0000:1481599206:2016-12-13T11:20:06.260+0000:Need to add better handling for hz instance cleanup
0,CAMEL-10562,Bug,Critical,"2.18.0, 2.18.1","2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Stefan,0,3,2016-12-06 16:18:38+00:00,2016-12-08 08:43:22+00:00,"DefaultCamelContext#safelyStartRouteServices the following code is called:



Collections.sort(startupListeners, new OrderedComparator());




startupListeners is a CopyOnWriteArrayList.


In the specification of Collections.sort it is stated, that an UnsupportedOperationException is thrown if the collections listiterator doesn't support the set-operation.
Sadly, the documentation of CopyOnWriteArrayList#listIterator states, that the listiterator doesn't support this operation.
As expected in this szenario, the UnsupportedOperationException is thrown during startup of the camel context if an Oracle JDK 1.8.0 with patchlevel lower than 20 is used.
In 1.8.0_20 the operation Collections#sort(List,Comparator) is rewritten to delegate to List#sort(Comparator) so it doesn't matter anymore if the lists listIterator supports the set-operation.


The issue can trivially been fixed by replacing the line by



startupListeners.sort(new OrderedComparator());","sschulze:1481012661:2016-12-06T16:24:21.039+0000:1481012661:2016-12-06T16:24:21.039+0000:This issue is a blocker in our environment, because we can not simply change the JRE in use on our servers. So I set the priority only to critical because of the outdated affected version of Java and the because I'm not sure, if other JREs, i.e. the IBM JRE, are affected, too.

I will add a pull request later. Currently I'm not able to clone the git repo :(
githubbot:1481037169:2016-12-06T23:12:49.139+0000:1481037169:2016-12-06T23:12:49.139+0000:GitHub user sschulze opened a pull request:

    https://github.com/apache/camel/pull/1333

    CAMEL-10562: camel-core - Switched to List#sort

    Usage of Collections.sort(CopyOnWriteArrayList, Comparator) causes an UnsupportedOperationException on Oracle Java 1.8.0 up to fixpack 20 due to the documented restriction of this method to require an implemented ListIterator#set(...) operation on the given list.
    
    For details have a look at [CAMEL-10562](https://issues.apache.org/jira/browse/CAMEL-10562).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sschulze/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1333.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1333
    
----
commit bb8be00f5e50f4190677ffac8e73609446a600d9
Author: Stefan Schulze <stefan.schulze3@gmail.com>
Date:   2016-12-06T23:02:19Z

    CAMEL-10562: camel-core - Switched to List#sort

----

githubbot:1481157795:2016-12-08T08:43:15.318+0000:1481157795:2016-12-08T08:43:15.318+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1333

davsclaus:1481157802:2016-12-08T08:43:22.544+0000:1481157802:2016-12-08T08:43:22.544+0000:Thanks for reporting and the PR"
0,CAMEL-10561,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-06 09:30:32+00:00,2016-12-06 13:01:28+00:00,To make it easy for users to expose the CamelCatalog as a REST service from a JAX-RS resource class.,davsclaus:1481000479:2016-12-06T13:01:19.920+0000:1481000479:2016-12-06T13:01:19.920+0000:There is a little camel-rest-app users can try out the rest api which has embedded swagger ui as well.
0,CAMEL-10560,Task,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Fabrizio Spataro,Fabrizio Spataro,0,2,2016-12-05 16:41:52+00:00,2016-12-06 08:56:57+00:00,Add new proxy method getSubmittedFileName() into PartDataSource nested class.,"githubbot:1480927420:2016-12-05T16:43:40.424+0000:1480927420:2016-12-05T16:43:40.424+0000:GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1331

    CAMEL-10560, Gets the file name specified by the client

    https://issues.apache.org/jira/browse/CAMEL-10560

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-10560

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1331.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1331
    
----
commit e41bdaaf608b6fc4506f600b5a6a6f5c48a24143
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-12-05T16:42:38Z

    CAMEL-10560, added getSubmittedFileName() into PartDataSource to retrieve file name specified by the client

----

githubbot:1480985817:2016-12-06T08:56:57.472+0000:1480985817:2016-12-06T08:56:57.472+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1331
"
0,CAMEL-10559,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-05 10:40:37+00:00,2016-12-05 13:17:18+00:00,"See
https://github.com/fabric8io/fabric8/issues/6617",
0,CAMEL-10558,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-04 13:59:46+00:00,2016-12-04 14:28:58+00:00,"Related to CAMEL-10555


If OSGi cannot load xalan transformer etc, then we should fallback to the JDK default. However OSGi makes the regular loader not able to fallback itself, and we need to help it.",
0,CAMEL-10557,Bug,Minor,2.17.3,"2.17.5, 2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.2, 2.19.0",Claus Ibsen,Sune Keller,0,3,2016-12-04 13:54:02+00:00,2016-12-04 14:35:47+00:00,"The documentation says to append ""/request"" to retrieve the request object. The current code does not do that. See https://github.com/apache/camel/pull/1327.","davsclaus:1480833193:2016-12-04T14:33:13.607+0000:1480833193:2016-12-04T14:33:13.607+0000:Thanks for the PR
githubbot:1480833347:2016-12-04T14:35:47.745+0000:1480833347:2016-12-04T14:35:47.745+0000:Github user sirlatrom closed the pull request at:

    https://github.com/apache/camel/pull/1327
"
0,CAMEL-10556,Bug,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-04 13:13:57+00:00,2016-12-04 13:36:02+00:00,"This example camel-example-twitter-websocket-blueprint cannot load the static html file when running in karaf



HTTP ERROR: 500

Problem accessing /index.html. Reason:

    java.lang.RuntimeException: java.io.FileNotFoundException: /webapp/index.html (No such file or directory)




Its some classloading issues with camel-websocket and camel-jetty when running in OSGi. As the stacktrace seems to load from file system.



2016-12-04 14:11:50,879 | WARN  | SocketServer-266 | ServletHandler                   | 83 - org.eclipse.jetty.util - 9.2.19.v20160908 | /
java.lang.RuntimeException: java.io.FileNotFoundException: /webapp/index.html (No such file or directory)
	at org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent.getDirectBuffer(HttpContent.java:110)[71:org.eclipse.jetty.http:9.2.19.v20160908]
	at org.eclipse.jetty.server.HttpOutput.sendContent(HttpOutput.java:665)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.DefaultServlet.sendData(DefaultServlet.java:931)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.DefaultServlet.doGet(DefaultServlet.java:534)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)[63:javax.servlet-api:3.1.0]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)[63:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.Dispatcher.forward(Dispatcher.java:191)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.Dispatcher.forward(Dispatcher.java:72)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.DefaultServlet.doGet(DefaultServlet.java:588)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)[63:javax.servlet-api:3.1.0]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)[63:javax.servlet-api:3.1.0]
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:221)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)[81:org.eclipse.jetty.servlet:9.2.19.v20160908]
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.Server.handle(Server.java:499)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)[80:org.eclipse.jetty.server:9.2.19.v20160908]
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)[72:org.eclipse.jetty.io:9.2.19.v20160908]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: java.io.FileNotFoundException: /webapp/index.html (No such file or directory)
	at java.io.RandomAccessFile.open(Native Method)[:1.8.0_31]
	at java.io.RandomAccessFile.<init>(RandomAccessFile.java:243)[:1.8.0_31]
	at org.eclipse.jetty.util.BufferUtil.readFrom(BufferUtil.java:437)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at org.eclipse.jetty.util.BufferUtil.toBuffer(BufferUtil.java:884)[83:org.eclipse.jetty.util:9.2.19.v20160908]
	at org.eclipse.jetty.http.HttpContent$ResourceAsHttpContent.getDirectBuffer(HttpContent.java:106)[71:org.eclipse.jetty.http:9.2.19.v20160908]
	... 34 more",
0,CAMEL-10555,Bug,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-12-04 12:32:52+00:00,2016-12-04 14:29:22+00:00,"This error happens



2016-12-04 13:30:56,747 | ERROR | nsole user karaf | ShellUtil                        | 43 - org.apache.karaf.shell.core - 4.0.7 | Exception caught while executing command
javax.xml.transform.TransformerFactoryConfigurationError: Provider org.apache.xalan.processor.TransformerFactoryImpl not found
	at javax.xml.transform.TransformerFactory.newInstance(TransformerFactory.java:121)[:2.7.0]
	at org.apache.camel.converter.jaxp.XmlConverter.createTransformerFactory(XmlConverter.java:1173)
	at org.apache.camel.converter.jaxp.XmlConverter.getTransformerFactory(XmlConverter.java:1063)
	at org.apache.camel.converter.jaxp.XmlConverter.createTransformer(XmlConverter.java:1168)
	at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:127)
	at org.apache.camel.converter.jaxp.XmlConverter.toStringFromDocument(XmlConverter.java:299)
	at org.apache.camel.model.ModelHelper.dumpModelAsXml(ModelHelper.java:107)
	at org.apache.camel.commands.AbstractLocalCamelController.getRestModelAsXml(AbstractLocalCamelController.java:414)
	at org.apache.camel.commands.RestShowCommand.performContextCommand(RestShowCommand.java:32)
	at org.apache.camel.commands.AbstractContextCommand.executeLocal(AbstractContextCommand.java:74)
	at org.apache.camel.commands.AbstractContextCommand.execute(AbstractContextCommand.java:42)
	at org.apache.camel.karaf.commands.RestShow.execute(RestShow.java:38)
	at org.apache.karaf.shell.impl.action.command.ActionCommand.execute(ActionCommand.java:83)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[43:org.apache.karaf.shell.core:4.0.7]
	at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:274)[43:org.apache.karaf.shell.core:4.0.7]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]

karaf@root()> camel:rest-show camel-1
Error executing command: Provider org.apache.xalan.processor.TransformerFactoryImpl not found




When running the camel-example-servlet-rest-blueprint example","davsclaus:1480826861:2016-12-04T12:47:41.454+0000:1480826861:2016-12-04T12:47:41.454+0000:It works if you install camel-saxon which provides the saxon xslt transformer.
davsclaus:1480830333:2016-12-04T13:45:33.501+0000:1480830343:2016-12-04T13:45:43.288+0000:The JDK provides the transformer as class: com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl
davsclaus:1480832962:2016-12-04T14:29:22.648+0000:1480832962:2016-12-04T14:29:22.648+0000:Fixed by CAMEL-10558"
0,CAMEL-10554,Improvement,Minor,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Terrien Jean-Yves,0,3,2016-12-03 20:19:19+00:00,2016-12-20 12:44:59+00:00,"Hi, 


The mongodb driver has changed in its foundation. 
It is recommended not to use many classes of the verion 2 still present in the driver. 
This is the case with DBObject, which is the basis for the configuration of the camel component. 


I'm working on the evolution of this component to use the new classes of version 3, like ""Document"". 


I've created à patch (no completed)
A+JYT","sekaijin:1480767715:2016-12-03T20:21:55.582+0000:1480767715:2016-12-03T20:21:55.582+0000:Patch to use mongo 3 API.

acosentino:1480812450:2016-12-04T08:47:30.957+0000:1480812450:2016-12-04T08:47:30.957+0000:I was looking at the patch

{code}
+//    /**
+//     * Check if outputType is compatible with operation. DbCursor and DBObjectList applies to findAll. DBObject applies to others.
+//     */
+//    private void validateOutputType() {
+//        if (!ObjectHelper.isEmpty(outputType)) {
+//            if (MongoDbOutputType.DBObjectList.equals(outputType) && !(MongoDbOperation.findAll.equals(operation))) {
+//                throw new IllegalArgumentException(""outputType DBObjectList is only compatible with operation findAll"");
+//            }
+//            if (MongoDbOutputType.DBCursor.equals(outputType) && !(MongoDbOperation.findAll.equals(operation))) {
+//                throw new IllegalArgumentException(""outputType DBCursor is only compatible with operation findAll"");
+//            }
+//            if (MongoDbOutputType.DBObject.equals(outputType) && (MongoDbOperation.findAll.equals(operation))) {
+//                throw new IllegalArgumentException(""outputType DBObject is not compatible with operation findAll"");
+//            }
+//        }
+//    }
{code}

I see you're commenting this method and also

{code}
+//        if (writeConcern != null) {
+//            mongoConnection.setWriteConcern(writeConcern);
+//        } else if (writeConcernRef != null) {
+//            mongoConnection.setWriteConcern(writeConcernRef);
+//        }
+//
+//        // Set the ReadPreference
+//        if (readPreference != null) {
+//            mongoConnection.setReadPreference(readPreference);
+//        }
{code}

the writeConcern settings. These parameter are URI params from the endpoint configuration, so if we don't need the anymore maybe we have to deprecate them or remove them, but I think it is just because this patch is work in progress. 

Since this seems to be a big change in the component, may I ask you to open a Pull Request on Github if you can? This way we can review the code in an easier way. If you can't I'll wait for the complete patch.
sekaijin:1480816865:2016-12-04T10:01:05.511+0000:1480816865:2016-12-04T10:01:05.511+0000:this parameters are déprecated and  are no effect on driver v3

void	setOptions(int options)
Deprecated. 
Set options on instances of DBCursor
void	setReadPreference(ReadPreference readPreference)
Deprecated. 
Set the default read preference with either MongoClientURI or MongoClientOptions
void	setWriteConcern(WriteConcern writeConcern)
Deprecated. 
Set the default write concern with either MongoClientURI or MongoClientOptions
void	slaveOk()
Deprecated. 
Replaced with ReadPreference.secondaryPreferred()

I'm working to solve this problem.
In the new version you should put these options on the mongoClient bean and not put them on the camel url.
    <bean id=""mongoBean"" class=""com.mongodb.MongoClient"">
        <constructor-arg name=""host"" value=""${mongodb.host}"" />
        <constructor-arg name=""port"" value=""${mongodb.port}"" />
    </bean>

Bye.
sekaijin:1480817322:2016-12-04T10:08:42.918+0000:1480817322:2016-12-04T10:08:42.918+0000:In the camel component configuration an option is outputType which is implemented as a MongoDbOutputType enumeration 
The values ​​are DBObjectList, DBObject, DBCursor which matches in the new API to List<Document>, Document, MongoIterable 

I do not know what to do. This configuration is purely camel 
I can keep the enumeration values ​​and use the new classes 
Or define three new values (DocumentList, Document, MongoIterable) ​​and using the new classes. 

In the first case the values ​​of the option does not have a name to refer to the mongo API but remains compatible with the previous versions of camel-mongodb. 
In the second the values ​​correspond to the mongo API but are no longer compatible with the previous versions. 

A+JYT
acosentino:1480818787:2016-12-04T10:33:07.714+0000:1480818787:2016-12-04T10:33:07.714+0000:Lets wait for some feedback from users on the mailing list :-)
sekaijin:1480840422:2016-12-04T16:33:42.688+0000:1480840422:2016-12-04T16:33:42.688+0000:readPreference writeConcern

sekaijin:1481437483:2016-12-11T14:24:43.557+0000:1481437483:2016-12-11T14:24:43.557+0000:Using Filters class
Adding FIELDS_FILTER headers on update operation
Update documentation
Change  MongoDbOutputType to
    DocumentList, //List<Document>
    Document, //Document
    MongoIterable //MongoIterable
Using Bson class instead of Document when is possible (more generic)

Work in progress
Using more generic classes (like Bson)
Study of the use of MongoCollection<TDocument> where TDocument is generic parameter.
acosentino:1481438483:2016-12-11T14:41:23.110+0000:1481438483:2016-12-11T14:41:23.110+0000:Do you create a new camel component only for mongo versione 3.x?
sekaijin:1481454857:2016-12-11T19:14:17.988+0000:1481455886:2016-12-11T19:31:26.837+0000:For Mongo Java Driver 3.x
mongo drivers support mongo versions
MongoDB Ver|2.4|2.6|3.0|3.2|3.4
Version | 3.4. |     ✓         |             ✓       |                 ✓       |                 ✓             |           ✓
Version |         3.3.    |      ✓         |             ✓        |                ✓        |                ✓	 |
Version |        3.2.     |     ✓          |            ✓        |                ✓        |                ✓	 |
Version |        2.14   |     ✓          |            ✓        |                ✓        |                ✓ [*]	| 

The V2 driver does not support more version than the V3 driver.
I don't have tested with mongo 2.x
A+JYT
acosentino:1481457063:2016-12-11T19:51:03.240+0000:1481457063:2016-12-11T19:51:03.240+0000:In the mailing list we suggested you to create a new component (camel-mongodb3) with the features from driver V3. This way we will be able to avoid problem of breaking changes for end users.

Are you follow this idea?
sekaijin:1481504101:2016-12-12T08:55:01.463+0000:1481504101:2016-12-12T08:55:01.463+0000:Yes
I'll stabilize the code.
Remove options from previous versions in doc. (Put references to camel-mongodb)
And create the camel-mongo3 component
sekaijin:1481676062:2016-12-14T08:41:02.951+0000:1481676062:2016-12-14T08:41:02.951+0000:Hi.
I've renamed the camel-mongodb3 component.
What is the right method? Do I have to rename exported packages?
Like org.apache.camel.component.mongodb => org.apache.camel.component.mongodb3

A+JYT
acosentino:1481677427:2016-12-14T09:03:47.531+0000:1481677427:2016-12-14T09:03:47.531+0000:You don't have to rename camel-mongodb component to camel-mongodb3.

You have to create another folder with another component named camel-mongodb3.

Thanks for your effort
sekaijin:1481690632:2016-12-14T12:43:52.366+0000:1481690632:2016-12-14T12:43:52.366+0000:Sorry I've moved my code to camel-mongodb3.
Should the package be ""org.apache.camel.component.mongodb"" or ""org.apache.camel.component.mongodb3""?
I am afraid that if I leave ""org.apache.camel.component.mongodb"", there will be conflicts, if the two components are imported.

Bye
acosentino:1481690837:2016-12-14T12:47:17.354+0000:1481690837:2016-12-14T12:47:17.354+0000:It's better ""org.apache.camel.component.mongodb3"" :-)

Thanks
sekaijin:1481723819:2016-12-14T21:56:59.660+0000:1481723819:2016-12-14T21:56:59.660+0000:Good evening,
I think this version is complete enough to create the component in the repository.

I have a problem on my Mac
The camel-mongodb project in the master version has tests that fail.
testPersistentTailTrack
testPersistentTailTrackIncreasingDateField
testCustomTailTrackLocation
The same tests with the same errors fail in the camel-mongodb3 project
I posted on the list but it seems that the build works.

I could not fix problem on the master.
And so I can not test these cases in the new component.

cordially
PS: I'll have to get familiar with Git. I usually use SVN.
acosentino:1481953080:2016-12-17T13:38:00.584+0000:1481953080:2016-12-17T13:38:00.584+0000:I'm starting merging process.
acosentino:1482023731:2016-12-18T09:15:31.512+0000:1482023731:2016-12-18T09:15:31.512+0000:Thanks. The component is merged :-)
davsclaus:1482209009:2016-12-20T12:43:29.569+0000:1482209009:2016-12-20T12:43:29.569+0000:Is there more work needed on this?
acosentino:1482209090:2016-12-20T12:44:50.183+0000:1482209090:2016-12-20T12:44:50.183+0000:I forget to close the JIRA. Sorry.

Maybe we need to create a page on the website. 

"
0,CAMEL-10553,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Alexandru Enache,0,2,2016-12-03 20:08:34+00:00,2016-12-04 13:44:08+00:00,"When navigating to http://camel.apache.org/components.html and trying to click the links in the description column of ""CXF / camel-cxf"" and ""CXFRS / camel-cxf"" components I'm being taken to http://apache.org/cxf/ (which is not found).


Maybe the path should actually be http://cxf.apache.org/ (not sure about this though)?


I don't have access to edit the page so I raised this ticket.",davsclaus:1480830248:2016-12-04T13:44:08.808+0000:1480830248:2016-12-04T13:44:08.808+0000:Thanks for reporting
0,CAMEL-10552,Improvement,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-12-03 17:33:40+00:00,2016-12-06 16:26:03+00:00,No Desc,
0,CAMEL-10551,Improvement,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-12-03 10:52:54+00:00,2017-08-05 21:18:10+00:00,No Desc,
0,CAMEL-10550,Improvement,Minor,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-12-02 16:23:26+00:00,2016-12-06 16:25:49+00:00,No Desc,
0,CAMEL-10549,Bug,Major,2.18.0,None,"
None
",Resolved,Invalid,None,Claus Ibsen,Frank Wein,0,2,2016-12-02 12:15:27+00:00,2017-01-05 09:26:15+00:00,"First things first: This looks like a regression to me, with version 2.17.3 (<groupId>org.apache.camel</groupId><artifactId>camel-parent</artifactId><version>2.17.3</version>) in my pom.xml this still worked fine. In version 2.18.0 it's broken. I could not find a similar issue here in this bugtracker (I found something at https://issues.jboss.org/browse/ENTESB-5872, but don't think this is related, although the stack trace is similar; fuse 6.3 does not use Camel 2.18 AFAIK).


With the attached code example I get an exception/stacktrace when calling the REST endpoint (producer) via http://localhost/API/1/. With Camel 2.17.3 I get the expected response from the processor.


Stacktrace:
hread #0 - JmsConsumer[test] EndpointMessageListener        WARN  Execution of JMS message listener failed. Caused by: [org.apache.camel.RuntimeCamelException - java.lang.NullPointerException]
org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:133) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:721) ~[spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:681) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:651) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:317) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:255) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1166) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1158) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055) [spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_101]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_101]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_101]
Caused by: java.lang.NullPointerException
	at org.apache.activemq.camel.component.OriginalDestinationPropagateStrategy.onMessageCreated(OriginalDestinationPropagateStrategy.java:45) ~[activemq-camel-5.14.0.jar:5.14.0]
	at org.apache.camel.component.jms.JmsBinding.makeJmsMessage(JmsBinding.java:309) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.EndpointMessageListener$1.createMessage(EndpointMessageListener.java:371) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:515) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:458) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$4.doInJms(JmsConfiguration.java:501) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:484) ~[spring-jms-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:499) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.EndpointMessageListener.sendReply(EndpointMessageListener.java:369) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.EndpointMessageListener$EndpointMessageListenerAsyncCallback.done(EndpointMessageListener.java:222) ~[camel-jms-2.18.0.jar:2.18.0]
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:116) ~[camel-jms-2.18.0.jar:2.18.0]
	... 11 more","fwein:1480652388:2016-12-02T12:19:48.162+0000:1480652418:2016-12-02T12:20:18.294+0000:Additional comment: On http://localhost:8888 I'm running another REST webservice that is responding to the HTTP request.

Code used to test this:
{noformat}
        getContext().addComponent(""activemq"",
                ActiveMQComponent.activeMQComponent(""vm://localhost?broker.persistent=false""));

        restConfiguration().component(""jetty"").host(""0.0.0.0"").port(8080)
                .dataFormatProperty(""prettyPrint"", ""true"");

rest(""/API/"").get(""/{ID}/"").to(""direct:objectGet"");

from(""direct:objectGet"").to(ExchangePattern.InOut, ""activemq:test"");

from(""activemq:test"").setHeader(Exchange.HTTP_PATH, simple(""/Webservice/${header.ID}""))
        .to(""jetty://http://localhost:8888?bridgeEndpoint=true"").process(new Processor() {
            public void process(Exchange exchange) throws Exception {
               exchange.getIn().setBody(""Changed body"");
                    }
                });
{noformat}
davsclaus:1480658209:2016-12-02T13:56:49.741+0000:1480658209:2016-12-02T13:56:49.741+0000:Try with 2.17.4 and 2.18.1 - the latter is release next week
davsclaus:1483579574:2017-01-05T09:26:14.900+0000:1483579574:2017-01-05T09:26:14.900+0000:Ah that NPE is a big in ActiveMQ. You can upgrade that version."
0,CAMEL-10548,Bug,Major,None,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,3,2016-11-30 17:47:15+00:00,2016-12-01 15:52:57+00:00,"This very simple spring-boot application :



@SpringBootApplication
public class Application {
    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Component
    public class MyRouteBuilder extends RouteBuilder {
        @Override
        public void configure() throws Exception {
            from(""timer:person"")
                .setBody().constant(Arrays.asList(
                    new Person(""Peter"", 25),
                    new Person(""John"", 33)
                ))
                .log(""Body is ${body}"");
        }
    }

    public static class Person {
        private String name;
        private int age;

        public Person(String name, int age) {
            this.name = name;
            this.age = age;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        @Override
        public String toString() {
            return ""Person{"" +
                ""name='"" + name + '\'' +
                "", age="" + age +
                '}';
        }
    }
}




Fails to resolve the simple expression ${body} because of the following exception:



org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Person{name='Peter', age=25}, Person{name='John', age=33}] due Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String] for value '[Person{name='Peter', age=25}, Person{name='John', age=33}]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:41) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.builder.ExpressionBuilder$75.evaluate(ExpressionBuilder.java:1795) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.LogProcessor.process(LogProcessor.java:53) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197) [camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:192) [camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:76) [camel-core-2.18.0.jar:2.18.0]
	at java.util.TimerThread.mainLoop(Timer.java:555) [na:1.8.0_112]
	at java.util.TimerThread.run(Timer.java:505) [na:1.8.0_112]
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String] for value '[Person{name='Peter', age=25}, Person{name='John', age=33}]'; nested exception is org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:42) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.apache.camel.spring.boot.SpringTypeConverter.convertTo(SpringTypeConverter.java:46) ~[camel-spring-boot-2.18.0.jar:2.18.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:346) ~[camel-core-2.18.0.jar:2.18.0]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[camel-core-2.18.0.jar:2.18.0]
	... 14 common frames omitted
Caused by: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.util.Arrays$ArrayList<?>] to type [java.lang.String]
	at org.springframework.core.convert.support.GenericConversionService.handleConverterNotFound(GenericConversionService.java:313) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:195) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.CollectionToStringConverter.convert(CollectionToStringConverter.java:68) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:36) ~[spring-core-4.3.3.RELEASE.jar:4.3.3.RELEASE]
	... 19 common frames omitted




The root cause is spring failing to find a converter for Person --> String and as the SpringTypeConverter registered by camel-spring-boot is one of the fallback converters used by BaseTypeConverterRegistry, it leads Camel to fail too.


As today is a Camel TypeConverter fails with an exception while looping over fallback converters, the loops ends and the conversion fails too. It may turn out that the bug is caused by the way camel uses Spring's type converters but it may be good to catch exceptions and try the next converter, davsclaus make sense ?


A workaround is to create a custom converter for the class:



    @Component
    public class PersonConverter implements Converter<Person, String> {
        @Override
        public String convert(Person source) {
            return source.toString();
        }
    }","davsclaus:1480557845:2016-12-01T10:04:05.055+0000:1480557845:2016-12-01T10:04:05.055+0000:Isnt the problem that Spring says true that it can convert from List -> String.
https://github.com/apache/camel/blob/master/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/SpringTypeConverter.java#L51



lb:1480572731:2016-12-01T14:12:11.400+0000:1480572825:2016-12-01T14:13:45.068+0000:Yes an not :-)

Spring says that it can convert from List to String and it is true but then thing is that Spring can't convert from Person to String as FallbackObjectToStringConverter can convert POJO if they have a String constructor or they have a valueOf(String) method (yeah, even if we are converting in the opposite way). 

What spring does under the hoods is looping over the collection and search a converter for the each element which of course may not be present.

I'm going to submit an issue to Spring but in the meantime I have this hack:

  https://github.com/lburgazzoli/apache-camel/commit/daf9c98f5d344d62cf551084dd4edb99e6509c52

Would it be acceptable ?
davsclaus:1480576116:2016-12-01T15:08:36.427+0000:1480576116:2016-12-01T15:08:36.427+0000:Yeah that is better than an exception.

"
0,CAMEL-10547,Bug,Minor,2.18.0,None,"
None
",Resolved,Cannot Reproduce,None,Unassigned,morten skou nielsen,0,2,2016-11-30 11:56:53+00:00,2016-12-02 09:40:22+00:00,"I get no exception when building this:


.toD(""file://"" + outputDirectory + File.separator + ""?fileExist=Append&charset=$(header.inputFileEncoding)"");


The code only breaks when i try to write to the file due to NoSuchFileException. 


I would have expected to get a camel.FailedToCreateRouteException since the charset option is invalid


see nable
http://camel.465427.n5.nabble.com/dynamic-endpoint-with-dynamic-encoding-td5790768.html","davsclaus:1480478731:2016-11-30T12:05:31.056+0000:1480478731:2016-11-30T12:05:31.056+0000:Ah you wont get any exception on startup as the uri is 100% dynamic, and computed on demand. However at runtime it ought to fail with a invalid option because charset has an invalid value.
MortenSN:1480479278:2016-11-30T12:14:38.188+0000:1480479278:2016-11-30T12:14:38.188+0000:yes, i've just tried it in a sandbox environment. It does fail. if i find the reason why it doesnt in my production code i'll be sure to update/create new ticket"
0,CAMEL-10546,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,3,2016-11-30 09:15:23+00:00,2017-01-23 13:56:32+00:00,"People may mistake this with property placeholders. However its used for generic key/value pairs for configuring some global options on CamelContext such as max debug log length etc.


An alternative is to change this configuration to be a type safe configuration which then adds fluent DSL support in Java and also in XML.


But for 2.x we could add methods called getConfiguration() / setConfiguration() and deprecate the older methods so people get more aware of this.","aldettinger:1484191207:2017-01-12T11:20:07.553+0000:1484191207:2017-01-12T11:20:07.553+0000:My understanding is that the proposed refactoring is:
{noformat}
CamelContext.getProperties() => CamelContext.getConfiguration()
CamelContext.setProperties(Map<String, String> properties) => CamelContext.setConfiguration(Map<String, String> configuration)
{noformat}

However, I'm wondering whether getProperty(String name) should be enrolled in the refactoring too. I would then propose:
{noformat}
CamelContext.getProperties() => CamelContext.getGlobalOptions()
CamelContext.getProperty(String name) => CamelContext.getGlobalOption(String name)
CamelContext.setProperties(Map<String, String> properties) => CamelContext.setGlobalOptions(Map<String, String> globalOptions)
{noformat}

What do you think ?
davsclaus:1484191590:2017-01-12T11:26:30.680+0000:1484191590:2017-01-12T11:26:30.680+0000:Yes that is a good idea, to have everything using a different name to not confuse it with property placeholders
davsclaus:1484615728:2017-01-17T09:15:28.809+0000:1484615728:2017-01-17T09:15:28.809+0000:We would also need to have globalOptions in the XML DSL as today its called properties as well. However we need the old to be deprecated so its backwards compatible. This is done in camel-core-xml and camel-spring / camel-blueprint to adjust that kind of code.

eg this guys should be deprecated
org.apache.camel.model.PropertiesDefinition

And then we need a 
org.apache.camel.model.GlobalOptionsDefinition

And remember to add it to the jaxb.index file.
davsclaus:1484616596:2017-01-17T09:29:56.784+0000:1484616596:2017-01-17T09:29:56.784+0000:And we should also check camel-springboot as it may need to have this added as well about globaloptions to its auto configuration and deprecate the old name
githubbot:1484621854:2017-01-17T10:57:34.324+0000:1484621854:2017-01-17T10:57:34.324+0000:Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1395

githubbot:1485074601:2017-01-22T16:43:21.490+0000:1485074601:2017-01-22T16:43:21.490+0000:GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1419

    CAMEL-10546: Continued the deprecation of CamelContext.getProperties()

    + properties and globalOptions coexist in schemas
    + globalOptions override existing properties
    + I first deprecated PropertyDefinition but rolled this back in the **third** commit when I realized it is duly used for endpoint level properties
    + I couldn't help with re-writing GlobalOptionsDefinition.asMap()
    + I didn't completed camel-spring-boot as it looks like the functionality behind ""properties"" would be implemented in CamelConfigurationProperties with spring boot. Not sure about that however, guidance is welcome if need be.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1419.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1419
    
----
commit 5c30671de4525d4fedd9aa220ac03ec84a0286fd
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-19T15:14:23Z

    CAMEL-10546: Deprecated PropertiesDefinition in camel-core

commit 75c80032b1bb5ecbcbd8f3984a61c71062531969
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-19T15:17:11Z

    CAMEL-10546: Added a test for GlobalOptionsDefinition in camel-core

commit 92c971bca8d4ca6c99b996f0682f24cb7f3c63ac
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-19T17:09:15Z

    CAMEL-10546: Removed spring xsd polluting javadoc and rolled back the deprecation of PropertyDefinition as its used in purpose for endpoint propertiese

commit 97852662f07da1ba4f323af7176e6ad0648e4024
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-19T18:28:46Z

    CAMEL-10546: Added globalOptions to spring and blueprint schema, globalOptions merge/override properties

commit cb45fb2d193c63254c99298d74dfbd0e82ac6fc8
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-20T12:59:59Z

    CAMEL-10546: Re-written GlobalOptionsDefinition.asMap() more concisely.

commit 6e459867298ada3338748be32521db9d3d39562b
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-21T11:55:49Z

    CAMEL-10546: Completed with a spring xml test

commit 35c4eb91f35d8703824e3987655f43bb7595dedc
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-21T13:06:20Z

    CAMEL-10546: Deprecated getProperties() from the camel context management bean

commit ea9aa639031709b5945a897c5a1e89d3e2d96bdb
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-01-22T16:18:15Z

    CAMEL-10546: Remove the use of the deprecated api in camel-spring-boot

----

davsclaus:1485083413:2017-01-22T19:10:13.044+0000:1485083413:2017-01-22T19:10:13.044+0000:Thanks for the help
githubbot:1485150992:2017-01-23T13:56:32.138+0000:1485150992:2017-01-23T13:56:32.138+0000:Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1419
"
0,CAMEL-10545,Bug,Major,2.18.0,,"
None
",Resolved,Invalid,None,Unassigned,Ben Cheng,0,2,2016-11-30 06:39:59+00:00,2016-11-30 08:23:12+00:00,"I simply create DefaultCamelContext and start. 


public class Appl {
	public static void main(String[] args) throws Exception

{
          CamelContext context = new DefaultCamelContext();
          context.start();
        }

}


It throws exception:
Exception in thread ""main"" java.lang.UnsupportedOperationException
	at java.util.concurrent.CopyOnWriteArrayList$COWIterator.set(CopyOnWriteArrayList.java:1185)
	at java.util.Collections.sort(Collections.java:234)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:3525)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:3308)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3162)
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:182)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2957)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2953)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2976)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2953)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2920)
	at com.techoffice.example.Appl.main(Appl.java:18)


If I tested with version: 2.14.4, every thing works fine.","davsclaus:1480465392:2016-11-30T08:23:12.396+0000:1480465392:2016-11-30T08:23:12.396+0000:Please use user forum / user mailing list to get help first
http://camel.apache.org/discussion-forums.html
http://camel.apache.org/mailing-lists.html"
0,CAMEL-10544,Improvement,Minor,2.19.0,2.20.0,"
None
",Resolved,Fixed,2.20.0,Babak Vahdat,Christian Schneider,0,4,2016-11-29 15:29:44+00:00,2017-09-01 15:59:27+00:00,Smack 4.2 changed some of the API. This issue covers upgrading the dependency as well as the camel-xmpp code.,"acosentino:1482363143:2016-12-22T07:32:23.077+0000:1482363143:2016-12-22T07:32:23.077+0000:How is it going with this one [~chris@die-schneider.net] ?
cschneider:1482373862:2016-12-22T10:31:02.791+0000:1482373862:2016-12-22T10:31:02.791+0000:Hi Andrea. I did the migration in a branch but was not yet able to get all tests working. The current test failures almost all report ssl exceptions. It would be great if you could take a look at the branch: https://github.com/apache/camel/tree/CAMEL-10544
acosentino:1482373994:2016-12-22T10:33:14.599+0000:1482373994:2016-12-22T10:33:14.599+0000:[~chris@die-schneider.net] sure, I'll do it ASAP :-)
acosentino:1482382257:2016-12-22T12:50:57.256+0000:1482382257:2016-12-22T12:50:57.256+0000:From a first sight it looks like we need to hack the xmppServer in the embedded test a bit.

I suggest to create a new keystore first.
githubbot:1483604653:2017-01-05T16:24:13.900+0000:1483604653:2017-01-05T16:24:13.900+0000:GitHub user mailnitinp opened a pull request:

    https://github.com/apache/camel/pull/1379

    [CAMEL-10544] Upgrade to smack 4.1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-10544

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1379.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1379
    
----
commit 67e05430a60111cde7fac9a9b8f70b5c7745a9a5
Author: Christian Schneider <chris@die-schneider.net>
Date:   2016-12-22T09:16:58Z

    [CAMEL-10544] Upgrade to smack 4.1

----

githubbot:1483604755:2017-01-05T16:25:55.926+0000:1483604755:2017-01-05T16:25:55.926+0000:Github user mailnitinp closed the pull request at:

    https://github.com/apache/camel/pull/1379

acosentino:1484177739:2017-01-12T07:35:39.707+0000:1484177739:2017-01-12T07:35:39.707+0000:[~chris@die-schneider.net], did you try with a new keystore? 

Thanks.
githubbot:1484866384:2017-01-20T06:53:04.031+0000:1484866384:2017-01-20T06:53:04.031+0000:GitHub user nileshkambli opened a pull request:

    https://github.com/apache/camel/pull/1411

    [CAMEL-10544] Upgrade to smack 4.1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-10544

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1411.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1411
    
----
commit 67e05430a60111cde7fac9a9b8f70b5c7745a9a5
Author: Christian Schneider <chris@die-schneider.net>
Date:   2016-12-22T09:16:58Z

    [CAMEL-10544] Upgrade to smack 4.1

----

githubbot:1488611335:2017-03-04T15:08:55.573+0000:1488611335:2017-03-04T15:08:55.573+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1411

bvahdat:1495021551:2017-05-17T19:45:51.643+0000:1495021551:2017-05-17T19:45:51.643+0000:As there's been no progress on this ticket I've looked into it and have got a patch in place. So I'm taking the liberty of assigning this to myself. And in the meanwhile smack version 4.2.0 is already out. So going to adapt the description of this ticket as well.
cschneider:1495021635:2017-05-17T19:47:15.192+0000:1495021635:2017-05-17T19:47:15.192+0000:Thanks for looking into this. Feel free to go ahead.
githubbot:1504252755:2017-09-01T15:59:15.003+0000:1504252755:2017-09-01T15:59:15.003+0000:GitHub user rajurapolu opened a pull request:

    https://github.com/apache/camel/pull/1911

    [CAMEL-10544] Upgrade to smack 4.1

    checkout 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-10544

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1911.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1911
    
----
commit 67e05430a60111cde7fac9a9b8f70b5c7745a9a5
Author: Christian Schneider <chris@die-schneider.net>
Date:   2016-12-22T09:16:58Z

    [CAMEL-10544] Upgrade to smack 4.1

----

githubbot:1504252767:2017-09-01T15:59:27.641+0000:1504252767:2017-09-01T15:59:27.641+0000:Github user rajurapolu closed the pull request at:

    https://github.com/apache/camel/pull/1911
"
0,CAMEL-10543,Improvement,Major,None,Future,"
None
",Resolved,Fixed,Future,Unassigned,Luca Burgazzoli,0,8,2016-11-28 18:16:48+00:00,2018-02-12 19:45:53+00:00,"The Apache Camel logo is a bit out dated so we have discussed in the Camel PMC and community to come up with a new one.
We encourage anyone to participate by submitting a logo proposal and/or share thoughts


The logo can be submitted by either:



a PR on GitHub (preferred)
file attachment to this JIRA ticket



And each logo should be:



images should be added to docs/img
each PR should contains a single logo



We are looking for a new logo that has two parts



graphical logo
The name: Apache Camel



So we can use the logo without the word Apache Camel, but also as a combination of the two of them, eg as logo on the Camel front page.
Also if the logo can be vector based it would be a benefit, so it can scale up and down nicely.


You can find details here how to contribute to the project and how to work on the source code. Such as how to do a github PR:
http://camel.apache.org/contributing","nferraro:1480381557:2016-11-29T09:05:57.355+0000:1480381557:2016-11-29T09:05:57.355+0000:There is an ongoing discussion here: https://github.com/opensourcedesign/jobs/issues/108.

There are some proposals but we've not reached an agreement (although people say we will finalize it before January).
githubbot:1483258861:2017-01-01T16:21:01.812+0000:1483258861:2017-01-01T16:21:01.812+0000:GitHub user lanwen opened a pull request:

    https://github.com/apache/camel/pull/1369

    CAMEL-10543: New logo

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lanwen/camel CAMEL-10543_logo

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1369.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1369
    
----
commit d0e64104b4db2a082f5819eea87553304f56ab94
Author: Kirill Merkushev <lanwen@yandex.ru>
Date:   2017-01-01T16:20:07Z

    CAMEL-10543: New logo

----

githubbot:1487831378:2017-02-23T14:29:38.246+0000:1487831378:2017-02-23T14:29:38.246+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1486

    CAMEL-10543: New Apache Camel Logo

    Here is my proposal, heavily based on @lanwen work.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1486.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1486
    
----
commit 5c9214acd11063de6105a566729ce0df0a9bd06c
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-02-23T14:27:36Z

    CAMEL-10543: New Apache Camel Logo
    
    Here is my proposal, heavily based on @lanwen work.

----

githubbot:1488090806:2017-02-26T14:33:26.928+0000:1488090806:2017-02-26T14:33:26.928+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1494

    CAMEL-10543: New Apache Camel Logo

    I had another go at the logo, this one is based upon an icon made by
    Edward Boatman for the Noun project. I've purchased a royalty free usage
    license for it. It uses the Judson font by Daniel Johnson licensed under
    Open Font License[1]
    
    [1] http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL_web

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10543-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1494.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1494
    
----
commit c9066dd9e41b11c9abeb8b668dbba30b17ee066e
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-02-26T14:31:38Z

    CAMEL-10543: New Apache Camel Logo
    
    I had another go at the logo, this one is based upon an icon made by
    Edward Boatman for the Noun project. I've purchased a royalty free usage
    license for it. It uses the Judson font by Daniel Johnson licensed under
    Open Font License[1]
    
    [1] http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL_web

----

proyb7:1488270196:2017-02-28T16:23:16.295+0000:1488270196:2017-02-28T16:23:16.295+0000:New logo design with attached
proyb7:1488270213:2017-02-28T16:23:33.826+0000:1488270339:2017-02-28T16:25:39.131+0000:Please refer to the link image

http://imgur.com/a/Iddxe
lb:1488270370:2017-02-28T16:26:10.585+0000:1488270370:2017-02-28T16:26:10.585+0000:[~proyb7] do you mind doing a PR on GitHub ? So we can keep all the proposal in one place
proyb7:1488270492:2017-02-28T16:28:12.695+0000:1488270492:2017-02-28T16:28:12.695+0000:I tried to do PR, the button in that repo is disabled and JIRA image attach is not working properly.
bharadwaj:1488918229:2017-03-08T04:23:49.096+0000:1488918229:2017-03-08T04:23:49.096+0000:New proposal logo attached file : new_log_camel.jpg
zregvart:1489633054:2017-03-16T10:57:34.193+0000:1489633054:2017-03-16T10:57:34.193+0000:If anyone needs help creating a pull request for this please reach out to me, best way would be on IRC, look for {{zregvart}} on {{#apache-camel}}, see [Camel IRC Room|http://camel.apache.org/irc-room.html].
githubbot:1489978891:2017-03-20T11:01:31.784+0000:1489978891:2017-03-20T11:01:31.784+0000:GitHub user fi- opened a pull request:

    https://github.com/apache/camel/pull/1551

    [CAMEL-10543] new logo

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/fi-/camel new-logo

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1551.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1551
    
----
commit 39f97278925f18761b5334b7bf42a29621ce21ec
Author: fmj <fmj@touk.pl>
Date:   2017-03-20T10:59:16Z

    [CAMEL-10543] new logo

----

githubbot:1490134664:2017-03-22T06:17:44.812+0000:1490134664:2017-03-22T06:17:44.812+0000:GitHub user daklassen opened a pull request:

    https://github.com/apache/camel/pull/1556

    [WIP] CAMEL-10543: New Apache Camel Logo

    My proposal for the new logo. As this is just a first preview I am open for any kind of feedback/critics/change request. I will add final files (png, vector based, different sizes, ...) later.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/daklassen/camel CAMEL-10543

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1556.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1556
    
----
commit cc5281e52709a3733821cad73de89f74ff463321
Author: David Klassen <daviddd.kl@gmail.com>
Date:   2017-03-22T06:11:38Z

    First preview of new logo

----

githubbot:1490429030:2017-03-25T16:03:50.989+0000:1490429030:2017-03-25T16:03:50.989+0000:GitHub user dustmachine opened a pull request:

    https://github.com/apache/camel/pull/1571

    CAMEL-10543 sample new logo with camel in color

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dustmachine/camel color-camel-logo

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1571.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1571
    
----
commit 16ab48ebf196faab43f42d292b2c0d0608f5b07b
Author: Brad Parks <bradleyparks@gmail.com>
Date:   2017-03-25T15:59:39Z

    CAMEL-10543 sample new logo with camel in color

----

githubbot:1490429975:2017-03-25T16:19:35.976+0000:1490429975:2017-03-25T16:19:35.976+0000:GitHub user dustmachine opened a pull request:

    https://github.com/apache/camel/pull/1572

    CAMEL-10543 sample new logo with camel and pyramid

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dustmachine/camel pyramid-camel-logo

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1572.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1572
    
----
commit 49003d870f2388ece5c74499f1746822d095b017
Author: Brad Parks <bradleyparks@gmail.com>
Date:   2017-03-25T16:18:47Z

    CAMEL-10543 sample new logo with camel and pyramid

----

githubbot:1490472724:2017-03-26T04:12:04.430+0000:1490472724:2017-03-26T04:12:04.430+0000:Github user dustmachine closed the pull request at:

    https://github.com/apache/camel/pull/1571

githubbot:1490472740:2017-03-26T04:12:20.588+0000:1490472740:2017-03-26T04:12:20.588+0000:Github user dustmachine closed the pull request at:

    https://github.com/apache/camel/pull/1572

githubbot:1490480112:2017-03-26T06:15:12.143+0000:1490480112:2017-03-26T06:15:12.143+0000:GitHub user dustmachine opened a pull request:

    https://github.com/apache/camel/pull/1573

    CAMEL-10543: possible new logo with PD camel shape

    In the originally commissioned logo I could not vouch for provenance of camel shape. This revised logo uses a public domain camel shape turned into vectors by me personally

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dustmachine/camel color-camel-PD-shape-logo

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1573.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1573
    
----
commit 90ef569eee4f276cafa6bf59f2c9f5f8f1b8987a
Author: Brad Parks <bradleyparks@gmail.com>
Date:   2017-03-26T06:08:42Z

    CAMEL-10543: possible new logo with PD camel shape

----

githubbot:1490550578:2017-03-27T01:49:38.467+0000:1490550578:2017-03-27T01:49:38.467+0000:GitHub user dustmachine opened a pull request:

    https://github.com/apache/camel/pull/1575

    CAMEL-10543: possible new minimalist logo

    Another possible logo, very minimalist.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dustmachine/camel simple-camel-logo

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1575.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1575
    
----
commit e6645df77af6a0d7c9a3401bd5665cfc60542443
Author: Brad Parks <bradleyparks@gmail.com>
Date:   2017-03-27T01:46:23Z

    CAMEL-10543: possible new minimalist logo

----

zregvart:1494207460:2017-05-08T09:37:40.179+0000:1494207460:2017-05-08T09:37:40.179+0000:Hi we are voting on the received proposals, the vote is open till 15.5. see all the proposals and [cast the vote|https://goo.gl/forms/A3pIzPyWzU8rlMJ13] for the three designs you prefer the most.
Also read the news announcement on [Camel blog|https://camel.apache.org/2017/05/03/new-apache-camel-logo-voting-is-now-open.html].
githubbot:1512612516:2017-12-07T10:08:36.871+0000:1512612516:2017-12-07T10:08:36.871+0000:oscerd closed pull request #1369: CAMEL-10543: New logo
URL: https://github.com/apache/camel/pull/1369
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/camel.png b/docs/img/camel.png
new file mode 100644
index 00000000000..755972709f5
Binary files /dev/null and b/docs/img/camel.png differ
diff --git a/docs/img/camel.svg b/docs/img/camel.svg
new file mode 100644
index 00000000000..85dcc701aba
--- /dev/null
+++ b/docs/img/camel.svg
@@ -0,0 +1 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 450 450""><defs><style>.a{fill:#ba6500;}</style></defs><title>5cam</title><polygon class=""a"" points=""87.67 352.18 73.4 352.18 50.51 262.93 64.5 255.36 82.33 203.86 96.17 258.24 86.69 266.52 73.4 271.97 87.67 352.18""/><polygon class=""a"" points=""277.3 352.29 262.04 352.29 259.64 314.47 265.06 242.5 270.09 240.89 280.79 278.84 273.05 314.47 277.3 352.29""/><path class=""a"" d=""M416.25,116.56l-49.7-4.36-7.63-10.14-4.25,14.17-27.9,53-23.62.88-32.94-25.95L246.45,157,158.73,97.71,78.08,178.47,59,230.45,82.77,196l18.54,68.7-12,8.56,29.86,78.9h15.26L119,288.7l17.86-5.81-11.51-88.73,4.21,26L187,266.59s82.59-26.81,82.81-26.92l-14.76-54.34,28,93.83.65,25.17,8.94,47.84h11.77L300,304.34l4-24.19-5.67-62-.33-17,3.62,28.2L336.33,218,370,147.3l59,.1V128.55Zm-22.18,7.49-1.91-4.22,13.35,1.36Z""/></svg>
\ No newline at end of file
diff --git a/docs/img/camel@2x.png b/docs/img/camel@2x.png
new file mode 100644
index 00000000000..cf4d6c60587
Binary files /dev/null and b/docs/img/camel@2x.png differ
diff --git a/docs/img/logo-named.svg b/docs/img/logo-named.svg
new file mode 100644
index 00000000000..367e3efcb3b
--- /dev/null
+++ b/docs/img/logo-named.svg
@@ -0,0 +1 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 1165.7 504.6""><defs><style>.a{fill:#dd7300;}.b{fill:#0f0f0f;}.c{fill:#fff;}</style></defs><title>logo</title><path class=""a"" d=""M539.24,78.28h9.49l36,84.84H573l-8.62-20.82H522l-8.72,20.82H501.86Zm4.55,12.88h-.19L526,132.8h34.58Z""/><path class=""a"" d=""M596,78.28h25.18a53.25,53.25,0,0,1,11.23,1.16,27.61,27.61,0,0,1,9.49,3.87,19.54,19.54,0,0,1,6.59,7.17,22.7,22.7,0,0,1,2.42,11A23.06,23.06,0,0,1,648.29,113a20.1,20.1,0,0,1-6.78,7.17,27.21,27.21,0,0,1-9,3.68,46.44,46.44,0,0,1-9.3,1.07h-17V163H596.09V78.28Zm10.07,37.38h17c5,0,9.1-1.16,12.3-3.39s4.75-5.81,4.75-10.56-1.55-8.33-4.75-10.56-7.26-3.39-12.3-3.39h-17Z""/><path class=""a"" d=""M685.78,78.28h9.49l36,84.84H719.58L711,142.3H668.54l-8.72,20.82H648.39Zm4.55,12.88h-.19L672.51,132.8h34.58Z""/><path class=""a"" d=""M802,95.71A24.54,24.54,0,0,0,792.5,88a27.56,27.56,0,0,0-11.72-2.61,29,29,0,0,0-13,2.91A32.31,32.31,0,0,0,757.54,96a33.63,33.63,0,0,0-6.68,11.23,36.72,36.72,0,0,0-2.42,13.37,38.21,38.21,0,0,0,2.42,13.85,33.19,33.19,0,0,0,6.68,11.14A30.1,30.1,0,0,0,767.71,153a30.69,30.69,0,0,0,13.07,2.71,30.37,30.37,0,0,0,13.85-3.1,30.77,30.77,0,0,0,10.65-8.81l7.55,6.39A34.15,34.15,0,0,1,799,161.47a46,46,0,0,1-18.3,3.58,43.53,43.53,0,0,1-17-3.39,42.1,42.1,0,0,1-13.75-9.3,43.39,43.39,0,0,1-9.1-14,46.68,46.68,0,0,1-3.29-17.82,47.76,47.76,0,0,1,3.2-17.53,41.84,41.84,0,0,1,22.57-23.63,42.32,42.32,0,0,1,17.34-3.49A46.09,46.09,0,0,1,797.15,79a29.85,29.85,0,0,1,13.37,10.17Z""/><path class=""a"" d=""M826.89,78.28H837v35.93h45.33V78.28h10.07v84.84H882.28V123.6H837v39.51H826.89Z""/><path class=""a"" d=""M913.37,78.28h53.27v9.3H923.35v26.63h40.39v9.3H923.35v30.22h45.42V163h-55.5V78.28Z""/><path d=""M615.19,226.18a42.71,42.71,0,0,0-16.66-13.6A49.14,49.14,0,0,0,577.86,208,51.75,51.75,0,0,0,555,213.11a57.38,57.38,0,0,0-18,13.6,62.44,62.44,0,0,0-11.81,19.83A66.6,66.6,0,0,0,520.92,270a69,69,0,0,0,4.22,24.36A60.91,60.91,0,0,0,536.84,314a54.88,54.88,0,0,0,17.93,13.18,57.88,57.88,0,0,0,47.55-.53,55.49,55.49,0,0,0,18.77-15.5l13.29,11.18A61.43,61.43,0,0,1,610,342.17q-14.23,6.33-32.16,6.33a75.87,75.87,0,0,1-29.94-5.91,73.69,73.69,0,0,1-24.15-16.34,75.25,75.25,0,0,1-16-24.78,83,83,0,0,1-5.8-31.42,84,84,0,0,1,5.59-30.79,74.14,74.14,0,0,1,70.33-47.66,79.55,79.55,0,0,1,29.21,5.48A53.81,53.81,0,0,1,630.58,215Z""/><path d=""M654.83,258.66a46.4,46.4,0,0,1,18-11.49,63.23,63.23,0,0,1,21.19-3.69q21.93,0,31.63,10.33t9.7,31.42v42.39q0,4.22.42,8.75t1.05,8.33H721a34.41,34.41,0,0,1-.95-7.49q-.11-4.11-.11-7.27h-.42a38.6,38.6,0,0,1-13,12.44q-8.12,4.85-19.51,4.85a51.6,51.6,0,0,1-14.24-1.9,35.46,35.46,0,0,1-11.6-5.59,27.55,27.55,0,0,1-7.91-9.17,26.25,26.25,0,0,1-3-12.65q0-12.23,6.33-19.19a38.42,38.42,0,0,1,15.71-10.33,77.38,77.38,0,0,1,20.25-4.22q10.86-.84,19.93-.84h6.33v-3q0-10.75-6.43-16.24t-18-5.48a48.17,48.17,0,0,0-15.71,2.64,37.73,37.73,0,0,0-13.6,8.12Zm47.66,38.59q-15.82,0-25.1,4.43t-9.28,14.55q0,9.28,6.22,13.18t15.5,3.9a30.26,30.26,0,0,0,12.55-2.42,26.39,26.39,0,0,0,9-6.43,27.78,27.78,0,0,0,5.48-9.38,38.33,38.33,0,0,0,2.11-11.49v-6.33Z""/><path d=""M765.55,269.42q0-6.75-.42-12.65T764.7,246h15.61q0,4,.21,8t.21,8.22h.42a28.43,28.43,0,0,1,4.75-7,34.15,34.15,0,0,1,7.27-6,38.88,38.88,0,0,1,9.49-4.22A39.5,39.5,0,0,1,814,243.48a38.72,38.72,0,0,1,13.39,2,32.74,32.74,0,0,1,9,4.85,23.87,23.87,0,0,1,5.59,6.12q2,3.27,3.27,5.8a45.61,45.61,0,0,1,12.65-13.81q7.17-5,18.56-5,10.54,0,17.72,2.85a28.14,28.14,0,0,1,11.6,8.23,32.42,32.42,0,0,1,6.33,13.08,71.87,71.87,0,0,1,1.9,17.19V344.7H897.56v-59a46.56,46.56,0,0,0-1.05-9.91,23,23,0,0,0-3.79-8.65,19.91,19.91,0,0,0-7.38-6.12,26.4,26.4,0,0,0-11.81-2.32,23.72,23.72,0,0,0-9.91,2.11,24.9,24.9,0,0,0-8.12,5.91,27.71,27.71,0,0,0-5.48,9.17,33.88,33.88,0,0,0-2,11.91V344.7H831.55V288.82q0-16.45-4.43-23.3t-14.55-6.85a32.08,32.08,0,0,0-13.81,2.74,24.46,24.46,0,0,0-9.49,7.8,34.87,34.87,0,0,0-5.48,12,61.62,61.62,0,0,0-1.79,15.4V344.7H765.55Z""/><path d=""M1033.37,326.78q-8.86,11.39-19.4,15.92t-24.46,4.54a51,51,0,0,1-20.88-4.11A47,47,0,0,1,952.91,332,48.54,48.54,0,0,1,943,315.6a58.33,58.33,0,0,1-3.48-20.24,56.55,56.55,0,0,1,3.8-21,48.61,48.61,0,0,1,10.54-16.45,47.4,47.4,0,0,1,16-10.65,53,53,0,0,1,20.25-3.8,50.39,50.39,0,0,1,19,3.48A41.14,41.14,0,0,1,1024,257.08a45.51,45.51,0,0,1,9.6,16.24,65.66,65.66,0,0,1,3.37,21.83v5.27H957.24a34.55,34.55,0,0,0,3.06,12.13,35.1,35.1,0,0,0,6.85,10.12,31.64,31.64,0,0,0,9.91,6.85A30.25,30.25,0,0,0,989.5,332q10.76,0,18.14-3.79a41.23,41.23,0,0,0,13.29-11.18Zm-14.13-40.28q-.43-12.66-8.22-20.25t-21.51-7.59q-13.71,0-22.14,7.59T957.24,286.5Z""/><path d=""M1063.95,185.27h16.45V344.7h-16.45Z""/><path class=""b"" d=""M48.59,85.55V337.47c0,8.19,5.72,16,15.62,21.23L213.9,438.28c16.26,8.65,40,8.65,56.23,0L419.82,358.7c9.9-5.27,15.62-13,15.62-21.23V85.55c0-15.31-19.58-27.71-43.74-27.71H92.33C68.17,57.84,48.59,70.24,48.59,85.55Z""/><path class=""a"" d=""M69.38,103.37V328.2c0,7.31,5.11,14.25,13.94,18.95l133.59,71c14.51,7.72,35.67,7.72,50.19,0l133.59-71c8.84-4.7,13.94-11.64,13.94-18.95V103.37c0-13.66-17.48-24.73-39-24.73H108.42C86.86,78.63,69.38,89.71,69.38,103.37Z""/><polygon class=""c"" points=""134.16 328.17 123.08 328.17 105.32 258.9 116.17 253.03 130.01 213.06 140.75 255.27 133.4 261.69 123.08 265.92 134.16 328.17""/><polygon class=""c"" points=""281.32 328.26 269.48 328.26 267.62 298.91 271.83 243.05 275.73 241.8 284.03 271.25 278.03 298.91 281.32 328.26""/><path class=""c"" d=""M389.16,145.31l-38.57-3.38-5.92-7.87-3.3,11-21.65,41.11-18.33.68-25.56-20.14-18.44,10-68.08-46-62.59,62.67-14.8,40.34L130.35,207l14.39,53.32-9.31,6.65,23.17,61.24h11.84L158.5,278.9l13.86-4.51-8.93-68.86,3.27,20.18,44.57,36s64.1-20.81,64.27-20.89l-11.46-42.17,21.74,72.82.51,19.54,6.94,37.13h9.13L298.92,291,302,272.27l-4.4-48.13-.25-13.19,2.81,21.88,26.93-8.76,26.16-54.91,45.76.08V154.62ZM372,151.13l-1.48-3.28,10.36,1.06Z""/></svg>
\ No newline at end of file
diff --git a/docs/img/logo.svg b/docs/img/logo.svg
new file mode 100644
index 00000000000..bac0402cf4b
--- /dev/null
+++ b/docs/img/logo.svg
@@ -0,0 +1 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 462 504.6""><defs><style>.a{fill:#0f0f0f;}.b{fill:#dd7300;}.c{fill:#fff;}</style></defs><title>logo</title><path class=""a"" d=""M29.57,94.13V346.05c0,8.19,5.72,16,15.62,21.23l149.68,79.58c16.26,8.65,40,8.65,56.23,0L400.8,367.28c9.9-5.27,15.62-13,15.62-21.23V94.13c0-15.31-19.58-27.71-43.74-27.71H73.31C49.16,66.42,29.57,78.83,29.57,94.13Z""/><path class=""b"" d=""M50.37,112V336.79c0,7.31,5.11,14.25,13.94,18.95l133.59,71c14.51,7.72,35.67,7.72,50.19,0l133.59-71c8.84-4.7,13.94-11.64,13.94-18.95V112c0-13.66-17.48-24.73-39-24.73H89.4C67.84,87.22,50.37,98.29,50.37,112Z""/><polygon class=""c"" points=""115.14 336.76 104.06 336.76 86.3 267.49 97.16 261.62 111 221.65 121.74 263.85 114.38 270.28 104.06 274.51 115.14 336.76""/><polygon class=""c"" points=""262.31 336.84 250.47 336.84 248.61 307.49 252.81 251.63 256.71 250.39 265.01 279.84 259.01 307.49 262.31 336.84""/><path class=""c"" d=""M370.15,153.9l-38.57-3.38-5.92-7.87-3.3,11-21.65,41.11-18.33.68L256.81,175.3l-18.44,10-68.08-46L107.7,201.94,92.9,242.28l18.44-26.73,14.39,53.32-9.31,6.65,23.17,61.24h11.84l-11.94-49.27L153.34,283l-8.93-68.86,3.27,20.18,44.57,36s64.1-20.81,64.27-20.89l-11.46-42.17,21.74,72.82.51,19.54,6.94,37.13h9.13l-3.47-37.13L283,280.85l-4.4-48.13-.25-13.19,2.81,21.88,26.93-8.76,26.16-54.91,45.76.08V163.2Zm-17.21,5.81-1.48-3.28,10.36,1.06Z""/></svg>
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612516:2017-12-07T10:08:36.915+0000:1512612516:2017-12-07T10:08:36.915+0000:oscerd commented on issue #1369: CAMEL-10543: New logo
URL: https://github.com/apache/camel/pull/1369#issuecomment-349921823
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612517:2017-12-07T10:08:37.500+0000:1512612517:2017-12-07T10:08:37.500+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1369

githubbot:1512612544:2017-12-07T10:09:04.328+0000:1512612544:2017-12-07T10:09:04.328+0000:oscerd commented on issue #1486: CAMEL-10543: New Apache Camel Logo
URL: https://github.com/apache/camel/pull/1486#issuecomment-349921985
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612544:2017-12-07T10:09:04.831+0000:1512612544:2017-12-07T10:09:04.831+0000:oscerd closed pull request #1486: CAMEL-10543: New Apache Camel Logo
URL: https://github.com/apache/camel/pull/1486
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/camel.png b/docs/img/camel.png
new file mode 100644
index 00000000000..755972709f5
Binary files /dev/null and b/docs/img/camel.png differ
diff --git a/docs/img/camel@2x.png b/docs/img/camel@2x.png
new file mode 100644
index 00000000000..cf4d6c60587
Binary files /dev/null and b/docs/img/camel@2x.png differ
diff --git a/docs/img/logo-named.svg b/docs/img/logo-named.svg
new file mode 100644
index 00000000000..6eae6189708
--- /dev/null
+++ b/docs/img/logo-named.svg
@@ -0,0 +1,208 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<svg
+   xmlns:dc=""http://purl.org/dc/elements/1.1/""
+   xmlns:cc=""http://creativecommons.org/ns#""
+   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
+   xmlns:svg=""http://www.w3.org/2000/svg""
+   xmlns=""http://www.w3.org/2000/svg""
+   xmlns:xlink=""http://www.w3.org/1999/xlink""
+   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
+   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
+   viewBox=""0 0 1008 504.6""
+   id=""svg3077""
+   version=""1.1""
+   inkscape:version=""0.48.4 r9939""
+   width=""100%""
+   height=""100%""
+   sodipodi:docname=""logo.svg"">
+  <metadata
+     id=""metadata3097"">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="""">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" />
+        <dc:title>logo</dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <sodipodi:namedview
+     pagecolor=""#ffffff""
+     bordercolor=""#666666""
+     borderopacity=""1""
+     objecttolerance=""10""
+     gridtolerance=""10""
+     guidetolerance=""10""
+     inkscape:pageopacity=""0""
+     inkscape:pageshadow=""2""
+     inkscape:window-width=""1920""
+     inkscape:window-height=""1043""
+     id=""namedview3095""
+     showgrid=""false""
+     showguides=""true""
+     inkscape:guide-bbox=""true""
+     inkscape:zoom=""0.97858528""
+     inkscape:cx=""543.07032""
+     inkscape:cy=""161.88135""
+     inkscape:window-x=""1920""
+     inkscape:window-y=""0""
+     inkscape:window-maximized=""1""
+     inkscape:current-layer=""layer4"" />
+  <defs
+     id=""defs3079"">
+    <linearGradient
+       id=""linearGradient3871"">
+      <stop
+         style=""stop-color:#ba6500;stop-opacity:1;""
+         offset=""0""
+         id=""stop3873"" />
+      <stop
+         style=""stop-color:#ff9727;stop-opacity:1;""
+         offset=""1""
+         id=""stop3875"" />
+    </linearGradient>
+    <style
+       id=""style3081"">.a{fill:#0f0f0f;}.b{fill:#dd7300;}.c{fill:#fff;}</style>
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3883""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,205.85988,9.145288)""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925"" />
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3890""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,205.85988,9.1452911)""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925"" />
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3893""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,480.0691,60.558738)""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""linearGradient5175""
+       gradientUnits=""userSpaceOnUse""
+       x1=""55.046875""
+       y1=""252.3""
+       x2=""406.95312""
+       y2=""252.3"" />
+  </defs>
+  <title
+     id=""title3083"">logo</title>
+  <g
+     inkscape:groupmode=""layer""
+     id=""layer4""
+     inkscape:label=""Apache Camel""
+     style=""display:inline"">
+    <g
+       id=""g5169"">
+      <path
+         sodipodi:nodetypes=""sssssssssss""
+         inkscape:connector-curvature=""0""
+         id=""shield""
+         d=""m 84.796875,55.940406 c -14.277576,0 -25.75,11.503674 -25.75,25.781249 0,82.906245 0,165.812495 0,248.718735 0,8.47731 3.709584,16.42991 10.3125,20.65625 0,0 95.604175,61.19346 143.406245,91.79021 12.0252,7.69699 24.4123,7.69699 36.4375,0 47.80208,-30.59675 143.40625,-91.79021 143.40625,-91.79021 6.60291,-4.22633 10.34375,-12.17894 10.34375,-20.65625 0,-82.90624 0,-165.81249 0,-248.718735 0,-14.277575 -11.50367,-25.781249 -25.78125,-25.781249 -97.45833,0 -194.91667,0 -292.374995,0 z""
+         style=""fill:url(#linearGradient5175);fill-opacity:1;stroke:#505050;stroke-width:8;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"" />
+      <path
+         inkscape:connector-curvature=""0""
+         id=""right_shield""
+         transform=""translate(0,-3.0517578e-6)""
+         d=""m 230.8125,72.3125 0,359.96875 c 2.76172,0.0473 5.50383,-1.15842 9.40625,-3.65625 47.80333,-30.59755 143.40625,-91.78125 143.40625,-91.78125 1.02966,-0.65905 2.6875,-3.06891 2.6875,-6.65625 l 0,-248.71875 c 0,-5.349105 -3.80714,-9.15625 -9.15625,-9.15625 l -146.34375,0 z""
+         style=""fill:#ff8d04;fill-opacity:1;stroke:none"" />
+      <path
+         inkscape:connector-curvature=""0""
+         id=""left_camel""
+         transform=""translate(0,-3.0517578e-6)""
+         d=""M 164.84375,127.5625 102.25,190.21875 87.4375,230.5625 l 18.4375,-26.75 14.40625,53.3125 -9.3125,6.65625 23.15625,61.25 11.84375,0 -11.9375,-49.28125 13.84375,-4.46875 -8.90625,-68.875 3.25,20.1875 44.5625,36 c 0,0 25.02763,-8.13502 44.03125,-14.3125 l 0,-72.125 -65.96875,-44.59375 z""
+         style=""fill:#f4f4f4;fill-opacity:1;display:inline"" />
+      <path
+         inkscape:connector-curvature=""0""
+         inkscape:label=""#right_camel""
+         id=""right_camel""
+         transform=""translate(0,-3.0517578e-6)""
+         d=""m 320.21875,130.90625 -3.3125,11 -21.65625,41.125 -18.3125,0.6875 -25.59375,-20.15625 -18.4375,10 -2.09375,-1.40625 0,72.125 c 8.74123,-2.8415 20.19644,-6.56855 20.25,-6.59375 l -11.46875,-42.15625 21.75,72.8125 0.5,19.53125 6.9375,37.15625 9.15625,0 -3.46875,-37.15625 3.0625,-18.75 -4.375,-48.125 -0.25,-13.1875 2.8125,21.875 L 302.625,220.90625 328.78125,166 l 45.78125,0.0937 0,-14.625 -9.875,-9.3125 -38.5625,-3.375 -5.90625,-7.875 z M 346,144.6875 356.375,145.75 347.5,147.96875 346,144.6875 z""
+         style=""fill:#ffffff;display:inline"" />
+    </g>
+    <g
+       style=""font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#505050;fill-opacity:1;stroke:none;font-family:Sans""
+       id=""text5177"">
+      <path
+         d=""m 558.34776,368.77033 0,-30.96 -12.96,0 -4.5,21.78 -2.7,2.7 c -4.32,1.08 -7.92001,1.62 -10.98,1.62 -26.81998,0 -43.2,-19.08003 -43.2,-51.3 0,-31.85997 16.20002,-50.76 40.86,-50.76 4.67999,0 9.36,0.9 14.22,2.7 l 2.52,3.06 3.42,19.26 13.32,0 0,-30.06 c -12.05999,-4.31999 -24.30002,-6.66 -36.72,-6.66 -18.71999,0 -34.02002,5.58001 -45.36,16.56 -12.23999,11.69999 -18.72,27.72002 -18.72,46.08 0,23.03998 11.16001,43.20001 29.88,54.36 8.81999,5.22 20.16001,8.1 33.12,8.1 13.13998,0 25.74001,-2.16 37.8,-6.48""
+         style=""font-size:180px;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#505050;font-family:Bitstream Charter;-inkscape-font-specification:Bitstream Charter Bold""
+         id=""path5778"" />
+      <path
+         d=""m 626.86869,362.83033 2.34,10.26 32.04,0 0,-7.92 -9.54,-0.9 -2.34,-2.52 0,-46.62 c 0,-23.03997 -8.46002,-31.86 -33.66,-31.86 -23.75997,0 -39.24,10.62001 -39.24,20.88 0,4.86 2.88001,6.66 8.28,6.66 l 16.56,0 0,-16.92 c 3.24,-0.72 5.94001,-1.08 8.64,-1.08 11.87999,0 17.1,5.76001 17.1,18.72 l 0,5.4 c -37.61996,8.45999 -54.72,13.68002 -54.72,34.38 0,13.67999 9.72002,23.4 23.58,23.4 9.71999,0 19.44001,-4.14001 30.96,-11.88 m 0,-7.38 c -7.01999,3.6 -12.78,5.4 -17.46,5.4 -8.27999,0 -13.32,-5.22001 -13.32,-13.5 0,-11.87999 9.54002,-16.56 30.78,-21.24 l 0,29.34""
+         style=""font-size:180px;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#505050;font-family:Bitstream Charter;-inkscape-font-specification:Bitstream Charter Bold""
+         id=""path5780"" />
+      <path
+         d=""m 753.39463,295.69033 c -4.86,-8.27999 -12.06001,-12.6 -21.06,-12.6 -7.91999,0 -17.28001,4.14001 -29.52,11.34 l 0,-10.62 -8.64,0 -25.38,8.46 0,7.2 11.7,0 0,62.1 -2.52,2.7 -9.18,0.72 0,8.1 44.1,0 0,-8.1 -7.56,-0.72 -2.52,-2.7 0,-59.4 c 5.75999,-2.16 10.8,-3.24 15.12,-3.24 11.51999,0 16.2,5.94001 16.2,18.54 l 0,43.74 -2.52,3.06 -7.38,0.72 0,8.1 42.48,0 0,-7.92 -8.1,-0.9 -2.52,-2.7 0,-59.04 c 5.93999,-2.16 10.98,-3.42 15.48,-3.42 11.87999,0 16.56,5.94002 16.56,19.44 l 0,43.02 -2.52,2.7 -7.74,0.72 0,8.1 44.28,0 0,-8.1 -9.54,-0.72 -2.34,-2.7 0,-48.24 c 0,-19.97998 -8.28002,-29.88 -25.02,-29.88 -6.65999,0 -17.46001,3.96001 -31.86,12.24""
+         style=""font-size:180px;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#505050;font-family:Bitstream Charter;-inkscape-font-specification:Bitstream Charter Bold""
+         id=""path5782"" />
+      <path
+         d=""m 912.25869,350.77033 c -10.43999,6.66 -20.16001,9.9 -29.7,9.9 -17.81998,0 -28.98,-12.24002 -28.98,-32.94 0,-0.18 0,-0.36 0,-0.54 l 58.86,0 c 0,-1.08 0,-2.34 0,-3.42 0,-25.91997 -13.86002,-40.68 -37.44,-40.68 -25.91997,0 -44.46,18.90003 -44.46,46.44 0,27.17997 17.64003,45.18 44.46,45.18 12.59999,0 25.20001,-3.6 37.26,-10.62 l 0,-13.32 m -23.4,-33.12 -34.38,0 c 0.54,-15.65998 7.92001,-24.66 18.72,-24.66 9.89999,0 15.66,7.74002 15.66,22.68 0,0.72 0,1.26 0,1.98""
+         style=""font-size:180px;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#505050;font-family:Bitstream Charter;-inkscape-font-specification:Bitstream Charter Bold""
+         id=""path5784"" />
+      <path
+         d=""m 922.23744,373.09033 48.24,0 0,-7.92 -10.44,-1.08 -2.7,-2.88 0,-121.14 -7.92,0 -27.18,8.64 0,7.02 12.96,0 0,105.84 -2.52,2.52 -10.44,1.08 0,7.92""
+         style=""font-size:180px;font-variant:normal;font-weight:bold;font-stretch:normal;fill:#505050;font-family:Bitstream Charter;-inkscape-font-specification:Bitstream Charter Bold""
+         id=""path5786"" />
+    </g>
+    <g
+       id=""g5788"">
+      <path
+         id=""path5487""
+         d=""m 457.54775,192.81845 26.27057,-62.79461 h 5.04182 l 26.27055,62.79461 h -6.63398 l -8.14121,-19.63659 h -28.21299 l -8.04569,19.63659 h -6.54907 z m 28.83923,-55.54499 -12.91768,31.04702 h 25.47449 l -12.55681,-31.04702 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#ff8d04;fill-opacity:1"" />
+      <path
+         id=""path5489""
+         d=""m 521.91328,192.81845 v -62.79461 h 26.0052 c 10.79481,0 18.57514,9.99874 18.57514,19.7215 0,10.26409 -7.24962,19.90194 -18.04443,19.90194 h -20.43265 v 23.17117 h -6.10326 z m 6.10326,-28.6588 h 20.07176 c 7.43007,0 12.20654,-6.81442 12.20654,-14.41431 0,-7.87586 -5.8379,-14.24448 -12.73725,-14.24448 h -19.54105 v 28.65879 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#ff8d04;fill-opacity:1"" />
+      <path
+         id=""path5491""
+         d=""m 563.05457,192.81845 26.27057,-62.79461 h 5.04182 l 26.27056,62.79461 h -6.63397 l -8.14123,-19.63659 h -28.21299 l -8.04569,19.63659 h -6.54906 z m 28.82863,-55.54499 -12.9177,31.04702 h 25.47449 L 591.8832,137.27346 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#ff8d04;fill-opacity:1"" />
+      <path
+         id=""path5493""
+         d=""m 650.34713,129.67357 c 11.14508,0 19.2757,5.65746 23.17116,13.71376 l -4.95691,3.00387 c -3.98038,-8.31105 -11.76072,-11.14509 -18.57514,-11.14509 -15.04056,0 -23.25609,13.44841 -23.25609,26.09012 0,13.88359 10.16858,26.4404 23.52145,26.4404 7.07979,0 15.39083,-3.5346 19.37122,-11.67581 l 5.12674,2.65359 c -4.0653,9.37248 -15.21039,14.59475 -24.84823,14.59475 -17.24836,0 -29.35935,-16.45227 -29.35935,-32.37382 0,-15.12548 10.86911,-31.30177 29.80515,-31.30177 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#ff8d04;fill-opacity:1"" />
+      <path
+         id=""path5495""
+         d=""m 732.9163,130.02384 v 62.79461 h -6.18818 v -29.35934 h -37.23521 v 29.35934 h -6.10326 v -62.79461 h 6.10326 v 27.94763 h 37.23521 v -27.94763 h 6.18818 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#ff8d04;fill-opacity:1"" />
+      <path
+         id=""path5497""
+         d=""m 789.28922,187.33082 v 5.48763 h -42.19213 v -62.79461 h 41.39604 v 5.48764 h -35.29277 v 22.64044 h 30.78166 v 5.21166 h -30.78166 v 23.96724 h 36.08885 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#ff8d04;fill-opacity:1"" />
+      <path
+         id=""path5671""
+         d=""m 804.76496,129.38698 c 0.9553,0.9553 1.43292,2.11226 1.43292,3.46029 0,1.34802 -0.47762,2.50498 -1.43292,3.47089 -0.9553,0.96591 -2.12291,1.45417 -3.48153,1.45417 -1.36927,0 -2.52623,-0.47765 -3.47089,-1.43294 -0.94467,-0.95529 -1.42234,-2.11225 -1.42234,-3.46028 0,-1.34802 0.47767,-2.50499 1.43297,-3.4709 0.9553,-0.96591 2.11226,-1.45417 3.4709,-1.45417 1.35863,0 2.51559,0.47765 3.47089,1.43294 z m -0.41397,6.52784 c 0.83853,-0.84915 1.25248,-1.86813 1.25248,-3.05694 0,-1.18881 -0.41395,-2.19717 -1.24184,-3.03571 -0.82793,-0.83853 -1.84694,-1.26311 -3.04634,-1.26311 -1.1994,0 -2.21842,0.42458 -3.05692,1.26311 -0.82794,0.84915 -1.25253,1.86813 -1.25253,3.05694 0,1.18881 0.41396,2.20779 1.23131,3.04632 0.82787,0.83854 1.83624,1.26311 3.03571,1.26311 1.1994,0 2.23963,-0.42457 3.07813,-1.27372 z m -0.68992,-4.00162 c 0,0.881 -0.38211,1.43294 -1.15696,1.65585 l 1.4117,1.91058 h -1.13574 l -1.2737,-1.7726 h -1.1676 v 1.7726 h -0.92345 v -5.30718 h 1.99548 c 0.80671,0 1.3799,0.13798 1.73016,0.41396 0.35025,0.27597 0.52011,0.72177 0.52011,1.32679 z m -1.17818,0.74301 c 0.18044,-0.1486 0.27597,-0.40335 0.27597,-0.75362 0,-0.35028 -0.0955,-0.59441 -0.2866,-0.72178 -0.19109,-0.13799 -0.52013,-0.20167 -1.00838,-0.20167 h -1.1251 v 1.91059 h 1.10388 c 0.50948,0 0.84916,-0.0743 1.04024,-0.23352 z""
+         inkscape:connector-curvature=""0""
+         style=""fill:#6d6e71"" />
+    </g>
+  </g>
+</svg>
diff --git a/docs/img/logo.svg b/docs/img/logo.svg
new file mode 100644
index 00000000000..4ff15d5be94
--- /dev/null
+++ b/docs/img/logo.svg
@@ -0,0 +1,156 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<svg
+   xmlns:dc=""http://purl.org/dc/elements/1.1/""
+   xmlns:cc=""http://creativecommons.org/ns#""
+   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
+   xmlns:svg=""http://www.w3.org/2000/svg""
+   xmlns=""http://www.w3.org/2000/svg""
+   xmlns:xlink=""http://www.w3.org/1999/xlink""
+   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
+   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
+   viewBox=""0 0 462 504.6""
+   id=""svg3077""
+   version=""1.1""
+   inkscape:version=""0.48.4 r9939""
+   width=""100%""
+   height=""100%""
+   sodipodi:docname=""logo.svg"">
+  <metadata
+     id=""metadata3097"">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="""">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" />
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <sodipodi:namedview
+     pagecolor=""#ffffff""
+     bordercolor=""#666666""
+     borderopacity=""1""
+     objecttolerance=""10""
+     gridtolerance=""10""
+     guidetolerance=""10""
+     inkscape:pageopacity=""0""
+     inkscape:pageshadow=""2""
+     inkscape:window-width=""1920""
+     inkscape:window-height=""1043""
+     id=""namedview3095""
+     showgrid=""false""
+     showguides=""true""
+     inkscape:guide-bbox=""true""
+     inkscape:zoom=""1.1911232""
+     inkscape:cx=""191.30543""
+     inkscape:cy=""196.92066""
+     inkscape:window-x=""1920""
+     inkscape:window-y=""0""
+     inkscape:window-maximized=""1""
+     inkscape:current-layer=""layer4"" />
+  <defs
+     id=""defs3079"">
+    <linearGradient
+       id=""linearGradient3871"">
+      <stop
+         style=""stop-color:#ba6500;stop-opacity:1;""
+         offset=""0""
+         id=""stop3873"" />
+      <stop
+         style=""stop-color:#ff9727;stop-opacity:1;""
+         offset=""1""
+         id=""stop3875"" />
+    </linearGradient>
+    <style
+       id=""style3081"">.a{fill:#0f0f0f;}.b{fill:#dd7300;}.c{fill:#fff;}</style>
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3879""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,480.46785,60.673557)""
+       gradientUnits=""userSpaceOnUse"" />
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3883""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,205.85988,9.145288)""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925"" />
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3890""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,205.85988,9.1452911)""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925"" />
+    <radialGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""radialGradient3893""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.0102084,0.8786571,-0.99822367,0.01159755,480.0691,60.558738)""
+       cx=""42.470917""
+       cy=""414.79904""
+       fx=""42.470917""
+       fy=""414.79904""
+       r=""180.93925"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3871""
+       id=""linearGradient5141""
+       x1=""55.046875""
+       y1=""252.3""
+       x2=""406.95312""
+       y2=""252.3""
+       gradientUnits=""userSpaceOnUse"" />
+  </defs>
+  <title
+     id=""title3083"">logo</title>
+  <g
+     inkscape:groupmode=""layer""
+     id=""layer4""
+     inkscape:label=""Apache Camel""
+     style=""display:inline"">
+    <g
+       id=""g5169"">
+      <path
+         sodipodi:nodetypes=""sssssssssss""
+         inkscape:connector-curvature=""0""
+         id=""shield""
+         d=""m 84.796875,55.940406 c -14.277576,0 -25.75,11.503674 -25.75,25.781249 0,82.906245 0,165.812495 0,248.718735 0,8.47731 3.709584,16.42991 10.3125,20.65625 0,0 95.604175,61.19346 143.406245,91.79021 12.0252,7.69699 24.4123,7.69699 36.4375,0 47.80208,-30.59675 143.40625,-91.79021 143.40625,-91.79021 6.60291,-4.22633 10.34375,-12.17894 10.34375,-20.65625 0,-82.90624 0,-165.81249 0,-248.718735 0,-14.277575 -11.50367,-25.781249 -25.78125,-25.781249 -97.45833,0 -194.91667,0 -292.374995,0 z""
+         style=""fill:url(#linearGradient5141);fill-opacity:1;stroke:#505050;stroke-width:8;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"" />
+      <path
+         inkscape:connector-curvature=""0""
+         id=""right_shield""
+         transform=""translate(0,-3.0517578e-6)""
+         d=""m 230.8125,72.3125 0,359.96875 c 2.76172,0.0473 5.50383,-1.15842 9.40625,-3.65625 47.80333,-30.59755 143.40625,-91.78125 143.40625,-91.78125 1.02966,-0.65905 2.6875,-3.06891 2.6875,-6.65625 l 0,-248.71875 c 0,-5.349105 -3.80714,-9.15625 -9.15625,-9.15625 l -146.34375,0 z""
+         style=""fill:#ff8d04;fill-opacity:1;stroke:none"" />
+      <path
+         inkscape:connector-curvature=""0""
+         id=""left_camel""
+         transform=""translate(0,-3.0517578e-6)""
+         d=""M 164.84375,127.5625 102.25,190.21875 87.4375,230.5625 l 18.4375,-26.75 14.40625,53.3125 -9.3125,6.65625 23.15625,61.25 11.84375,0 -11.9375,-49.28125 13.84375,-4.46875 -8.90625,-68.875 3.25,20.1875 44.5625,36 c 0,0 25.02763,-8.13502 44.03125,-14.3125 l 0,-72.125 -65.96875,-44.59375 z""
+         style=""fill:#f4f4f4;fill-opacity:1;display:inline"" />
+      <path
+         inkscape:connector-curvature=""0""
+         inkscape:label=""#right_camel""
+         id=""right_camel""
+         transform=""translate(0,-3.0517578e-6)""
+         d=""m 320.21875,130.90625 -3.3125,11 -21.65625,41.125 -18.3125,0.6875 -25.59375,-20.15625 -18.4375,10 -2.09375,-1.40625 0,72.125 c 8.74123,-2.8415 20.19644,-6.56855 20.25,-6.59375 l -11.46875,-42.15625 21.75,72.8125 0.5,19.53125 6.9375,37.15625 9.15625,0 -3.46875,-37.15625 3.0625,-18.75 -4.375,-48.125 -0.25,-13.1875 2.8125,21.875 L 302.625,220.90625 328.78125,166 l 45.78125,0.0937 0,-14.625 -9.875,-9.3125 -38.5625,-3.375 -5.90625,-7.875 z M 346,144.6875 356.375,145.75 347.5,147.96875 346,144.6875 z""
+         style=""fill:#ffffff;display:inline"" />
+    </g>
+  </g>
+</svg>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612545:2017-12-07T10:09:05.496+0000:1512612545:2017-12-07T10:09:05.496+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1486

githubbot:1512612553:2017-12-07T10:09:13.418+0000:1512612553:2017-12-07T10:09:13.418+0000:oscerd commented on issue #1494: CAMEL-10543: New Apache Camel Logo
URL: https://github.com/apache/camel/pull/1494#issuecomment-349922026
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612554:2017-12-07T10:09:14.013+0000:1512612554:2017-12-07T10:09:14.013+0000:oscerd closed pull request #1494: CAMEL-10543: New Apache Camel Logo
URL: https://github.com/apache/camel/pull/1494
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/logo-large.png b/docs/img/logo-large.png
new file mode 100644
index 00000000000..7d85b6b5c23
Binary files /dev/null and b/docs/img/logo-large.png differ
diff --git a/docs/img/logo-medium-d.png b/docs/img/logo-medium-d.png
new file mode 100644
index 00000000000..362a3fae89e
Binary files /dev/null and b/docs/img/logo-medium-d.png differ
diff --git a/docs/img/logo-medium.png b/docs/img/logo-medium.png
new file mode 100644
index 00000000000..176d5d313ad
Binary files /dev/null and b/docs/img/logo-medium.png differ
diff --git a/docs/img/logo-template.svg b/docs/img/logo-template.svg
new file mode 100644
index 00000000000..5d9b74d527d
--- /dev/null
+++ b/docs/img/logo-template.svg
@@ -0,0 +1,1315 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc=""http://purl.org/dc/elements/1.1/""
+   xmlns:cc=""http://creativecommons.org/ns#""
+   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
+   xmlns:svg=""http://www.w3.org/2000/svg""
+   xmlns=""http://www.w3.org/2000/svg""
+   xmlns:xlink=""http://www.w3.org/1999/xlink""
+   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
+   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
+   width=""744.09448819""
+   height=""1052.3622047""
+   id=""svg5193""
+   version=""1.1""
+   inkscape:version=""0.48.4 r9939""
+   sodipodi:docname=""logo-template.svg"">
+  <defs
+     id=""defs5195"">
+    <linearGradient
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)""
+       y2=""-3860.573""
+       x2=""-3987.5886""
+       y1=""-4143.6401""
+       x1=""-4229.6655""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient4556"">
+      <stop
+         id=""stop4558""
+         style=""stop-color:#f6e423;stop-opacity:1;""
+         offset=""0"" />
+      <stop
+         id=""stop4560""
+         style=""stop-color:#F79A23""
+         offset=""0.41190839"" />
+      <stop
+         id=""stop4562""
+         style=""stop-color:#E97826""
+         offset=""0.73270744"" />
+    </linearGradient>
+    <linearGradient
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)""
+       y2=""-3860.573""
+       x2=""-3987.5886""
+       y1=""-4143.6401""
+       x1=""-4229.6655""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient4332"">
+      <stop
+         id=""stop4334""
+         style=""stop-color:#F69923""
+         offset=""0"" />
+      <stop
+         id=""stop4336""
+         style=""stop-color:#F79A23""
+         offset=""0.3123"" />
+      <stop
+         id=""stop4338""
+         style=""stop-color:#E97826""
+         offset=""0.37369284"" />
+    </linearGradient>
+    <linearGradient
+       id=""linearGradient4324""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-4229.6655""
+       y1=""-4143.6401""
+       x2=""-3987.5886""
+       y2=""-3860.573""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0""
+         style=""stop-color:#F69923""
+         id=""stop4326"" />
+      <stop
+         offset=""0.45342046""
+         style=""stop-color:#F79A23""
+         id=""stop4328"" />
+      <stop
+         offset=""0.9569366""
+         style=""stop-color:#E97826""
+         id=""stop4330"" />
+    </linearGradient>
+    <linearGradient
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)""
+       y2=""-3860.573""
+       x2=""-3987.5886""
+       y1=""-4143.6401""
+       x1=""-4229.6655""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient4283"">
+      <stop
+         id=""stop4285""
+         style=""stop-color:#F69923""
+         offset=""0"" />
+      <stop
+         id=""stop4287""
+         style=""stop-color:#F79A23""
+         offset=""0.62594879"" />
+      <stop
+         id=""stop4289""
+         style=""stop-color:#E97826""
+         offset=""0.9569366"" />
+    </linearGradient>
+    <linearGradient
+       id=""linearGradient4214"">
+      <stop
+         style=""stop-color:#803300;stop-opacity:1;""
+         offset=""0""
+         id=""stop4216"" />
+      <stop
+         id=""stop4218""
+         offset=""0.762034""
+         style=""stop-color:#aa4400;stop-opacity:1;"" />
+      <stop
+         id=""stop4220""
+         offset=""1""
+         style=""stop-color:#d45500;stop-opacity:1;"" />
+    </linearGradient>
+    <linearGradient
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)""
+       y2=""-3860.573""
+       x2=""-3987.5886""
+       y1=""-4143.6401""
+       x1=""-4229.6655""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient3949"">
+      <stop
+         id=""stop3951""
+         style=""stop-color:#F69923""
+         offset=""0"" />
+      <stop
+         id=""stop3953""
+         style=""stop-color:#F79A23""
+         offset=""0.08047844"" />
+      <stop
+         id=""stop3955""
+         style=""stop-color:#E97826""
+         offset=""0.41874287"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5930"">
+      <stop
+         style=""stop-color:#d45500;stop-opacity:1;""
+         offset=""0""
+         id=""stop5932"" />
+      <stop
+         style=""stop-color:#d45500;stop-opacity:0;""
+         offset=""1""
+         id=""stop5934"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5922"">
+      <stop
+         style=""stop-color:#d45500;stop-opacity:1;""
+         offset=""0""
+         id=""stop5924"" />
+      <stop
+         style=""stop-color:#d45500;stop-opacity:0;""
+         offset=""1""
+         id=""stop5926"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5914"">
+      <stop
+         style=""stop-color:#d45500;stop-opacity:1;""
+         offset=""0""
+         id=""stop5916"" />
+      <stop
+         style=""stop-color:#d45500;stop-opacity:0;""
+         offset=""1""
+         id=""stop5918"" />
+    </linearGradient>
+    <linearGradient
+       id=""linearGradient5337"">
+      <stop
+         id=""stop5345""
+         offset=""0""
+         style=""stop-color:#803300;stop-opacity:1;"" />
+      <stop
+         style=""stop-color:#aa4400;stop-opacity:1;""
+         offset=""0.5""
+         id=""stop5347"" />
+      <stop
+         style=""stop-color:#d45500;stop-opacity:1;""
+         offset=""1""
+         id=""stop5341"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient5867""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(37.767481,218.74544)""
+       x1=""136.5518""
+       y1=""307.43564""
+       x2=""532.00769""
+       y2=""307.43564"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient5912""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(31.577115,-72.201752)""
+       x1=""136.5518""
+       y1=""307.43564""
+       x2=""532.00769""
+       y2=""307.43564"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5914""
+       id=""linearGradient5920""
+       x1=""174.32097""
+       y1=""526.17188""
+       x2=""351.875""
+       y2=""526.17188""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(2.4761463,-320.66095)"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5922""
+       id=""linearGradient5928""
+       x1=""248.9375""
+       y1=""530.28125""
+       x2=""446.5625""
+       y2=""530.28125""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(2.4761463,-320.66095)"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5930""
+       id=""linearGradient5936""
+       x1=""406.84375""
+       y1=""527.84107""
+       x2=""569.77537""
+       y2=""527.84107""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(2.4761463,-320.66095)"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient5987""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(37.767481,218.74544)""
+       x1=""136.5518""
+       y1=""307.43564""
+       x2=""532.00769""
+       y2=""307.43564"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient6058""
+       x1=""262.625""
+       y1=""526.17188""
+       x2=""434.57684""
+       y2=""438.26868""
+       gradientUnits=""userSpaceOnUse"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient6060""
+       x1=""408.13379""
+       y1=""493.1777""
+       x2=""569.77539""
+       y2=""427.55981""
+       gradientUnits=""userSpaceOnUse"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient6062""
+       x1=""341.375""
+       y1=""527.15625""
+       x2=""525.94611""
+       y2=""449.15765""
+       gradientUnits=""userSpaceOnUse"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5337""
+       id=""linearGradient6064""
+       x1=""174.32097""
+       y1=""548.4375""
+       x2=""383.01959""
+       y2=""441.9632""
+       gradientUnits=""userSpaceOnUse"" />
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666""
+       xlink:href=""#SVGID_1_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_1_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-4229.6655""
+       y1=""-4143.6401""
+       x2=""-3987.5886""
+       y2=""-3860.573""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0""
+         style=""stop-color:#F69923""
+         id=""stop3286"" />
+      <stop
+         offset=""0.3123""
+         style=""stop-color:#F79A23""
+         id=""stop3288"" />
+      <stop
+         offset=""0.8383""
+         style=""stop-color:#E97826""
+         id=""stop3290"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-3""
+       xlink:href=""#SVGID_2_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_2_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-6021.2769""
+       y1=""-4174.8843""
+       x2=""-4294.1865""
+       y2=""-4174.8843""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3311"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3313"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3315"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3317"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-4""
+       xlink:href=""#SVGID_3_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_3_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-5812.7939""
+       y1=""-4001.6594""
+       x2=""-4783.6157""
+       y2=""-4001.6594""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0""
+         style=""stop-color:#282662""
+         id=""stop3322"" />
+      <stop
+         offset=""9.548390e-02""
+         style=""stop-color:#662E8D""
+         id=""stop3324"" />
+      <stop
+         offset=""0.7882""
+         style=""stop-color:#9F2064""
+         id=""stop3326"" />
+      <stop
+         offset=""0.9487""
+         style=""stop-color:#CD2032""
+         id=""stop3328"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-5""
+       xlink:href=""#SVGID_4_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_4_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-5924.2744""
+       y1=""-4190.9775""
+       x2=""-4197.1841""
+       y2=""-4190.9775""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3333"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3335"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3337"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3339"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-8""
+       xlink:href=""#SVGID_5_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_5_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-5798.3159""
+       y1=""-4167.6108""
+       x2=""-4890.6782""
+       y2=""-4167.6108""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0""
+         style=""stop-color:#282662""
+         id=""stop3344"" />
+      <stop
+         offset=""9.548390e-02""
+         style=""stop-color:#662E8D""
+         id=""stop3346"" />
+      <stop
+         offset=""0.7882""
+         style=""stop-color:#9F2064""
+         id=""stop3348"" />
+      <stop
+         offset=""0.9487""
+         style=""stop-color:#CD2032""
+         id=""stop3350"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-2""
+       xlink:href=""#SVGID_6_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_6_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-5924.2744""
+       y1=""-4012.23""
+       x2=""-4197.1841""
+       y2=""-4012.23""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3355"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3357"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3359"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3361"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-58""
+       xlink:href=""#SVGID_7_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_7_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-6031.4116""
+       y1=""-4021.106""
+       x2=""-4304.3213""
+       y2=""-4021.106""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3366"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3368"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3370"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3372"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-23""
+       xlink:href=""#SVGID_8_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_8_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-5924.2744""
+       y1=""-3959.0669""
+       x2=""-4197.1841""
+       y2=""-3959.0669""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3381"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3383"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3385"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3387"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-83""
+       xlink:href=""#SVGID_9_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_9_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-5924.2744""
+       y1=""-3965.1499""
+       x2=""-4197.1841""
+       y2=""-3965.1499""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3396"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3398"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3400"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3402"" />
+    </linearGradient>
+    <linearGradient
+       y2=""497.89682""
+       x2=""1491.8424""
+       y1=""497.89682""
+       x1=""1096.3865""
+       gradientTransform=""translate(322.36481,-607.49885)""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient6666-31""
+       xlink:href=""#SVGID_10_""
+       inkscape:collect=""always"" />
+    <linearGradient
+       id=""SVGID_10_""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-4954.02""
+       y1=""-3966.3701""
+       x2=""-4572.2764""
+       y2=""-3966.3701""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0.3233""
+         style=""stop-color:#9E2064""
+         id=""stop3411"" />
+      <stop
+         offset=""0.6302""
+         style=""stop-color:#C92037""
+         id=""stop3413"" />
+      <stop
+         offset=""0.7514""
+         style=""stop-color:#CD2335""
+         id=""stop3415"" />
+      <stop
+         offset=""1""
+         style=""stop-color:#E97826""
+         id=""stop3417"" />
+    </linearGradient>
+    <linearGradient
+       id=""SVGID_1_-0""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-4229.6655""
+       y1=""-4143.6401""
+       x2=""-3987.5886""
+       y2=""-3860.573""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0""
+         style=""stop-color:#F69923""
+         id=""stop3286-8"" />
+      <stop
+         offset=""0.10995827""
+         style=""stop-color:#F79A23""
+         id=""stop3288-2"" />
+      <stop
+         offset=""0.94502056""
+         style=""stop-color:#E97826""
+         id=""stop3290-2"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_""
+       id=""linearGradient4032""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.89763978,0,0,0.89763978,-1370.1882,349.55939)""
+       x1=""1096.3865""
+       y1=""497.89682""
+       x2=""1491.8424""
+       y2=""497.89682"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_""
+       id=""linearGradient4176""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0.89763978,0,0,0.89763978,-948.6856,-279.38177)""
+       x1=""1096.3865""
+       y1=""497.89682""
+       x2=""1491.8424""
+       y2=""497.89682"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0-8""
+       id=""linearGradient4236-6""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       id=""SVGID_1_-0-8""
+       gradientUnits=""userSpaceOnUse""
+       x1=""-4229.6655""
+       y1=""-4143.6401""
+       x2=""-3987.5886""
+       y2=""-3860.573""
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)"">
+      <stop
+         offset=""0""
+         style=""stop-color:#F69923""
+         id=""stop3286-8-3"" />
+      <stop
+         offset=""0.10995827""
+         style=""stop-color:#F79A23""
+         id=""stop3288-2-9"" />
+      <stop
+         offset=""0.94502056""
+         style=""stop-color:#E97826""
+         id=""stop3290-2-2"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949-6""
+       id=""linearGradient4238-8""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       gradientTransform=""matrix(0.4226,-0.9063,0.9063,0.4226,6189.0356,-1936.8361)""
+       y2=""-3860.573""
+       x2=""-3987.5886""
+       y1=""-4143.6401""
+       x1=""-4229.6655""
+       gradientUnits=""userSpaceOnUse""
+       id=""linearGradient3949-6"">
+      <stop
+         id=""stop3951-2""
+         style=""stop-color:#F69923""
+         offset=""0"" />
+      <stop
+         id=""stop3953-7""
+         style=""stop-color:#F79A23""
+         offset=""0.08047844"" />
+      <stop
+         id=""stop3955-3""
+         style=""stop-color:#E97826""
+         offset=""0.41874287"" />
+    </linearGradient>
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4733""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4735""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient4556""
+       id=""linearGradient4737""
+       gradientUnits=""userSpaceOnUse""
+       x1=""633.55072""
+       y1=""814.59906""
+       x2=""566.47131""
+       y2=""909.11664"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4739""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4741""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4753""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4755""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4797""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4799""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4815""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4817""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient4556""
+       id=""linearGradient4819""
+       gradientUnits=""userSpaceOnUse""
+       x1=""633.55072""
+       y1=""814.59906""
+       x2=""566.47131""
+       y2=""909.11664"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4866""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4868""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient4556""
+       id=""linearGradient4870""
+       gradientUnits=""userSpaceOnUse""
+       x1=""633.55072""
+       y1=""814.59906""
+       x2=""566.47131""
+       y2=""909.11664"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4884""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4886""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient4556""
+       id=""linearGradient4888""
+       gradientUnits=""userSpaceOnUse""
+       x1=""633.55072""
+       y1=""814.59906""
+       x2=""566.47131""
+       y2=""909.11664"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#SVGID_1_-0""
+       id=""linearGradient4890""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+    <linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient3949""
+       id=""linearGradient4892""
+       gradientUnits=""userSpaceOnUse""
+       x1=""333.48315""
+       y1=""702.59973""
+       x2=""477.00238""
+       y2=""563.7301"" />
+  </defs>
+  <sodipodi:namedview
+     id=""base""
+     pagecolor=""#ffffff""
+     bordercolor=""#666666""
+     borderopacity=""1.0""
+     inkscape:pageopacity=""0.0""
+     inkscape:pageshadow=""2""
+     inkscape:zoom=""0.91849525""
+     inkscape:cx=""372.04724""
+     inkscape:cy=""549.77729""
+     inkscape:document-units=""px""
+     inkscape:current-layer=""layer1""
+     showgrid=""false""
+     inkscape:window-width=""1920""
+     inkscape:window-height=""1043""
+     inkscape:window-x=""1920""
+     inkscape:window-y=""0""
+     inkscape:window-maximized=""1"" />
+  <metadata
+     id=""metadata5198"">
+    <rdf:RDF>
+      <cc:Work
+         rdf:about="""">
+        <dc:format>image/svg+xml</dc:format>
+        <dc:type
+           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" />
+        <dc:title></dc:title>
+      </cc:Work>
+    </rdf:RDF>
+  </metadata>
+  <g
+     inkscape:label=""Layer 1""
+     inkscape:groupmode=""layer""
+     id=""layer1"">
+    <g
+       id=""g4178""
+       inkscape:export-filename=""/home/zregvart/workspaces/camel-salesforce/camel/docs/img/logo-large.png""
+       inkscape:export-xdpi=""106.96""
+       inkscape:export-ydpi=""106.96""
+       transform=""translate(0,-6.0234375e-5)"">
+      <path
+         inkscape:connector-curvature=""0""
+         d=""m 389.78309,69.71819 c 3.31903,-6.63099 -6.63095,-16.58104 -9.95006,-16.58104 0,0 -19.89646,0 -26.531,0 -1.853,0 -4.77805,-3.31549 -6.63455,-3.31549 -3.31552,0 -9.95007,0 -9.95007,0 0,0 -5.75064,-8.73247 -9.95006,-6.63455 -6.62746,3.31551 0,16.58104 0,16.58104 -19.89296,16.58104 -15.64389,44.86926 -38.85237,44.86926 -15.43088,0 -30.78726,-21.65367 -47.36828,-28.28822 -6.35062,-2.53809 -19.89654,-3.3155 -26.53468,-6.631 -11.1179,-5.55895 -13.25841,-29.84657 -39.7895,-29.84657 -26.53109,0 -39.66176,27.54986 -53.05859,36.47757 -9.95006,6.63455 -43.112108,16.58459 -43.112108,39.79662 0,0.97974 -9.282763,36.47758 -12.598195,43.11212 -0.461477,0.93005 -19.896545,19.89653 -16.581112,26.53462 0.181054,0.36208 13.261999,-3.3155 19.896544,-23.21557 4.114243,-12.33904 9.950068,-33.16563 9.950068,-33.16563 0,0 1.913319,7.63203 2.672992,13.26554 1.089824,8.01897 1.76072,15.59065 0.64253,19.89654 -0.912271,3.52138 -17.401016,29.4206 -26.53109,43.11566 -6.634545,9.9465 -10.33695,10.33697 -13.2655,13.26199 -3.319113,3.32261 0.486252,17.42944 0,23.21559 -0.926544,11.02562 -7.795373,32.11134 -6.631045,43.11211 0.312379,2.97473 0.677988,8.53724 3.315523,9.95004 h 23.219068 c 0,-9.95004 -11.167536,-9.07323 -13.26909,-13.26552 -3.315433,-6.63101 1.991503,-34.39031 3.319112,-39.79308 2.172468,-8.82832 6.630955,-6.63455 9.949978,-13.26555 2.839863,-5.68674 0.308878,-5.44181 3.315523,-9.95004 6.634545,-9.95004 25.86378,-23.21202 25.86378,-23.21202 l -3.31552,29.84301 9.95007,29.84659 9.949982,39.79661 h 26.53108 c 0,-13.26552 -12.18635,-10.28372 -16.58102,-13.26552 -3.6989,-2.50261 -5.89973,-12.17576 -6.63454,-16.58104 -1.09692,-6.59196 -2.94632,-19.85749 -3.31552,-26.53109 -0.27683,-4.96614 -0.5928,-14.95879 0,-19.89654 0.90518,-7.59298 3.51435,-22.86415 6.63104,-29.84658 2.43871,-5.45957 11.37345,-14.22752 13.2655,-19.89652 0.78454,-2.35706 -1.35248,-7.85923 0,-9.95005 1.41989,-2.20086 7.3339,-3.50719 9.95007,-3.3155 6.01688,0.44372 17.38324,5.06554 23.21197,6.631 8.94902,2.40675 36.47766,6.63099 36.47766,6.63099 0,0 -7.87697,30.80146 -13.26559,39.79662 -2.12983,3.55688 -8.78924,9.28623 -9.94648,13.2691 -1.16082,3.97574 0.962,12.54493 0,16.57748 -2.33224,9.74061 -13.66315,26.89671 -16.58102,36.47758 -1.46961,4.82415 -3.31911,19.89653 -3.31911,19.89653 h 23.21566 c 0,-9.95005 -5.11529,-9.87904 -6.63455,-13.26554 -3.97223,-8.85316 7.69942,-28.52961 13.262,-36.47757 2.01628,-2.88243 8.21771,-6.88659 9.94998,-9.95005 1.68262,-2.97117 2.18315,-10.04234 3.31911,-13.25843 4.43721,-12.61593 26.531,-46.43117 26.531,-46.43117 l 9.95366,-6.63455 c 0,0 9.94648,9.95003 16.58102,46.42762 0.90168,4.96259 1.35957,15.25342 3.31902,19.89653 1.15724,2.75464 5.31762,7.26641 6.63105,9.95005 5.75773,11.77463 16.58102,49.74665 16.58102,49.74665 h 26.5311 c 0,-13.26552 -12.23259,-10.21982 -16.58102,-13.26552 -7.94798,-5.56252 -13.2656,-36.47758 -13.2656,-36.47758 0,0 0.91586,-9.97135 0,-13.262 -0.62476,-2.26122 -2.57362,-4.40528 -3.31552,-6.63454 -3.31903,-9.95004 -6.63455,-29.84304 -6.63455,-43.10856 0,-6.84044 -3.31543,-26.53464 6.63455,-26.53464 9.95007,0 26.5311,0 36.47757,-6.63454 26.03057,-17.35489 32.47697,-50.37497 43.11221,-66.32416 6.62386,-9.95004 37.69153,-9.0768 39.7859,-13.26909 z""
+         id=""path6132-2""
+         style=""fill:url(#linearGradient4176);fill-opacity:1"" />
+      <g
+         transform=""translate(-15.537232,-170.85409)""
+         style=""font-size:35.90559006px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#6c5d53;fill-opacity:1;stroke:none;font-family:Sans""
+         id=""text7084"">
+        <path
+           d=""m 391.43141,381.51178 c 12.73749,0 18.51382,7.10931 19.6987,15.25539 l 3.25843,0 -1.4811,-18.81004 -3.40655,0 c 0,1.77732 -0.74055,2.96221 -1.77732,2.96221 -2.8141,0 -8.88664,-4.44332 -16.44027,-4.44332 -23.25334,0 -44.87751,17.32897 -44.87751,46.06239 0,22.51278 15.10731,43.5445 42.65585,43.5445 18.21758,0 26.80801,-10.36775 30.51077,-19.25437 l -3.55465,-1.77733 c -2.66599,7.25741 -13.62618,15.99594 -23.99391,15.99594 -15.40349,0 -30.21456,-14.21864 -30.21456,-41.76718 0,-22.51278 12.73753,-37.76819 29.62212,-37.76819""
+           style=""font-size:148.11056519px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+           id=""path4020""
+           inkscape:connector-curvature=""0"" />
+        <path
+           d=""m 440.08573,410.39334 c 1.4811,-5.77631 7.40553,-7.10931 15.10728,-7.10931 11.55261,0 14.81105,8.1461 14.81105,23.99391 -14.95915,4.29521 -41.76718,6.96121 -41.76718,20.73548 0,14.2186 9.77531,18.06949 22.21659,18.06949 10.36773,0 17.47705,-3.25843 21.77225,-6.36875 2.36977,4.73953 6.22065,6.07253 10.51585,6.07253 10.21962,0 13.62617,-2.51788 13.62617,-7.99797 l -2.66599,0 c 0,2.07355 -2.51788,3.55465 -5.03576,3.55465 -2.51787,0 -5.33198,-2.36977 -5.33198,-9.18285 l 0,-29.32589 c 0,-13.77427 -7.25743,-24.88258 -26.6599,-24.88258 -15.55159,0 -24.43824,5.92444 -24.43824,16.29216 0,4.44332 2.51788,7.40553 6.36875,7.40553 3.11032,0 6.66498,-1.48111 6.66498,-5.18387 0,-4.59142 -2.81411,-6.07253 -5.18387,-6.07253 m 30.807,45.61805 c -4.59143,2.8141 -11.99697,5.03576 -17.92138,5.03576 -6.66497,0 -10.96018,-2.666 -10.96018,-12.73751 0,-11.99694 17.62516,-14.51483 27.99289,-17.77326 l 0,17.47704 c 0,3.11032 0.29622,5.77632 0.88867,7.99797""
+           style=""font-size:148.11056519px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+           id=""path4022""
+           inkscape:connector-curvature=""0"" />
+        <path
+           d=""m 499.54055,464.60181 31.99189,0 0,-3.11033 c -6.22064,0 -8.44231,-0.88866 -9.33097,-2.96221 l 0,-49.02459 c 3.40654,-3.11032 8.73853,-6.51687 15.55161,-6.51687 8.88663,0 12.44129,4.29522 12.44129,17.32894 l 0,38.21252 c -0.88866,2.07355 -3.11033,2.96221 -9.33097,2.96221 l 0,3.11033 31.99188,0 0,-3.11033 c -6.22063,0 -8.4423,-0.88866 -9.33096,-2.96221 l 0,-43.69261 c 0,-1.62922 -0.14811,-3.25844 -0.59244,-4.73954 3.40654,-3.25843 8.88664,-7.10931 16.14405,-7.10931 8.88662,0 12.44129,4.29522 12.44129,17.32894 l 0,38.21252 c -0.88867,2.07355 -3.11033,2.96221 -9.33097,2.96221 l 0,3.11033 31.99188,0 0,-3.11033 c -6.22064,0 -8.4423,-0.88866 -9.33096,-2.96221 l 0,-43.69261 c 0,-10.66395 -7.40555,-16.88461 -24.88258,-16.88461 -8.29418,0 -14.81106,4.73954 -18.51382,8.59042 -3.25843,-5.48009 -10.51586,-8.59042 -22.80903,-8.59042 -6.96119,0 -12.5894,3.40655 -16.44027,6.66498 l 0,-6.66498 c -6.66497,0 -16.88461,6.36876 -22.66092,6.36876 l 0,3.40654 c 2.22166,0 5.62821,0.44433 9.33097,0.74055 l 0,50.06137 c -0.88866,2.07355 -3.11033,2.96221 -9.33097,2.96221 l 0,3.11033""
+           style=""font-size:148.11056519px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+           id=""path4024""
+           inkscape:connector-curvature=""0"" />
+        <path
+           d=""m 636.00362,428.90716 47.54349,0 c 0,-16.29215 -8.88666,-30.95511 -31.10322,-30.95511 -19.8468,0 -30.51078,14.21863 -30.51078,30.807 0,29.9183 18.36573,37.32386 31.99188,37.32386 15.40349,0 23.6977,-4.44332 29.3259,-13.62617 l -3.55466,-1.77733 c -5.92441,7.40552 -12.14507,9.7753 -20.73548,9.7753 -11.70072,0 -22.66091,-14.95918 -22.95713,-31.54755 m 0.14811,-4.59143 c 1.33299,-13.62616 9.18286,-21.92036 15.69972,-21.92036 13.18182,0 16.14405,9.6272 17.18082,21.92036 l -32.88054,0""
+           style=""font-size:148.11056519px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+           id=""path4026""
+           inkscape:connector-curvature=""0"" />
+        <path
+           d=""m 692.16528,464.60181 31.99189,0 0,-3.11033 c -6.22064,0 -8.44231,-0.88866 -9.33097,-2.96221 l 0,-87.23712 c -6.66497,0 -16.88461,6.36875 -22.66092,6.36875 l 0,3.40655 c 2.22166,0 5.62821,0.44433 9.33097,0.74055 l 0,76.72127 c -0.88866,2.07355 -3.11033,2.96221 -9.33097,2.96221 l 0,3.11033""
+           style=""font-size:148.11056519px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+           id=""path4028""
+           inkscape:connector-curvature=""0"" />
+      </g>
+      <g
+         transform=""matrix(0.45717348,0,0,0.45717348,203.79087,-106.06572)""
+         id=""g7137"">
+        <path
+           style=""fill:#d22128""
+           inkscape:connector-curvature=""0""
+           d=""m 280.2335,639.49652 27.23347,-65.09625 h 5.22662 l 27.23347,65.09625 h -6.87714 l -8.43962,-20.35633 h -29.24709 l -8.3406,20.35633 h -6.78911 z m 29.89629,-57.58091 -13.39116,32.18501 h 26.40821 l -13.01705,-32.18501 z""
+           id=""path3273"" />
+        <path
+           style=""fill:#d22128""
+           inkscape:connector-curvature=""0""
+           d=""m 346.95825,639.49652 v -65.09625 h 26.95838 c 11.19048,0 19.25599,10.36523 19.25599,20.44436 0,10.64031 -7.51534,20.63142 -18.70582,20.63142 h -21.18159 v 24.02047 h -6.32696 z m 6.32696,-29.70924 h 20.80748 c 7.70239,0 12.65393,-7.0642 12.65393,-14.94265 0,-8.16454 -6.05188,-14.76659 -13.20411,-14.76659 h -20.2573 v 29.70924 z""
+           id=""path3275"" />
+        <path
+           style=""fill:#d22128""
+           inkscape:connector-curvature=""0""
+           d=""m 389.60751,639.49652 27.23347,-65.09625 h 5.22663 l 27.23346,65.09625 h -6.87713 l -8.43963,-20.35633 h -29.24709 l -8.3406,20.35633 h -6.78911 z m 29.8853,-57.58091 -13.39117,32.18501 h 26.40821 l -13.01704,-32.18501 z""
+           id=""path3277"" />
+        <path
+           style=""fill:#d22128""
+           inkscape:connector-curvature=""0""
+           d=""m 480.09965,574.03716 c 11.5536,0 19.98222,5.86482 24.02047,14.21642 l -5.1386,3.11397 c -4.12628,-8.61568 -12.19179,-11.55359 -19.25598,-11.55359 -15.59185,0 -24.1085,13.94133 -24.1085,27.04641 0,14.39247 10.54128,27.40952 24.38358,27.40952 7.33928,0 15.95496,-3.66414 20.08125,-12.10376 l 5.31465,2.75085 c -4.21431,9.71602 -15.7679,15.12971 -25.75901,15.12971 -17.88056,0 -30.43547,-17.05531 -30.43547,-33.56044 0,-15.67988 11.26751,-32.44909 30.89761,-32.44909 z""
+           id=""path3279"" />
+        <path
+           style=""fill:#d22128""
+           inkscape:connector-curvature=""0""
+           d=""m 565.69527,574.40027 v 65.09625 h -6.41499 v -30.43547 h -38.6 v 30.43547 h -6.32698 v -65.09625 h 6.32698 v 28.97201 h 38.6 v -28.97201 h 6.41499 z""
+           id=""path3281"" />
+        <path
+           style=""fill:#d22128""
+           inkscape:connector-curvature=""0""
+           d=""m 624.13445,633.80775 v 5.68877 h -43.7386 v -65.09625 h 42.91334 v 5.68877 h -36.58638 v 23.4703 h 31.90993 v 5.40268 h -31.90993 v 24.84573 h 37.41164 z""
+           id=""path3283"" />
+        <path
+           style=""fill:#6d6e71""
+           inkscape:connector-curvature=""0""
+           d=""m 640.17744,573.74007 c 0.99031,0.99031 1.48546,2.18968 1.48546,3.58711 0,1.39744 -0.49515,2.59681 -1.48546,3.59812 -0.99031,1.00131 -2.20069,1.50747 -3.60912,1.50747 -1.41945,0 -2.61882,-0.49515 -3.59812,-1.48546 -0.97931,-0.99031 -1.47446,-2.18968 -1.47446,-3.58712 0,-1.39743 0.49515,-2.5968 1.48546,-3.59812 0.99031,-1.00131 2.18968,-1.50746 3.59812,-1.50746 1.40844,0 2.60781,0.49515 3.59812,1.48546 z m -0.42914,6.7671 c 0.86927,-0.88027 1.29841,-1.9366 1.29841,-3.16898 0,-1.23239 -0.42914,-2.27771 -1.2874,-3.14698 -0.85827,-0.86927 -1.9146,-1.30941 -3.15798,-1.30941 -1.24339,0 -2.29972,0.44014 -3.16899,1.30941 -0.85827,0.88027 -1.2984,1.9366 -1.2984,3.16898 0,1.23239 0.42913,2.28871 1.27639,3.15798 0.85827,0.86928 1.9036,1.30941 3.14698,1.30941 1.24339,0 2.32172,-0.44013 3.19099,-1.32041 z m -0.71522,-4.14829 c 0,0.91329 -0.39612,1.48546 -1.19937,1.71654 l 1.46345,1.98061 h -1.17736 l -1.32041,-1.83757 h -1.21038 v 1.83757 h -0.9573 v -5.50171 h 2.06865 c 0.83626,0 1.43044,0.14304 1.79355,0.42913 0.36312,0.28609 0.53917,0.74824 0.53917,1.37543 z m -1.22138,0.77024 c 0.18706,-0.15405 0.28609,-0.41813 0.28609,-0.78124 0,-0.36311 -0.099,-0.61619 -0.29709,-0.74823 -0.19806,-0.14305 -0.53917,-0.20907 -1.04533,-0.20907 h -1.16636 v 1.98062 h 1.14436 c 0.52816,0 0.88027,-0.077 1.07833,-0.24208 z""
+           id=""path3457"" />
+      </g>
+    </g>
+    <g
+       id=""g4564""
+       transform=""translate(-85.42109,56.235783)"">
+      <g
+         transform=""translate(216.2639,-21.04569)""
+         id=""g4478"">
+        <path
+           sodipodi:type=""arc""
+           style=""fill:url(#linearGradient4884);fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient4886);stroke-width:5;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none""
+           id=""path4222""
+           sodipodi:cx=""412.33255""
+           sodipodi:cy=""629.22614""
+           sodipodi:rx=""63.02026""
+           sodipodi:ry=""63.02026""
+           d=""m 475.35281,629.22614 c 0,34.80512 -28.21513,63.02026 -63.02026,63.02026 -34.80513,0 -63.02026,-28.21514 -63.02026,-63.02026 0,-34.80513 28.21513,-63.02026 63.02026,-63.02026 34.80513,0 63.02026,28.21513 63.02026,63.02026 z""
+           transform=""matrix(0.99205956,0,0,0.99205956,-36.8047,240.87219)"" />
+      </g>
+      <path
+         id=""path4491""
+         d=""m 573.3125,817.40625 c -0.88906,-10e-4 -1.78972,0.005 -2.6875,0.0312 -1.0437,0.0308 -2.44587,0.36218 -4.0625,0.90625 27.30936,20.73702 37.12671,58.14612 20.25,90.65625 0.57317,0.0149 1.14197,0.0625 1.71875,0.0625 30.8438,0 56.61984,-21.49325 63.28125,-50.3125 -19.57261,-22.9434 -46.11809,-41.29445 -78.5,-41.34375 z""
+         style=""opacity:0.75;fill:url(#linearGradient4888);fill-opacity:1;fill-rule:nonzero;stroke:none""
+         inkscape:connector-curvature=""0"" />
+      <path
+         id=""path4496""
+         d=""m 566.5625,818.34375 c -9.06824,3.05185 -26.36759,13.8017 -43,28.15625 1.26312,34.19531 28.96142,61.60672 63.25,62.5 16.87671,-32.51013 7.05936,-69.91923 -20.25,-90.65625 z""
+         style=""opacity:0.75;fill:#28170b;fill-opacity:1;fill-rule:nonzero;stroke:none""
+         inkscape:connector-curvature=""0"" />
+      <g
+         id=""g4483"">
+        <path
+           id=""path4224-2""
+           d=""m 590.31114,806.30878 c -0.47239,-0.0321 -0.93151,0.0284 -1.375,0.25 -5.59922,2.80111 0,14 0,14 -16.80659,14.00851 -13.23603,37.9375 -32.84375,37.9375 -10.68885,0 -21.32208,-12.29336 -32.53125,-19.8125 -0.1443,1.77333 -0.25,3.56448 -0.25,5.375 0,24.51458 13.51013,45.86312 33.46875,57.06251 5.58277,-0.70321 11.15751,-2.11392 15.34375,-4.90625 21.99196,-14.6623 27.4523,-42.55657 36.4375,-56.03126 5.59618,-8.4063 31.82432,-7.67689 33.59375,-11.21875 2.80409,-5.6022 -5.60209,-14 -8.40625,-14 l -22.40625,0 c -1.56551,0 -4.02528,-2.78125 -5.59375,-2.78125 l -8.40625,0 c 0,0 -3.72451,-5.65027 -7.03125,-5.875 z""
+           style=""fill:#ffffff;fill-opacity:1""
+           inkscape:connector-curvature=""0"" />
+      </g>
+    </g>
+    <g
+       id=""g4641""
+       transform=""translate(4.374995,13.14333)"">
+      <path
+         transform=""matrix(0.99205956,0,0,0.99205956,-172.02251,262.9251)""
+         d=""m 475.35281,629.22614 c 0,34.80512 -28.21513,63.02026 -63.02026,63.02026 -34.80513,0 -63.02026,-28.21514 -63.02026,-63.02026 0,-34.80513 28.21513,-63.02026 63.02026,-63.02026 34.80513,0 63.02026,28.21513 63.02026,63.02026 z""
+         sodipodi:ry=""63.02026""
+         sodipodi:rx=""63.02026""
+         sodipodi:cy=""629.22614""
+         sodipodi:cx=""412.33255""
+         id=""path4578""
+         style=""fill:url(#linearGradient4890);fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient4892);stroke-width:5;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none""
+         sodipodi:type=""arc"" />
+      <path
+         inkscape:connector-curvature=""0""
+         style=""fill:#ffffff;fill-opacity:1""
+         d=""m 238.62293,849.40741 c -0.47239,-0.032 -0.93151,0.028 -1.375,0.25 -5.59922,2.8011 0,14 0,14 -16.80659,14.0085 -13.23603,37.9375 -32.84375,37.9375 -10.68885,0 -21.32208,-12.2934 -32.53125,-19.8125 -0.1443,1.7733 -0.25,3.5645 -0.25,5.375 0,24.5146 13.51013,45.8631 33.46875,57.0625 5.58277,-0.7032 11.15751,-2.1139 15.34375,-4.9063 21.99196,-14.6623 27.4523,-42.5565 36.4375,-56.0312 5.59618,-8.4063 31.82432,-7.6769 33.59375,-11.2188 2.80409,-5.6022 -5.60209,-14 -8.40625,-14 l -22.40625,0 c -1.56551,0 -4.02528,-2.7812 -5.59375,-2.7812 l -8.40625,0 c 0,0 -3.72451,-5.6503 -7.03125,-5.875 z""
+         id=""path4580"" />
+    </g>
+    <g
+       id=""g4620""
+       transform=""translate(0,-63.265199)"">
+      <path
+         sodipodi:type=""arc""
+         style=""fill:url(#linearGradient4753);fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient4755);stroke-width:5;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none""
+         id=""path4242""
+         sodipodi:cx=""412.33255""
+         sodipodi:cy=""629.22614""
+         sodipodi:rx=""63.02026""
+         sodipodi:ry=""63.02026""
+         d=""m 475.35281,629.22614 c 0,34.80512 -28.21513,63.02026 -63.02026,63.02026 -34.80513,0 -63.02026,-28.21514 -63.02026,-63.02026 0,-34.80513 28.21513,-63.02026 63.02026,-63.02026 34.80513,0 63.02026,28.21513 63.02026,63.02026 z""
+         transform=""matrix(0.99205956,0,0,0.99205956,-184.13541,-107.38343)"" />
+      <path
+         id=""path4244""
+         d=""m 226.51003,479.09886 c -0.47239,-0.0321 -0.93151,0.0284 -1.375,0.25 -5.59922,2.80111 0,14 0,14 -16.80659,14.00851 -13.23603,37.9375 -32.84375,37.9375 -10.68885,0 -21.32208,-12.29336 -32.53125,-19.8125 -0.1443,1.77333 -0.25,3.56448 -0.25,5.375 0,24.51458 13.51013,45.86311 33.46875,57.0625 5.58277,-0.70321 11.15751,-2.11392 15.34375,-4.90625 21.99196,-14.6623 27.4523,-42.55656 36.4375,-56.03125 5.59618,-8.4063 31.82432,-7.67689 33.59375,-11.21875 2.80409,-5.6022 -5.60209,-14 -8.40625,-14 l -22.40625,0 c -1.56551,0 -4.02528,-2.78125 -5.59375,-2.78125 l -8.40625,0 c 0,0 -3.72451,-5.65027 -7.03125,-5.875 z""
+         style=""fill:#ffffff;fill-opacity:1""
+         inkscape:connector-curvature=""0"" />
+      <g
+         inkscape:export-ydpi=""106.96""
+         inkscape:export-xdpi=""106.96""
+         inkscape:export-filename=""/home/zregvart/workspaces/camel-salesforce/camel/docs/img/logo-medium.png""
+         transform=""translate(73.918961,-138.30344)""
+         id=""g3983"">
+        <g
+           id=""g7198""
+           transform=""translate(-72.023152,20.160046)"">
+          <g
+             id=""text7172""
+             style=""font-size:27.92029381px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#6c5d53;fill-opacity:1;stroke:none;font-family:Sans"">
+            <path
+               id=""path4009""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               d=""m 335.43979,637.17977 c 9.45999,0 13.75,5.28001 14.63,11.33 l 2.42,0 -1.1,-13.97 -2.53,0 c 0,1.32 -0.55,2.2 -1.32,2.2 -2.09,0 -6.6,-3.3 -12.21,-3.3 -17.26998,0 -33.33,12.87002 -33.33,34.21 0,16.71998 11.22002,32.34 31.68,32.34 13.52999,0 19.91,-7.70001 22.66,-14.3 l -2.64,-1.32 c -1.98,5.39 -10.12001,11.88 -17.82,11.88 -11.43999,0 -22.44,-10.56002 -22.44,-31.02 0,-16.71998 9.46001,-28.05 22,-28.05""
+               inkscape:connector-curvature=""0"" />
+            <path
+               id=""path4011""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               d=""m 371.57479,658.62977 c 1.1,-4.29 5.50001,-5.28 11.22,-5.28 8.57999,0 11,6.05001 11,17.82 -11.10999,3.19 -31.02,5.17001 -31.02,15.4 0,10.55999 7.26001,13.42 16.5,13.42 7.69999,0 12.98,-2.42 16.17,-4.73 1.76,3.52 4.62,4.51 7.81,4.51 7.58999,0 10.12,-1.87 10.12,-5.94 l -1.98,0 c 0,1.54 -1.87,2.64 -3.74,2.64 -1.87,0 -3.96,-1.76 -3.96,-6.82 l 0,-21.78 c 0,-10.22999 -5.39001,-18.48 -19.8,-18.48 -11.54999,0 -18.15,4.40001 -18.15,12.1 0,3.3 1.87,5.5 4.73,5.5 2.31,0 4.95,-1.1 4.95,-3.85 0,-3.41 -2.09,-4.51 -3.85,-4.51 m 22.88,33.88 c -3.41,2.09 -8.91,3.74 -13.31,3.74 -4.94999,0 -8.14,-1.98001 -8.14,-9.46 0,-8.90999 13.09001,-10.78 20.79,-13.2 l 0,12.98 c 0,2.31 0.22,4.29 0.66,5.94""
+               inkscape:connector-curvature=""0"" />
+            <path
+               id=""path4013""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               d=""m 415.7312,698.88977 23.76,0 0,-2.31 c -4.62,0 -6.27,-0.66 -6.93,-2.2 l 0,-36.41 c 2.52999,-2.31 6.49,-4.84 11.55,-4.84 6.59999,0 9.24,3.19001 9.24,12.87 l 0,28.38 c -0.66,1.54 -2.31001,2.2 -6.93,2.2 l 0,2.31 23.76,0 0,-2.31 c -4.62,0 -6.27,-0.66 -6.93,-2.2 l 0,-32.45 c 0,-1.21 -0.11,-2.42 -0.44,-3.52 2.52999,-2.42 6.6,-5.28 11.99,-5.28 6.59999,0 9.24,3.19001 9.24,12.87 l 0,28.38 c -0.66,1.54 -2.31001,2.2 -6.93,2.2 l 0,2.31 23.76,0 0,-2.31 c -4.62,0 -6.27,-0.66 -6.93,-2.2 l 0,-32.45 c 0,-7.91999 -5.50002,-12.54 -18.48,-12.54 -6.16,0 -11.00001,3.52 -13.75,6.38 -2.42,-4.07 -7.81001,-6.38 -16.94,-6.38 -5.17,0 -9.35001,2.53 -12.21,4.95 l 0,-4.95 c -4.95,0 -12.54001,4.73 -16.83,4.73 l 0,2.53 c 1.65,0 4.18,0.33 6.93,0.55 l 0,37.18 c -0.66,1.54 -2.31001,2.2 -6.93,2.2 l 0,2.31""
+               inkscape:connector-curvature=""0"" />
+            <path
+               id=""path4015""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               d=""m 517.08073,672.37977 35.31,0 c 0,-12.09999 -6.60002,-22.99 -23.1,-22.99 -14.73999,0 -22.66,10.56001 -22.66,22.88 0,22.21998 13.64001,27.72 23.76,27.72 11.43999,0 17.6,-3.30001 21.78,-10.12 l -2.64,-1.32 c -4.4,5.5 -9.02001,7.26 -15.4,7.26 -8.68999,0 -16.83,-11.11001 -17.05,-23.43 m 0.11,-3.41 c 0.99,-10.11999 6.82,-16.28 11.66,-16.28 9.78999,0 11.99,7.15001 12.76,16.28 l -24.42,0""
+               inkscape:connector-curvature=""0"" />
+            <path
+               id=""path4017""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               d=""m 558.79135,698.88977 23.76,0 0,-2.31 c -4.61999,0 -6.27,-0.66 -6.93,-2.2 l 0,-64.79 c -4.94999,0 -12.54,4.73 -16.83,4.73 l 0,2.53 c 1.65,0 4.18001,0.33 6.93,0.55 l 0,56.98 c -0.66,1.54 -2.31,2.2 -6.93,2.2 l 0,2.31""
+               inkscape:connector-curvature=""0"" />
+          </g>
+          <g
+             id=""g7176""
+             transform=""matrix(0.35549945,0,0,0.35549945,203.40098,388.26524)"">
+            <path
+               id=""path7184""
+               d=""m 280.2335,639.49652 27.23347,-65.09625 h 5.22662 l 27.23347,65.09625 h -6.87714 l -8.43962,-20.35633 h -29.24709 l -8.3406,20.35633 h -6.78911 z m 29.89629,-57.58091 -13.39116,32.18501 h 26.40821 l -13.01705,-32.18501 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#d22128"" />
+            <path
+               id=""path7186""
+               d=""m 346.95825,639.49652 v -65.09625 h 26.95838 c 11.19048,0 19.25599,10.36523 19.25599,20.44436 0,10.64031 -7.51534,20.63142 -18.70582,20.63142 h -21.18159 v 24.02047 h -6.32696 z m 6.32696,-29.70924 h 20.80748 c 7.70239,0 12.65393,-7.0642 12.65393,-14.94265 0,-8.16454 -6.05188,-14.76659 -13.20411,-14.76659 h -20.2573 v 29.70924 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#d22128"" />
+            <path
+               id=""path7188""
+               d=""m 389.60751,639.49652 27.23347,-65.09625 h 5.22663 l 27.23346,65.09625 h -6.87713 l -8.43963,-20.35633 h -29.24709 l -8.3406,20.35633 h -6.78911 z m 29.8853,-57.58091 -13.39117,32.18501 h 26.40821 l -13.01704,-32.18501 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#d22128"" />
+            <path
+               id=""path7190""
+               d=""m 480.09965,574.03716 c 11.5536,0 19.98222,5.86482 24.02047,14.21642 l -5.1386,3.11397 c -4.12628,-8.61568 -12.19179,-11.55359 -19.25598,-11.55359 -15.59185,0 -24.1085,13.94133 -24.1085,27.04641 0,14.39247 10.54128,27.40952 24.38358,27.40952 7.33928,0 15.95496,-3.66414 20.08125,-12.10376 l 5.31465,2.75085 c -4.21431,9.71602 -15.7679,15.12971 -25.75901,15.12971 -17.88056,0 -30.43547,-17.05531 -30.43547,-33.56044 0,-15.67988 11.26751,-32.44909 30.89761,-32.44909 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#d22128"" />
+            <path
+               id=""path7192""
+               d=""m 565.69527,574.40027 v 65.09625 h -6.41499 v -30.43547 h -38.6 v 30.43547 h -6.32698 v -65.09625 h 6.32698 v 28.97201 h 38.6 v -28.97201 h 6.41499 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#d22128"" />
+            <path
+               id=""path7194""
+               d=""m 624.13445,633.80775 v 5.68877 h -43.7386 v -65.09625 h 42.91334 v 5.68877 h -36.58638 v 23.4703 h 31.90993 v 5.40268 h -31.90993 v 24.84573 h 37.41164 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#d22128"" />
+            <path
+               id=""path7196""
+               d=""m 640.17744,573.74007 c 0.99031,0.99031 1.48546,2.18968 1.48546,3.58711 0,1.39744 -0.49515,2.59681 -1.48546,3.59812 -0.99031,1.00131 -2.20069,1.50747 -3.60912,1.50747 -1.41945,0 -2.61882,-0.49515 -3.59812,-1.48546 -0.97931,-0.99031 -1.47446,-2.18968 -1.47446,-3.58712 0,-1.39743 0.49515,-2.5968 1.48546,-3.59812 0.99031,-1.00131 2.18968,-1.50746 3.59812,-1.50746 1.40844,0 2.60781,0.49515 3.59812,1.48546 z m -0.42914,6.7671 c 0.86927,-0.88027 1.29841,-1.9366 1.29841,-3.16898 0,-1.23239 -0.42914,-2.27771 -1.2874,-3.14698 -0.85827,-0.86927 -1.9146,-1.30941 -3.15798,-1.30941 -1.24339,0 -2.29972,0.44014 -3.16899,1.30941 -0.85827,0.88027 -1.2984,1.9366 -1.2984,3.16898 0,1.23239 0.42913,2.28871 1.27639,3.15798 0.85827,0.86928 1.9036,1.30941 3.14698,1.30941 1.24339,0 2.32172,-0.44013 3.19099,-1.32041 z m -0.71522,-4.14829 c 0,0.91329 -0.39612,1.48546 -1.19937,1.71654 l 1.46345,1.98061 h -1.17736 l -1.32041,-1.83757 h -1.21038 v 1.83757 h -0.9573 v -5.50171 h 2.06865 c 0.83626,0 1.43044,0.14304 1.79355,0.42913 0.36312,0.28609 0.53917,0.74824 0.53917,1.37543 z m -1.22138,0.77024 c 0.18706,-0.15405 0.28609,-0.41813 0.28609,-0.78124 0,-0.36311 -0.099,-0.61619 -0.29709,-0.74823 -0.19806,-0.14305 -0.53917,-0.20907 -1.04533,-0.20907 h -1.16636 v 1.98062 h 1.14436 c 0.52816,0 0.88027,-0.077 1.07833,-0.24208 z""
+               inkscape:connector-curvature=""0""
+               style=""fill:#6d6e71"" />
+          </g>
+        </g>
+        <g
+           id=""g3957""
+           transform=""translate(-5.4017408,7.3976335)"" />
+      </g>
+    </g>
+    <g
+       id=""g4839""
+       transform=""translate(0,2.2798273)"">
+      <path
+         inkscape:connector-curvature=""0""
+         style=""fill:#ffffff;fill-opacity:1""
+         d=""m 226.51003,636.91235 c -0.47239,-0.0321 -0.93151,0.0284 -1.375,0.25 -5.59922,2.80111 0,14 0,14 -16.80659,14.00851 -13.23603,37.9375 -32.84375,37.9375 -10.68885,0 -21.32208,-12.29336 -32.53125,-19.8125 -0.1443,1.77333 -0.25,3.56448 -0.25,5.375 0,24.51458 13.51013,45.86311 33.46875,57.0625 5.58277,-0.70321 11.15751,-2.11392 15.34375,-4.90625 21.99196,-14.6623 27.4523,-42.55656 36.4375,-56.03125 5.59618,-8.4063 31.82432,-7.67689 33.59375,-11.21875 2.80409,-5.6022 -5.60209,-14 -8.40625,-14 l -22.40625,0 c -1.56551,0 -4.02528,-2.78125 -5.59375,-2.78125 l -8.40625,0 c 0,0 -3.72451,-5.65027 -7.03125,-5.875 z""
+         id=""path4761"" />
+      <g
+         id=""g4763""
+         transform=""translate(73.918961,19.51005)""
+         inkscape:export-filename=""/home/zregvart/workspaces/camel-salesforce/camel/docs/img/logo-medium.png""
+         inkscape:export-xdpi=""106.96""
+         inkscape:export-ydpi=""106.96"">
+        <g
+           transform=""translate(-72.023152,20.160046)""
+           id=""g4765"">
+          <g
+             style=""font-size:27.92029381px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#6c5d53;fill-opacity:1;stroke:none;font-family:Sans""
+             id=""g4767"">
+            <path
+               inkscape:connector-curvature=""0""
+               d=""m 335.43979,637.17977 c 9.45999,0 13.75,5.28001 14.63,11.33 l 2.42,0 -1.1,-13.97 -2.53,0 c 0,1.32 -0.55,2.2 -1.32,2.2 -2.09,0 -6.6,-3.3 -12.21,-3.3 -17.26998,0 -33.33,12.87002 -33.33,34.21 0,16.71998 11.22002,32.34 31.68,32.34 13.52999,0 19.91,-7.70001 22.66,-14.3 l -2.64,-1.32 c -1.98,5.39 -10.12001,11.88 -17.82,11.88 -11.43999,0 -22.44,-10.56002 -22.44,-31.02 0,-16.71998 9.46001,-28.05 22,-28.05""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               id=""path4769"" />
+            <path
+               inkscape:connector-curvature=""0""
+               d=""m 371.57479,658.62977 c 1.1,-4.29 5.50001,-5.28 11.22,-5.28 8.57999,0 11,6.05001 11,17.82 -11.10999,3.19 -31.02,5.17001 -31.02,15.4 0,10.55999 7.26001,13.42 16.5,13.42 7.69999,0 12.98,-2.42 16.17,-4.73 1.76,3.52 4.62,4.51 7.81,4.51 7.58999,0 10.12,-1.87 10.12,-5.94 l -1.98,0 c 0,1.54 -1.87,2.64 -3.74,2.64 -1.87,0 -3.96,-1.76 -3.96,-6.82 l 0,-21.78 c 0,-10.22999 -5.39001,-18.48 -19.8,-18.48 -11.54999,0 -18.15,4.40001 -18.15,12.1 0,3.3 1.87,5.5 4.73,5.5 2.31,0 4.95,-1.1 4.95,-3.85 0,-3.41 -2.09,-4.51 -3.85,-4.51 m 22.88,33.88 c -3.41,2.09 -8.91,3.74 -13.31,3.74 -4.94999,0 -8.14,-1.98001 -8.14,-9.46 0,-8.90999 13.09001,-10.78 20.79,-13.2 l 0,12.98 c 0,2.31 0.22,4.29 0.66,5.94""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               id=""path4771"" />
+            <path
+               inkscape:connector-curvature=""0""
+               d=""m 415.7312,698.88977 23.76,0 0,-2.31 c -4.62,0 -6.27,-0.66 -6.93,-2.2 l 0,-36.41 c 2.52999,-2.31 6.49,-4.84 11.55,-4.84 6.59999,0 9.24,3.19001 9.24,12.87 l 0,28.38 c -0.66,1.54 -2.31001,2.2 -6.93,2.2 l 0,2.31 23.76,0 0,-2.31 c -4.62,0 -6.27,-0.66 -6.93,-2.2 l 0,-32.45 c 0,-1.21 -0.11,-2.42 -0.44,-3.52 2.52999,-2.42 6.6,-5.28 11.99,-5.28 6.59999,0 9.24,3.19001 9.24,12.87 l 0,28.38 c -0.66,1.54 -2.31001,2.2 -6.93,2.2 l 0,2.31 23.76,0 0,-2.31 c -4.62,0 -6.27,-0.66 -6.93,-2.2 l 0,-32.45 c 0,-7.91999 -5.50002,-12.54 -18.48,-12.54 -6.16,0 -11.00001,3.52 -13.75,6.38 -2.42,-4.07 -7.81001,-6.38 -16.94,-6.38 -5.17,0 -9.35001,2.53 -12.21,4.95 l 0,-4.95 c -4.95,0 -12.54001,4.73 -16.83,4.73 l 0,2.53 c 1.65,0 4.18,0.33 6.93,0.55 l 0,37.18 c -0.66,1.54 -2.31001,2.2 -6.93,2.2 l 0,2.31""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               id=""path4773"" />
+            <path
+               inkscape:connector-curvature=""0""
+               d=""m 517.08073,672.37977 35.31,0 c 0,-12.09999 -6.60002,-22.99 -23.1,-22.99 -14.73999,0 -22.66,10.56001 -22.66,22.88 0,22.21998 13.64001,27.72 23.76,27.72 11.43999,0 17.6,-3.30001 21.78,-10.12 l -2.64,-1.32 c -4.4,5.5 -9.02001,7.26 -15.4,7.26 -8.68999,0 -16.83,-11.11001 -17.05,-23.43 m 0.11,-3.41 c 0.99,-10.11999 6.82,-16.28 11.66,-16.28 9.78999,0 11.99,7.15001 12.76,16.28 l -24.42,0""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               id=""path4775"" />
+            <path
+               inkscape:connector-curvature=""0""
+               d=""m 558.79135,698.88977 23.76,0 0,-2.31 c -4.61999,0 -6.27,-0.66 -6.93,-2.2 l 0,-64.79 c -4.94999,0 -12.54,4.73 -16.83,4.73 l 0,2.53 c 1.65,0 4.18001,0.33 6.93,0.55 l 0,56.98 c -0.66,1.54 -2.31,2.2 -6.93,2.2 l 0,2.31""
+               style=""font-size:110px;font-variant:normal;font-weight:500;font-stretch:normal;fill:#6c5d53;font-family:Judson;-inkscape-font-specification:Judson Medium""
+               id=""path4777"" />
+          </g>
+          <g
+             transform=""matrix(0.35549945,0,0,0.35549945,203.40098,388.26524)""
+             id=""g4779"">
+            <path
+               style=""fill:#d22128""
+               inkscape:connector-curvature=""0""
+               d=""m 280.2335,639.49652 27.23347,-65.09625 h 5.22662 l 27.23347,65.09625 h -6.87714 l -8.43962,-20.35633 h -29.24709 l -8.3406,20.35633 h -6.78911 z m 29.89629,-57.58091 -13.39116,32.18501 h 26.40821 l -13.01705,-32.18501 z""
+               id=""path4781"" />
+            <path
+               style=""fill:#d22128""
+               inkscape:connector-curvature=""0""
+               d=""m 346.95825,639.49652 v -65.09625 h 26.95838 c 11.19048,0 19.25599,10.36523 19.25599,20.44436 0,10.64031 -7.51534,20.63142 -18.70582,20.63142 h -21.18159 v 24.02047 h -6.32696 z m 6.32696,-29.70924 h 20.80748 c 7.70239,0 12.65393,-7.0642 12.65393,-14.94265 0,-8.16454 -6.05188,-14.76659 -13.20411,-14.76659 h -20.2573 v 29.70924 z""
+               id=""path4783"" />
+            <path
+               style=""fill:#d22128""
+               inkscape:connector-curvature=""0""
+               d=""m 389.60751,639.49652 27.23347,-65.09625 h 5.22663 l 27.23346,65.09625 h -6.87713 l -8.43963,-20.35633 h -29.24709 l -8.3406,20.35633 h -6.78911 z m 29.8853,-57.58091 -13.39117,32.18501 h 26.40821 l -13.01704,-32.18501 z""
+               id=""path4785"" />
+            <path
+               style=""fill:#d22128""
+               inkscape:connector-curvature=""0""
+               d=""m 480.09965,574.03716 c 11.5536,0 19.98222,5.86482 24.02047,14.21642 l -5.1386,3.11397 c -4.12628,-8.61568 -12.19179,-11.55359 -19.25598,-11.55359 -15.59185,0 -24.1085,13.94133 -24.1085,27.04641 0,14.39247 10.54128,27.40952 24.38358,27.40952 7.33928,0 15.95496,-3.66414 20.08125,-12.10376 l 5.31465,2.75085 c -4.21431,9.71602 -15.7679,15.12971 -25.75901,15.12971 -17.88056,0 -30.43547,-17.05531 -30.43547,-33.56044 0,-15.67988 11.26751,-32.44909 30.89761,-32.44909 z""
+               id=""path4787"" />
+            <path
+               style=""fill:#d22128""
+               inkscape:connector-curvature=""0""
+               d=""m 565.69527,574.40027 v 65.09625 h -6.41499 v -30.43547 h -38.6 v 30.43547 h -6.32698 v -65.09625 h 6.32698 v 28.97201 h 38.6 v -28.97201 h 6.41499 z""
+               id=""path4789"" />
+            <path
+               style=""fill:#d22128""
+               inkscape:connector-curvature=""0""
+               d=""m 624.13445,633.80775 v 5.68877 h -43.7386 v -65.09625 h 42.91334 v 5.68877 h -36.58638 v 23.4703 h 31.90993 v 5.40268 h -31.90993 v 24.84573 h 37.41164 z""
+               id=""path4791"" />
+            <path
+               style=""fill:#6d6e71""
+               inkscape:connector-curvature=""0""
+               d=""m 640.17744,573.74007 c 0.99031,0.99031 1.48546,2.18968 1.48546,3.58711 0,1.39744 -0.49515,2.59681 -1.48546,3.59812 -0.99031,1.00131 -2.20069,1.50747 -3.60912,1.50747 -1.41945,0 -2.61882,-0.49515 -3.59812,-1.48546 -0.97931,-0.99031 -1.47446,-2.18968 -1.47446,-3.58712 0,-1.39743 0.49515,-2.5968 1.48546,-3.59812 0.99031,-1.00131 2.18968,-1.50746 3.59812,-1.50746 1.40844,0 2.60781,0.49515 3.59812,1.48546 z m -0.42914,6.7671 c 0.86927,-0.88027 1.29841,-1.9366 1.29841,-3.16898 0,-1.23239 -0.42914,-2.27771 -1.2874,-3.14698 -0.85827,-0.86927 -1.9146,-1.30941 -3.15798,-1.30941 -1.24339,0 -2.29972,0.44014 -3.16899,1.30941 -0.85827,0.88027 -1.2984,1.9366 -1.2984,3.16898 0,1.23239 0.42913,2.28871 1.27639,3.15798 0.85827,0.86928 1.9036,1.30941 3.14698,1.30941 1.24339,0 2.32172,-0.44013 3.19099,-1.32041 z m -0.71522,-4.14829 c 0,0.91329 -0.39612,1.48546 -1.19937,1.71654 l 1.46345,1.98061 h -1.17736 l -1.32041,-1.83757 h -1.21038 v 1.83757 h -0.9573 v -5.50171 h 2.06865 c 0.83626,0 1.43044,0.14304 1.79355,0.42913 0.36312,0.28609 0.53917,0.74824 0.53917,1.37543 z m -1.22138,0.77024 c 0.18706,-0.15405 0.28609,-0.41813 0.28609,-0.78124 0,-0.36311 -0.099,-0.61619 -0.29709,-0.74823 -0.19806,-0.14305 -0.53917,-0.20907 -1.04533,-0.20907 h -1.16636 v 1.98062 h 1.14436 c 0.52816,0 0.88027,-0.077 1.07833,-0.24208 z""
+               id=""path4793"" />
+          </g>
+        </g>
+        <g
+           transform=""translate(-5.4017408,7.3976335)""
+           id=""g4795"" />
+      </g>
+      <g
+         id=""g4801""
+         transform=""translate(-386.87395,-169.40258)"">
+        <g
+           transform=""translate(216.2639,-21.04569)""
+           id=""g4803"">
+          <path
+             sodipodi:type=""arc""
+             style=""fill:url(#linearGradient4866);fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient4868);stroke-width:5;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none""
+             id=""path4805""
+             sodipodi:cx=""412.33255""
+             sodipodi:cy=""629.22614""
+             sodipodi:rx=""63.02026""
+             sodipodi:ry=""63.02026""
+             d=""m 475.35281,629.22614 c 0,34.80512 -28.21513,63.02026 -63.02026,63.02026 -34.80513,0 -63.02026,-28.21514 -63.02026,-63.02026 0,-34.80513 28.21513,-63.02026 63.02026,-63.02026 34.80513,0 63.02026,28.21513 63.02026,63.02026 z""
+             transform=""matrix(0.99205956,0,0,0.99205956,-36.8047,240.87219)"" />
+        </g>
+        <path
+           id=""path4807""
+           d=""m 573.3125,817.40625 c -0.88906,-10e-4 -1.78972,0.005 -2.6875,0.0312 -1.0437,0.0308 -2.44587,0.36218 -4.0625,0.90625 27.30936,20.73702 37.12671,58.14612 20.25,90.65625 0.57317,0.0149 1.14197,0.0625 1.71875,0.0625 30.8438,0 56.61984,-21.49325 63.28125,-50.3125 -19.57261,-22.9434 -46.11809,-41.29445 -78.5,-41.34375 z""
+           style=""opacity:0.75;fill:url(#linearGradient4870);fill-opacity:1;fill-rule:nonzero;stroke:none""
+           inkscape:connector-curvature=""0"" />
+        <path
+           id=""path4809""
+           d=""m 566.5625,818.34375 c -9.06824,3.05185 -26.36759,13.8017 -43,28.15625 1.26312,34.19531 28.96142,61.60672 63.25,62.5 16.87671,-32.51013 7.05936,-69.91923 -20.25,-90.65625 z""
+           style=""opacity:0.75;fill:#28170b;fill-opacity:1;fill-rule:nonzero;stroke:none""
+           inkscape:connector-curvature=""0"" />
+        <g
+           id=""g4811"">
+          <path
+             id=""path4813""
+             d=""m 590.31114,806.30878 c -0.47239,-0.0321 -0.93151,0.0284 -1.375,0.25 -5.59922,2.80111 0,14 0,14 -16.80659,14.00851 -13.23603,37.9375 -32.84375,37.9375 -10.68885,0 -21.32208,-12.29336 -32.53125,-19.8125 -0.1443,1.77333 -0.25,3.56448 -0.25,5.375 0,24.51458 13.51013,45.86312 33.46875,57.06251 5.58277,-0.70321 11.15751,-2.11392 15.34375,-4.90625 21.99196,-14.6623 27.4523,-42.55657 36.4375,-56.03126 5.59618,-8.4063 31.82432,-7.67689 33.59375,-11.21875 2.80409,-5.6022 -5.60209,-14 -8.40625,-14 l -22.40625,0 c -1.56551,0 -4.02528,-2.78125 -5.59375,-2.78125 l -8.40625,0 c 0,0 -3.72451,-5.65027 -7.03125,-5.875 z""
+             style=""fill:#ffffff;fill-opacity:1""
+             inkscape:connector-curvature=""0"" />
+        </g>
+      </g>
+    </g>
+  </g>
+</svg>
diff --git a/docs/img/logo.png b/docs/img/logo.png
new file mode 100644
index 00000000000..36fd7e5a816
Binary files /dev/null and b/docs/img/logo.png differ
diff --git a/docs/img/logo16-d.png b/docs/img/logo16-d.png
new file mode 100644
index 00000000000..973d366bc0a
Binary files /dev/null and b/docs/img/logo16-d.png differ
diff --git a/docs/img/logo16.png b/docs/img/logo16.png
new file mode 100644
index 00000000000..ccb42b9fa4a
Binary files /dev/null and b/docs/img/logo16.png differ
diff --git a/docs/img/logo32-d.png b/docs/img/logo32-d.png
new file mode 100644
index 00000000000..ecf278d433d
Binary files /dev/null and b/docs/img/logo32-d.png differ
diff --git a/docs/img/logo32.png b/docs/img/logo32.png
new file mode 100644
index 00000000000..6c1b4062cf9
Binary files /dev/null and b/docs/img/logo32.png differ
diff --git a/docs/img/logo64-d.png b/docs/img/logo64-d.png
new file mode 100644
index 00000000000..1995e8a9557
Binary files /dev/null and b/docs/img/logo64-d.png differ
diff --git a/docs/img/logo64.png b/docs/img/logo64.png
new file mode 100644
index 00000000000..b4478831cb0
Binary files /dev/null and b/docs/img/logo64.png differ


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612554:2017-12-07T10:09:14.968+0000:1512612554:2017-12-07T10:09:14.968+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1494

githubbot:1512612562:2017-12-07T10:09:22.779+0000:1512612562:2017-12-07T10:09:22.779+0000:oscerd commented on issue #1551: [CAMEL-10543] new logo
URL: https://github.com/apache/camel/pull/1551#issuecomment-349922089
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612563:2017-12-07T10:09:23.588+0000:1512612563:2017-12-07T10:09:23.588+0000:oscerd closed pull request #1551: [CAMEL-10543] new logo
URL: https://github.com/apache/camel/pull/1551
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/apachecamel-source.pdf b/docs/img/apachecamel-source.pdf
new file mode 100644
index 00000000000..9f8ddd4d49b
Binary files /dev/null and b/docs/img/apachecamel-source.pdf differ
diff --git a/docs/img/icons/apachecamel-icon-64x64.jpg b/docs/img/icons/apachecamel-icon-64x64.jpg
new file mode 100644
index 00000000000..f41f75b0f9f
Binary files /dev/null and b/docs/img/icons/apachecamel-icon-64x64.jpg differ
diff --git a/docs/img/icons/apachecamel-icon-64x64.png b/docs/img/icons/apachecamel-icon-64x64.png
new file mode 100644
index 00000000000..c2b402a9b32
Binary files /dev/null and b/docs/img/icons/apachecamel-icon-64x64.png differ
diff --git a/docs/img/jpg-preview-only/apachecamel-alone.jpg b/docs/img/jpg-preview-only/apachecamel-alone.jpg
new file mode 100644
index 00000000000..12d0dd0b969
Binary files /dev/null and b/docs/img/jpg-preview-only/apachecamel-alone.jpg differ
diff --git a/docs/img/jpg-preview-only/apachecamel-bw-alone.jpg b/docs/img/jpg-preview-only/apachecamel-bw-alone.jpg
new file mode 100644
index 00000000000..683b8f93a5d
Binary files /dev/null and b/docs/img/jpg-preview-only/apachecamel-bw-alone.jpg differ
diff --git a/docs/img/jpg-preview-only/apachecamel-bw.jpg b/docs/img/jpg-preview-only/apachecamel-bw.jpg
new file mode 100644
index 00000000000..95b646848a6
Binary files /dev/null and b/docs/img/jpg-preview-only/apachecamel-bw.jpg differ
diff --git a/docs/img/jpg-preview-only/apachecamel.jpg b/docs/img/jpg-preview-only/apachecamel.jpg
new file mode 100644
index 00000000000..9647d5879b4
Binary files /dev/null and b/docs/img/jpg-preview-only/apachecamel.jpg differ
diff --git a/docs/img/png-nomargins/apachecamel-alone-nomargins.png b/docs/img/png-nomargins/apachecamel-alone-nomargins.png
new file mode 100644
index 00000000000..70635cd172a
Binary files /dev/null and b/docs/img/png-nomargins/apachecamel-alone-nomargins.png differ
diff --git a/docs/img/png-nomargins/apachecamel-nomargins.png b/docs/img/png-nomargins/apachecamel-nomargins.png
new file mode 100644
index 00000000000..1e17ccc8972
Binary files /dev/null and b/docs/img/png-nomargins/apachecamel-nomargins.png differ
diff --git a/docs/img/png-nomargins/apachecamel-normagins-bw-alone-nomargins.png b/docs/img/png-nomargins/apachecamel-normagins-bw-alone-nomargins.png
new file mode 100644
index 00000000000..8c4803b15ba
Binary files /dev/null and b/docs/img/png-nomargins/apachecamel-normagins-bw-alone-nomargins.png differ
diff --git a/docs/img/png-nomargins/apachecamel-normagins-bw-nomargins.png b/docs/img/png-nomargins/apachecamel-normagins-bw-nomargins.png
new file mode 100644
index 00000000000..c411b3b43d0
Binary files /dev/null and b/docs/img/png-nomargins/apachecamel-normagins-bw-nomargins.png differ
diff --git a/docs/img/svg/apachecamel-alone.svg b/docs/img/svg/apachecamel-alone.svg
new file mode 100644
index 00000000000..ddcdfee97c6
--- /dev/null
+++ b/docs/img/svg/apachecamel-alone.svg
@@ -0,0 +1,11 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 548.63 369.89"">
+  <defs>
+    <style>
+      .a {
+        fill: #e8582d;
+      }
+    </style>
+  </defs>
+  <title>apachecamel-alone</title>
+  <path class=""a"" d=""M508.06,355.85c-14.36,0-37.14,2.21-49.18,3.38s-37.63.7-38.85,0-.76-2.62-1-4.66c-1.26-11.35,2-23.87,3.9-35.12,2.94-17.38,13.89-44.58,7.09-61.36-4-9.87-12.88-17-14.52-28-1.69-11.27,1.14-24.41,2.33-35.72,1.11-10.56,2.8-21.19,2.52-31.84-.22-8.43-3.34-17.2-4.81-27.2s-15.11-22.94-18.59-26-14-18.81-21.55-28.18c-6.76-8.43-16.23-11.72-24.85-17.65-10-6.87-16.66-16-24.44-25C312.54,22.77,289.9,5.8,268.27,16.7c-17.59,8.86-26.17,29.69-44,39.49-16.56,9.1-36.89,12.92-51.16,25.69-13.06,11.69-20.61,44.72-39.86,46.37-23.56,2-21.64-25.05-21.44-39.5.31-22.68-.75-43.7-9-64.53-1.54-3.87-2.44-12-4.35-17.62-.79-2.32-1.74-4.21-3-5.19-4.14-3.25-22.87,0-28.2,1.29-10.87,2.65-20.15,8-31.53,9.69-8.92,1.29-16.78.3-24.18,6.1C-1.61,28.78-7.4,54.38,15.58,56.38c11.75,1,18.46-7.34,30.88-1.1,5.38,2.71,9,5.84,11,11.56,4.06,11.66,1.14,29.47,1.39,41.83.44,21.54,2.51,38.83,17.84,55.24a102.42,102.42,0,0,0,44.14,27.82c14.47,4.56,46.49.71,53.8,15.91,9.1,18.93,1.75,45.2,4.88,64.88,3.23,20.27,8.45,51.56-3.81,70.48C166.5,357.2,149,357.69,137.5,359.1s-15.75.85-23.73,1.84c-23.84,2.94-54.1,2-54.1,2s-43.13-4.48-46.54,0,24.78,7,40.29,7,42-2.48,49.18-3.38a138.14,138.14,0,0,1,30.34-.2c14.3,1.45,45.7-.37,64.53-.43q39-.12,77.92-.26c24.54-.07,49.07.31,73.6.39,10.87,0,21.75,0,32.62,0,7.54,0,21.87,1.21,30.2,1s23.22-.58,35.9-2.14c23.84-2.94,33.85-2.58,54.1-2s43.13,4.48,46.54,0S522.42,355.85,508.06,355.85Zm-298,1.9C186.91,365,192,342.67,194,328.4c2.64-18.54,4.39-37.14,7.83-55.28,2.34-12.3-1.38-32.49,7-43.13,10.67,9.5,12.58,27.16,16,39.93,4.76,17.62,7,32,8.46,50.4C233.36,339.08,230.15,351.43,210.07,357.75Zm80,2.89c-9,.54-20.58,3.15-29.42.26-11.1-3.64-10.18-11.7-11.61-23.06-3.13-24.75-.34-50.22-4.11-74.84-1.78-11.65-5.87-23.14-9.25-34.39-3.51-11.7-6.58-17.31,6.05-21.92,21.25-7.76,44.52-5.13,65.8-15.07C311,190,328.69,177.16,332.08,179c2.49,1.32,6.17,21.87,7.53,25.48a289.82,289.82,0,0,1,16.62,71.15C356.11,315.76,333.1,358.08,290.1,360.64Zm120.2-52.35c-2.71,13.35-4.64,26.72-12.94,38a35.81,35.81,0,0,1-31.56,14.21c-13.83-1.29-18.51-1.06-13.39-15.78a287.27,287.27,0,0,1,17-39.9C375.71,292.88,387,283,385.49,269c-1.62-14.74-11.45-29.88-7.08-45.21,10.66,6.5,19.7,29.74,24.27,41C408.51,279.12,413.42,292.92,410.3,308.28Z""/>
+</svg>
diff --git a/docs/img/svg/apachecamel.svg b/docs/img/svg/apachecamel.svg
new file mode 100644
index 00000000000..15ae6f4c901
--- /dev/null
+++ b/docs/img/svg/apachecamel.svg
@@ -0,0 +1,26 @@
+<svg xmlns=""http://www.w3.org/2000/svg"" viewBox=""0 0 548.63 489.22"">
+  <defs>
+    <style>
+      .a {
+        fill: #e8582d;
+      }
+    </style>
+  </defs>
+  <title>apachecamel</title>
+  <g>
+    <g>
+      <path d=""M5.79,467.38l3.8-1.54a3.88,3.88,0,0,0,2.35-2.35l16.14-41.09L33,413h5.66l19.82,50.52a4.42,4.42,0,0,0,1,1.42,4.13,4.13,0,0,0,1.33.93l3.84,1.5V470H39.92v-2.63l7-1.86L41,450.6H22.65L17,465.32l6.88,2.06V470H5.79Zm33.33-21.6-5.34-13.55-2-5.46h-.12l-7.08,19Z""/>
+      <path d=""M63.46,486.68l4.21-1.46a3.09,3.09,0,0,0,1.33-.85,2.06,2.06,0,0,0,.44-1.37V438.67a2.7,2.7,0,0,0-.51-1.68,4,4,0,0,0-1.84-1.15l-3.56-1.33v-2.18l16.74-3v6.59h.12a17.8,17.8,0,0,1,3.68-3.94,15.19,15.19,0,0,1,3.58-2.06,12.08,12.08,0,0,1,3.2-.81q1.48-.14,2.49-.14a14.12,14.12,0,0,1,6.55,1.48,14.46,14.46,0,0,1,4.87,4.06,18.25,18.25,0,0,1,3,6.13,27.6,27.6,0,0,1,1,7.75,29.42,29.42,0,0,1-1.25,8.71,21.7,21.7,0,0,1-3.64,7.1,17.36,17.36,0,0,1-5.84,4.79,17,17,0,0,1-7.83,1.76,14.79,14.79,0,0,1-3.2-.32,12.38,12.38,0,0,1-4.81-2.18,13.42,13.42,0,0,1-1.7-1.5l0,1.78V483a2.16,2.16,0,0,0,.49,1.46,2.44,2.44,0,0,0,1.33.77l5.34,1.46v2.55H63.46Zm24.1-21.27a8,8,0,0,0,4.33-1.13,8.9,8.9,0,0,0,3-3.07,15.18,15.18,0,0,0,1.72-4.53,25.9,25.9,0,0,0,.57-5.54,34.23,34.23,0,0,0-.53-6.23A15.83,15.83,0,0,0,95,440,8.62,8.62,0,0,0,92,436.89a8,8,0,0,0-4.35-1.13q-.73,0-1.7.08a8.7,8.7,0,0,0-2,.4,6.79,6.79,0,0,0-1.88,1A5.57,5.57,0,0,0,80.61,439v24.59a5.2,5.2,0,0,0,1.44.81,11,11,0,0,0,1.9.57q1,.2,2,.32A13.65,13.65,0,0,0,87.56,465.4Z""/>
+      <path d=""M124.13,470.82a10.8,10.8,0,0,1-4.49-.91,10.64,10.64,0,0,1-3.46-2.45,10.83,10.83,0,0,1-2.2-3.52,11.9,11.9,0,0,1,.1-8.68,12.12,12.12,0,0,1,2.33-3.54,14.48,14.48,0,0,1,3.38-2.63,22.15,22.15,0,0,1,4-1.78,27.7,27.7,0,0,1,4.17-1,24.33,24.33,0,0,1,3.94-.34q.4,0,1.11.06l1.5.12,1.52.12q.73.06,1.13.06l0-5.54a18.59,18.59,0,0,0-.24-3.3,4.55,4.55,0,0,0-.85-2.06,3.21,3.21,0,0,0-1.58-1.05,8.43,8.43,0,0,0-2.47-.3,9.07,9.07,0,0,0-3.44.75,29.11,29.11,0,0,0-3.62,1.8q-1.8,1.05-3.4,2.2t-2.77,1.92h-1.5l-1.46-8.29q1.5-.65,3.24-1.27t3.74-1.13a38.29,38.29,0,0,1,4.25-.81,35.52,35.52,0,0,1,4.75-.3,28.46,28.46,0,0,1,5.88.63,15.67,15.67,0,0,1,5.32,2.14,11.34,11.34,0,0,1,5.26,10.25l-.2,20.26a2.7,2.7,0,0,0,.22,1.13,2.46,2.46,0,0,0,.65.85,3,3,0,0,0,1,.57,4.6,4.6,0,0,0,1.46.2,10.44,10.44,0,0,0,1.46-.16q1-.16,1.9-.36h.89v3a10.25,10.25,0,0,1-1.72,1.05,24.6,24.6,0,0,1-2.51,1.09,24.29,24.29,0,0,1-2.91.89,12.42,12.42,0,0,1-2.89.36,16,16,0,0,1-3.46-.34,7.69,7.69,0,0,1-2.69-1.11,5.15,5.15,0,0,1-1.76-2.06,7.29,7.29,0,0,1-.63-3.2h-.08a15.51,15.51,0,0,1-3.2,3.62,13.53,13.53,0,0,1-3.44,2,13.15,13.15,0,0,1-3.36.87A26.65,26.65,0,0,1,124.13,470.82Zm6.31-6.35a11.27,11.27,0,0,0,1.78-.14,6.91,6.91,0,0,0,1.78-.55,7.59,7.59,0,0,0,1.68-1.05,6.3,6.3,0,0,0,1.4-1.66l.08-11.45a25.78,25.78,0,0,0-5.12.46,11.73,11.73,0,0,0-3.9,1.48,7.08,7.08,0,0,0-2.49,2.57,7.65,7.65,0,0,0-.87,3.78,8.19,8.19,0,0,0,.53,3.15,5.85,5.85,0,0,0,1.33,2,4.5,4.5,0,0,0,1.82,1.07A6.88,6.88,0,0,0,130.43,464.47Z""/>
+      <path d=""M175.13,470.9a18.42,18.42,0,0,1-7.79-1.56,16.32,16.32,0,0,1-5.68-4.27,18.72,18.72,0,0,1-3.5-6.29,24,24,0,0,1-1.19-7.62,25.33,25.33,0,0,1,.65-5.74,21.56,21.56,0,0,1,1.94-5.24,21.33,21.33,0,0,1,3.17-4.49,18.82,18.82,0,0,1,4.37-3.5,22.6,22.6,0,0,1,5.56-2.29,25.72,25.72,0,0,1,6.71-.83,22.68,22.68,0,0,1,4,.32,22,22,0,0,1,3.22.81,21.53,21.53,0,0,1,2.49,1q1.07.53,1.84.93l-1.46,8.45h-1.58q-1.5-1.09-3.19-2.18a38.28,38.28,0,0,0-3.42-2,24,24,0,0,0-3.4-1.42,10.16,10.16,0,0,0-3.13-.55,2.89,2.89,0,0,0-1.72.57,8.83,8.83,0,0,0-1.76,1.86,7.39,7.39,0,0,0-1,1.7,16.77,16.77,0,0,0-.83,2.59,31.44,31.44,0,0,0-.85,7.4,29.16,29.16,0,0,0,.69,6.67,13.55,13.55,0,0,0,2.14,4.91,9.24,9.24,0,0,0,3.74,3,13.25,13.25,0,0,0,5.48,1,12.61,12.61,0,0,0,3.07-.36,15.31,15.31,0,0,0,2.69-.93,19.87,19.87,0,0,0,2.26-1.21l1.84-1.13h1.09v3.44a29.46,29.46,0,0,1-3.09,2.43,27.76,27.76,0,0,1-3.84,2.2,24.15,24.15,0,0,1-4.49,1.6A20.7,20.7,0,0,1,175.13,470.9Z""/>
+      <path d=""M194.21,467.47,198.3,466a3.12,3.12,0,0,0,1.29-.81,2,2,0,0,0,.49-1.42V418.2a2.71,2.71,0,0,0-.55-1.74,3.92,3.92,0,0,0-1.8-1.13l-4-1.46v-2.18l17.51-3v25l-.08,2.3a22.55,22.55,0,0,1,3.32-3.7,13.81,13.81,0,0,1,3.19-2.12,11.81,11.81,0,0,1,3.11-1,19.9,19.9,0,0,1,3.11-.24,15.16,15.16,0,0,1,5,.81,11.13,11.13,0,0,1,4.11,2.49,11.34,11.34,0,0,1,2.75,4.37,18.57,18.57,0,0,1,1,6.41v20.63a2.23,2.23,0,0,0,.53,1.58,3.33,3.33,0,0,0,1.25.85l3.64,1.42V470h-22v-2.55l3.72-1.42a3.42,3.42,0,0,0,1.21-.85,2.23,2.23,0,0,0,.53-1.58V446.88a38.67,38.67,0,0,0-.26-4.81,10.08,10.08,0,0,0-1-3.44,4.86,4.86,0,0,0-2.08-2.08,7.75,7.75,0,0,0-3.58-.71q-.93,0-1.94.08a7.54,7.54,0,0,0-2,.45,7.7,7.7,0,0,0-1.88,1,6,6,0,0,0-1.58,1.78v24.63a1.92,1.92,0,0,0,.49,1.42,4.31,4.31,0,0,0,1.29.85l3.15,1.42V470h-22Z""/>
+      <path d=""M265.68,470.9a24,24,0,0,1-8.19-1.33,17.5,17.5,0,0,1-6.39-4,17.82,17.82,0,0,1-4.17-6.49,24.88,24.88,0,0,1-1.48-8.92,23.37,23.37,0,0,1,1.42-8.11,20.37,20.37,0,0,1,4.06-6.77,19.61,19.61,0,0,1,6.47-4.65,20.63,20.63,0,0,1,8.63-1.74,18.72,18.72,0,0,1,7.36,1.36,16.53,16.53,0,0,1,5.36,3.54,15,15,0,0,1,3.3,5,15.37,15.37,0,0,1,1.13,5.74c0,.24,0,.58,0,1s0,.87-.06,1.31-.05.87-.08,1.27-.05.7-.08.89H257.06q0,7.48,3.24,11.38t9.87,3.9a18.78,18.78,0,0,0,4-.38,21.32,21.32,0,0,0,3.24-1A20.37,20.37,0,0,0,280,461.8l2-1.13h1.09v3.4a29.42,29.42,0,0,1-3.28,2.39,31.42,31.42,0,0,1-4.13,2.21,28.4,28.4,0,0,1-4.77,1.62A21.93,21.93,0,0,1,265.68,470.9Zm6.11-25.64a37.79,37.79,0,0,0-.28-4.79,12.81,12.81,0,0,0-1-3.8,6.27,6.27,0,0,0-2-2.51,5.32,5.32,0,0,0-3.17-.91,6.58,6.58,0,0,0-3.32.83,7.06,7.06,0,0,0-2.45,2.37,12.67,12.67,0,0,0-1.56,3.78,27,27,0,0,0-.73,5Z""/>
+      <path d=""M336.13,471.19a30.09,30.09,0,0,1-11.24-2,23.76,23.76,0,0,1-8.57-5.76,25.6,25.6,0,0,1-5.48-9.16,36.21,36.21,0,0,1-1.92-12.19,34.6,34.6,0,0,1,1-8.25,30.81,30.81,0,0,1,2.69-7.16,26.37,26.37,0,0,1,4.21-5.86,25.66,25.66,0,0,1,5.5-4.39,26.14,26.14,0,0,1,6.55-2.75,28.3,28.3,0,0,1,7.4-1,42.73,42.73,0,0,1,4.63.28q2.57.28,5.14.73t4.89,1q2.32.57,3.9,1.09v14h-3.15l-2.87-7.2a2.86,2.86,0,0,0-.73-1,7.53,7.53,0,0,0-1-.71,24.72,24.72,0,0,0-5-2.16,19,19,0,0,0-5.52-.79,12.6,12.6,0,0,0-6.09,1.48,13.21,13.21,0,0,0-4.67,4.37,22.38,22.38,0,0,0-3,7.12,40.63,40.63,0,0,0-1.05,9.77,39.86,39.86,0,0,0,1.17,10.17,20.7,20.7,0,0,0,3.52,7.46,15.25,15.25,0,0,0,5.78,4.61,18.82,18.82,0,0,0,7.93,1.58,18.32,18.32,0,0,0,5.18-.67,20.52,20.52,0,0,0,4-1.64,18.53,18.53,0,0,0,3.13-2.12l2.53-2.16h1.94v4.61a41.21,41.21,0,0,1-3.94,2.93,38.49,38.49,0,0,1-5,2.79,36.35,36.35,0,0,1-5.74,2.1A22.85,22.85,0,0,1,336.13,471.19Z""/>
+      <path d=""M370.79,470.82a10.8,10.8,0,0,1-4.49-.91,10.65,10.65,0,0,1-3.46-2.45,10.84,10.84,0,0,1-2.2-3.52,11.91,11.91,0,0,1,.1-8.68,12.13,12.13,0,0,1,2.33-3.54,14.47,14.47,0,0,1,3.38-2.63,22.16,22.16,0,0,1,4-1.78,27.69,27.69,0,0,1,4.17-1,24.33,24.33,0,0,1,3.94-.34q.4,0,1.11.06l1.5.12,1.52.12q.73.06,1.13.06l0-5.54a18.69,18.69,0,0,0-.24-3.3,4.56,4.56,0,0,0-.85-2.06,3.22,3.22,0,0,0-1.58-1.05,8.43,8.43,0,0,0-2.47-.3,9.07,9.07,0,0,0-3.44.75,29.14,29.14,0,0,0-3.62,1.8q-1.8,1.05-3.4,2.2t-2.77,1.92H364l-1.46-8.29q1.5-.65,3.24-1.27t3.74-1.13a38.28,38.28,0,0,1,4.25-.81,35.51,35.51,0,0,1,4.75-.3,28.45,28.45,0,0,1,5.88.63,15.66,15.66,0,0,1,5.32,2.14A11.34,11.34,0,0,1,395,441.94l-.2,20.26a2.7,2.7,0,0,0,.22,1.13,2.45,2.45,0,0,0,.65.85,3,3,0,0,0,1,.57,4.6,4.6,0,0,0,1.46.2,10.46,10.46,0,0,0,1.46-.16c.67-.11,1.31-.23,1.9-.36h.89v3a10.22,10.22,0,0,1-1.72,1.05,24.61,24.61,0,0,1-2.51,1.09,24.28,24.28,0,0,1-2.91.89,12.43,12.43,0,0,1-2.89.36,16,16,0,0,1-3.46-.34,7.69,7.69,0,0,1-2.69-1.11,5.14,5.14,0,0,1-1.76-2.06,7.28,7.28,0,0,1-.63-3.2h-.08a15.5,15.5,0,0,1-3.2,3.62,13.53,13.53,0,0,1-3.44,2,13.16,13.16,0,0,1-3.36.87A26.64,26.64,0,0,1,370.79,470.82Zm6.31-6.35a11.27,11.27,0,0,0,1.78-.14,6.9,6.9,0,0,0,1.78-.55,7.59,7.59,0,0,0,1.68-1.05,6.3,6.3,0,0,0,1.4-1.66l.08-11.45a25.77,25.77,0,0,0-5.12.46,11.74,11.74,0,0,0-3.9,1.48,7.08,7.08,0,0,0-2.49,2.57,7.65,7.65,0,0,0-.87,3.78,8.19,8.19,0,0,0,.53,3.15,5.86,5.86,0,0,0,1.33,2,4.5,4.5,0,0,0,1.82,1.07A6.88,6.88,0,0,0,377.1,464.47Z""/>
+      <path d=""M403.47,467.51l4.17-1.42a2.49,2.49,0,0,0,1.23-.83,2.3,2.3,0,0,0,.46-1.48V438.67a2.48,2.48,0,0,0-.55-1.66,4.12,4.12,0,0,0-1.76-1.09l-3.56-1.33v-2.22l16.74-3.07v6.59h.08a20.46,20.46,0,0,1,3.22-3.58,15.13,15.13,0,0,1,3.2-2.12,11.29,11.29,0,0,1,3.13-1,19.39,19.39,0,0,1,3-.24,15.7,15.7,0,0,1,3.78.45,11.38,11.38,0,0,1,3.3,1.38,10,10,0,0,1,2.63,2.39,11.07,11.07,0,0,1,1.78,3.52,24.93,24.93,0,0,1,3.76-4.29,14.48,14.48,0,0,1,3.44-2.29,11.44,11.44,0,0,1,3.2-1,23,23,0,0,1,3-.2,14.34,14.34,0,0,1,4.85.81,10.56,10.56,0,0,1,4,2.51,11.54,11.54,0,0,1,2.65,4.37,19.13,19.13,0,0,1,1,6.39v20.83a1.93,1.93,0,0,0,.49,1.4,3.61,3.61,0,0,0,1.29.83l3.64,1.42V470h-22v-2.51l3.68-1.42a2.81,2.81,0,0,0,1.23-.85,2.28,2.28,0,0,0,.47-1.5V446.88a45.28,45.28,0,0,0-.22-4.77,10.14,10.14,0,0,0-.91-3.44,4.87,4.87,0,0,0-2-2.1,6.78,6.78,0,0,0-3.38-.73q-.85,0-1.84.08a7.26,7.26,0,0,0-2,.45,7.82,7.82,0,0,0-1.88,1,5.56,5.56,0,0,0-1.56,1.84v24.59a1.8,1.8,0,0,0,.51,1.4,5,5,0,0,0,1.27.83l3.16,1.42V470H428.87v-2.51l3.64-1.42a2.91,2.91,0,0,0,1.23-.83,2.14,2.14,0,0,0,.46-1.44V446.88a45,45,0,0,0-.22-4.77,10.14,10.14,0,0,0-.91-3.44,4.83,4.83,0,0,0-2-2.1,6.9,6.9,0,0,0-3.4-.73q-.93,0-1.92.08a7.53,7.53,0,0,0-1.94.42,6.77,6.77,0,0,0-1.82,1,5.94,5.94,0,0,0-1.52,1.8v24.63a1.94,1.94,0,0,0,.5,1.44,3.9,3.9,0,0,0,1.27.83l3.15,1.42V470h-22Z""/>
+      <path d=""M499.12,470.9a24,24,0,0,1-8.19-1.33,17.51,17.51,0,0,1-6.39-4,17.82,17.82,0,0,1-4.17-6.49,24.88,24.88,0,0,1-1.48-8.92,23.37,23.37,0,0,1,1.42-8.11,20.36,20.36,0,0,1,4.06-6.77,19.6,19.6,0,0,1,6.47-4.65,20.63,20.63,0,0,1,8.63-1.74,18.72,18.72,0,0,1,7.36,1.36,16.53,16.53,0,0,1,5.36,3.54,15,15,0,0,1,3.3,5,15.35,15.35,0,0,1,1.13,5.74c0,.24,0,.58,0,1s0,.87-.06,1.31-.05.87-.08,1.27-.05.7-.08.89H490.51q0,7.48,3.24,11.38t9.87,3.9a18.79,18.79,0,0,0,4-.38,21.34,21.34,0,0,0,3.24-1,20.45,20.45,0,0,0,2.61-1.21l2-1.13h1.09v3.4a29.53,29.53,0,0,1-3.28,2.39,31.44,31.44,0,0,1-4.12,2.21,28.42,28.42,0,0,1-4.77,1.62A21.93,21.93,0,0,1,499.12,470.9Zm6.11-25.64a37.79,37.79,0,0,0-.28-4.79,12.85,12.85,0,0,0-1-3.8,6.28,6.28,0,0,0-2-2.51,5.32,5.32,0,0,0-3.17-.91,6.58,6.58,0,0,0-3.32.83,7.06,7.06,0,0,0-2.45,2.37,12.64,12.64,0,0,0-1.56,3.78,27,27,0,0,0-.73,5Z""/>
+      <path d=""M519.91,467.47l4.33-1.46a3,3,0,0,0,1.33-.87,2.13,2.13,0,0,0,.45-1.39V418.2a2.78,2.78,0,0,0-.53-1.74,3.78,3.78,0,0,0-1.82-1.13l-4.17-1.46v-2.18l17.67-3v55.09a1.94,1.94,0,0,0,.51,1.44A3.93,3.93,0,0,0,539,466l3.88,1.46V470H519.91Z""/>
+    </g>
+    <path class=""a"" d=""M508.06,355.85c-14.36,0-37.14,2.21-49.18,3.38s-37.63.7-38.85,0-.76-2.62-1-4.66c-1.26-11.35,2-23.87,3.9-35.12,2.94-17.38,13.89-44.58,7.09-61.36-4-9.87-12.88-17-14.52-28-1.69-11.27,1.14-24.41,2.33-35.72,1.11-10.56,2.8-21.19,2.52-31.84-.22-8.43-3.34-17.2-4.81-27.2s-15.11-22.94-18.59-26-14-18.81-21.55-28.18c-6.76-8.43-16.23-11.72-24.85-17.65-10-6.87-16.66-16-24.44-25C312.54,22.77,289.9,5.8,268.27,16.7c-17.59,8.86-26.17,29.69-44,39.49-16.56,9.1-36.89,12.92-51.16,25.69-13.06,11.69-20.61,44.72-39.86,46.37-23.56,2-21.64-25.05-21.44-39.5.31-22.68-.75-43.7-9-64.53-1.54-3.87-2.44-12-4.35-17.62-.79-2.32-1.74-4.21-3-5.19-4.14-3.25-22.87,0-28.2,1.29-10.87,2.65-20.15,8-31.53,9.69-8.92,1.29-16.78.3-24.18,6.1C-1.61,28.78-7.4,54.38,15.58,56.38c11.75,1,18.46-7.34,30.88-1.1,5.38,2.71,9,5.84,11,11.56,4.06,11.66,1.14,29.47,1.39,41.83.44,21.54,2.51,38.83,17.84,55.24a102.42,102.42,0,0,0,44.14,27.82c14.47,4.56,46.49.71,53.8,15.91,9.1,18.93,1.75,45.2,4.88,64.88,3.23,20.27,8.45,51.56-3.81,70.48C166.5,357.2,149,357.69,137.5,359.1s-15.75.85-23.73,1.84c-23.84,2.94-54.1,2-54.1,2s-43.13-4.48-46.54,0,24.78,7,40.29,7,42-2.48,49.18-3.38a138.14,138.14,0,0,1,30.34-.2c14.3,1.45,45.7-.37,64.53-.43q39-.12,77.92-.26c24.54-.07,49.07.31,73.6.39,10.87,0,21.75,0,32.62,0,7.54,0,21.87,1.21,30.2,1s23.22-.58,35.9-2.14c23.84-2.94,33.85-2.58,54.1-2s43.13,4.48,46.54,0S522.42,355.85,508.06,355.85Zm-298,1.9C186.91,365,192,342.67,194,328.4c2.64-18.54,4.39-37.14,7.83-55.28,2.34-12.3-1.38-32.49,7-43.13,10.67,9.5,12.58,27.16,16,39.93,4.76,17.62,7,32,8.46,50.4C233.36,339.08,230.15,351.43,210.07,357.75Zm80,2.89c-9,.54-20.58,3.15-29.42.26-11.1-3.64-10.18-11.7-11.61-23.06-3.13-24.75-.34-50.22-4.11-74.84-1.78-11.65-5.87-23.14-9.25-34.39-3.51-11.7-6.58-17.31,6.05-21.92,21.25-7.76,44.52-5.13,65.8-15.07C311,190,328.69,177.16,332.08,179c2.49,1.32,6.17,21.87,7.53,25.48a289.82,289.82,0,0,1,16.62,71.15C356.11,315.76,333.1,358.08,290.1,360.64Zm120.2-52.35c-2.71,13.35-4.64,26.72-12.94,38a35.81,35.81,0,0,1-31.56,14.21c-13.83-1.29-18.51-1.06-13.39-15.78a287.27,287.27,0,0,1,17-39.9C375.71,292.88,387,283,385.49,269c-1.62-14.74-11.45-29.88-7.08-45.21,10.66,6.5,19.7,29.74,24.27,41C408.51,279.12,413.42,292.92,410.3,308.28Z""/>
+  </g>
+</svg>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612563:2017-12-07T10:09:23.948+0000:1512612563:2017-12-07T10:09:23.948+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1551

githubbot:1512612580:2017-12-07T10:09:40.967+0000:1512612580:2017-12-07T10:09:40.967+0000:oscerd commented on issue #1573: CAMEL-10543: possible new logo with PD camel shape
URL: https://github.com/apache/camel/pull/1573#issuecomment-349922161
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612581:2017-12-07T10:09:41.833+0000:1512612581:2017-12-07T10:09:41.833+0000:oscerd closed pull request #1573: CAMEL-10543: possible new logo with PD camel shape
URL: https://github.com/apache/camel/pull/1573
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/color-camel-logo.png b/docs/img/color-camel-logo.png
new file mode 100644
index 00000000000..bcf6361fdc4
Binary files /dev/null and b/docs/img/color-camel-logo.png differ
diff --git a/docs/img/color-camel-logo.svg b/docs/img/color-camel-logo.svg
new file mode 100644
index 00000000000..6691b5e798f
--- /dev/null
+++ b/docs/img/color-camel-logo.svg
@@ -0,0 +1,2252 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc=""http://purl.org/dc/elements/1.1/""
+   xmlns:cc=""http://creativecommons.org/ns#""
+   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
+   xmlns:svg=""http://www.w3.org/2000/svg""
+   xmlns=""http://www.w3.org/2000/svg""
+   xmlns:xlink=""http://www.w3.org/1999/xlink""
+   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
+   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
+   id=""svg4023""
+   version=""1.1""
+   inkscape:version=""0.91 r13725""
+   xml:space=""preserve""
+   width=""390""
+   height=""386.59055""
+   viewBox=""0 0 390.00001 386.59055""
+   sodipodi:docname=""color-camel-logo.svg""
+   inkscape:export-filename=""/Users/bradparks/projects/camel/docs/img/color-camel-logo.png""
+   inkscape:export-xdpi=""79.91658""
+   inkscape:export-ydpi=""79.91658""><metadata
+     id=""metadata4029""><rdf:RDF><cc:Work
+         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
+           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /><dc:title /><cc:license
+           rdf:resource="""" /></cc:Work></rdf:RDF></metadata><defs
+     id=""defs4027""><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4101""><path
+         d=""m 436.349,528.702 c 0.153,0.165 0.306,0.33 0.459,0.495 l 0,0 c -0.154,-0.165 -0.306,-0.33 -0.459,-0.495 m -0.454,-0.496 c 0.151,0.166 0.302,0.331 0.454,0.496 l 0,0 c -0.152,-0.165 -0.303,-0.33 -0.454,-0.496""
+         id=""path4103""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,488.08881,589.06226)""
+       spreadMethod=""pad""
+       id=""linearGradient4109""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4111"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4113"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4121""><path
+         d=""m 436.349,528.702 c 0.153,0.165 0.306,0.33 0.459,0.495 l 0,0 c -0.154,-0.165 -0.306,-0.33 -0.459,-0.495 m -0.454,-0.496 c 0.151,0.166 0.302,0.331 0.454,0.496 l 0,0 c -0.152,-0.165 -0.303,-0.33 -0.454,-0.496""
+         id=""path4123""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-13.65575,-98.776596,-98.776596,13.65575,443.94882,583.65515)""
+       spreadMethod=""pad""
+       id=""linearGradient4129""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop4131"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop4133"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop4135"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop4137"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4145""><path
+         d=""m 438.05,530.527 c 0.165,0.175 0.335,0.35 0.503,0.525 l 0,0 c -0.168,-0.175 -0.338,-0.35 -0.503,-0.525""
+         id=""path4147""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,488.18134,588.98297)""
+       spreadMethod=""pad""
+       id=""linearGradient4153""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4155"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4157"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4165""><path
+         d=""m 438.05,530.527 c 0.165,0.175 0.335,0.35 0.503,0.525 l 0,0 c -0.168,-0.175 -0.338,-0.35 -0.503,-0.525""
+         id=""path4167""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-13.65575,-98.776596,-98.776596,13.65575,445.57874,583.42987)""
+       spreadMethod=""pad""
+       id=""linearGradient4173""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop4175"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop4177"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop4179"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop4181"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4189""><path
+         d=""m 433.739,525.793 c 0.383,0.438 0.769,0.876 1.163,1.315 l 0,0 c -0.394,-0.439 -0.78,-0.877 -1.163,-1.315""
+         id=""path4191""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,488.03015,589.11255)""
+       spreadMethod=""pad""
+       id=""linearGradient4197""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4199"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4201"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4209""><path
+         d=""m 433.739,525.793 c 0.383,0.438 0.769,0.876 1.163,1.315 l 0,0 c -0.394,-0.439 -0.78,-0.877 -1.163,-1.315""
+         id=""path4211""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-13.65575,-98.776596,-98.776596,13.65575,442.26083,583.88855)""
+       spreadMethod=""pad""
+       id=""linearGradient4217""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop4219"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop4221"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop4223"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop4225"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4233""><path
+         d=""m 431.152,522.779 c 0.604,0.723 1.224,1.45 1.854,2.179 l 0,0 c -0.63,-0.729 -1.25,-1.456 -1.854,-2.179""
+         id=""path4235""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429546,-54.167808,-54.167808,46.429546,488.01376,589.12659)""
+       spreadMethod=""pad""
+       id=""linearGradient4241""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4243"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4245"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4253""><path
+         d=""m 431.152,522.779 c 0.604,0.723 1.224,1.45 1.854,2.179 l 0,0 c -0.63,-0.729 -1.25,-1.456 -1.854,-2.179""
+         id=""path4255""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-13.65575,-98.776596,-98.776596,13.65575,440.41251,584.14404)""
+       spreadMethod=""pad""
+       id=""linearGradient4261""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop4263"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop4265"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop4267"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop4269"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4321""><path
+         d=""m 491.215,572.292 c 0.743,0.646 1.472,1.3 2.19,1.961 l 0,0 c -0.718,-0.661 -1.447,-1.315 -2.19,-1.961""
+         id=""path4323""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,498.32455,580.28876)""
+       spreadMethod=""pad""
+       id=""linearGradient4329""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4331"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4333"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4341""><path
+         d=""m 491.215,572.292 c 0.743,0.646 1.472,1.3 2.19,1.961 l 0,0 c -0.718,-0.661 -1.447,-1.315 -2.19,-1.961""
+         id=""path4343""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,469.04431,495.21826)""
+       spreadMethod=""pad""
+       id=""linearGradient4349""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4351"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4353"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4361""><path
+         d=""m 470.977,557.941 c 0.173,0.114 0.347,0.227 0.519,0.341 l 0,0 c -0.173,-0.114 -0.346,-0.227 -0.519,-0.341 m -0.79,-0.522 c 0.261,0.174 0.526,0.348 0.79,0.522 l 0,0 c -0.264,-0.174 -0.529,-0.348 -0.79,-0.522""
+         id=""path4363""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,493.56882,584.36511)""
+       spreadMethod=""pad""
+       id=""linearGradient4369""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4371"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4373"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4381""><path
+         d=""m 470.977,557.941 c 0.173,0.114 0.347,0.227 0.519,0.341 l 0,0 c -0.173,-0.114 -0.346,-0.227 -0.519,-0.341 m -0.79,-0.522 c 0.261,0.174 0.526,0.348 0.79,0.522 l 0,0 c -0.264,-0.174 -0.529,-0.348 -0.79,-0.522""
+         id=""path4383""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,453.54935,499.83694)""
+       spreadMethod=""pad""
+       id=""linearGradient4389""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4391"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4393"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4401""><path
+         d=""m 467.303,555.456 c 0.174,0.12 0.348,0.24 0.522,0.36 l 0,0 c -0.174,-0.12 -0.349,-0.24 -0.522,-0.36""
+         id=""path4403""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,492.77353,585.04675)""
+       spreadMethod=""pad""
+       id=""linearGradient4409""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4411"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4413"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4421""><path
+         d=""m 467.303,555.456 c 0.174,0.12 0.348,0.24 0.522,0.36 l 0,0 c -0.174,-0.12 -0.349,-0.24 -0.522,-0.36""
+         id=""path4423""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,451.14548,500.5535)""
+       spreadMethod=""pad""
+       id=""linearGradient4429""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4431"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4433"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4441""><path
+         d=""m 486.117,568.116 c 0.598,0.461 1.191,0.927 1.775,1.397 l 0,0 c -0.584,-0.47 -1.177,-0.935 -1.775,-1.397""
+         id=""path4443""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,497.46844,581.02258)""
+       spreadMethod=""pad""
+       id=""linearGradient4449""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4451"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4453"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4461""><path
+         d=""m 486.117,568.116 c 0.598,0.461 1.191,0.927 1.775,1.397 l 0,0 c -0.584,-0.47 -1.177,-0.935 -1.775,-1.397""
+         id=""path4463""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,465.39157,496.30707)""
+       spreadMethod=""pad""
+       id=""linearGradient4469""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4471"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4473"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4481""><path
+         d=""m 488.716,570.181 c 0.632,0.518 1.254,1.042 1.869,1.57 l 0,0 c -0.615,-0.528 -1.237,-1.052 -1.869,-1.57""
+         id=""path4483""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,497.93091,580.62616)""
+       spreadMethod=""pad""
+       id=""linearGradient4489""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4491"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4493"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4501""><path
+         d=""m 488.716,570.181 c 0.632,0.518 1.254,1.042 1.869,1.57 l 0,0 c -0.615,-0.528 -1.237,-1.052 -1.869,-1.57""
+         id=""path4503""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,467.23254,495.75693)""
+       spreadMethod=""pad""
+       id=""linearGradient4509""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4511"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4513"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4521""><path
+         d=""m 483.392,566.085 c 0.603,0.435 1.202,0.874 1.792,1.318 l 0,0 c -0.59,-0.444 -1.189,-0.883 -1.792,-1.318""
+         id=""path4523""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,496.92566,581.48779)""
+       spreadMethod=""pad""
+       id=""linearGradient4529""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4531"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4533"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4541""><path
+         d=""m 483.392,566.085 c 0.603,0.435 1.202,0.874 1.792,1.318 l 0,0 c -0.59,-0.444 -1.189,-0.883 -1.792,-1.318""
+         id=""path4543""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,463.46353,496.88174)""
+       spreadMethod=""pad""
+       id=""linearGradient4549""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4551"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4553"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4561""><path
+         d=""m 473.304,559.462 c 1.107,0.711 2.226,1.421 3.369,2.124 l 0,0 c -1.143,-0.703 -2.263,-1.413 -3.369,-2.124""
+         id=""path4563""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,494.63782,583.44885)""
+       spreadMethod=""pad""
+       id=""linearGradient4569""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4571"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4573"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4581""><path
+         d=""m 473.304,559.462 c 1.107,0.711 2.226,1.421 3.369,2.124 l 0,0 c -1.143,-0.703 -2.263,-1.413 -3.369,-2.124""
+         id=""path4583""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,456.62552,498.92001)""
+       spreadMethod=""pad""
+       id=""linearGradient4589""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4591"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4593"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4601""><path
+         d=""m 480.469,564.045 c 0.657,0.443 1.311,0.888 1.953,1.341 l 0,0 c -0.642,-0.453 -1.296,-0.898 -1.953,-1.341""
+         id=""path4603""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,496.28909,582.03345)""
+       spreadMethod=""pad""
+       id=""linearGradient4609""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4611"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4613"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4621""><path
+         d=""m 480.469,564.045 c 0.657,0.443 1.311,0.888 1.953,1.341 l 0,0 c -0.642,-0.453 -1.296,-0.898 -1.953,-1.341""
+         id=""path4623""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,461.40814,497.49442)""
+       spreadMethod=""pad""
+       id=""linearGradient4629""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4631"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4633"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4641""><path
+         d=""m 476.673,561.586 c 0.989,0.609 1.959,1.232 2.914,1.863 l 0,0 c -0.955,-0.631 -1.925,-1.254 -2.914,-1.863""
+         id=""path4643""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,495.46442,582.7403)""
+       spreadMethod=""pad""
+       id=""linearGradient4649""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4651"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4653"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4661""><path
+         d=""m 476.673,561.586 c 0.989,0.609 1.959,1.232 2.914,1.863 l 0,0 c -0.955,-0.631 -1.925,-1.254 -2.914,-1.863""
+         id=""path4663""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,458.96558,498.2225)""
+       spreadMethod=""pad""
+       id=""linearGradient4669""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4671"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4673"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4681""><path
+         d=""m 493.623,574.45 c 1.659,1.535 3.253,3.104 4.784,4.704 l 0,0 c -1.531,-1.6 -3.125,-3.169 -4.784,-4.704""
+         id=""path4683""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,498.71594,579.95325)""
+       spreadMethod=""pad""
+       id=""linearGradient4689""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4691"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4693"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4701""><path
+         d=""m 493.623,574.45 c 1.659,1.535 3.253,3.104 4.784,4.704 l 0,0 c -1.531,-1.6 -3.125,-3.169 -4.784,-4.704""
+         id=""path4703""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(14.110942,47.339931,47.339931,-14.110942,471.48032,494.49213)""
+       spreadMethod=""pad""
+       id=""linearGradient4709""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4711"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop4713"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4741""><path
+         d=""m 508.648,591.494 c 0.183,0.255 0.37,0.51 0.551,0.766 l 0,0 c -0.181,-0.256 -0.368,-0.51 -0.551,-0.766""
+         id=""path4743""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429546,-54.167808,-54.167808,46.429546,498.70856,579.95959)""
+       spreadMethod=""pad""
+       id=""linearGradient4749""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4751"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4753"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4761""><path
+         d=""m 508.648,591.494 c 0.183,0.255 0.37,0.51 0.551,0.766 l 0,0 c -0.181,-0.256 -0.368,-0.51 -0.551,-0.766""
+         id=""path4763""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,523.45679,557.96631)""
+       spreadMethod=""pad""
+       id=""linearGradient4769""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4771"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop4773"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4781""><path
+         d=""m 505.274,587.033 c 0.282,0.354 0.561,0.709 0.837,1.066 l 0,0 c -0.276,-0.357 -0.555,-0.712 -0.837,-1.066""
+         id=""path4783""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429546,-54.167808,-54.167808,46.429546,498.97656,579.72986)""
+       spreadMethod=""pad""
+       id=""linearGradient4789""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4791"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4793"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4801""><path
+         d=""m 505.274,587.033 c 0.282,0.354 0.561,0.709 0.837,1.066 l 0,0 c -0.276,-0.357 -0.555,-0.712 -0.837,-1.066""
+         id=""path4803""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,519.16656,556.12762)""
+       spreadMethod=""pad""
+       id=""linearGradient4809""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4811"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop4813"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4821""><path
+         d=""m 503.561,584.926 c 0.321,0.384 0.636,0.772 0.951,1.159 l 0,0 c -0.315,-0.387 -0.63,-0.775 -0.951,-1.159""
+         id=""path4823""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429546,-54.167808,-54.167808,46.429546,499.03958,579.67584)""
+       spreadMethod=""pad""
+       id=""linearGradient4829""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4831"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4833"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4841""><path
+         d=""m 503.561,584.926 c 0.321,0.384 0.636,0.772 0.951,1.159 l 0,0 c -0.315,-0.387 -0.63,-0.775 -0.951,-1.159""
+         id=""path4843""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,517.02106,555.20813)""
+       spreadMethod=""pad""
+       id=""linearGradient4849""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4851"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop4853"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4861""><path
+         d=""m 506.957,589.204 c 0.241,0.318 0.482,0.636 0.719,0.956 l 0,0 c -0.237,-0.32 -0.478,-0.638 -0.719,-0.956""
+         id=""path4863""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429546,-54.167808,-54.167808,46.429546,498.86703,579.82379)""
+       spreadMethod=""pad""
+       id=""linearGradient4869""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4871"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4873"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4881""><path
+         d=""m 506.957,589.204 c 0.241,0.318 0.482,0.636 0.719,0.956 l 0,0 c -0.237,-0.32 -0.478,-0.638 -0.719,-0.956""
+         id=""path4883""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,521.30426,557.04382)""
+       spreadMethod=""pad""
+       id=""linearGradient4889""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4891"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop4893"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4901""><path
+         d=""m 498.413,579.16 c 1.074,1.122 2.114,2.26 3.127,3.41 l 0,0 c -1.013,-1.15 -2.053,-2.288 -3.127,-3.41""
+         id=""path4903""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429543,-54.167801,-54.167801,46.429543,498.99203,579.71661)""
+       spreadMethod=""pad""
+       id=""linearGradient4909""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4911"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4913"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4921""><path
+         d=""m 498.413,579.16 c 1.074,1.122 2.114,2.26 3.127,3.41 l 0,0 c -1.013,-1.15 -2.053,-2.288 -3.127,-3.41""
+         id=""path4923""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,511.91098,553.01813)""
+       spreadMethod=""pad""
+       id=""linearGradient4929""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4931"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop4933"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4941""><path
+         d=""m 501.806,582.868 c 0.372,0.426 0.737,0.856 1.101,1.286 l 0,0 c -0.364,-0.43 -0.729,-0.86 -1.101,-1.286""
+         id=""path4943""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-46.429546,-54.167808,-54.167808,46.429546,499.05789,579.66016)""
+       spreadMethod=""pad""
+       id=""linearGradient4949""><stop
+         style=""stop-opacity:1;stop-color:#71af04""
+         offset=""0""
+         id=""stop4951"" /><stop
+         style=""stop-opacity:1;stop-color:#1364d8""
+         offset=""1""
+         id=""stop4953"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath4961""><path
+         d=""m 501.806,582.868 c 0.372,0.426 0.737,0.856 1.101,1.286 l 0,0 c -0.364,-0.43 -0.729,-0.86 -1.101,-1.286""
+         id=""path4963""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,514.87958,554.29034)""
+       spreadMethod=""pad""
+       id=""linearGradient4969""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop4971"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop4973"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5001""><path
+         d=""m 565.465,464.305 c 1.049,-0.106 2.089,-0.115 3.114,-0.017 l 0,0 c -2.011,0.243 -4.042,0.476 -6.086,0.702 l 0,0 c 0.95,-0.343 1.939,-0.58 2.972,-0.685""
+         id=""path5003""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580345,59.174911,59.174911,24.580345,559.61462,478.89346)""
+       spreadMethod=""pad""
+       id=""linearGradient5009""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5011"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5013"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5021""><path
+         d=""m 523.811,525.875 c 0.237,0.324 0.477,0.656 0.72,0.995 l 0,0 c -0.243,-0.339 -0.483,-0.671 -0.72,-0.995""
+         id=""path5023""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,512.62085,553.32233)""
+       spreadMethod=""pad""
+       id=""linearGradient5029""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5031"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5033"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5041""><path
+         d=""m 523.811,525.875 c 0.237,0.324 0.477,0.656 0.72,0.995 l 0,0 c -0.243,-0.339 -0.483,-0.671 -0.72,-0.995""
+         id=""path5043""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,546.20636,473.32385)""
+       spreadMethod=""pad""
+       id=""linearGradient5049""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5051"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5053"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5061""><path
+         d=""m 525.739,528.576 c 0.277,0.396 0.556,0.801 0.837,1.213 l 0,0 c -0.281,-0.412 -0.56,-0.816 -0.837,-1.213""
+         id=""path5063""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,515.31714,554.47791)""
+       spreadMethod=""pad""
+       id=""linearGradient5069""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5071"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5073"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5081""><path
+         d=""m 525.739,528.576 c 0.277,0.396 0.556,0.801 0.837,1.213 l 0,0 c -0.281,-0.412 -0.56,-0.816 -0.837,-1.213""
+         id=""path5083""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,548.89667,474.44138)""
+       spreadMethod=""pad""
+       id=""linearGradient5089""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5091"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5093"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5101""><path
+         d=""m 522.748,524.435 c 0.273,0.365 0.552,0.743 0.834,1.127 l 0,0 c -0.282,-0.384 -0.561,-0.762 -0.834,-1.127""
+         id=""path5103""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,511.27386,552.74506)""
+       spreadMethod=""pad""
+       id=""linearGradient5109""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5111"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5113"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5121""><path
+         d=""m 522.748,524.435 c 0.273,0.365 0.552,0.743 0.834,1.127 l 0,0 c -0.282,-0.384 -0.561,-0.762 -0.834,-1.127""
+         id=""path5123""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,544.86206,472.76544)""
+       spreadMethod=""pad""
+       id=""linearGradient5129""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5131"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5133"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5141""><path
+         d=""m 526.739,530.027 c 0.655,0.962 1.321,1.964 1.993,3.004 l 0,0 c -0.672,-1.04 -1.338,-2.042 -1.993,-3.004""
+         id=""path5143""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,517.49945,555.41321)""
+       spreadMethod=""pad""
+       id=""linearGradient5149""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5151"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5153"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5161""><path
+         d=""m 526.739,530.027 c 0.655,0.962 1.321,1.964 1.993,3.004 l 0,0 c -0.672,-1.04 -1.338,-2.042 -1.993,-3.004""
+         id=""path5163""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,551.0733,475.34549)""
+       spreadMethod=""pad""
+       id=""linearGradient5169""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5171"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5173"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5181""><path
+         d=""m 524.697,527.099 c 0.301,0.422 0.606,0.853 0.915,1.294 l 0,0 c -0.309,-0.441 -0.614,-0.872 -0.915,-1.294""
+         id=""path5183""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021327,35.049763,35.049763,15.021327,513.9491,553.8916)""
+       spreadMethod=""pad""
+       id=""linearGradient5189""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5191"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5193"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5201""><path
+         d=""m 524.697,527.099 c 0.301,0.422 0.606,0.853 0.915,1.294 l 0,0 c -0.309,-0.441 -0.614,-0.872 -0.915,-1.294""
+         id=""path5203""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,547.53174,473.87442)""
+       spreadMethod=""pad""
+       id=""linearGradient5209""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5211"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5213"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5221""><path
+         d=""m 528.821,533.171 c 1.048,1.623 2.108,3.338 3.164,5.134 l 0,0 c -1.056,-1.796 -2.116,-3.511 -3.164,-5.134""
+         id=""path5223""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,521.27704,557.03217)""
+       spreadMethod=""pad""
+       id=""linearGradient5229""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5231"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5233"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5241""><path
+         d=""m 528.821,533.171 c 1.048,1.623 2.108,3.338 3.164,5.134 l 0,0 c -1.056,-1.796 -2.116,-3.511 -3.164,-5.134""
+         id=""path5243""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,554.83942,476.90988)""
+       spreadMethod=""pad""
+       id=""linearGradient5249""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5251"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5253"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5261""><path
+         d=""m 531.986,538.308 c 2.502,4.259 4.969,8.973 7.134,14.008 l 0,0 c -2.165,-5.034 -4.633,-9.749 -7.134,-14.008""
+         id=""path5263""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,529.09467,560.38257)""
+       spreadMethod=""pad""
+       id=""linearGradient5269""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5271"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5273"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5281""><path
+         d=""m 531.986,538.308 c 2.502,4.259 4.969,8.973 7.134,14.008 l 0,0 c -2.165,-5.034 -4.633,-9.749 -7.134,-14.008""
+         id=""path5283""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-24.580353,59.174923,59.174923,24.580353,562.62354,480.14331)""
+       spreadMethod=""pad""
+       id=""linearGradient5289""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5291"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5293"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5325""><path
+         d=""m 543.358,564.108 c 0.127,0.442 0.249,0.886 0.369,1.33 l 0,0 c -0.12,-0.444 -0.242,-0.888 -0.369,-1.33""
+         id=""path5327""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,542.89056,566.29511)""
+       spreadMethod=""pad""
+       id=""linearGradient5333""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5335"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5337"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5345""><path
+         d=""m 543.358,564.108 c 0.127,0.442 0.249,0.886 0.369,1.33 l 0,0 c -0.12,-0.444 -0.242,-0.888 -0.369,-1.33""
+         id=""path5347""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(67.36837,102.41813,102.41813,-67.36837,514.10999,520.02814)""
+       spreadMethod=""pad""
+       id=""linearGradient5353""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop5355"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop5357"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop5359"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop5361"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5369""><path
+         d=""m 539.12,552.316 c 0.261,0.608 0.517,1.219 0.768,1.835 l 0,0 c -0.251,-0.616 -0.507,-1.227 -0.768,-1.835""
+         id=""path5371""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,535.30084,563.04236)""
+       spreadMethod=""pad""
+       id=""linearGradient5377""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5379"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5381"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5389""><path
+         d=""m 539.12,552.316 c 0.261,0.608 0.517,1.219 0.768,1.835 l 0,0 c -0.251,-0.616 -0.507,-1.227 -0.768,-1.835""
+         id=""path5391""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(67.36837,102.41813,102.41813,-67.36837,516.58966,518.39703)""
+       spreadMethod=""pad""
+       id=""linearGradient5397""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop5399"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop5401"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop5403"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop5405"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5413""><path
+         d=""m 542.11,560.104 c 0.173,0.517 0.343,1.035 0.509,1.556 l 0,0 c -0.166,-0.521 -0.336,-1.039 -0.509,-1.556""
+         id=""path5415""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,540.48596,565.26453)""
+       spreadMethod=""pad""
+       id=""linearGradient5421""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5423"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5425"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5433""><path
+         d=""m 542.11,560.104 c 0.173,0.517 0.343,1.035 0.509,1.556 l 0,0 c -0.166,-0.521 -0.336,-1.039 -0.509,-1.556""
+         id=""path5435""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(67.36837,102.41813,102.41813,-67.36837,515.07397,519.39404)""
+       spreadMethod=""pad""
+       id=""linearGradient5441""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop5443"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop5445"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop5447"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop5449"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5457""><path
+         d=""m 539.907,554.196 c 0.754,1.848 1.465,3.736 2.119,5.658 l 0,0 c -0.654,-1.922 -1.365,-3.81 -2.119,-5.658""
+         id=""path5459""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,537.90869,564.15997)""
+       spreadMethod=""pad""
+       id=""linearGradient5465""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5467"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5469"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5477""><path
+         d=""m 539.907,554.196 c 0.754,1.848 1.465,3.736 2.119,5.658 l 0,0 c -0.654,-1.922 -1.365,-3.81 -2.119,-5.658""
+         id=""path5479""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(67.36837,102.41813,102.41813,-67.36837,515.86969,518.87067)""
+       spreadMethod=""pad""
+       id=""linearGradient5485""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop5487"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop5489"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop5491"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop5493"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5501""><path
+         d=""m 542.782,562.18 c 0.137,0.441 0.27,0.882 0.4,1.325 l 0,0 c -0.13,-0.443 -0.263,-0.884 -0.4,-1.325""
+         id=""path5503""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,541.71777,565.79248)""
+       spreadMethod=""pad""
+       id=""linearGradient5509""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5511"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5513"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5521""><path
+         d=""m 542.782,562.18 c 0.137,0.441 0.27,0.882 0.4,1.325 l 0,0 c -0.13,-0.443 -0.263,-0.884 -0.4,-1.325""
+         id=""path5523""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(67.36837,102.41813,102.41813,-67.36837,514.60504,519.70251)""
+       spreadMethod=""pad""
+       id=""linearGradient5529""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop5531"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop5533"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop5535"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop5537"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5545""><path
+         d=""m 543.878,565.997 c 0.164,0.625 0.321,1.25 0.471,1.881 l 0,0 c -0.15,-0.631 -0.307,-1.256 -0.471,-1.881""
+         id=""path5547""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(-15.021325,35.049763,35.049763,15.021325,544.15631,566.83752)""
+       spreadMethod=""pad""
+       id=""linearGradient5553""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5555"" /><stop
+         style=""stop-opacity:1;stop-color:#e59e00""
+         offset=""1""
+         id=""stop5557"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5565""><path
+         d=""m 543.878,565.997 c 0.164,0.625 0.321,1.25 0.471,1.881 l 0,0 c -0.15,-0.631 -0.307,-1.256 -0.471,-1.881""
+         id=""path5567""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(67.36837,102.41813,102.41813,-67.36837,513.51508,520.41943)""
+       spreadMethod=""pad""
+       id=""linearGradient5573""><stop
+         style=""stop-opacity:1;stop-color:#096acc""
+         offset=""0""
+         id=""stop5575"" /><stop
+         style=""stop-opacity:1;stop-color:#570ec9""
+         offset=""0.456989""
+         id=""stop5577"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""0.967742""
+         id=""stop5579"" /><stop
+         style=""stop-opacity:1;stop-color:#e5137c""
+         offset=""1""
+         id=""stop5581"" /></linearGradient><clipPath
+       clipPathUnits=""userSpaceOnUse""
+       id=""clipPath5589""><path
+         d=""m 456.427,474.171 c -2.312,-0.135 -4.604,-0.289 -6.883,-0.453 l 0,0 c -18.869,-1.359 -36.604,-3.706 -52.654,-6.876 l 0,0 c -3.036,-0.6 -6.005,-1.231 -8.916,-1.887 l 0,0 c -14.399,-3.247 -27.249,-7.175 -38.093,-11.648 l 0,0 c 11.812,3.144 24.964,5.89 39.178,8.168 l 0,0 c 3.962,0.634 8.005,1.233 12.127,1.793 l 0,0 c 16.16,2.195 33.507,3.802 51.697,4.724 l 0,0 c 2.742,0.138 5.504,0.261 8.283,0.369 l 0,0 c 9.052,0.349 18.289,0.534 27.681,0.534 l 0,0 c 1.645,0 3.286,-0.007 4.922,-0.017 l 0,0 c 2.242,-0.016 4.472,-0.044 6.695,-0.08 l 0,0 c 21.774,-0.348 42.627,-1.667 62.029,-3.808 l 0,0 c 2.044,-0.226 4.075,-0.459 6.086,-0.702 l 0,0 c 18.854,-2.284 36.238,-5.351 51.637,-9.059 l 0,0 c -13.303,5.024 -29.237,9.282 -47.094,12.552 l 0,0 c -4.967,0.91 -10.08,1.744 -15.331,2.496 l 0,0 c -17.589,2.517 -36.687,4.117 -56.724,4.618 l 0,0 c -2.716,0.068 -5.448,0.118 -8.197,0.145 l 0,0 c -1.79,0.018 -3.586,0.029 -5.39,0.029 l 0,0 c -10.597,0 -20.973,-0.309 -31.053,-0.898""
+         id=""path5591""
+         inkscape:connector-curvature=""0"" /></clipPath><linearGradient
+       x1=""0""
+       y1=""0""
+       x2=""1""
+       y2=""0""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""matrix(0,-15.0562,-15.0562,0,485.04865,475.40967)""
+       spreadMethod=""pad""
+       id=""linearGradient5597""><stop
+         style=""stop-opacity:1;stop-color:#e0530b""
+         offset=""0""
+         id=""stop5599"" /><stop
+         style=""stop-opacity:1;stop-color:#d31818""
+         offset=""1""
+         id=""stop5601"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5700""
+       id=""linearGradient5706""
+       x1=""426.71194""
+       y1=""222.92203""
+       x2=""509.04669""
+       y2=""429.64322""
+       gradientUnits=""userSpaceOnUse"" /><linearGradient
+       id=""linearGradient5700""
+       inkscape:collect=""always""><stop
+         id=""stop5768""
+         offset=""0""
+         style=""stop-color:#d31818;stop-opacity:1"" /><stop
+         id=""stop5770""
+         offset=""1""
+         style=""stop-color:#e0530b;stop-opacity:1"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5615""
+       id=""linearGradient5621""
+       x1=""316.00934""
+       y1=""125.52796""
+       x2=""342.18924""
+       y2=""204.62401""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(-0.97878855,2.9363657)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5615""><stop
+         style=""stop-color:#e59e00;stop-opacity:1""
+         offset=""0""
+         id=""stop5617"" /><stop
+         style=""stop-color:#e0530b;stop-opacity:1""
+         offset=""1""
+         id=""stop5619"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5635""
+       id=""linearGradient5641""
+       x1=""368.36157""
+       y1=""292.29376""
+       x2=""546.89264""
+       y2=""74.779633""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(-2.4078271,1.8058703)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5635""><stop
+         style=""stop-color:#096acc;stop-opacity:1""
+         offset=""0""
+         id=""stop5637"" /><stop
+         style=""stop-color:#e5137c;stop-opacity:1""
+         offset=""1""
+         id=""stop5639"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5651""
+       id=""linearGradient5657""
+       x1=""365.80087""
+       y1=""159.16013""
+       x2=""550.96771""
+       y2=""159.16013""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(-2.4078271,1.8058703)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5651""><stop
+         style=""stop-color:#000000;stop-opacity:1;""
+         offset=""0""
+         id=""stop5653-5"" /><stop
+         style=""stop-color:#000000;stop-opacity:0;""
+         offset=""1""
+         id=""stop5655"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5700""
+       id=""linearGradient5720""
+       x1=""257.185""
+       y1=""184.68079""
+       x2=""205.03519""
+       y2=""310.25424""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(1.4681828,1.4681828)"" /><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5724""
+       id=""linearGradient5730""
+       x1=""220.94461""
+       y1=""219.64545""
+       x2=""254.94791""
+       y2=""377.21216""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(1.4681828,0)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5724""><stop
+         style=""stop-color:#096acc;stop-opacity:1""
+         offset=""0""
+         id=""stop5726"" /><stop
+         style=""stop-color:#570ec9;stop-opacity:1""
+         offset=""1""
+         id=""stop5728"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5738""
+       id=""linearGradient5744""
+       x1=""144.78702""
+       y1=""420.35822""
+       x2=""194.93385""
+       y2=""119.62178""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(2.4469714,-0.60195677)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5738""><stop
+         style=""stop-color:#e5137c;stop-opacity:1""
+         offset=""0""
+         id=""stop5740"" /><stop
+         id=""stop5782""
+         offset=""0.47594419""
+         style=""stop-color:#570ec9;stop-opacity:1"" /><stop
+         style=""stop-color:#096acc;stop-opacity:1""
+         offset=""1""
+         id=""stop5742"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5748""
+       id=""linearGradient5754""
+       x1=""136.55763""
+       y1=""283.04791""
+       x2=""289.00894""
+       y2=""75.891701""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(-0.48939428,4.8939428)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5748""><stop
+         style=""stop-color:#1364d8;stop-opacity:1""
+         offset=""0""
+         id=""stop5750"" /><stop
+         style=""stop-color:#71af04;stop-opacity:1""
+         offset=""1""
+         id=""stop5752"" /></linearGradient><linearGradient
+       inkscape:collect=""always""
+       xlink:href=""#linearGradient5758""
+       id=""linearGradient5764""
+       x1=""182.65558""
+       y1=""194.30186""
+       x2=""296.56885""
+       y2=""26.337372""
+       gradientUnits=""userSpaceOnUse""
+       gradientTransform=""translate(1.4681828,5.3833371)"" /><linearGradient
+       inkscape:collect=""always""
+       id=""linearGradient5758""><stop
+         style=""stop-color:#71af04;stop-opacity:1""
+         offset=""0""
+         id=""stop5760"" /><stop
+         style=""stop-color:#00ff71;stop-opacity:1""
+         offset=""1""
+         id=""stop5762"" /></linearGradient></defs><sodipodi:namedview
+     pagecolor=""#ffffff""
+     bordercolor=""#666666""
+     borderopacity=""1""
+     objecttolerance=""10""
+     gridtolerance=""10""
+     guidetolerance=""10""
+     inkscape:pageopacity=""0""
+     inkscape:pageshadow=""2""
+     inkscape:window-width=""1299""
+     inkscape:window-height=""807""
+     id=""namedview4025""
+     showgrid=""false""
+     fit-margin-top=""30""
+     fit-margin-left=""27.5""
+     fit-margin-right=""27.5""
+     fit-margin-bottom=""30""
+     inkscape:zoom=""1.3995495""
+     inkscape:cx=""209.86972""
+     inkscape:cy=""207.23915""
+     inkscape:window-x=""43""
+     inkscape:window-y=""3""
+     inkscape:window-maximized=""0""
+     inkscape:current-layer=""g4031"" /><g
+     id=""g4031""
+     inkscape:groupmode=""layer""
+     inkscape:label=""camel on land""
+     transform=""matrix(1.25,0,0,-1.25,-403.54069,822.92722)""
+     style=""display:inline;opacity:1""><g
+       id=""g4097""><g
+         id=""g4099""
+         clip-path=""url(#clipPath4101)""><g
+           id=""g4105""><g
+             id=""g4107""><path
+               d=""m 436.349,528.702 c 0.153,0.165 0.306,0.33 0.459,0.495 l 0,0 c -0.154,-0.165 -0.306,-0.33 -0.459,-0.495 m -0.454,-0.496 c 0.151,0.166 0.302,0.331 0.454,0.496 l 0,0 c -0.152,-0.165 -0.303,-0.33 -0.454,-0.496""
+               style=""fill:url(#linearGradient4109);stroke:none""
+               id=""path4115""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4117""><g
+         id=""g4119""
+         clip-path=""url(#clipPath4121)""><g
+           id=""g4125""><g
+             id=""g4127""><path
+               d=""m 436.349,528.702 c 0.153,0.165 0.306,0.33 0.459,0.495 l 0,0 c -0.154,-0.165 -0.306,-0.33 -0.459,-0.495 m -0.454,-0.496 c 0.151,0.166 0.302,0.331 0.454,0.496 l 0,0 c -0.152,-0.165 -0.303,-0.33 -0.454,-0.496""
+               style=""fill:url(#linearGradient4129);stroke:none""
+               id=""path4139""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4141""><g
+         id=""g4143""
+         clip-path=""url(#clipPath4145)""><g
+           id=""g4149""><g
+             id=""g4151""><path
+               d=""m 438.05,530.527 c 0.165,0.175 0.335,0.35 0.503,0.525 l 0,0 c -0.168,-0.175 -0.338,-0.35 -0.503,-0.525""
+               style=""fill:url(#linearGradient4153);stroke:none""
+               id=""path4159""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4161""><g
+         id=""g4163""
+         clip-path=""url(#clipPath4165)""><g
+           id=""g4169""><g
+             id=""g4171""><path
+               d=""m 438.05,530.527 c 0.165,0.175 0.335,0.35 0.503,0.525 l 0,0 c -0.168,-0.175 -0.338,-0.35 -0.503,-0.525""
+               style=""fill:url(#linearGradient4173);stroke:none""
+               id=""path4183""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4185""><g
+         id=""g4187""
+         clip-path=""url(#clipPath4189)""><g
+           id=""g4193""><g
+             id=""g4195""><path
+               d=""m 433.739,525.793 c 0.383,0.438 0.769,0.876 1.163,1.315 l 0,0 c -0.394,-0.439 -0.78,-0.877 -1.163,-1.315""
+               style=""fill:url(#linearGradient4197);stroke:none""
+               id=""path4203""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4205""><g
+         id=""g4207""
+         clip-path=""url(#clipPath4209)""><g
+           id=""g4213""><g
+             id=""g4215""><path
+               d=""m 433.739,525.793 c 0.383,0.438 0.769,0.876 1.163,1.315 l 0,0 c -0.394,-0.439 -0.78,-0.877 -1.163,-1.315""
+               style=""fill:url(#linearGradient4217);stroke:none""
+               id=""path4227""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4229""><g
+         id=""g4231""
+         clip-path=""url(#clipPath4233)""><g
+           id=""g4237""><g
+             id=""g4239""><path
+               d=""m 431.152,522.779 c 0.604,0.723 1.224,1.45 1.854,2.179 l 0,0 c -0.63,-0.729 -1.25,-1.456 -1.854,-2.179""
+               style=""fill:url(#linearGradient4241);stroke:none""
+               id=""path4247""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4249""><g
+         id=""g4251""
+         clip-path=""url(#clipPath4253)""><g
+           id=""g4257""><g
+             id=""g4259""><path
+               d=""m 431.152,522.779 c 0.604,0.723 1.224,1.45 1.854,2.179 l 0,0 c -0.63,-0.729 -1.25,-1.456 -1.854,-2.179""
+               style=""fill:url(#linearGradient4261);stroke:none""
+               id=""path4271""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4317""><g
+         id=""g4319""
+         clip-path=""url(#clipPath4321)""><g
+           id=""g4325""><g
+             id=""g4327""><path
+               d=""m 491.215,572.292 c 0.743,0.646 1.472,1.3 2.19,1.961 l 0,0 c -0.718,-0.661 -1.447,-1.315 -2.19,-1.961""
+               style=""fill:url(#linearGradient4329);stroke:none""
+               id=""path4335""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4337""><g
+         id=""g4339""
+         clip-path=""url(#clipPath4341)""><g
+           id=""g4345""><g
+             id=""g4347""><path
+               d=""m 491.215,572.292 c 0.743,0.646 1.472,1.3 2.19,1.961 l 0,0 c -0.718,-0.661 -1.447,-1.315 -2.19,-1.961""
+               style=""fill:url(#linearGradient4349);stroke:none""
+               id=""path4355""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4357""><g
+         id=""g4359""
+         clip-path=""url(#clipPath4361)""><g
+           id=""g4365""><g
+             id=""g4367""><path
+               d=""m 470.977,557.941 c 0.173,0.114 0.347,0.227 0.519,0.341 l 0,0 c -0.173,-0.114 -0.346,-0.227 -0.519,-0.341 m -0.79,-0.522 c 0.261,0.174 0.526,0.348 0.79,0.522 l 0,0 c -0.264,-0.174 -0.529,-0.348 -0.79,-0.522""
+               style=""fill:url(#linearGradient4369);stroke:none""
+               id=""path4375""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4377""><g
+         id=""g4379""
+         clip-path=""url(#clipPath4381)""><g
+           id=""g4385""><g
+             id=""g4387""><path
+               d=""m 470.977,557.941 c 0.173,0.114 0.347,0.227 0.519,0.341 l 0,0 c -0.173,-0.114 -0.346,-0.227 -0.519,-0.341 m -0.79,-0.522 c 0.261,0.174 0.526,0.348 0.79,0.522 l 0,0 c -0.264,-0.174 -0.529,-0.348 -0.79,-0.522""
+               style=""fill:url(#linearGradient4389);stroke:none""
+               id=""path4395""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4397""><g
+         id=""g4399""
+         clip-path=""url(#clipPath4401)""><g
+           id=""g4405""><g
+             id=""g4407""><path
+               d=""m 467.303,555.456 c 0.174,0.12 0.348,0.24 0.522,0.36 l 0,0 c -0.174,-0.12 -0.349,-0.24 -0.522,-0.36""
+               style=""fill:url(#linearGradient4409);stroke:none""
+               id=""path4415""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4417""><g
+         id=""g4419""
+         clip-path=""url(#clipPath4421)""><g
+           id=""g4425""><g
+             id=""g4427""><path
+               d=""m 467.303,555.456 c 0.174,0.12 0.348,0.24 0.522,0.36 l 0,0 c -0.174,-0.12 -0.349,-0.24 -0.522,-0.36""
+               style=""fill:url(#linearGradient4429);stroke:none""
+               id=""path4435""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4437""><g
+         id=""g4439""
+         clip-path=""url(#clipPath4441)""><g
+           id=""g4445""><g
+             id=""g4447""><path
+               d=""m 486.117,568.116 c 0.598,0.461 1.191,0.927 1.775,1.397 l 0,0 c -0.584,-0.47 -1.177,-0.935 -1.775,-1.397""
+               style=""fill:url(#linearGradient4449);stroke:none""
+               id=""path4455""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4457""><g
+         id=""g4459""
+         clip-path=""url(#clipPath4461)""><g
+           id=""g4465""><g
+             id=""g4467""><path
+               d=""m 486.117,568.116 c 0.598,0.461 1.191,0.927 1.775,1.397 l 0,0 c -0.584,-0.47 -1.177,-0.935 -1.775,-1.397""
+               style=""fill:url(#linearGradient4469);stroke:none""
+               id=""path4475""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4477""><g
+         id=""g4479""
+         clip-path=""url(#clipPath4481)""><g
+           id=""g4485""><g
+             id=""g4487""><path
+               d=""m 488.716,570.181 c 0.632,0.518 1.254,1.042 1.869,1.57 l 0,0 c -0.615,-0.528 -1.237,-1.052 -1.869,-1.57""
+               style=""fill:url(#linearGradient4489);stroke:none""
+               id=""path4495""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4497""><g
+         id=""g4499""
+         clip-path=""url(#clipPath4501)""><g
+           id=""g4505""><g
+             id=""g4507""><path
+               d=""m 488.716,570.181 c 0.632,0.518 1.254,1.042 1.869,1.57 l 0,0 c -0.615,-0.528 -1.237,-1.052 -1.869,-1.57""
+               style=""fill:url(#linearGradient4509);stroke:none""
+               id=""path4515""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4517""><g
+         id=""g4519""
+         clip-path=""url(#clipPath4521)""><g
+           id=""g4525""><g
+             id=""g4527""><path
+               d=""m 483.392,566.085 c 0.603,0.435 1.202,0.874 1.792,1.318 l 0,0 c -0.59,-0.444 -1.189,-0.883 -1.792,-1.318""
+               style=""fill:url(#linearGradient4529);stroke:none""
+               id=""path4535""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4537""><g
+         id=""g4539""
+         clip-path=""url(#clipPath4541)""><g
+           id=""g4545""><g
+             id=""g4547""><path
+               d=""m 483.392,566.085 c 0.603,0.435 1.202,0.874 1.792,1.318 l 0,0 c -0.59,-0.444 -1.189,-0.883 -1.792,-1.318""
+               style=""fill:url(#linearGradient4549);stroke:none""
+               id=""path4555""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4557""><g
+         id=""g4559""
+         clip-path=""url(#clipPath4561)""><g
+           id=""g4565""><g
+             id=""g4567""><path
+               d=""m 473.304,559.462 c 1.107,0.711 2.226,1.421 3.369,2.124 l 0,0 c -1.143,-0.703 -2.263,-1.413 -3.369,-2.124""
+               style=""fill:url(#linearGradient4569);stroke:none""
+               id=""path4575""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4577""><g
+         id=""g4579""
+         clip-path=""url(#clipPath4581)""><g
+           id=""g4585""><g
+             id=""g4587""><path
+               d=""m 473.304,559.462 c 1.107,0.711 2.226,1.421 3.369,2.124 l 0,0 c -1.143,-0.703 -2.263,-1.413 -3.369,-2.124""
+               style=""fill:url(#linearGradient4589);stroke:none""
+               id=""path4595""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4597""><g
+         id=""g4599""
+         clip-path=""url(#clipPath4601)""><g
+           id=""g4605""><g
+             id=""g4607""><path
+               d=""m 480.469,564.045 c 0.657,0.443 1.311,0.888 1.953,1.341 l 0,0 c -0.642,-0.453 -1.296,-0.898 -1.953,-1.341""
+               style=""fill:url(#linearGradient4609);stroke:none""
+               id=""path4615""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4617""><g
+         id=""g4619""
+         clip-path=""url(#clipPath4621)""><g
+           id=""g4625""><g
+             id=""g4627""><path
+               d=""m 480.469,564.045 c 0.657,0.443 1.311,0.888 1.953,1.341 l 0,0 c -0.642,-0.453 -1.296,-0.898 -1.953,-1.341""
+               style=""fill:url(#linearGradient4629);stroke:none""
+               id=""path4635""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4637""><g
+         id=""g4639""
+         clip-path=""url(#clipPath4641)""><g
+           id=""g4645""><g
+             id=""g4647""><path
+               d=""m 476.673,561.586 c 0.989,0.609 1.959,1.232 2.914,1.863 l 0,0 c -0.955,-0.631 -1.925,-1.254 -2.914,-1.863""
+               style=""fill:url(#linearGradient4649);stroke:none""
+               id=""path4655""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4657""><g
+         id=""g4659""
+         clip-path=""url(#clipPath4661)""><g
+           id=""g4665""><g
+             id=""g4667""><path
+               d=""m 476.673,561.586 c 0.989,0.609 1.959,1.232 2.914,1.863 l 0,0 c -0.955,-0.631 -1.925,-1.254 -2.914,-1.863""
+               style=""fill:url(#linearGradient4669);stroke:none""
+               id=""path4675""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4677""><g
+         id=""g4679""
+         clip-path=""url(#clipPath4681)""><g
+           id=""g4685""><g
+             id=""g4687""><path
+               d=""m 493.623,574.45 c 1.659,1.535 3.253,3.104 4.784,4.704 l 0,0 c -1.531,-1.6 -3.125,-3.169 -4.784,-4.704""
+               style=""fill:url(#linearGradient4689);stroke:none""
+               id=""path4695""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4697""><g
+         id=""g4699""
+         clip-path=""url(#clipPath4701)""><g
+           id=""g4705""><g
+             id=""g4707""><path
+               d=""m 493.623,574.45 c 1.659,1.535 3.253,3.104 4.784,4.704 l 0,0 c -1.531,-1.6 -3.125,-3.169 -4.784,-4.704""
+               style=""fill:url(#linearGradient4709);stroke:none""
+               id=""path4715""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4737""><g
+         id=""g4739""
+         clip-path=""url(#clipPath4741)""><g
+           id=""g4745""><g
+             id=""g4747""><path
+               d=""m 508.648,591.494 c 0.183,0.255 0.37,0.51 0.551,0.766 l 0,0 c -0.181,-0.256 -0.368,-0.51 -0.551,-0.766""
+               style=""fill:url(#linearGradient4749);stroke:none""
+               id=""path4755""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4757""><g
+         id=""g4759""
+         clip-path=""url(#clipPath4761)""><g
+           id=""g4765""><g
+             id=""g4767""><path
+               d=""m 508.648,591.494 c 0.183,0.255 0.37,0.51 0.551,0.766 l 0,0 c -0.181,-0.256 -0.368,-0.51 -0.551,-0.766""
+               style=""fill:url(#linearGradient4769);stroke:none""
+               id=""path4775""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4777""><g
+         id=""g4779""
+         clip-path=""url(#clipPath4781)""><g
+           id=""g4785""><g
+             id=""g4787""><path
+               d=""m 505.274,587.033 c 0.282,0.354 0.561,0.709 0.837,1.066 l 0,0 c -0.276,-0.357 -0.555,-0.712 -0.837,-1.066""
+               style=""fill:url(#linearGradient4789);stroke:none""
+               id=""path4795""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4797""><g
+         id=""g4799""
+         clip-path=""url(#clipPath4801)""><g
+           id=""g4805""><g
+             id=""g4807""><path
+               d=""m 505.274,587.033 c 0.282,0.354 0.561,0.709 0.837,1.066 l 0,0 c -0.276,-0.357 -0.555,-0.712 -0.837,-1.066""
+               style=""fill:url(#linearGradient4809);stroke:none""
+               id=""path4815""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4817""><g
+         id=""g4819""
+         clip-path=""url(#clipPath4821)""><g
+           id=""g4825""><g
+             id=""g4827""><path
+               d=""m 503.561,584.926 c 0.321,0.384 0.636,0.772 0.951,1.159 l 0,0 c -0.315,-0.387 -0.63,-0.775 -0.951,-1.159""
+               style=""fill:url(#linearGradient4829);stroke:none""
+               id=""path4835""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4837""><g
+         id=""g4839""
+         clip-path=""url(#clipPath4841)""><g
+           id=""g4845""><g
+             id=""g4847""><path
+               d=""m 503.561,584.926 c 0.321,0.384 0.636,0.772 0.951,1.159 l 0,0 c -0.315,-0.387 -0.63,-0.775 -0.951,-1.159""
+               style=""fill:url(#linearGradient4849);stroke:none""
+               id=""path4855""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4857""><g
+         id=""g4859""
+         clip-path=""url(#clipPath4861)""><g
+           id=""g4865""><g
+             id=""g4867""><path
+               d=""m 506.957,589.204 c 0.241,0.318 0.482,0.636 0.719,0.956 l 0,0 c -0.237,-0.32 -0.478,-0.638 -0.719,-0.956""
+               style=""fill:url(#linearGradient4869);stroke:none""
+               id=""path4875""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4877""><g
+         id=""g4879""
+         clip-path=""url(#clipPath4881)""><g
+           id=""g4885""><g
+             id=""g4887""><path
+               d=""m 506.957,589.204 c 0.241,0.318 0.482,0.636 0.719,0.956 l 0,0 c -0.237,-0.32 -0.478,-0.638 -0.719,-0.956""
+               style=""fill:url(#linearGradient4889);stroke:none""
+               id=""path4895""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4897""><g
+         id=""g4899""
+         clip-path=""url(#clipPath4901)""><g
+           id=""g4905""><g
+             id=""g4907""><path
+               d=""m 498.413,579.16 c 1.074,1.122 2.114,2.26 3.127,3.41 l 0,0 c -1.013,-1.15 -2.053,-2.288 -3.127,-3.41""
+               style=""fill:url(#linearGradient4909);stroke:none""
+               id=""path4915""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4917""><g
+         id=""g4919""
+         clip-path=""url(#clipPath4921)""><g
+           id=""g4925""><g
+             id=""g4927""><path
+               d=""m 498.413,579.16 c 1.074,1.122 2.114,2.26 3.127,3.41 l 0,0 c -1.013,-1.15 -2.053,-2.288 -3.127,-3.41""
+               style=""fill:url(#linearGradient4929);stroke:none""
+               id=""path4935""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4937""><g
+         id=""g4939""
+         clip-path=""url(#clipPath4941)""><g
+           id=""g4945""><g
+             id=""g4947""><path
+               d=""m 501.806,582.868 c 0.372,0.426 0.737,0.856 1.101,1.286 l 0,0 c -0.364,-0.43 -0.729,-0.86 -1.101,-1.286""
+               style=""fill:url(#linearGradient4949);stroke:none""
+               id=""path4955""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4957""><g
+         id=""g4959""
+         clip-path=""url(#clipPath4961)""><g
+           id=""g4965""><g
+             id=""g4967""><path
+               d=""m 501.806,582.868 c 0.372,0.426 0.737,0.856 1.101,1.286 l 0,0 c -0.364,-0.43 -0.729,-0.86 -1.101,-1.286""
+               style=""fill:url(#linearGradient4969);stroke:none""
+               id=""path4975""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g4997""><g
+         id=""g4999""
+         clip-path=""url(#clipPath5001)""><g
+           id=""g5005""><g
+             id=""g5007""><path
+               d=""m 565.465,464.305 c 1.049,-0.106 2.089,-0.115 3.114,-0.017 l 0,0 c -2.011,0.243 -4.042,0.476 -6.086,0.702 l 0,0 c 0.95,-0.343 1.939,-0.58 2.972,-0.685""
+               style=""fill:url(#linearGradient5009);stroke:none""
+               id=""path5015""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5017""><g
+         id=""g5019""
+         clip-path=""url(#clipPath5021)""><g
+           id=""g5025""><g
+             id=""g5027""><path
+               d=""m 523.811,525.875 c 0.237,0.324 0.477,0.656 0.72,0.995 l 0,0 c -0.243,-0.339 -0.483,-0.671 -0.72,-0.995""
+               style=""fill:url(#linearGradient5029);stroke:none""
+               id=""path5035""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5037""><g
+         id=""g5039""
+         clip-path=""url(#clipPath5041)""><g
+           id=""g5045""><g
+             id=""g5047""><path
+               d=""m 523.811,525.875 c 0.237,0.324 0.477,0.656 0.72,0.995 l 0,0 c -0.243,-0.339 -0.483,-0.671 -0.72,-0.995""
+               style=""fill:url(#linearGradient5049);stroke:none""
+               id=""path5055""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5057""><g
+         id=""g5059""
+         clip-path=""url(#clipPath5061)""><g
+           id=""g5065""><g
+             id=""g5067""><path
+               d=""m 525.739,528.576 c 0.277,0.396 0.556,0.801 0.837,1.213 l 0,0 c -0.281,-0.412 -0.56,-0.816 -0.837,-1.213""
+               style=""fill:url(#linearGradient5069);stroke:none""
+               id=""path5075""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5077""><g
+         id=""g5079""
+         clip-path=""url(#clipPath5081)""><g
+           id=""g5085""><g
+             id=""g5087""><path
+               d=""m 525.739,528.576 c 0.277,0.396 0.556,0.801 0.837,1.213 l 0,0 c -0.281,-0.412 -0.56,-0.816 -0.837,-1.213""
+               style=""fill:url(#linearGradient5089);stroke:none""
+               id=""path5095""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5097""><g
+         id=""g5099""
+         clip-path=""url(#clipPath5101)""><g
+           id=""g5105""><g
+             id=""g5107""><path
+               d=""m 522.748,524.435 c 0.273,0.365 0.552,0.743 0.834,1.127 l 0,0 c -0.282,-0.384 -0.561,-0.762 -0.834,-1.127""
+               style=""fill:url(#linearGradient5109);stroke:none""
+               id=""path5115""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5117""><g
+         id=""g5119""
+         clip-path=""url(#clipPath5121)""><g
+           id=""g5125""><g
+             id=""g5127""><path
+               d=""m 522.748,524.435 c 0.273,0.365 0.552,0.743 0.834,1.127 l 0,0 c -0.282,-0.384 -0.561,-0.762 -0.834,-1.127""
+               style=""fill:url(#linearGradient5129);stroke:none""
+               id=""path5135""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5137""><g
+         id=""g5139""
+         clip-path=""url(#clipPath5141)""><g
+           id=""g5145""><g
+             id=""g5147""><path
+               d=""m 526.739,530.027 c 0.655,0.962 1.321,1.964 1.993,3.004 l 0,0 c -0.672,-1.04 -1.338,-2.042 -1.993,-3.004""
+               style=""fill:url(#linearGradient5149);stroke:none""
+               id=""path5155""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5157""><g
+         id=""g5159""
+         clip-path=""url(#clipPath5161)""><g
+           id=""g5165""><g
+             id=""g5167""><path
+               d=""m 526.739,530.027 c 0.655,0.962 1.321,1.964 1.993,3.004 l 0,0 c -0.672,-1.04 -1.338,-2.042 -1.993,-3.004""
+               style=""fill:url(#linearGradient5169);stroke:none""
+               id=""path5175""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5177""><g
+         id=""g5179""
+         clip-path=""url(#clipPath5181)""><g
+           id=""g5185""><g
+             id=""g5187""><path
+               d=""m 524.697,527.099 c 0.301,0.422 0.606,0.853 0.915,1.294 l 0,0 c -0.309,-0.441 -0.614,-0.872 -0.915,-1.294""
+               style=""fill:url(#linearGradient5189);stroke:none""
+               id=""path5195""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5197""><g
+         id=""g5199""
+         clip-path=""url(#clipPath5201)""><g
+           id=""g5205""><g
+             id=""g5207""><path
+               d=""m 524.697,527.099 c 0.301,0.422 0.606,0.853 0.915,1.294 l 0,0 c -0.309,-0.441 -0.614,-0.872 -0.915,-1.294""
+               style=""fill:url(#linearGradient5209);stroke:none""
+               id=""path5215""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5217""><g
+         id=""g5219""
+         clip-path=""url(#clipPath5221)""><g
+           id=""g5225""><g
+             id=""g5227""><path
+               d=""m 528.821,533.171 c 1.048,1.623 2.108,3.338 3.164,5.134 l 0,0 c -1.056,-1.796 -2.116,-3.511 -3.164,-5.134""
+               style=""fill:url(#linearGradient5229);stroke:none""
+               id=""path5235""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5237""><g
+         id=""g5239""
+         clip-path=""url(#clipPath5241)""><g
+           id=""g5245""><g
+             id=""g5247""><path
+               d=""m 528.821,533.171 c 1.048,1.623 2.108,3.338 3.164,5.134 l 0,0 c -1.056,-1.796 -2.116,-3.511 -3.164,-5.134""
+               style=""fill:url(#linearGradient5249);stroke:none""
+               id=""path5255""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5257""><g
+         id=""g5259""
+         clip-path=""url(#clipPath5261)""><g
+           id=""g5265""><g
+             id=""g5267""><path
+               d=""m 531.986,538.308 c 2.502,4.259 4.969,8.973 7.134,14.008 l 0,0 c -2.165,-5.034 -4.633,-9.749 -7.134,-14.008""
+               style=""fill:url(#linearGradient5269);stroke:none""
+               id=""path5275""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5277""><g
+         id=""g5279""
+         clip-path=""url(#clipPath5281)""><g
+           id=""g5285""><g
+             id=""g5287""><path
+               d=""m 531.986,538.308 c 2.502,4.259 4.969,8.973 7.134,14.008 l 0,0 c -2.165,-5.034 -4.633,-9.749 -7.134,-14.008""
+               style=""fill:url(#linearGradient5289);stroke:none""
+               id=""path5295""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5321""><g
+         id=""g5323""
+         clip-path=""url(#clipPath5325)""><g
+           id=""g5329""><g
+             id=""g5331""><path
+               d=""m 543.358,564.108 c 0.127,0.442 0.249,0.886 0.369,1.33 l 0,0 c -0.12,-0.444 -0.242,-0.888 -0.369,-1.33""
+               style=""fill:url(#linearGradient5333);stroke:none""
+               id=""path5339""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5341""><g
+         id=""g5343""
+         clip-path=""url(#clipPath5345)""><g
+           id=""g5349""><g
+             id=""g5351""><path
+               d=""m 543.358,564.108 c 0.127,0.442 0.249,0.886 0.369,1.33 l 0,0 c -0.12,-0.444 -0.242,-0.888 -0.369,-1.33""
+               style=""fill:url(#linearGradient5353);stroke:none""
+               id=""path5363""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5365""><g
+         id=""g5367""
+         clip-path=""url(#clipPath5369)""><g
+           id=""g5373""><g
+             id=""g5375""><path
+               d=""m 539.12,552.316 c 0.261,0.608 0.517,1.219 0.768,1.835 l 0,0 c -0.251,-0.616 -0.507,-1.227 -0.768,-1.835""
+               style=""fill:url(#linearGradient5377);stroke:none""
+               id=""path5383""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5385""><g
+         id=""g5387""
+         clip-path=""url(#clipPath5389)""><g
+           id=""g5393""><g
+             id=""g5395""><path
+               d=""m 539.12,552.316 c 0.261,0.608 0.517,1.219 0.768,1.835 l 0,0 c -0.251,-0.616 -0.507,-1.227 -0.768,-1.835""
+               style=""fill:url(#linearGradient5397);stroke:none""
+               id=""path5407""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5409""><g
+         id=""g5411""
+         clip-path=""url(#clipPath5413)""><g
+           id=""g5417""><g
+             id=""g5419""><path
+               d=""m 542.11,560.104 c 0.173,0.517 0.343,1.035 0.509,1.556 l 0,0 c -0.166,-0.521 -0.336,-1.039 -0.509,-1.556""
+               style=""fill:url(#linearGradient5421);stroke:none""
+               id=""path5427""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5429""><g
+         id=""g5431""
+         clip-path=""url(#clipPath5433)""><g
+           id=""g5437""><g
+             id=""g5439""><path
+               d=""m 542.11,560.104 c 0.173,0.517 0.343,1.035 0.509,1.556 l 0,0 c -0.166,-0.521 -0.336,-1.039 -0.509,-1.556""
+               style=""fill:url(#linearGradient5441);stroke:none""
+               id=""path5451""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5453""><g
+         id=""g5455""
+         clip-path=""url(#clipPath5457)""><g
+           id=""g5461""><g
+             id=""g5463""><path
+               d=""m 539.907,554.196 c 0.754,1.848 1.465,3.736 2.119,5.658 l 0,0 c -0.654,-1.922 -1.365,-3.81 -2.119,-5.658""
+               style=""fill:url(#linearGradient5465);stroke:none""
+               id=""path5471""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5473""><g
+         id=""g5475""
+         clip-path=""url(#clipPath5477)""><g
+           id=""g5481""><g
+             id=""g5483""><path
+               d=""m 539.907,554.196 c 0.754,1.848 1.465,3.736 2.119,5.658 l 0,0 c -0.654,-1.922 -1.365,-3.81 -2.119,-5.658""
+               style=""fill:url(#linearGradient5485);stroke:none""
+               id=""path5495""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5497""><g
+         id=""g5499""
+         clip-path=""url(#clipPath5501)""><g
+           id=""g5505""><g
+             id=""g5507""><path
+               d=""m 542.782,562.18 c 0.137,0.441 0.27,0.882 0.4,1.325 l 0,0 c -0.13,-0.443 -0.263,-0.884 -0.4,-1.325""
+               style=""fill:url(#linearGradient5509);stroke:none""
+               id=""path5515""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5517""><g
+         id=""g5519""
+         clip-path=""url(#clipPath5521)""><g
+           id=""g5525""><g
+             id=""g5527""><path
+               d=""m 542.782,562.18 c 0.137,0.441 0.27,0.882 0.4,1.325 l 0,0 c -0.13,-0.443 -0.263,-0.884 -0.4,-1.325""
+               style=""fill:url(#linearGradient5529);stroke:none""
+               id=""path5539""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5541""><g
+         id=""g5543""
+         clip-path=""url(#clipPath5545)""><g
+           id=""g5549""><g
+             id=""g5551""><path
+               d=""m 543.878,565.997 c 0.164,0.625 0.321,1.25 0.471,1.881 l 0,0 c -0.15,-0.631 -0.307,-1.256 -0.471,-1.881""
+               style=""fill:url(#linearGradient5553);stroke:none""
+               id=""path5559""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5561""><g
+         id=""g5563""
+         clip-path=""url(#clipPath5565)""><g
+           id=""g5569""><g
+             id=""g5571""><path
+               d=""m 543.878,565.997 c 0.164,0.625 0.321,1.25 0.471,1.881 l 0,0 c -0.15,-0.631 -0.307,-1.256 -0.471,-1.881""
+               style=""fill:url(#linearGradient5573);stroke:none""
+               id=""path5583""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       id=""g5585""
+       transform=""translate(-5.0484494,0)""><g
+         id=""g5587""
+         clip-path=""url(#clipPath5589)""><g
+           id=""g5593""><g
+             id=""g5595""><path
+               d=""m 456.427,474.171 c -2.312,-0.135 -4.604,-0.289 -6.883,-0.453 l 0,0 c -18.869,-1.359 -36.604,-3.706 -52.654,-6.876 l 0,0 c -3.036,-0.6 -6.005,-1.231 -8.916,-1.887 l 0,0 c -14.399,-3.247 -27.249,-7.175 -38.093,-11.648 l 0,0 c 11.812,3.144 24.964,5.89 39.178,8.168 l 0,0 c 3.962,0.634 8.005,1.233 12.127,1.793 l 0,0 c 16.16,2.195 33.507,3.802 51.697,4.724 l 0,0 c 2.742,0.138 5.504,0.261 8.283,0.369 l 0,0 c 9.052,0.349 18.289,0.534 27.681,0.534 l 0,0 c 1.645,0 3.286,-0.007 4.922,-0.017 l 0,0 c 2.242,-0.016 4.472,-0.044 6.695,-0.08 l 0,0 c 21.774,-0.348 42.627,-1.667 62.029,-3.808 l 0,0 c 2.044,-0.226 4.075,-0.459 6.086,-0.702 l 0,0 c 18.854,-2.284 36.238,-5.351 51.637,-9.059 l 0,0 c -13.303,5.024 -29.237,9.282 -47.094,12.552 l 0,0 c -4.967,0.91 -10.08,1.744 -15.331,2.496 l 0,0 c -17.589,2.517 -36.687,4.117 -56.724,4.618 l 0,0 c -2.716,0.068 -5.448,0.118 -8.197,0.145 l 0,0 c -1.79,0.018 -3.586,0.029 -5.39,0.029 l 0,0 c -10.597,0 -20.973,-0.309 -31.053,-0.898""
+               style=""fill:url(#linearGradient5597);stroke:none""
+               id=""path5603""
+               inkscape:connector-curvature=""0"" /></g></g></g></g><g
+       transform=""matrix(0.45564581,0,0,-0.45564581,357.964,672.26275)""
+       id=""g5784""><path
+         inkscape:connector-curvature=""0""
+         id=""path3352""
+         d=""""
+         style=""fill:#800080"" /><path
+         sodipodi:nodetypes=""cscsssssssssssscscssssscssssssssscccsssssssscssscsssssscssssscsssscscc""
+         inkscape:connector-curvature=""0""
+         id=""path3354""
+         d=""m 364.83407,231.39274 c -0.23307,-0.28371 1.87026,-6.76722 7.91903,-24.41034 4.53002,-13.21321 8.29562,-24.19038 8.36801,-24.39371 0.0974,-0.27363 0.50364,-0.21021 1.56357,0.24413 2.28038,0.97749 6.71325,2.02585 9.98621,2.36172 7.7317,0.79342 15.72132,-1.52393 23.05703,-6.6876 3.26014,-2.29483 9.75758,-8.7056 12.68473,-12.51553 8.92936,-11.62229 16.31789,-26.24388 23.25822,-46.02705 1.0876,-3.10017 1.97745,-5.76908 1.97745,-5.93093 0,-0.16185 -0.1809,-0.29427 -0.402,-0.29427 -0.79534,0 -6.63216,-3.05733 -9.16943,-4.80296 -8.22165,-5.65644 -16.60032,-15.95341 -17.0849,-20.996482 -0.12595,-1.310793 -0.0481,-1.577473 0.67003,-2.295612 0.75034,-0.750341 0.94996,-0.800069 2.60813,-0.649711 2.12024,0.192256 6.89183,2.422461 11.21867,5.243526 l 2.70536,1.763874 5.64606,1.127914 c 3.10534,0.620354 5.76578,1.085584 5.91211,1.033846 0.14632,-0.05174 -0.21293,-0.837313 -0.79833,-1.745721 -4.2815,-6.643901 -4.05527,-10.098404 0.58861,-8.988061 2.75071,0.657689 7.45358,2.911319 11.68724,5.600559 1.40357,0.891554 1.48055,0.903884 6.90691,1.106294 10.26692,0.382971 15.37671,1.197553 20.29384,3.235161 2.37951,0.986046 7.08974,3.623414 7.41702,4.152963 0.11016,0.178248 2.17812,0.298489 5.13354,0.298489 13.30102,0 23.99209,2.868701 36.64061,9.831661 2.71014,1.49193 3.1675,1.86841 4.25493,3.50255 4.53425,6.81389 4.46192,12.62493 -0.21489,17.26273 -4.40769,4.37093 -11.317,6.76167 -22.24174,7.69601 -9.43108,0.8066 -15.67729,2.5648 -24.47447,6.88912 -8.30852,4.08411 -17.081,9.83337 -26.42643,17.31921 -9.48921,7.60101 -15.70576,13.17763 -35.28528,31.65301 -14.24565,13.44231 -18.39728,17.25156 -24.48196,22.46304 -16.35233,14.00561 -27.53396,20.21287 -37.37504,20.74799 -4.06193,0.0485 -9.77617,-0.76099 -12.54284,-3.79582 z m 34.59969,-5.97258 c 9.53075,-6.40714 16.9713,-12.84484 40.40075,-34.95553 13.78387,-13.00802 18.17193,-17.04394 24.62462,-22.64851 19.22961,-16.70212 34.97165,-26.54123 48.57669,-30.36146 4.11273,-1.15483 7.31634,-1.68172 12.68457,-2.08619 14.14858,-1.06604 23.07295,-5.85489 24.65458,-13.22974 0.68451,-3.19178 -1.30173,-8.98112 -4.04561,-11.79182 -1.35878,-1.39187 -8.84067,-5.2861 -13.92811,-7.24941 -8.30654,-3.205595 -18.63072,-4.979183 -26.56576,-4.563726 l -3.51854,0.184221 -1.88687,-1.312328 c -4.15358,-2.888845 -9.40891,-4.884069 -15.11014,-5.736681 -1.81128,-0.270876 -6.33378,-0.592921 -10.05,-0.715656 l -6.75675,-0.223155 -1.89378,-1.239104 c -2.48603,-1.626616 -7.46775,-4.17578 -9.58227,-4.903281 -2.01276,-0.692495 -3.77636,-0.746471 -4.28699,-0.131206 -0.79471,0.957568 0.55545,4.320632 3.42197,8.523649 1.49173,2.187245 1.62468,2.4926 1.02194,2.347154 -0.38109,-0.09196 -3.53072,-0.7226 -6.99919,-1.401425 l -6.30631,-1.234227 -2.49264,-1.650506 c -5.47826,-3.62743 -10.66518,-5.873111 -12.50106,-5.412336 -2.15824,0.541685 -1.4295,3.88443 1.97401,9.054766 2.55545,3.882023 8.84611,10.355221 12.75783,13.128011 2.67055,1.893 7.37689,4.44622 9.27087,5.02951 0.66066,0.20346 1.30426,0.46342 1.43023,0.57769 0.28573,0.25921 -2.67469,9.04573 -5.26807,15.6356 -5.00432,12.7162 -9.92698,22.50863 -15.62445,31.08108 -3.41082,5.13194 -5.86196,8.19764 -9.81391,12.27448 -12.04881,12.42961 -24.92499,16.35846 -38.91994,11.87549 -1.58364,-0.50729 -2.94456,-0.85711 -3.02429,-0.77739 -0.0797,0.0797 -3.79802,10.77407 -8.26289,23.76522 -7.74091,22.52326 -8.09205,23.64028 -7.56055,24.05124 11.97736,6.73724 24.97697,-0.16622 33.58006,-5.90443 z""
+         style=""fill:none"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path3372""
+         d=""m 453.85478,83.295039 c -1.99111,-0.119923 -2.37291,2.31009 -1.61412,3.726774 0.95263,2.665945 2.53307,5.04678 4.09922,7.383751 -4.13811,-0.839116 -8.38913,-1.454959 -12.45903,-2.509883 -4.57966,-2.833384 -9.15488,-6.416457 -14.65539,-7.083891 -2.32127,0.273776 -2.78497,3.259396 -1.71617,4.978416 3.35207,7.724833 9.54619,13.883294 16.22091,18.837974 2.98045,2.29312 6.5782,3.89541 9.9017,5.33034 -5.34461,16.8727 -12.25909,33.61958 -22.39211,48.25192 -6.90354,9.66614 -15.92176,19.01275 -27.78675,22.17909 -6.60765,1.7957 -13.53604,1.02855 -19.96355,-1.19537 -1.04224,-0.43103 -2.63316,-0.45895 -2.80886,0.98536 -5.36995,15.33861 -10.68915,30.70159 -15.70301,46.15885 0.162,2.03456 2.68896,2.63976 4.19423,3.48806 4.1693,1.87402 8.93388,1.35975 13.30647,0.60823 7.22267,-1.95403 13.73843,-5.92559 19.84798,-10.1498 14.07809,-10.32716 26.48864,-22.68784 39.22949,-34.57131 17.04124,-15.97544 33.99466,-32.42831 54.33927,-44.14432 9.51147,-5.43285 19.90629,-9.18971 30.92629,-9.59041 7.69062,-0.67718 16.0138,-2.51196 21.52127,-8.33025 3.12562,-3.27474 3.71388,-8.40736 1.65224,-12.39677 -1.29447,-3.05877 -3.09252,-6.18263 -6.31862,-7.50927 -11.70747,-6.45475 -25.01962,-10.622127 -38.49686,-9.875621 -1.87298,0.434781 -3.48064,-0.117246 -4.90123,-1.365109 -7.39778,-5.032244 -16.55141,-6.166277 -25.28661,-6.270942 -2.79827,-0.351093 -5.96916,0.552778 -8.27295,-1.463749 -4.0106,-2.285472 -8.16985,-5.022478 -12.86381,-5.47207 z""
+         style=""fill:none;fill-opacity:1;stroke-width:1;stroke-miterlimit:4;stroke-dasharray:none"" /><path
+         sodipodi:nodetypes=""ccccccccsc""
+         inkscape:connector-curvature=""0""
+         id=""path4197""
+         d=""m 364.38303,231.28072 c -6.83075,20.08107 -22.46298,35.12051 -37.73943,58.13149 12.59958,51.57983 12.09831,68.54654 20.0692,130.10381 13.49411,20.88202 -4.52229,22.69953 4.49828,29.06574 25.86856,9.20408 56.73856,2.32309 17.30103,-20.76125 -7.77574,-18.37475 -12.45764,-39.91864 -11.07267,-64.70588 2.37207,-26.11249 -1.07524,-54.64238 -1.38408,-78.89273 0.27541,-7.62362 10.13556,-25.25303 21.10727,-24.56748 68.88314,-13.53553 82.83883,-84.77213 139.94088,-123.0064 5.58567,-3.74004 -56.62071,25.31442 -52.05162,24.04446""
+         style=""fill:url(#linearGradient5706);fill-opacity:1;fill-rule:evenodd;stroke:#000000;stroke-width:0;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5613""
+         d=""m 315.15003,127.95468 c -8.03898,1.77463 -15.63662,5.3317 -23.40302,8.06154 -9.35574,3.74579 -18.79242,7.70355 -27.56389,12.53189 0.0838,2.53123 3.96549,3.58362 5.64889,5.47141 24.11581,18.53211 42.81953,44.24094 50.44031,73.8759 5.40114,18.95704 5.61907,38.75336 4.87143,58.32313 -1.31398,4.30295 1.9037,6.34427 3.71835,1.65833 10.32623,-15.17521 23.03707,-28.83276 31.15353,-45.42825 8.07624,-17.96303 13.59809,-36.952 20.17788,-55.47537 -0.34399,-3.03968 -4.50924,-3.43448 -6.44863,-5.20171 -18.40781,-11.15001 -35.16249,-25.20605 -48.44002,-42.28198 -3.13119,-3.44093 -5.07889,-7.90273 -8.40916,-11.10675 -0.52452,-0.3088 -1.14046,-0.44123 -1.74567,-0.42814 z""
+         style=""opacity:1;fill:url(#linearGradient5621);fill-opacity:1;stroke-width:1;stroke-miterlimit:4;stroke-dasharray:none"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5625""
+         d=""m 463.4752,98.056275 c -6.43379,-1.055685 2.14053,2.378505 -3.1728,-1.76464 -2.99962,-1.345852 -7.37736,-4.053795 -10.46071,-1.432668 -1.99764,3.132298 -1.12908,10.109613 0.42481,12.778083 4.54782,5.17765 2.29547,0.23167 0.91278,8.0179 -1.78505,7.92398 -5.30796,15.64919 -8.45849,23.22366 -7.29296,15.65814 -15.71354,32.07031 -30.26414,42.15637 -8.87796,6.39155 -20.85726,7.90161 -31.11959,4.2269 -4.0214,-1.85323 -3.50187,4.38389 -4.96083,6.61667 -4.14563,12.80102 -9.24339,25.32041 -12.74881,38.31449 -0.83549,2.40253 0.63477,5.0298 3.26293,5.27233 10.4187,3.98724 21.20702,-1.95691 29.78681,-7.55318 19.20934,-12.96843 34.93359,-30.23495 52.12545,-45.62227 18.17973,-16.48159 36.79097,-34.09257 60.33704,-42.01346 11.15517,-3.56811 5.13547,-6.93436 26.57613,-6.56177 7.44379,-1.7371 14.35249,-8.55948 12.24475,-13.53725 -1.20498,-4.5243 -4.85281,-10.74178 -9.07985,-12.53637 -18.70095,-19.030884 -24.7455,-8.168587 -37.48857,-8.331772 -4.23757,-0.270078 -12.12165,-0.923498 -16.2165,-1.89174 -10.6878,-4.822226 -15.51646,-4.215363 -21.70041,0.638717 z""
+         style=""opacity:1;fill:url(#linearGradient5641);fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient5657);stroke-width:0;stroke-miterlimit:0;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1""
+         sodipodi:nodetypes=""cccccccccccccccccccc"" /><path
+         sodipodi:nodetypes=""cc""
+         inkscape:connector-curvature=""0""
+         id=""path5710""
+         d=""m 210.39326,230.46427 c -14.5418,-1.05108 -19.37997,-1.20898 -39.04495,5.61798""
+         style=""fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5712""
+         d=""m 259.53424,150.93877 c -30.85774,17.24288 -57.79953,41.64613 -76.89781,71.48489 -2.53555,4.38497 -6.52813,8.33396 -7.96551,13.17377 2.32079,1.97102 5.82248,-1.1943 8.42165,-1.33328 14.83451,-4.30727 30.54946,-1.81995 45.53726,-0.15703 22.02668,3.5697 45.11865,9.78854 61.3136,26.04138 8.67983,9.96316 13.9896,22.89762 13.29251,36.15017 -2.10946,13.27279 -0.28112,34.48615 0.81525,55.2725 1.87434,48.24608 2.85211,62.90086 -2.66713,106.73696 -0.97622,5.23533 4.78293,7.05426 8.74417,7.96086 8.23093,1.77409 18.5498,3.04599 25.45243,-2.84002 3.89248,-4.96556 -1.7875,-11.45793 -6.50019,-13.37843 -10.18589,-6.21808 -6.719,-19.70143 -7.87932,-29.60327 -0.15537,-18.24997 0.49807,-7.58855 1.46957,-25.80381 6.2641,-35.70341 7.66462,-91.39573 5.58846,-126.76222 0.42821,-36.12881 -12.48726,-72.64678 -37.72837,-98.83224 -7.5649,-7.83667 -15.88011,-15.49519 -24.86391,-21.35502 -2.10805,0.69631 -4.08761,2.23822 -6.13266,3.24479 z""
+         style=""opacity:1;fill:url(#linearGradient5720);fill-opacity:1;fill-rule:nonzero;stroke:url(#linearGradient5720);stroke-width:0;stroke-miterlimit:0;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1""
+         sodipodi:nodetypes=""cccccccccccccccccc"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5722""
+         d=""m 210.34463,230.92368 c -23.12762,20.48546 -46.53006,43.9034 -54.85247,74.61705 -3.44859,13.57419 -3.36956,27.95079 -0.79827,41.67088 3.40317,2.15587 3.01025,-6.37101 4.56935,-8.51383 9.53054,-31.03982 27.35818,-59.141 49.61139,-82.69346 12.22991,11.65687 28.50645,20.04605 45.57475,20.74249 7.24092,0.6179 13.71379,-3.61472 20.76123,-3.86481 6.92777,2.68755 10.14495,10.50002 13.71585,16.4559 4.13441,7.35803 7.31911,15.52759 12.33333,22.22343 2.54483,-2.09399 1.54577,-6.95591 2.16517,-10.18847 0.91169,-13.79687 -1.4498,-28.59263 -10.92895,-39.24952 -14.47297,-18.08701 -37.91067,-24.82348 -59.74654,-28.91555 -7.37977,-1.22471 -14.98408,-2.47922 -22.40484,-2.28411 z""
+         style=""opacity:1;fill:url(#linearGradient5730);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0;stroke-miterlimit:0;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5736""
+         d=""m 201.89572,229.39536 c -9.59313,0.0187 -19.04666,2.7983 -27.88161,6.12683 -13.71292,24.01017 -26.09404,48.90507 -41.15849,72.03946 0.98342,14.53969 2.9542,29.31531 -1.83867,43.35489 -2.61008,7.83704 4.27881,14.44562 7.14376,21.12943 11.2716,19.29078 19.75412,40.31036 24.0887,62.20921 0.27131,3.97365 -1.88585,9.51197 2.77285,11.91154 7.88832,3.86797 17.31141,2.44993 25.72894,1.46376 3.5786,-0.25409 7.21591,-3.28968 5.55664,-7.13756 -4.97125,-11.37858 -18.45238,-16.01894 -23.94651,-27.14895 -11.84982,-22.6067 -12.36605,-48.75643 -17.57583,-73.41092 -4.25657,-26.78289 5.57115,-53.94093 22.20078,-74.72729 10.15483,-12.70011 22.39279,-23.66499 33.99166,-34.81135 -1.28916,-2.22223 -6.65496,-0.49101 -9.08222,-0.99905 z""
+         style=""opacity:1;fill:url(#linearGradient5744);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0;stroke-miterlimit:0;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5746""
+         d=""m 290.71496,102.12245 c -21.54652,5.35699 -40.71478,17.58427 -58.49675,30.52148 -18.51912,14.03456 -34.75229,30.88847 -50.24527,48.13501 -36.82615,44.54643 -65.91101,97.55886 -74.03341,155.39091 -0.64538,6.36334 -1.81304,12.92561 -1.36533,19.23031 3.78771,-0.63089 4.12084,-7.43063 6.61663,-10.2833 8.8027,-18.12209 18.57958,-35.6751 29.30234,-52.71589 20.55879,-35.64719 37.79733,-74.31184 68.04186,-103.15475 28.3581,-28.33168 65.25874,-46.22276 102.89701,-58.69385 3.24566,-0.1807 3.93939,-3.55156 2.02457,-5.7191 -6.09279,-8.71464 -13.54542,-17.08105 -22.85611,-22.38902 -0.59742,-0.23414 -1.24064,-0.38324 -1.88554,-0.3218 z""
+         style=""opacity:1;fill:url(#linearGradient5754);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0;stroke-miterlimit:0;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"" /><path
+         inkscape:connector-curvature=""0""
+         id=""path5756""
+         d=""m 255.66474,90.676866 c -23.86841,1.126436 -44.70913,18.159214 -54.83683,39.165744 -3.90488,9.63016 -12.30185,16.11899 -21.00091,21.21521 -21.36839,12.94324 -43.57776,26.70282 -57.14821,48.37731 -11.77441,18.43023 -17.10991,40.48689 -16.69087,62.25164 -0.92922,18.34914 0.34575,36.98528 -2.95811,55.00326 -2.18258,11.1103 -10.144698,19.62396 -18.582274,26.60844 -4.441329,3.19505 -1.868599,9.55695 -2.684632,14.30478 0.209873,23.91687 4.614989,47.80929 2.127209,71.65049 1.287309,4.61261 3.481932,9.05731 2.975934,14.03922 0.563409,5.97661 -0.754715,12.39942 0.798268,18.15241 5.884627,4.72974 14.333285,3.95932 21.467335,3.98042 3.81816,-0.41976 11.10008,-1.39176 10.02288,-6.74077 -3.34754,-7.73499 -11.09726,-12.70633 -15.46277,-19.56201 -3.21032,-16.27922 -5.513922,-32.67261 -4.898547,-49.29062 -0.361305,-6.4055 0.361998,-12.80361 3.841177,-18.34672 3.73407,-6.59048 6.52716,-13.76767 6.16553,-21.47595 3.76245,-53.12722 26.8396,-103.23193 57.50246,-146.10834 25.61581,-34.83636 56.52838,-66.89314 94.43676,-88.271 9.74444,-5.74693 20.62441,-9.29243 30.89925,-13.54186 -2.33752,-3.517629 -7.22702,-5.373512 -11.12578,-7.314083 -7.82518,-3.321673 -16.43137,-4.09422 -24.84787,-4.097571 z""
+         style=""opacity:1;fill:url(#linearGradient5764);fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:0;stroke-miterlimit:0;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"" /></g></g><g
+     inkscape:groupmode=""layer""
+     id=""layer2""
+     inkscape:label=""text""
+     style=""display:inline""
+     transform=""translate(-28.810565,20.14223)""><text
+       xml:space=""preserve""
+       style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:60px;line-height:80.00000119%;font-family:'Heiti SC';-inkscape-font-specification:'Heiti SC, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1""
+       x=""225.72464""
+       y=""289.7952""
+       id=""text6379""
+       sodipodi:linespacing=""80.000001%""><tspan
+         sodipodi:role=""line""
+         x=""225.72464""
+         y=""289.7952""
+         id=""tspan6383""
+         style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:60px;line-height:80.00000119%;font-family:'Heiti SC';-inkscape-font-specification:'Heiti SC, Normal';text-align:center;writing-mode:lr-tb;text-anchor:middle"">APACHE</tspan></text>
+<text
+       xml:space=""preserve""
+       style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:60px;line-height:80.00000119%;font-family:'Heiti SC';-inkscape-font-specification:'Heiti SC, Normal';text-align:center;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:middle;display:inline;fill:#e0530b;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1""
+       x=""224.45667""
+       y=""338.96832""
+       id=""text6379-5""
+       sodipodi:linespacing=""80.000001%""><tspan
+         sodipodi:role=""line""
+         x=""224.45667""
+         y=""338.96832""
+         id=""tspan6383-7""
+         style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:60px;line-height:80.00000119%;font-family:'Heiti SC';-inkscape-font-specification:'Heiti SC, Normal';text-align:center;writing-mode:lr-tb;text-anchor:middle;fill:#e0530b;fill-opacity:1"">CAMEL</tspan></text>
+</g></svg>
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612582:2017-12-07T10:09:42.086+0000:1512612582:2017-12-07T10:09:42.086+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1573

githubbot:1512612592:2017-12-07T10:09:52.461+0000:1512612592:2017-12-07T10:09:52.461+0000:oscerd commented on issue #1556: CAMEL-10543: New Apache Camel Logo
URL: https://github.com/apache/camel/pull/1556#issuecomment-349922214
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612592:2017-12-07T10:09:52.980+0000:1512612592:2017-12-07T10:09:52.980+0000:oscerd closed pull request #1556: CAMEL-10543: New Apache Camel Logo
URL: https://github.com/apache/camel/pull/1556
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/logo_clean.png b/docs/img/logo_clean.png
new file mode 100644
index 00000000000..b75b7bfe414
Binary files /dev/null and b/docs/img/logo_clean.png differ
diff --git a/docs/img/logo_full_clean.png b/docs/img/logo_full_clean.png
new file mode 100644
index 00000000000..a9e5f62a024
Binary files /dev/null and b/docs/img/logo_full_clean.png differ
diff --git a/docs/img/preview/big_orange.jpg b/docs/img/preview/big_orange.jpg
new file mode 100644
index 00000000000..26326c5f157
Binary files /dev/null and b/docs/img/preview/big_orange.jpg differ
diff --git a/docs/img/preview/big_white.jpg b/docs/img/preview/big_white.jpg
new file mode 100644
index 00000000000..ce8c26a9871
Binary files /dev/null and b/docs/img/preview/big_white.jpg differ
diff --git a/docs/img/preview/different_sizes.jpg b/docs/img/preview/different_sizes.jpg
new file mode 100644
index 00000000000..3a040dd27f0
Binary files /dev/null and b/docs/img/preview/different_sizes.jpg differ
diff --git a/docs/img/preview/logo_only_black.jpg b/docs/img/preview/logo_only_black.jpg
new file mode 100644
index 00000000000..4e31a0bcdac
Binary files /dev/null and b/docs/img/preview/logo_only_black.jpg differ
diff --git a/docs/img/preview/logo_only_orange.jpg b/docs/img/preview/logo_only_orange.jpg
new file mode 100644
index 00000000000..c41121864fc
Binary files /dev/null and b/docs/img/preview/logo_only_orange.jpg differ
diff --git a/docs/img/preview/website_example.jpg b/docs/img/preview/website_example.jpg
new file mode 100644
index 00000000000..501bfc077e3
Binary files /dev/null and b/docs/img/preview/website_example.jpg differ


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612593:2017-12-07T10:09:53.656+0000:1512612593:2017-12-07T10:09:53.656+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1556

githubbot:1512612607:2017-12-07T10:10:07.977+0000:1512612607:2017-12-07T10:10:07.977+0000:oscerd commented on issue #1575: CAMEL-10543: possible new minimalist logo
URL: https://github.com/apache/camel/pull/1575#issuecomment-349922272
 
 
   Since the vote ended I'm closing the related PRs

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612608:2017-12-07T10:10:08.448+0000:1512612608:2017-12-07T10:10:08.448+0000:oscerd closed pull request #1575: CAMEL-10543: possible new minimalist logo
URL: https://github.com/apache/camel/pull/1575
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/docs/img/simple-stroke-camel-logo.png b/docs/img/simple-stroke-camel-logo.png
new file mode 100644
index 00000000000..70598f6e4f3
Binary files /dev/null and b/docs/img/simple-stroke-camel-logo.png differ
diff --git a/docs/img/simple-stroke-camel-logo.svg b/docs/img/simple-stroke-camel-logo.svg
new file mode 100644
index 00000000000..4b334371d36
--- /dev/null
+++ b/docs/img/simple-stroke-camel-logo.svg
@@ -0,0 +1,87 @@
+<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
+<!-- Created with Inkscape (http://www.inkscape.org/) -->
+
+<svg
+   xmlns:dc=""http://purl.org/dc/elements/1.1/""
+   xmlns:cc=""http://creativecommons.org/ns#""
+   xmlns:rdf=""http://www.w3.org/1999/02/22-rdf-syntax-ns#""
+   xmlns:svg=""http://www.w3.org/2000/svg""
+   xmlns=""http://www.w3.org/2000/svg""
+   xmlns:sodipodi=""http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd""
+   xmlns:inkscape=""http://www.inkscape.org/namespaces/inkscape""
+   id=""svg4023""
+   version=""1.1""
+   inkscape:version=""0.91 r13725""
+   xml:space=""preserve""
+   width=""320.58063""
+   height=""274.69296""
+   viewBox=""0 0 320.58064 274.69297""
+   sodipodi:docname=""simple-stroke-camel.svg""
+   inkscape:export-filename=""/Users/bradparks/projects/camel_logo/simple-stroke-camel-logo.png""
+   inkscape:export-xdpi=""79.91658""
+   inkscape:export-ydpi=""79.91658""><metadata
+     id=""metadata4029""><rdf:RDF><cc:Work
+         rdf:about=""""><dc:format>image/svg+xml</dc:format><dc:type
+           rdf:resource=""http://purl.org/dc/dcmitype/StillImage"" /><dc:title></dc:title><cc:license
+           rdf:resource="""" /></cc:Work></rdf:RDF></metadata><defs
+     id=""defs4027"" /><sodipodi:namedview
+     pagecolor=""#ffffff""
+     bordercolor=""#666666""
+     borderopacity=""1""
+     objecttolerance=""10""
+     gridtolerance=""10""
+     guidetolerance=""10""
+     inkscape:pageopacity=""0""
+     inkscape:pageshadow=""2""
+     inkscape:window-width=""1312""
+     inkscape:window-height=""796""
+     id=""namedview4025""
+     showgrid=""false""
+     fit-margin-top=""30""
+     fit-margin-left=""30""
+     fit-margin-right=""30""
+     fit-margin-bottom=""30""
+     inkscape:zoom=""1.4182101""
+     inkscape:cx=""157.52937""
+     inkscape:cy=""85.135089""
+     inkscape:window-x=""56""
+     inkscape:window-y=""14""
+     inkscape:window-maximized=""0""
+     inkscape:current-layer=""g5113"" /><g
+     inkscape:groupmode=""layer""
+     id=""layer1""
+     inkscape:label=""stroke camel""
+     style=""display:inline""
+     transform=""translate(-57.999329,-0.32033021)""><path
+       style=""fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
+       d=""M 98.384172,242.47852 C 71.437276,120.21396 119.13526,69.10446 152.31413,50.861259 218.60471,14.411777 249.37737,255.3538 306.8721,59.924842""
+       id=""path4913""
+       inkscape:connector-curvature=""0""
+       sodipodi:nodetypes=""csc"" /><path
+       style=""fill:none;fill-rule:evenodd;stroke:#000000;stroke-width:5;stroke-linecap:round;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1""
+       d=""m 294.94582,31.254571 c 7.74695,19.228694 30.69534,12.694098 39.01746,20.938079 24.75314,24.520716 6.86413,75.67621 -12.16329,23.201704""
+       id=""path4949""
+       inkscape:connector-curvature=""0""
+       sodipodi:nodetypes=""csc"" /></g><g
+     style=""display:inline""
+     inkscape:label=""apache camel text""
+     id=""g5113""
+     inkscape:groupmode=""layer""
+     transform=""translate(-57.999329,-0.32033021)""><text
+       sodipodi:linespacing=""100%""
+       id=""text5115""
+       y=""192.48019""
+       x=""119.05852""
+       style=""font-style:normal;font-variant:normal;font-weight:500;font-stretch:normal;font-size:50px;line-height:100%;font-family:Avenir;-inkscape-font-specification:'Avenir, Medium';text-align:start;letter-spacing:0px;word-spacing:0px;writing-mode:lr-tb;text-anchor:start;display:inline;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1""
+       xml:space=""preserve""><tspan
+         style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:50px;line-height:100%;font-family:Tahoma;-inkscape-font-specification:Tahoma;text-align:start;writing-mode:lr-tb;text-anchor:start""
+         y=""192.48019""
+         x=""119.05852""
+         id=""tspan5117""
+         sodipodi:role=""line"">Apache </tspan><tspan
+         style=""font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:50px;line-height:100%;font-family:Tahoma;-inkscape-font-specification:Tahoma;text-align:start;writing-mode:lr-tb;text-anchor:start""
+         id=""tspan5119""
+         y=""242.48019""
+         x=""119.05852""
+         sodipodi:role=""line"">Camel</tspan></text>
+</g></svg>
\ No newline at end of file


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1512612609:2017-12-07T10:10:09.392+0000:1512612609:2017-12-07T10:10:09.392+0000:Github user oscerd closed the pull request at:

    https://github.com/apache/camel/pull/1575

davsclaus:1513235718:2017-12-14T15:15:18.158+0000:1513235718:2017-12-14T15:15:18.158+0000:[~zregvart] do you mind commit your logo to the source code so we have it, I think the PR was closed recently.
zregvart:1518435953:2018-02-12T19:45:53.745+0000:1518435953:2018-02-12T19:45:53.745+0000:I'm so sorry I missed this and just now found it I've committed the logo to the {{docs/img}}."
0,CAMEL-10542,Bug,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,4,2016-11-28 17:08:49+00:00,2017-02-01 10:50:17+00:00,"While working on an issue related to spring-boot I found out that if a data format is registered in camel registry with the same name as the one camel looks-up with the help of DefaultDataFormatResolver, this object is then re-configured for each data format definition so one definition may override previous configuration with an undefined behavior.


So assume you have an xml route definitions as:



<routes xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""direct:unmarshal""/>
    <unmarshal>
      <csv delimiter="";"" headerDisabled=""true""/>
    </unmarshal>
  </route>
  <route>
    <from uri=""direct:marshal""/>
    <marshal>
      <csv headerDisabled=""true"" quoteDisabled=""true""/>
    </marshal>
  </route>
</routes>




And some code like:



InputStream is = getClass().getResourceAsStream(""..."");

SimpleRegistry reg = new SimpleRegistry();
reg.put(""csv-dataformat"", new CsvDataFormat());

DefaultCamelContext ctx = new DefaultCamelContext(reg);
ctx.addRouteDefinitions(ctx.loadRoutesDefinition(is).getRoutes());
ctx.start();

ProducerTemplate template = ctx.createProducerTemplate();
String result = template.requestBody(
    ""direct:marshal"",
    Arrays.asList(Arrays.asList( ""A1"", ""B1"", ""C1"" )),
    String.class);

assertEquals(""A1,B1,C1"", result);

ctx.stop




Then this test fails with:



Expected :A1,B1,C1
Actual   :A1;B1;C1




It fails because the object added to the SimpleRegistry is shared among the two csv dataformats  so it is configured to have delimiter = ';' 


For spring-boot this causes some issues as it registers data formats beans as part of its auto-configuration magic thus if you do not set your own instance of data format, any data format operation like marshal/unmarshal may not work as expected. 



for spring-boot a solution would be to annotate auto configured data format beans with prototype scope.
a more generic solution would be to make DataFormat Cloneable and clone the bean found in the registry","davsclaus:1480465762:2016-11-30T08:29:22.450+0000:1480465762:2016-11-30T08:29:22.450+0000:So if you change the name from ""csv-dataformat"" to ""foo"" then you dont have this problem?
lb:1480467724:2016-11-30T09:02:04.075+0000:1480467813:2016-11-30T09:03:33.181+0000:Yes you don't as in such case the dataformat instance is created using ""service-loader"" style thus a new instance is created each time DefaultDataFormatResolver::resolveDataFormat is invoked. I have experimentedd with @Scope(""prototype"") and it solves the issue for Spring Boot, but I do not know what could be optimal solution that would cover all the cases and containers.
davsclaus:1480564443:2016-12-01T11:54:03.082+0000:1480564443:2016-12-01T11:54:03.082+0000:You could argue that <marshal><csv> ... should use its own instance as there is no reference to a named data format, where as using <marshal ref=""csv-dataformat""> then you are using that shared your add to the registry.

So its maybe more in how <marshal><csv> creates the dataformat that needs to be looked at / fixed.
lb:1480566176:2016-12-01T12:22:56.611+0000:1480566176:2016-12-01T12:22:56.611+0000:Going to have a look, thx [~davsclaus]
lb:1480576495:2016-12-01T15:14:55.010+0000:1480576495:2016-12-01T15:14:55.010+0000:Thinking a little bit more if we do so we may have other issues in spring-boot as I may want to do:

{code:java}
from(...)
  .marshal()
    .csv()
{code}

And have the csv marshal leveraging spring-boot auto configuration but if we require to use a reference, the spring-configuration magic won't happen any more, am I missing something ?

lb:1480583582:2016-12-01T17:13:02.518+0000:1480583582:2016-12-01T17:13:02.518+0000:Maybe a better way would be:

- if a ref is set, look it up and use it as it is
- if ref is not set, search for a DataFormatFactory instead of DataFormat
- if factory is not found go ahead with standard resolution

So that spring-boot or any other container can safely register its factory as i.e. csv-factory or csv-dataformat-factory
davsclaus:1480593673:2016-12-01T20:01:13.501+0000:1480593673:2016-12-01T20:01:13.501+0000:By DataFormatFactory do you mean DataFormatResolver?
lb:1480595854:2016-12-01T20:37:34.721+0000:1480636738:2016-12-02T07:58:58.468+0000:I was thinking about a real factory that can create an instance of a dataformat, like what you can achieve by annotate a method with prototype scope in spring and similar to what happen when we create an instance from a resource file except you can provide a data format with your own defaults.
davsclaus:1480636861:2016-12-02T08:01:01.410+0000:1480636861:2016-12-02T08:01:01.410+0000:Ah okay, yeah give that a try and see how that goes.

davsclaus:1483576052:2017-01-05T08:27:32.611+0000:1483576052:2017-01-05T08:27:32.611+0000:Luca, did you implement this or is there more work to do here?
lb:1483577150:2017-01-05T08:45:50.350+0000:1483577150:2017-01-05T08:45:50.350+0000:There is more work to do, I'm doing some experiment at the moment
githubbot:1485853763:2017-01-31T17:09:23.585+0000:1485853763:2017-01-31T17:09:23.585+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/1436

    CAMEL-10542: DataFormat from registry is used for every dataformat operation (marshal/unmarshal)

    I'm opening this PR for review as there are some changes on CamelContext level so I'd like to gather some feedback.
    
    As today the DataFormat resolution works as follow:
    1. search int the registry if a DataFormat instance exists for a given name
    2. if not found in registry create a new one from the resources (META-INF/services/...)
    
    This my cause issues as per CAMEL-10542
    
    The proposed solution introduces a new DataFormatFactory and a new method to DataFormatResolver to have a way to explicit request for a new instance so it looks like:
    
    ```java
    public interface DataFormatResolver {
        // Resolve using registry then fallback to createDataFormat
        DataFormat resolveDataFormat(String name, CamelContext context);
    
        // Resolve factory using registry or fallback to resources
        DataFormat createDataFormat(String name, CamelContext context);
    } 
    ```
    
    Model's DataFormatDefinition is now using createDataFormat except for CustomDataFormat which indeed is supposed to eventually share the same data format. 
    
    I still need to implement some stuffs but the basic concept is here.
    Any feedback would be really appreciated.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-10542

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1436.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1436
    
----

----

githubbot:1485916859:2017-02-01T10:40:59.705+0000:1485916859:2017-02-01T10:40:59.705+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1436
"
0,CAMEL-10541,Bug,Major,None,,"
None
",Closed,Duplicate,None,Unassigned,Luca Burgazzoli,0,1,2016-11-28 17:08:25+00:00,2016-11-28 17:11:17+00:00,"While working on an issue related to spring-boot I found out that if a data format is registered in camel registry with the same name as the one camel looks-up with the help of DefaultDataFormatResolver, this object is then re-configured for each data format definition so one definition may override previous configuration with an undefined behavior.


So assume you have an xml route definitions as:



<routes xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""direct:unmarshal""/>
    <unmarshal>
      <csv delimiter="";"" headerDisabled=""true""/>
    </unmarshal>
  </route>
  <route>
    <from uri=""direct:marshal""/>
    <marshal>
      <csv headerDisabled=""true"" quoteDisabled=""true""/>
    </marshal>
  </route>
</routes>




And some code like:



InputStream is = getClass().getResourceAsStream(""..."");

SimpleRegistry reg = new SimpleRegistry();
reg.put(""csv-dataformat"", new CsvDataFormat());

DefaultCamelContext ctx = new DefaultCamelContext(reg);
ctx.addRouteDefinitions(ctx.loadRoutesDefinition(is).getRoutes());
ctx.start();

ProducerTemplate template = ctx.createProducerTemplate();
String result = template.requestBody(
    ""direct:marshal"",
    Arrays.asList(Arrays.asList( ""A1"", ""B1"", ""C1"" )),
    String.class);

assertEquals(""A1,B1,C1"", result);

ctx.stop




Then this test fails with:



Expected :A1,B1,C1
Actual   :A1;B1;C1




It fails because the object added to the SimpleRegistry is shared among the two csv dataformats  so it is configured to have delimiter = ';'",
0,CAMEL-10540,New Feature,Major,None,None,"
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Andrea Cosentino,Jan Bernhardt,0,5,2016-11-28 14:08:28+00:00,2019-06-03 08:48:20+00:00,"As discussed on the mailing list [1], it would be great to have a grok filter for camel, to parse text with multiple named regex expressions resulting in a Map containing the named key as well as the parsed value.


[1] http://camel.465427.n5.nabble.com/Parsing-unstructured-Text-in-Camel-td5790513.html","g1antfan:1502801163:2017-08-15T20:46:03.325+0000:1502801163:2017-08-15T20:46:03.325+0000:Not sure if anyone has taken a crack at this component, but would be willing to look into it.

But wanted to also clarify some things
* assume that this would be a new component under the camel/components in github
* solution should seek to leverage elastic search grok capabilities 

At initial glance seems this is a candidate for the pluggable Camel Data Formats. 

{code:java}
from(direct:in)
  .marshal()
  .grok(""%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes}"")
  .to(mock:result);
{code}

Is that what is intended?

I assume (similar to the Grok filter plugin on Elastic Search) that the contents of Exchange.getIn().getBody() would be evaluated such that 

{noformat}
55.3.244.1 GET /index.html 15824 0.043
{noformat}

passing through the Grok Filter
{noformat}
%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} 
{noformat}

would yield a Map in the Exchange body as follows

||Key||Value||
|client|55.3.244.1|
|method|GET|
|request|/index/html|
|bytes|15824|

Just let me know
davsclaus:1503332280:2017-08-22T00:18:00.302+0000:1503332280:2017-08-22T00:18:00.302+0000:Yeah that sounds good. And what if you have a list of rows, then it marshals that into a List<Map>
davsclaus:1517470137:2018-02-01T15:28:57.765+0000:1517470137:2018-02-01T15:28:57.765+0000:Anyone working on this
g1antfan:1517497068:2018-02-01T22:57:48.007+0000:1517497068:2018-02-01T22:57:48.007+0000:sorry got side tracked... will pick it back up
g1antfan:1517500196:2018-02-01T23:49:56.415+0000:1517500196:2018-02-01T23:49:56.415+0000:after looking around seems there are two Java Grok libraries
 * [https://github.com/thekrakken/java-grok]
 * [https://github.com/aicer/grok]

It looks like Apache Metron refers to thekrakken
 * [https://github.com/apache/metron/tree/c4954e8af7d5cab59ec6fdc4d9a0bb07c794afd6/metron-streaming/Metron-MessageParsers]
 * [https://github.com/apache/metron/blob/master/metron-platform/metron-parsers/src/main/java/org/apache/metron/parsers/GrokParser.java#L34-L35]

so I that Camel component should use this as well

thoughts?
davsclaus:1517530185:2018-02-02T08:09:45.555+0000:1517530185:2018-02-02T08:09:45.555+0000:Yeah I think we should use the same parser as Apache Metron.
bedla:1558857370:2019-05-26T15:56:10.021+0000:1558857370:2019-05-26T15:56:10.021+0000:Is anyone working on this? I have this implemented as Processor in one project and I would like to refactor it to component. 

There are few things in which I need hear your opinions:
 * In the comments above there is example with marshal(). I think, this should implement unmarshal() instead (converting String to Object)
 * Grok is ""one way"" dataformat. Is there any standardized way how to handle this? Or is it OK to throw UnsupportedOperationException from marshal() method?
 * I would like to to implement pluggable custom pattern registration, Is it OK to do registry lookup in doStart method, or is there a better place? I mean somethink like 
{code:java}
@Override
protected void doStart() throws Exception {
    for (GrokPattern customPattern : getCamelContext().getRegistry().findByType(GrokPattern.class)) {
        customPatterns.put(customPattern.getName(), customPattern.getPattern());
    }
}
{code}
 "
0,CAMEL-10539,Bug,Minor,2.18.0,"2.18.2, 2.19.0","
None
",Resolved,Fixed,"2.18.2, 2.19.0",Claus Ibsen,Frank Wein,0,2,2016-11-28 09:07:04+00:00,2016-11-29 15:49:54+00:00,"I noticed that you get a NullPointerException when you forget the bridgeEndpoint=true option when bridging two HTTP endpoints (first endpoint is a REST Jetty endpoint, second one also uses Jetty). Maybe Camel can warn in this case that the bridgeEndpoint parameter is missing.


Simplified basic code (Java):



 restConfiguration().component(""jetty"").host(""0.0.0.0"").port(8080)
                .dataFormatProperty(""prettyPrint"", ""true"")
                .bindingMode(RestBindingMode.auto);

rest(""/API/"").get(""/{ID}/"").to(""jetty:http://www.google.com"");




HTTP Request to http://localhost:8080/API/1/ results in NullPointerException.


Stacktrace:
java.lang.NullPointerException
	at org.eclipse.jetty.client.HttpClient.send(HttpClient.java:521)
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:694)
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:678)
	at org.apache.camel.component.jetty9.JettyContentExchange9.send(JettyContentExchange9.java:228)
	at org.apache.camel.component.jetty.JettyHttpProducer.processInternal(JettyHttpProducer.java:247)
	at org.apache.camel.component.jetty.JettyHttpProducer.process(JettyHttpProducer.java:86)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:191)
	at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:74)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:587)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
	at org.eclipse.jetty.server.Server.handle(Server.java:499)
	at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
	at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
	at java.lang.Thread.run(Thread.java:745)


This issue is probably a bit related to the already resolved CAMEL-4242.","davsclaus:1480382094:2016-11-29T09:14:54.400+0000:1480382094:2016-11-29T09:14:54.400+0000:Yeah its a NPE bug in jetty client at
{code}
        String scheme = request.getScheme().toLowerCase(Locale.ENGLISH);
{code}
davsclaus:1480405794:2016-11-29T15:49:54.587+0000:1480405794:2016-11-29T15:49:54.587+0000:You now get a better error message"
0,CAMEL-10538,Sub-task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Tomohisa Igarashi,0,2,2016-11-27 04:01:02+00:00,2017-02-22 14:31:38+00:00,"CAMEL-10447 added inputType/outputType declaration on a route, and Transformer which performs declarative transformation according to the declared type. We can add message Validator in a same way, to validate if the message is really in declared type.","githubbot:1487727749:2017-02-22T09:42:29.195+0000:1487727749:2017-02-22T09:42:29.195+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1485

    CAMEL-10538 Add declarative validator according to input/output type

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10538

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1485.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1485
    
----
commit 45cb9c226084a66b15bb980671fe756cac424f16
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-02-15T00:18:37Z

    CAMEL-10538 Add declarative validator according to input/output type

----

githubbot:1487745048:2017-02-22T14:30:48.353+0000:1487745048:2017-02-22T14:30:48.353+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1485
"
0,CAMEL-10537,Bug,Major,2.18.0,"2.18.3, 2.19.0","
None
",Resolved,Fixed,"2.18.3, 2.19.0",Claus Ibsen,Sergey Zolotaryov,0,2,2016-11-26 23:18:24+00:00,2017-03-01 12:20:41+00:00,"I am trying to re-add a rest definition to an existing jetty restConfiguration with the following exception:


org.apache.camel.FailedToStartRouteException: Failed to start route issues because of Multiple consumers for the same endpoint is not allowed: jetty:http://localhost:8080/issues/%7Bisin%7D/%7Bsedol%7D?httpMethodRestrict=GET


This is obviously a bug since the first time I can add multiple rest routes to the same endpoint (jetty or any other). Later while trying to remove/add a route I get this error. I attach a unit test to illustrate the problem.","anydoby:1480173556:2016-11-26T23:19:16.594+0000:1480173556:2016-11-26T23:19:16.594+0000:A unit test which reproduces the issue.
anydoby:1480173776:2016-11-26T23:22:56.741+0000:1480173814:2016-11-26T23:23:34.521+0000:By the way, even having removed all route definitions from the context I still cannot add this one. The only solution so far is to stop/start the context itself, which is quite heavy operation to undertake assuming we have 1000s of routes in production and adding just one we have to restart the whole universe.
davsclaus:1488333448:2017-03-01T09:57:28.541+0000:1488335551:2017-03-01T10:32:31.460+0000:This is currently not intended to be supported to remove / add rest's at runtime, however we can make it do so
davsclaus:1488335448:2017-03-01T10:30:48.521+0000:1488335448:2017-03-01T10:30:48.521+0000:Okay found a solution to make this supported - it was a problem with rest configuration not being registered/used correctly when adding the new routes causing it to not use the existing jetty configuration and lead to duplicate issue.
anydoby:1488342041:2017-03-01T12:20:41.711+0000:1488342041:2017-03-01T12:20:41.711+0000:This  is great news, thank you, Claus"
0,CAMEL-10536,Test,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Nicola Ferraro,Claus Ibsen,0,2,2016-11-26 08:57:53+00:00,2016-11-28 11:29:54+00:00,"I got this test failure


Failed tests:
  ServletMappingAutoConfigurationTest.testServletMapping:63 expected:<[Hello]> but was:<[

{""timestamp"":1480150540485,""status"":404,""error"":""Not Found"",""message"":""No message available"",""path"":""/camel/thepath""}

]>


Tests run: 2, Failures: 1, Errors: 0, Skipped: 0


Also the tests should not run when I do a 


   mvn clean install -Pfastinstall


Which should not run the unit tests.","nferraro:1480299621:2016-11-28T10:20:21.246+0000:1480299621:2016-11-28T10:20:21.246+0000:This should have been fixed by CAMEL-10524. I'm going to check why the profile is ignored. 
davsclaus:1480302336:2016-11-28T11:05:36.763+0000:1480302336:2016-11-28T11:05:36.763+0000:I added an @Ignore for those tests so we can have this working for people until its fixed.
nferraro:1480303793:2016-11-28T11:29:53.914+0000:1480303793:2016-11-28T11:29:53.914+0000:The test required the dependent auto-configuration. Added common profiles also to starters."
0,CAMEL-10535,Task,Major,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Claus Ibsen,0,1,2016-11-26 08:52:41+00:00,2019-03-01 13:27:50+00:00,"This has been deprecated since we rewrote the parser in Camel 2.6 or there abouts. So many years ago.


We can likely already remove it for 2.19.",davsclaus:1481163502:2016-12-08T10:18:22.419+0000:1481163502:2016-12-08T10:18:22.419+0000:There could be users that rely on the old behavior. So lets move this to Camel 3.0
0,CAMEL-10534,Bug,Minor,2.18.0,"2.17.5, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,3,2016-11-26 08:49:21+00:00,2016-11-27 08:30:13+00:00,"See SO
http://stackoverflow.com/questions/40798447/exception-in-camel-stream-component-while-streaming-url


We need to set that option if its a url that we stream to using UrlConnection.


Contributions is very much welcome to help fix this bug.
http://camel.apache.org/contributing","nikhilvibhav:1480142163:2016-11-26T14:36:03.170+0000:1480142163:2016-11-26T14:36:03.170+0000:Picking this up. 
nikhilvibhav:1480144826:2016-11-26T15:20:26.504+0000:1480144826:2016-11-26T15:20:26.504+0000:[~davsclaus] Is there a test to update? The current {{StreamToUrlTest}} class runs fine even without setting doOutput=true.
githubbot:1480144934:2016-11-26T15:22:14.484+0000:1480144934:2016-11-26T15:22:14.484+0000:GitHub user nikhilvibhav opened a pull request:

    https://github.com/apache/camel/pull/1315

    CAMEL-10534-Update StreamProducer to handle streaming using URLConnection

    Set `doOutput` flag to true to handle streaming using URLConnection.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nikhilvibhav/camel CAMEL-10534

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1315.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1315
    
----
commit b41b948644d1462d7f02f4f73302c1a70eaa75c6
Author: Nikhil Vibhav <nikhil92ind@gmail.com>
Date:   2016-11-26T14:39:44Z

    Update StreamProducer to handle streaming using URLConnection

----

githubbot:1480145158:2016-11-26T15:25:58.114+0000:1480145158:2016-11-26T15:25:58.114+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1315

davsclaus:1480145194:2016-11-26T15:26:34.076+0000:1480145194:2016-11-26T15:26:34.076+0000:Thanks for the PR"
0,CAMEL-10533,Improvement,Minor,2.18.0,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-26 08:36:50+00:00,2019-08-06 09:21:38+00:00,"To allow to force discarding a group using the controller
http://static.javadoc.io/org.apache.camel/camel-core/2.18.0/org/apache/camel/processor/aggregate/AggregateController.html","davsclaus:1480120680:2016-11-26T08:38:00.780+0000:1480120680:2016-11-26T08:38:00.780+0000:See nabble
http://camel.465427.n5.nabble.com/Drop-aggregate-tp5790592.html"
0,CAMEL-10532,Sub-task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Tomohisa Igarashi,0,2,2016-11-26 02:21:55+00:00,2017-02-14 13:19:01+00:00,Rest DSL already has a feature to declare input type and output type and transform message automatically according to the declared type. Find a best way to integrate the generic Transformer with it.,"githubbot:1487044542:2017-02-14T11:55:42.754+0000:1487044542:2017-02-14T11:55:42.754+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1464

    CAMEL-10532 Integrate Transformer with Rest DSL

    Converted the RestConsumerBindingProcessor into RestBindingAdvice to control the order between REST binding and contract processing. Now you can use REST binding and contract based transformer together in a same route.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10532

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1464.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1464
    
----
commit 25b2ba250776c0046d0bcec869f0aa98caa92e4c
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-02-03T06:17:23Z

    CAMEL-10532 Extract ContractAdvice as an individual file

commit 8c9184b6f2d75ebbab90a5cb42eb51e114fec42b
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-02-09T08:48:16Z

    CAMEL-10532 Convert RestConsumerBindingProcessor into processor advice so it works fine with contract advice together

----

githubbot:1487046100:2017-02-14T12:21:40.438+0000:1487046100:2017-02-14T12:21:40.438+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1464
"
0,CAMEL-10531,Sub-task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Tomohisa Igarashi,0,3,2016-11-26 02:14:51+00:00,2017-01-21 15:23:35+00:00,"Right now the only way to register Transformer in Java DSL is to create a TransformerDefinition and put into CamelContext directly, which is not user friendly. Introduce a fluent builder to register Transformer.","githubbot:1484717140:2017-01-18T13:25:40.480+0000:1484717140:2017-01-18T13:25:40.480+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1406

    CAMEL-10531 Introduce fluent builder for Transformer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10531

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1406.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1406
    
----
commit 08b9f5fdd2d9cc1d3a3839466fcce3dda2372baf
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-01-17T23:06:41Z

    CAMEL-10531 Introduce fluent builder for Transformer

----

githubbot:1484800156:2017-01-19T12:29:16.802+0000:1484800156:2017-01-19T12:29:16.802+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1406

davsclaus:1484971987:2017-01-21T12:13:07.774+0000:1484971987:2017-01-21T12:13:07.774+0000:The jmx test fails
ManagedTransformerRegistryTest

The registry is empty, so it seems that the fluent builder dont register the transformers.
githubbot:1484981288:2017-01-21T14:48:08.956+0000:1484981288:2017-01-21T14:48:08.956+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1416

    CAMEL-10531 Fixed a test failure

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10531_test

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1416.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1416
    
----
commit 80138fcc615f33c5ba05679ba19fdb9773fa9683
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-01-21T14:43:27Z

    CAMEL-10531 Fixed a test failure

----

igarashitm:1484981546:2017-01-21T14:52:26.345+0000:1484981546:2017-01-21T14:52:26.345+0000:Sorry my fault, I shouldn't have forgot to run this one. Fixed.
githubbot:1484983403:2017-01-21T15:23:23.346+0000:1484983403:2017-01-21T15:23:23.346+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1416

davsclaus:1484983415:2017-01-21T15:23:35.419+0000:1484983415:2017-01-21T15:23:35.419+0000:Thanks for the speedy fix"
0,CAMEL-10530,Sub-task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Tomohisa Igarashi,0,3,2016-11-26 02:10:52+00:00,2017-01-19 14:10:49+00:00,"Introduce TransformerRegistry like EndpointRegistry and MBean


https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/EndpointRegistry.java


https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/management/mbean/ManagedEndpointRegistry.java","githubbot:1482206864:2016-12-20T12:07:44.698+0000:1482206864:2016-12-20T12:07:44.698+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1359

    CAMEL-10530 Introduce TransformerRegistry

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10530

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1359.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1359
    
----
commit 719ef8281db26a3d7c7d153c94af35bc4623ae66
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-12-13T07:38:20Z

    CAMEL-10530 Introduce TransformerRegistry

----

githubbot:1482208624:2016-12-20T12:37:04.800+0000:1482208624:2016-12-20T12:37:04.800+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1359

davsclaus:1482208979:2016-12-20T12:42:59.705+0000:1482208979:2016-12-20T12:42:59.705+0000:Tomo, I think there is also some camel commands that report registry details, take a look at
https://github.com/apache/camel/tree/master/platforms/commands

We may need to add a bit there to output transformer details too
igarashitm:1482211950:2016-12-20T13:32:30.973+0000:1482211950:2016-12-20T13:32:30.973+0000:Good catch, thanks! I'll add another PR.
githubbot:1483592762:2017-01-05T13:06:02.122+0000:1483592762:2017-01-05T13:06:02.122+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1375

    CAMEL-10530 Add TransformerListCommand

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10530_commands

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1375.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1375
    
----
commit 2f590d68272b15c366600f6ae8a6b0b113c62b2c
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-01-05T11:44:31Z

    CAMEL-10530 Add TransformerListCommand

----

githubbot:1483594194:2017-01-05T13:29:54.404+0000:1483594194:2017-01-05T13:29:54.404+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1375
"
0,CAMEL-10529,Bug,Major,2.17.0,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Joe Luo,0,2,2016-11-25 16:33:32+00:00,2016-11-29 09:01:29+00:00,"I have a very simple camel route:



<camelContext id=""camel"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <route>
            <from uri=""timer://foo?delay=2s&amp;repeatCount=2""/>
            <setBody>
                <constant>hello Camel!</constant>
            </setBody>
            <log message=""exchange is triggered""/>
        </route>
    </camelContext>




Then I am getting the following error:



16:09:32,724 | WARN | #3 - timer://foo | TimerConsumer | 232 - org.apache.camel.camel-core - 2.17.0.redhat-630187 | Error processing exchange. Exchange[ID-jluomac-54194-1480090135878-3-4]. Caused by: [org.apache.camel.RuntimeCamelException - org.apache.camel.component.bean.MethodNotFoundException: Method with name: is triggered not found on bean: Exchange[ID-jluomac-54194-1480090135878-3-4] of type: org.apache.camel.impl.DefaultExchange]
org.apache.camel.RuntimeCamelException: org.apache.camel.component.bean.MethodNotFoundException: Method with name: is triggered not found on bean: Exchange[ID-jluomac-54194-1480090135878-3-4] of type: org.apache.camel.impl.DefaultExchange




It looks like it was incorrectly evaluated as a Camel Exchange type for some reason.
Furthermore, it is only causing the problem when it is in the beginning of the LogEIP message. If it is not, it works fine. For instance, following line will cause problem:



<log message=""exchange is triggered""/>




But this will work:



<log message=""The exchange is triggered""/>




As long as you are not placing the keyword ""exchange"" in the beginning of the LogEIP message, it will be fine.","davsclaus:1480063141:2016-11-25T16:39:01.321+0000:1480063141:2016-11-25T16:39:01.321+0000:That is the simple language in backwards compatible mode, where you could omit ${ }. This old mode is deprecated and was intended to be removed in 3.0. 
davsclaus:1480063194:2016-11-25T16:39:54.715+0000:1480063194:2016-11-25T16:39:54.715+0000:This is current design and not a bug, you would need to wait until we remove the backwards mode (3.0) or possible sooner. I think its safe to do it for 2.19.0 release.
joeluo:1480063669:2016-11-25T16:47:49.727+0000:1480063669:2016-11-25T16:47:49.727+0000:Just tested with other keywords, and all of them had issues: ""exception"", ""exchangeId"", ""headers"", ""property"" etc. etc.
joeluo:1480064227:2016-11-25T16:57:07.787+0000:1480064227:2016-11-25T16:57:07.787+0000:Ah, ok, so there is no way to force simple language to always have ""${ }"" in 2.17 and onwards now?
By the way, what will be the behaviour after we removed this ""backwards compatible mode""?
davsclaus:1480064544:2016-11-25T17:02:24.277+0000:1480064544:2016-11-25T17:02:24.277+0000:All simple expression must use ${ } for those functions, eg you could do today

{code}
<when>
   <simple>header.foo == 'hello'</simple>
{code}

And in the future you must do

{code}
<when>
   <simple>${header.foo} == 'hello'</simple>
{code}

joeluo:1480300932:2016-11-28T10:42:12.648+0000:1480300932:2016-11-28T10:42:12.648+0000:Hi Claus,
Thanks a lot for the explanation. Yeah, I agree that it was indeed a backward compatibility issue as my test results confirmed it. 

However, I still think there is a bug here, although it might be a small one. The document says
{code}
The ${ } placeholders can be omitted if the expression is only the token itself.
{code}
In this case, it was not that it stands on it's own, rather, it was part of a log message but with the token/keyword in the beginning of the log message. We should not evaluate it as a property placeholder without ""${ }"". And it causes trouble.

I have tested with more tokens and with this use case (the token being in the beginning of the LogEIP's log message), camel either prints an empty string (with most other tokens/keywords) or throws an exception (with ""exchange"" keyword).
davsclaus:1480381276:2016-11-29T09:01:16.617+0000:1480381276:2016-11-29T09:01:16.617+0000:I updated the doc as it was a bit wrong and also marked the old syntax as deprecated"
0,CAMEL-10528,Task,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Onder Sezgin,Claus Ibsen,0,3,2016-11-25 13:22:08+00:00,2016-12-24 08:25:37+00:00,"See
http://camel.465427.n5.nabble.com/Contributing-file-in-Apache-Camel-td5790520.html


Contributions and help is much welcome","githubbot:1482497924:2016-12-23T20:58:44.972+0000:1482497924:2016-12-23T20:58:44.972+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1366

    CAMEL-10528 - Add contributing file for Apache Camel

    Add contributing file for Apache Camel

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel camel-atmos

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1366.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1366
    
----
commit 3cb7846f87dc1a84e402df8860e094277700af2a
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-11-27T12:20:27Z

    initial
    
    initial

commit 47394e99b53cfcba0178bb9a19c7782548b719d9
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T20:53:15Z

    CAMEL-10528 documentation
    
    add documentation

commit b7a02b92077b72040d15b265f97adb56ab5f3fed
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:06:34Z

    CAMEL-10528 documentation
    
    doc polish

commit 250cf9e4767d7e88495058b5309f68ae90857caf
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:14:45Z

    CAMEL-10528 documentation
    
    doc polish

commit d77d679934b2d98e4a05bb11f5ed7553c3a94f77
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:18:09Z

    CAMEL-10528 documentation
    
    polish

commit 8c3da0a357c0ac6dbc180b23771e38f2e3dd744b
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:40:37Z

    CAMEL-10528 documentation
    
    polish

commit 9fcd7c1b185bf3ef1a5eff7bd7d09a6452b36696
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:52:50Z

    CAMEL-10528 documentation
    
    doc polish

commit 766bc8ac2299a164a50f4990c8c8c21e00a7ae14
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:53:46Z

    CAMEL-10528 documentation
    
    CAMEL-10528 documentation

commit 3d6ee9cc3ea70e8f1bc91a188c1882535fcf5744
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:55:42Z

    CAMEL-10528 documentation
    
    CAMEL-10528 documentation

commit b644252bd972b691c32b24c55fb1c1e533f0f6be
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:58:12Z

    CAMEL-10528 documentation
    
    doc polish

commit 9665348516f5720dbc8edf4088f9b506a8184a11
Author: onders86 <ondersezgin+github@gmail.com>
Date:   2016-12-23T21:59:30Z

    Merge remote-tracking branch 'apache/master' into camel-atmos

----

githubbot:1482538961:2016-12-24T08:22:41.697+0000:1482538961:2016-12-24T08:22:41.697+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1366

davsclaus:1482539137:2016-12-24T08:25:37.009+0000:1482539137:2016-12-24T08:25:37.009+0000:Thanks a lot Onder."
0,CAMEL-10527,Improvement,Minor,2.18.0,"2.17.5, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.5, 2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-25 13:09:16+00:00,2016-11-25 13:15:41+00:00,"See SO
http://stackoverflow.com/questions/40805154/camel-mail-imap-not-skipping-failed-messages


We only catch MailException but there can be others kinds as well.",
0,CAMEL-10526,Bug,Trivial,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Aurelien Pupier,0,2,2016-11-25 12:57:08+00:00,2016-11-25 15:45:06+00:00,on page http://camel.apache.org/asciidoc.html there is a link to https://github.com/apache/camel/blob/master/components/camel-ahc/src/main/docs/ahc.adoc which is a file which doesn't exist,"davsclaus:1480049936:2016-11-25T12:58:56.263+0000:1480049936:2016-11-25T12:58:56.263+0000:A JIRA ticket is not needed for trivial changes.
aurelien.pupier:1480052555:2016-11-25T13:42:35.755+0000:1480052555:2016-11-25T13:42:35.755+0000:not needed unless I don't know where this should be fixed"
0,CAMEL-10525,Bug,Major,2.18.0,,"

aggregator

",Resolved,Won't Fix,None,Unassigned,Stefan,0,2,2016-11-25 12:21:33+00:00,2016-11-25 16:40:29+00:00,"I have a route definition using an AggregationController. If this this route definition is added to multiple CamelContexts, I end up with two AggregateProcessors (one for each context) pointing to the same AggregationController pointing to the AggregateProcessor in the last started CamelContext.","sschulze:1480047797:2016-11-25T12:23:17.542+0000:1480047797:2016-11-25T12:23:17.542+0000:The attached zip file contains a testcase which demonstrates the issue.
If the bean definition ""context2"" is removed, the test passes. Otherwise the test fails.
davsclaus:1480048736:2016-11-25T12:38:56.193+0000:1480048736:2016-11-25T12:38:56.193+0000:This is not a bug, you should not add the same route instance to two different camel contexts."
0,CAMEL-10524,Bug,Major,2.19.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Nicola Ferraro,Nicola Ferraro,0,2,2016-11-25 12:02:29+00:00,2016-11-28 09:52:49+00:00,"Probably after CAMEL-10412, component beans are not created automatically so property-based configuration and other features are disabled.


Running 'mvn spring-boot:run -Ddebug=true' on camel-spring-boot-example I see the following log among the others:



...
TimerComponentAutoConfiguration:
      Did not match:
         - @ConditionalOnBean (types: org.apache.camel.springboot.CamelAutoConfiguration; SearchStrategy: all) did not find any beans (OnBeanCondition)
...","davsclaus:1480049744:2016-11-25T12:55:44.664+0000:1480049744:2016-11-25T12:55:44.664+0000:Ah sorry yeah we need to get this sorted, well spotted.
nferraro:1480297969:2016-11-28T09:52:49.134+0000:1480297969:2016-11-28T09:52:49.134+0000:Sorting was not working... Until I figured out that there was a typo in the package name ;)"
0,CAMEL-10523,Test,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Aurelien Pupier,0,2,2016-11-25 10:39:14+00:00,2017-01-31 17:41:29+00:00,"Currently several tests are failing when launching them from Eclipse IDE, I spotted 2 categories for now:



several MBean tests
test trying to access some *.html generated file
for instance  for instance with org.apache.camel.component.dataset.DataSetComponentConfigurationAndDocumentationTest.testComponentDocumentation() it is searching for
org/apache/camel/component/dataset/dataset.html



Gain:



enter the 21st century
faster development
open ways to leverage usage of Code coverage tools, easier debugging and real-time test execution","davsclaus:1481163913:2016-12-08T10:25:13.007+0000:1481163913:2016-12-08T10:25:13.007+0000:Enter 21 century by using IDEA ;)
aurelien.pupier:1481250151:2016-12-09T10:22:31.973+0000:1481250504:2016-12-09T10:28:24.364+0000:Several tests are failing in IntelliJ too, for instnace for camel-core:

- ComponentDiscoveryTest
-- ComponentDiscoveryTest.testComponentDiscovery
- StringDataFormatConfigurationAndDocumentationTest
-- StringDataFormatConfigurationAndDocumentationTest.testDataFormatJsonSchema
- SimpleLanguageConfigurationAndDocumentationTest
-- SimpleLanguageConfigurationAndDocumentationTest.testLanguageJsonSchema
- ManagedCamelContextTest
-- ManagedCamelContextTest.testFindComponentsInClasspath
- ManagedDataFormatTest
-- ManagedDataFormatTest.testManageDataFormat
- ManagedListComponentsTest
-- ManagedListComponentsTest.testListComponents
- ErrorOccuredInOnExceptionRoute
-- ErrorOccuredInOnExceptionRoute.testErrorInOnExceptionNotHandledSecondOnException
-- ErrorOccuredInOnExceptionRoute.testErrorInOnException
davsclaus:1485855689:2017-01-31T17:41:29.815+0000:1485855689:2017-01-31T17:41:29.815+0000:Moved the doc tests to itest"
0,CAMEL-10522,Bug,Major,2.15.4,,"
None
",Resolved,Invalid,None,Unassigned,Brajesh Bharti,0,2,2016-11-25 09:55:13+00:00,2016-11-25 09:57:39+00:00,"Is there any way to retrieve the deleted data from sfdc ? 
Is there any way to call the login api so get the access token ?
Is there any way to before call rest need to set the proxy details ?","davsclaus:1480039059:2016-11-25T09:57:39.064+0000:1480039059:2016-11-25T09:57:39.064+0000:Please use the user forum / user mailing list to ask such questions
http://camel.apache.org/discussion-forums.html
http://camel.apache.org/mailing-lists.html

If you are a Red Hat customer you can also use their customer portal to get developer assistance/help.

However at Apache we only help/support Apache Camel and not commercial vendors products."
0,CAMEL-10521,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-11-24 08:07:00+00:00,2016-11-28 10:36:47+00:00,No Desc,
0,CAMEL-10520,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Xavier Fournet,0,3,2016-11-23 18:24:53+00:00,2016-11-23 19:26:11+00:00,"The way the message are acknowledged are different with Lumberjack protocol v1 and protocol v2. Currently the implemented mecanism match the v2 protocol, and for v1 protocol the message stream is blocked after two windows are sent.","githubbot:1479898575:2016-11-23T18:56:15.190+0000:1479898575:2016-11-23T18:56:15.190+0000:GitHub user xfournet opened a pull request:

    https://github.com/apache/camel/pull/1303

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/camel CAMEL-10520

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1303.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1303
    
----
commit f907d03658ddc0080e48e05bb90085adf6bc587c
Author: xfournet <xavier.fournet@gmail.com>
Date:   2016-11-23T18:53:12Z

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

----

githubbot:1479899454:2016-11-23T19:10:54.986+0000:1479899454:2016-11-23T19:10:54.986+0000:GitHub user xfournet opened a pull request:

    https://github.com/apache/camel/pull/1304

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/xfournet/camel CAMEL-10520_2.8.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1304.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1304
    
----
commit 6145dcd25c247606c675efd54e71ecaa939a5772
Author: xfournet <xavier.fournet@gmail.com>
Date:   2016-11-23T18:53:12Z

    CAMEL-10520 fix the acknowledgment mechanism for lumberjack protocol v1

----

githubbot:1479900251:2016-11-23T19:24:11.002+0000:1479900251:2016-11-23T19:24:11.002+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1303

githubbot:1479900252:2016-11-23T19:24:12.691+0000:1479900252:2016-11-23T19:24:12.691+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1304

davsclaus:1479900371:2016-11-23T19:26:11.078+0000:1479900371:2016-11-23T19:26:11.078+0000:Thanks for the PRs"
0,CAMEL-10489,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-11-17 09:22:46+00:00,2016-11-17 10:00:09+00:00,"As you may see from the docs of Jnats, we can specify a timeout while flushing the connection to server.


It can be useful to specify the flush option and a timeout related to it, to be sure we will try to be reliable with our component.",
0,CAMEL-10488,Improvement,Major,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-11-16 09:27:16+00:00,2016-11-16 16:07:13+00:00,No Desc,
0,CAMEL-10487,New Feature,Major,None,,"
None
",Resolved,Invalid,None,Unassigned,Evgeny Minkevich,0,2,2016-11-16 05:28:23+00:00,2016-11-23 19:33:22+00:00,"As a system operator I would like to be able to change the log level of the Camel ecosystem via Springboot remote shell command line.


At the moment only java.util.logging set of commands is present - ""jul"" - and it does not work for the Camel components.","davsclaus:1479693582:2016-11-21T09:59:42.157+0000:1479693582:2016-11-21T09:59:42.157+0000:Can you find out more, because Camel uses slf4j-api for its logging. So I wonder if there is anything to be changed/done on Apache Camel side of things. 

Can't spring boot configure logging for slf4j also?
emin:1479699690:2016-11-21T11:41:30.607+0000:1479699690:2016-11-21T11:41:30.607+0000:Looks like that while it is slf4j as the API the binding behind it is logback.

I got a quick fix here:

https://github.com/evmin/springboot-shell-logback

Could you pls check? If it something acceptable I will create a PR.

davsclaus:1479778381:2016-11-22T09:33:01.213+0000:1479778381:2016-11-22T09:33:01.213+0000:Dont that look like a more general Spring Boot issue? Have you reached out to the Spring Boot team to talk about this?
emin:1479779514:2016-11-22T09:51:54.830+0000:1479779514:2016-11-22T09:51:54.830+0000:Good point. Will do, thanks. Feel free to close the issue.
emin:1479780682:2016-11-22T10:11:22.783+0000:1479780682:2016-11-22T10:11:22.783+0000:The situation turns out to be a tad more serious.

They plan to discontinue remote shell support https://github.com/spring-projects/spring-boot/issues/7006

Not sure what to do, Camel on Springboot does need a way to start/stop routes, change logging and what's not.

But regardless of the problem - this ticket is no longer actual and can be closed.
davsclaus:1479900802:2016-11-23T19:33:22.431+0000:1479900802:2016-11-23T19:33:22.431+0000:This is Spring Boot to support / provide this kind of commands for managing logs and whatnot."
0,CAMEL-10486,Bug,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Evgeny Minkevich,0,4,2016-11-15 21:33:18+00:00,2016-12-02 09:43:02+00:00,"Component: camel-google-pubsub


When parallelConsumers option on an endpoint is assigned the value greater than 1, the component will not be receiving messages.


The issue has been traced to the underlying Google library used and I will update the component once the fix is available.","emin:1479216948:2016-11-15T21:35:48.573+0000:1479216948:2016-11-15T21:35:48.573+0000:[~ancosen] JFYI - there is a bug in the underlying library. Found in UAT of our project. Will keep the case updated - working with Google to fix it up.
acosentino:1479251390:2016-11-16T07:09:50.719+0000:1479251390:2016-11-16T07:09:50.719+0000:[~emin], thanks!
emin:1479325186:2016-11-17T03:39:46.190+0000:1479325186:2016-11-17T03:39:46.190+0000:[~ancosen] I got the fix, it is good for the time being, but not really elegant. How much time do I have before submitting it? I would like to wait a week or so. What are the timelines for 2.19 release?
acosentino:1479426543:2016-11-18T07:49:03.279+0000:1479426543:2016-11-18T07:49:03.279+0000:[~emin], no problem. Actually for 2.19 there are no timelines. We have time :-)
emin:1480530511:2016-12-01T02:28:31.646+0000:1480530511:2016-12-01T02:28:31.646+0000:[~ancosen] I am going to push the interim fix to the problem, if you do not mind. When (and if) Google comes through with the proper library update - I will create a separate pull request.

githubbot:1480530769:2016-12-01T02:32:49.257+0000:1480530769:2016-12-01T02:32:49.257+0000:GitHub user evmin opened a pull request:

    https://github.com/apache/camel/pull/1325

    CAMEL-10486: The consumer threading/message undelelivered issue fix

    Google PubSub Component did not consume messages with parallel consumers.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/evmin/camel CAMEL-10486

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1325.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1325
    
----
commit ea3991fd2ccacf39bd8bab3b77a2b309c61df52c
Author: Evgeny Minkevich <evgeny.minkevich@gmail.com>
Date:   2016-11-17T03:50:55Z

    CAMEL-10486: The consumer threading/message undelelivered issue fix

----

githubbot:1480554781:2016-12-01T09:13:01.160+0000:1480554781:2016-12-01T09:13:01.160+0000:Github user evmin closed the pull request at:

    https://github.com/apache/camel/pull/1325

davsclaus:1480642792:2016-12-02T09:39:52.892+0000:1480642792:2016-12-02T09:39:52.892+0000:Is there more work to this or did the last PR implement this?
acosentino:1480642969:2016-12-02T09:42:49.565+0000:1480642969:2016-12-02T09:42:49.565+0000:We can wait for the new library from google and leave this open, but it doesn't make sense. I close this one and in case I will update the dependency directly"
0,CAMEL-10485,Bug,Minor,2.17.3,,"
None
",Resolved,Won't Fix,None,Unassigned,Chi Kim,0,2,2016-11-15 21:29:27+00:00,2016-11-15 22:04:49+00:00,"CamelContext is always started even with @UseAdviceWith.
CamelContext is started when camel route bean is refreshed during the Spring start up.


Looks like the CamelSpringBootJUnit4ClassRunner gets around the problem by setting 



System.setProperty(""skipStartingCamelContext"", ""true"");




which is missing in the CamelTestNG version.","davsclaus:1479217299:2016-11-15T21:41:39.629+0000:1479217299:2016-11-15T21:41:39.629+0000:camel-testng is depcreated. Please use camel-test and others which are junit based.
chikim79:1479218689:2016-11-15T22:04:49.157+0000:1479218689:2016-11-15T22:04:49.157+0000:Like you said, JUnit ones work flawlessly,  it would be nice to see that support for TestNG is deprecated in the documentation.
Thank you."
0,CAMEL-10484,Bug,Minor,2.17.3,,"
None
",Resolved,Won't Fix,None,Unassigned,Chi Kim,0,2,2016-11-15 21:23:50+00:00,2016-11-15 22:04:55+00:00,"AbstractCamelTestNGSpringContextTests seems to only support xml configuration.  


It uses CamelSpringTestContextLoader to load the context which only load bean definition using XmlBeanDefinitionReader.



public class CamelSpringTestContextLoader extends AbstractContextLoader {

...
@Override
    public ApplicationContext loadContext(MergedContextConfiguration mergedConfig) throws Exception {
        Class<?> testClass = getTestClass();
        
        if (LOG.isDebugEnabled()) {
            LOG.debug(""Loading ApplicationContext for merged context configuration [{}]."", mergedConfig);
        }
        
        try {            
            GenericApplicationContext context = createContext(testClass, mergedConfig);
            context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles());
            loadBeanDefinitions(context, mergedConfig);
            return loadContext(context, testClass);
        } finally {
            cleanup(testClass);
        }
    }

...
protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedConfig) {
        (new XmlBeanDefinitionReader(context)).loadBeanDefinitions(mergedConfig.getLocations());
    }
...","davsclaus:1479217566:2016-11-15T21:46:06.289+0000:1479217566:2016-11-15T21:46:06.289+0000:camel-testng is deprecated.


chikim79:1479218695:2016-11-15T22:04:55.452+0000:1479218695:2016-11-15T22:04:55.452+0000:Like you said, JUnit ones work flawlessly,  it would be nice to see that support for TestNG is deprecated in the documentation.
Thank you."
0,CAMEL-10483,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Hector Veiga,0,2,2016-11-15 19:05:14+00:00,2017-01-30 11:56:11+00:00,Current RabbitMQ component allows to create bindings using only routing keys. It would be good to provide a way to also create bindings for headers exchange. Some info about it: http://stackoverflow.com/questions/19240290/how-do-i-implement-headers-exchange-in-rabbitmq-using-java/19534597,"githubbot:1485701803:2017-01-29T22:56:43.112+0000:1485701803:2017-01-29T22:56:43.112+0000:Github user w4tson closed the pull request at:

    https://github.com/apache/camel/pull/1424
"
0,CAMEL-10482,Improvement,Major,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-11-15 17:41:04+00:00,2016-11-16 14:13:31+00:00,No Desc,
0,CAMEL-10481,Task,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Thomas Diesler,0,3,2016-11-15 11:37:05+00:00,2016-11-21 08:05:07+00:00,No Desc,"githubbot:1479181103:2016-11-15T11:38:23.621+0000:1479181103:2016-11-15T11:38:23.621+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1275

    [CAMEL-10481] Camel does not expose cassandra-all any more

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10481

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1275.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1275
    
----
commit cd6d5c496bfa4d1bfd1f8cd407dc02190cd2a715
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-11-15T11:37:44Z

    [CAMEL-10481] Camel does not expose cassandra-all any more

----

davsclaus:1479217683:2016-11-15T21:48:03.436+0000:1479217683:2016-11-15T21:48:03.436+0000:Thanks for the PR
githubbot:1479686707:2016-11-21T08:05:07.616+0000:1479686707:2016-11-21T08:05:07.616+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1275
"
0,CAMEL-10480,Bug,Major,"2.17.3, 2.18.0","2.17.4, 2.18.1","
None
",Resolved,Fixed,"2.17.4, 2.18.1",Willem Jiang,Willem Jiang,0,1,2016-11-15 08:40:18+00:00,2016-11-15 09:17:58+00:00,"Just found a memory leak in the camel-netty4 UDP encoding when working on CAMEL-10409. 



Failed tests:
  NettyUDPAsyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPMessageLargerThanDefaultBufferSizeTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@73bb1337]
  NettyUDPObjectSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@5eed6dfb, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]","njiang:1479172677:2016-11-15T09:17:57.946+0000:1479172677:2016-11-15T09:17:57.946+0000:Applied patch into camel master, camel-2.18.x and camel-2.17.x branches."
0,CAMEL-10479,Improvement,Major,None,2.18.1,"
None
",Resolved,Fixed,2.18.1,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-11-15 06:45:12+00:00,2016-11-15 10:07:59+00:00,No Desc,
0,CAMEL-10478,Improvement,Major,"2.17.4, 2.18.1",,"
None
",Closed,Won't Fix,None,Unassigned,Zoran Regvart,0,2,2016-11-14 20:13:30+00:00,2016-11-21 12:48:08+00:00,"Salesforce component could benefit greatly from supporting simple expressions in header values. This would allow for natural chaining of salesforce components for the `query` and `queryNext` operations, as former returns the URL needed for the later.","githubbot:1479127086:2016-11-14T20:38:06.029+0000:1479127086:2016-11-14T20:38:06.029+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1272

    CAMEL-10478 Support for simple language in message headers for camel-salesforce

    Implements support for simple language expressions in header values for
    the camel-salesforce component.
    
    AbstractSalesforceProcessor was modified to post-process values
    retrieved from message header and evaluate them with simple language.
    This greatly simplifies usage in downstream salesforce components as
    they can have access upstream values. For instance:
    
        salesforce:queryMore?sObjectQuery=${header.nextRecordsUrl}...

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10478

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1272.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1272
    
----
commit 2760d6a6f166047b6491d819baaae5eb47bafda1
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-14T20:33:44Z

    Support simple language expressions in header values in camel-salesforce
    
    Implements support for simple language expressions in header values for
    the camel-salesforce component.
    
    AbstractSalesforceProcessor was modified to post-process values
    retrieved from message header and evaluate them with simple language.
    This greatly simplifies usage in downstream salesforce components as
    they can have access upstream values. For instance:
    
        salesforce:queryMore?sObjectQuery=${header.nextRecordsUrl}...

----

githubbot:1479127437:2016-11-14T20:43:57.056+0000:1479127437:2016-11-14T20:43:57.056+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1273

    CAMEL-10478 Support simple language expressions in header values in camel-salesforce

    This is a PR against 2.17.x, as this functionality would be beneficial to 2.17
    users as well.
    
    Implements support for simple language expressions in header values for
    the camel-salesforce component.
    
    AbstractSalesforceProcessor was modified to post-process values
    retrieved from message header and evaluate them with simple language.
    This greatly simplifies usage in downstream salesforce components as
    they can have access upstream values. For instance:
    
        salesforce:queryMore?sObjectQuery=${header.nextRecordsUrl}...

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10478-camel-2.17.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1273.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1273
    
----
commit 214fb5d6ad3384d86e2e64e76b40f3798dfa2bd3
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-14T20:41:29Z

    Support simple language expressions in header values in camel-salesforce
    
    Implements support for simple language expressions in header values for
    the camel-salesforce component.
    
    AbstractSalesforceProcessor was modified to post-process values
    retrieved from message header and evaluate them with simple language.
    This greatly simplifies usage in downstream salesforce components as
    they can have access upstream values. For instance:
    
        salesforce:queryMore?sObjectQuery=${header.nextRecordsUrl}...

----

githubbot:1479127588:2016-11-14T20:46:28.885+0000:1479127588:2016-11-14T20:46:28.885+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1274

    CAMEL-10478 Support simple language expressions in header values in camel-salesforce

    This is a PR against 2.18.x, as this functionality would be beneficial to 2.18
    users as well.
    
    Implements support for simple language expressions in header values for
    the camel-salesforce component.
    
    AbstractSalesforceProcessor was modified to post-process values
    retrieved from message header and evaluate them with simple language.
    This greatly simplifies usage in downstream salesforce components as
    they can have access upstream values. For instance:
    
        salesforce:queryMore?sObjectQuery=${header.nextRecordsUrl}...

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10478-camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1274.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1274
    
----
commit 6a28486d6714672ea67a40331d339df506aa1db2
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-14T20:45:07Z

    Support simple language expressions in header values in camel-salesforce
    
    Implements support for simple language expressions in header values for
    the camel-salesforce component.
    
    AbstractSalesforceProcessor was modified to post-process values
    retrieved from message header and evaluate them with simple language.
    This greatly simplifies usage in downstream salesforce components as
    they can have access upstream values. For instance:
    
        salesforce:queryMore?sObjectQuery=${header.nextRecordsUrl}...

----

githubbot:1479702176:2016-11-21T12:22:56.987+0000:1479702176:2016-11-21T12:22:56.987+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1272

githubbot:1479702202:2016-11-21T12:23:22.563+0000:1479702202:2016-11-21T12:23:22.563+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1273

githubbot:1479702208:2016-11-21T12:23:28.636+0000:1479702208:2016-11-21T12:23:28.636+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1274

zregvart:1479703688:2016-11-21T12:48:08.498+0000:1479703688:2016-11-21T12:48:08.498+0000:There is no need for this, as outlined in [How to use a dynamic URI in to()|http://camel.apache.org/how-to-use-a-dynamic-uri-in-to.html]"
0,CAMEL-10477,Task,Minor,2.18.0,2.19.0,"
None
",Resolved,Abandoned,2.19.0,Paolo Antinori,Paolo Antinori,0,4,2016-11-14 17:32:28+00:00,2017-04-07 08:51:03+00:00,"Upgrade jruby to v1.7.26


Note: this requires to explicitly set in test, while in used in multithread envs.



System.setProperty(""org.jruby.embed.localcontext.scope"", ""threadsafe"")","githubbot:1479116040:2016-11-14T17:34:00.504+0000:1479116040:2016-11-14T17:34:00.504+0000:GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1270

    CAMEL-10477 - jruby 1.7.26

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-10477

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1270.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1270
    
----
commit ba1035b72a99ae28da24117fd9d678f2a0051365
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-11-14T17:33:21Z

    CAMEL-10477 - jruby 1.7.26

----

githubbot:1479257462:2016-11-16T08:51:02.042+0000:1479257462:2016-11-16T08:51:02.042+0000:Github user paoloantinori closed the pull request at:

    https://github.com/apache/camel/pull/1270

tdiesler:1479695258:2016-11-21T10:27:38.988+0000:1479695258:2016-11-21T10:27:38.988+0000:This upgrade frequently causes 

{code}
Caused by: org.jruby.embed.EvalFailedException: (NoMethodError) undefined method `getBody' for nil:NilClass
	at org.jruby.embed.internal.EmbedEvalUnitImpl.run(EmbedEvalUnitImpl.java:132)
	at org.jruby.embed.jsr223.JRubyEngine.eval(JRubyEngine.java:90)
	at org.apache.camel.builder.script.ScriptBuilder.runScript(ScriptBuilder.java:469)
	at org.apache.camel.builder.script.ScriptBuilder.doEvaluateScript(ScriptBuilder.java:428)
	at org.apache.camel.builder.script.ScriptBuilder.evaluateScript(ScriptBuilder.java:409)
	... 151 more
Caused by: org.jruby.exceptions.RaiseException: (NoMethodError) undefined method `getBody' for nil:NilClass
	at RUBY.(root)(<script>:1)
{code}

CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1395
githubbot:1479695287:2016-11-21T10:28:07.319+0000:1479695287:2016-11-21T10:28:07.319+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1282

    Revert ""CAMEL-10477 - jruby 1.7.26""

    This reverts commit 057bbaeab3a947b67803ed500d9565bb63d105e8.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10477

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1282.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1282
    
----
commit 1bfd1a76acca3fc460e3bf9e8f318312e8356922
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-11-21T10:09:43Z

    Revert ""CAMEL-10477 - jruby 1.7.26""
    
    This reverts commit 057bbaeab3a947b67803ed500d9565bb63d105e8.

----

githubbot:1479698646:2016-11-21T11:24:06.169+0000:1479698646:2016-11-21T11:24:06.169+0000:Github user tdiesler closed the pull request at:

    https://github.com/apache/camel/pull/1282

davsclaus:1491526263:2017-04-07T08:51:03.842+0000:1491526263:2017-04-07T08:51:03.842+0000:jruby is deprecated so lets leave it as-is"
0,CAMEL-10476,Bug,Minor,"2.15.3, 2.16.0, 2.15.4, 2.16.1, 2.15.5, 2.15.6, 2.16.2, 2.16.3, 2.16.4, 2.17.0, 2.17.1, 2.17.2, 2.17.3, 2.18.0","2.16.5, 2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.16.5, 2.17.4, 2.18.1, 2.19.0",Grzegorz Grzybek,Ryan Colwell,0,2,2016-11-14 16:09:36+00:00,2016-12-16 08:10:55+00:00,"Problem: When running with a Camel Blueprint project a configAdminFile is not used to populate propertyplacehoders in camel-test-blueprint when exectued with camel-maven-plugin(camel:run). So a user can't run camel locally in a similar way to running in Karaf with file based property placeholder values. 


Workaround: I think, but haven't tested yet, that you can work around this locally using the methods described here: http://ggrzybek.blogspot.com/2015/12/camel-blueprint-test-support.html and/or how this solution  https://github.com/cschneider/Karaf-Tutorial/tree/master/camel/order/src appears to use exec:java locally and loads the properties via PropertiesComponent.


To reproduce the problem:
Create a new project using camel-archetype-blueprint. (You need to change the log4j config to make it run.) To reduce the time, I created a project that runs here: https://github.com/ryanco/propertyconfig. Instead of using a default in the blueprint XML for the propertyplaceholder, I setup the POM to include the following:



      <plugin>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-maven-plugin</artifactId>
        <version>2.18.0</version>
        <configuration>
	      <useBlueprint>true</useBlueprint
         <configAdminPid>com.yarsquidy.props.propertyconfig</configAdminPid>
          <configAdminFileName>etc/com.yarsquidy.props.propertyconfig</configAdminFileName>
        </configuration>
      </plugin>




In Camel 2.15.2 or earlier, this file would be loaded when mvn camel:run was invoked and the properties would be available via the PID at run time. After the changes made in CAMEL-9313, it appears that the method org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin is only called in when the createTestBundle pathway is taken in org.apache.camel.test.blueprint.CamelBlueprintHelper#createBundleContext(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String[]...). So it appears test using CamelBlueprintTestSupport get this functionality (as shown by the tests) but things executed from camel:run do not.


Here you can see in Camel 2.14 that call to org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin is made after the bundelContext is created.
https://github.com/apache/camel/blob/camel-2.14.x/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/Main.java#L103


In the master branch version, that call is no longer made from main after the context is returned.
https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/Main.java#L106


I made a change locally to add a similar call to org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin in Camel 2.18:



LOG.debug(""Starting Blueprint XML file: "" + descriptors);
if (configAdminPid != null && configAdminFileName != null) {
		// pid/file is used to set INITIAL content of ConfigAdmin to be used when blueprint container is started
		LOG.info(""ConfigAdminPid and ConfigAdminFileName are not null"");
		bundleContext = createBundleContext(bundleName, new String[] {configAdminFileName, configAdminPid});
} else {
		bundleContext = createBundleContext(bundleName);
}
CamelBlueprintHelper.setPersistentFileForConfigAdmin(bundleContext, configAdminPid, configAdminFileName, new Properties(), null, null, false);




Here is the output of the log statement from the example before this change:



[ntext          INFO  Apache Camel 2.18.0 (CamelContext: blueprint-bean-context) started in 0.214 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains ${greeting} at 2016-11-14 08:42:03
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains ${greeting} at 2016-11-14 08:42:08




Here is the output of the log statement from the example after this change:



[         Blueprint Extender: 3] BlueprintCamelContext          INFO  Apache Camel 2.18.1-SNAPSHOT (CamelContext: blueprint-bean-context) started in 0.257 seconds
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello From File! at 2016-11-14 08:54:09
[ntext) thread #0 - timer://foo] timerToLog                     INFO  The message contains Hello From File! at 2016-11-14 08:54:14




As you can see before the change, the ${greeting} property is not poplulated via propertyplacehoder. After the change it is replaced.


Given all the discussion of timing related issues in CAMEL-9313, I'm hesitant to say this is a good enough solution or that it aligns with the intention of the changes made in that fix. Given that configAdminFileName and configAdminPid are passed into createBundleContext, perhaps the call to org.apache.camel.test.blueprint.CamelBlueprintHelper#setPersistentFileForConfigAdmin should happen inside createBundleContext or one of it sub-methods. 


Overall, I ""think"" a user should be able to use the configAdminPid and configAdminFileName settings to load properties via camel:run rather than work aound it, but I could be persumptious there.","ggrzybek:1479209737:2016-11-15T19:35:37.936+0000:1479209737:2016-11-15T19:35:37.936+0000:Thanks for detailed description. I'll have a look at the end of this week.
ryanco:1479215190:2016-11-15T21:06:30.178+0000:1479215190:2016-11-15T21:06:30.178+0000:Let me know if I can provide any more information or if something isn't clear. I also was able to successfully test the workaround and I can run locally(in an IDE) using java:exec with the same properties file that the unit tests load by overriding loadConfigAdminConfigurationFile and reading that config file. The only thing I am not confident in with the workaround is the difference between running in a DefaultCamelContext vs a BlueprintCamelContext in the IDE. 
ggrzybek:1479432891:2016-11-18T09:34:51.210+0000:1481847053:2016-12-16T08:10:53.458+0000:The problem is {{org.apache.camel.test.blueprint.Main#includeSelfAsBundle}} field. Or rather the fact that it's not set in {{org.apache.camel.maven.RunMojo#execute()}}.

All JUnit tests (extending from {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport}}) by default use {{org.apache.camel.test.blueprint.CamelBlueprintTestSupport#includeTestBundle()}} which returns {{true}}.

When you simply do {{mvn clean test}}, neither {{target/classes}} nor {{target/test-classess}} contain {{META-INF/MANIFEST.MF}} file which is necessary to treat the location as ""bundle"" to be picked up in {{org.apache.camel.test.blueprint.CamelBlueprintHelper#getBundleDescriptors()}}:
{code:java}
    public List<BundleDescriptor> scanForBundles(String filterString, ClassLoader loader)
            throws Exception
    {
…
        loader = (loader != null) ? loader : getClass().getClassLoader();

…
        for (Enumeration<URL> e = loader.getResources(
                ""META-INF/MANIFEST.MF""); e.hasMoreElements(); )
        {
…
{code}

That's why in JUnit tests, explicit bundle is created using {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createTestBundle()}}. Only this method does the ""initial configadmin file"" trick (see [here|https://github.com/apache/camel/blob/13760a4a5f1672d54997aa8ede30aefed951505a/components/camel-test-blueprint/src/main/java/org/apache/camel/test/blueprint/CamelBlueprintHelper.java#L361-L363] for details).

When running using {{mvn clean camel:run}} you'll simply get {{java.lang.RuntimeException: Gave up waiting for service (objectClass=org.apache.camel.CamelContext)}}, because no ""bundle"" provides your blueprint XML descriptor.
You need at least {{mvn clean package camel:run}}, so you have these ""bundles"" installed by felix-connect (a bundle with blueprint descriptor is #1):
{noformat}
0 = {org.apache.felix.connect.launch.BundleDescriptor@5887} ""jar:file:/opt/java/tools/apache-maven-3.3.9/boot/plexus-classworlds-2.5.2.jar!/""
1 = {org.apache.felix.connect.launch.BundleDescriptor@5888} ""file:/data/ggrzybek/sources/github.com/_other/propertyconfig/target/classes/""
2 = {org.apache.felix.connect.launch.BundleDescriptor@5889} ""jar:file:/home/ggrzybek/.m2/repository/org/apache/camel/camel-core/2.18.0/camel-core-2.18.0.jar!/""
3 = {org.apache.felix.connect.launch.BundleDescriptor@5890} ""jar:file:/home/ggrzybek/.m2/repository/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar!/""
…
{noformat}

When running under JUnit, you have (a bundle with blueprint descriptor is #0):
{noformat}
0 = {org.apache.felix.connect.launch.BundleDescriptor@1869} ""jar:file:/data/ggrzybek/sources/github.com/_other/propertyconfig/target/test-bundles/blueprintbeanroutetest-1479460649241.jar!/""
1 = {org.apache.felix.connect.launch.BundleDescriptor@1806} ""jar:file:/home/ggrzybek/.m2/repository/org/apache/camel/camel-core/2.18.0/camel-core-2.18.0.jar!/""
2 = {org.apache.felix.connect.launch.BundleDescriptor@1807} ""jar:file:/home/ggrzybek/.m2/repository/org/slf4j/slf4j-api/1.7.21/slf4j-api-1.7.21.jar!/""
3 = {org.apache.felix.connect.launch.BundleDescriptor@1808} ""jar:file:/home/ggrzybek/.m2/repository/com/sun/xml/bind/jaxb-core/2.2.11/jaxb-core-2.2.11.jar!/""
…
{noformat}

If both {{includeTestBundle}} was {{true}} and we used {{mvn package}}, we'd have *two* bundles with blueprint descriptor.

Manifest from {{propertyconfig/target/test-bundles/mybundle-1479461020503.jar}} (created by {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createTestBundle()}}:
{noformat}
Manifest-Version: 2
SwissboxTinybundlesVersion: pax-swissbox-tinybundles-1.3.2
Bundle-SymbolicName: MyBundle
Bundle-Version: 1.0.0
Built-By: ggrzybek
Bundle-ManifestVersion: 2
Bundle-Activator: org.apache.camel.test.blueprint.CamelBlueprintHelper
 $TestBundleActivator
Created-By: pax-swissbox-tinybundles-1.3.2
Tool: pax-swissbox-tinybundles-1.3.2
X-Camel-Blueprint-ConfigAdmin-Init: com.yarsquidy.props.propertyconfig
 =file:/data/ggrzybek/sources/github.com/_other/propertyconfig/etc/com
 .yarsquidy.props.propertyconfig
{noformat}

Manifest from {{propertyconfig/target/classes/META-INF/MANIFEST.MF}} (created by maven-bundle-plugin):
{noformat}
Manifest-Version: 1.0
Bnd-LastModified: 1479460929527
Build-Jdk: 1.8.0_112
Built-By: ggrzybek
Bundle-Blueprint: OSGI-INF/blueprint/blueprint-bean.xml
Bundle-ManifestVersion: 2
Bundle-Name: A Camel Blueprint Route
Bundle-SymbolicName: com.yarsquidy.props.property-config
Bundle-Version: 1.0.0.SNAPSHOT
Created-By: Apache Maven Bundle Plugin
Export-Package: com.yarsquidy.props;version=""1.0.0""
Import-Package: org.osgi.service.blueprint;version=""[1.0.0,2.0.0)""
Require-Capability: osgi.ee;filter:=""(&(osgi.ee=JavaSE)(version=1.8))""
Tool: Bnd-3.2.0.201605172007
{noformat}

This is a reason of some problems we had when running JUnit tests *after* {{mvn ... package}}.

So the solution should be to perform the ""initial configadmin file"" trick when running with {{mvn camel:run}} and without {{includeTestBundle}}. {{camel:run}} should pick up a bundle containing blueprint descriptor which was created by {{mvn package}}

Also we should prevent using two bundles containing the same descriptors.

I already have an idea.
ggrzybek:1479434277:2016-11-18T09:57:57.997+0000:1479434277:2016-11-18T09:57:57.997+0000:Because {{mvn camel:run}} is *not* a test, for such scenarios, {{includeTestBundle}} should always equal to {{false}}. That's why I'll separate ""test bundle"" and a ""trick bundle"" that initializes configadmin before running blueprint.
ggrzybek:1479435307:2016-11-18T10:15:07.574+0000:1479435560:2016-11-18T10:19:20.141+0000:Ah, one more thing. {{org.apache.camel.test.blueprint.CamelBlueprintHelper#createTestBundle()}} creates TinyBundle without {{Bundle-Blueprint}} header. Thus {{org.apache.aries.blueprint.container.BlueprintExtender#getBlueprintPaths()}} explicitly uses:
{noformat}
Bundle-Blueprint: OSGI-INF/blueprint/
{noformat}

which eventually translates to {{OSGI-INF/blueprint/*.xml}}.

And because {{mvn camel:run}} doesn't set {{includeSelfAsBundle}}, setting {{descriptors}} ({{<applicationContextUri>}} or {{<fileApplicationContextUri>}}) doesn't make sense with {{<useBlueprint>}} == {{true}}.
ggrzybek:1479460142:2016-11-18T17:09:02.458+0000:1479460142:2016-11-18T17:09:02.458+0000:Fixed in:
* [master|https://github.com/apache/camel/commit/35a8fb65ce2f4feffe0b663d4ed48fdf00e98f44]
* [camel-2.18.x|https://github.com/apache/camel/commit/a4280151d7cbd37de2425dc414b79ec43b968ece]
* [camel-2.17.x|https://github.com/apache/camel/commit/d35f61c20cd0a14ebf4eaea3f4c5d050c6ffeb2e]
* [camel-2.16.x|https://github.com/apache/camel/commit/e6bf8367bc6ae6b0ab14a6069964eb9956ed6689]

There were already {{org.apache.camel.test.blueprint.MainTest}}, {{org.apache.camel.test.blueprint.MainNoPidTest}} and {{org.apache.camel.test.blueprint.MainNoReloadTest}}, but all of them explicitly used:
{code:java}
main.setIncludeSelfAsBundle(true);
{code}

Now I've added {{org.apache.camel.test.blueprint.MainTest#testMainWithoutIncludingTestBundle()}} which calls {{main.setIncludeSelfAsBundle(false)}}."
0,CAMEL-10475,Improvement,Minor,None,Future,"
None
",Resolved,Duplicate,Future,Unassigned,Claus Ibsen,0,1,2016-11-12 09:26:10+00:00,2016-12-22 08:13:06+00:00,"We should upgrade to RX 2.0, but its API is changed so there will be some migration needed.",
0,CAMEL-10474,Improvement,Minor,None,2.21.0,"
None
",Resolved,Fixed,2.21.0,Claus Ibsen,Claus Ibsen,2,3,2016-11-12 08:26:41+00:00,2018-02-27 12:05:34+00:00,"We should add support for end users to specify a special header in the returned message that will force the group to be complete, such as


Exchange.AGGREGATE_FORCE_COMPLETE, true


This can help the use case as described here
http://stackoverflow.com/questions/40546189/aggregate-only-consecutive-exchanges-with-same-correlation-key","davsclaus:1519696850:2018-02-27T10:00:50.142+0000:1519704108:2018-02-27T12:01:48.619+0000:You can now set a exchange property with boolean true on the returned exchange from the aggregation repository

Exchange.AGGREGATION_COMPLETE_ALL_GROUPS

See the unit test for an example:

AggregateForceCompletionHeaderInAggregationStrategyTest"
0,CAMEL-10473,Improvement,Major,None,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-11 12:49:51+00:00,2016-11-11 13:32:14+00:00,"So you can do an failover LB and if that fails then let the general error handler to kick in, to eg move to a DLQ or something.


Just mind if you configure general error handler to do redelivery then you get double up, as it would retry the failover LB again.",
0,CAMEL-10472,New Feature,Major,2.18.1,2.19.0,"
None
",Resolved,Fixed,2.19.0,Zoran Regvart,Zoran Regvart,0,3,2016-11-11 09:43:48+00:00,2016-11-23 08:53:32+00:00,"Part of CAMEL-8396 to add support for the Recently Viewed Items.


Add operation `recent` that can be used like:



...to(""salesforce:recent"")
    .split().body()
      .log(""${body.name} at ${body.attributes.url}"");","githubbot:1478828728:2016-11-11T09:45:28.315+0000:1478828728:2016-11-11T09:45:28.315+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1265

    CAMEL-10472 Update Salesforce component to support recent items REST API

    Adds support for getting recent items via Salesforce REST API[1].
    
    New operation `recent` was added and can be used like:
    
        ...to(""salesforce:recent"")
            .split().body()
              .log(""${body.name} at ${body.attributes.url}"");
    
    Number of items returned can be limited by the `limit` parameter in URI,
    body or headers.
    
    [1] https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_recent_items.htm

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-8396-recent

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1265
    
----
commit fcc2351f5ab6eb2801096a13c3f2ae90d5aadd20
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-10T10:51:28Z

    Update Camel Salesforce integration tests
    
    Tests in SalesforceComponentConfigurationTest were not updated to the
    latest functionality provided by the
    SalesforceComponent::completeEndpointPath.
    
    Also renamed SalesforceComponentConfigurationTest to
    SalesforceComponentConfigurationIntegrationTest, the test requires
    Salesforce access to run. Renamed the `salesforce-test` profile to
    `integration` and enforced existence of
    `test-salesforce-login.properties` file in the root of
    `camel-salesforce-parent` project -- it is needed for the integration
    tests and contains the credentials required for accessing Salesforce
    account used.
    
    Details in README.md.

commit e2836347ecb005e94d51ba5645102484ef660a95
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-10T19:18:31Z

    CAMEL-8396 Update Salesforce component to support new REST APIs in Salesforce API V33.0
    
    This commit adds support for getting recent items via Salesforce REST API[1].
    
    New operation `recent` was added and can be used like:
    
        ...to(""salesforce:recent"")
            .split().body()
              .log(""${body.name} at ${body.attributes.url}"");
    
    Number of items returned can be limited by the `limit` parameter in URI,
    body or headers.
    
    [1] https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_recent_items.htm

----

githubbot:1479808170:2016-11-22T17:49:30.090+0000:1479808170:2016-11-22T17:49:30.090+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1265

githubbot:1479808254:2016-11-22T17:50:54.361+0000:1479808254:2016-11-22T17:50:54.361+0000:GitHub user zregvart reopened a pull request:

    https://github.com/apache/camel/pull/1265

    CAMEL-10472 Update Salesforce component to support recent items REST API

    Adds support for getting recent items via Salesforce REST API[1].
    
    New operation `recent` was added and can be used like:
    
        ...to(""salesforce:recent"")
            .split().body()
              .log(""${body.name} at ${body.attributes.url}"");
    
    Number of items returned can be limited by the `limit` parameter in URI,
    body or headers.
    
    [1] https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_recent_items.htm

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-8396-recent

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1265
    
----
commit 9dc42b67d36215b904270d68decbf40264bbac77
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-22T17:24:32Z

    CAMEL-10472 Update Salesforce component to support recent items REST API
    
    This commit adds support for getting recent items via Salesforce REST API[1].
    
    New operation `recent` was added and can be used like:
    
        ...to(""salesforce:recent"")
            .split().body()
              .log(""${body.name} at ${body.attributes.url}"");
    
    Number of items returned can be limited by the `limit` parameter in URI,
    body or headers.
    
    [1] https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_recent_items.htm

commit 75df9b6a6e54edce6f39e6d4986d0f06b8119fb4
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-22T17:48:41Z

    CAMEL-10472 Update Salesforce component to support recent items REST API
    
     - added documentation.
     - updates by
    camel-package-maven-plugin:prepare-spring-boot-auto-configuration to the
    SalesforceComponentConfiguration.java.

----

davsclaus:1479861967:2016-11-23T08:46:07.673+0000:1479861967:2016-11-23T08:46:07.673+0000:Thanks for the PR
githubbot:1479862412:2016-11-23T08:53:32.697+0000:1479862412:2016-11-23T08:53:32.697+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1265
"
0,CAMEL-10471,New Feature,Major,2.18.1,2.19.0,"

feature
features

",Resolved,Fixed,2.19.0,Claus Ibsen,Zoran Regvart,0,3,2016-11-11 09:38:45+00:00,2016-11-22 12:28:49+00:00,"Part of CAMEL-8396 to add support for the Organization Limits Salesforce API.


Add operation `limit` that can be used like:



...to(""salesforce:limit"")
    .choice()
      .when(
         simple(""${body.dailyApiRequests.remaining} > 0"")
      )...
    .endChoice();","githubbot:1478828387:2016-11-11T09:39:47.070+0000:1478828387:2016-11-11T09:39:47.070+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1264

    CAMEL-10471 Update Salesforce component to support limits REST API

    Adds support for the Organization Limits Salesforce API[1].
    
    New operation `limit` was added and can be used like:
    
        ...to(""salesforce:limit"")
            .choice()
              .when(
                 simple(""${body.dailyApiRequests.remaining} > 0"")
              )...
            .endChoice();
    
    Supports all usage limits currently returned with v38.0 Salesforce API.
    Adding of new usage limits is performed by adding enum constant to
    Limits.Operation and corresponding getter to Limits class.
    
    [1] https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-8396-limits

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1264.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1264
    
----
commit ec7504ee94fa3c88ddcc7af958461cd2705ef953
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-10T16:57:11Z

    CAMEL-8396 Update Salesforce component to support new REST APIs in Salesforce API V33.0
    
    This commit adds support for the Organization Limits Salesforce API[1].
    
    New operation `limit` was added and can be used like:
    
        ...to(""salesforce:limit"")
            .choice()
              .when(
                 simple(""${body.dailyApiRequests.remaining} > 0"")
              )...
            .endChoice();
    
    Supports all usage limits currently returned with v38.0 Salesforce API.
    Adding of new usage limits is performed by adding enum constant to
    Limits.Operation and corresponding getter to Limits class.
    
    [1] https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_limits.htm

----

davsclaus:1479777455:2016-11-22T09:17:35.416+0000:1479777455:2016-11-22T09:17:35.416+0000:Thanks for the PR
githubbot:1479777485:2016-11-22T09:18:05.521+0000:1479777485:2016-11-22T09:18:05.521+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1264

githubbot:1479782612:2016-11-22T10:43:32.921+0000:1479782612:2016-11-22T10:43:32.921+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1293

    CAMEL-10471 Update Salesforce component to support limits REST API

    This commits updates the Salesforce component documentation for the
    limits operation.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-8396-limits

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1293.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1293
    
----
commit d990528689d990f2cbf503ffec8794d19ae4bfa0
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-22T10:40:18Z

    CAMEL-10471 Update Salesforce component to support limits REST API
    
    This commits updates the Salesforce component documentation for the
    limits operation.

----

githubbot:1479788929:2016-11-22T12:28:49.226+0000:1479788929:2016-11-22T12:28:49.226+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1293
"
0,CAMEL-10470,Improvement,Minor,2.18.0,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-11 08:59:43+00:00,2016-11-11 09:03:11+00:00,"We can configure SimpleSearchTerm using searchTerm.xxx style, but you should also be able to do it like searchTerm=#mySimpleSerchBean which is shown as an example in the docs.",
0,CAMEL-10469,Task,Minor,None,"3.0.0-M1, 3.0.0","
None
",Resolved,Fixed,"3.0.0-M1, 3.0.0",Guillaume Nodet,Claus Ibsen,0,2,2016-11-11 08:41:01+00:00,2019-03-01 13:40:07+00:00,"We should remove the @version in the javadoc of the java source code. 


Not for 2.x as it will change alot of java source files and cause stacktraces to not align up etc.",
0,CAMEL-10468,Improvement,Minor,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-11-10 17:33:23+00:00,2016-11-11 10:27:16+00:00,No Desc,
0,CAMEL-10467,Bug,Major,2.18.0,2.18.1,"
None
",Resolved,Fixed,2.18.1,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-11-10 16:11:20+00:00,2016-11-15 06:45:35+00:00,No Desc,
0,CAMEL-10466,Bug,Major,2.18.0,"2.18.1, 2.19.0","

out-of-memory

",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Edoardo Causarano,0,4,2016-11-10 13:50:01+00:00,2016-11-25 09:04:53+00:00,"Using the Dropbox component to download files will consume large amounts of memory, often producing OOMs.


This is due to the use of ByteArrayOutputStream objects in the implementation of org.apache.camel.component.dropbox.core.DropboxAPIFacade


The component should use org.apache.camel.converter.stream.OutputStreamBuilder instead.","ecausarano:1479450523:2016-11-18T14:28:43.786+0000:1479450523:2016-11-18T14:28:43.786+0000:Hi there,

I pushed some code in the https://github.com/ecausarano/camel/tree/fix/dropbox-oom branch but I'm still not that happy about the lack of (integration) testing. On the other hand it's hard to do when Dropbox itself doesn't provide a testing component themselves... any ideas?

In particular, I'm getting NPEs when my code is unable to find a remote file, and therefore returns an empty map (previous code would throw an exception).

What's the best approach to handle this condition:
1. throw an exception?
2. log something and interrupt the exchange?
3. Wrap the payload in an optional and Return an empty?
4. Return a null?
davsclaus:1479692489:2016-11-21T09:41:29.322+0000:1479692489:2016-11-21T09:41:29.322+0000:unable to find remote file, at what point can this happen? Is it on a consumer or producer side? Can you point out to where this is in your code?
ecausarano:1479814437:2016-11-22T19:33:57.993+0000:1479814437:2016-11-22T19:33:57.993+0000:Hi Claus,

I did a couple commits over the course of the fix in the branch I linked, but the core of the issue is in https://github.com/ecausarano/camel/blob/camel-2.18.x/components/camel-dropbox/src/main/java/org/apache/camel/component/dropbox/core/DropboxAPIFacade.java My changes - particularly in the corresponding file in the dropbox-oom branch - aim to use the OutputStreamBuilder instead.

How can i make it easier for you to see all diffs from master? 
davsclaus:1479815316:2016-11-22T19:48:36.013+0000:1479815316:2016-11-22T19:48:36.013+0000:You can do a PR against master branch like the many other PRs we get. Then it only contains the code changes that are ""diff"" against latest code, and its easier to review.

Basically the normal github procedure for submitting code changes to projects hosted on github.
githubbot:1479873063:2016-11-23T11:51:03.894+0000:1479873063:2016-11-23T11:51:03.894+0000:GitHub user ecausarano opened a pull request:

    https://github.com/apache/camel/pull/1298

    CAMEL-10466  - fix/dropbox oom

    See CAMEL-10466 - In a nutshell: I've changed the DropboxAPIFacade to use an OutputStreamBuilder rather than a BAOS. All other changes are corollary to this.
    
    I'm still missing some questions about testing, returning empty content etc... (see discussion in JIRA)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ecausarano/camel fix/dropbox-oom

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1298.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1298
    
----
commit 21941ae950a5f0528f336ced860ebf23f5e99b28
Author: Edoardo Causarano <edoardo.causarano@gmail.com>
Date:   2016-11-17T13:12:31Z

    Refactor API Facade to avoid use of ByteArrays because it causes OOM.
    Refactor DTO package members to be dumb DTOs.

commit 7bd0a7305fc0d0c70878e2dd464ec6898621780b
Author: Edoardo Causarano <edoardo.causarano@gmail.com>
Date:   2016-11-17T13:31:01Z

    Various tweaks and corrections suggested by IntelliJ

commit aaeaabf88deb11e25882c089ee8e4ed3a2fd7cca
Author: Edoardo Causarano <edoardo.causarano@gmail.com>
Date:   2016-11-18T13:50:25Z

    Fix obvious mistakes (how can I test all this without going insane?!)

----

githubbot:1480035873:2016-11-25T09:04:33.908+0000:1480035873:2016-11-25T09:04:33.908+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1298

davsclaus:1480035893:2016-11-25T09:04:53.218+0000:1480035893:2016-11-25T09:04:53.218+0000:Thanks for the PR"
0,CAMEL-10465,Bug,Major,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Andrea Cosentino,Justin Heesemann,0,3,2016-11-10 13:12:25+00:00,2016-11-11 12:50:39+00:00,"See here (not created by myself, but I experienced the same issue with camel-ahc) http://stackoverflow.com/questions/40262870/camel-ahc-ws-netty-runtime-exception/40528271#40528271


I see errors like:



java.lang.NoSuchMethodError: io.netty.buffer.ByteBuf.forEachByte(Lio/netty/buffer/ByteBufProcessor;)




When I'm sending http requests via camel-ahc.
A workaround for me is to exclude netty-all 4.1.5 and use netty-all 4.0.41.Final instead


Since there is no version of AsyncHttpClient out there which directly support 4.1.5 I'm not sure how to handle this if you need both camel-ahc and camel-netty (or whatever else is making direct use of netty 4.1.5)","acosentino:1478755128:2016-11-10T13:18:48.689+0000:1478755128:2016-11-10T13:18:48.689+0000:I will take a look. Probably when we upgrade all the components to Netty 4.1.x we didn't notice this. Thanks for spotting this.
davsclaus:1478824908:2016-11-11T08:41:48.851+0000:1478824908:2016-11-11T08:41:48.851+0000:Yeah so ahc should then use netty 4.0.x
convoi:1478839204:2016-11-11T12:40:04.606+0000:1478839204:2016-11-11T12:40:04.606+0000:I just want to say thanks.
To me, apache camel is one of the best maintained open source projects I have encountered and could well serve as an example to many commercially maintained products.
Response times within hours, fixes within hours or few days.. again. thanks, and have a nice weekend.
acosentino:1478839839:2016-11-11T12:50:39.512+0000:1478839839:2016-11-11T12:50:39.512+0000:[~convoi], thanks a lot. This is something that make us proud :-)

Many thanks for your kind words!"
0,CAMEL-10464,Bug,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Antonin Stefanutti,Antonin Stefanutti,0,1,2016-11-10 13:11:26+00:00,2016-12-27 21:24:42+00:00,No Desc,antonin.stefanutti:1482845082:2016-12-27T21:24:42.608+0000:1482845082:2016-12-27T21:24:42.608+0000:Note that this requires CDI 2.0 for it to work.
0,CAMEL-10463,Improvement,Minor,"2.17.0, 2.18.0",2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Zoran Regvart,0,3,2016-11-10 11:04:14+00:00,2016-11-22 09:25:38+00:00,"Tests in SalesforceComponentConfigurationTest were not updated to the
latest functionality provided by the
SalesforceComponent::completeEndpointPath.


Also renamed SalesforceComponentConfigurationTest to
SalesforceComponentConfigurationIntegrationTest, the test requires
Salesforce access to run. Renamed the `salesforce-test` profile to
`integration` and enforced existence of
`test-salesforce-login.properties` file in the root of
`camel-salesforce-parent` project – it is needed for the integration
tests and contains the credentials required for accessing Salesforce
account used.


Details in README.md.","githubbot:1478747112:2016-11-10T11:05:12.561+0000:1478747112:2016-11-10T11:05:12.561+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1260

    CAMEL-10463: Update Camel Salesforce integration tests

    Tests in SalesforceComponentConfigurationTest were not updated to the
    latest functionality provided by the
    SalesforceComponent::completeEndpointPath.
    
    Also renamed SalesforceComponentConfigurationTest to
    SalesforceComponentConfigurationIntegrationTest, the test requires
    Salesforce access to run. Renamed the `salesforce-test` profile to
    `integration` and enforced existence of
    `test-salesforce-login.properties` file in the root of
    `camel-salesforce-parent` project -- it is needed for the integration
    tests and contains the credentials required for accessing Salesforce
    account used.
    
    Details in README.md.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1260.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1260
    
----
commit 196be3a7bacbc1998d5466e951a14cc567d2a25f
Author: Zoran Regvart <zoran@regvart.com>
Date:   2016-11-10T10:51:28Z

    Update Camel Salesforce integration tests
    
    Tests in SalesforceComponentConfigurationTest were not updated to the
    latest functionality provided by the
    SalesforceComponent::completeEndpointPath.
    
    Also renamed SalesforceComponentConfigurationTest to
    SalesforceComponentConfigurationIntegrationTest, the test requires
    Salesforce access to run. Renamed the `salesforce-test` profile to
    `integration` and enforced existence of
    `test-salesforce-login.properties` file in the root of
    `camel-salesforce-parent` project -- it is needed for the integration
    tests and contains the credentials required for accessing Salesforce
    account used.
    
    In Integration tests, as per README.md, one should be using Apache Camel
    Salesforce Integration Tests Package -- managed package available on
    Salesforece.
    
    Details in README.md.

----

davsclaus:1479777649:2016-11-22T09:20:49.819+0000:1479777649:2016-11-22T09:20:49.819+0000:Thanks for the PR
githubbot:1479777938:2016-11-22T09:25:38.424+0000:1479777938:2016-11-22T09:25:38.424+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1260
"
0,CAMEL-10462,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Quinn Stevenson,Quinn Stevenson,0,2,2016-11-09 22:05:38+00:00,2016-11-12 08:29:04+00:00,"Camel supports MDC through the MDCUnitOfWork, so MDC keys/values are not set during context/route startup and shutdown.  It would be nice to have the keys/values there during these phases.","githubbot:1478765028:2016-11-10T16:03:48.426+0000:1478765028:2016-11-10T16:03:48.426+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1261

    CAMEL-10462: Improve MDC Logging in DefaultCamelContext and RouteService

    I added nested classes to help with the MDC logging (to avoid a bunch of duplicate code).  The nested classes have some duplication as well, so longer term, it may be nice to combine them and move them into util.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10462

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1261.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1261
    
----
commit 40f051aac8e969ea277c4722d0b97d9caf94dfde
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-10T16:01:31Z

    CAMEL-10462: Improve MDC Logging in DefaultCamelContext and RouteService

----

githubbot:1478847559:2016-11-11T14:59:19.185+0000:1478847559:2016-11-11T14:59:19.185+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1261
"
0,CAMEL-10461,Bug,Minor,2.17.1,"2.18.2, 2.19.0","
None
",Resolved,Duplicate,"2.18.2, 2.19.0",Claus Ibsen,Lionel Palacin,0,2,2016-11-09 21:42:17+00:00,2017-01-01 16:08:02+00:00,"In an XML route, I use the CMIS component as a Producer. Parameters passed in the URL are not taking in account. It worked perfectly in 2.16.2        


 <to uri=""cmis://http://192.168.99.100:32768/alfresco/api/-default-/public/cmis/versions/1.1/atom?username=admin&amp;password=admin&amp;repositoryId=-default-""/>","davsclaus:1478741662:2016-11-10T09:34:22.195+0000:1478741662:2016-11-10T09:34:22.195+0000:Can you explain a bit more what is the problem? And can you try with Camel 2.18.0 release.
davsclaus:1483258082:2017-01-01T16:08:02.028+0000:1483258082:2017-01-01T16:08:02.028+0000:CAMEL-10663 is also reporting this and we have a fix there"
0,CAMEL-10460,Bug,Major,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Philippe Godot,0,2,2016-11-09 16:36:28+00:00,2016-11-10 11:03:55+00:00,"I'm trying to play with Spring-boot camel and metrics to expose dashboard. 


Hawtio is a great tools to check what it's going on at runtime but no persistence is done. We would like to persist statistics in prometheus by example. 


I configure camel context with MetricsMessageHistoryFactory as: 


    MetricsMessageHistoryFactory metricsMessageHistoryFactory = new MetricsMessageHistoryFactory(); 
    metricsMessageHistoryFactory.setMetricsRegistry(metricRegistry); 
    camelContext.setMessageHistoryFactory(metricsMessageHistoryFactory); 


where metricRegistry is injected with: 
  /** 



Srping Boot metrics
   */ 
  @Autowired 
  private MetricRegistry metricRegistry; 



Everything is ok until I passed in OnExceptionRoute. It seems that the routeId is set to Null in this case and generate a NPE (line MetricsMessageHistoryFactory:138) in the exception route. Route causing the NPE:


onException(NoAttachmentToProcessException.class) 
        .routeId(RouteIds.TECHNICAL_ERROR_HANDLING.routeId()) 
        .log(LoggingLevel.ERROR,""TECHNICAL ERROR: ${exchangeProperty.CamelExceptionCaught}"")","PhilG:1478680834:2016-11-09T16:40:34.854+0000:1478680834:2016-11-09T16:40:34.854+0000:For my point of view, problem could comes from ProcessorDefinitionHelper which is manage getRouteId which is working only for RouteDefinition object, but exception routes are of type OnExceptionDefinition and then this method return null. 
PhilG:1478681190:2016-11-09T16:46:30.673+0000:1478681190:2016-11-09T16:46:30.673+0000:Uploaded a testU and possible patch
davsclaus:1478698486:2016-11-09T21:34:46.649+0000:1478698486:2016-11-09T21:34:46.649+0000:Its not entirely correct as on exception is not an route and hence why you dont see that. I will work on a different solution where we will grab the last route id from the current exchange instead. 

We can use your unit test, however we cannot accept the patch file with such license header. Can you remove that, or replace it with the ASF license header, and attach the .patch file again?
PhilG:1478734178:2016-11-10T07:29:38.352+0000:1478734178:2016-11-10T07:29:38.352+0000:Thanks Claus. Completly agree with your remark but I have need a quick fix for demo ;).
TestU submitted.

I saw you add a fix version for this ticket. Do you have already an expected date for 2.18.1 ?

davsclaus:1478741614:2016-11-10T09:33:34.023+0000:1478741614:2016-11-10T09:33:34.023+0000:Thanks
PhilG:1478747035:2016-11-10T11:03:55.395+0000:1478747035:2016-11-10T11:03:55.395+0000:Thanks for the quick fix. Excellent. "
0,CAMEL-10459,Improvement,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Onder Sezgin,Tomas Turek,0,4,2016-11-09 10:14:45+00:00,2017-01-13 17:13:58+00:00,"Option batch which should enable support for SQL batch update statements is not working.


Route:



<route>
  <from uri=""direct:batch""/>
  <to uri=""elsql:insert?batch=true""/>
  <to uri=""mock:batch""/>
</route>




ElSql:



@NAME(insert)
    INSERT INTO projects (id, project, license)
    VALUES (:id, :project, :license)","davsclaus:1478658740:2016-11-09T10:32:20.575+0000:1478658740:2016-11-09T10:32:20.575+0000:The batch was not implemented. I have removed the option from the component docs for 2.18.1.
davsclaus:1478658765:2016-11-09T10:32:45.810+0000:1478658765:2016-11-09T10:32:45.810+0000:Contributions is welcome to implement this
kearls:1478737479:2016-11-10T08:24:39.967+0000:1478737479:2016-11-10T08:24:39.967+0000:I'll take a look at this.

githubbot:1484289789:2017-01-13T14:43:09.910+0000:1484289789:2017-01-13T14:43:09.910+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1399

    CAMEL-10459 - batch option implementation

    simple implementation

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-10459

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1399.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1399
    
----
commit c8fbd006764c0c52c91ba29cca3d1397406a4413
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-01-13T14:39:40Z

    CAMEL-10459 - batch option implementation
    
    simple implementation

----

githubbot:1484298746:2017-01-13T17:12:26.460+0000:1484298746:2017-01-13T17:12:26.460+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1399

davsclaus:1484298838:2017-01-13T17:13:58.777+0000:1484298838:2017-01-13T17:13:58.777+0000:Thanks for the PR"
0,CAMEL-10458,Task,Major,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-08 19:01:20+00:00,2016-11-09 12:57:09+00:00,"A new version is out
https://spring.io/blog/2016/11/08/spring-boot-1-4-2-available-now",davsclaus:1478602974:2016-11-08T19:02:54.195+0000:1478602974:2016-11-08T19:02:54.195+0000:Also upgrade Spring Framework and Spring Integration as there is new version of those
0,CAMEL-10457,Task,Major,2.18.1,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-08 18:45:15+00:00,2016-11-08 18:53:48+00:00,"[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:10 h
[INFO] Finished at: 2016-11-08T18:29:26+00:00
[INFO] Final Memory: 1469M/2777M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:2.10.3:jar (attach-javadocs) on project camel-jms-starter: MavenReportException: Error while generating Javadoc:
[ERROR] Exit code: 1 - /home/jenkins/jenkins-slave/workspace/Camel.2.18.x.notest/components-starter/camel-jms-starter/src/main/java/org/apache/camel/component/jms/springboot/JmsComponentConfiguration.java:1479: error: unmappable character for encoding UTF-8
[ERROR] * a route on the other queue will send it?s response directly back to
[ERROR] ^
[ERROR] 
[ERROR] Command line was: /usr/local/asfpackages/java/jdk1.8.0_102/jre/../bin/javadoc @options @packages
[ERROR] 
[ERROR] Refer to the generated Javadoc files in '/home/jenkins/jenkins-slave/workspace/Camel.2.18.x.notest/components-starter/camel-jms-starter/target/apidocs' dir.
[ERROR] -> [Help 1]
[ERROR] 


From CI build #3
https://builds.apache.org/job/Camel.2.18.x.notest/3/console",
0,CAMEL-10456,Improvement,Major,2.18.0,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Christoph Läubrich,0,2,2016-11-08 18:36:33+00:00,2019-08-06 09:02:54+00:00,"Camel leaks ThreadContextClassLoader instances at least in the following place:


camel-core: https://github.com/apache/camel/blob/4f9448d83cc21a348f92cca961907b0f72d9db79/camel-core/src/main/java/org/apache/camel/util/ObjectHelper.java#L1913


As mentioned in the JavaDoc of Thread.getContextClassLoader() returning ""null indicating the system class loader (or, failing that, the bootstrap class loader)"", se same applies to Thread.setContextClassLoader(...)


The code only reset the TCCL if the returned value from Thread.currentThread().getContextClassLoader() was != null. So if in a thread without a TCCL set (and thus returning null) these methods set a new CCL but later do not reset these to the original null value.


This leads to Threads (e.g. when taking reused from a pool) having a classloader that will never gets reset and thus can't be garbage collected or even lead to strange behaviour because if other code that uses the TCCL-mechanism can try to load classes or resources from this loader later on.


I found that https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsProducer.java#L85 uses a similar pattern, only resetting the TCCL if the new TCCL != null so maybe the code in ObjectHelper was meant to check for classloader != null instead of tccl !=null


The fix should also include making sure this pattern is not used in other camel-components or even to use the ObjectHelper Method consistently, currently it seems may components implement their owh TCCL-handling.","davsclaus:1478659173:2016-11-09T10:39:33.098+0000:1478659173:2016-11-09T10:39:33.098+0000:You are welcome to work on a patch
davsclaus:1478659272:2016-11-09T10:41:12.641+0000:1478659272:2016-11-09T10:41:12.641+0000:This TCCL pattern is commonly used, and we need to ensure it wont break behavior in existing app servers etc.

What runtime do you use and see a problem with?
laeubi:1478743498:2016-11-10T10:04:58.727+0000:1478743498:2016-11-10T10:04:58.727+0000:The pattern in Object-Helper assumes that the ttcl of a thead is never null, that is the problem (why this was changed from bug to imrpovement?) the pattern itself is not a problem.
We see this in Karaf+Camel+Blueprint using a CXF component. Most of the web-qtp-threads are infected by a BundleDelegationClassloader that referneces a bundle that was previously uninstalled. So now all attempts to use the tccl in such a thread (it seems CXF tries to find Serviceloaders) are resulting in a RuntimeException because the findResource method throw an IllegalStateException: Bundle uninstalled.
This can be fixed by restarting the container until the bundle that is left in the TCCL is uninstalled and reinstalled again. Beside this it prevents the old Bundle (and its classes) from beeing garbage-collected.

I created a test-case that shows the problem:
{code}public class TCCLTest {

    private final ExecutorService executor = Executors.newFixedThreadPool(1, new ThreadFactory() {

                                               @Override
                                               public Thread newThread(Runnable r) {
                                                   Thread thread = new Thread(r);
                                                   //Explicitly set it to null so it does not use the one from the parent thread
                                                   thread.setContextClassLoader(null);
                                                   return thread;
                                               }
                                           });

    private final class MyTestClassLoaderExtension extends ClassLoader {
    }

    @Test
    public void testResetTCCL() throws Exception {
        final Callable<ClassLoader> tccfetcher = new Callable<ClassLoader>() {

            @Override
            public ClassLoader call() throws Exception {
                return Thread.currentThread().getContextClassLoader();
            }
        };
        final MyTestClassLoaderExtension classloader1 = new MyTestClassLoaderExtension();
        Assert.assertNull(""TCCL was not null initially"", executor.submit(tccfetcher).get());
        ClassLoader resultOfObjectHelper = executor.submit(new Callable<ClassLoader>() {

            @Override
            public ClassLoader call() throws Exception {
                return (ClassLoader) ObjectHelper.callWithTCCL(tccfetcher, classloader1);
            }

        }).get();
        Assert.assertEquals(""TCCL was not the one given to ObjectHelper!"", classloader1, resultOfObjectHelper);
        ClassLoader classLoaderAfterObjecthelperCallInThreadPool = executor.submit(tccfetcher).get();
        Assert.assertNull(""TCCL was not reset to null but is now "" + classLoaderAfterObjecthelperCallInThreadPool, classLoaderAfterObjecthelperCallInThreadPool);
    }
}
{code}

Proposed patch:
 {code}/**
     * Calling the Callable with the setting of TCCL with a given classloader.
     * 
     * @param call
     *            the Callable instance
     * @param classloader
     *            the class loader
     * @return the result of Callable return
     */
    public static Object callWithTCCL(Callable<?> call, ClassLoader classloader) throws Exception {
        ClassLoader tccl = Thread.currentThread().getContextClassLoader();
        try {
            if (classloader != null) {
                Thread.currentThread().setContextClassLoader(classloader);
            }
            return call.call();
        } finally {
            if (classloader != null) { /* old code:  if (tccl != null) { */
                Thread.currentThread().setContextClassLoader(tccl);
            }
        }
    }{code}Since it is not clear what pice of code has leaked the TCCL (I just fund this bug in ObjectHelper yet that seems to be related Exchanges) it might be good to check if other camel code can use the ObjectHelper (if fixed) to prevent similar bugs elsewhere (that might be a seperate improvement).

Beside this, the code in ObjectHelper can be made generic to prevent needs for casting like this:
{code} public static <T> T callWithTCCL(Callable<T> call, ClassLoader classloader) throws Exception {{code}and{code} public static <T> T callWithTCCL(Callable<T> call, Exchange exchange) throws Exception {{code}
    
davsclaus:1479813960:2016-11-22T19:26:00.769+0000:1479813960:2016-11-22T19:26:00.769+0000:Maybe you can work on a patch / github PR with the code changes?
davsclaus:1481163972:2016-12-08T10:26:12.669+0000:1481163972:2016-12-08T10:26:12.669+0000:Are you able to work on a patch file or github PR
laeubi:1481164514:2016-12-08T10:35:14.216+0000:1481164514:2016-12-08T10:35:14.216+0000:I can try to prepare a PR on Github."
0,CAMEL-10455,Bug,Major,2.18.1,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,3,2016-11-08 15:51:27+00:00,2016-11-08 17:20:23+00:00,"Cannot build 2.18.x branch due


[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17:28 min
[INFO] Finished at: 2016-11-08T15:36:48+00:00
[INFO] Final Memory: 1188M/2645M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal on project camel-chronicle: Could not resolve dependencies for project org.apache.camel:camel-chronicle:jar:2.18.1-SNAPSHOT: Failed to collect dependencies at net.openhft:chronicle-engine:jar:1.13.10 -> net.openhft:chronicle-network:jar:1.7.2 -> net.openhft:chronicle-wire:jar:1.7.15 -> net.openhft:chronicle-bytes:jar:1.7.18: Failed to read artifact descriptor for net.openhft:chronicle-bytes:jar:1.7.18: Failure to find net.openhft:chronicle-bom:pom:1.13.30-SNAPSHOT in http://repository.apache.org/snapshots was cached in the local repository, resolution will not be reattempted until the update interval of Nexus has elapsed or updates are forced -> [Help 1]


Sadly there is indeed SNAPSHOT in that pom.xml file. So we need to revert back to older working version.","davsclaus:1478592024:2016-11-08T16:00:24.496+0000:1478592024:2016-11-08T16:00:24.496+0000:Ah darn this library breaks its api in patch releases - we should consider removing it until it works!
lb:1478592140:2016-11-08T16:02:20.710+0000:1478592140:2016-11-08T16:02:20.710+0000:Would you like me to have a look ?
acosentino:1478592313:2016-11-08T16:05:13.609+0000:1478592313:2016-11-08T16:05:13.609+0000:It's true:

http://search.maven.org/#artifactdetails%7Cnet.openhft%7Cchronicle-bytes%7C1.7.18%7Cbundle

What is weird is that 1.13.32 has been released..
davsclaus:1478592361:2016-11-08T16:06:01.877+0000:1478592361:2016-11-08T16:06:01.877+0000:I think this PR helped/fixed it
https://github.com/apache/camel/commit/36cb41d464522686d514cdce8d59ec3dce886064
davsclaus:1478592390:2016-11-08T16:06:30.838+0000:1478592390:2016-11-08T16:06:30.838+0000:A CI job builds 2.18.x branch which will fail if there is still problem
https://builds.apache.org/view/A-D/view/Camel/job/Camel.2.18.x.notest/3/"
0,CAMEL-10454,Bug,Minor,None,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Andrea Cosentino,Boris Treukhov,0,6,2016-11-08 15:04:15+00:00,2016-11-16 01:27:06+00:00,"Current implementation of IdempotentConsumer.java has very strange check on whether IdempotentRepository contains the key - if it's ExchangeIdempotentRepository then the result of ""contains()"" check is not inverted(i.e. there is no NOT operator), while for other types of IdempotentRepository it IS inverted with ""!"".


 // check if we already have the key
                if (idempotentRepository instanceof ExchangeIdempotentRepository) 

{
                    newKey = ((ExchangeIdempotentRepository<String>) idempotentRepository).contains(exchange, messageId);
                }

 else 

{
                    newKey = !idempotentRepository.contains(messageId);
                }","davsclaus:1478659435:2016-11-09T10:43:55.059+0000:1478659435:2016-11-09T10:43:55.059+0000:Yes that looks like a bug, you are welcome to provide a PR or patch
http://camel.apache.org/contributing
githubbot:1479167118:2016-11-15T07:45:18.428+0000:1479167118:2016-11-15T07:45:18.428+0000:Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/1271

davsclaus:1479217717:2016-11-15T21:48:37.153+0000:1479217717:2016-11-15T21:48:37.153+0000:Has this been backported to all the branches? If so please resolve this ticket.
acosentino:1479217859:2016-11-15T21:50:59.271+0000:1479217859:2016-11-15T21:50:59.271+0000:Sure. I was out today :-)
njiang:1479230811:2016-11-16T01:26:51.703+0000:1479230811:2016-11-16T01:26:51.703+0000:The patch was merged into camel master, camel-2.18.x and camel-2.17.x."
0,CAMEL-10453,Bug,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Andrea Cosentino,Tomas Turek,0,2,2016-11-08 14:39:30+00:00,2016-11-16 09:45:19+00:00,"Camel ElSql should store number of rows updated for update operation into CamelSqlUpdateCount header.


Route:



<route>
  <from uri=""direct:updateLicense""/>
  <to uri=""elsql:updateLicense""/>
  <to uri=""mock:updateLicense""/>
</route>




ElSQL



@NAME(updateLicense)
    UPDATE projects
    SET license = :lic
    WHERE id = :id","davsclaus:1478589606:2016-11-08T15:20:06.254+0000:1478589606:2016-11-08T15:20:06.254+0000:Thanks are you working on a PR
davsclaus:1478589650:2016-11-08T15:20:50.319+0000:1478589650:2016-11-08T15:20:50.319+0000:Also mind camel-elsql reuses camel-sql so maybe there is something wrong there too?
tturek:1478658480:2016-11-09T10:28:00.641+0000:1478658480:2016-11-09T10:28:00.641+0000:This problem exists only in the camel-elsql component because this component does not reuse {{SqlProducer}} to implement {{ElSqlProducer}}. Which should be a source of the problem because I discover another bug in {{ElSqlProducer}} [CAMEL-10459|https://issues.apache.org/jira/browse/CAMEL-10459]."
0,CAMEL-10452,Improvement,Minor,None,2.22.0,"
None
",Resolved,Implemented,2.22.0,Zoran Regvart,Luca Burgazzoli,0,3,2016-11-08 14:30:38+00:00,2018-06-04 10:16:03+00:00,"As today it is not possible to run a query like SELECT * from but one is forced to list all the field he want.


It would be nice to auto generate a statement using SObject meta data so one can write:


from(""salesforce:stream?SObjectName=Case&SObjectQueryFromName=true"")


to get all the fields the SObjectName supports.


dhirajsb what do you think ?","davsclaus:1479777859:2016-11-22T09:24:19.124+0000:1479777859:2016-11-22T09:24:19.124+0000:So this is to get all the Case fields?
lb:1479779517:2016-11-22T09:51:57.725+0000:1479779517:2016-11-22T09:51:57.725+0000:yes
davsclaus:1479779736:2016-11-22T09:55:36.758+0000:1479779736:2016-11-22T09:55:36.758+0000:Yeah sound like a good idea to me. Is there a better name for this kind of option? SObjectSelectAll=true or something?
davsclaus:1479779792:2016-11-22T09:56:32.022+0000:1479779792:2016-11-22T09:56:32.022+0000:[~zregvart] one more about salesforce if you keep having fun in this code
davsclaus:1479779887:2016-11-22T09:58:07.011+0000:1479779887:2016-11-22T09:58:07.011+0000:[~zregvart] I gave your user karma to self assign tickets in JIRA
lb:1479780266:2016-11-22T10:04:26.734+0000:1479780266:2016-11-22T10:04:26.734+0000:Yea, naming is my best weakness ;) 
zregvart:1480231172:2016-11-27T15:19:32.922+0000:1480231172:2016-11-27T15:19:32.922+0000:The Salesforce does not support selecting all fields using wildcard character so this would require metadata on the fields one SObject contains. One way to get those is by using reflection. I'm thinking that the Salesforce component could use a more _formal_ way of getting metadata, like metadata in properties file or annotation on object -- all of which could be generated by the salesforce-maven-plugin. I think there is a need for this, especially when the API requires the use of plural forms (such as composite API).
lb:1480294470:2016-11-28T08:54:30.475+0000:1480294470:2016-11-28T08:54:30.475+0000:Another option is to generate such ""query"" while generating the DTO (by maven)
I also found http://sfdcbeginner.com/select-all-fields-in-soql.html, do not know if it is applicable here.

zregvart:1480478749:2016-11-30T12:05:49.033+0000:1480478749:2016-11-30T12:05:49.033+0000:I was thinking about metadata supplied by the user if the DTO classes were hand coded, and also an option to include (via annotations or properties) metadata in the generated DTO classes by the Maven plugin.

The example in that blog post is in Apex programming language, very similar to Java, so those methods are only available when run on Salesforce :(
zregvart:1480512192:2016-11-30T21:23:12.087+0000:1480512192:2016-11-30T21:23:12.087+0000:So how about [this approach|https://github.com/zregvart/camel/commit/68bbef8fbb76f5a317e55a80a6d462da8e8002ee](github.com) for metadata. Basically two ways of specifying metadata: annotation and properties file, annotation beats the property file. Really simple, but pays the way for this functionality.
lb:1480545319:2016-12-01T06:35:19.621+0000:1480545319:2016-12-01T06:35:19.621+0000:So then you can use such annotations field to simulate a select * ?
zregvart:1480554993:2016-12-01T09:16:33.001+0000:1480554993:2016-12-01T09:16:33.001+0000:Yes, the metadata would allow the implementation of the REST call to perform SELECT *, as it would be aware of all the fields SObject has.
zregvart:1491397580:2017-04-05T21:06:20.098+0000:1491397580:2017-04-05T21:06:20.098+0000:[~lb] do you think this is needed in 2.19 or can it wait for 2.20?
zregvart:1528078563:2018-06-04T10:16:03.317+0000:1528078563:2018-06-04T10:16:03.317+0000:Added {{QueryHelper}} to create SOQL that simulates {{SELECT *}} type of query use:

{code:java}
String selectAll = QueryHelper.queryToFetchAllFieldsOf(new Account());
{code}

And use that query when fetching data via SOQL endpoints ({{salesforce:query}}, {{salesforce:createBatchQuery}} or in composite API)."
0,CAMEL-10451,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Tomohisa Igarashi,0,2,2016-11-08 11:14:55+00:00,2023-03-20 02:54:07+00:00,"undertow consumer should handle multipart request, the file parts should be mapped into attachment like camel-jetty is doing.","githubbot:1478599071:2016-11-08T17:57:51.825+0000:1478599071:2016-11-08T17:57:51.825+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1256

    CAMEL-10451 camel-undertow - Add multipart request support

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10451

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1256.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1256
    
----
commit e77fcc244e7a28f0155ec459c6c70825cd904a77
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-11-08T16:29:53Z

    CAMEL-10451 camel-undertow - Add multipart request support

----

githubbot:1478652823:2016-11-09T08:53:43.856+0000:1478652823:2016-11-09T08:53:43.856+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1256
"
0,CAMEL-10450,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-11-07 21:57:23+00:00,2016-11-07 23:28:35+00:00,A groovy function is a closure and Camel calls it that causes it to return its toString representation instead of the call.,
0,CAMEL-10449,Bug,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",John Poth,John Poth,0,3,2016-11-07 14:28:40+00:00,2016-11-07 19:25:43+00:00,"As of CXF-6732, CXF will by default always set the SoapAction header with the value found at key SoapBindingConstants.SOAP_ACTION. See comment for more details. Workaround can be either adding a custom CXF OutInterceptor or use a different Camel/CXF binding.","githubbot:1478500338:2016-11-07T14:32:18.477+0000:1478500338:2016-11-07T14:32:18.477+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1254

    CAMEL-10449 - Set CXF SoapAction header correctly

    https://issues.apache.org/jira/browse/CAMEL-10449

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10449

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1254.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1254
    
----
commit 3d1541d100a95c3fba12e901b1272489f0e5f30b
Author: jpoth <poth.john@gmail.com>
Date:   2016-11-07T14:30:54Z

    CAMEL-10449 - Set CXF SoapAction header correctly

----

davsclaus:1478517926:2016-11-07T19:25:26.544+0000:1478517926:2016-11-07T19:25:26.544+0000:Thanks for the PR
githubbot:1478517943:2016-11-07T19:25:43.658+0000:1478517943:2016-11-07T19:25:43.658+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1254
"
0,CAMEL-10448,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-11-07 08:46:22+00:00,2016-11-07 09:28:30+00:00,"Camel readlock strategy in cluster
==================================


Hi Claus,
We are trying to move to cluster with Apache Camel. So far we had it on one node and worked well.


One node: I have readlock strategy set to 'changed' which keeps track of file changes with camelLock file and only when the file has finished downloading, it will be picked up for processing. But camel readlock strategy 'changed' is discouraged in clustering. According to the camel documentation 'idempotent' is recommended. This is what happens when I am testing with 5GB file.


Two nodes: I have readlock strategy set to 'idempotent' which distributes files to one of the nodes but camel starts processing the file even before the file has finished downloading.


Is there a way to stop camel from processing even before file has downloaded when readlock strategy is idempotent?


Thanks. 


-------------------


We should allow to use idempontent-changed and idempontent-rename as options as well so its a combination of the two of them.


Then it should acquire idempotent first, and then try changed or rename afterwards.",
0,CAMEL-10447,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,Tomohisa Igarashi,0,4,2016-11-07 02:49:41+00:00,2022-11-09 12:00:47+00:00,"Original proposal is available here:
https://github.com/kcbabo/sandbox/blob/master/camel-metadata.md


We'd like to propose adding contract based type awareness on the Camel Message Exchange. It introduces following benefits to Camel users:



Static evaluation and validation of data types and interactions in an application.
Runtime evaluation of data types and interactions
The ability to start with a weak/dynamically typed application and move to a statically typed application
Support for declarative transformation / automatic type conversion
Support for declarative validation of data types



Let's see the declarative transformation example:



from(""direct:abc"")
        .inputType(""java:org.example.Order"")
    .to(""direct:d"")
        .inputType(""xml:{org.example}xmlOrder"")
        .outputType(""urn:acme:orderAck"")
    .to(""direct:e"")




Instead of specifying transform().marshal() programmatically in the route, above declares data type contract of the endpoints. This example means that the input message should be transformed from java:org.example.Order to xml:{org.example}xmlOrder before it is sent to direct:d from direct:abc.


Once we add this feature, we can even validate if required transformer is declared along the data type by some maven plugin or IDE at design time.


The most important thing is that this feature is completely optional, so it doesn't make any effect on existing Camel applications at all unless type declaration is explicitly added.


We've been discussing about this here in camel-dev:
http://camel.465427.n5.nabble.com/Adding-type-awareness-in-Camel-route-td5787621.html","githubbot:1478491279:2016-11-07T12:01:19.476+0000:1478491279:2016-11-07T12:01:19.476+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1252

    CAMEL-10447 Add contract based type awareness and transformer which l…

    …everages the type metadata
    
    https://issues.apache.org/jira/browse/CAMEL-10447

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10447

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1252.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1252
    
----
commit a40b8326a04699a5f74d475478ba3d6f6b1fa698
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-07-15T13:41:04Z

    CAMEL-10447 Add contract based type awareness and transformer which leverages the type metadata

----

githubbot:1479952384:2016-11-24T09:53:04.172+0000:1479952384:2016-11-24T09:53:04.172+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1252

githubbot:1479963098:2016-11-24T12:51:38.483+0000:1479963098:2016-11-24T12:51:38.483+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1306

    CAMEL-10447 Split ContractAdvice#doTransform() into smaller methods

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10447-split-transformer-method

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1306.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1306
    
----
commit 108993099375c4baae3287820dfe87681aceee1c
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-11-24T09:47:00Z

    CAMEL-10447 Split ContractAdvice#doTransform() into smaller methods

----

githubbot:1480003314:2016-11-25T00:01:54.749+0000:1480003314:2016-11-25T00:01:54.749+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1306

githubbot:1480040683:2016-11-25T10:24:43.298+0000:1480040683:2016-11-25T10:24:43.298+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1312

    CAMEL-10447 Added Transformer adoc

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10447-doc

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1312.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1312
    
----
commit b06189fc4b8061e96cb3773e33e0000db1bdc989
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-11-25T10:22:43Z

    CAMEL-10447 Added Transformer adoc

----

githubbot:1480041503:2016-11-25T10:38:23.341+0000:1480041503:2016-11-25T10:38:23.341+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1312
"
0,CAMEL-10446,Improvement,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Tadayoshi Sato,0,4,2016-11-05 12:33:49+00:00,2016-11-07 23:52:10+00:00,"In the current codebase of camel-cxf and camel-cxf-transport, the header mapping logic between CXF and Camel messages is scattered around DefaultCxfRsBinding, CxfHeaderHelper, and other classes. It should be consolidated into a single place, e.g. CxfHeaderHelper, as much as possible.


I'd like to call it a ""bug"" because due to this lack of unified header mappings I observe some CXF-specific headers accidentally flow into the Camel world and vice versa.","njiang:1478458324:2016-11-07T02:52:04.098+0000:1478458324:2016-11-07T02:52:04.098+0000:Hi Tadayoshi,

I totally agree with you. The message mapping code is rotten we need to do some clean up :)

Willem

tadayosi:1478458911:2016-11-07T03:01:51.960+0000:1478458911:2016-11-07T03:01:51.960+0000:Thanks, Willem!

I'm working on pull req for a refactoring.
githubbot:1478496931:2016-11-07T13:35:31.776+0000:1478496931:2016-11-07T13:35:31.776+0000:GitHub user tadayosi opened a pull request:

    https://github.com/apache/camel/pull/1253

    CAMEL-10446 - Need to consolidate header mapping logic between Camel and CXF messages

    https://issues.apache.org/jira/browse/CAMEL-10446
    
    My initial attempt for the refactoring: It moves all the header mapping logic in `DefaultCxfRsBinding` into `CxfHeaderHelper` including the `camelToCxfHeaderMap` and `cxfToCamelHeaderMap` fields. It also introduces Java 8 API and lambdas so that the code looks clearer. `CxfHeaderHelperTest` is enhanced as well in order to make sure Camel headers are not tainted with CXF-specific headers and vice versa.
    
    There is still room for refactoring, however: both `DefaultCxfBinding` and `DefaultCxfRsBinding` still have a bit of header mapping logic yet!  I may pursue another pull req for the refactoring.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tadayosi/camel CAMEL-10446

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1253.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1253
    
----
commit 6041d9c897d15ee7e820556c6d020c5d306d87eb
Author: Tadayoshi Sato <sato.tadayoshi@gmail.com>
Date:   2016-11-07T13:15:20Z

    CAMEL-10446 - Need to consolidate header mapping logic between Camel and CXF messages

----

davsclaus:1478517502:2016-11-07T19:18:22.101+0000:1478517502:2016-11-07T19:18:22.101+0000:Thanks for the PR
githubbot:1478533930:2016-11-07T23:52:10.377+0000:1478533930:2016-11-07T23:52:10.377+0000:Github user tadayosi closed the pull request at:

    https://github.com/apache/camel/pull/1253
"
0,CAMEL-10445,Task,Major,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-11-05 12:07:44+00:00,2016-11-07 09:50:18+00:00,No Desc,
0,CAMEL-10444,Improvement,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Andrea Cosentino,Nick Busy,0,3,2016-11-03 12:40:58+00:00,2016-12-22 07:42:07+00:00,"Since release 2.18 MongoDB component does not return a header with key CamelMongoDbRecordsAffected (MongoDbConstants.RECORDS_AFFECTED constant) after completing operations update and delete. This is a breaking change but can easily be patched in MongoDbProducer class.
It's probably more a bug report rather than feature request depending on if the change was by design.","davsclaus:1478246153:2016-11-04T15:55:53.578+0000:1478246153:2016-11-04T15:55:53.578+0000:A github PR is welcome
http://camel.apache.org/contributing
githubbot:1478319214:2016-11-05T12:13:34.616+0000:1478319214:2016-11-05T12:13:34.616+0000:GitHub user nickbusy opened a pull request:

    https://github.com/apache/camel/pull/1250

    CAMEL-10444: return header CamelMongoDbRecordsAffected

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nickbusy/camel CAMEL-10444

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1250.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1250
    
----
commit 191f1b93f8851a4f97b9988e6f546a90d732a3d1
Author: Nick Busy <nbusy@enfoll.com>
Date:   2016-11-05T05:30:22Z

    CAMEL-10444: return header CamelMongoDbRecordsAffected from update and remove operations

----

githubbot:1478489345:2016-11-07T11:29:05.590+0000:1478489345:2016-11-07T11:29:05.590+0000:Github user nickbusy closed the pull request at:

    https://github.com/apache/camel/pull/1250
"
0,CAMEL-10443,Bug,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Nick Busy,0,3,2016-11-03 12:24:55+00:00,2016-11-07 11:29:23+00:00,"When using Camel MongoDB component with ""operation=findById"" and [_id] field is happened to be a standard ObjectId(), it doesn't work anymore in v.2.18 (worked 2.17.3 and before). 
Basically, to test you'd need to send org.bson.types.ObjectId in the message body but it never finds a document. 
The problem lies in MongoDbProducer.createDoFindById(). 
Can be fixed by replacing line: 
                String id = exchange1.getIn().getMandatoryBody(String.class); 
with 
                Object id = exchange1.getIn().getMandatoryBody();","davsclaus:1478246126:2016-11-04T15:55:26.056+0000:1478246126:2016-11-04T15:55:26.056+0000:A github PR is welcome
http://camel.apache.org/contributing
githubbot:1478322368:2016-11-05T13:06:08.379+0000:1478322368:2016-11-05T13:06:08.379+0000:GitHub user nickbusy opened a pull request:

    https://github.com/apache/camel/pull/1251

    CAMEL-10443: fixing findById with ObjectId

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nickbusy/camel CAMEL-10443

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1251.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1251
    
----
commit 8f9ab2dbab7ec6296472f6516b71e1b1af6f1d9b
Author: Nick Busy <nbusy@enfoll.com>
Date:   2016-11-05T13:04:05Z

    CAMEL-10443: fixing findById with ObjectId

----

githubbot:1478489363:2016-11-07T11:29:23.380+0000:1478489363:2016-11-07T11:29:23.380+0000:Github user nickbusy closed the pull request at:

    https://github.com/apache/camel/pull/1251
"
0,CAMEL-10442,Bug,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Edoardo Causarano,0,2,2016-11-03 10:36:51+00:00,2016-11-04 16:45:35+00:00,"When defining a route with two (or more) parallel pipelines, it seems that the exchange is being broadcast to all steps (including the intermediate) of the pipelines, rather than just their heads. Whether or not this unintuitive - if not incorrect - behavior occurs when using shorthand syntaxes in the route definition (see https://gist.github.com/ecausarano/4b66294464741b9f626890b29ea0aec2)


Working route: 
.pipeline().to(""A"").to(""B"").end()
.pipeline().to(""C"").to(""D"").end()


10:41:12.644 [main] INFO route1 - after direct:start body=START
10:41:12.666 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> A Exchange[ID-Spitfire-local-50181-1477993271722-0-3]
10:41:12.667 [main] DEBUG com.esc.test.MulticastPipelinesTest - A got in=START
10:41:12.667 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> B Exchange[ID-Spitfire-local-50181-1477993271722-0-3]
10:41:12.667 [main] DEBUG com.esc.test.MulticastPipelinesTest - B got in=A
10:41:12.670 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> C Exchange[ID-Spitfire-local-50181-1477993271722-0-4]
10:41:12.671 [main] DEBUG com.esc.test.MulticastPipelinesTest - C got in=START
10:41:12.671 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> D Exchange[ID-Spitfire-local-50181-1477993271722-0-4]
10:41:12.671 [main] DEBUG com.esc.test.MulticastPipelinesTest - D got in=C


Faulty routes:
.pipeline(""A"", ""B"")
.pipeline(""C"", ""D”)
or					
.to(""A"", ""B"")
.to(""C"", ""D"")


10:43:46.383 [main] INFO route1 - after direct:start body=START
10:43:46.389 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> A Exchange[ID-Spitfire-local-50316-1477993425625-0-3]
10:43:46.389 [main] DEBUG com.esc.test.MulticastPipelinesTest - A got in=START
10:43:46.390 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> B Exchange[ID-Spitfire-local-50316-1477993425625-0-4]
10:43:46.390 [main] DEBUG com.esc.test.MulticastPipelinesTest - B got in=START
10:43:46.391 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> C Exchange[ID-Spitfire-local-50316-1477993425625-0-5]
10:43:46.391 [main] DEBUG com.esc.test.MulticastPipelinesTest - C got in=START
10:43:46.391 [main] DEBUG org.apache.camel.processor.SendProcessor - >>>> D Exchange[ID-Spitfire-local-50316-1477993425625-0-6]
10:43:46.391 [main] DEBUG com.esc.test.MulticastPipelinesTest - D got in=START",davsclaus:1478245744:2016-11-04T15:49:04.528+0000:1478245744:2016-11-04T15:49:04.528+0000:This seems to be an issue in the Java DSL with the pipeline when using it with and without the to style as you do. 
0,CAMEL-10441,Bug,Major,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Willem Jiang,Willem Jiang,0,1,2016-11-03 09:51:51+00:00,2016-11-03 11:13:06+00:00,"Here is the user question about the workgroup setting.


http://camel.465427.n5.nabble.com/netty4-http-producer-workerGroup-and-producerPool-tp5789681.html


We need to update the document for this option.",njiang:1478142774:2016-11-03T11:12:54.955+0000:1478142774:2016-11-03T11:12:54.955+0000:Merged the patch into camel-2.18.x branch.
0,CAMEL-10440,Bug,Minor,"2.17.3, 2.18.0",,"
None
",Resolved,Won't Fix,None,Unassigned,Klaus Johansen,2,5,2016-11-03 09:49:09+00:00,2017-09-21 10:58:16+00:00,"When the FTP consumer is hit by an error during download of a file (eg. socket timeout or because of missing read permission on the file) a GenericFileOperationFailedException is thrown. Unfortunately is impossible to recover from this error using redelivery because the message is forced onto the deadletterchannel (marked exhausted?)


When using consumer.bridgeErrorHandler=true redelivery works fine when the errors happens during the polling phase (eg. connection timeouts and missing directories).  


When the error goes directly to the deadletterchannel the rollback method of the PollingConsumerPollStrategy is never called. This makes it difficult to access the consumer and force a disconnect in order to recover from the error situtation (like it is done by RemoteFilePollingConsumerPollStrategy). 


[DefaultQuartzScheduler-camel-1_Worker-1] INFO org.apache.camel.example.ftp.ConsumerPollStrategy - Poll starting for endpoint: ftp://localhost:21/testdir?autoCreate=false&consumer.bridgeErrorHandler=true&fil...
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.component.file.remote.FtpConsumer - Exception checking connection status: File operation failed: null Connection is not open. Code: 0
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.component.file.remote.FtpConsumer - Not connected/logged in, connecting to: ftp://testuser@localhost:21
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.component.file.remote.FtpConsumer - Connected and logged in to: ftp://testuser@localhost:21
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.component.file.remote.FtpConsumer - Took 0.151 seconds to poll: testdir
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.component.file.remote.FtpConsumer - Total 1 files to consume
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.processor.DeadLetterChannel - Failed delivery for (MessageId: ID-Klauss-MacBook-Pro-2-local-52649-1478165172245-0-2 on ExchangeId: ID-Klauss-MacBook-Pro-2-local-52649-1478165172245-0-3). On delivery attempt: 0 caught: org.apache.camel.component.file.GenericFileOperationFailedException: Cannot retrieve file: RemoteFile[testfile.txt] from: ftp://localhost:21/testdir?autoCreate=false&consumer.bridgeErrorHandler=true&fileName=testfile.txt&password=xxxxxx&pollStrategy=%23try3times&processStrategy=%23myProcessStrategy&scheduler=quartz2&scheduler.cron=15+0%2F1+*+%3F+*+*&throwExceptionOnConnectFailed=true&timeout=5000&username=testuser
org.apache.camel.component.file.GenericFileOperationFailedException: Cannot retrieve file: RemoteFile[testfile.txt] from: ftp://localhost:21/testdir?autoCreate=false&consumer.bridgeErrorHandler=true&fileName=testfile.txt&password=xxxxxx&pollStrategy=%23try3times&processStrategy=%23myProcessStrategy&scheduler=quartz2&scheduler.cron=15+0%2F1+*+%3F+*+*&throwExceptionOnConnectFailed=true&timeout=5000&username=testuser
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:436)
	at org.apache.camel.component.file.remote.RemoteFileConsumer.processExchange(RemoteFileConsumer.java:137)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:227)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:191)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)
	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerJob.execute(QuartzScheduledPollConsumerJob.java:61)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.processor.SendProcessor - >>>> direct://deadletter Exchange[ID-Klauss-MacBook-Pro-2-local-52649-1478165172245-0-3]
[DefaultQuartzScheduler-camel-1_Worker-1] INFO org.apache.camel.processor.interceptor.Tracer - ID-Klauss-MacBook-Pro-2-local-52649-1478165172245-0-3 >>> (route1) from(ftp://localhost:21/testdir?autoCreate=false&consumer.bridgeErrorHandler=true&fileName=testfile.txt&password=testpass&pollStrategy=%23try3times&processStrategy=%23myProcessStrategy&scheduler=quartz2&scheduler.cron=15+0%2F1+*+%3F+*+*&throwExceptionOnConnectFailed=true&timeout=5000&username=testuser) --> log[On dead letter!!] <<< Pattern:InOnly, Headers:

{breadcrumbId=ID-Klauss-MacBook-Pro-2-local-52649-1478165172245-0-2}

, BodyType:String, Body:Error processing file RemoteFile[testfile.txt] due to Cannot retrieve file: RemoteFile[testfile.txt] from: ftp://localhost:21/testdir?autoCreate=false&consumer.bridgeErrorHandler=true&fileName=testfile.txt&password=xxxxxx&pollStrategy=%23try3times&processStrategy=%23myProcessStrategy&scheduler=quartz2&scheduler.cron=15+0%2F1+*+%3F+*+*&throwExceptionOnConnectFailed=true&timeout=5000&username=testuser
[DefaultQuartzScheduler-camel-1_Worker-1] INFO route1 - On dead letter!!
[DefaultQuartzScheduler-camel-1_Worker-1] DEBUG org.apache.camel.processor.Pipeline - Message exchange has failed: so breaking out of pipeline for exchange: Exchange[ID-Klauss-MacBook-Pro-2-local-52649-1478165172245-0-3] Handled by the error handler.
[DefaultQuartzScheduler-camel-1_Worker-1] INFO org.apache.camel.example.ftp.ConsumerPollStrategy - Commiting 1 msgs for endpoint: ftp://localhost:21/testdir?autoCreate=false&consumer.bridgeErrorHandler=true&fil...","Kluggi:1478138226:2016-11-03T09:57:06.758+0000:1478138226:2016-11-03T09:57:06.758+0000:Source files (based on the camel-example-ftp) used to reproduce the errors with Camel 2.18.0.

In order to reproduce the error situation the testfile has to be blocked for download / read on the ftp server. 
Claus Paludan:1480560602:2016-12-01T10:50:02.153+0000:1480560602:2016-12-01T10:50:02.153+0000:Any updates on this?
davsclaus:1480563370:2016-12-01T11:36:10.736+0000:1480563370:2016-12-01T11:36:10.736+0000:No you can contact commercial support if you need help faster
http://camel.apache.org/support.html
lassel:1483059106:2016-12-30T08:51:46.744+0000:1483059106:2016-12-30T08:51:46.744+0000:I made a workaround for this issue. It is not particularly elegant, but it seems to work.

Made as a new Camel example:
https://github.com/lldata/camel/tree/master/examples/camel-example-ftp-errorhandling

I'd like [~davsclaus] comments on the solution. 
How could it be improved? Could Camel be improved so a more elegant solution would be available?

Thanks

Claus.Paludan@bec.dk:1483059222:2016-12-30T08:53:42.071+0000:1483059222:2016-12-30T08:53:42.071+0000:Jeg er på ferie og svarer først mail når jeg er tilbage tirsdag d. 2/1


Kluggi:1483701298:2017-01-06T19:14:58.605+0000:1483701333:2017-01-06T19:15:33.217+0000:Thanks to Lasse Lindgård we now have a functional work around: 

- Use consumer.bridgeErrorHandler=true 
- Apply custom PollingConsumerPollingStrategy: pollStrategy=#pollStrategyBean
- Make the custom PollingConsumerPollingStrategy stateful to record if socket timeout occurred (per endpoint)
- Always clear recorded endpoint state in pollStategy begin() 
- Catch SocketTimeoutException and record the endpoint error state in the pollStategy bean, e.g.
  ** implement Processor interface in pollStrategy and call the process()-method via onException(SocketTimeoutException.class).process(""pollStrategyBean"") )
  ** or
  ** call a method (return true/false) directly from onWhen (provides some flexibility): onException(SocketTimeoutException.class).onWhen(simple(""${bean: pollStrategyBean.markError"")) 
- If an timeout error was recorded a new exception can be thrown in commit() (on exhaustion). This causes rollback() and appropriate disconnect and retry code can be applied.

I tend to believe that such SocketTimeoutExceptions should be handled ""inside"" the FTP consumer. 

Best regards,
Klaus
 
davsclaus:1505962696:2017-09-21T10:58:16.650+0000:1505962696:2017-09-21T10:58:16.650+0000:Redeliveries from error handler is not on the consumer side, its for producer.

You have a custom solution for how you want it on your system.
"
0,CAMEL-10409,Bug,Critical,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Willem Jiang,Vitalii Tymchyshyn,0,4,2016-10-22 14:24:13+00:00,2016-11-16 12:12:11+00:00,"It looks like CAMEL-9040 fix introduced a double release of a netty buffer
 that leads to IllegalReferenceCountException under load:



2016-10-22 10:20:15.442  WARN 6853 --- [ClientTCPWorker] io.netty.util.ReferenceCountUtil         : Failed to release a message: AdvancedLeakAwareByteBuf(PooledUnsafeDirectByteBuf(freed))

io.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1
	at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:111) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.buffer.WrappedByteBuf.release(WrappedByteBuf.java:1029) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.buffer.AdvancedLeakAwareByteBuf.release(AdvancedLeakAwareByteBuf.java:951) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:84) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.ReferenceCountUtil.safeRelease(ReferenceCountUtil.java:109) ~[netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.ChannelOutboundBuffer.remove0(ChannelOutboundBuffer.java:296) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.ChannelOutboundBuffer.failFlushed(ChannelOutboundBuffer.java:621) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:869) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:362) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:823) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1296) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:778) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:759) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.flush(CombinedChannelDuplexHandler.java:530) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.CombinedChannelDuplexHandler.flush(CombinedChannelDuplexHandler.java:355) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.invokeWriteAndFlush(AbstractChannelHandlerContext.java:812) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:824) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:804) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:841) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1032) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:296) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at org.apache.camel.component.netty4.NettyHelper.writeBodyAsync(NettyHelper.java:105) [camel-netty4-2.18.0.jar:2.18.0]
	at org.apache.camel.component.netty4.NettyProducer.processWithConnectedChannel(NettyProducer.java:306) [camel-netty4-2.18.0.jar:2.18.0]
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:642) [camel-netty4-2.18.0.jar:2.18.0]
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:619) [camel-netty4-2.18.0.jar:2.18.0]
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:507) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:486) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:306) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:341) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:627) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873) [netty-all-4.1.5.Final.jar:4.1.5.Final]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_101]





The buffer is release at



	at org.apache.camel.component.netty4.http.NettyHttpProducer$1.onDone(NettyHttpProducer.java:85)
	at org.apache.camel.support.SynchronizationAdapter.onComplete(SynchronizationAdapter.java:35)
	at org.apache.camel.util.UnitOfWorkHelper.doneSynchronizations(UnitOfWorkHelper.java:104)
	at org.apache.camel.impl.DefaultUnitOfWork.done(DefaultUnitOfWork.java:230)
	at org.apache.camel.util.UnitOfWorkHelper.doneUow(UnitOfWorkHelper.java:65)
	at org.apache.camel.impl.DefaultConsumer.doneUoW(DefaultConsumer.java:107)
	at org.apache.camel.component.netty4.handlers.ServerChannelHandler$1.done(ServerChannelHandler.java:149)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:147)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:554)
	at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:86)
	at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:155)
	at org.apache.camel.component.netty4.http.NettyHttpProducer$NettyHttpProducerCallback.done(NettyHttpProducer.java:149)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerCallback.done(NettyProducer.java:548)
	at org.apache.camel.component.netty4.handlers.ClientChannelHandler.channelRead0(ClientChannelHandler.java:205)
	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350)
	at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350)
	at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:435)
	at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:293)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:267)
	at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:250)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:350)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1334)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:372)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:358)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:926)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:129)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:610)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873)
	at java.lang.Thread.run(Thread.java:745)




and 




	at org.apache.camel.component.netty4.NettyHelper.writeBodyAsync(NettyHelper.java:105)
	at org.apache.camel.component.netty4.NettyProducer.processWithConnectedChannel(NettyProducer.java:306)
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:642)
	at org.apache.camel.component.netty4.NettyProducer$ChannelConnectedListener.operationComplete(NettyProducer.java:619)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:507)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:486)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111)
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:306)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:341)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:627)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873)
	at java.lang.Thread.run(Thread.java:745)




Note that refCnt check do not work if buffer is being used by another thread, it's just hiding a problem if it works. I will try to look into it deeper, but I am not sure if I fully understand the buffer allocation / freeing lifecycle in netty yet 


My test routes are:



        from(""timer:load?period=100"")
                .to(""log:client?groupInterval=5000"")
                .to(""netty4-http:http://127.0.0.1:8081/main-service"");
        from(""netty4-http:http://0.0.0.0:8081/main-service"")
                .to(""log:main-service?groupInterval=5000"")
                .to(""netty4-http:http://127.0.0.1:8082/childService1"")
                .to(""netty4-http:http://127.0.0.1:8083/childService2"");
        from(""netty4-http:http://0.0.0.0:8082/childService1"")
                .to(""log:childService1?groupInterval=5000"")
                .delayer(100);
        from(""netty4-http:http://0.0.0.0:8083/childService2"")
                .to(""log:childService2?groupInterval=5000"")
                .delayer(100);","tivv:1477118667:2016-10-22T14:44:27.359+0000:1477118667:2016-10-22T14:44:27.359+0000:Looked a bit into in.
Note that I analyzed request handling only. For response I'd consider removing refCnt check as it does more harm (hiding a problem sometimes)  
My thoughts for request:
 * It needs to be handled in netty4 component, not netty4-http
 * request needs to be release only if it did not make to ""write"" call
 * I can see next options:
 ** Do carefull error handling properly releasing it in case of any code pathes in which request do not make up to write, don't do in synchronization 
 ** Mark message as ""released"" somehow and still do  in synchrnonization adapter. Note that it should work for multiple netty calls in the exchange
 ** Delay body creation until we are ready to send it down

I prefer delay then carefull error handling. I don't really like synchronization approach for request. It's more complicated to handle (with multiple requests) and it holds buffer more than needed.
githubbot:1479070726:2016-11-14T04:58:46.122+0000:1479070726:2016-11-14T04:58:46.122+0000:GitHub user tivv opened a pull request:

    https://github.com/apache/camel/pull/1268

    CAMEL-10409: Prevent double release of request

    Please also merge into 2.18 as it's quite important problem that may lead to buffer corruption (buffer is being incorrectly reused) 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tivv/camel netty-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1268.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1268
    
----
commit 237101e76ad7750450e29fb408f35f962218c9c6
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-11-14T04:51:54Z

    CAMEL-10409
    Double release of netty buffer

commit f36cb53f85692993c39c639556c4a8c540d9501f
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-11-14T04:55:24Z

    CAMEL-10409
    Double release of netty buffer

----

tivv:1479070772:2016-11-14T04:59:32.565+0000:1479070772:2016-11-14T04:59:32.565+0000:I've implemented careful handling in the PR
davsclaus:1479084899:2016-11-14T08:54:59.458+0000:1479084899:2016-11-14T08:54:59.458+0000:Thanks [~tivv]

I wonder if would help with https://issues.apache.org/jira/browse/CAMEL-10301 as well - and see if you can reproduce this with latest code, and possible fix it too ;)
tivv:1479151119:2016-11-15T03:18:39.862+0000:1479151119:2016-11-15T03:18:39.862+0000:I'll see. I also see a low hanging fruit: Server must send ""Connection: close"" when it is going to close connection shortly (e.g. when authentication failed). Otherwise client may try to send another request over the connection being closed. Some of the tests are flacky because of this. I'll make another JIRA and fix if confirmed. 
njiang:1479151390:2016-11-15T03:23:10.741+0000:1479151390:2016-11-15T03:23:10.741+0000:Applied  the patch into camel-2.18.x and master branch with thanks to Vitalii.
njiang:1479157118:2016-11-15T04:58:38.446+0000:1479159534:2016-11-15T05:38:54.895+0000:There were some memory leaks in camel-netty4 unit tests after applied the patch.  
{code}
Failed tests:
  NettyUDPAsyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPMessageLargerThanDefaultBufferSizeTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@73bb1337]
  NettyUDPObjectSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@5eed6dfb, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
  NettyUDPSyncTest>BaseNettyTest.verifyNoLeaks:89 Leaks detected while running tests: [org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85, org.apache.logging.log4j.core.impl.MutableLogEvent@7c96c85]
{code}
I will take a look at it later today.
njiang:1479170808:2016-11-15T08:46:48.419+0000:1479170808:2016-11-15T08:46:48.419+0000:Just found this issue is cause by my old mistake in the DatagramPacketObjectEncoder. 
I just filled a JIRA CAMEL-10480 for it and the quick fix is on the way.
njiang:1479172797:2016-11-15T09:19:57.556+0000:1479172797:2016-11-15T09:19:57.556+0000:Applied the patch into camel master and camel-2.18.x branch with thanks to Vitalii.
githubbot:1479269531:2016-11-16T12:12:11.311+0000:1479269531:2016-11-16T12:12:11.311+0000:Github user tivv closed the pull request at:

    https://github.com/apache/camel/pull/1268
"
0,CAMEL-10408,Improvement,Minor,None,"2.16.5, 2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.16.5, 2.17.4, 2.18.1, 2.19.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-10-21 12:20:03+00:00,2016-10-22 10:35:47+00:00,"If you set for example a DefaultShutdownStrategy with a specific timeout and enqueue some messages on ActiveMQ that you'll consume from a consumer, in case you'll try to suspend the Consumer route and the timeout elapsed, the route will be stopped with a forced shutdown and then the doStop method will be used. In this scenario using resume won't have any effect since the listenerContainer will be null and unable to be restarted.


I'll add just a simple message for this specific case suggesting the user to start the route again to make it works and set the initialized field to false when the doStop is called.","acosentino:1477103718:2016-10-22T10:35:18.302+0000:1477103718:2016-10-22T10:35:18.302+0000:I fixed the problem too. In case of forced shutdown during Suspend operation, the initialized variable must be set to false, this way in the doResume method we should be able to start the listenerContainer again.

https://github.com/apache/camel/commit/cd0c8c2fc70b5434a79af53e147a3e255c78c231"
0,CAMEL-10407,Bug,Minor,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-10-21 10:16:11+00:00,2016-10-21 10:24:32+00:00,No Desc,
0,CAMEL-10406,Bug,Minor,None,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Claus Ibsen,Xavier Fournet,0,2,2016-10-20 22:06:28+00:00,2017-01-25 16:18:17+00:00,"When consuming from a vm: endpoint, the camel context of the consumed exchange may be the wrong one.
The method org.apache.camel.component.seda.SedaConsumer#prepareExchange is expected to set the adequate camel context, but because of the Endpoint caching in org.apache.camel.component.vm.VmComponent#ENDPOINTS the first context that create the endpoint win. In case the first context is the producer one, the route in the consumer may fail when trying to access to some information from the context


Repro case available here: https://github.com/xfournet/camel/blob/CAMEL-10406/camel-core/src/test/java/org/apache/camel/component/vm/VmShouldUseConsumerContext.java


This is related to CAMEL-6746, reverting this code make this test pass but obviously some other vm test failed.",davsclaus:1477742134:2016-10-29T19:55:34.597+0000:1477742134:2016-10-29T19:55:34.597+0000:Thanks for reporting and providing the unit test.
0,CAMEL-10405,Bug,Major,2.18.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,Carl-Philipp Harmant,2,2,2016-10-20 20:31:46+00:00,2016-10-21 15:22:25+00:00,"Hello,


I'm facing an issue with Camel 2.18.0 and Karaf 4.0.7 (& Felix). Here are some config I use:


featuresRepositories = \
 mvn:org.apache.karaf.features/spring/4.0.7/xml/features, \
 mvn:org.apache.karaf.features/standard/4.0.7/xml/features, \
 mvn:org.apache.karaf.features/framework/4.0.7/xml/features, \
 mvn:org.apache.karaf.features/enterprise/4.0.7/xml/features, \
 mvn:org.apache.activemq/activemq-karaf/5.14.0/xml/features-core, \
 mvn:org.apache.camel.karaf/apache-camel/2.18.0/xml/features


And here is the exception:





 2016-10-20 15:12:27,098 
 WARN 
 pool-8-thread-1 
 org.apache.camel.impl.converter.AnnotationTypeConverterLoader 
 Ignoring converter type: org.apache.activemq.camel.converter.ActiveMQMessageConverter as a dependent class could not be found: java.lang.NoClassDefFoundError: org/apache/camel/component/jms/JmsBinding
java.lang.NoClassDefFoundError: org/apache/camel/component/jms/JmsBinding
	at java.lang.Class.getDeclaredMethods0(Native Method)[:1.8.0_60]
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)[:1.8.0_60]
	at java.lang.Class.getDeclaredMethods(Class.java:1975)[:1.8.0_60]
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.loadConverterMethods(AnnotationTypeConverterLoader.java:262)
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader$Loader.load(Activator.java:463)
	at org.apache.camel.impl.osgi.Activator$BundleTypeConverterLoader.load(Activator.java:378)
	at org.apache.camel.core.osgi.OsgiTypeConverter.createRegistry(OsgiTypeConverter.java:225)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getDelegate(OsgiTypeConverter.java:188)
	at org.apache.camel.core.osgi.OsgiTypeConverter.getStatistics(OsgiTypeConverter.java:163)
	at org.apache.camel.impl.DefaultCamelContext.forceLazyInitialization(DefaultCamelContext.java:3750)[84:org.apache.camel.camel-core:2.18.0]
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:3086)[84:org.apache.camel.camel-core:2.18.0]
	at org.apache.camel.impl.DefaultCamelContext.access$000(DefaultCamelContext.java:182)[84:org.apache.camel.camel-core:2.18.0]
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2957)
	at org.apache.camel.impl.DefaultCamelContext$2.call(DefaultCamelContext.java:2953)
	at org.apache.camel.impl.DefaultCamelContext.doWithDefinedClassLoader(DefaultCamelContext.java:2976)[84:org.apache.camel.camel-core:2.18.0]
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:2953)[84:org.apache.camel.camel-core:2.18.0]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:2920)[84:org.apache.camel.camel-core:2.18.0]
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:185)
	at org.apache.camel.blueprint.BlueprintCamelContext.maybeStart(BlueprintCamelContext.java:217)
	at org.apache.camel.blueprint.BlueprintCamelContext.serviceChanged(BlueprintCamelContext.java:155)
	at org.apache.felix.framework.util.EventDispatcher.invokeServiceListenerCallback(EventDispatcher.java:991)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:839)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireServiceEvent(EventDispatcher.java:546)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireServiceEvent(Felix.java:4557)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.registerService(Felix.java:3549)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:348)
	at org.apache.felix.framework.BundleContextImpl.registerService(BundleContextImpl.java:355)
	at org.apache.camel.blueprint.BlueprintCamelContext.init(BlueprintCamelContext.java:105)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_60]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_60]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_60]
	at java.lang.reflect.Method.invoke(Method.java:497)[:1.8.0_60]
	at org.apache.aries.blueprint.utils.ReflectionUtils.invoke(ReflectionUtils.java:299)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BeanRecipe.invoke(BeanRecipe.java:980)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BeanRecipe.runBeanProcInit(BeanRecipe.java:736)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate2(BeanRecipe.java:848)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BeanRecipe.internalCreate(BeanRecipe.java:811)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.di.AbstractRecipe$1.call(AbstractRecipe.java:79)[56:org.apache.aries.blueprint.core:1.6.2]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
	at org.apache.aries.blueprint.di.AbstractRecipe.create(AbstractRecipe.java:88)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintRepository.createInstances(BlueprintRepository.java:255)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintRepository.createAll(BlueprintRepository.java:186)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.instantiateEagerComponents(BlueprintContainerImpl.java:724)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:411)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:276)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:300)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:269)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:265)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:255)[56:org.apache.aries.blueprint.core:1.6.2]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500)[78:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433)[78:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725)[78:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463)[78:org.apache.aries.util:1.1.1]
	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422)[78:org.apache.aries.util:1.1.1]
	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:731)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:486)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4541)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2172)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)[org.apache.felix.framework-5.4.0.jar:]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1286)[8:org.apache.karaf.features.core:4.0.7]
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:846)[8:org.apache.karaf.features.core:4.0.7]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1176)[8:org.apache.karaf.features.core:4.0.7]
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1074)[8:org.apache.karaf.features.core:4.0.7]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_60]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_60]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_60]
Caused by: java.lang.ClassNotFoundException: org.apache.camel.component.jms.JmsBinding not found by org.apache.activemq.activemq-osgi [53]
	at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1574)
	at org.apache.felix.framework.BundleWiringImpl.access$400(BundleWiringImpl.java:79)
	at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2018)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)[:1.8.0_60]
	... 70 more





Any help?
Thanks","davsclaus:1477031663:2016-10-21T14:34:23.441+0000:1477031663:2016-10-21T14:34:23.441+0000:Apache ActiveMQ do not support Camel 2.18 on Karaf. 

ActiveMQ 5.15.0 will very likely support Camel 2.18. You need to use an older version of Camel if you want to run ActiveMQ broker embedded inside Karaf. 
davsclaus:1477031679:2016-10-21T14:34:39.917+0000:1477031679:2016-10-21T14:34:39.917+0000:Also please use mailing list / user forum first to get help
http://camel.apache.org/support.html"
0,CAMEL-10404,Improvement,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Claus Ibsen,0,2,2016-10-20 14:01:03+00:00,2016-11-24 13:22:31+00:00,"The example at
https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot


Is using an older and custom way with the FatJarRoute and whatnot. Instead it should just do like
https://github.com/apache/camel/tree/master/examples/camel-example-spring-boot-starter


Which is standard spring boot style.


After this we can remove the -starter example and just keep the camel-example-spring-boot.


Contributions is welcome
http://camel.apache.org/contributing","dariusx:1477301133:2016-10-24T17:25:33.349+0000:1477301133:2016-10-24T17:25:33.349+0000:I've just been looking at this to see how to use Camel with Spring boot. I will be happy to take a stab at making this change. 
acosentino:1477434305:2016-10-26T06:25:05.710+0000:1477434305:2016-10-26T06:25:05.710+0000:https://github.com/apache/camel/commit/c28ebae32d1961a491970d3624e782a48c8c49ea
https://github.com/apache/camel/commit/ca3607116ccaa90236c39e0584d38d93fd4b9093
https://github.com/apache/camel/commit/163d0246736f22f1b4b8e51bb9f7df9c8aa61050

Thanks!"
0,CAMEL-10403,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-10-20 12:14:59+00:00,2016-10-20 12:24:00+00:00,Jnats supports TLS from a while.,
0,CAMEL-10402,New Feature,Minor,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,2,2016-10-20 11:47:59+00:00,2016-10-20 14:41:12+00:00,As today every endpoint needs its own authentication data but It would be nice to have a way to configure authentications on component level so one could easily create different routes for the same instance,"davsclaus:1476943382:2016-10-20T14:03:02.043+0000:1476943382:2016-10-20T14:03:02.043+0000:You can use
{code}
@Metadata(required = true)
{code}

On the fields in the component so the code generator knows they are required and can mark that in the spring boot metadata and also camel json schema files.
lb:1476943601:2016-10-20T14:06:41.634+0000:1476943684:2016-10-20T14:08:04.173+0000:Should we mark them as required on component and endpoint ? In fact they are used if you do not set them on the endpoint. There should be an ""optional required"" :)
davsclaus:1476945434:2016-10-20T14:37:14.809+0000:1476945434:2016-10-20T14:37:14.809+0000:Ah okay the javadoc said MUST.

Yeah its a special situation where you can configure it either on component or endpoint level.
So I guess we cannot mark them as required.

lb:1476945672:2016-10-20T14:41:12.303+0000:1476945672:2016-10-20T14:41:12.303+0000:Need to fix the java doc then, copy and paste ..."
0,CAMEL-10401,New Feature,Minor,2.18.0,2.19.0,"

chmod
ftp

",Resolved,Fixed,2.19.0,Claus Ibsen,Michael Prankl,0,3,2016-10-19 12:07:35+00:00,2016-10-22 11:25:17+00:00,"Currently, chmod-ing files after storing is only implemented for the sftp producer (see CAMEL-4346).


This should also supported for ftp.
Most FTP servers therefore support the site command ""CHMOD"", eg.


""chmod 777 example_file.txt"".","githubbot:1476851083:2016-10-19T12:24:43.165+0000:1476851083:2016-10-19T12:24:43.165+0000:GitHub user eidottermihi opened a pull request:

    https://github.com/apache/camel/pull/1218

    CAMEL-10401: Support chmod for ftp/ftps

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/eidottermihi/camel ftp-chmod

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1218.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1218
    
----
commit 74eeb5bc1ec569e2650289224c22b7ee818735dc
Author: eidottermihi <eidottermihi@gmail.com>
Date:   2016-10-19T12:23:21Z

    CAMEL-10401: Support chmod for ftp/ftps

----

davsclaus:1477031561:2016-10-21T14:32:41.714+0000:1477031561:2016-10-21T14:32:41.714+0000:Thanks for the PR
githubbot:1477106717:2016-10-22T11:25:17.582+0000:1477106717:2016-10-22T11:25:17.582+0000:Github user eidottermihi closed the pull request at:

    https://github.com/apache/camel/pull/1218
"
0,CAMEL-10400,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.18.1, 2.19.0",Andrea Cosentino,James Netherton,0,3,2016-10-19 11:10:51+00:00,2016-10-19 11:42:27+00:00,No Desc,"githubbot:1476846876:2016-10-19T11:14:36.411+0000:1476846876:2016-10-19T11:14:36.411+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1217

    CAMEL-10400: Upgrade easymock to version 3.4

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10400

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1217.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1217
    
----

----

githubbot:1476847901:2016-10-19T11:31:41.063+0000:1476847901:2016-10-19T11:31:41.063+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1217

acosentino:1476847982:2016-10-19T11:33:02.739+0000:1476847982:2016-10-19T11:33:02.739+0000:Thanks for the PR :-)"
0,CAMEL-10399,Bug,Major,"2.17.3, 2.18.0","2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Tomohisa Igarashi,Uladzimir Shelhunou,0,5,2016-10-19 09:58:53+00:00,2016-10-27 06:29:03+00:00,"My route and jetty configuration:


<route id=""ds-rest-archive-upload-processor"">
            <from uri=""jetty:https://storage:8443/data/archive?sslContextParametersRef=sslContextParameters&amp;requestBufferSize=32768&amp;responseBufferSize=32768&amp;httpMethodRestrict=POST"" />


            <to uri=""bean:uploadFromArchiveFileProcessor?method=process"" pattern=""InOut"" />


</route>


<bean id=""jetty"" class=""org.apache.camel.component.jetty9.JettyHttpComponent9"">
        <property name=""endpointClass"" value=""org.apache.camel.component.jetty9.JettyHttpEndpoint9"" />
        <property name=""sslContextParameters"" ref=""sslContextParameters"" />
        <property name=""useContinuation"" value=""true"" />
        <property name=""requestBufferSize"" value=""32768"" />
        <property name=""responseBufferSize"" value=""32768"" />


        <property name=""threadPool"">
            <bean class=""org.eclipse.jetty.util.thread.QueuedThreadPool"">
                <constructor-arg index=""0"" value=""1000"" />
            </bean>
        </property>


        <property name=""jettyHttpBinding"">
            <bean class=""org.apache.camel.component.jetty.DefaultJettyHttpBinding"">
                <property name=""transferException"" value=""false"" />
            </bean>
        </property>
    </bean>


When I send file to this endpoint I have out of memory with this stacktrace:


 java.lang.OutOfMemoryError: Java heap space
      at java.lang.StringCoding.decode(StringCoding.java:215)
      at java.lang.String.<init>(String.java:463)
      at java.lang.String.<init>(String.java:515)
      at org.eclipse.jetty.servlets.MultiPartFilter$Wrapper.getParameterBytesAsString(MultiPartFilter.java:390)
      at org.eclipse.jetty.servlets.MultiPartFilter$Wrapper.getParameterValues(MultiPartFilter.java:337)
      at org.apache.camel.http.common.DefaultHttpBinding.populateRequestParameters(DefaultHttpBinding.java:219)
      at org.apache.camel.http.common.DefaultHttpBinding.readHeaders(DefaultHttpBinding.java:174)
      at org.apache.camel.http.common.DefaultHttpBinding.readRequest(DefaultHttpBinding.java:110)
      at org.apache.camel.http.common.HttpMessage.<init>(HttpMessage.java:52)
      at org.apache.camel.component.jetty.CamelContinuationServlet.doService(CamelContinuationServlet.java:161)
      at org.apache.camel.http.common.CamelServlet.service(CamelServlet.java:74)
      at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)
      at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:812)
      at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1669)
      at org.eclipse.jetty.servlets.MultiPartFilter.doFilter(MultiPartFilter.java:200)
      at org.apache.camel.component.jetty.CamelFilterWrapper.doFilter(CamelFilterWrapper.java:43)
      at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)
      at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)
      at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)
      at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)
      at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)
      at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)
      at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)
      at org.eclipse.jetty.server.Server.handle(Server.java:499)
      at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)
      at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)
      at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)
      at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)
      at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)
      at java.lang.Thread.run(Thread.java:745)","acosentino:1476843760:2016-10-19T10:22:40.210+0000:1476843770:2016-10-19T10:22:50.456+0000:Is the camel-context deployed as a simple JAR? What are you using inside the Debian container? How much memory has your container?

Did you set JVM_OPTS witch specific values for max Heap size and min Heap size?
davsclaus:1476843986:2016-10-19T10:26:26.730+0000:1476843986:2016-10-19T10:26:26.730+0000:Please use the user mailing list / user forum for this kind of help first.

JIRA ticket is not for initial help.

See more details here: http://camel.apache.org/support.html
vvsh:1476848749:2016-10-19T11:45:49.555+0000:1476848749:2016-10-19T11:45:49.555+0000:Yes, it is a simple JAR. Actually, I do not know why attachment is read to a string instead of reading directly from InputStream? I expected, that I can send a file of any size and it will be handled.
acosentino:1476848826:2016-10-19T11:47:06.811+0000:1476848826:2016-10-19T11:47:06.811+0000:Please, as [~davsclaus] said, use the users mailing-list first.
vvsh:1476850086:2016-10-19T12:08:06.121+0000:1476850086:2016-10-19T12:08:06.121+0000:Ok. Thanks.
vvsh:1476933887:2016-10-20T11:24:47.560+0000:1476935118:2016-10-20T11:45:18.391+0000:After discussing this issue in mailing list with Tomohisa, it seems that there is a bug in DefaultHttpBinding.populateRequestParameters, when file parameter is processed second time (after it was already processed in DefaultHttpBinding.populateAttachments).
vvsh:1477281956:2016-10-24T12:05:56.418+0000:1477281956:2016-10-24T12:05:56.418+0000:[~ancosen], Will you be investigating this issue?
acosentino:1477282272:2016-10-24T12:11:12.729+0000:1477282272:2016-10-24T12:11:12.729+0000:I will take a look as soon as I can :-)
acosentino:1477282844:2016-10-24T12:20:44.356+0000:1477282844:2016-10-24T12:20:44.356+0000:Anyway if [~igarashitm] has time to take a look I'm glad to pass the issue to him since he already started a bit of investigation :-)
githubbot:1477467203:2016-10-26T15:33:23.366+0000:1477467203:2016-10-26T15:33:23.366+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1225

    CAMEL-10399 camel-jetty - consumer should not load attachment payload

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10399

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1225.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1225
    
----
commit bb24b663caf901cba9134b7abbbd7b38b6fa2c8b
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-26T15:08:03Z

    CAMEL-10399 camel-jetty - consumer should not load attachment payload

----

githubbot:1477520622:2016-10-27T06:23:42.351+0000:1477520622:2016-10-27T06:23:42.351+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1225

acosentino:1477520694:2016-10-27T06:24:54.414+0000:1477520694:2016-10-27T06:24:54.414+0000:Thanks [~igarashitm] :-) Merged."
0,CAMEL-10398,Improvement,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Tomohisa Igarashi,0,2,2016-10-19 06:15:03+00:00,2016-10-19 08:00:35+00:00,SJMS consumer/producer throws NPE if neither of ConnectionResource nor ConnectionFactory is configured. A meaningful exception should be thrown instead.,"githubbot:1476829037:2016-10-19T06:17:17.399+0000:1476829037:2016-10-19T06:17:17.399+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1216

    CAMEL-10398 SJMS - Avoid NPE when neither of ConnectionResource nor C…

    …onnectionFactory is configured

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10398

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1216.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1216
    
----
commit 33985a9259cd6fe3733481ff1bf8b7f765e3569d
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-19T04:39:23Z

    CAMEL-10398 SJMS - Avoid NPE when neither of ConnectionResource nor ConnectionFactory is configured

----

githubbot:1476835235:2016-10-19T08:00:35.026+0000:1476835235:2016-10-19T08:00:35.026+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1216
"
0,CAMEL-10397,Improvement,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Tomohisa Igarashi,0,2,2016-10-19 02:36:12+00:00,2016-10-19 08:00:55+00:00,"InOut MEP and transacted=true are incompatible by nature as it causes deadlock. The message sent by producer won't be available until transaction commits, but the transaction won't commit until reply message is received. SJMS producer should raise an error earlier against this so user would notice his misconfiguration.","githubbot:1476815921:2016-10-19T02:38:41.453+0000:1476815921:2016-10-19T02:38:41.453+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1215

    CAMEL-10397 SJMS - Raise an error against InOut+transacted producer a…

    …s it causes a deadlock

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10397

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1215.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1215
    
----
commit bd1292a8359b41c475379aba899c74d1a83a9f4a
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-19T02:31:47Z

    CAMEL-10397 SJMS - Raise an error against InOut+transacted producer as it causes a deadlock

----

githubbot:1476835255:2016-10-19T08:00:55.770+0000:1476835255:2016-10-19T08:00:55.770+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1215
"
0,CAMEL-10396,Bug,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Alex Dettinger,0,3,2016-10-18 13:30:20+00:00,2017-05-08 20:38:35+00:00,"I've noticed that the overload selection mechanism based on parameter types is not working when some parameters are assignable, in the sense of Class.isAssignableFrom(...).


Given those methods:



String toString(String input)
String toString(int input)




We can select both methods via bean:toString(String) or bean:toString(int)


But given those methods:



String toString(String input)
String toString(Object input)




bean:toString(String) end in selecting toString(Object).


Ideally, I would expect it to select toString(String). Otherwise, unwinding an AmbiguousCallException may perhaps apply.


Thoughts:
I'm wondering whether ObjectHelper.isOverridingMethod(...) would be mixing overload vs override.


Will attach a test case.","aldettinger:1476769156:2016-10-18T13:39:16.122+0000:1476769156:2016-10-18T13:39:16.122+0000:Uploaded a test case showing the potential issue.
davsclaus:1476844037:2016-10-19T10:27:17.581+0000:1476844037:2016-10-19T10:27:17.581+0000:We did some fixes on master branch so you can test with latest code
aldettinger:1476867504:2016-10-19T16:58:24.369+0000:1476867504:2016-10-19T16:58:24.369+0000:I've just retested with an up-to-date master branch and it behaves the same way. Would you need more, feel free to ask.
githubbot:1487426953:2017-02-18T22:09:13.984+0000:1487426953:2017-02-18T22:09:13.984+0000:GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1477

    CAMEL-10396: Corrected a bug where BeanInfo was missing a method overload

    Actually the `toString(String)` overload was confused by `BeanInfo` to be an override of `toString(Object).`
    Now both methods are available to the overload selection mechanism.
    Could you please have a look at this PR ?
    
      Note that I may have discovered another issue in the overload selection mechanism where I can't select `toString(Object).` I need to qualify that a bit more and may open another ticket if needed.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1477.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1477
    
----
commit 89e1946a3194229334ddc4393075844ca3e6990c
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-02-18T15:27:31Z

    CAMEL-10396: Corrected a bug where BeanInfo was missing a method overload

commit 12164b2a4b9a30d1270cf51f771ea169d4084808
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-02-18T15:28:55Z

    CAMEL-10396: Corrected a bug where BeanInfo was missing a method overload

commit d5d8a2604cce22d3bc6c1dac5f63e141fd8815b8
Author: aldettinger <aldettinger@gmail.com>
Date:   2017-02-18T22:02:28Z

    Removed useless code

----

davsclaus:1487470183:2017-02-19T10:09:43.756+0000:1487470183:2017-02-19T10:09:43.756+0000:Thanks for the PR
githubbot:1487501697:2017-02-19T18:54:57.405+0000:1487501697:2017-02-19T18:54:57.405+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1477
"
0,CAMEL-10395,Improvement,Minor,2.14.4,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,1,2016-10-18 07:58:30+00:00,2016-10-18 08:09:33+00:00,"See SO
http://stackoverflow.com/questions/40094811/camel-password-being-partially-logged-after-sanitization


This old code is no longer needed as it was when we were migrating some stuff many years ago.",
0,CAMEL-10394,Bug,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Quinn Stevenson,0,3,2016-10-17 16:46:56+00:00,2018-03-05 12:01:21+00:00,"When a simple java RouteBuilder that creates a component and adds it to the context in the configure method is used in a blueprint, the context cannot find the component.


Example Builder:
public class TimerRouteBuilder extends RouteBuilder {
    @Override
    public void configure() throws Exception 

{
        TimerComponent timerComponent = new TimerComponent();

        getContext().addComponent(""my-timer"", timerComponent);

        from( ""my-timer://test-timer"")
                .log(""Timer Fired"")
                .to(""mock://result"");
    }

}


Example Blueprint:
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""
http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">


    <bean id=""timer-route-builder"" class=""com.pronoia.camel.builder.TimerRouteBuilder""/>


    <camelContext id=""blueprint-context"" xmlns=""http://camel.apache.org/schema/blueprint"">
        <routeBuilder ref=""timer-route-builder""/>
    </camelContext>


</blueprint>


This test fails:
public class BlueprintTest extends CamelBlueprintTestSupport {
    @EndpointInject(uri = ""mock://result"")
    MockEndpoint result;


    @Override
    protected String getBlueprintDescriptor() 

{
        return ""/OSGI-INF/blueprint/blueprint.xml"";
    }


    @Test
    public void testRoute() throws Exception 

{
        result.expectedMessageCount(5);

        assertMockEndpointsSatisfied(10, TimeUnit.SECONDS);
    }





}





But this test passes


public class CamelTest extends CamelTestSupport {





    @EndpointInject(uri = ""mock://result"")


    MockEndpoint result;





    @Override


    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new TimerRouteBuilder();
    }





    @Test


    public void testRoute() throws Exception {        result.expectedMessageCount(5);
        assertMockEndpointsSatisfied(10, TimeUnit.SECONDS);    }

}","hqstevenson:1476694294:2016-10-17T16:51:34.777+0000:1476694294:2016-10-17T16:51:34.777+0000:Could this be related to https://issues.apache.org/jira/browse/CAMEL-9570?

If I use the same type of workaround (a subclass of BlueprintCamelContext and bypass the Camel Blueprint Extender), I can make it work.
githubbot:1478086336:2016-11-02T19:32:16.517+0000:1478086336:2016-11-02T19:32:16.517+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1246

    CAMEL-10394: Resolve components from Camel Context

    Check the camel context for a component registered under the given name before creating a service reference.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10394

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1246.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1246
    
----
commit 03528e3dd1bfdd9a3ef52003e2fa73301f1a3fbd
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-11-02T19:30:20Z

    CAMEL-10394: Resolve components from Camel Context before creating service reference

----

davsclaus:1478243774:2016-11-04T15:16:14.709+0000:1478243774:2016-11-04T15:16:14.709+0000:Thanks for the PR
githubbot:1478244908:2016-11-04T15:35:08.189+0000:1478244908:2016-11-04T15:35:08.189+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1246
"
0,CAMEL-10393,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-10-17 12:07:50+00:00,2016-10-19 16:29:29+00:00,"As today you can provide a default value to a property placeholder by using colon separator i.e:


    key:defaultValue


Sometime you may want the property to be taken into account as it is because you may have your own resolution strategy i.e. in OSGi Blueprint you can create your own evaluator which may use colon as separator and as today the evaluator won't be invoked because the DefaultPropertiesParser thinks the property has a default value associated and splits it.","davsclaus:1476864866:2016-10-19T16:14:26.267+0000:1476864866:2016-10-19T16:14:26.267+0000:Can we flip the option so its disableXXX because disableXXX=true is often confusing.

Maybe a better name is
defaultResolutionEnabled

Or 

defaultFallbackEnabled

or

defaultValueEnabled=true

And let it be true by default. 


lb:1476865769:2016-10-19T16:29:29.017+0000:1476865769:2016-10-19T16:29:29.017+0000:will do
"
0,CAMEL-10392,Improvement,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Stephan Siano,Stephan Siano,0,1,2016-10-17 11:20:27+00:00,2017-08-10 09:25:02+00:00,"Provide support for client side HTTP session handling for different HTTP based consumer endpoints.


An interface (CookieHandler) and two implementations ExchangeCookieHandler and InstanceCookieHandler will be provided in camel-http-common.


The endpoints in the mentioned HTTP based components are extended by a cookieHandler parameter.


If no CookieHandler is defined on the endpoint it will continue working as it did before (without any session support). 


An ExchangeCookieHandler will maintain session cookies on exchange basis. If the same URI is called multiple times from the same exchange state will be maintained, different exchanges do not share state. This can be used for stateful services.


An InstanceCookieHandler will maintain session information within it's instance. This means that state will be shared across exchanges. This behaviour is similar to the existing cookieStore parameter for the camel-http4 component (but available for all mentioned components, not only camel-http4)",
0,CAMEL-10391,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Antonin Stefanutti,Sverker Abrahamsson,0,4,2016-10-16 11:19:14+00:00,2016-12-07 11:03:55+00:00,"Camel-CDI will find every class in a deployment which extends RouteBuilder and automatically add them to the context. This is a major issue for me as I usually wants to instantiate my RouteBuilders programatically setting various parameters, with CDI support.


This behaviour was introduced with https://github.com/apache/camel/commit/0421c24dfcf992f3296ed746469771e3800200e3 from antonin.stefanutti and we had a good discussion about the issue on his github project in https://github.com/astefanutti/camel-cdi/issues/12 but never came up with a good solution for it. I have patched camel-cdi to use a marker annotation @DoNotAddToCamelContext to work around it but I don't want to have to patch every release I use..


I understand the logic why Camel-CDI finds and add every RouteBuilder class, even though I don't agree that it is a good idea but it could very well be the default behavior as long as it is possible to override it.


What I would like is a discussion on how this could be made configurable. I'm thinking about if there could be an annotation like @CamelContextStartup(false) or maybe even a more general @CamelContextConfig(autostart=false) if there are other things that should be configurable.","antonin.stefanutti:1476704765:2016-10-17T19:46:05.285+0000:1476704765:2016-10-17T19:46:05.285+0000:Just a small clarification about the current behaviour of Camel CDI: it does not add {{RouteBuilder}} beans that are qualified with a set of qualifiers that does not intersect with those of the declared {{CamelContext}} beans. So the use of a {{@DoNotAddToCamelContext}} does not require to patch Camel CDI and is an example to meet the requirement at the client application level.

That being said, the current solution requires the end-user to declare a custom qualifier. This is does not hinder most of the users that rely on the default convention over configuration, though that may be deemed a bit cumbersome as configuration. We can review the needs for configuration over convention and find the best solution to achieve these in a common approach as you've suggested.
sverker:1476705931:2016-10-17T20:05:31.439+0000:1476705931:2016-10-17T20:05:31.439+0000:The problem with having to add a qualifier to prevent autostart of the route is that I then have to add that qualifier to every place I want to inject that RouteBuilder. That is why I would like to be able to turn off that behavior with e.g. a configuration annotation.
davsclaus:1476748356:2016-10-18T07:52:36.860+0000:1476748356:2016-10-18T07:52:36.860+0000:IMHO an annotation named DoNotAddToCamelContext is a smelly name.

I would actually like how Spring Boot does it where you need to annotate your RouteBuilder with @Component for them the be added. Why can we not make CDI require using @ApplicationScoped or @Singleton likewise. Then there is no voodoo magic.


sverker:1476750026:2016-10-18T08:20:26.658+0000:1476750026:2016-10-18T08:20:26.658+0000:Claus, that is a good suggestion which I fully agree with and it fit how CDI should work. It has my vote for solution. (And yes, DoNotAddToCamelContext was a ugly hack to workaround the issue)
antonin.stefanutti:1476750727:2016-10-18T08:32:07.085+0000:1476750727:2016-10-18T08:32:07.085+0000:Yes {{DoNotAddToCamelContext}} can actually be anything, so a dummy name has been picked up just for the sake of the example.

We may emulate Spring behaviour, that is to explicitly define which classes are to be considered CDI beans, though this may surprise most CDI users accustomed to the _standard_ behaviour. Plus, if I understand correctly, the use case here is not to exclude some {{RouteBuilder}} classes from being deployed as CDI beans, but avoid the auto-configuration that adds these {{RouteBuilder}} beans to the corresponding Camel context. Otherwise using the standard {{@Veto}} annotation would probably do the trick.
sverker:1476783293:2016-10-18T17:34:53.710+0000:1476783331:2016-10-18T17:35:31.605+0000:I still want my RouteBuilders to be CDI beans as I instantiate them programatically with CDI.current().select( ... ).get(), or inject them into other beans. I just don't want them to automatically be added to the context and started, as I can have multiple instances of a route which are set up with parameters retrieved from db. 
sverker:1476814532:2016-10-19T02:15:32.797+0000:1476814532:2016-10-19T02:15:32.797+0000:Given that RouteBuilders that are automatically added to context will be on application level the _emphasis_standard_emphasis_ CDI behavior is that they should be @ApplicationScoped. It is defenitly not a CDI behavior to make other beans de-facto application scoped.

Regarding the backwards compatibility, it broke that for my applications when this behavior was introduced in 2.17 and I was surprised as I didn't expect it. That is a quite recent version and shouldn't be too much of a hazzle for those affected to add the annotation.

With that said, I'm all for convension IF there is a possibility to override it by configuration in a reasonable way. Don't get me wrong, I think that if used correctly it's beautiful to be able to automatically add routes to context by using qualifers. What I'm against is that non-qualified, and not application scoped RouteBuilders are automatically added to default context and that it is autostarted. I was fine with having to bootstrap it, as at least before there were certain things that had to be done before the context was started but it seems that now it is possible to do it also after.

With the EJB standards I often face the difficulty that they are designed with the belief that you know the application settings at compile time, or at least at packaging or deploy time while in real world applications it depends on what the user/admin sets up in the application through some user friendly interface (which is not having to edit xml files) and it is excepted that the application will change its behavior when user commits those settings without having to restart the application.

For example, I have an application which consumes files from watchfolders that the user configures through a webui. Those settings are stored in the db, and I need to create RouteBuilders and other resources dynamically as I don't have that information even at deploy time. Likewise most of my JMS queues needs to be created dynamically, which I earlier did by calling the MBean but now I have to look at how to do that programatically through the CLI, and I can't utilize MDB's to consume from those queues so I have to dynamically instantiate beans or camel routes to consume from them. I wish that aspect had been considered when these standards were created. 
antonin.stefanutti:1476839162:2016-10-19T09:06:02.960+0000:1476839162:2016-10-19T09:06:02.960+0000:{quote}Given that RouteBuilders that are automatically added to context will be on application level the _emphasis_standard_emphasis_ CDI behavior is that they should be @ApplicationScoped. It is defenitly not a CDI behavior to make other beans de-facto application scoped.{quote}

_standard_ CDI behaviour for beans discovery is defined by [Type discovery|http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#type_discovery_steps] and [Beans discovery|http://docs.jboss.org/cdi/spec/1.2/cdi-spec.html#bean_discovery_steps]. If Camel CDI is to fit into that  _standard_ CDI behaviour, {{RouteBuilder}} beans without explicit scope defined (i.e. {{@Dependent}}) should be deployed as beans. That answers the previous point discussed.

Then, for the binding of {{RouteBuilder}} beans to the Camel contexts, Camel CDI does not _""make other beans de-facto application scoped""_. It just assumes the scope defined by the user. Note that it is possible to inject {{@Dependent}} beans into {{@ApplicationScoped}} beans and that if was necessary to enforce a particular scope for {{RouteBuilder}} beans, maybe a {{@CamelContextScoped}} would be better as some users have expressed the need to share a {{RouteBuilder}} beans across multiple Camel contexts.

{quote}Regarding the backwards compatibility, it broke that for my applications when this behavior was introduced in 2.17 and I was surprised as I didn't expect it. That is a quite recent version and shouldn't be too much of a hazzle for those affected to add the annotation.{quote}

That behaviour, that is adding {{RouteBuilder}} beans with implicit scope to Camel contexts, wasn't changed in 2.17, as the following test from 2.16.4 shows: https://github.com/apache/camel/blob/camel-2.16.4/tests/camel-itest-cdi/src/main/java/org/apache/camel/itest/cdi/RoutesContextA.java#L35. So there must be something else that broke your use case.

{quote}With that said, I'm all for convension IF there is a possibility to override it by configuration in a reasonable way. Don't get me wrong, I think that if used correctly it's beautiful to be able to automatically add routes to context by using qualifers. What I'm against is that non-qualified, and not application scoped RouteBuilders are automatically added to default context and that it is autostarted. I was fine with having to bootstrap it, as at least before there were certain things that had to be done before the context was started but it seems that now it is possible to do it also after.{quote}

I'm aware of two users so far having that need. As per your comment after, CDI is designed with immutability in mind, that is the container configuration is setup at deployment time (not compile time as extensions can change the behaviour). While you have the ability to do programmatic lookup, that's pretty much it when it comes to dynamically interacting with the container at runtime.

To synthesize, it is possible to meet your need with the use of a custom qualifier. However, that forces you to use that qualifier when you need to retrieve instances. e.g.:
{code}
@Inject
@YourCustomQualifier
RouteBuilder builder;
{code}
Instead of:
{code}
@Inject
RouteBuilder builder;
{code}
Or to write {{CDI.current().select(RouteBuilder.class, YourCustomQualifier.class).get()}} instead of {{CDI.current().select(RouteBuilder.class).get()}}.

I agree this is cumbersome and I more incline towards providing a configuration API as Camel Spring Boot does rather than hindering the default convention based on scope assumptions. Note that for the time being, that use case is not even possible with Spring Boot (https://github.com/apache/camel/blob/e275446a4768231a76c76e24985b796865550e3b/components/camel-spring-boot/src/main/java/org/apache/camel/spring/boot/RoutesCollector.java#L78).

 



antonin.stefanutti:1476839828:2016-10-19T09:17:08.243+0000:1476839828:2016-10-19T09:17:08.243+0000:Another way of meeting that need may be the use of standard {{@Veto}} and {{Unmanaged}}, e.g.:
{code}
@Veto
MyRouteBuilder extends RouteBuilder {
}

MyRouteBuilder builder = new Unmanaged<MyRouteBuilder>(MyRouteBuilder.class)
    .newInstance()
    .produce()
    .inject()
    .postConstruct()
    .get();
{code}

Granted that it is more verbose than a configuration.
sverker:1476840984:2016-10-19T09:36:24.297+0000:1476841257:2016-10-19T09:40:57.299+0000:If I use @Veto, can I then use injection in the RouteBuilder bean and get it injected when _emphasis_I_emphasis_ want.

A config API would be the best solution in my opinion, e.g. with an annotated config bean.

I'm not sure when this behavior was introduced. It didn't work like that when I started to use camel-cdi (2.15 I believe) and when I moved to 2.16 I started to use your new implementation where this was implemented sometime before I wrote issue 12.

{quote}As per your comment after, CDI is designed with immutability in mind, that is the container configuration is setup at deployment time (not compile time as extensions can change the behaviour). While you have the ability to do programmatic lookup, that's pretty much it when it comes to dynamically interacting with the container at runtime.{quote}

Yes, that is what I feel is a design problem in many of these frameworks that it doesn't take dynamicality into account. The programmatic lookup wasn't added until CDI 1.1 if I recall correctly.
antonin.stefanutti:1476841411:2016-10-19T09:43:31.741+0000:1476841446:2016-10-19T09:44:06.677+0000:{quote}If I use @Veto, can I then use injection in the RouteBuilder bean and get it injected when emphasis_I_emphasis want.{quote}
Injection will work when calling {{new Unmanaged<MyRouteBuilder>(MyRouteBuilder.class).newInstance().produce().inject().get()}}. {{Unmanaged}} is a way to dynamically produce instances out of classes that are not beans, and the {{inject()}} method call triggers the injection.

{quote}A config API would be the best solution in my opinion, e.g. with an annotated config bean.{quote}

This is my opinion too so we can try iterate in that direction. We may want to have it consistent as much as possible with what exists for other DI frameworks that Camel supports.
sverker:1476841728:2016-10-19T09:48:48.188+0000:1476841728:2016-10-19T09:48:48.188+0000:Fully agree on the latter.
sverker:1479718323:2016-11-21T16:52:03.238+0000:1479719015:2016-11-21T17:03:35.404+0000:Looking at this again. Isn't the obvious solution that only RouteBuilders annotated with @Startup should be automatically added to the context? Although that is an EJB annotation.. I know it breaks compatibility but that's how it should have been from beginning ..

Any suggestion on how to implement a configuration bean as discussed above?
antonin.stefanutti:1479719750:2016-11-21T17:15:50.724+0000:1479719750:2016-11-21T17:15:50.724+0000:{quote}
Looking at this again. Isn't the obvious solution that only RouteBuilders annotated with @Startup should be automatically added to the context? Although that is an EJB annotation..
{quote}
I doubt adding an explicit dependency on the EJB specification would be wise.
{quote}
I know it breaks compatibility but that's how it should have been from beginning ..
{quote}
It has to be kept in mind that 95% of user feedback we've got is that they want to have their Camel context started with the container. Hence the convention to start the Camel CDI contexts for these vast majority of users. Still a proper configuration API has to be provided for the remaining users. 
sverker:1479719857:2016-11-21T17:17:37.139+0000:1479720503:2016-11-21T17:28:23.554+0000:Any suggestion on how to start on a configuration API?

How about injecting an optional properties class in CdiCamelExtension?
{noformat}
@Inject @CdiCamelProperties
private Optional<Properties> cdiCamelProperties;
{noformat}

With for this purpose a property autoStartRoutes.

Or a variant which implements an interface with usable properties:
{noformat}
@Inject
private Optional<@CdiCamelProperties> cdiCamelProperties;
{noformat}

sverker:1479721292:2016-11-21T17:41:32.170+0000:1479721292:2016-11-21T17:41:32.170+0000:I see now that Optional came in Java 8, and camel-cdi is compiled with source level 1.7 ..
antonin.stefanutti:1479722207:2016-11-21T17:56:47.292+0000:1479722207:2016-11-21T17:56:47.292+0000:Camel CDI compiles on Java 8 since Camel 2.18.0 so that would be fine.  Though having {{Optional}} members in always debatable as it is not serialisable. Indeed it has been designed to be used more as return type than to carry state. See [Optional Injection Points|https://issues.jboss.org/browse/CDI-45] for some elements on this.

For the configuration API, I was thinking about an interface that the user could implement that's more type safe than a {{Properties}} bean. The extension can easily deal with optionality. Or an event fired by the extension providing a event object that the user could use to pass some configuration. the later would be more CDI-ish IMO.
sverker:1479722866:2016-11-21T18:07:46.110+0000:1479722866:2016-11-21T18:07:46.110+0000:How do you do optional injects in other way than using Optional? CdiCamelExtension isn't serializable neither so that part shouldn't be a problem. Top pom in camel still defines jdk version to 1.7.

Agreed that an interface is better for type safety. How would the event variant work?
antonin.stefanutti:1479723178:2016-11-21T18:12:58.450+0000:1479723178:2016-11-21T18:12:58.450+0000:{quote}
How do you do optional injects in other way than using Optional?
{quote}
it is possible to do optional programmatic lookup with {{Instance}} or the {{BeanManager}}.

{quote}
CdiCamelExtension isn't serializable neither so that part shouldn't be a problem. Top pom in camel still defines jdk version to 1.7.
{quote}
See:  https://github.com/apache/camel/blob/da8694f8c5392881ac5ab49c37a7947451bb65af/pom.xml#L49

{quote}
How would the event variant work?
{quote}
I'm thinking about what is done in the Metrics CDI extension: https://github.com/astefanutti/metrics-cdi/blob/abac97f7d903651884de92421ce53bf7d0499d08/impl/src/main/java/io/astefanutti/metrics/cdi/MetricsConfigurationEvent.java#L23
sverker:1479723619:2016-11-21T18:20:19.879+0000:1479723619:2016-11-21T18:20:19.879+0000:Yes, the event variant would be beautiful. Didn't think of that it would be possible to change parameters in the event object.
sverker:1479908752:2016-11-23T21:45:52.910+0000:1479908752:2016-11-23T21:45:52.910+0000:I've made an implementation as in your example, and it works in a testcase which is packaged as a war. But when the class containing observer is packaged in an ejb jar in an ear, then the observer is not called. It is declared like this:
{noformat}
public class CdiCamelConfiguration {
    private Logger logger = LoggerFactory.getLogger(CdiCamelConfiguration.class);
    public void configuration(@Observes org.apache.camel.cdi.CdiCamelConfiguration configuration) {
        logger.info(""Turning off Camel CDI autostart of routes"");
        configuration.autostartRoutes(false);
    }
}
{noformat}
sverker:1480379707:2016-11-29T08:35:07.148+0000:1480379707:2016-11-29T08:35:07.148+0000:Seems to be the issue with CDI events over classloader boundary which is an issue with ear packaged apps. Any idea on how to work around that?
antonin.stefanutti:1480380142:2016-11-29T08:42:22.156+0000:1480380142:2016-11-29T08:42:22.156+0000:I would try to ask the CDI dev list first about the best strategy as CDI and EAR is a bit ill-defined.
sverker:1480400758:2016-11-29T14:25:58.672+0000:1480400758:2016-11-29T14:25:58.672+0000:Ok, found the issue. I was sending the configuration event in method listening to AfterDeploymentValidation, but that is called after AfterBeanDiscovery which is where CdiCamelExtension hangs when trying to add my RouteBuilders.

So I moved the code for sending out the event to first thing in CdiCamelExtension.afterBeanDiscovery() and it works like a charm.
githubbot:1480417359:2016-11-29T19:02:39.787+0000:1480417359:2016-11-29T19:02:39.787+0000:GitHub user sverkera opened a pull request:

    https://github.com/apache/camel/pull/1319

    Created a mechanism to configure Camel CDI via CDI event.

    See https://issues.apache.org/jira/browse/CAMEL-10391 for details

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sverkera/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1319.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1319
    
----
commit 71d7939c419a98de58888a3edc5aa8050f04eeb0
Author: Sverker Abrahamsson <sverker@limetransit.com>
Date:   2016-11-29T18:51:31Z

    Created a mechanism to configure Camel CDI via CDI event. Currently the only setting is to turn off automatic add of RouteBuilders to context.

----

githubbot:1480417418:2016-11-29T19:03:38.021+0000:1480417418:2016-11-29T19:03:38.021+0000:GitHub user sverkera opened a pull request:

    https://github.com/apache/camel/pull/1320

    Created a mechanism to configure Camel CDI via CDI event.

    See https://issues.apache.org/jira/browse/CAMEL-10391 for details, patch for 2.18.x branch

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sverkera/camel camel-2.18.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1320.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1320
    
----
commit 17ad17af8cc91fd3c319ad109ead8a5962cc4b9f
Author: Sverker Abrahamsson <sverker@limetransit.com>
Date:   2016-11-29T18:51:31Z

    Created a mechanism to configure Camel CDI via CDI event.
    Currently the only setting is to turn off automatic add of RouteBuilders
    to context.

----

githubbot:1480418579:2016-11-29T19:22:59.381+0000:1480418579:2016-11-29T19:22:59.381+0000:Github user sverkera closed the pull request at:

    https://github.com/apache/camel/pull/1320

githubbot:1480668853:2016-12-02T16:54:13.779+0000:1480668853:2016-12-02T16:54:13.779+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1319

davsclaus:1480669818:2016-12-02T17:10:18.061+0000:1480669818:2016-12-02T17:10:18.061+0000:Please update the release notes with this new feature/change
http://camel.apache.org/camel-219-release.html
antonin.stefanutti:1481079591:2016-12-07T10:59:51.827+0000:1481079591:2016-12-07T10:59:51.827+0000:I've just updated the documentation and the 2.19 release note.
sverker:1481079835:2016-12-07T11:03:55.835+0000:1481079835:2016-12-07T11:03:55.835+0000:Excellent"
0,CAMEL-10390,Improvement,Minor,None,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-10-14 15:50:25+00:00,2016-10-20 10:18:39+00:00,"I've sometime had the need to find a string after a separator, lookup
an object based on the result value and then use it to process
something, like:


    String after = ObjectHelper.after(key, "":"");
    if (after != null) {
        MyStuff s = cache.get(after)
        if (s != null) 

{
            s.doSomething(exchange)
        }

    }


So I wonder whether it makes sense to add a 'fluent' variant to these
functions to impement such pattern, like:


    <T> Optional<T> after(String value, String delimiter,
Function<String, T> function)


The we could do something like:


    ObjectHelper.after(key, "":"", cache::get).ifPresent(s ->
s.doSomething(exchange));",
0,CAMEL-10389,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Luca Burgazzoli,0,4,2016-10-14 15:48:44+00:00,2016-10-28 08:00:58+00:00,No Desc,"lb:1476431512:2016-10-14T15:51:52.607+0000:1476431512:2016-10-14T15:51:52.607+0000:As there is a StringHelper it would be nice to move string related functions from ObjectHelper to StringHelper.
We could keep  ObjectHelper functions for a wile marking them as deprecated and delegate the implementation to StringHelper
githubbot:1477562397:2016-10-27T17:59:57.850+0000:1477562397:2016-10-27T17:59:57.850+0000:GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1232

    CAMEL-10389: Moved string related function from ObjectHelper to Strin…

    camel-core/mvn clean compile -P sourcecheck => BUILD SUCCESS
    camel-core/mvn clean javadoc:javadoc => BUILD SUCCESS
    camel-core/mvn install => BUILD SUCCESS


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1232.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1232
    
----
commit 47dbf82b7a2c21de03a6c0693656edf8564dfb0a
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-10-27T13:48:53Z

    CAMEL-10389: Moved string related function from ObjectHelper to StringHelper

----

acosentino:1477609627:2016-10-28T07:07:07.843+0000:1477609627:2016-10-28T07:07:07.843+0000:[~aldettinger], thanks for the PR.

Maybe next time take a look if the issue is already assigned, because we can avoid overlapping work from different contributors. I don't think it's a problem for [~lb], just a reminder for the next time. 

Thanks
aldettinger:1477611932:2016-10-28T07:45:32.425+0000:1477611932:2016-10-28T07:45:32.425+0000:Ok, I think I got that for next time. The assignee field was empty because a contributor has no permission to assign a ticket to himself. Therefore, the first note indicates that a contributor is already working on it. Sorry [Luca Burgazolli|https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lb].
githubbot:1477611997:2016-10-28T07:46:37.559+0000:1477611997:2016-10-28T07:46:37.559+0000:Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1232

lb:1477612858:2016-10-28T08:00:58.126+0000:1477612858:2016-10-28T08:00:58.126+0000:[~aldettinger] no problem, the less work for me the better ;) 
Maybe add a comment on the issue or ping me on irc so I know I can take a break ;)"
0,CAMEL-10388,New Feature,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,2,2016-10-14 13:40:11+00:00,2019-08-06 08:25:54+00:00,"When using expression and predicates in your routes, then they are created once during startup of Camel.


It may be desirable to allow dynamic updating these at runtime based on a configuration parameter change configured from a property placeholder.


For example



<from ...>
  <filter>
    <simple>{{auditEnabled}}</simple>
    <to uri=""{{auditUrl}}""/>
  </filter>
  ...




In this example the simple predicate in the filter should be automatic updated if the property placeholder value changes.


This requires


1. Properties component to support notification of value changes (SPI hook)
2. Predicate/Expression Factory in camel-core
3. Creating all expression/predicates using the factory
4. Option to turn this feature on (off by default)
5. If the option is on, then the factory creates the expression/predicate with a wrapper that hooks into the notification event and listen on changes. If a change happens, then expression/predicate is re-created and swapped out with the existing.


There should not be a global lock, so the changes happens as-is and they are not atomic. So end users should just beware, that if you do multiple property changes then depending on concurrency then at any given time some predicates/expression may be updated while others are still using old values.


We can optimize so they only update if the property placeholder key is used by the expression/predicate.


Notice that endpoints is not supported. For those to updates you would need to restart/re-create the route. Or use dynamic-to.


For the consumer we could consider a way for it to allow to auto restart by doing a route stop/update/start.


However this is a slipping stope. As having immutable containers and leaving updates to be done by a platform is better/safer.",
0,CAMEL-10387,Improvement,Minor,2.18.0,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Claus Ibsen,Terral Guillaume,0,3,2016-10-14 10:54:09+00:00,2016-10-14 13:54:23+00:00,"When a JMS broker send a null JMSCorrelationId and a byte array full of zero for JMSCorrelationIdAsBytes it creates issues with the hawtio webconsole as this byte array is dump in an XML that no one can parse.


Therefore I think it could be usefull to return null when we receive a bytearray full of 0.","githubbot:1476416810:2016-10-14T11:46:50.011+0000:1476416810:2016-10-14T11:46:50.011+0000:GitHub user guillaumeterral opened a pull request:

    https://github.com/apache/camel/pull/1212

    CAMEL-10387 - Return null if the byte array contains only 0x0 values

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/guillaumeterral/camel CAMEL-10387

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1212.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1212
    
----
commit a140889f693ac829376bcf5afb37fbfbae23963f
Author: Guillaume Terral <guillaume.terral@murex.com>
Date:   2016-10-14T11:45:11Z

    CAMEL-10387 - Return null if the byte array contains only 0x0 values

----

davsclaus:1476424459:2016-10-14T13:54:19.993+0000:1476424459:2016-10-14T13:54:19.993+0000:Thanks for the PR
githubbot:1476424463:2016-10-14T13:54:23.092+0000:1476424463:2016-10-14T13:54:23.092+0000:Github user guillaumeterral closed the pull request at:

    https://github.com/apache/camel/pull/1212
"
0,CAMEL-10386,Bug,Trivial,"2.17.3, 2.18.0","2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Dmitriy Frolov,0,2,2016-10-13 21:33:35+00:00,2016-10-14 08:47:52+00:00,"limitation w/ simple language on the 1st index of an empty array with a nullsafe expression  


sample expression: ${in.body?.list[0].toString}


org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: ?.get('list')[0].toString on java.util.HashMap due to: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:120) 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:138) 
        at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:126) 
        at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:118) 
        at org.apache.camel.builder.ExpressionBuilder$40.evaluate(ExpressionBuilder.java:993) 
        at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) 
        at org.apache.camel.TestSupport.assertExpression(TestSupport.java:255) 
        at org.apache.camel.ContextTestSupport.assertExpression(ContextTestSupport.java:314) 
        at org.apache.camel.LanguageTestSupport.assertExpression(LanguageTestSupport.java:62) 
        at org.apache.camel.LanguageTestSupport.assertExpression(LanguageTestSupport.java:69) 
        at org.apache.camel.language.simple.SimpleTest.testOGNLBodyEmptyList(SimpleTest.java:267) 
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) 
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) 
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) 
        at java.lang.reflect.Method.invoke(Method.java:497) 
        at junit.framework.TestCase.runTest(TestCase.java:176) 
        at junit.framework.TestCase.runBare(TestCase.java:141) 
        at org.apache.camel.TestSupport.runBare(TestSupport.java:58) 
        at junit.framework.TestResult$1.protect(TestResult.java:122) 
        at junit.framework.TestResult.runProtected(TestResult.java:142) 
        at junit.framework.TestResult.run(TestResult.java:125) 
        at junit.framework.TestCase.run(TestCase.java:129) 
        at junit.framework.TestSuite.runTest(TestSuite.java:252) 
        at junit.framework.TestSuite.run(TestSuite.java:247) 
        at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86) 
        at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86) 
        at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382) 
        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192) 
Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0 
        at java.util.ArrayList.rangeCheck(ArrayList.java:653) 
        at java.util.ArrayList.get(ArrayList.java:429) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.lookupResult(BeanExpression.java:385) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:334) 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114)",davsclaus:1476406071:2016-10-14T08:47:51.935+0000:1476406071:2016-10-14T08:47:51.935+0000:Thanks for the PR
0,CAMEL-10385,Bug,Minor,"2.17.0, 2.17.3, 2.18.0","2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Dmitriy Frolov,0,3,2016-10-13 03:18:41+00:00,2016-10-14 13:22:18+00:00,"conflict running simple expression w/ list under spring boot.  SpringTypeConverter is registered as a fallback converter which gets picked up during ognl while attempting to convert list -> map causing an exception instead of a null response that is expected.  It is happening under 2.17 & 2.18.


sample expression: ${body.list[0].field} 


10:20:32.499 [main] TRACE o.a.c.i.c.DefaultTypeConverter | Converting java.util.ArrayList -> java.util.Map 
10:20:32.500 [main] TRACE o.a.c.i.c.DefaultTypeConverter | Using converter: org.apache.camel.impl.converter.ArrayTypeConverter@79d7035 to convert [class java.util.ArrayList=>interface java.util.Map] 


Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.util.ArrayList to the required type: java.util.Map with due Failed to convert from type [java.util.ArrayList<?>] to type [java.util.Map<?, ?>] 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:121) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.lookupResult(BeanExpression.java:358) 
        at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:334) 
        at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114) 
        ... 55 common frames omitted 
Caused by: org.springframework.core.convert.ConversionFailedException: Failed to convert from type [java.util.ArrayList<?>] to type [java.util.Map<?, ?>] 
        at org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:42) 
        at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:192) 
        at org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:176) 
        at org.apache.camel.spring.boot.SpringTypeConverter.convertTo(SpringTypeConverter.java:46) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:346) 
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) 
        ... 59 common frames omitted","githubbot:1476309019:2016-10-13T05:50:19.119+0000:1476309019:2016-10-13T05:50:19.119+0000:GitHub user dmitriyC300 opened a pull request:

    https://github.com/apache/camel/pull/1209

    CAMEL-10385: springtypeconverter return null on list -> map

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dmitriyC300/camel CAMEL-10385

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1209.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1209
    
----
commit de208e8c9d8a60e8c2738932707cd638865bb5f2
Author: dmitriy <xhub4u@gmail.com>
Date:   2016-10-13T05:37:50Z

    CAMEL-10385: springtypeconverter return null on list -> map

----

davsclaus:1476404101:2016-10-14T08:15:01.029+0000:1476404101:2016-10-14T08:15:01.029+0000:Thanks for the PR
githubbot:1476422538:2016-10-14T13:22:18.043+0000:1476422538:2016-10-14T13:22:18.043+0000:Github user dmitriyC300 closed the pull request at:

    https://github.com/apache/camel/pull/1209
"
0,CAMEL-10384,Bug,Minor,2.17.3,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Claus Ibsen,Artur Markiewicz,1,3,2016-10-12 15:57:50+00:00,2016-10-29 20:06:11+00:00,"Camel doesn't shutdown properly in a Spring Boot environment. Calling the /shutdown endpoint causes Camel to hang-up after stopping the CamelContext. The reason for this is the count-down latch in the CamelSpringBootApplicationController. The overriden Main class modifies the latch in the Main class itself, not the one in CamelSpringBootApplicationController. As a result, the latch in CamelSpringBootApplicationController is waiting forever preventing a proper shutdown.


CamelSpringBootApplicationController .java
    public CamelSpringBootApplicationController(final ApplicationContext applicationContext, final CamelContext camelContext) {
        this.main = new Main() {
             
            ...

            @Override
            protected void doStop() throws Exception {
                LOG.debug(""Controller is shutting down CamelContext"");
                try {
                    super.doStop();
                } finally {
                    // Should be CamelSpringBootApplicationController.this.latch.countDown();
                    latch.countDown();
                }
            }
        };
    }","davsclaus:1476404157:2016-10-14T08:15:57.408+0000:1476404157:2016-10-14T08:15:57.408+0000:You are welcome to work on a PR to fix this
davsclaus:1477742770:2016-10-29T20:06:10.905+0000:1477742770:2016-10-29T20:06:10.905+0000:Thanks"
0,CAMEL-10383,Bug,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-10-12 08:39:41+00:00,2016-10-16 11:15:32+00:00,See screenshot,
0,CAMEL-10381,Bug,Major,2.18.0,None,"
None
",Resolved,Fixed,"2.17.3, 2.18.1, 2.19.0",Jonathan Anstey,Jonathan Anstey,0,1,2016-10-11 19:03:53+00:00,2016-10-11 19:15:57+00:00,"From forums:


When i run the application and start the route i get an NPE which points to


org.apache.camel.component.google.mail.GoogleMailComponent.getClient(GoogleMailComponent.java:50


as the culprit.","janstey:1476184557:2016-10-11T19:15:57.269+0000:1476184557:2016-10-11T19:15:57.269+0000:[janstey@ghost camel-google-mail]$ git push 
Counting objects: 39, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (27/27), done.
Writing objects: 100% (39/39), 4.29 KiB | 0 bytes/s, done.
Total 39 (delta 13), reused 0 (delta 0)
remote: camel git commit: CAMEL-10381 - fix NPE from component configuration
remote: camel git commit: CAMEL-10381 - fix NPE from component configuration
remote: camel git commit: CAMEL-10381 - fix NPE from component configuration
To https://git-wip-us.apache.org/repos/asf/camel.git
   9fc87f2..592e7cf  camel-2.17.x -> camel-2.17.x
   fa1789a..37a12df  camel-2.18.x -> camel-2.18.x
   da614b7..5d79ddc  master -> master
"
0,CAMEL-10380,Bug,Minor,2.17.3,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Andrea Cosentino,Rudolf Batt,0,2,2016-10-11 13:57:45+00:00,2016-10-17 09:34:53+00:00,"My original problem is the fact, that in a Jetty based proxy the consumer sets the header ""Transfer-Encoding: chunked"" to the backend request for a GET request without body. This is not necessary, since there is no body, but the http component puts that null body into a InputStreamCache/HttpInputOverHTTP. This happens, because there is no content-length header set (which means it's ""-1""):
see https://github.com/apache/camel/blob/master/components/camel-http-common/src/main/java/org/apache/camel/http/common/DefaultHttpBinding.java#L564


The only workaround I found, is to set ""eagerCheckContentAvailable=true"". Unfortunately the JettyHttpEndpoint9 does not transfer this setting to the http binding and therefor my problem can't be fixed. (Ok, I found another workaround, but it's really ugly.)


I found that problem using camel-2.17. In the current master branch, there is an open TODO to transfer this option:
https://github.com/apache/camel/blame/master/components/camel-jetty9/src/main/java/org/apache/camel/component/jetty9/JettyHttpEndpoint9.java#L52
For me this fixed the problem in my ""test"".


I didn't manage to build a good test, since that header is set deeply inside ""org.eclipse.jetty.client.HttpConnection.normalizeRequest(Request)"", but it's easy to reproduce it, by running a simple proxy and enable DEBUG log for ""org.eclipse.jetty.client.HttpSender"":


Inside the log a http header like will be logged:



Accept-Encoding: gzip
User-Agent: Jetty/9.2.15.v20160210
sendDirect: true
Host: 127.0.0.1
Transfer-Encoding: chunked




This is the test I used to reproduce and debug that problen



public class JettyEndpointsChuckedFalseTest extends BaseJettyTest {
    
    @Test
    public void runningTest() throws Exception {
        Exchange exchange = template.request(""http://localhost:{{port}}/test"", new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
            	exchange.getIn().getBody();
            }
        });
        assertNotNull(exchange);
    }
    
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {

            	from(""jetty:http://localhost:{{port}}/test?matchOnUriPrefix=true&chunked=false&disableStreamCache=true""
            			+ ""&eagerCheckContentAvailable=true"")
	            	.to(""log:request-debug?showHeaders=true&showBody=false&level=INFO"")
	            	.to(""jetty:http://localhost:{{port2}}/test?bridgeEndpoint=true&chunked=false"");
            	
                from(""jetty:http://localhost:{{port2}}/test"")
                	.to(""mock:dead.end"");
            }
        };
    }
}","rudibatt:1476171062:2016-10-11T15:31:02.596+0000:1476171062:2016-10-11T15:31:02.596+0000:My workaround:
{noformat}
<when>
        <simple>${bodyAs(String)} == ''</simple>
        <setBody><simple>${null}</simple></setBody>
</when>
{noformat}
davsclaus:1476587811:2016-10-16T11:16:51.151+0000:1476587811:2016-10-16T11:16:51.151+0000:Contributions with PR is welcome"
0,CAMEL-10379,Task,Minor,2.18.0,None,"
None
",Resolved,Fixed,"2.18.1, 2.19.0",Luca Burgazzoli,Claus Ibsen,0,1,2016-10-11 12:48:26+00:00,2016-10-12 09:28:25+00:00,"The description of the components at
https://github.com/apache/camel/tree/master/components#components


Is taking from the class javadoc on the endpoint and then pom.xml file. We should favor class javadoc, and provide a good description.


For example servicenow and others need to be updated.",
0,CAMEL-10378,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.18.1,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-10-10 16:37:55+00:00,2016-10-10 16:43:41+00:00,No Desc,
0,CAMEL-10377,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,M. Steiger,0,2,2016-10-10 14:22:56+00:00,2016-12-22 07:42:40+00:00,Is there a reason why quartz2 requires a JDBC connection pool?I was looking for usages of c3p0 and it seems that there are none:https://github.com/apache/camel/search?utf8=%E2%9C%93&q=c3p0I therefore suggest removing it.,"davsclaus:1476170951:2016-10-11T15:29:11.198+0000:1476170951:2016-10-11T15:29:11.198+0000:The quartz scheduler has a dependency on it I think
davsclaus:1476171016:2016-10-11T15:30:16.321+0000:1476171016:2016-10-11T15:30:16.321+0000:[INFO] +- org.quartz-scheduler:quartz:jar:2.2.3:compile
[INFO] |  \- c3p0:c3p0:jar:0.9.1.1:compile"
0,CAMEL-10376,Bug,Major,"2.17.3, 2.18.0","2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Babur Duisenov,0,3,2016-10-10 13:14:14+00:00,2016-10-13 08:24:07+00:00,"Instead of selecting implementation method, bridge method is used. We faced an issue with conversion of parameter when bean implements generic interface.
For example having bean implementation like this:



    public interface Service<R> {

        int process(R request);
    }

    public static class MyService implements Service<Request> {

        public int process(Request request) {
            return request.x + 1;
        }
    }




would lead to beanInfo containing Method with signature 



public abstract int process(Object request)




in methodMap


This is not correct as conversion of parameter is not possible in this case.


I could find an issue with the same problem that was previously fixed (CAMEL-8940), but later on it was broken with CAMEL-9656 (commit 5639b78).","githubbot:1476078474:2016-10-10T13:47:54.590+0000:1476078474:2016-10-10T13:47:54.590+0000:GitHub user bduisenov opened a pull request:

    https://github.com/apache/camel/pull/1204

    CAMEL-10376 BeanInfo should prefer implementation methods instead of bridged methods

    see [jira ticket](https://issues.apache.org/jira/browse/CAMEL-10376)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bduisenov/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1204.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1204
    
----
commit 35319119a486b1acbc12a0a96a4ca2aa4f3e41ed
Author: Babur Duisenov <bduisenov@gmail.com>
Date:   2016-10-10T13:46:09Z

    CAMEL-10376 BeanInfo should prefer implementation methods instead of bridged methods

----

davsclaus:1476241043:2016-10-12T10:57:23.306+0000:1476241043:2016-10-12T10:57:23.306+0000:Thanks for the PR
githubbot:1476241312:2016-10-12T11:01:52.917+0000:1476241312:2016-10-12T11:01:52.917+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1204
"
0,CAMEL-10375,Task,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Andrea Cosentino,Claus Ibsen,0,2,2016-10-08 02:01:19+00:00,2017-01-12 12:24:17+00:00,"It looks like couchbase-client is ASF license
https://repo1.maven.org/maven2/com/couchbase/client/couchbase-client/1.4.12/couchbase-client-1.4.12.pom


And the java code
https://github.com/couchbase/couchbase-java-client/blob/master/src/main/java/com/couchbase/client/java/Cluster.java


So we can move camel-couchbase from extra to ASF
https://github.com/camel-extra/camel-extra/tree/master/components/camel-couchbase","acosentino:1484194676:2017-01-12T12:17:56.254+0000:1484194676:2017-01-12T12:17:56.254+0000:Done. 

Maybe there is a bit work to do on the endpoint options annotation and labeling, but it's fine now.

[~davsclaus] do we need to open a PR on extra and remove the component there?

Thanks.
davsclaus:1484195057:2017-01-12T12:24:17.172+0000:1484195057:2017-01-12T12:24:17.172+0000:Yeah it should be removed or deprecated from extra"
0,CAMEL-10373,Task,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Nicola Ferraro,Claus Ibsen,0,2,2016-10-07 15:20:12+00:00,2017-04-13 13:02:14+00:00,"Nicola


I noticed that some of the starter components has hibernate-validator as compile dependency. I wonder why is that?


davsclaus:/Users/davsclaus/workspace/camel/components-starter (master)/$ git grep ""hibernate-validator""
camel-jetty9-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>
camel-kubernetes-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>
camel-netty4-http-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>
camel-netty4-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>
camel-restlet-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>
camel-swagger-java-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>
camel-undertow-starter/pom.xml:      <artifactId>hibernate-validator</artifactId>","nferraro:1492059726:2017-04-13T13:02:06.629+0000:1492059726:2017-04-13T13:02:06.629+0000:I've left hibernate validator on camel-kubernetes-starter and camel-swagger-java-starter only.
These two modules import validation-api in compile scope, so an implementation is required in order for spring-boot to start.

The other modules use the validation-api lib for testing purposes. So I've just included the hibernate validator in the integration tests."
0,CAMEL-10372,Bug,Minor,2.18.0,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Claus Ibsen,0,1,2016-10-07 13:10:02+00:00,2016-10-07 15:09:32+00:00,A little mistake,
0,CAMEL-10371,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,James Netherton,0,3,2016-10-04 19:54:21+00:00,2016-10-08 01:10:31+00:00,No Desc,"githubbot:1475628053:2016-10-05T08:40:53.714+0000:1475628053:2016-10-05T08:40:53.714+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1197

    CAMEL-10371 - Add Apache HttpComponents dependencies to BOM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10371

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1197.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1197
    
----
commit e4290069f3cf7723af5dae2ff2c689713067d463
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-10-05T08:32:35Z

    CAMEL-10371 - Add Apache HttpComponents dependencies to BOM

----

githubbot:1475830212:2016-10-07T16:50:12.760+0000:1475830212:2016-10-07T16:50:12.760+0000:Github user jamesnetherton closed the pull request at:

    https://github.com/apache/camel/pull/1197

davsclaus:1475860231:2016-10-08T01:10:31.237+0000:1475860231:2016-10-08T01:10:31.237+0000:Thanks for the PR"
0,CAMEL-10370,Bug,Minor,2.17.3,"2.17.4, 2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.17.4, 2.18.1, 2.19.0",Stephan Siano,Stephan Siano,0,1,2016-10-04 14:18:01+00:00,2016-10-06 05:44:51+00:00,The CxfPayloadConverter throws a runtime Exception for (optional) conversion from byte[] to CxfPayload instead of returning null when the body is not valid XML.,
0,CAMEL-10369,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Robbie Gemmell,0,3,2016-10-04 13:47:21+00:00,2017-01-18 12:03:33+00:00,"The 0.11.1 release of Qpid JMS client is now out. It adds OSGi metadata thanks to a PR from https://github.com/ctron.


I'm not familiar with karaf at all but I see use of the 'qpid-jms-client-version' and 'qpid-proton-j-version' properties from parent/pom.xml in platforms/karaf/features/src/main/resources/features.xml:



    <bundle dependency='true'>wrap:mvn:org.apache.qpid/qpid-jms-client/${qpid-jms-client-version}</bundle>
    <bundle dependency='true'>wrap:mvn:org.apache.qpid/proton-j/${qpid-proton-j-version}</bundle>




If I understand correctly that is 'wrapping' them with OSGi details due to them not previously having any themselves, in which case wrapping may no longer be required given qpid-jms-0.11.1 and proton-j 0.13.0 adding OSGi metadata.


In the same bit, I see the following netty bits listed:



    <bundle dependency='true'>mvn:io.netty/netty-resolver/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-common/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-buffer/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-transport/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-handler/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-transport-native-epoll/${netty-version}</bundle>
    <bundle dependency='true'>mvn:io.netty/netty-codec/${netty-version}</bundle>




whereas the current netty deps used by the client are actually:



netty-buffer
netty-common
netty-handler
netty-transport
netty-codec
netty-codec-http","davsclaus:1475824427:2016-10-07T15:13:47.637+0000:1475824427:2016-10-07T15:13:47.637+0000:You are welcome to do a PR with the karaf changes in the features.xml file.

You can test it by running

camel/tests/camel-itest-karaf (master)/$ ./run-tests.sh CamelAmqpTest


davsclaus:1484709682:2017-01-18T11:21:22.646+0000:1484709682:2017-01-18T11:21:22.646+0000:We have upgraded
acosentino:1484709944:2017-01-18T11:25:44.290+0000:1484709944:2017-01-18T11:25:44.290+0000:We are using different version of proton-j for bundle and jar at the moment btw
robbie:1484712213:2017-01-18T12:03:33.340+0000:1484712213:2017-01-18T12:03:33.340+0000:For what its worth a newer 0.20.0 release is currently under vote, though it moves to JMS 2.0 as well."
0,CAMEL-10368,Bug,Major,None,"2.17.4, 2.18.1, 2.19.0","
None
",Closed,Fixed,"2.17.4, 2.18.1, 2.19.0",Franz Forsthofer,Franz Forsthofer,0,2,2016-10-04 11:47:41+00:00,2016-10-04 12:13:06+00:00,"In the ZipDataForamt class you find


 final Deflater deflater = new Deflater(compressionLevel);
        final DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, new Deflater(compressionLevel));
        try 

{
            IOHelper.copy(is, zipOutput);
        }

 finally {
            IOHelper.close(is, zipOutput);


            /*



As we create the Deflater our self and do not use the stream default
(see 
{@link java.util.zip.DeflaterOutputStream#usesDefaultDeflater}
)
we need to close the Deflater to not risk a OutOfMemoryException
in native code parts (see 
{@link java.util.zip.Deflater#end}
)
            */
            deflater.end();
        }



the deflater variable should be used in the DeflaterOutputStream


final DeflaterOutputStream zipOutput = new DeflaterOutputStream(stream, deflater);","acosentino:1475553150:2016-10-04T11:52:30.910+0000:1475553197:2016-10-04T11:53:17.327+0000:Franz, since we are in the process of releasing 2.18.0, please hold on on commit new code (if it's a big refactor or a big change I mean).
forsthofer:1475553910:2016-10-04T12:05:10.381+0000:1475553910:2016-10-04T12:05:10.381+0000:Hello Andrea,

it is only a very small change. So I have committed. I hope this is no problem for you. Sorry for any inconvenience.

acosentino:1475554258:2016-10-04T12:10:58.415+0000:1475554258:2016-10-04T12:10:58.415+0000:I guess there will be problem :-)

The release was already cut, I didn't notice that we now have a camel-2.18.x branch. So it seems everything is fine :-)
acosentino:1475554386:2016-10-04T12:13:06.423+0000:1475554386:2016-10-04T12:13:06.423+0000:Sorry, there will be no problem :-D"
0,CAMEL-10367,Task,Major,2.17.3,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Robbie Gemmell,0,2,2016-10-04 11:18:53+00:00,2016-10-07 15:12:04+00:00,"I notice from http://camel.apache.org/amqp.html that camel-amqp is considered to support only AMQP 1.0 as of Camel 2.17.0. The camel-amqp module however in addition to its dependency on the newer Qpid AMQP 1.0 JMS client, continues to have a dependency on an old version of the Qpid AMQP 0-x JMS client. Since it isn't used anymore this dependency should be removed.","githubbot:1475551457:2016-10-04T11:24:17.947+0000:1475551457:2016-10-04T11:24:17.947+0000:GitHub user gemmellr opened a pull request:

    https://github.com/apache/camel/pull/1196

    CAMEL-10367: remove stale dependency from camel-amqp

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gemmellr/camel CAMEL-10367-remove-stale-dep

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1196.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1196
    
----
commit 628f1d4cf6d2b3583437b104c0d7930d7337fc6d
Author: Robert Gemmell <robbie@apache.org>
Date:   2016-10-04T11:20:28Z

    CAMEL-10367: remove stale dependency and version prop, fix a couple typos

----

robbie:1475551560:2016-10-04T11:26:00.874+0000:1475551560:2016-10-04T11:26:00.874+0000:PR raised as above to remove the dep. I also notice <qpid-bundle-version>0.28_1</qpid-bundle-version> is listed in the parent/pom.xml, and used in platforms/karaf/features/src/main/resources/bundles.properties. I'm not sure what that does/is used for so I've left it alone, but perhaps it should also be removed?
robbie:1475554437:2016-10-04T12:13:57.878+0000:1475554437:2016-10-04T12:13:57.878+0000:I'm not familiar with karaf at all, but in platforms/karaf/features/src/main/resources/features.xml I see these in the camel-amqp 'feature'. The AMQP 1.0 JMS client doesn't depend on either of these, so might they also be left over from prior use of the AMQP 0-x client?
{noformat}
    <bundle dependency='true'>mvn:commons-lang/commons-lang/${commons-lang-version}</bundle>
    <bundle dependency='true'>mvn:commons-collections/commons-collections/${commons-collections-version}</bundle>
{noformat}

githubbot:1475806585:2016-10-07T10:16:25.823+0000:1475806585:2016-10-07T10:16:25.823+0000:Github user gemmellr closed the pull request at:

    https://github.com/apache/camel/pull/1196

robbie:1475809664:2016-10-07T11:07:44.087+0000:1475809664:2016-10-07T11:07:44.087+0000:[~davsclaus] thanks for merging, I've closed the PR as requested. You can close PRs agaisnt the mirrors yourself by including ""This closes #<pr-number>"" in a commit log, e.g either using a merge commit or even editing the original. I beleive they close themselves without any message if merged while the commit would become the new head without any rebasing.

I see the fix version was updated to 2.19.0 presumably as 2.18.x had already branched, which I hadn't spotted until now, and was later started on a vote for release. Master is still versioned 2.18.0-SNAPSHOT however, can it be updated to avoid confusion? 

Any comments on the other related questions I asked? Once those are answered perhaps this could then be backported.
robbie:1475809922:2016-10-07T11:12:02.497+0000:1475809922:2016-10-07T11:12:02.497+0000:[~hekonsek], it looks like you are quite familiar with these bits, any thoughts on the earlier quesitons (or also CAMEL-10369)?"
0,CAMEL-10366,Bug,Major,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Aurelien Pupier,0,2,2016-10-04 09:00:38+00:00,2016-10-06 02:37:05+00:00,"In camel-catalog jar in org.apache.camel.catalog.models/*.json,
some of the files does not define the input/output values


list of elements for which it is missing:
beanPostProcessor, errorHandler, endpoint, streamCaching, propertiesFunction, export, restContext, propertyPlaceholder, fluentTemplate, template, consumerTemplate, camelContext, routeContext, jmxAgent, redeliveryPolicyProfile, threadPool, proxy","davsclaus:1475546854:2016-10-04T10:07:34.690+0000:1475546854:2016-10-04T10:07:34.690+0000:They are not part of <route> and EIPs. And they do not have input and ouputs.

They are the other kind of configuration you can do.
aurelien.pupier:1475549208:2016-10-04T10:46:48.468+0000:1475549208:2016-10-04T10:46:48.468+0000:if they have no input or output, shouldn't the value of input and output set to ""false"" instead of not setting any value?
davsclaus:1475650068:2016-10-05T14:47:48.402+0000:1475650068:2016-10-05T14:47:48.402+0000:We could add them and hardcode them to false, so all the model files have those attributes.

But this change may slip 2.18.0. 

If you think this makes sense to add them as false, then you are welcome to reopen the ticket.
davsclaus:1475692625:2016-10-06T02:37:05.509+0000:1475692625:2016-10-06T02:37:05.509+0000:I found some time to fix this."
0,CAMEL-10365,Bug,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Aurelien Pupier,0,2,2016-10-03 15:54:14+00:00,2016-10-06 02:37:50+00:00,"The syntax provided https://github.com/apache/camel/blob/1019bb164f4271ac4b486646da3e70a02ec44006/components/camel-consul/src/main/java/org/apache/camel/component/consul/ConsulEndpoint.java#L30 is invalid.


I suppose that the '//' need to be removed","davsclaus:1475546936:2016-10-04T10:08:56.894+0000:1475546936:2016-10-04T10:08:56.894+0000:Yes the // should be removed.
davsclaus:1475692670:2016-10-06T02:37:50.458+0000:1475692670:2016-10-06T02:37:50.458+0000:I found some time to fix this on an airplane"
0,CAMEL-10364,Bug,Minor,2.18.0,None,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Aurelien Pupier,0,2,2016-10-03 15:44:58+00:00,2016-10-06 02:37:32+00:00,"(the camel-chronicle component is missing in JIRA)


https://github.com/apache/camel/blob/2bbc1368b233f630f6acbf6d6c8d52ec5f1d1772/components/camel-chronicle/src/main/java/org/apache/camel/component/chronicle/engine/ChronicleEngineEndpoint.java#L31


syntax = ""chronicle-engine:addresses/path"" --> addresses does not exist",davsclaus:1475692651:2016-10-06T02:37:31.837+0000:1475692651:2016-10-06T02:37:31.837+0000:I found some time to fix this on an airplane
0,CAMEL-10363,Bug,Minor,2.18.0,,"
None
",Resolved,Won't Fix,None,Unassigned,Claus Ibsen,0,2,2016-10-02 05:06:33+00:00,2017-03-14 06:47:44+00:00,"Sadly it seems redis is locked down to version 1.7.12 of slf4j, and not just 1.7.x etc.



karaf@root()> feature:install camel-spring-redis
Error executing command: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-spring-redis; type=karaf.feature; version=""[2.18.0.SNAPSHOT,2.18.0.SNAPSHOT]""; filter:=""(&(osgi.identity=camel-spring-redis)(type=karaf.feature)(version>=2.18.0.SNAPSHOT)(version<=2.18.0.SNAPSHOT))"" [caused by: Unable to resolve camel-spring-redis/2.18.0.SNAPSHOT: missing requirement [camel-spring-redis/2.18.0.SNAPSHOT] osgi.identity; osgi.identity=slf4j.api; type=osgi.bundle; version=""[1.7.12,1.7.12]""; resolution:=mandatory [caused by: Unable to resolve slf4j.api/1.7.12: missing requirement [slf4j.api/1.7.12] osgi.wiring.package; filter:=""(&(osgi.wiring.package=org.slf4j.impl)(version>=1.6.0))""]]","davsclaus:1475356036:2016-10-02T05:07:16.215+0000:1475356198:2016-10-02T05:09:58.500+0000:Yeah its an issue in spring-redis

	org.slf4j;version=""[1.7.12, 1.7.12]"",
davsclaus:1475356545:2016-10-02T05:15:45.693+0000:1475356545:2016-10-02T05:15:45.693+0000:Logged a ticket
https://jira.spring.io/browse/DATAREDIS-558
davsclaus:1477742605:2016-10-29T20:03:25.699+0000:1477742605:2016-10-29T20:03:25.699+0000:Should be fixed in Spring Data Redis 1.7.5
davsclaus:1478247204:2016-11-04T16:13:24.939+0000:1478247204:2016-11-04T16:13:24.939+0000:This requires Karaf to provide slf4j 1.7.21 or better. 

davsclaus:1478247531:2016-11-04T16:18:51.944+0000:1478247531:2016-11-04T16:18:51.944+0000:[~jbonofre] can we get pax-logging to support newer slf4j-api?

The latest 1.9.1 release only supports
{code}
        org.slf4j.spi;uses:=org.slf4j;provider=paxlogging;version=1.7.13,
	org.slf4j.spi;provider=paxlogging;version=1.7.7,
	org.slf4j.spi;provider=paxlogging;version=1.7.1,
	org.slf4j.spi;provider=paxlogging;version=1.6.6,
	org.slf4j.spi;provider=paxlogging;version=1.5.11,
	org.slf4j.spi;provider=paxlogging;version=1.4.3,
{code}

Where 1.7.13 is the highest version.
jbonofre:1478247812:2016-11-04T16:23:32.850+0000:1478247812:2016-11-04T16:23:32.850+0000:Good idea. I will.
davsclaus:1479692279:2016-11-21T09:37:59.927+0000:1479692279:2016-11-21T09:37:59.927+0000:[~jbonofre] did you implement this in karaf? And is there a KARAF ticket we can link to?
davsclaus:1483575910:2017-01-05T08:25:10.173+0000:1483575910:2017-01-05T08:25:10.173+0000:This is a Karaf issue. It should expose more versions of slf4j.
davsclaus:1489039275:2017-03-09T14:01:15.699+0000:1489039275:2017-03-09T14:01:15.699+0000:The Karaf team wont fix it in timely manner, so lets just give up"
0,CAMEL-10362,Test,Minor,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Nicola Ferraro,Claus Ibsen,0,2,2016-10-01 18:24:19+00:00,2016-10-26 09:53:57+00:00,"CamelNagiosTest
CamelJiraTest


fails locally if you run them in


tests/camel-itest-spring-boot","davsclaus:1475317483:2016-10-01T18:24:43.298+0000:1475317483:2016-10-01T18:24:43.298+0000:Nicola, I wonder if you get these errors also?
nferraro:1475707853:2016-10-06T06:50:53.768+0000:1475707853:2016-10-06T06:50:53.768+0000:I missed it. Checking now.
nferraro:1475708979:2016-10-06T07:09:39.158+0000:1475708979:2016-10-06T07:09:39.158+0000:[~davsclaus] no problems with these tests now."
0,CAMEL-10361,Task,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Thomas Diesler,0,2,2016-09-30 12:41:43+00:00,2016-09-30 13:40:54+00:00,No Desc,"githubbot:1475210574:2016-09-30T12:42:54.438+0000:1475210574:2016-09-30T12:42:54.438+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1194

    [CAMEL-10361] Expose cassandra-unit version through BOM

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10361

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1194.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1194
    
----
commit cc6f5a802ccecaa2ab2bd0f14ca96c208ecf999e
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-09-30T12:42:25Z

    [CAMEL-10361] Expose cassandra-unit version through BOM

----

githubbot:1475213981:2016-09-30T13:39:41.920+0000:1475213981:2016-09-30T13:39:41.920+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1194
"
0,CAMEL-10360,Bug,Minor,"2.17.3, 2.18.1",,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Gijsbert van den Brink,0,2,2016-09-30 10:00:02+00:00,2019-08-06 08:25:26+00:00,"We're occasionally seeing the following Mina exception on our production environment: ""IllegalStateException: doDecode() can't return true when buffer is not consumed."" (full stack trace below)


I haven't been able to reproduce the issue, and I don't fully understand the problem, but I think it's caused by duplicate messages (or specifically duplicate end byte markers) in the Mina IoBuffer that is read by Camel's HL7MLLPDecoder.


Full stack trace (with truncated hex dump):


org.apache.camel.CamelExchangeException: Error occurred in ResponseHandler. Exchange[ID-prdvpn01-zd-messaging-37296-1475153396916-0-335909]. Caused by: [org.apache.mina.filter.codec.ProtocolDecoderException - java.lang.IllegalStateException: doDecode() can't return true when buffer is not consumed. (Hexdump: 0B 4D 53 48 ... 0D 1C 0D 0B 4D 53 48 ... 0D 1C 0D)]
	at org.apache.camel.component.mina2.Mina2Producer.doProcess(Mina2Producer.java:178)
	at org.apache.camel.component.mina2.Mina2Producer.process(Mina2Producer.java:116)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:681)
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:609)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:238)
	at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:170)
	at org.apache.camel.processor.RecipientList.process(RecipientList.java:131)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:91)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:112)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:721)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:681)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:651)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:315)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:233)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1158)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1150)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1047)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: org.apache.mina.filter.codec.ProtocolDecoderException: java.lang.IllegalStateException: doDecode() can't return true when buffer is not consumed. (Hexdump: 0B 4D 53 48 ... 0D 1C 0D 0B 4D 53 48 ... 0D 1C 0D)
	at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:240)
	at org.apache.mina.core.filterchain.DefaultIoFilterChain.callNextMessageReceived(DefaultIoFilterChain.java:542)
	at org.apache.mina.core.filterchain.DefaultIoFilterChain.access$1300(DefaultIoFilterChain.java:48)
	at org.apache.mina.core.filterchain.DefaultIoFilterChain$EntryImpl$1.messageReceived(DefaultIoFilterChain.java:947)
	at org.apache.mina.core.filterchain.IoFilterEvent.fire(IoFilterEvent.java:74)
	at org.apache.mina.core.session.IoEvent.run(IoEvent.java:63)
	at org.apache.mina.filter.executor.OrderedThreadPoolExecutor$Worker.runTask(OrderedThreadPoolExecutor.java:770)
	at org.apache.mina.filter.executor.OrderedThreadPoolExecutor$Worker.runTasks(OrderedThreadPoolExecutor.java:762)
	at org.apache.mina.filter.executor.OrderedThreadPoolExecutor$Worker.run(OrderedThreadPoolExecutor.java:704)
	... 1 common frames omitted
Caused by: java.lang.IllegalStateException: doDecode() can't return true when buffer is not consumed.
	at org.apache.mina.filter.codec.CumulativeProtocolDecoder.decode(CumulativeProtocolDecoder.java:184)
	at org.apache.mina.filter.codec.ProtocolCodecFilter.messageReceived(ProtocolCodecFilter.java:231)
	... 9 common frames omitted","vandenbrink@zorgdomein.nl:1482998134:2016-12-29T15:55:34.587+0000:1482998134:2016-12-29T15:55:34.587+0000:So I finally spent some time reproducing this in a unit test, I've attached the result.

The test runs a couple of times, because I actually see 3 different failures (and sometimes it passes):
1. java.lang.IllegalStateException: doDecode() can't return true when buffer is not consumed
2. org.apache.camel.ExchangeTimedOutException: The OUT message was not received within: 30000 millis
3. java.lang.AssertionError: expected:<MSH|^~\&|||||201609301101||ACK||P|2.4||> but was:<null>

I still don't have a clue on how to fix this btw.

davsclaus:1517533272:2018-02-02T09:01:12.828+0000:1517533272:2018-02-02T09:01:12.828+0000:I suggest to use the newer camel-mllp component which is more hardened"
0,CAMEL-10359,Bug,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2016-09-30 02:32:25+00:00,2016-09-30 02:42:52+00:00,The test fails since the XmlRestProcessor is missing a case for QUERY_ALL enum in processRequest().,dhirajsb:1475174572:2016-09-30T02:42:52.608+0000:1475174572:2016-09-30T02:42:52.608+0000:Resolved with https://github.com/apache/camel/commit/9c4449c093ecfd5948747b710365925ed7056d71
0,CAMEL-10358,New Feature,Major,None,2.18.1,"
None
",Resolved,Implemented,2.18.1,Nicola Ferraro,Claus Ibsen,0,4,2016-09-29 17:47:27+00:00,2016-10-26 09:53:17+00:00,"We should find out if spring boot live reload (dev tools) work well with camel-spring-boot
http://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-devtools.html


Maybe there is a bug/issue somewhere or some limitations. But it would be good to try this from an example and see what works or not. And if possible fix this in camel-spring-boot so we can support super fast development experience.","githubbot:1475716681:2016-10-06T09:18:01.764+0000:1475716681:2016-10-06T09:18:01.764+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1199

    CAMEL-10358: do not clear the registry too early

    When running on Spring, the `doStop` is called by the spring framework before the default strategy unregisters the consumers, so the registry is cleared and the undertow servers remain bound to their port when the context is closed.
    
    We should not clear the registry (change added in https://github.com/apache/camel/commit/cdd64e10a6c761ccfba4b6d605c53df1250bb9eb) because it is automatically cleared when the last consumer is unregistered.
    
    This issue prevent using livereload with undertow (port already used). I'm working on a feature for dynamically changing the configuration on Kubernetes that is also be impacted.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10358

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1199.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1199
    
----
commit 537642b594bc24f8e3ae98897bf409e1ad4fa4b4
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-10-06T09:11:59Z

    CAMEL-10358: do not clear the registry too early

----

githubbot:1475801195:2016-10-07T08:46:35.081+0000:1475801195:2016-10-07T08:46:35.081+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1199

nferraro:1475801587:2016-10-07T08:53:07.632+0000:1475801587:2016-10-07T08:53:07.632+0000:Fixed the undertow component and backported the change into 2.18.x for version 2.18.1.
nferraro:1477446797:2016-10-26T09:53:17.050+0000:1477446797:2016-10-26T09:53:17.050+0000:Added example in master and 2.18.x branches."
0,CAMEL-10327,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.19.0,Fabrizio Spataro,Fabrizio Spataro,0,3,2016-09-17 13:57:31+00:00,2016-10-17 11:40:05+00:00,"Hello,


the main idea is to create a producer to run queries on the apache drill cluster. Can i start to develop this ""simple"" producer?


kings regards","acosentino:1474239572:2016-09-19T06:59:32.376+0000:1474239572:2016-09-19T06:59:32.376+0000:Good idea.
githubbot:1476408071:2016-10-14T09:21:11.613+0000:1476408071:2016-10-14T09:21:11.613+0000:GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1211

    Camel 10327, New Apache drill component

    https://issues.apache.org/jira/browse/CAMEL-10327

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-10327

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1211.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1211
    
----
commit 59e1110eca2c912f9e4baa30a7d08368be03ebe7
Author: Fabryprog <fabryprog@gmail.com>
Date:   2016-09-25T21:34:26Z

    CAMEL-10327, Apache Drill component

commit c6444a928797d9aa55002f61362b86d5efaa95e6
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-27T06:22:23Z

    CAMEL-10327, fix doc

commit 9e1cc40f0a3a71e2dfa3b21a63ffee380b9773a0
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-10-13T15:03:48Z

    Merge branch 'master' of https://github.com/Fabryprog/camel into CAMEL-10327

commit 9fb6b99e948747ab934d6e870cae873947f28e2a
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-10-14T09:19:33Z

    CAMEL-10327, new component apache-drill

----

githubbot:1476675605:2016-10-17T11:40:05.301+0000:1476675605:2016-10-17T11:40:05.301+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1211
"
0,CAMEL-10326,Bug,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-09-16 10:02:48+00:00,2016-09-16 10:06:07+00:00,No Desc,
0,CAMEL-10325,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-09-16 09:14:58+00:00,2016-09-16 09:50:22+00:00,No Desc,
0,CAMEL-10324,New Feature,Minor,None,None,"
None
",Resolved,Fixed,"3.0.0-M3, 3.0.0",Andrea Cosentino,Luca Burgazzoli,0,1,2016-09-16 05:34:32+00:00,2019-05-29 09:37:12+00:00,"Data format for CBOR
See http://cbor.io/",
0,CAMEL-10323,Improvement,Major,"2.17.2, 2.17.3",2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Vladimir Dzalbo,0,2,2016-09-15 16:38:09+00:00,2016-10-08 01:32:48+00:00,"Trying to use Camel in environment with unstable network came with following problem: when Camel context starts up with network not being available no matter what retry settings are set, the creation of the producer will fail, which will also by default mean failure in the creation of context.


It would be good if behavior was similar to other components (like mina or netty), where producer tries to establish connection when it has a message to send (or periodically?)  


So, once network connection is created (maybe hours or days after creation) endpoint would be functional and all messages can be delivered given  Guaranteed Delivery pattern is used.


Can we avoid fatal exception on creation of the Endpoint?",davsclaus:1475861568:2016-10-08T01:32:48.594+0000:1475861568:2016-10-08T01:32:48.594+0000:There is a new lazySessionCreation option on the producer like mina/netty that is default true
0,CAMEL-10322,Bug,Minor,2.16.3,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Flavel Heyman,0,4,2016-09-15 15:24:32+00:00,2016-10-24 07:22:18+00:00,"Choice seems to break advice because it is trying to add a task to an abstract array list? (AdviceWithTasks::line 151);


Somewhat related to: https://issues.apache.org/jira/browse/CAMEL-8798


Attached is example of advice breaking.","flavouski:1473924308:2016-09-15T15:25:08.269+0000:1473924308:2016-09-15T15:25:08.269+0000:Attached Test
davsclaus:1475861846:2016-10-08T01:37:26.360+0000:1475861846:2016-10-08T01:37:26.360+0000:Can you try with latest Camel release. And if possible create an unit test in Java code.
githubbot:1477033357:2016-10-21T15:02:37.073+0000:1477033357:2016-10-21T15:02:37.073+0000:GitHub user aldettinger opened a pull request:

    https://github.com/apache/camel/pull/1220

    Added a test class to ensure CAMEL-10322 non-regression

    Hi,
    
      In the context of [CAMEL-10322](https://issues.apache.org/jira/browse/CAMEL-10322), I have implemented a test reproducing the issue on 2.16.3 and demonstrating the issue correction at least in 2.19.0-SNAPSHOT.
    
      On my machine, I could run commands above against camel-core:
      mvn clean compile -P sourcecheck => ok
      mvn install => ok
    
      I could manage the JIRA issue but I don't have permission yet. Could someone bring me in ?
    
    Many thanks

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aldettinger/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1220.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1220
    
----
commit 3becd4acb692fa9400185638f3a6dca8f501922a
Author: aldettinger <aldettinger@gmail.com>
Date:   2016-10-21T14:44:04Z

    Added a test class to ensure CAMEL-10322 non-regression

----

githubbot:1477146863:2016-10-22T22:34:23.375+0000:1477146863:2016-10-22T22:34:23.375+0000:Github user aldettinger closed the pull request at:

    https://github.com/apache/camel/pull/1220

aldettinger:1477147657:2016-10-22T22:47:37.862+0000:1477147657:2016-10-22T22:47:37.862+0000:In my opinion, this ticket could be closed. I would be glad to do it, but I don't have permissions.
davsclaus:1477264937:2016-10-24T07:22:17.923+0000:1477264937:2016-10-24T07:22:17.923+0000:Thanks for the PR and testing it on branches.

Camel 2.16.x is EOL"
0,CAMEL-10321,New Feature,Major,None,None,"
None
",Resolved,Fixed,None,Fabrizio Spataro,Fabrizio Spataro,0,4,2016-09-15 12:33:41+00:00,2016-09-21 14:04:14+00:00,"Hello,


i wrote a component to send and receive event from an asterisk VOIP server.


Can i send my PR? Is it compatible with apache camel code license?


King Regard","davsclaus:1473915103:2016-09-15T12:51:43.299+0000:1473915103:2016-09-15T12:51:43.299+0000:There is a guide here how to add a new component
http://camel.apache.org/add-new-component-guide.html

The license which can NOT be accepted is
http://www.apache.org/legal/resolved.html#category-x
fabryprog:1473915541:2016-09-15T12:59:01.215+0000:1473915541:2016-09-15T12:59:01.215+0000:This is my component's summary :
 - lib: https://github.com/asterisk-java/asterisk-java (Apache License, Version 2.0.)
 - Producer
     - send action: 'QueueStatus', 'SipPeers', 'ExtensionState'
 - Consumer is an Asterisk Manager Interface (AMI) Event Listener

is it ok?

Naturally next step will be extend functionalities!
davsclaus:1473915861:2016-09-15T13:04:21.145+0000:1473915861:2016-09-15T13:04:21.145+0000:Yes the Apache License is accepted.
acosentino:1473915985:2016-09-15T13:06:25.946+0000:1473915985:2016-09-15T13:06:25.946+0000:Just send your PR and we will review it :-)
fabryprog:1473919687:2016-09-15T14:08:07.119+0000:1473919687:2016-09-15T14:08:07.119+0000:Can i have a guide to write documentation (adoc file?)
acosentino:1473919865:2016-09-15T14:11:05.718+0000:1473919865:2016-09-15T14:11:05.718+0000:Just take the other components as example.

Remember the automatic docs generation is now using placeholders for component options and endpoint options.
fabryprog:1474035562:2016-09-16T22:19:22.823+0000:1474035562:2016-09-16T22:19:22.823+0000:Hello,

I just finished writing tests and documentation.

I am ready for send PR but I would wait to get back in the office (monday morning) to test component with own asterisk server.

Good Night

Fabrizio
githubbot:1474251493:2016-09-19T10:18:13.667+0000:1474251493:2016-09-19T10:18:13.667+0000:GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1180

    Camel 10321

    https://issues.apache.org/jira/browse/CAMEL-10321

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-10321

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1180.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1180
    
----
commit 5a198305600d62a88030d9649a1b9b45517e86a6
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-15T16:08:23Z

    CAMEL-10321, camel-asterisk component (without test and doc)

commit dad6af0e7333e1566fd573d8a0bd18e7aa318fa3
Author: Fabryprog <fabryprog@gmail.com>
Date:   2016-09-16T21:25:59Z

    CAMEL-10321, Asterisk Component: test added

commit ff16f2838d29171c8006e6b427acee48b9b7db96
Author: Fabryprog <fabryprog@gmail.com>
Date:   2016-09-16T22:15:14Z

    CAMEL-10321, Asterisk Component: documentation adoc

commit 9c0d3a1318f3cd88d3abb9f6d35838faa6a7acec
Author: Fabryprog <fabryprog@gmail.com>
Date:   2016-09-16T22:22:46Z

    CAMEL-10321, Asterisk Component: fix rename class

----

githubbot:1474437854:2016-09-21T14:04:14.529+0000:1474437854:2016-09-21T14:04:14.529+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1180
"
0,CAMEL-10320,New Feature,Major,None,2.20.0,"

clustering

",Resolved,Fixed,2.20.0,Dhiraj Sureshkumar Bokde,Luca Burgazzoli,3,5,2016-09-15 07:53:29+00:00,2017-09-27 14:20:11+00:00,"I've been working on some master/slave RoutePolicy and I'm wondering
if we can have a proper LeaderPolicy with a standardized
implementation in Camel 3.0 so one has only to notify when a
leadership is taken


In addition it may be nice to have:



a support for Leader election from the CmelContext so the routes are
started when the context become leader.
an option to warm-up routes or to keep them stopped while not leader



Then we can also make it exposed in JMX so tooling are able to detect
which are current master and slaves, and whatnot.


Some possible DSL/EIP extensions:



from(""..."")
    .routeId(""myRoute"")
    .master() 
        .group(""my-group"")
        .consulConfiguration(""http://consul-node:8500"")
        .end()
    . to(...)





camelContext.setDefaultClusteredRouteConfiguration(
    ClusteredRouteConfiguration.builder()
        .withAction(ClusteredRouteAction.SUSPEND)
        .withHealtCheck(...)
        .consulConfiguration(""http://consul-node:8500"")
        .build()
);
  
// lookup the cluster configuration from the registry   
from(""clustered:file:/data"")
    .routeId(""data-files"")
    .to(...)

// lookup the cluster configuration from the registry  
from(""master:file:/share"")
    .routeId(""shared-files"")
    .master()
        .configuration(""..."")
        .end()
    .to(...)





<camelContext .../>
    <defaultMasterConfiguration/>
        <consulConfiguration url="""" userName="""" password=""""/>
    <defaultMasterConfiguration/>

    <masterConfiguration id=""master-1""/>
        <consulConfiguration url="""" userName="""" password=""""/>
    <masterConfiguration/>

    <!-- 
        this route should pick up the default configuration 
    -->
    <route id=""data-files"">
        <from uri=""master:file:/data""/>
        <to uri=""...""/>
    <route>

   <!-- 
        this route should pick up the configuration named 
        master-1 and the master prefix should be optional.
    -->
   <route id=""shared-files"">
        <from uri=""file:/shared""/>
        <master configurationRef=""master-1""/>
        <to uri=""...""/>
    <route>
</camelContext>","lb:1477546001:2016-10-27T13:26:41.867+0000:1477546035:2016-10-27T13:27:15.163+0000:It would also be worth adding an an hook for Camel Health API so that the leadership could be released or attempts to take it should be stopped if camel detect it is not more health 
lb:1490834821:2017-03-30T08:47:01.938+0000:1490834821:2017-03-30T08:47:01.938+0000:It would also be worth adding a concept of ""Route Group"" so that we can have a number that makes a service and if one is not healthy we can stop them all
lb:1495759120:2017-05-26T08:38:40.610+0000:1495759120:2017-05-26T08:38:40.610+0000:As the cluster configuration is similar to the ServiceCall configuration, we could create a base configuration class for etcd/consul/kubernetes/jgroups etc.
lb:1496093725:2017-05-30T05:35:25.146+0000:1496098891:2017-05-30T07:01:31.185+0000:[~dhirajsb] I've started working on CAMEL-11362 as there is a wider need than for route policies only for leader elections stuffs so for this JIRA it would be nice to have the new re-factored master and its pluggable strategy which can the leverage CAMEL-11362. 

I'll take care of the DSL too as it is required as part of the CAMEL-11362 and it has impact on the Service Call EIP configuration.
dhirajsb:1496354279:2017-06-02T05:57:59.558+0000:1496354279:2017-06-02T05:57:59.558+0000:[~lb], I'll push the new master component early next week. 
dhirajsb:1496796866:2017-06-07T08:54:26.082+0000:1496796866:2017-06-07T08:54:26.082+0000:[~lb], an initial version of the master component is at https://github.com/dhirajsb/camel/tree/CAMEL-10320. I haven't had the chance to finish the memory based clustering implementation (which is turning out to be a bit more work), so it doesn't have tests yet. 
You can start work on the DSL bits. I think it's better to create generic DSL bits for the master component, configured with clustering implementation specific builders (pseudo DSL) as building a configuration object doesn't require a DSL. 
lb:1497599075:2017-06-16T15:44:35.828+0000:1497599075:2017-06-16T15:44:35.828+0000:[~dhirajsb] 

as part of another effort, I've recently merged some interfaces in camel-core that are quite similar to those you have in your branch, see:
- https://github.com/apache/camel/tree/master/camel-core/src/main/java/org/apache/camel/ha
- https://github.com/apache/camel/tree/master/camel-core/src/main/java/org/apache/camel/impl/ha

So it would be nice if you can use them as they are the foundation for more more enhancement on the clustering side, for some examples on how to use them, see:
- https://github.com/apache/camel/tree/master/components/camel-atomix/src/main/java/org/apache/camel/component/atomix/ha
- https://github.com/apache/camel/tree/master/components/camel-atomix/src/test/java/org/apache/camel/component/atomix/ha

Of course they may need some refinements.
I will start the DSL effort as soon as I have more component/policies ported to the new APIs so we can have a better knowledge about the requirements.


davsclaus:1504840134:2017-09-08T11:08:54.408+0000:1504840134:2017-09-08T11:08:54.408+0000:I suggest to move this to 2.21
lb:1505807273:2017-09-19T15:47:53.067+0000:1505807273:2017-09-19T15:47:53.067+0000:[~dhirajsb] did you made any progress on porting your master component to use core apis ?
lb:1505898020:2017-09-20T17:00:20.062+0000:1505898020:2017-09-20T17:00:20.062+0000:Going to have a look and see if I can make it for 2.20.x"
0,CAMEL-10319,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Fabrizio Spataro,0,2,2016-09-14 13:41:59+00:00,2016-09-15 08:55:43+00:00,"Hello,


I have already developed a SNMP Producer to send snmp packet.


I am sending the PR


Fabrizio","githubbot:1473834900:2016-09-14T14:35:00.745+0000:1473834900:2016-09-14T14:35:00.745+0000:GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1177

    Camel 10319

    https://issues.apache.org/jira/browse/CAMEL-10319

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-10319

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1177.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1177
    
----
commit df323ea0ae5c622e8c0deb391a54d307058a3000
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-14T14:09:19Z

    insert a new SnmpProducer

commit fba981f9e19b39ae97560d62dfe7b274ee405b37
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-14T14:09:31Z

    insert a new SnmpProducer

commit 5367cae2260724c7d4cc05d433b85e259794dad1
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-14T14:25:18Z

    refactoring + documentation

commit d9e46e0cd3a776f0ce0d4d9e6f8dce136f2e9a2e
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-14T14:33:25Z

    fix documentation

----

githubbot:1473900943:2016-09-15T08:55:43.239+0000:1473900943:2016-09-15T08:55:43.239+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1177
"
0,CAMEL-10318,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Antonin Stefanutti,Antonin Stefanutti,0,1,2016-09-14 08:13:59+00:00,2016-09-14 08:34:46+00:00,No Desc,
0,CAMEL-10317,New Feature,Minor,2.17.3,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Kiran G,0,2,2016-09-13 15:02:26+00:00,2016-09-15 03:08:34+00:00,"At present Olingo2 component only supports configuring Http Asynchronous Client. Asynchronous client lagging behind in feature wrt features (but steadily catching up). Using Synchronous client makes debugging issues easier. Also, this will make things easier for those using ThreadLocals. 


The proposed change provides an option to the user to choose between Synchronous and Asynchronous client while keeping the Asynchronous client as default and keeping the existing functionality intact.","githubbot:1473750574:2016-09-13T15:09:34.456+0000:1473750574:2016-09-13T15:09:34.456+0000:GitHub user kiransg opened a pull request:

    https://github.com/apache/camel/pull/1173

    CAMEL-10317: Added support to use Http synchronous client with Olingo…

    …2 Component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Infosys/camel CAMEL-10317

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1173.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1173
    
----
commit 4ffb337a646e6c4a248041afc29da5cb3c5eb9dc
Author: Kiran Govindaiah <kiran_govindaiah@infosys.com>
Date:   2016-09-13T15:05:34Z

    CAMEL-10317: Added support to use Http synchronous client with Olingo2 Component

----

kiransg:1473750687:2016-09-13T15:11:27.724+0000:1473750687:2016-09-13T15:11:27.724+0000:I have submitted pull request in github. Please check.
https://github.com/apache/camel/pull/1173

githubbot:1473830384:2016-09-14T13:19:44.086+0000:1473830384:2016-09-14T13:19:44.086+0000:GitHub user kiransg opened a pull request:

    https://github.com/apache/camel/pull/1176

    CAMEL-10317: Added support to use Http synchronous client with Olingo…

    …2 Component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Infosys/camel CAMEL-10317-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1176.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1176
    
----
commit 8672609245fac6db5c66a8271faf9865dffaae57
Author: Kiran Govindaiah <kiran_govindaiah@infosys.com>
Date:   2016-09-14T13:16:22Z

    CAMEL-10317: Added support to use Http synchronous client with Olingo2 Component

----

githubbot:1473880107:2016-09-15T03:08:27.938+0000:1473880107:2016-09-15T03:08:27.938+0000:Github user kiransg closed the pull request at:

    https://github.com/apache/camel/pull/1176

githubbot:1473880114:2016-09-15T03:08:34.210+0000:1473880114:2016-09-15T03:08:34.210+0000:Github user kiransg closed the pull request at:

    https://github.com/apache/camel/pull/1173
"
0,CAMEL-10316,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Antonin Stefanutti,Antonin Stefanutti,0,1,2016-09-13 12:02:30+00:00,2016-09-13 12:02:41+00:00,No Desc,
0,CAMEL-10315,Bug,Minor,2.17.0,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Cetra Free,0,2,2016-09-13 08:33:10+00:00,2016-12-06 08:56:19+00:00,"Not sure if this one has been logged.


I have seen the following chats which describe this behaviour, but it's hard to reliably replicate.  It seems to be a race condition or a timeout being hit on starting a camel context:


http://grokbase.com/t/camel/users/135qqay2x1/prevent-camelcontext-from-shutting-down-in-blueprint


http://camel.465427.n5.nabble.com/Upgrade-Camel-2-10-1-2-11-0-Camel-keeps-restarting-td5731854.html


Basically the steps to replicate are:



Deploy a blueprint.xml file to the karaf deploy directory, which has the following:

<cm:property-placeholder persistent-id=""user.example"" update-strategy=""reload"" />






Notice that karaf will continuously reload the camel blueprint.","davsclaus:1478319706:2016-11-05T12:21:46.012+0000:1478319706:2016-11-05T12:21:46.012+0000:Try with latest version of Karaf / Camel. 

cetra3:1480886983:2016-12-05T05:29:43.950+0000:1480886983:2016-12-05T05:29:43.950+0000:Tried this with 4.0.7. It appears as though it's been resolved based upon initial testing
davsclaus:1480985778:2016-12-06T08:56:18.867+0000:1480985778:2016-12-06T08:56:18.867+0000:Thanks"
0,CAMEL-10314,Task,Major,None,,"
None
",Resolved,Not A Problem,None,Andrea Cosentino,Fabrizio Spataro,0,2,2016-09-13 08:16:43+00:00,2016-09-13 09:14:56+00:00,"Hello, i am using master source. 


When i execute mvn clean install -Pfastinstall i have an error


<pre>
[INFO] — maven-bundle-plugin:3.2.0:manifest (bundle-manifest) @ camel-jsch —
[WARNING] Manifest org.apache.camel:camel-jsch:jar:2.18.0-SNAPSHOT : Unused Import-Package instructions: [org.springframework.ws.*, org.springframework.xml.*, org.springframework.*, org.apache.commons.logging.*, org.apache.cxf.*, org.apache.qpid.*, org.apache.abdera.*, org.apache.commons.httpclient.*, org.apache.velocity.*, org.apache.xmlbeans.*, org.eclipse.jetty.*, com.thoughtworks.xstream.*, org.antlr.stringtemplate.*, org.ccil.cowan.tagsoup.*, org.mortbay.cometd.*, net.sf.flatpack.*, net.sf.saxon.*, freemarker.*, javax.persistence.*, org.apache.lucene.*, org.apache.solr.*] 
[INFO] 
[INFO] — camel-package-maven-plugin:2.18.0-SNAPSHOT:validate-components (validate) @ camel-jsch —
[WARNING] The component: scp has validation errors
[WARNING] Missing endpoint documentation for the following options:
	host
	port
	directoryName
	disconnect
	disconnectOnBatchComplete
	fileName
	flatten
	allowNullBody
	connectTimeout
	soTimeout
	timeout
	password
	username
</pre>


king regards


fabryprog","acosentino:1473727054:2016-09-13T08:37:34.804+0000:1473727054:2016-09-13T08:37:34.804+0000:You need to run the entire installation of all camel to get a complete SNAPSHOT.

Try to run mvn clean install -DskipTests from the project root and after that try again mvn -Pfastinstall from camel-jsch
fabryprog:1473729296:2016-09-13T09:14:56.371+0000:1473729296:2016-09-13T09:14:56.371+0000:Thanks andrea!"
0,CAMEL-10313,Bug,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-09-12 15:34:16+00:00,2016-09-15 13:14:11+00:00,"Caused by:
java.lang.ClassCastException: org.apache.jasper.compiler.TldCache cannot be cast to org.apache.jasper.compiler.TldCache
	at org.apache.jasper.compiler.TldCache.getInstance(TldCache.java:59)
	at org.apache.jasper.EmbeddedServletOptions.<init>(EmbeddedServletOptions.java:807)
	at org.apache.jasper.servlet.JspServlet.init(JspServlet.java:116)",davsclaus:1473916405:2016-09-15T13:13:25.047+0000:1473916405:2016-09-15T13:13:25.047+0000:Okay it was camel-servlet that has a bunch of unwanted dependencies at runtime scoped that was pulled in by mistake.
0,CAMEL-10312,Bug,Major,None,None,"
None
",Resolved,Fixed,2.17.4,Andrea Cosentino,Thomas Diesler,0,3,2016-09-12 11:46:12+00:00,2016-09-12 12:52:57+00:00,"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.5.1:compile (default-compile) on project camel-jetty-common: Compilation failure: Compilation failure:
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[66,31] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: package org.eclipse.jetty.client
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[67,36] error: package org.eclipse.jetty.client.http does not exist
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelHttpClient.java:[25,31] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: package org.eclipse.jetty.client
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[708,12] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: class JettyHttpComponent
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[722,61] error: cannot find symbol
[ERROR] symbol:   class HttpClientTransport
[ERROR] location: class JettyHttpComponent
[ERROR] /Users/tdiesler/git/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/CamelHttpClient.java:[37,27] error: cannot find symbol
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :camel-jetty-common","tdiesler:1473652029:2016-09-12T11:47:09.332+0000:1473652029:2016-09-12T11:47:09.332+0000:{code}
$ mvn -version
Apache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T17:41:47+01:00)
Maven home: /usr/local/java/apache-maven
Java version: 1.8.0_92, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home/jre
Default locale: en_US, platform encoding: UTF-8
OS name: ""mac os x"", version: ""10.11.6"", arch: ""x86_64"", family: ""mac""
{code}
acosentino:1473653433:2016-09-12T12:10:33.241+0000:1473653433:2016-09-12T12:10:33.241+0000:I think it comes from this commit:

https://github.com/apache/camel/commit/36275beeef9ef989b0faecfe909b4ff44bcc98af
davsclaus:1473654109:2016-09-12T12:21:49.965+0000:1473654109:2016-09-12T12:21:49.965+0000:Ah Andrea can you revert that commit
acosentino:1473654384:2016-09-12T12:26:24.706+0000:1473654384:2016-09-12T12:26:24.706+0000:Sure :-)
acosentino:1473655977:2016-09-12T12:52:57.604+0000:1473655977:2016-09-12T12:52:57.604+0000:Done! Thanks Thomas for spotting this!"
0,CAMEL-10311,Task,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Thomas Diesler,0,2,2016-09-12 10:26:22+00:00,2016-09-12 10:57:38+00:00,No Desc,"githubbot:1473647358:2016-09-12T10:29:18.854+0000:1473647358:2016-09-12T10:29:18.854+0000:GitHub user tdiesler opened a pull request:

    https://github.com/apache/camel/pull/1170

    [CAMEL-10311] Comprehensively define lucene artefacts used by elastic…

    …search

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tdiesler/camel CAMEL-10311

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1170.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1170
    
----
commit 29d46f9dcf4c83817dee12e542536f186090b014
Author: Thomas Diesler <thomas.diesler@jboss.com>
Date:   2016-09-12T10:27:05Z

    [CAMEL-10311] Comprehensively define lucene artefacts used by elasticsearch

----

githubbot:1473649011:2016-09-12T10:56:51.212+0000:1473649011:2016-09-12T10:56:51.212+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1170
"
0,CAMEL-10310,Bug,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Unassigned,Thomas Diesler,0,1,2016-09-12 10:18:26+00:00,2016-09-15 14:26:30+00:00,"Elastic search asserts the current Lucene version like this



    public static final Version V_2_3_1 = new Version(V_2_3_1_ID, false, org.apache.lucene.util.Version.LUCENE_5_5_0);

    public static final Version CURRENT = V_2_3_1;

    static {
        assert CURRENT.luceneVersion.equals(Lucene.VERSION) : ""Version must be upgraded to ["" + Lucene.VERSION + ""] is still set to ["" + CURRENT.luceneVersion + ""]"";
    }




which effectively means that no other Lucene version is accepted but 5.5.0


Camel now integrates lucene-5.5.3 as part of this commit, which then leads to



11:54:49,545 SEVERE [org.jboss.arquillian.protocol.jmx.JMXTestRunner] (pool-3-thread-1) Failed: org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testIndexContentUsingHeaders: java.lang.AssertionError: Version must be upgraded to [5.5.3] is still set to [5.5.0]
	at org.elasticsearch.Version.<clinit>(Version.java:302)
	at org.elasticsearch.node.Node.<init>(Node.java:140)
	at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
	at org.elasticsearch.node.NodeBuilder.node(NodeBuilder.java:150)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.initEleasticSearchClient(ElasticSearchIntegrationTest.java:220)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testIndexContentUsingHeaders(ElasticSearchIntegrationTest.java:80)
...
java.lang.NoClassDefFoundError: Could not initialize class org.elasticsearch.Version
	at org.elasticsearch.node.Node.<init>(Node.java:140)
	at org.elasticsearch.node.NodeBuilder.build(NodeBuilder.java:143)
	at org.elasticsearch.node.NodeBuilder.node(NodeBuilder.java:150)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.initEleasticSearchClient(ElasticSearchIntegrationTest.java:220)
	at org.wildfly.camel.test.elasticsearch.ElasticSearchIntegrationTest.testGetContent(ElasticSearchIntegrationTest.java:112)




Camel can likely not use another version of Lucene than Elasticsearch defines. Alternatively it may be possible to install multiple versions of Lucene and wire Elasticsearch to the one it requires.",
0,CAMEL-10309,Bug,Minor,2.18.0,,"
None
",Resolved,Fixed,None,Andrea Cosentino,SunChaoqun,0,1,2016-09-12 09:46:55+00:00,2016-09-15 07:02:17+00:00,No Desc,
0,CAMEL-10308,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Vitalii Tymchyshyn,0,3,2016-09-11 23:24:53+00:00,2016-09-18 08:19:02+00:00,"Currently ProducerTemplate delegates to Sync engine even when async* methods are used.


This improvement:



changes async methods to use async engine
Provides Java 8 CompletableFuture  instead of regular Future to the called
Provides a way to invoke async engine without additional thread pool","githubbot:1473607627:2016-09-11T23:27:07.311+0000:1473607627:2016-09-11T23:27:07.311+0000:GitHub user tivv opened a pull request:

    https://github.com/apache/camel/pull/1167

    CAMEL-10308

    Provide a way to use async engine from ProducerTemplate

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tivv/camel j8-producer-template

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1167.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1167
    
----
commit 5daf4fa79a8cfa74e0d3253d07e8548c844de3a9
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-09-11T23:25:42Z

    CAMEL-10308
    Provide a way to use async engine from ProducerTemplate

----

githubbot:1474091164:2016-09-17T13:46:04.485+0000:1474091164:2016-09-17T13:46:04.485+0000:Github user tivv closed the pull request at:

    https://github.com/apache/camel/pull/1167

davsclaus:1474157942:2016-09-18T08:19:02.794+0000:1474157942:2016-09-18T08:19:02.794+0000:Thanks for the PR"
0,CAMEL-10307,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Fabrizio Spataro,0,6,2016-09-11 20:24:07+00:00,2017-03-18 10:48:40+00:00,"Hello,


Today the component use a very old docker-java lib 1.0.4, current docker-java version is 3.0.5


Could be nice to upgrade all component code","fabryprog:1473596956:2016-09-11T20:29:16.853+0000:1473596956:2016-09-11T20:29:16.853+0000:Hello, i tried to update the component but much code is very different (for example, the event management). 

Can i send PR equally?
acosentino:1473631332:2016-09-12T06:02:12.870+0000:1473631332:2016-09-12T06:02:12.870+0000:The PR should be complete.
fabryprog:1473632293:2016-09-12T06:18:13.259+0000:1473632293:2016-09-12T06:18:13.259+0000:Ok Andrea, 

It might be an idea to do over again the implementation with the basic functionality and deprecate the features not yet updated.

Today the docker-java version is not compatible with the excellent latest release (1.12), I think it's important to also update the deprecating features.

Claus, what do you think?
acosentino:1473632535:2016-09-12T06:22:15.144+0000:1473632535:2016-09-12T06:22:15.144+0000:Maybe you can open a PR and we can see the status of the component with the deprecations.
fabryprog:1473632749:2016-09-12T06:25:49.064+0000:1473632749:2016-09-12T06:25:49.064+0000:Exactly andrea, we wait Claus also because the amount of code written is very high.
davsclaus:1473637798:2016-09-12T07:49:58.717+0000:1473637798:2016-09-12T07:49:58.717+0000:Yeah I think it brings more value to have camel-docker work with latest docker release. I dont mind if we would need to re-write parts of the component to make it so.

Fabrizio, you are surely welcome to work on that. We love contributions
http://camel.apache.org/contributing
fabryprog:1473639114:2016-09-12T08:11:54.905+0000:1473639114:2016-09-12T08:11:54.905+0000::-) 
thanks claus, i am working to this issue. 

Later I'll let you know what to keep and what to take off
fabryprog:1473667415:2016-09-12T16:03:35.019+0000:1473667415:2016-09-12T16:03:35.019+0000:Hello, i am fixing tests with new version and send my PR

For this PR i have deprecate all docker consumer's features
fabryprog:1473744818:2016-09-13T13:33:38.270+0000:1473744818:2016-09-13T13:33:38.270+0000:Hello everybody, my code is OK, i have connected succerfully with docker rest api 1.24 (docker 1.12.x)

Now i am fixing test....

stay tuned!
fabryprog:1473753415:2016-09-13T15:56:55.533+0000:1473753415:2016-09-13T15:56:55.533+0000::-( 

http://camel.465427.n5.nabble.com/Camel-docker-upgrade-library-test-failure-td5787511.html
fabryprog:1474092061:2016-09-17T14:01:01.983+0000:1474092061:2016-09-17T14:01:01.983+0000:I resolve my problem, it is a simple powermock problem. 

Resolution is use @PowerMockIgnore annotation!!!!!!!

i will test the component soon as possible and then send the PR

Kings regards
fabryprog:1474261606:2016-09-19T13:06:46.331+0000:1474261606:2016-09-19T13:06:46.331+0000:I decided to start again, then the times are getting longer :-(
githubbot:1474330270:2016-09-20T08:11:10.694+0000:1474330270:2016-09-20T08:11:10.694+0000:GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1181

    Camel 10307: Upgrade docker java version

    https://issues.apache.org/jira/browse/CAMEL-10307

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-10307

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1181.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1181
    
----
commit 9979bbd174669cd431c122c4f5621818c510b9ea
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-19T16:28:43Z

    CAMEL-10307, docker library upgrade (async test incomplete)

commit b6f521ea16ff4f0f638acb84ab9acfe2a9e88c37
Author: Fabryprog <fabryprog@gmail.com>
Date:   2016-09-19T22:29:47Z

    CAMEL-10307, docker test (async) fixed!

commit ac7dd5314913a584ee9f1696de3d715bb677e636
Author: Fabrizio Spataro <fabrizio.spataro@bizmate.it>
Date:   2016-09-20T08:10:23Z

    CAMEL-10307, docker lib upgraded!

----

githubbot:1474334451:2016-09-20T09:20:51.040+0000:1474334451:2016-09-20T09:20:51.040+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1181

philip142au:1486089122:2017-02-03T10:32:02.236+0000:1486089122:2017-02-03T10:32:02.236+0000:Hi, whats the status of the Camel docker component? Last time I checked about 6 months ago it wasn't working in OSGi and was at an old version of Docker API. Please let me know current status?
acosentino:1486089293:2017-02-03T10:34:53.076+0000:1486089293:2017-02-03T10:34:53.076+0000:Actually we are using the latest version of docker-java, but we don't have a Karaf feature for this component, since the docker-java library is not OSGi-friendly.
philip142au:1489805320:2017-03-18T10:48:40.486+0000:1489805320:2017-03-18T10:48:40.486+0000:docker-java will be OSGi friendly when they accept the pull request associated with this issue. https://github.com/docker-java/docker-java/issues/789"
0,CAMEL-10306,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Fabrizio Spataro,0,4,2016-09-10 14:21:27+00:00,2016-09-11 18:05:49+00:00,"Upgrade hazelcast version.


The 3.7.x version is Cloud-Enabled and 30% Faster and Fully Modularized In-Memory Data Grid


(http://insidebigdata.com/2016/09/02/hazelcast-releases-3-7-cloud-enabled-30-faster-and-the-first-fully-modularized-in-memory-data-grid)","fabryprog:1473493469:2016-09-10T15:44:29.496+0000:1473493469:2016-09-10T15:44:29.496+0000:I am working to this jira!!

I have some problem with a springtest... soon as possible send PR

Kings regards
fabryprog:1473502630:2016-09-10T18:17:10.479+0000:1473502630:2016-09-10T18:17:10.479+0000:The spring test using Bean reference is broken with this upgrade. I still can not understand ...
davsclaus:1473547942:2016-09-11T06:52:22.867+0000:1473547942:2016-09-11T06:52:22.867+0000:What kind of error do you get? Maybe the test is a bit strange or something already.
You could also do a PR with current code and others can take a look in case you cannot find the problem easily.
acosentino:1473548953:2016-09-11T07:09:13.699+0000:1473548953:2016-09-11T07:09:13.699+0000:The problem seems to be related to aggregation and idempotent tests.
fabryprog:1473549418:2016-09-11T07:16:58.997+0000:1473549418:2016-09-11T07:16:58.997+0000:Exactly! I am sending PR...
fabryprog:1473574925:2016-09-11T14:22:05.873+0000:1473574925:2016-09-11T14:22:05.873+0000:I am studing failure tests, i supposed that hazelcast change lock and idempotence features! 

*Call reference IDs are included in the Lock operations issued from member to member, to prevent double locking when lock operation is retried. But, Lock at clients does not have these. [8359]* ( from http://docs.hazelcast.org/docs/release-notes/ )
fabryprog:1473576329:2016-09-11T14:45:29.054+0000:1473576329:2016-09-11T14:45:29.054+0000:Hello everybody, now all tests are ok

It isn't a wrong lock features but only newHazelcastInstance() that with new version gone wrong. 

I had change this code with newHazelcastInstance(new Config(""A NAME"")) and all tests are ok!

Can you merge my PR? (https://github.com/apache/camel/pull/1166)

king regards

FabryProg


LOG OUTPUT
Results :

Flaked tests:
org.apache.camel.processor.aggregate.hazelcast.HazelcastAggregationRepositoryOperationsTest.checkOptimisticPersistentRemove(org.apache.camel.processor.aggregate.hazelcast.HazelcastAggregationRepositoryOperationsTest)
  Run 1: HazelcastAggregationRepositoryOperationsTest.checkOptimisticPersistentRemove:149 ▒ OptimisticLocking
  Run 2: PASS


Tests run: 186, Failures: 0, Errors: 0, Skipped: 0, Flakes: 1

[
davsclaus:1473586943:2016-09-11T17:42:23.123+0000:1473586943:2016-09-11T17:42:23.123+0000:Thanks for the PR
githubbot:1473588349:2016-09-11T18:05:49.004+0000:1473588349:2016-09-11T18:05:49.004+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1166
"
0,CAMEL-10305,New Feature,Major,2.17.3,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Kiran G,0,2,2016-09-10 11:17:00+00:00,2016-09-11 06:49:41+00:00,Apache Camel Olingo2 component doesn’t support calling function imports. The changes adds support to calling function imports as well.,"kiransg:1473479538:2016-09-10T11:52:18.645+0000:1473479538:2016-09-10T11:52:18.645+0000:Changes to Olingo2AppImpl.java to add support for calling function imports as well.
davsclaus:1473547780:2016-09-11T06:49:40.878+0000:1473547780:2016-09-11T06:49:40.878+0000:Thanks for the patch."
0,CAMEL-10304,Bug,Minor,2.17.3,,"
None
",Resolved,Later,None,Unassigned,Philip Andrew,0,3,2016-09-10 02:52:49+00:00,2016-09-21 12:10:31+00:00,"I can not use camel-docker in the OSGi environment, exception is thrown.


java.lang.RuntimeException: java.lang.ClassNotFoundException: Provider org.glass fish.jersey.internal.RuntimeDelegateImpl could not be instantiated: java.lang.Il legalStateException: No generator was provided and there is no default generator registered


If I do the following workaround then it can work


RuntimeDelegate.setInstance(new org.glassfish.jersey.server.internal.RuntimeDelegateImpl())


http://stackoverflow.com/questions/39382056/how-to-get-apache-camel-docker-component-to-work-in-osgi-or-jersey-does-not-wo","davsclaus:1473477192:2016-09-10T11:13:12.962+0000:1473477192:2016-09-10T11:13:12.962+0000:Where do you call this RuntimeDelete code?
philip142au:1473725668:2016-09-13T08:14:28.371+0000:1473725668:2016-09-13T08:14:28.371+0000:At the moment, in my BundleActivator in the class itself, so when the class is instated then it runs, I assume before many other things.

  RuntimeDelegate.setInstance(new org.glassfish.jersey.server.internal.RuntimeDelegateImpl())


philip142au:1473726082:2016-09-13T08:21:22.937+0000:1473726082:2016-09-13T08:21:22.937+0000:Also I should add, this is only what is necessary for it to work in OSGi Felix in embedded mode. I see another error in non-embedded mode which I'm investigating.
philip142au:1473732470:2016-09-13T10:07:50.019+0000:1473732470:2016-09-13T10:07:50.019+0000:I think I might be wrong and this may not be a buy because, I deleted my .ivy2 data and tried again and its working, so this may not be a problem.
philip142au:1473810956:2016-09-14T07:55:56.769+0000:1473810956:2016-09-14T07:55:56.769+0000:Give me a bit more time to investigate, all this OSGi is a headache.
philip142au:1473810959:2016-09-14T07:55:59.901+0000:1473810959:2016-09-14T07:55:59.901+0000:Give me a bit more time to investigate, all this OSGi is a headache.
philip142au:1474257139:2016-09-19T11:52:19.393+0000:1474257139:2016-09-19T11:52:19.393+0000:Hi Claus, my feeling is that the Camel Docker component is very out of date and not really usable in the OSGi environment. This is what I find.

Here are instructions on how to get Docker TLS working if its at all helpful

https://github.com/PhilAndrew/JumpMicro/blob/master/core/src/main/scala/jumpmicro/impl/util/docker/README.md

a) The demo as given in the documentation page does run, but does not work in a non-OSGi environment with the current docker server due to API changes, http://camel.apache.org/docker.html from(""docker://events?host=192.168.59.103&port=2375"").to(""log:event"") as the Docker API has changed and the result back from the docker server doesn't match the docker-java version. However it does connect to the docker server using TLS when I turn on the secure mode.

b) In the non-OSGi environment I must add RuntimeDelegate.setInstance(new org.glassfish.jersey.server.internal.RuntimeDelegateImpl()) but I don't know why, that's enough to get it to work.

c) In the OSGi environment down at the lower level this uses Jersey which gives the error as shown in this Stackoverflow http://stackoverflow.com/questions/25740556/error-while-using-jersey-client-in-osgi-no-generator-was-provided
I followed their instructions but still couldn't get it to work in OSGi. OSGi is confusing most of the time.

d) The docker-java dependency version is quite old. Is it docker-java version 1.4.0? That was released 07-Jul-2015, now docker-java current version is 3.0.6.

acosentino:1474257388:2016-09-19T11:56:28.001+0000:1474257388:2016-09-19T11:56:28.001+0000:Hello [~philip142au], we are actually in the process of upgrading the dependency.. There is a PR on the way :-)

Hopefully we will be able to test the component with the latest release in OSGi environment.
davsclaus:1474410566:2016-09-21T06:29:26.696+0000:1474410566:2016-09-21T06:29:26.696+0000:Camel 2.18 onwards has a refactored docker component using a newer client.

We are not fixing anything on this older version.
acosentino:1474410725:2016-09-21T06:32:05.774+0000:1474410725:2016-09-21T06:32:05.774+0000:Also I noticed we don't have the Karaf feature anymore.

It has been removed.
philip142au:1474431031:2016-09-21T12:10:31.708+0000:1474431031:2016-09-21T12:10:31.708+0000:Looking forward to see the new component."
0,CAMEL-10303,Bug,Major,"2.17.0, 2.17.1, 2.17.2, 2.17.3",2.18.0,"
None
",Resolved,Fixed,2.18.0,Quinn Stevenson,Quinn Stevenson,0,2,2016-09-09 18:34:13+00:00,2016-09-15 13:41:33+00:00,"If an error occurs when MllpTcpServerConsumer is delivering the acknowledgment back to the caller, there is now way to tell that the acknowledgement failed.


The MllpTcpServerConsumer needs to make the route fail and log an error about the condition.","githubbot:1473677283:2016-09-12T18:48:03.129+0000:1473677283:2016-09-12T18:48:03.129+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1172

    CAMEL-10303 - added ability to detect when the consumer fails to deli…

    …ver the MLLP acknowledgement

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10303

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1172.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1172
    
----
commit c6336e8d09620b236de54c4138565eccd5cb4faa
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-09-12T18:47:10Z

    CAMEL-10303 - added ability to detect when the consumer fails to deliver the MLLP acknowledgement

----

githubbot:1473918093:2016-09-15T13:41:33.353+0000:1473918093:2016-09-15T13:41:33.353+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1172
"
0,CAMEL-10302,Improvement,Minor,2.17.3,2.18.0,"
None
",Resolved,Fixed,2.18.0,Stephan Siano,Stephan Siano,0,1,2016-09-09 08:44:08+00:00,2016-09-09 08:56:51+00:00,"The camel-mail component currently handle mails with attachments where the mail body is a plain text message. In this case the MIME-Structure looks as follows:



mulipart/mixed
|- text/plain   -> body
|- image/png    -> attachment[0]
|- text/plain   -> attachment[1]




However if the mail is e.g. sent by Outlook and the mail body contains formating and a picture, the resulting multipart structure might look like this



multipart/mixed
|- multipart/related
|  |- multipart/alternative
|  |  |- text/plain  -> body
|  |  |- text/html
|  |- image/png      -> attachment[0]
|- text/plain        -> attachment[1]




Without the patch, the attachments will be as expected, but the body will be the same as attachment[1] (or some bogus string if the mail does not contain a text attachment).",
0,CAMEL-10301,Bug,Major,2.17.2,Future,"
None
",Resolved,Later,Future,Claus Ibsen,Alex Cheng,0,2,2016-09-08 21:20:13+00:00,2018-03-23 09:54:14+00:00,"When sending messages using camel netty4 component, in a rare case, a NullPointerException thrown in ClientChannelHandler caused org.apache.camel.impl.DefaultAsyncProcessorAwaitManager to wait forever. 


From the stacktrace, the NPE occurred in line 116 of channelInactive method and the exchange is null.



boolean doneUoW = exchange.getUnitOfWork() == null;




From getExchange method, it looks like it cannot get NettyCamelState from NettyProducer. In NettyProducer's process method, it's possible that a Netty channel is closed before line 



putState(channel, new NettyCamelState(producerCallback, exchange));




 is executed, which triggers channelInactive and causes the NPE.


So the flow looks like below:
1) Netty channel opened in NettyProducer
2) Before putState is invoked, the channel is closed
3) channelInactive method in ClientChannelHandler is called and throws NPE, the worker thread dies
4) NettyProducer not mark the async processor as done


In line 303 of NettyProducer, it simply returns if the channel future is not success, but the ClientChannelHandler#exceptionCaught won't do any thing if exchange is null and will never run again as the worker thread already died.



if (!channelFuture.isSuccess()) {
                    // no success then exit, (any exception has been handled by ClientChannelHandler#exceptionCaught)
                    return;
                }




The potential fix would be:
1) Add null check in ClientChannelHandler's channelInactive method
2) Call producerCallback.done(false) in NettyProducer's process method when channel future is not success. This should be safe as AsyncCallback's done method can be called multiple times.


Note, 2.18.0 version changed some implementation details of NettyProducer but still has the same issue.


Stacktrace:



2016-09-08 00:26:11,843 | TRACE [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Pool[active=0, idle=0]
2016-09-08 00:26:11,843 | DEBUG [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Created new TCP client bootstrap connecting to 172.25.0.100:15050 with options: Bootstrap(BootstrapConfig(group: NioEventLoopGroup, channelFactory: NioSocketChannel.class, options: {SO_KEEPALIVE=true, TCP_NODELAY=true, SO_REUSEADDR=true, CONNECT_TIMEOUT_MILLIS=10000}, handler: org.apache.camel.component.netty4.DefaultClientInitializerFactory@297c237, resolver: io.netty.resolver.DefaultAddressResolverGroup@6eb474f1))
2016-09-08 00:26:11,843 | TRACE [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Waiting for operation to complete AbstractBootstrap$PendingRegistrationPromise@637319e7(incomplete) for 10000 millis
2016-09-08 00:26:11,844 | TRACE [NettyClientTCPWorker]     o.a.c.c.netty4.DefaultClientInitializerFactory : Using request timeout 5000 millis
2016-09-08 00:26:11,844 | TRACE [NettyClientTCPWorker]     o.a.c.c.netty4.DefaultClientInitializerFactory : Created ChannelPipeline: DefaultChannelPipeline{(DefaultClientInitializerFactory#0 = org.apache.camel.component.netty4.DefaultClientInitializerFactory), (decoder-0 = xxx), (encoder-0 = org.apache.camel.component.hl7.HL7MLLPNettyEncoder), (timeout = io.netty.handler.timeout.ReadTimeoutHandler), (handler = org.apache.camel.component.netty4.handlers.ClientChannelHandler)}
2016-09-08 00:26:11,845 | DEBUG [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Creating connector to address: 172.25.0.100:15050
2016-09-08 00:26:11,845 | TRACE [NettyClientTCPWorker]    org.apache.camel.component.netty4.NettyProducer : Channel open: [id: 0x40064baa, L:/172.25.0.103:55662 - R:/172.25.0.100:15050]
2016-09-08 00:26:11,845 | TRACE [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Created channel: [id: 0x40064baa, L:/172.25.0.103:55662 - R:/172.25.0.100:15050]
2016-09-08 00:26:11,845 | TRACE [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : activateObject channel: [id: 0x40064baa, L:/172.25.0.103:55662 - R:/172.25.0.100:15050] -> {}
2016-09-08 00:26:11,845 | TRACE [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Validating channel: [id: 0x40064baa, L:/172.25.0.103:55662 - R:/172.25.0.100:15050] -> true
2016-09-08 00:26:11,845 | TRACE [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Got channel from pool [id: 0x40064baa, L:/172.25.0.103:55662 ! R:/172.25.0.100:15050]
2016-09-08 00:26:11,847 | TRACE [NettyClientTCPWorker]    org.apache.camel.component.netty4.NettyProducer : Channel closed: [id: 0x40064baa, L:/172.25.0.103:55662 ! R:/172.25.0.100:15050]
2016-09-08 00:26:11,848 | TRACE [NettyClientTCPWorker]    org.apache.camel.component.netty4.NettyProducer : Exception caught at Channel: [id: 0x40064baa, L:/172.25.0.103:55662 ! R:/172.25.0.100:15050]
java.lang.NullPointerException: null
	at org.apache.camel.component.netty4.handlers.ClientChannelHandler.channelInactive(ClientChannelHandler.java:116)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:216)
	at io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(ChannelInboundHandlerAdapter.java:75)
	at io.netty.handler.timeout.ReadTimeoutHandler.channelInactive(ReadTimeoutHandler.java:146)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:216)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:360)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:325)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:216)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1314)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:886)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$7.run(AbstractChannel.java:735)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:400)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:401)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:805)
	at java.lang.Thread.run(Thread.java:745)
2016-09-08 00:26:11,848 | DEBUG [NettyClientTCPWorker]    org.apache.camel.component.netty4.NettyProducer : Closing channel as an exception was thrown from Netty
java.lang.NullPointerException: null
	at org.apache.camel.component.netty4.handlers.ClientChannelHandler.channelInactive(ClientChannelHandler.java:116)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:216)
	at io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(ChannelInboundHandlerAdapter.java:75)
	at io.netty.handler.timeout.ReadTimeoutHandler.channelInactive(ReadTimeoutHandler.java:146)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:216)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:360)
	at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:325)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:216)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1314)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:237)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:223)
	at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:886)
	at io.netty.channel.AbstractChannel$AbstractUnsafe$7.run(AbstractChannel.java:735)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:400)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:401)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:805)
	at java.lang.Thread.run(Thread.java:745)
2016-09-08 00:26:11,850 | DEBUG [-threads-1855599236)]    org.apache.camel.component.netty4.NettyProducer : Channel: [id: 0x40064baa, L:/172.25.0.103:55662 ! R:/172.25.0.100:15050] writing body: [77, ..., 13]
2016-09-08 00:26:11,850 | TRACE [-threads-1855599236)]   o.a.camel.impl.DefaultAsyncProcessorAwaitManager : Waiting for asynchronous callback before continuing for exchangeId: ID-5533912dbb9f-37752-1473294183111-0-2373 -> Exchange[ID-5533912dbb9f-37752-1473294183111-0-2373]
2016-09-08 00:26:11,850 | TRACE [NettyClientTCPWorker]    org.apache.camel.component.netty4.NettyProducer : Operation complete DefaultChannelPromise@7395de5d(failure: java.nio.channels.ClosedChannelException)","davsclaus:1473475921:2016-09-10T10:52:01.508+0000:1473475921:2016-09-10T10:52:01.508+0000:Thanks Alex for the detailed description. 

You are welcome to work on a patch / PR to fix this on the master branch so it can be in the 2.18.0 release.
http://camel.apache.org/contributing
alexcheng:1473687563:2016-09-12T21:39:23.687+0000:1473687578:2016-09-12T21:39:38.194+0000:[~davsclaus] I tried to apply the simple fix, but it turned out that the exception handling and redelivery logic will be affected by the simple fix. Still working on a more proper fix.
davsclaus:1473920837:2016-09-15T14:27:17.618+0000:1473920837:2016-09-15T14:27:17.618+0000:Thanks for the update Alex, hope you get time to look into this more and find a solution.
davsclaus:1478319741:2016-11-05T12:22:21.331+0000:1478319741:2016-11-05T12:22:21.331+0000:Alex did you get a chance to keep working on this?
davsclaus:1521770054:2018-03-23T09:54:14.683+0000:1521770054:2018-03-23T09:54:14.683+0000:There has been improvements in camel-netty4 since this JIRA.

Create/re-open if this can be reproduced with latest version"
0,CAMEL-10300,Bug,Major,2.18.0,,"
None
",Resolved,Not A Problem,None,Zoran Regvart,Rajesh A,0,3,2016-09-08 20:02:09+00:00,2017-03-23 12:14:36+00:00,"All my queries using camel-salesforce component 2.18.x misses all fields except 'ID'.
For example the below query should result Account objects populated with ID, name, company.


Select id, name, company from Account


But, the resultant Account objects contain only ID field populated.


I looked the log and did debug the code, this is what I found:
2.18.x version uses com.fasterxml.jackson version
where as 2.17.x uses org.codehaus.jackson version.
com.fasterxml.jackson version parses string to Object but just includes the ID field and ignores other fields.
Here is the piece of code that does this -> SalesforceConsumer.java


// create the expected SObject
                in.setBody(OBJECT_MAPPER.readValue(
                        new StringReader(sObjectString), sObjectClass));


Please fix this.","davsclaus:1479778482:2016-11-22T09:34:42.468+0000:1479778482:2016-11-22T09:34:42.468+0000:[~zregvart] I wonder if you can help with this?
zregvart:1479876616:2016-11-23T12:50:16.157+0000:1479876616:2016-11-23T12:50:16.157+0000:[~rajesh734] are you mapping the results to {{AbstractQueryRecordsBase}} subclass in your case class like:
{code:java}
package sample;

public class AccountRecords extends AbstractQueryRecordsBase {
    @XStreamImplicit
    private List<Account> records;

    public List<Account> getRecords() {
        return records;
    }

    public void setRecords(List<Account> records) {
        this.records = records;
    }
}
{code}

{{query}} and {{queryAll}} operations use the [Salesforce REST API|https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/resources_query.htm] that doesn't return {{JSON/XML}} with an array of {{SObjects}} directly but a {{JSON/XML}} format with {{records}} property that will contain an array of {{SObjects}}.

See this example using the {{AccountRecords}} class above:
{code:java}
AccountRecords results = template.requestBody(
                ""salesforce:query?sObjectClass=sample.AccountRecords&sObjectName=Account&sObjectQuery=SELECT Id, Name, BillingStreet FROM Account"",
                null, AccountRecords.class);

Account firstAccount = results.records.get(0);
{code}

Also make sure that your {{Account}} class contains the properties exactly as they are named on Salesforce. The {{camel-salesforce-maven-plugin}} can generate those classes from the Salesforce metadata for you.
zregvart:1480231447:2016-11-27T15:24:07.228+0000:1480231447:2016-11-27T15:24:07.228+0000:[~rajesh734] Can you comment on whether the suggestion above helps your use case or do we need to make a change in the camel-salesforce component? Thanks :) 
rajesh734:1480336420:2016-11-28T20:33:40.899+0000:1480336420:2016-11-28T20:33:40.899+0000:Zoran, I am in vacation, will be back in two days. Once I am back, will
test your suggestion and let you know if that helps.

Thanks
Rajesh

On Sun, Nov 27, 2016 at 10:24 AM, Zoran Regvart (JIRA) <jira@apache.org>


zregvart:1485766347:2017-01-30T16:52:27.654+0000:1485766347:2017-01-30T16:52:27.654+0000:[~rajesh734] Have you gotten a chance to test the suggestions I made?
rajesh734:1485770860:2017-01-30T18:07:40.632+0000:1485770860:2017-01-30T18:07:40.632+0000:Sorry, I thought I replied you after testing this. What you suggested is
what I have already done and I am still having that issue.

On Mon, Jan 30, 2017 at 11:52 AM, Zoran Regvart (JIRA) <jira@apache.org>


zregvart:1485774935:2017-01-30T19:15:35.398+0000:1485774935:2017-01-30T19:15:35.398+0000:[~rajesh734] Sorry to hear that, would you be able to share the minimised code needed to reproduce this issue, for instance a github repository that demonstrates your usage of {{camel-salesforce}}?
rajesh734:1485782320:2017-01-30T21:18:40.636+0000:1485782320:2017-01-30T21:18:40.636+0000:Sorry Zoran, I have removed that completely. I will have to create one, to
recreate this issue. I will do that may be later this week.

On Mon, Jan 30, 2017 at 2:15 PM, Zoran Regvart (JIRA) <jira@apache.org>


zregvart:1490242476:2017-03-23T12:14:36.864+0000:1490242476:2017-03-23T12:14:36.864+0000:I'm resolving this, if you can provide a way to reproduce the issue please reopen."
0,CAMEL-10299,Improvement,Major,2.18.0,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Dhiraj Sureshkumar Bokde,0,2,2016-09-08 17:33:51+00:00,2019-08-06 08:24:04+00:00,"Camel uses service discovery for components. It would be useful if it can do the same for StartupListeners to allow creating services to track camel contexts, without having to instantiate an mbean in the application.",davsclaus:1565050937:2019-08-06T08:22:17.932+0000:1565050937:2019-08-06T08:22:17.932+0000:You can use CamelContextTracker which is what widlfly-camel does
0,CAMEL-10298,Improvement,Minor,None,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Jyrki Ruuskanen,0,3,2016-09-08 11:00:40+00:00,2016-09-11 06:48:58+00:00,"When using readLockMinAge parameter in the file component, readLockTimeout is required to be larger than readLockCheckInterval + readLockMinAge.


This check is unnecessary. It was originally added with the use case described in CAMEL-8421 in mind, but it just ends up limiting and complicating readLockMinAge parameter's usage for no gain.","githubbot:1473303926:2016-09-08T11:05:26.890+0000:1473303926:2016-09-08T11:05:26.890+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/1162

    CAMEL-10298: Remove readLockTimeout check from readLockMinAge

    https://issues.apache.org/jira/browse/CAMEL-10298

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-readlockminage

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1162.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1162
    
----
commit 3ce77320493fb680570c3e4a31f8a276052d4255
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2016-09-08T11:03:00Z

    CAMEL-10298: Remove readLockTimeout check from readLockMinAge

----

githubbot:1473305835:2016-09-08T11:37:15.123+0000:1473305835:2016-09-08T11:37:15.123+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/1163

    CAMEL-10298: Remove readLockTimeout check from readLockMinAge (2.17.x)

    https://issues.apache.org/jira/browse/CAMEL-10298

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-readlockminage-2.17.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1163.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1163
    
----
commit a0cd47f5695116776c216dcdc9a0ff0f8f7054b0
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2016-09-08T11:34:32Z

    CAMEL-10298: Remove readLockTimeout check from readLockMinAge (2.17.x)

----

githubbot:1473455438:2016-09-10T05:10:38.444+0000:1473455438:2016-09-10T05:10:38.444+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/1163

davsclaus:1473547480:2016-09-11T06:44:40.315+0000:1473547480:2016-09-11T06:44:40.315+0000:Thanks for the PR
githubbot:1473547738:2016-09-11T06:48:58.078+0000:1473547738:2016-09-11T06:48:58.078+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/1162
"
0,CAMEL-10297,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Andrea Cosentino,0,1,2016-09-08 06:14:39+00:00,2016-09-08 06:41:43+00:00,"from(""{{ftp.server}}"")
	    .log(""Received file ${file:name} about to split"")
	    .split(body().tokenize(""\n""))
	    .log(""${body})
            .to(""mock:result"");




In this case you'll get an output like this



-rw-rw-r--   1 oscerd oscerd      24 Sep  2 18:03 file_test.txt




While an end user expect the file content.


I assign the issue to Claus, since he worked on the fix, I've only added a test. Merging now",
0,CAMEL-10296,Bug,Major,2.18.0,2.18.0,"

github-pullrequest
integration-test

",Resolved,Fixed,2.18.0,Andrea Cosentino,Florian Gessner,0,2,2016-09-07 19:01:32+00:00,2016-09-11 08:09:46+00:00,"When guaranteed delivery is activated but no timeout is set for publisher acknowledgement waitForConfirmsOrDie will never return.
This is because the close is not triggered on the channel even if the connection is closed when an exception is thrown in the return listener.


This is also the reason why the integration test for the producer does not complete.


The provided pull request fixes this issue in that way that it will just remember that a basic.return has been received and will throw the exception after waitForReturnOrDie completes","githubbot:1473246783:2016-09-07T19:13:03.427+0000:1473246783:2016-09-07T19:13:03.427+0000:GitHub user gessnerfl opened a pull request:

    https://github.com/apache/camel/pull/1161

    CAMEL-10296: waitForConfirmsOrDie does not return if no timeout is set

    for publisher acks and guaranteed delivery

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gessnerfl/camel CAMEL-10296_waitForConfirmsOrDieWithoutTimeout

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1161.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1161
    
----
commit 8827fab150f577106b4d7b682f0ceccd76525174
Author: Florian Gessner <florian.gessner@tis.biz>
Date:   2016-09-07T19:04:10Z

    CAMEL-10296: waitForConfirmsOrDie does not return if no timeout is set
    for publisher acks and guaranteed delivery

----

githubbot:1473552586:2016-09-11T08:09:46.228+0000:1473552586:2016-09-11T08:09:46.228+0000:Github user gessnerfl closed the pull request at:

    https://github.com/apache/camel/pull/1161
"
0,CAMEL-10295,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Fabrizio Spataro,0,3,2016-09-07 10:58:51+00:00,2017-08-03 08:34:38+00:00,"Hello,


Into some hazelcast distribuited object (for instance hashmap.put (...) ) can be set element's eviction time.


Eviction time is very useful into big cluster structure, this feature is already present into code using headers: CamelHazelcastObjectTtlValue and CamelHazelcastObjectTtlUnit


unfortunately it is not present in documentation!!!


See you soon.


fabrizio","fabryprog:1473247280:2016-09-07T19:21:20.464+0000:1473247280:2016-09-07T19:21:20.464+0000:Hello,

i am reading source code, this feature is already present using headers: CamelHazelcastObjectTtlValue and CamelHazelcastObjectTtlUnit

unfortunately it is not present in documentation!!!
davsclaus:1473249597:2016-09-07T19:59:57.928+0000:1473249597:2016-09-07T19:59:57.928+0000:You are welcome to do a PR or patch file to update the documentation
https://github.com/apache/camel/blob/master/components/camel-hazelcast/src/main/docs/hazelcast-component.adoc
fabryprog:1473250335:2016-09-07T20:12:15.370+0000:1473250335:2016-09-07T20:12:15.370+0000:Ok Claus... I will do it!!!!!!
githubbot:1473487509:2016-09-10T14:05:09.294+0000:1473487509:2016-09-10T14:05:09.294+0000:GitHub user Fabryprog opened a pull request:

    https://github.com/apache/camel/pull/1165

    fix documentation (map section)

    https://issues.apache.org/jira/browse/CAMEL-10295
    
    Kings regards
    
    fabryprog

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/Fabryprog/camel CAMEL-10295

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1165.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1165
    
----
commit 6e4fa3d8df3bd520e86359adc579da388d1680a2
Author: Fabryprog <fabryprog@gmail.com>
Date:   2016-09-10T14:03:51Z

    fix documentation (map section)

----

davsclaus:1473547461:2016-09-11T06:44:21.463+0000:1473547461:2016-09-11T06:44:21.463+0000:Thanks for the PR
githubbot:1473570284:2016-09-11T13:04:44.058+0000:1473570284:2016-09-11T13:04:44.058+0000:Github user Fabryprog closed the pull request at:

    https://github.com/apache/camel/pull/1165
"
0,CAMEL-10294,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-09-06 19:21:41+00:00,2016-09-07 09:54:21+00:00,"See PR
https://github.com/apache/camel/pull/1159#issuecomment-245058482


We should either remove the exchange pattern from the docs, or infer its default value as



InOnly if its consumerOnly=true
InOut otherwise



Most components dont change the MEP explicit and it can therefore be wrong as InOnly in some cases. 


Only special components such as JMS may see the MEP as InOnly if there is no JMSReplyTo header.",davsclaus:1473213261:2016-09-07T09:54:21.850+0000:1473213261:2016-09-07T09:54:21.850+0000:Removed the default value and modified the description accordingly.
0,CAMEL-10293,Bug,Minor,2.17.3,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Unassigned,Marcin Domanski,0,2,2016-09-06 16:11:27+00:00,2016-09-10 11:05:30+00:00,"It seems not to be possible to force camel:run to use Spring DSL file if OSGi bluepring is available. Following configuration is completely ignored if there is a blueprint in OSGI-INF folder:



            <plugin>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-maven-plugin</artifactId>
                <version>2.17.3</version>
                <configuration>
                    <useBlueprint>false</useBlueprint>
                    <fileApplicationContextUri>
                        META-INF/spring/camel-context.xml
                    </fileApplicationContextUri>
                </configuration>
            </plugin>","davsclaus:1473149991:2016-09-06T16:19:51.418+0000:1473149991:2016-09-06T16:19:51.418+0000:What is your use-case of mixing blueprint and spring xml ?
adie:1473209348:2016-09-07T08:49:08.597+0000:1473209348:2016-09-07T08:49:08.597+0000:Well, long story short, we are converting some projects from Spring DSL to Blueprint.
Colleague of mine was running different test on the SNAPSHOT and just noted that camel:run stopped working when any (even empty) blueprint file was in place (it did not work because there was a conflict between activemq 5.6 dependencies and lastest maven plugin 2.17.3 - both are importing OSGi dependencies, but that is a different story).

I know you usually don't maintain both spring DSL and Blueprint in one project, but here: http://camel.apache.org/camel-maven-plugin.html it is stated following (while describing fileApplicationContextUri tag): ""It can also be used to replace configuration that requires an OSGi container with an equivalent non-OSGi configuration.""

davsclaus:1473476058:2016-09-10T10:54:18.122+0000:1473476058:2016-09-10T10:54:18.122+0000:That description is about spring and spring-dm, not OSGi blueprint.

applicationContext is a spring term.
davsclaus:1473476730:2016-09-10T11:05:30.025+0000:1473476730:2016-09-10T11:05:30.025+0000:If you set useBlueprint=false then its not auto detected anymore"
0,CAMEL-10292,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,5,2016-09-06 09:49:49+00:00,2016-10-31 09:48:43+00:00,No Desc,"lb:1473380913:2016-09-09T08:28:33.971+0000:1473380913:2016-09-09T08:28:33.971+0000:I did a little bit of investigation of the topic and I found out that the policy relies on camel itself to operate against ZC (i.e. to [create a node|https://github.com/apache/camel/blob/master/components/camel-zookeeper/src/main/java/org/apache/camel/component/zookeeper/policy/ZooKeeperElection.java#L137-L158]) which does not seem the best option and IMHO we should use ZooKeeper APIs or Curator.

I know [~paolo.antinori] was interested about the migration of camel-zookeeper to Curator so this could be a fist step.
davsclaus:1473920891:2016-09-15T14:28:11.644+0000:1473920891:2016-09-15T14:28:11.644+0000:I wonder if at this time there is too much work on migrating to curator and we should move this to 2.19 release?
lb:1473924886:2016-09-15T15:34:46.920+0000:1473924886:2016-09-15T15:34:46.920+0000:I think so.
[~paolo.antinori] what do you think ?
paolo.antinori:1473980782:2016-09-16T07:06:22.348+0000:1473980782:2016-09-16T07:06:22.348+0000:Yes, last time I have checked this, refactoring to use only Curator was a reasonably lengthy activity. I'm interested in giving it a try, as soon as I get some extra time.
lb:1473981712:2016-09-16T07:21:52.654+0000:1473981712:2016-09-16T07:21:52.654+0000:[~paolo.antinori] moved to 2.19.0, could you take it ?
paolo.antinori:1477553763:2016-10-27T15:36:03.559+0000:1477553763:2016-10-27T15:36:03.559+0000:While re-implementing the functionality with Apache Curator, I have realized that the current functionality does something that Apache Curator receipe doesn't offer, that is to define a number {{n}} of instances that can be active.

So to not waste the work already done, I have decided to save this as a completely independent {{RoutePolicy}}, that fixes the original problem, but only for {{n=1}}.

I have then notice that probably the functionality in Curator is hidden behind the name ""Shared Semaphore"": http://curator.apache.org/curator-recipes/shared-semaphore.html

I'm currently looking at that to eventually create a new policy based on that or to adapt the original one.
githubbot:1477554326:2016-10-27T15:45:26.473+0000:1477554326:2016-10-27T15:45:26.473+0000:GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1229

    CAMEL-10292 - camel-zookeeper added new RoutePolicy

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-10292

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1229.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1229
    
----

----

acosentino:1477616092:2016-10-28T08:54:52.394+0000:1477616092:2016-10-28T08:54:52.394+0000:Thanks for the PR :-)
githubbot:1477616203:2016-10-28T08:56:43.710+0000:1477616203:2016-10-28T08:56:43.710+0000:Github user paoloantinori closed the pull request at:

    https://github.com/apache/camel/pull/1229

acosentino:1477616253:2016-10-28T08:57:33.261+0000:1477616253:2016-10-28T08:57:33.261+0000:Can we close this one or there is something else to do?
paolo.antinori:1477616740:2016-10-28T09:05:40.635+0000:1477616740:2016-10-28T09:05:40.635+0000:I think we can close this, I will track the other policies I'm planning to
implement in another JIRA.

On Fri, Oct 28, 2016 at 10:57 AM, Andrea Cosentino (JIRA) <jira@apache.org>


acosentino:1477616941:2016-10-28T09:09:01.370+0000:1477616941:2016-10-28T09:09:01.370+0000:Thanks!
githubbot:1477878231:2016-10-31T09:43:51.755+0000:1477878231:2016-10-31T09:43:51.755+0000:GitHub user paoloantinori opened a pull request:

    https://github.com/apache/camel/pull/1238

    CAMEL-10292 - camel-zookeeper, improved docs

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/paoloantinori/camel CAMEL-10292

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1238.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1238
    
----
commit a75ea30a59c14beb491b2c94a0b9a0fb03d8b56a
Author: Paolo Antinori <pantinor@redhat.com>
Date:   2016-10-31T09:43:01Z

    CAMEL-10292 - camel-zookeeper, improved docs

----

githubbot:1477878350:2016-10-31T09:45:50.120+0000:1477878350:2016-10-31T09:45:50.120+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1238
"
0,CAMEL-10291,Bug,Major,2.17.3,2.18.0,"

github-pullrequest
patch

",Resolved,Fixed,2.18.0,Andrea Cosentino,Florian Gessner,0,3,2016-09-05 18:00:11+00:00,2016-09-06 06:05:45+00:00,"At the moment the RabbitMQ component is does not map the timestamp of a message appropriately. The outbound mapping (producer) expects the timestamp of the camel message is of type String whereas the String is just the long value representing the timestamp. However the timestamp is already a java.util.Date when the producer just forwards a message from a rabbitmq consumer as the timestamp is already a java.util.date as define in AMQP.BasicProperties.


The provided pull request provides a compatible change. So it still keeps the old behaviour as fallback so that the long value is evaluated if the provided data is not a java.util.Date","githubbot:1473075538:2016-09-05T19:38:58.997+0000:1473075538:2016-09-05T19:38:58.997+0000:GitHub user gessnerfl opened a pull request:

    https://github.com/apache/camel/pull/1158

    CAMEL-10291: support java.util.date for timestamps in rabbitmq messages

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gessnerfl/camel CAMEL-10291_message_timestamp

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1158.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1158
    
----
commit 65d372f587aa79479753068533fd8b4aa52671ec
Author: Florian Gessner <flo.gessner@gmail.com>
Date:   2016-09-05T19:38:08Z

    CAMEL-10291: support java.util.date for timestamps in rabbitmq messages

----

githubbot:1473113053:2016-09-06T06:04:13.667+0000:1473113053:2016-09-06T06:04:13.667+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1158

acosentino:1473113136:2016-09-06T06:05:36.581+0000:1473113136:2016-09-06T06:05:36.581+0000:Thanks for the PR :-)"
0,CAMEL-10290,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-09-05 14:01:37+00:00,2016-09-05 14:25:05+00:00,No Desc,
0,CAMEL-10289,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-09-05 13:53:33+00:00,2016-09-05 14:01:09+00:00,No Desc,
0,CAMEL-10288,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-09-05 13:50:56+00:00,2016-09-05 13:53:12+00:00,No Desc,
0,CAMEL-10287,New Feature,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-09-05 10:24:27+00:00,2017-04-07 15:39:00+00:00,No Desc,"githubbot:1491464465:2017-04-06T15:41:05.618+0000:1491464465:2017-04-06T15:41:05.618+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/1603

    WIP - CAMEL-10287: Infinispan RoutePolicy to have one route being master, and others as slaves

    @tristantarrant may you check if I missed something on infinispan side 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-10287

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1603.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1603
    
----
commit 7f0b1ef1dc7c4fa9ee346176ba7049464a361fad
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2017-04-05T16:37:21Z

    CAMEL-10287: Infinispan RoutePolicy to have one route being master, and others as slaves

----

githubbot:1491550712:2017-04-07T15:38:32.038+0000:1491550712:2017-04-07T15:38:32.038+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/1603
"
0,CAMEL-10286,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Vitalii Tymchyshyn,0,3,2016-09-04 19:02:13+00:00,2016-09-05 07:38:13+00:00,"Allow easy creation of asyncrhonous methods called from bean language.
Proposed solution is to allow such methods to return CompletableFuture.


Such return would automatically be treated as async invocation.
Non-null result will be used as resulting body.
Any async exception will be propagated to proper error handling.


Note that if CompletableFuture would return null, it won't be used as resulting body. Rather resulting body will not be changed. It would help in use cases when processing method just does some work and returns CompletableFuture<Void>.","githubbot:1472987032:2016-09-04T19:03:52.766+0000:1472987032:2016-09-04T19:03:52.766+0000:GitHub user tivv opened a pull request:

    https://github.com/apache/camel/pull/1154

    CAMEL-10286

    Allow async bean method in bean language with J8 CompletableFuture

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tivv/camel async-default-producer-template

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1154.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1154
    
----
commit df96df0ef4fad58417b98865e7893076e05c4531
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-09-04T19:02:47Z

    CAMEL-10286
    Allow async bean method in bean language with J8 CompletableFuture

----

tivv:1472987079:2016-09-04T19:04:39.686+0000:1472987079:2016-09-04T19:04:39.686+0000:I've posted a pull request. As soon as general idea would be accepted, I will update documentation on Camel site.
githubbot:1473032239:2016-09-05T07:37:19.227+0000:1473032239:2016-09-05T07:37:19.227+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1154

davsclaus:1473032293:2016-09-05T07:38:13.565+0000:1473032293:2016-09-05T07:38:13.565+0000:Thanks for the PR.

Mind about checkstyle errors for new patches
http://camel.apache.org/building"
0,CAMEL-10285,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-09-04 08:24:18+00:00,2016-09-07 15:21:54+00:00,Extends CAMEL-9843 so we can access the current exchange in the error handler.,"davsclaus:1472949240:2016-09-04T08:34:00.176+0000:1472949240:2016-09-04T08:34:00.176+0000:If you extend org.apache.camel.dataformat.beanio.BeanIOErrorHandler then you have access to the current exchange class during parsing.


davsclaus:1473232914:2016-09-07T15:21:54.993+0000:1473232914:2016-09-07T15:21:54.993+0000:You can now also handle a custom error and add that to the list of mapped DTOs using the handleErrorAndAddAsResult method."
0,CAMEL-10284,Improvement,Minor,2.17.3,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Jean-Yves BESSON,0,3,2016-09-02 14:24:53+00:00,2016-09-07 08:02:03+00:00,The workGroup reference from configuration is not set in the producer so method shutdownGracefully() is not called in doStop(),"davsclaus:1472868261:2016-09-03T10:04:21.115+0000:1472868261:2016-09-03T10:04:21.115+0000:Contributions is welcome
http://camel.apache.org/contributing
jybesson:1473031093:2016-09-05T07:18:13.350+0000:1473031093:2016-09-05T07:18:13.350+0000:Hello Claus, i am working on a PR for this.
githubbot:1473035164:2016-09-05T08:26:04.288+0000:1473035164:2016-09-05T08:26:04.288+0000:GitHub user JYBESSON opened a pull request:

    https://github.com/apache/camel/pull/1155

    CAMEL-10284 No shutdown for custom workerPool in NettyProducer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/JYBESSON/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1155.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1155
    
----
commit 0e57b837dfbd2d9e171ceb4be0a84965748abfe9
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-07-28T15:14:55Z

    CAMEL-10184 - Allow to use a custom ChannelGroup for NettyProducer

commit 51eef2f25756d64e40a873eba2a6cc3ed6d95eef
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-02T14:27:50Z

    CAMEL-10284 - No shutdown for custom workerPool in NettyProducer

commit d766c9cd03ec37fd915f216c3910920e0ea36c40
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-02T15:07:46Z

    Merge remote-tracking branch 'upstream/master'
    
    Conflicts:
    	components/camel-netty4/src/main/java/org/apache/camel/component/netty4/NettyProducer.java

commit 9375ccd009d867ece62ab56854dc56fb5e039cd3
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-02T15:14:10Z

    Merge remote-tracking branch 'upstream/master'

commit c33ea1245ddd265fbd10bef65208269d16288bf1
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-02T15:26:08Z

    fix merge mistake

commit 78e7a54cb24cb3e8dd84991b02ea14aa79a050ca
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-02T15:30:52Z

    Fixed CS

commit 4c234ca8c8b1f97a098480d688d71fa0c2d825ae
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-05T07:29:17Z

    Fixed merge error

commit bfaa7465802c9f65cee1ffb9b39d7ad7972826e3
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-05T07:32:59Z

    Revert ""Fixed merge error""
    
    This reverts commit 4c234ca8c8b1f97a098480d688d71fa0c2d825ae.

commit ab867e1c218e2494f2412b47e0b9a390b6bbdc8e
Author: Jean-Yves BESSON <jean-yves.besson@external.partecis.eu>
Date:   2016-09-05T08:07:49Z

    Fixed merge error

----

davsclaus:1473035475:2016-09-05T08:31:15.258+0000:1473035475:2016-09-05T08:31:15.258+0000:Ah the workerpool on the configuration is intended for sharing the pool among multiple netty endpoints/producers. And therefore should not be shutdown by the producer, as it may be in use by others.

However we could add a shutdown to the netty component so it will as failsafe shutdown the configured pool if the component is stopped such as when camel context is stopped.
jybesson:1473037885:2016-09-05T09:11:25.002+0000:1473037885:2016-09-05T09:11:25.002+0000:I agree, I just updated the PR to shutdown the pool on component stop.
Thanks,

Jean-Yves
githubbot:1473205523:2016-09-07T07:45:23.845+0000:1473205523:2016-09-07T07:45:23.845+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1155

davsclaus:1473205644:2016-09-07T07:47:24.716+0000:1473205644:2016-09-07T07:47:24.716+0000:Thanks for the PR
jybesson:1473206523:2016-09-07T08:02:03.891+0000:1473206523:2016-09-07T08:02:03.891+0000:Thanks a lot, I'll make a cleaner PR next time, this one was a little messy with many commit :-)"
0,CAMEL-10283,Wish,Critical,2.17.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Jeremy,0,2,2016-09-01 19:09:20+00:00,2016-09-04 12:21:57+00:00,"We are encountering a problem with websocket component when our clients using web browsers are brutally loosing connection (closing laptop most of time).


When we are sending updates from server to all clients, the WebSocketProducer iterate over all opened sockets and when it reaches the broken socket, it is just waiting for the idleTimeout to happen.


At this step, the others clients are not able to interact with the server anymore cause the websocket producer is busy waiting on the broken socket and can't send messages to other clients.


I'm looking for a work-around or something... maybe the ability to set a timeout on the client handshake when sending... I'm not an expert in network protocols.


Thanks.","davsclaus:1472868754:2016-09-03T10:12:34.811+0000:1472868754:2016-09-03T10:12:34.811+0000:Can you point to places in the source code where the producer is waiting?

And it would be good to research the jetty websocket api (which is being used) what they offer for timeouts.

Also there is alternative components for WS such as AHC and Atmosphere.
Sufod:1472870031:2016-09-03T10:33:51.218+0000:1472890469:2016-09-03T16:14:29.767+0000:Should be line 99 in WebSocketProducer.class

websocket.getConnection().sendMessage((String)message);

By looking at the jetty documentation, I couldn't find any request timeout, but it seems that we could use the async send method instead of the blocking one -> https://www.eclipse.org/jetty/documentation/9.4.x/jetty-websocket-api-send-message.html

I couldn't find the jetty implementation in the code, just seeing interfaces.

I will have a look at AHC-WS.

Thanks.

EDIT:

Unfortunately I've been unable to run ahc-ws with a simple route :

 from(""ahc-ws://localhost:""+websocketPort)
                .routeId(""websocket"")....

Keep getting camel context shut down just after start:

2016-09-03 16:46:09 INFO  WsEndpoint:161 - Reconnecting websocket: ws://localhost:9292
2016-09-03 16:46:10 INFO  DefaultCamelContext:3066 - Apache Camel 2.17.2 (CamelContext: camel-1) is shutting down

DefaultCamelContext is catching exception line 2858:

java.util.concurrent.ExecutionException: java.net.ConnectException: Connection refused: no further information

After more reading, it turns out that the AHC-WS component is used to communicate as a CLIENT with a websocket, I'm looking for the server mode equivalent to camel-websocket actually. -> I'm going to test atmosphere

Finally, it's a mess, I don't know how I can customize the port for the websocket there is not enough documentation, I think I will use an homemade implementation using jetty async websockets...



davsclaus:1472955425:2016-09-04T10:17:05.936+0000:1472955425:2016-09-04T10:17:05.936+0000:There is a new sendTimeout option using 30 seconds by default.

This uses the async send api which requires Jetty 9.x, and therefore can only be implemented from Camel 2.18 onwards where we upgraded jetty from 8 to 9 in the websocket component.
Sufod:1472962917:2016-09-04T12:21:57.045+0000:1472962917:2016-09-04T12:21:57.045+0000:Thx a lot for this improvement."
0,CAMEL-10282,Bug,Major,2.17.3,"2.16.4, 2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.4, 2.18.0",Andrea Cosentino,Paolo Antinori,0,3,2016-09-01 08:23:33+00:00,2016-09-01 09:34:58+00:00,"Avro holds a cache of classloaders and other reflection related classes in a static map here:


https://github.com/apache/avro/blob/master/lang/java/avro/src/main/java/org/apache/avro/specific/SpecificData.java#L52-L57


Keys of that map are {{String}}s with classname.


The cache is never updated, and this breaks OSGi ability to update a new class definition, since avro will keep pointing to the old version.


This will lead to a situation where, on an OSGi platform, you are exposed to ClassCastException since the rest of the platform might see a different varsion than the old one cached by avro.


The attached fix is a simple way to entirely bypass this caching behavior with just public subclasses that turn off just the caching behavior.","githubbot:1472691153:2016-09-01T08:52:33.289+0000:1472691153:2016-09-01T08:52:33.289+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1151

acosentino:1472691197:2016-09-01T08:53:17.796+0000:1472691197:2016-09-01T08:53:17.796+0000:Thanks for the PR :-)
paolo.antinori:1472693382:2016-09-01T09:29:42.381+0000:1472693382:2016-09-01T09:29:42.381+0000:I wonder if it'd be better to improve this with a component level flag that can enable/disable cache in avro datastructure, documented as not supported on OSGi.
acosentino:1472693698:2016-09-01T09:34:58.356+0000:1472693698:2016-09-01T09:34:58.356+0000:Good idea. You can send another PR with the same issue ID. Thanks!"
0,CAMEL-10281,Bug,Major,2.16.3,,"

stability

",Resolved,Invalid,None,Claus Ibsen,bernard HAUZEUR,0,2,2016-08-31 21:09:11+00:00,2016-09-01 08:21:55+00:00,"We have build a connector (WAR deployment) in XML DSL reading from a JMS queue, using numerous custom processors, and sending messages to SFTP destination. The URI is built dynamically and usually varies (file name, destination directory and server, etc) with each file being transmitted.
We conducted soak tests and the JVM becomes unresponsive after a few hours. The HEAP increases steadily and rapidly to several Gbytes until we undeploy the WAR at which time the GC can recover memory.
We discovered that the memory actually fills up with dynamic endpoint instances. If we trace producerTemplate.getCurrentCacheSize(), the number increases by 1 with every file being transmitted. The ProducerTemplate is supposed to obey a max 1000 cache size default but ignores this boundary and any other max cache size setting. 
We can also trace this increasing count but this time up to 1000 max (+ number of static endpoints) via getContext().getEndpointMap().size(). If we try compensating with getContext().removeEndpoint(...) as obtained from the previous map, the remove() generates no error, yet the producer template cache size does not reduce its ever increasing count.
On the other hand, if we are careful to always guarantee that the CAMEL URI is identical with every transmission and that all dynamic parameters are actually mapped on the exchange header properties instead of CAMEL options, then the count of dynamic endpoints remains at one from the start.
Whoever builds URIs and not knowing this is at risk of breaking production after a few hours or a few days according to traffic intensity.


Links to CAMEL-2558, CAMEL-3827, CAMEL-7965","davsclaus:1472685882:2016-09-01T07:24:42.206+0000:1472685882:2016-09-01T07:24:42.206+0000:Use the mailing list / user forum to get help.

And use the Exchange.FILE_NAME header to set a a dynamic file name to reuse the same endpoint
bh@artofe.biz:1472689315:2016-09-01T08:21:55.549+0000:1472689315:2016-09-01T08:21:55.549+0000:Hi Mr Ibsen, thanks for the speedy action but I can't agree. May be I was too verbose and the following escaped to your attention. May be I should have gone via the Forum first and let somebody else create the issue, humbly.

How do you explain that (excerpt):
""The ProducerTemplate is supposed to obey a max 1000 cache size default but ignores this boundary and any other max cache size setting [...] e.g. trace producerTemplate.getCurrentCacheSize()"" 

and 
""[...] getContext().getEndpointMap(): [...] getContext().removeEndpoint(...) as obtained from the previous map, the remove() generates no error, yet the producer template cache size does not reduce"" --> are we getting a copy of the actual endpoints? 
I even noted that I can remove a JMS consumer (static) endpoint (doc says it is stopped + removed), yet traffic continues to flow in... (ok stopping the route does work)



"
0,CAMEL-10280,Improvement,Major,"2.17.3, 2.18.0",2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Stefan Fussenegger,0,2,2016-08-31 15:31:35+00:00,2016-09-05 08:41:03+00:00,"If a topic already exists, the SnsEndpoint still requires privileges for the (idempotent) CreateTopic operation to resolve the name to an ARN.


In comparison, the SqsEndpoint uses the ListQueues operation to check for an existing queue before trying to create a queue.


Providing an ARN instead of a name bypasses the issue (added to 2.18 in CAMEL-9844). Using an ARN instead of a name isn't always practical though.","acosentino:1472694607:2016-09-01T09:50:07.831+0000:1472694607:2016-09-01T09:50:07.831+0000:Stefan, are you working on a PR?
sfussenegger:1472696322:2016-09-01T10:18:42.393+0000:1472696322:2016-09-01T10:18:42.393+0000:not right now. I think it would take more time to get the project set up locally.

it should pretty much come down to this though:

{code:java}
try {
	String nextToken = null;
	final String arnSuffix = "":"" + configuration.getTopicName();
	do {
		final ListTopicsResult response = snsClient.listTopics(nextToken);
		nextToken = response.getNextToken();

		for (final Topic topic : response.getTopics()) {
			if (topic.getTopicArn().endsWith(arnSuffix)) {
				configuration.setTopicArn(topic.getTopicArn());
				break;
			}
		}

	} while (nextToken != null);
} catch (final AuthorizationErrorException e) {
	// not sure this is the right exception to catch
	LOG.trace(""Not able to list topics due to insufficient permissions"");
}
{code}


acosentino:1472777471:2016-09-02T08:51:11.597+0000:1472777545:2016-09-02T08:52:25.471+0000:We have 

{code}
        if (configuration.getTopicArn() == null) {
            // creates a new topic, or returns the URL of an existing one
            CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName());

            LOG.trace(""Creating topic [{}] with request [{}]..."", configuration.getTopicName(), request);

            CreateTopicResult result = snsClient.createTopic(request);
            configuration.setTopicArn(result.getTopicArn());

            LOG.trace(""Topic created with Amazon resource name: {}"", configuration.getTopicArn());
        }
{code}

We can add a control before creating the topic and if we have an ARN, we can skip the creation. What do you think about this approach (if this is what you meant)?
sfussenegger:1472782028:2016-09-02T10:07:08.656+0000:1472782028:2016-09-02T10:07:08.656+0000:Not sure I understand what you mean by ""add a control before creating the topic and if we have an ARN"". Isn't that what {{if (configuration.getTopicArn() == null)}} is? This - i.e. supporting configuration of ARN - was added in 2.18 by CAMEL-9844, see [SnsEndpoint in master|https://github.com/apache/camel/blob/41fca5724a9bb45175f9fe32692da84520b976f6/components/camel-aws/src/main/java/org/apache/camel/component/aws/sns/SnsEndpoint.java#L92]

However, I have a problem with configuring an ARN like {{arn:aws:sns:us-east-1:123456789012:mytopic}}: You have to hard-code the region and account into it. Typically you want to rely on the AWS client configured values for that. For instance, people would want to run staging and production in different regions or different accounts in order to not interfere with each other. In this scenario, all ARNs would have to be changed which is unfortunate.

I would like to use a name - as it is already possible - however without requiring the {{CreateTopic}} permission. Our use-case is that SNS topics are created by a CloudFormation stack and thus are expected to exist. Thus a non-existing topic clearly is an indication of a misconfiguration. Currently, the camel component will create a topic and happily post to it, even though all subscribers are subscribed to a different topic. That again is unfortunate.

Imho, the easiest way to fix this is using a read-only API call to check if the topic exists before trying to create one. This is exactly what [the SqsEndpoint|https://github.com/apache/camel/blob/41fca5724a9bb45175f9fe32692da84520b976f6/components/camel-aws/src/main/java/org/apache/camel/component/aws/sqs/SqsEndpoint.java#L137] does right now using {{ListQueues}}. This is why I used {{ListTopics}} in my snippet above. I've also opted to ignore permission issues so it remains backward compatible and works with only {{CreateTopic}} too.

The complete code of {{SnsEndpoint.doStart()}} would look like this:

{code:java}
    @Override
    public void doStart() throws Exception {
        super.doStart();
        snsClient = configuration.getAmazonSNSClient() != null
            ? configuration.getAmazonSNSClient() : createSNSClient();
        
        // Override the setting Endpoint from url
        if (ObjectHelper.isNotEmpty(configuration.getAmazonSNSEndpoint())) {
            LOG.trace(""Updating the SNS region with : {} "" + configuration.getAmazonSNSEndpoint());
            snsClient.setEndpoint(configuration.getAmazonSNSEndpoint());
        }

	if (configuration.getTopicArn() == null) {
		// list topics and return URL of an existing topic
		try {
			String nextToken = null;
			final String arnSuffix = "":"" + configuration.getTopicName();
			do {
				final ListTopicsResult response = snsClient.listTopics(nextToken);
				nextToken = response.getNextToken();

				for (final Topic topic : response.getTopics()) {
					if (topic.getTopicArn().endsWith(arnSuffix)) {
						configuration.setTopicArn(topic.getTopicArn());
						break;
					}
				}

			} while (nextToken != null);
		} catch (final AuthorizationErrorException e) {
			// not sure this is the right exception to catch
			LOG.trace(""Not able to list topics due to insufficient permissions"");
		}
	}

        if (configuration.getTopicArn() == null) {
            // creates a new topic, or returns the URL of an existing one
            CreateTopicRequest request = new CreateTopicRequest(configuration.getTopicName());

            LOG.trace(""Creating topic [{}] with request [{}]..."", configuration.getTopicName(), request);

            CreateTopicResult result = snsClient.createTopic(request);
            configuration.setTopicArn(result.getTopicArn());

            LOG.trace(""Topic created with Amazon resource name: {}"", configuration.getTopicArn());
        }
        
        if (ObjectHelper.isNotEmpty(configuration.getPolicy())) {
            LOG.trace(""Updating topic [{}] with policy [{}]"", configuration.getTopicArn(), configuration.getPolicy());
            
            snsClient.setTopicAttributes(new SetTopicAttributesRequest(configuration.getTopicArn(), ""Policy"", configuration.getPolicy()));
            
            LOG.trace(""Topic policy updated"");
        }
        
    }
{code}
acosentino:1472782185:2016-09-02T10:09:45.875+0000:1472782185:2016-09-02T10:09:45.875+0000:Now I understood a bit better. Thanks for your explanation.

I will take a look at the code and test it a bit.

Thanks."
0,CAMEL-10279,Bug,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Hiram R. Chirino,Hiram R. Chirino,0,3,2016-08-31 15:05:35+00:00,2016-09-01 21:03:13+00:00,No Desc,"chirino:1472627200:2016-08-31T15:06:40.355+0000:1472627200:2016-08-31T15:06:40.355+0000:Seem like if you try to @ImportResource in a SB app that also defines a RouteBuilder, then the route builder is ignored.
githubbot:1472629840:2016-08-31T15:50:40.563+0000:1472629840:2016-08-31T15:50:40.563+0000:GitHub user chirino opened a pull request:

    https://github.com/apache/camel/pull/1150

    Fix for CAMEL-10279 - Can't use @ImportResource and configure() in th…

    …e same SB app.
    
    This assumes there is always a RouteBuilder in a SB app.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chirino/camel CAMEL-10279

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1150.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1150
    
----
commit 76f7f91dd680a7c38cde10b3b52943b4be80c0f0
Author: Hiram Chirino <hiram@hiramchirino.com>
Date:   2016-08-31T15:48:09Z

    Fix for CAMEL-10279 - Can't use @ImportResource and configure() in the same SB app.
    
    This assumes there is always a RouteBuilder in a SB app.

----

chirino:1472629905:2016-08-31T15:51:45.022+0000:1472629905:2016-08-31T15:51:45.022+0000:The https://github.com/apache/camel/pull/1150 PR gets this working, but it makes an assumption that SB app always have at least 1 route builder defined in them.  Is that OK?
davsclaus:1472686072:2016-09-01T07:27:52.676+0000:1472686072:2016-09-01T07:27:52.676+0000:You can have a SB app without a Camel route, for example a SB app that uses Spring RestController etc and then uses a ProducerTemplate from the controller to leverage the many Camel components.

If you want to define routes in XML, then you can drop xml files in the camel directory as documented
http://camel.apache.org/spring-boot

Why do you say there must be at least 1 route builder? What is it in the code that makes this a requirement? And what happens if there is 0 route builder ?

chirino:1472705752:2016-09-01T12:55:52.407+0000:1472705752:2016-09-01T12:55:52.407+0000:Actually I think we are fine.  The PR's change disables starting up the camel context when @ImportResource(...) loads a spring xml with a <camelConext> defined in it when CamelAutoConfiguration is also being used.  It lets the RoutesCollector handle starting up the camel context.

So even in the case where no RouteBuilder in the SB project I think it should handle starting up context fine.

githubbot:1472734993:2016-09-01T21:03:13.857+0000:1472734993:2016-09-01T21:03:13.857+0000:Github user chirino closed the pull request at:

    https://github.com/apache/camel/pull/1150
"
0,CAMEL-10278,Bug,Minor,2.17.0,2.17.4,"
None
",Resolved,Fixed,2.17.4,Andrea Cosentino,Jakub Knetl,0,3,2016-08-31 09:15:32+00:00,2016-08-31 09:57:49+00:00,There are incompatible versions of qpid-jms-client and proton-j in camel-amqp feature. The qpid-jms-client 0.8.0 is dependent on proton-j 0.12.0 but there is proton-j 0.10 in the feature. This makes amqp over qpid-jms-client unusable since AmqpProvider calls method setEmitFlowEventOnSend on proton-j object which turns out in NoSuchMethodException in the AmqpProvider and the provider fails.,"githubbot:1472606294:2016-08-31T09:18:14.190+0000:1472606294:2016-08-31T09:18:14.190+0000:GitHub user jknetl opened a pull request:

    https://github.com/apache/camel/pull/1147

    Fix qpid versions in camel-amqp feature

    qpid-jms-client 0.8.0 is incompatible with proton-j 0.10 so we need to
    bump up the proton-j to compatible 0.12.0.
    
    more details: https://issues.apache.org/jira/browse/CAMEL-10278

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jknetl/camel feature-qpid-version

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1147.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1147
    
----
commit 1611b4645ece490ee1de943ea253dc78158bb6d4
Author: Jakub Knetl <jknetl@redhat.com>
Date:   2016-08-31T09:10:16Z

    [features] Fix qpid versions
    
    qpid-jms-client 0.8.0 is incompatible with proton-j 0.10 so we need to
    bump up the proton-j to compatible 0.12.0

----

githubbot:1472608559:2016-08-31T09:55:59.873+0000:1472608559:2016-08-31T09:55:59.873+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1147

acosentino:1472608669:2016-08-31T09:57:49.782+0000:1472608669:2016-08-31T09:57:49.782+0000:Thanks for the PR "
0,CAMEL-10247,Bug,Minor,2.16.2,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Srinivas,0,2,2016-08-16 12:57:40+00:00,2016-08-17 14:22:08+00:00,"When there is onException block in the Routes, Route Ids are overridden in the test (CBTS) class. 


Ex: 



public class TestRoute extends RouteBuilder {

	@Override
	public void configure() throws Exception {
		onException(Exception.class).id(""ExceptionId"")
			.maximumRedeliveries(0)
			.handled(true)
			.setHeader(Exchange.HTTP_RESPONSE_CODE).constant(HttpURLConnection.HTTP_NOT_FOUND)
			.end()
			.stop();
		from(""file:foo"").id(""foo"")
			.to(""blah"") 
			.end();
	}
}




A Camel test (using Camel Blueprint Test Support) is written for the above route, then found that Route Ids is overridden with ""route1"" in the route definition. When OnException block code is commented, route id is replaced with ""foo"" in the route definition in CBTS. This behavior can be reproduced consistently.  


Please let me know if this is known behavior or needs fix.","davsclaus:1471324825:2016-08-16T13:20:25.029+0000:1471324825:2016-08-16T13:20:25.029+0000:The route id should be preserved. Can you try with latest 2.17.3 release. And also test outside OSGi with a plain camel-test unit test.
srinivas@live.com:1471328402:2016-08-16T14:20:02.040+0000:1471328402:2016-08-16T14:20:02.040+0000:Thanks for your quick response. I have changed the version of camel-core, camel-test, camel-test-blueprint to 2.17.3, CBTS test works with ""route1"" instead of route id given in the route. We use CBTS in our environment with karaf so may not be useful for us even if the test works in non OSGI environment. 
davsclaus:1471329826:2016-08-16T14:43:46.686+0000:1471329826:2016-08-16T14:43:46.686+0000:Are you saying that the same problem is in 2.17.3 - that the route is not named ""foo"" when you add onException?
srinivas@live.com:1471330649:2016-08-16T14:57:29.772+0000:1471330649:2016-08-16T14:57:29.772+0000:Yes.
davsclaus:1471392795:2016-08-17T08:13:15.895+0000:1471392795:2016-08-17T08:13:15.895+0000:I cannot reproduce your issue
https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/OnExceptionRouteIdTest.java
https://github.com/apache/camel/blob/master/components/camel-test-blueprint/src/test/java/org/apache/camel/test/blueprint/OnExceptionRouteIdRouteBuilder.java

Not sure what you do. But can you attach some unit test code that reproduces this or create a project on github etc.
srinivas@live.com:1471413735:2016-08-17T14:02:15.499+0000:1471413936:2016-08-17T14:05:36.934+0000:Thanks for your response.

1. I have changed the bug example to use id(""foo"") because I am using Id not RouteId. (when I copied an example I messed up).
2. Your example works and the difference is as stated above, you are using routeId not Id. And my code also works when I have changed from Id to RouteId
4. I am pretty sure we are using id everywhere and id doesn't work when onException is present and routeId works.
3. Which one is recommend to use id or routeId in all situations?


davsclaus:1471414905:2016-08-17T14:21:45.987+0000:1471414905:2016-08-17T14:21:45.987+0000:To set the id of the route, then in Java DSL **always** use routeId"
0,CAMEL-10246,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-08-16 11:27:05+00:00,2016-08-16 11:51:34+00:00,"See SO
http://stackoverflow.com/questions/38966224/apache-camel-how-to-configure-the-data-port-range-for-ftp-client-active-mode",
0,CAMEL-10245,Improvement,Minor,2.17.3,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Bob Gaudaen,0,3,2016-08-15 14:20:52+00:00,2016-08-16 12:27:22+00:00,"Following exception is raised when calling jpa producer with remove option and a detached entity:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-bobbys-mac-media-int-63836-1471269707364-0-4]

	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1706)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:677)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:507)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:503)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:150)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:155)
	at org.apache.camel.processor.jpa.JpaProducerRemoveTest.testRouteJpa(JpaProducerRemoveTest.java:54)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:253)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
Caused by: <openjpa-2.4.1-r422266:1730418 nonfatal user error> org.apache.openjpa.persistence.ArgumentException: You cannot perform operation delete on detached object ""org.apache.camel.examples.SendEmail-5801"". This operation only applies to managed objects.
FailedObject: org.apache.camel.examples.SendEmail-5801
	at org.apache.openjpa.kernel.BrokerImpl.newDetachedException(BrokerImpl.java:2835)
	at org.apache.openjpa.kernel.BrokerImpl.delete(BrokerImpl.java:2826)
	at org.apache.openjpa.kernel.BrokerImpl.delete(BrokerImpl.java:2771)
	at org.apache.openjpa.kernel.DelegatingBroker.delete(DelegatingBroker.java:1101)
	at org.apache.openjpa.persistence.EntityManagerImpl.remove(EntityManagerImpl.java:731)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:347)
	at com.sun.proxy.$Proxy40.remove(Unknown Source)
	at org.apache.camel.component.jpa.JpaProducer$1.remove(JpaProducer.java:131)
	at org.apache.camel.component.jpa.JpaProducer$1.doInTransaction(JpaProducer.java:92)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)
	at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:63)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:97)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:447)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:401)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:291)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:401)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:224)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:131)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:148)
	... 35 more","bgaudaen:1471242200:2016-08-15T14:23:20.961+0000:1471242200:2016-08-15T14:23:20.961+0000:This case was not handled by existing Unit Tests. Will update test and fix this.
githubbot:1471243027:2016-08-15T14:37:07.220+0000:1471243027:2016-08-15T14:37:07.220+0000:GitHub user bgaudaen opened a pull request:

    https://github.com/apache/camel/pull/1124

    CAMEL-10245 JPA detached entity fix

    Fixed JpaProducer when removing an entity that is not attached to current persistence context

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bgaudaen/camel jpa-detached-entity-fix

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1124.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1124
    
----
commit 10d5186f5e8a56371bad98307623f85c42273d35
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-08-15T14:25:04Z

    CAMEL-10245 Updated JpaProducerRemoveTest to remove previously persisted entity instead of new entity

commit f8e5bba6faa0b644867752564a28e5bf8f5f4c81
Author: Bob Gaudaen <bob.gaudaen@gmail.com>
Date:   2016-08-15T14:31:30Z

    CAMEL-10245 Fixed JpaProducer remove feature
    
    Check if entity is managed in current persistence context and merge if needed before removing.

----

davsclaus:1471245259:2016-08-15T15:14:19.992+0000:1471245259:2016-08-15T15:14:19.992+0000:What is your use-case for de-attaching the entity during Camel routing?
bgaudaen:1471303704:2016-08-16T07:28:24.725+0000:1471303704:2016-08-16T07:28:24.725+0000:Hi, thanks for the quick reply.
Here is simple route which represents my use case:

{noformat}
from(""direct:start"").
  pollEnrich(""jpa:Entity?consumeDelete=false&consumer.query=select x from Entity x where x.barId = ${header.barId}"", enricher).
  aggregate(header(""entityId""), aggregator).completionPredicate(somePredicate).
    to(""direct:handleAggregated"").
    setBody(entity).
    to(""jpa:Entity?remove=true"")
{noformat}

davsclaus:1471320638:2016-08-16T12:10:38.497+0000:1471320638:2016-08-16T12:10:38.497+0000:Okay your use-case is special in the sense you do an aggregate and have the entity deleted from the output of the aggregator.
githubbot:1471320874:2016-08-16T12:14:34.396+0000:1471320874:2016-08-16T12:14:34.396+0000:Github user bgaudaen closed the pull request at:

    https://github.com/apache/camel/pull/1124

bgaudaen:1471321642:2016-08-16T12:27:22.480+0000:1471321642:2016-08-16T12:27:22.480+0000:Yes indeed, I store my entity as a message property and all aggregated messages have a reference to the same entity. It actually works for my use case."
0,CAMEL-10244,Bug,Major,2.17.3,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Vitalii Tymchyshyn,0,3,2016-08-13 17:23:55+00:00,2016-08-15 15:40:26+00:00,"Due to synchronous nature of connection establishment, when same endpoint producer is used twice in same route (e.g. to make two sequential WS calls), BlockingOperationException is thrown:




java.lang.AssertionError: io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@4360ffb3(incomplete)
	at org.apache.camel.component.netty4.NettyTCPChainedTest.sendFile(NettyTCPChainedTest.java:53)
	at org.apache.camel.component.netty4.NettyTCPChainedTest.testTCPChainedConnectionFromCallbackThread(NettyTCPChainedTest.java:62)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)
Caused by: io.netty.util.concurrent.BlockingOperationException: DefaultChannelPromise@4360ffb3(incomplete)
	at io.netty.util.concurrent.DefaultPromise.checkDeadLock(DefaultPromise.java:398)
	at io.netty.channel.DefaultChannelPromise.checkDeadLock(DefaultChannelPromise.java:157)
	at io.netty.util.concurrent.DefaultPromise.awaitUninterruptibly(DefaultPromise.java:254)
	at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:135)
	at io.netty.channel.DefaultChannelPromise.awaitUninterruptibly(DefaultChannelPromise.java:28)
	at org.apache.camel.component.netty4.NettyProducer.openChannel(NettyProducer.java:488)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:563)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerPoolableObjectFactory.makeObject(NettyProducer.java:558)
	at org.apache.commons.pool.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:1188)
	at org.apache.camel.component.netty4.NettyProducer.process(NettyProducer.java:210)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:542)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:120)
	at org.apache.camel.processor.Pipeline.access$100(Pipeline.java:44)
	at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:138)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:554)
	at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:155)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:257)
	at org.apache.camel.processor.RedeliveryErrorHandler$2.done(RedeliveryErrorHandler.java:554)
	at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:155)
	at org.apache.camel.component.netty4.NettyProducer$NettyProducerCallback.done(NettyProducer.java:550)
	at org.apache.camel.component.netty4.NettyProducer$2.operationComplete(NettyProducer.java:338)
	at org.apache.camel.component.netty4.NettyProducer$2.operationComplete(NettyProducer.java:304)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:488)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)
	at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:111)
	at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82)
	at io.netty.channel.ChannelOutboundBuffer.safeSuccess(ChannelOutboundBuffer.java:673)
	at io.netty.channel.ChannelOutboundBuffer.remove(ChannelOutboundBuffer.java:263)
	at io.netty.channel.ChannelOutboundBuffer.removeBytes(ChannelOutboundBuffer.java:343)
	at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:425)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:856)
	at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:356)
	at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:823)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1296)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:778)
	at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:759)
	at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:786)
	at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:778)
	at io.netty.channel.AbstractChannelHandlerContext.access$1500(AbstractChannelHandlerContext.java:38)
	at io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.write(AbstractChannelHandlerContext.java:1149)
	at io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.run(AbstractChannelHandlerContext.java:1090)
	at io.netty.util.concurrent.SingleThreadEventExecutor.safeExecute(SingleThreadEventExecutor.java:451)
	at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:418)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:401)
	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)
	at java.lang.Thread.run(Thread.java:745)","githubbot:1471080611:2016-08-13T17:30:11.799+0000:1471080611:2016-08-13T17:30:11.799+0000:GitHub user tivv opened a pull request:

    https://github.com/apache/camel/pull/1120

    CAMEL-10244: Make connection establishment fuly async

    This makes netty4 connection establishment fully async & fixes CAMEL-10244

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tivv/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1120.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1120
    
----
commit 56dbed31b95615fcd00d0de736344d11a753b2c2
Author: Vitalii Tymchyshyn <vit@tym.im>
Date:   2016-08-13T17:25:19Z

    CAMEL-10244: Make connection establishment fuly async

----

davsclaus:1471221795:2016-08-15T08:43:15.562+0000:1471221795:2016-08-15T08:43:15.562+0000:Thanks for the PR
githubbot:1471221795:2016-08-15T08:43:15.603+0000:1471221795:2016-08-15T08:43:15.603+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1120
"
0,CAMEL-10243,Bug,Major,2.17.3,None,"
None
",Resolved,Fixed,"2.17.4, 2.18.0",Jonathan Anstey,Jonathan Anstey,0,1,2016-08-12 17:35:31+00:00,2016-08-12 17:38:12+00:00,"Abdera-parser is already in the camel-atom feature but because camel-atom bundle has no compile dependency on it, it doesn't actually get installed with the feature. The parser is almost always required though so would be nice to always install this so folks don't have to install additional bundles after the camel-atom feature.","janstey:1470994692:2016-08-12T17:38:12.981+0000:1470994692:2016-08-12T17:38:12.981+0000:[janstey@ghost features]$ git push origin 
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (14/14), done.
Writing objects: 100% (18/18), 1.32 KiB | 0 bytes/s, done.
Total 18 (delta 10), reused 0 (delta 0)
remote: camel git commit: CAMEL-10243 - Force camel-atom feature to install abdera-parser
remote: camel git commit: CAMEL-10243 - Force camel-atom feature to install abdera-parser
To https://git-wip-us.apache.org/repos/asf/camel.git
   291ea10..e500ce3  camel-2.17.x -> camel-2.17.x
   e3c9f1b..db1f8ea  master -> master
"
0,CAMEL-10242,Improvement,Major,2.17.3,2.18.0,"
None
",Resolved,Fixed,2.18.0,Quinn Stevenson,Venkateswara Rao Desu,0,4,2016-08-12 06:26:45+00:00,2016-09-07 07:47:42+00:00,"For a good client and Server , idle timeout is not required.


But when client has bugs which open socket but not close, then server would have ESTABLISHED connections pilled up. Which end up restarting the process or killing sockets manually.


To avoid this we should have idleTimeout for all mllp connections.


This is in reference to : https://github.com/hqstevenson/camel-mllp/issues/14#issuecomment-238911254","davsclaus:1471325042:2016-08-16T13:24:02.136+0000:1471325042:2016-08-16T13:24:02.136+0000:Contributions is welcome
http://camel.apache.org/contributing
davsclaus:1471325075:2016-08-16T13:24:35.084+0000:1471325075:2016-08-16T13:24:35.084+0000:[~hqstevenson] can you help with this?
hqstevenson:1471327879:2016-08-16T14:11:19.680+0000:1471327879:2016-08-16T14:11:19.680+0000:Adding support for the idleTimeout shouldn't be much of a problem for the MllpTcpServerConsumer, but the MllpTcpClientProducer is more involved.

The MllpTcpServerConsumer already has a polling thread looking for incoming data, so it will be easy enough to add a check for receiving something within a given timeout.  The granularity will be limited to multiples of the receiveTimout, but that shouldn't be too much of an issue.

The MllpTcpClientProducer doesn't create any threads of it's own, so I'd need to add a thread in order to timeout a connection.  I'm not sure we actually need the timeout for the MllpTcpClientProducer anyway, since the route can always set the CamelMllpCloseConnectionBeforeSend or CamelMllpResetConnectionBeforeSend exchange property and then ""send"" a dummy message - the connection will be closed/reset at that time.  This makes more sense to me because the route will have a better idea what a ""timeout"" means for a MllpTcpClientProducer.

My preference would be to add support for and idleTimeout to the MllpTcpServerConsumer, but leave the MllpTcpClientProducer alone.  

Thoughts?
davsclaus:1471329774:2016-08-16T14:42:54.147+0000:1471329774:2016-08-16T14:42:54.147+0000:Sounds good Quinn
iamdvr:1471485387:2016-08-18T09:56:27.071+0000:1471485387:2016-08-18T09:56:27.071+0000:Hi [~hqstevenson],
 The solution make sense. As producer would already have handle and generally close session once done with task. By having this enabled for consumer, we could save lot of servers which hold lot of open sockets without being used.
githubbot:1473156960:2016-09-06T18:16:00.520+0000:1473156960:2016-09-06T18:16:00.520+0000:GitHub user hqstevenson opened a pull request:

    https://github.com/apache/camel/pull/1159

    CAMEL-10242 - add timeout

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/hqstevenson/camel CAMEL-10242

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1159.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1159
    
----
commit 1fe263c3fc46664b58e4eec2cf099c8e3d7f1707
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-09-06T18:11:05Z

    CAMEL-10242 - added support for connection timeout

commit 164aa417c9bb97e2d258da22091e8d7656346be6
Author: Quinn Stevenson <quinn@pronoia-solutions.com>
Date:   2016-09-06T18:13:45Z

    resync CAMEL-10242 with master

----

githubbot:1473161367:2016-09-06T19:29:27.573+0000:1473161367:2016-09-06T19:29:27.573+0000:Github user hqstevenson closed the pull request at:

    https://github.com/apache/camel/pull/1159
"
0,CAMEL-10241,Bug,Minor,2.17.3,2.21.0,"
None
",Resolved,Cannot Reproduce,2.21.0,Claus Ibsen,Minh Tran,1,4,2016-08-11 23:07:16+00:00,2017-11-01 10:49:04+00:00,"MockEndpointAndSkip does not seem to get re-applied after each test when used in conjunction with DirtiesContext. Here is a unit test exhibiting the problem



@RunWith(CamelSpringBootJUnit4ClassRunner.class)
@SpringApplicationConfiguration
@MockEndpointsAndSkip(""direct:b"")
@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
public class MockTest {

	@Produce(uri = ""direct:a"")
	private ProducerTemplate producer;

	@EndpointInject(uri = ""mock:end"")
	private MockEndpoint end;

	@EndpointInject(uri = ""mock:direct:b"")
	private MockEndpoint directB;

	@Autowired
	private CamelContext context;

	@Configuration
	@EnableAutoConfiguration
	public static class Config extends SpringRouteBuilder {

		@Override
		public void configure() throws Exception {
			from(""direct:a"").to(""direct:b"");
			from(""direct:b"").to(""mock:end"");
		}
	}

	@Test
	public void testMock() throws InterruptedException {
		end.expectedMessageCount(0);
		directB.expectedBodiesReceived(""hello"");

		producer.sendBody(""hello"");

		MockEndpoint.assertIsSatisfied(context);
	}

	@Test
	public void testMock2() throws InterruptedException {
		end.expectedMessageCount(0);
		directB.expectedBodiesReceived(""hello"");

		producer.sendBody(""hello"");

		MockEndpoint.assertIsSatisfied(context);
	}
}




testMock and testMock2 are exactly the same and if run individually, they pass. However if you run both, the second one will always fail. Running them both inside eclipse and from maven command line exhibit the same behaviour. 


The error I get is



java.lang.AssertionError: mock://end Received message count. Expected: <0> but was: <1>




Which must mean that the skipping isn’t working. Here’s the tracer output to confirm



org.apache.camel.processor.interceptor.Tracer - ID-minhmac-local-51406-1470352938165-1-2 >>> (route3) from(direct://a) --> direct://b <<< Pattern:InOnly, Headers:{breadcrumbId=ID-minhmac-local-51406-1470352938165-1-1}, BodyType:String, Body:hello
org.apache.camel.processor.interceptor.Tracer - ID-minhmac-local-51406-1470352938165-1-2 >>> (route4) direct://b --> mock://end <<< Pattern:InOnly, Headers:{breadcrumbId=ID-minhmac-local-51406-1470352938165-1-1}, BodyType:String, Body:hello




If you remove the DirtiesContext, then both tests passes. My suspicion is that there is a bug when re-applying the MockEndpointAndSkip when the spring context is being rebuilt between tests.","jybesson:1471308420:2016-08-16T08:47:00.133+0000:1471308420:2016-08-16T08:47:00.133+0000:Hello Minh Tran,

I already experienced that kind of problem, I think you need to add the annotation on your test to make Camel check the annotation :
@ContextConfiguration(
        // Since Camel 2.11.0 
        loader = CamelSpringDelegatingTestContextLoader.class
    )

Jean-Yves
mtran:1471356772:2016-08-16T22:12:52.456+0000:1471356772:2016-08-16T22:12:52.456+0000:Hi Jean-Yves, I just tried that annotation but it still showing the same problem. Works individually but fails when both are run.
mtran:1471357246:2016-08-16T22:20:46.244+0000:1471357246:2016-08-16T22:20:46.244+0000:I have done some more experimenting and if you split up the 2 tests into 2 different classes, remove the @DirtiesContext (there's no need for it since the context isn't being reused anyway). 
ie
class MockTest containing only testMock()
class MockTest2 containing only testMock()

The tests passes individually but fail if you run both test classes. So it appears as though the issue is not specifically about DirtiesContext but maybe around creating new spring contexts?
jybesson:1471412411:2016-08-17T13:40:11.463+0000:1471412411:2016-08-17T13:40:11.463+0000:Hi,

I run your tests on my side and got the same results. I found a possible answer : the loader CamelSpringDelegatingTestContextLoader.class which is responsible of annotation post-processing when spring context is loaded is in conflict with another loader defined in @SpringApplicationConfiguration.

If you remove @SpringApplicationConfiguration and @EnableAutoConfiguration every works nicely with @DirtiesContext and @MockEndpoints. Here is my code, based on camel-spring-javaconfig :

@RunWith(CamelSpringBootJUnit4ClassRunner.class)
@MockEndpointsAndSkip(""direct:b"")
@ContextConfiguration(classes = {MockTest.Config.class}, loader = CamelSpringDelegatingTestContextLoader.class)
@DirtiesContext(classMode = ClassMode.AFTER_EACH_TEST_METHOD)
public class MockTest {

    @Produce(uri = ""direct:a"")
    private ProducerTemplate producer;

    @EndpointInject(uri = ""mock:end"")
    private MockEndpoint end;

    @EndpointInject(uri = ""mock:direct:b"")
    private MockEndpoint directB;

    @Autowired
    private CamelContext context;

    @Configuration
    public static class Config extends SingleRouteCamelConfiguration {

        @Override
        public RouteBuilder route() {

            return new RouteBuilder() {

                @Override
                public void configure() throws Exception {
                    this.from(""direct:a"").to(""direct:b"").routeId(""route1"");
                    this.from(""direct:b"").to(""mock:end"").routeId(""route2"");
                }

            };

        };

    }

    @Test
    public void testMock() throws InterruptedException {

        this.end.expectedMessageCount(0);
        this.directB.expectedBodiesReceived(""hello"");

        this.producer.sendBody(""hello"");

        MockEndpoint.assertIsSatisfied(this.context);
    }

    @Test
    public void testMock2() throws InterruptedException {

        this.end.expectedMessageCount(0);
        this.directB.expectedBodiesReceived(""hello"");

        this.producer.sendBody(""hello"");

        MockEndpoint.assertIsSatisfied(this.context);
    }
}
jybesson:1471412995:2016-08-17T13:49:55.780+0000:1471412995:2016-08-17T13:49:55.780+0000:I will try to find a solution to have both Spring Boot and Camel annotation support in tests but it might take time as I'm not a spring boot expert:-) Anyone can help here ?
mtran:1471417078:2016-08-17T14:57:58.312+0000:1471417078:2016-08-17T14:57:58.312+0000:If you remove the @SpringApplicationConfiguration and @EnableAutoConfiguration then you lose all the spring boot benefits, eg properties configuration and auto configuration for camel as well:(

I think in the @SpringApplicationConfiguration, there is an initializer property which you can probably add a custom one for Camel to do its thing when the context gets created?
jybesson:1471418195:2016-08-17T15:16:35.958+0000:1471418195:2016-08-17T15:16:35.958+0000:I think it is not possible inside a Spring Initializer because camel context is not created at that step of execution.
A good way to fix the problem would be to call CamelAnnotationsHandler.handleMockEndpoints(...) in CamelSpringBootExecutionListener.beforeTestMethod(...). For the moment it is only done for prepareInstance() method :-(
mtran:1472483517:2016-08-29T23:11:57.580+0000:1472483517:2016-08-29T23:11:57.580+0000:I've found a workaround for the mean time

I removed the @MockendpointAndSkip and added @UseAdviceWith

then modified/added the following beforeTest function
{noformat}
        @Configuration
	@EnableAutoConfiguration
	public static class Config extends SpringRouteBuilder {

		@Override
		public void configure() throws Exception {
			from(""direct:a"").routeId(""a"").to(""direct:b"");
			from(""direct:b"").routeId(""b"").to(""mock:end"");
		}
	}

       @Before
	public void beforeTest() throws Exception {
		context.getRouteDefinition(""a"").adviceWith(context, new AdviceWithRouteBuilder() {

			@Override
			public void configure() throws Exception {
				mockEndpointsAndSkip(""direct:b"");
			}
		});
		context.start();
	}
{noformat}

Not as convenient but at least now I can test properly in Spring Boot and have the ability to mock and skip end points
davsclaus:1509503885:2017-11-01T10:38:05.989+0000:1509503885:2017-11-01T10:38:05.989+0000:Works on latest release with camel-spring-boot unit tests"
0,CAMEL-10240,Improvement,Major,2.17.2,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Zoltan Farkas,0,5,2016-08-11 20:22:04+00:00,2016-09-07 07:46:53+00:00,"In CamelHttpClient a default threadpool is being created with a hardcoded size of 16:



    @Override
    protected void doStart() throws Exception {
        if (!hasThreadPool()) {
            // if there is no thread pool then create a default thread pool using daemon threads
            QueuedThreadPool qtp = new QueuedThreadPool();
            // 16 max threads is the default in the http client
            qtp.setMaxThreads(16);
            qtp.setDaemon(true);
            // let the thread names indicate they are from the client
            qtp.setName(""CamelJettyClient("" + ObjectHelper.getIdentityHashCode(this) + "")"");
            setThreadPoolOrExecutor(qtp);
        }
        super.doStart();
    }




this configuration does not work because number of selectors is calculated relative to the number of CPUs in HttpClientTransportOverHTTP:



   public HttpClientTransportOverHTTP()
    {
        this(Math.max(1, Runtime.getRuntime().availableProcessors() / 2));
    }




As a result by default camel simply hangs on these systems...


It would be nice if CamelHttpClient would have a constructor that set the HttpClientTransport or at least the number of selectors.","davsclaus:1471245325:2016-08-15T15:15:25.394+0000:1471245325:2016-08-15T15:15:25.394+0000:You are welcome to work on a patch / PR
http://camel.apache.org/contributing
acosentino:1471910509:2016-08-23T08:01:49.673+0000:1471910509:2016-08-23T08:01:49.673+0000:This can be a good starting point for new contributor.

Contributions are welcome.
tkopczynski:1472865438:2016-09-03T09:17:18.084+0000:1472865438:2016-09-03T09:17:18.084+0000:I can work on this one. 
Just one question: do you also want to introduce a new parameter in the JettyHttpComponent for the number of selectors?
davsclaus:1472869795:2016-09-03T10:29:55.515+0000:1472869795:2016-09-03T10:29:55.515+0000:Ah there is already options on component for min/max thread pool size of http client

httpClientMinThreads
httpClientMaxThreads

which will be used when creating the http client, see JettyHttpComponent createHttpClient method. 

Also jetty now uses 200 as max and 8 as min threads by default, in its default ctr for QueuedThreadPool.
We should likely remove that other code and leave those as default by jetty. Then end users can configure the min/max client thread pool on the component to what they want to use.
githubbot:1473073642:2016-09-05T19:07:22.065+0000:1473073642:2016-09-05T19:07:22.065+0000:GitHub user tkopczynski opened a pull request:

    https://github.com/apache/camel/pull/1157

    CAMEL-10240: Fix for thread pool sizes in CamelHttpClient

    Fixes CAMEL-10240.
    
    Things I did:
    
    - Removed setting the `QueuedThreadPool` size to 16 in `CamelHttpClient`. Now it relies on defaults in `QueuedThreadPool` class itself.
    
    - Added a constructor in `CamelHttpClient` for setting `HttpClientTransport`.
    
    - If the `httpClientMaxThreads` parameter is set, it becomes the selectors number for the `HttpClientTransport` instance. I'm not sure about this one but I thought it might be good to enable the possibility to configure this instead of having the dependency on `Runtime.getRuntime().availableProcessors()` for all cases. But maybe it would be better to create a new parameter for this?


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/tkopczynski/camel camel-10240

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1157.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1157
    
----
commit 6f12d971fe55738ee6f1e96b33917cd230d8af99
Author: Tomasz Kopczynski <tomek@kopczynski.net.pl>
Date:   2016-09-05T18:55:04Z

    CAMEL-10240: Fix for thread pool sizes in CamelHttpClient

----

githubbot:1473205523:2016-09-07T07:45:23.843+0000:1473205523:2016-09-07T07:45:23.843+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1157

davsclaus:1473205612:2016-09-07T07:46:52.001+0000:1473205612:2016-09-07T07:46:52.001+0000:Thanks for the PR"
0,CAMEL-10239,New Feature,Major,2.17.2,2.18.0,"

camel
github-pullrequest
newbie
patch
rabbitmq

",Resolved,Fixed,2.18.0,Claus Ibsen,Florian Gessner,0,3,2016-08-11 18:53:58+00:00,2016-09-07 19:07:29+00:00,"So far camel-rabbitmq supports publisher acknowledgements to ensure that a massage was delivered to the brokers. However this does not guarantee that the message is delivered to queue (https://www.rabbitmq.com/confirms.html - 'When will messages be confirmed?').


To implement guaranteed delivery publisher acknowledgements have to be activated together with a return listener and publishing messages as mandatory.
In this case the basic.return will be returned to the publisher before the basic.nack or basic.ack. Only in this case we can be sure that the message is really delivered to the configured queue (or fails if no queue is available).


As a solution I provided a pull request on github together with integration tests.


https://github.com/apache/camel/pull/1116


Please let me know if I can provide further support/input.","githubbot:1470913214:2016-08-11T19:00:14.754+0000:1470913214:2016-08-11T19:00:14.754+0000:GitHub user gessnerfl opened a pull request:

    https://github.com/apache/camel/pull/1116

    CAMEL-10239: Provide implementation for publisher acknowledgement + basic.return

    This is a first implementation to support guaranteed delivery of mandatory messages with rabbitmq. For more details please check the corresponding JIRA ticket:
    https://issues.apache.org/jira/browse/CAMEL-10239

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gessnerfl/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1116.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1116
    
----
commit 955ffb331a2c729ec8998e45b99c62ae6867b641
Author: Florian Gessner <flo.gessner@gmail.com>
Date:   2016-08-11T18:54:48Z

    CAMEL-10239: Provide implementation for publisher acknowledgement together with basic.return

----

githubbot:1470956337:2016-08-12T06:58:57.761+0000:1470956337:2016-08-12T06:58:57.761+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1116

davsclaus:1470956355:2016-08-12T06:59:15.273+0000:1470956355:2016-08-12T06:59:15.273+0000:Thanks for the PR
githubbot:1473246356:2016-09-07T19:05:56.128+0000:1473246356:2016-09-07T19:05:56.128+0000:GitHub user gessnerfl opened a pull request:

    https://github.com/apache/camel/pull/1160

    CAMEL-10239: waitForConfirmsOrDie does not return if no timeout is se…

    …t for publisher acks and guaranteed delivery

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gessnerfl/camel CAMEL-10239_waitForConfirmsOrDieHangs

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1160.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1160
    
----
commit 1d577fe0552c641ffe61479be7f314b0da3ed622
Author: Florian Gessner <florian.gessner@tis.biz>
Date:   2016-09-07T19:04:10Z

    CAMEL-10239: waitForConfirmsOrDie does not return if no timeout is set for publisher acks and guaranteed delivery

----

githubbot:1473246449:2016-09-07T19:07:29.823+0000:1473246449:2016-09-07T19:07:29.823+0000:Github user gessnerfl closed the pull request at:

    https://github.com/apache/camel/pull/1160
"
0,CAMEL-10238,Bug,Major,"2.17.2, 2.17.3, 2.18.0","2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Dhiraj Sureshkumar Bokde,Rajesh A,0,3,2016-08-11 13:39:50+00:00,2016-09-30 08:18:45+00:00,"My connection to salesforce-streaming api gets disconnect automatically after 2 hours. This is because salesforce automatically disconnects the connection from server side. However, I was expecting camel-salesforce component to reconnect automatically after disconnect. But, it does not reconnect and I do not have a  hold or a way to reconnect. Seems to be a defect and a blocker to me.


Here is the trace log



[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=84, successful=true}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, connectionType=long-polling}]
[36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, successful=true}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/connect {clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, successful=true}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: CONNECTED -> CONNECTED
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=85, successful=true}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=86, connectionType=long-polling}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: CONNECTED -> UNCONNECTED
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Messages failed [{clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=86, connectionType=long-polling}]

java.io.EOFException: HttpConnectionOverHTTP@12f0e719(l:/10.172.131.200:50574 <-> r:my-proxy.com/x.x.x.x:xx,closed=false)[HttpChannelOverHTTP@2a4927(exchange=HttpExchange@6ae1ae35 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@51fea1e0(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@44234ce9(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.earlyEOF(HttpReceiverOverHTTP.java:277) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:1309) [jetty-http-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.shutdown(HttpReceiverOverHTTP.java:182) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.process(HttpReceiverOverHTTP.java:129) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpReceiverOverHTTP.receive(HttpReceiverOverHTTP.java:69) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.receive(HttpChannelOverHTTP.java:89) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onFillable(HttpConnectionOverHTTP.java:122) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544) [jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635) [jetty-util-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555) [jetty-util-9.2.14.v20151106.jar:9.2.14.v20151106]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_66]

[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {failure={exception=java.io.EOFException: HttpConnectionOverHTTP@12f0e719(l:/10.172.131.200:50574 <-> r:my-proxy.com/x.x.x.x:xx,closed=false)[HttpChannelOverHTTP@2a4927(exchange=HttpExchange@6ae1ae35 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@51fea1e0(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@44234ce9(rsp=IDLE,failure=null)[HttpParser{s=CLOSED,0 of -1}]]], message={clientId=3u9riwg6ag3r5dd3ay86i444f, channel=/meta/connect, id=86, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=86, subscription=null, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=87, connectionType=long-polling}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: UNCONNECTED -> UNCONNECTED
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Messages failed [{clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=87, connectionType=long-polling}]

org.eclipse.jetty.io.EofException: null
	at org.eclipse.jetty.io.ssl.SslConnection$DecryptedEndPoint.flush(SslConnection.java:723) ~[jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.WriteFlusher.flush(WriteFlusher.java:408) ~[jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.WriteFlusher.write(WriteFlusher.java:302) ~[jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.io.AbstractEndPoint.write(AbstractEndPoint.java:129) [jetty-io-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpSenderOverHTTP.sendHeaders(HttpSenderOverHTTP.java:108) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpSender.send(HttpSender.java:204) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpChannelOverHTTP.send(HttpChannelOverHTTP.java:78) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP$Delegate.send(HttpConnectionOverHTTP.java:218) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.send(HttpConnectionOverHTTP.java:91) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpDestinationOverHTTP.send(HttpDestinationOverHTTP.java:36) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.http.HttpDestinationOverHTTP.send(HttpDestinationOverHTTP.java:26) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.PoolingHttpDestination.process(PoolingHttpDestination.java:150) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.PoolingHttpDestination.send(PoolingHttpDestination.java:85) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.PoolingHttpDestination.send(PoolingHttpDestination.java:76) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpDestination.send(HttpDestination.java:187) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpClient.send(HttpClient.java:527) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:694) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.eclipse.jetty.client.HttpRequest.send(HttpRequest.java:678) [jetty-client-9.2.14.v20151106.jar:9.2.14.v20151106]
	at org.cometd.client.transport.LongPollingTransport.send(LongPollingTransport.java:191) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient$BayeuxClientState.transportSend(BayeuxClient.java:1430) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient$BayeuxClientState.send(BayeuxClient.java:1425) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient.sendConnect(BayeuxClient.java:482) [cometd-java-client-3.0.9.jar:na]
	at org.cometd.client.BayeuxClient$12.run(BayeuxClient.java:815) [cometd-java-client-3.0.9.jar:na]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_66]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_66]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [na:1.8.0_66]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_66]
	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_66]
Caused by: java.nio.channels.ClosedChannelException: null
	... 30 common frames omitted

[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {failure={exception=org.eclipse.jetty.io.EofException, message={clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=87, connectionType=long-polling}, connectionType=long-polling}, channel=/meta/connect, id=87, subscription=null, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Connecting, transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{clientId=3u9riwg6ag3r5dd3ay86i444f, advice={timeout=0}, channel=/meta/connect, id=88, connectionType=long-polling}]
[36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=88, error=403::Unknown client, successful=false}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/connect {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=88, error=403::Unknown client, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: UNCONNECTED -> REHANDSHAKING
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=88, error=403::Unknown client, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Handshaking on transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@4e0cc334: {supportedConnectionTypes=[long-polling], channel=/meta/handshake, version=1.0}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{ext={replay=true}, supportedConnectionTypes=[long-polling], channel=/meta/handshake, id=89, version=1.0}]
[36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=89, error=401::Authentication invalid, successful=false}]
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/handshake {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=89, error=401::Authentication invalid, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: REHANDSHAKING -> TERMINATING
[36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_HANDSHAKE]: {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=89, error=401::Authentication invalid, successful=false}
[36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: TERMINATING -> DISCONNECTED","rajesh734:1471242096:2016-08-15T14:21:36.034+0000:1471242096:2016-08-15T14:21:36.034+0000:Did anyone get a chance to look into this?
davsclaus:1471245222:2016-08-15T15:13:42.520+0000:1471245222:2016-08-15T15:13:42.520+0000:No

See here about support, and how to get help faster
http://camel.apache.org/support.html
davsclaus:1471391932:2016-08-17T07:58:52.027+0000:1471391932:2016-08-17T07:58:52.027+0000:[~dhirajsb] do you have any thoughts on the camel-salesforce component and re-connection logic 
dhirajsb:1471424244:2016-08-17T16:57:24.339+0000:1471428650:2016-08-17T18:10:50.684+0000:Rajesh, do you have any unusual environment settings/configuration, like going through a proxy, etc.? I'll test the latest source, but the connector has been tested before. Can you also post logs with jetty client debug turned on, when this error happens? 

Another thing to note is that the underlying jetty client is different in 2.17.x and 2.18.x, but the reconnect and resubscribe logic is the same in the component code. Have you tested with the latest versions of both branches? 
rajesh734:1471435229:2016-08-17T20:00:29.043+0000:1471435229:2016-08-17T20:00:29.043+0000:Dhiraj, I tested it with 2.17.x and 2.18.x. Let me create a brand new workspace with 2.17.3 stable release and get you the log. 

Yes, I am making streaming request via an internal company proxy.
rajesh734:1471555458:2016-08-19T05:24:18.678+0000:1471555458:2016-08-19T05:24:18.678+0000:here is the disconnect log for 2.18.x latest version: 

[2m2016-08-18 18:12:59.287[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content to last chunk java.nio.HeapByteBuffer[pos=0 lim=112 cap=112]
[2m2016-08-18 18:12:59.287[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m write: WriteFlusher@48800edd{IDLE} [HeapByteBuffer@5a1c37f9[p=0,l=476,c=4096,r=476]={<<<POST https://lm--...Length: 112\r\n\r\n>>>EfCQ7CXXAL3b3x77Q...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@795b0f98[p=0,l=112,c=112,r=112]={<<<[{""clientId"":""h1h...long-polling""}]>>>}]
[2m2016-08-18 18:12:59.288[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{WRITING}:IDLE-->WRITING
[2m2016-08-18 18:12:59.288[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush enter [java.nio.HeapByteBuffer[pos=0 lim=476 cap=4096], java.nio.HeapByteBuffer[pos=0 lim=112 cap=112]]
[2m2016-08-18 18:12:59.288[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/617,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] wrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 588 bytesProduced = 617
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,W,8/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,7/340000,SslConnection}{io=1,kio=1,kro=1} OK HeapByteBuffer@4171b175[p=0,l=617,c=17408,r=617]={<<<\x17\x03\x03\x02d\x00\x00\x00\x00\x00\x00\x00f\x1c-\xF3\x85...\xF0\xDcv\xE6F\x8aD\xAc""`\xFd\x18\xE95b>>>\xEe\x8b`\x9a\xF7\x1e=#V\x9f\xE6\x9e\xFb\x82\xF3V>...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m flushed 617 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,7/340000,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/0,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush exit, consumed 588
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{IDLE}:WRITING-->IDLE
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request committed HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request content HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
HeapByteBuffer@5322ab23[p=0,l=112,c=112,r=112]={<<<[{""clientId"":""h1h...long-polling""}]>>>}
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content past last chunk
[2m2016-08-18 18:12:59.289[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Content false consumed true for HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.290[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request success HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.290[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated request for HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null, result: null
[2m2016-08-18 18:12:59.290[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Terminating request HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 1/3 selected
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 1 -> 0 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,43/340000,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 1 -> 0 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable enter DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,51/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable exit DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,51/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->IDLE SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=0,c=16384,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 718 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,43/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=718/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 718 encrypted bytes
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=689} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 718 bytesProduced = 689
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@6eebb258 req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 689 bytes DirectByteBuffer@593223d9[p=0,l=689,c=16384,r=689]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,51/340000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/340000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=689,c=16384,r=689]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m START --> RESPONSE_VERSION
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m RESPONSE_VERSION --> SPACE1
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE1 --> STATUS
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m STATUS --> SPACE2
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE2 --> REASON
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m REASON --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response begin HttpResponse[HTTP/1.1 200 OK]@65c1a10d
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.332[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> CONTENT
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response headers HttpResponse[HTTP/1.1 200 OK]@65c1a10d
Date: Thu, 18 Aug 2016 22:12:59 GMT
Content-Security-Policy-Report-Only: default-src https:; script-src https: 'unsafe-inline' 'unsafe-eval'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /_/ContentDomainCSPNoAuth?type=mydomain
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Salesforce-No-Proxy: true
Content-Type: application/json;charset=UTF-8
Content-Length: 137
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response content HttpResponse[HTTP/1.1 200 OK]@65c1a10d
DirectByteBufferR@4712228a[p=552,l=689,c=16384,r=137]={HTTP/1.1 200 OK\r\n...ath=/cometd\r\n\r\n<<<[{""advice"":{""inte...essful"":false}]>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m CONTENT --> END
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m reset HttpParser{s=END,137 of 137}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m END --> START
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response success HttpResponse[HTTP/1.1 200 OK]@65c1a10d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated response for HttpExchange@6eebb258 req=TERMINATED/null@null res=TERMINATED/null@null, result: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df > HttpResponse[HTTP/1.1 200 OK]@65c1a10d] null
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response complete HttpResponse[HTTP/1.1 200 OK]@65c1a10d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpChannel    [0;39m [2m:[0;39m HttpExchange@6eebb258 req=TERMINATED/null@null res=TERMINATED/null@null disassociated true from HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] released
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Processing exchange null on HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] of HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=0,pool=ConnectionPool[c=2/2,a=1,i=1]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.ConnectionPool [0;39m [2m:[0;39m Connection idle HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Request/Response succeeded: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/connect HTTP/1.1]@455169df > HttpResponse[HTTP/1.1 200 OK]@65c1a10d] null
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.e.j.client.TimeoutCompleteListener    [0;39m [2m:[0;39m Cancelled (successfully: true) timeout task org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask@f94a8f8
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=103, error=403::Unknown client, successful=false}]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/connect {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=103, error=403::Unknown client, successful=false}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: CONNECTED -> REHANDSHAKING
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_CONNECT]: {advice={reconnect=handshake, interval=0}, channel=/meta/connect, id=103, error=403::Unknown client, successful=false}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=689,l=689,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Handshaking on transport org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$3@61ab6521: {supportedConnectionTypes=[long-polling], channel=/meta/handshake, version=1.0}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 0 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,16/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 0 encrypted bytes
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 0 bytes DirectByteBuffer@593223d9[p=689,l=689,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>}\xFc\x02""=\xB9\xBc.\x01\x00\x00*\xCe\x0bmo\xDf...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,67/0,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,16/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Sending messages [{ext={replay=true}, supportedConnectionTypes=[long-polling], channel=/meta/handshake, id=104, version=1.0}]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->FILLING_FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING_FILL_INTERESTED-->FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m IDLE-->FILL_INTERESTED SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 0 -> 1 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-23][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 0/3 selected
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 0 -> 1 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36mo.e.j.client.TimeoutCompleteListener    [0;39m [2m:[0;39m Scheduled timeout task org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask@1df32f09 in 60000 ms for HttpRequest[POST /cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Queued HttpRequest[POST /cometd/37.0/handshake HTTP/1.1]@2eb9379d for HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=1,pool=ConnectionPool[c=2/2,a=0,i=2]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.ConnectionPool [0;39m [2m:[0;39m Connection active HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Processing exchange HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null on HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] of HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=0,pool=ConnectionPool[c=2/2,a=1,i=1]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.IdleTimeout        [0;39m [2m:[0;39m DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=1,kro=1} idle timeout check, elapsed: 0 ms, remaining: 120000 ms
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.IdleTimeout        [0;39m [2m:[0;39m SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/120000,SslConnection}{io=1,kio=1,kro=1} idle timeout check, elapsed: 0 ms, remaining: 120000 ms
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpChannel    [0;39m [2m:[0;39m HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null associated true to HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request begin HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request headers HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
Accept-Encoding: gzip
User-Agent: Jetty/9.2.17.v20160517
Content-Type: application/json;charset=UTF-8
Cookie: BAYEUX_BROWSER=93dd-dvcdg9sjhdq0is0pfju8t7h
Cookie: sfdc-stream=710144266.38175.0000
Authorization: OAuth 00D190000000WqD!AQEAQFYApiah298viTmAZevjtzeQzw_3MBYTiePeHZjAO3k80b6l0TA161S3ArBdfSxwZ7gLC92LpIuAeeMDvSLl3col3MxK
Host: lm--agency.cs24.my.salesforce.com
Content-Length: 124
Cookie: BrowserId=xCziREfCQ7CXXAL3b3x77Q
[2m2016-08-18 18:12:59.348[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content to last chunk java.nio.HeapByteBuffer[pos=0 lim=124 cap=124]
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m write: WriteFlusher@48800edd{IDLE} [HeapByteBuffer@5a1c37f9[p=0,l=520,c=4096,r=520]={<<<POST https://lm--...Length: 124\r\n\r\n>>>Qzw_3MBYTiePeHZjA...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00},HeapByteBuffer@4982137a[p=0,l=124,c=124,r=124]={<<<[{""ext"":{""replay""...ersion"":""1.0""}]>>>}]
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{WRITING}:IDLE-->WRITING
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush enter [java.nio.HeapByteBuffer[pos=0 lim=520 cap=4096], java.nio.HeapByteBuffer[pos=0 lim=124 cap=124]]
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/673,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] wrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 644 bytesProduced = 673
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,W,16/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,16/120000,SslConnection}{io=1,kio=1,kro=1} OK HeapByteBuffer@4b887332[p=0,l=673,c=17408,r=673]={<<<\x17\x03\x03\x02\x9c\x00\x00\x00\x00\x00\x00\x00g\xDe\xAc\x8e\x97...\xF6mB\xA6\xCe\xD3f\x82\r\x92W~\t\xE3\x8e>>>cessful"":false}]\x17...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m flushed 673 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,16/120000,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/0,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=PENDING/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=HEADERS,snd=SENDING,failure=null)[HttpGenerator{s=COMPLETING}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] flush exit, consumed 644
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.io.WriteFlusher       [0;39m [2m:[0;39m update WriteFlusher@48800edd{IDLE}:WRITING-->IDLE
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request committed HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request content HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
HeapByteBuffer@4d0de624[p=0,l=124,c=124,r=124]={<<<[{""ext"":{""replay""...ersion"":""1.0""}]>>>}
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpContent    [0;39m [2m:[0;39m Advanced content past last chunk
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Content false consumed true for HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Request success HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated request for HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null, result: null
[2m2016-08-18 18:12:59.364[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[pool-1-thread-1][0;39m [36morg.eclipse.jetty.client.HttpSender     [0;39m [2m:[0;39m Terminating request HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 1/3 selected
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 1 -> 0 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,241/120000,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 1 -> 0 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable enter DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,257/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILL_INTERESTED-->FILLING HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m onFillable exit DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,257/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->IDLE SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=0,c=16384,r=0]={<<<>>>HTTP/1.1 200 OK\r\n...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 633 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,241/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=633/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 633 encrypted bytes
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=604} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 633 bytesProduced = 604
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=HttpExchange@fbfca1d req=TERMINATED/null@null res=PENDING/null@null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 604 bytes DirectByteBuffer@593223d9[p=0,l=604,c=16384,r=604]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,257/120000,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/120000,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=0,l=604,c=16384,r=604]={<<<HTTP/1.1 200 OK\r\n...essful"":false}]>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m START --> RESPONSE_VERSION
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m RESPONSE_VERSION --> SPACE1
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE1 --> STATUS
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m STATUS --> SPACE2
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m SPACE2 --> REASON
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m REASON --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response begin HttpResponse[HTTP/1.1 200 OK]@22370a22
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_NAME
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_NAME --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> HEADER_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_VALUE --> HEADER_IN_VALUE
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER_IN_VALUE --> HEADER
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m HEADER --> CONTENT
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response headers HttpResponse[HTTP/1.1 200 OK]@22370a22
Date: Thu, 18 Aug 2016 22:12:59 GMT
Content-Security-Policy-Report-Only: default-src https:; script-src https: 'unsafe-inline' 'unsafe-eval'; style-src https: 'unsafe-inline'; img-src https: data:; font-src https: data:; report-uri /_/ContentDomainCSPNoAuth?type=mydomain
Strict-Transport-Security: max-age=31536000; includeSubDomains
X-Salesforce-No-Proxy: true
Content-Type: application/json;charset=UTF-8
Content-Length: 151
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response content HttpResponse[HTTP/1.1 200 OK]@22370a22
DirectByteBufferR@7b7e433f[p=453,l=604,c=16384,r=151]={HTTP/1.1 200 OK\r\n...Length: 151\r\n\r\n<<<[{""ext"":{""replay""...essful"":false}]>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m CONTENT --> END
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m reset HttpParser{s=END,151 of 151}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m END --> START
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response success HttpResponse[HTTP/1.1 200 OK]@22370a22
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpExchange   [0;39m [2m:[0;39m Terminated response for HttpExchange@fbfca1d req=TERMINATED/null@null res=TERMINATED/null@null, result: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d > HttpResponse[HTTP/1.1 200 OK]@22370a22] null
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Response complete HttpResponse[HTTP/1.1 200 OK]@22370a22
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpChannel    [0;39m [2m:[0;39m HttpExchange@fbfca1d req=TERMINATED/null@null res=TERMINATED/null@null disassociated true from HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] released
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.eclipse.jetty.client.HttpDestination  [0;39m [2m:[0;39m Processing exchange null on HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] of HttpDestination[https://lm--agency.cs24.my.salesforce.com]6546371(via my.proxy.com:80),queue=0,pool=ConnectionPool[c=2/2,a=1,i=1]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.ConnectionPool [0;39m [2m:[0;39m Connection idle HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Request/Response succeeded: Result[HttpRequest[POST https://lm--Agency.cs24.my.salesforce.com/cometd/37.0/handshake HTTP/1.1]@2eb9379d > HttpResponse[HTTP/1.1 200 OK]@22370a22] null
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.e.j.client.TimeoutCompleteListener    [0;39m [2m:[0;39m Cancelled (successfully: true) timeout task org.eclipse.jetty.util.thread.ScheduledExecutorScheduler$ScheduledFutureTask@1df32f09
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper$3      [0;39m [2m:[0;39m Received messages [{ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}]
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m Processing /meta/handshake {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: REHANDSHAKING -> TERMINATING
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.a.c.c.s.i.s.SubscriptionHelper        [0;39m [2m:[0;39m [CHANNEL:META_HANDSHAKE]: {ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.cometd.client.BayeuxClient          [0;39m [2m:[0;39m State update: TERMINATING -> DISCONNECTED
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.http.HttpParser       [0;39m [2m:[0;39m parseNext s=START DirectByteBuffer@593223d9[p=604,l=604,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Parsed false, remaining 0 HttpParser{s=START,0 of -1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill enter
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ChannelEndPoint    [0;39m [2m:[0;39m filled 0 SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] filled 0 encrypted bytes
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=0/-1,di=0} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] unwrap Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.ssl.SslConnection  [0;39m [2m:[0;39m SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]] fill exit
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.client.HttpReceiver   [0;39m [2m:[0;39m Read 0 bytes DirectByteBuffer@593223d9[p=604,l=604,c=16384,r=0]={HTTP/1.1 200 OK\r\n...essful"":false}]<<<>>>hannel"":""/meta/co...\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00} from DecryptedEndPoint@1539dfa2{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,257/0,HttpConnectionOverHTTP}->SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,-,-,0/0,SslConnection}{io=0,kio=0,kro=1}
[2m2016-08-18 18:12:59.605[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING-->FILLING_FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m FILLING_FILL_INTERESTED-->FILL_INTERESTED HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m fillInterested SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.AbstractConnection [0;39m [2m:[0;39m IDLE-->FILL_INTERESTED SslConnection@5384c51d{NOT_HANDSHAKING,eio=-1/-1,di=-1} -> HttpConnectionOverHTTP@4be4f5d2(l:/10.1.1.200:55207 <-> r:my.proxy.com/x.x.x.x:80,closed=false)[HttpChannelOverHTTP@ee672ca(exchange=null)[send=HttpSenderOverHTTP@2b2a143a(req=QUEUED,snd=COMPLETED,failure=null)[HttpGenerator{s=START}],recv=HttpReceiverOverHTTP@3fa2fd5e(rsp=IDLE,failure=null)[HttpParser{s=START,0 of -1}]]]
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Local interests updating 0 -> 1 for SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=0,kro=1}
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[t@1415390560-25][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Queued change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop woken up from select, 0/3 selected
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Running change org.eclipse.jetty.io.SelectChannelEndPoint$1@7c015c95
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36mo.e.jetty.io.SelectChannelEndPoint      [0;39m [2m:[0;39m Key interests updated 0 -> 1 on SelectChannelEndPoint@406cec46{my.proxy.com/x.x.x.x:80<->55207,Open,in,out,R,-,0/0,SslConnection}{io=1,kio=1,kro=1}
[2m2016-08-18 18:12:59.621[0;39m [32mDEBUG[0;39m [35m6148[0;39m [2m---[0;39m [2m[ager@7af1d072/0][0;39m [36morg.eclipse.jetty.io.SelectorManager    [0;39m [2m:[0;39m Selector loop waiting on select

dhirajsb:1471602710:2016-08-19T18:31:50.004+0000:1471602782:2016-08-19T18:33:02.268+0000:Hi Rajesh, 

Please attach logs as files next time. From your log it looks like CometD tries to reconnect after the 2 hour expiry by sending new handshake messages (I tested this and it worked in my local tests), but in your test OAuth token has also expired and Salesforce responds with the following message but HTTP status 200:
{code}
{ext={replay=true}, advice={reconnect=none}, channel=/meta/handshake, id=104, error=401::Authentication invalid, successful=false}
{code}
The 401 is buried in the body, so {{SalesforceSecurityHandler}} in 2.18.x doesn't see it, and {{reconnect=none}} is causing CometD to terminate the connection. I'll also check what's going on in 2.17.x. 

I will create a test for this scenario and provide a way to handle it. BTW, is this consumer the only route in your application? I'm wondering why this wasn't seen earlier by other users. 
rajesh734:1471608212:2016-08-19T20:03:32.060+0000:1471608212:2016-08-19T20:03:32.060+0000:Yes Dhiraj, this is the only route we defined for our new application. I would appreciate if you could fix this issue.

Thanks
Rajesh
dhirajsb:1471879118:2016-08-22T23:18:38.368+0000:1471879118:2016-08-22T23:18:38.368+0000:I tried recreating your exact scenario, but couldn't. If I force the token to expire, Salesforce responds with a 401 HTTP Status, which is handled by {{SalesforceSecurityHandler}} (a little clumsily, which can be improved upon, but it's handled). In your case it seems like Salesforce is responding with the 401 inside the CometD message. I can write a little fix to simply renew the token when it sees the 401 inside a _connect_ response, but I won't be able to test it. You'd have to test the patch to confirm. 
rajesh734:1471930274:2016-08-23T13:31:14.080+0000:1471930274:2016-08-23T13:31:14.080+0000:Sure, I can validate the fix. Please go ahead and commit your fix and let me know the branch details.
rajesh734:1472035512:2016-08-24T18:45:12.098+0000:1472035512:2016-08-24T18:45:12.098+0000:Dhiraj, Have you committed the fix?
dhirajsb:1472055160:2016-08-25T00:12:40.458+0000:1472055160:2016-08-25T00:12:40.458+0000:Rajesh, I'm working on a more elaborate solution, where the component will restart the underlying CometD client from scratch if Salesforce kicks it out unceremoniously (without letting it re-handshake and reconnect), like it did in your logs. 
I'm also streamlining subscription handling to make it more robust. I'm testing it now and will commit the fix later today.  
dhirajsb:1472086073:2016-08-25T08:47:53.604+0000:1472086277:2016-08-25T08:51:17.327+0000:Rajesh, I have pushed the fixes to master branch. Please test in your environment and let me know whether it fixes your issue. 

Also, note the following changes in behavior:
* Since subscriptions are created and handled asynchronously, the consumer throws {{SalesforceException}} when it is unable to subscribe for any reason. The error message will be {{Error subscribing to <topicName>: <reason>}}. The consumer won't attempt to re-subscribe and will not receive any messages from Salesforce after this error. The underlying cause has to be fixed and the consumer/route restarted to attempt to subscribe to the channel again. 
* For hard disconnects, it will try to reconnect with a pause between attempts based on backoff options in CometD, which are 1 second and 30 seconds for increment and max respectively. If needed CometD options could be made configurable in the future to make the backoff customizable. 
* If it can't reconnect after the pause between attempts exceeds max backoff, all consumers will throw a SalesforceException with a message {{Aborting Salesforce reconnect due to: <reason>}}. At which point, all consumers are again disconnected and the component will have to be restarted to try to reconnect to Salesforce. 

Hopefully this makes the consumer more robust and the error handling intuitive. Let me know if you have any feedback or other ideas. 
dhirajsb:1472113861:2016-08-25T16:31:01.762+0000:1472113861:2016-08-25T16:31:01.762+0000:Rajesh, I also cherry picked the fixes into camel-2.17.x. Please verify on that branch as well. 
dhirajsb:1472218242:2016-08-26T21:30:42.838+0000:1472218242:2016-08-26T21:30:42.838+0000:[~rajesh734], did you get a chance to test the fix? Let me know so I can mark this issue as resolved. 
rajesh734:1472443515:2016-08-29T12:05:15.913+0000:1472443545:2016-08-29T12:05:45.989+0000:Dhiraj, still getting the same issue. I have attached the log here. This is for version 2.18.0-SNAPSHOT
dhirajsb:1472507528:2016-08-30T05:52:08.633+0000:1472507528:2016-08-30T05:52:08.633+0000:[~rajesh734], I've pushed changes to handle failed CometD handshake to master and camel-2.17.x. Let me know whether this fixes your problem. 
rajesh734:1472534555:2016-08-30T13:22:35.247+0000:1472534555:2016-08-30T13:22:35.247+0000:Dhiraj, what I mean by 2.18.0-SNAPSHOT is nothing but the master. I took the code from master which had the version named as 2.18.0-SNAPSHOT. 

If you want to try in 2.17.x then I can. I will try that today and update you with logs.
dhirajsb:1472539023:2016-08-30T14:37:03.360+0000:1472539023:2016-08-30T14:37:03.360+0000:Yeah, I know that. I have pushed new changes to those branches. 
rajesh734:1472622538:2016-08-31T13:48:58.388+0000:1472622538:2016-08-31T13:48:58.388+0000:Dhiraj, not able to pull your latest change via nexus repository. I guess it needs sometime to get the updates to nexus repository. I will update you once I test your latest change.
rajesh734:1472708228:2016-09-01T13:37:08.715+0000:1472708228:2016-09-01T13:37:08.715+0000:Dhiraj, looks like your fix worked partially, meaning: When it gets into 403 error, it is reconnecting but, however it failed early morning EST due to 401 Authentication Invalid error.
I have attached the log which shows detailed information.
Note: Tested 2.17.X version
rajesh734:1472709319:2016-09-01T13:55:19.555+0000:1472713297:2016-09-01T15:01:37.646+0000:Missed to attach another log, this one is the backed up one due to log overload.
rajesh734:1472721718:2016-09-01T17:21:58.712+0000:1472721718:2016-09-01T17:21:58.712+0000:Please let me know if you want any more information
dhirajsb:1472809748:2016-09-02T17:49:08.507+0000:1472809748:2016-09-02T17:49:08.507+0000:Pushed new changes to master and 2.17-x branches to ignore 403 errors, since that seems to happen in your tests even when the OAuth token is valid. Now it looks for a 401 handshake error before refreshing token. 
rajesh734:1472815044:2016-09-02T19:17:24.147+0000:1472815044:2016-09-02T19:17:24.147+0000:Sure, let me validate this fix and let you know.
rajesh734:1473232322:2016-09-07T15:12:02.447+0000:1473232322:2016-09-07T15:12:02.447+0000:Dhiraj, the latest fix seem to have fixed the reconnect issue. Now I see from log that, it reconnects after 401 error. But, however I found the following issue with master code(2.18.0-SNAPSHOT):

My subscription query has ID and other fields including name. When I receive my subscription message, I just get the ID data and not other fields data. This is working good in 2.17.x version. Even regular Rest API with SObject or query etc. not pulling data other than ID field in 2.18.0-SNAPSHOT version.

Can you please take care of this.
rajesh734:1473234245:2016-09-07T15:44:05.440+0000:1473234245:2016-09-07T15:44:05.440+0000:I guess this is not due to this reconnect fix because 2.17.x works good. But, anyways thought I would share this with you.

I have one more question. 
During reconnect time, assume if we have subscription data coming from Salesforce, after reconnect will it fetch those events which are missed during reconnect? I have not tested this.
dhirajsb:1473238031:2016-09-07T16:47:11.113+0000:1473238031:2016-09-07T16:47:11.113+0000:[~rajesh734], glad to hear this issue is solved. Normally Salesforce will not resubmit events you missed when you were not connected. For that 2.18 has added support for [Salesforce event reliability and durability|https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/using_streaming_api_stateless.htm]. 

Please open a new issue for the 2.18 branch for the missing fields, along with a repeatable use case. 
rajesh734:1473241717:2016-09-07T17:48:37.281+0000:1473241717:2016-09-07T17:48:37.281+0000:I have tested the replayId option in 2.18 but, what I would like is:

Update replayId during reconnect so that, the subscription begins from where it left off. By this way, it will be more reliable from Camel Salesforce perspective.


dhirajsb:1475194437:2016-09-30T08:13:57.721+0000:1475194437:2016-09-30T08:13:57.721+0000:[~rajesh734], it looks like the Salesforce CometD extension does update the ID data on it's own. Please confirm that it is working in your environment after a reconnect. I am going to mark this issue as resolved, since the original reconnect issue has been addressed. 
dhirajsb:1475194446:2016-09-30T08:14:06.029+0000:1475194446:2016-09-30T08:14:06.029+0000:[~rajesh734], it looks like the Salesforce CometD extension does update the ID data on it's own. Please confirm that it is working in your environment after a reconnect. I am going to mark this issue as resolved, since the original reconnect issue has been addressed. 
dhirajsb:1475194725:2016-09-30T08:18:45.594+0000:1475194725:2016-09-30T08:18:45.594+0000:Component now restarts the CometD Bayeux client on Handshake errors. Connect errors are handled by the underlying CometD client. "
0,CAMEL-10237,Bug,Major,"2.17.2, 2.17.3","2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Andrea Cosentino,Preben Asmussen,0,4,2016-08-11 08:55:08+00:00,2016-08-22 10:01:17+00:00,See description in http://camel.465427.n5.nabble.com/possible-camel-jms-regression-in-2-17-2-td5786290.html,"davsclaus:1470892864:2016-08-11T13:21:04.316+0000:1470892864:2016-08-11T13:21:04.316+0000:What is the exception hierachy of that Oracle AMQ exception. Can you see what JMSException it extends?
anoordover:1470918070:2016-08-11T20:21:10.283+0000:1470918070:2016-08-11T20:21:10.283+0000:according to https://docs.oracle.com/cd/B12037_01/server.101/b12023/oracle/jms/AQjmsException.html it extends javax.jms.JMSException.
I checked this using idea and I see the same extension as mentioned in javadoc. So it extends javax.jms.JMSException
preben:1470951784:2016-08-12T05:43:04.405+0000:1470951784:2016-08-12T05:43:04.405+0000:[~anoordover] Thanks Arno 
preben:1471213306:2016-08-15T06:21:46.834+0000:1471213306:2016-08-15T06:21:46.834+0000:Digged a bit into this.

Turns out that it's only the JMSXUserID that is the problem. If I remove setting the JMSXUserID from https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java#L184 it works on OracleAQ.

Still there is a sligt difference in which JMSX headers get's populated between 2.17.1 and 2.17.2->

2.17.2 and newer ->
JMS_OracleDelay=0, JMS_OracleDeliveryMode=2, JMS_OracleTimestamp=1471240798892, JMSCorrelationID=null, JMSCorrelationIDAsBytes=null, JMSDeliveryMode=2, JMSDestination=INTAQ.YARN_UPDATE_HUB, JMSExpiration=0, JMSMessageID=ID:3A16F131215794F4E053B50D650A06C2, JMSPriority=1, JMSRedelivered=false, JMSReplyTo=null, JMSTimestamp=1471240798892, JMSType=null, JMSXGroupID=null}

2.17.1->
JMS_OracleDelay=0, JMS_OracleDeliveryMode=2, JMS_OracleTimestamp=1471240970894, JMSCorrelationID=null, JMSCorrelationIDAsBytes=null, JMSDeliveryMode=2, JMSDestination=INTAQ.YARN_UPDATE_HUB, JMSExpiration=0, JMSMessageID=ID:3A16FB721A86BFA8E053B50D650AA65F, JMSPriority=1, JMSRedelivered=false, JMSReplyTo=null, JMSTimestamp=1471240970894, JMSType=null, JMSXDeliveryCount=1, JMSXGroupID=null, JMSXRecvTimestamp=1471240970965, JMSXState=0, JMSXUserID=INTAQ}



davsclaus:1471222714:2016-08-15T08:58:34.671+0000:1471222714:2016-08-15T08:58:34.671+0000:Thanks Preben.

That code should only be used if the option includeAllJMSXProperties=true. I will add a fix for that.
davsclaus:1471223288:2016-08-15T09:08:08.670+0000:1471223288:2016-08-15T09:08:08.670+0000:It is CAMEL-9995 that caused this problem.


preben:1471229930:2016-08-15T10:58:50.709+0000:1471229930:2016-08-15T10:58:50.709+0000:Yes it is it the change i https://issues.apache.org/jira/browse/CAMEL-9995 that causes the problem.
Properly the change from getOutFilter to getInFilter.

Actually I can make i work in 2 ways 
Either removing the line described above, or keep the https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsHeaderFilterStrategy.java#L39 as getOutFilter().add(""JMSXUserID"");

I'm not really aware of the background for the change, or what issue it solves.


 
preben:1471232517:2016-08-15T11:41:57.922+0000:1471232517:2016-08-15T11:41:57.922+0000:Forgot to mention that this proberly only occures when you have a route -> from(jms)...to(jms)

This will take the existing jms headers and copy/set them when calling the to(jms)

davsclaus:1471559253:2016-08-19T06:27:33.058+0000:1471559253:2016-08-19T06:27:33.058+0000:Another user hit by this problem also: http://camel.465427.n5.nabble.com/oracle-jms-AQjmsException-JMS-110-Property-JMSXDeliveryCount-not-writeable-tp5786620.html
acosentino:1471831263:2016-08-22T10:01:03.097+0000:1471831263:2016-08-22T10:01:03.097+0000:I reverted the CAMEL-9995 commit on all the branches. This now should be resolved."
0,CAMEL-10236,Bug,Minor,2.17.2,"2.18.1, 2.19.0","
None
",Resolved,Fixed,"2.18.1, 2.19.0",Claus Ibsen,Bernard Ligny,0,3,2016-08-11 08:00:14+00:00,2016-10-13 08:23:51+00:00,"The following code does not work:



public interface Transformer<T> {	
	 public Object convert(T input) throws Exception;
}

public class MyTransformer implements Transformer<InputStream> {
    @Override
    public Object convert(@Body InputStream body) {...}
}

from(""direct:foo"")
.transform().method(new MyTransformer(), ""convert"")
.log(""${body}"");




Stack trace:



java.lang.ClassCastException: [B cannot be cast to java.io.InputStream
	at net.haulogy.erpgis.esb.transformers.MyTransformer.convert(MyTransformer.java:1)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:408)
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:279)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:177)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:68)
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:211)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:126)
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:138)
	at org.apache.camel.processor.TransformProcessor.process(TransformProcessor.java:50)




But this is working fine:



public class MyTransformer {
    public Object convert(@Body InputStream body) {...}
}

from(""direct:foo"")
.transform().method(new MyTransformer(), ""convert"")
.log(""${body}"");","bligny:1470958864:2016-08-12T07:41:04.656+0000:1470958864:2016-08-12T07:41:04.656+0000:Additional information: [B is the encoded type name for a byte array
(see http://stackoverflow.com/questions/4606864/what-kind-of-java-type-is-b)

The strange thing is that he capability of casting the *same* body to the *same* target type (InputStream) using the *same* method signature is depending on whether the bean is implementing or not the interface...
aldettinger:1476263047:2016-10-12T17:04:07.878+0000:1476263047:2016-10-12T17:04:07.878+0000:I've reproduced the issue with camel-core/2.18.0-SNAPSHOT.
Since [this commit|https://github.com/apache/camel/pull/1204/commits/35319119a486b1acbc12a0a96a4ca2aa4f3e41ed] from this [pull request|https://github.com/apache/camel/pull/1204], the issue is fixed on camel-core/2.19.0-SNAPSHOT.
Moreover, committed tests are covering the case from this ticket.

So, at the end of the day, this issue is a duplicate of [CAMEL-10376|https://issues.apache.org/jira/browse/CAMEL-10376] and could be closed.
davsclaus:1476318230:2016-10-13T08:23:50.638+0000:1476318230:2016-10-13T08:23:50.638+0000:Thanks for testing"
0,CAMEL-10235,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-08-10 17:12:37+00:00,2016-08-11 09:10:05+00:00,So you can define a fluentTemplate id which can easily get injected to your beans,
0,CAMEL-10234,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-08-10 16:37:21+00:00,2016-08-12 13:58:12+00:00,"JCache relies on service loader to retrieve cache implementation but that does not work very well in osgi so it would be nice if camel-jcache would scan bundles to find those providing jcache implementations, it would also be nice if we can provide some alias for common providers",
0,CAMEL-10233,Improvement,Major,2.17.0,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,James Netherton,0,3,2016-08-10 14:26:41+00:00,2016-08-11 08:42:47+00:00,"The SpringCamelContext contains a constructor where it does:



setModelJAXBContextFactory(new SpringModelJAXBContextFactory());




This should ideally be done lazilly (which is how the DefaultCamelContext does things). 


The issue with having this logic in the constructor is that when super() is called, camel will fire the 'context created' event. If a context create event handler happens to set the JAXBContextFactory, it ends up being overwritten later on in the SpringCamelContext constructor.","githubbot:1470817653:2016-08-10T16:27:33.831+0000:1470817653:2016-08-10T16:27:33.831+0000:GitHub user jamesnetherton opened a pull request:

    https://github.com/apache/camel/pull/1115

    [CAMEL-10233] Lazy load ModelJAXBContextFactory in SpringCamelContext

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jamesnetherton/camel CAMEL-10233

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1115.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1115
    
----
commit d06ee9866c4315119eedab01b75b509342c1f848
Author: James Netherton <jamesnetherton@gmail.com>
Date:   2016-08-10T16:23:12Z

    [CAMEL-10233] Lazy load ModelJAXBContextFactory in SpringCamelContext

----

davsclaus:1470875623:2016-08-11T08:33:43.043+0000:1470875638:2016-08-11T08:33:58.863+0000:I am making the same code change for camel-blueprint so they are similar.
davsclaus:1470876164:2016-08-11T08:42:44.202+0000:1470876164:2016-08-11T08:42:44.202+0000:Thanks for the PR
githubbot:1470876167:2016-08-11T08:42:47.462+0000:1470876167:2016-08-11T08:42:47.462+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1115
"
0,CAMEL-10232,Bug,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-08-10 10:14:46+00:00,2016-08-10 15:32:38+00:00,No Desc,
0,CAMEL-10231,Bug,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-08-10 10:02:49+00:00,2016-08-10 15:32:30+00:00,No Desc,
0,CAMEL-10230,Bug,Major,2.16.2,,"

camel-cache

",Resolved,Not A Problem,None,Unassigned,Sebastián Laborde,0,2,2016-08-09 18:43:58+00:00,2016-08-10 08:03:42+00:00,"Items in the cache expires even though eternal is set to true. When a new element is added to the cache, its properties are set to its default values.


Only seems to work as expected if I put the cache properties into the route itself everytime I add a new item into the cache (see below, bolded text). 


CacheRouteBuilder:


package uy.com.antel.pi.osgi.cache;


import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.cache.CacheConstants;


public class CacheRouteBuilder extends RouteBuilder {


	private CacheAggregationStrategy CAS = new CacheAggregationStrategy();


	@Override
	public void configure() throws Exception {
		// TODO Auto-generated method stub


		// Set up Cache
		from(""cache://MyApplicationCache?eternal=true&diskPersistent=true"")
			.to(""mock:endpoint"");


		// CXFRS Entry Point
		from(""cxfrs:bean:rsServer?bindingStyle=SimpleConsumer"")
			.log(""GET Request Received..."")
			.choice()
				.when(header(""operationName"").isEqualTo(""addEntry""))
					.log(""In add entry choice"")
					.log(""${headers}"")
					.to(""bean:restImplBean?method=addEntry"")
					.to(""cache://MyApplicationCache*?eternal=true&diskPersistent=true*"")
					.to(""bean:restImplBean?method=addedEntry"")
				.when(header(""operationName"").isEqualTo(""getEntry""))
					.log(""In get entry choice"")
					.to(""bean:restImplBean?method=getEntry"")
					.to(""cache://MyApplicationCache"")
					.log(""${headers}"")
					.choice()
						.when(header(CacheConstants.CACHE_ELEMENT_WAS_FOUND).isNull())
				        .to(""bean:restImplBean?method=notFound"")
				        .otherwise()
				        .to(""bean:restImplBean?method=gotEntry"")
				    .end()
			.end();


		}","davsclaus:1470787371:2016-08-10T08:02:51.105+0000:1470787371:2016-08-10T08:02:51.105+0000:It likely depends on the ordering of the endpoints created/started. As eternal is false by default. So its the first endpoint with that cache name that gets created that decide if eternal is enabled or not.


davsclaus:1470787409:2016-08-10T08:03:29.542+0000:1470787409:2016-08-10T08:03:29.542+0000:Its better to configure cache options on the component level."
0,CAMEL-10229,Bug,Major,2.17.3,"2.17.4, 2.18.0","

autoack
rabbitmq
stop

",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Piero Cangianiello,1,3,2016-08-09 15:47:55+00:00,2016-08-16 14:29:56+00:00,"Run the following code and hit enter while one message is in unacked state (see RabbitMQ console):



public static void main(String[] args) throws Exception {
	CamelContext context = new DefaultCamelContext();

	context.addRoutes(new RouteBuilder() {
		@Override
		public void configure() {
			from(""rabbitmq://localhost/?queue=sourceQueue&skipExchangeDeclare=true&skipQueueDeclare=true&autoAck=false&prefetchEnabled=true&prefetchCount=1"")
					.delayer(5000)
					.setHeader(""rabbitmq.ROUTING_KEY"", constant(""destinationQueue""))
					.to(""rabbitmq://localhost/?skipExchangeDeclare=true&skipQueueDeclare=true&autoAck=false"")
					.routeId(""myRoute"");
		}
	});
	context.start();
	new BufferedReader(new InputStreamReader(System.in)).readLine();
	context.stop();
}




you get the following exception:



com.rabbitmq.client.impl.DefaultExceptionHandler: Consumer org.apache.camel.component.rabbitmq.RabbitConsumer@4c57777e (amq.ctag-dWpQw46flmamv0dM_Fa_Qg) method handleDelivery for channel AMQChannel(amqp://rabbit_user@127.0.0.1:5672/,1) threw an exception for channel AMQChannel(amqp://rabbit_user@127.0.0.1:5672/,1):
com.rabbitmq.client.AlreadyClosedException: channel is already closed due to clean channel shutdown; protocol method: #method<channel.close>(reply-code=200, reply-text=OK, class-id=0, method-id=0)
	at com.rabbitmq.client.impl.AMQChannel.ensureIsOpen(AMQChannel.java:195)
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:309)
	at com.rabbitmq.client.impl.AMQChannel.transmit(AMQChannel.java:303)
	at com.rabbitmq.client.impl.ChannelN.basicAck(ChannelN.java:1043)
	at org.apache.camel.component.rabbitmq.RabbitConsumer.handleDelivery(RabbitConsumer.java:108)
	at com.rabbitmq.client.impl.ConsumerDispatcher$5.run(ConsumerDispatcher.java:144)
	at com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:99)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)




I think that this is caused by a race condition between the main thread that runs channel.close() immediately after channel.basicCancel(tag) (see org.apache.camel.component.rabbitmq.RabbitConsumer) without waiting the channel.basicAck(deliveryTag, false) in handleDelivery().


Another bad side effect is that you'll find a duplicate of a message on the destinationQueue. For example if you have 10 initial messages in sourceQueue and you hit enter while it's processing the third one, you'll get 7 messages in sourceQueue and 4 messages in destinationQueue.


The correct behaviour should be the following:
1) Stop consumer: channel.basicCancel(tag)
2) Wait if there is a running consumer
3) The consumer acks the previous message
4) Close the channel","githubbot:1470984630:2016-08-12T14:50:30.685+0000:1470984630:2016-08-12T14:50:30.685+0000:GitHub user mpricope opened a pull request:

    https://github.com/apache/camel/pull/1119

    Fix CAMEL-10229

    Use a semaphore to wait for the message to be processed when
    autoAck=false

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mpricope/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1119.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1119
    
----
commit 52aed832f59f423c53b6426a0dd36dfd0eed699f
Author: miti <pricope@textkernel.nl>
Date:   2016-08-12T14:41:55Z

    Fix CAMEL-10229
    
    Use a semaphore to wait for the message to be processed when
    autoAck=false

----

mpricope:1470984712:2016-08-12T14:51:52.769+0000:1470984712:2016-08-12T14:51:52.769+0000:Bumped in to this also while trying to implement some clean shutdown of our camel app.

I've put together a fix for this:

https://github.com/apache/camel/pull/1119


githubbot:1471328928:2016-08-16T14:28:48.866+0000:1471328928:2016-08-16T14:28:48.866+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1119
"
0,CAMEL-10228,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Claus Ibsen,0,3,2016-08-09 14:31:37+00:00,2016-08-20 20:21:25+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-sql-insert-ouput-tp5786200.html


In the SqlProducer where we preserve headers, we should also preserve the attachments as well.","onders:1471144985:2016-08-14T11:23:05.199+0000:1471144985:2016-08-14T11:23:05.199+0000:I know attachment concept but i am not sure if i understand why attachment needed in sqlproducer. what might be the use case for it?
davsclaus:1471221847:2016-08-15T08:44:07.989+0000:1471221847:2016-08-15T08:44:07.989+0000:Its for preserving the attachments so they are still there after the producer - they are not used in the sql component. 
anoordover:1471514610:2016-08-18T18:03:30.759+0000:1471514610:2016-08-18T18:03:30.759+0000:I guess that we need to add putAll on the out-attachments at all the locations where we do a putAll on the out-headers?"
0,CAMEL-10227,Task,Major,None,None,"
None
",Closed,Fixed,2.18.0,Luca Burgazzoli,Claus Ibsen,0,1,2016-08-09 07:32:11+00:00,2016-08-30 10:42:36+00:00,There is a newer 1.1.0 release.,
0,CAMEL-10226,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Nicola Ferraro,Nicola Ferraro,0,3,2016-08-08 09:19:25+00:00,2016-09-02 19:46:58+00:00,"The camel jms-component (particularly the camel-activemq, that inherits from it) cannot be fully configured in a spring-boot environment.


When using eg. the spring-xml configuration (spring-boot properties are not yet available in the activemq component):



<bean id=""amq"" class=""org.apache.activemq.camel.component.ActiveMQComponent"">
    <property name=""userName"" value=""XXX""/>
    <property name=""password"" value=""YYY""/>
    <property name=""brokerURL"" value=""ZZZ""/>
</bean>




The properties userName, password and brokerURL are simply ignored.


The reason is that spring-boot defines its own connection factory that is automatically bound to the application context when ActiveMQ is on the classpath (https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQConnectionFactoryConfiguration.java#L41-L71).


And the JMS component is programmed to use any connection factory that is available in the spring application context: https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsComponent.java#L151-L155.


This prevents the configuration object to create a new connection factory with the specified properties, so they are ignored. The component always use an in-memory broker (whenever the creation of the JmsConfiguration object is not overridden by the user).


I can work to fix this behavior, but I need to know if the lookup in the application context (it is located in the camel source, even if it affects activemq) is historically related to some use case or it can be safely removed.","davsclaus:1470706915:2016-08-09T09:41:55.163+0000:1470706915:2016-08-09T09:41:55.163+0000:I am not aware of a special use-case. Can you check the commit log when the code was introduced - likely 9 years ago by James.
nferraro:1470709133:2016-08-09T10:18:53.817+0000:1470709133:2016-08-09T10:18:53.817+0000:Looks like [~chirino] introduced it 9 years ago (https://github.com/apache/camel/commit/722f4481729617b87ce10c3e4fef1ad58523cf52). It seems to me shortcut to configure a connection factory without linking it to the jms configuration.

IMO it can be removed, as this is not the ""official"" way to configure the component. Maybe [~chirino] can help.
chirino:1470726029:2016-08-09T15:00:29.090+0000:1470726029:2016-08-09T15:00:29.090+0000:That component should get updated so that if any of the connection options are set, then auto-wiring should be disabled.
githubbot:1470727794:2016-08-09T15:29:54.591+0000:1470727794:2016-08-09T15:29:54.591+0000:GitHub user chirino opened a pull request:

    https://github.com/apache/camel/pull/1114

    Fix for CAMEL-10226: Allow JmsComponent subclasses to disable auto-wi…

    …ring connection factories/destination resolvers.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chirino/camel CAMEL-10226

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1114.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1114
    
----
commit ea6b3f9e2b12deb0560fbd13a0cb633b89b83f78
Author: Hiram Chirino <hiram@hiramchirino.com>
Date:   2016-08-09T15:29:06Z

    Fix for CAMEL-10226: Allow JmsComponent subclasses to disable auto-wiring connection factories/destination resolvers.

----

githubbot:1470729411:2016-08-09T15:56:51.036+0000:1470729411:2016-08-09T15:56:51.036+0000:GitHub user chirino opened a pull request:

    https://github.com/apache/activemq/pull/196

    Fixes CAMEL-10226: camel-jms ignores connection pool settings in spri…

    …ng-boot deployment.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/chirino/activemq CAMEL-10226

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/activemq/pull/196.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #196
    
----
commit 3842fc5ba23caabf092188387375ba9ea7d570ed
Author: Hiram Chirino <hiram@hiramchirino.com>
Date:   2016-08-09T15:41:22Z

    Fixes CAMEL-10226: camel-jms ignores connection pool settings in spring-boot deployment.

----

davsclaus:1470790257:2016-08-10T08:50:57.845+0000:1470790257:2016-08-10T08:50:57.845+0000:There is a change in ActiveMQ that goes into the next release, 5.14.1
githubbot:1470956337:2016-08-12T06:58:57.761+0000:1470956337:2016-08-12T06:58:57.761+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1114

githubbot:1472816818:2016-09-02T19:46:58.191+0000:1472816818:2016-09-02T19:46:58.191+0000:Github user chirino closed the pull request at:

    https://github.com/apache/activemq/pull/196
"
0,CAMEL-10225,Bug,Major,"2.16.3, 2.17.0, 2.17.1, 2.17.2",2.20.0,"
None
",Resolved,Fixed,2.20.0,Claus Ibsen,David Bennison,0,2,2016-08-07 15:24:28+00:00,2017-09-21 15:48:57+00:00,"We perform an XSLT transform within a Split. We added camel-saxon so that we could use XSLT 2 for one particular transformation. This works fine when run synchronously but when we switch parallel to true on the split we get the following errors:-


2016-08-07T16:09:02,142 Camel (camel-1) thread #4 - Split ERROR org.apache.camel.processor.DefaultErrorHandler |  |  |  |  
 Failed delivery for (MessageId: ID-dave-ThinkPad-Edge-E540-35771-1470582541027-0-27 on ExchangeId: ID-dave-ThinkPad-Edge-E540-35771-1470582541027-0-32). Exhausted after delivery attempt: 1 caught: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value <OrderResponseItem xmlns=""http://api.channeladvisor.com/webservices/"" xmlns:q3=""http://api.channeladvisor.com/datacontracts/orders"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""q3:OrderResponseDetailComplete"">
                <q3:NumberOfMatches>3</q3:NumberOfMatches>
                <q3:OrderTimeGMT>2016-07-04T08:07:38.893</q3:OrderTimeGMT>
                <q3:LastUpdateDate>2016-07-04T08:07:40.217</q3:LastUpdateDate>
                <q3:TotalOrderAmount>357.0000</q3:TotalOrderAmount>
                <q3:OrderState>Active</q3:OrderState>
                <q3:DateCancelledGMT xsi:nil=""true""/>
                <q3:OrderID>9564205</q3:OrderID>
                <q3:ClientOrderIdentifier>1000008</q3:ClientOrderIdentifier>
                <q3:SellerOrderID/>
                <q3:OrderStatus>
                    <q3:CheckoutStatus>Completed</q3:CheckoutStatus>
                    <q3:CheckoutDateGMT>2016-07-04T08:07:38.893</q3:CheckoutDateGMT>
                    <q3:PaymentSt... [Body clipped after 1000 chars, total length is 14996] due java.lang.NullPointerException. Processed by failure processor: FatalFallbackErrorHandler[Channel[Log(route2)[Error processing route: ${exception.stacktrace}]]]


Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [direct://in                                                                   ] [       378]
[route1            ] [to1               ] [direct:transformOrderResponseItemToConsignmentRoute                           ] [        12]
[route2            ] [log5              ] [log                                                                           ] [        11]
[                  ] [GeneralExceptionLo] [log                                                                           ] [         3]


Stacktrace
--------------------------------------------------------------------------------------------------------------------------------------- 
org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value <OrderResponseItem xmlns=""http://api.channeladvisor.com/webservices/"" xmlns:q3=""http://api.channeladvisor.com/datacontracts/orders"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""q3:OrderResponseDetailComplete"">
                <q3:NumberOfMatches>3</q3:NumberOfMatches>
                <q3:OrderTimeGMT>2016-07-04T08:07:38.893</q3:OrderTimeGMT>
                <q3:LastUpdateDate>2016-07-04T08:07:40.217</q3:LastUpdateDate>
                <q3:TotalOrderAmount>357.0000</q3:TotalOrderAmount>
                <q3:OrderState>Active</q3:OrderState>
                <q3:DateCancelledGMT xsi:nil=""true""/>
                <q3:OrderID>9564205</q3:OrderID>
                <q3:ClientOrderIdentifier>1000008</q3:ClientOrderIdentifier>
                <q3:SellerOrderID/>
                <q3:OrderStatus>
                    <q3:CheckoutStatus>Completed</q3:CheckoutStatus>
                    <q3:CheckoutDateGMT>2016-07-04T08:07:38.893</q3:CheckoutDateGMT>
                    <q3:PaymentSt... [Body clipped after 1000 chars, total length is 14996] due java.lang.NullPointerException
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:629) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:150) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:41) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.builder.ExpressionBuilder$64.evaluate(ExpressionBuilder.java:1533) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.LogProcessor.process(LogProcessor.java:53) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:62) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:145) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:121) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:83) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:468) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessParallel(MulticastProcessor.java:827) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor.access$200(MulticastProcessor.java:85) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:320) [camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.processor.MulticastProcessor$1.call(MulticastProcessor.java:305) [camel-core-2.17.2.jar:2.17.2]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_66]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_66]
	at java.lang.Thread.run(Thread.java:745) [?:1.8.0_66]
Caused by: org.apache.camel.RuntimeCamelException: java.lang.NullPointerException
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1285) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[camel-core-2.17.2.jar:2.17.2]
	... 26 more
Caused by: java.lang.NullPointerException
	at org.xml.sax.helpers.NamespaceSupport$Context.declarePrefix(NamespaceSupport.java:628) ~[?:1.8.0_66]
	at org.xml.sax.helpers.NamespaceSupport.declarePrefix(NamespaceSupport.java:319) ~[?:1.8.0_66]
	at net.sf.saxon.dom.DOMSender.gatherNamespaces(DOMSender.java:304) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.dom.DOMSender.sendElement(DOMSender.java:125) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.dom.DOMSender.send(DOMSender.java:93) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.dom.DOMObjectModel.sendSource(DOMObjectModel.java:242) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.event.Sender.send(Sender.java:219) ~[Saxon-HE-9.5.1-5.jar:?]
	at net.sf.saxon.IdentityTransformer.transform(IdentityTransformer.java:46) ~[Saxon-HE-9.5.1-5.jar:?]
	at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:132) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.converter.jaxp.XmlConverter.toResult(XmlConverter.java:116) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.converter.jaxp.XmlConverter.toString(XmlConverter.java:238) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.converter.jaxp.XmlConverter.toString(XmlConverter.java:282) ~[camel-core-2.17.2.jar:2.17.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_66]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_66]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_66]
	at java.lang.reflect.Method.invoke(Method.java:497) ~[?:1.8.0_66]
	at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1281) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:306) ~[camel-core-2.17.2.jar:2.17.2]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:133) ~[camel-core-2.17.2.jar:2.17.2]
	... 26 more


I  created a test project (which I will try to attach) with a simple unit test. I found that if I remove camel-saxon then parallel appears to run fine (The unit test is not multithreaded but I can reach 20 runs without a problem). If I include camel-saxon the I start getting the problem above (usually within 8 runs of the unit test)


I noticed that camel-saxon uses an old version of Saxon (Saxon-HE-9.5.1-5) so I overrode this with the latest version (9.7.0-7) but I still get the problem.


I have tried against camel-saxon 2.17.2,2.17.1,2.17.0 and 2.16.3 (which required further Saxon fiddling).


I originally raised this problem on the mailing list here: http://camel.465427.n5.nabble.com/Camel-XSLT-Saxon-not-thread-safe-tc5785086.html","dave_bennison:1470555130:2016-08-07T15:32:10.508+0000:1470555306:2016-08-07T15:35:06.689+0000:Attached test Eclipse project.

Run {{OrderConsignmentRouteBuilderTest.testParrallel()}}

camel-saxon can be removed from the POM and I've included a dependency to the latest version of Saxon so that the current (old) version of Saxon in camel-saxon can be over-ridden.
davsclaus:1505971708:2017-09-21T13:28:28.790+0000:1505971874:2017-09-21T13:31:14.483+0000:The problem is that you log the message body, which then forces a type conversion to a String value which is not thread-safe in saxon.

Remove this line
{code}
            .log(LoggingLevel.INFO, ""Found order:-\n${body}"")
{code}

Then it works with parallel processing

The DOM structure under the hood is xerces based
{code}
com.sun.org.apache.xerces.internal.dom.DeferredElementNSImpl
{code}

Which is not a thread-safe DOM. I guess they somehow are linked together as they are split from the same original input source.
davsclaus:1505972204:2017-09-21T13:36:44.677+0000:1505972204:2017-09-21T13:36:44.677+0000:Another alternative is to convert it to Document after the split
{code}
        .split(xp).parallelProcessing(isSplitParrallel)
            .convertBodyTo(Document.class)
{code}
davsclaus:1505978238:2017-09-21T15:17:18.533+0000:1505978238:2017-09-21T15:17:18.533+0000:I have now a solution. There is a new option you can turn on | off to enable thread safety. When enabled your test case passes.
The overhead is that camel needs to do a little bit of defensive copy of the DOM that the xpath expression evaluated as, so the DOM is thread-safe and can be processed individually by different threads concurrently.

Its likely safer to turn this on by default so end users don't hit these weird issues OOTB. And for people that really care then they can turn it off, if they don't use saxon or don't have problems. The overhead is as said that a clone of the node is created which takes up CPU and memory space.
davsclaus:1505980120:2017-09-21T15:48:40.757+0000:1505980130:2017-09-21T15:48:50.880+0000:Okay we had to keep it backwards compatible as before, but you can now easily turn on thread safety mode for when you use saxon
{code}
        XPathExpression xp = orderResponseNamespaces.xpath(ORDER_RESPONSE_ITEM_SPLIT_XPATH);
        xp.setThreadSafety(true);
{code}"
0,CAMEL-10224,Task,Major,None,None,"
None
",Closed,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-08-05 11:45:18+00:00,2016-08-30 05:04:51+00:00,No Desc,"ggregory:1472381823:2016-08-28T18:57:03.275+0000:1472381823:2016-08-28T18:57:03.275+0000:Hi,

Gary here, from the Log4j project. Are you guys all squared away WRT Log4j 2? Do you need anything from our side?

Thank you,
Gary
lb:1472432095:2016-08-29T08:54:55.001+0000:1472432095:2016-08-29T08:54:55.001+0000:Hi [~garydgregory]

So far we had the following issues:
- LOG4J2-905
- some dependencies make use of log4j 1.2 base classes like AppenderSkeleton which are not provided by log4j-1.2-api, so we had to use log4j-over-slf4j as workaround, would be nice if such stuffs would be provided in log4j-1.2-api or better in something like log4j-1.2-compatibility
ggregory:1472465588:2016-08-29T18:13:08.127+0000:1472465588:2016-08-29T18:13:08.127+0000:Hi [~lb]:

Can you specify how you use {{AppenderSkeleton}} and other classes? We have a little more 1.2 compatibility coming in the next version but not related to {{AppenderSkeleton}}. The {{log4j-1.2-api}} is where we are keeping all 1.2 related code.

Thank you,
Gary
lb:1472504691:2016-08-30T05:04:51.717+0000:1472504691:2016-08-30T05:04:51.717+0000:Camel uses slf4j for its logging abstraction then, libraries used by camel may directly use log4j 1.2 apis.

Running camel-hbase tests without log4j-over-slf4j reports the following error:

{code}
java.lang.NoClassDefFoundError: org/apache/log4j/AppenderSkeleton
Caused by: java.lang.ClassNotFoundException: org.apache.log4j.AppenderSkeleton
{code}  

Then how/where is out of our control.
"
0,CAMEL-10223,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-08-05 09:01:50+00:00,2016-08-05 09:04:45+00:00,"See nabble
http://camel.465427.n5.nabble.com/XmlRpc-marshalling-issue-tt5777193.html",
0,CAMEL-10222,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Nicola Ferraro,Nicola Ferraro,0,3,2016-08-04 13:41:06+00:00,2016-09-24 06:00:34+00:00,"It would be great if all camel components could be mixed-in in a spring-boot application without having to worry about dependencies.
This would allow users to choose the camel components in a tool like forge on fabric8 or spring initializr to produce a base artifact. Writing camel routes will be the only task left to the user. 


Unfortunately, integration tests have shown that there are many (small, trivial) issues that need to be fixed before people can use a component with spring-boot (list follows).


A possible solution that will provide a better experience with spring-boot would be:



Providing a new spring-boot bom
Providing a spring-boot-starter project for each camel component



A user application pom will look like the following:



<project xmlns=""http://maven.apache.org/POM/4.0.0""
         xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.company</groupId>
    <artifactId>myapp</artifactId>
    <version>1.0</version>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>xxx</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.apache.camel</groupId>
                <artifactId>camel-spring-boot-dependencies</artifactId>
                <version>xxx</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-starter-docker</artifactId>
            <!-- camel-spring-boot-starter-docker is a better (but longer) option, according to the s.b. documentation -->
        </dependency>

        <!-- Others -->

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-starter-http</artifactId>
        </dependency>

    </dependencies>
</project>




As suggested by chirino, the creation of such starters (and of the bom) could be automated. Rules for creating such artifacts will be (at least) the following:


0) Basic
The spring-boot-bom will be derived from camel-parent, with some exceptions to solve particular issues. Most of the starters will just include a dependency on the artifact they refer to.


1) Logging
Logging issues have been found during integration tests, but they will be solved on the main artifacts (see CAMEL-10217). The starter generator will just check that logging implementation are missing from the artifact to prevent conflicts with slf4j-logback (used by spring-boot-starter).


2) Transitive overrides
Using the current implementation (with camel-parent in the BOM), whenever a component requires a library that is different from the one declared in camel-parent, some hacks should be done, because the definition in the BOM takes precedence.


Eg. An user wants to use camel-jclouds, but instead of the pretty:



<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-jclouds</artifactId>
</dependency>




He will end up with the following declaration in his application pom:



<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-jclouds</artifactId>
  <exclusions>
    <exclusion>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
    </exclusion>
  </exclusions>
</dependency>

<dependency>
  <groupId>com.google.guava</groupId>
  <artifactId>guava</artifactId>
  <version>16.0.1</version> <!-- To override, again, the BOM version -->
</dependency>

<dependency>
  <groupId>com.google.inject</groupId>
  <artifactId>guice</artifactId>
  <version>3.0</version> <!-- To override, again, the BOM version -->
</dependency>




As a solution to this problem, if there are at least two components requiring eg. a different version of guava, guava will not be included in the spring-boot bom, instead the specific version will be enforced on each starter (for all components using guava).


Of course, this will not prevent issues when two components requiring different versions of guava will be used in the same user application. I think this issue cannot be avoided in applications with a standard classloader.


3) API implementations
In many cases, spring-boot detects the presence of a particular api in the classpath and expects an implementation is present. This happens for example with the bean validation api:



***************************
APPLICATION FAILED TO START
***************************

Description:

The Bean Validation API is on the classpath but no implementation could be found

Action:

Add an implementation, such as Hibernate Validator, to the classpath




The starters will include eg. the Hibernate Validator each time it is required to start the application.


4) Optional dependencies as variants
Starters are often used to provide a full stack for some higher level libraries/api.
Eg. The JTA api can be provided in spring with three starters (as of 1.4.0):



spring-boot-starter-jta-atomikos
spring-boot-starter-jta-bitronix
spring-boot-starter-jta-narayana



Each starter will include everything that is necessary in terms of libraries and auto-configuration for the particular implementation.


Having such an automated tool for generating poms, we could create starters like:



camel-starter-rest-netty
camel-starter-rest-jetty
camel-starter-rest-undertow



Each one having everything needed to run routes described using rest dsl (auto-configuration included. It will probably be developed on the main component).
Similarly we can have:



camel-starter-jms
camel-starter-jms-jta



The latter providing a preferred implementation and autoconfiguration (such as Narayana).


5) Tests
Each configuration will be checked by the already existing spring-boot integration tests. Support will be added for executing specific tests related to the a particular starter configuration, if needed.


In case of dependencies enforced by both camel-parent and spring-boot (with different versions), the camel-spring-boot BOM will use the spring-boot version. Problems will be highlighted by integration tests.


I started this Jira mainly to check if this feature can improve the user experience and if the points I highlighted are sound, before starting the implementation.


Probably there are also other issues/use-cases that I didn't cover in my list.","davsclaus:1470699682:2016-08-09T07:41:22.709+0000:1470699682:2016-08-09T07:41:22.709+0000:We could let the camel maven plugin that generates the spring boot auto configuration source code

a)
check if there is an existing camel-xxx-starter module in the ../components-starter directory (to keep starters separated from regular components).
If not, then create a new directory with a basic pom.xml.

b)
generate/update the source code in the camel-xxx-starter instead of as today in the camel-xxx component

Then the regular camel components do not have any spring-boot source code anymore, and its 100% separated.

c)
Any camel-xx-starter that need any manual tweak for its pom.xml, we can then just do that. 

I see this as the simpler and more safter. Then there is not too much magic during the project build.


davsclaus:1470699763:2016-08-09T07:42:43.070+0000:1470699763:2016-08-09T07:42:43.070+0000:I see your option 3 + 4 as something we should do later. Eg concentre on the basics first to get all the starter modules and itests to work fine.
We can then later look at variants (maybe for the next release).
githubbot:1470965880:2016-08-12T09:38:00.225+0000:1470965880:2016-08-12T09:38:00.225+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1117

    CAMEL-10222: New spring-boot starters

    What's included:
    - added new mojo to create starters for all components
    - created starters and moved auto-configuration (with logging and additional dependencies automatically fixed)
    - added spring.provides and other static files to starters
    - removed dependency on spring-boot from components
    - added starters to bom (also, coap and grape were missing and have been added .. also to the zip)
    - changed integration tests to use the starters and a typical configuration (they run successfully)
    - changed examples
    
    Future improvements:
    - add a general bom for spring-boot applications
    - basic integration tests run successfully, need to run unit tests for all components (a lot of time) and fix dependencies (probably a spring-boot bom is required to fix all dependencies)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10222

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1117.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1117
    
----
commit 4e57f519dd406733b81221a95695d560e57ce2f4
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-10T14:22:19Z

    CAMEL-10222: Deleted spring-boot configuration from main projects

commit b8e0e82c72919aee58ff047a9a76ed433de64d1e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-10T16:43:30Z

    CAMEL-10222: Fixed configuration and moved spring-boot-starter

commit a985e27ff38408d49a5c40e6f774af4ebdb2462a
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-10T16:47:58Z

    CAMEL-10222: New starters

commit 0d0e4084c03af0415a7aa1f61399f852550c5b9e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-10T17:12:09Z

    CAMEL-10222: Moved zipkin-starter to the components-starter module

commit da41024d60398b43a3df3f040d620163ba3e94c0
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-11T08:42:23Z

    CAMEL-10222: Fixed factories and dependencies. Added license and notice

commit eb9f9f243a4fc93bc60d6b0eebbab7248c8f21b1
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-11T13:48:39Z

    CAMEL-10222: Fixed factories and logging dependencies

commit 2395d6341f63ba2df317b7e9820f3a220ea2718c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-11T16:57:16Z

    CAMEL-10222: Tests passing

commit 104405ed903fe0ac64a615b4ab6bf603f43f59e2
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-12T06:59:38Z

    CAMEL-10222: Updated poms to log4j v2 status

commit 5be65324d4a42e8620976575e6848abef9b90d4a
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-12T07:39:53Z

    CAMEL-10222: Created camel-core-starter

commit dfa52d50c3e948d3e549d1d2a6d50c097f4158e6
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-12T08:37:36Z

    CAMEL-10222: Added starters to BOM with missing components

commit b605b82bb9a06392b4b97754cf48f101e85b108e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-12T09:16:55Z

    CAMEL-10222: Removed redundant versions and source check

commit 8221f9d4de32f1a1e2527f778c05068ca7109aa4
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-12T09:27:12Z

    CAMEL-10222: Changed examples

----

nferraro:1470966626:2016-08-12T09:50:26.841+0000:1470966626:2016-08-12T09:50:26.841+0000:Poms are generated automatically with this PR, as I found it easier to do massive changes to all starters, we can switch to manual editing (to add flexibility) at a later stage.
nferraro:1470985419:2016-08-12T15:03:39.385+0000:1470985419:2016-08-12T15:03:39.385+0000:I write some notes about the spring-boot BOM. It is not included in the PR and I don't know if it is needed at this time, so the issues in point 2 are not solved just with the current starters.

Chances are that by doing the following changes to the starter generator, everything will work fine:

1- Enforce specific dependencies required by a module, eg. by copying properties from the component pom to the starter pom (eg. in the jclouds case, version-properties for guava and guice are overridden)
2- Tell users not to include the camel-parent BOM in their apps, but just the spring-boot one (we can also provide a simple BOM without third party dependencies, to simplify version management)

A camel enabled spring-boot application will look like:
{code:xml}
<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
         xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.company</groupId>
    <artifactId>spring-boot-application</artifactId>
    <version>1.0</version>

    <properties>
        <spring-boot-version>1.4.0.RELEASE</spring-boot-version>
        <camel-version>2.18</camel-version>
    </properties>

    <dependencyManagement>
        <dependencies>

            <dependency>
                <!-- Only the dependency management from Spring Boot -->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot-version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-xxx-starter</artifactId>
            <version>${camel-version}</version>
        </dependency>

    </dependencies>
</project>
{code}

If, after doing the above changes and after a full integration test (with unit tests enabled), we find out that a particular library version enforced by the spring-boot BOM cannot be used with some camel component and needs an upgrade/downgrade, we will create the camel-springboot BOM, but the users will need to include our BOM *before* the spring-boot BOM in the dependency-management section. Camel versions must have precedence.

I can work on this starting from 30/08, if nobody handles it before..
davsclaus:1471220549:2016-08-15T08:22:29.629+0000:1471220549:2016-08-15T08:22:29.629+0000:There is 3 files that the plugin generates source code changes for
{code}
davsclaus:/Users/davsclaus/workspace/camel (master)/$ git diff
diff --git a/components-starter/camel-dropbox-starter/pom.xml b/components-starter/camel-dropbox-starter/pom.xml
index 61b4dcc..3aec31b 100644
--- a/components-starter/camel-dropbox-starter/pom.xml
+++ b/components-starter/camel-dropbox-starter/pom.xml
@@ -40,12 +40,10 @@
         <dependency>
             <groupId>org.apache.camel</groupId>
             <artifactId>camel-core-starter</artifactId>
-            <version>${project.version}</version>
         </dependency>
         <dependency>
             <groupId>org.apache.camel</groupId>
             <artifactId>camel-spring-boot-starter</artifactId>
-            <version>${project.version}</version>
         </dependency>
     </dependencies>
 </project>
diff --git a/components-starter/camel-hbase-starter/pom.xml b/components-starter/camel-hbase-starter/pom.xml
index a62505c..eeef4e7 100644
--- a/components-starter/camel-hbase-starter/pom.xml
+++ b/components-starter/camel-hbase-starter/pom.xml
@@ -41,14 +41,6 @@
                     <groupId>commons-logging</groupId>
                     <artifactId>commons-logging</artifactId>
                 </exclusion>
-                <exclusion>
-                    <groupId>log4j</groupId>
-                    <artifactId>log4j</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>org.slf4j</groupId>
-                    <artifactId>slf4j-log4j12</artifactId>
-                </exclusion>
             </exclusions>
         </dependency>
         <dependency>
diff --git a/components-starter/camel-spark-starter/pom.xml b/components-starter/camel-spark-starter/pom.xml
index a34a316..be06155 100644
--- a/components-starter/camel-spark-starter/pom.xml
+++ b/components-starter/camel-spark-starter/pom.xml
@@ -41,18 +41,6 @@
                     <groupId>commons-logging</groupId>
                     <artifactId>commons-logging</artifactId>
                 </exclusion>
-                <exclusion>
-                    <groupId>log4j</groupId>
-                    <artifactId>apache-log4j-extras</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>log4j</groupId>
-                    <artifactId>log4j</artifactId>
-                </exclusion>
-                <exclusion>
-                    <groupId>org.slf4j</groupId>
-                    <artifactId>slf4j-log4j12</artifactId>
-                </exclusion>
             </exclusions>
         </dependency>
         <dependency>
{code}


davsclaus:1471220638:2016-08-15T08:23:58.674+0000:1471220638:2016-08-15T08:23:58.674+0000:We also need to include all the -starter binaries in the apache-camel distro, eg in the apache-camel directory, there is pom.xml and common-bin that needs to be updated. We can do this manually as we do today.
githubbot:1471220920:2016-08-15T08:28:40.141+0000:1471220920:2016-08-15T08:28:40.141+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1117

githubbot:1473398672:2016-09-09T13:24:32.856+0000:1473398672:2016-09-09T13:24:32.856+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1164

    CAMEL-10222: New spring-boot BOM

    I tried to run the integration tests (including the unit test part of each module) using the starters only, but I found out that a mixture of spring-boot dependencies and camel dependencies produce wrong classpaths, i.e. classpaths that include different versions of jetty-core and jetty-util-xxx (9.3 and 9.2). the same happens with submodules of activemq, hibernate, jackson and others.
    
    Using Jetty 9.3 (the version supported by spring-boot) instead of the 9.2 has some advantages in that users can possibly use other sb-compatible libraries in their applications.
    The camel-jetty9 component had two issues with Jetty 9.3 (broken HTTPS support and a changed method signature). I solved both.
    
    Being able to always use Netty 4.15 (same for sb and camel) would be also great. Unfortunately some modules (the one dependent on asynchttpclient) still need to work with Netty 4.0.x.
    Netty will not be part of the BOM.
    
    This means that, in order to use a component, people just need to add the starter to the application's pom, but if they include more starters, in some (hopefully rare) circumstances, the application will not work (just because two different versions of the same class cannot be present in a standard java classpath).
    
    I evaluated different options before creating the final BOM:
    
    1)
    A BOM with lower precedence over the spring-boot BOM (this bom would simply be included by the users AFTER the spring-boot BOM declaration in their applications)
    
    Drawbacks:
    - Some modules require specific versions of some libraries. Eg. Spring-boot uses the cassandra v2 driver, while our component requires version 3. Cannot override it with a BOM with lower precedence.
    - In general, there's no way to force a specific camel version for a particular library if spring-boot provides its own in the BOM (another example is activeMQ)
    
    2)
    A BOM with higher precedence over the spring-boot one
    
    Drawbacks:
    - Problems with gson and other libraries. Some of our modules use different versions of gson, so it should simply be excluded from the BOM and included in each starter
    - If spring-boot adds eg. google guava in the future we will have more issues
    
    3)
    A brand new BOM, that includes all SAFE dependencies of the spring-boot BOM and then all safe dependencies of Camel parent.
    
    Drawbacks:
    - The user must use the org.apache.camel:camel-spring-boot-dependencies instead of the org.springframework.boot:spring-boot-dependencies
    - Switching to a different version of spring-boot may be difficult (but many components would not work out of the box)
    
    Advantages:
    - Possibility to change any user dependency in the future (to fix issues)
    - Possibility to choose camel versions over spring-boot versions and vice-versa
    - Auto-generated from a reduced set of rules
    
    
    I implemented the 3rd choice.
    I also provided a separate camel-starter-parent to be able to change the libraries included in the starters without affecting the user BOM.
    
    To create the full BOM I created a generator: a simple maven plugin that produces a flattened pom.xml file from information contained in a generator project, using inclusion/exclusion rules.
    I had to put a small set (~20) of version numbers in a separate (camel-spring-boot-dm/pom.xml) file. The versions belonging to camel-parent should be aligned when the corresponding entry is changed.
    
    I changed the integration tests to use the new structure:
    - No module is failing when included in a spring-boot application (at least... before the rebase :D)
    - Some modules (<20 / 220) are failing when running the unit tests from the integration framework. Many problems are simply related to the testing tool (it's difficult to make it stable). I'll investigate and correct real issues, if any.
    
    
    I fixed many problems either by changing the starter's pom or changing the BOM, so now we have a more powerful tool for choosing the right libraries to include in the user apps.
    Also, non-spring-boot users (eg. Karaf) are not impacted by the changes.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10222-P2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1164.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1164
    
----
commit 9914a683e0cd894b10c02250e33364681fc41753
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-01T10:41:55Z

    CAMEL-10222: Fixed some poms up to HBase

commit f5060038ae0167da3e87599c9fc6b01e1449cb7e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-02T10:09:48Z

    CAMEL-10222: Good configuration up to Jetty9

commit 1c153e005db8c06a49880da3f29eec192abaed93
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-02T11:43:38Z

    CAMEL-10222: Fixed resolution of wrong versions

commit fc3236c677476411abdc874c53b8442768d294ed
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T10:09:54Z

    CAMEL-10222: Added more stuff to the BOM

commit 575f8b4227d204e85a24623de4438742efc66314
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T10:17:41Z

    CAMEL-10222: Stable version

commit cc8ca7a676313788a17e367f60500bab097c338f
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T15:36:11Z

    CAMEL-10222: First generated BOM

commit e8adc961cae68679f11455022a2082269a9aa2ca
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T09:46:56Z

    CAMEL-10222: First real BOM

commit 991e8b679a45b360773e5dc0bd70bb4546abd6f1
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T09:52:35Z

    CAMEL-10222: Simpler BOM

commit 10502bfdc4e61d2b59e472b546c7b470fa1cf65c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T12:21:00Z

    CAMEL-10222: Pre-test release

commit f6c574f3f0604006720320c25d9945dd4f2a65a1
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T14:37:23Z

    CAMEL-10222: First working version (no unit tests)

commit d54938c491c342b5d6e6565f43600e00ad8f140e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-08T09:52:32Z

    CAMEL-10222: Fixing compatibility with Jetty 9.3 (provided with spring-boot)

commit a60bc3931c2ba2da5f771262b254e14b5f744067
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-08T15:23:21Z

    CAMEL-10222: Fixed several modules and starters

commit 2234e70f423cd4ddac9e54edb784a2fc923020d8
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:07:14Z

    CAMEL-10222: Rewriting the examples to use the new spring-boot BOM

commit 2dc87ca8f8a7f5e30772ae5c0b19b7765439a151
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:30:55Z

    CAMEL-10222: Rewriting the archetype to use the new BOM

commit e9f5a67fc3b06b88311e4103eb81a27243112ff7
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:42:31Z

    CAMEL-10222: Adding starters to the assembly

commit 4eda8803f524e2a52f323ef4f9fcef15f1b55cca
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:53:01Z

    CAMEL-10222: Simplified pom configuration

commit 421c82209938b4431e978720b5a76aca5268cd42
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T11:29:48Z

    CAMEL-10222: Fixing scala and servlet starters

commit 0ee01c19ac386a29a93973f088e8848b9a4aedd3
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-01T10:41:55Z

    CAMEL-10222: Fixed some poms up to HBase

commit 31b3eaaa7d8cfc87cebb640e2fde4a2abd806f6c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-02T10:09:48Z

    CAMEL-10222: Good configuration up to Jetty9

commit bb07a8698547c3bcdc6dec98885243f74d1810ad
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-02T11:43:38Z

    CAMEL-10222: Fixed resolution of wrong versions

commit 28cde2f90449055a498311351dc5168548131449
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T10:09:54Z

    CAMEL-10222: Added more stuff to the BOM

commit a31baf8bb02b645316ee3929b2978f5c731d703a
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T10:17:41Z

    CAMEL-10222: Stable version

commit 8a0262f5edf7d3158c297e54defa766d6abf86aa
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T15:36:11Z

    CAMEL-10222: First generated BOM

commit eda18b03173877854f5625f7933590c2f5e5e231
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T09:46:56Z

    CAMEL-10222: First real BOM

commit f9ea57a5cd09cefab98236a5709f1aa4791fe51c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T09:52:35Z

    CAMEL-10222: Simpler BOM

commit 8011560ec3de40b96923dbc2d9a3f3fa8afe5ec5
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T12:21:00Z

    CAMEL-10222: Pre-test release

commit b6599d0744b542a1dd2f43937fde3e848dc2471b
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T14:37:23Z

    CAMEL-10222: First working version (no unit tests)

commit f8a5e7111f8a2aecd54f2418c13248413e81696e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-08T09:52:32Z

    CAMEL-10222: Fixing compatibility with Jetty 9.3 (provided with spring-boot)

commit 2855f2f03be451b76c7733213d59d29185c8d2ba
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-08T15:23:21Z

    CAMEL-10222: Fixed several modules and starters

commit a9b6ef2526c7c0a7f39cbb6b9f620a44bd9ba6a5
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:07:14Z

    CAMEL-10222: Rewriting the examples to use the new spring-boot BOM

----

nferraro:1473398803:2016-09-09T13:26:43.833+0000:1473398803:2016-09-09T13:26:43.833+0000:I did also:
- include the starters in the assembly
- change the examples and archetypes to use the new bom
davsclaus:1473920944:2016-09-15T14:29:04.325+0000:1473920944:2016-09-15T14:29:04.325+0000:We are discussing this a bit on the Camel @dev mailing list at
http://camel.465427.n5.nabble.com/Getting-ready-for-Apache-Camel-2-18-Release-tp5786942.html
githubbot:1474326677:2016-09-20T07:11:17.205+0000:1474326677:2016-09-20T07:11:17.205+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1164

githubbot:1474330478:2016-09-20T08:14:38.200+0000:1474330478:2016-09-20T08:14:38.200+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1182

    CAMEL-10222: Conflicts-free springboot BOM

    I created a camel BOM without conflicts with the spring-boot one, as discussed in the mailing list.
    I removed the following modules from the list of starters (with reference to the previous PR):
    - IBatis and Quartz (v1): deprecated and having many issues when running unit tests in sb mode
    - Jclouds: Jclouds-core uses a specific version of Gson. Cannot work with the one in the spring-bom.
    - SparkRest: Internally using a class that is missing in the version of Jetty used by spring-boot.
    
    There are also other (10) modules having some problems, but issues might be caused by the testing environment. For example, the Cassandra module might work with v2 of the driver, but the tests cannot ensure this because unit tests include cassandra-all into the classpath and it is much more probable that cassandra-all cannot work in a spring-boot environment (and it must not).
    I kept that starters, as they should work: Ahc, Cassandra, Consul, Jgroups, Jibx, Jpa, Xmljson, Mongodb, MongodbGridfs, Mybatis.
    
    Waiting for feedbacks.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10222-P3

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1182.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1182
    
----
commit 5ca0fda09cb3cea7a2d73ec6ff660afed7f18e6c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-01T10:41:55Z

    CAMEL-10222: Fixed some poms up to HBase

commit 2c8e289bce4ed2c7dc540b6f3168c8f38bfade7e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-02T10:09:48Z

    CAMEL-10222: Good configuration up to Jetty9

commit 7f351389f96ecccc2d424964cd4506ff776b1f6e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-02T11:43:38Z

    CAMEL-10222: Fixed resolution of wrong versions

commit 9de5089abe9640b7d15fc95d05a81b44f366c049
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T10:09:54Z

    CAMEL-10222: Added more stuff to the BOM

commit c39db2d390351807f4f0378b15d96bc3e7330e64
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T10:17:41Z

    CAMEL-10222: Stable version

commit f9c2a954f2efe0c5b09cc76e203c489c32ed261d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-06T15:36:11Z

    CAMEL-10222: First generated BOM

commit b45ccadbd94371b2a3b25f964f04df8448e70595
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T09:46:56Z

    CAMEL-10222: First real BOM

commit 459b11fd34a6d59dbeb6eb8f9a78b6dc1eaf6cfd
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T09:52:35Z

    CAMEL-10222: Simpler BOM

commit 03a7e99bc6fc57ae98cea7ea5a62979466f2a1ea
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T12:21:00Z

    CAMEL-10222: Pre-test release

commit b12445607a8a1a8797e07bb35cb989cd1d160a35
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-07T14:37:23Z

    CAMEL-10222: First working version (no unit tests)

commit 08791341466686285b9a5e8c948379973be3f7ba
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-08T09:52:32Z

    CAMEL-10222: Fixing compatibility with Jetty 9.3 (provided with spring-boot)

commit 046156cee90232d04db857cff49390dae833bf97
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-08T15:23:21Z

    CAMEL-10222: Fixed several modules and starters

commit 993e57830eb2e79c81d3b6377c44389f54aa386c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:07:14Z

    CAMEL-10222: Rewriting the examples to use the new spring-boot BOM

commit 107e6e80984c0b1d2b7deeaf983bc6622578ab5c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:30:55Z

    CAMEL-10222: Rewriting the archetype to use the new BOM

commit 702dd979ebe1871ff256d128cb6935ef3ac3deee
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:42:31Z

    CAMEL-10222: Adding starters to the assembly

commit 2292d2d7bbca40878dc958ef68924ce9abec41ea
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T09:53:01Z

    CAMEL-10222: Simplified pom configuration

commit fc44cce212ff267a75448138d6f572a6f0e27488
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T11:29:48Z

    CAMEL-10222: Fixing scala and servlet starters

commit 923c44bcb1021cea632e47b77db775d60e82c59c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T12:29:16Z

    CAMEL-10222: Aligning libraries with master

commit 281fbfd89142adbbfaca5b277af6f22550c36525
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T13:17:46Z

    CAMEL-10222: Source check

commit b1dfcabe3151286bc7096d796037a57baa9a002c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-09T13:17:46Z

    CAMEL-10222: New conflicts-free BOM

commit 02d0f68b1842cedee2018c0712c3e40bf7fd6f8c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-20T07:05:31Z

    CAMEL-10222: Updated versions in spring-boot BOM

commit ccb201a2fa0827e1b008e499e0b801158ff798f3
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-20T07:52:45Z

    CAMEL-10222: Updated examples

commit a0cacd9caa32af9de4b48b38c91100d686512032
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-09-20T08:11:53Z

    CAMEL-10222: Aligned Hazelcast

----

githubbot:1474413581:2016-09-21T07:19:41.769+0000:1474413581:2016-09-21T07:19:41.769+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1182
"
0,CAMEL-10221,Bug,Minor,None,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-08-04 12:07:46+00:00,2016-08-04 12:56:34+00:00,No Desc,
0,CAMEL-10220,New Feature,Major,None,Future,"
None
",Resolved,Information Provided,Future,Unassigned,David J. M. Karlsen,0,2,2016-08-04 10:33:41+00:00,2022-09-02 09:21:53+00:00,"It would be nice if the spring test support in camel-test-spring was realized as junit-rules instead of the runner so that runners can be freed for use with Parameterized etc.
See
http://blog.codeleak.pl/2015/08/parameterized-integration-tests-with.html
http://docs.spring.io/spring-framework/docs/4.3.2.RELEASE/spring-framework-reference/htmlsingle/#testcontext-junit4-rules","davsclaus:1564034177:2019-07-25T13:56:17.009+0000:1564034177:2019-07-25T13:56:17.009+0000:[~aldettinger] is this something you also look at in your junit5 research/prototype
davsclaus:1662081713:2022-09-02T09:21:53.122+0000:1662081713:2022-09-02T09:21:53.122+0000:we are on junit 5 now"
0,CAMEL-10219,Improvement,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Siddharth Sharma,0,4,2016-08-04 01:09:39+00:00,2016-08-19 23:33:38+00:00,There is no support in existing module to inject CharacterEscapeHandler in JAXB marshaller.,"sidshar:1470244196:2016-08-04T01:09:56.733+0000:1470244196:2016-08-04T01:09:56.733+0000:I will be sending a PR for this
githubbot:1470315218:2016-08-04T20:53:38.073+0000:1470315218:2016-08-04T20:53:38.073+0000:GitHub user ssharma opened a pull request:

    https://github.com/apache/camel/pull/1109

    Improvement for character escape handling

    https://issues.apache.org/jira/browse/CAMEL-10219

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssharma/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1109.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1109
    
----
commit 7f7b85b4bb81da49b7afb9e2a650010ca6a5ee74
Author: Siddharth Sharma <siddharth.sharma@jobvite-inc.com>
Date:   2016-08-04T20:50:52Z

    Improvement for character escape handling
    https://issues.apache.org/jira/browse/CAMEL-10219

----

sidshar:1470315250:2016-08-04T20:54:10.229+0000:1470315250:2016-08-04T20:54:10.229+0000:PR : https://github.com/apache/camel/pull/1109
sidshar:1470315743:2016-08-04T21:02:23.729+0000:1470315774:2016-08-04T21:02:54.118+0000:[~ancosen][~davsclaus] have provided a PR
githubbot:1470608389:2016-08-08T06:19:49.336+0000:1470608389:2016-08-08T06:19:49.336+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1109

davsclaus:1470608390:2016-08-08T06:19:50.073+0000:1470608390:2016-08-08T06:19:50.073+0000:Thanks for the PR
nimnio@gmail.com:1471616123:2016-08-19T22:15:23.140+0000:1471620817:2016-08-19T23:33:37.502+0000:Couldn't this be achieved using this feature documented on the Camel JAXB page (http://camel.apache.org/jaxb.html )?

{quote}
New for Camel 2.12.1
JaxbDataFormat now allows you to customize the XMLStreamWriter used to marshal the stream to XML. Using this configuration, you can add your own stream writer to completely remove, escape, or replace non-xml characters.
{code}
JaxbDataFormat customWriterFormat = new JaxbDataFormat(""org.apache.camel.foo.bar"");
customWriterFormat.setXmlStreamWriterWrapper(new TestXmlStreamWriter());
{code}

Or is the point to specifically support {{CharacterEscapeHandler}}?
{quote}
sidshar:1471617719:2016-08-19T22:41:59.636+0000:1471617719:2016-08-19T22:41:59.636+0000:Yes, goal was to write as less code as possible and customize only the minimum variable
nimnio@gmail.com:1471620792:2016-08-19T23:33:12.223+0000:1471620792:2016-08-19T23:33:12.223+0000:Thanks for the contribution, Siddharth.

For the record, I just tested my suggestion and it doesn't work. The documented feature, {{setXmlStreamWriterWrapper}} allows you to _decorate_ the existing XMLStreamWriter, and the existing XMLStreamWriter or some other component in the chain is already handling basic escaping so you can't prevent it from escaping <, for example."
0,CAMEL-10218,Improvement,Minor,2.17.2,2.17.3,"
None
",Resolved,Fixed,2.17.3,Unassigned,Rajesh A,0,2,2016-08-02 15:53:43+00:00,2016-08-11 14:11:15+00:00,"I need to get the Salesforce API version 37.0 DTO in order to use Salesforce Replay ID option. Hence, I included the ""version"" option in camel-salesforce-maven-plugin JAXB generation. However, maven plugin failed to generate the JAXB classes. Here is the error log:
---Error Log ---
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building camel-salesforce 0.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] — camel-salesforce-maven-plugin:2.17.2:generate (default-cli) @ camel-salesforce —
[INFO] Logging initialized @8602ms
[INFO] Available providers: SUN version 1.8.
log4j:WARN No appenders could be found for logger (org.apache.camel.maven.CamelSalesforceMojo).
log4j:WARN Please initialize the log4j system properly.
log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.
[INFO] Salesforce login...
[INFO] Login user xxxxxxxxxxx@xxxx.com at Salesforce loginUrl: https://login.salesforce.com/services/oauth2/token
[INFO] Login successful
[INFO] Salesforce login successful
[INFO] Getting Salesforce Objects...
[INFO] Logout successful
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 9.964 s
[INFO] Finished at: 2016-08-02T11:31:52-04:00
[INFO] Final Memory: 30M/291M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel.maven:camel-salesforce-maven-plugin:2.17.2:generate (default-cli) on project camel-salesforce: Error getting global Objects Unrecognized field ""mruEnabled"" (Class org.apache.camel.component.salesforce.api.dto.SObject), not marked as ignorable
[ERROR] at [Source: java.io.ByteArrayInputStream@33b082c5; line: 1, column: 343] (through reference chain: org.apache.camel.component.salesforce.api.dto.GlobalObjects[""sobjects""]->org.apache.camel.component.salesforce.api.dto.SObject[""mruEnabled""])
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException


If I update the ""version"" option anything below 34.0 it works. However, I need to version 37.0 API. Please fix this ASAP, as this is having an impact in my project schedule.","dhirajsb:1470133500:2016-08-02T18:25:00.107+0000:1470133500:2016-08-02T18:25:00.107+0000:This has been fixed in CAMEL-10144, and should be available in the next release. If you want you can get the changes from 2.1.7.x branch, patch your local version and work with that until 2.1.7.3 is released. 
rajesh734:1470137400:2016-08-02T19:30:00.852+0000:1470137400:2016-08-02T19:30:00.852+0000:May I know, when is the next release planned? Can you get me the path of this fix, so that I can use that as a patch for now?
rajesh734:1470139647:2016-08-02T20:07:27.083+0000:1470139647:2016-08-02T20:07:27.083+0000:Nevermind, I got the branch details from Git."
0,CAMEL-10217,Bug,Trivial,None,None,"
None
",Closed,Fixed,2.18.0,Nicola Ferraro,Nicola Ferraro,0,4,2016-08-02 14:47:11+00:00,2016-08-08 08:01:15+00:00,"Some components include logging implementations among their dependencies. If it is applicable (eg. if they are not hardcoded), they should be removed.


A quick script:



for comp in $(ls | grep ""camel-"" | grep -v "".iml""); do
	cd $comp
	mvn dependency:tree | grep 'log4j\|logback\|slf4j-simple\|slf4j-jdk14\|slf4j-log4j12' | grep -v test | xargs -I line echo ""$(pwd) line""
	cd ..
done




Shows the following problems:



./camel/components/camel-atmos [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-gora [INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-gora [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-hbase [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-jbpm [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-jbpm [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-jt400 [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-jt400 [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-krati [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-openshift [INFO] |  - log4j:log4j:jar:1.2.17:compile
./camel/components/camel-salesforce [INFO] +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-scr [INFO] +- org.slf4j:slf4j-log4j12:jar:1.7.21:compile
./camel/components/camel-scr [INFO] +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-spark [INFO] |  +- log4j:log4j:jar:1.2.17:compile
./camel/components/camel-spark [INFO] |  |  +- log4j:apache-log4j-extras:jar:1.2.17:compile
./camel/components/camel-spark-rest [INFO] |  +- org.slf4j:slf4j-simple:jar:1.7.21:compile
./camel/components/camel-spring-boot [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-spring-boot [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-spring-boot [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-spring-boot-starter [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-zipkin-starter [INFO] |  |  +- ch.qos.logback:logback-classic:jar:1.1.7:compile
./camel/components/camel-zipkin-starter [INFO] |  |  |  - ch.qos.logback:logback-core:jar:1.1.7:compile
./camel/components/camel-zipkin-starter [INFO] |  |  - org.slf4j:log4j-over-slf4j:jar:1.7.21:compile
./camel/components/camel-zookeeper [INFO] |  +- log4j:log4j:jar:1.2.17:compile




Spring-boot starters are allowed to have logging implementations. org.slf4j:log4j-over-slf4j is not an implementation.","davsclaus:1470196597:2016-08-03T11:56:37.459+0000:1470196597:2016-08-03T11:56:37.459+0000:Maybe some of the archetypes uses log4j 1.x in their generated sample code. It could be a good idea to upgrade those to use lo4j v2 also
nferraro:1470366022:2016-08-05T11:00:22.116+0000:1470366022:2016-08-05T11:00:22.116+0000:After a bit of analysis, the number of modules with logging issues is higher than expected, as _commons-logging_ was missing in the script (it is not an implementation, but needs to be bridged to work with slf4j):

{code}
for comp in $(ls | grep ""camel-"" | grep -v "".iml""); do
	cd $comp
	mvn dependency:tree | grep 'log4j\|logback\|slf4j-simple\|slf4j-jdk14\|slf4j-log4j12\|commons-logging' | grep -v test | xargs -I line echo ""$(pwd) line""
	cd ..
done
{code}

A clean solution to bring all modules to sl4j would be:
- Exclude all dependencies on logging implementation
- Include a slf4j legacy binding library (eg. _jcl-over-sl4fj_, _log4j-over-slf4j_) to replace the removed implementation

The main problems of the approach:
1) 
The number of exclusions that need to be put in each pom.xml is huge.
There are a number of hacks that can be used to prevent this pollution, but all of them have many drawbacks (eg. empty libraries, marking them as provided).

2)
Once I put a eg. _log4j-over-slf4j_ dependency in a pom.xml, people are not free to use _slf4j_log4jxx_ in their app (application closed to prevent stack overflow). If they want to use log4j (version 1 or 2) they will need to exclude _log4j-over-slf4j_ when importing the camel module. So this change does not simplify things for end users.
The only problem-free logging implementation for end-users will be _logback_.


When the target logging system is known a-priori, or a default system is used, as in spring-boot (where the logging system can be changed, but starters are configured to use _logback_), logging dependencies can be fixed.

For this Jira, I'm going to remove logging libraries from modules not using an implementation directly, because bridging libraries in camel modules does not seem to solve problems for the end users. I'll take also a look at generated sample code for the log4j12 issue.

For spring-boot, logging issues can be completely solved in (CAMEL-10222).
lb:1470368807:2016-08-05T11:46:47.328+0000:1470368818:2016-08-05T11:46:58.161+0000:[~davsclaus], [~nferraro] 

I'm having a look on how complex it is to migrate all the test stuffs to log4j2 (CAMEL-10224), so far the properties migration seems to work fine.
I should have a branch ready for review by end of the day beginning next week.
githubbot:1470373984:2016-08-05T13:13:04.387+0000:1470373984:2016-08-05T13:13:04.387+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1110

    CAMEL-10217: Removed logging implementation from compile scope in jbp…

    …m, jt400, scr, spark-rest

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10217

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1110.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1110
    
----
commit 2d9c0a177708a83756f70a230c8ae405df3f656d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-05T13:12:14Z

    CAMEL-10217: Removed logging implementation from compile scope in jbpm, jt400, scr, spark-rest

----

nferraro:1470374295:2016-08-05T13:18:15.972+0000:1470374295:2016-08-05T13:18:15.972+0000:[~lb] I fixed the scope only where it was safe to do so. Some dependencies (eg. _slf4j-log4j12_) need to be changed in the upgrade to log4j v2.
githubbot:1470550151:2016-08-07T14:09:11.694+0000:1470550151:2016-08-07T14:09:11.694+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1110

nferraro:1470614474:2016-08-08T08:01:14.933+0000:1470614474:2016-08-08T08:01:14.933+0000:Upgrade to log4j v2 to be handled in CAMEL-10224."
0,CAMEL-10216,Improvement,Minor,2.17.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-08-02 12:15:02+00:00,2016-08-02 12:21:21+00:00,"ProxyHost and ProxyPort endpoint parameters are ignored in camel-http4, they come from http-common endpoint and you're able to set a proxy by using proxy.host and proxy.port system properties or in camel-context Properties.


Using useSystemProperties equals to false (as default) the only way to make proxy works is setting the properties at camel-context level. It would be better to make possible using the endpoint parameters too.",
0,CAMEL-10215,Bug,Major,2.18.0,"2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Claus Ibsen,Siddharth Sharma,0,3,2016-08-01 22:43:27+00:00,2016-08-02 06:49:45+00:00,"For static endpoints, if DefaultConsumerTemplate#receive() is used,  ConsumerCache will return the cached instance of PollingConsumer for every thread part of parallel processing of split/aggregate.


Now, if EventDrivenPollingConsumer is used, returning same cache instance causes race condition in receive and receive(long) as the methods are not thread safe. The ordering of beforePoll, poll and afterPoll needs to be synchronized, otherwise the consumer might end up being suspended in afterPoll and the client whose beforePoll couldn't wake up the suspended thread will get no data.","sidshar:1470064711:2016-08-01T23:18:31.187+0000:1470064711:2016-08-01T23:18:31.187+0000:Diff : https://github.com/ssharma/camel/commit/ba14d20f536be101eca6c5fcd425355f06f9adca
githubbot:1470066362:2016-08-01T23:46:02.681+0000:1470066362:2016-08-01T23:46:02.681+0000:GitHub user ssharma opened a pull request:

    https://github.com/apache/camel/pull/1099

    https://issues.apache.org/jira/browse/CAMEL-10215 Synchronizing recei…

    Synchronizing EventDrivenPollingConsumer receive methods to make them thread safe when used with ConsumerCache

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssharma/camel upstream

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1099.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1099
    
----
commit eb0049ba5f0e3a377637e401a5a1c770a54b9bb4
Author: Siddharth Sharma <siddharth.sharma@jobvite-inc.com>
Date:   2016-08-01T22:49:16Z

    https://issues.apache.org/jira/browse/CAMEL-10215 Synchronizing receive methods

----

githubbot:1470091775:2016-08-02T06:49:35.816+0000:1470091775:2016-08-02T06:49:35.816+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1099

davsclaus:1470091785:2016-08-02T06:49:45.695+0000:1470091785:2016-08-02T06:49:45.695+0000:Thanks for reporting and the PR"
0,CAMEL-10214,Task,Minor,2.17.2,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,Pascal Schumacher,0,2,2016-08-01 17:54:44+00:00,2016-08-03 06:36:38+00:00,"http://camel.apache.org/file2.html has the doneFileName option for both consumer and producer, but in GenericFileEndpoint.java



@UriParam(label = ""producer"")
protected String doneFileName;



and in file.adoc  



| doneFileName | producer |



the consumer option is missing.","githubbot:1470138821:2016-08-02T19:53:41.401+0000:1470138821:2016-08-02T19:53:41.401+0000:GitHub user PascalSchumacher opened a pull request:

    https://github.com/apache/camel/pull/1103

    CAMEL-10214: doneFileName is a common option

    Explain how the doneFileName option works for consumers endpoints.
    
    extends https://github.com/apache/camel/commit/9943e77709010a37c8804308313650e5e66dcb2d and https://github.com/apache/camel/commit/357dfe36a05365522172c5cbc9663b941449a61e

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/PascalSchumacher/camel doneFileName

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1103.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1103
    
----
commit eaa3a9de494a87e16194daacff8479c50fcdb900
Author: Pascal Schumacher <pascalschumacher@gmx.net>
Date:   2016-08-02T19:51:38Z

    CAMEL-10214: doneFileName is a common option
    
    Explain how the doneFileName option works for consumers endpoints.

----

githubbot:1470177398:2016-08-03T06:36:38.881+0000:1470177398:2016-08-03T06:36:38.881+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1103
"
0,CAMEL-10213,Improvement,Minor,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Oliver Holzmann,0,5,2016-08-01 10:41:53+00:00,2016-11-21 15:56:37+00:00,"Currently it is not possible to control the processing time in the poll loop in Camel Kafka consumers. 


It is important to have the possibility to control the poll loop by adjusting max.poll.records and session.timeout.ms . Otherwise this warning is produced when consuming a large backlog from kafka topic:



Auto offset commit failed for group consumerGroup: Commit cannot be 
completed since the group has already rebalanced and assigned the 
partitions to another member. This means that the time between 
subsequent calls to poll() was longer than the configured 
session.timeout.ms, which typically implies that the poll loop is spending 
too much time message processing. You can address this either by 
increasing the session timeout or by reducing the maximum size of batches
returned in poll() with max.poll.records.




Please add max.poll.records and session.timeout.ms to Kafka endpoint configuration.","davsclaus:1470019867:2016-08-01T10:51:07.953+0000:1470019867:2016-08-01T10:51:07.953+0000:Contributions is welcome
OHolzma:1470020571:2016-08-01T11:02:51.725+0000:1470020571:2016-08-01T11:02:51.725+0000:I missed that {{sessionTimeoutMs}} is already available. 

Only {{maxPollRecords}} missing.
OHolzma:1470020571:2016-08-01T11:02:51.795+0000:1470020571:2016-08-01T11:02:51.795+0000:I missed that {{sessionTimeoutMs}} is already available. 

Only {{maxPollRecords}} missing.
davsclaus:1470032902:2016-08-01T14:28:22.709+0000:1470032902:2016-08-01T14:28:22.709+0000:Thanks Oliver.

You are welcome to see if you can spot other options missing.

All the options are in the classes

- org.apache.kafka.clients.consumer.ConsumerConfig
- org.apache.kafka.clients.consumer.ProducerConfig

landonvg:1479447986:2016-11-18T13:46:26.591+0000:1479447986:2016-11-18T13:46:26.591+0000:What is the new consumer option -- ""maxPollRecords""? Please update the documentation for the new consumer option at http://camel.apache.org/kafka.html.  
acosentino:1479448518:2016-11-18T13:55:18.799+0000:1479448518:2016-11-18T13:55:18.799+0000:You can read the docs here:

https://raw.githubusercontent.com/apache/camel/master/components/camel-kafka/src/main/docs/kafka-component.adoc

We will leave confluence soon and we will base the docs only on the asciidoc in repository.
landonvg:1479450081:2016-11-18T14:21:21.096+0000:1479450081:2016-11-18T14:21:21.096+0000:Thank you.  Excuse my ignorance, but I have not used asciidoc before.  When I view the link above, I'm seeing only raw text with markup; how should I be viewing that document?  I imagine others will have the same question, as you make the transition.
landonvg:1479450250:2016-11-18T14:24:10.784+0000:1479450250:2016-11-18T14:24:10.784+0000:I figured it out.  I found and installed an asciidoc reader browser extension.
acosentino:1479450502:2016-11-18T14:28:22.640+0000:1479450502:2016-11-18T14:28:22.640+0000:You can also see it here:

https://github.com/apache/camel/blob/master/components/camel-kafka/src/main/docs/kafka-component.adoc

but it is not well aligned.

Or otherwise from the code you can in /camel-website/ run mvn clean install

This will spin up a site asciidoc based that you will be able to see.
landonvg:1479450634:2016-11-18T14:30:34.298+0000:1479450634:2016-11-18T14:30:34.298+0000:The new documentation there for ""maxPollRecords"" appears to be incorrect; it says default = 2147483647 and description = ""A unique string that identifies the consumer group this consumer belongs to. This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.""  Compare to the entry for ""max.poll.records"" at http://kafka.apache.org/documentation.html#newconsumerconfigs.  Should I open a new bug?

acosentino:1479450957:2016-11-18T14:35:57.628+0000:1479450957:2016-11-18T14:35:57.628+0000:Contributions are always welcome.
githubbot:1479462283:2016-11-18T17:44:43.860+0000:1479462283:2016-11-18T17:44:43.860+0000:GitHub user landonvg opened a pull request:

    https://github.com/apache/camel/pull/1279

    Fix docs for maxPollRecords

    This syncs up the default and description with max.poll.records http://kafka.apache.org/documentation.html#newconsumerconfigs; see comment in https://issues.apache.org/jira/browse/CAMEL-10213

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/landonvg/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1279.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1279
    
----
commit fda945f64ea71cb4589599e850edf20cb98abbaa
Author: Von Landon <landonvg@familysearch.org>
Date:   2016-11-18T17:41:03Z

    Fix docs for maxPollRecords
    
    This syncs up the default and description with max.poll.records http://kafka.apache.org/documentation.html#newconsumerconfigs ; see comment in https://issues.apache.org/jira/browse/CAMEL-10213

commit 5eced81a83ece9407bb86c8358be4ca9b33e1288
Author: Von Landon <landonvg@familysearch.org>
Date:   2016-11-18T17:41:53Z

    Merge pull request #1 from landonvg/landonvg-patch-1
    
    Fix docs for maxPollRecords

----

landonvg:1479462609:2016-11-18T17:50:09.753+0000:1479462609:2016-11-18T17:50:09.753+0000:see https://github.com/apache/camel/pull/1279
githubbot:1479714997:2016-11-21T15:56:37.283+0000:1479714997:2016-11-21T15:56:37.283+0000:Github user landonvg closed the pull request at:

    https://github.com/apache/camel/pull/1279
"
0,CAMEL-10212,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-08-01 09:30:14+00:00,2016-08-01 09:41:12+00:00,No Desc,
0,CAMEL-10211,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-08-01 08:51:02+00:00,2016-08-01 10:53:11+00:00,Allow to configure all the tracer options (eg in DefaultTraceFormatter) to configure what to output with the tracer.,
0,CAMEL-10210,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,1,2,2016-08-01 08:49:53+00:00,2016-08-10 08:52:40+00:00,"See nabble
http://camel.465427.n5.nabble.com/Tracer-multiline-tp5785600.html


See DefaultExchangeFormatter which has multiline support. Add something similar to DefaultTraceFormatter. Also expose that as JMX option in ManagedTracer so you can change it over JMX at runtime.",
0,CAMEL-10209,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-08-01 06:20:34+00:00,2016-08-01 08:16:26+00:00,We should also generate auto configuration for languages. We do this already for components and data formats.,
0,CAMEL-10208,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-08-01 06:18:57+00:00,2016-08-01 11:51:41+00:00,"We should create an interface at org.apache.camel.FluentProducerTemplate and have a DefaultFluentProducerTemplate implementation.


We should then allow to create a new FluentProducerTemplate from CamelContext API as well (like for producer template)


And also allow to inject FluentProducerTemplate using @EndpointInject and @Produces in the DefaultCamelBeanPostProcessor",
0,CAMEL-10207,Test,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Nicola Ferraro,Claus Ibsen,0,3,2016-07-30 06:26:01+00:00,2016-08-02 10:32:28+00:00,"We have a number of failures


Tests in error:
  CamelBamTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelDisruptorTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelHystrixTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelJasyptTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelJiraTest.org.apache.camel.itest.springboot.CamelJiraTest » Runtime Could ...
  CamelMllpTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelNagiosTest.org.apache.camel.itest.springboot.CamelNagiosTest » Runtime Co...
  CamelScalaTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelScriptTest.componentTests:43->AbstractSpringBootTestSupport.runLanguageTest:88 »
  CamelSlackTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelSpringRedisTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelSpringTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget


Tests run: 224, Failures: 0, Errors: 12, Skipped: 0","davsclaus:1470013158:2016-08-01T08:59:18.928+0000:1470013158:2016-08-01T08:59:18.928+0000:[~nferraro] do you also get these test failures ?
nferraro:1470015180:2016-08-01T09:33:00.745+0000:1470015180:2016-08-01T09:33:00.745+0000:I get 10 of them:
{noformat}
 CamelBamTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelDisruptorTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelHystrixTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelJasyptTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelMllpTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelScalaTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelScriptTest.componentTests:43->AbstractSpringBootTestSupport.runLanguageTest:88 » 
  CamelSlackTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelSpringRedisTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelSpringTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
{noformat}

Many errors are due to an issue with the package scanner that have been solved previously (CAMEL-10060), but need change to support the new packaging.

I'm going to fix it and run all tests again.

githubbot:1470026601:2016-08-01T12:43:21.314+0000:1470026601:2016-08-01T12:43:21.314+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1095

    CAMEL-10207: fixes for spring-boot 1.4 compatibility

    I changed the package scanner to support the new packaging, upgraded spring-data-redis to version 1.7.2 and fixed some tests.
    
    Only camel-bam (deprecated) now has some issues with spring-boot.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10207

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1095.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1095
    
----
commit b350f6a3975103a01e1f0f1a32b056d732270ead
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-01T10:19:06Z

    Added spring-boot 1.4 compatible package scanner

commit 0302fd267f79ab808f8c5f980e2bd20f3a422f09
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-01T11:14:28Z

    Changed checked name to 'javaScript'

commit 736f846d7ae5de0fe25ebefb55d65ad19509e70c
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-01T11:24:41Z

    Upgraded spring-data-redis to version 1.7.2.RELEASE

----

githubbot:1470031558:2016-08-01T14:05:58.273+0000:1470031558:2016-08-01T14:05:58.273+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1095

davsclaus:1470033040:2016-08-01T14:30:40.796+0000:1470033040:2016-08-01T14:30:40.796+0000:This is much better. Now I have only 3 errors 


Tests in error:
  CamelBamTest>AbstractSpringBootTestSupport.startSpringBoot:44 » InvocationTarget
  CamelJiraTest.org.apache.camel.itest.springboot.CamelJiraTest » Runtime Could ...
  CamelNagiosTest.org.apache.camel.itest.springboot.CamelNagiosTest » Runtime Co...

Tests run: 224, Failures: 0, Errors: 3, Skipped: 0
githubbot:1470102266:2016-08-02T09:44:26.400+0000:1470102266:2016-08-02T09:44:26.400+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1100

    CAMEL-10207: Fixed test configuration for Bam. Added repetition in ca…

    …se of failure.
    
    ```
    Results :
    
    Tests run: 224, Failures: 0, Errors: 0, Skipped: 0
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10207-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1100.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1100
    
----
commit ca87d56f8bf45e3075f5154f01f2084f3d4637e7
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-02T09:42:41Z

    CAMEL-10207: Fixed test configuration for Bam. Added repetition in case of failure.

----

davsclaus:1470103255:2016-08-02T10:00:55.522+0000:1470103255:2016-08-02T10:00:55.522+0000:Thanks
githubbot:1470105148:2016-08-02T10:32:28.993+0000:1470105148:2016-08-02T10:32:28.993+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1100
"
0,CAMEL-10206,Bug,Minor,2.17.2,,"
None
",Resolved,Not A Problem,None,Unassigned,Jens Reimann,0,2,2016-07-29 15:38:26+00:00,2016-07-30 06:32:42+00:00,"Creating a route while creating a route leaves the second route in line unstarted.


That sounds a bit strange so I try to explain: When you have a custom camel endpoint which actually forwards requests to another route and does create that route during the ""doStart"" method then the call stack will be like that:



Camel Context - start
start routes (set starting = true)
Custom Producer/Consumer - doStart
Camel Context - add route
start routes -> return due to ""starting = true""



A possible workaround it to create an executor service in the custom component and forward the route creations to it.","davsclaus:1469784533:2016-07-29T17:28:53.452+0000:1469784533:2016-07-29T17:28:53.452+0000:This is not intended behavior. If Camel is starting up, then you should add routes after Camel has been started.

In your custom component you can use a StartupListener to only start new routes when Camel is started
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/StartupListener.java

And if you receive any messages prior to that you can store those temporary until the startup callback.
ctron:1469786814:2016-07-29T18:06:54.172+0000:1469786814:2016-07-29T18:06:54.172+0000:But I still would expect some kind of ""IllegalStateException"" in this case.
davsclaus:1469831562:2016-07-30T06:32:42.747+0000:1469831562:2016-07-30T06:32:42.747+0000:Jens, yeah such an exception could be a good idea. 

Contributions is welcome with a patch / PR. 
http://camel.apache.org/contributing

"
0,CAMEL-10205,Bug,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-07-29 11:40:45+00:00,2016-08-22 13:23:42+00:00,"In a vanilla Karaf 4.0.5, then following the readme.md file of camel-example-spring-dm it fails with some lovely classloading



2016-07-29 13:39:34,713 | ERROR | ExtenderThread-1 | ContextLoaderListener            | 83 - org.springframework.osgi.extender - 1.2.1 | Application context refresh failed (OsgiBundleXmlApplicationContext(bundle=camel-example-spring-dm, config=osgibundle:/META-INF/spring/*.xml))
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to create the JAXB binder; nested exception is javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:378)[61:org.apache.camel.camel-spring:2.18.0.SNAPSHOT]
	at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1432)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1422)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:187)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:147)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:101)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:495)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:391)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:335)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)[70:org.apache.servicemix.bundles.spring-beans:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:164)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:136)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)[72:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:539)[72:org.apache.servicemix.bundles.spring-context:3.2.14.RELEASE_1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:69)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:269)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:247)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:214)[83:org.springframework.osgi.extender:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:169)[83:org.springframework.osgi.extender:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:175)[82:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$2.run(ContextLoaderListener.java:716)[83:org.springframework.osgi.extender:1.2.1]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_31]
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
	at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:281)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.8.0_31]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)[:1.8.0_31]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.8.0_31]
	at java.lang.reflect.Method.invoke(Method.java:483)[:1.8.0_31]
	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:143)[:2.7.0]
	at javax.xml.bind.ContextFinder.find(ContextFinder.java:310)[:2.7.0]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:446)[:2.7.0]
	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:409)[:2.7.0]
	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:31)[55:org.apache.camel.camel-core:2.18.0.SNAPSHOT]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:215)[61:org.apache.camel.camel-spring:2.18.0.SNAPSHOT]
	at org.apach",
0,CAMEL-10204,Test,Major,None,2.18.0,"
None
",Closed,Resolved,2.18.0,Nicola Ferraro,Claus Ibsen,0,3,2016-07-29 11:20:22+00:00,2016-08-04 11:17:01+00:00,"Use
http://narayana.io/


Instead of Atomikos which has an ET Phone Home.
Thanks for using Atomikos! Evaluate http://www.atomikos.com/Main/ExtremeTransactions for advanced features and professional support
or register at http://www.atomikos.com/Main/RegisterYourDownload to disable this message and receive FREE tips & advice","nferraro:1469766363:2016-07-29T12:26:03.487+0000:1469766363:2016-07-29T12:26:03.487+0000:Yes, I'll look at it later. I expected problems with SB 1.4 because the packaging structure has completely changed since 1.3. They introduced a BOOT-INF folder inside the zip (that might be the problem but I didn't check it yet).
nferraro:1470030708:2016-08-01T13:51:48.066+0000:1470030708:2016-08-01T13:51:48.066+0000:Looks like I added a comment in the wrong Jira, but definitely I can pick this issue up.
githubbot:1470279471:2016-08-04T10:57:51.120+0000:1470279471:2016-08-04T10:57:51.120+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1107

    CAMEL-10204: Using Narayana for testing (Atomikos deleted)

    Camel-sjms depended on atomikos but it were not used in tests. Deleted.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10204

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1107.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1107
    
----
commit 9b6b38c72fddd50fe4184f70b1dc863dfe5c9fdf
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-08-04T10:55:40Z

    CAMEL-10204: Using Narayana for testing (Atomikos deleted)

----

githubbot:1470279666:2016-08-04T11:01:06.228+0000:1470279666:2016-08-04T11:01:06.228+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1107
"
0,CAMEL-10203,Improvement,Major,2.18.0,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-07-29 08:11:19+00:00,2016-07-29 08:45:44+00:00,"but should use their wrapper types, so null means that the option has not been configured.",
0,CAMEL-10202,Task,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-07-29 07:54:52+00:00,2016-07-29 08:14:14+00:00,"Have this error


Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route route94: Route(route94)[[From[netty4-http:http://0.0.0.0:{{http.port}... because of Failed to resolve endpoint: netty4-http://http://0.0.0.0:11268 due to: Cannot auto create component: netty4-http
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: netty4-http://http://0.0.0.0:11268 due to: Cannot auto create component: netty4-http
Caused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: netty4-http
Caused by: java.lang.IllegalArgumentException: nThreads: 0 (expected: > 0)


Because the default value of that a thread pool becomes 0, which is not a valid value for netty.",davsclaus:1469751254:2016-07-29T08:14:14.926+0000:1469751254:2016-07-29T08:14:14.926+0000:Will be fixed by CAMEL-10203
0,CAMEL-10201,Improvement,Trivial,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Stephan Siano,Stephan Siano,0,1,2016-07-29 05:22:43+00:00,2016-07-29 06:20:13+00:00,"There are currently only two type converters that convert MIME Multipart objects into something else (one to String and one to InputStream).


Conversion to other relevant types should be supported with a fallback type converter.",
0,CAMEL-10200,Bug,Minor,"2.16.3, 2.17.2","2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Stephan Siano,Stephan Siano,0,1,2016-07-29 05:20:32+00:00,2016-07-29 05:40:51+00:00,"If a mail with attachment is received the mail consumer components (imap and pop3) set the message body to a Multipart Message and take over all headers from the mail message.


All known consumers of the message body (including the mail (SMTP) producer) will convert the body into somthing else (using one of the provided type converters) and will receive the first text part of the messsage, which is the mail body. This is the behaviour one would expect.


Unfortunately the Content-Type header taken over from the Multipart mail will contain a multipart content type (including the MIME boundary) of the whole mail, not the content type of the entity usually used as mail body,


As a consequence the following route will always fail:



from(""pop3://james3@localhost?consumer.delay=1000"").removeHeader(""to"").to(""smtp://james4@localhost"");




The error message is.



2016-07-28 20:01:24,892 [ames2@localhost] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-WDFD30052822A-54830-1469728883014-0-1 on ExchangeId: ID-WDFD30052822A-54830-1469728883014-0-2). Exhausted after delivery attempt: 1 caught: javax.mail.MessagingException: Missing start boundary

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [pop3://james2@localhost?consumer.delay=1000                                   ] [        18]
[route1            ] [to1               ] [smtp://james3@localhost                                                       ] [        13]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
javax.mail.MessagingException: Missing start boundary
	at javax.mail.internet.MimeMultipart.parse(MimeMultipart.java:682)
	at javax.mail.internet.MimeMultipart.updateHeaders(MimeMultipart.java:513)
	at javax.mail.internet.MimeBodyPart.updateHeaders(MimeBodyPart.java:1483)
	at javax.mail.internet.MimeBodyPart.updateHeaders(MimeBodyPart.java:1131)
	at javax.mail.internet.MimeMultipart.updateHeaders(MimeMultipart.java:515)
	at javax.mail.internet.MimeBodyPart.updateHeaders(MimeBodyPart.java:1483)
	at javax.mail.internet.MimeMessage.updateHeaders(MimeMessage.java:2198)
	at javax.mail.internet.MimeMessage.saveChanges(MimeMessage.java:2159)
	at org.apache.camel.component.mail.DefaultJavaMailSender.send(DefaultJavaMailSender.java:118)
	at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:63)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:173)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:362)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:168)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:525)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:197)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:109)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:91)
	at org.apache.camel.component.mail.MailConsumer.processExchange(MailConsumer.java:382)
	at org.apache.camel.component.mail.MailConsumer.processBatch(MailConsumer.java:221)
	at org.apache.camel.component.mail.MailConsumer.poll(MailConsumer.java:128)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:175)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:102)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)




The provided patch will set the Content-Type header of the message to the content type of the first text part of the multipart (the one which is also returned by the type converters)",
0,CAMEL-10199,Improvement,Minor,2.17.2,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,John Mark,0,2,2016-07-28 15:27:24+00:00,2016-07-30 07:07:01+00:00,"I use Camel with Spring framework and create my routes as spring beans. I use <camel:ContextScan/> to have my routes started. 


The problem I have is that the ProducerTemplate that is injected into my bean (a different bean - not the route bean) using @EndpointInject is not ready for use. When I try to call producerTemplate.send() I get:



IllegalStateException: ProducerTemplate has not been started




I am using ?block=true in the uri when I call producerTemplate.send()","jmark:1469692270:2016-07-28T15:51:10.992+0000:1469692270:2016-07-28T15:51:10.992+0000:As a workaround I was able to get it working by creating the template in spring xml (using {{<camel:template id=""mytemplate""/>}} and then injecting that into the bean that uses it.

I still think that {{@EndpointInject}} does not handle this correctly and this is a bug that should be fixed.
davsclaus:1469748731:2016-07-29T07:32:11.837+0000:1469748731:2016-07-29T07:32:11.837+0000:Do you use the injected producer template before CamelContext is started? or when do you use it?


jmark:1469773687:2016-07-29T14:28:07.484+0000:1469773687:2016-07-29T14:28:07.484+0000:The camel context is created in camel spring xml so starting it is done by spring. The producer template is injected into a bean that is automatically created by spring using package scanning. Then bean is used as a javax.jms.MessageListener and is called automatically by the spring DefaultMessageListenerContainer to process JMS messages. (I know that I can have Camel handle the JMS listening, but the architecture we are using does not allow for that so I use spring's DefaultMessageListenerContainer to pull messages off JMS and then push them to camel with the producer template.

If I start the app with messages already on the queue then I get the producer template not started error.

I should also mention that the application is wired using spring boot (although I am not using camel-spring-boot for the camel part due to other issues).
davsclaus:1469784713:2016-07-29T17:31:53.092+0000:1469784713:2016-07-29T17:31:53.092+0000:You have an ordering issue when you use custom DMLC and have it trigger before Camel is starting/started.

The bean injection is done by Spring and it may inject beans during startup. We may have a way of auto starting those injected ProducerTemplates on beans when Camel is starting, as <camel:template> does.
davsclaus:1469833621:2016-07-30T07:07:01.284+0000:1469833621:2016-07-30T07:07:01.284+0000:The injected ProducerTemplate with @EndpointInject is being started automatic by Camel by CAMEL-8491"
0,CAMEL-10198,Test,Minor,"2.16.3, 2.17.2","2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Andrea Cosentino,Kevin Anthony Earls,0,3,2016-07-28 14:24:53+00:00,2016-07-29 07:13:19+00:00,"The following tests fail on some platforms.  For me they failed on Mac OS X and RHEL 7.2, but work on Ubuntu 


org.apache.camel.component.jgroups.JGroupsClusterTest.shouldKeepMaster
org.apache.camel.component.jgroups.JGroupsClusterTest.shouldElectSecondNodeAndReturnToFirst
org.apache.camel.component.jgroups.JGroupsComponentTest.shouldConsumeMulticastedMessage	
org.apache.camel.component.jgroups.JGroupsConsumerTest.shouldConsumeMulticastedMessage
 org.apache.camel.component.jgroups.JGroupsConsumerTest.shouldKeepOriginalMessage


I will submit a PR with a fix shortly","githubbot:1469687301:2016-07-28T14:28:21.637+0000:1469687301:2016-07-28T14:28:21.637+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/1091

    CAMEL-10198 JGroupsClusterTest and JGroupsComponentTest fail on some …

    …platforms

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-10198

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1091.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1091
    
----
commit 4d4980ad9a38dffa5a23867117e24c471e5539e1
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2016-07-28T14:27:15Z

    CAMEL-10198 JGroupsClusterTest and JGroupsComponentTest fail on some platforms

----

githubbot:1469687715:2016-07-28T14:35:15.372+0000:1469687715:2016-07-28T14:35:15.372+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1091

acosentino:1469688079:2016-07-28T14:41:19.298+0000:1469688079:2016-07-28T14:41:19.298+0000:Merged! Many thanks [~kearls] :-)"
0,CAMEL-10167,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-07-21 09:12:46+00:00,2016-07-21 09:33:20+00:00,No Desc,
0,CAMEL-10166,Improvement,Major,2.17.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Fabian Chanton,0,3,2016-07-21 08:22:37+00:00,2016-07-26 11:41:00+00:00,"When declaring a queue on the default exchange it is not allways (maybe never) allowed to bind that queue to the default exchange. 


I see two ways to solve this:



Introduce an URI parameter (e.g. skipBind) to skip binding
Never bind a queue on the default exchange



What is the prefered way?","fabian.chanton@gmx.ch:1469060657:2016-07-21T08:24:17.640+0000:1469060657:2016-07-21T08:24:17.640+0000:This would maybe fix CAMEL-9561 as well
acosentino:1469494387:2016-07-26T08:53:07.746+0000:1469494387:2016-07-26T08:53:07.746+0000:Maybe we can add a skipBind URI parameter, as you are suggesting, with default value true.

What do you think about? Also, would you like to work on a fix for this case? :-)
githubbot:1469502282:2016-07-26T11:04:42.640+0000:1469502282:2016-07-26T11:04:42.640+0000:GitHub user FabianChanton opened a pull request:

    https://github.com/apache/camel/pull/1086

    CAMEL-10166: Add URI parameter skipQueueBind in case we need to decl…

    As described in CAMEL-10166 I would like to add a URI parameter to skip binding a queue to an exchange after declaring the queue. I noticed that on some servers (maybe all) you can declare a queue on the default exchange but are not allowed to bind it to the exchange.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/FabianChanton/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1086.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1086
    
----
commit 4e5c521f0c073ecbcb77756b71ab632c9a267117
Author: Fabian Chanton <fabian.chanton@misurio.ch>
Date:   2016-07-26T11:01:17Z

    CAMEL-10166: Add URI parameter skip QueueBind in case we need to declare a queue but not bind it to the exchange

----

githubbot:1469504243:2016-07-26T11:37:23.631+0000:1469504243:2016-07-26T11:37:23.631+0000:Github user FabianChanton closed the pull request at:

    https://github.com/apache/camel/pull/1086
"
0,CAMEL-10165,Bug,Major,2.17.2,"2.19.5, 2.20.2, 2.21.0","
None
",Resolved,Fixed,"2.19.5, 2.20.2, 2.21.0",Claus Ibsen,Zoltan Farkas,1,3,2016-07-20 19:47:22+00:00,2018-01-11 14:25:30+00:00,"in DefaultCxfMessageMapper.java:



    protected String getBasePath(Exchange camelExchange) {
        String answer = camelExchange.getIn().getHeader(Exchange.HTTP_BASE_URI, String.class);
        if (answer == null) {
            answer = camelExchange.getFromEndpoint().getEndpointUri();
        }        
        return answer;
    }




camelExchange.getFromEndpoint().getEndpointUri()


in 2.14 returns a valid http URL for the jetty endpoint...]


meanwhile in 2.17 it return a camel url that includes the scheme and it breaks the semantics of this method. I had to change the method to:



    protected String getBasePath(Exchange camelExchange) {
        String answer = camelExchange.getIn().getHeader(Exchange.HTTP_BASE_URI, String.class);

        if (answer == null) {
            Endpoint fromEndpoint = camelExchange.getFromEndpoint();
            if (fromEndpoint instanceof HttpCommonEndpoint) {
              try {
                URI u = ((HttpCommonEndpoint) fromEndpoint). getHttpUri();
                answer = new URI(u.getScheme(), u.getUserInfo(), u.getHost(), u.getPort(), u.getPath(),
                        null, null).toString();
              } catch (URISyntaxException ex) {
                throw new RuntimeException(ex);
              }
            } else {
              return null;
            }
        }

        return answer;
    }




I am not sure this is the best way to deal with this, but it works...","davsclaus:1469423674:2016-07-25T13:14:34.688+0000:1469423674:2016-07-25T13:14:34.688+0000:And what are you using that getBasePath method for ?

Are you doing some custom CXF / Camel code or in what situation do you have this problem?
zolyfarkas:1469710993:2016-07-28T21:03:13.124+0000:1469710993:2016-07-28T21:03:13.124+0000:I do not use this method directly, it is being used in: DefaultCxfMessageMapper.createCxfMessageFromCamelExchange:

{code}
        ....
        String basePath = getBasePath(camelExchange);
        ....

        answer.put(org.apache.cxf.message.Message.BASE_PATH, basePath);
        ....
{code}

so the CXF message is created with a incorrect base path and the message does not find its destination....


davsclaus:1469771988:2016-07-29T13:59:48.931+0000:1469771988:2016-07-29T13:59:48.931+0000:Do you have an unit test or sample application that reproduces this issue?
zolyfarkas:1470307468:2016-08-04T18:44:28.680+0000:1470307468:2016-08-04T18:44:28.680+0000:
basically all routes from jetty 9 to cxf 3.1.5 like:

{code}
    from(""jetty:http://{{http.host}}:{{http.port}}/somePath?matchOnUriPrefix=true"")
        .to(""cxfbean:someJaxRSService"");

{code}

were was not finding destination anymore after the 2.17.2 upgrade (from 2.14.4). (404)
All unit tests that were testing routes like above were failing, however they are unfortunately proprietary code coupled to a lot of non camel stuff...

if I would be to write a unit test to reproduce this that would depend solely on camel, camel-jetty9 and camel-cxf what would be the right place to put it in?

I patched the getBaseBath method in DefaultCxfMessageMapper to get past this issue for now.

kmackowiak:1515569594:2018-01-10T15:33:14.951+0000:1515569594:2018-01-10T15:33:14.951+0000:I experienced the same issue when upgrading from Camel 2.15.2 to 2.16.0. The bug is present also in latest version 2.20.1 . Here is a JUnit test that reproduces it:

{code}
public class Camel10165BugTest extends CamelTestSupport {

    private static final int PORT1 = CXFTestSupport.getPort(""Camel10165BugTest.1"");

    // NOTE: fails with camel 2.20.1, but passes for camel 2.15.2
    @Test
    public void testCallServiceWithBasePath() throws Exception {
        String request = ""abc"";
        String response = template.requestBody(""http://localhost:"" + PORT1 + ""/basePath/echo"", request, String.class);
        assertEquals(request, response);
    }

    // NOTE: passes with camel 2.20.1 and camel 2.15.2
    @Test
    public void testCallServiceWithoutBasePath() throws Exception {
        String request = ""abc"";
        String response = template.requestBody(""http://localhost:"" + PORT1 + ""/echo"", request, String.class);
        assertEquals(request, response);
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""jetty:http://localhost:"" + PORT1 + ""/?matchOnUriPrefix=true"")
                        .to(""cxfbean:echoService"");

                from(""jetty:http://localhost:"" + PORT1 + ""/basePath/?matchOnUriPrefix=true"")
                        .to(""cxfbean:echoService"");
            }
        };
    }

    @Override
    protected JndiRegistry createRegistry() throws Exception {
        JndiRegistry registry = super.createRegistry();
        registry.bind(""echoService"", new EchoService());
        return registry;
    }

    @Path(""echo"")
    public class EchoService {
        @POST
        public String echo(String request) {
            return request;
        }
    }
}
{code}
kmackowiak:1515569720:2018-01-10T15:35:20.494+0000:1515571097:2018-01-10T15:58:17.727+0000:I've attached a patch for version 2.20.x which contains a test and fix for this bug.
davsclaus:1515651930:2018-01-11T14:25:30.905+0000:1515651930:2018-01-11T14:25:30.905+0000:Thanks for the patch. I added a fix for https as well."
0,CAMEL-10164,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-07-20 19:39:42+00:00,2016-09-05 14:33:18+00:00,"The idea is to allow to call a rest endpoint where you specify the swagger api the service is based upon. Then in the endpoint you select the verb/path to call. Then because of the swagger api we are able to validate and know if the payload is validate before calling the service.


This can be a facade for the actual http component that does the call. So in other words its like the to for the rest-dsl.","davsclaus:1472181964:2016-08-26T11:26:04.220+0000:1472181982:2016-08-26T11:26:22.619+0000:Have improved the rest-dsl to allow producer side also, so you can do 
{code}
.to(""rest:foo/{bar}"")
{code}
 and call a rest service from Camel.

Its not baked into the rest-dsl which is for hosting REST services in Camel. But it has a nice facade by just using rest endpoint and the actual http component you can chose among the many of them.

You can then also attach an swagger api-doc to the rest and it will use camel-swagger-java to parse the api doc and validate that the rest uri is valid and that the exchange content is valid also to get validation out of the box baked in.

 
davsclaus:1472182100:2016-08-26T11:28:20.451+0000:1472198666:2016-08-26T16:04:26.354+0000:The following components support rest producer

- jetty
- netty4-http
- restlet
- undertow
- http
- http4

Also outstanding is 
- add support for xml/json binding as we have on the consumer side
- configuration from rest-dsl configuration for component/endpoint properties, and to add a producer properties
- allow to specify the host directly in the rest uri"
0,CAMEL-10163,Task,Minor,2.18.0,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-07-20 18:13:23+00:00,2016-07-20 18:50:50+00:00,"The label=filter should be label=filter,consumer so they are assigned to the consumer side.",
0,CAMEL-10162,Bug,Minor,2.17.2,2.18.0,"
None
",Resolved,Won't Fix,2.18.0,Claus Ibsen,anand kadu,0,2,2016-07-20 13:51:04+00:00,2016-08-20 13:42:44+00:00,I am extending my testcase from AbstractCamelTestNGSpringContextTests  and annotate it with @ContextConfiguration with JavaConfig class but it is unable to load it. It by default search for testclass-context.xml.,"davsclaus:1469401233:2016-07-25T07:00:33.980+0000:1469401233:2016-07-25T07:00:33.980+0000:I suggest to use JUnit instead of TestNG. That is much more widely in use.
davsclaus:1471671764:2016-08-20T13:42:44.136+0000:1471671764:2016-08-20T13:42:44.136+0000:testng is deprecated"
0,CAMEL-10161,Bug,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Doug Tung,0,2,2016-07-20 06:18:32+00:00,2016-07-22 03:47:31+00:00,"All headers are cleared when returning from 
to(""sql:<query>?outputType=StreamList"")","dwtung:1468966786:2016-07-20T06:19:46.279+0000:1468966786:2016-07-20T06:19:46.279+0000:working on a patch
githubbot:1468968402:2016-07-20T06:46:42.025+0000:1468968402:2016-07-20T06:46:42.025+0000:GitHub user drsquidop opened a pull request:

    https://github.com/apache/camel/pull/1082

    CAMEL-10161 Passthrough headers for outputType=StreamList

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/drsquidop/camel CAMEL-10161

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1082.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1082
    
----
commit b233564c22fb2b2aefbf2224b56bc2a078c9f81a
Author: Doug Tung <dwtung@isg.la>
Date:   2016-07-20T06:44:43Z

    CAMEL-10161 Passthrough headers for outputType=StreamList

----

githubbot:1469130451:2016-07-22T03:47:31.869+0000:1469130451:2016-07-22T03:47:31.869+0000:Github user drsquidop closed the pull request at:

    https://github.com/apache/camel/pull/1082
"
0,CAMEL-10160,New Feature,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Tomohisa Igarashi,James Strachan,0,3,2016-07-19 20:42:54+00:00,2017-04-13 06:55:31+00:00,"see the docs on how to do it:
https://github.com/cloudbees/zendesk-java-client/blob/master/README.md


so we can create Zendesk issues via a camel route","githubbot:1489694357:2017-03-17T03:59:17.355+0000:1489694357:2017-03-17T03:59:17.355+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1547

    CAMEL-10160 create a zendesk endpoint for creating new issues

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10160

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1547.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1547
    
----
commit 181753ff9f05a467475a2ffebca92ebf03dfc480
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-11-21T02:54:38Z

    CAMEL-10160 create a zendesk endpoint for creating new issues

----

githubbot:1489889488:2017-03-19T10:11:28.374+0000:1489889488:2017-03-19T10:11:28.374+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1547

githubbot:1492014828:2017-04-13T00:33:48.758+0000:1492014828:2017-04-13T00:33:48.758+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1622

    CAMEL-10160 Added zendesk components to the kit

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10160-dist

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1622.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1622
    
----
commit 819740b5ff5d6c180fecfe04246a6e78a51f1983
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2017-04-13T00:32:12Z

    CAMEL-10160 Added zendesk components to the kit

----

githubbot:1492037731:2017-04-13T06:55:31.594+0000:1492037731:2017-04-13T06:55:31.594+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1622
"
0,CAMEL-10159,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,James Strachan,0,1,2016-07-19 20:33:14+00:00,2016-07-21 09:33:34+00:00,"it'd be great to be able to create a new github issue, just like we can create commits / pullRequests etc",
0,CAMEL-10158,Improvement,Minor,2.17.2,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Siddharth Sharma,0,2,2016-07-19 20:15:18+00:00,2016-07-20 15:39:45+00:00,"Need support to tag workflow execution in AWS SWF. com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions supports adding List<String> to any workflow execution. 


Enhance CamelSWFWorkflowClient to use List<String> from incoming  Exchange headers before starting a workflow execution","githubbot:1468930888:2016-07-19T20:21:28.989+0000:1468930888:2016-07-19T20:21:28.989+0000:GitHub user ssharma opened a pull request:

    https://github.com/apache/camel/pull/1081

    https://issues.apache.org/jira/browse/CAMEL-10158

    Support to add tags to workflow execution in camel-aws component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ssharma/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1081.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1081
    
----
commit 9ace4ac9d128fad472fbb7d760eaf97d9a722a80
Author: siddharth.sharma <siddharth.sharma@jobvite-inc.com>
Date:   2016-07-19T20:19:32Z

    https://issues.apache.org/jira/browse/CAMEL-10158
    
    Support to add tags to workflow execution in camel-aws component

----

githubbot:1469000385:2016-07-20T15:39:45.528+0000:1469000385:2016-07-20T15:39:45.528+0000:Github user ssharma closed the pull request at:

    https://github.com/apache/camel/pull/1081
"
0,CAMEL-10157,Bug,Minor,"2.16.3, 2.17.2, 2.18.0","2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Andrea Cosentino,Oliver Holzmann,0,2,2016-07-19 11:04:12+00:00,2016-07-20 12:03:19+00:00,"Value of KafkaConstants.KEY = ""kafka.CONTENT_TYPE"" and KafkaConstants.PARTITION = ""kafka.EXCHANGE_NAME"" should match their variable name.



    public static final String PARTITION = ""kafka.PARTITION"";
    public static final String KEY = ""kafka.KEY"";",acosentino:1468987399:2016-07-20T12:03:19.582+0000:1468987399:2016-07-20T12:03:19.582+0000:Thanks for spotting this out [~OHolzma] :-)
0,CAMEL-10156,Improvement,Minor,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Tomáš Záluský,0,2,2016-07-18 14:44:30+00:00,2016-07-26 11:07:17+00:00,"I have route definition with following BeanProcessor call:



<bean ref=""service"" method=""method(${header.foo},${header.hoo}))"" />




Note syntax error at the end - one more right parenthesis.
Parameters foo and hoo are present in exchange headers.


In Camel 2.17.1, method is invoked with (null,null) because the parameters are not recognized in ObjectHelper.betweenOuterPair method.


In Camel 2.14.1 (from which we migrated recently), extra parenthesis is ignored and parameters are parsed correctly in ObjectHelper.between method.


I will certainly fix my syntax error, though I would really appreciate either 2.14.1-behavior or rather fail fast just on route construction during Spring webapp initialization.


Thanks!","davsclaus:1469429117:2016-07-25T14:45:17.196+0000:1469429117:2016-07-25T14:45:17.196+0000:Try with 2.17.2
davsclaus:1469502437:2016-07-26T11:07:17.683+0000:1469502437:2016-07-26T11:07:17.683+0000:From 2.18 onwards there is a better validation taking place"
0,CAMEL-10155,Bug,Major,2.17.1,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,john,0,2,2016-07-18 13:22:06+00:00,2016-07-25 15:16:57+00:00,"Due to the convoluted way reslet handles headers (they put headers inside the ""org.restlet.http.headers"") header, they are net getting filtered correctly.  


Just to add more details, this is a problem if you make 2 consecutive restlet request, because the headers from the first response will get sent to the next request without being filtered.  And if transfer-encoding is set, it can break things.


PR:
https://github.com/apache/camel/pull/1080","transamericamoon:1468822023:2016-07-18T14:07:03.358+0000:1468822023:2016-07-18T14:07:03.358+0000:https://github.com/apache/camel/pull/1080
davsclaus:1469431016:2016-07-25T15:16:56.895+0000:1469431016:2016-07-25T15:16:56.895+0000:Thanks for the PR"
0,CAMEL-10154,Bug,Critical,2.17.2,,"

sql

",Resolved,Duplicate,None,Unassigned,Fabrizio Spataro,0,2,2016-07-18 08:42:57+00:00,2016-07-18 09:17:39+00:00,"Hello,


I am using camel-sql component with IN dynamic parameter and found a bug with a query with more parameters.


Summary, in my follow code i use 3 headers: user, company and MyRoles. SQLComponent not found all my headers.
If i change my query using ONLY MyRoles header it is go fine!!!


My Code is:



   <setHeader headerName=""CamelSqlQuery"">
	<constant>SELECT * FROM role where user = :?user and company = :?company and role IN (:?in:MyRoles)</constant>
   </setHeader>
   <to uri=""sql://MS?dataSource=mysql"" />




Error:



Caused by: java.sql.SQLException: Number of parameters mismatch. Expected: 3, was: 1
	at org.apache.camel.component.sql.DefaultSqlPrepareStatementStrategy.populateStatement(DefaultSqlPrepareStatementStrategy.java:153)
	at org.apache.camel.component.sql.SqlProducer$2.doInPreparedStatement(SqlProducer.java:137)
	at org.apache.camel.component.sql.SqlProducer$2.doInPreparedStatement(SqlProducer.java:107)
	at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:629)
	... 79 more
, Out: null: 
]","acosentino:1468804054:2016-07-18T09:07:34.074+0000:1468804054:2016-07-18T09:07:34.074+0000:This is already solved in:

https://issues.apache.org/jira/browse/CAMEL-10151
fabryprog:1468804659:2016-07-18T09:17:39.386+0000:1468804659:2016-07-18T09:17:39.386+0000:Thanks a lot!"
0,CAMEL-10153,Bug,Major,2.17.2,2.17.3,"
None
",Resolved,Fixed,2.17.3,Unassigned,Xilai Dai,0,3,2016-07-18 06:14:14+00:00,2016-08-20 13:44:18+00:00,"Camel 2.17.x upgraded spring version to 4.x in most of the components. but for camel-cxf component, it still has to use spring-dm and spring version 3.x, the spring version range in the Import-Package should keep [3.2,4), not [4.1,5).


Now the ERROR will happen when install camel-cxf feature into karaf container (in case of both Spring 4.x and Spring 3.x are installed in the container)



21:44:41,652 | ERROR | pool-1-thread-1 | al.service.BootFeaturesInstaller 128 | 9 - org.apache.karaf.features.core - 4.0.5 | Error installing boot features
org.osgi.service.resolver.ResolutionException: Uses constraint violation. Unable to resolve resource org.apache.camel.camel-cxf [org.apache.camel.camel-cxf/2.17.2] because it is exposed to package 'org.springframework.beans' from resources org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/4.1.7.RELEASE_2] and org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/3.2.14.RELEASE_1] via two dependency chains.

Chain 1:
org.apache.camel.camel-cxf [org.apache.camel.camel-cxf/2.17.2]
import: (&(osgi.wiring.package=org.springframework.beans)(version>=4.1.0)(!(version>=5.0.0)))

export: osgi.wiring.package: org.springframework.beans
org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/4.1.7.RELEASE_2]

Chain 2:
org.apache.camel.camel-cxf [org.apache.camel.camel-cxf/2.17.2]
import: (&(osgi.wiring.package=org.apache.camel.spring)(version>=2.17.0)(!(version>=2.18.0)))

export: osgi.wiring.package=org.apache.camel.spring; uses:=org.springframework.beans
org.apache.camel.camel-spring [org.apache.camel.camel-spring/2.17.2]
import: (&(osgi.wiring.package=org.springframework.beans)(version>=3.2.0)(!(version>=4.0.0)))

export: osgi.wiring.package: org.springframework.beans
org.apache.servicemix.bundles.spring-beans [org.apache.servicemix.bundles.spring-beans/3.2.14.RELEASE_1]
at org.apache.felix.resolver.ResolutionError.toException(ResolutionError.java:42)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:404)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:158)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:216)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:263)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1152)[9:org.apache.karaf.features.core:4.0.5]
at org.apache.karaf.features.internal.service.FeaturesServiceImpl$1.call(FeaturesServiceImpl.java:1048)[9:org.apache.karaf.features.core:4.0.5]
at java.util.concurrent.FutureTask.run(FutureTask.java:266)[:1.8.0_91]
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)[:1.8.0_91]
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)[:1.8.0_91]
at java.lang.Thread.run(Thread.java:745)[:1.8.0_91]




To fix it, make change to the pom.xml



......
org.springframework*;version=""${spring-dm-version-range}"";resolution:=optional,
......","cschneider:1468899795:2016-07-19T11:43:15.317+0000:1468899795:2016-07-19T11:43:15.317+0000:Looks like in master the spring version for spring-dm is already extended and a separate spring-dm module is extracted. 

So I think it makes sense to limit the camel-cxf spring version to reflect the camel-spring limitations like you propose in the description. For later camel version we then seem to have a path to work with higher spring versions."
0,CAMEL-10152,Improvement,Major,2.17.2,,"
None
",Resolved,Duplicate,None,Unassigned,Kumar Abhinav,1,3,2016-07-18 01:03:32+00:00,2022-09-02 09:19:59+00:00,"Similar to CAMEL-10065, support for batching and parallel processing in producer, it would be nice to have the parallel consumption of messages in consumer.


Polling in consumer, fetches messages in batches, and camel-kafka component forces it to consume messages one at a time. Bunching up the messages in a list, and sending them in batch to the processor would let camel listeners scale up by adding parallel consumption.","davsclaus:1488543767:2017-03-03T20:22:47.710+0000:1488543767:2017-03-03T20:22:47.710+0000:Yeah either we can have some way of setting a batch size to consume in X sizes.

You can also use aggregatator EIP and have it batch stuff but then you do have a hand off between consumer -> aggregagator."
0,CAMEL-10151,Bug,Major,2.17.2,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-07-16 07:33:18+00:00,2016-07-16 07:36:59+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-sql-IN-query-number-of-parameters-mismatch-tp5785054.html",
0,CAMEL-10150,Bug,Minor,2.17.2,"2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-07-15 13:17:05+00:00,2016-07-18 11:07:01+00:00,No Desc,
0,CAMEL-10149,Bug,Minor,None,"2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-07-15 08:18:49+00:00,2016-07-15 09:02:01+00:00,"Some sftp daemons like proFtpd close the connection when they received an ignored package.


We can use sendKeepAliveMsg instead.",
0,CAMEL-10148,Improvement,Minor,2.17.2,,"
None
",Resolved,Not A Problem,None,Andrea Cosentino,Andrea Cosentino,0,1,2016-07-14 12:46:19+00:00,2016-07-18 09:11:14+00:00,Actually only the default one is used (the exponential one). It would be great if we can allow to use custom policies.,acosentino:1468804274:2016-07-18T09:11:14.453+0000:1468804274:2016-07-18T09:11:14.453+0000:We can already put a Cluster bean in the registry with specific reconnection Policy.. So no need for another option
0,CAMEL-10147,Bug,Trivial,2.17.1,2.18.0,"

performance

",Resolved,Fixed,2.18.0,Stephan Siano,Stephan Siano,0,1,2016-07-14 12:09:55+00:00,2016-07-15 06:57:02+00:00,"If a route contains a large expressen (a few MB) and an error occurs the message history feature will take a very long time.


The following code is a slightly modified unit test from camel-core (the only change is the String used in the constant expression).



import org.apache.camel.CamelExecutionException;
import org.apache.camel.ContextTestSupport;
import org.apache.camel.builder.RouteBuilder;

/**
 * @version 
 */
public class SedaInOutWithErrorTest extends ContextTestSupport {

    public void testInOutWithError() throws Exception {
        getMockEndpoint(""mock:result"").expectedMessageCount(0);

        try {
            template.requestBody(""direct:start"", ""Hello World"", String.class);
            fail(""Should have thrown an exception"");
        } catch (CamelExecutionException e) {
            assertIsInstanceOf(IllegalArgumentException.class, e.getCause());
            assertEquals(""Damn I cannot do this"", e.getCause().getMessage());
        }

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                StringBuilder sb = new StringBuilder();
                sb.append(""Something "");
                for (int i=0; i<1000000; i++) {
                    sb.append(""very "");
                }
                sb.append(""long"");
                
                from(""direct:start"").to(""seda:foo"");

                from(""seda:foo"").transform(constant(sb.toString()))
                    .throwException(new IllegalArgumentException(""Damn I cannot do this""))
                    .to(""mock:result"");
            }
        };
    }
}




This test will set the body to a 5MB test and then run into an error. This will run for a very long time, because MessageHelper.doDumpMessageHistoryStacktrace() will first run a URISupport.sanitizeUri() on the expression and then cut it off to 78 characters.


If we cut the expression of (e.g. to 100 characters) before doing the sanitizeUri() this will run much faster in this case (and not slower for smaller expressions).",
0,CAMEL-10146,Bug,Major,"2.15.5, 2.17.2",,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Stefano Rocca,0,2,2016-07-14 09:30:51+00:00,2016-07-19 11:22:57+00:00,"Consider this simple route:


<route id=""leak"">
	<from uri=""file:///c:/temp/leak/in?move=.done&moveFailed=.error""/>
	<setHeader headerName=""dummy""><groovy>""dummy"" + System.currentTimeMillis()</groovy></setHeader>
	<to uri=""file:///c:/temp/leak/out""/>
</route>


each time I put a file in c:/temp/leak/in, the number of instances of org.codehaus.groovy.control.CompilerConfiguration increases by one.
Since each CompilerConfiguration, because of this other issue GROOVY-7884, is created anew and contains a BufferedWriter which in turn contains two buffers of 8192 elements (one char[8192] and one byte[8192]), the heap is soon consumed by useless buffers...
Including camel-groovy in the dependencies the problem disappears.","davsclaus:1468540494:2016-07-15T07:54:54.385+0000:1468540494:2016-07-15T07:54:54.385+0000:Can you test with latest release 2.17.2
rste79:1468800068:2016-07-18T08:01:08.041+0000:1468800068:2016-07-18T08:01:08.041+0000:Hi Claus,
I confirm that the bug affects also the latest release.
The workaround is the same: including camel-groovy the problem disappears.
If you want to check, just search the number of instances of CompilerConfiguration with and without camel-groovy. With camel-groovy I always get one instance, without camel-groovy I get one instance for each <groovy> tag in the routes (i.e. just after the initialization of the routes) and then one for each time an exchange is processed by a <groovy> tag.
davsclaus:1468893711:2016-07-19T10:01:51.908+0000:1468893711:2016-07-19T10:01:51.908+0000:Ah okay I didnt really spot that you are using groovy without camel-groovy. That is what you should really use the Camel component for the language.

If you dont then you likely end up using some java scripting api that is not optimized / working. So add the camel-groovy dependency.
rste79:1468897068:2016-07-19T10:57:48.871+0000:1468897068:2016-07-19T10:57:48.871+0000:Hi Claus,
I think that, to really solve this issue, this page

http://camel.apache.org/groovy.html

should be updated: the last paragraph should mention camel-groovy and not camel-script.
Furthermore the support for groovy should be removed from camel-script because of groovy's java scripting api implementation.
davsclaus:1468898577:2016-07-19T11:22:57.265+0000:1468898577:2016-07-19T11:22:57.265+0000:Good idea I added a note to that page"
0,CAMEL-10145,Bug,Minor,2.17.2,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-07-14 07:59:09+00:00,2016-07-14 08:53:50+00:00,"Using the remote Path to git Repository is causing errors during Pull and Push operations.


I'll add a new option remoteName in GitEndpoint to avoid this situation.",
0,CAMEL-10144,Bug,Major,"2.17.2, 2.18.0","2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,2,2016-07-14 02:06:04+00:00,2016-07-27 20:44:45+00:00,"Salesforce adds fields to org.apache.camel.component.salesforce.api.dto.RestResources even after an API has been released. This needs to be handled in the component by ignoring unknown properties for that type. 


XStream doesn't support doing this for an single DTO, but it can be done for all types by using XStream.ignoreUknownProperties(). It will make it ignore all unknown properties for all inbuilt DTOs as wells user generated ones. But since the XML payload is less popular, hopefully this behavior won't be an issue.","dhirajsb:1468435217:2016-07-14T02:40:17.330+0000:1468435217:2016-07-14T02:40:17.330+0000:This is a generic problem with Salesforce, so the solution is to follow the REST principle of ignoring unknown fields altogether. This behaviour will be common to JSON and XML and will avoid future issues where running code breaks in production because Salesforce decided to add fields from new APIs in responses to older API versions. 
dhirajsb:1468449684:2016-07-14T06:41:24.055+0000:1468449684:2016-07-14T06:41:24.055+0000:Fixed on branches master and camel-2.17.x
ssatguru:1469513678:2016-07-26T14:14:38.732+0000:1469513678:2016-07-26T14:14:38.732+0000:The fix doesn't seem to be working. 

As part if this fix the annotation 
@JsonIgnoreProperties(ignoreUnknown = true) 
was added to the base class  ""AbstractDTOBase"" 

https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/api/dto/AbstractDTOBase.java#L31

Unfortunately this annotation  has not been defined as ""@Inherited"" and  thus is not inherited by the sub classes. 

Maybe this annotation should be added to ""sobject-pojo.vm"" so that it gets added to each of the generated classes 

https://github.com/apache/camel/blob/master/components/camel-salesforce/camel-salesforce-maven-plugin/src/main/resources/sobject-pojo.vm
dhirajsb:1469526837:2016-07-26T17:53:57.255+0000:1469526837:2016-07-26T17:53:57.255+0000:Interesting point about the {{@Inherited}} annotation, but the effect seems to be that it's being inherited. Try removing the annotation from {{AbstractDTOBase}} and running the test {{RestApiIntegrationTest.testGetResources}}, it should fail without the annotation on the base class. This is on both _master_ and _camel-2.17-x_ branches even though they use different version of jackson. 
ssatguru:1469534176:2016-07-26T19:56:16.181+0000:1469534176:2016-07-26T19:56:16.181+0000:Never looked into RestResources. Let me check why that works. I suspect something to do with XStream VS Jackson processing
Now what I did look into and tested, was user generated DTO . So, for example, if I create a DTO for say Account sObject and then somebody, later on, adds a new,  say, a custom field, to Account, the deserialization fails. If the annotation is added to the generated class rather then the base class, deserialization  passes.
dhirajsb:1469540452:2016-07-26T21:40:52.191+0000:1469540452:2016-07-26T21:40:52.191+0000:I ran the test {{RestApiIntegrationTest.testGetBlobField}} after commenting out the field [isBodySearchable|https://github.com/apache/camel/blob/camel-2.17.x/components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/dto/generated/Document.java#L201-L213] and it ran without any errors. If the annotation didn't work in the base class, the missing field would have caused the test to fail. BTW, the field does return a non-default {{true}} value when it's present in the class. 
Try your test by commenting out an existing field from the generated Account DTO. Not sure why that case would be different from when a new Salesforce field is added, but give it a shot. 
ssatguru:1469623485:2016-07-27T20:44:45.877+0000:1469623485:2016-07-27T20:44:45.877+0000:You are right.
Its working as expected.
Not sure why though  :(
Please ignore

"
0,CAMEL-10143,Bug,Major,"2.17.1, 2.18.0","2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2016-07-13 21:41:39+00:00,2016-07-14 06:42:32+00:00,"This field was not a valid date time field in older versions of the Salesforce APIs, hence it was left as String. 
It should now be converted into DateTime to work with latest Salesforce API and be mappable to dates in Hibernate for e.g.","dhirajsb:1468449752:2016-07-14T06:42:32.845+0000:1468449752:2016-07-14T06:42:32.845+0000:Fixed on branches master and camel-2.17.x, the field is now of type DateTime. "
0,CAMEL-10142,Bug,Minor,2.17.1,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,Colin Hartley,0,1,2016-07-13 15:07:11+00:00,2016-07-15 13:21:47+00:00,"It appears that support for a named scheduled polling consumer is there, but you have to have at least one scheduler.xxx property set before it utilises it. e.g. 


I have this configured: 
<bean id=""nps-scheduler"" class=""org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler"">
    <property name=""cron"" value=""0 * * * * ?""/>
</bean>


In my route, I reference it like this, but it doesn't use it: 
<from uri=""ftp://ftp.somewhere.com/path?scheduler=nps-scheduler"" />


If I add a scheduler property, it then uses it, e.g. 
<from uri=""ftp://ftp.somewhere.com/path?scheduler=nps-scheduler&scheduler.triggerId=?"" />


Discussion with Claus Ibsen here: http://camel.465427.n5.nabble.com/ScheduledPollingConsumer-properties-td5785071.html",
0,CAMEL-10141,Test,Major,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,John Poth,Claus Ibsen,0,4,2016-07-13 12:40:10+00:00,2017-10-25 14:27:37+00:00,To find out early if we have problems with Java 9 and Apache Camel.,"githubbot:1486980701:2017-02-13T18:11:41.020+0000:1486980701:2017-02-13T18:11:41.020+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1460

    Support for java 9 

    https://issues.apache.org/jira/browse/CAMEL-10141
    
    This PR adds support for java 9 up to camel-core in the reactor build order. I've tested with the latest java 9 (Build 156).
    
    I'll squash the commits once approved (left them for clarity).
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1460.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1460
    
----
commit 2a7519bd264db12ce5535b94dca5422f614c2c47
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-09T11:18:21Z

    CAMEL-10141 Tools.jar is no longer present in java 9

commit 3ef980bb0658223fdc8c6a0c0a97b15b08fde9d4
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-09T11:34:11Z

    CAMEL-10141 Upgrade maven jar plugin for java 9 support

commit 0cc95d885fdfd99f3acff450127d881fc04a4684
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-09T12:20:52Z

    CAMEL-10141 The inal plugin isn't compatible with java 9 and isn't unmaintained so lets remove it and rely on the rat plugin instead

commit db07ce88dd86631cfa46c8040904ae199725f013
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-10T17:44:51Z

    CAMEL-10141 Lets build camel-core and have some unit tests pass

commit a1b8ca2e3428acb92188ce95bc875496578a004c
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-13T15:58:47Z

    CAMEL-10141 Lets pass all unit tests in camel-core on java 9

----

davsclaus:1487030127:2017-02-14T07:55:27.740+0000:1487030127:2017-02-14T07:55:27.740+0000:It would be a good idea to add a CI job that uses JDK9 so we can have it test the source code how it compiles / tests on Java 9.
https://builds.apache.org/view/A-D/view/Camel/
jpoth:1487042024:2017-02-14T11:13:44.995+0000:1487042024:2017-02-14T11:13:44.995+0000:Hi [~davsclaus] I'd be happy to set that up unfortunately I don't have the rights to do so.
davsclaus:1487042764:2017-02-14T11:26:04.985+0000:1487042764:2017-02-14T11:26:04.985+0000:I setup a java 9 job that builds the project without testing.
https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/

Then we can add a build that does testing as well later. At first we need the CI server to be able to build  the code first.
davsclaus:1487043710:2017-02-14T11:41:50.498+0000:1487043710:2017-02-14T11:41:50.498+0000:Merged your PR and kicked off the build
https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.notest.java9/1/
davsclaus:1487044675:2017-02-14T11:57:55.392+0000:1487044675:2017-02-14T11:57:55.392+0000:There is some weird maven error at
https://builds.apache.org/job/Camel.trunk.notest.java9/1/consoleText

The CI server is using Maven 3.3.3.

I am using an older 3.2.5
davsclaus:/Users/davsclaus/workspace/connectors (master)/$ mvn --version
Apache Maven 3.2.5 (12a6b3acb947671f09b81f49094c53f426d8cea1; 2014-12-14T18:29:23+01:00)
Maven home: /opt/apache-maven-3.2.5
davsclaus:1487045058:2017-02-14T12:04:18.649+0000:1487045058:2017-02-14T12:04:18.649+0000:John, what JDK 9 version did you use? The CI server are using JDK9 b156 with jigsaw
githubbot:1487046649:2017-02-14T12:30:49.649+0000:1487046649:2017-02-14T12:30:49.649+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1460

githubbot:1487048769:2017-02-14T13:06:09.021+0000:1487048769:2017-02-14T13:06:09.021+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1465

    CAMEL-10141 Upgrade maven javadoc plugin for java 9 support

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1465.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1465
    
----
commit 2bb1a445cb3c59ddf1f52f5ccbc82032f7358c78
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-14T13:01:37Z

    CAMEL-10141 Upgrade maven javadoc plugin for java 9 support

----

jpoth:1487049000:2017-02-14T13:10:00.403+0000:1487049000:2017-02-14T13:10:00.403+0000:Hi [~davsclaus], I wasn't using the deploy profile when testing, if we want to use it we need to upgrade the maven javadoc plugin to 2.10.4, I just pushed a [PR|https://github.com/apache/camel/pull/1465]. The build with java 9 will still fail somewhere after camel-core. Maybe it's worth holding off merging this PR and wait until we can fully build the camel project with Java 9? Not sure. Cheers.
githubbot:1487068185:2017-02-14T18:29:45.425+0000:1487068185:2017-02-14T18:29:45.425+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1465

davsclaus:1487117731:2017-02-15T08:15:31.482+0000:1487117731:2017-02-15T08:15:31.482+0000:The CI server now builds on java 9 and it shows what failures we have. There are still problems. So there is more work needed to get it all building on Java 9.
githubbot:1487656990:2017-02-21T14:03:10.542+0000:1487656990:2017-02-21T14:03:10.542+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1481

    Camel 10141 have more projects build on JAVA 9

    https://issues.apache.org/jira/browse/CAMEL-10141
    
    This PR makes several modules build on JAVA 9 (see commit descriptions).
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1481.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1481
    
----
commit 3a040336de8bf8ddc4ab6ed59ad75caac1338463
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-20T10:01:11Z

    CAMEL-10141 make CXF code gen plugin work on JAVA 9

commit 894a5e4a04db7462748b14eaeae265cedab33c15
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-20T10:04:20Z

    CAMEL-10141 Tool.jar is no longer present in JAVA 9

commit 1cf8c7a47ea360ff9e5eab6e8279511d67b0cbd2
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-21T09:50:04Z

    CAMEL-10141 Make xsd schema generation via ant tasks work on Java 9

----

githubbot:1487665130:2017-02-21T16:18:50.229+0000:1487665130:2017-02-21T16:18:50.229+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1481

davsclaus:1487724332:2017-02-22T08:45:32.084+0000:1487724332:2017-02-22T08:45:32.084+0000:Thanks John for all the PRs. We are getting closer.

Now it seems we have trouble with groovy / scala / grape not building on Java 9.
githubbot:1488245569:2017-02-28T09:32:49.653+0000:1488245569:2017-02-28T09:32:49.653+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1496

    CAMEL-10141 skip camel-jibx build on java 9 as well

    https://issues.apache.org/jira/browse/CAMEL-10141
    
    We are skipping camel-jibx on JAVA 8 and it's failing on JAVA 9:
    
    ```
    [ERROR] Failed to execute goal org.jibx:maven-jibx-plugin:1.3.1:test-bind (default) on project camel-jibx: Superclass java.lang.Object of class org.jibx.runtime.Utility not found -> [Help 1]
    org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.jibx:maven-jibx-plugin:1.3.1:test-bind (default) on project camel-jibx: Superclass java.lang.Object of class org.jibx.runtime.Utility not found
    	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)
    	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
    	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
    	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)
    	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
    	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
    	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
    	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
    	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
    	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
    	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
    	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
    	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    	at java.base/java.lang.reflect.Method.invoke(Method.java:543)
    	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
    	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
    	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
    	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
    Caused by: org.apache.maven.plugin.MojoExecutionException: Superclass java.lang.Object of class org.jibx.runtime.Utility not found
    	at org.jibx.maven.AbstractBaseBindingMojo.compile(AbstractBaseBindingMojo.java:166)
    	at org.jibx.maven.AbstractBaseBindingMojo.execute(AbstractBaseBindingMojo.java:133)
    	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)
    	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)
    	... 20 more
    Caused by: java.lang.IllegalArgumentException: Superclass java.lang.Object of class org.jibx.runtime.Utility not found
    	at org.jibx.binding.def.StringConversion.<init>(StringConversion.java:163)
    	at org.jibx.binding.def.PrimitiveStringConversion.<init>(PrimitiveStringConversion.java:143)
    	at org.jibx.binding.def.BindingDefinition.<clinit>(BindingDefinition.java:92)
    	at org.jibx.binding.Compile.compile(Compile.java:210)
    	at org.jibx.maven.AbstractBaseBindingMojo.compile(AbstractBaseBindingMojo.java:163)
    	... 23 more
    ```

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1496.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1496
    
----
commit 1ce477582b8de02d5408a041d4106fefbbca2a66
Author: jpoth <poth.john@gmail.com>
Date:   2017-02-27T16:49:02Z

    CAMEL-10141 skip camel-jibx buid on java 9 as well

----

githubbot:1488248417:2017-02-28T10:20:17.288+0000:1488248417:2017-02-28T10:20:17.288+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1496

githubbot:1488443001:2017-03-02T16:23:21.439+0000:1488443001:2017-03-02T16:23:21.439+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1503

    Camel 10141 This builds Camel on Java 9

    https://issues.apache.org/jira/browse/CAMEL-10141
    
    This builds Camel on Java 9. Before building you must set
    ```
    MAVEN_OPTS=""--add-modules java.activation --add-exports=java.xml/com.sun.org.apache.xml.internal.resolver.tools=ALL-UNNAMED --add-exports=java.xml/com.sun.org.apache.xml.internal.resolver=ALL-UNNAMED --add-opens java.base/java.text=ALL-UNNAMED --add-opens java.desktop/java.awt.font=ALL-UNNAMED --add-opens java.base/java.util=ALL-UNNAMED  --add-opens java.base/java.lang=ALL-UNNAMED --add-opens java.base/java.lang.reflect=ALL-UNNAMED --add-opens java.base/java.util.regex=ALL-UNNAMED --add-opens java.base/java.net=ALL-UNNAMED""
    ```
    
    I've added some scripts under buildingtools for convenience.
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1503.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1503
    
----

----

githubbot:1488450044:2017-03-02T18:20:44.634+0000:1488450044:2017-03-02T18:20:44.634+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1503

davsclaus:1488500764:2017-03-03T08:26:04.782+0000:1488500764:2017-03-03T08:26:04.782+0000:Almost there the spring boot starter of camel-groovy fails due camel-groovy is skipped in Java 9 I think.

As the groovy dsl is being deprecated we may want to separate them so camel-groovy is just groovy and camel-groovy-dsl is the deprecated dsl that requires the groovy compiler.
davsclaus:1488504963:2017-03-03T09:36:03.683+0000:1488504963:2017-03-03T09:36:03.683+0000:Have moved the dsl out of camel-groovy so java 9 should be able to build that part now
jpoth:1488521718:2017-03-03T14:15:18.705+0000:1488521718:2017-03-03T14:15:18.705+0000:Awesome :) Now that you mention that, I'm guessing the camel scala starter will fail too
davsclaus:1488528256:2017-03-03T16:04:16.221+0000:1488528256:2017-03-03T16:04:16.221+0000:Ah yeah lets remove the SB starter module as it brings no value and its deprecated also
davsclaus:1488585196:2017-03-04T07:53:16.518+0000:1488585196:2017-03-04T07:53:16.518+0000:Yay the CI server can now build the code with java 9
https://builds.apache.org/job/Camel.trunk.notest.java9/

Next task is to add a job that runs the full test as well.
davsclaus:1488586376:2017-03-04T08:12:56.488+0000:1488586376:2017-03-04T08:12:56.488+0000:Setup a java9 full test job
https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.java9/
jpoth:1488761530:2017-03-06T08:52:10.103+0000:1488761530:2017-03-06T08:52:10.103+0000:That's awesome :-) I can take a look at the remaining failures
githubbot:1489482117:2017-03-14T17:01:57.620+0000:1489482117:2017-03-14T17:01:57.620+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1540

    Camel 10141

    https://issues.apache.org/jira/browse/CAMEL-10141.
    
    This PR makes more modules pass their tests in Java 9.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1540.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1540
    
----
commit 65d7932282e99983717b1f5b9b661d2e19fc6e7e
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-14T13:35:36Z

    CAMEL-10141: make camel-netty unit tests pass on Java 9

commit cad3c9cd1f59f322097bec41ed3607efb3cc8a46
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-14T13:36:04Z

    CAMEL-10141: make camel-spring-boot unit tests pass on Java 9

commit e9aec2b338db217047aaf9fd86c9f0b6b2620d3c
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-14T13:36:21Z

    CAMEL-10141: make camel-bindy unit tests pass on Java 9

commit 16a62442542f5706f4830d90caca3034dbe67847
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-14T13:36:56Z

    CAMEL-10141: move compile settings for Java 9 to camel-parent

commit 19011076aab5789e6ebb54033eb6c9cef9e843f1
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-14T15:17:35Z

    CAMEL-10141: make camel-sql unit tests pass on Java 9

commit 968fd2b17db562d5094706a6baa2dcf959ee7a69
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-14T15:23:37Z

    CAMEL-10141: make camel-elsql unit tests pass on Java 9

----

githubbot:1489483708:2017-03-14T17:28:28.730+0000:1489483708:2017-03-14T17:28:28.730+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1540

githubbot:1489559608:2017-03-15T14:33:28.419+0000:1489559608:2017-03-15T14:33:28.419+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1542

    Camel-10141 Make more Java 9 tests pass

    https://issues.apache.org/jira/browse/CAMEL-10141
    
    Make more Java 9 tests pass

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1542.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1542
    
----
commit f6cc6a3cfdbdf1e4566ea2d79f8a78be2fb4092a
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T09:24:47Z

    CAMEL-10141: make camel-hl7 unit tests pass on Java 9

commit 1835ad52794d9ddcb9f48ae6aa3a1d46c424c42e
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T11:05:12Z

    CAMEL-10141: make camel-mail unit tests pass on Java 9

commit 60036eaa1a1a9025a5cba529bea293f1e323a775
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T11:20:57Z

    CAMEL-10141: make camel-soap unit tests pass on Java 9

commit cf62adadb990ee0766e00975be87b6c7668f7f97
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T12:14:40Z

    CAMEL-10141: make camel-spring-cloud unit tests pass on Java 9

commit cc31fe41dde9f12adafdbb72b6ac43e5f9cb5592
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T12:17:38Z

    CAMEL-10141: make camel-spring-cloud-netflix unit tests pass on Java 9

commit 8c654e023a43bed6a482852d533f6a1cd2f50508
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T12:21:15Z

    CAMEL-10141: make camel-syslog unit tests pass on Java 9

commit 57a2132bdd9cb7db67e137bc84f2f19d7543291a
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T14:00:10Z

    CAMEL-10141: make spring-boot starters unit tests pass on Java 9

commit c98e63d2032ac8fecd0cea43423af123edab0dab
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-15T14:17:10Z

    CAMEL-10141: make connector examples unit tests pass on Java 9

----

githubbot:1489561253:2017-03-15T15:00:53.510+0000:1489561253:2017-03-15T15:00:53.510+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1542

githubbot:1490574194:2017-03-27T08:23:14.445+0000:1490574194:2017-03-27T08:23:14.445+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1576

    Camel 10141

    https://issues.apache.org/jira/browse/CAMEL-10141
    
    This PR makes several modules's test run on Java 9. Remaining failures should be fixed by next [CXF upgrade](https://issues.apache.org/jira/browse/CXF-7270)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1576.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1576
    
----
commit 3cc7c9fe8fd1592aa49ea5e1593d3479295c5468
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T15:52:41Z

    CAMEL-10141: upgrade maven-scr-plugin for Java 9 support

commit 4901ae895a636f2b0f48e4cc3c04c586db7de8fc
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T15:54:00Z

    CAMEL-10141: make camel-ruby unit tests pass on Java 9

commit 13196a34f48ebeddd72f4525ca29daa350bb4545
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:01:06Z

    CAMEL-10141: make camel-archetype-scr unit tests pass on Java 9

commit 83dcfdc4d44421a93cce5a0966dc849ad1319088
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:02:06Z

    CAMEL-10141: make camel-blueprint integration tests pass on Java 9

commit 51e6899aadf5a95f1c3b1dc920b8fa83803fbc75
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:03:07Z

    CAMEL-10141: make camel-example-spring-boot tests pass on Java 9

commit 8b8f7a33fbf7a8a2fe8d6bc04cd0f58a71964554
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:03:33Z

    CAMEL-10141: make camel-example-reportincident tests pass on Java 9

commit bf309b6f297258e462707e783e69ff5e451f91b4
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:04:01Z

    CAMEL-10141: make camel-example-transformer-demo tests pass on Java 9

commit 6be7b68657c6c45e999174c233464b98356e226b
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:04:41Z

    CAMEL-10141: make camel-example-spring-boot-rest-jpa tests pass on Java 9

commit e1eadf58b5727729bc3c330f3aecf8f72f6fdfdf
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:05:01Z

    CAMEL-10141: make camel-example-validator-spring-boot tests pass on Java 9

commit 41a434999490afece696697b27d650d5b5f8516c
Author: jpoth <poth.john@gmail.com>
Date:   2017-03-24T16:08:19Z

    CAMEL-10141: add Java 9 flags to support the maven-war-plugin on Java 9 when building camel-example-reportincident module

----

githubbot:1490575900:2017-03-27T08:51:40.516+0000:1490575900:2017-03-27T08:51:40.516+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1576

githubbot:1492750414:2017-04-21T12:53:34.621+0000:1492750414:2017-04-21T12:53:34.621+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1653

    CAMEL-10141 upgrade to Java 9 build 165

    This PR makes more modules unit tests pass on the latest Java 9 build 165

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1653.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1653
    
----
commit 8f7c92b36156e1337a56fe1388ef40abad1f5d8d
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-18T18:27:19Z

    CAMEL-10141: make camel-test tests pass on Java 9

commit ecbd9ff2515a1f17c525ca6f594a627c6b18d4cd
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-20T17:14:00Z

    CAMEL-10141: make camel-example-rest-producer tests pass on Java 9

commit e37ef278e8169b5af49cd3114458ae9313e75e9d
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-21T10:11:45Z

    CAMEL-10141: skip opentracing tests on Java 9 until Byteman upgrade to 4.x

commit e79925e1ccb764541a0c0ff4b367cd049ccad96b
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-21T10:13:55Z

    CAMEL-10141: make camel-eip-documentation-enricher-maven-plugin tests pass on Java 9

commit 2f039df6ea133e570d42352ae9e6724f5f24c35a
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-21T12:47:06Z

    CAMEL-10141: make camel-testng tests pass on Java 9

commit e76424ef50b8670144690ad90ec43a769ed4a57e
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-21T12:47:26Z

    CAMEL-10141: make camel-test-spring tests pass on Java 9

commit 4d149be9c759394a5af53a3b648a917620d6e572
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-21T12:47:48Z

    CAMEL-10141: make camel-spring-javaconfig tests pass on Java 9

commit 8272be50d8caa2430a8ea106e87f2dd2f74388ac
Author: jpoth <poth.john@gmail.com>
Date:   2017-04-21T12:51:10Z

    CAMEL-10141: make camel-spring tests pass on Java 9. This required the use of Java's native shemagen instead of jaxb-xjc's embedded schemagen which doesn't work on Java 9

----

githubbot:1492751868:2017-04-21T13:17:48.407+0000:1492751868:2017-04-21T13:17:48.407+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1653

jpoth:1493957263:2017-05-05T12:07:43.376+0000:1493957263:2017-05-05T12:07:43.376+0000:Now that https://github.com/apache/camel/pull/1668 has been merged it'd be nice to have a green CI build :) It looks like the [builds|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.java9/] are failing because of some memory problems so we'd need to increase that and try out a new build and upgrade to Java 9 build 166 if needed.

Thanks!
davsclaus:1494219226:2017-05-08T12:53:46.542+0000:1494219226:2017-05-08T12:53:46.542+0000:JDK 9 b156 is the latest Apache CI have in their possible selections.

I bumped the MAVEN_OPTS memory from 3000 to 3500
davsclaus:1494219343:2017-05-08T12:55:43.760+0000:1494219343:2017-05-08T12:55:43.760+0000:There is this test error in camel-core

{code}
Failed

org.apache.camel.converter.IOConverterCharsetTest.testToInputStreamFileDirectByteDumpWithCharsetLatin1

Failing for the past 6 builds (Since Unstable#280 )
Took 12 ms.
add description
Error Message

both input streams deliver the same byte sequence
Stacktrace

junit.framework.AssertionFailedError: both input streams deliver the same byte sequence
	at org.apache.camel.converter.IOConverterCharsetTest.testToInputStreamFileDirectByteDumpWithCharsetLatin1(IOConverterCharsetTest.java:106)
{code}
githubbot:1494383041:2017-05-10T10:24:01.620+0000:1494383041:2017-05-10T10:24:01.620+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1681

    CAMEL-10141: make org.apache.camel.converter.IOConverterCharsetTest t…

    …ests pass on Java 9
    
    https://issues.apache.org/jira/browse/CAMEL-10141?focusedCommentId=16000689&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16000689
    
    Thanks!

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1681.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1681
    
----
commit 596f0f478eeeba98effb75290a606d5bb9e4a1b4
Author: jpoth <poth.john@gmail.com>
Date:   2017-05-10T10:22:15Z

    CAMEL-10141: make org.apache.camel.converter.IOConverterCharsetTest tests pass on Java 9

----

githubbot:1494385670:2017-05-10T11:07:50.767+0000:1494385670:2017-05-10T11:07:50.767+0000:GitHub user zregvart opened a pull request:

    https://github.com/apache/camel/pull/1682

    CAMEL-10141: make org.apache.camel.converter.IO...

    ...ConverterCharsetTest tests pass on Java 9
    
    Alternative implementation and test without using reflection.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/zregvart/camel CAMEL-10141

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1682.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1682
    
----
commit d6af3713d57fa00b47e211a0bcc74a8496181891
Author: Zoran Regvart <zregvart@apache.org>
Date:   2017-05-10T11:06:03Z

    CAMEL-10141: make org.apache.camel.converter.IO...
    
    ...ConverterCharsetTest tests pass on Java 9
    
    Alternative implementation and test without using reflection.

----

githubbot:1494385989:2017-05-10T11:13:09.646+0000:1494385989:2017-05-10T11:13:09.646+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1681

githubbot:1494386844:2017-05-10T11:27:24.534+0000:1494386844:2017-05-10T11:27:24.534+0000:Github user zregvart closed the pull request at:

    https://github.com/apache/camel/pull/1682

jpoth:1494810629:2017-05-15T09:10:29.219+0000:1494810629:2017-05-15T09:10:29.219+0000:CI build is [green|https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.java9/288/console]"
0,CAMEL-10140,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Claus Ibsen,0,3,2016-07-13 12:38:15+00:00,2016-09-08 15:43:09+00:00,"See if we can get a process with lambda style that has a type-safe message body type, so you can do something like



.process<Foo.class&gt;( f -> { f.doSomethingOnFoo(); ... })
.to(""direct:bar"");




And see if we can get a mini DSL for the process so you can also get access to header/exchange etc.



.process<Foo.class&gt;( f -> { 
   String golden = header(""golden"", String.class);
   f.doSomethingOnFoo(golden); 
})
.to(""direct:bar"");","lb:1473231222:2016-09-07T14:53:42.676+0000:1473231222:2016-09-07T14:53:42.676+0000:It may be nice to have a ProcessClause here to do seomething like

{code:java}
.process()
    .exchange(e -> ... ) // Not needed but for consistency
.process()
    .body(Foo.class, b -> b.doSomethingOnFoo())
.process()
    .message(m -> {
        String h = m.getHeader(""golden"", String.class);
        m.getBody(Foo.class).doSomething(h);
    }
{code}
lb:1473304761:2016-09-08T11:19:21.572+0000:1473304761:2016-09-08T11:19:21.572+0000:[~davsclaus] would you be so kind to have a look at [this commit|https://github.com/lburgazzoli/apache-camel/commit/25b9bc844a36b2628c7b7d66d53ef019f5850b27] ?
davsclaus:1473305966:2016-09-08T11:39:26.605+0000:1473305966:2016-09-08T11:39:26.605+0000:You dont need all those IN vs OUT methods, just body / message and work on the IN
lb:1473307870:2016-09-08T12:11:10.724+0000:1473307870:2016-09-08T12:11:10.724+0000:Done"
0,CAMEL-10139,Bug,Major,2.17.1,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Steve Storck,0,5,2016-07-13 10:35:21+00:00,2017-02-19 10:12:15+00:00,"The camel-undertow component does not seem to support multiple verbs for the same resource when using the rest dsl.


Rest DSL Example
rest(""/example"")
  .get(""{pathParamHere}"").to(""bean:exampleBean?method=handleGet"")
  .put(""{pathParamHere}"").to(""bean:exampleBean?method=handlePut"");




The above example will result in only the ""put"" verb working, and the ""get"" resource not found.","Steve973:1468416412:2016-07-13T21:26:52.839+0000:1468416412:2016-07-13T21:26:52.839+0000:It looks like the problem is in the UndertowRegistry class:
{code}
    public void registerConsumer(UndertowConsumer consumer) {
        UndertowEndpoint endpoint = consumer.getEndpoint();
        URI httpUri = endpoint.getHttpURI();
        if (host != null && !host.equals(httpUri.getHost())) {
            throw new IllegalArgumentException(""Cannot register UndertowConsumer on different host and same port: {}"" + host + "" "" + httpUri.getHost());
        } else {
            host = httpUri.getHost();
        }
        LOG.info(""Adding consumer to consumerRegistry: {}"", httpUri);
        consumersRegistry.put(endpoint.getEndpointUri(), consumer);
        if (sslContext != null && endpoint.getSslContext() != null) {
            throw new IllegalArgumentException(""Cannot register UndertowConsumer with different SSL config"");
        }
    }
{code}
When the same path/resource (as an endpoint uri) is added for different verbs, they are put into the registry with the same key.  Therefore, the last one wins, which is the behavior that I am seeing.
Steve973:1468418049:2016-07-13T21:54:09.291+0000:1468418049:2016-07-13T21:54:09.291+0000:[~davsclaus] If the registry is being populated with the URIs as the keys, how do we differentiate between different verbs?
Steve973:1468418240:2016-07-13T21:57:20.659+0000:1468418324:2016-07-13T21:58:44.453+0000:Here is my RouteBuilder configuration:
{code}
        restConfiguration()
                .component(""undertow"")
                .host(""localhost"").port(""8181"")
                .enableCORS(true);
        rest(""/timesheet"")
                .post(""/{timesheetId}"")
                .produces(MediaType.TEXT_PLAIN)
                .route()
                .bean(""timesheetService"", ""updateTimesheet"")
                .endRest()
                .get(""/{timesheetId}"")
                .produces(MediaType.TEXT_PLAIN)
                .route()
                .bean(""timesheetService"", ""getTimesheetById"");
{code}

Here is the relevant portion of the log when I start my wildfly-swarm deployment:
{code}
2016-07-13 17:01:46,730 INFO  [org.apache.camel.impl.converter.DefaultTypeConverter] (MSC service thread 1-8) Loaded 198 type converters
2016-07-13 17:01:46,743 INFO  [org.apache.camel.cdi.CdiCamelExtension] (MSC service thread 1-8) Camel CDI is starting Camel context [cdi-context]
2016-07-13 17:01:46,743 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Apache Camel 2.17.1 (CamelContext: cdi-context) is starting
2016-07-13 17:01:46,745 INFO  [org.apache.camel.management.ManagedManagementStrategy] (MSC service thread 1-8) JMX is enabled
2016-07-13 17:01:46,794 INFO  [org.wildfly.extension.camel] (MSC service thread 1-8) Camel context starting: cdi-context
2016-07-13 17:01:46,794 INFO  [org.wildfly.extension.camel] (MSC service thread 1-2) Bound camel naming object: java:jboss/camel/context/cdi-context
2016-07-13 17:01:46,811 INFO  [org.apache.camel.impl.DefaultRuntimeEndpointRegistry] (MSC service thread 1-8) Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
2016-07-13 17:01:46,863 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2016-07-13 17:01:46,863 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2016-07-13 17:01:46,895 INFO  [org.apache.camel.component.undertow.UndertowRegistry] (MSC service thread 1-8) Adding consumer to consumerRegistry: http://localhost:8181/timesheet/%7BtimesheetId%7D
2016-07-13 17:01:46,898 INFO  [org.wildfly.extension.camel] (MSC service thread 1-8) Add Camel endpoint: http://[::]:8181/timesheet/{timesheetId}
2016-07-13 17:01:46,898 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Route: route1 started and consuming from: Endpoint[http://localhost:8181/timesheet/%7BtimesheetId%7D?httpMethodRestrict=POST%2COPTIONS&optionsEnabled=true]
2016-07-13 17:01:46,899 INFO  [org.apache.camel.component.undertow.UndertowRegistry] (MSC service thread 1-8) Adding consumer to consumerRegistry: http://localhost:8181/timesheet/%7BtimesheetId%7D
2016-07-13 17:01:46,899 INFO  [org.wildfly.extension.camel] (MSC service thread 1-8) Add Camel endpoint: http://[::]:8181/timesheet/{timesheetId}
2016-07-13 17:01:46,899 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Route: route2 started and consuming from: Endpoint[http://localhost:8181/timesheet/%7BtimesheetId%7D?httpMethodRestrict=GET%2COPTIONS&optionsEnabled=true]
2016-07-13 17:01:46,899 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Total 2 routes, of which 2 are started.
2016-07-13 17:01:46,900 INFO  [org.apache.camel.impl.DefaultCamelContext] (MSC service thread 1-8) Apache Camel 2.17.1 (CamelContext: cdi-context) started in 0.156 seconds
2016-07-13 17:01:47,254 INFO  [org.jboss.resteasy.resteasy_jaxrs.i18n] (ServerService Thread Pool -- 7) RESTEASY002225: Deploying javax.ws.rs.core.Application: class org.wildfly.swarm.generated.WildFlySwarmDefaultJAXRSApplication
2016-07-13 17:01:47,256 INFO  [org.wildfly.extension.undertow] (ServerService Thread Pool -- 7) WFLYUT0021: Registered web context: /
2016-07-13 17:01:47,257 INFO  [org.wildfly.extension.camel] (ServerService Thread Pool -- 7) Add Camel endpoint: http://[::]:8181
2
{code}
tdiesler:1468463038:2016-07-14T10:23:58.225+0000:1468463038:2016-07-14T10:23:58.225+0000:CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/1246
davsclaus:1468540079:2016-07-15T07:47:59.062+0000:1468540079:2016-07-15T07:47:59.062+0000:I cannot reproduce this on master and 2.17.x branch. I created an unit test
https://github.com/apache/camel/commit/6540a69cf9f8b4365386f8f0d446d4a0e15f646f
davsclaus:1468540182:2016-07-15T07:49:42.189+0000:1468540182:2016-07-15T07:49:42.189+0000:When using get/verb etc. then the uri parameter httpMethodRestrict is used to restrict to GET PUT etc. And that is part of the uri, and should therefore not be duplicate.

tdiesler:1468549291:2016-07-15T10:21:31.873+0000:1468549355:2016-07-15T10:22:35.912+0000:The httpMethodRestrict parameter seem to be added late

{code}
Adding consumer to consumerRegistry: http://localhost:8080/camel/rest/hello/%7Bname%7D
Add Camel endpoint: http://127.0.0.1:8080/camel/rest/hello/{name}
Route: route1 started and consuming from: Endpoint[http://localhost:8080/camel/rest/hello/%7Bname%7D?httpMethodRestrict=GET]

Adding consumer to consumerRegistry: http://localhost:8080/camel/rest/hello/%7Bname%7D
Add Camel endpoint: http://127.0.0.1:8080/camel/rest/hello/{name}
Route: route2 started and consuming from: Endpoint[http://localhost:8080/camel/rest/hello/%7Bname%7D?httpMethodRestrict=POST]

Adding consumer to consumerRegistry: http://localhost:8080/camel/rest/hello/%7Bname%7D
Add Camel endpoint: http://127.0.0.1:8080/camel/rest/hello/{name}
Route: route3 started and consuming from: Endpoint[http://localhost:8080/camel/rest/hello/%7Bname%7D?httpMethodRestrict=PUT]
{code}
tdiesler:1468559015:2016-07-15T13:03:35.312+0000:1468559015:2016-07-15T13:03:35.312+0000:Please close, this is a wildfly-camel issue.
githubbot:1487423267:2017-02-18T21:07:47.300+0000:1487423267:2017-02-18T21:07:47.300+0000:GitHub user scranton opened a pull request:

    https://github.com/apache/camel/pull/1476

    CAMEL-10139: added unit tests for all/most REST DSL components, and s…

    …eeing that only camel-undertow throws an HTTP status code 405 on some operations

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/scranton/camel CAMEL-10139

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1476.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1476
    
----
commit 419558f543fb76313c59d8b0e433b69fce9843e3
Author: Scott Cranton <scott@cranton.com>
Date:   2017-02-18T21:06:54Z

    CAMEL-10139: added unit tests for all/most REST DSL components, and seeing that only camel-undertow throws an HTTP status code 405 on some operations

----

scranton:1487423336:2017-02-18T21:08:56.824+0000:1487423336:2017-02-18T21:08:56.824+0000:Just created pull request - https://github.com/apache/camel/pull/1476 - with unit tests for most REST DSL components, and that only fails with camel-undertow with some of the HTTP operations returning a status code of 405
scranton:1487427268:2017-02-18T22:14:28.435+0000:1487427268:2017-02-18T22:14:28.435+0000:Looks like in Undertow when you have for example /users and /users/{id} the code that adds the handlers is seeing those 2 paths (/users and /users/) as identical, and replacing the handler. In my unit test the /users/{id} handler wins, so the /users GET is no longer registered

https://github.com/undertow-io/undertow/blob/master/core/src/main/java/io/undertow/util/PathMatcher.java#L118

This feels like a bug in Undertow
scranton:1487431252:2017-02-18T23:20:52.139+0000:1487431252:2017-02-18T23:20:52.139+0000:Fixed it in camel-undertow component by normalizing paths just like undertow handles, i.e. /users and /users/ are the same path

https://github.com/scranton/camel/blob/36032729b785bd17ca478db6ff21fd66f7d81ad0/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/handlers/CamelRootHandler.java#L171-L171
githubbot:1487465881:2017-02-19T08:58:01.403+0000:1487465881:2017-02-19T08:58:01.403+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1476

davsclaus:1487470335:2017-02-19T10:12:15.305+0000:1487470335:2017-02-19T10:12:15.305+0000:Thanks Scott"
0,CAMEL-10138,New Feature,Minor,2.17.1,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,J P,0,2,2016-07-13 03:07:44+00:00,2016-07-17 15:46:23+00:00,"In my project we are using SpringBoot (war) + Apache Camel + BeanIO for data integration purpose where first step is to implement data load from files (csv, excel, etc.) and produce extract in csv , pdf, excel, etc. format


One of the important requirement is to be able to reload the routes and mapping configurations.


Was able to reload the routes but couldn't find a way to reload beanio data format. I think there should be some provision in BeanIODataFormat to reload mappings.


Have a look at the poc project etl @  https://github.com/Jayeshecs/incubate/tree/etl","davsclaus:1468560212:2016-07-15T13:23:32.140+0000:1468560212:2016-07-15T13:23:32.140+0000:If you need some kind of re-load its better to re-start the app, and not have to add custom reload logic into the 150+ camel components.

jayeshecs:1468741583:2016-07-17T15:46:23.836+0000:1468741583:2016-07-17T15:46:23.836+0000:Hi [~davsclaus],

Appreciate your update and response to this request.

Presently restart app is what we are using. However, Idea is to give control of updating mappings to end-user at runtime and for this restarting app is not a good choice !

May be I have missed something here !! Why to add custom reload logic in 150+ camel components? I was looking for such support only in dataformat, specifically beanio. I am happy to cast dataformat into BeanIODataFormat and invoke reload API to avoid high impact on other camel components.

"
0,CAMEL-10137,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-07-11 15:03:54+00:00,2016-07-12 09:24:23+00:00,An example can be useful for end-users.,
0,CAMEL-10136,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,Moulliard Charles,0,2,2016-07-11 13:44:52+00:00,2016-07-27 07:46:25+00:00,"The option group (""<tokenize token=""\n"" group=""1000""/>"","".tokenize(""\n"", 1000)"") doesn't exist when we use the Tokenize DSL after a body expression



.split(body(String.class).tokenize(""\n"")).streaming()




but only when we create append the .tokenize() DSL to the splitter



.split().tokenize(""\n"",3).streaming()




Question : Is it the expected behaviour or something missing ?","davsclaus:1468560425:2016-07-15T13:27:05.374+0000:1468560425:2016-07-15T13:27:05.374+0000:Yeah you should use convertBodyTo to convert the body to string before using the splitter with tokenize.
cmoulliard:1468562012:2016-07-15T13:53:32.876+0000:1468562012:2016-07-15T13:53:32.876+0000:There is an inconsistency as the Java Fluent API "".split().tokenize(""\n"",3)"" supports the group option and not this other syntax "".split(body(String.class).tokenize(""\n""))"""
0,CAMEL-10135,Bug,Minor,2.15.1,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Geert Schuring,0,3,2016-07-08 09:59:07+00:00,2016-07-15 13:43:09+00:00,"When a Route is referring to a Java Bean by class type while that class has no default constructor, Camel should throw an exception indicating that creation of the bean failed. Instead it ignores this problem resulting in an exchange encountering a null pointer exception.","cathodion:1467943301:2016-07-08T10:01:41.487+0000:1467943301:2016-07-08T10:01:41.487+0000:I've modified the FilterTest example to reproduce the issue.
anoordover:1468067860:2016-07-09T20:37:40.246+0000:1468067860:2016-07-09T20:37:40.246+0000:It doesn't seem to be a bug.
The creation of the bean is done by org.apache.camel.model.BeanDefinition and begins by getting the clazz on line 274.
Eventually the line 304 is executed
{code}
                        // this is only for invoking static methods on the bean
                        beanHolder = new ConstantStaticTypeBeanHolder(clazz, routeContext.getCamelContext());
{code}
My conclusion is that no instance is created because the processor is going to try and call static methods on your bean-class.
When you add the following method to your bean
{code}
        public static String doSomeBrickletThing(String hello) {
            return ""Camel in your house!"";
        }
{code}
you don't see any failure.
cathodion:1468082509:2016-07-10T00:41:49.231+0000:1468082509:2016-07-10T00:41:49.231+0000:You don't consider the exception happening at runtime to be a bug? I'd say Camel should inspect the class during route creation and report an error when there are no default constructors it can call and no static methods to invoke either.
davsclaus:1468561388:2016-07-15T13:43:08.965+0000:1468561388:2016-07-15T13:43:08.965+0000:The bean introspection logic is already complicated. 

Calling a bean which has no methods is not normal."
0,CAMEL-10134,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-07-08 09:57:47+00:00,2016-07-11 09:15:39+00:00,"Actually we can consume events from resources filtered by namespace only.


It would be great to allow filtering by label and name. In this way we can think of monitoring our resources and eventually take action (for example trigger a scale operation with a Producer on a Replication Controller)",
0,CAMEL-10133,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Antoine DESSAIGNE,1,2,2016-07-08 09:39:24+00:00,2016-11-23 18:37:31+00:00,"The camel-lumberjack component allows to receives log streams over the lumberjack protocol. For instance it can receives logs from Filebeat.


The pull-request is here : https://github.com/apache/camel/pull/1071","davsclaus:1468537892:2016-07-15T07:11:32.945+0000:1468537892:2016-07-15T07:11:32.945+0000:Thanks for the PR. Do you mind helping with wiki documentation also? And add this new component to the 2.18 release notes
http://camel.apache.org/camel-2180-release.html
antoine.dessaigne:1468538253:2016-07-15T07:17:33.914+0000:1468538253:2016-07-15T07:17:33.914+0000:Sure.
Should I create the documentation for it on confluence or starting from the 2.18 the website will use the asciidoc documentation ? Is there a way to create the confluence page with the content of the asciidoc ?
davsclaus:1468538437:2016-07-15T07:20:37.961+0000:1468538437:2016-07-15T07:20:37.961+0000:No sadly its old school, so you need to copy an existing component wiki page, and then copy in the ascii doc text, and change it to confluence wiki style.

And you need to add it to this page too
http://camel.apache.org/component-list


antoine.dessaigne:1468538579:2016-07-15T07:22:59.212+0000:1468538579:2016-07-15T07:22:59.212+0000:Ok, I'll do it.

Do you have an opened Jira task for switching to the new documentation ? One that lists the remaining stuff to do, maybe I can help.
antoine.dessaigne:1468540045:2016-07-15T07:47:25.249+0000:1468540045:2016-07-15T07:47:25.249+0000:Ok, I've updated:
* https://cwiki.apache.org/confluence/display/CAMEL/Lumberjack
* https://cwiki.apache.org/confluence/display/CAMEL/Component+List
* https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.18.0+Release

Did I missed a page ?
davsclaus:1468540528:2016-07-15T07:55:28.143+0000:1468540528:2016-07-15T07:55:28.143+0000:No this is good"
0,CAMEL-10132,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-07-08 08:40:53+00:00,2016-07-08 08:59:21+00:00,"Currently we are able to create, delete, get, list replication controllers from a Kubernetes Cluster.


It would be great to add the ability to scale up and down the RC. In an environment where are monitoring our Kubernetes Cluster it can be useful.",
0,CAMEL-10131,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Bogdan Albei,0,2,2016-07-08 07:27:31+00:00,2016-09-02 10:01:10+00:00,"Exclusive queues are used by only one connection and the queue will be deleted when that connection closes. At the moment the rabbitmq component does not support exclusive queues. I believe that it is an important feature to have, especially when using fanout exchanges, since the generated queues will not autodelete when the client disconnects, leaving queues with no consumers behind, which require manual/scripted intervention.","githubbot:1472000479:2016-08-24T09:01:19.080+0000:1472000479:2016-08-24T09:01:19.080+0000:GitHub user bogdanalbei opened a pull request:

    https://github.com/apache/camel/pull/1138

    CAMEL-10131 added support for exclusive queues

    Fix for https://issues.apache.org/jira/browse/CAMEL-10131
    
    Exclusive queues are used by only one connection and the queue will be deleted when that connection closes. This is an important feature to have, especially when using fanout exchanges, since the generated queues will not autodelete when the client disconnects, leaving queues with no consumers behind, which require manual/scripted intervention.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bogdanalbei/camel CAMEL-10131-add-exclusive-queues-support

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1138.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1138
    
----
commit a2ab54bd521b0e685dc66d8bfa4b74409b0c15a4
Author: Bogdan Albei <bogdan.albei@callsign.com>
Date:   2016-08-24T08:54:06Z

    CAMEL-10131 added support for exclusive queues

----

githubbot:1472186079:2016-08-26T12:34:39.918+0000:1472186079:2016-08-26T12:34:39.918+0000:GitHub user bogdanalbei opened a pull request:

    https://github.com/apache/camel/pull/1143

    CAMEL-10131 added support for exclusive queues

    Fix for https://issues.apache.org/jira/browse/CAMEL-10131
    This is replacing https://github.com/apache/camel/pull/1138
    
    Exclusive queues are used by only one connection and the queue will be deleted when that connection closes. This is an important feature to have, especially when using fanout exchanges, since the generated queues will not autodelete when the client disconnects, leaving queues with no consumers behind, which require manual/scripted intervention.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bogdanalbei/camel CAMEL-10131-add-exclusive-queues-support-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1143.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1143
    
----
commit f8515f70697176c7b7458ea5d27fb8c8eb7f0b63
Author: Bogdan Albei <bogdan.albei@gmail.com>
Date:   2016-08-26T12:31:44Z

    CAMEL-10131 added support for exclusive queues

----

githubbot:1472186181:2016-08-26T12:36:21.610+0000:1472186181:2016-08-26T12:36:21.610+0000:Github user bogdanalbei closed the pull request at:

    https://github.com/apache/camel/pull/1138

githubbot:1472187465:2016-08-26T12:57:45.465+0000:1472187465:2016-08-26T12:57:45.465+0000:Github user bogdanalbei closed the pull request at:

    https://github.com/apache/camel/pull/1143

githubbot:1472191751:2016-08-26T14:09:11.303+0000:1472191751:2016-08-26T14:09:11.303+0000:GitHub user bogdanalbei opened a pull request:

    https://github.com/apache/camel/pull/1144

    CAMEL-10131 added exclusive queues support

    Fix for https://issues.apache.org/jira/browse/CAMEL-10131
    This is replacing #1138
    
    Exclusive queues are used by only one connection and the queue will be deleted when that connection closes. This is an important feature to have, especially when using fanout exchanges, since the generated queues will not autodelete when the client disconnects, leaving queues with no consumers behind, which require manual/scripted intervention.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/bogdanalbei/camel CAMEL-10131-add-exclusive-queues-support-master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1144.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1144
    
----
commit 80d21843894c30fff68f48dab9e1c28d6b0ca544
Author: Bogdan Albei <bogdan.albei@gmail.com>
Date:   2016-08-26T14:06:19Z

    CAMEL-10131 added exclusive queues support

----

githubbot:1472193495:2016-08-26T14:38:15.737+0000:1472193495:2016-08-26T14:38:15.737+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1144
"
0,CAMEL-10130,Task,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-07-07 09:00:13+00:00,2016-07-07 09:01:52+00:00,Has been deprecated for a while and should be removed,
0,CAMEL-10129,Improvement,Minor,2.17.1,,"
None
",Resolved,Duplicate,None,Unassigned,Börcsök József,0,1,2016-07-06 13:54:08+00:00,2016-07-06 13:58:44+00:00,"OsgiServiceRegistry uses cache (serviceCacheMap) for services. If declarative services are provided by several bundles then keeping reference to those objects conflicts OSGi frameworks that support changing them at runtime.


serviceCacheMap should be removed or a new configuration option (enable/disable) should be added to easily disable caching.",
0,CAMEL-10128,Bug,Minor,2.17.2,None,"
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-07-06 10:39:44+00:00,2016-07-06 10:41:16+00:00,"See nabble
http://camel.465427.n5.nabble.com/Problem-with-JT400-DataQueue-tp5784876.html


When creating the consumer we must remember to call configureConsumer like all other component does.",
0,CAMEL-10127,Improvement,Minor,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Börcsök József,0,2,2016-07-06 09:29:39+00:00,2016-07-06 14:00:18+00:00,"OsgiDefaultCamelContext constructor doesn't call super to pass registry so inconsistent registries are set in DefaultCamelContext and DefaultCamelContext instances.


If a client create OsgiDefaultCamelContext with custom registry then (private) variable in DefaultCamelContext is not initialized and a different new instance will be created by getRegistry method.


Either scope of registry in DefaultCamelContext should be changed to protected or OsgiDefaultCamelContext should pass the reference.","githubbot:1467770587:2016-07-06T10:03:07.567+0000:1467770587:2016-07-06T10:03:07.567+0000:GitHub user borcsokj opened a pull request:

    https://github.com/apache/camel/pull/1067

    CAMEL-10127: call parent constructor of OsgiDefaultCamelContext with registry

    calling super with registry or a new OsgiServiceRegistry if not specified

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/borcsokj/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1067.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1067
    
----
commit ac5a57bd3181d0d2be8a83cc9bcec17ecd637136
Author: Börcsök József <borcsokj@sch.bme.hu>
Date:   2016-07-06T09:59:15Z

    CAMEL-10127: call parent constructor of OsgiDefaultCamelContext with registry

----

githubbot:1467784818:2016-07-06T14:00:18.859+0000:1467784818:2016-07-06T14:00:18.859+0000:Github user borcsokj closed the pull request at:

    https://github.com/apache/camel/pull/1067
"
0,CAMEL-10126,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,3,2016-07-06 07:50:45+00:00,2019-07-31 12:25:09+00:00,"The aggregate EIP has two option you can set as both attributes and expressions, and this causes a name clash.


See screenshot","davsclaus:1467762732:2016-07-06T07:52:12.163+0000:1467762732:2016-07-06T07:52:12.163+0000:The Java DSL can be made without any breaking. Its only the XML DSL where we would need to rename either the expression or attribute to not use the same name.

githubbot:1500934770:2017-07-25T06:19:30.060+0000:1500934770:2017-07-25T06:19:30.060+0000:GitHub user vrlgohel opened a pull request:

    https://github.com/apache/camel/pull/1845

    CAMEL-10126: Refactored completionSize & completionTimeout expressions

    completionTimeout & completionSize attributes and expression usages are confusing in xml dsl, so if we have to change the names, we need to change the names in camel-spring.xsd and camel-blueprint.xsd files.
    
    With the below respective changes,
    
    camel-spring.xsd
    
    <xs:element name=""completionTimeoutExpr"" type=""tns:expressionSubElementDefinition"" minOccurs=""0""/>
    <xs:element name=""completionSizeExpr"" type=""tns:expressionSubElementDefinition"" minOccurs=""0""/>
    
    camel-blueprint.xsd
    
        <xs:element minOccurs=""0"" name=""completionTimeoutExpr"" type=""tns:expressionSubElementDefinition""/>
        <xs:element minOccurs=""0"" name=""completionSizeExpr"" type=""tns:expressionSubElementDefinition""/>
    
    I tested the committed code with the above xsd changes and i am able to refactor code with 'completionTimeoutExpr' and 'completionSizeExpr' for the use in expressions. I can't commit or have access to camel-spring.xsd and camel-blueprint.xsd, because everytime, i build the camel-spring and camel-blueprint, the xsd changes.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/vrlgohel/camel-1 master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1845.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1845
    
----
commit 2e6fdd1c72e76830d7a85d6c36680b479b866272
Author: Viral Gohel <vrlgohel87@gmail.com>
Date:   2017-07-25T05:52:57Z

    [CAMEL-10126] Refactored completionSize & completionTimeout expressions

----

githubbot:1501035601:2017-07-26T10:20:01.588+0000:1501035601:2017-07-26T10:20:01.588+0000:Github user vrlgohel closed the pull request at:

    https://github.com/apache/camel/pull/1845

davsclaus:1564536581:2019-07-31T09:29:41.032+0000:1564536581:2019-07-31T09:29:41.032+0000:We need to get this done before 3.0 GA"
0,CAMEL-10125,Improvement,Trivial,None,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Claus Ibsen,Gijsbert van den Brink,0,3,2016-07-05 20:50:28+00:00,2016-07-06 06:46:30+00:00,"When using JettyHttpComponent with the default ErrorHandler a warning is logged on startup: ""No Server set for org.apache.camel.component.jetty.JettyHttpComponent$1@3d484181"".


It doesn't seem to do any harm, but it is annoying.. I'll propose a fix in a PR.","githubbot:1467723586:2016-07-05T20:59:46.308+0000:1467723586:2016-07-05T20:59:46.308+0000:GitHub user gijsbert802 opened a pull request:

    https://github.com/apache/camel/pull/1065

    CAMEL-10125: Add default ErrorHandler as unmanaged bean 

    Prevents ""No Server set for ..."" warnings on startup.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gijsbert802/camel CAMEL-10125

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1065.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1065
    
----
commit 62ef6fa463fc21a728e0d084891a755ee8954bab
Author: Gijsbert van den Brink <vandenbrink@zorgdomein.nl>
Date:   2016-07-05T20:55:15Z

    CAMEL-10125: Add default ErrorHandler as unmanaged bean (prevents ""No Server set for ..."" warnings).

----

davsclaus:1467758481:2016-07-06T06:41:21.572+0000:1467758481:2016-07-06T06:41:21.572+0000:Thanks for the PR
githubbot:1467758790:2016-07-06T06:46:30.577+0000:1467758790:2016-07-06T06:46:30.577+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1065
"
0,CAMEL-10124,Improvement,Minor,2.18.0,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Claus Ibsen,0,3,2016-07-05 16:19:57+00:00,2016-10-11 22:25:42+00:00,"The karaf commands are using


    <dependency>
      <groupId>org.apache.karaf.shell</groupId>
      <artifactId>org.apache.karaf.shell.console</artifactId>
      <version>${karaf-version}</version>
    </dependency>


And that module is deprecated. There is some other module to be used.","igarashitm:1475789801:2016-10-07T05:36:41.584+0000:1475789801:2016-10-07T05:36:41.584+0000:I'm working on this one.
githubbot:1476164985:2016-10-11T13:49:45.184+0000:1476164985:2016-10-11T13:49:45.184+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/1206

    CAMEL-10124 Karaf commands - Switch to non deprecated

    Note: This change is not compatible with karaf 2 and 3. If those old versions should be still supported, then just keep using deprecated APIs which still seems to be working well on karaf4 as well.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-10124

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1206.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1206
    
----
commit 2097a08225f327bd40ecba9da7ba325c880b6758
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2016-10-07T03:43:11Z

    CAMEL-10124 Karaf commands - Switch to non deprecated

----

igarashitm:1476165175:2016-10-11T13:52:55.429+0000:1476165175:2016-10-11T13:52:55.429+0000:I managed to migrate those commands to karaf4 style, but it's not compatible with karaf 2 and 3. If those old versions should be still supported, then better to keep using deprecated APIs as those seems to be working well on karaf4 as well.
davsclaus:1476170773:2016-10-11T15:26:13.193+0000:1476170773:2016-10-11T15:26:13.193+0000:Thanks for the PR. Great work.
githubbot:1476195942:2016-10-11T22:25:42.977+0000:1476195942:2016-10-11T22:25:42.977+0000:Github user igarashitm closed the pull request at:

    https://github.com/apache/camel/pull/1206
"
0,CAMEL-10123,Bug,Minor,2.17.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Rudolf Batt,0,2,2016-07-05 14:49:48+00:00,2019-08-06 08:18:27+00:00,"I have a standard proxy route using the camel-jetty component:



<route>
<from uri=""jetty:http://0.0.0.0:8082/docs?matchOnUriPrefix=true""/>
<to uri=""jetty:http://127.0.0.1:8080/docs?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"" />
<route>




The Problem is this: If a request is send to the proxy (8082) with the HTTP header ""Accept-Encoding: deflate""  



curl -s -v -H 'Accept-Encoding: deflate' 'http://localhost:8082/docs/setup.html' -o /dev/null



 the ""backend server"" receives a request with the header ""Accept-Encoding: gzip,deflate"".


This would be OK, if the compression is ""terminated"" at the communication to the client. However if the ""backend server"" returns gzipped content (marking it with the response header ""Content-Encoding: gzip""), the proxy returns that header as well, although no compression is done:


I can see that, because I get a ""Exception: Not in GZIP format"" in my Java Client. Also comparing the downloaded size with my curl command (



--write-out 'size_download=%{size_download}\n'



) reveals the fact, that the response is not compressed.


(I'll post my workaround, as soon as I found it. I guess I have to use a GZipHandler..)","rudibatt:1467709570:2016-07-05T17:06:10.967+0000:1467712074:2016-07-05T17:47:54.633+0000:Removing the Content-Encoding header at the route solves the problem:
{code}
<route>
    <from uri=""jetty:http://0.0.0.0:8082/docs?matchOnUriPrefix=true""/>
    <to uri=""jetty:http://127.0.0.1:8080/docs?bridgeEndpoint=true&amp;throwExceptionOnFailure=false"" />
    <removeHeaders pattern=""Content-Encoding"" />
</route>
{code}

This is also necessary to use the GzipHandler, otherwise it refuses to work.

Not sure, if this all is expected to work like this. If that is the case, it should be documented at least.



davsclaus:1565050707:2019-08-06T08:18:27.172+0000:1565050707:2019-08-06T08:18:27.172+0000:jetty producer is deprecated and remove in camel 3"
0,CAMEL-10122,Improvement,Major,2.18.0,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-07-05 13:25:43+00:00,2016-07-06 07:20:55+00:00,It should be http and not https. That is because this component does http and https at the same time.,
0,CAMEL-10121,Improvement,Minor,None,"2.16.4, 2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.3, 2.18.0",Unassigned,Gijsbert van den Brink,2,3,2016-07-05 12:22:08+00:00,2016-07-05 22:48:04+00:00,"When an exception occurs in the ResponseHandler an error is logged AND the exception is then wrapped in a CamelExchangeException and re-thrown.
So if I choose to handle certain exceptions in my route I still get an error in the logs.


As long as Mina2Producer throws these exceptions there's no need to log an error (or anything actually) in my opinion. 
Do you agree that the ""LOG.error(""Exception on receiving message from address ..."" line can be removed?","davsclaus:1467706853:2016-07-05T16:20:53.176+0000:1467706853:2016-07-05T16:20:53.176+0000:You are welcome to work on a patch / PR
http://camel.apache.org/contributing
githubbot:1467716232:2016-07-05T18:57:12.945+0000:1467716232:2016-07-05T18:57:12.945+0000:GitHub user gijsbert802 opened a pull request:

    https://github.com/apache/camel/pull/1064

    CAMEL-10121: don't log error when an exception is caught in the ResponseHandler

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gijsbert802/camel CAMEL-10121

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1064.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1064
    
----
commit 31f1b2cbdcc8e02924fde2a0bc30f8da01248302
Author: Gijsbert van den Brink <vandenbrink@zorgdomein.nl>
Date:   2016-07-05T18:53:09Z

    CAMEL-10121: don't log error when an exception is caught in the ResponseHandler

----

githubbot:1467729660:2016-07-05T22:41:00.253+0000:1467729660:2016-07-05T22:41:00.253+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1064
"
0,CAMEL-10120,Bug,Trivial,2.17.2,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Stephan Siano,Stephan Siano,0,1,2016-07-04 13:09:36+00:00,2016-07-04 13:34:26+00:00,"The XMLStreamReaderInputStream created by the StaxConverter will fail if the document does not define a default namespace, a tag contains an attribute without namespace prefix and the XMLStreamWriter from the JDK is used.


The error message is:
javax.xml.stream.XMLStreamException: NamespaceURI cannot be null
	at com.sun.xml.internal.stream.writers.XMLStreamWriterImpl.writeAttribute(XMLStreamWriterImpl.java:615)
	at org.apache.camel.converter.jaxp.XMLStreamReaderInputStream.ensureBuffering(XMLStreamReaderInputStream.java:106)


The fix is relatively simple: a check needs to be introduced that replaces null namespaceUris with empty namespace Uris.


The issue was introduced with CAMEL-10070.


The issue will not happen with unit tests because those use the woodstox Stax parser.",
0,CAMEL-10119,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,1,3,2016-07-04 11:20:45+00:00,2016-07-29 17:21:26+00:00,We should upgrade to 4.3.x as its the new main line now.,"davsclaus:1467847898:2016-07-07T07:31:38.390+0000:1467847898:2016-07-07T07:31:38.390+0000:Spring 4.3.x is the main line for spring boot 1.4.x. We may upgrade before 2.18 as SB 1.4 is being GA end of July.
davsclaus:1469745421:2016-07-29T06:37:01.010+0000:1469745421:2016-07-29T06:37:01.010+0000:Spring Boot 1.4 is now GA so we should upgrade and to Spring 4.3.2 also.
davsclaus:1469755852:2016-07-29T09:30:52.060+0000:1469755852:2016-07-29T09:30:52.060+0000:Argh the camel-spring-boot unit tests are written in a style that is not Spring Boot friendly in latest release and there is a lot more migration needed.
davsclaus:1469763436:2016-07-29T11:37:16.884+0000:1469763436:2016-07-29T11:37:16.884+0000:[~nferraro] wonder if you could take a look at tests/camel-itest-spring-boot as after the Spring Boot 1.4 upgrade, then arquillian testing has a class loader issue with logback logger.
githubbot:1469778857:2016-07-29T15:54:17.992+0000:1469778857:2016-07-29T15:54:17.992+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1093

    CAMEL-10119: Fixed integration tests for spring-boot 1.4.0.RELEASE

    Added some tweaks to the classloaders to adapt to the new jar structure of spring-boot 1.4.0 jar structure.
    
    Now the integration tests should (at least) start again.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10119

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1093.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1093
    
----
commit 977604bd73e80b25b453413481f36708337080cd
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-29T15:51:43Z

    Some tweaks to the classloaders to adapt to the new jar structure

----

githubbot:1469784086:2016-07-29T17:21:26.546+0000:1469784086:2016-07-29T17:21:26.546+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1093
"
0,CAMEL-10118,Test,Minor,None,2.18.0,"
None
",Closed,Fixed,2.18.0,Nicola Ferraro,Nicola Ferraro,0,3,2016-07-04 09:50:36+00:00,2016-07-07 08:54:12+00:00,"I made some changes to the spring-boot integration test and ran it to check how we are going (I'll push the updated version soon). I let the test fix automatically many of the dependency issues about logging and missing libraries, so here I provide a list of components that have some real problems running in spring-boot.


I think we should either fix them, or change the corresponding test (eg. to include a required lib). Once all issues are fixed, the test can be automated.


camel-xmlbeans
The spring.factories file declares an auto-configuration class that does not exist.



2016-07-03 17:25:27.445 ERROR 21216 --- [on(3)-127.0.0.1] o.s.boot.SpringApplication               : Application startup failed
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to process import candidates for configuration class [org.apache.camel.itest.springboot.ITestApplication]; nested exception is java.lang.IllegalStateException: java.io.FileNotFoundException: class path resource [org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.class] cannot be opened because it does not exist
	at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:462) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:186) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	...
Caused by: java.lang.IllegalStateException: java.io.FileNotFoundException: class path resource [org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.class] cannot be opened because it does not exist
	at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.selectImports(EnableAutoConfigurationImportSelector.java:87) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassParser.processDeferredImportSelectors(ConfigurationClassParser.java:454) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 160 common frames omitted
Caused by: java.io.FileNotFoundException: class path resource [org/apache/camel/converter/xmlbeans/springboot/XmlBeansDataFormatAutoConfiguration.class] cannot be opened because it does not exist
	at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.boot.autoconfigure.AutoConfigurationSorter$AutoConfigurationClasses.<init>(AutoConfigurationSorter.java:112) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.AutoConfigurationSorter.getInPriorityOrder(AutoConfigurationSorter.java:56) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.sort(EnableAutoConfigurationImportSelector.java:173) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.EnableAutoConfigurationImportSelector.selectImports(EnableAutoConfigurationImportSelector.java:82) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	... 161 common frames omitted




camel-bindy
Spring seems to be unable to inject the parameter of type BindyFixedLengthDataFormatConfiguration into the auto-configuration method in class BindyFixedLengthDataFormatAutoConfiguration.



2016-07-03 15:28:05.014  WARN 27144 --- [on(4)-127.0.0.1] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configureBindyFixedLengthDataFormat' defined in class path resource [org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration]: No qualifying bean of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}
2016-07-03 15:28:05.018  INFO 27144 --- [on(4)-127.0.0.1] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.18-SNAPSHOT (CamelContext: camel-1) is shutting down
2016-07-03 15:28:05.036  INFO 27144 --- [on(4)-127.0.0.1] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.18-SNAPSHOT (CamelContext: camel-1) uptime 
2016-07-03 15:28:05.036  INFO 27144 --- [on(4)-127.0.0.1] o.a.camel.spring.SpringCamelContext      : Apache Camel 2.18-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.018 seconds
2016-07-03 15:28:05.046 ERROR 27144 --- [on(4)-127.0.0.1] o.s.boot.SpringApplication               : Application startup failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'configureBindyFixedLengthDataFormat' defined in class path resource [org/apache/camel/dataformat/bindy/fixed/springboot/BindyFixedLengthDataFormatAutoConfiguration.class]: Unsatisfied dependency expressed through constructor argument with index 1 of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration]: No qualifying bean of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}
	...
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type [org.apache.camel.dataformat.bindy.fixed.springboot.BindyFixedLengthDataFormatConfiguration] found for dependency: expected at least 1 bean which qualifies as autowire candidate for this dependency. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoSuchBeanDefinitionException(DefaultListableBeanFactory.java:1373) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1119) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1014) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:813) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:741) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 165 common frames omitted




camel-mongodb-gridfs and camel-mongodb
It seems that the Spring configurator assumes that spring-data-mongodb is present in classpath, but it is not. We can either add it, change the test to include the lib and/or fix the Spring configurator.



org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration$$EnhancerBySpringCGLIB$$6bcc435e]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/data/mongodb/core/MongoClientFactoryBean
2016-07-03 16:34:38.417 ERROR 10484 --- [on(3)-127.0.0.1] o.s.boot.SpringApplication               : Application startup failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration': Instantiation of bean failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration$$EnhancerBySpringCGLIB$$6bcc435e]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/data/mongodb/core/MongoClientFactoryBean
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1105) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1050) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
...
org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration$$EnhancerBySpringCGLIB$$6bcc435e]: Constructor threw exception; nested exception is java.lang.NoClassDefFoundError: org/springframework/data/mongodb/core/MongoClientFactoryBean
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:163) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:89) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateBean(AbstractAutowireCapableBeanFactory.java:1098) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 163 common frames omitted
Caused by: java.lang.NoClassDefFoundError: org/springframework/data/mongodb/core/MongoClientFactoryBean
	at org.springframework.boot.autoconfigure.data.mongo.MongoClientDependsOnBeanFactoryPostProcessor.<init>(MongoClientDependsOnBeanFactoryPostProcessor.java:41) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration.<init>(EmbeddedMongoAutoConfiguration.java:207) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration$EmbeddedMongoDependencyConfiguration$$EnhancerBySpringCGLIB$$6bcc435e.<init>(<generated>) ~[spring-boot-autoconfigure-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:1.8.0_91]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[na:1.8.0_91]
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:147) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 165 common frames omitted




camel-optaplanner
This module requires an old version of logback 1.0.x, as it depends (internally, it doesn't have a logback.xml file) on a removed class: ch/qos/logback/core/joran/spi/Pattern. But spring-boot-starter requires logback 1.1.x, because it uses a new class: ch/qos/logback/core/joran/spi/ElementSelector.



java.lang.NoClassDefFoundError: ch/qos/logback/core/joran/spi/ElementSelector
	at org.springframework.boot.logging.logback.SpringBootJoranConfigurator.addInstanceRules(SpringBootJoranConfigurator.java:45)
	at ch.qos.logback.core.joran.GenericConfigurator.buildInterpreter(GenericConfigurator.java:123)
	at ch.qos.logback.core.joran.JoranConfiguratorBase.buildInterpreter(JoranConfiguratorBase.java:102)
	at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:154)
	at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:143)
	at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:106)
	at ch.qos.logback.core.joran.GenericConfigurator.doConfigure(GenericConfigurator.java:56)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.configureByResourceUrl(LogbackLoggingSystem.java:163)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.loadConfiguration(LogbackLoggingSystem.java:135)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.reinitialize(LogbackLoggingSystem.java:195)
	at org.springframework.boot.logging.AbstractLoggingSystem.initializeWithConventions(AbstractLoggingSystem.java:65)
	at org.springframework.boot.logging.AbstractLoggingSystem.initialize(AbstractLoggingSystem.java:50)
	at org.springframework.boot.logging.logback.LogbackLoggingSystem.initialize(LogbackLoggingSystem.java:106)
	at org.springframework.boot.logging.LoggingApplicationListener.initializeSystem(LoggingApplicationListener.java:277)
	at org.springframework.boot.logging.LoggingApplicationListener.initialize(LoggingApplicationListener.java:255)
	at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEnvironmentPreparedEvent(LoggingApplicationListener.java:224)
	at org.springframework.boot.logging.LoggingApplicationListener.onApplicationEvent(LoggingApplicationListener.java:200)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:166)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:138)
	at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:121)
	at org.springframework.boot.context.event.EventPublishingRunListener.publishEvent(EventPublishingRunListener.java:111)
	at org.springframework.boot.context.event.EventPublishingRunListener.environmentPrepared(EventPublishingRunListener.java:65)
	at org.springframework.boot.SpringApplicationRunListeners.environmentPrepared(SpringApplicationRunListeners.java:54)
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:330)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180)
	at org.apache.camel.itest.springboot.ITestApplication.main(ITestApplication.java:32)
	... 147 more
Caused by: java.lang.ClassNotFoundException: ch.qos.logback.core.joran.spi.ElementSelector
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:178)
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 175 more




camel-sjms
It seems an auto-configuration class is assuming that atomikos is in the classpath.



org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmsConnectionFactory' defined in class path resource [org/springframework/boot/autoconfigure/jms/activemq/ActiveMQXAConnectionFactoryConfiguration.class]: Invocation of init method failed; nested exception is java.lang.NoClassDefFoundError: com/atomikos/icatch/system/Configuration
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	...
Caused by: java.lang.NoClassDefFoundError: com/atomikos/icatch/system/Configuration
	at com.atomikos.jms.AtomikosConnectionFactoryBean.doInit(AtomikosConnectionFactoryBean.java:441) ~[transactions-jms-3.9.3.jar!/:na]
	at com.atomikos.jms.AtomikosConnectionFactoryBean.init(AtomikosConnectionFactoryBean.java:360) ~[transactions-jms-3.9.3.jar!/:na]
	at org.springframework.boot.jta.atomikos.AtomikosConnectionFactoryBean.afterPropertiesSet(AtomikosConnectionFactoryBean.java:50) ~[spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1637) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1574) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 164 common frames omitted
Caused by: java.lang.ClassNotFoundException: com.atomikos.icatch.system.Configuration
	at java.net.URLClassLoader.findClass(URLClassLoader.java:381) ~[na:1.8.0_91]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_91]
	at org.springframework.boot.loader.LaunchedURLClassLoader.doLoadClass(LaunchedURLClassLoader.java:178) ~[test.jar!/:na]
	at org.springframework.boot.loader.LaunchedURLClassLoader.loadClass(LaunchedURLClassLoader.java:142) ~[test.jar!/:na]
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_91]
	... 169 common frames omitted




zipkin-starter
Zipkin starts and crashes, but it has not been activated through the @CamelZipkin annotation on the main class.



org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'zipkinEventNotifier' defined in class path resource [org/apache/camel/zipkin/starter/ZipkinAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.zipkin.ZipkinTracer]: Factory method 'zipkinEventNotifier' threw exception; nested exception is org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: SpanCollector must be specified on: org.apache.camel.zipkin.ZipkinTracer@6d0e72f8
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	...
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.zipkin.ZipkinTracer]: Factory method 'zipkinEventNotifier' threw exception; nested exception is org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: SpanCollector must be specified on: org.apache.camel.zipkin.ZipkinTracer@6d0e72f8
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 164 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: SpanCollector must be specified on: org.apache.camel.zipkin.ZipkinTracer@6d0e72f8
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.zipkin.ZipkinTracer.init(ZipkinTracer.java:133) ~[camel-zipkin-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.zipkin.starter.ZipkinAutoConfiguration.zipkinEventNotifier(ZipkinAutoConfiguration.java:59) ~[camel-zipkin-starter-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.zipkin.starter.ZipkinAutoConfiguration$$EnhancerBySpringCGLIB$$6227270b.CGLIB$zipkinEventNotifier$0(<generated>) ~[camel-zipkin-starter-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.zipkin.starter.ZipkinAutoConfiguration$$EnhancerBySpringCGLIB$$6227270b$$FastClassBySpringCGLIB$$95cb7a49.invoke(<generated>) ~[camel-zipkin-starter-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.apache.camel.zipkin.starter.ZipkinAutoConfiguration$$EnhancerBySpringCGLIB$$6227270b.zipkinEventNotifier(<generated>) ~[camel-zipkin-starter-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 165 common frames omitted
Caused by: java.lang.IllegalArgumentException: SpanCollector must be specified on: org.apache.camel.zipkin.ZipkinTracer@6d0e72f8
	at org.apache.camel.util.ObjectHelper.notNull(ObjectHelper.java:327) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.zipkin.ZipkinTracer.doStart(ZipkinTracer.java:325) ~[camel-zipkin-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1277) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1237) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.zipkin.ZipkinTracer.init(ZipkinTracer.java:131) ~[camel-zipkin-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	... 176 common frames omitted","githubbot:1467600447:2016-07-04T10:47:27.929+0000:1467600447:2016-07-04T10:47:27.929+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1058

    CAMEL-10118: Improvements to spring-boot testing framework

    Some improvements to the testing framework:
    - It includes a custom Arquillian container to launch unit tests of each module in the right environment
    - solves logging configuration automatically
    - adds common required dependencies automatically
    
    I've also fixed the test configuration of many modules. 
    Compatibility results are available in Jira.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10118-TEST-IMPROVEMENTS

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1058.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1058
    
----
commit 20401a386651f330468751ea52eb43645483dee5
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T10:40:31Z

    CAMEL-10118: Improvements to spring-boot testing framework

----

githubbot:1467601337:2016-07-04T11:02:17.349+0000:1467601337:2016-07-04T11:02:17.349+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1058

davsclaus:1467603300:2016-07-04T11:35:00.271+0000:1467603300:2016-07-04T11:35:00.271+0000:So camel-jms uses Spring JMS, and camel-sjms uses just pure JMS API. So I wonder if the latter fails because spring-jms is not on the classpath that would otherwise ""somehow"" deal with that TX manager not there.

For users that do not use Atomikos I would assume you can just plugin a different TX manager (nor not if not using TX).
davsclaus:1467603338:2016-07-04T11:35:38.728+0000:1467603338:2016-07-04T11:35:38.728+0000:For optaplanner it would be good to contact that team so they are aware. Maybe they can make optaplanner work with any 1.x version of logback.
davsclaus:1467603599:2016-07-04T11:39:59.176+0000:1467603599:2016-07-04T11:39:59.176+0000:So camel-xmlbeans is not working with Spring Boot in the current version. They had a but in their APT compiler plugin. They have fixed that but it would require a new version of Spring Boot which they havent released yet.

When it works again, we can enable it with in org.apache.camel.maven.packaging.SpringBootAutoConfigurationMojo in our spring boot mvn plugin generator.
davsclaus:1467603855:2016-07-04T11:44:15.750+0000:1467603855:2016-07-04T11:44:15.750+0000:For bindy I wonder if its they have the same prefix
@ConfigurationProperties(prefix = ""camel.dataformat.bindy"")

So we should likely change this to be

@ConfigurationProperties(prefix = ""camel.dataformat.bindy.fixed"")


davsclaus:1467605838:2016-07-04T12:17:18.697+0000:1467605838:2016-07-04T12:17:18.697+0000:I pushed a fix for the data formats

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 11.98 sec - in org.apache.camel.itest.springboot.CamelBindyTest
nferraro:1467606626:2016-07-04T12:30:26.735+0000:1467606626:2016-07-04T12:30:26.735+0000:For Optaplanner, I checked the generated jar and it seems that the problem is caused by the presence of different versions of logback. I'm going to fix the test.
nferraro:1467615764:2016-07-04T15:02:44.443+0000:1467615764:2016-07-04T15:02:44.443+0000:The issue with MongoDB has been fixed in Spring few days ago: https://github.com/nicolaferraro/spring-boot/commit/2003c5e1aebc29baf7142b9eb58b8bc254932449.
I'll exclude them from the test for now.

githubbot:1467621711:2016-07-04T16:41:51.214+0000:1467621711:2016-07-04T16:41:51.214+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1060

    CAMEL-10118 modules fix

    I fixed the framework and some modules that failed. I also moved the configuration from the properties file to the surefire pom section.
    
    Now the configuration defaults to ""run-unit-tests"" when running the tests from IDE, while unit tests are disabled in surefire (many of them fail, it will be next step).

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10118-MODULES-FIX

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1060.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1060
    
----
commit 8b4f772e9a86d3a97a036e2f55e3b825b11a23d2
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T14:18:59Z

    CAMEL-10118: Overriding module logger in main class

commit 44461c2ee428ddd72165c64f47e512ad40dca3c0
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T14:21:28Z

    CAMEL-10118:
    - Fixed log dependencies
    - Moved test configuration to surefire
    - Overriden logger in Optaplanner
    - Excluded Xmlbeans from test

commit c4d05f08f28993274768ff6edc95930954bf484d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T14:26:32Z

    CAMEL-10118: Changed resolutor to avoid throwing unnecessary errors when dedpendencies are not needed

commit 15fc68515e6a86bf91efdd018baf4eb56abadf37
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T15:07:12Z

    CAMEL-10118: Excluded Mongodb tests

commit 6694368c2de67f74e9640c5fbbf2499612f17114
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T16:04:44Z

    CAMEL-10118: Fixed Sjms test dependencies

commit f7f401933bfc5e2e1351b210855f4a7197964fa0
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T16:22:13Z

    CAMEL-10118: Small fix and source check

----

nferraro:1467621868:2016-07-04T16:44:28.763+0000:1467621868:2016-07-04T16:44:28.763+0000:Atomikos in sjms is loaded as ""test"" lib. But spring-boot requires transactions-jta 3.9.3, while we use version 4.0.2.
I excluded the dependency on transactions-jta for the moment, as it is required for some unit tests only.
githubbot:1467622114:2016-07-04T16:48:34.987+0000:1467622114:2016-07-04T16:48:34.987+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1061

    CAMEL-10118: Fix Zipkin Spring-boot configuration

    The documentation of the zipkin component states that it must be activated using the `@CamelZipkin` annotation, so the `spring.factories` file should be removed, otherwise it will be configured even if the annotation is not present on the main class.
    
    The annotation alone is sufficient.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10118-FIX-ZIPKIN

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1061.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1061
    
----
commit 48037710f545de4cf41f86474d6b420469b2237a
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-04T16:45:45Z

    CAMEL-10118: Fix Zipkin Spring-boot configuration

----

githubbot:1467626008:2016-07-04T17:53:28.287+0000:1467626008:2016-07-04T17:53:28.287+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1060

githubbot:1467676338:2016-07-05T07:52:18.960+0000:1467676338:2016-07-05T07:52:18.960+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1061

davsclaus:1467677185:2016-07-05T08:06:25.811+0000:1467677185:2016-07-05T08:06:25.811+0000:Nico, the upgrade to SB fixed the APT compiler bug, so camel-xmlbeans now works again. I have just generated and pushed to master. So you are welcome to enable it in the tests
nferraro:1467678281:2016-07-05T08:24:41.222+0000:1467678281:2016-07-05T08:24:41.222+0000:Very good. I'm going to enable it and and run a full test to see if everything is ok.

I'll also try to reenable the mongodb ones after some checks. 
nferraro:1467682500:2016-07-05T09:35:00.114+0000:1467682500:2016-07-05T09:35:00.114+0000:Github changed the PR name, so it does not appear here: https://github.com/apache/camel/pull/1062

With spring-boot 1.3.6.RELEASE, also the Mongodb modules now work correctly, without additional libs.

Here are the test results:

{noformat}
Results :

Tests run: 224, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 17:03 min
[INFO] Finished at: 2016-07-05T11:19:12+02:00
[INFO] Final Memory: 37M/933M
[INFO] ------------------------------------------------------------------------
{noformat}

All modules have passed the base compatibility check with spring-boot. The test can be included in a Jenkins build, just using _spring-boot.test_ profile.

There are still some modules for which the unit tests fail when running in a spring-boot environment, but they need further investigation. Unit tests can be executed by launching the test from IDE (now they are enabled by default). I'll close this ticket.

Thanks!
githubbot:1467789705:2016-07-06T15:21:45.870+0000:1467789705:2016-07-06T15:21:45.870+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1069

    CAMEL-10118 Spring-boot test fix

    Test scoped exclusions were ignored by the spring-boot integration tests before this patch.
    Added automatic exclusion of ""apache-log4j-extras"" from spring-boot projects.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10118-TEST-FIX

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1069.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1069
    
----
commit b8032cccce28792833e279027eac94d829d0d65e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-06T15:17:18Z

    CAMEL-10118: Test exclusions were ignored by arquillian

commit a68fd04f2e1887f4ee0b1c053984f5353040939e
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-07-06T15:19:18Z

    CAMEL-10118: source fix

----

githubbot:1467852852:2016-07-07T08:54:12.115+0000:1467852852:2016-07-07T08:54:12.115+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1069
"
0,CAMEL-10086,Improvement,Minor,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,Claus Ibsen,Mateusz Nowakowski,0,6,2016-06-23 08:23:08+00:00,2017-09-03 08:18:50+00:00,"Please heck Pattern.compile usage across Camel source code - also not direct usage.


For example: 
Whenever one of these methods are used from String class a Pattern.compile() is utilized:



matches
replaceFirst
replaceAll
replace
split: has an optimization and for certain characters it doesn’t use Pattern.compile.



For example:
GenericFileConsumer.isMatched calls name.matches(endpoint.getExclude())
GenericFileEndpoint could contain also excludePattern as well.


Possible solution:
Walk through the code and replace usages of these methods with static Pattern variables.","davsclaus:1466721511:2016-06-24T06:38:31.479+0000:1466721511:2016-06-24T06:38:31.479+0000:The JVM optimizes also during running. 
davsclaus:1470790919:2016-08-10T09:01:59.122+0000:1470790919:2016-08-10T09:01:59.122+0000:Contributions is welcome
aefox:1480334783:2016-11-28T20:06:23.404+0000:1480334783:2016-11-28T20:06:23.404+0000:I did some digging on this ticket and I've come up with 2 scenarios:

1) There are usages of Pattern.compile that can benefit from the proposed approach (as per the description, making pattern a static variable). The cases when this can take place is when the regex to compile is hardcoded
examples:
{code:title=ArquillianPackager.java}
L472: Pattern propPattern = Pattern.compile(""(\\$\\{[^}]*\\})"");{code}
{code:title=JsonTokenExtractor.java}
L32: accessTokenPattern = Pattern.compile(""\""access_token\"":\\s*\""(\\S*?)\"""");{code}

2) There are usages of Pattern.compile that cannot be fixed as per the proposed solution (making them static). Both of the examples provided in the description fall in this category. The reason behind this is that the static pattern would be shared by all instances so in a setup like this:
{code}
from(""file://target1/?exclude=^.*xml$"").to(""mock:result"");

from(""file://target2/?exclude=^.*txt$"").to(""mock:result"");
{code}
the second route would override the pattern that the first route setted up and all messages send to the first route will use the same exclude pattern as the second route. I've also done a test for this specific setup with the static pattern in GenericFileConsumer and I confirm it works as described.

I am still in progress with finding all the places that fall into the 1st category and fixing them, but I will come back with a PR on this.
githubbot:1480850430:2016-12-04T19:20:30.085+0000:1480850430:2016-12-04T19:20:30.085+0000:GitHub user aefox opened a pull request:

    https://github.com/apache/camel/pull/1329

    Camel 10086 - Moved Pattern.compile() usages into static variables

    This PR covers a first set of changes for [CAMEL-10086](https://issues.apache.org/jira/browse/CAMEL-10086) which targets extracting some `Pattern.compile()` usages from within methods into static variables.
    
    Couple of things to note:
    - I did not pay attention and ended up with 3 commits. if this is a problem let me know and I'll close this PR, squash the commits on a new branch and re-raise
    - This PR also has some typo fixes and some license fixes (I found those by chance and could not leave them as they were); I hope that's ok

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aefox/camel CAMEL-10086

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1329.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1329
    
----
commit e785f4b38e8034242a3b4779a6b1f7ec24ca5479
Author: aefox <alexandru.enache.10@gmail.com>
Date:   2016-12-04T17:10:25Z

    CAMEL-10086 moved Pattern.compile usages into static variables

commit 7d4fd6c1b590c33c378c56af4315b7bc97c44470
Author: aefox <alexandru.enache.10@gmail.com>
Date:   2016-12-04T17:10:25Z

    CAMEL-10086 moved Pattern.compile usages into static variables

commit cc537416db2cd260468f1382b08988766d29aca3
Author: aefox <alexandru.enache.10@gmail.com>
Date:   2016-12-04T19:09:32Z

    CAMEL-10086 Naming fixes + license updated in 2 java classes

----

githubbot:1480854568:2016-12-04T20:29:28.144+0000:1480854568:2016-12-04T20:29:28.144+0000:Github user aefox closed the pull request at:

    https://github.com/apache/camel/pull/1329

githubbot:1480941322:2016-12-05T20:35:22.768+0000:1480941322:2016-12-05T20:35:22.768+0000:GitHub user aefox opened a pull request:

    https://github.com/apache/camel/pull/1332

    CAMEL-10086 added GenericFileEndpoint.(include|exclude)Pattern for a …

    …better reusage
    
    This is part 2 of [CAMEL-10086](https://issues.apache.org/jira/browse/CAMEL-10086).
    
    It follows on the suggestion from the ticket description:
    `GenericFileEndpoint could contain also excludePattern as well.`
    
    Please note couple of things:
    1) This PR might not be considered complete because:
    - I'm not sure if javadoc should be added on the new methods in `GenericFileEndpoint`
    - Also I have only checked that the existing tests work as before and didn't investigate if/what needs to be updated
    - Any suggestions related to the above 2 lines would be appreciated
    2) I have raised this PR to get a validation that this approach is good and can continue in this direction
    3) This PR also contains some other cleanup that I noticed could be done

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/aefox/camel CAMEL-10086

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1332.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1332
    
----
commit 12be6a2f56877546e5ae446f4450150336a1715c
Author: aefox <alexandru.enache.10@gmail.com>
Date:   2016-12-05T20:15:28Z

    CAMEL-10086 added GenericFileEndpoint.(include|exclude)Pattern for a better reusage

----

githubbot:1480991572:2016-12-06T10:32:52.965+0000:1480991572:2016-12-06T10:32:52.965+0000:Github user aefox closed the pull request at:

    https://github.com/apache/camel/pull/1332

onders:1483969508:2017-01-09T21:45:08.793+0000:1483969508:2017-01-09T21:45:08.793+0000:$ grep -iR 'Pattern.compile' * | grep -v 'static final'

camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java:        final Pattern pattern = Pattern.compile(regexTokenizer);
camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java:        final Pattern pattern = Pattern.compile(regex);
camel-core/src/main/java/org/apache/camel/builder/ExpressionBuilder.java:        final Pattern pattern = Pattern.compile(regex);
camel-core/src/main/java/org/apache/camel/builder/PredicateBuilder.java:        return regex(expression, Pattern.compile(regex));
camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java:        this.includePattern = Pattern.compile(include, Pattern.CASE_INSENSITIVE);
camel-core/src/main/java/org/apache/camel/component/file/GenericFileEndpoint.java:        this.excludePattern = Pattern.compile(exclude, Pattern.CASE_INSENSITIVE);
camel-core/src/main/java/org/apache/camel/impl/DefaultHeaderFilterStrategy.java:            outFilterPattern = Pattern.compile(value);
camel-core/src/main/java/org/apache/camel/impl/DefaultHeaderFilterStrategy.java:            inFilterPattern = Pattern.compile(value);
camel-core/src/main/java/org/apache/camel/support/TokenXMLExpressionIterator.java:                Pattern.compile(MessageFormat.format(SCAN_BLOCK_TOKEN_REGEX_TEMPLATE,
camel-core/src/main/java/org/apache/camel/support/TokenXMLExpressionIterator.java:                        Pattern.compile(MessageFormat.format(SCAN_PARENT_TOKEN_REGEX_TEMPLATE,
camel-core/src/main/java/org/apache/camel/support/TokenXMLPairExpressionIterator.java:            this.startTokenPattern = Pattern.compile(tokenSb.toString());
camel-core/src/main/java/org/apache/camel/support/TokenXMLPairExpressionIterator.java:                this.inheritNamespaceTokenPattern = Pattern.compile(tokenSb.toString(), Pattern.MULTILINE | Pattern.DOTALL);
camel-core/src/main/java/org/apache/camel/support/XMLTokenExpressionIterator.java:                lcpattern = Pattern.compile(sb.toString());
camel-core/src/main/java/org/apache/camel/util/component/ApiMethodHelper.java:            aliasPatterns.put(Pattern.compile(alias.getKey()), alias.getValue());
camel-core/src/main/java/org/apache/camel/util/component/ArgumentSubstitutionParser.java:                nameReplacement.typePattern = Pattern.compile(substitution.argType);
camel-core/src/main/java/org/apache/camel/util/component/ArgumentSubstitutionParser.java:                argMap.put(Pattern.compile(arg.getKey()), arg.getValue());
camel-core/src/main/java/org/apache/camel/util/component/ArgumentSubstitutionParser.java:            methodMap.put(Pattern.compile(method.getKey()), argMap);
camel-core/src/main/java/org/apache/camel/util/jsse/FilterParameters.java:            patterns.add(Pattern.compile(this.parsePropertyValue(expression)));
camel-core/src/test/java/org/apache/camel/util/jsse/SSLContextParametersTest.java:                          Arrays.asList(new Pattern[]{Pattern.compile(""TLS.*"")}),
camel-core/src/test/java/org/apache/camel/util/jsse/SSLContextParametersTest.java:                           Arrays.asList(new Pattern[]{Pattern.compile("".*"")}),
camel-core/src/test/java/org/apache/camel/util/jsse/SSLContextParametersTest.java:                           Arrays.asList(new Pattern[]{Pattern.compile(""SSL.*"")}));
components/camel-aws/src/test/java/org/apache/camel/component/aws/ddbstream/DdbStreamConsumerTest.java:        private final Pattern shardIteratorPattern = Pattern.compile(""shard_iterator_d_0*(\\d+)"");
components/camel-mail/src/main/java/org/apache/camel/dataformat/mime/multipart/MimeMultipartDataFormat.java:        this.includeHeaders = Pattern.compile(includeHeaders, Pattern.CASE_INSENSITIVE);
components/camel-salesforce/camel-salesforce-component/src/test/java/org/apache/camel/component/salesforce/api/dto/composite/SObjectBatchTest.java:        final String json = Pattern.compile(""\\s+(?=([^\""]*\""[^\""]*\"")*[^\""]*$)"", Pattern.DOTALL)
components/camel-salesforce/camel-salesforce-maven-plugin/src/main/java/org/apache/camel/maven/CamelSalesforceMojo.java:            incPattern = Pattern.compile(includePattern.trim());
components/camel-salesforce/camel-salesforce-maven-plugin/src/main/java/org/apache/camel/maven/CamelSalesforceMojo.java:            excPattern = Pattern.compile(excludePattern.trim());
components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/TypeFilters.java:            this.predicates = Collections.singletonList(Pattern.compile(pattern).asPredicate());
components/camel-sql/src/main/java/org/apache/camel/component/sql/DefaultSqlPrepareStatementStrategy.java:                        Matcher paramMatcher = Pattern.compile(""\\:\\?in\\:"" + foundEscaped, Pattern.MULTILINE).matcher(query);
components/camel-yammer/src/main/java/org/apache/camel/component/yammer/scribe/JsonTokenExtractor.java:        accessTokenPattern = Pattern.compile(tokenRegex);
platforms/commands/commands-core/src/main/java/org/apache/camel/commands/internal/RegexUtil.java:     * @return regex string that could be fed to Pattern.compile
tests/camel-itest-spring-boot/src/main/java/org/apache/camel/itest/springboot/command/UnitTestCommand.java:        Pattern pattern = Pattern.compile(config.getUnitTestInclusionPattern());
tests/camel-itest-spring-boot/src/main/java/org/apache/camel/itest/springboot/command/UnitTestCommand.java:            Pattern exclusionPattern = Pattern.compile(config.getUnitTestExclusionPattern());
tests/camel-itest-spring-boot/src/test/java/org/apache/camel/itest/springboot/util/ArquillianPackager.java:        Pattern pattern = Pattern.compile(regex);
tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java:            propertyNamePattern = Pattern.compile(excludeConfigNames);
tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/AbstractApiMethodGeneratorMojo.java:            propertyTypePattern = Pattern.compile(excludeConfigTypes);
tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/JavadocApiMethodGeneratorMojo.java:        final Pattern packagePatterns = Pattern.compile(excludePackages);
tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/JavadocApiMethodGeneratorMojo.java:        final Pattern classPatterns = (excludeClasses != null) ? Pattern.compile(excludeClasses) : null;
tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/JavadocApiMethodGeneratorMojo.java:        final Pattern includeMethodPatterns = (includeMethods != null) ? Pattern.compile(includeMethods) : null;
tooling/maven/camel-api-component-maven-plugin/src/main/java/org/apache/camel/maven/JavadocApiMethodGeneratorMojo.java:        final Pattern excludeMethodPatterns = (excludeMethods != null) ? Pattern.compile(excludeMethods) : null;
onders:1483969552:2017-01-09T21:45:52.899+0000:1483969552:2017-01-09T21:45:52.899+0000:
above might be the examples of what might be improved.
mary.mistretta@gmail.com:1503498118:2017-08-23T22:21:58.541+0000:1503498118:2017-08-23T22:21:58.541+0000:i think this is done
davsclaus:1504397930:2017-09-03T08:18:50.786+0000:1504397930:2017-09-03T08:18:50.786+0000:Ah yeah lets just close this"
0,CAMEL-10085,Improvement,Minor,2.17.1,"2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Andrea Cosentino,Mateusz Nowakowski,1,4,2016-06-23 07:54:22+00:00,2016-07-05 06:59:42+00:00,"UnsafeUriCharactersEncoder.checkRAW compile regex  pattern every time it is called (and it is called really often due to stack: 
DefaultCamelContext.normalizeEndpointUri() -> URISUpport.normalizeUri() -> org.apache.camel.util.UnsafeUriCharactersEncoder.encode() -> checkRaw() -> Pattern.compile())


Under high load it leads to decrease performance.


The easiest fix is to precompile pattern:



    private static Pattern RAW_PATTERN = Pattern.compile(""RAW\\([^\\)]+\\)"");

(....)

    private static List<Pair> checkRAW(String s) {
        Matcher matcher = RAW_PATTERN.matcher(s);
        List<Pair> answer = new ArrayList<Pair>();
        // Check all occurrences
        while (matcher.find()) {
            answer.add(new Pair(matcher.start(), matcher.end()));
        }
        return answer;
    }","davsclaus:1467329049:2016-07-01T07:24:09.815+0000:1467329049:2016-07-01T07:24:09.815+0000:A PR is also welcome
http://camel.apache.org/contributing
acosentino:1467329124:2016-07-01T07:25:24.429+0000:1467329124:2016-07-01T07:25:24.429+0000:Yeah, feel free to submit a PR and I'll review it :-)
githubbot:1467610648:2016-07-04T13:37:28.268+0000:1467610648:2016-07-04T13:37:28.268+0000:GitHub user MarcinLachowicz opened a pull request:

    https://github.com/apache/camel/pull/1059

    CAMEL-10085 UnsafeUriCharactersEncoder.checkRAW...

    CAMEL-10085 UnsafeUriCharactersEncoder.checkRAW compiles regex pattern every call.
    
    This PR enables UnsafeUriCharactersEncoder to use static, precompiled pattern for checking if it matches given string. Thanks to it, performance may be improved. 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/MarcinLachowicz/camel CAMEL-10085-UnsafeUriCharactersEncoder.checkRAW-compiles-regex-pattern-every-call

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1059.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1059
    
----
commit 60fbb15c4cee8f04c51aed54de3dca370754dec8
Author: Marcin Lachowicz <marcin.lachowicz@sabre.com>
Date:   2016-07-04T12:53:34Z

    CAMEL-10085 UnsafeUriCharactersEncoder.checkRAW compiles regex pattern every call

----

githubbot:1467673182:2016-07-05T06:59:42.564+0000:1467673182:2016-07-05T06:59:42.564+0000:Github user MarcinLachowicz closed the pull request at:

    https://github.com/apache/camel/pull/1059
"
0,CAMEL-10084,Bug,Major,2.16.2,2.19.0,"
None
",Resolved,Won't Fix,2.19.0,Claus Ibsen,Richard Vigniel,1,3,2016-06-22 08:39:28+00:00,2017-03-03 10:53:41+00:00,"Hi,


in AggregateProcessor + JdbcAggregationRepository :
the table _AGG_COMPLETED is not cleaned when AggregationStrategy.aggregate() does returns newExchange .


it is ok when aggregate() returns oldExchange,


looking at the code at these places:
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java#L662
https://github.com/apache/camel/blob/master/components/camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcAggregationRepository.java#L317
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregateProcessor.java#L694


it works as follow:
1. AggregateProcessor asks to remove oldExchange from _AGG. it gives correlationKey and oldExcange as parameter
2. JdbcAggregationRepository deletes exchange from _AGG with correlationKey and insert given exchange (oldExchange) in _AGG_COMPLETED 
3. AggregateProcessor confirms exchange is complete, and ask JdbcAggregationRepository to delete aggregated exchange from _AGG_COMPLETED


if aggregated exchange does not have the same id as oldExchange, point 3 does nothing and oldExchange stays in _AGG_COMPLETED


the problem seems to be in point 2, the aggregatedExchange should be given instead of oldExchange.


the aggregation works fine, but the _AGG_COMPLETED fills up and recovery will definitely not work in this scenario.


workaround: always return oldExchange in AggregationStrategy.aggregate()","davsclaus:1466721729:2016-06-24T06:42:09.230+0000:1466721729:2016-06-24T06:42:09.230+0000:Can you work on a code patch that shows what code changes you suggest? And if possible an unit test to verify this.
rvigniel:1467263656:2016-06-30T13:14:16.966+0000:1467263656:2016-06-30T13:14:16.966+0000:suggested patch on camel-core and camel-sql

other RecoverableAggregationRepositories have to be adapted. I introduced a new method ""preConfirm"" in RecoverableAggregationRepository
rvigniel:1467331565:2016-07-01T08:06:05.970+0000:1467331586:2016-07-01T08:06:26.946+0000:we can even optimise the repository, testing    
         if(isUseRecovery()) {
...
}

before inserting and removing the aggregated exchange, in preConfirm() and confirm() methods.
davsclaus:1488505603:2017-03-03T09:46:43.543+0000:1488505603:2017-03-03T09:46:43.543+0000:Yes users should favor returning oldExchange in the aggregation repository, as that holds the base for the aggregated group
davsclaus:1488505815:2017-03-03T09:50:15.398+0000:1488505815:2017-03-03T09:50:15.398+0000:We cannot optimize as confirm is always called according to the contract
davsclaus:1488507707:2017-03-03T10:21:47.432+0000:1488507707:2017-03-03T10:21:47.432+0000:Your patch file is sadly incomplete and do NOT include all the files / changes.
davsclaus:1488508060:2017-03-03T10:27:40.074+0000:1488508060:2017-03-03T10:27:40.074+0000:There is a slight chance that you will delete and insert using separate methods (not in same TX) and it can do the first but fail on the 2nd.
davsclaus:1488508100:2017-03-03T10:28:20.921+0000:1488508100:2017-03-03T10:28:20.921+0000:I have amended the javadoc to indicate to favor returning old exchange
davsclaus:1488509621:2017-03-03T10:53:41.178+0000:1488509621:2017-03-03T10:53:41.178+0000:Camel will now log a WARN if it detect newExchange being returned so users can take not and correct their code"
0,CAMEL-10083,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,xlogger,0,2,2016-06-22 07:30:42+00:00,2016-06-24 14:37:06+00:00,"Refer to http://stackoverflow.com/questions/37958201/apache-camel-batch-ftp-upload-then-disconnect/ 


Currently there is ""disconnect=false"" option in camel-ftp component which will retain FTP connection after multiple files upload. The connection will be closed only if the FTP server timeout my connection


Wish to have one more option (e.g. ""disconnectOnBatchComplete"") which allow the ftp connection to close immediately after a batch of file upload completed","davsclaus:1466721643:2016-06-24T06:40:43.124+0000:1466721643:2016-06-24T06:40:43.124+0000:This requires a new option, and then you check for the header batch complete == true at
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/Exchange.java#L89

That header is only set for the last file processed from a batch. If the header is not present then the default disconnect option is used."
0,CAMEL-10082,Bug,Major,"2.17.1, 2.18.0","2.17.3, 2.18.0","
None
",Resolved,Fixed,"2.17.3, 2.18.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2016-06-21 18:42:45+00:00,2016-06-21 23:09:48+00:00,ApiMethodParser.forName() doesn't handle inner class names of the format package.OutClass.InnerClass from camel-api-component-maven-plugin's Javadoc parser. It needs to convert class names in this human readable format to package.OutClass$InnerClass form as expected by Class.forName().,"dhirajsb:1466521788:2016-06-21T23:09:48.535+0000:1466521788:2016-06-21T23:09:48.535+0000:Fixed with commits on master and cherry-picked onto camel-2.17.x
master: https://github.com/apache/camel/commit/201583bce4bab6dda27b5e107b63af8d23a544f3
camel-2.17.x: https://github.com/apache/camel/commit/1192cbd2de0a961c2480510db2495571b43295e4"
0,CAMEL-10081,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,2,2016-06-21 09:01:28+00:00,2016-08-02 12:41:41+00:00,We should look at all the readme.md files for the osgi examples and make their instructions to be for karaf 4. See for example: https://github.com/apache/camel/commit/13d1255ec54467093aefe4c18f19a50bb736da6b,"githubbot:1470051256:2016-08-01T19:34:16.526+0000:1470051256:2016-08-01T19:34:16.526+0000:GitHub user DariusX opened a pull request:

    https://github.com/apache/camel/pull/1097

    CAMEL-10081: Update Readme for Karaf 4 style

    Searched for readme.md files and changed the commands to use Karaf 4 style

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/DariusX/camel CAMEL-10081-KARAF4

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1097.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1097
    
----

----

githubbot:1470112901:2016-08-02T12:41:41.788+0000:1470112901:2016-08-02T12:41:41.788+0000:Github user DariusX closed the pull request at:

    https://github.com/apache/camel/pull/1097
"
0,CAMEL-10080,Improvement,Major,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2016-06-21 08:11:43+00:00,2016-06-21 10:25:49+00:00,"This patch allows CxfPayloadConverter to use XMLStreamReader based converter when converting StAX based CxfPayload instances into InputStream or Reader, thereby avoiding instantiating an intermediate large memory object such as String or DOM Document or a temporary cache file on the file system.",
0,CAMEL-10079,Task,Minor,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-21 06:46:21+00:00,2016-06-21 07:18:31+00:00,No Desc,
0,CAMEL-10078,New Feature,Minor,2.17.1,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,bhavishya,0,3,2016-06-21 05:38:23+00:00,2016-07-01 07:25:56+00:00,"Hi,


Generally message are sorted as per tag key. Some venue  accept message in different order  . I would request you to please provide this feature in Next release. If not possible due to time constraint. Please give me hint so i can customise myself .","lb:1466459818:2016-06-21T05:56:58.990+0000:1466459818:2016-06-21T05:56:58.990+0000:As far as I can remember, FIX protocol does not impose any ordering except for repeating groups and some header/trailing fields however, this functionality should be eventually supported by quickfix-j so camel can expose it.

Can you provide some examples ?
bhavishyagoyal:1466461259:2016-06-21T06:20:59.749+0000:1466461259:2016-06-21T06:20:59.749+0000:Hi,

As you can see following quickfixj JIRA .
http://www.quickfixj.net/jira/browse/QFJ-512

You can see there we can rebuild quickfixj and support custom ordering in field. What is the process if we want to do same things in quickfixj Apache camel.

lb:1466461922:2016-06-21T06:32:02.499+0000:1466461922:2016-06-21T06:32:02.499+0000:Assuming you are using a compatible version, you should add your custom quickfix-j dependency replacing the one used by camel, how depend on the build system
davsclaus:1467329156:2016-07-01T07:25:56.294+0000:1467329156:2016-07-01T07:25:56.294+0000:This needs to be supported natively by quickfix/j and they do not do that."
0,CAMEL-10077,Task,Trivial,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,A.M.,0,2,2016-06-20 14:22:20+00:00,2016-08-05 06:27:42+00:00,"steps to reproduce.



go to http://camel.apache.org/file2.html
scroll untill ""Using a JPA based idempotent repository""
under the sentence ""Then we need to setup a Spring jpaTemplate in the spring XML file:"" there is the following error message:
""Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20""","davsclaus:1466805222:2016-06-25T05:53:42.382+0000:1466805222:2016-06-25T05:53:42.382+0000:People is welcome to help with the wiki documentation.
http://camel.apache.org/how-do-i-edit-the-website.html
dariusx:1470054352:2016-08-01T20:25:52.843+0000:1470054352:2016-08-01T20:25:52.843+0000:This particular error is because the snippet markers were removed during the ticket: CAMEL-5932
https://issues.apache.org/jira/browse/CAMEL-5932, with the following comment:
""It replaces the use of Spring's JpaTemplate with direct usage of EntityManager within a TransactionTemplate""

The reference to the jpaTemplate was removed from the spring.xml file.
So, I assume that means this Wiki markup should be removed from the docs, but I'm not sure ?
davsclaus:1470091966:2016-08-02T06:52:46.687+0000:1470091966:2016-08-02T06:52:46.687+0000:Yeah just remove that section.

And mind that the doumentation is now in the source code as well. So you need to update this file also:
https://github.com/apache/camel/blob/master/camel-core/src/main/docs/file.adoc

The wiki will be replaced by the source code docs in the future so we can get rid of wiki as said on
http://camel.apache.org/contributing.html


davsclaus:1470349662:2016-08-05T06:27:42.429+0000:1470349662:2016-08-05T06:27:42.429+0000:Thanks Darius"
0,CAMEL-10076,Bug,Major,"2.16.0, 2.17.0",,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,sander hautvast,0,1,2016-06-20 11:27:04+00:00,2016-08-10 09:05:59+00:00,"this works up to camel 2.15.6 and stops working in 2.16.0 and higher:


from(""jetty:http://0.0.0.0:8080/ping"").log(""${in.body}"").setBody(constant(""bar""));


in the affected versions the log is written, but the client keeps waiting for a response


build.gradle:
plugins {
  id 'java'
  id 'eclipse'
}


repositories {
  jcenter()
}


sourceCompatibility = '1.8'
targetCompatibility = '1.8'


ext.camelVersion='2.17.1'


dependencies{  	
	compile group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.3.5.RELEASE'
	compile group: 'org.apache.camel', name: 'camel-spring-boot', version: ""$camelVersion""	
	compile group: 'org.apache.camel', name: 'camel-jetty', version: ""$camelVersion""
}


complete code:
import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;


@SpringBootApplication
public class App {


    public static void main(String[] args) 

{
        SpringApplication.run(App.class, args);
    }


    @Bean
    RoutesBuilder myRouter() {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""jetty:http://0.0.0.0:8080/ping"").log(""${in.body}"").setBody(constant(""bar""));


            }


        };
    }
}",
0,CAMEL-10075,Task,Trivial,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Paolo Antinori,0,2,2016-06-20 10:58:50+00:00,2016-08-05 06:27:02+00:00,"Doc page reports this error:



Error formatting macro: snippet: java.lang.IndexOutOfBoundsException: Index: 20, Size: 20




See attached screenshot","davsclaus:1466805207:2016-06-25T05:53:27.320+0000:1466805207:2016-06-25T05:53:27.320+0000:People is welcome to help with the wiki documentation.
http://camel.apache.org/how-do-i-edit-the-website.html
dariusx:1470055895:2016-08-01T20:51:35.197+0000:1470055895:2016-08-01T20:51:35.197+0000:I found that these snippets are supposed to be in these 2 files:
camel/trunk/tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-16.xml
camel/trunk/tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi/blueprint/blueprint-17.xml

but these files do not exist any more. They were removed on Apr 18, 2016 with the comment: 
""Delete all the karaf and osgi tests that do not work...""

I could go ahead and put a sample directly in the documentation, instead of pointing to a snippet. Is that okay?
davsclaus:1470092019:2016-08-02T06:53:39.527+0000:1470092019:2016-08-02T06:53:39.527+0000:Yeah sure you can find the old files in older releases of Camel, eg look on github in older branches
https://github.com/apache/camel/tree/camel-2.17.x/tests/camel-itest-osgi/src/test/resources/org/apache/camel/itest/osgi
davsclaus:1470349622:2016-08-05T06:27:02.609+0000:1470349622:2016-08-05T06:27:02.609+0000:Thanks Darius, the website is now correct"
0,CAMEL-10074,Improvement,Minor,2.18.0,,"
None
",Resolved,Fixed,None,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-20 08:57:57+00:00,2016-06-20 13:59:26+00:00,No Desc,
0,CAMEL-10073,Improvement,Minor,None,,"
None
",Closed,Won't Fix,None,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-20 08:56:04+00:00,2016-06-20 13:55:18+00:00,No Desc,lb:1466402118:2016-06-20T13:55:18.755+0000:1466402118:2016-06-20T13:55:18.755+0000:No easy way to watch for a catalog service
0,CAMEL-10072,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-20 08:52:45+00:00,2016-06-20 13:59:20+00:00,No Desc,
0,CAMEL-10071,Improvement,Minor,2.17.1,2.18.0,"
None
",Resolved,Implemented,2.18.0,Unassigned,Daniel Pocock,0,3,2016-06-18 18:47:56+00:00,2016-09-03 10:07:18+00:00,"Trying to use log4j 2.x and the log4j-1.2-api (to emulate log4j 1.2 support), starting a route with camel-sip fails to initialize:


Failed to create Producer for endpoint: Endpoint[sip://test@... stackName=client]. Reason: javax.sip.PeerUnavailableException: The Peer SIP Stack: gov.nist.javax.sip.SipStackImpl could not be instantiated. Ensure the Path Name has been set.


Further down the stack trace, it has:


Caused by: java.lang.NoClassDefFoundError: org/apache/log4j/SimpleLayout
	at java.lang.Class.forName0(Native Method)
	at java.lang.Class.forName(Class.java:190)
	at gov.nist.javax.sip.SipStackImpl.<init>(SipStackImpl.java:666)
	... 65 more


Caused by: java.lang.ClassNotFoundException: org.apache.log4j.SimpleLayout
	at java.net.URLClassLoader$1.run(URLClassLoader.java:366)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:355)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:354)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:425)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:358)
	... 68 more


The original log4j 1.2.x JAR needs to be on the classpath to provide that class.


The problem is at SipStackImpl.java:666 which appears to be in the dependency jain-sip-api-1.2.jar","davsclaus:1466460576:2016-06-21T06:09:36.573+0000:1466460576:2016-06-21T06:09:36.573+0000:Sound like you should report this to the SIP project. Dont think Camel can do much anything about what dependencies the SIP uses or do not use.
daniel.pocock:1466462984:2016-06-21T06:49:44.022+0000:1466462984:2016-06-21T06:49:44.022+0000:As it involves logging, it impacts the way it is used in a framework.  It also appeared on the Service Mix mailing list, so I thought it useful to fully document the issue here.  Another developer is looking at it more closely as Jitsi also uses this JAR.

There may be a workaround involving a system property and that could be coded into the camel-sip component if the issue isn't resolved with an upstream change.


lb:1472796884:2016-09-02T14:14:44.131+0000:1472796884:2016-09-02T14:14:44.131+0000:You could add log4j-over-slf4j as a workaround:

{code:xml}
<dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>log4j-over-slf4j</artifactId>
      <artifactId>${slf4j-version}</artifactId>
      <scope>test</scope>
</dependency>
{code}
davsclaus:1472868438:2016-09-03T10:07:18.132+0000:1472868438:2016-09-03T10:07:18.132+0000:Thanks Luca.

"
0,CAMEL-10070,Improvement,Major,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2016-06-17 22:21:05+00:00,2016-06-21 08:13:19+00:00,"This patch introduces a new converter for directly converting XMLStreamReader to either InputStream or Reader. The previous conversion used either DOM or String as an intermediate type which lead to an inefficient conversion.


The background information is described here.
http://camel.465427.n5.nabble.com/StAXSource-to-InputStream-direct-conversion-td5766816.html",
0,CAMEL-10069,Bug,Major,None,2.17.2,"
None
",Resolved,Fixed,2.17.2,Daniel Kulp,Daniel Kulp,0,1,2016-06-17 14:13:39+00:00,2016-06-23 14:30:30+00:00,"See https://issues.apache.org/jira/browse/KAFKA-3218


If the contextClassLoader is set, Kafka only uses that when looking for the dynamically loaded classes.   That means the users application bundle must import those classes which may not be the case since they are generally just configured in as strings.   We could pre-process those strings to check not just the application context but also the camel-kafka classloader and the kafka classloader so that the default serializers can be found.",
0,CAMEL-10068,Improvement,Minor,None,2.18.0,"

hazelcast
map

",Resolved,Fixed,2.18.0,Andrea Cosentino,Fabrizio Spataro,0,2,2016-06-17 09:48:08+00:00,2016-09-07 10:05:59+00:00,"Hello, i propose you to introduce this new feature to hazelcast component


Hazelcast Distributed Map Producer support more operations but ""keySet()"" is not implemented yet!


To resolve this improvement insert follow code into ""HazelcastMapProducer.java"" file


1. Add constant ""GET_KEYS_OPERATION""


2. Into process method add 



   case HazelcastConstants.GET_KEYS_OPERATION:
            this.getKeys(exchange);
            break;




3. add private method



     /**
     * get keys set of objects and give it back
     */
    private void getKeys(Exchange exchange) {
        exchange.getOut().setBody(this.cache.keySet());
    }




King regards","acosentino:1466128319:2016-06-17T09:51:59.984+0000:1466128319:2016-06-17T09:51:59.984+0000:Would you like to work on a PR or a patch? :-)

Contributions are welcome!
fabryprog:1466128592:2016-06-17T09:56:32.262+0000:1466128592:2016-06-17T09:56:32.262+0000:Andrea lo so... conosco camel come le mie tasche :-)

traduci tu ? :-D
acosentino:1466129834:2016-06-17T10:17:14.499+0000:1466129834:2016-06-17T10:17:14.499+0000:Sure thing :-D
acosentino:1466144578:2016-06-17T14:22:58.551+0000:1466144676:2016-06-17T14:24:36.792+0000:Thanks! :-)

I will take care of merging this :-)
fabryprog:1466144613:2016-06-17T14:23:33.650+0000:1466144657:2016-06-17T14:24:17.226+0000:Andrea, i added my patch file but Sorry!!! i cannot compile it because i cannot install jdk1.8 on current system!!!

ciao!


acosentino:1466146665:2016-06-17T14:57:45.751+0000:1466146665:2016-06-17T14:57:45.751+0000:Thanks for the patch :-)
fabryprog:1473213959:2016-09-07T10:05:59.491+0000:1473213959:2016-09-07T10:05:59.491+0000:Hello andrea, i would notify to you that this functionality is not present into official documentation!"
0,CAMEL-10067,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-06-17 07:58:12+00:00,2016-09-02 09:57:39+00:00,No Desc,
0,CAMEL-10066,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Jose Luis Pedrosa,0,5,2016-06-16 19:15:37+00:00,2016-07-15 07:41:08+00:00,"I would be nice to have a camel component for influxdb time series database.
https://influxdata.com/","acosentino:1466122778:2016-06-17T08:19:38.840+0000:1466122778:2016-06-17T08:19:38.840+0000:Do you plan to work on the component? :-)

Contributions are welcome!
acosentino:1466122812:2016-06-17T08:20:12.417+0000:1466122812:2016-06-17T08:20:12.417+0000:The Java client:

https://github.com/influxdata/influxdb-java
jlpedrosa:1466122997:2016-06-17T08:23:17.100+0000:1466122997:2016-06-17T08:23:17.100+0000:Hi Andrea

I'll say what I said in my previous patches.
 I am willing to do it, if the Apache Camel project is thinks is useful, makes sense and is willing to accept it.
acosentino:1466123152:2016-06-17T08:25:52.368+0000:1466123152:2016-06-17T08:25:52.368+0000:For me +1 :-)
acosentino:1466124732:2016-06-17T08:52:12.460+0000:1466124732:2016-06-17T08:52:12.460+0000:So [~jlpedrosa], we're waiting for you PR :-)
jlpedrosa:1466404995:2016-06-20T14:43:15.462+0000:1466404995:2016-06-20T14:43:15.462+0000:Hi [~ancosen]

Ok, I'm taking care of it, I'll create the PR when ready, sources are in this repo/branch https://github.com/jlpedrosa/camel/tree/CAMEL-10066
acosentino:1466405148:2016-06-20T14:45:48.456+0000:1466405148:2016-06-20T14:45:48.456+0000:Awesome :-)

When you'll submit the PR me and [~davsclaus] will review it :-)

Many thanks for your contribution!
jlpedrosa:1467608254:2016-07-04T12:57:34.377+0000:1467608254:2016-07-04T12:57:34.377+0000:[~davsclaus]

Can we have a look at my branch to see if you find something big missing?  ( https://github.com/jlpedrosa/camel)
acosentino:1467608719:2016-07-04T13:05:19.709+0000:1467608719:2016-07-04T13:05:19.709+0000:You should add a Karaf feature for the component here:

https://github.com/jlpedrosa/camel/blob/CAMEL-10066/platforms/karaf/features/src/main/resources/features.xml

and after that add a test for this here:

https://github.com/jlpedrosa/camel/tree/master/tests/camel-itest-karaf/src/test/java/org/apache/camel/itest/karaf


acosentino:1467608806:2016-07-04T13:06:46.740+0000:1467608806:2016-07-04T13:06:46.740+0000:Run also an 

mvn -Psourcecheck 

on your component folder, to align the style to the Camel code style
acosentino:1467608926:2016-07-04T13:08:46.420+0000:1467608926:2016-07-04T13:08:46.420+0000:Let's wait for [~davsclaus] impressions :-)
acosentino:1467609216:2016-07-04T13:13:36.565+0000:1467609216:2016-07-04T13:13:36.565+0000:Also add a folder src/main/docs with an Asciidoc inside like we are doing for all the components of Camel 2.18

and add the two placeholders

// component options: START
// component options: END

// endpoint options: START
// endpoint options: END
davsclaus:1467677761:2016-07-05T08:16:01.999+0000:1467677761:2016-07-05T08:16:01.999+0000:This is a good start.

1. You do not need to override all the start/stop/suspend/resume methods unless you have some custom logic to do.
2. Allow to configure the InfluxDB on the component level so you can configure it once
3. Maybe the database name should be part of the context-path instead of an uri parameter, if that feels more natural?
4. Is the producer going to have more operations, it can only write? Maybe add an uri parameter for the action or as part of context-path: to(""influxdb:mydatabase:write"")
   But finding the right uri syntax is not as easy and takes a little time to ""play"" to find the right balance
6. In the component you would need to take the ""remainder"" parameter and lookup the InfluxDB from the registy. Currently its essentially not in use. Only because you have a getter/setter for InfluxDB on the endpoint it can be configured. This need a bit more work.


githubbot:1468053248:2016-07-09T16:34:08.280+0000:1468053248:2016-07-09T16:34:08.280+0000:GitHub user jlpedrosa opened a pull request:

    https://github.com/apache/camel/pull/1073

    Add influx db component

    This PR covers https://issues.apache.org/jira/browse/CAMEL-10066 
    
    So far it´s a producer only components, lets do iterations to improve it later.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jlpedrosa/camel CAMEL-10066

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1073.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1073
    
----
commit 06600871dfc89637bb51493ce22f1c9d9beb778c
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-06-18T22:17:15Z

    Initial import

commit 96a82adf5506218c760ff1bc4f5f76a31cfe4d27
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-06-19T14:46:00Z

    backup, Added some tests

commit 8f83f5b6d71cccbe81875d4f6ae036e438dde492
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-06-20T14:40:21Z

    Fixed compilation. some unit tests added, backup

commit cb3285a1d25322c6efe25d59bd20a1244e06c98a
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-06-29T07:06:37Z

    Created more tests

commit 22fd0a5805b8fe9a592d3c15c53db27518dc8d53
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-07-05T11:45:22Z

    Moved connection at component level, added file for documentation (not filled test).
    DB Name is in header, not in body now

commit 02ea4a95f759ea3d91642a359ab3beaa725b4633
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-07-09T09:39:51Z

    Clean up, added documentation, moved log to file, marked component as producer only.

commit 7d073b76299fd84a2834fb310abd29bb86be97b1
Author: Jose Luis Pedrosa <jlpedrosa@gmail.com>
Date:   2016-07-09T16:30:30Z

    Tested against real influxdb instance, tests are passed also.
    Improved documentation.

----

githubbot:1468218842:2016-07-11T14:34:02.287+0000:1468218842:2016-07-11T14:34:02.287+0000:Github user jlpedrosa closed the pull request at:

    https://github.com/apache/camel/pull/1073
"
0,CAMEL-10065,Improvement,Major,None,"2.16.4, 2.17.2","
None
",Resolved,Fixed,"2.16.4, 2.17.2",Daniel Kulp,Daniel Kulp,0,1,2016-06-16 16:49:41+00:00,2016-06-22 19:50:28+00:00,"The kafka component currently takes the body of the message and sends that directly into the kafka producer then sets the callback for when that particular message is delivered to the kafka server.   This works, but is slow, particularly for thousands of little messages.  (cannot really take advantage of the batching that is done in the kafka producer)


It would be good to allow the camel-kafka producer to accept various collections (Iterable and Iterator) and have it iterator through those creating kafka messages that can be uploaded and processed in a batch.  dataformats (and aggregator) that can produce those could benefit tremendously.",
0,CAMEL-10064,Bug,Major,2.16.3,"2.17.4, 2.18.0","
None
",Resolved,Fixed,"2.17.4, 2.18.0",Claus Ibsen,Alexandre Cartapanis,0,2,2016-06-16 13:06:51+00:00,2016-09-06 08:49:08+00:00,"Trying to build a very simple HTTP proxy, exactly like described in the first code sample from http://camel.apache.org/how-to-use-camel-as-a-http-proxy-between-a-client-and-server.html.


Using wireshark to see exactly what is going on.


When i do a request on http://localhost:8080/myapp, the request that is sended to real server is http://realserverhostname:8090/myapp?bridgeEndpoint=true&throwExceptionOnFailure=false.


when i do a parameterized request http://localhost:8080/myapp?toto=tata, the request that is sended to real server is http://realserverhostname:8090/myapp?toto=tata.


So when the when there is no request param, the endpoint parameter bridgeEndpoint=true&throwExceptionOnFailure=false are sended to the realserver, and if there is param they are not sended.","acartapanis:1466058719:2016-06-16T14:31:59.247+0000:1466058719:2016-06-16T14:31:59.247+0000:Note that this is only happening with the camel-jetty component in the ""to"" endpoint.
This is not happening with camel-http or camel-http4.
davsclaus:1473122148:2016-09-06T08:35:48.281+0000:1473122148:2016-09-06T08:35:48.281+0000:Thanks I have reproduced the issue and working on a fix."
0,CAMEL-10063,Bug,Minor,2.18.0,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Manfred Dohmen,0,2,2016-06-16 12:48:14+00:00,2016-06-21 08:56:29+00:00,"Stock Karaf, unpacked, started via bin/karaf, repo-add camel + Features camel-quartz2 and camel-blueprint (2.18.0.SNAPSHOT).


Deployed a blueprint with a Camel route. Shell shows the following error on issuing this command:
karaf@root()> camel:route-info route1
Error executing command: org/apache/karaf/util/StringEscapeUtils


Log:


java.lang.NoClassDefFoundError: org/apache/karaf/util/StringEscapeUtils
	at org.apache.camel.karaf.commands.internal.StringEscape.unescapeJava(StringEscape.java:25)
	at org.apache.camel.commands.RouteInfoCommand.executeOnRoute(RouteInfoCommand.java:52)
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56)
	at org.apache.camel.karaf.commands.RouteInfo.doExecute(RouteInfo.java:35)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:34)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.console.OsgiCommandSupport.execute(OsgiCommandSupport.java:41)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.commands.basic.AbstractCommand.execute(AbstractCommand.java:34)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.compat.CommandTracker$1.execute(CommandTracker.java:112)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:67)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.impl.console.osgi.secured.SecuredCommand.execute(SecuredCommand.java:87)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.executeCmd(Closure.java:480)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.executeStatement(Closure.java:406)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Pipe.run(Pipe.java:108)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:182)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.Closure.execute(Closure.java:119)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.felix.gogo.runtime.CommandSessionImpl.execute(CommandSessionImpl.java:94)[44:org.apache.karaf.shell.core:4.0.5]
	at org.apache.karaf.shell.impl.console.ConsoleSessionImpl.run(ConsoleSessionImpl.java:270)[44:org.apache.karaf.shell.core:4.0.5]
	at java.lang.Thread.run(Thread.java:745)[:1.8.0_72]","davsclaus:1466468633:2016-06-21T08:23:53.430+0000:1466468633:2016-06-21T08:23:53.430+0000:Works fine for us. Use the user forum / mailing list to get help first.
davsclaus:1466468681:2016-06-21T08:24:41.246+0000:1466468681:2016-06-21T08:24:41.246+0000:Ah darn I did a mistake, I get the error too now.
davsclaus:1466468694:2016-06-21T08:24:54.380+0000:1466468694:2016-06-21T08:24:54.380+0000:2016-06-21 10:24:02,294 | ERROR | nsole user karaf | ShellUtil                        | 44 - org.apache.karaf.shell.core - 4.0.5 | Exception caught while executing command
java.lang.NoClassDefFoundError: org/apache/karaf/util/StringEscapeUtils
	at org.apache.camel.karaf.commands.internal.StringEscape.unescapeJava(StringEscape.java:25)
	at org.apache.camel.commands.RouteInfoCommand.executeOnRoute(RouteInfoCommand.java:52)
	at org.apache.camel.commands.AbstractRouteCommand.execute(AbstractRouteCommand.java:56)
	at org.apache.camel.karaf.commands.RouteInfo.doExecute(RouteInfo.java:35)
	at org.apache.karaf.shell.console.AbstractAction.execute(AbstractAction.java:34)[44:org.apache.karaf.shell.core:4.0.5]"
0,CAMEL-10062,Improvement,Major,2.17.1,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Aurelien Pupier,0,1,2016-06-16 08:08:29+00:00,2016-06-21 08:18:55+00:00,"For bindy dataformat, 3 different dataformats are provided:
bindy-csv
bindy-fixed
bindy-kpv


In their respective JSon there is no default value provided for the type, no defautl value is provided. it would be better to provide defautl value corresponding to their name:
bindy-csv --> Csv
bindy-fixed -> Fixed
bindy-kpv -> KeyValue


Same applies for json dataformats",
0,CAMEL-10061,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-06-16 08:00:18+00:00,2016-06-17 08:18:08+00:00,"Apache Johnzon will leave incubation soon.


I'm already working on the DataFormat related to this new library.


I think it would be good to have another alternative with Jackson and Gson.",
0,CAMEL-10060,Bug,Minor,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Nicola Ferraro,Nicola Ferraro,0,3,2016-06-15 13:39:52+00:00,2016-06-21 07:41:31+00:00,"When custom converters are included in a spring-boot nested jar, and the corresponding META-INF/services/org/apache/camel/TypeConverter declares just the package containing the converters (not their full class names), spring-boot is not able to find them.


Eg. whenever you include the camel-core test-jar in a spring-boot application, the application crashes with the attached exception. This happens only when the application is packaged and launched with `java -jar myspringboot-with-nested-jars.jar`, everything works if the application is not packaged.


I experienced the same behavior with a sample module created ad hoc. The problem is related to package scanning, when full-qualified-class names are used in the descriptor there are no problems.



2016-06-14 17:45:56.208 ERROR 27164 --- [on(3)-127.0.0.1] o.s.boot.SpringApplication               : Application startup failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'configureComponent' defined in class path resource [org/apache/camel/component/event/springboot/EventComponentAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.component.event.EventComponent]: Factory method 'configureComponent' threw exception; nested exception is org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1123) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1018) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:510) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:306) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:302) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:772) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:839) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:538) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:766) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.createAndRefreshContext(SpringApplication.java:361) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:307) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1191) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1180) [spring-boot-1.3.5.RELEASE.jar!/:1.3.5.RELEASE]
	at org.apache.camel.ITestApplication.main(ITestApplication.java:31) [test.jar!/:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:54) [test.jar!/:na]
	at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.launch(ArquillianSyncBootJarLauncher.java:44) [test.jar:na]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:61) [test.jar:na]
	at org.apache.camel.itest.springboot.arquillian.ArquillianSyncBootJarLauncher.run(ArquillianSyncBootJarLauncher.java:32) [test.jar:na]
	at org.apache.camel.itest.springboot.AbstractSpringBootTestSupport.startSpringBoot(AbstractSpringBootTestSupport.java:44) [test.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) [arquillian-junit.jar:na]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) [arquillian-junit.jar:na]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44) [arquillian-junit.jar:na]
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$StatementLifecycleExecutor.invoke(Arquillian.java:463) [arquillian-junit.jar:na]
	at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:35) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:130) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:92) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:73) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:145) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:116) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.before(EventTestRunnerAdaptor.java:108) [arquillian-core.jar:na]
	at org.jboss.arquillian.junit.Arquillian$4.evaluate(Arquillian.java:241) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:426) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$5.evaluate(Arquillian.java:259) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$7$1.invoke(Arquillian.java:319) [arquillian-junit.jar:na]
	at org.jboss.arquillian.container.test.impl.execution.BeforeLifecycleEventExecuter.on(BeforeLifecycleEventExecuter.java:35) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:130) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:92) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:73) [arquillian-core.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:94) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:145) [arquillian-core.jar:na]
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:116) [arquillian-core.jar:na]
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.fireCustomLifecycle(EventTestRunnerAdaptor.java:159) [arquillian-core.jar:na]
	at org.jboss.arquillian.junit.Arquillian$7.evaluate(Arquillian.java:312) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271) [arquillian-junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70) [arquillian-junit.jar:na]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:204) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:426) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.access$200(Arquillian.java:54) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:218) [arquillian-junit.jar:na]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:166) [arquillian-junit.jar:na]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160) [arquillian-junit.jar:na]
	at org.junit.runner.JUnitCore.run(JUnitCore.java:138) [arquillian-junit.jar:na]
	at org.jboss.arquillian.junit.container.JUnitTestRunner.execute(JUnitTestRunner.java:66) [arquillian-junit.jar:na]
	at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethodInternal(JMXTestRunner.java:135) [arquillian-container-se.jar:na]
	at org.jboss.arquillian.protocol.jmx.JMXTestRunner.runTestMethod(JMXTestRunner.java:114) [arquillian-container-se.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71) [na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252) [na:1.8.0_91]
	at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819) [na:1.8.0_91]
	at com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401) [na:1.8.0_91]
	at javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829) [na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:324) [na:1.8.0_91]
	at sun.rmi.transport.Transport$1.run(Transport.java:200) [na:1.8.0_91]
	at sun.rmi.transport.Transport$1.run(Transport.java:197) [na:1.8.0_91]
	at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_91]
	at sun.rmi.transport.Transport.serviceCall(Transport.java:196) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683) [na:1.8.0_91]
	at java.security.AccessController.doPrivileged(Native Method) [na:1.8.0_91]
	at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682) [na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[na:1.8.0_91]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[na:1.8.0_91]
	at java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_91]
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.apache.camel.component.event.EventComponent]: Factory method 'configureComponent' threw exception; nested exception is org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 163 common frames omitted
Caused by: org.apache.camel.RuntimeCamelException: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1690) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:2361) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration.configureComponent(EventComponentAutoConfiguration.java:47) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration$$EnhancerBySpringCGLIB$$44639dd6.CGLIB$configureComponent$0(<generated>) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration$$EnhancerBySpringCGLIB$$44639dd6$$FastClassBySpringCGLIB$$345be9ab.invoke(<generated>) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228) ~[spring-core-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:356) ~[spring-context-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	at org.apache.camel.component.event.springboot.EventComponentAutoConfiguration$$EnhancerBySpringCGLIB$$44639dd6.configureComponent(<generated>) ~[camel-spring-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162) ~[spring-beans-4.2.6.RELEASE.jar!/:4.2.6.RELEASE]
	... 164 common frames omitted
Caused by: org.apache.camel.TypeConverterLoaderException: Failed to load type converters because of: Cannot find any type converter classes from the following packages: [org.apache.camel.converter.myconverter]
	at org.apache.camel.impl.converter.AnnotationTypeConverterLoader.load(AnnotationTypeConverterLoader.java:119) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.converter.BaseTypeConverterRegistry.loadTypeConverters(BaseTypeConverterRegistry.java:602) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.converter.DefaultTypeConverter.doStart(DefaultTypeConverter.java:53) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:75) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:1277) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:1237) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	at org.apache.camel.impl.DefaultCamelContext.getTypeConverter(DefaultCamelContext.java:2359) ~[camel-core-2.18-SNAPSHOT.jar!/:2.18-SNAPSHOT]
	... 175 common frames omitted","davsclaus:1465969633:2016-06-15T13:47:13.766+0000:1465969633:2016-06-15T13:47:13.766+0000:The package scanning is deprecated and you should really use the FQN in the marker file to refer to your classes of type converters.
davsclaus:1465969855:2016-06-15T13:50:55.101+0000:1465969855:2016-06-15T13:50:55.101+0000:A custom implementation of PackageScanClassResolver (extending the default) is likely needed for spring boot to be able to scan inside spring boot fat JARs
nferraro:1465970206:2016-06-15T13:56:46.966+0000:1465970206:2016-06-15T13:56:46.966+0000:Yes, actually, I didn't want to use it, it's the camel-core test-jar, that is included transitively by several modules in test scope, that requires package scanning (making integration tests fail). I reported it also to understand if the same technique of package scanning is used elsewhere for some core feature.
githubbot:1466085814:2016-06-16T22:03:34.370+0000:1466085814:2016-06-16T22:03:34.370+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1041

    CAMEL-10060: Added fat-jar aware package scan class resolver

    I've noticed that many modules currently use the package scan class resolver to find specific classes, so CAMEL-10060 is not related to custom converters only. Without a fat-jar-aware package scanner, some users could be unable to run a spring-boot multi-module project or use extension libraries.
    
    I extended the default class resolver, to let it search inside nested jars. The new resolver is configured automatically in the camel context when the spring-boot library is imported.
    
    I tested it with the offending jar and it works. If this gets merged, I'll add a specific integration test in the new spring-boot suite.
    
    Note: I needed to change the modifier of a private method of a core class (`DefaultPackageScanClassResolver`), in order to extend it without rewriting a lot of code. I think we should not care about version compatibility here, but I'm not sure.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10060

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1041.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1041
    
----
commit ac985393343a0192e8fbcf7253e59759f5418cc6
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-06-16T21:37:22Z

    CAMEL-10060: Added fat-jar aware package scan class resolver

----

davsclaus:1466462731:2016-06-21T06:45:31.478+0000:1466462731:2016-06-21T06:45:31.478+0000:Thanks for the PR
githubbot:1466466091:2016-06-21T07:41:31.600+0000:1466466091:2016-06-21T07:41:31.600+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1041
"
0,CAMEL-10059,New Feature,Minor,None,2.18.0,"

camel-salesforce
jackson2
salesforce

",Resolved,Fixed,2.18.0,Claus Ibsen,Sune Keller,0,2,2016-06-15 07:46:18+00:00,2016-06-16 06:35:18+00:00,"See GitHub PR: https://github.com/apache/camel/pull/1033


Also upgrades to Jackson 2.x to allow injecting a custom ObjectMapper into SalesforceEndpointConfig, which in turn allows registering the Jdk8Module when using Java 1.8, which handles (de)serializing of Optional<?> in a reasonable manner. Jackson 1.x does not have the Jdk8Module.


Note that this requires that the project using the plugin is itself using Java 1.8+.


To use Jdk8Module, add this dependency:



		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jdk8</artifactId>
		</dependency>




Then configure a custom ObjectMapper like the following snippet:



import org.apache.camel.component.salesforce.SalesforceEndpointConfig;
...
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
...
	@Bean
	public SalesforceEndpointConfig salesforceEndpointConfig() {
		SalesforceEndpointConfig salesforceEndpointConfig = new SalesforceEndpointConfig();
		...
		ObjectMapper objectMapper = new ObjectMapper();
		objectMapper.registerModule(new Jdk8Module());
		objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
		salesforceEndpointConfig.setObjectMapper(objectMapper);
		return salesforceEndpointConfig;
	}","sirlatrom:1465949007:2016-06-15T08:03:27.500+0000:1465949007:2016-06-15T08:03:27.500+0000:Ping [~davsclaus]
davsclaus:1466030118:2016-06-16T06:35:18.520+0000:1466030118:2016-06-16T06:35:18.520+0000:Thanks for the PR"
0,CAMEL-10058,Improvement,Major,None,"2.16.4, 2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2016-06-15 07:28:04+00:00,2016-06-15 08:36:14+00:00,"As MESSAGE datafFormat means send the underlying stream as is,  but messageType=text   won't send the message as stream, should throw an exception to make this incorrect configuration more visible.",
0,CAMEL-10057,Improvement,Major,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Angel Segarra,0,3,2016-06-14 23:10:52+00:00,2016-07-30 06:59:20+00:00,Currently the spring-batch:jobName component cannot find the jobName in the registry if the project is configured with modular=true in Spring Batch. In a modular batch project the jobs are created in a child context and reference to the Job is typically located using the configured JobRegistry. I suggest an option for injecting a JobRegistry that if set is used to locate Jobs instead of directly in the camel registry.,"davsclaus:1466905144:2016-06-26T09:39:04.079+0000:1466905144:2016-06-26T09:39:04.079+0000:You are welcome to work on a patch / PR
http://camel.apache.org/contributing
githubbot:1469790482:2016-07-29T19:08:02.951+0000:1469790482:2016-07-29T19:08:02.951+0000:GitHub user asegarra opened a pull request:

    https://github.com/apache/camel/pull/1094

    CAMEL-10057: add optional JobRegistry

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/asegarra/camel CAMEL-10057

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1094.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1094
    
----
commit 697ff58ced3f38f75119e0fa60314087df5818c9
Author: asegarra <angelsegarra@outlook.com>
Date:   2016-07-29T18:27:26Z

    CAMEL-10057: add optional JobRegistry

----

davsclaus:1469833158:2016-07-30T06:59:18.957+0000:1469833158:2016-07-30T06:59:18.957+0000:Thanks for the PR
githubbot:1469833160:2016-07-30T06:59:20.175+0000:1469833160:2016-07-30T06:59:20.175+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1094
"
0,CAMEL-10056,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-14 12:19:09+00:00,2016-06-14 12:43:08+00:00,No Desc,
0,CAMEL-10055,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-14 12:16:55+00:00,2016-06-14 12:42:59+00:00,No Desc,
0,CAMEL-10054,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.20.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2016-06-14 10:23:56+00:00,2017-06-21 16:28:41+00:00,See http://atomix.io/,lb:1498033721:2017-06-21T16:28:41.740+0000:1498033721:2017-06-21T16:28:41.740+0000:Documentation needs to be improved
0,CAMEL-10053,Bug,Major,2.16.2,,"
None
",Closed,Not A Bug,None,Unassigned,David Cornforth,0,3,2016-06-13 17:05:59+00:00,2016-06-16 07:29:19+00:00,"If I use the charset option when consuming from a non UTF8 encoded file and then unmarshal the result using a bindy object the result is either an exception or incorrect data.  Below are some unit tests that illustrate the issue.  The UTF8 ones work, but all of the Cp922 ones fail for a variety of reasons, both using BindyFixedLengthDataFormat and BindyCsvDataFormat.  I have only tested this with Cp922, but it may be the case that other non-standard encodings also exhibit the same behaviour.



import org.apache.camel.EndpointInject;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.dataformat.bindy.annotation.CsvRecord;
import org.apache.camel.dataformat.bindy.annotation.DataField;
import org.apache.camel.dataformat.bindy.annotation.FixedLengthRecord;
import org.apache.camel.dataformat.bindy.csv.BindyCsvDataFormat;
import org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.After;
import org.junit.Test;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class BindyEncodingTest extends CamelTestSupport {

    private static final String RESULT_FIXED_LENGTH_UTF8 = ""mock:result_fixed_length_utf8"";
    private static final String RESULT_FIXED_LENGTH_CP922 = ""mock:result_fixed_length_cp922"";
    private static final String RESULT_CSV_UTF8 = ""mock:result_csv_utf8"";
    private static final String RESULT_CSV_CP922 = ""mock:result_csv_cp922"";

    private static final String TMP = ""C:/tmp"";
    private static final String FIXED_LENGTH_UTF8 = ""BindyEncodingTest.FixedLength.utf8.txt"";
    private static final String FIXED_LENGTH_CP922 = ""BindyEncodingTest.FixedLength.cp922.txt"";
    private static final String CSV_UTF8 = ""BindyEncodingTest.csv.utf8.txt"";
    private static final String CSV_CP922 = ""BindyEncodingTest.csv.cp922.txt"";

    @EndpointInject(uri = RESULT_FIXED_LENGTH_UTF8)
    protected MockEndpoint resultEndpointFixedLengthUtf8;

    @EndpointInject(uri = RESULT_FIXED_LENGTH_CP922)
    protected MockEndpoint resultEndpointFixedLengthCp922;

    @EndpointInject(uri = RESULT_CSV_UTF8)
    protected MockEndpoint resultEndpointCsvUtf8;

    @EndpointInject(uri = RESULT_CSV_CP922)
    protected MockEndpoint resultEndpointCsvCp922;

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""file://""+TMP+""?fileName=""+ FIXED_LENGTH_UTF8 +""&charset=UTF8"")
                        .unmarshal(new BindyFixedLengthDataFormat(FixedLengthBindy.class))
                        .to(RESULT_FIXED_LENGTH_UTF8);

                from(""file://""+TMP+""?fileName=""+ FIXED_LENGTH_CP922 +""&charset=Cp922"")
                        .unmarshal(new BindyFixedLengthDataFormat(FixedLengthBindy.class))
                        .to(RESULT_FIXED_LENGTH_CP922);

                from(""file://""+TMP+""?fileName=""+ CSV_UTF8 +""&charset=UTF8"")
                        .unmarshal(new BindyCsvDataFormat(CsvBindy.class))
                        .to(RESULT_CSV_UTF8);

                from(""file://""+TMP+""?fileName=""+ CSV_CP922 +""&charset=Cp922"")
                        .unmarshal(new BindyCsvDataFormat(CsvBindy.class))
                        .to(RESULT_CSV_CP922);
            }
        };
    }

    @After
    public void after() throws InterruptedException {
        assertMockEndpointsSatisfied();
    }

    /* works */
    @Test
    public void fixedLengthUtf8() throws IOException, InterruptedException {
        byte[] input = new byte[]{
                (byte)0xC3,(byte)0x85, // Å
                (byte)0xC3,(byte)0x98, // Ø
                (byte)0xC3,(byte)0x86, // Æ
                (byte)0x33,(byte)0x34,(byte)0x35,(byte)0x36,(byte)0x37,(byte)0x38,(byte)0x39 // 3456789
        };

        writeFile(TMP+""/""+ FIXED_LENGTH_UTF8, input);
        resultEndpointFixedLengthUtf8.expectedMessageCount(1);
        Thread.sleep(5000);

        Object body = resultEndpointFixedLengthUtf8.getExchanges().get(0).getIn().getBody();
        assertTrue(""The message body is null"", body != null);
        assertTrue(body instanceof FixedLengthBindy);
        FixedLengthBindy fixedLengthBindy = (FixedLengthBindy) body;
        assertEquals(""First is incorrect"",""Å"",fixedLengthBindy.getFirst());
        assertEquals(""Second is incorrect"",""ØÆ"",fixedLengthBindy.getSecond());
        assertEquals(""Third is incorrect"",""345678"",fixedLengthBindy.getThird());
        assertEquals(""Fourth is incorrect"",""9"",fixedLengthBindy.getFourth());
        System.out.println(body);
    }

    /* fails with java.lang.StringIndexOutOfBoundsException */
    @Test
    public void fixedLengthCp922() throws IOException, InterruptedException {
        // ftp://ftp.software.ibm.com/software/globalization/gcoc/attachments/CP00922.pdf
        byte[] input = new byte[]{
                (byte)0xC5, // Å
                (byte)0xD8, // Ø
                (byte)0xC6, // Æ
                (byte)0x33,(byte)0x34,(byte)0x35,(byte)0x36,(byte)0x37,(byte)0x38,(byte)0x39 // 3456789
        };

        writeFile(TMP + ""/"" + FIXED_LENGTH_CP922, input);
        resultEndpointFixedLengthCp922.expectedMessageCount(1);
        Thread.sleep(5000);

        Object body = resultEndpointFixedLengthCp922.getExchanges().get(0).getIn().getBody();
        assertTrue(""The message body is null"", body != null);
        assertTrue(body instanceof FixedLengthBindy);
        FixedLengthBindy fixedLengthBindy = (FixedLengthBindy) body;
        assertEquals(""First is incorrect"",""Å"",fixedLengthBindy.getFirst());
        assertEquals(""Second is incorrect"",""ØÆ"",fixedLengthBindy.getSecond());
        assertEquals(""Third is incorrect"",""345678"",fixedLengthBindy.getThird());
        assertEquals(""Fourth is incorrect"",""9"",fixedLengthBindy.getFourth());
        System.out.println(body);
    }

    /* fails as Third is incorrect */
    @Test
    public void fixedLengthCp922a() throws IOException, InterruptedException {
        // ftp://ftp.software.ibm.com/software/globalization/gcoc/attachments/CP00922.pdf
        byte[] input = new byte[]{
                (byte)0x31,(byte)0x32,(byte)0x33,(byte)0x34,(byte)0x35,(byte)0x36,(byte)0x37, // 1234567
                (byte)0xD8, // Ø
                (byte)0xC6, // Æ
                (byte)0xC5 // Å
        };

        writeFile(TMP + ""/"" + FIXED_LENGTH_CP922, input);
        resultEndpointFixedLengthCp922.expectedMessageCount(1);
        Thread.sleep(5000);

        Object body = resultEndpointFixedLengthCp922.getExchanges().get(0).getIn().getBody();
        assertTrue(""The message body is null"", body != null);
        assertTrue(body instanceof FixedLengthBindy);
        FixedLengthBindy fixedLengthBindy = (FixedLengthBindy) body;
        assertEquals(""First is incorrect"",""1"",fixedLengthBindy.getFirst());
        assertEquals(""Second is incorrect"",""23"",fixedLengthBindy.getSecond());
        assertEquals(""Third is incorrect"",""4567ØÆ"",fixedLengthBindy.getThird());
        assertEquals(""Fourth is incorrect"",""Å"",fixedLengthBindy.getFourth());
        System.out.println(body);
    }

    /* works */
    @Test
    public void csvUtf8() throws IOException, InterruptedException {
        byte[] input = new byte[]{
                (byte)0xC3,(byte)0x85, // Å
                (byte)0x2C, // ,
                (byte)0xC3,(byte)0x98, // Ø
                (byte)0xC3,(byte)0x86, // Æ
                (byte)0x2C, // ,
                (byte)0x33,(byte)0x34,(byte)0x35,(byte)0x36,(byte)0x37,(byte)0x38,
                (byte)0x2C, // ,
                (byte)0x39 // 3456789
        };

        writeFile(TMP+""/""+ CSV_UTF8, input);
        resultEndpointCsvUtf8.expectedMessageCount(1);
        Thread.sleep(5000);

        Object body = resultEndpointCsvUtf8.getExchanges().get(0).getIn().getBody();
        assertTrue(""The message body is null"", body != null);
        assertTrue(body instanceof CsvBindy);
        CsvBindy csvBindy = (CsvBindy) body;
        assertEquals(""First is incorrect"",""Å"",csvBindy.getFirst());
        assertEquals(""First is incorrect"",""ØÆ"",csvBindy.getSecond());
        assertEquals(""First is incorrect"",""345678"",csvBindy.getThird());
        assertEquals(""First is incorrect"",""9"",csvBindy.getFourth());
        System.out.println(body);
    }

    /* fails as First is incorrect */
    @Test
    public void csvCp922() throws IOException, InterruptedException {
        // ftp://ftp.software.ibm.com/software/globalization/gcoc/attachments/CP00922.pdf
        byte[] input = new byte[]{
                (byte)0xC5, // Å
                (byte)0x2C, // ,
                (byte)0xD8, // Ø
                (byte)0xC6, // Æ
                (byte)0x2C, // ,
                (byte)0x33,(byte)0x34,(byte)0x35,(byte)0x36,(byte)0x37,(byte)0x38, // 345678
                (byte)0x2C, // ,
                (byte)0x39  // 9
        };

        writeFile(TMP+""/""+ CSV_CP922, input);
        resultEndpointCsvCp922.expectedMessageCount(1);
        Thread.sleep(5000);

        Object body = resultEndpointCsvCp922.getExchanges().get(0).getIn().getBody();
        assertTrue(""The message body is null"", body != null);
        assertTrue(""body is not List it is ""+body.getClass(), body instanceof List);
        List<?> list = (List<?>)body;
        assertEquals(""incorrect list size"", 2, list.size());
        CsvBindy csvBindy = (CsvBindy) list.get(0);
        assertEquals(""First is incorrect"",""Å"",csvBindy.getFirst());
        assertEquals(""First is incorrect"",""ØÆ"",csvBindy.getSecond());
        assertEquals(""First is incorrect"",""345678"",csvBindy.getThird());
        assertEquals(""First is incorrect"",""9"",csvBindy.getFourth());
        System.out.println(body);
    }

    private void writeFile(String path, byte[] content) throws IOException {
        Files.write(Paths.get(path),content);
    }

    @FixedLengthRecord(ignoreTrailingChars = true)
    public static class FixedLengthBindy {
        @DataField(pos = 1, length = 1) // 1
        private String first;

        @DataField(pos = 2, length = 2) // 2 - 3
        private String second;

        @DataField(pos = 3, length = 6) // 4 - 9
        private String third;

        @DataField(pos = 4, length = 1) // 10
        private String fourth;

        public String getFirst() {
            return first;
        }

        public void setFirst(String first) {
            this.first = first;
        }

        public String getSecond() {
            return second;
        }

        public void setSecond(String second) {
            this.second = second;
        }

        public String getThird() {
            return third;
        }

        public void setThird(String third) {
            this.third = third;
        }

        public String getFourth() {
            return fourth;
        }

        public void setFourth(String fourth) {
            this.fourth = fourth;
        }

        @Override
        public String toString() {
            return ""FixedLengthBindy{"" +
                    ""first='"" + first + '\'' +
                    "", second='"" + second + '\'' +
                    "", third='"" + third + '\'' +
                    "", fourth='"" + fourth + '\'' +
                    '}';
        }
    }

    @CsvRecord(separator = "","", skipFirstLine = false)
    public static class CsvBindy{
        @DataField(pos = 1)
        private String first;
        @DataField(pos = 2)
        private String second;
        @DataField(pos = 3)
        private String third;
        @DataField(pos = 4)
        private String fourth;

        public String getFirst() {
            return first;
        }

        public void setFirst(String first) {
            this.first = first;
        }

        public String getSecond() {
            return second;
        }

        public void setSecond(String second) {
            this.second = second;
        }

        public String getThird() {
            return third;
        }

        public void setThird(String third) {
            this.third = third;
        }

        public String getFourth() {
            return fourth;
        }

        public void setFourth(String fourth) {
            this.fourth = fourth;
        }

        @Override
        public String toString() {
            return ""CsvBindy{"" +
                    ""first='"" + first + '\'' +
                    "", second='"" + second + '\'' +
                    "", third='"" + third + '\'' +
                    "", fourth='"" + fourth + '\'' +
                    '}';
        }
    }
}




The relevant parts of the pom:



    <properties>
        <camel.version>2.16.2</camel.version>
    </properties>
    ...
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>1.7</source>
                    <target>1.7</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-core</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-bindy</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-jackson</artifactId>
            <version>${camel.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.camel</groupId>
            <artifactId>camel-test</artifactId>
            <version>${camel.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>2.6</version>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.4</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>1.7.21</version>
        </dependency>
    </dependencies>




Note that the tests write to the filesystem, defaulting to C:/tmp.","anoordover:1465897760:2016-06-14T17:49:20.160+0000:1465897786:2016-06-14T17:49:46.112+0000:I don't know how to solve this yet, but my guess is that the file-endpoint converts your Cp922 file to a UTF-8 stream.
In the unmarshal method the InputStream is wrapped in a InputStreamReader using the characterset defined in the exchange (Cp922).
I guess the conversion from Cp922 to UTF-8 is done twice.
I don't know how to detect that this conversion is already taken care of.
anoordover:1465915650:2016-06-14T22:47:30.967+0000:1465915745:2016-06-14T22:49:05.490+0000:The function you want isn't easy to implement in camel-bindy.
Camel-bindy can't know for sure if a transformation to another characterset is already done as with the file inbound-endpoint.
To tell bindy not to transform again you could remove the property containing the charset by adding the line:
                        .removeProperty(Exchange.CHARSET_NAME)
before the unmarshal step.
I think the best strategy is to let the developer of the route tell camel-bindy to transform or not by adding or removing the correct propery or header.
david+apache@cornforth.net:1465956390:2016-06-15T10:06:30.200+0000:1465956390:2016-06-15T10:06:30.200+0000:Thanks for looking at it [~anoordover], you are correct that adding {{.removeProperty(Exchange.CHARSET_NAME)}} to the route after the {{from(""file:...."")}} step and before the {{unmarshall}} has cleared up the errors.

I was not aware that Bindy would perform any character encoding manipulation as part of its processing though.  I can't see anything on the [documentation|http://camel.apache.org/bindy.html] that mentions its support for changing the charset as part of the bindy processing.  Perhaps if this issue is difficult to solve with a code change, it could be handled with a documentaiton update to make it clear that Bindy will use the property if it is set?

Thanks again for your time.
githubbot:1465994704:2016-06-15T20:45:04.769+0000:1465994704:2016-06-15T20:45:04.769+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1038

    CAMEL-10053: added note to documentation about characterset-conversio…

    Tried to document the behaviour seen with CAMEL-10053.
    I will close the issue.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10053

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1038.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1038
    
----
commit b21051909a8a3417279421f4576869e326c5a827
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-15T20:36:36Z

    CAMEL-10053: added note to documentation about characterset-conversion and removal of header/property

----

anoordover:1465994802:2016-06-15T20:46:42.984+0000:1465994802:2016-06-15T20:46:42.984+0000:See previous comments.
The developer can remove the characterset header and/or property to suppress the conversion being done twice.
githubbot:1466033359:2016-06-16T07:29:19.120+0000:1466033359:2016-06-16T07:29:19.120+0000:Github user anoordover closed the pull request at:

    https://github.com/apache/camel/pull/1038
"
0,CAMEL-10052,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Nicola Ferraro,0,2,2016-06-13 10:34:08+00:00,2016-06-17 09:38:59+00:00,"I think Camel should have a suite of integration tests to ensure that each module is able to run in a spring-boot environment.


I'm working on an integration test module that will execute all the checks already defined in the karaf-itest project (and hopely more) also for spring-boot deployments.","githubbot:1465966080:2016-06-15T12:48:00.666+0000:1465966080:2016-06-15T12:48:00.666+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1036

    CAMEL-10052: Spring-boot integration tests

    I created an integration test module that checks the compatibility of every component with spring-boot. For each component, it assembles a spring-boot jar and start checking the component. I've collected some small issues by running all tests with the current modules (I'll open Jiras).
    
    This is an excerpt fro the provided readme:
    
    The camel-itest-spring-boot module provides an integration testing framework for camel components, to check their compatibility with spring-boot.
    
    Each test-case defined in `src/test/java/org/apache/camel/itest/springboot` executes the following steps:
    - Creates a spring-boot jar by putting the spring-boot loader, test classes and some utility classes in the main jar,
    and all other libraries (including the camel component under test) as nested jars;
    - Launches a new JVM with the spring-boot jar in the classpath, then starts the spring-boot platform;
    - Executes a list of predefined checks in the spring-boot environment to verify that the component has been created correctly:
    checks that the camel context has been created, that the camel components can be activated (including data format and languages).
    
    **Additional options**
    
    Test options can be changed from the `src/test/resources/spring-boot-itest.properties` file.
    
    Some useful options include:
    - **includeTestDependencies (default=false)**: when this option is enabled,
    the integration test will locate the module `pom.xml` file and include in the spring-boot jar also the test-scoped dependencies of the module.
      The inclusion of other libraries often activates some hidden behaviour of spring-boot.
      *Note: logging libraries (eg. `log4j`) included in test scope are ignored, to prevent conflict with spring-boot logging system.*
    - **unitTestEnabled (default=false)**: when this option is enabled,
    the integration test will locate the test-classes of the module and run the unit tests after the execution of the usual checks.
      *Note: a full build of each component is required prior to running the unit tests. Test dependencies are implicitly included.*
    


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10052

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1036.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1036
    
----
commit 4bad78bc9f6679cd86315f915668cd948e755797
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-06-15T12:43:03Z

    CAMEL-10052: Spring-boot integration tests

----

githubbot:1465972082:2016-06-15T14:28:02.845+0000:1465972082:2016-06-15T14:28:02.845+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/1036

githubbot:1466125556:2016-06-17T09:05:56.282+0000:1466125556:2016-06-17T09:05:56.282+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/1042

    CAMEL-10052: Improvement to spring-boot integration tests

    I improved the integration tests to prevent false positives by providing the right configuration to the modules.
    
    
    Changes:
    - Components are also started whenever possible to spot more issues
    - Provided dependencies are included by default
    - Added support for including resources in the fat jar
    - Added resources required by some modules
    - Added support for additional dependencies needed by the module
    - Hibernate validator is added to modules that need it
    - Logging dependency issues are resolved automatically
    - Removed some lambdas to make it easier launching the tests on older versions of camel with java 7
    
    Now only 3 modules fail with default configuration:
    - Bindy
    - Xmlbeans
    - ZipkinStarter

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-10052-MOD

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1042.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1042
    
----
commit a441b8938d036df618990e719d2f4a140840442d
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-06-17T09:03:35Z

    CAMEL-10052: Improvement to spring-boot integration tests

----

githubbot:1466127520:2016-06-17T09:38:40.576+0000:1466127520:2016-06-17T09:38:40.576+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1042
"
0,CAMEL-10051,Bug,Minor,2.17.1,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Grigoris Grigoriadis,0,3,2016-06-12 12:46:24+00:00,2016-06-12 14:32:43+00:00,"NettyProducer returns the channel to the pool every time a message is sent when the reuseChannel is set to true. It should instead return the channel to the pool only if the exchange is completed, so that other exchanges will not use the same channel.


I have the following problem:
I need to send messages to a legacy tcp server through a REST server.
The tcp server requires messages from one connection to be send in a specific order, for example in order to send COMMAND1 I have to first send PRE1 and PRE2 and then COMMAND1. The component is set to reuseChannel=true and be sync=true and i have the following exchange:



from(""direct:command1"")
    .setBody(constant(""PRE1""))
    .to(nettyEndpoint)
    .setBody(constant(""PRE2""))
    .to(nettyEndpoint)
    .setBody(constant(""COMMAND1""))
    .to(nettyEndpoint);




The problem is that the NettyProducer returns the channel to the pool every time i send a message. So if concurrent requests are sent to the REST server things get messy. 


NettyProducer supports this behavior, if the reuseChannel is set to true the producer adds an onCompletion listener on the exchange that returns the channel to the pool. The problem is that it also sets the callback of the NettyCamelState to a NettyProducerCallback which runs every time a message is send by the ClientChannelHandler and returns the channel to the pool.","githubbot:1465707096:2016-06-12T12:51:36.002+0000:1465707096:2016-06-12T12:51:36.002+0000:GitHub user grigoriadis opened a pull request:

    https://github.com/apache/camel/pull/1026

    CAMEL-10051 - Fixed issue with reuse channel.

    When reuseChannel is set to true, channel is not returned to the pool every time a message is sent

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grigoriadis/camel CAMEL-10051

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1026.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1026
    
----
commit 5c4672b4e38cb88b5ffda8b1092ef759cec1b4e8
Author: grigoriadis <grigoriadis@itsaur.com>
Date:   2016-06-12T12:48:41Z

    CAMEL-10051 - Fixed issue with reuse channel.

----

davsclaus:1465713159:2016-06-12T14:32:39.968+0000:1465713159:2016-06-12T14:32:39.968+0000:Thanks for the PR
githubbot:1465713163:2016-06-12T14:32:43.503+0000:1465713163:2016-06-12T14:32:43.503+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1026
"
0,CAMEL-10050,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-06-12 09:46:04+00:00,2016-06-12 12:23:27+00:00,"See CAMEL-10048


If the routing slip creates many unique slip uri's then we cache error handlers. We should instead create the error handler, use it, and then delete/stop when its done.",
0,CAMEL-10049,Improvement,Minor,None,"2.16.4, 2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-06-12 07:52:52+00:00,2016-06-12 08:54:38+00:00,"See nabble
http://camel.465427.n5.nabble.com/Context-scoped-onCompletion-not-closing-RabbitMQ-connection-tp5783908.html",
0,CAMEL-10048,Bug,Major,"2.16.2, 2.16.3, 2.17.0, 2.17.1","2.16.4, 2.17.2, 2.18.0","

core
leak
routing

",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Claus Ibsen,Arseniy Tashoyan,0,2,2016-06-11 21:41:44+00:00,2018-01-04 09:11:44+00:00,"RoutingSlip has a cache of error handlers implemented as a ConcurrentHashMap. This map stores error handlers as values, and uses some synthetic objects as keys. For some kind of destinations provided in routing slip, map lookup operation does not work. Hence, new error handlers are always added to the map and existing error handlers never reused. Finally, the program runs out of memory.
The synthetic keys are actually instances of class RoutingSlip.PreparedErrorHandler. Such key is based on two objects: RouteContext and destination Processor. Neither RouteContext nor Processor do not require their implementations to provide equals() and hashCode() methods. Strictly speaking, caching implementation in RoutingSlip is incorrect, because it uses hash map in the discouraged way. However, for some cases it works.
The problem occurs when routing slip contains a 'sync' destination, in other words - destination is a Processor that does not implement AsyncProcessor interface. RoutingSlip determines destination producer via ProducerCache.doInAsyncProducer(), and the latter uses AsyncProcessorConverterHelper.convert() method. This method creates new instance of Processor for every processor that is not an instance of AsyncProcessor. This is where the problem hides: new object has different hash code (defined by Object.hashCode()) and new object isn't equal to the object used as a key in the hash map (well, Object.equals()). Finally, new key for the hash map is calculated, lookup operation cannot find this key in the hash map, new key-value pair is put into the hash map.","tashoyan:1465652859:2016-06-11T21:47:39.182+0000:1465652859:2016-06-11T21:47:39.182+0000:Adding a unit test to reproduce
tashoyan:1465653585:2016-06-11T21:59:45.321+0000:1465653585:2016-06-11T21:59:45.321+0000:How to fix?
I think, the best way is to remove this dangerous caching at all. There might be a temptation to implement equals() and hashCode() methods in the helper class AsyncProcessorConverterHelper.ProcessorToAsyncProcessorBridge in a way to delegate both these calls to the processor wrapped by this class. However, the root cause of the problem is the incorrect usage of a hash map. Key must implement equals() and hashCode(). We cannot require all implementations of Processor and RouteContext to implement these methods - it would be an unmotivated bloating of their contracts with irrelevant functionality. Error handlers in RoutingSlip are short-living objects, they shouldn't get into Old Gen, so GC will clean them without significant performance overhead.
tashoyan:1465697538:2016-06-12T10:12:18.595+0000:1465697538:2016-06-12T10:12:18.595+0000:Hello Claus,
Is it ok to use Processor as a key in a hash map? Should every implementer keep this in mind and provide equals() and hashCode()? Javadoc in Processor interface tells nothing about it."
0,CAMEL-10047,Test,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Claus Ibsen,0,2,2016-06-11 11:38:48+00:00,2016-06-25 17:47:35+00:00,"So we dont fail with bind exception such as


java.io.IOException: Failed to bind to server socket: mqtt://127.0.0.1:1883 due to: java.net.BindException: Address already in use
Caused by: java.net.BindException: Address already in use","githubbot:1465715659:2016-06-12T15:14:19.641+0000:1465715659:2016-06-12T15:14:19.641+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1027

    CAMEL-10047: camel-mqtt: dynamic port during testing

    CAMEL-10047: Enable dynamic port during test

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10047

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1027.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1027
    
----
commit 9ede4a3ef9854d8684c1f973bfeca0881f20c6d1
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-12T15:13:20Z

    CAMEL-10047: camel-mqtt: dynamic port during testing

----

githubbot:1465775396:2016-06-13T07:49:56.924+0000:1465775396:2016-06-13T07:49:56.924+0000:Github user anoordover closed the pull request at:

    https://github.com/apache/camel/pull/1027
"
0,CAMEL-10046,Bug,Major,2.17.1,,"
None
",Closed,Implemented,None,Unassigned,Kumar Abhinav,0,1,2016-06-10 23:23:32+00:00,2016-06-10 23:32:48+00:00,"Per documentation provided in kafka (http://kafka.apache.org/documentation.html#producerconfigs) acks property can have [all, -1, 0, 1] as value. Camel-kafka is mapping acks to requestRequiredAcks which is set as Integer. The property must be a string or an enum and definitely not an integer as 'all' leaves the number of acknowledgements to the configuration on the broker, rather than providing upfront in the client.",demesne:1465572768:2016-06-10T23:32:48.887+0000:1465572768:2016-06-10T23:32:48.887+0000:I see it being implemented as string already.
0,CAMEL-10045,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-06-10 14:35:51+00:00,2016-07-01 12:25:08+00:00,So you can configure this externally from your app / not hardcode. So options such as password can be loaded from a file mounted / ENV or something else.,"davsclaus:1467330940:2016-07-01T07:55:40.779+0000:1467330940:2016-07-01T07:55:40.779+0000:We can hook in a PropertySource where we can load from a file the key=value pairs. 

We could then have a convention to attempt to load a file from some default folder which contains the sensitive options.
davsclaus:1467346057:2016-07-01T12:07:37.248+0000:1467346057:2016-07-01T12:07:37.248+0000:There is a camel.springboot.fileConfigurations you can configure to point to the directorie(s) you want to load from. Loaded properties from these files take precedence over any other kind of configuration."
0,CAMEL-10044,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-06-10 14:34:18+00:00,2016-06-11 14:28:19+00:00,"So we would be aware that this is a sensitive option such as password for the FTP server and that we should not show/hide that in tooling / JMX attributes etc.


We can do this with some option to @Metadata annotation you can add to the fields in the components/endpoints/data format options.","davsclaus:1465543114:2016-06-10T15:18:34.009+0000:1465543114:2016-06-10T15:18:34.009+0000:We can then output to the json schema that an option is secret, eg secret=true|false"
0,CAMEL-10043,Bug,Major,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,2,2016-06-10 12:28:01+00:00,2016-07-04 08:54:31+00:00,Since the option is always true and we have performance degradation we need to set the default to false too.,"acosentino:1465535578:2016-06-10T13:12:58.081+0000:1465535578:2016-06-10T13:12:58.081+0000:We should set the ObjectFactory option to false for the DataFormat too.
pascal.schumacher@t-systems.com:1467593452:2016-07-04T08:50:52.534+0000:1467593471:2016-07-04T08:51:11.422+0000:The JaxbDataFormat change (objectFactory=false) breaks marshalling of non-XmlRootElement JaxB objects. In Camel 2.17.1 this worked out of the box, in Camel 2.17.2 you have to call JaxbDataFormat#setObjectFactory(true) to make it work.
acosentino:1467593671:2016-07-04T08:54:31.921+0000:1467593671:2016-07-04T08:54:31.921+0000:We should add a note to docs about this. Thanks [~pascal.schumacher@t-systems.com] :-)"
0,CAMEL-10042,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-06-10 11:04:31+00:00,2016-06-10 13:37:55+00:00,No Desc,
0,CAMEL-10041,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-06-10 07:29:29+00:00,2016-06-10 09:55:46+00:00,"Just as we generate for component options, we could do this for data formats as well.",
0,CAMEL-10040,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Claus Ibsen,0,3,2016-06-10 07:23:20+00:00,2016-07-01 07:01:12+00:00,"We are using the older 1.9.x version today.


There is a newer 2.0x that has changed maven coord to org.asynchttpclient/async-http-client","anoordover:1465559281:2016-06-10T19:48:01.057+0000:1465559281:2016-06-10T19:48:01.057+0000:The new async-http-client has transitive dependecies e.g. to netty-codec-http (4.0.37.Final).
io.netty:netty was excluded from the old async-http-client and included in de project itself.
Should we exclude the 4.0.37.Final version and include 4.1.1.Final of netty?
acosentino:1465561451:2016-06-10T20:24:11.441+0000:1465561451:2016-06-10T20:24:11.441+0000:I can take this into account.. Anyway there is a lot of work to do for this upgrade.. I will update this JIRA issue with the progress
davsclaus:1465595661:2016-06-11T05:54:21.867+0000:1465595661:2016-06-11T05:54:21.867+0000:Yeah if possible we should rely on netty 4.1, and netty 4.1 should be backwards compatible with 4.0.x.
anoordover:1465611580:2016-06-11T10:19:40.659+0000:1465611580:2016-06-11T10:19:40.659+0000:Great! I am curious how you solve certain migration problems, for example:
- SSL migration (netty4 uses its own SslContext);
- Realm-building migration (the builder expects a principal and a password.



davsclaus:1465615210:2016-06-11T11:20:10.367+0000:1465615210:2016-06-11T11:20:10.367+0000:Some migration effort for Camel end users can be expected. 

The Camel component adapts to the AHC 2.x not the other way around.
davsclaus:1467327582:2016-07-01T06:59:42.287+0000:1467327582:2016-07-01T06:59:42.287+0000:Andrea, is the migration complete? If so you can resolve this ticket
acosentino:1467327665:2016-07-01T07:01:05.525+0000:1467327665:2016-07-01T07:01:05.525+0000:Yeah, sorry. I forget to mark as Resolved :-)"
0,CAMEL-10039,Bug,Major,2.17.1,None,"

camel-linkedin

",Resolved,Fixed,"2.17.2, 2.18.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2016-06-10 06:10:34+00:00,2016-06-10 06:25:38+00:00,No Desc,dhirajsb:1465511138:2016-06-10T06:25:38.972+0000:1465511138:2016-06-10T06:25:38.972+0000:Fixed on master with commit https://github.com/apache/camel/commit/fd57cfcabcb93e64d3a51737b470faf32de1404e and cherry-picked onto camel-2.17.x branch
0,CAMEL-10038,Bug,Minor,2.15.1,"2.17.3, 2.18.0","

patch

",Closed,Fixed,"2.17.3, 2.18.0",Grzegorz Grzybek,Matthew Zipay,0,4,2016-06-09 16:13:03+00:00,2019-12-19 17:29:54+00:00,"When BlueprintPropertiesParser parses an ""augmented"" property key that is not found (i.e. value is null), it does not return the null value so that the fallbackToUnaugmentedProperty=""true"" (default) behavior can run. Instead, it immediately throws an IllegalArgumentException.
As a result, it appears to be impossible to take advantage of fallbackToUnaugmentedProperty=""true"" behavior when using the Blueprint properties resolver/parser.
I discovered this against Red Hat's JBoss Fuse impl of Camel, but am reporting it here because it appears to be a bug in base Camel. More details in comments.","MattZ:1465460357:2016-06-09T16:19:17.280+0000:1465460357:2016-06-09T16:19:17.280+0000:In DefaultPropertiesParser:

{code:language=java}
String augmentedKey = getAugmentedKey(key);
boolean shouldFallback = fallbackToUnaugmentedProperty && !key.equals(augmentedKey);

String value = doGetPropertyValue(augmentedKey);
if (value == null && shouldFallback) {
    log.debug(""Property with key [{}] not found, attempting with unaugmented key: {}"", augmentedKey, key);
    value = doGetPropertyValue(key);
}
{code}

i.e. When an augmented property key is not found (null value) the lookup is
retried with the UNaugmented property key.

However, DefaultPropertiesParser actually gets ""wrapped"" by
BlueprintPropertiesParser, and we see the following at the end of the
parseProperty(String, String, Properties) method:

{code:language=java}
if (answer == null) {
    throw new IllegalArgumentException(""Property placeholder key: "" + key + "" not found"");
}
{code}

In a nutshell:
BlueprintPP gets an augmented property key and null value, and *should* be returning null so that DefaultPP can do its fallback behavior (which will ultimately throw the IllegalArgumentException itself if the property value is still null after fallback behavior. But instead, BlueprintPP throws an exception and the fallback behavior never happens.

Actual log events demonstrating this:

Here's what SHOULD happen: (this requires disabling the Blueprint properties resolver and bypassing BlueprintPropertiesParser altogether)

{noformat}
2016-06-09 10:50:27,531 | DEBUG | rint Extender: 3 | PropertiesComponent              | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133
 | Parsed location: file:etc/example.bpp.fallback.cfg
2016-06-09 10:50:27,531 | DEBUG | rint Extender: 3 | DefaultPropertiesParser          | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Augmenting property key [CamelLogDebugBodyMaxChars] with prefix: LOCAL.
2016-06-09 10:50:27,532 | DEBUG | rint Extender: 3 | DefaultPropertiesParser          | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Property with key [LOCAL.CamelLogDebugBodyMaxChars] not found, attempting with unaugmented key: CamelLogDebugBodyMaxChars
{noformat}

But here's what ACTUALLY happens when Blueprint properties resolver and parser are used: (the defaults)

{noformat}
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | PropertiesComponent              | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Parsed location: blueprint:example-bpp-fallback-property-placeholder
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | BlueprintPropertiesParser        | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Augmenting property key [CamelLogDebugBodyMaxChars] with prefix: LOCAL.
2016-06-09 10:42:37,664 | DEBUG | rint Extender: 2 | BlueprintPropertiesParser        | ?                                   ? | 198 - org.apache.camel.camel-core - 2.15.1.redhat-620133 
 | Blueprint parsed property key: LOCAL.CamelLogDebugBodyMaxChars as value: null
2016-06-09 10:42:37,665 | ERROR | rint Extender: 2 | BlueprintCamelContext            | ?                                   ? | 204 - org.apache.camel.camel-blueprint - 2.15.1.redhat-620133
 | Error occurred during starting Camel: CamelContext(example-bpp-fallback) ... because of Error getting property: CamelLogDebugBodyMaxChars
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:1028)[198:org.apache.camel.camel-core:2.15.1.r
edhat-620133]
...
Caused by: java.lang.IllegalArgumentException: Property placeholder key: LOCAL.CamelLogDebugBodyMaxChars not found
        at org.apache.camel.blueprint.BlueprintPropertiesParser.parseProperty(BlueprintPropertiesParser.java:164)[204:org.apach
e.camel.camel-blueprint:2.15.1.redhat-620133]
{noformat}

MattZ:1465460601:2016-06-09T16:23:21.018+0000:1465460601:2016-06-09T16:23:21.018+0000:Here is an example Camel context and properties file that demonstrate the problem and one possible workaround.

Also attached is a patch (but it is *UNTESTED* at the moment).

MattZ:1465910337:2016-06-14T21:18:57.419+0000:1465910959:2016-06-14T21:29:19.708+0000:This appears to be the commit where the bug was introduced:
https://github.com/apache/camel/commit/07841d5be1175be1e9f383497588ff4e29e3008e

The thrown IllegalArgumentException was added in this commit, but I'm not sure why - it fundamentally changes (breaks) the behavior but is not directly relevant (as far as I can tell) to the stated fix in the commit message.

Is there some reason why Blueprint should explicitly *not* support falling back to unaugmented properties when the placeholder property services do not find an augmented key?
MattZ:1465976158:2016-06-15T15:35:58.714+0000:1465976158:2016-06-15T15:35:58.714+0000:Disregard the patch - it will not work. After looking into this further, and trying a number of workarounds, it is apparent that BlueprintPropertiesParser is simply not capable of handling augmented properties properly. The choice appears to be either (a) use Blueprint property placeholder and not augmented properties or (b) use augmented properties and not Blueprint property placeholder. Unfortunately this is a significant blocker for me.

I am still trying other workarounds, but at the very least the Camel documentation should be updated as it is very misleading. The documentation for fallbackToUnaugmentedProperty makes no mention of this behavior being impossible with a bridged Blueprint property placeholder, nor does camel-blueprint javadoc.
davsclaus:1466905242:2016-06-26T09:40:42.880+0000:1466905242:2016-06-26T09:40:42.880+0000:You are welcome to update the documentation. See here how to edit
http://camel.apache.org/how-do-i-edit-the-website.html
MattZ:1466954982:2016-06-26T23:29:42.038+0000:1466954982:2016-06-26T23:29:42.038+0000:Thanks, I'll look into this.
githubbot:1468420412:2016-07-13T22:33:32.913+0000:1468420412:2016-07-13T22:33:32.913+0000:GitHub user mzipay opened a pull request:

    https://github.com/apache/camel/pull/1075

    CAMEL-10038 don't throw exception if BlueprintPropertiesParser#parseP…

    …roperty would return null (breaks fallbackToUnaugmentedProperty behavior, and an exception will be thrown anyway by the parent DefaultPropertiesParser if the value is still null after fallback)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/mzipay/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1075.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1075
    
----
commit affda62f8654a2862650cdf5142371ebb4649703
Author: Zipay, Matthew <mzipay@contractor.express.com>
Date:   2016-07-13T21:51:15Z

    CAMEL-10038 don't throw exception if BlueprintPropertiesParser#parseProperty would return null (breaks fallbackToUnaugmentedProperty behavior, and an exception will be thrown anyway by the parent DefaultPropertiesParser if the value is still null after fallback)

----

MattZ:1468420722:2016-07-13T22:38:42.870+0000:1468420722:2016-07-13T22:38:42.870+0000:It does seem after all that the fix is as simple as I thought initially (simpler, actually) - just removing the thrown IllegalArgumentException from BlueprintPropertiesParser#parseProperty does the trick.

I have been running locally with a binary-patched camel-blueprint JAR containing this change, and the issue is completely resolved.

(Not sure why the throw was ever added in the first place, as the parent DefaultPropertiesParser already throws IllegalArgumentException if the property doesn't evaluate.)

I opened https://github.com/apache/camel/pull/1075 for this change, but attaching the patch here as well.
davsclaus:1468536374:2016-07-15T06:46:14.609+0000:1468536374:2016-07-15T06:46:14.609+0000:Thanks for the PR but it causes a test to fail now in camel-test-blueprint. Also it would be good if you could do an unit test that validates your use-case.

Tests run: 3, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 4.318 sec <<< FAILURE! - in org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest
test(org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest)  Time elapsed: 2.687 sec  <<< FAILURE!
java.lang.AssertionError:

Expected: ""Property placeholder key: destination not found""
     but: was ""Property with key [destination] not found in properties from text: {{destination}}""
	at org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest.setUp(ConfigAdminNoDefaultValuesBlueprintCreationTest.java:34)

test(org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest)  Time elapsed: 0.766 sec  <<< FAILURE!


ggrzybek:1468536554:2016-07-15T06:49:14.006+0000:1468536554:2016-07-15T06:49:14.006+0000:Sorry for not looking at this issue yet... I'll try next week.
ggrzybek:1468536555:2016-07-15T06:49:15.403+0000:1468536555:2016-07-15T06:49:15.403+0000:Sorry for not looking at this issue yet... I'll try next week.
MattZ:1468575897:2016-07-15T17:44:57.752+0000:1468575897:2016-07-15T17:44:57.752+0000:Ah yes, that makes sense - the exception message (when the property can't be evaluated even with fallback) is now coming from DefaultPropertiesParser rather than from BlueprintPropertiesParser. I'm working on a unit test, but haven't been able to get it into a working state yet (I opened pull request regardless because there isn't even any *existing* test case for BlueprintPropertiesParser to begin with).
MattZ:1468576205:2016-07-15T17:50:05.887+0000:1468576205:2016-07-15T17:50:05.887+0000:No worries; I have an acceptable workaround at the moment. Please take your time.

For my particular case, getting the fix merged into master doesn't even really help immediately (we are using camel-blueprint-2.15.1.redhat-620133.jar). But I wanted to make sure to get the fix in first, then go from there.

MattZ:1468928621:2016-07-19T19:43:41.256+0000:1468928621:2016-07-19T19:43:41.256+0000:I updated the pull request with a change that fixes the existing ConfigAdminNoDefaultValuesBlueprintCreationTest test case. Still working on a new test case to specifically exercise the fallback behavior for BlueprintPropertiesParser.
MattZ:1469001727:2016-07-20T16:02:07.715+0000:1576747794:2019-12-19T17:29:54.657+0000:[~davsclaus] and [~ggrzybek], the pull request now includes a unit test for the fallbackToUnaugmentedProperty relative to BlueprintPropertiesParser.

Both org.apache.camel.test.blueprint.ConfigAdminNoDefaultValuesBlueprintCreationTest and the new org.apache.camel.test.blueprint.BlueprintAugmentedPropertiesFallbackTest test cases are now passing on 2.18-SNAPSHOT.
ggrzybek:1469056610:2016-07-21T07:16:50.950+0000:1469056610:2016-07-21T07:16:50.950+0000:[~MattZ] thanks for PR. I've finally checked it and it looks good. You're right with the exception - it's not needed and the broken test was just checking wrong exception message (bad, bad idea to literally assert exception messages ;)).

Commit fix in {{master}}: https://github.com/apache/camel/commit/5127a6598582cb370dd46de6c510d0762695daaa (and later commits for tests)
Commit fix in {{camel-2.17.x}}: https://github.com/apache/camel/commit/2ffd8e0d83aa3a79c43cb73186fc7fa1ed07ca0a (and later commits for tests)

I've added yet another test to check scenario with {{fallbackToUnaugmentedProperty=""false""}}: https://github.com/apache/camel/commit/e13c890faf48fd11c3e5f716395edee16457d0fc
MattZ:1469077804:2016-07-21T13:10:04.550+0000:1469077804:2016-07-21T13:10:04.550+0000:Thanks, much appreciated!
githubbot:1469431656:2016-07-25T15:27:36.539+0000:1469431656:2016-07-25T15:27:36.539+0000:Github user mzipay closed the pull request at:

    https://github.com/apache/camel/pull/1075
"
0,CAMEL-10037,Task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Claus Ibsen,0,1,2016-06-09 13:46:53+00:00,2016-06-14 12:13:46+00:00,"The model in camel-core need javadoc for all the options so we have them documented.


[WARNING] 	Missing javadoc on models: 6
[WARNING] 		consulConfiguration
[WARNING] 		dnsConfiguration
[WARNING] 		etcdConfiguration
[WARNING] 		kubernetesConfiguration
[WARNING] 		ribbonConfiguration
[WARNING] 		serviceCall",
0,CAMEL-10006,New Feature,Major,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Jose Luis Pedrosa,0,3,2016-06-01 09:05:51+00:00,2016-06-02 08:06:51+00:00,"HI


For projects that have an uderlaying mongo database as a persistance engine, it'd be nice to create a mongodb IdempotentRepository.


If it would be accepted I can create a PR


@davsclaus
Sounds ok?","davsclaus:1464744193:2016-06-01T09:23:13.090+0000:1464744193:2016-06-01T09:23:13.090+0000:Yeah sure we love contributions
http://camel.apache.org/contributing
jlpedrosa:1464744886:2016-06-01T09:34:46.348+0000:1464744886:2016-06-01T09:34:46.348+0000:[~davsclaus]

Ok, I'll get on it. I did one last week.... 
githubbot:1464760520:2016-06-01T13:55:20.822+0000:1464760520:2016-06-01T13:55:20.822+0000:GitHub user jlpedrosa opened a pull request:

    https://github.com/apache/camel/pull/1008

    Mongo db based idempotent repository 

    PR for issue:
    https://issues.apache.org/jira/browse/CAMEL-10006

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jlpedrosa/camel PR_CAMEL10006

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1008.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1008
    
----
commit 87cef15e787d6b3727c084696d03715768e3535d
Author: Joseluis Pedrosa <joseluis.pedrosa@elephanttalk.com>
Date:   2016-06-01T13:41:49Z

    Created mongodb idempotent repository.
    https://issues.apache.org/jira/browse/CAMEL-10006

commit 28063c459aae19e29da834863897704bbfb56673
Author: Joseluis Pedrosa <joseluis.pedrosa@elephanttalk.com>
Date:   2016-06-01T13:53:36Z

    undo intellij ""magic""

----

jlpedrosa:1464760557:2016-06-01T13:55:57.814+0000:1464760557:2016-06-01T13:55:57.814+0000:Created PR
https://github.com/apache/camel/pull/1008
githubbot:1464820739:2016-06-02T06:38:59.100+0000:1464820739:2016-06-02T06:38:59.100+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1008

davsclaus:1464820784:2016-06-02T06:39:44.503+0000:1464820784:2016-06-02T06:39:44.503+0000:Thanks for the PR.

There were a checkstyle issue, you can read about how to build with at
http://camel.apache.org/building
jlpedrosa:1464821171:2016-06-02T06:46:11.398+0000:1464821171:2016-06-02T06:46:11.398+0000:[~davsclaus]

I run -Psourcecheck before and said everything was ok... I checked your ""polish"" commit... but despite the spaces...
jlpedrosa:1464825647:2016-06-02T08:00:47.579+0000:1464825647:2016-06-02T08:00:47.579+0000:Hi is there any chance this goes also to 2.17 branch? do I need to create another pull request for that branch?

also about the checkstyle: As you can see, I ran it in my branch, and gives no error at all. Any hint?
{code}
C:\Users\joseluis\Documents\Sources\camel\components\camel-mongodb>mvn compile -Psourcecheck
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: MongoDB 2.18-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-enforcer-plugin:1.4:enforce (enforce-maven) @ camel-mongodb ---
[INFO]
[INFO] --- maven-bundle-plugin:3.0.1:cleanVersions (versions) @ camel-mongodb ---
[INFO]
[INFO] --- maven-checkstyle-plugin:2.16:checkstyle (validate) @ camel-mongodb ---
[INFO] Starting audit...
Audit done.
[INFO]
[INFO] --- maven-remote-resources-plugin:1.5:process (default) @ camel-mongodb ---
[INFO]
[INFO] --- camel-package-maven-plugin:2.18-SNAPSHOT:prepare-components (prepare) @ camel-mongodb ---
[INFO]
[INFO] --- maven-resources-plugin:2.7:resources (default-resources) @ camel-mongodb ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] Copying 1 resource
[INFO] skip non existing resourceDirectory C:\Users\joseluis\Documents\Sources\camel\components\camel-mongodb\target\generated\camel\dataformats
[INFO] skip non existing resourceDirectory C:\Users\joseluis\Documents\Sources\camel\components\camel-mongodb\target\generated\camel\languages
[INFO]
[INFO] --- maven-compiler-plugin:3.5.1:compile (default-compile) @ camel-mongodb ---
[INFO] Nothing to compile - all classes are up to date
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.070 s
[INFO] Finished at: 2016-06-02T09:53:00+02:00
[INFO] Final Memory: 34M/398M
[INFO] ------------------------------------------------------------------------
{code}
davsclaus:1464826011:2016-06-02T08:06:51.091+0000:1464826011:2016-06-02T08:06:51.091+0000:No 2.17.x is primary for bug fixes and the likes."
0,CAMEL-10005,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.17.2, 2.18.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2016-06-01 06:37:13+00:00,2016-06-01 07:23:48+00:00,"When running in Karaf, the following exception may be thrown:



Caused by: java.lang.NoClassDefFoundError: org/apache/htrace/SamplerBuilder
	at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:635)
	at org.apache.hadoop.hdfs.DFSClient.<init>(DFSClient.java:619)
	at org.apache.hadoop.hdfs.DistributedFileSystem.initialize(DistributedFileSystem.java:149)
	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2653)
	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:92)
	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2687)
	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2669)
	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:371)
	at org.apache.camel.component.hdfs2.HdfsOsgiHelper.<init>(HdfsOsgiHelper.java:47)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)[:1.8.0_91]
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)[:1.8.0_91]
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)[:1.8.0_91]
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)[:1.8.0_91]
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:148)[197:org.apache.servicemix.bundles.spring-beans:3.2.16.RELEASE_1]
	... 18 more




this is because camel-hdfs2 features lacks org.apache.htrace/htrace-core/3.1.0-incubating",
0,CAMEL-10004,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,2,2016-05-31 10:00:25+00:00,2016-06-01 10:10:33+00:00,"If you use pollEnrich to poll an URI such as file/ftp, then its using the PollingConsumer API that is designed to return an exchange, and the enricher will attempt to poll until an exchange is succesfull retrieved. However you may want to receive any exceptions during polling to be propagated to the pollEnrich so you can let routing error handler deal with it.",
0,CAMEL-10003,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-05-31 09:36:08+00:00,2016-05-31 09:39:54+00:00,"See
http://netty.io/wiki/native-transports.html",
0,CAMEL-10002,Improvement,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Arno Noordover,Claus Ibsen,0,2,2016-05-31 08:44:07+00:00,2016-06-10 08:10:32+00:00,We should upgrade to netty 4.1.x,"githubbot:1465358097:2016-06-08T11:54:57.981+0000:1465358097:2016-06-08T11:54:57.981+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1019

    CAMEL-10002: migrate to netty 4.1.0.Final

    CAMEL-10002: camel-netty4 - Upgrade to Netty 4.1.0.Final

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-10002MigrateNetty4.1.0.Final

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1019.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1019
    
----
commit 82189f4850ca9fcc891c2b5fe6ffa80ce5e9778f
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-08T11:53:56Z

    CAMEL-10002: migrate to netty 4.1.0.Final

----

githubbot:1465514288:2016-06-10T07:18:08.934+0000:1465514288:2016-06-10T07:18:08.934+0000:Github user anoordover closed the pull request at:

    https://github.com/apache/camel/pull/1019

githubbot:1465515743:2016-06-10T07:42:23.441+0000:1465515743:2016-06-10T07:42:23.441+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/1022

    removed netty41-version placeholder

    As requested for CAMEL-10002.
    Removed netty41-version placeholder

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel RemoveNetty41_versionPlaceholder

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1022.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1022
    
----
commit e59d3d7b22e480336f64b3e9827e131182754bf6
Author: Arno Noordover <anoordover@users.noreply.github.com>
Date:   2016-06-10T07:40:30Z

    removed netty41-version placeholder

----

githubbot:1465517432:2016-06-10T08:10:32.009+0000:1465517432:2016-06-10T08:10:32.009+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1022
"
0,CAMEL-10001,Improvement,Major,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-05-31 06:10:49+00:00,2016-05-31 07:16:44+00:00,"See SO
http://stackoverflow.com/questions/37535150/camel-loadbalance-failover-maximumfailoverattempts-doesnt-support-properties


The model does not include this for the load balancer EIPs.",
0,CAMEL-10000,Task,Minor,2.17.1,None,"
None
",Resolved,Won't Fix,None,John D. Ament,John D. Ament,0,4,2016-05-30 20:36:37+00:00,2016-11-26 08:40:18+00:00,Camel CDI's beans.xml incorrectly reports version = 1.0 but should be 1.1 due to compatibility requirements.,"davsclaus:1464644893:2016-05-31T05:48:13.411+0000:1464644893:2016-05-31T05:48:13.411+0000:As I understand Camel CDI is CDI 1.0 compliant.
davsclaus:1464645001:2016-05-31T05:50:01.392+0000:1464645001:2016-05-31T05:50:01.392+0000:[~antonin.stefanutti] what are your comments?
antonin.stefanutti:1464651098:2016-05-31T07:31:38.954+0000:1464651098:2016-05-31T07:31:38.954+0000:Camel CDI is CDI 1.0 compatible. Unit tests are executed on Weld 1.x / CDI 1.0 runtime by default: https://github.com/apache/camel/blob/ba1172adca9a61827fb7f115d728d091ba96c503/components/camel-cdi/pom.xml#L172-L174.

As for the XML namespace definition, it's been reported to cause some issues on older versions of Weld, see CAMEL-9767.

[~johndament], What issue do you actually face?
johndament:1464661761:2016-05-31T10:29:21.162+0000:1464661761:2016-05-31T10:29:21.162+0000:Hey guys, so I think I see the real issue, not hard to fix either.

The first problem is that your tests don't actually leverage the {{beans.xml}} file used in the production deployment.  Here for instance: https://github.com/apache/camel/blob/camel-2.17.x/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/AdvisedRouteTest.java#L79

As a result, the tests pass and say that OWB (1.2.x) should work.  In actuality, dropping a war with camel cdi on to Apache TomEE (1.7.4) doesn't work, but dropping it on the newly released TomEE 7 does.  1.7 can't parse the beans.xml file that is deployed.  Seeing {{bean-discovery-mode}} in the {{beans.xml}} file threw me off, as that's a clear CDI 1.1 feature.  Same with the scan tags.  If the contents of the {{<scan/>}} tags are important, then no it won't work in OWB.
antonin.stefanutti:1464663689:2016-05-31T11:01:29.411+0000:1464663689:2016-05-31T11:01:29.411+0000:They are a lot of contraints on that `beans.xml file to address the CDI 1.0, 1.1 and 1.2 compatibility so we should be careful here.

For instance, adding the new namespace breaks Weld 1.x. The `scan` element, a CDI 1.1 feature indeed, is there to avoid CDI 1.1+ users to have a mandatory dependency on DeltaSpike which is only there for Java SE. It is generally ignored by CDI 1.0 containers. And the extension code itself is CDI 1.0 compatible. Could you report the exact error that you have with TomEE 1.7.4?
johndament:1464665738:2016-05-31T11:35:38.183+0000:1464665738:2016-05-31T11:35:38.183+0000:Yeah, the problem is that Weld 1.1 has a {{<scan/>}} element as well, which is what became the CDI 1.1 {{<scan/>}}.  So its not that Weld 1.1 is ignoring the XML, its that it was already built to support it.

{code}
 Cannot unmarshall the beans.xml:
unexpected element (uri:""http://java.sun.com/xml/ns/javaee"", local:""scan"").
Expected elements are
<{http://java.sun.com/xml/ns/javaee}decorators>,<{http://java.sun.com/xml/ns/javaee}interceptors>,<{http://java.sun.com/xml/ns/javaee}alternatives>
        at
org.apache.openejb.config.ReadDescriptors.readBeans(ReadDescriptors.java:652)
{code}

After reading the error again, i realize its coming from OpenEJB not OWB.  
antonin.stefanutti:1464671649:2016-05-31T13:14:09.386+0000:1464671649:2016-05-31T13:14:09.386+0000:{quote}
Yeah, the problem is that Weld 1.1 has a <scan/> element as well, which is what became the CDI 1.1 <scan/>. So its not that Weld 1.1 is ignoring the XML, its that it was already built to support it.
{quote}
It is generally _ignored_ or _supported_ :). OWB 1.2.7 is ignoring it and Weld 1.1 supports the {{<weld:scan>}} element, but that's the first time a _validation_ error is reported, but it looks like OpenEJB is being zealous :).
{quote}
The first problem is that your tests don't actually leverage the beans.xml file used in the production deployment. Here for instance: https://github.com/apache/camel/blob/camel-2.17.x/components/camel-cdi/src/test/java/org/apache/camel/cdi/test/AdvisedRouteTest.java#L79
{quote}
These are _unit_ tests meant to test the Camel CDI features. We should add _integration_ tests for the covered target containers to validate the (CDI version x implementation x deployment type) combination matrix.

So, the new namespace information cannot be added as it breaks older Weld 1.x compatibility. I presume we can change {{<beans version=""1.0"">}} to {{<beans version=""1.1"">}} but that remains to be tested.
githubbot:1480120818:2016-11-26T08:40:18.160+0000:1480120818:2016-11-26T08:40:18.160+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1007
"
0,CAMEL-9999,Improvement,Minor,None,None,"
None
",Resolved,Fixed,None,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-30 09:34:50+00:00,2016-06-07 14:33:25+00:00,No Desc,
0,CAMEL-9998,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,None,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-30 09:22:51+00:00,2016-06-07 14:33:32+00:00,No Desc,
0,CAMEL-9997,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,None,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-30 08:27:51+00:00,2016-06-07 14:33:39+00:00,No Desc,
0,CAMEL-9996,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,John Poth,John Poth,0,2,2016-05-27 13:00:15+00:00,2016-05-31 08:22:09+00:00,Use passed in Camel Context in org.apache.camel.spi.RestConsumerFactory#createConsumer implementations. This will avoid NullPointerExceptions when the Factory isn't initialized as a Camel Component.,"githubbot:1464581061:2016-05-30T12:04:21.145+0000:1464581061:2016-05-30T12:04:21.145+0000:GitHub user johnpoth opened a pull request:

    https://github.com/apache/camel/pull/1005

    CAMEL-9996: Resolve RestComsumerFactory and RestApiConsumerFactory as…

    … Camel Components first
    
    https://issues.apache.org/jira/browse/CAMEL-9996

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/johnpoth/camel CAMEL-9996

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1005.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1005
    
----
commit 66468c902bfdacebe97baeb2357dff540491e4b7
Author: jpoth <jpoth@redhat.com>
Date:   2016-05-30T10:56:03Z

    CAMEL-9996: Resolve RestComsumerFactory and RestApiConsumerFactory as Camel Components first

----

githubbot:1464654129:2016-05-31T08:22:09.404+0000:1464654129:2016-05-31T08:22:09.404+0000:Github user johnpoth closed the pull request at:

    https://github.com/apache/camel/pull/1005
"
0,CAMEL-9995,Bug,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Andrea Cosentino,Andrea Cosentino,0,2,2016-05-26 12:24:58+00:00,2020-12-21 09:45:12+00:00,"When we need to remove the JMSX* property from the JMS Message before create a Camel Message we can use the includeAllJMSXProperties parameter in the URI, but actually it doesn't work.


This is because the filtering direction is IN and we are adding the filtering rules to the OUT filter.


Also we need to take care of this parameter in the JMSBinding class too.


https://github.com/apache/camel/blob/master/components/camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java#L183-L184


The JMSX headers will be added (UserID and GroupID) without take in account of includeAllJMSXProperties.","acosentino:1464237374:2016-05-26T12:36:14.035+0000:1464237374:2016-05-26T12:36:14.035+0000:That two lines are a workaround for something else, so I'll leave them as is
acosentino:1471831177:2016-08-22T09:59:37.415+0000:1471831177:2016-08-22T09:59:37.415+0000:Reverted on master, 2.17.x and 2.16.x
davsclaus:1473123263:2016-09-06T08:54:23.902+0000:1473123263:2016-09-06T08:54:23.902+0000:We may want to keep the current behavior and change the description of includeAllJMSXProperties to what is the current behavior. As too many users are dependent on how it works now. And different JMS brokers works differently."
0,CAMEL-9994,Bug,Major,"2.15.3, 2.16.1, 2.17.1","2.17.2, 2.18.0","

failover
jms
loadbalancer

",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Lee Kong,0,3,2016-05-26 11:45:45+00:00,2016-08-23 14:32:54+00:00,"Calling the route below with 2 threads simultaneously, when the messages timeout, I get a deadlock. The issue seems to be with  CorrelationTimeoutMap.onEviction() where a thread is trying to acquire a lock while holding another lock (another thread tries to do the same).


I have created a simple project to demonstrate the issue: 
https://github.com/leechinkong/CamelFailoverLoadbalancer


from(""direct:test"")
        .loadBalance()
        .failover(3, true, true)
        .inOut(""jms:testRqQueue1?replyTo=testRsQueue1&useMessageIDAsCorrelationID=true"",""jms:testRqQueue2?replyTo=testRsQueue2&useMessageIDAsCorrelationID=true"");


Thread dump: 


""Camel (camel-1) thread #0 - JmsReplyManagerTimeoutChecker[testRsQueue1]"":
    at sun.misc.Unsafe.park(Native Method)



parking to wait for  <0x00000007aca28f60> (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867)
    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197)
    at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:214)
    at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:290)
    at org.apache.camel.support.DefaultTimeoutMap.putIfAbsent(DefaultTimeoutMap.java:116)
    at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.putIfAbsent(CorrelationTimeoutMap.java:108)
    at org.apache.camel.component.jms.reply.ReplyManagerSupport.registerReply(ReplyManagerSupport.java:105)
    at org.apache.camel.component.jms.JmsProducer$1.createMessage(JmsProducer.java:227)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.doSendToDestination(JmsConfiguration.java:282)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.access$100(JmsConfiguration.java:225)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate$1.doInJms(JmsConfiguration.java:239)
    at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:493)
    at org.apache.camel.component.jms.JmsConfiguration$CamelJmsTemplate.send(JmsConfiguration.java:236)
    at org.apache.camel.component.jms.JmsProducer.doSend(JmsProducer.java:409)
    at org.apache.camel.component.jms.JmsProducer.processInOut(JmsProducer.java:239)
    at org.apache.camel.component.jms.JmsProducer.process(JmsProducer.java:150)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
    at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:91)
    at org.apache.camel.builder.NoErrorHandlerBuilder$1.process(NoErrorHandlerBuilder.java:40)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
    at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:129)
    at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:77)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:190)
    at org.apache.camel.processor.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:49)
    at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:896)
    at org.apache.camel.processor.RedeliveryErrorHandler.processAsyncErrorHandler(RedeliveryErrorHandler.java:561)
    at org.apache.camel.processor.RedeliveryErrorHandler$1.done(RedeliveryErrorHandler.java:466)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:86)
    at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:139)
    at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:250)
    at org.apache.camel.processor.Pipeline$1.done(Pipeline.java:145)
    at org.apache.camel.processor.CamelInternalProcessor$InternalCallback.done(CamelInternalProcessor.java:250)
    at org.apache.camel.builder.NoErrorHandlerBuilder$1$1.done(NoErrorHandlerBuilder.java:44)
    at org.apache.camel.management.InstrumentationProcessor$1.done(InstrumentationProcessor.java:86)
    at org.apache.camel.processor.SendProcessor$1.done(SendProcessor.java:139)
    at org.apache.camel.component.jms.reply.ReplyManagerSupport.processReply(ReplyManagerSupport.java:179)
    at org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler.onTimeout(TemporaryQueueReplyHandler.java:61)
    at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:54)
    at org.apache.camel.component.jms.reply.CorrelationTimeoutMap.onEviction(CorrelationTimeoutMap.java:30)
    at org.apache.camel.support.DefaultTimeoutMap.purge(DefaultTimeoutMap.java:230)
    at org.apache.camel.support.DefaultTimeoutMap.run(DefaultTimeoutMap.java:180)
    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
    at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
    at java.lang.Thread.run(Thread.java:745)



Found 1 deadlock.","davsclaus:1464480367:2016-05-29T08:06:07.638+0000:1464480367:2016-05-29T08:06:07.638+0000:Thanks for the sample project I was able to reproduce it here also with latest Camel version.
LeeK:1464587110:2016-05-30T13:45:10.692+0000:1464587110:2016-05-30T13:45:10.692+0000:Thanks for fixing it so quick. I have tested on the fix on my application - all good.

Would it be possible to patch the existing release? i.e. 2.17.1
If not, do you have a rough release date for 2.17.2? 
laurent149:1471933974:2016-08-23T14:32:54.422+0000:1471933974:2016-08-23T14:32:54.422+0000:Hello [~davsclaus],

I'm hitting the exact same issue and I'm unfortunately stuck with ServiceMix 6.1.0 / Camel 2.16.1.
Any workaround to suggest on this version of Camel?

Many thanks!

Laurent"
0,CAMEL-9993,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2016-05-26 02:49:38+00:00,2016-05-26 03:16:22+00:00,just in case the MEP is InOnly so OutputStream is null,
0,CAMEL-9992,Task,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Bernd Prager,0,2,2016-05-25 08:15:50+00:00,2016-05-28 07:33:31+00:00,lb invited me to work together for an official camel-consul component (details in https://github.com/bprager/camel-consul/issues/1). He asked me to raise an issue and send a PR. Could you please set this up?Thank you!,"lb:1464136022:2016-05-25T08:27:02.834+0000:1464136022:2016-05-25T08:27:02.834+0000:Best wold be to:

- fork https://github.com/apache/camel
- add your code to components/camel-consul
- wire a test case if possible
- submit a PR

I will take care to merge it
bprager:1464137702:2016-05-25T08:55:02.982+0000:1464137702:2016-05-25T08:55:02.982+0000:I'm on it.
bprager:1464238893:2016-05-26T13:01:33.479+0000:1464238893:2016-05-26T13:01:33.479+0000:Applied the changes in fork: [https://github.com/bprager/camel.git]
Please merge. Thank you."
0,CAMEL-9991,Task,Trivial,None,,"
None
",Resolved,Later,None,Unassigned,Bennet Schulz,0,3,2016-05-25 07:50:12+00:00,2016-10-29 09:04:44+00:00,"Hi guys,
I recently found some broken links and used a link checker after that. In total there are 86 broken links.


here is a listing (sorry for the format):
http://www.apache.org/dist/camel/apache-camel/2.11.3/apache-camel-2.11.3.zip.asc	<No Text>
http://www.apache.org/dist/camel/apache-camel/2.11.3/apache-camel-2.11.3.zip.md5	<No Text>
http://www.apache.org/dist/camel/apache-camel/2.11.3/apache-camel-2.11.3.zip.sha1	<No Text>
http://camel.apache.org/confluence/display/~gzurowski	<No Text>
http://camel.apache.org/confluence/display/~muellerc	<No Text>
http://servicemix.apache.org/uris.html	ServiceMix URI Guide
http://servicemix.apache.org/maven-jbi-plugin.html	ServiceMix Maven JBI Plugins
http://servicemix.apache.org/3-beginner-using-apache-camel-inside-servicemix.html	Using Camel with ServiceMix
http://servicemix.apache.org/order-file-processing.html	Cookbook on using Camel with ServiceMix
http://mina.apache.org/iofilter.html	Mina IoFilters
http://mina.apache.org/tutorial-on-protocolcodecfilter.html	Mina documentation
http://mina.apache.org/report/1.1/apidocs/org/apache/mina/transport/vmpipe/package-summary.html	MINA VM-Pipe API documentation
http://servicemix.apache.org/servicemix-camel.html	ServiceMix Camel module
http://people.apache.org/repo/m2-ibiblio-rsync-repository/ http://people.apache.org/repo/m2-ibiblio-rsync-repository/
http://activemq.apache.org/maven/5.5.0/activemq-camel/apidocs/org/apache/activemq/camel/component/ActiveMQComponent.html	activeMQComponent() method
http://camel.apache.org/$base/privacy-policy.html	Privacy Policy
http://apache.org/hello_world_soap_http http://apache.org/hello_world_soap_http
http://example.com/service http://example.com/service
http://www.eu.apachecon.com	ApacheCon Europe 2008
https://svn.apache.org/repos/asf/cxf/trunk/api/src/main/java/org/apache/cxf/endpoint/Client.java	cxf client API
http://apache.org/cxf/	Apache CXF
http://newhost http://newhost
http://hadoop.apache.org/hdfs/	HDFS
http://docs.jboss.org/hibernate/stable/validator/reference/en/html_single/	Hibernate Validator
http://metrics.codahale.com/	Metrics
http://svn.xantus.org/shortbus/trunk/bayeux/bayeux.html	bayeux protocol
http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/eventbus/package-summary.html	Google Guava EventBus
http://servicemix.apache.org/SMX4NMR/index.html	ServiceMix 4.x
https://rhiot.gitbooks.io/rhiotdocumentation/content/backend/camel_components/camel_openimaj_component.html	OpenIMAJ
http://svn.apache.org/repos/asf/camel/trunk/components/camel-test-cdi/src/test/java/org/apache/camel/test/cdi/FilterTest.java	example
http://gliesian.com/camel/ApacheCamelComponents.pdf	Free PDF
https://rhiot.gitbooks.io/rhiotdocumentation/content/gateway/camel_components/camel_kura_cloud_component.html	kura-cloud
http://gauthcloud.appspot.com/ http://gauthcloud.appspot.com/
http://camelcloud.appspot.com/ http://camelcloud.appspot.com/
http://http//www.enterpriseintegrationpatterns.com/ComposedMessagingExample.html	EIP composed messaging sample
http://scalate.fusesource.org/	Scalate
http://www.smooks.org/mediawiki/index.php?title=V1.5:Smooks_v1.5_User_Guide	Camel integration out of the box
http://scalate.fusesource.org/camel.html	Scalate
http://www.db4o.com/	db4o
http://fabric8.io/gitbook/camelEndpointAmq.html	AMQ
http://servicemix.apache.org/camel-example.html	example
https://open-esb.dev.java.net/	Open ESB
http://www.subrecord.org/	SubRecord
http://www.opensplice.com/section-item.asp?id=964	PrismTech
http://doc.akkasource.org/actors	actors
http://doc.akkasource.org/camel	akka-camel
http://touk.pl/toukeu/rw/pages/index.en.do	TouK
http://forge.jboss.org/	JBoss Forge
http://forge.jboss.org/addon/io.fabric8.forge:camel	Camel addon
http://www.linkedin.com/in/gregorzurowski/	Gregor Zurowski
http://www.systechnologies.com/	SYS Technologies
http://www.drkw.com/	Dresdner Kleinwort Wasserstein
http://www.trevorpounds.com	Trevor Pounds
http://irclogs.dankulp.com/logs/irclogger_logs/apache-camel http://irclogs.dankulp.com/logs/irclogger_logs/apache-camel
http://wiki.open-esb.java.net/Wiki.jsp?page=CamelSE	Open ESB Camel SE
http://www.productandconcept.com/	product + concept
http://vimeo.com/28760446	Er Apache Camel riktig valg for deg? Lytt til erfarne Camel spotters
http://vimeo.com/28760458	What Riding the Camel can make integration easier for you
http://www.andrejkoelewijn.com/wp/2008/10/19/simple-camel-dsl-osgi-bundle-example/	Simple DSL OSGi bundle example
http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-medium-resolution/	Medium Resolution
http://open.iona.com/resources/video-archived-webinars/camel-screencast-1-high-resolution/	High Resolution
http://mikemclean.ca/muse/2009/05/a-bit-more-meat-camel-applied-jms-to-file/	A bit more meat: Camel applied : JMS to File
http://blog.brunoborges.com.br/2009/03/leverage-eip-with-apache-camel-and.html	Leverage EIP with Apache Camel and Twitter
http://vimeo.com/68442425	Camel in the cloud demo from CamelOne 2013
https://vimeo.com/130993910	GeeCON 2015: Markus Eisele - Wild Flies and a Camel - Java EE Integration
https://vimeo.com/105743314	Hvordan få en kamel til å danse (September 2014)
http://www.andrejkoelewijn.com/wp/2010/06/13/a-composite-rest-service-using-camel/	A composite REST service using Apache Camel
https://code.notsoclever.cc/camel-cxf-component-wsdl-first-example/	Camel CXF Component – WSDL First Example
http://blog.raulkr.net/2012/06/camel-and-mongodb-match-made-in-heaven.html	Camel and MongoDB: a match made in heaven
http://Using Camel, CDI inside Kubernetes with Fabric8	Using Camel, CDI inside Kubernetes with Fabric8
http://fuse.fusesource.org/fabric/	Fuse Fabric
http://blip.tv/dzone/apache-camel-essential-components-6511579	Apache Camel Essential Components
http://www.answerconsulting.com/blog/davisond/servicemix-bridge-to-websphere-mq/	ServiceMix bridge to IBM WebSphereMQ
http://www4.java.no/incogito/session/Taking+Apache+Camel+for+a+Ride.html	JavaZone Conference - Taking Apache Camel for a Rider
http://www.andrejkoelewijn.com/wp/2009/02/28/groovy-and-grape-easiest-way-to-send-gtalk-message-with-apache-camel/	Groovy and Grape - easiest way to send gtalk message with Apache Camel
http://family-hildebrandt.com/eduard/eip_with_apache_camel/	Implementing Enterprise Integration Patterns with Apache Camel
http://gliesian.com/camel/ApacheCamelComponentsCropMarksAndBleed.pdf	PDF w/ crops and bleed
http://gliesian.com/camel/ApacheCamelComponents.jpg	JPG image
http://camelone.com/apache-camel-conference-2013/camelone_agenda_2013/	CamelOne 2013
https://www.codehaus.org/termination/	jetty cometd implementation [301 from http://docs.codehaus.org/display/JETTY/Cometd+(aka+Bayeux)]
http://www.tecsisa.com/index.igw?item=1628	Domain-Specific Languages (DSLs) in Apache Camel (Spanish)
http://cloudevangelist.org/2013/02/18/podcast-james-strachan-mr-apache-camel/	Podcast James Strachan - Mr Apache Camel
http://www.apache.org/dist/camel/apache-camel/x.y.x/apache-camel-x.y.x.tar.gz.asc	apache-camel-x.y.x.tar.gz.asc
http://www.apache.org/dist/camel/apache-camel/x.y.x/apache-camel-x.y.x-src.zip.asc	apache-camel-x.y.x-src.zip.asc
http://www.apache.org/dist/camel/apache-camel/x.y.x/apache-camel-x.y.x.zip.asc	apache-camel-x.y.x.zip.asc
http://www.apache.org/dist/camel/apache-camel/x.y.x/apache-camel-x.y.x-src.tar.gz.asc	apache-camel-x.y.x-src.tar.gz.asc


Cheers,
Bennet","davsclaus:1464134114:2016-05-25T07:55:14.210+0000:1464134114:2016-05-25T07:55:14.210+0000:See here how to edit the current docs
http://camel.apache.org/how-do-i-edit-the-website.html
davsclaus:1464160219:2016-05-25T15:10:19.591+0000:1464160219:2016-05-25T15:10:19.591+0000:Bennet if you want to help and fix the links yourself then read that link. You need to scan and email and ICLA to ASF before you are allowed to edit the docs.

If not you can list the broken lists here in the jira, and then another committer can try to fix them.
bennetelli:1464161149:2016-05-25T15:25:49.095+0000:1464161149:2016-05-25T15:25:49.095+0000:yes, I want to fix the links myself. I will sign and send the ICLA the next days.
onders:1469533543:2016-07-26T19:45:43.175+0000:1469533543:2016-07-26T19:45:43.175+0000:I can help fixing the links
bennetelli:1470991039:2016-08-12T16:37:19.850+0000:1470991039:2016-08-12T16:37:19.850+0000:Okay. In my opinion you can start fixing if you want :)
davsclaus:1473123339:2016-09-06T08:55:39.242+0000:1473123339:2016-09-06T08:55:39.242+0000:There is a link checker if you run the website
https://github.com/apache/camel/tree/master/camel-website

Then the links can be fixed in the adoc files which will be the base for documentation and website. The old wiki files are in the future no longer in use.
onders:1474196605:2016-09-18T19:03:25.159+0000:1474196605:2016-09-18T19:03:25.159+0000:Hi Claus,

I've tried to run link checker agaisnt camel.apache.org port=80. There are lots of 404s and other warning/error messages on the console i receive as below.

So i guess you suggest us to run link checker on localhost against camel-website project. How could we run link checker for camel-website?
If there is a guide, i can give it a go? if not(i'll try anyway :) ), let me see if i can get around.

Cheers

{code}
$ grunt --gruntfile=Gruntfile.js
Running ""http-server:dev"" (http-server) task
Server running on http://0.0.0.0:8282/
Hit CTRL-C to stop the server

Running ""linkChecker:dev"" (linkChecker) task
>> Checking for broken links at: camel.apache.org:80
>> Resource not found linked from http://camel.apache.org/ to http://camel.apache.org/confluence/display/~muellerc%20
>> Status code: 404
>> Resource not found linked from http://camel.apache.org/ to http://camel.apache.org/confluence/display/~davsclaus%20
>> Status code: 404
>> Resource not found linked from http://camel.apache.org/ to http://camel.apache.org/confluence/display/~gzurowski%20
{code}
onders:1474197067:2016-09-18T19:11:07.047+0000:1474197115:2016-09-18T19:11:55.570+0000:One more thing,

As with the original config, i ran and got the output as below. If that means adocs are OK, maybe this issue may be closed.

{code}
$ grunt --gruntfile=Gruntfile.js
Running ""http-server:dev"" (http-server) task
Server running on http://0.0.0.0:8282/
Hit CTRL-C to stop the server

Running ""linkChecker:dev"" (linkChecker) task
>> Checking for broken links at: localhost:8282
>> No broken links found at: localhost:8282

Done, without errors.
{code}

otherwise, as i previously mentioned if there is a guide how i can run link checker for new wiki version (i mean adoc s), i can run the link checker and try to fix the links in adoc s if neccessary.

regards
onders:1477629008:2016-10-28T12:30:08.497+0000:1477629008:2016-10-28T12:30:08.497+0000:i propose to close the issue as adocs seems to be ok. and as adocs will be the new base we dont need to worry about the current broken links in the website.

regards
davsclaus:1477703082:2016-10-29T09:04:42.425+0000:1477703082:2016-10-29T09:04:42.425+0000:Yeah lets fix this with the new docs/website later."
0,CAMEL-9990,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Justin Wrobel,0,2,2016-05-24 22:42:32+00:00,2016-05-25 08:13:59+00:00,"Excessive logging with the misleading message:



JSCH -> Permanently added 'X' (RSA) to the list of known hosts.




It is misleading because the addition is not permament. It repeats with every SFTP connection. It is logged as a WARN which creates unnecesary review and filtering when analyzing the log files.


The previous ticket (CAMEL-8202) resolved this issue for camel-ssh rather than camel-ftp.","jwrobel:1464101515:2016-05-24T22:51:55.082+0000:1464101515:2016-05-24T22:51:55.082+0000:Added pull request https://github.com/apache/camel/pull/993
davsclaus:1464135239:2016-05-25T08:13:59.111+0000:1464135239:2016-05-25T08:13:59.111+0000:Thanks for the PR"
0,CAMEL-9989,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-24 15:03:20+00:00,2016-06-07 14:34:20+00:00,No Desc,
0,CAMEL-9988,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-24 15:03:08+00:00,2016-06-07 14:33:45+00:00,No Desc,
0,CAMEL-9987,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-24 08:01:24+00:00,2016-05-24 09:51:30+00:00,No Desc,
0,CAMEL-9986,Bug,Trivial,2.17.1,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Stephan Siano,Stephan Siano,0,1,2016-05-24 07:07:47+00:00,2016-05-24 07:47:36+00:00,"If data that is not a MIME-Multipart is tried to marshal with the headersInline option set to false, no error is thrown and the message is left as the original message.
In case the headersInline option is set to true, an empty message is returned.
The provided patch changes the behavior that it also tries to return the original message in case the message is not a mime-multipart and headersInline is set to true. However there are limits to this: If the message body is a stream and stream caching is not enabled it is necessary to read the stream in order to find out whether this is a MIME-Multipart or not. Afterwards the message body will be empty (as with the previous implementation).",
0,CAMEL-9985,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-23 15:23:04+00:00,2016-05-24 11:14:04+00:00,No Desc,
0,CAMEL-9984,Bug,Minor,2.17.1,"2.17.2, 2.18.0","
None
",Closed,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Darrell King,0,3,2016-05-23 12:53:40+00:00,2016-05-26 17:10:45+00:00,"If I have a ConnectionFactory defined as:



ConnectionFactory connectionFactory = new ConnectionFactory();
connectionFactory.setAutomaticRecoveryEnabled(true);
connectionFactory.setUsername(username);
connectionFactory.setPassword(password);




And a Camel route defined like:



rabbitmq://localhost:5672/MyExchange?connectionFactory=#connectionFactory&exchangeType=direct&queue=MyQueue&routingKey=MyRoutingKey




Performing these steps:



Start my application and it connects to Rabbit and consumes messages
Shutdown the RabbbitMQ server
Shutdown my Camel application



The application doesn't stop fully because the automatic recovery mechanism has background threads running. It carries on indefinately logging messages like:



	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:106)
	at com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:102)
	at com.rabbitmq.client.impl.AMQConnection.start(AMQConnection.java:350)
	at com.rabbitmq.client.impl.recovery.RecoveryAwareAMQConnectionFactory.newConnection(RecoveryAwareAMQConnectionFactory.java:37)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.recoverConnection(AutorecoveringConnection.java:476)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.beginAutomaticRecovery(AutorecoveringConnection.java:444)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection.access$000(AutorecoveringConnection.java:53)
	at com.rabbitmq.client.impl.recovery.AutorecoveringConnection$1.shutdownCompleted(AutorecoveringConnection.java:383)
	at com.rabbitmq.client.impl.ShutdownNotifierComponent.notifyListeners(ShutdownNotifierComponent.java:75)
	at com.rabbitmq.client.impl.AMQConnection$MainLoop.run(AMQConnection.java:578)




Looking at org.apache.camel.component.rabbitmq.RabbitConsumer.stop()



    public void stop() throws IOException, TimeoutException {
        stopping = true;
        if (channel == null) {
            return;
        }
        channel.basicCancel(tag);
        try {
            channel.close();
        } catch (TimeoutException e) {
            log.error(""Timeout occured"");
            throw e;
        }
    }




The calls to channel.basicCancel(tag) and channel.close() both throw com.rabbitmq.client.AlreadyClosedException when the server has closed the connection which stops the automatic recovery thread from being halted. Checking whether the channel is open before the calls to channel.basicCancel(tag) and channel.close() seems to fix the issue.



    public void stop() throws IOException, TimeoutException {
        stopping = true;
        if (channel == null) {
            return;
        }
        if (tag != null && isChannelOpen()) {
            channel.basicCancel(tag);
        }
        try {
            if (isChannelOpen()) {
                channel.close();
            }
        } catch (TimeoutException e) {
            log.error(""Timeout occured"");
            throw e;
        }
    }




I'll submit a PR later","davsclaus:1464044616:2016-05-24T07:03:36.706+0000:1464044616:2016-05-24T07:03:36.706+0000:Thanks for reporting. Looking forward to the PR
githubbot:1464049675:2016-05-24T08:27:55.999+0000:1464049675:2016-05-24T08:27:55.999+0000:GitHub user daknin opened a pull request:

    https://github.com/apache/camel/pull/996

    CAMEL-9984: Rabbit MQ connection is not closed when channel has been closed by server.

    This fixes closing Rabbit MQ connections when the server has already closed the channel / connection. I created an issue at https://issues.apache.org/jira/browse/CAMEL-9984 with full details.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/daknin/camel CAMEL-9984

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/996.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #996
    
----
commit 09613cb4c3be053195e1c9f68f3a485d0003d24d
Author: Darrell King <darrell.king@hermes-europe.co.uk>
Date:   2016-05-24T08:18:53Z

    CAMEL-9984: Rabbit MQ connection is not closed when channel has been closed by server.

----

davsclaus:1464054828:2016-05-24T09:53:48.772+0000:1464054828:2016-05-24T09:53:48.772+0000:Thanks for the PR
daknin:1464059936:2016-05-24T11:18:56.127+0000:1464059936:2016-05-24T11:18:56.127+0000:Closing now that PR is merged
githubbot:1464253845:2016-05-26T17:10:45.184+0000:1464253845:2016-05-26T17:10:45.184+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/996
"
0,CAMEL-9983,Task,Major,2.18.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-05-23 06:11:57+00:00,2016-05-24 07:35:46+00:00,No Desc,
0,CAMEL-9982,Bug,Major,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Arno Noordover,0,3,2016-05-22 18:42:54+00:00,2016-05-23 06:10:36+00:00,"When a fixed length record contains a ""Link"" marshalling doesn't take this field into account while with unmarshalling it is unmarshalled.
Issue comes from a difference in building the model in BindyCsvDataFormat and BindyFixedLengthDataFormat. In the csv-format all field are taken into account that have the ""Link""  annotation.","githubbot:1463914922:2016-05-22T19:02:02.379+0000:1463914922:2016-05-22T19:02:02.379+0000:GitHub user anoordover opened a pull request:

    https://github.com/apache/camel/pull/992

    CAMEL-9982

    Patch for CAMEL-9982. Added unittest and added fields with ""Link""  annotation to model for Fixed Length.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/anoordover/camel CAMEL-9982

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/992.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #992
    
----
commit 739a750c0b37a5244d459e601903d0491feace3c
Author: Arno Noordover <arno@noordover.net>
Date:   2016-05-22T18:59:10Z

    CAMEL-9982

----

anoordover:1463915381:2016-05-22T19:09:41.030+0000:1463915381:2016-05-22T19:09:41.030+0000:I found this issue when I was busy trying to refactor the marshalling functionality using stream and lambda expression.
I have a question about this:
Shouldn't we advice developers to wrap unchecked exceptions in a component specific unchecked exception. Refactoring to lambda expressions (Function, Consumer) isn't always possible without changing the functionality.
davsclaus:1463955031:2016-05-23T06:10:31.585+0000:1463955031:2016-05-23T06:10:31.585+0000:Thanks for the PR.
githubbot:1463955036:2016-05-23T06:10:36.417+0000:1463955036:2016-05-23T06:10:36.417+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/992
"
0,CAMEL-9981,Bug,Major,"2.14.0, 2.15.0, 2.17.1","2.17.2, 2.18.0","

test

",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Gardella Juan Pablo,0,2,2016-05-21 21:17:35+00:00,2016-05-23 06:55:01+00:00,"Using camel-test-spring I found that CamelSpringJUnit4ClassRunner registers the listener twice. This causes the following error in transactional tests:



java.lang.IllegalStateException: Cannot start a new transaction without ending the existing transaction.




To fix it, it is required to only add the expected listeners :



line:57
         public CamelTestContextManager(Class<?> testClass) {
            super(testClass);

            // inject Camel first, and then disable jmx and add the stop-watch
            // WARNING: The listeners are registered within the super class.
            /// DON'T get current listeners.
            // List<TestExecutionListener> list = getTestExecutionListeners();
            //
            List<TestExecutionListener> list = new ArrayList<TestExecutionListener>(3);

            list.add(new CamelSpringTestContextLoaderTestExecutionListener());
            list.add(new DisableJmxTestExecutionListener());
            list.add(new StopWatchTestExecutionListener());
            OrderComparator.sort(list);
            registerTestExecutionListeners(list);
        }





Spring version: 4.2.5.","davsclaus:1463873445:2016-05-22T07:30:45.706+0000:1463873445:2016-05-22T07:30:45.706+0000:We have 1000s of tests at Camel and have not encountered what problem you report. Do you have a sample project / unit test that reproduces the issue.

Nevertheless we can improve the code to only add the listener if a previous listener hasn't been added.
gardellajuanpablo:1463934301:2016-05-23T00:25:01.188+0000:1463934301:2016-05-23T00:25:01.188+0000:Attached a test to reproduce it. Also attached the fix.
davsclaus:1463957701:2016-05-23T06:55:01.984+0000:1463957701:2016-05-23T06:55:01.984+0000:Thanks for the test case."
0,CAMEL-9980,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-05-21 07:20:20+00:00,2016-05-22 08:35:57+00:00,"It would be good to be able to do



bodyAs(String).toUpperCase()
mandatoryBodyAs(String).toUpperCase()




That will convert the body to a string type first and then invoke the ognl. You can use any type not only just String.",
0,CAMEL-9979,Improvement,Minor,2.17.1,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-05-20 11:51:47+00:00,2016-05-21 10:36:49+00:00,"See nabble
http://camel.465427.n5.nabble.com/Inject-multiple-JsonPath-parameters-to-bean-method-tp5782825.html",
0,CAMEL-9978,Bug,Major,None,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,2,2016-05-20 10:25:47+00:00,2016-05-24 07:05:57+00:00,"See nabble


http://camel.465427.n5.nabble.com/Camel-Kafka-component-configuration-type-mis-match-td5782820.html","davsclaus:1463799192:2016-05-21T10:53:12.094+0000:1463799192:2016-05-21T10:53:12.094+0000:If the option can only be ""0"" ""1"" or ""all"" then we should add that as enums=""0,1,all"" to the UriParam so we know that.
acosentino:1463874710:2016-05-22T07:51:50.429+0000:1463874710:2016-05-22T07:51:50.429+0000:Done :-)"
0,CAMEL-9977,Task,Minor,None,None,"
None
",Resolved,Done,None,Andrea Cosentino,Andrea Cosentino,0,1,2016-05-19 06:40:55+00:00,2016-05-19 07:48:57+00:00,"Looking at:


https://issues.apache.org/jira/browse/CAMEL-9976


Review all the commands to be sure the passed arguments are right.",acosentino:1463615318:2016-05-19T07:48:38.909+0000:1463615318:2016-05-19T07:48:38.909+0000:It seems all the other commands are ok.
0,CAMEL-9976,Task,Minor,None,None,"
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-05-19 06:38:02+00:00,2016-05-19 07:39:17+00:00,"Actually RestShow class extends AbstractRouteCommand that has two arguments:



context name
route id



The RestShow command is designed to work on context base. It should extend CamelCommandSupport then.",
0,CAMEL-9974,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,0,1,2016-05-18 06:43:44+00:00,2016-05-21 13:35:14+00:00,"So we can trigger the completion based on a predicate.
http://camel.apache.org/sjms-batch.html",
0,CAMEL-9973,Bug,Minor,2.17.1,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Antonin Stefanutti,thibof,0,2,2016-05-17 14:48:58+00:00,2016-05-23 08:26:13+00:00,"The NPE prevents Camel to start :



java.lang.NullPointerException
	at org.apache.camel.cdi.CdiCamelExtension.shouldDeployDefaultCamelContext(CdiCamelExtension.java:310)
	at org.apache.camel.cdi.CdiCamelExtension.afterBeanDiscovery(CdiCamelExtension.java:234)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.weld.injection.StaticMethodInjectionPoint.invoke(StaticMethodInjectionPoint.java:88)
	at org.jboss.weld.injection.MethodInvocationStrategy$SpecialParamPlusBeanManagerStrategy.invoke(MethodInvocationStrategy.java:144)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:309)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:124)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:287)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:265)
	at org.jboss.weld.event.ObserverNotifier.notifySyncObservers(ObserverNotifier.java:271)
	at org.jboss.weld.event.ObserverNotifier.notify(ObserverNotifier.java:260)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:154)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:148)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:53)
	at org.jboss.weld.bootstrap.events.AbstractDefinitionContainerEvent.fire(AbstractDefinitionContainerEvent.java:42)
	at org.jboss.weld.bootstrap.events.AfterBeanDiscoveryImpl.fire(AfterBeanDiscoveryImpl.java:61)
	at org.jboss.weld.bootstrap.WeldStartup.deployBeans(WeldStartup.java:423)
	at org.jboss.weld.bootstrap.WeldBootstrap.deployBeans(WeldBootstrap.java:83)




The issue seems to be related to CAMEL-9904.


It works well when I get back to version 2.17.0.","antonin.stefanutti:1463701500:2016-05-20T07:45:00.411+0000:1463701500:2016-05-20T07:45:00.411+0000:[~thibof], would that be possible for you to share a bit more info (like the bean class code excerpt) about the bean and the injection point for which the following line in {{CdiCamelExtension}} throws the NPE:
{code}
if (!getRawType(ip.getType()).getPackage().getName().startsWith(""org.apache.camel"")) {
    continue;
}
{code}

That gives us a bit more context and identify the proper fix for your issue.
thibof:1463724149:2016-05-20T14:02:29.991+0000:1463724149:2016-05-20T14:02:29.991+0000:The following injection point is the cause :

@Inject
@ConfigProperty(""authentication.required"")
private boolean authRequired;

In this case, the getPackage() returns null.

I think that by extension, when the injection point type is a primitive, the package is null.

Is it possible to add a check on the expression getRawType(ip.getType()).getPackage() to avoid the problem ?
antonin.stefanutti:1463734300:2016-05-20T16:51:40.739+0000:1463734300:2016-05-20T16:51:40.739+0000:[~thibof], thanks. I've just fixed it.
thibof:1463963173:2016-05-23T08:26:13.088+0000:1463963173:2016-05-23T08:26:13.088+0000:Great ! Thanks a lot."
0,CAMEL-9972,Bug,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Andrea Cosentino,Andrea Cosentino,0,1,2016-05-17 11:46:59+00:00,2016-05-18 08:52:09+00:00,It should be good if we are able to set a connection close header in all our HTTP components. Best approach should be add a parameter connectionClose disabled by default (false value).,acosentino:1463466652:2016-05-17T14:30:52.195+0000:1463466652:2016-05-17T14:30:52.195+0000:No need for camel-netty-http and camel-netty-http4. They already have the mechanism for connection close header.
0,CAMEL-9971,Improvement,Minor,2.17.0,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,James Green,0,3,2016-05-17 10:23:42+00:00,2019-08-06 08:04:06+00:00,"I've found some code in a route that writes a message to a file with `fileExist=Append` as an option.


To my surprise it first goes through a processor that adds a newline character to the end of the text message. It seems our reader (Logstash) requires one-message-per-line in it's input files.


Of course, if we re-pointed ourselves at a message broker instead of file: the newline-appender processor becomes redundant and thus our code would need to change so it doesn't feel right at all.


If we had a `appendChars` option we could do `&appendChars=\n` instead on the file endpoint uri which feels more natural.","davsclaus:1463698923:2016-05-20T07:02:03.823+0000:1463698923:2016-05-20T07:02:03.823+0000:So you want to append a number of chars before appending the file content?


jmkgreen:1464134483:2016-05-25T08:01:23.525+0000:1464134483:2016-05-25T08:01:23.525+0000:Other way around - write the content then add the optional append value (which might simply be a newline). Lets us use Jackson to JSON-ify an object, write it to a file, and see that file as a bunch of JSON documents separated by newlines. Perfect for things like logstash to read."
0,CAMEL-9970,Bug,Minor,2.16.3,2.18.0,"

patch

",Resolved,Fixed,2.18.0,Claus Ibsen,Sergey Monichev,0,2,2016-05-16 13:30:13+00:00,2018-07-03 14:41:38+00:00,"Given a long write file slowfile.dat. Camel polls the file and stores its parameters (length, lastModified...). Camel tries to get exclusive read lock and fails as file is writing by someone, next time Camel gets lock. But file was changed and its parameters are wrong.
The solution is pretty simple - check the file length and lastModified when exclusive read lock is granted and update them.


Here is a patch: http://pastebin.com/2vyF8BTU",davsclaus:1463439165:2016-05-17T06:52:45.359+0000:1463439165:2016-05-17T06:52:45.359+0000:Should probably do this in a way to reapply the file headers after the lock was granted so it works generic.
0,CAMEL-9969,New Feature,Minor,None,None,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Nicola Ferraro,0,3,2016-05-16 06:07:05+00:00,2016-05-24 09:54:09+00:00,"I think it is worth adding a camel-telegram component, to allow users integrating their apps with Telegram (https://telegram.org/).


Telegram is a popular messaging application (similar to WhatsApp), providing good security mechanisms and an open source communication protocol and APIs.
According to some statistics (https://telegram.org/blog/100-million), it has about 100 million active users worldwide (as of May 2016).


Telegram allows registering Bots (accounts operated by software) that can be ultimately used to let a Camel based application communicate with other Telegram users.


I have developed a first (working) draft of the camel component and I'm currently working on it to include tests and additional features.","davsclaus:1463439329:2016-05-17T06:55:29.619+0000:1463439329:2016-05-17T06:55:29.619+0000:There is a guide here
http://camel.apache.org/add-new-component-guide.html
githubbot:1463711448:2016-05-20T10:30:48.638+0000:1463711448:2016-05-20T10:30:48.638+0000:GitHub user nicolaferraro opened a pull request:

    https://github.com/apache/camel/pull/988

    CAMEL-9969: Added a component for Telegram

    I created a new component for Telegram.
    
    The component uses the Telegram Bot REST API (https://core.telegram.org/bots/api).
    There are multiple Java wrappers for the REST API available as open source projects, but 
    many of them are not ""mature"" to be included in the camel component.
    An alternative option could have been https://github.com/rubenlagus/TelegramBots, but it is 
    released under GPLv3 license.
    Since the Bot API are simple and well documented, I decided to include a Java REST interface directly inside the component.
    
    The Java API that wraps the REST services contains many features (Text messages, audio, video and photo), but it is not 100% complete. 
    I don't know if it's worth completing it, or maybe leave some issues on Jira to complete it later.
    The API is self-consistent at this time, even if it is not complete.
    
    The Telegram services do not allow two bots to exchange messages, so integration tests would be impossible without a human intervention.
    So I divided the tests in two stages:
    - Internal tests: by mocking the Telegram Service, I verify that the service is called passing the correct parameters
    - Integration tests: I call directly the Telegram Service and verify the interaction using my smartphone
    
    Integration tests are disabled in surefire CI (unless you provide some environment variables).
    
    I added a .adoc file for documenting the endpoint (consumer and producer).
    I haven't put the documentation on the Wiki pages because...
    
    I think I had better wait for a review :)


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nicolaferraro/camel CAMEL-9969

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/988.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #988
    
----
commit a5118992ae09055fe8fb1bffff68e4a52c64edb3
Author: Nicola Ferraro <ni.ferraro@gmail.com>
Date:   2016-05-20T10:26:30Z

    CAMEL-9969: Added a component for Telegram

----

githubbot:1463958934:2016-05-23T07:15:34.368+0000:1463958934:2016-05-23T07:15:34.368+0000:Github user nicolaferraro closed the pull request at:

    https://github.com/apache/camel/pull/988

davsclaus:1464044660:2016-05-24T07:04:20.868+0000:1464044660:2016-05-24T07:04:20.868+0000:We need to add a bit of documentation and add a wiki page at
http://camel.apache.org/components.html
http://camel.apache.org/component-list
nferraro:1464049832:2016-05-24T08:30:32.572+0000:1464049832:2016-05-24T08:30:32.572+0000:Sure, I'm going to do it.
nferraro:1464054553:2016-05-24T09:49:13.753+0000:1464054553:2016-05-24T09:49:13.753+0000:I added the documentation to the Wiki pages
davsclaus:1464054849:2016-05-24T09:54:09.011+0000:1464054849:2016-05-24T09:54:09.011+0000:Thanks"
0,CAMEL-9968,Bug,Minor,2.17.1,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Claus Ibsen,Jay mann,1,3,2016-05-13 22:49:24+00:00,2016-05-20 05:07:47+00:00,"Currently for x-www-form-urlencoded post request camel puts the body into a form key with a null value:



if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {
            form = new Form();
            // must use string based for forms
            String body = exchange.getIn().getBody(String.class);
            if (body != null) {
                form.add(body, null);
            }
        }




Which results in a body like this:


name=jay&password=secret


ending up with a form parameter looking like this: 
name%3Djay%26password%3Dsecret=null


I think something like this should be used to correctly set the key values.



if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {
            form = new Form();
            // must use string based for forms
            String body = exchange.getIn().getBody(String.class);
            if (body != null) {
                List<NameValuePair> pairs = URLEncodedUtils.parse(body, Charset.forName(""UTF-8""));
                for(NameValuePair p : pairs){
                	form.add(p.getName(), p.getValue());
                }
            }
        }","davsclaus:1463272099:2016-05-15T08:28:19.846+0000:1463272099:2016-05-15T08:28:19.846+0000:Are you able to work on a patch / PR to fix this?
jmandawg:1463283235:2016-05-15T11:33:55.066+0000:1463283235:2016-05-15T11:33:55.066+0000:Yes if this solution looks good to you.  I'm not sure if there is a better way to determine the charset othere than to just hard code it.   
davsclaus:1463355480:2016-05-16T07:38:00.534+0000:1463355480:2016-05-16T07:38:00.534+0000:Yeah you can get the charset from the current exchange using

org.apache.camel.util.IOHelper#getCharsetName(org.apache.camel.Exchange, boolean)

And if you pass in true as the boolean you will use the JVM platform default charset as fallback.
aldrine.einsteen:1463454222:2016-05-17T11:03:42.593+0000:1463454222:2016-05-17T11:03:42.593+0000:Hi Jay and Claus,

Is this issue still open? If not can I submit a patch?
aldrine.einsteen:1463455011:2016-05-17T11:16:51.164+0000:1463455011:2016-05-17T11:16:51.164+0000:The following worked:
        // Use forms only for PUT, POST and x-www-form-urlencoded
        if ((Method.PUT == method || Method.POST == method) && MediaType.APPLICATION_WWW_FORM.equals(mediaType, true)) {
            form = new Form();
            // must use string based for forms
            String body = exchange.getIn().getBody(String.class);
            if (body != null) {
                List<NameValuePair> nameValuePairs = URLEncodedUtils.parse(body, Charset.forName(IOHelper.getCharsetName(exchange)));
                for (NameValuePair nameValuePair : nameValuePairs) {
                    form.add(nameValuePair.getName(), nameValuePair.getValue());
                }
            }
        }
davsclaus:1463456234:2016-05-17T11:37:14.768+0000:1463456234:2016-05-17T11:37:14.768+0000:Yeah a patch or PR on github is much welcome. PR on github is often easier to manage and also allow to keep track of your contributions.
jmandawg:1463502197:2016-05-18T00:23:17.076+0000:1463502197:2016-05-18T00:23:17.076+0000:PR #985 submitted.
davsclaus:1463692067:2016-05-20T05:07:47.118+0000:1463692067:2016-05-20T05:07:47.118+0000:Thanks for the PR"
0,CAMEL-9967,Bug,Minor,2.17.0,,"
None
",Resolved,Not A Bug,None,Unassigned,Aaron Whiteside,0,1,2016-05-13 22:46:45+00:00,2016-05-13 22:49:19+00:00,Camel Simple OGNL notation only works with ${body.something} not ${headers[blah].something},"aaronjwhiteside:1463150959:2016-05-13T22:49:19.616+0000:1463150959:2016-05-13T22:49:19.616+0000:Just figured out you need to use the headers.<key>.something syntax.

Sorry for the noise"
0,CAMEL-9966,Improvement,Major,"2.16.3, 2.17.0","2.16.4, 2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Claus Ibsen,Claus Ibsen,0,1,2016-05-13 14:49:47+00:00,2016-05-13 14:59:47+00:00,"See nabble
http://camel.465427.n5.nabble.com/Restlet-GET-request-can-cause-Memeory-leak-Stream-not-closed-due-to-CAMEL-9611-tp5782546.html


And CAMEL-9611


If you do not read the response from restlet producer call then due to streaming then the restlet do not close its internal stream buffer.


If people want to use streaming then they need to enable this explicit. And there is an option to turn on an auto close stream also.",
0,CAMEL-9965,Improvement,Major,2.16.3,2.19.0,"
None
",Resolved,Fixed,2.19.0,Claus Ibsen,Jürgen Kindler,0,3,2016-05-13 13:25:38+00:00,2017-03-03 12:41:00+00:00,"As I see in CAMEL-9864 there is an incompatible change about the usage of http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Message.html#getBody%28java.lang.Class%29 in case the underlying body is subject to streaming.


I understand the reasons for that change, but usually Java getters are assumed to be not modifying the underlying object.
So it would be nice to add a small hint in the API that indicates that getBody may not be callable multiple times (esp. in context of streams)
In case a stream was already consumed throwing a meaningful exception with a hint about how to fix this (either not call the method altogether or switching on stream caching ...) would be great.",davsclaus:1488516060:2017-03-03T12:41:00.902+0000:1488516060:2017-03-03T12:41:00.902+0000:Added information in javadoc for those getters
0,CAMEL-9964,New Feature,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-13 12:54:32+00:00,2016-05-23 14:46:16+00:00,See discussion: http://camel.465427.n5.nabble.com/Annotation-based-DefaultProducer-td5782380.html,"lb:1463979715:2016-05-23T13:01:55.250+0000:1463979715:2016-05-23T13:01:55.250+0000:From http://mail-archives.apache.org/mod_mbox/camel-dev/201605.mbox/browser:

We could also generalize it and have a base class and then a header
based implementation, in case we get other ""selectors"" in the future
that select by something else than a header.

- BaseSelectorProducer (abstract)
- HeaderSelectorProducer (implementation)"
0,CAMEL-9963,Improvement,Major,2.17.0,"2.16.4, 2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Claus Ibsen,Claus Ibsen,0,2,2016-05-13 05:41:08+00:00,2016-05-13 05:52:58+00:00,"See nabble
http://camel.465427.n5.nabble.com/Restriction-in-RestConfiguration-with-blueprint-tp5782461.html",
0,CAMEL-9962,Improvement,Minor,2.17.1,"2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.17.2, 2.18.0",Andrea Cosentino,Andrea Cosentino,0,1,2016-05-12 11:36:02+00:00,2016-05-12 11:57:07+00:00,"It can be useful to understand if the consumer is already subscribed to a topic or not. Even if the NATS client will be different in 2.18, we need to add this field on both 2.17 and 2.18",
0,CAMEL-9961,Sub-task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-12 10:01:34+00:00,2016-05-17 14:43:59+00:00,No Desc,
0,CAMEL-9960,Bug,Major,None,"2.16.4, 2.17.2, 2.18.0","
None
",Resolved,Fixed,"2.16.4, 2.17.2, 2.18.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2016-05-12 02:38:23+00:00,2016-05-12 05:32:35+00:00,No Desc,
0,CAMEL-9959,Sub-task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-11 08:05:52+00:00,2016-05-11 21:03:53+00:00,No Desc,
0,CAMEL-9958,Sub-task,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-11 08:02:32+00:00,2016-05-11 09:16:41+00:00,No Desc,
0,CAMEL-9957,Improvement,Major,2.17.1,None,"
None
",Resolved,Fixed,"2.17.2, 2.18.0",Willem Jiang,Willem Jiang,0,2,2016-05-11 03:50:08+00:00,2016-05-17 04:05:58+00:00,"CAMEL-9790 made the sync sending, it could cause some trouble when ppl has lots of data to send.
We need to provide an async way to send the message to kafka.","njiang:1462985929:2016-05-12T00:58:49.529+0000:1462985929:2016-05-12T00:58:49.529+0000:Applied the patch into camel master and camel-2.17.x branches.
davsclaus:1463103192:2016-05-13T09:33:12.009+0000:1463103192:2016-05-13T09:33:12.009+0000:The kafka callback cannot be used for camel routing. You must not use that thread to continue routing in Camel. I added a worker pool for Camel to use, which you can configure the size of etc.
njiang:1463190904:2016-05-14T09:55:04.669+0000:1463190904:2016-05-14T09:55:04.669+0000:Hi Claus,

Thanks for pointing that out, and did a quick fix for it.
I just checked out the patch of choosing the sync invocation and async invocation in the Kafka code.  I think it could be better if we move that part of code into DefaultEndpoint to avoid the duplication code inside of the camel components. 

What do you think? 

Willem
davsclaus:1463271171:2016-05-15T08:12:51.435+0000:1463271171:2016-05-15T08:12:51.435+0000:The AsyncProcessor is extending Processor so if you implement AsyncProcessor you also get the synchronous processor. They are not separated.

The producer is such an example as its both processor / async processor and therefore Camel routing engine will call favor calling the async processor method. There is no check if the processor was created from an endpoint that has a synchronous=true option. This option is not on the endpoint interface, but only an implementation detail on the default endpoint.

Whether it would be an idea for Camel 3.0 to

- separate Processor and AsyncProcessor
- move synchronous as an option to endpoint interface

is something we could consider.

But for 2.x you could either

- create 2 different producer implementations and in the endpoint in the createProducer method chose either the sync vs async implementation
- use current code
- refactor current code to be a bit better (which I am doing) and then the code is like what we do in other components that may have a forced synchronous mode.
davsclaus:1463271899:2016-05-15T08:24:59.342+0000:1463271899:2016-05-15T08:24:59.342+0000:Ah okay the mockit in the unit test makes the refactor a bit more harder, so had to implement the process method
njiang:1463429158:2016-05-17T04:05:58.397+0000:1463429158:2016-05-17T04:05:58.397+0000:+1 to separate Processor and AsyncProcessor in Camel 3.0.
For 2.x we could let the Endpoint decide which kind of the Processor to use, I just commit a quick fix for it."
0,CAMEL-9956,Improvement,Minor,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2016-05-10 17:13:26+00:00,2016-05-11 21:16:22+00:00,No Desc,
