,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-15136,Bug,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-05-29 12:10:52+00:00,2020-05-29 14:08:13+00:00,"Due to CAMEL-14878, DBZ source code generation still generate duration fields, eg. time based, as long. Hence, it will make sense to make the code generator aware of these fields and generate them as `duration` if possible or mark the type in the annotations.",
0,CAMEL-15135,Bug,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Guillaume Nodet,Omar Al-Safi,0,1,2020-05-29 10:01:30+00:00,2020-05-29 12:02:52+00:00,"If we have the following in the component configuration:




    @UriParam(javaType = ""java.time.Duration"", defaultValue = ""10s"")
    private Long writeTimeoutMillis = 100L;
 



Here the field is long, but the javaType being overiden to java.time.Duration with default value 10s. And then will be converted to Duration in the generated configurer.
However in the spring boot maven plugin, when it generates the spring boot starter component configuration,  the logic is not fully adopted, for example, it will take the default value of 10s and it will assign it to the long type field, e.g:




private Long writeTimeoutMillis = 10sL;




Which as result it will produce compilation errors.",omarsmak:1590724972:2020-05-29T12:02:52.453+0000:1590724972:2020-05-29T12:02:52.453+0000:https://github.com/apache/camel-spring-boot/commit/60b3958c65884de16d3a39a558ff4ca129192865
0,CAMEL-15134,Improvement,Major,None,3.4.0,"
None
",Resolved,Won't Fix,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-29 09:06:44+00:00,2020-05-29 09:57:39+00:00,"Lets simplify the health check api and the default implementations.


The routes check is overlapping what monitoring systems can do by checking and reporting on metrics, such as if N errors within last Y minute then YELLOW etc.


This job is better handled by those tools, than Camel.


So the health checks become a basic API that are invoked on demand (ala spring boot acutators).


And then we only need one kind of registry so removing the additional repository layer.","davsclaus:1590717459:2020-05-29T09:57:39.456+0000:1590717459:2020-05-29T09:57:39.456+0000:Okay so the trick was that we needed a new HealthCheck per route to make it fine grained in the reporting, and not a single HealthCheck class for all the routes. The latter would be too coarse grained, as a check per routes allows to report builder with details per route in the same key - route.id = foo.

But we can remove the JMX evaluators as its the job of the monitoring tools to setup rules."
0,CAMEL-15133,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.14.0,Claus Ibsen,Claus Ibsen,1,2,2020-05-29 08:46:13+00:00,2021-11-30 20:30:17+00:00,"We can look at making writing custom HealthCheck be discoverable from classpath, so they can be automatic installed.


You can then build checks for Camel components (check ala spring boot actuators) that can be registered in health check registry.


And then if you run on spring boot, they can become adapted to spring boot actuators.
And for camel-main and camel-quarkus then we can look at using microprofile-health.


This need some more thought at first. Also this should be configurable to turn on|off, and maybe a way to configure each health checks. And have some tool that can generate documentation about the checks and their options. And then we need reflection free configuration (via configurer classes) and so on.","davsclaus:1635292206:2021-10-27T07:50:06.067+0000:1636074458:2021-11-05T09:07:38.600+0000:- discovery via id-health-check classpath scanning *DONE*
- health-check spi annotation to mark custom classes *DONE*
- auto generate service discovery file from annotation *ALREADY* (@JdkService(""context-health-check""))
- route health check to use custom components if present *DONE*
- scheduled poll consumer default health check that checks if last X poll had error or not *DONE*
- detailed error message on health check result *DONE*
- easier to lookup health check by id *DONE*
- add consumer as health-check group so you can turn it on|off more easily *WONT FIX*
- add option to camel-health to make it easy to turn on|off consumer checks for routes *DONE*
davsclaus:1636074539:2021-11-05T09:08:59.448+0000:1638274549:2021-11-30T20:15:49.344+0000:* Option to turn on classpath discovery of custom health checks *DONE*
* Add @HealthCheck JDKService to make it easy to build custom health checks *DONE*
* Add resolver that can scan classpath for custom health-checks *DONE*
* Update health-check documentation *DONE*"
0,CAMEL-15132,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-29 08:11:21+00:00,2020-06-12 07:50:47+00:00,"Lets look at enabling core threads to timeout in the default thread pool profile setting in Camel. As this allows idle threads to terminate.


For example with EIPs in parallel like splitter then you have 10 threads by default. And if they become idle, then they stay around. We could allow those threads to terminate as well.


This is a newer option in JDK but we are 8 as minimum so its safe to use now.","davsclaus:1590711582:2020-05-29T08:19:42.625+0000:1590711582:2020-05-29T08:19:42.625+0000:See the default thread pool profile here
https://camel.apache.org/manual/latest/threading-model.html#ThreadingModel-Threadpoolprofiles

So its a matter of flipping the allowCore... option
davsclaus:1591909763:2020-06-12T05:09:23.447+0000:1591909763:2020-06-12T05:09:23.447+0000:Working on this for 3.4"
0,CAMEL-15131,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-29 07:25:13+00:00,2020-05-29 08:56:03+00:00,"This was not really in use. Spring Boot had some special Camel health check service that was not using spring boot actuators.


Lets make the health check simpler and have basic checks and then for main, microprofile and spring boot just use those, and let the checks be on-demand triggered, which is how for example they are done on containers with liveness/readiness probes.",
0,CAMEL-15130,Bug,Major,3.4.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Guillaume Nodet,Claus Ibsen,0,3,2020-05-29 06:01:07+00:00,2020-05-30 08:29:37+00:00,"/**



Maximum number of milliseconds to wait for records to flush and partition
offset data to be committed to offset storage before cancelling the
process and restoring the offset data to be committed in a future
attempt. The default is 5 seconds.
     */
    private Long offsetCommitTimeoutMs = 5sL;
    /**
Interval at which to try committing offsets. The default is 1 minute.
     */
    private Long offsetFlushIntervalMs = 60sL;","davsclaus:1590703291:2020-05-29T06:01:31.144+0000:1590703291:2020-05-29T06:01:31.144+0000:[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-debezium-mongodb-starter: Compilation failure: Compilation failure:
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[87,43] ';' expected
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[87,45] <identifier> expected
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[91,44] ';' expected
[ERROR] /Users/davsclaus/workspace/camel-spring-boot/components-starter/camel-debezium-mongodb-starter/src/main/java/org/apache/camel/component/debezium/springboot/DebeziumMongodbComponentConfiguration.java:[91,46] <identifier> expected
[ERROR] -> [Help 1]
davsclaus:1590703330:2020-05-29T06:02:10.519+0000:1590703330:2020-05-29T06:02:10.519+0000:So we need for the debezium tooling to detect its a ""duration"" type and then use String as the type
omarsmak:1590717937:2020-05-29T10:05:37.688+0000:1590717937:2020-05-29T10:05:37.688+0000:Apparently is producible, I have created this bug report https://issues.apache.org/jira/browse/CAMEL-15135, when you have a default value e.g `10s` and we have the type of `long`, it will give this issues. 

Regarding Debezium, yeah the source code generator needs to adopt to the duration as not it will produce long fields.
gnodet:1590723856:2020-05-29T11:44:16.744+0000:1590723856:2020-05-29T11:44:16.744+0000:https://github.com/apache/camel-spring-boot/commit/60b3958c65884de16d3a39a558ff4ca129192865
omarsmak:1590724638:2020-05-29T11:57:18.071+0000:1590724638:2020-05-29T11:57:18.071+0000:[~gnodet] I think the fix would be for this bug https://issues.apache.org/jira/browse/CAMEL-15135 , isn't? Actually on this ticket scope, there are still autogenerated properties from debezium that are long for durations which I am currently working on it
omarsmak:1590724922:2020-05-29T12:02:02.757+0000:1590724930:2020-05-29T12:02:10.684+0000:Tested now, indeed it fixes CAMEL-15135, if you don't mind [~gnodet], I will assign you on the other ticket and re-assign this to me since is I am working on it now :) 
omarsmak:1590725225:2020-05-29T12:07:05.372+0000:1590725225:2020-05-29T12:07:05.372+0000:Nevermind, I will just create another Jira for the DBZ long -> duration fields, sorry for the noise 
gnodet:1590725996:2020-05-29T12:19:56.717+0000:1590725996:2020-05-29T12:19:56.717+0000:[~omarsmak] not sure what you have in mind, could you be more precise ? 

I think we have several possibilities regarding to those fields, but from a user POV, I think we want to support the extended syntax `5s`, so the only way to deal with those is to use a String field and let the converter do the work later.
omarsmak:1590726569:2020-05-29T12:29:29.860+0000:1590726595:2020-05-29T12:29:55.258+0000:[~gnodet] I mean the generated config for debezium connectors, for example in camel-debezium-mysql, are still generated like this:
{code}
    @UriParam(label = LABEL_NAME, defaultValue = ""500"")
    private long pollIntervalMs = 500;
{code}

As result, isn't yet known for these fields you can use extended syntax, e.g `0.5s`. I am working on this now on CAMEL-15136, so the generated config something like this:
{code}
@UriParam(label = LABEL_NAME, defaultValue = ""0.5s"", javaType = ""java.time.Duration"")
    private long pollIntervalMs = 500;
{code}
In order for the converter to pick these fields as well. I hope it makes sense now
"
0,CAMEL-15129,Bug,Major,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Yaroslav Chukhno,0,3,2020-05-28 13:03:12+00:00,2020-06-05 14:17:04+00:00,If option throwExceptionOnFailure=true then UndertowClientCallback suppresses all exceptions that are not even related to HttpStatusCode (failed responses from the remote server).,"davsclaus:1590749026:2020-05-29T18:43:46.622+0000:1590749026:2020-05-29T18:43:46.622+0000:Can you point out in the code where you think something is wrong
uzuruk:1591227513:2020-06-04T07:38:33.626+0000:1591227513:2020-06-04T07:38:33.626+0000:I think the mistake in line 186 of [UndertowClientCallback|[https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java]] - the condition is redundant.
 
chardahe@redhat.com:1591308307:2020-06-05T06:05:07.872+0000:1591308307:2020-06-05T06:05:07.872+0000:Hi [~uzuruk],

if *throwExceptionOnFailure=true* then it'll throw HttpOperationFailedException in case of failed responses from the remote server

[https://github.com/apache/camel/blob/master/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L235]

, can you please provide a test scenario for any other exception?
uzuruk:1591311815:2020-06-05T07:03:35.210+0000:1591311815:2020-06-05T07:03:35.210+0000:Sorry guys, i made mistake in description. On  *throwExceptionOnFailure=false* all exceptions in UndertowClientCallback  will be suppressed. As example, if in [https://github.com/apache/camel/blob/7df7778b1a2afe4a2da0730c11f6b1926f613943/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L279]

will be thrown  IOException, then it will be supressed in  [https://github.com/apache/camel/blob/7df7778b1a2afe4a2da0730c11f6b1926f613943/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L291] because the [https://github.com/apache/camel/blob/7df7778b1a2afe4a2da0730c11f6b1926f613943/components/camel-undertow/src/main/java/org/apache/camel/component/undertow/UndertowClientCallback.java#L187] has not be executed
chardahe@redhat.com:1591312075:2020-06-05T07:07:55.647+0000:1591312075:2020-06-05T07:07:55.647+0000:Thanks [~uzuruk], for the clarification,I'm looking into it"
0,CAMEL-15128,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-28 11:55:46+00:00,2020-06-02 09:58:56+00:00,"If you run camel standalone and have camel-health on the classpath, we should include a basic camel context health check.",
0,CAMEL-15127,Improvement,Major,None,3.4.0,"
None
",Resolved,Won't Fix,3.4.0,Claus Ibsen,Claus Ibsen,0,2,2020-05-28 07:40:22+00:00,2020-05-29 09:04:28+00:00,"We can potentially replace HealthCheckRegistry with Registry as we can bind to registry now. And we can use that to store HealthCheck and HealthCheckRepository in there instead of the HC registry.


This is also how Spring Boot does it by registering HealthCheck in the registry","lb:1590623487:2020-05-28T07:51:27.005+0000:1590623487:2020-05-28T07:51:27.005+0000:+1

or maybe transform it into a BeansRepository
davsclaus:1590714268:2020-05-29T09:04:28.548+0000:1590714268:2020-05-29T09:04:28.548+0000:The BeanRepository tend to have too many APIs for find/lookup etc and for arbitrary types.

Instead lets simplify the health api and make it a bit more basic."
0,CAMEL-15126,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-28 07:14:17+00:00,2020-06-08 11:58:22+00:00,"It would be good to get this more aligned and similar across runtimes, and also to let Camel log on startup which health-check implementation is in use: main, spring boot, microprofile etc.


spring boot is discovered and installed via spring boot auto-configuration
microprofile health is not discoverd and registered by camel, but MP only
main currently is manual and limited.",
0,CAMEL-15125,Improvement,Minor,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Jannik Schmeier,0,1,2020-05-27 21:15:34+00:00,2020-05-28 04:01:31+00:00,"The setProperty DSL currently does not allow for the usage of a java.util.function.Supplier like the setHeader DSL already does.


I went ahead and created a PR for this functionality.",
0,CAMEL-15124,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Guillaume Nodet,Luca Burgazzoli,0,1,2020-05-27 14:42:11+00:00,2020-05-28 18:52:14+00:00,"DefaultErrorHandlerBuilder and the other ErrorHandlerBuilders have the following fields:




public class DefaultErrorHandlerBuilder extends ErrorHandlerBuilderSupport {
    protected CamelLogger logger;
    protected RedeliveryPolicy redeliveryPolicy;
    protected Processor onRedelivery;
    protected Predicate retryWhile;
    protected String retryWhileRef;
    protected Processor failureProcessor;
    protected Endpoint deadLetter;
    protected String deadLetterUri;
    protected boolean deadLetterHandleNewException = true;
    protected boolean useOriginalMessage;
    protected boolean useOriginalBody;
    protected boolean asyncDelayedRedelivery;
    protected String executorServiceRef;
    protected ScheduledExecutorService executorService;
    protected Processor onPrepareFailure;
    protected Processor onExceptionOccurred;

    public DefaultErrorHandlerBuilder() {
    }




so there's no xyxRef as example, there's no onExceptionOccurredRef however it looks like those refs are available with spring xml (and probably blueprint) so wonder if we can add the refs on the ErrorHandlerBuilder.",
0,CAMEL-15123,Improvement,Minor,3.3.0,,"
None
",Resolved,Information Provided,None,Unassigned,Stefan Burkard,0,2,2020-05-27 14:21:21+00:00,2022-09-02 15:46:22+00:00,"According to this question and answer on StackOverflow, camel-rabbitmq creates its own queue instead of using an existing one when the queue properties and the connection string properties do not match.


This is especially confusing when the queue property is provided, but the consumer does not consume or produce to/from the predefined queue.


And it can be tricky too: differences can be hidden in default values of the Camel consumer. In the mentioned SO answer, the property autoDelete was the difference (by default true in Camel, but false on the predefined queue).


From a user perspective, camel-rabbitmq should always connect to the predefined queue if the queue name and the rabbitmq exchange match an existing exchange/queue. Even if some other properties do not match. It could perhaps warn in the logs about any differences in properties.",davsclaus:1662104782:2022-09-02T15:46:22.789+0000:1662104782:2022-09-02T15:46:22.789+0000:use camel-spring-rabbitmq
0,CAMEL-15122,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.4.0,Unassigned,Jorick Flabat,1,2,2020-05-27 12:54:56+00:00,2020-05-28 04:01:08+00:00,"The jslt library offers the ability to customize the object filtering. By default, empty array, empty object and null values are filtered out. We can customize it with a custom JsonFilter.


The attached PR implements a way to pass a custom object filter to the JsltComponent and provides unit tests",
0,CAMEL-15121,Bug,Minor,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Stefan Burkard,0,1,2020-05-27 12:52:20+00:00,2020-05-28 04:02:00+00:00,"While trying to create a custom HeaderFilterStrategy for camel-kafka I noticed that the two methods of the strategy are used interchanged.



The KafkaConsumer calls applyFilterToCamelHeaders
The KafkaProducer calls applyFilterToExternalHeaders



According to the HeaderFilterStrategy Interface, it should be the other way round.


I guess this bug is there since the beginning of the component (therefore affects all released versions).


I have submitted the pull request 3864 to fix this.


As easy as the code is to fix, this is sort of a breaking change for all existing (intentionally wrong) custom HeaderFilterStrategies for camel-kafka.",
0,CAMEL-15120,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.4.0,Unassigned,Jorick Flabat,1,2,2020-05-27 12:17:34+00:00,2020-05-29 18:42:55+00:00,"The jslt library allows to pass external variables when applying a jslt to an input json. This issue is implemented by using the headers of the message as external variables. The header values are converted using the jackson library to a JsonNode. The attached PR provides the unit tests and the code that implements this new functionality.


 


NB: the component camel-jslt does not exist yet",
0,CAMEL-15119,Improvement,Major,None,None,"
None
",Resolved,Duplicate,3.5.0,Claus Ibsen,Peter Palaga,0,2,2020-05-27 09:30:34+00:00,2020-06-22 10:32:17+00:00,"Original report https://github.com/apache/camel-quarkus/issues/1108


AbstractApiComponent is currently the superclass of Box, Braintree, FHIR, Google*, Olingo*, Twillio and Zendesk.


Configuration classes such as BraintreeConfiguration and all its generated subclasses (AddOnGatewayEndpointConfiguration, AddressGatewayEndpointConfiguration, ClientTokenGatewayEndpointConfiguration, ...) require registering for reflection on Camel Quarkus.


If would be nice if the configurer approach could cover these too.","davsclaus:1590613927:2020-05-28T05:12:07.171+0000:1590613927:2020-05-28T05:12:07.171+0000:Those are auto generated and lacks documentation on their options, which currently the tools require
davsclaus:1592793137:2020-06-22T10:32:17.954+0000:1592793137:2020-06-22T10:32:17.954+0000:https://issues.apache.org/jira/browse/CAMEL-15224 fixes this"
0,CAMEL-15118,Task,Major,None,,"

outreachy2020

",Resolved,Implemented,None,Unassigned,Aemie,0,2,2020-05-27 08:21:18+00:00,2020-05-28 22:21:27+00:00,"We do have a profile to check the code against the standards we want, but then as to be manually fixed. We could fail is there's a problem at build time but that slows down people and can become very annoying.
There are plugins that do reformat the source code during the compilation phase, this should ensure that all committed code follows the standard, without causing any disturbance to the developers.","githubbot:1590539110:2020-05-27T08:25:10.729+0000:1590539110:2020-05-27T08:25:10.729+0000:AemieJ commented on pull request #371:
URL: https://github.com/apache/camel-website/pull/371#issuecomment-634509223


   @lburgazzoli I have created a separate issue with the website component and made the changes, is that okay with you now?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1590674596:2020-05-28T22:03:16.140+0000:1590674596:2020-05-28T22:03:16.140+0000:zregvart merged pull request #371:
URL: https://github.com/apache/camel-website/pull/371


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-15117,Bug,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Otavio Rodolfo Piske,1,2,2020-05-27 07:56:32+00:00,2020-06-15 15:23:22+00:00,"It seems that, sporadically, the code may throw an NPE.


 


I am speculating*because I cannot confirm entirely due to the sporadic nature of the issue, but by looking at the logs and the behavior, it seems that the onMessage handler for subscriptions can still be called during the shutdown.


 


2020-05-27 09:19:21,017 [orceConnector-0] INFO org.apache.camel.impl.engine.DefaultShutdownStrategy - Graceful shutdown of 1 routes completed in 0 seconds
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State updated: CONNECTED -> DISCONNECTING
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Sending messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19}]
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Sent disconnect {clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19}
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Notifying threads in waitFor()
2020-05-27 09:19:21,018 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Waiting 60000ms for [DISCONNECTED]
2020-05-27 09:19:21,147 [nt@4ae82baa-204] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19, successful=true}]09:19:21,147 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Processing {clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/disconnect, id=19, successful=true}
2020-05-27 09:19:21,147 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State updated: DISCONNECTING -> TERMINATING
2020-05-27 09:19:21,147 [nt@4ae82baa-203] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/connect, id=17, successful=true}]27 09:19:21,147 [nt@4ae82baa-203] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Processing {clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/connect, id=17, successful=true}
2020-05-27 09:19:21,148 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State updated: TERMINATING -> DISCONNECTED
2020-05-27 09:19:21,148 [nt@4ae82baa-204] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Notifying threads in waitFor()
2020-05-27 09:19:21,148 [orceConnector-0] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Waited 129/60000ms for [DISCONNECTED], state is DISCONNECTED
2020-05-27 09:19:21,148 [nt@4ae82baa-203] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - State not updated: DISCONNECTED -> CONNECTED
2020-05-27 09:19:21,148 [nt@4ae82baa-203] DEBUG org.cometd.client.BayeuxClient.67a9cb3f - Notifying threads in waitFor()
2020-05-27 09:19:21,169 [nt@4ae82baa-209] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [\{clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/subscribe, id=18, subscription=/topic/CamelKafkaConnectorTopic, successful=true}]td.client.BayeuxClient.67a9cb3f - Processing {clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/subscribe, id=18, subscription=/topic/CamelKafkaConnectorTopic, successful=true}7 09:19:21,169 [nt@4ae82baa-209] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper - [CHANNEL:META_SUBSCRIBE]: {clientId=hr1cjxz3pqn37al6x32wuz369e0, channel=/meta/subscribe, id=18, subscription=/topic/CamelKafkaConnectorTopic, successful=true}mel.component.salesforce.internal.streaming.SubscriptionHelper - Subscribed to channel /topic/CamelKafkaConnectorTopic
2020-05-27 09:19:21,169 [nt@4ae82baa-209] INFO org.cometd.bayeux.client.ClientSession - Exception while invoking listener org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$7@62e79206
java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$7.onMessage(SubscriptionHelper.java:458) ~[camel-salesforce-3.3.0.jar:3.3.0]
 at org.cometd.common.AbstractClientSession$AbstractSessionChannel.notifyOnMessage(AbstractClientSession.java:583) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.common.AbstractClientSession$AbstractSessionChannel.notifyMessageListeners(AbstractClientSession.java:568) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.common.AbstractClientSession.notifyListeners(AbstractClientSession.java:308) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.common.AbstractClientSession.lambda$receive$4(AbstractClientSession.java:269) ~[cometd-java-common-4.0.4.jar:4.0.4]
 at org.cometd.bayeux.Promise$2.succeed(Promise.java:103) [bayeux-api-4.0.4.jar:4.0.4]
 ...",orpiske:1590537465:2020-05-27T07:57:45.979+0000:1590537465:2020-05-27T07:57:45.979+0000:I will send a PR with a proposed fix for this.
0,CAMEL-15116,Task,Minor,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Luca Burgazzoli,0,1,2020-05-27 06:55:56+00:00,2020-06-11 08:31:18+00:00,The examples listed in the exception-clause page do no appear as a link so you cannot easilly jump to them,
0,CAMEL-15115,Improvement,Minor,None,3.4.0,"

help
help-wanted

",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,2,2020-05-27 05:11:56+00:00,2020-05-31 05:33:15+00:00,"See this table
https://camel.apache.org/components/latest/


And then make this table the same columns and data similar
https://camel.apache.org/camel-quarkus/latest/list-of-camel-quarkus-extensions.html","aashnajena:1590835826:2020-05-30T18:50:26.582+0000:1590835826:2020-05-30T18:50:26.582+0000:The columns are the same in both the tables : Component, Artifact, Support Level, Since, Description. What exactly do we want to change here?
davsclaus:1590874395:2020-05-31T05:33:15.837+0000:1590874395:2020-05-31T05:33:15.837+0000:This has been implemented, the JIRA tis resolved"
0,CAMEL-15114,Improvement,Minor,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,2,2020-05-26 17:21:43+00:00,2020-05-26 18:31:36+00:00,"Reported on user forum, for a user upgrading from 2.x to 3.x",davsclaus:1590484922:2020-05-26T17:22:02.809+0000:1590484922:2020-05-26T17:22:02.809+0000:There is a date:exchangeCreated function you can use now
0,CAMEL-15113,Improvement,Major,3.3.0,3.5.0,"

help-wanted

",Resolved,Fixed,3.5.0,Jan Bednar,Sourabh Tiwari,0,3,2020-05-26 14:40:47+00:00,2020-07-09 08:54:32+00:00,"There is no support to declare dead letter queues with custom arguments. I can find a TODO in RabbitMQDeclareSupport class.


https://github.com/apache/camel/blob/88f46b1ce46f5cdace73b2721a1cb96a290d42dd/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQDeclareSupport.java#L41


 


My requirement is to set a TTL on messages in dead letter queue while queue is declared by Camel. 


What I have tried:
If I create DLQ separately by camel with TTL and use that queue name in original queue then I get exception that TTL value can't be different. Because the declare parameter in RabbitMQEndpoint class declares both original queue and dead letter queue, there is no separate option if someone don't want to declare dead letter queue.


Let me know if there is any workaround except creating queues manually.","davsclaus:1593818594:2020-07-04T07:23:14.595+0000:1593818594:2020-07-04T07:23:14.595+0000:Anyone able to work on a fix for this?
bedla:1594256072:2020-07-09T08:54:32.849+0000:1594256072:2020-07-09T08:54:32.849+0000:Added skipDlqDeclare option and extended {{args}} option with {{dlq.queue}} and {{dlq.binding}} prefixes."
0,CAMEL-15112,Task,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-26 14:14:07+00:00,2020-05-26 14:25:39+00:00,"Lets deprecate hystrix as hystrix itself is EOL and we have 2 other CB implementations
https://github.com/Netflix/Hystrix",
0,CAMEL-15111,Bug,Minor,3.3.0,None,"

AS2
encrypted,
receive
server

",Resolved,Fixed,"3.18.5, 3.20.1, 3.21.0, 4.0-M1, 4.0.0",Yasser Zamani,S. Youssef,8,6,2020-05-26 10:32:51+00:00,2023-01-30 08:59:47+00:00,"AS2 component can receive only messages that has the following content-type: 



application/edifact
application/edi-x12
application/edi-consent



in case of a PLAIN interchange it works fine, however when i try to receive an ENCRYPTED/SIGNED/COMPRESSED messages camel don't recognize the content type of the interchange.


Here is the message sent by my trading partner : 




AS2-From: ESALINK
AS2-To: YSF2
AS2-Version: 1.2
Date: Mon, 25 May 2020 22:04:47 GMT
Disposition-Notification-Options: signed-receipt-protocol=optional,pkcs7-signature;signed-receipt-micalg=optional,md5
Disposition-Notification-To: ediint-sync-mdn
EDIINT-Features: multiple-attachments
Message-ID: <20200525220447.3200.111@DESKTOP-OT6I4JG>
Subject: message from YSF
Content-Type: multipart/signed; protocol=""application/pkcs7-signature""; micalg=md5; boundary=""------15ECC40FF5D299411590444287BC801""
--------15ECC40FF5D299411590444287BC801
Content-Transfer-Encoding: binary
Content-Disposition: attachment; filename=""smime.p7m""
Content-Type: application/pkcs7-mime; smime-type=compressed-data; name=""smime.p7m""0€*†H†÷
		 €0€0*†H†÷
	0€	*†H†÷
 €$€‚îxrÎÏ+IÍ+Ñ
)JÌ+NK-ÒuÍKÎOÉÌK- RHÊÌK,ªäår†*qÉ,.È/Î,ÉÌÏ³RH,)ILÎÈjµVHËÌIÍKÌMµU*ÎÍÌMÕ+0ÏUBh©,Hª/(ÈÉLNiÖ/ÈN.6×)µVëÐ-ª±MÍ+KÍÉ/HMÑMI,I´VÀ4'—Ë ‰©€S«Í£í;/#;ó‚&¦D P,#ƒaãqƒ&ÆÃ@¦Aã*ƒÆ%†ÜœlÌ¡,lÂLnA†ü¼ ‡0›Ð§É©†|< vaÖ€Ä¢ÌbC1ŸK˜×=5/µ(³BÁ½(¿´ÀPÆ@
$Î-,ìšö»0¨RR#
ŠR‹‹

øA²ÌÂ‰E%@}F†Úšpr2ŠÉ""€""W€•;¤CŒN™¬—œŸr,/\5##+K#ƒYOú¿¥Šw6ßíiJ(»œqÉj­ã±_bE§fýÖas®XµxÚ'Ï™|
ý;ûÄNN7ßÕÆs{é|ƒ|wïkž<×\ý>- ú!ûFƒ™>{Ÿ™Yîúa:ÙúÊšÚÞná°|zu†- è=îwÅ—VßøW§ÿùëãÎ þg¥nš
«½n°tzwË{Lb]0Kÿ¿ÅÛ




camel will send an MDN containing this message: 




Failed to parse entity content","krisbash:1632119308:2021-09-20T14:28:28.252+0000:1632119308:2021-09-20T14:28:28.252+0000:We have very similar problem. We want to send message to our AS2 Camel Server. When we use binary encoding or encryption algorithm we have result as below: 

!image-2021-09-20-16-26-35-053.png!

Base64 encoding with no encryption works.

Any ideas?
joao.r.miranda:1647597422:2022-03-18T17:57:02.307+0000:1647597422:2022-03-18T17:57:02.307+0000:Hello! 
I'm having the same problem here using camel 3.11.3.

Basically, the camel-as2 supports messages encrypted/signed/compressed with content-transfer-encoding: base64 but does not support if they are binary.
content-transfer-encoding: binary
 

It fails with:
Failed to parse entity content
davsclaus:1647824659:2022-03-21T09:04:19.400+0000:1647824659:2022-03-21T09:04:19.400+0000:Use to JIRA vote to help show tickets that are popular for community users
davsclaus:1662104767:2022-09-02T15:46:07.997+0000:1662104767:2022-09-02T15:46:07.997+0000:Community users is welcome to help with this
yasserzamani:1671319853:2022-12-18T07:30:53.822+0000:1671319853:2022-12-18T07:30:53.822+0000:I wish working on and fixing this issue as a contribution to Camel. Could you please assign it to me? as I've already started its analysis.
yasserzamani:1671760815:2022-12-23T10:00:15.644+0000:1671760815:2022-12-23T10:00:15.644+0000:Done and the corresponding PR is automatically linked to this Jira issue.

Actually it was a bug not a new feature. Camel should not force ascii charset if it's not specified in the http request. Camel does this to find multipart boundaries and bang, it reaches Malformed exception on binary contents!

 

[~mrsafi] [~joao.r.miranda] [~krisbash] are you maybe able to pull this specific module, build and test against it? I've comprehensively unit tested all 8 possibilities for encrypt, sign and compress, but your confirmation makes me happier :)
davsclaus:1671766063:2022-12-23T11:27:43.943+0000:1671766063:2022-12-23T11:27:43.943+0000:Thanks for the PR, you are welcome to keep improving camel-as2 and other parts of Camel"
0,CAMEL-15110,Improvement,Minor,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Claus Ibsen,0,1,2020-05-26 07:08:21+00:00,2020-05-26 07:35:07+00:00,"We should add method to ResourceHelper so resource based components can use this to know if it will be loaded from classpath or not.


This can be used to optimize for build time optimization as classpath can be initializer earlier. Where as file/http has to be loaded at runtime.",
0,CAMEL-15109,New Feature,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-05-25 10:45:25+00:00,2020-05-25 11:52:54+00:00,No Desc,
0,CAMEL-15108,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Zheng Feng,Zheng Feng,1,3,2020-05-25 01:41:49+00:00,2020-07-02 01:21:52+00:00,"This issue came across the https://github.com/apache/camel-quarkus/issues/1197
It looks like the JtaTransactionPolicy does not depend on CDI except it introduces the transactionManager via @Resource. So it could be helpful to extract this implementation in the camel-jta module, and the camel-quarkus would like to leverage the narayana-jta extension to support the transactd() in the camel-quarkus.",davsclaus:1590354692:2020-05-25T05:11:32.148+0000:1590354692:2020-05-25T05:11:32.148+0000:Yeah sure this is a good idea
0,CAMEL-15107,Bug,Minor,3.3.0,None,"
None
",Closed,Works for Me,3.4.0,Unassigned,Sunil Sudhakaran,0,2,2020-05-24 23:54:17+00:00,2020-05-26 19:01:46+00:00,"Hi Camel Team,
Note: I received email delivery failure with issues@camel.apache.org and hence raising Jira.
 
I’m not sure if it’s a bug or missing something as part of upgrade camel 3.1.0 to 3.3.0. I’m getting a Jackson error from swagger UI api doc page for my springboot application after camel 3.3upgrade.
 
I’m using camel 3.3.0. With camel-swagger-java dependency 3.3.0 and springboot 2.3.0. I use org.webjars.swagger-ui version 3.25.3 dependency as well.
I use camel-Servlet in REST DSL for my camel REST apis being exposed. 
 
It was working perfectly fine in camel 3.1.0 with spring boot 2.2.6. But not in camel 3.3.0
 
Could you please help?
 
Error details:
 




//

Caused by: java.lang.NoSuchMethodError:
com.fasterxml.jackson.databind.introspect.AnnotatedMember.getType(Lcom/fasterxml/jackson/databind/type/TypeBindings;)Lcom/fasterxml/jackson/databind/JavaType;
at io.swagger.jackson.ModelResolver.resolve(ModelResolver.java:425) [swagger-core-1.5.24.jar:1.5.24]
at io.swaggerjackson.ModelResolver.resolve ModelResolver.java:203) Iswagger-core-1.5.24jar:1.5.24]
at io.swagger.comverter.ModelConverterContextimpl.resolve(ModelConverterContextlmpl.java:103) [swagger-core-1.5.24.jar:1.5.24]
at io.swagger.converter.ModelConverters.read(ModelConverters.java:76) swagger-core-1.5.24.jar:1.5.24]
at io.swagger.converter. ModelConverters.read(ModelConverters.java:67)*[swagger-core-1.5.24.jar:1.5.24]
at org.apache.camel.swagger. RestModel Converters.readClass(RestModel Converters.java:33) ""[camel-swagger-java-3.3.0.jar:3.3.0]
at org.apache.camel.swagger.Restwagger Reader.appendModels(Restswagger Reader.java:755) [camel-swagger-java-3.3.0,jar:3.3.0
at org.apache.camel.swagger.RestSwaggerReader.parse(RestSwageerReader.java:225) camel-swagger-java-3.3.0.jar:3.3.0]
at org.apache.camel.swagger.RestSwaggerReader.read(RestSwaggerReader.java:111) [camel-swagger-java-3.3.0.jar:3.3.0]
at org.apache.camel.swagger.RestSwaggerSupport.renderResourceListing(RestSwaggerSupport.java:263) [camel-swagger-java-3.3.0.jar:3.3.0
at org.apache.camel.swagger. RestSwaggerProcessor.process(RestSwaggerProcessor.java:119) [camel-swagger-java-3.3.0.jar:3.3.0]
at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:67)
camel-support-3.3.0.jar:3.3.0]
59 common frames omitted","davsclaus:1590358101:2020-05-25T06:08:21.391+0000:1590358101:2020-05-25T06:08:21.391+0000:You can try using camel-openapi-java that is more modern.
davsclaus:1590364779:2020-05-25T07:59:39.490+0000:1590364779:2020-05-25T07:59:39.490+0000:Oh btw the error smells like you have mixed versions of jackson on the classpath
sunils87:1590368401:2020-05-25T09:00:01.057+0000:1590368401:2020-05-25T09:00:01.057+0000:could you please share an example for open api with a ui?


I tried with camel-openapi-java.  It works again in camel 3.1 with openapi 3.0.2 and can be displayed on User interface of Swagger UI or with springdoc ui.

 

but, in camel 3.3 it fails. It a different error this time
{code:java}
//

failed to start route doc-api because of null.

caused by java.lang.IllegalStateException: Cannot find RestApiProcessorFactory in Registry or classpath (such as the camel-openapi-java component)
at org.apache.camel.component.rest.RestApiEndpoint.createProducer(RestApiEndpoint.java:207) ~[camel-rest-3.3.0.jar:3.3.0]{code}
 
sunils87:1590368662:2020-05-25T09:04:22.648+0000:1590368662:2020-05-25T09:04:22.648+0000:Also my code has dependency camel-jackson 3.3.0. It uses the bom

Which internally is jackson-core2.11.0.jar which comes along with above camel jackson 
davsclaus:1590380860:2020-05-25T12:27:40.907+0000:1590380860:2020-05-25T12:27:40.907+0000:Oh it may be due to https://issues.apache.org/jira/browse/CAMEL-15109 which is fixed in 3.4.0
davsclaus:1590380887:2020-05-25T12:28:07.248+0000:1590380887:2020-05-25T12:28:07.248+0000:For jackson issue then you need to fix the classpath to use same version, not mixed.
sunils87:1590396822:2020-05-25T16:53:42.832+0000:1590396822:2020-05-25T16:53:42.832+0000:Sure thank you for update. I will check into the jackson jar version issue.

 

One last question, as per the Jira ticket for the component *camel-rest-openapi* will it support *servlet* component in camel 3.4.0 ?
davsclaus:1590473503:2020-05-26T14:11:43.321+0000:1590473503:2020-05-26T14:11:43.321+0000:yeah rest-dsl should support servlet.

And if you keep having problems then I suggest to put together a sample project and put up on github somewhere, or attach here as .zip file.
sunils87:1590490735:2020-05-26T18:58:55.259+0000:1590490735:2020-05-26T18:58:55.259+0000:sure thank you for all help"
0,CAMEL-15106,Improvement,Major,3.3.0,3.8.0,"
None
",Resolved,Fixed,3.8.0,Viral Gohel,Adithya Rao,2,4,2020-05-24 19:52:19+00:00,2021-01-21 14:30:54+00:00,"Can KafkaConsumer support suspend and resume using Kafka's consumer.pause() and consumer.resume(). This keeps consumers alive and avoids recreating consumers and rebalance.


rough attempt attached.","vrlgohel:1591674127:2020-06-09T11:42:07.960+0000:1591674127:2020-06-09T11:42:07.960+0000:I am looking into this.
davsclaus:1598227406:2020-08-24T08:03:26.913+0000:1598227406:2020-08-24T08:03:26.913+0000:Also talked on user mailing list
http://camel.465427.n5.nabble.com/Access-native-KafkaConsumer-in-Camel-RoutePolicy-td5879508.html
davsclaus:1610849681:2021-01-17T10:14:41.695+0000:1610849681:2021-01-17T10:14:41.695+0000:Added support for suspend/resume in camel-vertx-kafka for Camel 3.8
davsclaus:1611210654:2021-01-21T14:30:54.932+0000:1611210654:2021-01-21T14:30:54.932+0000:use camel-vertx-kafka"
0,CAMEL-15105,Improvement,Major,None,"4.0-RC1, 4.0.0","
None
",Resolved,Fixed,"4.0-RC1, 4.0.0",Otavio Rodolfo Piske,Claus Ibsen,0,3,2020-05-24 08:24:17+00:00,2023-10-16 15:07:41+00:00,"We should revisit the way we access plugins in CamelContext via either Extension or getter/setter on ExtendedCamelContext.


They are currently separated, and could be uniform and consistent.","Mahas_M:1607382433:2020-12-08T07:07:13.390+0000:1607382433:2020-12-08T07:07:13.390+0000:Hi,

I'm Mohammadu Milhar Mahas, a second year undergraduate in Computer Science at the University of Jaffna, Sri Lanka,

I would like to work with this project 

please help me to start up this project for Gsoc 2021
orpiske:1674096560:2023-01-19T10:49:20.030+0000:1674096560:2023-01-19T10:49:20.030+0000:I think the fix for the secondary supers cache issue may resolve this (or, at least, give some ideas about how this can be solved). I'm still waiting for some machines to test, but I'm planning to submit a proposed patch in ~2 weeks (once they arrive).

 

I am going to assign this one to me (please let me know in case I misunderstood the change and you would like to take this over, Claus).
orpiske:1680561534:2023-04-04T06:38:54.034+0000:1680561534:2023-04-04T06:38:54.034+0000:Several plugins have now been adapted to either use the new PluginManager in the DefaultCamelContextExtension or to have ownership in the extension (for those cases with complex startup relationship, being on the hot path, etc).

The AbstractCamelContext is now much cleaner and the access is mostly uniform, but there's a few more that we need to review and adapt as necessary. I am taking a pause on this for a few days due to other urgent priorities, but I'll continue on this (albeit slowly) for the time being.
orpiske:1686634977:2023-06-13T13:42:57.774+0000:1686634977:2023-06-13T13:42:57.774+0000:API changes for the CamelContext are complete. Future work - if any - can be done on a separate ticket."
0,CAMEL-15104,Bug,Major,2.23.2,None,"
None
",Resolved,Information Provided,None,Unassigned,Luca Ferrari,0,2,2020-05-22 15:57:07+00:00,2020-06-19 12:26:00+00:00,"I'm trying to connect to a CB cluster while configuring the connector in the following way:




.to(""couchbase:http://{{couchbase.server}}/{{couchbase.bucket}}?operation=CCB_PUT&password={{bucket.pass}}"")



 


with application properties:




couchbase.server=cb-cluster.unicredit.svc:8091
couchbase.bucket=my-bucket
bucket.pass=password



 


after noticing that the most recent authentication mode (RBAC) with username and password is not really supported but the client is automatically calling the SASL authentication mode. So had to create a user with the same bucket name as its username.


 


The result of the connection initialization in logs is:




2020-05-22 15:35:13.552 INFO net.spy.memcached.auth.AuthThread: Authenticated to cb-cluster.unicredit.svc/10.128.0.81:11210
2020-05-22 15:35:13.580 WARN com.couchbase.client.vbucket.provider.BucketConfigurationProvider: Could not parse config, retrying bootstrap.
java.text.ParseException: JSONObject[""proxy""] not found.",acosentino:1590136459:2020-05-22T16:34:19.291+0000:1590136459:2020-05-22T16:34:19.291+0000:The component uses an old java client that won't work with newest couchbase. There is an issue for upgrading to newer client
0,CAMEL-15103,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Darius Cooper,0,2,2020-05-22 14:25:42+00:00,2020-05-23 06:39:57+00:00,"I see that Camel 3.x is using the latest version 2.5 of kafka-clients


Is that something we could do in Camel 2.25.x as well?","acosentino:1590128896:2020-05-22T14:28:16.755+0000:1590128896:2020-05-22T14:28:16.755+0000:2.25.x is based on 2.1.0, and we already released a 2.25.1, we cannot break existing users by bumping to 2.5.0, so in my opinion, no, it cannot be done for 2.25.x
dariusx:1590169941:2020-05-23T01:52:21.562+0000:1590169941:2020-05-23T01:52:21.562+0000:Thanks for the response. I tried looking for the roadmap blog but couldn't find: is a Camel 2.26 planned in the future? 
I'm wondering if a Kafka version upgrade would be acceptable *if* there were to be a Camel 2.26 at some point?

Just as an FYI, we use Camel 2.24.3 and override kafka-clients to use 2.3, and is seems good. 
Would definitely like to move to Camel 3.x, but on a really large project, it's a multi-month endeavor."
0,CAMEL-15102,Improvement,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Jean-Baptiste Onofré,Claus Ibsen,0,3,2020-05-22 12:17:57+00:00,2020-08-06 07:59:47+00:00,We should create a camel-karaf-examples git repo and move the osgi/blueprint examples from camel-examples there.,"jbonofre:1590463854:2020-05-26T11:30:54.113+0000:1590463854:2020-05-26T11:30:54.113+0000:It sounds good. I will tackle that.
acosentino:1590463911:2020-05-26T11:31:51.934+0000:1590463911:2020-05-26T11:31:51.934+0000:I'm already working on this.
jbonofre:1590463955:2020-05-26T11:32:35.946+0000:1590463955:2020-05-26T11:32:35.946+0000:[~acosentino] cool, thanks for the update !
jbonofre:1592796516:2020-06-22T11:28:36.419+0000:1592796516:2020-06-22T11:28:36.419+0000:I'm also planning new examples to show coming improvements (whiteboard, etc).
jbonofre:1592796564:2020-06-22T11:29:24.752+0000:1592796564:2020-06-22T11:29:24.752+0000:[~acosentino] do you mind if I push the example in [https://github.com/apache/camel-karaf-examples] as I'm working on the cleanup/improvements on camel-karaf ?
acosentino:1592798496:2020-06-22T12:01:36.084+0000:1592798496:2020-06-22T12:01:36.084+0000:sure
davsclaus:1596671987:2020-08-06T07:59:47.033+0000:1596671987:2020-08-06T07:59:47.033+0000:The examples has been moved
https://github.com/apache/camel-karaf-examples"
0,CAMEL-15101,Bug,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Zoran Regvart,Zoran Regvart,0,1,2020-05-22 10:50:16+00:00,2020-05-22 11:10:45+00:00,"When Camel headers are populated from Netty HttpRequest if the scheme of the URL in the request is ""https"" and the port is not specified (e.g. ""https://example.com"") the Exchange.HTTP_PORT is set to 80 instead of 443.
If the absolute URL is present on the Netty HttpRequest, i.e. when used as proxy, the Exchange.HTTP_URL gets set to the concatenation of the consumer URL and the producer URL.",
0,CAMEL-15100,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Zoran Regvart,Zoran Regvart,0,1,2020-05-22 10:45:07+00:00,2020-05-22 11:10:53+00:00,"The SSL context initialization requires that the keystore or truststore is specified as file or as resource. We could create a default SSL context when none of those is specified, making it more user friendly to configure/use the component.",
0,CAMEL-15099,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Zoran Regvart,Zoran Regvart,0,1,2020-05-22 10:42:34+00:00,2020-05-22 11:10:59+00:00,"When netty-http is used as a with https url, for example with to(""netty-http:https://...""), we should set the ssl property to true. This is already done when the component is used as a part of the REST producer contract and having it configured as default provides a nice symmetry and makes it more user friendly.",
0,CAMEL-15098,Bug,Major,3.4.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Zoran Regvart,0,1,2020-05-22 09:42:59+00:00,2020-05-22 10:32:43+00:00,Seems that docs/user-manual/modules/ROOT/pages/camel-3x-upgrade-guide-3_4.adoc was malformed by merge conflict.,
0,CAMEL-15097,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-22 06:58:29+00:00,2020-05-22 12:08:39+00:00,"Routes have 1 input in camel 3. There was a variation in java dsl which we have not prevented


from a from b from c to foo",
0,CAMEL-15096,Task,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Jean-Baptiste Onofré,Claus Ibsen,0,1,2020-05-22 06:54:26+00:00,2020-06-10 08:04:28+00:00,"Spring Boot comes with 9.4.28.v20200408
And we are using an older version.


Apache Karaf should upgrade too.","davsclaus:1590102793:2020-05-22T07:13:13.012+0000:1590102793:2020-05-22T07:13:13.012+0000:Karaf seems to have upgraded
https://github.com/apache/karaf/blob/karaf-4.2.x/pom.xml#L267
davsclaus:1590120540:2020-05-22T12:09:00.177+0000:1590120540:2020-05-22T12:09:00.177+0000:Karaf are in the works on doing a new release"
0,CAMEL-15095,Improvement,Minor,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,mastermay,0,1,2020-05-22 03:03:03+00:00,2020-05-22 04:42:58+00:00,"add a line break before stack trace detail to help print a more readable and friendly log.


the example below shows the changes:


before:


 




Failed delivery for (MessageId: xxx). Exhausted after delivery attempt: 1 caught: com.example.exception.SomeException: xxx

Message History
---------------
...

Stacktrace
--------------- com.example.exception.SomeException: xxx
    at ...
    at ...




after




Failed delivery for (MessageId: xxx). Exhausted after delivery attempt: 1 caught: com.example.exception.SomeException: xxx

Message History
---------------
...

Stacktrace
---------------
com.example.exception.SomeException: xxx
    at ...
    at ...",
0,CAMEL-15094,Task,Major,None,3.7.0,"

help-wanted

",Resolved,Fixed,3.7.0,Unassigned,Andrea Cosentino,0,3,2020-05-21 18:45:00+00:00,2020-10-31 07:01:36+00:00,No Desc,"praveenkottarathil@gmail.com:1603977800:2020-10-29T21:23:20.781+0000:1603977800:2020-10-29T21:23:20.781+0000:I am picking this up.
I noticed that [~acosentino] recently moved springboot & karaf archetype to their respective projects. Since endpoint DSL is a part of Camel core, planning to keep this under `camel/archetypes`, just like `camel-archetype-java`. Is this alright?
davsclaus:1604006207:2020-10-30T05:16:47.617+0000:1604006207:2020-10-30T05:16:47.617+0000:Yes correct
praveenkottarathil@gmail.com:1604041303:2020-10-30T15:01:43.358+0000:1604041303:2020-10-30T15:01:43.358+0000:Thanks [~davsclaus] 
[PR4542|https://github.com/apache/camel/pull/4542] is ready

 "
0,CAMEL-15093,Bug,Major,2.23.2,,"
None
",Resolved,Abandoned,None,Unassigned,Sacintha Raj,0,2,2020-05-21 08:04:49+00:00,2020-12-22 08:41:46+00:00,"Expected functionality



I send 100 messages to the queue
The camel consumer consumes the messages and sends it to the Backend Mocking system
The backend mock sends back a 500 status message
The messages is retries three times and send back to failover queue.
And all 100 messages are cleared from the main queue and pushed to failover queue.



 


Actual error


 



I send 100 messages to the queue
The camel consumer consumes the messages and sends it to the Backend Mocking system
The backend mock sends back a 500 status message
The messages is retries three times and send back to failover queue.
After 19 messages are processed and exception is thrown



com.rabbitmq.client.AlreadyClosedException: channel is already closed due to channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - unknown delivery tag 101,



And inconsistency in message count is also found 86 messages are present in the main queue and 19 messages are present in the failover queue



 


 


 


UPDATE


After adding the options  ""prefetchEnabled=true&prefetchCount=1""


The below exception is thrown


Consumer org.apache.camel.component.rabbitmq.RabbitConsumer@3240f425 (amq.ctag-SyXWmiQnlsHRDZ9sQAj99Q) method handleDelivery for channel AMQChannel(amqp://microservic


euser@172.16.2.200:5672/,1) threw an exception for channel AMQChannel(amqp://microserviceuser@172.16.2.200:5672/,1)


com.rabbitmq.client.AlreadyClosedException: connection is already closed due to connection error; cause: java.io.EOFException


 


The consumer code


 


from(""rabbitmq:amq-direct?connectionFactory=#rabbitConnectionFactory&"" +


                ""autoDelete=false&prefetchEnabled=true&autoAck=false&prefetchCount=1&"" +


                ""routingKey=eis.ncts.ctc.oodes.request&queue=eis.ncts.ctc.oodes.request.queue"")


 


 


The exception that is thrown on a rabbit Mq server


 


2020-05-20 14:40:44.089 [error] <0.2931.0> Channel error on connection <0.2913.0> (127.0.0.1:36072 -> 127.0.0.1:5672, vhost: '/', user: 'microserviceuser'), channel 1:


operation basic.ack caused a channel exception precondition_failed: unknown delivery tag 8","davsclaus:1590020357:2020-05-21T08:19:17.491+0000:1590020357:2020-05-21T08:19:17.491+0000:Can you try with Camel 2.25.1 or 3.3.0 release first. And report back
SRAJHMRC:1590020447:2020-05-21T08:20:47.117+0000:1590020447:2020-05-21T08:20:47.117+0000:Forgot  to Add that it is a Kubernetes cluster

 
SRAJHMRC:1590020493:2020-05-21T08:21:33.463+0000:1590020493:2020-05-21T08:21:33.463+0000:I will try to test in the versions mentioned

 
davsclaus:1593818673:2020-07-04T07:24:33.924+0000:1593818673:2020-07-04T07:24:33.924+0000:Have you tested with newer version, there is also Camel 3.4.0 released.
davsclaus:1608597706:2020-12-22T08:41:46.937+0000:1608597706:2020-12-22T08:41:46.937+0000:Try with latest 3.x release and report back"
0,CAMEL-15092,Improvement,Major,3.3.0,Future,"
None
",Resolved,Duplicate,Future,Unassigned,Andrea Tarocchi,0,3,2020-05-20 17:57:55+00:00,2023-12-15 15:54:19+00:00,"To keep the dependencies to a minimum (that would help in subprojects like camel-kafka-connector and camel-quarkus) would be good to investigate if is possible to rewrite the camel-elasticsearch-rest component just depending on: 




        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-client</artifactId>
        </dependency>




instead of:




        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
        </dependency>","zbendhiba:1701233987:2023-11-29T12:59:47.552+0000:1701233987:2023-11-29T12:59:47.552+0000:I think this one should be fixed by https://issues.apache.org/jira/browse/CAMEL-20166
davsclaus:1702626859:2023-12-15T15:54:19.311+0000:1702626859:2023-12-15T15:54:19.311+0000:CAMEL-20166"
0,CAMEL-15091,Improvement,Major,None,None,"
None
",Closed,Fixed,3.4.0,Andrea Tarocchi,Andrea Tarocchi,0,1,2020-05-20 09:18:57+00:00,2020-05-20 16:24:03+00:00,If the first port tried is in use an exception is thrown https://github.com/apache/camel/blob/master/components/camel-test/src/main/java/org/apache/camel/test/AvailablePortFinder.java#L75 and no other port in the provided range is tested.,
0,CAMEL-15090,Task,Minor,None,3.4.0,"

help-wanted
outreachy2020

",Resolved,Fixed,3.4.0,Unassigned,Claus Ibsen,0,3,2020-05-20 07:50:34+00:00,2020-05-25 16:30:56+00:00,"See screenshot.


Using OSGi blueprint with Camel


should be moved up under the Resources & Guides where such things are located.","zregvart:1589947070:2020-05-20T11:57:50.328+0000:1589947070:2020-05-20T11:57:50.328+0000:The change needs to be made to [docs/user-manual/modules/ROOT/nav.adoc|https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/nav.adoc]
Aemie:1590351806:2020-05-25T04:23:26.418+0000:1590351806:2020-05-25T04:23:26.418+0000:This is a pretty minor job just the moving of link required.

 

Apart from that, [~zregvart] if I wanted to open suggestions on the website layout, could I just simply create issues with the `outreachy 2020` label or must I inform either of the mentors first.
zregvart:1590360953:2020-05-25T06:55:53.949+0000:1590360953:2020-05-25T06:55:53.949+0000:[~Aemie] I would create a new issue if one doesn’t exist yet and set the component to website."
0,CAMEL-15089,Test,Minor,3.3.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Zheng Feng,Zheng Feng,0,1,2020-05-20 01:51:34+00:00,2020-05-20 04:40:20+00:00,"Since the kafka 2.5.0 does not incompatible with the scala 2.11 and now we use the testcontainer to launch a kafka instance for testing, I prefer to remove the kafka_2.12.",
0,CAMEL-15088,New Feature,Major,None,None,"
None
",Open,Unresolved,Future,Unassigned,Luca Burgazzoli,0,1,2020-05-19 15:05:28+00:00,2022-09-02 15:45:04+00:00,"We should create a darp component to interact with dapr APIs: https://github.com/dapr/docs/tree/master/reference/api so we can as example




from(""dapr:pubsub/topic"")
   .to(""dapr:invoke/${appName}/${appMethod}"")",
0,CAMEL-15087,Bug,Major,"3.1.0, 3.2.0, 3.3.0",3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Andreu Font Bardolet,0,3,2020-05-19 09:28:44+00:00,2020-05-22 18:34:23+00:00,"From camel 3.1 and up, I have detected that <doD/> doesn't resolve variables in propertyPlaceholders.


For example:


if i have an etc/uri.properties with:




example=http://${headers.url}



 


And in camel Context xml:


 




...
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">

   <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>

   <route id=""test"">
     <from uri=""timer:hello?period=3000""/>

     <setHeader name=""url""><constant>www.google.es</constant></setHeader>

     <log message=""{{example}}""/>
     <!-- It logs: http://www.google.es/ -->

     <toD uri=""example""/>
     <!-- It resolves:  http://${headers.url} instead of http://www.google.es/ -->
  </route>
 </camelContext>




  
  
But if i do a kind of a workarround like this, it works:




...
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">

   <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>

   <route id=""test"">
     <from uri=""timer:hello?period=3000""/>

     <setHeader name=""url""><constant>www.google.es</constant></setHeader>

     <setHeader name=""workarround""><simple>{{example}}</simple></setHeader>
     <toD uri=""${headers.workarround}""/>
     <!-- It now resolves:  http://www.google.es -->
  </route>
 </camelContext>","chardahe@redhat.com:1589936279:2020-05-20T08:57:59.585+0000:1589936279:2020-05-20T08:57:59.585+0000:Hi, I'm working on this
chardahe@redhat.com:1590012493:2020-05-21T06:08:13.035+0000:1590012493:2020-05-21T06:08:13.035+0000:[~andreufontb], isn't it  <toD uri=""\{{example}}""/> ??

 
andreufontb:1590050370:2020-05-21T16:39:30.514+0000:1590050370:2020-05-21T16:39:30.514+0000:Sorry, I had problems writing an example in Jira it autoremoved some characters, I just discovered it has a codeblock funcion:

In response of your question, it is:
{code:java}
<toD uri=""{{example}}""/>
{code}
 

To give more clarity, here is a full rewrite of the example I have post the first time:

In a etc/uri.properties file:
{code:java}
example=http://${headers.url}
{code}
In camel context xml:
{code:java}
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">
  <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>
  <route id=""test"">
    <from uri=""timer:hello?period=3000""/>

    <setHeader name=""url""><constant>www.google.es</constant></setHeader>

    <log message=""{{example}}""/>
    <!-- it logs: http://www.google.es -->
    <toD uri=""{{example}}""/>
    <!-- It resolves:  http://${headers.url} -->

  </route>
</camelContext>
{code}
A way to workarround the issue, is making a camel context like this:
{code:java}
<camelContext id=""example"" xmlns=""http://camel.apache.org/schema/spring"">
  <propertyPlaceholder id=""myProperties"" location=""classpath:etc/uri.properties""/>
  <route id=""test"">
    <from uri=""timer:hello?period=3000""/>

    <setHeader name=""url""><constant>www.google.es</constant></setHeader>

    <log message=""{{example}}""/>
    <!-- it logs: http://www.google.es -->

    <setHeader name=""workarround""><simple>{{example}}</simple></setHeader>
    <toD uri=""${headers.workarround}""/>
    <!-- It resolves:  http://www.google.es -->

 </route>
</camelContext>
{code}
Sorry for the poor fisrst message, It was my first time :P

 
chardahe@redhat.com:1590063465:2020-05-21T20:17:45.903+0000:1590063465:2020-05-21T20:17:45.903+0000:Thanks for the correction :)

Does it log [http://[www.google.es|http://[www.google.es/]  or  {{{{example}}}}, 
  <log message=""\{{example}}""/>
    <!-- it logs: http://www.google.es -->
in 3.1 there are some changes[1] have been done for property resolution inside definitions

I'm using 3.1 and it's logging {{{{example}}}}

[1] https://issues.apache.org/jira/browse/CAMEL-14445
davsclaus:1590143648:2020-05-22T18:34:08.747+0000:1590143648:2020-05-22T18:34:08.747+0000:Thanks Andreu for reporting and Chandrakant for looking into this."
0,CAMEL-15056,New Feature,Minor,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-05-13 13:04:23+00:00,2020-05-14 14:18:38+00:00,No Desc,
0,CAMEL-15055,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Oleksandr Dmytrov,0,1,2020-05-13 09:02:58+00:00,2020-05-13 14:10:32+00:00,"When breakOnFirstError=true exception is not logged


https://github.com/apache/camel/blob/master/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaConsumer.java#L354",admitrov:1589342987:2020-05-13T12:09:47.498+0000:1589342987:2020-05-13T12:09:47.498+0000:[https://github.com/apache/camel/pull/3819]
0,CAMEL-15054,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,1,2,2020-05-12 18:29:04+00:00,2020-05-14 08:02:07+00:00,"Instead of having to hunt down the 100's different builder classes for each component, then lets have a single class where they all are


// import static org.apache.camel.builder.endpoint.dsl.DirectEndpointBuilderFactory.direct;


That above is what the end user need to static import. Lets make this simpler.","davsclaus:1589361036:2020-05-13T17:10:36.005+0000:1589361036:2020-05-13T17:10:36.005+0000:Okay so this class has all static methods to use the endpoint-dsl from outside the route builder

org.apache.camel.builder.endpoint.StaticEndpointBuilders
davsclaus:1589362373:2020-05-13T17:32:53.173+0000:1589362373:2020-05-13T17:32:53.173+0000:Okay we have this now, the only little negative is that the javadoc is not preserved with nice formatting (empty lines). Its due that we parse the existing file via Roaster to be able to know which existing source code there is to not loose them.

We may in the future come up with a different way to not rewrite the entire file when rebuilding, but its a bit more tricky.
lb:1589409194:2020-05-14T06:33:14.390+0000:1589409212:2020-05-14T06:33:32.788+0000:I think the static method on the *BuilderFactory has been introduced to support generating the endpoint dsl for component outside camel repo in the future, maybe we should have both ? 
davsclaus:1589413872:2020-05-14T07:51:12.949+0000:1589413872:2020-05-14T07:51:12.949+0000:Lets cross that bridge later. There are other implications when doing so. So lets get this tool working well for Camel 3 itself.

And so far its only camel-knative that sits in camel-k-runtime. Maybe it can be move to camel 3?.


lb:1589414527:2020-05-14T08:02:07.292+0000:1589414527:2020-05-14T08:02:07.292+0000:Yup no problem to fix it later. 

About camel-knative it can't be moved yet as there's still to many moving part tightly related to the runtime but I'm not really concerned about that particular component but more for allowing external component developers to leverage the same goodies we have in camel :)"
0,CAMEL-15053,Bug,Major,3.2.0,None,"
None
",Resolved,Invalid,None,Claus Ibsen,Tiago Manso,0,3,2020-05-12 13:39:44+00:00,2020-05-15 08:03:12+00:00,"I'm having a stackoverflow error while trying to run a really simple project to see what was the issue in the project i am working on.


 


I uploaded the small test project to github: [github_project|https://github.com/TiagoManso/apache-camelquarkus-test] so it is easier to reproduce the error.


 The error is the following:




java.lang.StackOverflowError
	at java.base/jdk.internal.misc.Unsafe.allocateUninitializedArray(Unsafe.java:1269)
	at java.base/java.lang.invoke.StringConcatFactory$MethodHandleInlineCopyStrategy.newArray(StringConcatFactory.java:1633)
	at java.management/com.sun.jmx.mbeanserver.Introspector.implementsMBean(Introspector.java:526)
	at java.management/com.sun.jmx.mbeanserver.Introspector.findMBeanInterface(Introspector.java:381)
	at java.management/com.sun.jmx.mbeanserver.Introspector.getStandardMBeanInterface(Introspector.java:329)
	at java.management/com.sun.jmx.mbeanserver.Introspector.checkCompliance(Introspector.java:158)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:313)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)
	at org.apache.camel.management.DefaultManagementAgent.registerMBeanWithServer(DefaultManagementAgent.java:420)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:306)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1399)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1395)
	at org.apache.camel.impl.engine.AbstractCamelContext.setBeanIntrospection(AbstractCamelContext.java:3794)
	at org.apache.camel.impl.engine.AbstractCamelContext.getBeanIntrospection(AbstractCamelContext.java:3785)
	at org.apache.camel.support.management.MBeanInfoAssembler.doDoExtractAttributesAndOperations(MBeanInfoAssembler.java:196)
	at org.apache.camel.support.management.MBeanInfoAssembler.doExtractAttributesAndOperations(MBeanInfoAssembler.java:166)
	at org.apache.camel.support.management.MBeanInfoAssembler.extractAttributesAndOperations(MBeanInfoAssembler.java:147)
	at org.apache.camel.support.management.MBeanInfoAssembler.getMBeanInfo(MBeanInfoAssembler.java:118)
	at org.apache.camel.support.management.DefaultManagementMBeanAssembler.assemble(DefaultManagementMBeanAssembler.java:76)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:310)
	at org.apache.camel.management.DefaultManagementAgent.register(DefaultManagementAgent.java:300)
	at org.apache.camel.management.JmxManagementStrategy.manageObject(JmxManagementStrategy.java:67)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.manageObject(JmxManagementLifecycleStrategy.java:901)
	at org.apache.camel.management.JmxManagementLifecycleStrategy.onServiceAdd(JmxManagementLifecycleStrategy.java:450)
	at org.apache.camel.impl.engine.AbstractCamelContext.internalAddService(AbstractCamelContext.java:1428)
	at org.apache.camel.impl.engine.AbstractCamelContext.doAddService(AbstractCamelContext.java:1404)



Process finished with exit code 255","acosentino:1589262164:2020-05-12T13:42:44.232+0000:1589262164:2020-05-12T13:42:44.232+0000:Please, the camel-quarkus issues must be reported in the github issues tracker of camel-quarkus project.

 

[https://github.com/apache/camel-quarkus/issues]
davsclaus:1589325330:2020-05-13T07:15:30.834+0000:1589325330:2020-05-13T07:15:30.834+0000:Oh sorry Tiago, yeah ideally we report camel-quarkus issues in the github issue tracker. As Camel has 6 sub projects now so this JIRA would become harder to use when all 6 projects are here.

I will take a look later when I get a bit time. First I need to work on a few other things. Thanks for reporting.
davsclaus:1589499744:2020-05-15T07:42:24.757+0000:1589499744:2020-05-15T07:42:24.757+0000:Okay had a a look so its a problem with mixing camel 3.1 and 3.2 in your example and also a bug in older Camel version. I cannot reproduce with Camel 3.3.

The bug is when the a mbean is registered and the bean introspection has not been eager started and is then also created while creating the mbean, and this causes the stackoveflow. I have created a new ticket about this bug."
0,CAMEL-15052,Improvement,Minor,"3.0.1, 3.1.0, 3.2.0",3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Jean-Pierre Matsumoto,0,3,2020-05-12 09:03:48+00:00,2021-06-06 13:27:36+00:00,"In pom.xml file, API is restricted to getProfile only:


https://github.com/apache/camel/blob/master/components/camel-google-mail/pom.xml#L169-L175


But there are two other methods that are useful : watch and stop.


See here:
https://developers.google.com/gmail/api/v1/reference/users/watch


I've attached a patch to fix.","jpmat:1589245470:2020-05-12T09:04:30.089+0000:1589245470:2020-05-12T09:04:30.089+0000:If the fix is accepted, let me know if I should update the documentation too.
omarsmak:1589245612:2020-05-12T09:06:52.885+0000:1589245612:2020-05-12T09:06:52.885+0000:Thank you [~jpmat] for the fix! Would be nice if you can add the patch your fix as PR here: https://github.com/apache/camel.

Regards,
Omar
davsclaus:1589245614:2020-05-12T09:06:54.481+0000:1589245614:2020-05-12T09:06:54.481+0000:Yes you are welcome to update the docs, its in the src/main/docs folder"
0,CAMEL-15051,Bug,Major,3.2.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,John Yin,0,2,2020-05-11 19:12:45+00:00,2020-05-12 15:48:46+00:00,"When cloning a repository from a server (tested with GitHub) with the following Camel endpoint/options:


git:///F:\localpath?operation=clone&remotePath=https://github.com/xxxxxxxx/cust-ir.git&username=xxxxxxxx&password=yyyyyyyy&remoteName=origin&branchName=branch_uat&synchronous=true


The remote repository was correctly cloned to the localpath, but the branch specified is not created locally and not checked out.  The localpath working copy is the master branch.  Since Camel GIT does not have a checkout command, one would have to manually checkout the branch thus defeat the purpose of using the component.","acosentino:1589258838:2020-05-12T12:47:18.152+0000:1589258838:2020-05-12T12:47:18.152+0000:The operation of clone can be followed by a checkout operation in a subsequent .to() step.

1) operation=clone

2) operation=checkout with a specified branchName
acosentino:1589259722:2020-05-12T13:02:02.342+0000:1589259722:2020-05-12T13:02:02.342+0000:Anyway in Camel 3.4.0 (when available) if you specifiy the branchName and clone operation the branch will be set.
bocamel:1589269726:2020-05-12T15:48:46.484+0000:1589269726:2020-05-12T15:48:46.484+0000:Andrea, first thank you very much for investigating this matter and for suggesting to use the ""checkout"" operation which is not mentioned in the latest Camel GIT doc [https://camel.apache.org/components/latest/git-component.html]).

I tried the ""checkout"" operation which did not work as expected.  Let's say the repo that was cloned has two branches: master and branch_uat, and the master branch is behind the branch_uat.  When the clone is done, the master branch is checked out and the origin/branch_uat is ""hidden"" in the local repository.  After running the checkout operation, a local branch branch_uat is created by Camel GIT but it is based on the master branch (thus behind the origin/branch_uat).  Even if I do another pull operation on the branch_uat, it still does not advance the branch_uat to the origin/branch_uat.  So I am essentially stuck with the master branch.

I will try any other workaround that you may suggest, but also look forward to the permanent fix in 3.4.0.

Thanks!"
0,CAMEL-15050,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.25.2, 3.4.0",Claus Ibsen,Claus Ibsen,0,1,2020-05-11 15:28:06+00:00,2020-05-12 08:31:20+00:00,The templating components would normally only need data from the message body/headers. So lets make this the default exposed. And add option to expose additional context like camel context which is for advanced use-cases only.,"davsclaus:1589234500:2020-05-12T06:01:40.166+0000:1589243476:2020-05-12T08:31:16.897+0000:Camel 3

chunk *DONE*
freemarker *DONE*
mustache *DONE*
mvel *DONE*
robotframework *DONE*
stringtemplate *DONE*
velocity *DONE*


Camel 2

chunk *DONE*
freemarker *DONE*
mustache *DONE*
mvel *DONE*
stringtemplate *DONE*
velocity *DONE*"
0,CAMEL-15049,Improvement,Major,3.2.0,3.4.0,"

features

",Resolved,Fixed,3.4.0,Claus Ibsen,aboudi rawas,0,2,2020-05-11 15:11:45+00:00,2020-05-13 07:04:18+00:00,"It is not so uncommon to have multiple ActiveMQComponent beans in projects I worked on.


It is desirable to have an option to specify bean name in camel-endpoint dsl something like this way ( assuming that there exists two ActiveMQComponent, one called 'activemq' and the other called 'activemqservice' ).


from(activemq(""queueName"").componentName(""activemqservice""))


Instead of just having the option to do this using URIs like


from(""activemqservice:queueName?..."")...","davsclaus:1589256696:2020-05-12T12:11:36.111+0000:1589256696:2020-05-12T12:11:36.111+0000:Just wonder what a good method name would be?

I have this little unit test
{code}
                SedaComponent seda2 = new SedaComponent();
                context.addComponent(""seda2"", seda2);

                from(seda(""foo"")).to(mock(""result""));
                from(seda(""foo"").customName(""seda2"")).to(mock(""result""));

                from(""direct:foo"").to(seda(""foo"").customName(""seda2""));
{code}

Where we use customName as new method where you can define a new name - eg I use seda2
aboudirawas:1589257818:2020-05-12T12:30:18.475+0000:1589257818:2020-05-12T12:30:18.475+0000:I think
{code:java}
componentBeanName(String beanName){code}
or
{code:java}
componentCustomName(String beanName){code}
are a bit long but descriptive enough method names.

 

When I first searched for the method to see if it is there.. 'name', 'custom', 'component' and 'bean' were the first words to pop into my head.
aboudirawas:1589259029:2020-05-12T12:50:29.926+0000:1589259077:2020-05-12T12:51:17.866+0000:Now that I thought about it. Something worth's mentioning that when using this method, some type checking needs to be implemented because it would be bad to point the builder to a bean having a different type than SedaComponent or in my example case ActiveMQComponent.
{code:java}
SedaComponent seda2 = new SedaComponent();
context.addComponent(""seda2"", seda2); 
// the following line should fail because ""seda2"" has the same type as seda(...). Not direct(...), nor timer(...), etc...
from(direct(""foo"").customName(""seda2"")).to(mock(""result""));{code}
 
davsclaus:1589319064:2020-05-13T05:31:04.687+0000:1589319064:2020-05-13T05:31:04.687+0000:Okay found a different way so you can set the custom name in seda itself, eg:
{code}
                SedaComponent seda2 = new SedaComponent();
                context.addComponent(""seda2"", seda2);

                from(seda(""foo"")).to(mock(""result""));
                from(seda(""seda2"", ""foo"")).to(mock(""result""));
                from(""direct:foo"").to(seda(""seda2"", ""foo""));
{code}"
0,CAMEL-15048,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-11 14:56:36+00:00,2020-05-14 15:33:13+00:00,"When a route is exhausted (could not restart) then we should keep its state around so JMX management and Java API can still query and find its details, such as its error message etc.",
0,CAMEL-15047,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-11 14:06:00+00:00,2020-05-11 14:07:38+00:00,"The internal services has a few problems with correctly doing start|stop with the Camel service concept.


Some services use constructor for start logic which is wrong.


Need to cleanup this so its consistent.",
0,CAMEL-15046,Improvement,Major,None,3.4.0,"
None
",Resolved,Implemented,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-11 12:15:59+00:00,2020-05-18 13:33:29+00:00,"Lets add some kind of option to allow supervising route controller, to let exhausted routes (failed to start and restart) affect the health check to make it DOWN.


This should be configurable with route filtering. As some routes may be okay to not be up and running. But there can be some important routes which ideally should make the application unhealthy.


Btw for cloud native apps then it may be better to not use supervising and just let camel fail and let the cloud restart the entire app (its monitoring).",davsclaus:1589780009:2020-05-18T13:33:29.921+0000:1589780009:2020-05-18T13:33:29.921+0000:This was already implemented in the routes health check
0,CAMEL-15045,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-11 12:12:40+00:00,2020-05-18 11:12:56+00:00,"Lets allow to configure how much to log and at which logging level. You may want to be verbose on DEBUG level during development, and tone it down for INFO for production.",
0,CAMEL-15044,Task,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-11 11:45:11+00:00,2020-05-12 11:10:24+00:00,This causes various tools to potentially think there are 2 maven projects. For example IDEA.,
0,CAMEL-15043,Bug,Major,3.2.0,3.4.0,"

archetype
help-wanted

",Resolved,Fixed,3.4.0,Andrea Cosentino,Alvin Ma,0,4,2020-05-11 01:22:45+00:00,2020-07-12 13:06:21+00:00,"Intention: To create my own Camel component.


 


Steps:



Run `mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-component -DarchetypeVersion=3.2.0 -DgroupId=org.apache.camel -DartifactId=camel-mycomponent -Dname=MyComponent -Dscheme=mycomponent -Dpackage=org.apache.camel.component.mycomponent` and it'll create `camel-mycomponent` directory. Then open the `pom.xml` and delete the `OSGi` part because I don't need it.
Under `camel-mycomponent` run `mvn clean install`



 


Result:


Got error



[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.2.0:generate-component (generate) on project camel-mycomponent: Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo: Could not find component java type -> [Help 1] 



 


Expected: Build successfully with a jar output.","davsclaus:1589177604:2020-05-11T14:13:24.529+0000:1589177604:2020-05-11T14:13:24.529+0000:Thanks for reporting. Yeah we should get the maven archetypes fixed if they have problems. And also remove the osgi bits and make them use java 11 by default.

Contributions is welcome
acosentino:1590045381:2020-05-21T15:16:21.697+0000:1590045381:2020-05-21T15:16:21.697+0000:Fixed archetypes:
 * blueprint
 * cdi
 * java
 * java8
 * main

We have still troubles with the component and the api-component. Also I believe we can have a single java archetype.
acosentino:1590147592:2020-05-22T19:39:52.184+0000:1590147592:2020-05-22T19:39:52.184+0000:I removed the archetype-web

So now we have 
 * blueprint
 * cdi
 * java
 * java8
 * main
 * spring
 * spring-boot

 

I still have some troubles with component, api-component and dataformat, because of the following error
{code:java}
[ERROR] Failed to execute goal org.apache.camel:camel-package-maven-plugin:3.4.0-SNAPSHOT:generate-component (generate) on project daje: Error generating data org.apache.maven.plugin.MojoFailureException: Unable to create mojo: Could not find component java type -> [Help 1]
{code}
This is because at compile time we still don't have those information.

[~davsclaus] FYI
davsclaus:1590305710:2020-05-24T15:35:10.041+0000:1590305710:2020-05-24T15:35:10.041+0000:Lets just drop java8 so we have one normal for java
davsclaus:1590305738:2020-05-24T15:35:38.101+0000:1590305738:2020-05-24T15:35:38.101+0000:Also I think we can drop spring, as spring-boot is the default choice for spring users now.
davsclaus:1590317945:2020-05-24T18:59:05.493+0000:1590317945:2020-05-24T18:59:05.493+0000:component, api-component and dataformat *DONE*
davsclaus:1590364672:2020-05-25T07:57:52.048+0000:1590364672:2020-05-25T07:57:52.048+0000:Okay lets keep spring as its for XML DSL. And then drop java8 *DONE*
amdmdi:1594442123:2020-07-11T12:35:23.145+0000:1594442180:2020-07-11T12:36:20.735+0000:Hi,
I'am having a similar issue with the *camel-archetype-api-component* archetype.
The generated component fails to build due to missing Junit5 dependencies:

{code:java}
$ mvn archetype:generate \
 -DarchetypeGroupId=org.apache.camel.archetypes \
 -DarchetypeArtifactId=camel-archetype-api-component \
 -DarchetypeVersion=3.4.0 \
 -DgroupId=org.acme \
 -DartifactId=camel-dummy-api \
 -Dversion=1.0.0 \
 -Dname=""DummyApiComponent"" \
 -Dscheme=dummy
$ cd camel-dummy-api/
$ mvn clean pacakge
...
[INFO] Reactor Summary for Camel DummyApiComponent Component Parent 1.0.0:
 [INFO] 
 [INFO] Camel DummyApiComponent Component Parent ........... SUCCESS [ 1.041 s]
 [INFO] Camel DummyApiComponent Component API .............. SUCCESS [ 2.946 s]
 [INFO] Camel DummyApiComponent Component .................. FAILURE [ 2.343 s]
 [INFO] ------------------------------------------------------------------------
 [INFO] BUILD FAILURE
 [INFO] ------------------------------------------------------------------------
 [INFO] Total time: 6.465 s
 [INFO] Finished at: 2020-07-11T12:17:59Z
 [INFO] ------------------------------------------------------------------------
 [ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile (default-testCompile) on project camel-dummy-api: Compilation failure: Compilation failure: 
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[11,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[12,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[19,36] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[19,1] static import only from classes and interfaces
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[11,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[12,29] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[19,36] package org.junit.jupiter.api does not exist
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[19,1] static import only from classes and interfaces
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[32,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[33,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[43,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[44,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[58,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentFileHelloIntegrationTest.java:[59,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentFileHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[32,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[33,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[43,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[44,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[58,6] cannot find symbol
 [ERROR] symbol: class Disabled
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] /workspaces/camel-workspace/camel-dummy-api/camel-dummy-api-component/target/generated-test-sources/camel-component/org/acme/DummyApiComponentJavadocHelloIntegrationTest.java:[59,6] cannot find symbol
 [ERROR] symbol: class Test
 [ERROR] location: class org.acme.DummyApiComponentJavadocHelloIntegrationTest
 [ERROR] -> [Help 1]
 [ERROR] 
 [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
 [ERROR] Re-run Maven using the -X switch to enable full debug logging.
 [ERROR] 
 [ERROR] For more information about the errors and possible solutions, please read the following articles:
 [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
 [ERROR] 
 [ERROR] After correcting the problems, you can resume the build with the command
 [ERROR] mvn <args> -rf :camel-dummy-api
{code}
amdmdi:1594530261:2020-07-12T13:04:21.301+0000:1594530381:2020-07-12T13:06:21.779+0000:I created PR [#3995|https://github.com/apache/camel/pull/3995] and [#3996|https://github.com/apache/camel/pull/3996] to fix the remaining issue i found"
0,CAMEL-15042,Sub-task,Minor,None,None,"
None
",Resolved,Abandoned,None,Onder Sezgin,Onder Sezgin,0,2,2020-05-11 00:10:38+00:00,2022-09-02 15:39:38+00:00,No Desc,"onders:1595485197:2020-07-23T14:19:57.483+0000:1595485197:2020-07-23T14:19:57.483+0000:1- did a refactoring to remove ResteasyHttpBinding and DefaultResteasyHttpBinding. so it is now basically relying on httpBinding from camel-http-common unless any custom implementation is provided.

2- rather than plain streams, streamcache kind of streams are used while copying HttpServletRequest and HttpServletResponse.

3- as far as i can see, copying streams are needed via filtering..it may require a little bit of more exploration on how that could be done without filtering which i have not found a way yet.
davsclaus:1662104378:2022-09-02T15:39:38.570+0000:1662104378:2022-09-02T15:39:38.570+0000:We deprecate camel-resteasy"
0,CAMEL-15041,Sub-task,Minor,None,None,"
None
",Resolved,Fixed,3.4.0,Onder Sezgin,Onder Sezgin,0,1,2020-05-11 00:09:11+00:00,2020-05-18 21:00:26+00:00,No Desc,"onders:1589806806:2020-05-18T21:00:06.628+0000:1589806806:2020-05-18T21:00:06.628+0000:done the changes as mentioned here 

https://github.com/apache/camel/pull/3777#issuecomment-626410269"
0,CAMEL-15040,Sub-task,Major,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Onder Sezgin,0,2,2020-05-11 00:08:24+00:00,2022-09-02 15:39:25+00:00,No Desc,"onders:1595485356:2020-07-23T14:22:36.232+0000:1595485356:2020-07-23T14:22:36.232+0000:httpbinding removed and now relying on camel-http-common
onders:1595485520:2020-07-23T14:25:20.191+0000:1595485520:2020-07-23T14:25:20.191+0000:sorry it is now gone into 
ResteasyProducer, reopening to follow up possibly
davsclaus:1662104365:2022-09-02T15:39:25.028+0000:1662104365:2022-09-02T15:39:25.028+0000:We deprecate camel-resteasy"
0,CAMEL-15039,Sub-task,Minor,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Onder Sezgin,0,2,2020-05-11 00:07:22+00:00,2022-09-02 15:39:12+00:00,No Desc,davsclaus:1662104352:2022-09-02T15:39:12.455+0000:1662104352:2022-09-02T15:39:12.455+0000:We deprecate camel-resteasy
0,CAMEL-15038,Sub-task,Minor,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Onder Sezgin,0,2,2020-05-11 00:05:52+00:00,2022-09-02 15:38:56+00:00,No Desc,davsclaus:1662104336:2022-09-02T15:38:56.731+0000:1662104336:2022-09-02T15:38:56.731+0000:We deprecate camel-resteasy
0,CAMEL-15037,Bug,Minor,3.2.0,,"
None
",Closed,Not A Bug,None,Claus Ibsen,michael elbaz,0,2,2020-05-10 11:19:26+00:00,2020-05-11 22:50:16+00:00,"I reopen this one because this is still not working as expected on latest camel version (3.2.0) 


This test should fail:




import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.assertj.core.api.Assertions;
import org.junit.Test;

public class MyRouteTest extends CamelTestSupport {

  private static final String ROUTE_ID = ""mytest"";

  @Override
  public RoutesBuilder createRouteBuilder() throws Exception {
    return new RouteBuilder() {

      @Override
      public void configure() throws Exception {
        from(""direct:foo"")
          .id(ROUTE_ID)
          .to(""mock:extract"");
      }
    };
  }

  @Test
  public void shouldFail() throws InterruptedException {
    // given
    final MockEndpoint mock = getMockEndpoint(""mock:extract"");

    // declare
    mock.expectedHeaderReceived(""foo"", ""bar"");

    // when
//template.sendBody(""direct:foo"", ""test"");

    // then
    mock.assertIsSatisfied();
  }
}




Because we were expecting some headers, but none headers were received","michael992:1589081847:2020-05-10T11:37:27.331+0000:1589081884:2020-05-10T11:38:04.744+0000:Just in case for those have the same problem (as a workaround): 


{code:java}
       // Some test code...
       // Then
        assertMockEndpointsSatisfied();

        out.getExchanges().stream()
                .map(Exchange::getIn)
                .map(Message::getHeaders)
                .forEach(headers -> Try.run(() -> asserts(headers)).get());
    }

    private void asserts(Map<String, Object> headers) throws ParseException {
        assertEquals(""F001"", headers.get(FORMAT));
        assertEquals(new SimpleDateFormat(""yyyyMMdd"").parse(""20200401""), headers.get(VALIDITY_DATE));
    }
{code}

davsclaus:1589095130:2020-05-10T15:18:50.679+0000:1589095130:2020-05-10T15:18:50.679+0000:Cannot reproduce
https://github.com/apache/camel/commit/5c6d63c7d5dab3e460e888448e967c7d75a0ac95
michael992:1589104988:2020-05-10T18:03:08.488+0000:1589105719:2020-05-10T18:15:19.579+0000:Here a reproductible test case i see it's happen only when using producer template


{code:java}
package fr.aphp.referential.load.route;

import org.apache.camel.EndpointInject;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class HeadersTest extends CamelTestSupport {
    @Produce(value = ""direct:in"")
    protected ProducerTemplate in;

    @EndpointInject(value = ""mock:out"")
    private MockEndpoint out;

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
               // from(""timer:test?repeatCount=1"") // This one will work as expected
                from(in.getDefaultEndpoint())
                        .to(out);
            }
        };
    }

    @Test
    public void test() throws InterruptedException {
        in.sendBody(""test"");
        out.expectedHeaderReceived(""header"", ""value""); // Must fail but not :|
        assertMockEndpointsSatisfied();
    }
}

{code}

davsclaus:1589178267:2020-05-11T14:24:27.680+0000:1589178267:2020-05-11T14:24:27.680+0000:You should set your expecations BEFORE you send messages

Should be

        out.expectedHeaderReceived(""header"", ""value""); // Must fail but not :|
     in.sendBody(""test"");
        assertMockEndpointsSatisfied();
michael992:1589208513:2020-05-11T22:48:33.061+0000:1589208513:2020-05-11T22:48:33.061+0000:A yes you're right i forgot this one !  (even if i think we need more documentation about this) sorry for the ticket thanks"
0,CAMEL-15036,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-09 19:00:40+00:00,2020-05-11 12:11:24+00:00,"We can merge them together in a way so the API on CamelContext and a bit elsewhere is a bit easier to turn supervising on|off, by just setting a boolean flag, and the controller react accordingly.


Today you would essentially need to set a different implementation which the auto configuration in SB/main hides. But we can benefit from having one implementation that can work on both modes.","davsclaus:1589165352:2020-05-11T10:49:12.520+0000:1589165352:2020-05-11T10:49:12.520+0000:Okay keep separate implementation as we have an 3rd experimental cluster route controller. But made it easy to swap to use supervised in java, main, spring boot.
davsclaus:1589170278:2020-05-11T12:11:18.636+0000:1589170278:2020-05-11T12:11:18.636+0000:Ohh that took a bit of time to add nice support for XML DSL as well."
0,CAMEL-15035,Improvement,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-09 07:14:59+00:00,2022-10-14 05:47:12+00:00,Lets make the route controller managed in JMX so you can see details of its status. Especially for supervised where you can see backoff details and the state of routes that may be in restarting phases or errors.,"davsclaus:1589097904:2020-05-10T16:05:04.189+0000:1589158799:2020-05-11T08:59:59.612+0000:We should make the controller capture the caused exception for startup error, and expose this in JMX api as well, so you can see this - tabular data. *DONE*
davsclaus:1589153668:2020-05-11T07:34:28.609+0000:1589158790:2020-05-11T08:59:50.977+0000:TODO: Move JMX management from service to routecontroller as we have the default there already *DONE*"
0,CAMEL-15034,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-09 05:54:50+00:00,2020-05-09 10:05:04+00:00,"To make it easy to specify routes to include|exclude by route id patterns, or uri patterns.
Before it was somewhat only possible with spring boot, but we need to make it generic.",
0,CAMEL-15033,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,2,2020-05-08 23:03:35+00:00,2020-05-11 17:42:45+00:00,"Use antora indexer extension to generate the index tables in the 2.x branch, similar to the latest and 3.2.x branches.","djencks:1589148363:2020-05-11T06:06:03.442+0000:1589148363:2020-05-11T06:06:03.442+0000:PR applied.
acosentino:1589173957:2020-05-11T13:12:37.765+0000:1589173957:2020-05-11T13:12:37.765+0000:The website build is broken on the 2.x branch

[https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel.website/job/master/164/console]

[~djencks] can you have a look? Thanks.
djencks:1589190165:2020-05-11T17:42:45.941+0000:1589190165:2020-05-11T17:42:45.941+0000:xrefs fixed with 2nd PR"
0,CAMEL-15032,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-08 13:00:05+00:00,2020-05-09 19:00:52+00:00,"With CAMEL-13535 we are making it easier to use the new supervising route controller.
It has a few too advanced features with filters and allow per route settings. Its often too much so lets just have a default configuration that are unified across the runtimes.


Then remove the complex code in camel-spring-boot and use this from camel-core / camel-main.",davsclaus:1588924728:2020-05-08T15:58:48.236+0000:1588924728:2020-05-08T15:58:48.236+0000:Okay have something in the works.
0,CAMEL-15031,Bug,Major,3.3.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Mario Rutz,0,1,2020-05-08 11:56:37+00:00,2020-05-09 05:51:06+00:00,"As of now the splunk-hec component accepts only local domains and not FQHNs. A FQHN is at least needed when you're talking to Splunks SAS offer, but might come in handy in other cases.


See https://github.com/apache/camel/pull/3811 for a possible fix.",basis42:1588910233:2020-05-08T11:57:13.108+0000:1588910233:2020-05-08T11:57:13.108+0000:I will file a PR on github to fix this.
0,CAMEL-15030,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Claus Ibsen,0,1,2020-05-08 07:30:34+00:00,2020-05-08 11:23:45+00:00,"[INFO] Updated doc file: /Users/davsclaus/workspace/camel/components/camel-bindy/src/main/docs/bindy-dataformat.adoc
[INFO] Updated doc file: /Users/davsclaus/workspace/camel/components/camel-bindy/src/main/docs/bindy-dataformat.adoc
[INFO] Updated doc file: /Users/davsclaus/workspace/camel/components/camel-bindy/src/main/docs/bindy-dataformat.adoc",
0,CAMEL-15029,New Feature,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Andrea Cosentino,Claus Ibsen,0,1,2020-05-07 14:55:57+00:00,2020-05-21 11:05:29+00:00,"We should move the examples to its own repo like we have for camel itself and other sub projects.


Its actually easier to maintain and also for end users quicker to pull from github to try as its just examples and not all the other stuff.","davsclaus:1589413280:2020-05-14T07:41:20.138+0000:1589413280:2020-05-14T07:41:20.138+0000:There is a repo now
https://github.com/apache/camel-spring-boot-examples"
0,CAMEL-15028,Test,Minor,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Dennis,0,1,2020-05-07 14:40:46+00:00,2020-05-08 06:33:05+00:00,"In camel 3.2.0 my tests started to fail with errors like 'No consumers available on endpoint: direct://message'


 


To reproduce run mvn package in official camel-examples repo:


/camel-examples/examples/camel-example-cdi-test ((camel-examples-3.2.0))


 


Result


[ERROR] Failures:
[ERROR] AdviceTest Timeout waiting for endpoints to receive enough messages. mock://messages timed out.","Holu:1588890785:2020-05-08T06:33:05.337+0000:1588890785:2020-05-08T06:33:05.337+0000:Hi Claus,

so advising in CDI will not be supported anymore?

Den"
0,CAMEL-15027,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Louis Burton,0,2,2020-05-07 12:45:24+00:00,2020-05-09 05:50:35+00:00,"https://issues.apache.org/jira/browse/CAMEL-11935
https://github.com/apache/camel/blob/camel-3.2.0/components/camel-kafka/src/main/java/org/apache/camel/component/kafka/KafkaEndpoint.java#L172-L176


The KafkaEndpoint now populates Camel Message header values based on the Kafka record attributes. These are values specific to the Kafka record read from the poll.


https://issues.apache.org/jira/browse/CAMEL-12503
 The KafkaConsumer and KafkaProducer support propagation of Camel Headers to Kafka.


When combining these two behaviours, this means that we set the 'kafka.' headers originally from the record, we produce these headers onto any subsequent Kafka messages. If camel-kafka then reads this message, it will overwrite the correct KafkaEndpoint set values for record specific information such as Topic name and timestamp, overwriting with the header values it had propagated from a prior Kafka record.


Ultimately, camel-kafka sets incorrect message headers if reading a Kafka record produced by camel-kafka from a Kafka input previously.","davsclaus:1588895196:2020-05-08T07:46:36.073+0000:1588895196:2020-05-08T07:46:36.073+0000:Can you provide an unit test or sample project that demonstrates/reproduces this issue, or a sample Camel route as it helps better to understand the problem and use as test for ensuring its fixed
louisburton:1588952322:2020-05-08T23:38:42.486+0000:1588952322:2020-05-08T23:38:42.486+0000:[~davsclaus] thanks for coming back to me.
I've added a couple of tests and a suggested fix in a PR as mentioned: [https://github.com/apache/camel/pull/3813]
davsclaus:1588974635:2020-05-09T05:50:35.606+0000:1588974635:2020-05-09T05:50:35.606+0000:Thanks for reporting and the PR"
0,CAMEL-15026,Bug,Major,2.21.0,2.21.1,"
None
",Resolved,Fixed,2.21.1,Unassigned,Benny Slater,0,2,2020-05-07 11:48:02+00:00,2020-05-08 07:25:43+00:00,"Camel throws an TypeConversionException when receiving a HTTP response, where the Content-Type header includes extended information, e.g. version info.


org.apache.http.headers - [CID=879adbb4-d406-40e7-8529-5a20427157bf] - http-outgoing-0 << HTTP/1.1 400 Bad Request
org.apache.http.headers - [CID=879adbb4-d406-40e7-8529-5a20427157bf] - http-outgoing-0 << Content-Type: application/json; charset=utf-8; v=1.0
...


org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: java.lang.String with value [Body is instance of java.io.InputStream] due utf-8; v=1.0
....
Caused by: java.io.UnsupportedEncodingException: utf-8; v=1.0
 at sun.nio.cs.StreamDecoder.forInputStreamReader(StreamDecoder.java:71)


The exception throw is TypeConversionException and the response to the caller of route will get a 404 error back, even though the original response code was 400.


It appears that Camel doesn't handle the ; v=1.0 part of the content-type header.","bedla:1588826040:2020-05-07T12:34:00.196+0000:1588826040:2020-05-07T12:34:00.196+0000:I believe this is fixed with CAMEL-12424 in 2.21.1. Can you try to upgrade?
bslaterdk:1588865944:2020-05-07T23:39:04.951+0000:1588866306:2020-05-07T23:45:06.064+0000:I've tried with version 2.21.1, 2.21.5 (and 2.23.2.fuse-760030-redhat-00001 as we use Redhat Fuse), but I get exactly the same exception. 
 All my camel dependencies were updated to the mentioned version not only core and http4.

 

Is there a way where I can overwrite or register a modified TypeConverter, without recompiling Camel HTTP4, as a temporary workaround ?"
0,CAMEL-15025,Bug,Minor,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Alexey Markevich,0,1,2020-05-07 10:10:26+00:00,2020-05-08 07:46:52+00:00,pass correct value to swagger-codegen-maven-plugin and set default value to 'false' for backward compatibility,
0,CAMEL-15024,Improvement,Minor,None,3.3.0,"

pull-request-available

",Resolved,Fixed,3.3.0,Unassigned,Alberto Brosich,0,1,2020-05-07 09:50:17+00:00,2020-05-08 07:27:28+00:00,No Desc,
0,CAMEL-15023,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Alexey Markevich,0,2,2020-05-06 20:55:54+00:00,2020-05-07 04:43:13+00:00,"There are a lot of useful options [1].


Usage:




<configuration>
    <configOptions>
       <library>jersey2</library>
       <dateLibrary>java8</dateLibrary>
    </configOptions>
...
</configuration>




 



https://github.com/swagger-api/swagger-codegen/issues/7795",davsclaus:1588797793:2020-05-07T04:43:13.910+0000:1588797793:2020-05-07T04:43:13.910+0000:Thanks for reporting and the PR
0,CAMEL-15022,Bug,Minor,2.23.4,"2.25.2, 3.4.2, 3.5.0","
None
",Resolved,Fixed,"2.25.2, 3.4.2, 3.5.0",Andrea Cosentino,Gerald Nunn,0,3,2020-05-06 17:44:35+00:00,2020-07-13 10:19:52+00:00,"In Kafka the headers are stored as byte arrays rather then string. OpenTracing with Jaeger inserts a string header uber-trace-id which works. However when it tries to read it as a string when the message is consumed it presumably does a toString which doesn't return the actual string since the header is returned as a byte array.


This can be worked around by using a KafkaHeaderDeserializer as per here:


https://github.com/gnunn1/seating/blob/master/seat-listener/src/main/java/com/redhat/demo/HeaderDeserializer.java


Note you need to deserialize the kafka.TOPIC as well since the KafkaSpanDecorator tries to cast the header as a string which fails the header is returned as byte array.


https://github.com/apache/camel/blob/camel-2.23.x/components/camel-opentracing/src/main/java/org/apache/camel/opentracing/decorators/KafkaSpanDecorator.java#L49","davsclaus:1588758454:2020-05-06T17:47:34.888+0000:1588758454:2020-05-06T17:47:34.888+0000:Thanks are you able to work on a fix. It should be on master branch for Camel 3.x. Then we can look at whether we can backport this to 2.25.x branch aftetwards.
gnunn:1588758759:2020-05-06T17:52:39.952+0000:1588758759:2020-05-06T17:52:39.952+0000:Unfortunately I'm not familiar enough with the camel-opentracing architecture to put together a proper fix."
0,CAMEL-15021,Bug,Minor,3.2.0,None,"
None
",Resolved,Not A Problem,None,Unassigned,Kamil,0,2,2020-05-06 15:39:51+00:00,2020-05-06 17:46:35+00:00,"Hi!


Just updated from 3.0.0-RC3 to 3.2.0 and creating a timed route like: 




from(""timer://timer?fixedRate=true&period=10s"")



in conjunction with Spring throws the following exception:


 


 




java.lang.IllegalStateException: Failed to load ApplicationContextjava.lang.IllegalStateException: Failed to load ApplicationContext
 at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:125) at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:108) at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.postProcessFields(MockitoTestExecutionListener.java:99) at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.injectFields(MockitoTestExecutionListener.java:79) at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:54) at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:246) at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:97) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$5(ClassTestDescriptor.java:349) at org.junit.jupiter.engine.descriptor.JupiterTestDescriptor.executeAndMaskThrowable(JupiterTestDescriptor.java:215) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeTestInstancePostProcessors$6(ClassTestDescriptor.java:349) at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195) at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177) at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654) at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474) at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312) at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735) at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734) at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeTestInstancePostProcessors(ClassTestDescriptor.java:348) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:270) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:259) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$3(ClassTestDescriptor.java:263) at java.base/java.util.Optional.orElseGet(Optional.java:369) at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$4(ClassTestDescriptor.java:262) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:82) at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:59) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$0(NodeTestTask.java:83) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72) at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:83) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:69) at java.base/java.util.ArrayList.forEach(ArrayList.java:1540) at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74) at java.base/java.util.ArrayList.forEach(ArrayList.java:1540) at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38) at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112) at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72) at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98) at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74) at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32) at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57) at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51) at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220) at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188) at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202) at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181) at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128) at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69) at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33) at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230) at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)Caused by: org.apache.camel.FailedToCreateRouteException: Failed to create route TimerPlaylistCurrent: Route(TimerPlaylistCurrent)[From[timer://timer?fixedRate=tru... because of Failed to resolve endpoint: timer://timer?fixedRate=true&period=10s due to: Error binding property (period=10s) with name: period on bean: timer://timer?fixedRate=true&period=10s with value: 10s at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:123) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:353) at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:327) at org.apache.camel.impl.engine.AbstractCamelContext.doInit(AbstractCamelContext.java:2598) at org.apache.camel.support.service.BaseService.init(BaseService.java:83) at org.apache.camel.impl.engine.AbstractCamelContext.init(AbstractCamelContext.java:2431) at org.apache.camel.support.service.BaseService.start(BaseService.java:111) at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2448) at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:157) at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:402) at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:359) at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:896) at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552) at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:127) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:99) at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:117) ... 54 moreCaused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: timer://timer?fixedRate=true&period=10s due to: Error binding property (period=10s) with name: period on bean: timer://timer?fixedRate=true&period=10s with value: 10s at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:874) at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:764) at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:57) at org.apache.camel.reifier.AbstractReifier.resolveEndpoint(AbstractReifier.java:166) at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:259) at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:117) ... 76 moreCaused by: org.apache.camel.PropertyBindingException: Error binding property (period=10s) with name: period on bean: timer://timer?fixedRate=true&period=10s with value: 10s at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:555) at org.apache.camel.support.PropertyBindingSupport.access$000(PropertyBindingSupport.java:71) at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:255) at org.apache.camel.support.DefaultEndpoint.setProperties(DefaultEndpoint.java:433) at org.apache.camel.support.DefaultEndpoint.configureProperties(DefaultEndpoint.java:401) at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:449) at org.apache.camel.component.timer.TimerComponent.createEndpoint(TimerComponent.java:112) at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:233) at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:842) ... 81 moreCaused by: org.apache.camel.TypeConversionException: Error during type conversion from type: java.lang.String to the required type: long with value 10s due to java.lang.NumberFormatException: For input string: ""10s"" at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:103) at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:338) at org.apache.camel.impl.converter.CoreTypeConverterRegistry.doConvertTo(CoreTypeConverterRegistry.java:234) at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:164) at org.apache.camel.impl.converter.CoreTypeConverterRegistry.convertTo(CoreTypeConverterRegistry.java:119) at org.apache.camel.support.component.PropertyConfigurerSupport.property(PropertyConfigurerSupport.java:73) at org.apache.camel.component.timer.TimerEndpointConfigurer.configure(TimerEndpointConfigurer.java:37) at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:550) ... 89 moreCaused by: java.lang.NumberFormatException: For input string: ""10s"" at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) at java.base/java.lang.Long.parseLong(Long.java:692) at java.base/java.lang.Long.valueOf(Long.java:1144) at org.apache.camel.converter.ObjectConverter.toLong(ObjectConverter.java:177) at org.apache.camel.converter.ObjectConverterLoader.lambda$registerConverters$17(ObjectConverterLoader.java:63) at org.apache.camel.support.SimpleTypeConverter.convertTo(SimpleTypeConverter.java:99) ... 96 more




Maybe the documentation has not beed updated? https://camel.apache.org/components/latest/timer-component.html




from(""timer://timer?fixedRate=true&period=10000"")




works just fine.","davsclaus:1588750906:2020-05-06T15:41:46.412+0000:1588750906:2020-05-06T15:41:46.412+0000:See the upgrade guide
https://camel.apache.org/manual/latest/camel-3x-upgrade-guide.html
Szuster:1588753290:2020-05-06T16:21:30.837+0000:1588753290:2020-05-06T16:21:30.837+0000:I see, thanks!

 

Still ""Instead of 60000 you can use period=60s which is more friendly to read."" should be removed from [https://camel.apache.org/components/latest/timer-component.html] IMHO.
davsclaus:1588754622:2020-05-06T16:43:42.716+0000:1588754622:2020-05-06T16:43:42.716+0000:Ah yeah it should be removed, you are welcome to help and fix it with a PR
davsclaus:1588758395:2020-05-06T17:46:35.311+0000:1588758395:2020-05-06T17:46:35.311+0000:I found some time to fix the docs, thanks for reporting this"
0,CAMEL-15020,Improvement,Trivial,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Thomas Küstermann,0,2,2020-05-06 15:12:44+00:00,2020-05-06 17:50:49+00:00,"The FAQ article Why is the exception null when I use onException? states that exchange.getException() returns null if onException() is used in conjunction with handled(true).


Whether it's handled or not, exchange.getException() return always null since the default error handling mechanism clears the exception already:


RedeliveryErrorHandler.deliverToFailureProcessor() - Camel 2.25.0

// we did not success with the redelivery so now we let the failure processor handle it
// clear exception as we let the failure processor handle it
exchange.setException(null);




I'm fairly new too Camel error handling, it would've been helpful in advance to know it.


References:



Exception in Exchange is null
Apache Camel: exchange.getException() vs CamelExceptionCaught property","davsclaus:1588758549:2020-05-06T17:49:09.730+0000:1588758643:2020-05-06T17:50:43.251+0000:Just because it says handled(true) does not imply that when you dont do this that its not null. But I agree it can be confusing so lets update the FAQ.

Thanks for reporting."
0,CAMEL-15019,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.3.0,James Netherton,James Netherton,0,1,2020-05-06 14:36:15+00:00,2020-05-06 16:20:20+00:00,"Since camel-mongo already migrated to using the Mongo 4.x client libs, it'd be good to get camel-mongo-gridfs upgraded too.",
0,CAMEL-15018,Improvement,Minor,None,None,"
None
",Resolved,Invalid,None,Unassigned,Federico Valeri,0,2,2020-05-06 07:59:42+00:00,2020-05-09 19:17:23+00:00,"We should not log record's payload by default, as it may contain sensitive information. Anyway it is useful to have a configuration option to enable/disable it for debugging purpose.",acosentino:1588723957:2020-05-06T08:12:37.836+0000:1588723957:2020-05-06T08:12:37.836+0000:Please report on the github issues tracker for camel-kafka-connector.
0,CAMEL-15017,Bug,Minor,2.25.1,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Lorenzo Benvenuti,0,2,2020-05-06 07:41:25+00:00,2020-05-06 17:43:05+00:00,"Hi,


I came across this error while trying to use a Quartz scheduler with a JPA component but I guess it applies to all the endpoints extending ScheduledPollEndpoint.


If I use




from(""jpa://myEntity?scheduler=quartz2&scheduler.cron=0+*+*+?+*+*+*"")
   /* ... */




I receive the following error:




org.apache.camel.FailedToCreateConsumerException: Failed to create Consumer for endpoint: jpa://myEntity?scheduler=quartz2&scheduler.cron=0+*+*+%3F+*+*+*. Reason: There are 1 scheduler parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{cron=0 * * ? * * *}]
at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:433) ~[camel-core-2.25.1.jar:2.25.1]
	at org.apache.camel.component.jpa.JpaConsumer.doStart(JpaConsumer.java:530) ~[camel-jpa-2.25.1.jar:2.25.1]




This happens because the scheduler is an instance of DefaultScheduledPollConsumerScheduler. After some debugging I found out that when ScheduledPollEndpoint#configureScheduledPollConsumerProperties is called, schedulerName is always null (Endpoint.configureProperties is invoked before setting endpoint properties using reflection).


The only workaround I've found so far is to write a custom component and force the scheduler on the endpoint:




public class MyJpaComponent extends JpaComponent {

    @Override
    protected Endpoint createEndpoint(String uri, String path, Map<String, Object> options) throws Exception {
        JpaEndpoint endpoint = (JpaEndpoint) super.createEndpoint(uri, path, options);
        endpoint.setScheduler(""quartz2"");
        return endpoint;
    }

}




Thanks,


lorenzo","davsclaus:1588722231:2020-05-06T07:43:51.655+0000:1588722231:2020-05-06T07:43:51.655+0000:Can you try and test with Camel 3.2.x release.
lbenvenu:1588728962:2020-05-06T09:36:02.895+0000:1588728962:2020-05-06T09:36:02.895+0000:I'm struggling to make my application work with Camel 3.2.0. Bumping the version caused some dependency issues; once I fixed those, I started receiving an error:

{code}
Caused by: javax.persistence.PersistenceException: No Persistence provider for EntityManager named camel
	at javax.persistence.Persistence.createEntityManagerFactory(Persistence.java:85) ~[javax.persistence-api-2.2.jar:2.2]
	at org.springframework.orm.jpa.LocalEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalEntityManagerFactoryBean.java:96) ~[spring-orm-5.1.5.RELEASE.jar:5.1.5.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390) ~[spring-orm-5.1.5.RELEASE.jar:5.1.5.RELEASE]
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377) ~[spring-orm-5.1.5.RELEASE.jar:5.1.5.RELEASE]
	at org.apache.camel.component.jpa.JpaEndpoint.createEntityManagerFactory(JpaEndpoint.java:539) ~[camel-jpa-3.2.0.jar:3.2.0] error.
{code}

It looks like {{EntityManagerFactory}} is not properly injected in the JPA component. When the JPA endpoint is created using {{JpaEndpoint(String uri, JpaComponent component)}} constructor, in Camel 2.25.1 {{component.getEntityManagerFactory()}} returns the Spring auto-configured {{EntityManagerFactory}}, in Camel 3.2.0 it returns null and this causes Camel to try to create a new {{EntityManagerFactory}}. 

Thanks,

lorenzo
davsclaus:1588738581:2020-05-06T12:16:21.298+0000:1588738581:2020-05-06T12:16:21.298+0000:When the JPA component starts in 3.2 it logs that it auto discover this EMF (its start method).

If it cannot find one it logs at DEBUG otherwise at INFO
LOG.debug(""Could not find a single EntityManagerFactory in registry as there was {} instances."", map.size());

What do you see?
davsclaus:1588739276:2020-05-06T12:27:56.912+0000:1588739276:2020-05-06T12:27:56.912+0000:It works in 3.x
https://github.com/apache/camel/commit/50e8b4c0c55df9bf164e94e4a474ef298106240e
lbenvenu:1588741747:2020-05-06T13:09:07.182+0000:1588741975:2020-05-06T13:12:55.016+0000:{code}
2020-05-06T14:31:33.964+0200  INFO 17321 --- [  restartedMain] o.a.camel.component.jpa.JpaComponent     : Using EntityManagerFactory found in registry with id [entityManagerFactory] org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean@13645b9b
{code}

But I see the {{JpaComponent#doStart}} method, which loads the {{entityManagerFactory}} from the context in case it's null, is called after the {{JpaComponent#createEndpoint}} method; so when the {{JpaEndpoint}} constructor is invoked {{component.getEntityManagerFactory()}} returns null.
davsclaus:1588758179:2020-05-06T17:42:59.143+0000:1588758179:2020-05-06T17:42:59.143+0000:yeah we have improved jpa component in camel 3.3 where this works."
0,CAMEL-15016,New Feature,Major,None,3.17.0,"
None
",Resolved,Fixed,3.17.0,Zheng Feng,Claus Ibsen,5,4,2020-05-05 20:30:19+00:00,2022-05-11 02:45:33+00:00,"Lets look at if we can add some support for kafka transactions in the consumer and producer. But mind this is Kafka specific and not for XA transactions etc.


But it can benefit to be able to rollback sending to kafka in the producer if for example you consume from X and send to kafka and then send to something else and that fails and then you want to rollback sending to kafka.","davsclaus:1588681847:2020-05-05T20:30:47.795+0000:1588681847:2020-05-05T20:30:47.795+0000:A guide for kafka transactions
https://www.baeldung.com/kafka-exactly-once
zhfeng:1589910135:2020-05-20T01:42:15.024+0000:1589910135:2020-05-20T01:42:15.024+0000:It looks interesting and I wonder how to control the kafka transactions in the camel ? Is it possible to introduce the kafka-tx component to do such things, just like ""kafka-tx:begin"", ""kafka-tx:commit"", ""kafka-tx:rollback"" ?

Or we can use the *LAST RESOURCE COMMIT OPTIMIZATION (LRCO)* to add it in the XA transaction ? we can introduce a bridge from the kafka transaction to the xa and implement the LRCO.
davsclaus:1651103374:2022-04-28T07:49:34.600+0000:1651103374:2022-04-28T07:49:34.600+0000:Should we add some documentation about kafka transactions in the camel-kafka/src/main/docs file ?
zhfeng:1651126196:2022-04-28T14:09:56.654+0000:1651126196:2022-04-28T14:09:56.654+0000:yeah, I'm working on the document.
davsclaus:1652139402:2022-05-10T07:36:42.205+0000:1652139402:2022-05-10T07:36:42.205+0000:I think it would be good if we could make configuring the TX options as new endpoint options so its easier and more tooling friendly. Additional properties is only intended for special and rare use-cases.
zhfeng:1652208178:2022-05-11T02:42:58.658+0000:1652208178:2022-05-11T02:42:58.658+0000:OK, I create a follow up issue https://issues.apache.org/jira/browse/CAMEL-18096

 "
0,CAMEL-15015,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-05-05 20:21:44+00:00,2020-05-07 11:17:36+00:00,"It would be nice if we add support for RAW() in endpoint dsl so you can use that for options that should be unencoded such as a password


See SO
https://stackoverflow.com/questions/61600307/using-raw-in-camel-3-endpoint-dsl",
0,CAMEL-15014,Bug,Major,3.2.0,,"
None
",Closed,Duplicate,None,Unassigned,Francesco,0,3,2020-05-05 14:04:53+00:00,2020-05-05 15:29:49+00:00,"When generating a Camel Spring project with the following archetypeVersion:




mvn archetype:generate \
-DarchetypeGroupId=org.apache.camel.archetypes \
 -DarchetypeArtifactId=camel-archetype-spring \
 -DarchetypeVersion=3.2.0 \
 -DgroupId=myGroupId \
 -DartifactId=demo



Then when I run it with:




mvn camel:run



The following error is reported:




Cannot run OSGi Blueprint Main because camel-blueprint-main JAR is not available on classpath -> [Help 1]",bedla:1588663789:2020-05-05T15:29:49.101+0000:1588663789:2020-05-05T15:29:49.101+0000:This is already fixed. 3.3 is expected to be released by weekend. 
0,CAMEL-15013,Improvement,Major,None,None,"
None
",Resolved,Fixed,"3.3.0, 2.25.2",Claus Ibsen,Claus Ibsen,0,1,2020-05-05 09:18:22+00:00,2020-05-05 19:12:17+00:00,"freemarker, velocity, mvel, mustache etc should have option on component level to turn on|off allowing to accept headers with override template.


And by default turned off, so the template is used from the resource in the endpoint (no surprises).","davsclaus:1588642937:2020-05-05T09:42:17.839+0000:1588668001:2020-05-05T16:40:01.993+0000:For Camel 3.x

freemarker *DONE*
velocity *DONE*
mvel *DONE*
mustache *DONE*
string-template *DONE*
chunk *DONE*
jolt *DONE*
jslt *DONE*
robotframework *DONE*
davsclaus:1588675104:2020-05-05T18:38:24.477+0000:1588675104:2020-05-05T18:38:24.477+0000:For Camel 2.x

freemarker *DONE*
velocity *DONE*
mvel *DONE*
mustache *DONE*
string-template *DONE*
chunk *DONE*
jolt *DONE*"
0,CAMEL-15012,Bug,Major,3.1.0,"3.4.3, 3.5.0","
None
",Resolved,Fixed,"3.4.3, 3.5.0",Andrea Cosentino,Ralf Steppacher,0,1,2020-05-05 08:56:16+00:00,2020-08-07 07:14:53+00:00,"The proxyHost and proxyPort query parameters are ignored by the camel-http compoment. They probably should be handled in org.apache.camel.component.http.HttpComponent#configureHttpProxy. Right now that method only handles proxyAuthHost and proxyAuthPort.


 


Using those query parameters seems to be the workaround, too, as org.apache.camel.component.http.ProxyHttpClientConfigurer makes no distinction between authentication and non-authenticating proxies.


 


Relates to CAMEL-10216.",
0,CAMEL-15011,New Feature,Minor,None,None,"
None
",Open,Unresolved,Future,Unassigned,Luca Burgazzoli,0,1,2020-05-05 06:34:30+00:00,2022-09-02 15:13:23+00:00,"The AWS SDK v2 supports asynchronous mode [1] so it would be nice if our aws2 component would support that model. We  should also investigate if and how we can share the event loop between camel and the aws2 sdk for an end2end reactive story.


[1] https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async.html",
0,CAMEL-15010,Improvement,Minor,None,3.3.0,"
None
",Closed,Duplicate,3.3.0,Unassigned,Francois Papon,0,1,2020-05-05 05:26:23+00:00,2020-05-05 06:41:22+00:00,No Desc,fpapon:1588632070:2020-05-05T06:41:10.191+0000:1588632070:2020-05-05T06:41:10.191+0000:Already done with another commit.
0,CAMEL-15009,Bug,Minor,3.2.0,3.3.0,"

activemq-camel

",Resolved,Fixed,3.3.0,Claus Ibsen,Ioannis Sarantidis,0,2,2020-05-04 23:02:19+00:00,2020-05-05 07:47:38+00:00,"In ActiveMQComponentConfiguration the documentation states that 'usePooledConnection' is true by default, while the property is initialized to false",davsclaus:1588636058:2020-05-05T07:47:38.208+0000:1588636058:2020-05-05T07:47:38.208+0000:Thanks for reporting and the PR
0,CAMEL-15008,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,1,1,2020-05-04 14:00:55+00:00,2020-05-04 15:38:47+00:00,"The EIPs and routing engine may favour scheduling their own tasks first, which can lead to some tasks being executed after instead of in the queue order.


The use-case with splitter and aggregator using a single thread showed this from CAMEL-14996. This lead to the splitter task being scheduled first and was executed until its finished and then queued up internal tasks for the aggregator completion that was scheduled last.",
0,CAMEL-15007,Improvement,Major,3.3.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-05-04 10:50:06+00:00,2020-05-06 07:55:11+00:00,With improvement https://issues.apache.org/jira/browse/CAMEL-14950 there should be an example of usage of this component,
0,CAMEL-14976,Task,Minor,None,3.x,"
None
",Closed,Fixed,3.x,Unassigned,Omar Al-Safi,0,2,2020-04-28 08:09:50+00:00,2021-01-04 13:31:08+00:00,It will make sense to add some examples for the azure components in the examples folder in order to give the users some clarity of the usage,omarsmak:1609738268:2021-01-04T13:31:08.935+0000:1609738268:2021-01-04T13:31:08.935+0000:Plenty of examples featuring Azure components have been added and we will keep adding more
0,CAMEL-14975,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,1,2020-04-28 02:54:14+00:00,2020-04-28 05:26:09+00:00,"Luca suggested it would make sense to move the camel-k languages documentation, currently here: https://github.com/apache/camel-k/tree/master/docs/modules/ROOT/pages/languages to the camel-k-runtime repo where these are implemented.","djencks:1588019954:2020-04-28T04:39:14.418+0000:1588020064:2020-04-28T04:41:04.924+0000:I suggest also modifying camel-k to match what I did in camel-k-runtime:
 * removing the antora-playbook-dev.yml and using HEAD as the branch in antora-playbook.yml. There's no good reason to build a tiny part of the site using the local copy of the git repo rather than the worktree.
 * Removing the ""dev"" script and have the ""preview"" script build and run the server.
 * Document the ""checks"" script together with its limitations.
- Use the standard Antora layout of building the site into ""build/site"".
djencks:1588022769:2020-04-28T05:26:09.445+0000:1588022769:2020-04-28T05:26:09.445+0000:PRs applied
Fix version is for website."
0,CAMEL-14974,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,1,2020-04-27 15:36:25+00:00,2020-09-18 15:29:38+00:00,"Lets see if we can support both Java 11 and 14 for the 2nd LTS release (eg likely Camel 3.7 at end of 2020).


The first LTS is scheduled to support Java 8 and 11. So Java 8 users have a stable platform on 3.x to migrate to, and then later to Java 11, and so on.",
0,CAMEL-14973,Improvement,Major,3.2.0,None,"
None
",Resolved,Implemented,None,Andrea Cosentino,John Poth,0,3,2020-04-27 13:09:11+00:00,2020-05-13 18:18:59+00:00,it would be cool to have a BOM for springboot-starters similar to what camel-parent provided,"davsclaus:1587967834:2020-04-27T14:10:34.700+0000:1587967834:2020-04-27T14:10:34.700+0000:We had this before the move out, there is some camel-spring-boot-dependency BOM artifact somewhere. Is this gone now?
acosentino:1589365128:2020-05-13T18:18:48.357+0000:1589365128:2020-05-13T18:18:48.357+0000:This is already available here as camel-spring-boot-dependencies

[https://repo1.maven.org/maven2/org/apache/camel/springboot/camel-spring-boot-dependencies/3.2.0/camel-spring-boot-dependencies-3.2.0.pom]"
0,CAMEL-14972,Bug,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Franz Forsthofer,0,1,2020-04-27 10:17:08+00:00,2020-04-28 05:20:28+00:00,If the enricher receives a stream cache as original body then the stream is consumed by the enrich endpoint. Therefore the stream cache must be reset before it is forwarded to the aggregator.,
0,CAMEL-14971,Bug,Minor,3.0.1,,"
None
",Resolved,Abandoned,None,Unassigned,Gerald Kallas,0,2,2020-04-26 12:52:30+00:00,2021-03-22 18:04:30+00:00,"See below a route that calls an endpoint with NTLM auth.




<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0  https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"">

   <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">

      <route>
         <from uri=""timer:default?period=0&amp;repeatCount=1"" />
         <setHeader name=""CamelHttpMethod"">
            <constant>GET</constant>
         </setHeader>
         <to uri=""http://host?authMethod=NTLM&amp;authDomain=xxx&amp;authHost=xxx&amp;authUsername=xxx&amp;authPassword=xxx&amp;throwExceptionOnFailure=false"" />
      </route>

   </camelContext>

</blueprint>




 


When starting the route than I'm getting an error (Camel WARN)




2020-04-23T22:36:31,980 | WARN  | qtp711860658-153 | HttpAuthenticator                | 164 - org.apache.httpcomponents.httpclient - 4.5.10 | NEGOTIATE authentication error: Invalid name provided (Mechanism level: KrbException: Cannot locate default realm)","davsclaus:1587942720:2020-04-27T07:12:00.537+0000:1587942720:2020-04-27T07:12:00.537+0000:Try to trace what HTTP headers are sent over to the HTTP server in the 2 situations and compare/show us. As you are bridging then in one situation the HTTP url is different that with  the timer. And search on the internet what the kerboes error may mean.


catshout:1587950193:2020-04-27T09:16:33.258+0000:1587950193:2020-04-27T09:16:33.258+0000:I was executing a couple more tests. First of all I was seen the same error (Camel WARN) as well when using the Timer Consumer. So far the ticket is misleading and I changed the title and description accordingly.

The error refers to the point that either the krb5.conf file isn't found or contains the wrong configuration. See for that

[https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html]

If you're going to provide both, realm and kdc in the system.properties file like
{code:java}
java.security.krb5.realm=EXAMPLE.COM
java.security.krb5.kdc=example.com
{code}
than an other error (Camel WARN) occurs
{code:java}
2020-04-27T09:07:31,480 | WARN  | Camel thread #9 - timer://default | HttpAuthenticator                | 164 - org.apache.httpcomponents.httpclient - 4.5.10 | NEGOTIATE authentication error: No valid credentials provided (Mechanism level: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt))
{code}
The content will be properly shown while testing against an IIS instance.

I'll proceed with the tests against other targets.
davsclaus:1592543548:2020-06-19T13:12:28.725+0000:1592543548:2020-06-19T13:12:28.725+0000:Try outside OSGi in just a basing public static void main class, or from unit test etc.
It smell of OSGi classloading and whatnot."
0,CAMEL-14970,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Jan Bednar,0,2,2020-04-26 10:58:56+00:00,2022-09-02 15:11:57+00:00,"camel-script is removed in 3.x with CAMEL-13113 because of Nashorn Engine deprecation in JDK11. We should implement camel-javascript based on some supported engine (possibly graaljs?).


Some users are missing Javascript language in 3.x:


https://camel.465427.n5.nabble.com/Re-Camel-script-eip-JavaScript-deprecated-tt5857880.html


https://stackoverflow.com/questions/61435521/camel-3-2-and-javascript","skin27:1653582494:2022-05-27T00:28:14.311+0000:1653582799:2022-05-27T00:33:19.465+0000:This is maybe possible by using 

J2V8 

[https://github.com/eclipsesource/J2V8]

or  Nashorn OpenJDK

[https://mvnrepository.com/artifact/org.openjdk.nashorn/nashorn-core]

([https://github.com/openjdk/nashorn])

or use Rhino

[https://github.com/mozilla/rhino]"
0,CAMEL-14969,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Nenad Nesovanovic,0,2,2020-04-26 09:03:05+00:00,2020-04-30 07:27:24+00:00,"When loading rest definitions via ""xml-rests"" path defined in property


camel.springboot.xml-rests = classpath:folder-camel/folder-rest/*.xml


The camel 3.2 fails with error 


Failed to start route first-test-get-id because of duplicate id detected: first-test-to-id. Please correct ids to be unique among all your routes.


My rest XML file is defined as


<?xml version=""1.0"" encoding=""UTF-8""?><?xml version=""1.0"" encoding=""UTF-8""?>
<rests xmlns=""http://camel.apache.org/schema/spring"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 {{ xsi:schemaLocation=""}}
 {{    http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.2.0.xsd}}
 {{    "">}}
 {{ <rest id=""id1"" path=""/test"">}}
 {{ <get id=""id2"" uri=""/folderuri"">}}
{\{ <to id=""id3"" uri=""log:test-log-rest"" />}}
 {{ </get>}}
 {{ </rest>}}
</rests>


However, when I envelope TO tag in the ROUTE tag, the issue gets resolved


<rest id=""id1"" path=""/test"">
<get id=""id2"" uri=""/folderuri"">
<route id=""id4"">
<to id=""id3"" uri=""log:test-log-rest"" />
</route>
</get>
</rest>","mindiga:1587863355:2020-04-26T09:09:15.850+0000:1587863355:2020-04-26T09:09:15.850+0000:After investigating the issue found out that it is due to the *{color:#4c9aff}""RouteDefinitionHelper.validateUniqueIds""{color}* method comparing RouteDefinition objects by using == sign and RouteDefinition does not implement *{color:#4c9aff}""equals""{color}* method to compare route URI but leaves it to the basic object reference comparison. This causes that when REST endpoint URI is added to the list of routes of clashes with the endpoint route provided in route XML. 
mindiga:1587863702:2020-04-26T09:15:02.369+0000:1587863702:2020-04-26T09:15:02.369+0000:Route Definitions are compared by reference instead of URI

!eclipse1_compare_by_ref.PNG!

And this causes duplicates in the routes list

!eclipse2_causes_duplicate.PNG!

Which results in multiple routes with the same URI

!eclipse3-two-routes.PNG!

Which than fails validation on having duplicate ROUTES and multiple subscribers routers on the same endpoint

!eclipse4-comparison-conflict.PNG!

And throws exception

!eclipse5-comparison-conflict.PNG!

 

 

 

 
mindiga:1587864026:2020-04-26T09:20:26.468+0000:1587864026:2020-04-26T09:20:26.468+0000:Stack traces of the debug points are below

1. RouteDefinition object does not implement ""equals"" method
{noformat}
RouteDefinition(Object).equals(Object) line: 156 RouteDefinition(Object).equals(Object) line: 156 ArrayList<E>.remove(Object) line: 622 DefaultModel.removeRouteDefinition(RouteDefinition) line: 108 DefaultModel.removeRouteDefinitions(Collection<RouteDefinition>) line: 94 DefaultModel.addRouteDefinitions(Collection<RouteDefinition>) line: 79 SpringCamelContext(DefaultCamelContext).addRouteDefinitions(Collection<RouteDefinition>) line: 126 CamelContextFactoryBean(AbstractCamelContextFactoryBean<T>).setupRoutes() line: 476 CamelContextFactoryBean.start() line: 367 CamelContextFactoryBean.onApplicationEvent(ContextRefreshedEvent) line: 420 CamelContextFactoryBean.onApplicationEvent(ApplicationEvent) line: 94 SimpleApplicationEventMulticaster.doInvokeListener(ApplicationListener, ApplicationEvent) line: 172 SimpleApplicationEventMulticaster.invokeListener(ApplicationListener<?>, ApplicationEvent) line: 165 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 139 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 403 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 360 AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 897 AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 553 SpringApplication.refresh(ApplicationContext) line: 747 SpringApplication.refreshContext(ConfigurableApplicationContext) line: 397 SpringApplication.run(String...) line: 315 SpringApplication.run(Class<?>[], String[]) line: 1226 SpringApplication.run(Class<?>, String...) line: 1215 NexusApp.main(String[]) line: 13 {noformat}
2. And because of that when rest endpoint route is created, it is the duplicate of the actual route
{noformat}
DefaultModel.addRouteDefinitions(Collection<RouteDefinition>) line: 81 DefaultModel.addRouteDefinitions(Collection<RouteDefinition>) line: 81 SpringCamelContext(DefaultCamelContext).addRouteDefinitions(Collection<RouteDefinition>) line: 126 CamelContextFactoryBean(AbstractCamelContextFactoryBean<T>).setupRoutes() line: 476 CamelContextFactoryBean.start() line: 367 CamelContextFactoryBean.onApplicationEvent(ContextRefreshedEvent) line: 420 CamelContextFactoryBean.onApplicationEvent(ApplicationEvent) line: 94 SimpleApplicationEventMulticaster.doInvokeListener(ApplicationListener, ApplicationEvent) line: 172 SimpleApplicationEventMulticaster.invokeListener(ApplicationListener<?>, ApplicationEvent) line: 165 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 139 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 403 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 360 AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 897 AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 553 SpringApplication.refresh(ApplicationContext) line: 747 SpringApplication.refreshContext(ConfigurableApplicationContext) line: 397 SpringApplication.run(String...) line: 315 SpringApplication.run(Class<?>[], String[]) line: 1226 SpringApplication.run(Class<?>, String...) line: 1215 NexusApp.main(String[]) line: 13 {noformat}
3. Which then fails duplicate Id validation
{noformat}
RouteDefinitionHelper.validateUniqueIds(RouteDefinition, List<RouteDefinition>) line: 267 RouteDefinitionHelper.validateUniqueIds(RouteDefinition, List<RouteDefinition>) line: 267 SpringCamelContext(DefaultCamelContext).startRouteDefinitions(List<RouteDefinition>) line: 342 SpringCamelContext(DefaultCamelContext).startRouteDefinitions() line: 327 SpringCamelContext(AbstractCamelContext).doInit() line: 2598 SpringCamelContext(BaseService).init() line: 83 SpringCamelContext(AbstractCamelContext).init() line: 2431 SpringCamelContext(BaseService).start() line: 111 SpringCamelContext(AbstractCamelContext).start() line: 2448 SpringCamelContext.start() line: 121 CamelContextFactoryBean.start() line: 373 CamelContextFactoryBean.onApplicationEvent(ContextRefreshedEvent) line: 420 CamelContextFactoryBean.onApplicationEvent(ApplicationEvent) line: 94 SimpleApplicationEventMulticaster.doInvokeListener(ApplicationListener, ApplicationEvent) line: 172 SimpleApplicationEventMulticaster.invokeListener(ApplicationListener<?>, ApplicationEvent) line: 165 SimpleApplicationEventMulticaster.multicastEvent(ApplicationEvent, ResolvableType) line: 139 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(Object, ResolvableType) line: 403 AnnotationConfigApplicationContext(AbstractApplicationContext).publishEvent(ApplicationEvent) line: 360 AnnotationConfigApplicationContext(AbstractApplicationContext).finishRefresh() line: 897 AnnotationConfigApplicationContext(AbstractApplicationContext).refresh() line: 553 SpringApplication.refresh(ApplicationContext) line: 747 SpringApplication.refreshContext(ConfigurableApplicationContext) line: 397 SpringApplication.run(String...) line: 315 SpringApplication.run(Class<?>[], String[]) line: 1226 SpringApplication.run(Class<?>, String...) line: 1215 NexusApp.main(String[]) line: 13 {noformat}
 
mindiga:1587864387:2020-04-26T09:26:27.864+0000:1587864387:2020-04-26T09:26:27.864+0000:Might be conceptually similar to [CAMEL-13651], but it is a different bug.

https://issues.apache.org/jira/browse/CAMEL-13651
mindiga:1587864541:2020-04-26T09:29:01.650+0000:1587864541:2020-04-26T09:29:01.650+0000:When I remove ""id"" attribute I get different exceptions

<rest path=""/test"">
<get uri=""/folderuri"">
<to uri=""log:test-nexus-rest"" />
</get>
</rest>

org.apache.camel.FailedToStartRouteException: Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed: http://0.0.0.0:8080/test/folderpath?httpMethodRestrict=GET%2COPTIONS
mindiga:1587864624:2020-04-26T09:30:24.595+0000:1587864624:2020-04-26T09:30:24.595+0000:Trace level log included below

[^trace_log1.zip] [^trace_log2.zip]
mindiga:1587927268:2020-04-27T02:54:28.249+0000:1587927268:2020-04-27T02:54:28.249+0000:My assessment is that for the REST endpoint Camel Spring is automatically creating producer and consumer route with the same name and as REST XML discovered resources are discovered first, then Camel Context end up creating them again from the routes definition created during the XML rest import.

If Camel Context XML is importing the same routes through the restContextRef tag, then this issue does not occur, as rest definitions and endpoints are created after the Camel Context is initialised.

Happy to provide more details if needed, but you should first go through the attached logs and images and please pay attention to the variable watch list on the images and debug stack trace that points out to the code lines and variable values to prove that route definitions list ends up having two route definitions for the single XML entry.
davsclaus:1587942845:2020-04-27T07:14:05.344+0000:1587942845:2020-04-27T07:14:05.344+0000:Are you able to attach a zip file with a sample project that reproduces this, its easier for us to use to work on this. 
mindiga:1587971345:2020-04-27T15:09:05.084+0000:1587971345:2020-04-27T15:09:05.084+0000:Hi [~davsclaus], attached is the test project in Eclipse that will reproduce the issue. [^CAMEL-14969-Eclipse-Project.zip]

In the file named ""src/main/resources/nenad-rest/nenad-rest.xml"" you will find 4 rest definitions.

Two that will fail and two that will work. You can uncomment them to test this.
mindiga:1587971562:2020-04-27T15:12:42.720+0000:1587971562:2020-04-27T15:12:42.720+0000:Project test parameters are
{noformat}
main-class:    com.nenad.test.CAMEL14969
jvm-arguments: -Xms256m -Xmx512m --add-opens java.base/sun.nio.ch=ALL-UNNAMED 
maven command: mvn clean install spring-boot:run
test-url:      http://0.0.0.0:8080/test/nenad{noformat}
mindiga:1587971850:2020-04-27T15:17:30.793+0000:1587971850:2020-04-27T15:17:30.793+0000:Here are the two failing and two working rest definitions from the project [^CAMEL-14969-Eclipse-Project.zip]

 
{noformat}

<?xml version=""1.0"" encoding=""UTF-8""?><?xml version=""1.0"" encoding=""UTF-8""?>
<rests xmlns=""http://camel.apache.org/schema/spring"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
 xsi:schemaLocation=""
    http://camel.apache.org/schema/spring https://camel.apache.org/schema/spring/camel-spring-3.2.0.xsd
    "">
 <!-- fail1 -->
 <!-- rest path=""/test"">
 <get uri=""/nenad"">
 <to uri=""direct:test_nenad"" />
 </get>
 </rest-->
 <!-- fail2 -->
 <rest id=""d1"" path=""/test"">
 <get id=""d2"" uri=""/nenad"">
 <to id=""d3"" uri=""direct:test_nenad"" />
 </get>
 </rest>
 <!-- works1 -->
 <!--rest path=""/test"">
 <get uri=""/nenad"">
 <route id=""test_nenad_rest_get_route_id"">
 <to uri=""direct:test_nenad"" />
 </route>
 </get>
 </rest-->
 <!-- works2 -->
 <!--rest id=""d1"" path=""/test"">
 <get id=""d2"" uri=""/nenad"">
 <route id=""test_nenad_rest_get_route_id"">
 <to id=""d3"" uri=""direct:test_nenad"" />
 </route>
 </get>
 </rest-->
</rests>{noformat}
 
mindiga:1588004169:2020-04-28T00:16:09.818+0000:1588004169:2020-04-28T00:16:09.818+0000:Added workaround links on the stackoverflow, so workaround can be accessed in the meantime

{color:#00875a}*Failed to start route A because of duplicate id detected: B*{color}

[https://stackoverflow.com/questions/61438807/failed-to-start-route-a-because-of-duplicate-id-detected-b]

{color:#00875a}*Failed to start route A because of Multiple consumers for the same endpoint is not allowed: E*{color}

[https://stackoverflow.com/questions/61439993/failed-to-start-route-a-because-of-multiple-consumers-for-the-same-endpoint-is]

 
mindiga:1588079477:2020-04-28T21:11:17.793+0000:1588079477:2020-04-28T21:11:17.793+0000:Hi [~davsclaus], my take is that this is the primary reason that for years Camel had issues with running multiple Camel Contexts in the same JVM. Because Route Definition objects are compared by reference instead of URI, and each Context with have its own autonumbering, you would be much more likely to detect duplicates this way, which would cause phantom errors. Hence route definition comparison has to include Camel Context ID and URI ID in addition to the Route Definition ID, instead of using only Java Object ID as it is done currently. Changing this would require significant framework changes, so I opted to report this as an issue, instead of fixing it myself.
davsclaus:1588144049:2020-04-29T15:07:29.778+0000:1588144049:2020-04-29T15:07:29.778+0000:multiple camel contexts dont share route definitions. 

This is related to having rest xml and routes xml files loaded indepdently and rests are converted into routes
mindiga:1588168776:2020-04-29T21:59:36.435+0000:1588168776:2020-04-29T21:59:36.435+0000:Thanks for looking at this [~davsclaus], appreciate your knowledgable insight. Warm Regards
davsclaus:1588198824:2020-04-30T06:20:24.721+0000:1588198824:2020-04-30T06:20:24.721+0000:Okay so its because you are mixing spring xml with spring-boot, with the 

@ImportResource( { ""classpath:camel-context.xml""})

If you dont do this then it works
davsclaus:1588201481:2020-04-30T07:04:41.948+0000:1588201481:2020-04-30T07:04:41.948+0000:Okay have a fix in the works, so when you mix spring boot and xml dsl via those <beans> xml files.
davsclaus:1588202844:2020-04-30T07:27:24.359+0000:1588202844:2020-04-30T07:27:24.359+0000:Thanks for the detailed reported and the attached test-case"
0,CAMEL-14968,Improvement,Minor,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Leonardo Vasconcellos,0,2,2020-04-26 02:41:15+00:00,2020-05-06 12:04:29+00:00,"Shutdown is forced when RouteController.stopRoute is called and the current batch of pulled messages from KafkaConsumer takes longer than 10 seconds to finish processing, logging lots of InterruptedExceptions from different points inside KafkaConsumer.


KafkaConsumer.doStop method does not provide the shutdownAwaitTermination parameter to BaseExecutorServiceManager.shutdownGraceful. The default value is then set to 10 seconds.


It would be nice to set in KafkaConsumer the shutdownAwaitTermination value so we dont have those exceptions in a controlled shutdown.","davsclaus:1588050959:2020-04-28T13:15:59.517+0000:1588050959:2020-04-28T13:15:59.517+0000:Yeah sure, if you have some time and want, then you are welcome to try to implement this and provide a PR
davsclaus:1588737555:2020-05-06T11:59:15.487+0000:1588737555:2020-05-06T11:59:15.487+0000:Adding an option and using 30 sec as default timeout
davsclaus:1588737869:2020-05-06T12:04:29.565+0000:1588737869:2020-05-06T12:04:29.565+0000:And the timeout is also used for the producer for its worker pool (if in use)"
0,CAMEL-14967,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,1,2020-04-25 03:55:13+00:00,2020-04-25 14:39:05+00:00,"Antora 2.3.0 released, simpler xref-check dependencies possible, don't need camel-quarks version in playbook any more.",djencks:1587796745:2020-04-25T14:39:05.526+0000:1587796745:2020-04-25T14:39:05.526+0000:PR merged
0,CAMEL-14966,Task,Major,None,3.4.0,"
None
",Resolved,Fixed,3.4.0,Unassigned,Claus Ibsen,0,1,2020-04-24 12:58:45+00:00,2020-05-18 13:42:04+00:00,"This doc page
https://github.com/apache/camel/blob/master/tooling/maven/camel-restdsl-openapi-plugin/src/main/docs/camel-restdsl-openapi-plugin.adoc


Is a copy from swagger. But its not using swagger its openapi v3 and we should cleanup this doc to not have old swagger bits.",davsclaus:1589780524:2020-05-18T13:42:04.914+0000:1589780524:2020-05-18T13:42:04.914+0000:We use the swagger maven plugin so the docs was partly correct
0,CAMEL-14965,Bug,Minor,None,3.3.0,"

help-wanted

",Resolved,Fixed,3.3.0,Claus Ibsen,Pradeep Kalvakolu,0,2,2020-04-24 12:42:00+00:00,2020-04-28 14:29:21+00:00,"Hi,


I am trying to generate rest DSL router and model files using yaml file with the camel-restdsl-openapi-plugin, But I am getting below error,


Caused by: com.fasterxml.jackson.core.JsonParseException: Unrecognized token 'openapi': was expecting (JSON String, Number, Array, Object or token 'null', 'true' or 'false') at [Source: (FileInputStream); line: 1, column: 9]        at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840)        at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:722)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidToken(UTF8StreamJsonParser.java:3556)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._handleUnexpectedValue(UTF8StreamJsonParser.java:2651)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._nextTokenNotInObject(UTF8StreamJsonParser.java:856)        at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.nextToken(UTF8StreamJsonParser.java:753)        at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4231)        at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2692)        at org.apache.camel.maven.generator.openapi.AbstractGenerateMojo.readOpenApiDoc(AbstractGenerateMojo.java:277)        at org.apache.camel.maven.generator.openapi.GenerateMojo.execute(GenerateMojo.java:60)        ... 23 more


Below is my plugin in pom


<plugin>               


<groupId>org.apache.camel</groupId>               


<artifactId>camel-restdsl-openapi-plugin</artifactId>               


<version>${camel.version}</version>               


<configuration>                    <specificationUri>${project.basedir}/src/spec/openapi.yaml</specificationUri>                </configuration>           


</plugin>            


 


It seems like it is expecting json format even though I have specified yaml file.


When I send openapi.json instead of yaml file it is successfully generating the files.


so do we need to mention anything in the plugin so that it recognizes the yaml file.


 


Thanks,


Pradeep","davsclaus:1587703569:2020-04-24T12:46:09.659+0000:1587703569:2020-04-24T12:46:09.659+0000:What version of Camel do you use? 
pradeep.kalvakolu:1587703670:2020-04-24T12:47:50.558+0000:1587703670:2020-04-24T12:47:50.558+0000:3.1.0
davsclaus:1587704349:2020-04-24T12:59:09.676+0000:1587704349:2020-04-24T12:59:09.676+0000:Thanks can you try with Camel 3.2.0 release 
pradeep.kalvakolu:1587704589:2020-04-24T13:03:09.837+0000:1587704589:2020-04-24T13:03:09.837+0000:I am having same issue with Camel 3.2.0 as well.
davsclaus:1587706382:2020-04-24T13:33:02.197+0000:1587706382:2020-04-24T13:33:02.197+0000:That tool is a copy of the old swagger plugin that supports both json and yaml so I am actually not aware of whether we have yaml support in this too. But as yaml can be transformed to json then it should be doable. 
pradeep.kalvakolu:1587964033:2020-04-27T13:07:13.163+0000:1587964033:2020-04-27T13:07:13.163+0000:So is it possible to confirm if the yaml support exists with this plugin. If it doesn't exists, is it possible to include it, may be, in the next version.
davsclaus:1588051224:2020-04-28T13:20:24.276+0000:1588051224:2020-04-28T13:20:24.276+0000:Yeah I think it would be doable by adding the yaml parser that we have in swagger and use it in this module too.
pradeep.kalvakolu:1588051539:2020-04-28T13:25:39.522+0000:1588051539:2020-04-28T13:25:39.522+0000:Ok great. When can we expect this change, any idea?
davsclaus:1588055361:2020-04-28T14:29:21.863+0000:1588055361:2020-04-28T14:29:21.863+0000:Okay found out the issue and have it fixed for next release"
0,CAMEL-14964,Task,Minor,None,,"
None
",Closed,Duplicate,None,Omar Al-Safi,Omar Al-Safi,0,1,2020-04-24 11:48:44+00:00,2020-07-30 13:01:23+00:00,"References: 



https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/storage/azure-storage-file-datalake
https://docs.microsoft.com/en-us/rest/api/storageservices/data-lake-storage-gen2
https://azuresdkdocs.blob.core.windows.net/$web/java/azure-storage-file-datalake/12.1.0/index.html



Potential features to add:



Write files based on a split strategy or splitter similar to the hadoop component
User can write his/her own strategy for simplicity
Add the possibility to compress the files
...",
0,CAMEL-14963,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,2,2020-04-24 11:39:07+00:00,2020-07-30 07:40:51+00:00,"Had some talk with Luca about parameterized route builder/routes so you could specify per route what parameters they has (required and optional) by parameter name.


Then this information can be used by tooling, camel component etc to be able to instantiate a route and specify the parameters it requires.


Some more details to follow. Just wanted to create a JIRA before forgetting.","lb:1592873214:2020-06-23T08:46:54.895+0000:1592874798:2020-06-23T09:13:18.328+0000:So assuming we have an application.properties like:

{code}
foo = bar
xyz = abc
another.property = test
{code}

and a pseudo route like

{code:java}
from(""timer:tick?{{another.property}}"")
    .routeProperty(""xyz"", ""toto"")
    .log(""foo = {{foo}}"")
    .log(""xyz = {{xyz}}"")
{code}

Then the logs should be something like

{code}
foo = bar
xyz = toto
{code}

so xyz is taken from the parameters bound to the route and foo from the global properties as there's no override on the route.






davsclaus:1593475625:2020-06-30T08:07:05.042+0000:1593751523:2020-07-03T12:45:23.328+0000:RouteTemplate

TODO: Model *DONE*
TODO: Validation that template parameters are provided *DONE*
TODO: Java DSL *DONE*
TODO: XML DSL *DONE*
TODO: <routeTemplates> XML snippets *DONE*
TODO: Java API to create new routes from route templates *DONE*
TODO: Java unit test *DONE*
TODO: XML unit test *DONE*
TODO: Example *DONE*
TODO: Documentation *DONE*
TODO: Add routes with anonymous route id (eg auto assigned) *DONE*
TODO: JMX API such as dump route template *DONE*
TODO: Add detail on a route if it was created from a template and its template id *DONE*
TODO: Model XML loader *DONE*
TODO: Mark a parameter as optional, and also a default value *DONE*
TODO: camel-main load routeTemplate XML files *DONE*
TODO: routeTemplateContextRef in XML DSL *DONE*
TODO: spring boot routes collector *DONE*
TODO: camel-karaf XML DSL *DONE*
TODO: fluent builder for creating route via template *DONE*
TODO: Property placeholder resolution for creating routes before camel context is started *DONE*
davsclaus:1593578456:2020-07-01T12:40:56.004+0000:1593586599:2020-07-01T14:56:39.379+0000:The model needs a bit to be changed due to XML XSD generation problem. So I am refining the model so the template is not extending route and linked in a different way. *DONE*"
0,CAMEL-14962,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-04-24 10:56:58+00:00,2020-05-06 07:54:41+00:00,"With improvement https://issues.apache.org/jira/browse/CAMEL-14950 it is possible to secure undertow endpoint using spring security 5.
For the correct implementation, there has to be UndertowSecurityProvider for such a case and a configuration required for spring security successful execution.
For this purposes there has to be a component or starter containing this configuration.
It should be also possible to simplify configuration requested from user to bare minimum by providing some kind of template or parents for security configuration.",
0,CAMEL-14961,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.3.0,James Netherton,James Netherton,0,1,2020-04-24 09:47:40+00:00,2020-04-24 10:19:22+00:00,matchOnUriPrefix is available to the camel-platform-http-vertx consumer but there is currently no logic to handle it.,
0,CAMEL-14960,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Roland Hauser,0,3,2020-04-24 09:42:22+00:00,2020-04-24 09:47:10+00:00,"The Karaf feature.xml does still references ""org.apache.camel:camel-commands-core"" but it should be now ""org.apache.camel.karaf:camel-commands-core"". This breaks the build of our Karaf-based microservices.","davsclaus:1587692695:2020-04-24T09:44:55.871+0000:1587692695:2020-04-24T09:44:55.871+0000:I think this is a duplicate ticket that has been reported before
acosentino:1587692715:2020-04-24T09:45:15.902+0000:1587692715:2020-04-24T09:45:15.902+0000:This has been already fixed for 3.3.0
acosentino:1587692830:2020-04-24T09:47:10.944+0000:1587692830:2020-04-24T09:47:10.944+0000:You can add

 
<bundleReplacements>
<bundle mode=""maven"" originalUri=""mvn:org.apache.camel/camel-commands-core/3.2.0"" replacement=""mvn:org.apache.camel.karaf/camel-commands-core/3.2.0""/>
</bundleReplacements>
 
in etc/org.apache.karaf.features.xml"
0,CAMEL-14959,Bug,Minor,2.23.1,,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,saksham,0,3,2020-04-23 12:28:22+00:00,2021-03-24 08:52:51+00:00,"In our product, we invoke the Odata endpoint of a different service, it uses an CSRF nonce. 


So in one post requset, two thing happen, Fetch the CSRF nonce and Post the actual request. 


Here on processing the response of Fetch, it sets the charset from IOHelper.getCharsetFromContentType. If there is no charset in the response header Content-Type, then UTF-8 is set to default. 
 Thus this charset gets put on the exchange object. and used further in the post request. 


But when we are creating a request entity. in HttpProducer.createRequestEntity
 The default charset it uses is ISO-8859-1 which is correct as per HTTP 1.1 standard.","saksham.verma:1587616226:2020-04-23T12:30:26.121+0000:1587616226:2020-04-23T12:30:26.121+0000:The problem is because there are other requests which do no require the CSRF nonce, and in that case the encoding is used as ISO-8859-1 which is fine by us. 
But why while handling the response, the default charset is used as UTF-8. The default charset should be the same in both the cases. 
davsclaus:1587770714:2020-04-25T07:25:14.641+0000:1587770714:2020-04-25T07:25:14.641+0000:Can you maybe better explain this with a sample that reproduces this and with instructions how to run, and try it out, then we can take a look.
Also try with latest Camel 2.x version.
saksham.verma:1589672883:2020-05-17T07:48:03.758+0000:1589672975:2020-05-17T07:49:35.009+0000:Hi [~davsclaus]

Please find the attached projects for reproducing the issue. And below is how to use them:

1. Echo server (echoServer.zip): contains a nodejs based web server. It only has one end point ""/echo"".
     This endpoint returns the body it receives. It sets the response header ""content-type"" as ""text/plain"". No charset
      Note, this server starts on default http port : 80.

2. apache-camel-consume.zip : contains a maven project for invoking the echo endpoint of echoserver. 
     It sends a text/plain content-type with body: *HÃLLO*. It does not set any charset in the content-type. 
     But the body it receives is: *H?LLO*.

Root cause:
 If you check the org.apache.http.entity.StringEntity, it uses the default charset, if none is provided. And the default is ISO-8859-1.
 But the while handling the response , the default charset that is used in IOHelper.getCharsetFromContentType is UTF-8.

Thus, there is this difference in the message sent and received.

we expect the ISO-8859-1 to be used whenever the charset is not present as it is the default charset as per HTTP 1.1 standards.

Also note, I tried to send the charset as utf-8 in the request, then the sent and received body is same as expected. 
 But we want the default charset to be uniform everywhere.

 

Behavior is the same with latest 2.24.x release.

 
acosentino:1589685710:2020-05-17T11:21:50.645+0000:1589685710:2020-05-17T11:21:50.645+0000:This is a minor priority issue.
davsclaus:1616546552:2021-03-24T08:42:32.553+0000:1616546552:2021-03-24T08:42:32.553+0000:The node application returns a response with charset set (see screenshot)"
0,CAMEL-14958,Improvement,Major,None,,"

outreachy2020
suggestions

",Resolved,Fixed,None,Unassigned,Aemie,0,5,2020-04-23 11:17:40+00:00,2020-07-02 17:11:34+00:00,"Within the small width screen, the setting is to only display the social icon button as of now. However, I thought it would be a good idea to include the search icon alongside the social button icons. On click of the social button icons, we could include animation, for instance, a fade-in effect of the search bar occupying the entire navbar. The user can do the search as required. On the left side of the search bar, there will be back arrow, which on click would give us the original navbar look with a fade-out effect.


Before I start working on this, I would like an opinion about this idea.","Aemie:1590443581:2020-05-26T05:53:01.721+0000:1590443581:2020-05-26T05:53:01.721+0000:[~zregvart], [~aashnajena] what are your views on this?  The state will toggle between 1 &  2 on click. 
aashnajena:1590449438:2020-05-26T07:30:38.468+0000:1590449438:2020-05-26T07:30:38.468+0000:I agree that we should have the search option on smaller screens. [~Aemie] this would also mean that we have to adjust the search result styling for smaller screens. Another thought : If we open up a search bar below the header instead of overwriting it, would that look too cluttered?
zregvart:1590499957:2020-05-26T21:32:37.985+0000:1590499957:2020-05-26T21:32:37.985+0000:Looks good. We do need to be careful about the size of the touch targets, making sure that users don't trigger other links by mistake, i.e. having enough padding around the individual icons. I also like the search being embedded in the menu item, some work has been done on this in [PR#255|https://github.com/apache/camel-website/pull/255], good application of this is in the github.com responsive design.
Aemie:1590522901:2020-05-27T03:55:01.456+0000:1590533013:2020-05-27T06:43:33.423+0000:[~aashnajena] Aashna, yes I do feel it will look quite clustered if put below the navbar and about the screen result width could be adjusted to the width of the search bar itself.

[~zregvart] Zoran, I have seen that PR, my only concern with that design is its accessibility. Also, if you take a look at the various websites including myntra, Amazon, the searn icon is present in the navbar itself as it can be easily accessed by the user on click. And if you put search embedded with the menu for smaller screen width, when you make a search, due to the light opacity of the search result box, it will make it look messy.
Aemie:1591241423:2020-06-04T11:30:23.343+0000:1591241423:2020-06-04T11:30:23.343+0000:[~zregvart] [~aashnajena] I have added one of the alternative designs I created using js script. I will try to implement the method [~zregvart] suggested but I find the use of this alternative better for a docs site.
aashnajena:1591252409:2020-06-04T14:33:29.641+0000:1591252498:2020-06-04T14:34:58.126+0000:This seems good to me. I too think that the search icon should be accessible without having to open the menu. 

 I have one suggestion. In this image, the two close buttons are a little confusing. I understand that one is for clearing the search and other for closing the search bar. Can we use a bigger cross icon, identical to the one used for closing the main menu? It's a bigger touch target, plus since it's used for closing the menu, perhaps it would help differentiate between the ""clear"" and ""close"" functionalities.

!nav-searchbar-1220.png!
Aemie:1591255141:2020-06-04T15:19:01.021+0000:1591262519:2020-06-04T17:21:59.696+0000:Yea that can be done, I just wanted to implement the design concept but yea that change even I thought was necessary to make.

!navbar-searchbar.png!

[~aashnajena] How does this look to you?
Aemie:1591321477:2020-06-05T09:44:37.752+0000:1591321477:2020-06-05T09:44:37.752+0000:!inline-search.png!

[~zregvart] if we were to include the design method you suggested, then we need to think about how we are going to be presenting the search results as well and this is applicable for width < 1024px only however for width between 1024 <= width <= 1220px, we need to include search too and the method I suggested would be more applicable at that point. What do you think? 
zregvart:1591358198:2020-06-05T19:56:38.886+0000:1591358198:2020-06-05T19:56:38.886+0000:[~Aemie] I guess one option would be to place the search at the bottom of the mobile menu, similar to how https://www.typescriptlang.org/ does it. I was looking at how projects listed on https://docsearch.algolia.com/ approach this, and seems like a fair number of them opt to show the search input always and in almost full width. I think the approach on https://getbootstrap.com/docs/ is particularly good one.
Aemie:1591402449:2020-06-06T08:14:09.248+0000:1591402449:2020-06-06T08:14:09.248+0000:I don't like the design of search implemented with typescript much but that of bootstrap is really good. Docsearch and my implementation is similar. Also the only problem I am trying to state here is your idea of design and that of bootstrap looks amazing with screen width < 1024px when the nav burger appears. From width ranging from 1024 - 1220 there is no navbar burger and no search bar as well. And using bootstrap design to cover the entire width right below navbar might not look neat. I will implement the idea of bootstrap and see on this range of width and let you know. 
Aemie:1591422354:2020-06-06T13:45:54.513+0000:1591568677:2020-06-08T06:24:37.176+0000:[~zregvart] [~delawen] [~aashnajena], as I really like the use of a search bar in the bootstrap website suggested by Zoran so I thought of modifying it but the design really looks good on all the pages, I think we could go ahead with implementing it, what are your opinions?

 

*FRONT PAGE DESIGN*

*!design-frontpage.png!*

 

 

*DOCS PAGES DESIGN*

!design-navbar.png!
zregvart:1591789221:2020-06-10T19:40:21.704+0000:1591789221:2020-06-10T19:40:21.704+0000:[~Aemie] looks good to me, thanks!
Aemie:1591823986:2020-06-11T05:19:46.943+0000:1591823986:2020-06-11T05:19:46.943+0000:[~zregvart] I had a query regarding the hierarchy structure, there is a toolbar in blogs and other pages. So for those, we know navbar burger with its menu has higher hierarchy so for search results, I thought it would be better to have a greater hierarchy than the navbar-menu, does that sound good to you?
zregvart:1591832567:2020-06-11T07:42:47.385+0000:1591832567:2020-06-11T07:42:47.385+0000:[~Aemie] I’m sorry, I don’t quite understand the question. Are you referring to the categories filter present on blog section? I don’t think that should be part of the menu.
Aemie:1591836154:2020-06-11T08:42:34.132+0000:1591836154:2020-06-11T08:42:34.132+0000:[~zregvart] no I am not asking that. What I am asking is when the side menu panel is open and you open the navbar menu, the navbar menu is overlayed on top of the menu panel. In that way, if the navbar is open and I try to search, the search results should overlay the navbar right?

 

So I am asking whether it is the best choice to make the z-index of search greater than that of the navbar menu for the small width screen? 
Aemie:1591867945:2020-06-11T17:32:25.259+0000:1591867945:2020-06-11T17:32:25.259+0000:[~zregvart] [~delawen] I wanted to ask regarding the breakpoints, currently there are three breakpoints, < 1024, 1024 - 1275, >=1275 and I think we need to be consistent with the website and keep only 2 breakpoints one with the navbar burger with the design as show and one with the default design tho with bigger icons. So how do you want to approach this, currently, for width >= 1275, the default design fits perfectly. So I thought it's best to keep the breakpoint at 1275 where the design I showed would be for < 1275 width size. What are your opinions? 
delawen:1591877660:2020-06-11T20:14:20.995+0000:1591877679:2020-06-11T20:14:39.085+0000:Yes, I think we should be consistent and have only two breakpoints. Keep it simple :)

Maybe 1024 is a more standard size than 1275? Check https://www.w3schools.com/browsers/browsers_display.asp
Aemie:1591916455:2020-06-12T07:00:55.277+0000:1591916455:2020-06-12T07:00:55.277+0000:[~delawen] yes in the general browser, 1024 is the break-point however in the camel website due to inclusion of a logo, navbar-menu, search and social icons, everything fits perfectly till 1275px itself. At 1024, there is no space for including the search in the navbar at all. That's why I chose 1275 as the break-point in this case.
Aemie:1592033228:2020-06-13T15:27:08.656+0000:1592111641:2020-06-14T13:14:01.318+0000:[~zregvart] I had a query, I have implemented the design and it works, however it isn't visible in any of the user-manual, components and the individual project pages, is it 'cause the website needs to be built to see the change? And I have based it on 2 breakpoints the common being 1275 as I explained before, so if you're okay with that I will push the code in a day or 2.
delawen:1592178688:2020-06-15T07:51:28.725+0000:1592178688:2020-06-15T07:51:28.725+0000:Do you have the netlify link for checking the tested website? Maybe those uris work on a separated set of stylesheets?
Aemie:1592186696:2020-06-15T10:04:56.099+0000:1592262937:2020-06-16T07:15:37.333+0000:[~delawen] I have resolved the issue for that. I will be creating a PR after I am done with complete implementation.
Aemie:1592263519:2020-06-16T07:25:19.462+0000:1592263519:2020-06-16T07:25:19.462+0000:[~zregvart] [~aashnajena] [~delawen] The thing is I have implemented it but obviously, as there is an additional component, I had to make changes to the different areas as well especially nav panel menu. I have resolved any additional issues that raised except one. The only issue I am left with is the explore menu panel under documentation which isn't fixed at the bottom of the screen as it is by default. 

!issue-facing.png!
zregvart:1592309694:2020-06-16T20:14:54.571+0000:1592309694:2020-06-16T20:14:54.571+0000:[~Aemie] it'll be easier to help with this when we see the code, so I'll wait for the pull request. One note though, we can't deviate from Antora UI too much, that would make it difficult to rebase on newer versions. That's the reason why make changes via variables and create separate CSS files with class prefixes to avoid collision.
githubbot:1592366055:2020-06-17T11:54:15.548+0000:1592366055:2020-06-17T11:54:15.548+0000:AemieJ opened a new pull request #398:
URL: https://github.com/apache/camel-website/pull/398


   ## DESCRIPTION ON THE PROBLEM
   
   Below the width of 1275px for the screen, the search panel couldn't be included. This is very inconvenient as we require the presence of search for all screen width. In addition to this problem, I observed another with the toolbar. When clicked on the nav toggle within the toolbar, the box with the list was shifted to the right and it seemed like a bug present on the website.
   
   ### BEFORE TOOLBAR PANEL DESIGN
   ![old-toolbar](https://user-images.githubusercontent.com/44139348/84804375-4e75b380-b020-11ea-81d6-30ffbd68ca0e.png)
   
   ### AFTER TOOLBAR PANEL DESIGN 
   ![new-toolbar-design](https://user-images.githubusercontent.com/44139348/84804388-52093a80-b020-11ea-9248-66ba2c669c5b.png)
   
   ## DESIGN ALTERNATIVE PROVIDED  
   
   The search design has been inspired by the design of https://getbootstrap.com/docs/4.5/getting-started/introduction/. 
   The search bar design is present for the width < 1275 where 1275 is the breakpoint. Here, the search bar is present alongside the navbar burger right below the major navbar. Due to the addition of components, changes are made to the nav-panel on various pages and docs as well. 
   
   The hierarchy of this design is as follows: 
   ```
   -- Search Results # If the navbar menu and/or nav panel item are open, the search results will be shown above them
     -- Navbar Menu  # If the nav panel item is open, the navbar menu will appear on top of it
        -- Nav Panel Items  # Least in the hierarchy
   ```
   
   ### BASIC DESIGN IMPLEMENTATION EXAMPLE 
   ![search-bar-design](https://user-images.githubusercontent.com/44139348/84804532-8f6dc800-b020-11ea-9504-b0552a2b210b.png)
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592397883:2020-06-17T20:44:43.289+0000:1592397883:2020-06-17T20:44:43.289+0000:aashnajena commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-645614676


   Hey, how are the search results appearing for <1275px? In the preview, I can see search results appearing only for >1275px screens


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592398003:2020-06-17T20:46:43.082+0000:1592398003:2020-06-17T20:46:43.082+0000:aashnajena removed a comment on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-645614676


   Hey, how are the search results appearing for <1275px? In the preview, I can see search results appearing only for >1275px screens


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592403158:2020-06-17T22:12:38.922+0000:1592403158:2020-06-17T22:12:38.922+0000:zregvart commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r441848880



##########
File path: antora-ui-camel/gulp.d/tasks/build.js
##########
@@ -99,8 +99,8 @@ module.exports = (src, dest, preview) => () => {
       )
       .pipe(buffer())
       .pipe(terser())
-    // NOTE use this statement to bundle a JavaScript library that cannot be browserified, like jQuery
-    //vfs.src(require.resolve('<package-name-or-require-path>'), opts).pipe(concat('js/vendor/<library-name>.js')),
+      // NOTE use this statement to bundle a JavaScript library that cannot be browserified, like jQuery
+      //vfs.src(require.resolve('<package-name-or-require-path>'), opts).pipe(concat('js/vendor/<library-name>.js')),

Review comment:
       Can you move this to a separate commit/pull request.

##########
File path: antora-ui-camel/src/css/base.css
##########
@@ -62,11 +62,13 @@ th {
   font-weight: var(--body-font-weight-bold);
 }
 
-em em { /* stylelint-disable-line */
+em em {
+  /* stylelint-disable-line */

Review comment:
       Can you move this to a separate commit/pull request.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -394,6 +399,18 @@ body {
   text-align: right;
 }
 
+.search-bar {
+  top: 4.1rem;
+  position: sticky;
+  position: -webkit-sticky;

Review comment:
       Do we need this?
   ```suggestion
   ```

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -406,6 +423,28 @@ body {
   outline: 0;
 }
 
+.navbar-small input {
+  width: 93vw;
+}
+
+@media screen and (max-width: 1024px) {
+  .navbar-small input {
+    width: 90vw;
+  }
+}
+
+@media screen and (min-width: 425px) and (max-width: 575px) {
+  .navbar-small input {
+    width: 85vw;
+  }
+}
+
+@media screen and (max-width: 425px) {
+  .navbar-small input {
+    width: 80vw;
+  }
+}
+
 .navbar-search input:focus-within {
   background-color: #fff;
   border-color: #eaeaec;

Review comment:
       (not part of this change), we should have used variables here

##########
File path: antora-ui-camel/src/css/toc.css
##########
@@ -51,11 +51,11 @@
   margin: 0;
 }
 
-.toc .toc-menu li[data-level=""2""] a {
+.toc .toc-menu li[data-level='2'] a {
   padding-left: 1.25rem;
 }
 
-.toc .toc-menu li[data-level=""3""] a {
+.toc .toc-menu li[data-level='3'] a {

Review comment:
       Style changes in this file should be on a separate commit or in a new pull request.

##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -6,10 +6,13 @@
   window.addEventListener('load', () => {
     const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
     const index = client.initIndex('apache_camel')
-    const search = document.querySelector('#search')
+    const condition = window.innerWidth < 1275
+    const search = condition ? document.querySelector('.search-small') : document.querySelector('.search')

Review comment:
       I'd prefer if we had a CSS only solution for this, not sure if there's need for two inputs for search. This way we make the implementation much more complex.

##########
File path: antora-ui-camel/src/css/blog.css
##########
@@ -25,6 +25,16 @@ article.blog:first-child {
   margin-top: 3rem;
 }
 
+@media screen and (max-width: 1023px) {
+  .blog.list aside {
+    margin-top: 2.5rem;
+  }
+
+  article.blog-post:first-child {

Review comment:
       Should this be prefixed with `.blog`?

##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -532,6 +538,19 @@
   padding: 0.75rem;
 }
 
+.doc aside {
+  float: right;
+  margin-left: 1rem;
+  width: 25rem;
+  margin-top: 3.5rem;
+}
+
+@media screen and (max-width: 1023px) {
+  .doc.side aside {
+    margin-left: -1rem;

Review comment:
       Not sure about negative margins, seems hacky.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -61,15 +61,15 @@ body {
 
 .navbar-burger {
   color: var(--navbar-font-color);
-  background: none;
+  background: #fff;

Review comment:
       ```suggestion
     background: var(--navbar-background);
   ```

##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -37,6 +37,12 @@
   margin: 1.5rem 0;
 }
 
+@media screen and (max-width: 1274px) {
+  .static > h1:first-child {
+    margin: 4.05556rem 0 1.5rem 0;

Review comment:
       These are very specific numbers, I wonder if we could place them in `vars.css` and derive their values. Think about when someone needs to edit this, they don't have the context as to why this values have 5 decimal places.

##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -606,12 +625,12 @@
 }
 
 .doc b.button::before {

Review comment:
       Perhaps put the codestyle changes in a separate commit/pull request.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -406,6 +423,28 @@ body {
   outline: 0;
 }
 
+.navbar-small input {
+  width: 93vw;
+}
+
+@media screen and (max-width: 1024px) {
+  .navbar-small input {
+    width: 90vw;
+  }
+}
+
+@media screen and (min-width: 425px) and (max-width: 575px) {
+  .navbar-small input {
+    width: 85vw;
+  }
+}
+
+@media screen and (max-width: 425px) {
+  .navbar-small input {
+    width: 80vw;
+  }
+}

Review comment:
       I'd either use percentages or rem.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -426,9 +465,9 @@ body {
   cursor: pointer;
 }
 
-#search_results {
+.search-results {
   top: 3.38rem;
-  background: #fffe;
+  background: #fff;

Review comment:
       Use variables

##########
File path: antora-ui-camel/src/css/site.css
##########
@@ -22,4 +22,4 @@
 @import 'release.css';
 @import 'misc.css';
 @import 'community.css';
-@import 'projects.css'
+@import 'projects.css';

Review comment:
       Style changes in this file should be on a separate commit or in a new pull request.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -394,6 +399,18 @@ body {
   text-align: right;
 }
 
+.search-bar {
+  top: 4.1rem;
+  position: sticky;
+  position: -webkit-sticky;
+  z-index: 4;
+}
+
+.navbar-small {
+  display: none;
+  background: #fff;

Review comment:
       Does the element need a background if it's not displayed?
   ```suggestion
     background: #fff;
   ```

##########
File path: antora-ui-camel/src/css/pagination.css
##########
@@ -29,11 +29,11 @@ nav.pagination span::before {
 }
 
 nav.pagination .prev::before {

Review comment:
       Style changes in this file should be on a separate commit or in a new pull request.

##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -25,17 +28,23 @@
       }
     }
 
+    search.addEventListener('click', function (e) {
+      e.stopPropagation()
+    })
+
     search.addEventListener(
       'keyup',
       debounce((key) => {
+        if (condition) document.querySelector('.navbar-burger').style.marginTop = '1rem'

Review comment:
       I'm not sure that the content security policy will allow changing the style via JavaScript, anyhow we need to minimize the JavaScript and focus on style changes via CSS only.

##########
File path: antora-ui-camel/src/css/vars.css
##########
@@ -131,11 +131,14 @@
   --footer-height: 23rem; /* empirically corresponding current design of the foooter */
   /* dimensions */
   --navbar-height: calc(73 / var(--rem-base) * 1rem);
+  --toolbar-nav-height: calc(139.5 / var(--rem-base) * 1rem);
+  --panel-height: calc(54 / var(--rem-base) * 1rem);

Review comment:
       These are some odd values, how did we came to them?

##########
File path: antora-ui-camel/src/partials/header-content.hbs
##########
@@ -5,33 +5,46 @@
       <div id=""topbar-nav"" class=""navbar-menu"">
         <div class=""navbar-end"">
           {{#withMenuData}}
-            {{#each @items}}

Review comment:
       Not sure about this, the code was indented to make it more readable.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592403562:2020-06-17T22:19:22.918+0000:1592403562:2020-06-17T22:19:22.918+0000:zregvart commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r441865179



##########
File path: antora-ui-camel/src/css/vars.css
##########
@@ -131,11 +131,14 @@
   --footer-height: 23rem; /* empirically corresponding current design of the foooter */
   /* dimensions */
   --navbar-height: calc(73 / var(--rem-base) * 1rem);
+  --toolbar-nav-height: calc(139.5 / var(--rem-base) * 1rem);
+  --panel-height: calc(54 / var(--rem-base) * 1rem);
   --toolbar-height: calc(45 / var(--rem-base) * 1rem);
   --drawer-height: var(--toolbar-height);
   --body-top: calc(var(--navbar-height) + 1rem);
   --body-min-height: calc(100vh - var(--navbar-height));
   --nav-height: calc(var(--body-min-height) - var(--toolbar-height));
+  --nav-menu-panel-height: calc(100vh - var(--panel-height));
   --nav-height--desktop: var(--body-min-height);
   --nav-panel-height: calc(var(--nav-height) - var(--drawer-height));

Review comment:
       This value needs to be adjusted, the height of the search bar needs to be subtracted from the height to fit the explore drawer




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592425108:2020-06-18T04:18:28.815+0000:1592425108:2020-06-18T04:18:28.815+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r441959286



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -37,6 +37,12 @@
   margin: 1.5rem 0;
 }
 
+@media screen and (max-width: 1274px) {
+  .static > h1:first-child {
+    margin: 4.05556rem 0 1.5rem 0;

Review comment:
       Alright, I believe those values are already calculated within the `vars.css`, I will directly make use of them.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592425203:2020-06-18T04:20:03.366+0000:1592425203:2020-06-18T04:20:03.366+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r441959603



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -532,6 +538,19 @@
   padding: 0.75rem;
 }
 
+.doc aside {
+  float: right;
+  margin-left: 1rem;
+  width: 25rem;
+  margin-top: 3.5rem;
+}
+
+@media screen and (max-width: 1023px) {
+  .doc.side aside {
+    margin-left: -1rem;

Review comment:
       This is for the category issue that I raised. The box has been shifted towards the right, hence this just shifts it back to original position to the left.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592425474:2020-06-18T04:24:34.538+0000:1592425474:2020-06-18T04:24:34.538+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r441960661



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -394,6 +399,18 @@ body {
   text-align: right;
 }
 
+.search-bar {
+  top: 4.1rem;
+  position: sticky;
+  position: -webkit-sticky;

Review comment:
       Yes, we need this 'cause chrome tends to behave in a weird manner at times compared to the other browsers such as firefox and safari. Hence, both the position is required.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592427579:2020-06-18T04:59:39.479+0000:1592427579:2020-06-18T04:59:39.479+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r441968840



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -6,10 +6,13 @@
   window.addEventListener('load', () => {
     const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
     const index = client.initIndex('apache_camel')
-    const search = document.querySelector('#search')
+    const condition = window.innerWidth < 1275
+    const search = condition ? document.querySelector('.search-small') : document.querySelector('.search')

Review comment:
       I don't know why it seems complex 'cause the ternary operator does make the code readable. And the reason that two searches are included is just for breakpoint differentiation is 'cause if we were to include the single search input that is present within the nav, it will be more complex to position it the way we want in the design ( I will give it a try though ). Also, in my opinion, the use of two different div for the search design for two breakpoints seems much readable and it's easier to differentiate them using CSS as well.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592461679:2020-06-18T14:27:59.568+0000:1592461679:2020-06-18T14:27:59.568+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r442268862



##########
File path: antora-ui-camel/src/css/blog.css
##########
@@ -25,6 +25,16 @@ article.blog:first-child {
   margin-top: 3rem;
 }
 
+@media screen and (max-width: 1023px) {
+  .blog.list aside {
+    margin-top: 2.5rem;
+  }
+
+  article.blog-post:first-child {

Review comment:
       No, this change corresponds particularly to the blog post only. 
   




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592462345:2020-06-18T14:39:05.004+0000:1592462345:2020-06-18T14:39:05.004+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r442277992



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -394,6 +399,18 @@ body {
   text-align: right;
 }
 
+.search-bar {
+  top: 4.1rem;
+  position: sticky;
+  position: -webkit-sticky;
+  z-index: 4;
+}
+
+.navbar-small {
+  display: none;
+  background: #fff;

Review comment:
       It is being displayed for width < 1275px.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592463933:2020-06-18T15:05:33.198+0000:1592463933:2020-06-18T15:05:33.198+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r442297448



##########
File path: antora-ui-camel/src/css/vars.css
##########
@@ -131,11 +131,14 @@
   --footer-height: 23rem; /* empirically corresponding current design of the foooter */
   /* dimensions */
   --navbar-height: calc(73 / var(--rem-base) * 1rem);
+  --toolbar-nav-height: calc(139.5 / var(--rem-base) * 1rem);
+  --panel-height: calc(54 / var(--rem-base) * 1rem);

Review comment:
       Alright, the toolbar nav height is introduced for the width < 1275 as we introduce the whole search design below the actual navbar including the logo and social icons. 
   
   Now with the changes, I observed that within the menu panel height under the docs section, the panel items overflow to the footer due to the height defined. Hence, the panel height is used to prevent the overflow. 

##########
File path: antora-ui-camel/src/css/vars.css
##########
@@ -131,11 +131,14 @@
   --footer-height: 23rem; /* empirically corresponding current design of the foooter */
   /* dimensions */
   --navbar-height: calc(73 / var(--rem-base) * 1rem);
+  --toolbar-nav-height: calc(139.5 / var(--rem-base) * 1rem);
+  --panel-height: calc(54 / var(--rem-base) * 1rem);

Review comment:
       Alright, the toolbar nav height is introduced for the width < 1275 as we introduce the whole search design below the actual navbar including the logo and social icons. 
   
   Now with the changes, I observed that within the menu panel height under the docs section, the panel items overflow to the footer due to the height defined. Hence, the panel height is used to prevent the overflow. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592474481:2020-06-18T18:01:21.885+0000:1592474481:2020-06-18T18:01:21.885+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r442406788



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -25,17 +28,23 @@
       }
     }
 
+    search.addEventListener('click', function (e) {
+      e.stopPropagation()
+    })
+
     search.addEventListener(
       'keyup',
       debounce((key) => {
+        if (condition) document.querySelector('.navbar-burger').style.marginTop = '1rem'

Review comment:
       Yes, I experimented and it is possible through HTML and CSS only. I will push the changes for the same.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592475866:2020-06-18T18:24:26.806+0000:1592475866:2020-06-18T18:24:26.806+0000:zregvart commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r442419344



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -394,6 +399,18 @@ body {
   text-align: right;
 }
 
+.search-bar {
+  top: 4.1rem;
+  position: sticky;
+  position: -webkit-sticky;

Review comment:
       Should be the same as `sticky`, it can be used unprefixed according to [caniuse.com](https://caniuse.com/#feat=css-sticky) -- 91.35% browsers don't require the prefix.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592477763:2020-06-18T18:56:03.916+0000:1592477763:2020-06-18T18:56:03.916+0000:zregvart commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-646246638


   @AemieJ I've created [this JSFiddle](https://jsfiddle.net/ry2Lhwtd/) to illustrate how this can be done with CSS only. The key is that in flex layout you can specify order of the elements, and that a break can be forced after an element pushing the search div to second row.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592515555:2020-06-19T05:25:55.157+0000:1592515555:2020-06-19T05:25:55.157+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-646442106


   > @AemieJ I've created [this JSFiddle](https://jsfiddle.net/ry2Lhwtd/) to illustrate how this can be done with CSS only. The key is that in flex layout you can specify the order of the elements and that a break can be forced after an element pushing the search div to the second row.
   
   I tried using the method you described in jsfiddle. However, in the output, I observed that at a point it will only push down when there is no more space to be accommodated in the main navbar. I observed at a point where only the navbar is pushed down and the search bar is after the social icon due to ordering, I don't think we want that kind of behavior.
   
   ![behavior-flex](https://user-images.githubusercontent.com/44139348/85099315-b98ada00-b21a-11ea-9eb9-a756563b9ea3.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592545994:2020-06-19T13:53:14.289+0000:1592545994:2020-06-19T13:53:14.289+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-646649037


   @zregvart Another method if we don't want to make use of two search divs, we could increase the height of the navbar and use the translate property of CSS to control it. What do you think about that?  


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592605619:2020-06-20T06:26:59.906+0000:1592605619:2020-06-20T06:26:59.906+0000:AemieJ edited a comment on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-646649037


   @zregvart Another method if we don't want to make use of two search divs, we could increase the height of the navbar and use the translate property of CSS to control it. What do you think about that?  
   
   ![transform-method](https://user-images.githubusercontent.com/44139348/85195030-d4c61a00-b2ec-11ea-8508-34894a46ee04.png)
   
   In this, I just tweaked the translate values to achieve this. I am aware the logo isn't visible but the reason is the logo is used as background image so it's easily overlayed. I was thinking of using the `img` within the `a` tag for it to be visible but I plan to make changes if you're comfortable with the use of transform property of CSS alone.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

Aemie:1592606273:2020-06-20T06:37:53.818+0000:1592606273:2020-06-20T06:37:53.818+0000:[~zregvart] [~delawen] [~aashnajena] There has been a discussion on PR to not make use of two separate divs to achieve the search design. [~zregvart] suggested the idea of using order as CSS property to use, however, there was a loophole in it as discussed in the PR but was clever so I thought of using a single CSS property to achieve the same design and I landed up with the translate property of CSS, there are some permanent values to tweak.

!transform-method.png!

In this, I just tweaked the translate values to achieve this. I am aware the logo isn't visible but the reason is the logo is used as a background image so it's easily overlayed. I was thinking of using them {{img}} within the {{a}} tag for it to be visible but I plan to make changes if you're comfortable with the use of transform property of CSS alone. What are your opinions on it?
githubbot:1592655790:2020-06-20T20:23:10.860+0000:1592655790:2020-06-20T20:23:10.860+0000:zregvart commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-647041656


   @AemieJ I don't think CSS transform should be used for responsive design. I think responsive design should be based on flexbox. Can you research the example I provided and see if it can be applied to the website?


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592695194:2020-06-21T07:19:54.502+0000:1592695194:2020-06-21T07:19:54.502+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-647089895


   @zregvart  I found a method using flex-box on [this jsfiddle](https://jsfiddle.net/kh0n9yge/), please check if you find any loophole. Else, I will move forward on implementing this on the site.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592695209:2020-06-21T07:20:09.340+0000:1592695209:2020-06-21T07:20:09.340+0000:AemieJ edited a comment on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-647089895


   @zregvart  I found a method using flex-box by creating [this jsfiddle](https://jsfiddle.net/kh0n9yge/), please check if you find any loophole. Else, I will move forward on implementing this on the site.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1592725188:2020-06-21T15:39:48.256+0000:1592725188:2020-06-21T15:39:48.256+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-647144105


   @zregvart I worked with the flexbox method and applied it to the website, it works out neatly. Please take a look at it and do let me know if anything further is required to be done.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593133665:2020-06-26T09:07:45.262+0000:1593133665:2020-06-26T09:07:45.262+0000:zregvart commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r445436538



##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -532,6 +538,19 @@
   padding: 0.75rem;
 }
 
+.doc aside {
+  float: right;
+  margin-left: 1rem;
+  width: 25rem;
+  margin-top: 3.5rem;
+}
+
+@media screen and (max-width: 1023px) {
+  .doc.side aside {
+    margin-left: -1rem;

Review comment:
       That sounds like a workaround, I'd prefer that we don't implement workarounds, they tend to get back at us.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;
+  }
+}
+
 .navbar-burger {
   color: var(--navbar-font-color);
-  background: none;
+  background: var(--navbar-background);
   border: none;
   outline: none;
   line-height: 1;
-  height: var(--navbar-height);
+  width: 2rem;
+  height: 2rem;
+  top: 1.25rem;
+  float: right;

Review comment:
       Not sure if we want to use float and flex on the same element, do we need this?

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -417,18 +445,18 @@ body {
   }
 }
 
-#search-cancel {
+.search-cancel {
   position: relative;
   bottom: calc(50% - 0.15rem);
-  left: calc(100% - 1.25rem);
+  left: calc(100% - 1.5rem);
   height: 1rem;
   display: none;
   cursor: pointer;
 }
 
-#search_results {
+.search-results {

Review comment:
       Now we have only one element, should we target by id instead?

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -28,7 +34,7 @@ body {
   padding: 0 0.375rem;
 }
 
-@media screen and (min-width: 1024px) {
+@media screen and (min-width: 1278px) {

Review comment:
       I wonder if we should wait for #397 to get merged so we don't need to change this breakpoint

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;

Review comment:
       I think this is causing some issues on Firefox, oddly not in the responsive tool but when the browser is resized. Not sure if we can prevent this.
   
   When the browser is resized:
   ![Screenshot_2020-06-26 Home - Apache Camel](https://user-images.githubusercontent.com/1306050/85838701-404f3200-b79a-11ea-8579-8cd8b66dac5a.png)
   
   In responsive tool:
   ![Screenshot_2020-06-26 Home - Apache Camel(1)](https://user-images.githubusercontent.com/1306050/85838691-3c231480-b79a-11ea-8af9-9a9c17c3c568.png)
   
   

##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -532,6 +538,19 @@
   padding: 0.75rem;
 }
 
+.doc aside {
+  float: right;

Review comment:
       I don think this `float` is needed here

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;
+  }
+}
+
 .navbar-burger {
   color: var(--navbar-font-color);
-  background: none;
+  background: var(--navbar-background);
   border: none;
   outline: none;
   line-height: 1;
-  height: var(--navbar-height);

Review comment:
       Could we use `var(--navbar-height)` instead of `2rem` below?

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;
+  }
+}
+
 .navbar-burger {
   color: var(--navbar-font-color);
-  background: none;
+  background: var(--navbar-background);

Review comment:
       Not sure if this is needed, doesn't seem to make a difference. Perhaps I'm missing something.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -443,19 +471,19 @@ body {
   padding-right: 0.5rem;
 }
 
-#search_results dt {
+.search-results dt {
   padding: 0.5rem;
   color: var(--color-camel-orange);
   text-transform: uppercase;
   border-top: 1px solid var(--navbar-search-result-separator);
   border-bottom: 1px solid var(--navbar-search-result-separator);
 }
 
-#search_results a {
+.search-results a {

Review comment:
       Now we have only one element, should we target by id instead?

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -80,20 +94,20 @@ body {
 .navbar-burger span {
   background: var(--navbar-font-color);
   display: block;
-  height: 1px;
+  height: 2px;

Review comment:
       Thinner looked more elegant to me, not sure if we need to make it thicker.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -417,18 +445,18 @@ body {
   }
 }
 
-#search-cancel {
+.search-cancel {

Review comment:
       Now we have only one element, should we target by id instead?

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -156,14 +172,19 @@ body {
   margin: 0.25rem 0;
 }
 
-@media screen and (max-width: 1023px) and (min-width: 480px) {
+@media screen and (max-width: 1277px) {
+  .navbar-menu.is-active {
+    top: 7.75rem;

Review comment:
       I think we should derive this from the navbar height, I can see that this will go out of alignment if we change the navbar height variable. Perhaps using the variable here or calculating the hight would be better.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -443,19 +471,19 @@ body {
   padding-right: 0.5rem;
 }
 
-#search_results dt {
+.search-results dt {

Review comment:
       Now we have only one element, should we target by id instead?

##########
File path: antora-ui-camel/src/css/nav.css
##########
@@ -24,13 +24,19 @@
   }
 }
 
+@media screen and (max-width: 1023px) {
+  .nav-container {
+    top: 7.75rem;

Review comment:
       Perhaps derive a value using `calc` or use a variable here.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -475,7 +503,7 @@ body {
   color: var(--color-jet-50);
 }
 
-.results-hidden #search_results {
+.results-hidden .search-results {

Review comment:
       Now we have only one element, should we target by id instead?

##########
File path: antora-ui-camel/src/css/nav.css
##########
@@ -44,10 +50,25 @@
 @media screen and (min-width: 1024px) {
   .nav {
     top: var(--navbar-height);
+    height: var(--nav-menu-panel-height);
+  }
+
+  .nav-category {
+    top: 8.5rem;
     box-shadow: none;
     position: sticky;
     height: var(--nav-height--desktop);
   }
+
+  .nav-components {
+    top: 6.75rem;

Review comment:
       Perhaps derive a value using calc or use a variable here.

##########
File path: antora-ui-camel/src/css/nav.css
##########
@@ -118,6 +152,12 @@ html.is-clipped--nav {
   overflow-y: auto;
 }
 
+@media screen and (max-width: 1277px) {
+  .nav-menu {
+    top: 3.5rem;

Review comment:
       Perhaps derive a value using calc or use a variable here.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -387,11 +407,19 @@ body {
 
 .navbar-fill {
   flex-grow: 1;
+  order: 3;
+}
+
+.break-row {
+  display: none;
+  flex-basis: 100%;
+  height: 0;

Review comment:
       Do we need `height: 0` with `display: none`?

##########
File path: antora-ui-camel/src/css/nav.css
##########
@@ -44,10 +50,25 @@
 @media screen and (min-width: 1024px) {
   .nav {
     top: var(--navbar-height);
+    height: var(--nav-menu-panel-height);
+  }
+
+  .nav-category {
+    top: 8.5rem;

Review comment:
       Perhaps derive a value using calc or use a variable here.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -443,19 +471,19 @@ body {
   padding-right: 0.5rem;
 }
 
-#search_results dt {
+.search-results dt {
   padding: 0.5rem;
   color: var(--color-camel-orange);
   text-transform: uppercase;
   border-top: 1px solid var(--navbar-search-result-separator);
   border-bottom: 1px solid var(--navbar-search-result-separator);
 }
 
-#search_results a {
+.search-results a {
   padding: 0.5rem;
 }
 
-#search_results a:hover {
+.search-results a:hover {

Review comment:
       Now we have only one element, should we target by id instead?

##########
File path: antora-ui-camel/src/partials/header-content.hbs
##########
@@ -6,32 +6,39 @@
         <div class=""navbar-end"">
           {{#withMenuData}}
             {{#each @items}}
-                {{#if children}}
-                <div class=""navbar-item has-dropdown is-hoverable"">
+              {{#if children}}
+              <div class=""navbar-item has-dropdown is-hoverable"">
                 <a class=""navbar-link navbar-topics"" href=""#"">{{name}}</a>
                 <div class=""navbar-dropdown"">
                 {{#each children}}
                   <a class=""navbar-item"" href=""{{url}}"">{{name}}</a>
                 {{/each}}
                 </div>
-                </div>
-                {{else}}
-                <a class=""navbar-item navbar-topics"" href=""{{url}}"">{{name}}</a>
-                {{/if}}
+              </div>
+              {{else}}
+              <a class=""navbar-item navbar-topics"" href=""{{url}}"">{{name}}</a>
+              {{/if}}
             {{/each}}
           {{/withMenuData}}
         </div>
       </div>
       <div class=""navbar-fill""></div>
+      <div class=""break-row""></div>
       <div class=""navbar-search results-hidden"">
         <input id=""search"" class=""search"" placeholder=""Search"" autocomplete=""off"">
-        <img src= ""/_/img/cancel.svg"" alt=""Clear"" id=""search-cancel"">
-        <div id=""search_results""></div>
+        <img src= ""/_/img/cancel.svg"" alt=""Clear"" id=""search-cancel"" class=""search-cancel"">
+        <div id=""search_results"" class=""search-results""></div>

Review comment:
       Do we need the `search-results` class here?

##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -6,10 +6,12 @@
   window.addEventListener('load', () => {
     const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
     const index = client.initIndex('apache_camel')
-    const search = document.querySelector('#search')
+    const search = document.querySelector('.search')
     const container = search.parentNode
-    const results = document.querySelector('#search_results')
-    const cancel = document.querySelector('#search-cancel')
+    const results = document.querySelector('.search-results')
+    const cancel = document.querySelector('.search-cancel')
+    const className = 'navbar-search'
+    const hiddenClass = 'navbar-search results-hidden'

Review comment:
       Do we still need these changes to the JS code now that we have only one search input?

##########
File path: antora-ui-camel/src/partials/header-content.hbs
##########
@@ -6,32 +6,39 @@
         <div class=""navbar-end"">
           {{#withMenuData}}
             {{#each @items}}
-                {{#if children}}
-                <div class=""navbar-item has-dropdown is-hoverable"">
+              {{#if children}}
+              <div class=""navbar-item has-dropdown is-hoverable"">
                 <a class=""navbar-link navbar-topics"" href=""#"">{{name}}</a>
                 <div class=""navbar-dropdown"">
                 {{#each children}}
                   <a class=""navbar-item"" href=""{{url}}"">{{name}}</a>
                 {{/each}}
                 </div>
-                </div>
-                {{else}}
-                <a class=""navbar-item navbar-topics"" href=""{{url}}"">{{name}}</a>
-                {{/if}}
+              </div>
+              {{else}}
+              <a class=""navbar-item navbar-topics"" href=""{{url}}"">{{name}}</a>
+              {{/if}}
             {{/each}}
           {{/withMenuData}}
         </div>
       </div>
       <div class=""navbar-fill""></div>
+      <div class=""break-row""></div>
       <div class=""navbar-search results-hidden"">
         <input id=""search"" class=""search"" placeholder=""Search"" autocomplete=""off"">
-        <img src= ""/_/img/cancel.svg"" alt=""Clear"" id=""search-cancel"">
-        <div id=""search_results""></div>
+        <img src= ""/_/img/cancel.svg"" alt=""Clear"" id=""search-cancel"" class=""search-cancel"">

Review comment:
       Do we need the `search-cancel` class here?

##########
File path: antora-ui-camel/src/partials/nav.hbs
##########
@@ -1,5 +1,9 @@
 <div class=""nav-container""{{#if page.component}} data-component=""{{page.component.name}}"" data-version=""{{page.version}}""{{/if}}>
+  {{#if (eq page.component.name 'components')}}
+  <aside class=""nav nav-components"">
+  {{else}}
   <aside class=""nav"">
+  {{/if}}

Review comment:
       I think this could be simpler, all `aside.nav` should cater to the same positioning, not sure why components would be different, perhaps the parent of this aside (`.nav-container`) should be positioned instead.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593134042:2020-06-26T09:14:02.478+0000:1593134042:2020-06-26T09:14:02.478+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r446066335



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -387,11 +407,19 @@ body {
 
 .navbar-fill {
   flex-grow: 1;
+  order: 3;
+}
+
+.break-row {
+  display: none;
+  flex-basis: 100%;
+  height: 0;

Review comment:
       The height: 0 is the reason the row will break. The display: none is only present as we don't need this change above the breakpoint. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593134089:2020-06-26T09:14:49.272+0000:1593134089:2020-06-26T09:14:49.272+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r446066727



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -417,18 +445,18 @@ body {
   }
 }
 
-#search-cancel {
+.search-cancel {

Review comment:
       @zregvart yes, I will change it for both search cancel and search results to use it by Id directly. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593134521:2020-06-26T09:22:01.563+0000:1593134521:2020-06-26T09:22:01.563+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650080705


   @zregvart I will take care of it in the future PR to only include one change.
   
   
   Other than that, as I have read your comments I have to make use of variables and revert the algolia search bundle to normal as well as remove class names for search cancel and search results.
   
    I don't realize what part is complex yet as I now use only one input and make use of flex box and everything else is css based on the breakpoint? 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593135009:2020-06-26T09:30:09.141+0000:1593135009:2020-06-26T09:30:09.141+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r446074597



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -28,7 +34,7 @@ body {
   padding: 0 0.375rem;
 }
 
-@media screen and (min-width: 1024px) {
+@media screen and (min-width: 1278px) {

Review comment:
       Alright, yes as the navbar menu will be changed, the breakpoint will change accordingly. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593135034:2020-06-26T09:30:34.859+0000:1593135034:2020-06-26T09:30:34.859+0000:zregvart commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650085261


   > I don't realize what part is complex yet as I now use only one input and make use of flex box and everything else is css based on the breakpoint?
   
   The complexity I see is from adding conditionals to the navigation panel rendering the components reference and that a lot of positioning seems to be done by finding the values and putting them in, rather than deriving them from variables/using `calc`. What I see as a problem is that if we change, say the height of the navbar, this positioning needs to be recalculated again. There's also the element that was added to ensure the break on smaller screens, I'm not sure that it's needed. Using flex layout with `float`. Overall if you look at the changes here and the outcome from those it seems like a lot of changes for not that many changes in the output. I think if we were to redo this knowing the principles that are needed for this change, carefully adding/changing only the CSS that needs to be changed, we'd end up with 33%-50% of the CSS we have now.
   
   Anyhow don't let that discourage you, this is excellent work, keep polishing this, we can use a lot of it and hopefully merge it soon.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593135050:2020-06-26T09:30:50.418+0000:1593135050:2020-06-26T09:30:50.418+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r446075048



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;

Review comment:
       I will look into this as I didn't face this issue. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593135819:2020-06-26T09:43:39.014+0000:1593135819:2020-06-26T09:43:39.014+0000:AemieJ commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r446075048



##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;

Review comment:
       I found what's causing this issue. I will fix it in my next commit. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593135949:2020-06-26T09:45:49.632+0000:1593135949:2020-06-26T09:45:49.632+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650091358


   @zregvart okay as I know what needs to be done with flex box I will try to do this from scratch. It might take a day or 2.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593233626:2020-06-27T12:53:46.109+0000:1593233626:2020-06-27T12:53:46.109+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650557635


   @zregvart I have done highly specific changes to it from scratch solving each part. Although the breakpoint is defined right now is at 1278px but let's wait for #397 to get merged, then I could change the breakpoint for it. 
   
   It works fine as I have checked. Please check for any loopholes if you can find.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593291960:2020-06-28T05:06:00.330+0000:1593291960:2020-06-28T05:06:00.330+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650697264


   @zregvart With the current changes to the navbar menu, the breakpoint changes from 1278px to 1175px. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593355067:2020-06-28T22:37:47.713+0000:1593355067:2020-06-28T22:37:47.713+0000:zregvart commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650831572


   @AemieJ what if we shrunk the logo width in the nav bar to 4rem and reduced the padding between menu items from 2rem to 1.5rem, then at 1024px we can still have the _big_ menu:
   
   ![Screenshot_2020-06-29 Home - Apache Camel](https://user-images.githubusercontent.com/1306050/85960045-af967300-b9a0-11ea-9ab3-e8232c9cd55e.png)
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593369757:2020-06-29T02:42:37.532+0000:1593369757:2020-06-29T02:42:37.532+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650871258


   @zregvart that's a good suggestion if we just want the logo to appear in the nav menu. It will space as well. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593379013:2020-06-29T05:16:53.349+0000:1593379013:2020-06-29T05:16:53.349+0000:AemieJ edited a comment on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650871258


   @zregvart that's a good suggestion if we just want the logo to appear in the nav menu. With that, I changed breakpoint to 1024


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593386173:2020-06-29T07:16:13.685+0000:1593386173:2020-06-29T07:16:13.685+0000:Delawen commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-650978244


   That's good news!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593408436:2020-06-29T13:27:16.785+0000:1593408436:2020-06-29T13:27:16.785+0000:aashnajena commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-651119961


   Looks good! 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593532005:2020-06-30T23:46:45.577+0000:1593532005:2020-06-30T23:46:45.577+0000:zregvart commented on a change in pull request #398:
URL: https://github.com/apache/camel-website/pull/398#discussion_r448032410



##########
File path: antora-ui-camel/src/css/blog.css
##########
@@ -223,3 +223,13 @@ article.blog p {
 .blog .page-item.active a {
   color: var(--color-white);
 }
+
+@media screen and (max-width: 1023px) {
+  article.blog:first-child {

Review comment:
       This selector might be a bit problematic as it might target anything (including an element that's absolutely positioned). I'm fairly certain that to accommodate the second row on the top level navigation we need to move or add the padding/margin globaly. I think this change needs to go to `base.css` and cover all pages. We should also base this from the `--navbar-height` variable like we do for the `--body-top`. Remember these variables can change and then `5rem` is not accurate.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -387,11 +407,19 @@ body {
 
 .navbar-fill {
   flex-grow: 1;
+  order: 3;
+}
+
+.break-row {
+  display: none;
+  flex-basis: 100%;
+  height: 0;

Review comment:
       I'm not sure that elements that have `display:none` have a hight, do they?

##########
File path: antora-ui-camel/src/css/doc.css
##########
@@ -37,12 +37,18 @@
   margin: 1.5rem 0;
 }
 
-@media screen and (min-width: 769px) {
+@media screen and (min-width: 1024px) {
   .doc > h1.page:first-child {
     margin-top: 2.5rem;
   }
 }
 
+@media screen and (max-width: 1023px) {
+  .doc > h1.page:first-child {

Review comment:
       Could be unnecessary if we move the `--body-top`.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -59,18 +65,26 @@ body {
   height: var(--navbar-height);
 }
 
+@media screen and (max-width: 1277px) {
+  .navbar-brand {
+    flex-wrap: wrap;
+  }
+}
+
 .navbar-burger {
   color: var(--navbar-font-color);
-  background: none;
+  background: var(--navbar-background);
   border: none;
   outline: none;
   line-height: 1;
-  height: var(--navbar-height);

Review comment:
       Use the `--navbar-height` variable instead.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -351,6 +359,12 @@ body {
     margin-left: 2rem;
   }
 
+  @media screen and (min-width: 1024px) and (max-width: 1080px) {
+    .navbar-end {
+      margin-left: 1rem;

Review comment:
       This is to change the left margin between the top level navigation (i.e. ""Blog"") and the logo? I think we can make that for all resolutions.

##########
File path: antora-ui-camel/src/css/blog.css
##########
@@ -223,3 +223,13 @@ article.blog p {
 .blog .page-item.active a {
   color: var(--color-white);
 }
+
+@media screen and (max-width: 1023px) {
+  article.blog:first-child {
+    margin-top: 5rem;
+  }
+
+  .blog.list aside {
+    margin-top: 4.5rem;

Review comment:
       If we move the whole `--body-top` then we don't need to reposition the individual elements, like the category menu here.

##########
File path: antora-ui-camel/src/css/frontpage.css
##########
@@ -252,12 +252,17 @@ section.frontpage h2 {
 }
 
 @media screen and (max-width: 1023px) {
+  header.frontpage {
+    margin-top: var(--navbar-height);
+  }
+
   header.frontpage h1 {
     font-size: 9vw;
   }
 
   header.frontpage svg {
     height: 10rem;
+    top: 8rem;

Review comment:
       Could be unnecessary if we move the `--body-top`.

##########
File path: antora-ui-camel/src/css/frontpage.css
##########
@@ -252,12 +252,17 @@ section.frontpage h2 {
 }
 
 @media screen and (max-width: 1023px) {
+  header.frontpage {
+    margin-top: var(--navbar-height);

Review comment:
       Could be unnecessary if we move the `--body-top`.
   

##########
File path: antora-ui-camel/src/css/static.css
##########
@@ -9,6 +8,12 @@
   }
 }
 
+@media screen and (max-width: 1023px) {
+  .static {
+    margin-top: 5rem;

Review comment:
       Could be unnecessary if we move the `--body-top`.

##########
File path: antora-ui-camel/src/css/toc.css
##########
@@ -8,6 +8,13 @@
   top: var(--toc-top);
 }
 
+@media screen and (min-width: 1024px) and (max-width: 1174px) {
+  .toc.sidebar .toc-menu {
+    margin-top: 4rem;

Review comment:
       Could be unnecessary if we move the `--body-top`.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -225,14 +227,14 @@ body {
   }
 }
 
-@media screen and (max-width: 479px) {
+@media screen and (max-width: 1023px) {
   .navbar-menu.is-active {
     display: block;
     position: absolute;
     height: 100vh;
     box-shadow: 0 16px 16px 0 rgba(10, 10, 10, 0.1);
     overflow-y: auto;
-    top: 4rem;
+    top: 8rem;

Review comment:
       Could be unnecessary if we move the `--body-top`.

##########
File path: antora-ui-camel/src/css/header.css
##########
@@ -318,6 +320,12 @@ body {
     padding: 1rem 2rem 1rem 0;
   }
 
+  @media screen and (max-width: 1080px) {
+    .navbar-item {
+      padding-right: 1.5rem;
+    }
+  }

Review comment:
       I'd change this in higher widths, no need for a lot of padding, 1.5rem should look okay in all resolutions.

##########
File path: antora-ui-camel/src/css/static.css
##########
@@ -1,6 +1,5 @@
 .static {
   margin: var(--static-margin);
-  max-width: var(--static-max-width);

Review comment:
       Not sure about this change, why are we making it?

##########
File path: antora-ui-camel/src/partials/header-content.hbs
##########
@@ -23,6 +23,7 @@
         </div>
       </div>
       <div class=""navbar-fill""></div>
+      <div class=""break-row""></div>

Review comment:
       Doesn't seem to make a difference, I've removed this from the DOM in developer tools and resized from 1023px to 300px, and the layout remained the same.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593593855:2020-07-01T16:57:35.970+0000:1593593855:2020-07-01T16:57:35.970+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-652535935


   @zregvart  I simplified a bit further using your suggestion. however certain changes are necessary. 


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593651213:2020-07-02T08:53:33.006+0000:1593651213:2020-07-02T08:53:33.006+0000:zregvart merged pull request #398:
URL: https://github.com/apache/camel-website/pull/398


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593651252:2020-07-02T08:54:12.269+0000:1593651252:2020-07-02T08:54:12.269+0000:zregvart commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-652879954


   Awesome @AemieJ, great effort, and thank you for tolerating my nitpickery!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593679188:2020-07-02T16:39:48.291+0000:1593679188:2020-07-02T16:39:48.291+0000:AemieJ commented on pull request #398:
URL: https://github.com/apache/camel-website/pull/398#issuecomment-653111799


   @zregvart well it certainly helped with simplifying the code as much as possible, so I am glad and thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org
"
0,CAMEL-14957,Test,Major,None,3.3.0,"

help-wanted

",Resolved,Fixed,3.3.0,Omar Al-Safi,Claus Ibsen,0,2,2020-04-23 09:36:22+00:00,2020-05-06 17:02:59+00:00,See CI server or run tests in camel-kafka. And have docker running.,"omarsmak:1588734048:2020-05-06T11:00:48.926+0000:1588734048:2020-05-06T11:00:48.926+0000:Is it this error:
{code:java}
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 16.569 s <<< FAILURE! - in org.apache.camel.component.kafka.KafkaConsumerFullTest
[ERROR] org.apache.camel.component.kafka.KafkaConsumerFullTest  Time elapsed: 16.563 s  <<< ERROR!
org.testcontainers.containers.ContainerLaunchException: Container startup failed
	at org.testcontainers.containers.GenericContainer.doStart(GenericContainer.java:320)
	at org.testcontainers.containers.KafkaContainer.doStart(KafkaContainer.java:102)
	at org.testcontainers.containers.GenericContainer.start(GenericContainer.java:300)
	at org.testcontainers.containers.GenericContainer.starting(GenericContainer.java:1011)
	at org.testcontainers.containers.FailureDetectingExternalResource$1.evaluate(FailureDetectingExternalResource.java:29)
	at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
...
Caused by: org.testcontainers.shaded.com.fasterxml.jackson.databind.JsonMappingException: Failed to getValue() with method com.github.dockerjava.api.model.ExposedPorts#toPrimitive(0 params): null (through reference chain: com.github.dockerjava.core.command.CreateContainerCmdImpl[""ExposedPorts""]->com.github.dockerjava.api.model.ExposedPorts[""toPrimitive()""])
	at org.testcontainers.shaded.com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:397)
	at org.testcontainers.shaded.com.fasterxml.jackson.databind.JsonMappingException.wrapWithPath(JsonMappingException.java:356)
...
Caused by: java.lang.IllegalStateException: Duplicate key java.lang.Object@7affc159
	at java.util.stream.Collectors.lambda$throwingMerger$0(Collectors.java:133)
	at java.util.HashMap.merge(HashMap.java:1254)
	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1320)
..
 {code}
If yes, I have digged into it briefly, it looks like the issue is from sharing the container among tests. I will look into it more
omarsmak:1588737130:2020-05-06T11:52:10.341+0000:1588737130:2020-05-06T11:52:10.341+0000:Okay it is the same error in CI. Looking at it now"
0,CAMEL-14956,New Feature,Minor,None,None,"
None
",Resolved,Fixed,3.5.0,James Netherton,Luca Burgazzoli,0,1,2020-04-23 08:19:10+00:00,2020-07-02 12:18:56+00:00,"We should have a Vertx based websocket component https://vertx.io/docs/vertx-core/java/#_websockets


Maybe we can have a vertx component with a number of schemes/endpoints:



vertx-ws
vertx-http
etc",
0,CAMEL-14955,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-23 08:01:05+00:00,2020-04-23 08:13:31+00:00,"See issue reported on camel-k
https://github.com/apache/camel-k/issues/1422


We can improve this to do 2 passes and setup simple types first which wont have ordering problems. This improves this for normal use-cases.",
0,CAMEL-14954,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-23 06:22:37+00:00,2020-04-23 07:33:11+00:00,"in doSuspend then make it return http status 503.


See how jetty does it.",
0,CAMEL-14953,Task,Major,None,3.3.0,"
None
",Resolved,Information Provided,3.3.0,Andrea Cosentino,Andrea Cosentino,1,2,2020-04-22 12:26:03+00:00,2020-04-29 07:48:55+00:00,No Desc,"acosentino:1587964397:2020-04-27T13:13:17.220+0000:1587964397:2020-04-27T13:13:17.220+0000:This could be already achieved, you need to set the event notification for a bucket on the console, then we could use SQS and SNS to consume messages related to this. An operation to setup the notification is a bit too much.
bbru:1588117212:2020-04-29T07:40:12.924+0000:1588117479:2020-04-29T07:44:39.814+0000:I would agree that this should be done via SNS or SQS. But AFAIK, the SNS component can only act as a producer, not as a consumer.

[https://github.com/apache/camel/blob/master/components/camel-aws-sns/src/main/java/org/apache/camel/component/aws/sns/SnsEndpoint.java#L91]
acosentino:1588117735:2020-04-29T07:48:55.447+0000:1588117735:2020-04-29T07:48:55.447+0000:Yes, because you can consume from SNS by subscribing an SQS to the topic. SNS has multiple ways of consuming."
0,CAMEL-14952,Improvement,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,6,2020-04-22 11:33:41+00:00,2020-08-01 18:35:24+00:00,"We use Algolia for the search functionality on the website using their free plan for Open Source projects. The index is built by Algolia's crawler using the DocSearch.


When this was done we built our own UI on top of Algolia JavaScript API, as one if requirements is that clients use Algolia's JavaScript clients. We did not use Algolia UI as at that point it was rather large JavaScript dependency to add and it would slow down the loading of the website.


We also have some initial work on creating our own Algolia index at build time.


The current search doesn't seem to index the whole website, some results don't appear in the search, looks like most of the content from Antora is not indexed: trying to search for removeHeader, the FAQ entry is not found. There's also a list of failed searches on the Algolia dashboard we can use to benchmark the search.


What we need is to build the search index over the whole content. Approach taken in #74 is good start for Hugo generated content. We need to expand that to Antora built content as well.


This search index would be built at the website build time and would include both Hugo and Algolia content in the same file or possibly in several files if we use multi-index search. More on how indexes are built can be seen in the Algolia documentation.


We need to figure out what data to send and how to integrate this with Antora, for Hugo we have a good idea from #74, importantly the structure needs to be the same. One good source of inspiration on building the index for Antora content is in the Lunr.js integration.


We need to build the index with the search UI in mind, i.e. the index needs to contain the data we wish to present in the UI as well as enough content for Algolia to be able to use the content to perform search. So starting with a mockup of what we wish to present/utilize in the search UI and deriving the data structure for the index from that would be a good start.","aashnajena:1588468367:2020-05-03T09:12:47.052+0000:1588468367:2020-05-03T09:12:47.052+0000:As you mentioned, we need to start by thinking about what we want to present in the search UI, because the index will be built according to that. Are we thinking of including Algolia's default UI? Or do we prefer to keep the customized UI that we have created?
aashnajena:1590837580:2020-05-30T19:19:40.456+0000:1590837580:2020-05-30T19:19:40.456+0000:Want to confirm - currently, we are using the index built by Antora's website crawler right? We are not using our own index for any of Hugo or Antora generated pages?
zregvart:1590884393:2020-05-31T08:19:53.322+0000:1590884393:2020-05-31T08:19:53.322+0000:Yes, we're using index is built by Algolia's crawler using the [DocSearch|https://docsearch.algolia.com/].
Aemie:1591050392:2020-06-02T06:26:32.961+0000:1591050392:2020-06-02T06:26:32.961+0000:[~zregvart] if the DocSearch scrapes the entire documentation of the website, it is only able to scrape through the parts within the camel-website repo, it doesn't go in-depth indexing through any component or user manual documentation that was created using antora within the camel repository. 
zregvart:1591052629:2020-06-02T07:03:49.573+0000:1591052629:2020-06-02T07:03:49.573+0000:[~Aemie] here is the documentation for the docsearch: https://docsearch.algolia.com/docs/how-does-it-work that is the extent of my knowledge, everything is configured by Algolia and we have no influence on the configuration. From what I understand the sitemaps provide URLs to index.
Aemie:1591432727:2020-06-06T16:38:47.350+0000:1591432727:2020-06-06T16:38:47.350+0000:[~zregvart] so the sitemap isn't generated by us? 'cause in the sitemap of apache camel [https://camel.apache.org/sitemap.xml] I didn't observe any nested sitemap to include the documentation of components and user-manual separately. It just states the URL of each when I observed. !sitemap-camel.png!
zregvart:1591496577:2020-06-07T10:22:57.732+0000:1591496577:2020-06-07T10:22:57.732+0000:[~Aemie] I've created a separate issue to fix the sitemap: CAMEL-15154
aashnajena:1591921810:2020-06-12T08:30:10.024+0000:1591922098:2020-06-12T08:34:58.383+0000:Does correcting the sitemap make a difference in search? I'm pretty certain that Antora generated pages are still not reachable by DocSearch at all. I don't think the problem lies with the ""search"" part, we just need to investigate why some pages are not getting indexed. [One of the FAQ on their website|https://docsearch.algolia.com/docs/faq/#why-arent-my-pages-indexed] talks about this. Should we investigate this rather than thinking of indexing the whole website ourselves?
aashnajena:1591936760:2020-06-12T12:39:20.576+0000:1591936760:2020-06-12T12:39:20.576+0000:DocSearch creates a configuration for our website as stated [here|https://docsearch.algolia.com/docs/how-does-it-work#we-create-a-configuration]. Apache Camel website's configuration file is listed [here|https://github.com/algolia/docsearch-configs/blob/master/configs/apache_camel.json]. It draws URLs from the sitemap and we have /docs/ as one of the starting links. Is anyone able to pinpoint any errors in this config file? Also is there a way to see which all pages have been crawled by docsearch?
Aemie:1591937828:2020-06-12T12:57:08.051+0000:1591937828:2020-06-12T12:57:08.051+0000:[~aashnajena] all I have observed is that instead of providing a nested sitemap, the doc search is able to only crawl through community, article and docs pages, the starting path, you don't see all the results 'cause only 10 are restricted but it isn't able to alternate through the links within the documentation or any project that are listed in the sitemap & I compared this with other json files generated by docSearch, I can't find any error in it.
aashnajena:1591938741:2020-06-12T13:12:21.280+0000:1591938741:2020-06-12T13:12:21.280+0000:Okay, I'll try to build this locally. If possible, I want to make changes to the config file and see how that affects search. 
aashnajena:1592010754:2020-06-13T09:12:34.829+0000:1592014163:2020-06-13T10:09:23.787+0000:I built this locally, made changes in the config.json and crawled our website. I added ""*/manual/latest/*"", ""*/components/*"" and ""*/projects/*"" as starting URLs, keeping selectors the same as before, i.e. selecting *""article""*. Previously, we had ""nb_hits = 575"", now it is 116,449. ""nb_hits"" is the number of records that were extracted and indexed by *DocSearch*. I have the list of webpages crawled by Docsearch (in the crawl job that I started), it now includes all the documentation pages. I am also able to locally test the *""algolia search""*, and I can see results corresponding to documentation pages. As mentioned in the description of this issue, no entry can be found when searching *{{removeHeader}}*, but I can find the FAQ entry on the new index I have created.

This may not be the best representation, and we may want to have the heading ""FAQ"" etc, but at least we have it appearing on our search now. We can investigate the object which gets returned, and display it on our UI differently.

!image-2020-06-13-14-39-08-776.png!
 \{{}}
aashnajena:1592014075:2020-06-13T10:07:55.555+0000:1592014075:2020-06-13T10:07:55.555+0000:Here's the list of crawled webpages in the crawl job I ran [^list_of_crawled_pages.txt] using this configuration file [^camel.json]. I am aware that we're missing pages from subproject documentation. Seems like we need to add all URLs of type ""camel.apache.ord/XYZ/"" which would include ""camel.apache.org/camel-subproject/latest/"".

[~zregvart] [~delawen] [~Aemie] Would be great if you guys can have a quick look at the list of crawled webpages and pinpoint if there's any set of webpages we are missing. I can also share my screen on Monday's meeting and we can test some search queries on the latest index.
Aemie:1592020498:2020-06-13T11:54:58.294+0000:1592020498:2020-06-13T11:54:58.294+0000:[~aashnajena] LGTM, however for including the individual projects, the starting point of projects ([https://camel.apache.org/projects/)] will not do good as we would have to provide starting points to each project manually, so then it could find its respective index based on the sitemap.
aashnajena:1592031268:2020-06-13T14:54:28.806+0000:1592031268:2020-06-13T14:54:28.806+0000:Yes I agree. As I mentioned above, we need to include all links of this form *""camel.apache.org/camel-subproject/latest/""*. 
delawen:1592178556:2020-06-15T07:49:16.817+0000:1592178556:2020-06-15T07:49:16.817+0000: > Zoran Regvart María Arias de Reyna Aemie Would be great if you guys can have a quick look at the list of crawled webpages and pinpoint if there's any set of webpages we are missing. 

That's a hard one :) I think it is complete. Or, at least, has the most relevant pages. Maybe we can compare it with the full sitemap?
zregvart:1592193363:2020-06-15T11:56:03.193+0000:1592193363:2020-06-15T11:56:03.193+0000:[~aashnajena] I've uploaded ""BH4D9OD16A_apache_camel_20200608-20200614_no_result_searches.csv"" this is the export of terms searched via Algolia that have no results, you mentioned that you have setup Algolia locally with additional pages in the JSON configuration, please see if you get some results in the terms listed in the file.
aashnajena:1592209382:2020-06-15T16:23:02.107+0000:1592209382:2020-06-15T16:23:02.107+0000:Attaching  [^List_Of_Crawled_Pages_by_DocSearch.txt] which contains the updated list of all *1363* page links crawled by DocSearch using the latest configuration for future reference. 

[~zregvart] I have tested several queries from the CSV. I can see relevant search results now. For example, ""validationexception"", ""threadpool"", ""asyncprocessor"" and ""saxon"" are queries which were giving no search result according to the CSV, but I can now see several entries corresponding to them. 

I also replied to the mail from DocSearch answering their questions and explaining what we investigated, I hope that's alright.
aashnajena:1592260815:2020-06-16T06:40:15.561+0000:1592260815:2020-06-16T06:40:15.561+0000:The Algolia index has been updated. [~zregvart] [~Aemie] [~delawen] We should try searching for some components/user manual bits on our website to make sure it's all included. I also want some opinions on whether we like the way search results are appearing. I'd prefer to have more high-level titles like Components, User Manual etc. and then the heading of the page which has matched on the next level. But I'm not sure how feasible/preferable this is. Are you guys happy with the title, subtitle, and text that's appearing on search results?
Aemie:1592273922:2020-06-16T10:18:42.175+0000:1592273922:2020-06-16T10:18:42.175+0000:[~aashnajena] the search works perfectly now, I tried a couple of components and faq, it worked pretty good, gave relevant results. I agree with you, the current design is neat but it's better if we could re-design it and it's better if we talk about that in another issue.
zregvart:1592309443:2020-06-16T20:10:43.695+0000:1592309443:2020-06-16T20:10:43.695+0000:An [update was made|https://github.com/algolia/docsearch-configs/commit/4647419b6a538d1125c78632f8ab1b0ae989f2bc] to the docsearch configuration by Algolia. I guess based on the conversation we had with support.

I'm not too comfortable with listing URLs in the {{start_urls}}. If possible, a better option might be to have no URLs listed and rely on the sitemap alone. With this we have to rely on Algolia to update the configuration, whereas with sitemap we have the control over what pages are indexed.
aashnajena:1592350646:2020-06-17T07:37:26.645+0000:1592350646:2020-06-17T07:37:26.645+0000:[~zregvart] I agree. We had asked DocSearch Support team about this, but seems like they haven't answered this question. Maybe we can try flattening the sitemap? I can locally test if a flattened sitemap is enough for DocSearch to crawl all our pages. I still have a few days of subscription left. I'm not sure how to flatten the sitemap though.
zregvart:1592395038:2020-06-17T19:57:18.460+0000:1592395038:2020-06-17T19:57:18.460+0000:I've asked Algolia explicitly about relying just on the sitemap, so we don't need to change the JSON configuration at Algolia.
aashnajena:1592537607:2020-06-19T11:33:27.185+0000:1592537607:2020-06-19T11:33:27.185+0000:Their latest reply isn't very informative. I'll try to investigate this a little further from our end.
Aemie:1592538458:2020-06-19T11:47:38.706+0000:1592538458:2020-06-19T11:47:38.706+0000:The starting urls have been removed to solely depend on the site map indexing, as I saw last. However, when I tried experimenting while searching a few queries, we got a result of a particular topic twice. 
zregvart:1592655203:2020-06-20T20:13:23.008+0000:1592655203:2020-06-20T20:13:23.008+0000:Duplicate results are caused by indexing over several versions of the same page.
davsclaus:1592694262:2020-06-21T07:04:22.200+0000:1592694262:2020-06-21T07:04:22.200+0000:Great work so far, love to see the search actually work and that the results are displayed in real time
aashnajena:1592749036:2020-06-21T22:17:16.457+0000:1592749036:2020-06-21T22:17:16.457+0000:[~zregvart] Why do we have all versions of a page present in the sitemap? We only display the latest versions on our website right?
zregvart:1592780526:2020-06-22T07:02:06.847+0000:1592780526:2020-06-22T07:02:06.847+0000:[~davsclaus] does the search not work for you?

 [~aashnajena] we should have every page in the sitemap, should be easy to check if that is not the case.
davsclaus:1592780759:2020-06-22T07:05:59.434+0000:1592780759:2020-06-22T07:05:59.434+0000:It works better but the mixed versions is causing problems.

Try search for ""mqtt"" and all the links are for 2.x.

I really think the search needs to have a version picker (and by default it uses latest).

Aemie:1592964649:2020-06-24T10:10:49.787+0000:1592964961:2020-06-24T10:16:01.601+0000:[~zregvart] [~delawen] [~aashnajena]  I observed that we're only able to get the top heading of each search which is not what we want but we would like to know its directory i.e. if a user searches endpoint dsl it should appear along with camel-quarkus, it makes it an easier task for the user as the docs are heavy for our website. So we can change the selectors as such - 

Original selectors by docSearch - 

""selectors"":

      ""lvl0"": ""article h1"",

     ""lvl1"": ""article h2"", 

      ""lvl2"": ""article h3"",

      ""lvl3"": ""article h4"",  

      ""lvl4"": ""article h5"",

      ""lvl5"": ""article h6"",          

      ""text"": ""article p, article li"" 

 

We can update those selectors to include the <a> tag for each of list item within toolbars as such - 

""selectors"":

         ""lvl0"": ""article h1, div.toolbar ul li:nth-child(1) a"",

        ""lvl1"": ""article h2, div.toolbar ul li:nth-child(2) a"",

        ""lvl2"": ""article h3, div.toolbar ul li:nth-child(3) a"",

        ""lvl3"": ""article h4, div.toolbar ul li:nth-child(4) a"",

        ""lvl4"": ""article h5, div.toolbar ul li:nth-child(5) a"",

        ""lvl5"": ""article h6, div.toolbar ul li:nth-child(6) a"",  

        ""text"": ""article p, article li"" 

 

This manner will keep track of the article also as well as the toolbar items within the list it could select. We could think of simpler approach but I find this one way.

 
Aemie:1593393020:2020-06-29T09:10:20.636+0000:1593393020:2020-06-29T09:10:20.636+0000:[~aashnajena] if you want, I added *apache_demo.json*, you can check that, it works for both components and manuals as I checked.
aashnajena:1593393440:2020-06-29T09:17:20.337+0000:1593393440:2020-06-29T09:17:20.337+0000:Yes this is great! We should definitely use this. I'll try to polish this a little to include camel sub-projects and versions. Instead of using all the hierarchy, my preference would be to use ""div.toolbar ul li:nth-child(1)"" as lvl0 and ""article h1"" as lvl1, so that search results get grouped by lvl0 but not have a long list of hierarchy. 
Aemie:1593403184:2020-06-29T11:59:44.835+0000:1593403184:2020-06-29T11:59:44.835+0000:I don't know about the change in hierarchy levels as for a topic like the support it comes from different related topics on user-manual and community. If we wanted to prevent the long list of hierarchy, we could change the layout of the search results. The one in the picture is from [https://getbootstrap.com/] and these results provide much better clarity, in my opinion.

 

!getbootstrap-searchresult.png|width=423,height=406!
githubbot:1593994733:2020-07-06T08:18:53.994+0000:1593994733:2020-07-06T08:18:53.994+0000:aashnajena opened a new pull request #423:
URL: https://github.com/apache/camel-website/pull/423


   I have linked my own Algolia index to this PR for now, so that everyone can view the changes in search results. 
   - Search results are now grouped by higher level headings eg. ""Camel Components"" or ""User Manual"" or ""Camel Kafka Connector"". 
   - For Hugo pages, search results are grouped by H1, because that itself is the highest level of heading eg ""Articles"" or ""Books""
   - I wanted to make the config file as simple as possible, and depend on the sitemap instead of the URLs. This is what I'm using :
   
   
     ""sitemap_urls"": [
       ""https://camel.apache.org/sitemap.xml""
     ],
     ""selectors"": {
       ""lvl0"": "".toolbar ul li:nth-child(1) a"",
       ""lvl1"": "".version-menu a.is-current"",
       ""lvl2"": ""article h1"",
       ""lvl3"": ""article h2"",
       ""text"": ""article p, article li""
     }
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593997587:2020-07-06T09:06:27.810+0000:1593997587:2020-07-06T09:06:27.810+0000:AemieJ commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r450085459



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('QDOJ4LJQCC', '0fa28c3acc4d5f383b85ae4ad035ac9c')
+    const index = client.initIndex('aashna')

Review comment:
       The name should be `apache_camel`, I believe.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1593998076:2020-07-06T09:14:36.982+0000:1593998076:2020-07-06T09:14:36.982+0000:aashnajena commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r450090271



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('QDOJ4LJQCC', '0fa28c3acc4d5f383b85ae4ad035ac9c')
+    const index = client.initIndex('aashna')

Review comment:
       As I mentioned, I've linked my personal index here, which is named ""aashna"". This is just for showing everyone how the search results will look with the new configuration. These two lines are not supposed to be merged, I will revert them before merging.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594001389:2020-07-06T10:09:49.803+0000:1594001389:2020-07-06T10:09:49.803+0000:aashnajena commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-654142579


   @zregvart please trigger the preview now, PR is ready for review


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594008444:2020-07-06T12:07:24.948+0000:1594008444:2020-07-06T12:07:24.948+0000:AemieJ commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-654193808


   I have a few comments on these changes : 
   * You have only included the first child of the toolbar list and neglecting the rest. However, if you search for `Bean`, there is Bean under `Components` as well as `EIP`. Hence, I suggested including the links of the toolbar to avoid any cases of such behavior. If we were to use specific selectors, there would be no loophole. 
   
   * Another suggestion: Initially we made changes to the docs pages so that the title wasn't the only thing shown in the search result. I believe we can do the same with blog pages. The hierarchy I would prefer seeing the Blog as - 
   ``` 
   # This being for the blog pages
   Blog
   -------
   Category Name > Title of the blog
   ```
   * Another case that is not taken care of is that when you search a particular blog, it gives results from the `https://camel.apache.org/category/<title>` as well. To pass this case, I was thinking that we can't avoid crawling on categories as it could be the page where the user wants to land on however to avoid confusion on whether it is the blog page or the category page, we could provide specific layout such as - 
   ```
   # This being for the category pages
   Category Name
   -------
   Title of the Blog
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594008535:2020-07-06T12:08:55.196+0000:1594008535:2020-07-06T12:08:55.196+0000:AemieJ edited a comment on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-654193808


   I have a few comments on these changes : 
   * You have only included the first child of the toolbar list and neglected the rest. However, if you search for `Bean`, there is Bean under `Components` as well as `EIP`. Hence, I suggested including the links of the toolbar to avoid any cases of such behavior. If we were to use specific selectors, there would be no loophole. If there is another possible workaround and it works, that's good then.
   
   * Another suggestion: Initially we made changes to the docs pages so that the title wasn't the only thing shown in the search result. I believe we can do the same with blog pages. The hierarchy I would prefer seeing the Blog as - 
   ``` 
   # This being for the blog pages
   Blog
   -------
   Category Name > Title of the blog
   ```
   * Another case that is not taken care of is that when you search a particular blog, it gives results from the `https://camel.apache.org/category/<title>` as well. To pass this case, I was thinking that we can't avoid crawling on categories as it could be the page where the user wants to land on however to avoid confusion on whether it is the blog page or the category page, we could provide specific layout such as - 
   ```
   # This being for the category pages
   Category Name
   -------
   Title of the Blog
   ```


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594010576:2020-07-06T12:42:56.098+0000:1594010576:2020-07-06T12:42:56.098+0000:aashnajena commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-654210877


   About the first point, we can include the toolbar links without specifying selectors, but I don't think it's a good idea to have all the links from the toolbar. That would make the headings very long and repetitive for most components. I'd wait for some more reviews on this part. We need to make a call about how much of the hierarchy we want to show. My intent is to have one high-level topic - which should be used for **grouping** results, and the rest of the headings to consist of h1 and h2 only. 
   
   I agree that we need to treat blogs differently. I'll try to push some changes for that soon!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

Aemie:1594027206:2020-07-06T17:20:06.328+0000:1594027206:2020-07-06T17:20:06.328+0000:[~zregvart] [~delawen] [~aashnajena] I have updated the apache_demo.json. I am aware that it's really long but when I went through the config of a heavily distributed documentation based website, either the versions have different configs or it's a huge config according to specifications. With the one I have created, it will even notify the user that: 
 * Which search is under category and which one is under blog. 
 * Every menu item under the community will be visible alongside the community.
 * For each doc, the names won't clash and no possible loopholes will be created as I have tested

I understand we want to minify the file as much as possible but I strongly believe we require the use of start_urls and the different specific selectors. If [~aashnajena] can resolve those earlier stated points with a minified version, then that's good ( I will think about it as well ), or else we could work on this current and move on to minify it.
aashnajena:1594029287:2020-07-06T17:54:47.589+0000:1594029287:2020-07-06T17:54:47.589+0000:As I mentioned during the call today, I had prepared a config file with selectors similar to this one, but according to me, this poses maintenance issues. Versions, menu items, and blog categories are not fixed. We keep adding/changing categories, versions, and menu items, that's why I was against the idea of having to specify them explicitly in the config file, especially because it will mean that we have to put a PR on the Algolia repo every time we make a change. We have recently also merged two pages - docs and projects, and we might add/delete more webpages in the future, that's why I don't want to keep explicit start_urls as well - although this we might require to some extent.

My idea was to keep the config file that I've suggested on the PR + add one new selector for Blog where lvl0 = ""Blog"", lvl1 = header a.category, and lvl2=h1 and add the categories page in stop_urls to stop duplicating results. This way, we won't need an explicit set of categories. I'll wait for some more opinions before I make changes, because [~Aemie] and I seem to be suggesting very different things.
zregvart:1594091721:2020-07-07T11:15:21.185+0000:1594091721:2020-07-07T11:15:21.185+0000:I'd try to make the configuration as simple as possible. [~Aemie] is it possible to omit the values for variables, or that would not work. We release quite often and with the approach you're suggesting we would need to create PRs against Algolia repository every time we release a new version. I'm unsure about indexing the {{/categories}}, that seems redundant in addition to indexing {{/blog}}.

I guess it's somewhat difficult to ascertain which configuration yields better search index, I think we need to define a set of criteria/tests to check. For example:
* If a documentation page has multiple versions, search results show what version a search hit belongs to
* In addition to the title we can see abstract of the page text
* Each search hit belongs to a category (blog, user manual, component reference, camel-k, camel-quarkus, camel-spring-boot, camel-karaf, camel-kafka-connector)
* Search hits contain breadcrumbs (Camel Components, Components, AWS, AWS Elastic Container Service (ECS))
* ...

Let's see about compiling a list so we can determine what configuration is an improvement.

For the time being, we can start with the suggestions that [~aashnajena] did on the [PR#423|https://github.com/apache/camel-website/pull/423], and make subsequent PRs to improve it. How does that sound?

aashnajena:1594093315:2020-07-07T11:41:55.428+0000:1594093315:2020-07-07T11:41:55.428+0000:I agree with all the points - I'll make some changes on the PR to index Blog (but not the categories page, since that's redundant). My only question is regarding the last point - do we want our search results to look like this?
-----------------------------------
Camel Components
-----------------------------------
latest >> Components >> AWS >> AWS Elastic Container Service (ECS) >> h2 heading

I tried this and felt that is heading is way too long. I have currently configured it to have :
-----------------------------------
Camel Components
-----------------------------------
latest >> AWS Elastic Container Service (ECS) >> h2 heading

But it's completely possible to include the intermediate levels of hierarchy. Please point out any more problems with the search on PR #423
Aemie:1594096103:2020-07-07T12:28:23.108+0000:1594096240:2020-07-07T12:30:40.643+0000:[~aashnajena] For the last point that's what I have been trying to point out the mistake, you need to include all and the reason for that is there are certain topics such as Bean that comes under Component and EIP and their main toolbar link is Camel Components. And we also need to include h3 headings as well or else we are letting go of many possible search results for a query ( ex: URI format or Spring Boot Auto Configuration )

 

[~zregvart] yes, the variables can be removed not necessary indeed. But along with that PR, I would like to see the whole configuration file Aashna designed to look through it. 
aashnajena:1594114274:2020-07-07T17:31:14.716+0000:1594114274:2020-07-07T17:31:14.716+0000:I've changed my config file to include intermediate hierarchy levels and blog posts. It's available through the PR. Now, since intermediate levels are associated with each page, entries corresponding to those intermediate levels get recorded for every page, if you search for those intermediate levels, they will get repeated. Example, if you search for ""integration patterns"", you'll get all the links which had ""integration patterns"" as their intermediate level. 

We can try to remove duplicates on the website side, but the problem is that all these search results have different ""links"" even though their text is the same. I'm attaching the config file I used as camel.json 
Aemie:1594121819:2020-07-07T19:36:59.721+0000:1594121819:2020-07-07T19:36:59.721+0000:[~aashnajena] The configuration is minimal and accurate and takes care of the hierarchy. It's only the manner it's presented in the algolia search. We need to include other levels except for lvl0. Hence, algoliasearch.bundle.js needs to be changed to include the versions as well as the hierarchy.
aashnajena:1594124420:2020-07-07T20:20:20.450+0000:1594124420:2020-07-07T20:20:20.450+0000:I think versions and hierarchies are getting displayed with the existing algoliasearch.bundle.js. I'm not sure what you're referring to...

!search-results-example.png! 
aashnajena:1594163005:2020-07-08T07:03:25.273+0000:1594163005:2020-07-08T07:03:25.273+0000:Not sure why you're seeing that. I'm on the [preview of PR#423|https://deploy-preview-423--camel.netlify.app/] and this is how it looks to me:

 !pr-preview-search.png!
Aemie:1594167291:2020-07-08T08:14:51.958+0000:1594167355:2020-07-08T08:15:55.347+0000:!error-search.png!

 

No version and no hierarchy ( under the latest and 0.3.x version of camel Kafka connector). I have observed that for a few the version is the latest yet they don't have the version-menu present hence we would need to use the default value. This is from the preview one only for the PR that I tried experimenting with.
aashnajena:1594168166:2020-07-08T08:29:26.895+0000:1594168166:2020-07-08T08:29:26.895+0000:[~zregvart] [~delawen] Can you please confirm if you're able or unable to see versions and hierarchies on [this preview|https://deploy-preview-423--camel.netlify.app/]? Also, we need an opinion on whether we should show ""latest"" for pages that only have one version available on the website. I personally felt that it's not required, we would be unnecessarily confusing the user into thinking that there are other versions present for that page. If and when >1 versions are added for a page, ""version-name"" will start showing up on Search automatically. Although [~Aemie]'s point makes sense as well, so I think we should wait for some more opinions!
Aemie:1594173136:2020-07-08T09:52:16.612+0000:1594173209:2020-07-08T09:53:29.486+0000:[~aashnajena] I might have had net issues. I observed it again, the hierarchy is working fine now however the version is not visible on a few queries still ( search for properties )(y)
zregvart:1594201166:2020-07-08T17:39:26.191+0000:1594201166:2020-07-08T17:39:26.191+0000:If I search for ""kafka"" this is what I see (on the [PR#423 preview|https://deploy-preview-423--camel.netlify.app/]):

 !Screenshot_2020-07-08 Home - Apache Camel.png! 

Seems like we have two different ideas on how to implement this, I find it the easiest to write down a set of criteria like the ones in [comment|https://issues.apache.org/jira/browse/CAMEL-14952?focusedCommentId=17152661&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17152661], and list what we think is required for the first iteration of the search improvement and then test each implementation against those. Perhaps we can start there and see what do we find important right now and see if one implementation vs the other can deliver the desired results.
aashnajena:1594202429:2020-07-08T18:00:29.431+0000:1594202855:2020-07-08T18:07:35.260+0000:[~zregvart] yes I'm aware of this issue. As I pointed out above, these duplicates are a problem that comes with including hierarchies. I'm sure all of those links that you see on the preview lead to different pages.

From what I understand, when Docsearch indexes a page say *Camel Components >> EIP >> Log which has 2 h2 headings - ""Options"" and ""Exchange Properties""* it will make the following records, all leading to the _same URL_:
 * lvl0:Camel Components
 * lvl0:Camel Components, lvl1:EIP
 * lvl0:Camel Components, lvl1:EIP, lvl2:Log
 * lvl0:Camel Components, lvl1:EIP, lvl2:Log, lvl3:Options
 * lvl0:Camel Components, lvl1:EIP, lvl2:Log, lvl3:Options, text: some text
 * lvl0:Camel Components, lvl1:EIP, lvl2:Log, lvl3:Exchange Options
 * lvl0:Camel Components, lvl1:EIP, lvl2:Log, lvl3:Exchange Options, text: some text

All of these point to the same URL, so basically there is an entry which says ""Camel Components"" for *every* page which starts from this hierarchy, and that's what you're seeing in the case of Kafka. I'm trying to understand how we can avoid this, I think we can use page weight to avoid this. Maybe we can remove duplicate text entries through algoliasearch.bundle.js?
aashnajena:1594377119:2020-07-10T18:31:59.853+0000:1594377119:2020-07-10T18:31:59.853+0000:I'm starting to notice more problems with DocSearch.. versions are not getting recorded for some pages, although it is completely random and if I try to include them on level4 instead of 1, they show up. Similarly, in some records, intermediate hierarchies are getting lost even though lvl0 and lvl4 are present.. I'm not sure what is causing such behaviour. A lot of records do not have their h1 heading recorded even though it's present for every document.

I tried to scrape just one ""properties"" component page and looked at its records, but I'm really not able to understand why versions are recorded in some records, but are missing in the rest. For example, if you search for ""Properties"", you can see multiple entries but no versions. But if you search for ""propertyplaceholder"", which is an h2 on the properties page, you can see it coming up with its version. 

I'm starting to think that we should think about making our own index because :
a) I can't understand how the records are being made. It's not very consistent. 
b) Too many duplicate records getting made and I can't figure out how to remove them.

Perhaps we can merge these changes as they do provide a better search experience than before and then proceed to make our own index? [~Aemie] does your config work smoothly for all versions and intermediate levels?  
Aemie:1594438215:2020-07-11T11:30:15.541+0000:1594438316:2020-07-11T11:31:56.451+0000:[~aashnajena] as I have included version explicitly as variables, they will always be present for each crawled page with docs. However, you will have to use that variable explicitly. I believe intermediate levels work smoothly according to the config provided. I have updated my config to include the stop URLs you mentioned and removed config for community and category. Try it and let me know.
aashnajena:1594438889:2020-07-11T11:41:29.170+0000:1594438889:2020-07-11T11:41:29.170+0000:My free trial has expired so I can't try it locally. Maybe you can share some screenshots of how search results are showing up. For example, is ""Properties"" showing up with version & intermediate levels, and are the H2s under ""Properties"" showing up with full hierarchy +  H1? 
Also, is there a way to not hard code the versions? As Zoran mentioned, they change very frequently.
Aemie:1594458720:2020-07-11T17:12:00.847+0000:1594458720:2020-07-11T17:12:00.847+0000:[~aashnajena] added a specific search result on hazelcast. For the version, I will have to think about trying with the nav-explore-menu as the toolbar ain't working.
Aemie:1594514005:2020-07-12T08:33:25.248+0000:1594514005:2020-07-12T08:33:25.248+0000:[~aashnajena] I updated my config to include the version and with this event, the latest can be observed and you don't have to explicitly set it. 

Below is the hierarchy when I did the crawling through a few records and searched on properties - 

!properties-new-config.png!

 
aashnajena:1594605798:2020-07-13T10:03:18.980+0000:1594605798:2020-07-13T10:03:18.980+0000:[~Aemie] we want the results to group by ""Camel Components"". So we should have ""div.toolbar ul li:nth-child(1) a"" on lvl0 and version on lvl1. Basically interchange lvl0 and lvl1 in your config. But as soon as I do that, the versions stop showing up. This is the same problem I was facing before with the old config.
aashnajena:1594609584:2020-07-13T11:06:24.298+0000:1594609584:2020-07-13T11:06:24.298+0000:List of features on search :
 * If a page has multiple versions, the version should be visible. 
 * Each search hit should be grouped under User Manual [version], Camel Components [version], Blog, Downloads, Community, or some sub-project. 
 * No duplicate results should be shown. Each header in the search results should read differently.
 * Each result should contain a snippet of text/abstract with relevant words highlighted.
 * Intermediate levels of hierarchy should be visible in the header/title of each search result.

Suggestion : I have noticed that the first level of breadcrumbs for Components 2.x reads ""Component Reference"" and for higher versions, it reads ""Camel Components"". When we search for eg ""Yammer"" which is present in all 3 versions, Yammer 3.4.x and Yammer latest get grouped under ""Camel Components"" and Yammer 2.x goes under ""Component Reference"". I think it will be much clearer to have the top-level headings as ""*Camel Components [latest]*"", ""*Camel Components [3.4.x]*"" and ""*Component Reference* *[2.x]*"". In such a case all search hits will get grouped by version as well. I'm working on this, hopefully I'll have something to show soon.
githubbot:1594620418:2020-07-13T14:06:58.642+0000:1594620418:2020-07-13T14:06:58.642+0000:aashnajena commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-657582171


   @zregvart @Delawen @AemieJ I've made some changes and pushed a new index. This iteration fixes a lot of previous issues and has the following features :
   
   - Pages are grouped by versions. Versions are displayed along with the top-level heading. Versions should appear for all documentation pages now 
   - Each search result is grouped under User Manual [version], Camel Components [version], Blog, Books, Downloads, Community, or some sub-project [version].  
   - No duplicate results are shown. Try searching for ""Components"" or ""Kafka"" or an intermediate hierarchy level like ""Architecture"". You shouldn't be seeing duplicate results as was the case earlier.
   - Each result contains a snippet of text/abstract with relevant words highlighted. Earlier, abstract was not appearing in many cases.
   - Intermediate levels of hierarchy are visible in the header/title of each search result. As far as I have checked, there are no missing levels. Earlier I had observed some inconsistencies with pages like ""Properties"" 
   
   Known problems: For Blog, the < > arrows are showing up in abstract. I have removed this in the final config file, however, it's too lengthy for me to create the whole index again. Please overlook this detail. Please review the changes this week, because I'm again on a free Algolia trial, as our community account does not allow me to push >10k records for test app.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594621520:2020-07-13T14:25:20.880+0000:1594621520:2020-07-13T14:25:20.880+0000:aashnajena edited a comment on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-657582171


   @zregvart @Delawen @AemieJ I've made some changes and pushed a new index. This iteration fixes a lot of previous issues and has the following features :
   
   - Pages are grouped by versions. Versions are displayed along with the top-level heading. Versions should appear for all documentation pages now 
   - Each search result is grouped under User Manual [version], Camel Components [version], Blog, Books, Downloads, Community, or some sub-project [version].  
   - No duplicate results are shown. Try searching for ""Components"" or ""Kafka"" or an intermediate hierarchy level like ""Architecture"". You shouldn't be seeing duplicate results as was the case earlier.
   - Each result contains a snippet of text/abstract with relevant words highlighted. Earlier, abstract was not appearing in many cases.
   - Intermediate levels of hierarchy are visible in the header/title of each search result. As far as I have checked, there are no missing levels. Earlier I had observed some inconsistencies with pages like ""Properties"" 
   
   Known problems: 
   - For Blog, the < > arrows are showing up in abstract. I have removed this in the final config file, however, it's too lengthy for me to create the whole index again. Please overlook this detail. 
   - ""Building"" page appears separately because it's not included in the user manual. We need to either shift it or decide how to display it.
   
   Please review the changes this week, because I'm again on a free Algolia trial, as our community account does not allow me to push >10k records for test app.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594622907:2020-07-13T14:48:27.794+0000:1594622907:2020-07-13T14:48:27.794+0000:AemieJ commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-657604938


   Include `index.html` within `stop_urls` list within the config.
   
   ![error](https://user-images.githubusercontent.com/44139348/87318392-e5615d00-c545-11ea-823a-53affa2b9d1a.png)
   
   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594780573:2020-07-15T10:36:13.295+0000:1594780573:2020-07-15T10:36:13.295+0000:Delawen commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r454955675



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('XW4Y7DJE2Z', '2423e9780121b010cad442bfb45a4714')
+    const index = client.initIndex('camel_test')

Review comment:
       Do we want to call it ""test""?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594780777:2020-07-15T10:39:37.893+0000:1594780777:2020-07-15T10:39:37.893+0000:Delawen commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-658693183


   I love PR that the total count remove lines :)
   
   I like it.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594780900:2020-07-15T10:41:40.286+0000:1594780900:2020-07-15T10:41:40.286+0000:aashnajena commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r454958567



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('XW4Y7DJE2Z', '2423e9780121b010cad442bfb45a4714')
+    const index = client.initIndex('camel_test')

Review comment:
       These two lines of changes will be reverted before merging. ""camel_test"" is the name of my temporary local index which I have linked here so that everyone can see the improved search results. 




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594780946:2020-07-15T10:42:26.594+0000:1594780946:2020-07-15T10:42:26.594+0000:zregvart commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r454958942



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('XW4Y7DJE2Z', '2423e9780121b010cad442bfb45a4714')
+    const index = client.initIndex('camel_test')

Review comment:
       > Do we want to call it ""test""?
   
   This is against the test index configuration so we can see the different index configuration in the preview, before we merge we'll revert to the production values. That reminds me we also need to create a PR with the configuration change at Algolia. @aashnajena, @AemieJ do we need to merge the configuration change at Algolia before we merge this change?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594781537:2020-07-15T10:52:17.861+0000:1594781537:2020-07-15T10:52:17.861+0000:aashnajena commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r454963783



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('XW4Y7DJE2Z', '2423e9780121b010cad442bfb45a4714')
+    const index = client.initIndex('camel_test')

Review comment:
       This PR is so that everyone can search for keywords on the [preview](https://deploy-preview-423--camel.netlify.app/) and comment on whether we are getting better results than before (in terms of grouping results, duplicates, versions, etc).




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594781907:2020-07-15T10:58:27.923+0000:1594781907:2020-07-15T10:58:27.923+0000:aashnajena commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r454966989



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -4,8 +4,8 @@
   const algoliasearch = require('algoliasearch/lite')
 
   window.addEventListener('load', () => {
-    const client = algoliasearch('BH4D9OD16A', '16e3a9155a136e4962dc4c206f8278bd')
-    const index = client.initIndex('apache_camel')
+    const client = algoliasearch('XW4Y7DJE2Z', '2423e9780121b010cad442bfb45a4714')
+    const index = client.initIndex('camel_test')

Review comment:
       @zregvart Yes, we need to make a PR on Algolia's repository first. If you're satisfied with the current search results, should I go ahead and make that PR?




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594781974:2020-07-15T10:59:34.515+0000:1594781974:2020-07-15T10:59:34.515+0000:AemieJ commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-658701710


   Based on `index.html` it creates duplicate results for certain queries as `/` and `/index.html` leads to the same page so if Aashna can check by including `index.html` within `stop_urls`, then I believe it will possibly all the duplicate results.
   
   Example - [Community page with index.html within webpage domain](https://camel.apache.org/manual/latest/index.html#_community) and [same community page without the index.html within webpage domain](https://camel.apache.org/manual/latest/#_community)
   
   @zregvart I also was thinking of a few tweaks in the design and presentation for the search results but I wanted to tell after this search was updated with max possible efficiency.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594783625:2020-07-15T11:27:05.306+0000:1594783625:2020-07-15T11:27:05.306+0000:aashnajena commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-658713360


   @AemieJ yes I have included `index.html` under stop_urls.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594786336:2020-07-15T12:12:16.238+0000:1594786336:2020-07-15T12:12:16.238+0000:aashnajena commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-658731394


   I have opened a [Pull Request](https://github.com/algolia/docsearch-configs/pull/2097) on Algolia's Docsearch Configs repository. @zregvart They require a maintainer of the camel-website repository to approve those changes.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1594811928:2020-07-15T19:18:48.792+0000:1594811928:2020-07-15T19:18:48.792+0000:AemieJ commented on a change in pull request #423:
URL: https://github.com/apache/camel-website/pull/423#discussion_r455284733



##########
File path: antora-ui-camel/src/js/vendor/algoliasearch.bundle.js
##########
@@ -53,22 +53,16 @@
             const data = hits.reduce((data, hit) => {
               const d = {}
               d.url = hit.url
+              var section = hit.hierarchy.lvl1
+              if (hit.hierarchy.lvl0 !== null) section = section + ' [' + hit.hierarchy.lvl0 + ']'
               var breadcrumbs = Object.values(hit.hierarchy)
-                .slice(1)
+                .slice(2)
                 .filter((lvl) => lvl !== null)
                 .join(' &raquo; ')
-              if (breadcrumbs !== '') {
-                d.breadcrumbs = breadcrumbs
-              } else {
-                d.breadcrumbs = hit.hierarchy.lvl0
-              }
-              if (hit._snippetResult !== undefined) {
-                d.snippet = hit._snippetResult.content.value
-              } else {
-                d.snippet = ''
-              }
-
-              const section = hit.hierarchy.lvl0
+              

Review comment:
       There is a trailing space here according to netlify, same case with line 65.  Remove it and then we could test the preview.




----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595135022:2020-07-19T13:03:42.184+0000:1595135022:2020-07-19T13:03:42.184+0000:aashnajena commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-660640718


   @zregvart can we merge this? We need these changes for Search to work correctly on the website.


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595257237:2020-07-20T23:00:37.457+0000:1595257237:2020-07-20T23:00:37.457+0000:zregvart commented on pull request #423:
URL: https://github.com/apache/camel-website/pull/423#issuecomment-661413199


   Thanks!


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1595257244:2020-07-20T23:00:44.094+0000:1595257244:2020-07-20T23:00:44.094+0000:zregvart merged pull request #423:
URL: https://github.com/apache/camel-website/pull/423


   


----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on to GitHub and use the
URL above to go to the specific comment.

For queries about this service, please contact Infrastructure at:
users@infra.apache.org

zregvart:1596278124:2020-08-01T18:35:24.280+0000:1596278124:2020-08-01T18:35:24.280+0000:Thanks [~aashnajena] and [~Aemie], I think the search performs much better now!"
0,CAMEL-14951,Improvement,Major,"3.2.0, 2.25.1","3.3.0, 2.25.2","
None
",Resolved,Fixed,"3.3.0, 2.25.2",Claus Ibsen,Claus Ibsen,0,1,2020-04-22 11:22:08+00:00,2020-04-22 12:23:45+00:00,If for example you use a custom thread pool with abort policy and the task is aborted then camels error handler should be able to react,
0,CAMEL-14950,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Jiri Ondrusek,Jiri Ondrusek,0,2,2020-04-22 08:49:58+00:00,2020-05-06 07:55:34+00:00,"Spring-security allows various security configurations for running servers.
In case of camel-undertow it should be possible to enhance component to be able to use token bearer security with use of UndertowSecurityProvider (https://github.com/apache/camel/pull/3652)",
0,CAMEL-14949,Improvement,Minor,"3.2.0, 2.25.1",Future,"
None
",Open,Unresolved,Future,Andrea Cosentino,Zoran Regvart,0,2,2020-04-22 08:42:45+00:00,2023-08-09 09:24:45+00:00,"Slack is deprecating the ""legacy"" token authentication. We should migrate from that to OAuth for authentication. Note there are several types of tokens at Slack.",davsclaus:1662102690:2022-09-02T15:11:30.351+0000:1662102690:2022-09-02T15:11:30.351+0000:Is this still the case with old authentication todaty?
0,CAMEL-14948,Improvement,Major,"3.2.0, 2.25.1",,"
None
",Resolved,Fixed,None,Ramu,Zoran Regvart,0,2,2020-04-22 08:39:38+00:00,2020-05-01 05:28:13+00:00,channels.list API has been deprecated and for new applications will no longer function. We need to migrate from it.,ramu11:1588183929:2020-04-30T02:12:09.036+0000:1588183929:2020-04-30T02:12:09.036+0000:started working
0,CAMEL-14947,Improvement,Major,2.25.1,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Christian Nedregård,0,3,2020-04-22 06:02:05+00:00,2020-10-02 09:50:27+00:00,"In CAMEL-12733 the check for existing directories used by autoCreate was changed from ChannelSftp.cd to ChannelSftp.ls to fix a Windows specific issue.


cd is a remote operation while ls will actually load the full directory listing and load it over the wire. This happens for every file that are to be written. If the remote directory has a lot of files this has a heavy performance penalty.


In our case the directory some times contains 50.000+ files. Without autoCreate the writes take a few milliseconds. With autoCreate it takes up to 10 seconds due to the huge directory listing being generated and loaded over the wire for every single file to be written.


This can be solved by reverting the directory check to a remote operation such as cd and fixing the Windows specific issue in another way.


If it turns out that ls has to be used (unlikely) please note that there is another variant that takes a selector that enables you to abort the actual loading of the listing:




ls(String path, LsEntrySelector selector)","davsclaus:1587512359:2020-04-22T07:39:19.015+0000:1587512359:2020-04-22T07:39:19.015+0000:Thanks you are welcome to attempt to provide a fix as PR or patch file. One idea could be to have a new option true|false that choses this and the old way, then the windows users can use this mode and others can use the faster old way.
davsclaus:1587768806:2020-04-25T06:53:26.544+0000:1587768806:2020-04-25T06:53:26.544+0000:Thanks I polished the PR and renamed the option, and also by default using the faster LS with the break filter. 
davsclaus:1587769303:2020-04-25T07:01:43.913+0000:1587769303:2020-04-25T07:01:43.913+0000:If you want to help backport this to branch camel-2.25.x then can you take the commits we have done together and create a new PR. Otherwise we may not have time to do this and this will only be in 3.x.
chrned:1587774276:2020-04-25T08:24:36.729+0000:1587774646:2020-04-25T08:30:46.818+0000:[~davsclaus] I thought I'd do the backport. Question: In [SftpConfiguration|https://github.com/greenbird-chr/camel/commit/f58b23119b6610adab23d0c22abf19b07d2c0b95#diff-bbf4a73b030edc22dda2ca41df1dae66] the doc on {{setExistDirCheckUsingLs}} states that {{cd}} is default but the {{existDirCheckUsingLs}} property is actually true by default. Bug?
(it was not me that did the 3.x PR)
davsclaus:1587778156:2020-04-25T09:29:16.329+0000:1587778156:2020-04-25T09:29:16.329+0000:Ah yeah the doc is wrong
davsclaus:1587779298:2020-04-25T09:48:18.447+0000:1587779298:2020-04-25T09:48:18.447+0000:I am fixing the doc. 

And you are also welcome to do a backport of https://issues.apache.org/jira/browse/CAMEL-14915
davsclaus:1587780321:2020-04-25T10:05:21.146+0000:1587780321:2020-04-25T10:05:21.146+0000:Okay doc fixed
jarielpa:1601602776:2020-10-02T09:39:36.939+0000:1601602776:2020-10-02T09:39:36.939+0000:Any plans to backport this to 2.25
davsclaus:1601603427:2020-10-02T09:50:27.434+0000:1601603427:2020-10-02T09:50:27.434+0000:No 2.25.x is only security fixes and very important bugs"
0,CAMEL-14946,Bug,Minor,1.0.0,,"
None
",Resolved,Invalid,None,Unassigned,Daniel Tremblay,0,2,2020-04-22 02:38:21+00:00,2020-04-22 06:51:54+00:00,"Add a new kamel install switch to allow overriding the buildah image, e.g. ""--buildah-image""


This switch would work in a similar fashion to ""-base-image"" and ""-operator-image"".


Whenever a new ""kamel run"" command gets used, the overriden buildah image would get used.","dmvolod:1587502132:2020-04-22T04:48:52.495+0000:1587502132:2020-04-22T04:48:52.495+0000:[~dtremblay], camel-k has own issue tracker on GitHub [https://github.com/apache/camel-k/issues]

Please submit it there
acosentino:1587509514:2020-04-22T06:51:54.996+0000:1587509514:2020-04-22T06:51:54.996+0000:Please report in the github issues tracker for camel-k. Thanks."
0,CAMEL-14945,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,1,2020-04-22 02:03:35+00:00,2020-04-23 21:35:09+00:00,"Recent versions of Antora allow you to specify asciidoc attributes in the component descriptor, not just the playbook.  Since 'camel-quarkus-last-release' is only used in camel-quarks, it can be defined in the c-q antora.yml component descriptor, avoiding duplication and the need to update the main playbook on every release.


I'll submit a PR in a day or two when Antora 2.3.0 is released.",djencks:1587648909:2020-04-23T21:35:09.024+0000:1587648909:2020-04-23T21:35:09.024+0000:PR applied.  Will remove from camel-website playbook soon in a separate PR with an upgrade to Antora 2.3.0
0,CAMEL-14944,Bug,Major,"3.1.0, 3.2.0",,"
None
",Resolved,Not A Problem,None,Unassigned,Emmerson,0,2,2020-04-21 21:08:12+00:00,2020-04-23 06:23:10+00:00,"Hello,


I am defining a REST route with route identifier ""mngt-endpoint-stats""




restConfiguration().component(""undertow"")
.bindingMode(RestBindingMode.json)
.contextPath(""/"").host(""0.0.0.0"").port(9090)
.apiContextPath(""/api-doc"")
.apiContextRouteId(""api-doc-endpoint"")
.apiProperty(""api.title"", ""Producer API"")
.apiProperty(""api.version"", ""1.0.0"")
.apiProperty(""cors"", ""true"");

rest(""/mngt"").id(""mngt-endpoint"")
 .consumes(""application/json"").produces(""application/json"")
 .get(""/stats"").id(""mngt-endpoint-stats"").description(""Stats Apache Camel"")
 .to(StatsRouteBuilder.DIRECT_STATS)



 


I want to suspend/resume the route dynamically due schedule maintenance periods or return 503 along that time.


 


I am trying to use the controlbus to suspend the route but after call it the endpoint is still available and working.


 




.toD(""controlbus:route?routeId=${exchangeProperty.routesIds[${exchangeProperty.CamelLoopIndex}]}&action=suspend"");","davsclaus:1587502268:2020-04-22T04:51:08.468+0000:1587502268:2020-04-22T04:51:08.468+0000:Use .routeId to set the route id in the rest-dsl
emmerson:1587524963:2020-04-22T11:09:23.122+0000:1587525031:2020-04-22T11:10:31.827+0000:Many thanks, is working (y)!!!

 

The only problem I found I think is about how to use REST DSL API, because after set the routeId I wasn't able to declare another resource, so I come up with following declaration which is working fine.

 

 
{code:java}
rest(""/mngt"").id(""mngt-endpoint"").description(""RabbitMQ Camel Management service"")
 .consumes(""application/json"").produces(""application/json"") 
 .get(""/stats"")
 .description(""Stats Apache Camel"").route().routeId(""mngt-endpoint-stats"")
 .to(StatsRouteBuilder.DIRECT_STATS)
 ;
rest(""/mngt"").id(""mngt-endpoint"").description(""RabbitMQ Camel Management service"")
 .consumes(""application/json"").produces(""application/json"")
 .get(""/shutdown"")
 .description(""Shutdown Apache Camel"").route().routeId(""mngt-endpoint-shutdown"")
 .to(ShutdownRouteBuilder.DIRECT_SHUTDOWN_MESSAGE_CONSUMERS_ENDPOINT)
 ;
{code}
 

 
emmerson:1587541930:2020-04-22T15:52:10.721+0000:1587541930:2020-04-22T15:52:10.721+0000:Sorry,

The component work when I do stop or restart, but not when I use ""*suspend*"".

 

Working calls

.toD(""controlbus:route?routeId=${exchangeProperty.route-id}&action=stop"")
 .toD(""controlbus:route?routeId=${exchangeProperty.route-id}&action=restart&restartDelay=10000"")

 

NOT Working calls

.toD(""controlbus:route?routeId=${exchangeProperty.route-id}&action=suspend"")
davsclaus:1587594032:2020-04-23T06:20:32.776+0000:1587594032:2020-04-23T06:20:32.776+0000:The stop vs suspend has nothing to do with rest-dsl, and depends on the implementation of the camel-undertow component if it supports suspension nor not.
davsclaus:1587594190:2020-04-23T06:23:10.736+0000:1587594190:2020-04-23T06:23:10.736+0000:See https://issues.apache.org/jira/browse/CAMEL-14954"
0,CAMEL-14943,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-21 19:22:13+00:00,2020-04-21 20:07:02+00:00,For example to set the allow optimized components then its a bit tricky currently in Java DSL.,
0,CAMEL-14942,Sub-task,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,1,2020-04-21 15:36:10+00:00,2020-04-21 17:02:13+00:00,The playbook also needs to mention the eip part of the components component.,djencks:1587459733:2020-04-21T17:02:13.037+0000:1587459733:2020-04-21T17:02:13.037+0000:See https://github.com/apache/camel-website/pull/350
0,CAMEL-14941,Sub-task,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,1,2020-04-21 15:35:02+00:00,2020-04-21 17:01:46+00:00,This is the camel-3.2.x @camel docs fixes.,djencks:1587459706:2020-04-21T17:01:46.643+0000:1587459706:2020-04-21T17:01:46.643+0000:https://github.com/apache/camel/pull/3764
0,CAMEL-14940,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,2,2020-04-21 15:33:37+00:00,2020-04-21 17:02:46+00:00,"Backport generation of index tables for component modules index pages from 'latest'
Since supportLevel is not available, have a 'deprecated' column instead.
Add the EIPs to components and nav as they are now versioned along with components.
Fix the broken user manual faq xrefs so the maven build can succeed.","acosentino:1587457761:2020-04-21T16:29:21.302+0000:1587457761:2020-04-21T16:29:21.302+0000:I don't think this is critical, we won't release 3.2.1, because it's just a release through 3.4.0 LTS, so it's an effort that may be avoided actually. 
djencks:1587458376:2020-04-21T16:39:36.048+0000:1587458376:2020-04-21T16:39:36.048+0000:It might not be critical, but I think it's a bit nice to have until the LTS release, and I already made  the PRs.
acosentino:1587458674:2020-04-21T16:44:34.180+0000:1587458674:2020-04-21T16:44:34.180+0000:Mine was just a suggestion, there is no need to answer in this way."
0,CAMEL-14939,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-04-21 10:31:57+00:00,2020-04-21 12:52:47+00:00,https://github.com/undertow-io/undertow/pull/878,acosentino:1587444762:2020-04-21T12:52:42.622+0000:1587444762:2020-04-21T12:52:42.622+0000:Removed the related karaf feature
0,CAMEL-14938,Improvement,Minor,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Soner Koksal,0,1,2020-04-21 08:52:50+00:00,2020-04-25 10:08:23+00:00,Add file name customization to complied classes generated from Groovy expressions for debugging purposes.,
0,CAMEL-14937,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Jens Kleine-Herzbruch,0,2,2020-04-21 08:51:17+00:00,2020-04-22 12:46:44+00:00,"public static <T> Expression headerExpression(final String headerName, final Class<T> type) {
     return headerExpression(simpleExpression(headerName), constantExpression(type));
{{ }}}


 


and


 


{{ public static Expression headerExpression(final Expression headerName, final Expression typeName)}}
}}{{


tries to resolve the type via


String text = typeName.evaluate(exchange, String.class);


which results in the String ""class xxx.yyy.type"". Trying to resolve that as a class obviously is bound to fail. I'm not sure whether the type converter should be changed here or the headerExpression code is wrong.


 


This worked in 3.1.0, btw.","davsclaus:1587502440:2020-04-22T04:54:00.663+0000:1587502440:2020-04-22T04:54:00.663+0000:Can you attach a reproducer or some more source code that better points out what the problem is. The code you have so far is a bit unclear.
jensgr@gmx.net:1587506569:2020-04-22T06:02:49.343+0000:1587506569:2020-04-22T06:02:49.343+0000:I don't have a rproducer at the ready but the main problem is that

typeName.evaluate(exchange, String.class) with typeName being e.g. a constantExpression(String.class) results in the string ""class java.lang.String"".

When that gets fed into the class resolver, it fails.

So either the class resolver needs to handle that case (probably not the correct solution), or the type converter needs to make sure to convert to ""java.lang.String"", or the headerExpression code needs to use the passed in class parameter directly instead of converting to class name and back to class.
jensgr@gmx.net:1587515338:2020-04-22T08:28:58.834+0000:1587515338:2020-04-22T08:28:58.834+0000:Here's a simple test case and a possible fix.
davsclaus:1587527942:2020-04-22T11:59:02.836+0000:1587527942:2020-04-22T11:59:02.836+0000:Thanks we will take a look at this
davsclaus:1587529743:2020-04-22T12:29:03.026+0000:1587529743:2020-04-22T12:29:03.026+0000:Yeah Jens this looks good thanks for the patch. Running tests before merging."
0,CAMEL-14936,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,2,2020-04-21 08:42:31+00:00,2020-04-21 11:49:43+00:00,Its only used by file component so lets remove it as its not really needed and the file component can be made like the others and not use it.,"davsclaus:1587430678:2020-04-21T08:57:58.181+0000:1587430678:2020-04-21T08:57:58.181+0000:And also remove SubServiceFactory as this would no longer be needed either
davsclaus:1587433753:2020-04-21T09:49:13.623+0000:1587433753:2020-04-21T09:49:13.623+0000:We should also remove reflection calls when creating the factory and invoke its single method.
Now we just use regular code.
gnodet:1587439528:2020-04-21T11:25:28.261+0000:1587439565:2020-04-21T11:26:05.571+0000:Do you plan to simply change the generator to generate a different file for those services ?  Or just using a completely different service ?
davsclaus:1587440962:2020-04-21T11:49:22.568+0000:1587440983:2020-04-21T11:49:43.062+0000:No we actually dont need to generate such file, it was over-engineered in file/ftp components. And that sub service has been removed and also in the maven tooling."
0,CAMEL-14935,Bug,Major,2.24.0,"2.25.2, 3.x","
None
",Resolved,Implemented,"2.25.2, 3.x",Unassigned,Chris McCarthy,0,3,2020-04-21 01:06:42+00:00,2023-11-07 10:08:05+00:00,"We are experiencing unexpected offset reset errors occasionally, as well as occasional replay of messages (without an offset reset error).


The cause seems to be a failed commit on rebalance, leaving an old value in the hashMap used to store the latest processed offset for a partition. This old value is then re-read and re-committed across rebalances in certain situations.


Our relevant configuration details are:


autoCommitEnable=false
 allowManualCommit=true
 autoOffsetReset=earliest


It seems when the KafkaConsumer experiences an Exception committing the offset (CommitFailedException) upon a rebalance, this leaves the old offset value in the lastProcessedOffset hashMap.


A subsequent rebalance that assigns the same partition to the same consumer, that then thereafter experiences another rebalance (before any messages have been processed successfully as this will over write the invalid value and self correct the problem) will commit this old offset again.  This offset may be very old if there have been many rebalances in between the original rebalance that failed to commit its offset.


If the old offset is beyond the retention period and the message is no longer available the outcome is an offset reset error.  If the offset is within the retention period all messages are replayed from that offset without an error being thrown.","davsclaus:1587770869:2020-04-25T07:27:49.776+0000:1587770869:2020-04-25T07:27:49.776+0000:Yeah Kafka pushes all the complexities from them to the end users ;(

So what can we do? Can we maybe remove/clear that map in case of CommitFailedException so there are no offset stored at all?

You are welcome to dive into the code and see if you can provide a fix/improvement as patch or github PR

Chris McCarthy:1588282401:2020-05-01T05:33:21.004+0000:1588608476:2020-05-05T00:07:56.522+0000:Thanks Claus,

Yes performing the delete of the map in a finally block would address this specific vulnerability, or clearing out the map on assignment,

We may be better off to upgrade to a newer version first I think.    

 
davsclaus:1588374346:2020-05-02T07:05:46.585+0000:1588374346:2020-05-02T07:05:46.585+0000:Okay yeah I would also suggest to upgrade if possible as older Camel 2.x releases are not active maintained. Only 2.25.x is and its only for serious bugs or security issues.
dariusx:1590509551:2020-05-27T00:12:31.712+0000:1590509583:2020-05-27T00:13:03.714+0000:[~davsclaus] is this a change that has been made in v3.x? 
It is ""Resolved"", but I don't see a PR attached, and you also mentioned that you'd welcome a patch.
 So, wasn't sure if there's a resolution without such a patch... some work-around?
dariusx:1590576367:2020-05-27T18:46:07.567+0000:1590576367:2020-05-27T18:46:07.567+0000:[~Chris McCarthy], we ran into this too (v2.24.3) and were planning on either patching or overriding the Kafka Consumer.
If you've looked at the code and have any pointers about where best to catch that exception, or where best to put the finally, your feedback will be valuable. Thx. 
Chris McCarthy:1590679909:2020-05-28T23:31:49.665+0000:1590680240:2020-05-28T23:37:20.781+0000:[~dariusx] I think the vulnerability would be well handled by a change in the KafkaConsumer (the camel component) in the method onPartitionsRevoked that implements the rebalance listener.  Wrapping the call to the commitOffset in a try block and removing the offsetKey from the Map lastProcesssedOffset in the corresponding finally block, so exceptions on commit do not prevent the Map being cleaned up. Hope that helps and is clear.   
dariusx:1590740007:2020-05-29T16:13:27.834+0000:1590740124:2020-05-29T16:15:24.877+0000:[~Chris McCarthy] Very clear, thank you. 
 If you can review [this PR on my personal fork|https://github.com/DariusX/camel/pull/1/commits/9df63769d4ed9ffcc0f2d7aa6bd04955ccf15e2f], and check that it matches what you were thinking, that'll be helpful.

As a next step, I'll work on sending it back into the Camel base repo.
 Thx.
Chris McCarthy:1590807502:2020-05-30T10:58:22.697+0000:1590807741:2020-05-30T11:02:21.483+0000:[~dariusx] Yes that's what I was thinking.  I would be inclined to throw the exception as there is useful information in the default handler that prints the below which is useful I think.  Also a useful addition may be if you logged the offsetkey and the offset as it may be helpful for diagnostics when searching the log tracing issues with a particular partition or offset.  But nice one as this is the fix needed!

""org.apache.kafka.clients.consumer.CommitFailedException: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing max.poll.interval.ms or by reducing the maximum size of batches returned in poll() with max.poll.records.""
dariusx:1590905323:2020-05-31T14:08:43.932+0000:1590905323:2020-05-31T14:08:43.932+0000:[~Chris McCarthy], please [see my PR to Camel here|[https://github.com/apache/camel/pull/3877]]. 
In particular, Claus's question as to whether it is okay to clear in the finally (rather than when we catch an exception).
Thanks.
dariusx:1591062567:2020-06-02T09:49:27.489+0000:1591067483:2020-06-02T11:11:23.306+0000:[~Chris McCarthy] Claus [suggested the following|[https://github.com/apache/camel/pull/3877]], which sounds good to me:
 * On Exception, we clear
 * In the Finally, we remove the current offset key
 The existing code had:
{code:java}
lastProcessedOffset.remove(offsetKey);{code}
So, we'd be putting that in the finally block

Indeed, I have a question: do we really need to clear within the catch block?
Removing the offset for the current partition, within the finally block ought to do it, right?
That's the code that was being skipped originally...so, we just need to move it to the finally block?
Chris McCarthy:1591114257:2020-06-03T00:10:57.698+0000:1591114257:2020-06-03T00:10:57.698+0000:Yes agreed, we dont want to clear as other consumers use that map and we will lose their state"
0,CAMEL-14934,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.3.0,Peter Palaga,Peter Palaga,0,1,2020-04-20 13:44:46+00:00,2020-04-30 15:20:37+00:00,"The descriptions of components, languages, data formats, etc. in Camel catalog currently use several inconsistent styles. As agreed on camel-dev https://www.mail-archive.com/dev@camel.apache.org/msg50591.html we should try to stick to a common style characterized by the following rules:


 Shorter is better. Less/shorter words are faster to read and faster to understand
(ii) An application of : Leave out words and information available elsewhere in the Catalog record. Esp. do not repeat the title and kind (component, language, ...) because they are clear from the context. The same holds for the word ""Camel"".
(iii) Concentrate on functionality (what it does), because that's what most users want to know; preferably start with a verb in the plain (imperative) form


Example:


old: JacksonXML data format is used for unmarshal a XML payload to POJO or to marshal POJO back to XML payload.


new: Unmarshal an XML payload to POJO or marshal a POJO back to XML.",
0,CAMEL-14933,Improvement,Minor,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-04-20 07:44:11+00:00,2020-04-20 14:07:59+00:00,GenerateConfigurerMojo has a dependency on spring but we can replace such usage by our own reflection helper,
0,CAMEL-14932,New Feature,Major,3.3.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Antoine Toulme,0,2,2020-04-19 23:12:44+00:00,2020-04-25 07:25:32+00:00,"Create a new component specifically for Splunk HEC (HTTP Event Collector).


The existing camel-splunk component is a powerhouse that allows to send and draw data from a Splunk instance. However for most use cases, HEC is used in enterprises to send data to Splunk.","toulmean:1587314202:2020-04-20T00:36:42.343+0000:1587314202:2020-04-20T00:36:42.343+0000:See [https://github.com/apache/camel/pull/3760] for a contribution.
davsclaus:1587591457:2020-04-23T05:37:37.768+0000:1587591457:2020-04-23T05:37:37.768+0000:Thanks PR merged. We need spring boot starter and potentially a karaf feature if its possible.
davsclaus:1587597579:2020-04-23T07:19:39.031+0000:1587597579:2020-04-23T07:19:39.031+0000:An idea could be to change the syntax from splunk-hec:host/token?query to splunk-hec:index?query and allow to specify host token etc as query and component level parameters. The advantage is to allow to configure this globally once on the component. Especially tokens which can then more easily be auto configured via spring boot auto configuration etc."
0,CAMEL-14931,Bug,Minor,3.2.0,,"
None
",Closed,Not A Bug,None,Omar Al-Safi,Gurpal2000,0,2,2020-04-18 22:07:24+00:00,2020-04-23 19:57:22+00:00,"Camel: 3.2.0
SB: 2.2.6
Java: 1.8


For a kafka producer, it seems the additionalProperties method does not seem to take effect. Specifically, the goal is to set ""transactional.id"" and I thought additionalProperties is the way to do it.


I have attached a log where the kafka properties shows ""transactional.id = null"" on startup. I assume it should be set on startup. Other values are set as expected.


Test code here: https://github.com/gurpal2000/camelproblemdemo3


You will need to have a sample broker running. I used a docker one.


The documentation mentions prefixing the value with ""additionalProperties"" also. That does not work either.","Gurpal2000:1587220681:2020-04-18T22:38:01.403+0000:1587220747:2020-04-18T22:39:07.979+0000:Downgrading to minor as I found this workaround:

If i replace the string value with a map (overloaded method) then it works as expected. What is the format of the method with String then?
{code:java}
.additionalProperties(new HashMap<String, Object>() {{
  put(""transactional.id"", ""ABC"");
}}){code}
omarsmak:1587342392:2020-04-20T08:26:32.615+0000:1587342392:2020-04-20T08:26:32.615+0000:Hey [~Gurpal2000], 

This is actually _not_ a bug, indeed it should accept {{Map}} since you have used the EndpointDSL as well as ComponentDSL which they will enforce typesafe parameters, thus enforcing the `Map` type which is intended here. However, in case of string prefixed with {{additionalProperties}}, this is only valid if you use the plain String URI, e.g: 
{{kafka:mytopic?brokers=broker1:12345,broker2:12566&partitioner=com.class.Party&additionalProperties.extra.1=123&additionalProperties.extra.2=test}}. 

Hope is clear! 

Regards, 
Omar
Gurpal2000:1587643042:2020-04-23T19:57:22.512+0000:1587643042:2020-04-23T19:57:22.512+0000:thanks!"
0,CAMEL-14930,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Emmerson,0,2,2020-04-18 16:29:57+00:00,2020-04-20 07:34:41+00:00,"I have a Camel CDI project using 3.2 and I trying use controlbus to get stats from some routes using Java DSL:


 




.toD(""controlbus:route?routeId=${exchangeProperty.routesIds[${exchangeProperty.CamelLoopIndex}]}&action=stats"");



 


The starting logs are telling me JMX is enabled




[ main] DefaultManagementStrategy INFO JMX is enabled



 


But when I run the route I have an error message saying JMX is dissabled.




[ XNIO-1 task-1] ControlBusProducer INFO ControlBus task done [stats route mngt-endpoint-stats] with result -> JMX is disabled, cannot get stats","acosentino:1587198769:2020-04-18T16:32:49.770+0000:1587198769:2020-04-18T16:32:49.770+0000:Did you add the camel-management dependency to your Pom?
acosentino:1587198805:2020-04-18T16:33:25.418+0000:1587198805:2020-04-18T16:33:25.418+0000:It's documented in the migration guide.
emmerson:1587203291:2020-04-18T17:48:11.310+0000:1587203291:2020-04-18T17:48:11.310+0000:I didn't, but is working after add that dependency, many thanks.

Would you mind update the official documentation to reflect that?

https://camel.apache.org/manual/latest/jmx.html

 
emmerson:1587203398:2020-04-18T17:49:58.621+0000:1587203398:2020-04-18T17:49:58.621+0000:This is a project from the scratch, that is the reason I didn't read the migration guide.

Thanks again :)
acosentino:1587208055:2020-04-18T19:07:35.209+0000:1587208055:2020-04-18T19:07:35.209+0000:Sure thing! Thanks for spotting this.
acosentino:1587339274:2020-04-20T07:34:34.117+0000:1587339274:2020-04-20T07:34:34.117+0000:Added the documentation"
0,CAMEL-14929,Improvement,Minor,3.2.0,3.6.0,"
None
",Resolved,Fixed,3.6.0,Andrea Cosentino,Anderson Vaz,0,2,2020-04-18 15:05:26+00:00,2020-10-11 14:54:58+00:00,"Hi,


The component `camel-aws2-s3` should be able to support streaming consume/download  to allow the copy/download of large files from S3. The current implementation or 'saves' the contents of input stream into the memory or completely disregard it not giving a change for the next components to manipulate the stream. This seems to be a no ideal implementation.


The issue essentially is on class `org.apache.camel.component.aws2.s3.AWS2S3Endpoint` in between lines 169 to 178 and lines 201 to 212.


The logic on lines 169 to 178 there is: 



if the parameter `includeBody` is true it will consume the S3 stream into the memory which is no ideal for large files.
if the parameter `includeBody` is false it won't consume the S3 stream however the S3 stream will be lost, I couldn't find any other way to access it therefore the S3 is open for nothing on this case. This doesn't seem reasonable as well. I think the S3 stream should be put in the `body` raw so the next component in the pipeline can consume it.



The logic on lines 201 to 212 is:



if the parameter `includeBody` is false it surprisingly close the S3 input stream confirming that there will be no way to consume it afterwards.
if the parameter `includeBody` is true the S3 input stream will be left open however there is way to access it as it is created on line 77 of `org.apache.camel.component.aws2.s3.AWS2S3Consumer` and afterwards if not included in the body it get lost.



The ideal behaviour I think would be:



if `includedBody` is true then consume S3 input stream into the memory, save it in the body and close it.
if `includeBody` is false then put the raw S3 input stream in the body and don't close it.
if `autoCloseBody` is true then schedule the S3 input stream closing for when exchange is finished.
if `autoCloseBody` is false then leave to caller to close it which I'm not sure how this can be done in the current implementation.","acosentino:1587195805:2020-04-18T15:43:25.485+0000:1587195805:2020-04-18T15:43:25.485+0000:This was a porting of aws-s3 component. There is documentation about includeBody and autocloseBody and their usage. I don't totally remember, but I'll take a look
mranderson:1587196544:2020-04-18T15:55:44.476+0000:1587196544:2020-04-18T15:55:44.476+0000:[~acosentino] if the link of the code below is the one that you are referring to then seems that in the old version the behaviour was the same.

[https://github.com/apache/camel/blob/bf375d75e1c28b4e047c6c767312b23ef1c8b14c/components/camel-aws-s3/src/main/java/org/apache/camel/component/aws/s3/S3Endpoint.java#L159]
acosentino:1587198703:2020-04-18T16:31:43.985+0000:1587198703:2020-04-18T16:31:43.985+0000:Yes, exactly. In the documentation it is stated that in case includeBody is false, the body will be null. By the way, we can add the raw S3 object and leave the autocloseBody behavior as is. I'll take care of this.
mranderson:1587203706:2020-04-18T17:55:06.510+0000:1587203768:2020-04-18T17:56:08.501+0000:Yes, this is exactly what I would expect from such component. I made a monkey patch on my environment and it worked well when I had to stream get the object from S3 and save it to a local file. Essentially is only 2 lines that needs to be changed. Lines 177 and 201.
acosentino:1587205505:2020-04-18T18:25:05.545+0000:1587205505:2020-04-18T18:25:05.545+0000:You're welcome to submit a pull request if you want
mranderson:1587205674:2020-04-18T18:27:54.466+0000:1587205923:2020-04-18T18:32:03.486+0000:I will be really glad in do that but I'm having difficulties in build apache-camel locally to I can proper test it and if necessary write tests for it. 

There is any README or similar with the requirements on how to build apache-camel projects for development?
 I'm getting this error trying to build it with Java 11 (openjdk)

 
{code:java}
Execution generate of goal org.apache.camel:camel-package-maven-plugin:3.3.0-SNAPSHOT:generate failed: An API incompatibility was encountered while executing org.apache.camel:camel-package-maven-plugin:3.3.0-SNAPSHOT:generate: java.lang.VerifyError: (class: ASMAccessorImpl_52219405015872224745234, method: getKnownEgressType signature: ()Ljava/lang/Class Illegal type in constant pool


 
{code}
I know that this is not the place if you want we can move this talk to Gitter.

 
acosentino:1587208358:2020-04-18T19:12:38.034+0000:1587208358:2020-04-18T19:12:38.034+0000:I cannot reproduce the error actually. For the contribution docs we have this: [https://camel.apache.org/manual/latest/contributing.html]

Anyway, I'll be available on gitter next week :)
acosentino:1587339306:2020-04-20T07:35:06.175+0000:1587339306:2020-04-20T07:35:06.175+0000:[~mranderson] were you able to build?
mranderson:1587342085:2020-04-20T08:21:25.265+0000:1587342085:2020-04-20T08:21:25.265+0000:[~acosentino] I couldn't work on that yesterday. I will try in the next hours and let you know.
mranderson:1587389049:2020-04-20T21:24:09.457+0000:1587389049:2020-04-20T21:24:09.457+0000:[~acosentino], sorry, busy day, anyway I was able to build. I will prepare the fix and submit it. Should I do it for both clients aws-s3 and aws2-s3?
acosentino:1587389663:2020-04-20T21:34:23.357+0000:1587389663:2020-04-20T21:34:23.357+0000:Hey, I'd say only for aws2, because it's under heavy development. Thanks!
acosentino:1596060553:2020-07-30T06:09:13.662+0000:1596060553:2020-07-30T06:09:13.662+0000:[~mranderson] are you still on this stuff?
mranderson:1596180970:2020-07-31T15:36:10.829+0000:1596180970:2020-07-31T15:36:10.829+0000:Hi @Andrea Consentino, I lost track of this due my project demands, I will work to provide a PR this weekend if that is fine for you?
acosentino:1596182682:2020-07-31T16:04:42.964+0000:1596182682:2020-07-31T16:04:42.964+0000:Sounds good. Thanks.
mranderson:1600731385:2020-09-22T07:36:25.840+0000:1600731385:2020-09-22T07:36:25.840+0000:Hi [~acosentino], sorry for the huge delay. I just opened the PR [4274|https://github.com/apache/camel/pull/4274] with the changes to address this issue.
acosentino:1602210512:2020-10-09T10:28:32.864+0000:1602210512:2020-10-09T10:28:32.864+0000:[~mranderson] are you able to add tests to the PR?
mranderson:1602319543:2020-10-10T16:45:43.941+0000:1602319543:2020-10-10T16:45:43.941+0000:[~acosentino] I just pushed the tests and explained the approach in a github PR comment."
0,CAMEL-14928,Bug,Minor,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,James Netherton,0,2,2020-04-17 14:14:35+00:00,2020-05-05 08:47:59+00:00,"If I set properties:


camel.component.box.authenticationType = STANDARD_AUTHENTICATION
camel.component.box.userName = user
camel.component.box.userPassword = password
camel.component.box.clientId = foo
camel.component.box.clientSecret = bar


I get exception:


Caused by: java.lang.IllegalArgumentException: Unable to connect, Box component configuration is missing
	at org.apache.camel.component.box.BoxComponent.doStart(BoxComponent.java:92)


I wonder if this should call getConfiguration() instead of referencing the @Metadata annotated configuration field?","davsclaus:1588639626:2020-05-05T08:47:06.570+0000:1588639626:2020-05-05T08:47:06.570+0000:Yeah that was wrong, fixing"
0,CAMEL-14927,Bug,Major,3.2.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Claus Ibsen,Jean-Baptiste Onofré,0,5,2020-04-17 11:36:10+00:00,2020-05-15 05:02:43+00:00,"camel-salesforce component doesn't work in 3.2.0 release.


A NPE can happen in the SalesforceComponent (line 260) as httpClient is not initialized.","jeremyross:1589141227:2020-05-11T04:07:07.113+0000:1589141240:2020-05-11T04:07:20.848+0000:[~davsclaus] I'm still seeing this in 3.3.0-SNAPSHOT, which I think may be the same as this issue. [^camel-stacktrace.txt]
davsclaus:1589177093:2020-05-11T14:04:53.461+0000:1589177093:2020-05-11T14:04:53.461+0000:Ah thanks, can you try 3.4.0-SNAPSHOT just pushed some fixes
jeremyross:1589177973:2020-05-11T14:19:33.813+0000:1589177973:2020-05-11T14:19:33.813+0000:[~davsclaus] I'm not seeing 3.4.0-SNAPSHOT in the snapshot repo or git. 
acosentino:1589178101:2020-05-11T14:21:41.469+0000:1589178101:2020-05-11T14:21:41.469+0000:It's not moved to 3.4.0-SNAPSHOT, until we release 3.3.0 officialy
jeremyross:1589178854:2020-05-11T14:34:14.016+0000:1589178854:2020-05-11T14:34:14.016+0000:[~davsclaus] I'm building the salesforce component from master and, as of last night, I'm still getting this exception. 
davsclaus:1589179357:2020-05-11T14:42:37.309+0000:1589179357:2020-05-11T14:42:37.309+0000:You can also build from source locally
jeremyross:1589179660:2020-05-11T14:47:40.731+0000:1589179660:2020-05-11T14:47:40.731+0000:[~davsclaus] I am building locally. That's what I meant when I said I'm building the salesforce component from master (branch). Should this be sufficient to get the fix? Or do I need to build more than the salesforce component?
davsclaus:1589179852:2020-05-11T14:50:52.721+0000:1589179852:2020-05-11T14:50:52.721+0000:I would built it all, or at least the core JARs also.
jeremyross:1589278739:2020-05-12T18:18:59.850+0000:1589278739:2020-05-12T18:18:59.850+0000:[~davsclaus] Fix looks good. Any chance this can make it in 3.3.0?
davsclaus:1589278964:2020-05-12T18:22:44.364+0000:1589278964:2020-05-12T18:22:44.364+0000:Thanks for testing, now 3.3 is not a LTS release so not patches, wait for 3.4.0 to be released next month"
0,CAMEL-14896,Sub-task,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,David Jencks,David Jencks,0,1,2020-04-14 21:23:50+00:00,2020-04-15 01:32:18+00:00,camel website PR,
0,CAMEL-14895,Bug,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Zoran Regvart,Andrea Cosentino,0,2,2020-04-14 16:00:32+00:00,2020-04-14 19:27:27+00:00,"error: antora.yml not found in https://github.com/apache/camel.git [ref: remotes/origin/master]


https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel.website/job/master/72/console","djencks:1586851593:2020-04-14T16:06:33.256+0000:1586851593:2020-04-14T16:06:33.256+0000:This is caused by the xref processor not understanding recent playbook syntax.  Dan did something to make the xref processor relate better to recent Antora code, but it's not working for me, or apparently, the automated build.  There are other problems with the xref processor as well, hopefully I can get this straightened out quickly.
acosentino:1586862616:2020-04-14T19:10:16.455+0000:1586862616:2020-04-14T19:10:16.455+0000:This has been fixed by Zoran
djencks:1586863038:2020-04-14T19:17:18.862+0000:1586863038:2020-04-14T19:17:18.862+0000:How? Where's the link to the change?
djencks:1586863138:2020-04-14T19:18:58.323+0000:1586863138:2020-04-14T19:18:58.323+0000:Please indicate what the change is.
acosentino:1586863227:2020-04-14T19:20:27.482+0000:1586863227:2020-04-14T19:20:27.482+0000:https://github.com/apache/camel-website/commit/b5e9327046d08108a9e637ece40b6c0ee0839a2f
djencks:1586863473:2020-04-14T19:24:33.011+0000:1586863473:2020-04-14T19:24:33.011+0000:Great, thanks!
djencks:1586863647:2020-04-14T19:27:27.189+0000:1586863647:2020-04-14T19:27:27.189+0000:BTW, I get ""NPE"" exceptions from xref-validator unless I modify the code, I wonder why you don't.

I had to change lines 9-11 in generate-report.js to

    if (originData.editUrlPattern) {
      origin = [
        `worktree: ${originData.editUrlPattern.slice(7, originData.editUrlPattern.length - 3)}`,

which is wrong but works."
0,CAMEL-14894,Task,Major,None,None,"
None
",Closed,Won't Fix,None,Jean-Baptiste Onofré,Omar Al-Safi,0,3,2020-04-14 13:06:25+00:00,2020-04-14 13:14:12+00:00,Per: https://mvnrepository.com/artifact/com.azure/azure-storage-blob/12.4.0,"acosentino:1586840883:2020-04-14T13:08:03.754+0000:1586840883:2020-04-14T13:08:03.754+0000:This should go under the Jira for bundles, originally it was for SMX, but now it should be under Karaf
omarsmak:1586841017:2020-04-14T13:10:17.243+0000:1586841017:2020-04-14T13:10:17.243+0000:Oh crap, sorry didn't notice it :D 
omarsmak:1586841085:2020-04-14T13:11:25.692+0000:1586841085:2020-04-14T13:11:25.692+0000:Created in the wrong project by mistake
jbonofre:1586841167:2020-04-14T13:12:47.783+0000:1586841167:2020-04-14T13:12:47.783+0000:No problem, please create at SMX or I can do it if needed.
omarsmak:1586841252:2020-04-14T13:14:12.865+0000:1586841252:2020-04-14T13:14:12.865+0000:Done https://issues.apache.org/jira/browse/SM-4350"
0,CAMEL-14893,Improvement,Minor,3.2.0,"3.3.0, 2.25.2","
None
",Resolved,Fixed,"3.3.0, 2.25.2",Dmitry Volodin,"son, kyoungduk",0,2,2020-04-14 12:15:44+00:00,2020-04-15 07:16:29+00:00,"If the processor associated with the grpc endpoint throws an exception, the caller will not receive an exception response.
 When an exception is thrown by the processor, the exception message is returned to the caller using onError.","dmvolod:1586838356:2020-04-14T12:25:56.992+0000:1586838356:2020-04-14T12:25:56.992+0000:Thanks, [~kyoungduk]

I will also add a test case for this issue.
dmvolod:1586843094:2020-04-14T13:44:54.531+0000:1586843094:2020-04-14T13:44:54.531+0000:Also note, that this occurs only in in synchronous mode.
dmvolod:1586852855:2020-04-14T16:27:35.956+0000:1586852855:2020-04-14T16:27:35.956+0000:Thanks, [~kyoungduk]

Fixed
kyoungduk:1586873374:2020-04-14T22:09:34.827+0000:1586873374:2020-04-14T22:09:34.827+0000:Thanks, Dmitry Volodin."
0,CAMEL-14892,Improvement,Minor,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-04-14 09:14:37+00:00,2021-08-26 09:32:48+00:00,"There are 2 deprecated calls:



https://github.com/apache/camel/blob/master/components/camel-influxdb/src/main/java/org/apache/camel/component/influxdb/InfluxDbProducer.java#L79
https://github.com/apache/camel/blob/master/components/camel-influxdb/src/main/java/org/apache/camel/component/influxdb/InfluxDbProducer.java#L81



Both calls should be refactored to correct ones.",
0,CAMEL-14891,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Arian Treffer,0,2,2020-04-14 07:31:38+00:00,2023-12-13 10:09:35+00:00,"I'm not sure which components are affected by this. I noticed this with the metrics component but it might be a general issue. Consider these two stack traces:


 


{{""Camel (camel-1) thread #7 - my-thread-1""}}
{{ {{ at org.apache.camel.component.metrics.MetricsComponent.doInit(MetricsComponent.java:137)}}}}
{{ {{ at org.apache.camel.support.service.BaseService.init(BaseService.java:83)}}}}
{{ {{ at org.apache.camel.support.service.BaseService.start(BaseService.java:111)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.startService(AbstractCamelContext.java:3056)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:537)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:500)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:831)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:769)}}}}
{{ {{ at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:72)}}}}
{{ {{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:114)}}}}
{{ {{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:92)}}}}
{{ {{ at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:289)}}}}
{{ {{ at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:157)}}}}
{{ {{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)}}}}
{{ {{ at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)}}}}
{{ {{ at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55)}}}}
{{ {{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398)}}}}
{{ {{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask$$Lambda$742.2026232778.done}}}}
{{ {{ at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:88)}}}}
{{ {{ at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)}}}}
{{ {{ at java.util.concurrent.FutureTask.run(FutureTask.java:266)}}}}
{{ {{ at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)}}}}
{{ {{ at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)}}}}
{{ {{ at java.lang.Thread.run(Thread.java:748)}}}}{{""Camel (camel-1) thread #8 - my-thread-2""}}
{{ {{ at org.apache.camel.component.metrics.MetricsComponent.createEndpoint(MetricsComponent.java:60)}}}}
{{ {{ at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:233)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.doGetEndpoint(AbstractCamelContext.java:842)}}}}
{{ {{ at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:769)}}}}
{{ {{ at org.apache.camel.support.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:72)}}}}
{{ {{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:114)}}}}
{{ {{ at org.apache.camel.support.ExchangeHelper.resolveEndpoint(ExchangeHelper.java:92)}}}}
{{ {{ at org.apache.camel.processor.SendDynamicProcessor.resolveEndpoint(SendDynamicProcessor.java:289)}}}}
{{ {{ at org.apache.camel.processor.SendDynamicProcessor.process(SendDynamicProcessor.java:157)}}}}
{{ {{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:395)}}}}
{{ {{ at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)}}}}
{{ {{ at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:55)}}}}
{{ {{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.lambda$run$0(RedeliveryErrorHandler.java:398)}}}}
{{ {{ at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask$$Lambda$742.2026232778.done}}}}
{{ {{ at org.apache.camel.processor.ThreadsProcessor$ProcessCall.run(ThreadsProcessor.java:88)}}}}
{{ {{ at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)}}}}
{{ {{ at java.util.concurrent.FutureTask.run(FutureTask.java:266)}}}}
{{ {{ at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)}}}}
{{ {{ at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)}}}}
{{ {{ at java.lang.Thread.run(Thread.java:748)}}}}


 


As you can see, thread #8 tries to create an endpoint from the metrics component while thread #7 is still initializing it. This causes endpoinds to be created from uninitialized components.


 


Both threads are working on the same node in the same route, which is defined using the DSL:


.toD(""metrics:counter:request.${headers.product}-xcount?increment=1"")",davsclaus:1586912040:2020-04-15T08:54:00.608+0000:1586912040:2020-04-15T08:54:00.608+0000:Ah yeah we can initialize the component as part of toD initialization. 
0,CAMEL-14890,Task,Minor,None,,"
None
",Resolved,Information Provided,None,Unassigned,David Jencks,0,2,2020-04-13 21:39:49+00:00,2022-06-24 13:32:37+00:00,"The properties component is highly anomalous among camel components.



is it really only present since camel 2.3?
Does the code need to be in core or could it actually be moved into components?
The description indicates it isn't really a component.  What is it? Data format? Language? Miscellaneous?  Lets move the main page to the correct category and, if appropriate, add a stub page in the current location indicating it's moved.","davsclaus:1586810983:2020-04-14T04:49:43.531+0000:1586810983:2020-04-14T04:49:43.531+0000:1) yes
2) yes its merged into core in 3.x onwards, and need to be as-is
3) its for property placeholders - in 2.x it could also be used as a regular camel component but that was not frequently used and hence that was removed in 3.x

"
0,CAMEL-14889,Task,Minor,None,,"
None
",Resolved,Information Provided,None,Unassigned,David Jencks,0,2,2020-04-13 21:33:30+00:00,2022-09-02 15:05:54+00:00,"I believe the camel-elytron component needs some attention.  It appears to be actually a component, but the java source has no annotations, there is no json file describing it, and none of the .adoc file is generated.  The text also appears somewhat self contradictory to me.


If all is correct about the current documentation, perhaps a note should be included indicating that it does not participate in normal component documentation generation.","davsclaus:1662102354:2022-09-02T15:05:54.247+0000:1662102354:2022-09-02T15:05:54.247+0000:we have a mix of regular components and misc in components folder, that is normal"
0,CAMEL-14888,Bug,Major,3.2.0,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Catalin Alexandru Zamfir,0,2,2020-04-13 11:42:43+00:00,2020-12-22 08:46:47+00:00,"Update: when putting ""concurrentConsumers"" as part of the ""from"" string, the issue below doesn't manifest itself It seems to only manifest when the concurrent-consumers Camel/Spring properly is inside tha application.yaml file. Bug? Feature? The way things should be? The issue is resolved for us, we're don't mind specifying the options as part of the ""from"" string, but it seems an inconsistent/weird behavior between the two ways of declaring the options.


Original:


We are starting an AWS2-SQS route and enabling it every 30m using the controlbus component. We have set aws2-sqs concurrent consumers to 16. We have about 200 S3 events to the SQS queue every 10m.


When we don't have the controlbus component route active, the AWS2 SQS route starts with 16 consumers and immediately (in a couple of seconds) consumes the entire queue even if we have thousands of events there. This was our default way of working until deciding to introduce a 30m wait between consumption.


When we put the controlbus component performance degrades and consumption from SQS seems to be done via one thread (one consumer) taking minutes for just 200 events.


We have the camel aws-sqs configuration in application.yml in Spring (as I write this, trying to put it on the ""from"" string).




camel:
  component:
    aws2-sqs:
      configuration:
        concurrent-consumers: 16","davsclaus:1586815829:2020-04-14T06:10:29.231+0000:1586815845:2020-04-14T06:10:45.013+0000:Can you post more details of your Camel route etc with the aws-sqs and the controlbus you use to control it.

Also mind that the option in SB Camel 3.2.0 is camel.component.aws2-sqs.concurrent-consumers

https://github.com/apache/camel-spring-boot/blob/camel-spring-boot-3.2.0/components-starter/camel-aws2-sqs-starter/src/main/docs/aws2-sqs-starter.adoc

davsclaus:1592543867:2020-06-19T13:17:47.347+0000:1592543867:2020-06-19T13:17:47.347+0000:Can you try with 3.4.0 release"
0,CAMEL-14887,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-13 09:01:55+00:00,2020-04-15 08:21:15+00:00,Lets move it to components as its not core.,
0,CAMEL-14886,Improvement,Major,None,3.4.0,"
None
",Closed,Fixed,3.4.0,Omar Al-Safi,Claus Ibsen,0,2,2020-04-13 07:58:32+00:00,2020-06-09 16:12:20+00:00,"The camel-maven-package-plugin has grown big and is mainly used for building Camel internally.


We should add a new maven plugin that are for end users, and let it reuse the goals of the camel-package-maven-plugin it needs


This is currently what ""generate-component"" does. But maybe give it better names and allow to chose what to generate



3rd party component, data format, converters etc
end user application (type converts, configurers, etc.)



And then have 2 goals, one for custom components et all, and another for applications.","davsclaus:1590555859:2020-05-27T13:04:19.696+0000:1590555859:2020-05-27T13:04:19.696+0000:JB sorry this is not Karaf releated, there was a mistake on the dev mailing list, so I am unsasigning you.
omarsmak:1590624456:2020-05-28T08:07:36.222+0000:1590624456:2020-05-28T08:07:36.222+0000:Then I will just ship in to help here :) "
0,CAMEL-14885,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-13 07:41:06+00:00,2020-04-28 12:32:07+00:00,"When configuring via camel-main in application.properties then names are aligned to lowercase and removed dashes etc. And also to ensure ENV variables can override as they are in not mixed case.


So lets look at if we can resolve the mixed case key name too, as that would be better to use for @BindToRegistry - eg myBean -> myBean instead of myBean -> mybean","davsclaus:1588048250:2020-04-28T12:30:50.795+0000:1588048250:2020-04-28T12:30:50.795+0000:We now preserve cases, and have dash to camel case for keys, and ignore cases - this is a bit more intuitive and the summary logged will also show the keys with camel case named, instead of all lower cased"
0,CAMEL-14884,Wish,Minor,2.21.0,,"
None
",Resolved,Invalid,None,Unassigned,Ashenp,0,2,2020-04-12 12:21:28+00:00,2020-04-12 13:15:44+00:00,"Recently I've make a camel-smb to help my camel app support SMB3 protocol, It just works fine. But I found I can only keep main thread keep waiting manually,  the official component camel-ftp just doesn't need that.
Curiously ask:  Can any interface  in camel-core or camel-spi help me to do this? Or is there some strategy config that I've missed?","acosentino:1586668517:2020-04-12T13:15:17.403+0000:1586668517:2020-04-12T13:15:17.403+0000:Please ask on the user mailing list or on the dev mailing list.
acosentino:1586668544:2020-04-12T13:15:44.592+0000:1586668544:2020-04-12T13:15:44.592+0000:Also camel-smb is a component from camel-extra."
0,CAMEL-14883,Improvement,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Eickvonder,0,1,2020-04-12 00:08:04+00:00,2020-04-14 06:06:49+00:00,"The CamelBeanPostProcessor does not implement the Ordered interface provided by Spring.


According to Spring documentation it is recommended to do so:


https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-factory-extension-bpp
If you write your own BeanPostProcessor, you should consider implementing the Ordered interface, too



And not doing so may break certain things (see e.g. https://github.com/spring-projects/spring-framework/issues/24058) but Spring guys won't fix that to keep backwards-compatibility. So I would suggest to let the CamelBeanPostProcessor implement the Ordered interface, e.g. with lowest priority or with configurable priority. The actual value is irrelevant, the issue described in https://github.com/spring-projects/spring-framework/issues/24058 only occurs if a post processor exists that does not implement the ordered interface.",eicki:1586625726:2020-04-12T01:22:06.840+0000:1586625726:2020-04-12T01:22:06.840+0000:Pull Request: https://github.com/apache/camel/pull/3731
0,CAMEL-14882,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-11 08:15:35+00:00,2020-04-15 10:59:30+00:00,"We can expose the options for thread pool profile and make them more easier to configure via camel-main / camel-spring-boot.


Then you can for example lower the queue size from 1000 to something smaller etc.","davsclaus:1586919395:2020-04-15T10:56:35.047+0000:1586919395:2020-04-15T10:56:35.047+0000:You can now configure this ala

        main.addProperty(""camel.threadpool[myPool].id"", ""myPool"");
        main.addProperty(""camel.threadpool[myPool].pool-size"", ""1"");
        main.addProperty(""camel.threadpool[myPool].max-pool-size"", ""2"");
        main.addProperty(""camel.threadpool[myPool].rejectedPolicy"", ""DiscardOldest"");

davsclaus:1586919562:2020-04-15T10:59:22.511+0000:1586919562:2020-04-15T10:59:22.511+0000:And to set the default, then use [default] as the key name."
0,CAMEL-14881,Improvement,Minor,None,,"

help-wanted

",Resolved,Fixed,None,David Jencks,Dmitry Volodin,1,3,2020-04-10 07:54:11+00:00,2020-04-15 09:20:02+00:00,"Adding following comment on the top of the all auto-generated adoc files inside docs/components to notate users don't edit this files


// AUTOGENERATED, PLEASE DON'T EDIT THIS FILE!!!","arunmannuru:1586692191:2020-04-12T19:49:51.698+0000:1586692191:2020-04-12T19:49:51.698+0000:[~dmvolod] Can I work on this task ?
dmvolod:1586730293:2020-04-13T06:24:53.386+0000:1586730293:2020-04-13T06:24:53.386+0000:[~arunmannuru], yes, sure, but would be nice to hear other opinions related to this case.

[~zregvart], [~djencks] what do you think about it?
djencks:1586730961:2020-04-13T06:36:01.941+0000:1586730961:2020-04-13T06:36:01.941+0000:It’s considerably more complicated than that. Large parts of the files are not auto generated, mostly some tables are. They are already bounded by some pretty obvious delimiters. I don’t think adding more warnings has a lot of value. 
dmvolod:1586731313:2020-04-13T06:41:53.051+0000:1586731313:2020-04-13T06:41:53.051+0000:[~djencks], I  know that original docs not auto-generated at all, but I was taking about files in docs/components which are copied from the components itself. Many people tried to edit them and on the next Regen stage they are rewriting from the origin.
djencks:1586761174:2020-04-13T14:59:34.177+0000:1586761174:2020-04-13T14:59:34.177+0000:Ah, so you're proposing to do something like modifying this code in gulpfile.js?
```
function insertSourceAttribute() {
    return replace(/^= .+/m, function(match) {
        return `${match}\n//THIS FILE IS COPIED: EDIT THE SOURCE FILE:\n:page-source: ${path.relative('..', this.file.path)}`;
    });
}
```

I'm OK with that.
dmvolod:1586814803:2020-04-14T05:53:23.147+0000:1586814803:2020-04-14T05:53:23.147+0000:Yes, [~djencks] , sure.
djencks:1586888112:2020-04-15T02:15:12.089+0000:1586888112:2020-04-15T02:15:12.089+0000:This didn't quite fit in CAMEL-14874 but I had the changes ready so made some PRs.  What do you think?  Rewording would be pretty easy.
dmvolod:1586906940:2020-04-15T07:29:00.576+0000:1586907007:2020-04-15T07:30:07.361+0000:Yes, agree with you, [~djencks]

Thanks a lot. But would be nice to have an original task name in sub-tasks"
0,CAMEL-14880,New Feature,Minor,3.2.0,None,"
None
",Open,Unresolved,4.x,Unassigned,Alex Dettinger,0,3,2020-04-09 17:27:50+00:00,2023-12-25 18:51:14+00:00,"As per the context of CAMEL-14822, the camel-couchdb component is exposed to the de-facto end of life of the underlying couchdb library. As such, camel currently offers no support to couchdb 3.x.


A way of dealing with such situation would be to create a camel-couchdb3 component on top of java-cloudant.","arcadius:1653308632:2022-05-23T20:23:52.059+0000:1653308982:2022-05-23T20:29:42.854+0000:Just to mention that there is a drop-in replacement for lightcouch

[https://github.com/IndabaConsultores/LightCouch]

 

I used it with camel 2.25.4  and

couchdb v. 2.3.0 and v. 3.2.2

 and it seems to be working for me
{code:java}
 implementation(""org.apache.camel:camel-couchdb:${camelVersion}"") {
    exclude group: 'org.lightcouch', module: 'lightcouch'
}
implementation(""com.github.IndabaConsultores:lightCouch:0.3.0""){code}
davsclaus:1653349970:2022-05-24T07:52:50.342+0000:1653349970:2022-05-24T07:52:50.342+0000:Thanks for sharing this - the new implementation is not released to maven central, but jitpack only
davsclaus:1662101906:2022-09-02T14:58:26.368+0000:1662101906:2022-09-02T14:58:26.368+0000:Is it released to maven central
arcadius:1662513851:2022-09-07T09:24:11.689+0000:1662513851:2022-09-07T09:24:11.689+0000:Hello [~davsclaus] .

It's not yet released :(

There is an ongoing discussion on the topic at 

[https://github.com/lightcouch/LightCouch/issues/80]

 

Feel free to comment there as well.

 

Hopefully, we will get this issue resolved soon
davsclaus:1703501395:2023-12-25T18:49:55.727+0000:1703501395:2023-12-25T18:49:55.727+0000:IBM is maintaining a client library at
https://github.com/IBM/cloudant-java-sdk
davsclaus:1703501474:2023-12-25T18:51:14.077+0000:1703501474:2023-12-25T18:51:14.077+0000:We should migrate the existing component as the client library it uses is EOL"
0,CAMEL-14879,Task,Minor,None,None,"

help-wanted

",Resolved,Fixed,3.3.0,Andrea Cosentino,Claus Ibsen,0,1,2020-04-09 09:15:16+00:00,2020-04-15 11:16:39+00:00,"11:02:38  asciidoctor: WARNING: djl-component.adoc: line 56: section title out of sequence: expected level 1, got level 2
11:02:38  asciidoctor: WARNING: djl-component.adoc: line 66: section title out of sequence: expected level 1, got level 2
11:02:38  asciidoctor: WARNING: djl-component.adoc: line 82: section title out of sequence: expected level 1, got level 2
11:02:38  asciidoctor: WARNING: djl-component.adoc: line 108: section title out of sequence: expected level 1, got level 2
11:02:38  asciidoctor: WARNING: djl-component.adoc: line 177: section title out of sequence: expected level 1, got level 2",
0,CAMEL-14878,Improvement,Major,3.2.0,3.4.0,"
None
",Resolved,Fixed,3.4.0,Guillaume Nodet,Guillaume Nodet,0,3,2020-04-09 08:09:38+00:00,2020-05-29 06:01:18+00:00,"This would allow to use a specific syntax which has been removed in 3.2.0, such as 3s instead of 3000.   There are also cases where a pair of properties is used (duration / unit) which could be simplified to a single java.time.Duration.","chardahe@redhat.com:1586391141:2020-04-09T08:12:21.870+0000:1586391141:2020-04-09T08:12:21.870+0000:May I work on this issue?
gnodet:1586909461:2020-04-15T08:11:01.746+0000:1586909582:2020-04-15T08:13:02.992+0000:[~chardahe@redhat.com] sure, please do.

Note that the endpoint dsl may need to be improved if we want to keep some level of compatibility so that properties of type {{Duration}} will be exposed as {{Duration}}, {{long}} or {{String}} instead of just {{Duration}} and {{String}} (which will happen when switching the type from {{long}} to {{Duration}}).
davsclaus:1590187444:2020-05-23T06:44:04.334+0000:1590187444:2020-05-23T06:44:04.334+0000:Not fully complete yet. time and mock endpoints are using long types for their values.

We could also have the generator configurer via @Metadata that the option supports configuring long values with this style and have its own converter - then we dont use the runtime type converter for String -> long.

And then dont need to change option to Duration but can just markup those via @Metdata(xxx = true) where xxx is some new name - for example timePattern true|false
davsclaus:1590187503:2020-05-23T06:45:03.504+0000:1590187503:2020-05-23T06:45:03.504+0000:Added PR with unit test that should pass when this is implemented
https://github.com/apache/camel/commit/702dad5d94c64ad299f12f6f460a43d942c1fb19
davsclaus:1590187599:2020-05-23T06:46:39.102+0000:1590187599:2020-05-23T06:46:39.102+0000:Also there are tests i camel-jgroups that fail that uses 5m syntax
davsclaus:1590536654:2020-05-27T07:44:14.163+0000:1590536654:2020-05-27T07:44:14.163+0000:Okay have a solution via the configurers so they can deal with this. That is great as then we dont overhead the runtime type converters, but do this at configuration/build time.
davsclaus:1590540161:2020-05-27T08:42:41.074+0000:1590540161:2020-05-27T08:42:41.074+0000:Okay the configurer now handles the long/int values for the components which many are using. Not many 3rd party are using long + TimeUnit combo or Duration objects.
gnodet:1590617542:2020-05-28T06:12:22.647+0000:1590617542:2020-05-28T06:12:22.647+0000:Sorry, I missed your earlier comments a few days ago.  I think the way to fix the problem is not to change the {{PropertyConfigurerSupport}} to always convert {{1s}} to {{1000}} but to add the information to the {{@UriPath}} with {{javaType = ""java.time.Duration""}} and change the generation of the property configurers accordingly.  The benefits would be a bit less magic, the fact that the metamodel contains this information so that tooling can choose to help with the syntax.
davsclaus:1590620217:2020-05-28T06:56:57.676+0000:1590620217:2020-05-28T06:56:57.676+0000:Yeah sure can you create a new ticket for that.
davsclaus:1590620855:2020-05-28T07:07:35.742+0000:1590620855:2020-05-28T07:07:35.742+0000:And btw having to markup in the uriparam / metadata on component requires to find 100% of them, and there are a lot of options. So until then we need the old behavior too with string -> long/int converter via configurer"
0,CAMEL-14877,Bug,Minor,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Andrea Cosentino,0,1,2020-04-09 07:56:35+00:00,2020-04-10 07:54:10+00:00,"[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT
SLF4J: Failed to load class ""org.slf4j.impl.StaticLoggerBinder"".
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
	Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
	Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/Component
		at org.apache.camel.core.osgi.impl.Activator.registerComponents(Activator.java:205)
		at org.apache.camel.core.osgi.impl.Activator.addingBundle(Activator.java:141)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:469)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:415)
		at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
		at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
		at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
		at org.apache.camel.core.osgi.impl.Activator.start(Activator.java:106)
		at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.Component not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 22 more
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/RoutesBuilder
		at java.lang.Class.getDeclaredConstructors0(Native Method)
		at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
		at java.lang.Class.getConstructor0(Class.java:3075)
		at java.lang.Class.newInstance(Class.java:412)
		at org.apache.felix.framework.Felix.createBundleActivator(Felix.java:4512)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2221)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 18 more
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
	Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
	Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/Component
		at org.apache.camel.core.osgi.impl.Activator.registerComponents(Activator.java:205)
		at org.apache.camel.core.osgi.impl.Activator.addingBundle(Activator.java:141)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:469)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:415)
		at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
		at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
		at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
		at org.apache.camel.core.osgi.impl.Activator.start(Activator.java:106)
		at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.Component not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 22 more
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/RoutesBuilder
		at java.lang.Class.getDeclaredConstructors0(Native Method)
		at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
		at java.lang.Class.getConstructor0(Class.java:3075)
		at java.lang.Class.newInstance(Class.java:412)
		at org.apache.felix.framework.Felix.createBundleActivator(Felix.java:4512)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2221)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 18 more
org.apache.karaf.features.internal.util.MultiException: Error restarting bundles:
	Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
	Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
	at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1044)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062)
	at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-core-osgi [25].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/Component
		at org.apache.camel.core.osgi.impl.Activator.registerComponents(Activator.java:205)
		at org.apache.camel.core.osgi.impl.Activator.addingBundle(Activator.java:141)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:469)
		at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:415)
		at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
		at org.osgi.util.tracker.AbstractTracked.trackInitial(AbstractTracked.java:183)
		at org.osgi.util.tracker.BundleTracker.open(BundleTracker.java:156)
		at org.apache.camel.core.osgi.impl.Activator.start(Activator.java:106)
		at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:697)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2240)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.Component not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 22 more
	Suppressed: org.osgi.framework.BundleException: Activator start error in bundle org.apache.camel.karaf.camel-osgi-activator [26].
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2290)
		at org.apache.felix.framework.Felix.startBundle(Felix.java:2146)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998)
		at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:984)
		at org.apache.karaf.features.internal.service.BundleInstallSupportImpl.startBundle(BundleInstallSupportImpl.java:165)
		at org.apache.karaf.features.internal.service.FeaturesServiceImpl.startBundle(FeaturesServiceImpl.java:1153)
		at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:1036)
		... 6 more
	Caused by: java.lang.NoClassDefFoundError: org/apache/camel/RoutesBuilder
		at java.lang.Class.getDeclaredConstructors0(Native Method)
		at java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)
		at java.lang.Class.getConstructor0(Class.java:3075)
		at java.lang.Class.newInstance(Class.java:412)
		at org.apache.felix.framework.Felix.createBundleActivator(Felix.java:4512)
		at org.apache.felix.framework.Felix.activateBundle(Felix.java:2221)
		... 12 more
	Caused by: java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1639)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		at org.apache.felix.framework.BundleWiringImpl.getClassByDelegation(BundleWiringImpl.java:1414)
		at org.apache.felix.framework.BundleWiringImpl.searchImports(BundleWiringImpl.java:1660)
		at org.apache.felix.framework.BundleWiringImpl.findClassOrResourceByDelegation(BundleWiringImpl.java:1590)
		at org.apache.felix.framework.BundleWiringImpl.access$200(BundleWiringImpl.java:80)
		at org.apache.felix.framework.BundleWiringImpl$BundleClassLoader.loadClass(BundleWiringImpl.java:2053)
		at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
		... 18 more
[ERROR] Tests run: 9, Failures: 3, Errors: 6, Skipped: 0, Time elapsed: 18.538 s <<< FAILURE! - in org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved  Time elapsed: 0.05 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.CamelContext not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved(CamelOsgiActivatorIT.java:124)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded  Time elapsed: 0.004 s  <<< FAILURE!
java.lang.AssertionError: Camel Core OSGi not activated expected:<32> but was:<4>
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded(CamelOsgiActivatorIT.java:80)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved  Time elapsed: 0.007 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved(CamelOsgiActivatorIT.java:95)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved  Time elapsed: 0.053 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.CamelContext not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved(CamelOsgiActivatorIT.java:124)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded  Time elapsed: 0.007 s  <<< FAILURE!
java.lang.AssertionError: Camel Core OSGi not activated expected:<32> but was:<4>
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded(CamelOsgiActivatorIT.java:80)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved  Time elapsed: 0.011 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved(CamelOsgiActivatorIT.java:95)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved  Time elapsed: 0.072 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.CamelContext not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved(CamelOsgiActivatorIT.java:124)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded  Time elapsed: 0.006 s  <<< FAILURE!
java.lang.AssertionError: Camel Core OSGi not activated expected:<32> but was:<4>
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded(CamelOsgiActivatorIT.java:80)[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved  Time elapsed: 0.01 s  <<< ERROR!
java.lang.ClassNotFoundException: org.apache.camel.RoutesBuilder not found by org.apache.camel.camel-core-engine [18]
	at org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved(CamelOsgiActivatorIT.java:95)[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testBundleLoaded
[ERROR]   Run 1: CamelOsgiActivatorIT.testBundleLoaded:80 Camel Core OSGi not activated expected:<32> but was:<4>
[ERROR]   Run 2: CamelOsgiActivatorIT.testBundleLoaded:80 Camel Core OSGi not activated expected:<32> but was:<4>
[ERROR]   Run 3: CamelOsgiActivatorIT.testBundleLoaded:80 Camel Core OSGi not activated expected:<32> but was:<4>
[INFO] 
[ERROR] Errors: 
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testPreStartupLoadAndRemoved
[ERROR]   Run 1: CamelOsgiActivatorIT.testPreStartupLoadAndRemoved:124 » ClassNotFound org.apac...
[ERROR]   Run 2: CamelOsgiActivatorIT.testPreStartupLoadAndRemoved:124 » ClassNotFound org.apac...
[ERROR]   Run 3: CamelOsgiActivatorIT.testPreStartupLoadAndRemoved:124 » ClassNotFound org.apac...
[INFO] 
[ERROR] org.apache.camel.component.osgi.activator.CamelOsgiActivatorIT.testRouteLoadAndRemoved
[ERROR]   Run 1: CamelOsgiActivatorIT.testRouteLoadAndRemoved:95 » ClassNotFound org.apache.cam...
[ERROR]   Run 2: CamelOsgiActivatorIT.testRouteLoadAndRemoved:95 » ClassNotFound org.apache.cam...
[ERROR]   Run 3: CamelOsgiActivatorIT.testRouteLoadAndRemoved:95 » ClassNotFound org.apache.cam...
[INFO] 
[INFO] 
[ERROR] Tests run: 3, Failures: 1, Errors: 2, Skipped: 0",
0,CAMEL-14876,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Omar Al-Safi,Claus Ibsen,0,2,2020-04-09 05:52:52+00:00,2020-05-05 08:30:42+00:00,"The metadata.json file keeps being regenerared in unordered. 


— a/core/camel-componentdsl/src/generated/resources/metadata.json
+++ b/core/camel-componentdsl/src/generated/resources/metadata.json
@@ -5008,6 +5008,7 @@
     ""lenientProperties"": false,
     ""javaType"": ""org.apache.camel.component.mongodb.MongoDbComponent"",
     ""firstVersion"": ""2.19.0"",
+    ""supportLevel"": ""Stable"",
     ""groupId"": ""org.apache.camel"",
     ""artifactId"": ""camel-mongodb"",
     ""version"": ""3.3.0-SNAPSHOT""
@@ -7598,7 +7599,6 @@
     ""lenientProperties"": false,
     ""javaType"": ""org.apache.camel.component.zookeeper.ZooKeeperComponent"",
     ""firstVersion"": ""2.9.0"",



""supportLevel"": ""Stable"",
     ""groupId"": ""org.apache.camel"",
     ""artifactId"": ""camel-zookeeper"",
     ""version"": ""3.3.0-SNAPSHOT""
(END)","omarsmak:1586847540:2020-04-14T14:59:00.338+0000:1586847540:2020-04-14T14:59:00.338+0000:The original issue is, I added a component model wrapper when writing to json but forgot to remove it since changed it to use JsonMapper, removed it now and shall fix the annoying race condition in the metadata.json
omarsmak:1587435282:2020-04-21T10:14:42.297+0000:1587435282:2020-04-21T10:14:42.297+0000:Seems to still occur randomly, will fix it on the next iteration
davsclaus:1587770903:2020-04-25T07:28:23.601+0000:1587770903:2020-04-25T07:28:23.601+0000:I have not seen this in a while
omarsmak:1587777289:2020-04-25T09:14:49.762+0000:1587777289:2020-04-25T09:14:49.762+0000:Yeah, it happened once to me when I built the component, but then I did full build  and it seemed to be fine again. I will keep an eye, in case we don't see it again for more days, I will just close this ticket 
omarsmak:1588638351:2020-05-05T08:25:51.616+0000:1588638351:2020-05-05T08:25:51.616+0000:[~davsclaus] did you notice this issue recently? Not from my side though
davsclaus:1588638642:2020-05-05T08:30:42.779+0000:1588638642:2020-05-05T08:30:42.779+0000:No have not seen it since"
0,CAMEL-14875,Task,Major,3.2.0,,"
None
",Resolved,Implemented,None,David Jencks,David Jencks,0,2,2020-04-09 05:37:07+00:00,2020-06-27 18:54:36+00:00,"Antora 2.3 has a playbook feature of start_paths (rather than a single start_path).  I think it will make it much easier to work on one version locally if we reorganize the playbook by camel version, using multiple start_paths for each version.",zregvart:1593255276:2020-06-27T18:54:36.073+0000:1593255276:2020-06-27T18:54:36.073+0000:Thanks to [~djencks].
0,CAMEL-14874,Task,Major,3.2.0,,"
None
",Resolved,Fixed,None,David Jencks,David Jencks,0,1,2020-04-09 03:24:47+00:00,2020-04-15 01:32:41+00:00,"The idea is to use an Antora asciidoctor extension to query the pages in the Antora content catalog and use that to construct the tables of components, dataformats, and languages. In order to get all the necessary information, some attributes will need to be added to the partially generated component .adoc pages.


In addition I'll move the miscellaneous components to their own module and index page.


I expect to also implement CAMEL-14866.


Eventually we should be able to use a similar technique to generate the nav file lists but this requires a change in Antora to allow asciidoctor extensions during nav file generation, which is unlikely to be available before Antora 3.0.",
0,CAMEL-14873,Bug,Major,"3.1.0, 3.2.0",,"
None
",Resolved,Information Provided,None,Unassigned,Mikael Andersson Wigander,0,3,2020-04-08 17:05:08+00:00,2020-08-03 07:15:37+00:00,"When using Camel Micrometer component and want them exposed in JMX they are not,


counter, timer and histo.


Available in JMX from Micrometer are gauge, timer and meter.


Tried to downgrade micrometer but Camel insist bringing in 1.3.6


Lastest working version tested Camel 2.25.0


Using the declaration as in documentation including bean and micrometer JMX  dependency.","dmvolod:1586381297:2020-04-09T05:28:17.224+0000:1586381297:2020-04-09T05:28:17.224+0000:[~hakuseki] ,  please check required steps from the [https://camel.apache.org/manual/latest/camel-3x-upgrade-guide.html]

The JMX default behaviour was changed between 2.x and 3.x
hakuseki:1586381641:2020-04-09T05:34:01.487+0000:1586381641:2020-04-09T05:34:01.487+0000:If you mean camel-management, it is included in my tests
hakuseki:1586384345:2020-04-09T06:19:05.407+0000:1586384345:2020-04-09T06:19:05.407+0000:Could the problem be related to how Micrometer grouping the Meters now?

 

!Java_Monitoring___Management_Console.png!
dmvolod:1586406379:2020-04-09T12:26:19.136+0000:1586406379:2020-04-09T12:26:19.136+0000:The micrometer JMX docs says the same you are expecting, but it doesn't update since version 1.0.0 [https://github.com/micrometer-metrics/micrometer-docs/blob/master/src/docs/implementations/jmx.adoc]

Looks like they are updating the JMX structure
davsclaus:1596410137:2020-08-03T07:15:37.348+0000:1596410137:2020-08-03T07:15:37.348+0000:Its micrometer change and not Camel"
0,CAMEL-14872,Improvement,Minor,3.3.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Martin Bramwell,0,1,2020-04-08 16:17:17+00:00,2020-04-10 06:16:36+00:00,"The camel-mongodb component currently returns only the document itself on subscription. There is no way of knowing what type of operation took place, in the case of a deletion the stream simply says ""null"". Ticket raised to add the document id as a header to the exchange, and the operation type, as well as making the exchange body useful in the case of a delete.",
0,CAMEL-14871,New Feature,Minor,3.2.0,3.8.0,"
None
",Resolved,Fixed,3.8.0,Andrea Cosentino,Vilmos Nagy,0,2,2020-04-08 15:32:21+00:00,2021-09-30 10:34:42+00:00,"Hi there,


is there a possibility, to support the doneFileName parameter on the AWS-S3 Consumer as it's supported on the FTP Component?


I'd like to fetch all files from a bucket when, and only when there's a trigger file in that bucket.


Thanks,
Vilmos","acosentino:1586331411:2020-04-08T15:36:51.201+0000:1586331411:2020-04-08T15:36:51.201+0000:This would eventually be something for aws2-s3 component. Personally I think it would be feasible but this needs time. I'll have a look If I'll have some
vilmos.nagy:1586331508:2020-04-08T15:38:28.656+0000:1586331508:2020-04-08T15:38:28.656+0000:What's the difference between the {{aws-s3}} and the {{aws2-s3}} component?

Would you accept a PR if I'd implement this feature?
acosentino:1586331859:2020-04-08T15:44:19.413+0000:1586331859:2020-04-08T15:44:19.413+0000:The AWS2-S3 component is based on AWS Java SDK v2, the code is really similar between the old and new component. At some point we'll deprecate the camel-aws-* components and suggest to use the AWS2-* one. Yes, sure, if you want you can open a PR, the important thing is maintaining the old behavior, so the donefilename should be enabled only in particular cases and through options etc.
vilmos.nagy:1586338426:2020-04-08T17:33:46.129+0000:1586338426:2020-04-08T17:33:46.129+0000:I've started to work on this here: https://github.com/vilmosnagy/camel/tree/CAMEL-14871
acosentino:1595279289:2020-07-21T05:08:09.308+0000:1595279289:2020-07-21T05:08:09.308+0000:What's the status on this [~vilmos.nagy] ?"
0,CAMEL-14870,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-08 15:02:14+00:00,2020-04-08 19:49:39+00:00,"If you do


    @Override
    protected boolean useJmx() 

{
        return false;
    }


Then JMX is in use anyway",
0,CAMEL-14869,Bug,Major,None,,"
None
",Resolved,Information Provided,None,Unassigned,Iago Ossorio Astray,0,2,2020-04-08 10:30:24+00:00,2020-04-08 10:40:26+00:00,"Hello,


I am trying to define a camel route:




from(""activiti:fire:printFacts"")
        .log(LoggingLevel.INFO, ""Received message on service task ${property.outputFact}"");



In version 2 it works perfectly but in version 3, I get the following error:




java.lang.ClassNotFoundException: org.apache.camel.impl.DefaultComponent
	at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:581)
	at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:178)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 61 common frames omitted




Does version 3 not support activiti?",acosentino:1586313585:2020-04-08T10:39:45.087+0000:1586313626:2020-04-08T10:40:26.213+0000:Activiti is something specific to Apache Servicemix and Servicemix does not support Camel 3. Also Servicemix 8 won't be release. It will go to Attic and won't be released anymore.
0,CAMEL-14868,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-04-08 10:30:12+00:00,2020-04-21 09:56:39+00:00,"Instead of setting all the options and header, sometimes, for complex cases it would be useful to pass a pojo directly.",
0,CAMEL-14867,New Feature,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-08 09:50:26+00:00,2020-05-06 09:18:59+00:00,"This requires to add this to the camel-tooling-model, and then we can have a in maven pom.xml so you can says what version its deprecated since.


<properties>
  <deprecatedSince>3.4</deprecatedSince>


As we are on Camel 3.x then we only have 1 deprecated so we can easily find out what old version it was deprecated.


For 2.x we wont do this.",
0,CAMEL-14866,New Feature,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Claus Ibsen,0,4,2020-04-08 09:45:10+00:00,2020-05-05 08:25:16+00:00,"We now have in the camel-catalog a supportLevel that can be



Experimental
Preview
Stable



We should find a way to show this in the component table. For example could be something like they do at quarkus with a square box for Preview and Experimental and a tool tip.","davsclaus:1586310386:2020-04-08T09:46:26.440+0000:1586310386:2020-04-08T09:46:26.440+0000:See screenshot
aashnajena:1586321996:2020-04-08T12:59:56.063+0000:1586321996:2020-04-08T12:59:56.063+0000:Hello! Can I take this up? The complexity of the issue is not mentioned, and I'm fairly new, but I'd like to give it a try!
zregvart:1586335666:2020-04-08T16:47:46.630+0000:1586335666:2020-04-08T16:47:46.630+0000:The information from Camel catalog is not available to the Antora when building the component documentation. [~djencks] has a provided an idea on the [mailing list|https://lists.apache.org/thread.html/r8d3cf2705a3a7db4c23936513354334c53058e97c542327ee19294fe%40%3Cdev.camel.apache.org%3E] how this can be done.
djencks:1586354102:2020-04-08T21:55:02.078+0000:1586354102:2020-04-08T21:55:02.078+0000:I'm working on replacing how the component tables are generated with something completely different, and I think this change will be very easy to add as part of that -- easier than going through a separate issue.  Lets see. I hope to have a PR for review in a few days.  Something that may be slightly harder but still manageable is adding a ""deprecated since"" version to the catalog: at that point it would be straightforward to show it in the catalog. I think there will be more opportunities for simplifying the catalog json to .adoc partial code generation.

If my idea doesn't work out, I think this info could be added to the java code that currently generates the component tables.
djencks:1586379018:2020-04-09T04:50:18.446+0000:1586379018:2020-04-09T04:50:18.446+0000:I just looked at the png Claus attached and I'm not sure I want to produce something quite like that.  What I can do easily is produce some text in a  table column.  Turning that text into something fancy looking is another project.  One possibility is to have the text be an icon specification; in that case suitable icons would need to be found and set up.
davsclaus:1586382912:2020-04-09T05:55:12.412+0000:1586382912:2020-04-09T05:55:12.412+0000:An icon would IMHO be good as a new column takes up too much space. 98% of the components will be Stable anyway.
djencks:1586895529:2020-04-15T04:18:49.141+0000:1586895529:2020-04-15T04:18:49.141+0000:With  CAMEL-14874 the support level is shown in a column in text on the component index pages. (for master/latest, so far). It's combined with the deprecated state.  If someone comes up with some icons I can do the work to use them or indicate what needs to happen."
0,CAMEL-14865,Bug,Minor,"2.25.0, 3.2.0","2.25.1, 3.3.0","
None
",Resolved,Fixed,"2.25.1, 3.3.0",Zheng Feng,Zheng Feng,0,1,2020-04-07 15:32:59+00:00,2020-04-08 08:26:09+00:00,"The camel-telegram should have the dependency of ""com.fasterxml.jackson.core:jackson-core"" directly since it uses the JsonParser in UnixTimestampDeserializer.java",
0,CAMEL-14864,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-07 14:42:16+00:00,2020-04-13 07:54:50+00:00,"We may want to add some @Configurer annotation where you can define to generate source code, as there are some parts of Camel itself which can benefit from this.


We had the main configuration options, and the rest-dsl, and now the circuit breakers implementations.","davsclaus:1586313406:2020-04-08T10:36:46.559+0000:1586320820:2020-04-08T12:40:20.253+0000:TODO: ExtendedCamelContext *DONE*
davsclaus:1586321491:2020-04-08T12:51:31.741+0000:1586321491:2020-04-08T12:51:31.741+0000:There is a new org.apache.camel.spi.Configurer annotation you can add on the POJO class to mark it for generation.
davsclaus:1586735690:2020-04-13T07:54:50.180+0000:1586735690:2020-04-13T07:54:50.180+0000:We can also do this for custom end users POJOs as shown in this example
https://github.com/apache/camel-examples/commit/738c67f327d176ab345576c47608368d8296ceae"
0,CAMEL-14863,Task,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-04-07 14:24:55+00:00,2020-04-08 08:14:55+00:00,No Desc,
0,CAMEL-14862,Task,Major,None,None,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-04-07 13:37:32+00:00,2020-04-07 16:20:54+00:00,No Desc,
0,CAMEL-14861,Bug,Major,"3.1.0, 3.2.0",3.3.0,"

pull-request-available

",Resolved,Fixed,3.3.0,Andrea Cosentino,Taras Suhovenko,0,1,2020-04-07 13:01:42+00:00,2020-04-08 04:26:15+00:00,"During initializing GooglePubsubConsumer subscribers is always null. This lead to silent NPE in 


asynchronousPull method  on line  subscribers.add(subscriber);",
0,CAMEL-14860,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Claus Ibsen,0,1,2020-04-07 08:03:06+00:00,2020-04-09 07:18:00+00:00,"There is some configuration that use reflection to copy over configurations. This is in the reifier classes in camel-hystrix, camel-resilience4j and the new mp fault tolerance.","davsclaus:1586321421:2020-04-08T12:50:21.395+0000:1586321421:2020-04-08T12:50:21.395+0000:Okay we can now generate configurer classes, so we should use those and therefore avoid reflection calls. 

TODO: Add unit test to check bean introspection count is not changed"
0,CAMEL-14859,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Unassigned,Benjamin Graf,0,2,2020-04-07 05:29:21+00:00,2020-04-07 07:44:04+00:00,"Camel normally creates endpoints with uris containing ""//"" after normalizing. Endpoint DSL is actually missing such behavior causing several following problems like JmsConsumer thread naming or wrong injected endpoints.",davsclaus:1586216644:2020-04-07T07:44:04.783+0000:1586216644:2020-04-07T07:44:04.783+0000:Thanks for reporting and the PR
0,CAMEL-14858,Improvement,Major,None,None,"
None
",Closed,Duplicate,None,Unassigned,Solange Iyubu,0,2,2020-04-07 05:01:12+00:00,2020-04-07 06:22:46+00:00,No Desc,dmvolod:1586211766:2020-04-07T06:22:46.218+0000:1586211766:2020-04-07T06:22:46.218+0000:Close as duplicating CAMEL-14857
0,CAMEL-14857,Improvement,Major,None,,"
None
",Resolved,Information Provided,None,Unassigned,Solange Iyubu,0,3,2020-04-07 02:50:23+00:00,2022-09-02 14:57:44+00:00,nav panel explore is hardly distinguishable from nav panel menu,"siyubu:1586207347:2020-04-07T05:09:07.178+0000:1586207347:2020-04-07T05:09:07.178+0000:nav panel explore after changing its color !nav3.JPG! 
dmvolod:1586211696:2020-04-07T06:21:36.858+0000:1586211696:2020-04-07T06:21:36.858+0000:[~siyubu], please don't forget to mark related component as website
davsclaus:1662101864:2022-09-02T14:57:44.426+0000:1662101864:2022-09-02T14:57:44.426+0000:report in github camel-website"
0,CAMEL-14856,Improvement,Major,None,None,"
None
",Closed,Duplicate,None,Unassigned,Solange Iyubu,0,1,2020-04-07 02:43:09+00:00,2020-04-07 06:23:23+00:00,nav panel explore context content more visible is hardily distinguished from nav panel menu,
0,CAMEL-14855,Improvement,Major,None,,"
None
",Closed,Duplicate,None,Unassigned,Solange Iyubu,0,1,2020-04-06 20:25:48+00:00,2020-04-07 06:23:59+00:00,panel explore context is hardly distanguished from nav panel menu,
0,CAMEL-14854,Bug,Minor,3.0.0,3.5.0,"

help-wanted

",Resolved,Fixed,3.5.0,Unassigned,Tarun Mahajan,0,3,2020-04-06 19:05:43+00:00,2020-06-19 12:51:23+00:00,"Camel IRC fails to rejoin the channel. We have a module where we are sending updates via camel irc and it stores the producers and connection in cache, but if due to some reason connection get reset or irc server get restarted then all the messages starts to fail as we are not retrying on making new connection.


 


Here is the piece of code where we are checking if connection.isactive or not. If not we should try to establish a connection, due to this all messages are going to dlq.


IrcProducer.java


if (!connection.isConnected()) 

{
 throw new RuntimeCamelException(""Lost connection to "" + connection.getHost());
}","acosentino:1586171327:2020-04-06T19:08:47.245+0000:1586171327:2020-04-06T19:08:47.245+0000:Please report the camel version.
acosentino:1586171342:2020-04-06T19:09:02.073+0000:1586171342:2020-04-06T19:09:02.073+0000:I don't think this is critical.
davsclaus:1586214920:2020-04-07T07:15:20.591+0000:1586214920:2020-04-07T07:15:20.591+0000:Help is wanted to look into the code and see if we that code can be improved to re-connect if not connected.
tmahajan:1586215327:2020-04-07T07:22:07.722+0000:1586215327:2020-04-07T07:22:07.722+0000:[~acosentino] The camel version is 3.0.0. "
0,CAMEL-14853,Bug,Minor,3.1.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Maarten Tutak,0,2,2020-04-06 16:54:10+00:00,2020-04-07 07:20:08+00:00,"Hi. I'm using Spring Boot (2.2.4.RELEASE) with Camel (3.1.0) and I've come across the following error. I should note that i'm having a hard time reproducing this issue.



***************************
APPLICATION FAILED TO START
***************************

Description:

An attempt was made to call a method that does not exist. The attempt was made from the following location:

    com.ctc.wstx.evt.CompactStartElement.getAttributes(CompactStartElement.java:94)

The following method did not exist:

    'org.codehaus.stax2.ri.EmptyIterator org.codehaus.stax2.ri.EmptyIterator.getInstance()'

The method's class, org.codehaus.stax2.ri.EmptyIterator, is available from the following locations:

    jar:file:/app/libs/stax2-api-4.2.jar!/org/codehaus/stax2/ri/EmptyIterator.class

It was loaded from the following location:

    file:/app/libs/stax2-api-4.2.jar


Action:

Correct the classpath of your application so that it contains a single, compatible version of org.codehaus.stax2.ri.EmptyIterator




I was wondering if this is related to the fact that camel-jacksonxml introduces both org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1 and com.fasterxml.woodstox:woodstox-core:jar:6.0.3 on the classpath , as seen below.



INFO] +- org.apache.camel.springboot:camel-jacksonxml-starter:jar:3.1.0:compile
[INFO] |  \- org.apache.camel:camel-jacksonxml:jar:3.1.0:compile
[INFO] |     +- org.apache.camel:camel-support:jar:3.1.0:compile
[INFO] |     +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.10.2:compile
[INFO] |     |  +- org.codehaus.woodstox:stax2-api:jar:4.2:compile
[INFO] |     |  \- com.fasterxml.woodstox:woodstox-core:jar:6.0.3:compile
[INFO] |     +- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.10.2:compile
[INFO] |     \- org.codehaus.woodstox:woodstox-core-asl:jar:4.4.1:compile




It's unclear to me why camel-jacksonxml has a dependency on woodstox-core-asl while woodstox-core is already available, albeit transitively.","acosentino:1586212775:2020-04-07T06:39:35.597+0000:1586212775:2020-04-07T06:39:35.597+0000:This is the starter with 3.3.0-SNAPSHOT
{code:java}
[INFO] org.apache.camel.springboot:camel-jacksonxml-starter:jar:3.3.0-SNAPSHOT
.
.
.
[INFO] +- org.apache.camel:camel-jacksonxml:jar:3.3.0-SNAPSHOT:compile
[INFO] |  +- org.apache.camel:camel-support:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-api:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-management-api:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  +- org.apache.camel:camel-util:jar:3.3.0-SNAPSHOT:compile
[INFO] |  |  \- org.slf4j:slf4j-api:jar:1.7.30:compile
[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.10.3:compile
[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.10.3:compile
[INFO] |  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.10.3:compile
[INFO] |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-xml:jar:2.10.3:compile
[INFO] |  |  +- org.codehaus.woodstox:stax2-api:jar:4.2:compile
[INFO] |  |  \- com.fasterxml.woodstox:woodstox-core:jar:6.1.1:compile
[INFO] |  \- com.fasterxml.jackson.module:jackson-module-jaxb-annotations:jar:2.10.3:compile
[INFO] |     \- jakarta.activation:jakarta.activation-api:jar:1.2.2:compile
{code}
and there is no woodstox-core-asl. Can you please try with 3.2.0?
MaartenTutak:1586215172:2020-04-07T07:19:32.449+0000:1586215172:2020-04-07T07:19:32.449+0000:It's still present in [3.2.0|https://github.com/apache/camel/blob/camel-3.2.0/components/camel-jacksonxml/pom.xml]. However, this seems to have been fixed 3 days ago in commit [be8f41135252fdf3eb7a3d51831f108c43c3bc3f|https://github.com/apache/camel/commit/be8f41135252fdf3eb7a3d51831f108c43c3bc3f] by [~davsclaus].
I'll mark this as fixed in 3.3.0."
0,CAMEL-14852,Bug,Major,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Benjamin Graf,0,2,2020-04-06 16:24:38+00:00,2020-04-07 11:19:39+00:00,Introduction of NormalizedUri feature make property resolving not working anymore.,"graben:1586161768:2020-04-06T16:29:28.514+0000:1586161854:2020-04-06T16:30:54.325+0000:Test case does work with Camel 3.1 logging under category {{foo}}. Logging under {{{{test}}}} with 3.2.


{noformat}
2020-04-06T18:22:04,040 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:04,056 INFO  [main            ] CamelTestSupport                 - Testing: test(TestClass)
2020-04-06T18:22:04,056 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:04,477 INFO  [main            ] DefaultManagementStrategy        - JMX is enabled
2020-04-06T18:22:04,712 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) is starting
2020-04-06T18:22:04,962 INFO  [main            ] AbstractCamelContext             - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2020-04-06T18:22:05,056 INFO  [main            ] AbstractCamelContext             - Route: route1 started and consuming from: direct:test
2020-04-06T18:22:05,056 INFO  [main            ] AbstractCamelContext             - Total 1 routes, of which 1 are started
2020-04-06T18:22:05,056 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) started in 0.344 seconds
2020-04-06T18:22:05,087 INFO  [main            ] {{test}}                         - Exchange[ExchangePattern: InOnly, BodyType: String, Body: test]
2020-04-06T18:22:05,102 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:05,102 INFO  [main            ] CamelTestSupport                 - Testing done: test(de.graf.camel.metadata.TestClass)
2020-04-06T18:22:05,102 INFO  [main            ] CamelTestSupport                 - Took: 0.046 seconds (46 millis)
2020-04-06T18:22:05,118 INFO  [main            ] CamelTestSupport                 - ********************************************************************************
2020-04-06T18:22:05,118 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) is shutting down
2020-04-06T18:22:05,118 INFO  [main            ] DefaultShutdownStrategy          - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2020-04-06T18:22:05,134 INFO  [0 - ShutdownTask] DefaultShutdownStrategy          - Route: route1 shutdown complete, was consuming from: direct:test
2020-04-06T18:22:05,149 INFO  [main            ] DefaultShutdownStrategy          - Graceful shutdown of 1 routes completed in 0 seconds
2020-04-06T18:22:05,165 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) uptime 0.453 seconds
2020-04-06T18:22:05,181 INFO  [main            ] AbstractCamelContext             - Apache Camel 3.2.0 (CamelContext: camel-1) is shutdown in 0.063 seconds
{noformat}


davsclaus:1586216671:2020-04-07T07:44:31.385+0000:1586216671:2020-04-07T07:44:31.385+0000:I assume your PR also fixed this problem?
graben:1586218967:2020-04-07T08:22:47.929+0000:1586218967:2020-04-07T08:22:47.929+0000:No, the problem is that NormalizedUri does set normalize boolean flag to true in [AbstractCamelContext.java#L893|https://github.com/apache/camel/blob/950268a43f12a13a9b5a2005ac9056cf402304b5/core/camel-base/src/main/java/org/apache/camel/impl/engine/AbstractCamelContext.java#L893]. This causes a ""wrong"" interpretation in if statement at [AbstractCamelContext.java#L906|https://github.com/apache/camel/blob/950268a43f12a13a9b5a2005ac9056cf402304b5/core/camel-base/src/main/java/org/apache/camel/impl/engine/AbstractCamelContext.java#L906]
davsclaus:1586220965:2020-04-07T08:56:05.788+0000:1586220965:2020-04-07T08:56:05.788+0000:Okay have a fix in the works
graben:1586221910:2020-04-07T09:11:50.361+0000:1586221910:2020-04-07T09:11:50.361+0000:Perfect. My first idea was to solve it in AbstractEndpointBuilder, too like I did for [CAMEL-14859].
graben:1586228813:2020-04-07T11:06:53.384+0000:1586228813:2020-04-07T11:06:53.384+0000:@[~davsclaus]: Patch looks nice. The test class might miss an *i* in its name. :)
davsclaus:1586229579:2020-04-07T11:19:39.883+0000:1586229579:2020-04-07T11:19:39.883+0000:Thanks renamed the class"
0,CAMEL-14851,Task,Major,None,None,"
None
",Resolved,Fixed,3.3.0,Guillaume Nodet,Guillaume Nodet,0,2,2020-04-06 13:51:18+00:00,2020-04-17 07:35:59+00:00,No Desc,"davsclaus:1586214972:2020-04-07T07:16:12.120+0000:1586214972:2020-04-07T07:16:12.120+0000:How is it missing, is it because it lacks some maven plugin or something? And are you working on it?
davsclaus:1586223694:2020-04-07T09:41:34.957+0000:1586223694:2020-04-07T09:41:34.957+0000:I can see the index file seems correupt or small as its about 10 bytes or so
gnodet:1587013324:2020-04-16T13:02:04.602+0000:1587013324:2020-04-16T13:02:04.602+0000:So there are 2 compilation phases (first compilation phase, then the code generation runs, then a second compilation phase).   The index is generated between the two phases.  I think it should be moved after the second compilation.  This affects all modules really.  I think this should fix the endpoint dsl index."
0,CAMEL-14850,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-04-06 13:20:34+00:00,2020-04-08 09:58:47+00:00,No Desc,
0,CAMEL-14849,Bug,Minor,2.23.1,,"
None
",Closed,Invalid,None,Unassigned,Rajesh Pote,1,2,2020-04-06 11:38:13+00:00,2020-04-07 08:59:17+00:00,"HI Team,


I am having two issue with camel-http producer.


1. socketTimeout and connectTimeout properties are not getting set via URI Options. And my request is getting timeout after 2mins by default. i have configure the proprties as mentioned in docs https://camel.apache.org/components/latest/http-component.html#_http_component_options


here is the code which used for producer.


Tried Code: 


ProducerTemplate template = context.createProducerTemplate();ProducerTemplate template = context.createProducerTemplate(); //context.add String out = template.requestBody(""http://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000"", null,String.class); 


 logs:


========================================================


12:15:29.207 [main] DEBUG org.apache.camel.impl.DefaultCamelContext - http://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000 converted to endpoint: http://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000 by component: org.apache.camel.component.http.HttpComponent@1e9e725a
12:15:29.213 [main] DEBUG org.apache.camel.impl.ProducerCache - Adding to producer cache with key: http://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000 for producer: Producerhttp://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000
12:15:29.214 [main] DEBUG org.apache.camel.impl.ProducerCache - >>>> http://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000 Exchange[]
12:15:29.237 [main] DEBUG org.apache.camel.component.http.HttpProducer - Executing http GET method: http://tor-virgin-om8-pub:5000/restapi/GetSTBDetails?connectTimeout=1000&socketTimeout=5000
12:17:47.036 [main] ERROR HttpProducerSOTimeoutTest - Failed=============


=========================================================


 


 


2. Http Client is retrying automatically on ConnectException which i dont want, so is there way to disable http client retries?


Logs:


INFO  10:24:31 clip-worker-2 connectivity.ConnectivityAdapterRequest>  URL  https://100.10.40.1:9190/test/v1.0/GetSTBDetails?httpMethod=getINFO  10:26:38 clip-worker-2 org.apache.commons.httpclient.HttpMethodDirector> I/O exception (java.net.ConnectException) caught when processing request: Connection timed out (Connection timed out)INFO  10:26:38 clip-worker-2 org.apache.commons.httpclient.HttpMethodDirector> Retrying requestINFO  10:28:45 clip-worker-2 org.apache.commons.httpclient.HttpMethodDirector> I/O exception (java.net.ConnectException) caught when processing request: Connection timed out (Connection timed out)INFO  10:28:45 clip-worker-2 org.apache.commons.httpclient.HttpMethodDirector> Retrying requestINFO  10:30:53 clip-worker-2 org.apache.commons.httpclient.HttpMethodDirector> I/O exception (java.net.ConnectException) caught when processing request: Connection timed out (Connection timed out)INFO  10:30:53 clip-worker-2 org.apache.commons.httpclient.HttpMethodDirector> Retrying request","davsclaus:1586215032:2020-04-07T07:17:12.155+0000:1586215032:2020-04-07T07:17:12.155+0000:You are looking at the wrong documentation. For Camel 2.x you need to chose the 2.x in the version picker
davsclaus:1586215054:2020-04-07T07:17:34.061+0000:1586215054:2020-04-07T07:17:34.061+0000:https://camel.apache.org/components/2.x/http-component.html
rajesh.pote:1586219796:2020-04-07T08:36:36.074+0000:1586219796:2020-04-07T08:36:36.074+0000:[~davsclaus] Thanks for quick response.

Even in 2.x the example mentioned in below link has the same properties for socket and connect timeout.

 
h2. Using client timeout - SO_TIMEOUT

[https://github.com/apache/camel/blob/master/components/camel-http/src/test/java/org/apache/camel/component/http/HttpSOTimeoutTest.java]

 

Is there any another configuration provided for socket and connect timeout in camel 2.x?

 

Also how can i disable the http client retry for connection exception? 

 
davsclaus:1586221150:2020-04-07T08:59:10.080+0000:1586221150:2020-04-07T08:59:10.080+0000:See this test for setting (use same version of Camel as you do)
https://github.com/apache/camel/blob/camel-2.23.1/components/camel-jetty9/src/test/java/org/apache/camel/component/jetty/HttpProducerSOTimeoutTest.java

Ask on the user mailing list to get help."
0,CAMEL-14848,Improvement,Minor,3.2.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Gregor Zurowski,Gregor Zurowski,0,1,2020-04-06 08:24:04+00:00,2020-04-06 08:32:10+00:00,"Attach the camel-blueprint-x.y.z.xsd schema file as an artifact to the Camel Blueprint component as done with other schemas (e.g. Spring Integration, Spring Security).",
0,CAMEL-14847,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.18.0,Luca Burgazzoli,Andrea Cosentino,1,2,2020-04-05 10:59:36+00:00,2022-06-07 08:23:55+00:00,"https://github.com/arakelian/java-jq


We can use this library, it's MIT licensed, so it is ok.","lb:1647613303:2022-03-18T22:21:43.429+0000:1647613303:2022-03-18T22:21:43.429+0000:There is a library [1] that implements JQ expressions in java
A related quarkus extension is also provided [2]

[1] https://github.com/eiiches/jackson-jq/.
[2] https://github.com/quarkiverse/quarkus-jackson-jq
"
0,CAMEL-14816,New Feature,Major,None,None,"
None
",Resolved,Fixed,None,Peter Palaga,Peter Palaga,0,2,2020-03-31 10:06:43+00:00,2022-09-02 14:53:48+00:00,"Both new attributes are meant for components, dataformats, etc. 


Possible values of supportLevel: preview and stable (default)


Possible values of compileTarget: JVM (default) and Native","davsclaus:1586310150:2020-04-08T09:42:30.899+0000:1586310150:2020-04-08T09:42:30.899+0000:support level merged into 3.3.0
davsclaus:1586310173:2020-04-08T09:42:53.897+0000:1586310173:2020-04-08T09:42:53.897+0000:Discussed on dev at
https://camel.465427.n5.nabble.com/DISCUSS-Camel-components-Information-about-stability-and-native-compilation-td5863063.html"
0,CAMEL-14815,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Peter Palaga,Peter Palaga,0,1,2020-03-31 09:51:32+00:00,2020-03-31 11:25:25+00:00,"This is related to CAMEL-14814: when iterating over a union of all components, languages, dataformats and others in camel catalog, it is a bit annoying that components require a special handling (getScheme() instead of getName()) because getName() returns null for them. 


The current proposal is to set the scheme value also on the name field for components.",
0,CAMEL-14814,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Peter Palaga,Peter Palaga,0,1,2020-03-31 09:44:44+00:00,2020-03-31 12:29:13+00:00,"All of ComponentModel, LanguageModel, DataformatModel and OtherModel currently have their own Maven coordinate fields groupId, artifactId and version. This e.g. makes it hard to find all models coming from a given artifact. Having a common parent for the four classes hosting the GAV fields would make such a filtering much easier.",
0,CAMEL-14813,New Feature,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-03-31 09:03:41+00:00,2020-03-31 16:41:28+00:00,The CachingServiceDiscovery does not make much sense so it need to eb removed which also allow to remove dependency on caffeine,
0,CAMEL-14812,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Claus Ibsen,0,3,2020-03-30 19:47:40+00:00,2020-05-04 19:31:05+00:00,"We should not duplicate versions in parent/pom.xml and then also in camel-karaf root pom.


camel-karaf should use the versions from camel/parent instead and then if needed overlay with its own bundle versions. 


Today we have duplicates and this means we would get out of sync","acosentino:1585569798:2020-03-30T20:03:18.406+0000:1585569798:2020-03-30T20:03:18.406+0000:Same problem for camel-spring-boot, less, but always the same.
davsclaus:1585994521:2020-04-04T18:02:01.238+0000:1585994521:2020-04-04T18:02:01.238+0000:Yeah and also in camel-examples. 
davsclaus:1586215170:2020-04-07T07:19:30.235+0000:1586215170:2020-04-07T07:19:30.235+0000:We need to find a way for this before 3.3, as its stupid work to maintain upgrades 3 places now. camel-quarkus dont have this problem it seems.
fpapon:1586557714:2020-04-11T06:28:34.498+0000:1586557714:2020-04-11T06:28:34.498+0000:Hi,

[~acosentino], [~davsclaus]  can I take this issue?
acosentino:1586815103:2020-04-14T05:58:23.907+0000:1586815103:2020-04-14T05:58:23.907+0000:[~fpapon] sure, but how do you think to fix the situation? I think we need to discuss a strategy.
fpapon:1586820856:2020-04-14T07:34:16.043+0000:1586820856:2020-04-14T07:34:16.043+0000:I started to test some options like using the camel-parent as parent of the main pom.xml. It will help to maintain most of the version properties.
acosentino:1586820996:2020-04-14T07:36:36.450+0000:1586820996:2020-04-14T07:36:36.450+0000:I think it's not completely correct, in the parent pom there is a lot of stuff not needed, in terms of maven plugin and dependencies.
acosentino:1586821084:2020-04-14T07:38:04.381+0000:1586821084:2020-04-14T07:38:04.381+0000:So depending on the parent pom of camel is a bit overkilling.
fpapon:1586821301:2020-04-14T07:41:41.440+0000:1586821301:2020-04-14T07:41:41.440+0000:May be we could add some profile to avoid using them or another solution is to make a new camel-parent that will be the parent for camel main and all the subprojects.

We could split properties by usage: dependencies, maven-plugin...
acosentino:1586821383:2020-04-14T07:43:03.722+0000:1586821383:2020-04-14T07:43:03.722+0000:[~davsclaus] I think it would be better to move the dependencies version in the bom. [~fpapon] this needs a bit more analysis I guess.
fpapon:1586821648:2020-04-14T07:47:28.106+0000:1586821648:2020-04-14T07:47:28.106+0000:[~acosentino] agree
davsclaus:1586821939:2020-04-14T07:52:19.699+0000:1586821939:2020-04-14T07:52:19.699+0000:Since we start to have many sub projects then IMHO it makes sense to have a camel-dependencies pom (or some other name for it) that has all those <properties> from the current camel-parent. Then each sub project can use that to align the versions.
fpapon:1586822243:2020-04-14T07:57:23.511+0000:1586822243:2020-04-14T07:57:23.511+0000:I can make some tests on a local branch of camel and check the usage with camel-karaf and camel-spring-boot subprojects
acosentino:1588589322:2020-05-04T18:48:42.094+0000:1588589322:2020-05-04T18:48:42.094+0000:done for camel,camel-karaf and camel-spring-boot, I'll do camel-examples too. Please rebuild from camel downward.
fpapon:1588591838:2020-05-04T19:30:38.356+0000:1588591865:2020-05-04T19:31:05.412+0000:[~acosentino] I was waiting for a confirmation before continue on this but it's good if you resolved it."
0,CAMEL-14811,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Colm O hEigeartaigh,Colm O hEigeartaigh,0,3,2020-03-30 12:15:55+00:00,2020-09-22 06:13:18+00:00,"For 3.2.0, we should remove the JMX Connector configuration in camel-management. Creating our own registry is not properly secure and doesn't buy us anything extra over just using the default JVM JMX Settings.","sourabhsparkala:1600690084:2020-09-21T20:08:04.414+0000:1600690084:2020-09-21T20:08:04.414+0000:Hello Team,

Would this fix be downported toearlier versions like 2.25.x?

Let us know.

Thanks

Sourabh
bedla:1600691021:2020-09-21T20:23:41.690+0000:1600691021:2020-09-21T20:23:41.690+0000:Hi Sourabh, please dont. 2.25.x needs to be backwards compatible as much as possible. This as breaking change, which should be done only for major releases. 
coheigea:1600726398:2020-09-22T06:13:18.721+0000:1600726398:2020-09-22T06:13:18.721+0000:I agree with [~bedla] . Also, it is not a ""fix"" but the removal of a feature. To be secure just don't use the JMX Connector in earlier releases."
0,CAMEL-14809,Improvement,Minor,None,,"
None
",Resolved,Fixed,None,Unassigned,Prerna Singh,0,2,2020-03-30 10:20:54+00:00,2020-04-03 13:56:26+00:00,"I think we can do something like this:
 A clear button is displayed upon entering input in the search bar's text field. Clicking on the clear button will erase the text field.
 We can even do this for QuickLook up search bar. I think it will slightly increase UX.","psingh1999587:1585534925:2020-03-30T10:22:05.553+0000:1585534925:2020-03-30T10:22:05.553+0000:[~zregvart] If this idea sounds okay, I would want to work on it. I will wait for your feedback before I start.
zregvart:1585613297:2020-03-31T08:08:17.349+0000:1585613297:2020-03-31T08:08:17.349+0000:[~psingh1999587] makes sense to me.
psingh1999587:1585797682:2020-04-02T11:21:22.089+0000:1585797682:2020-04-02T11:21:22.089+0000:[~zregvart]  Created A PR for this #305
zregvart:1585878195:2020-04-03T09:43:15.075+0000:1585878195:2020-04-03T09:43:15.075+0000:Thanks to [~psingh1999587] for the pull request
psingh1999587:1585893386:2020-04-03T13:56:26.225+0000:1585893386:2020-04-03T13:56:26.225+0000:@zregvart Do we have to do this for Quick Look up search bar as well?"
0,CAMEL-14808,New Feature,Minor,None,None,"

component
deeplearning

",Resolved,Fixed,3.3.0,Andrea Cosentino,Marat Gubaidullin,0,1,2020-03-29 18:48:26+00:00,2020-04-07 14:24:25+00:00,"camel-djl component that provides integration with Deep Java Library to infer deep learning models from message exchanges data.


First experiment prototype code


First experiment prototype documentation",
0,CAMEL-14807,New Feature,Minor,None,Future,"
None
",Open,Unresolved,Future,Unassigned,Claus Ibsen,0,1,2020-03-29 08:20:02+00:00,2023-02-23 06:09:15+00:00,"It would be good with a fluent builder for JSSE to setup the SSLContext stuff that is tedious to do. For example from this unit test




public class VertxPlatformHttpEngineTest {
    public static SSLContextParameters serverSSLParameters;
    public static SSLContextParameters clientSSLParameters;

    @BeforeAll
    public static void setUp() {
        serverSSLParameters = new SSLContextParameters();
        clientSSLParameters = new SSLContextParameters();

        KeyStoreParameters keystoreParameters = new KeyStoreParameters();
        keystoreParameters.setResource(""jsse/service.jks"");
        keystoreParameters.setPassword(""security"");

        KeyManagersParameters serviceSSLKeyManagers = new KeyManagersParameters();
        serviceSSLKeyManagers.setKeyPassword(""security"");
        serviceSSLKeyManagers.setKeyStore(keystoreParameters);

        serverSSLParameters.setKeyManagers(serviceSSLKeyManagers);

        KeyStoreParameters truststoreParameters = new KeyStoreParameters();
        truststoreParameters.setResource(""jsse/truststore.jks"");
        truststoreParameters.setPassword(""storepass"");

        TrustManagersParameters clientAuthServiceSSLTrustManagers = new TrustManagersParameters();
        clientAuthServiceSSLTrustManagers.setKeyStore(truststoreParameters);
        serverSSLParameters.setTrustManagers(clientAuthServiceSSLTrustManagers);
        SSLContextServerParameters clientAuthSSLContextServerParameters = new SSLContextServerParameters();
        clientAuthSSLContextServerParameters.setClientAuthentication(""REQUIRE"");
        serverSSLParameters.setServerParameters(clientAuthSSLContextServerParameters);

        TrustManagersParameters clientSSLTrustManagers = new TrustManagersParameters();
        clientSSLTrustManagers.setKeyStore(truststoreParameters);
        clientSSLParameters.setTrustManagers(clientSSLTrustManagers);

        KeyManagersParameters clientAuthClientSSLKeyManagers = new KeyManagersParameters();
        clientAuthClientSSLKeyManagers.setKeyPassword(""security"");
        clientAuthClientSSLKeyManagers.setKeyStore(keystoreParameters);
        clientSSLParameters.setKeyManagers(clientAuthClientSSLKeyManagers);
    }
...",
0,CAMEL-14806,Bug,Minor,3.1.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Marcelo Nardelli,0,2,2020-03-28 21:38:32+00:00,2020-04-04 18:07:58+00:00,"Hi,


I believe that the property camel.springboot.java-routes-exclude-pattern is not being applied correctly. Given two classes Route1 and Route2 (both annotated with spring boot's Component annotation) and the pattern ""**/Route2*"", I would expect to see only Route1 being picked up and started, but I see both routes being started when I run the application. It seems that only Route1 component can be excluded if the pattern matches that class. 


 


The reason for that seems to be in the class  org.apache.camel.spring.boot.SpringBootRoutesCollector. It receives the exclude pattern as a parameter in the method collectRoutesFromRegistry, but at some point replaces it with the value of the property CamelTestSpringExcludeRoutes. The original pattern can only be matched against the first component route registered in spring boot Application Context.


 


I have attached a sample application showing the situation. If I am misunderstanding something, please let me know.


 


Thanks!",davsclaus:1585994878:2020-04-04T18:07:58.820+0000:1585994878:2020-04-04T18:07:58.820+0000:Thanks for reporting
0,CAMEL-14805,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.4.0,Zheng Feng,Claus Ibsen,0,2,2020-03-28 17:09:03+00:00,2020-06-11 14:37:48+00:00,We should move logic from start to init for wiring and other similar things that can be setup as early as possible for lightweight camel.,"zhfeng:1590041458:2020-05-21T14:10:58.013+0000:1591053226:2020-06-02T07:13:46.195+0000:[~gnodet], I get a list of extension from the camel-quarkus currently, which the camel component has the doStart.


||Component||Status||Reason||
|camel-ahc|REJECT|create thread pool|
|camel-aws2-s3|REJECT| |
|camel-aws-ec2|REJECT| |
|camel-aws-ecs|REJECT| |
|camel-aws-eks|REJECT| |
|camel-aws-iam|REJECT| |
|camel-aws-kinesis|REJECT| |
|camel-aws-kms|REJECT| |
|camel-aws-lambda|REJECT| |
|camel-aws-s3|REJECT| |
|camel-aws-sdb|REJECT| |
|camel-aws-swf|REJECT| |
|camel-aws-translate|REJECT| |
|camel-bean|DONE| |
|camel-dataformat|DONE| |
|camel-dozer|DONE| |
|camel-file|DONE| |
|camel-infinispan|REJECT|start a server and create thread |
|camel-jira|REJECT|create the http client |
|camel-kubernetes|REJECT|OKHttp client create thread pool |
|camel-kudu|REJECT|create thread pool|
|camel-log|DONE| |
|camel-mongodb|REJECT| resolve the MongClient from the camelContext and it potentially open the connection and run the command |
|camel-netty-http|DONE| |
|camel-olingo4|REJECT|create the asyn http client |
|camel-platform-http|DONE| |
|camel-quartz|REJECT|quartz schedule create thread pool |
|camel-ref|REJECT|add the other endpoint uri |
|camel-salesforce|REJECT|create a http client and start it |
|camel-seda|DONE| |
|camel-sjms|REJECT|create connections pool |
|camel-sql|DONE| |
|camel-stream|DONE| |
|camel-telegram|REJECT|create thread pool |
|camel-timer|DONE| |
|camel-xslt|DONE| |

I'd like to take a look at these component at first and ignore what use the XXXClient to open the network connection which I think should not be moved to doInit(). I just wonder what component you have been investigating ?
davsclaus:1590535899:2020-05-27T07:31:39.755+0000:1590535899:2020-05-27T07:31:39.755+0000:[~zhfeng] can you mark in your component list above which ones have been done, eg you can edit and add *DONE* after the name
zhfeng:1591053789:2020-06-02T07:23:09.728+0000:1591053789:2020-06-02T07:23:09.728+0000:[~davsclaus] I went through most of these components on this list and it could be ready for 3.4.0
davsclaus:1591053963:2020-06-02T07:26:03.319+0000:1591053963:2020-06-02T07:26:03.319+0000:Can we make the table sorted A..Z and put up somewhere, as frankly we should go over all the Camel components (not only current quarkus extensions, as that will grow over time). And this benefits all runtimes and Camel in general too.
zhfeng:1591055348:2020-06-02T07:49:08.385+0000:1591055348:2020-06-02T07:49:08.385+0000:sure, where can I put this table ? in camel document website ? Actually, I went over the more components not on this list. So I will put them together.
davsclaus:1591055519:2020-06-02T07:51:59.890+0000:1591055519:2020-06-02T07:51:59.890+0000:We could have a .md or .adoc file in the components folder, then its located where they are. We can name it something like

components-init-work-in-progress

Then we can keep it up to date with PRs
zhfeng:1591056173:2020-06-02T08:02:53.425+0000:1591056173:2020-06-02T08:02:53.425+0000:OK, it sounds good to me !
davsclaus:1591837058:2020-06-11T08:57:38.330+0000:1591837058:2020-06-11T08:57:38.330+0000:[~zhfeng] I created a part 2 ticket about this for the next Camel release.

It would be good if you could make that list and put in as .txt or .md file etc in the components folder in the source code, then we can maintain it while we go over the remainder components. That is easier to keep up to date than JIRA.
zhfeng:1591857468:2020-06-11T14:37:48.299+0000:1591857468:2020-06-11T14:37:48.299+0000:yeah, I just take the part 2 ticket."
0,CAMEL-14804,Task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-27 11:51:59+00:00,2020-03-27 15:35:44+00:00,We can move the OSGi bits out of camel-servlet into a new camel-servlet-osgi component in camel-karaf so it has control of OSGi there.,davsclaus:1585292039:2020-03-27T14:53:59.045+0000:1585292039:2020-03-27T14:53:59.045+0000:There are a few other components that has osgi starters that we can move to camel-karaf so they are maintained over there
0,CAMEL-14803,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Zoran Regvart,Claus Ibsen,0,2,2020-03-27 09:38:27+00:00,2020-03-30 11:18:14+00:00,"It would be good to have the docs setup for camel-karaf like we have for camel-spring-boot, so we can build part for the website and have camel karaf included there too.","zregvart:1585273261:2020-03-27T09:41:01.394+0000:1585273261:2020-03-27T09:41:01.394+0000:I can work on adding Antora skeleton structure to the camel-karaf repository and I can create a PR to include it on the website. The content would be quite sparse based on the docs we currently have.
zregvart:1585493873:2020-03-29T22:57:53.003+0000:1585493873:2020-03-29T22:57:53.003+0000:Link check fails on the website build due to component documentation for components that are in camel-karaf only being linked to the main Camel component documentation. The camel-karaf-docs-maven-plugin needs to become aware if component is within camel-karaf or camel repository.
davsclaus:1585522482:2020-03-30T06:54:42.163+0000:1585522482:2020-03-30T06:54:42.163+0000:Okay the maven plugin can know this if the Maven GAV groupId is org.apache.camel vs org.apache.camel.karaf
zregvart:1585538294:2020-03-30T11:18:14.905+0000:1585538294:2020-03-30T11:18:14.905+0000:The Antora docs are built from [camel-karaf/docs|https://github.com/apache/camel-karaf/tree/master/docs] there is a link on the frontpage and on the projects page."
0,CAMEL-14802,Task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Claus Ibsen,0,2,2020-03-26 16:19:26+00:00,2020-04-01 12:09:01+00:00,It would be good to have a CI job for JDK14 so we can keep an eye on how we are doing on the next LTS version of Java,acosentino:1585714100:2020-04-01T12:08:20.955+0000:1585714100:2020-04-01T12:08:20.955+0000:[https://builds.apache.org/job/Camel%20JDK14/job/master/1/console]
0,CAMEL-14801,Task,Major,None,3.4.0,"
None
",Closed,Fixed,3.4.0,Omar Al-Safi,Claus Ibsen,0,3,2020-03-26 16:18:14+00:00,2020-05-25 08:15:40+00:00,"Instead of freeform names for categorizing the components then lets look at getting this fixed to a limited number of known names we can put in some enum somewhere and have build checks to fail if not assigned to one of them.


Today you can see the list of free form named that are in used by building camel-catalog that prints a lot to the console.","omarsmak:1588667654:2020-05-05T16:34:14.174+0000:1588667654:2020-05-05T16:34:14.174+0000:[~davsclaus], if not mistaken, these freeform names are coming from the component labels, is that correct? If yes, so perhaps the  {{@Category}} will be only used to categorize the components only in camel-catalog, is that correct?
davsclaus:1588668161:2020-05-05T16:42:41.222+0000:1588668161:2020-05-05T16:42:41.222+0000:Yes from the label in uri endpoint, eg

@UriEndpoint(firstVersion = ""2.10.0"", scheme = ""freemarker"", title = ""Freemarker"", syntax = ""freemarker:resourceUri"", producerOnly = true, label = ""transformation"")

Then its transformation.

You can see all the distinct labels when building camel-catalog as it logs those to the console. So the idea is to reduce the number and enforce to use a limited set of labels so its easier for tooling and to organize on the website (eg if we get it more dynamic, so you can filter/search by category). Its a real pita today on the website, you cant search for ""database"" and find relevant components. 
omarsmak:1589422414:2020-05-14T10:13:34.693+0000:1589422414:2020-05-14T10:13:34.693+0000:We have almost 82 labels being used as component category: 
{code}
[INFO] 	Used component/endpoint options labels: 89
[INFO] 			Datamining
[INFO] 			ai
[INFO] 			api
[INFO] 			azure
[INFO] 			batch
[INFO] 			bigdata
[INFO] 			bitcoin
[INFO] 			blockchain
[INFO] 			cache
[INFO] 			chat
[INFO] 			chatscript
[INFO] 			cloud
[INFO] 			clustering
[INFO] 			cms
[INFO] 			compute
[INFO] 			computing
[INFO] 			container
[INFO] 			corda
[INFO] 			core
[INFO] 			crm
[INFO] 			data
[INFO] 			database
[INFO] 			datagrid
[INFO] 			deeplearning
[INFO] 			deployment
[INFO] 			document
[INFO] 			endpoint
[INFO] 			engine
[INFO] 			eventbus
[INFO] 			file
[INFO] 			hadoop
[INFO] 			hcm
[INFO] 			hl7
[INFO] 			http
[INFO] 			iot
[INFO] 			ipfs
[INFO] 			java
[INFO] 			ldap
[INFO] 			ledger
[INFO] 			location
[INFO] 			log
[INFO] 			mail
[INFO] 			management
[INFO] 			messaging
[INFO] 			mllp
[INFO] 			mobile
[INFO] 			mongodb
[INFO] 			monitoring
[INFO] 			mysql
[INFO] 			networking
[INFO] 			nosql
[INFO] 			openapi
[INFO] 			paas
[INFO] 			payment
[INFO] 			planning
[INFO] 			postgres
[INFO] 			printing
[INFO] 			process
[INFO] 			queue
[INFO] 			reactive
[INFO] 			reporting
[INFO] 			rest
[INFO] 			rpc
[INFO] 			rss
[INFO] 			sap
[INFO] 			scheduling
[INFO] 			script
[INFO] 			search
[INFO] 			security
[INFO] 			serverless
[INFO] 			sheets
[INFO] 			soap
[INFO] 			social
[INFO] 			spring
[INFO] 			sql
[INFO] 			sqlserver
[INFO] 			streams
[INFO] 			support
[INFO] 			swagger
[INFO] 			system
[INFO] 			tcp
[INFO] 			testing
[INFO] 			transformation
[INFO] 			udp
[INFO] 			validation
[INFO] 			voip
[INFO] 			webservice
[INFO] 			websocket
[INFO] 			workflow
{code}
omarsmak:1589424366:2020-05-14T10:46:06.457+0000:1589424366:2020-05-14T10:46:06.457+0000:[~davsclaus], would it make sense to just extend the existing {{@UriEndpoint}} with a new {{category}} field that takes array of valid enums instead of the {{label}} and then we can add a depecratrion note for the {{label}} field in favor of {{category}}, e.g:
{code:java}
@UriEndpoint(firstVersion = ""3.3.0"", scheme = ""azure-storage-blob"", title = ""Azure Storage Blob Service"", syntax = ""azure-storage-blob:containerName"", category = {Category.CLOUD, Category.FILE}){code}
Unless there is another reason which I am not aware of perhaps?
davsclaus:1589425640:2020-05-14T11:07:20.660+0000:1589425640:2020-05-14T11:07:20.660+0000:Yeah we can do that, and if there is a category then use that and ignore label.
omarsmak:1589425773:2020-05-14T11:09:33.592+0000:1589425773:2020-05-14T11:09:33.592+0000:Yes indeed, we can check for category first and then label which will give us backward compatibility not to break any component until we migrate all components to the new field"
0,CAMEL-14800,New Feature,Minor,None,Future,"

help-wanted

",Open,Unresolved,Future,Unassigned,Hiram R. Chirino,1,4,2020-03-26 15:38:40+00:00,2022-09-02 14:52:59+00:00,"In addition to Queries and Mutations, GraphQL, supports Subscriptions to notify the client of events in GraphQL engine.  These would map nicely to a camel consumer endpoint so that you can use subscriptions to trigger EIP processing in a camel route.","manaswinidas:1634779047:2021-10-21T09:17:27.931+0000:1634779047:2021-10-21T09:17:27.931+0000:Hi, I'm interested to contribute. Is anybody already working on this?
davsclaus:1635159808:2021-10-25T19:03:28.272+0000:1635159808:2021-10-25T19:03:28.272+0000:No, you are welcome to work on this"
0,CAMEL-14799,Task,Major,3.2.0,None,"
None
",Resolved,Fixed,3.2.0,Guillaume Nodet,Claus Ibsen,0,1,2020-03-26 13:02:08+00:00,2020-03-29 13:01:49+00:00,"To not forget


its in camel-karaf repo in components/blueprint.


The blueprint-main can reproduce this and it does not detect and start the rotues, you see 0 routes


2020-03-26 13:56:25,644 [t Dispatcher: 1] INFO  AbstractCamelContext           - Total 0 routes, of which 0 are started",
0,CAMEL-14798,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Unassigned,Matej Melko,0,3,2020-03-26 12:58:27+00:00,2020-03-30 12:30:21+00:00,"Currently camel-avro consist of two parts, avro dataformat and camel-avro component used for RPC. Separation could help to support avro at least partially as a native camel-quarkus extension.","mmelko:1585198731:2020-03-26T12:58:51.542+0000:1585198731:2020-03-26T12:58:51.542+0000:I will look at this
mmelko:1585203560:2020-03-26T14:19:20.182+0000:1585203560:2020-03-26T14:19:20.182+0000:[~cibsen@e-ma.net] [~acosentino] I have a question about naming convention: what would be better ? Leave {{camel-avro}} as dataformat and create {{camel-avro-rpc}} as component for rpc calls ? or create {{camel-avro-dataformat}} and leave {{camel-avro}} as component for rpc.
davsclaus:1585203676:2020-03-26T14:21:16.295+0000:1585203676:2020-03-26T14:21:16.295+0000:I would leave it for the dataformat as that is what its mainly used for.

Then we can rename the component from avro to avro-rpc so its clearly also separated.
acosentino:1585203722:2020-03-26T14:22:02.509+0000:1585203722:2020-03-26T14:22:02.509+0000:I think Avro is mainly used as dataformat so I would probably change to camel-avro as dataformat and camel-avro-ipc 
davsclaus:1585354153:2020-03-28T08:09:13.785+0000:1585354153:2020-03-28T08:09:13.785+0000:We then need to update camel-karaf features to have both of them. And also camel-spring-boot needs to regenerate the two components as starter JARs
davsclaus:1585354170:2020-03-28T08:09:30.427+0000:1585354170:2020-03-28T08:09:30.427+0000:And then also add note to the camel 3 upgrade guide doc"
0,CAMEL-14797,Bug,Major,None,,"
None
",Resolved,Fixed,None,Unassigned,Prerna Singh,0,2,2020-03-26 09:34:24+00:00,2020-04-01 09:00:39+00:00,"The search results of 'Quick Look up' in documentation section does not yield search results properly.


Here an extra arrow appears and also when we click that, it looks messed up. 


When we click the arrow near the search result which appeared, the whole search result disappears and then does not even appear if we write it again in the Quick Look up search bar.","zregvart:1585275769:2020-03-27T10:22:49.187+0000:1585275769:2020-03-27T10:22:49.187+0000:Yeah when did not have modules within the ""components"" Antora component and now we do, so there's extra markup that the [quick search JavaScript|https://github.com/apache/camel-website/blob/master/antora-ui-camel/src/js/05-nav-search.js] doesn't toggle.
psingh1999587:1585440294:2020-03-29T08:04:54.175+0000:1585440312:2020-03-29T08:05:12.230+0000:[~zregvart] 
 Created the PR #286 for this
zregvart:1585702839:2020-04-01T09:00:39.256+0000:1585702839:2020-04-01T09:00:39.256+0000:Thanks to [~psingh1999587] for the pull request."
0,CAMEL-14796,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-26 09:28:05+00:00,2020-03-27 05:26:31+00:00,Its due to catalog/pom.xml has a pom import scope on all components. Lets see if we can find a better way for this to control build order,
0,CAMEL-14795,Improvement,Major,3.2.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Unassigned,Franz Forsthofer,0,2,2020-03-26 07:13:19+00:00,2020-03-26 14:17:23+00:00,"camel-mail uses java-mail. Meanwhile java-mail does support OAuth for imap and smtp (see https://javaee.github.io/javamail/OAuth2). The OAuth access tokens typically expire. The current camel-mail component does not allow to dynamically read the password (=token), the password is fix set in the configuration. Therefore it is not possible to update the password/token.


We improve the camel-mail component so that it is possible to dynamically read the user and password/token, so that the OAuth use case can be supported.


Instead of setting the user and password on the configuration, you specify an authenticator bean in the configuration.  The authenticator method 


public PasswordAuthentication getPasswordAuthentication() 


will be called dynamically whenever a user/token (or password) is needed for connecting to the mail server.",davsclaus:1585203443:2020-03-26T14:17:23.136+0000:1585203443:2020-03-26T14:17:23.136+0000:Thanks for the PR
0,CAMEL-14794,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-26 06:18:45+00:00,2020-03-26 14:17:59+00:00,camel-weather is using the old EOL http client 3.1. We should upgrade to http client 4.x. Its okay to break compatability if some features will be lost etc.,davsclaus:1585191663:2020-03-26T11:01:03.170+0000:1585191663:2020-03-26T11:01:03.170+0000:TODO: upgrade karaf feature
0,CAMEL-14793,Improvement,Minor,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Marat Gubaidullin,0,1,2020-03-25 19:52:24+00:00,2020-03-26 14:18:58+00:00,"Camel-kafka default Producer parameter request.timeout.ms = 305000, however in Kafka documentation it is 30000. Also it was changed in https://issues.apache.org/jira/browse/KAFKA-7050",
0,CAMEL-14792,Bug,Major,None,None,"
None
",Resolved,Fixed,2.25.1,Grzegorz Grzybek,Grzegorz Grzybek,0,1,2020-03-25 17:02:41+00:00,2020-03-26 07:13:29+00:00,"With CAMEL-13468, OnExceptionDefinition.java lost exceptionClasses field and actual exception classes where converted in Java DSL into String objects - resolved later when exception processor was created.


This could (and actually did) cause problems in OSGi, when route was defined from different bundle (which had correct Import-Package headers generated by maven-bundle-plugin) than the bundle with actual route.


I have a fix that both keeps class names (for marshalling purpose) and actual classes (for OSGi).","ggrzybek:1585174096:2020-03-26T06:08:16.065+0000:1585174096:2020-03-26T06:08:16.065+0000:Because the initial reason I've created this issue is some exotic OSGi use case (helper methods to construct routes in one bundle, actual route constructed in another one), and because in Camel 3 exception names are used additionally in {{org.apache.camel.processor.errorhandler.ExceptionPolicy}} (names only, no classes), I'm fixing this problem only in 2.25.x.
ggrzybek:1585177145:2020-03-26T06:59:05.664+0000:1585177145:2020-03-26T06:59:05.664+0000:Fixed [here|https://github.com/apache/camel/commit/70e2ca3913226b4c532d80dbd2577d7d440439de] in camel-2.25.x branch."
0,CAMEL-14791,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-25 16:55:53+00:00,2020-03-26 21:41:43+00:00,"Broken link: are not detected by the xref-checker.


There may be missing id problems also.",djencks:1585230103:2020-03-26T21:41:43.207+0000:1585230103:2020-03-26T21:41:43.207+0000:PR merged
0,CAMEL-14790,Task,Major,3.2.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-03-25 14:56:49+00:00,2020-03-31 08:34:48+00:00,"Fix of https://issues.apache.org/jira/browse/CAMEL-14743 removes elytron-component (but functionality is kept as plugin into camel-undertow)


If fix is approved, elytron starter has to be removed to prevent compilation problems",jondruse:1585614865:2020-03-31T08:34:25.524+0000:1585614865:2020-03-31T08:34:25.524+0000:Starter was removed in https://github.com/apache/camel-spring-boot/commit/bed913177bb27b470a0a17728d092502e956eff5
0,CAMEL-14789,Bug,Major,2.25.0,"3.2.0, 2.25.1, 3.1.1","
None
",Resolved,Fixed,"3.2.0, 2.25.1, 3.1.1",Andrea Cosentino,Robert Szczesiak,0,2,2020-03-25 12:47:58+00:00,2020-03-26 14:03:50+00:00,"When Remote Procedure Call (RPC) communication pattern is used RabbitMQ Camel component creates server-named auto-deleted temporary reply queue. Next, the queue is bound to the exchange with routing key equal to queue name. Likewise, ReplyManager's replyTo field is set with the value of the queue name. Reply queue created in this manner is then reused for subsequent RPC requests and message property rabbitmq.REPLY_TO is copied from the value stored previously by ReplyManager.


When some network error suddenly appears causing connection failure, RabbitMQ's automatic recovery kicks in and tries to recover affected entities (assuming the connection was created with automatic recovery enabled, which is default.). As temporary quueues are auto-deleted, during recovery process a new temporary queue is created which has a new name that differs from the original one and here is where the problem begins.


Creation of the new temporary queue is NOT detected by ReplyManager and therefore replyTo property is NOT updated. Also, routing key no longer matches queue name. This causes a problem when some implementations of RabbitMQ client, like. Spring AMQP, are used server-site. RPC service receives our request, processes it, and replies to default exchange with routing key equal to rabbitmq.REPLY_TO sent in our request. RPC service provider perceives no problem as response is sent successfully but RabbitMQ Camel Component keeps awaiting for the response to arrive to the original temporary queue which no longer exists due to connection failure and recovery. Eventually, Camel throws ExchangeTimedOutException.


Example:



After automatic recovery, a RPC request is sent to example-exchange with rabitmq.REPLY_TO=amq.gen-0lLvpnj4ZMlkhxZIcCPVpA
After 20 seconds org.apache.camel.ExchangeTimedOutException is thrown:





The OUT message was not received within: 20000 millis due reply message with correlationID: Camel-ID-hostname-1583401848872-0-1690397 not received on destination: amq.gen-0lLvpnj4ZMlkhxZIcCPVpA. Exchange[ID-hostname-1583401848872-0-1690391]




Using RabbitMQ Management WebApp (rabbitmqctl) we check example-exchange's bindings and see that routing key amq.gen-0lLvpnj4ZMlkhxZIcCPVpA now corresponds to queue amq.gen-zaRCP-p-JbXeSzJmzSp83g



Proposed solution is to add QueueRecoveryListener to notify when temporary queue name changes due to recovery. On event, replyTo field will be updated with the new temporary queue name and the queue will be rebound to the exchange so that routing key matches queue name again. The change will be made to org.apache.camel.component.rabbitmq.reply#createListenerContainer.


Attached patch also contains integration test.","acosentino:1585116427:2020-03-25T14:07:07.565+0000:1585116427:2020-03-25T14:07:07.565+0000:Can you please create a PR on Github? It's usually easier to review, also you should do this against master and then we can backport on older branches.
rszczesiak:1585193082:2020-03-26T11:24:42.170+0000:1585193082:2020-03-26T11:24:42.170+0000:Thank you for your response. I made my changes to base upon master branch and created a Pull Request against it.

I hope you will find my contribution valuable.
acosentino:1585193555:2020-03-26T11:32:35.183+0000:1585193555:2020-03-26T11:32:35.183+0000:Thanks for your time. I'll merge your fix."
0,CAMEL-14788,Bug,Major,2.24.3,"3.2.0, 2.25.1","
None
",Resolved,Fixed,"3.2.0, 2.25.1",Claus Ibsen,Pedro Catalão,0,2,2020-03-25 12:00:29+00:00,2020-03-26 02:04:45+00:00,"When deploying a spring XML via Karaf containing the Jetty component such as:




<route id=""9de65790-5809-11ea-aafe-874a8d3d85de"">
 <from uri=""jetty:http://0.0.0.0:9000/test""/>
 <to uri=""activemq:ID_5e5520ab59931d2df0000203_test_9de65790-5809-11ea-aafe-874a8d3d85de""/>
 </route>
 <route id=""88ecf240-57d2-11ea-be9a-2d059f74df24"">
 <from uri=""activemq:ID_5e5520ab59931d2df0000203_test_9de65790-5809-11ea-aafe-874a8d3d85de""/>
 <to uri=""foobar""/>
 </route>



 


Got this exception:




java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/MultiPartFormDataCompliancejava.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/eclipse/jetty/server/MultiPartFormDataCompliance at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:?]Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.server.MultiPartFormDataCompliance not found by org.eclipse.jetty.server [251] 



  


While investigating found that Camel 2.24.3 uses Jetty 9.4.12.v20180830 which is affected by this issue: https://github.com/eclipse/jetty.project/issues/4350


 


This has been fixed in Jetty >= 9.4.25 by rolling back the explicit exclusion of MultiPartInputStreamParser","davsclaus:1585132136:2020-03-25T18:28:56.763+0000:1585132136:2020-03-25T18:28:56.763+0000:When you run with Karaf then the Jetty server/version is provided by Karaf. So you should upgrade it there.
davsclaus:1585132910:2020-03-25T18:41:50.855+0000:1585132910:2020-03-25T18:41:50.855+0000:Not sure how we can hack this in older releases. Jetty is really bad, 9.4.22 and 9.4.27 is incompatible. There is a change in some error handler throws exception that is not compilable :(

[ERROR] /Users/davsclaus/workspace/camel/components/camel-jetty-common/src/main/java/org/apache/camel/component/jetty/JettyHttpComponent.java:[1233,28] error: handle(String,Request,HttpServletRequest,HttpServletResponse) in <anonymous org.apache.camel.component.jetty.JettyHttpComponent$1> cannot override handle(String,Request,HttpServletRequest,HttpServletResponse) in ErrorHandler
[ERROR]   overridden method does not throw ServletException


davsclaus:1585133236:2020-03-25T18:47:16.301+0000:1585133236:2020-03-25T18:47:16.301+0000:Add OSGi workaround for older versions of Jetty
pedrocatalao:1585159426:2020-03-26T02:03:46.153+0000:1585159485:2020-03-26T02:04:45.702+0000:Hi [~cibsen@e-ma.net], thanks for looking into it. I'm not sure if I understand what you mean.

When I add Jetty directly to Karaf, I still get the exact same error :\
{code:java}
[INFO] Feature camel-jetty9/2.24.3 is defined as a boot feature
[INFO] adding maven artifact: mvn:org.eclipse.jetty/jetty-server/9.4.25.v20191220{code}
{code:java}
243 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: Http Utility
245 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: IO Utility
254 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: Server Core
258 │ Active │ 80 │ 9.4.25.v20191220 │ Jetty :: Utilities{code}
 

Shall I pinpoint {color:#0747a6}camel-jetty{color}'s version to a version prior to the issue or can you think of a better way to tackle this?

 

Thanks,

Pedro"
0,CAMEL-14787,Task,Minor,None,None,"
None
",Resolved,Fixed,3.2.0,Unassigned,Claus Ibsen,0,1,2020-03-25 10:08:43+00:00,2020-03-30 12:30:32+00:00,"But they work locally on my osx
https://builds.apache.org/job/Camel/job/master/lastCompletedBuild/testReport/org.apache.camel.component.zookeepermaster.group/GroupTest/testOrder/",davsclaus:1585102383:2020-03-25T10:13:03.311+0000:1585102383:2020-03-25T10:13:03.311+0000:Pushed an attempted fix as its when cleaning up that CI cannot delete a log file.
0,CAMEL-14786,Task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-03-25 06:20:13+00:00,2020-03-25 15:31:04+00:00,"The work done currently in the init phase will be moved to the build phase.
The start phase will be split between init for bean configuration / wiring, excluding any thread / network access and the start phase to actually start consuming and creating threads / sockets.",
0,CAMEL-14785,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-24 22:15:16+00:00,2020-03-25 05:32:45+00:00,No Desc,djencks:1585085565:2020-03-25T05:32:45.907+0000:1585085565:2020-03-25T05:32:45.907+0000:PR applied
0,CAMEL-14784,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-24 22:14:40+00:00,2020-03-25 05:33:41+00:00,No Desc,djencks:1585085621:2020-03-25T05:33:41.816+0000:1585085621:2020-03-25T05:33:41.816+0000:PR merged
0,CAMEL-14783,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-24 22:14:07+00:00,2020-03-26 21:40:59+00:00,add new source locations to production playbook,djencks:1585230059:2020-03-26T21:40:59.027+0000:1585230059:2020-03-26T21:40:59.027+0000:PR applied
0,CAMEL-14782,Bug,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,Andrea Cosentino,0,2,2020-03-24 21:17:01+00:00,2020-03-26 21:42:27+00:00,"The build is broken. It seems on the 2.x side. I think this is related to the latest commit by David.


 


Can you have a look, david_jencks@yahoo.com?","djencks:1585056797:2020-03-24T21:33:17.457+0000:1585056797:2020-03-24T21:33:17.457+0000:How do I find evidence of what is broken? 

 

How did you find my yahoo.com email :)?
acosentino:1585057088:2020-03-24T21:38:08.489+0000:1585057088:2020-03-24T21:38:08.489+0000:[https://builds.apache.org/blue/organizations/jenkins/Camel.website/detail/PR-266/1/pipeline]

 

Your email is listed in jira.. I don't know why
acosentino:1585057109:2020-03-24T21:38:29.864+0000:1585057109:2020-03-24T21:38:29.864+0000:And it'sassociated to your account
djencks:1585058336:2020-03-24T21:58:56.858+0000:1585058336:2020-03-24T21:58:56.858+0000:I think I forgot to update the production playbook with the new source locations.  PR soon.
djencks:1585062126:2020-03-24T23:02:06.220+0000:1585062126:2020-03-24T23:02:06.220+0000:Two of the 2.x broken links are because there are json files with no associated component.adoc files. They are

components/camel-reactor/target/classes/reactor.json

components/camel-cm-sms/target/classes/org/apache/camel/component/cm/cm-sms.json

or, in the catalog,

platforms/camel-catalog/target/classes/org/apache/camel/catalog/others/reactor.json

platforms/camel-catalog/target/classes/org/apache/camel/catalog/components/cm-sms.json

 

This suggests that running the master tooling on the 2.x branch may not be without problems.

I'm going to manually delete the corresponding index entries.
djencks:1585230147:2020-03-26T21:42:27.710+0000:1585230147:2020-03-26T21:42:27.710+0000:All problems I know about are fixed."
0,CAMEL-14781,Improvement,Major,None,,"
None
",Closed,Abandoned,None,Unassigned,Solange Iyubu,0,2,2020-03-24 14:14:25+00:00,2020-04-07 02:47:42+00:00,Some pages do not have breadcrumps such as security,"siyubu:1585124583:2020-03-25T16:23:03.705+0000:1585124583:2020-03-25T16:23:03.705+0000:I am working on this issue
siyubu:1585157466:2020-03-26T01:31:06.775+0000:1585157466:2020-03-26T01:31:06.775+0000:how may I access .html files for example to access support.html displayed when  https://camel.apache.org/community/support/ is clicked
zregvart:1585276101:2020-03-27T10:28:21.521+0000:1585276101:2020-03-27T10:28:21.521+0000:There are two generators generating the HTML content published for the website [Hugo|https://gohugo.io/] and [Antora|https://antora.org/], we have this documented in the website [README.md|https://github.com/apache/camel-website/blob/master/README.md]. Only Antora built content (the documentation) has breadcrumbs. I'm not sure we need breadcrumbs but I'll entertain the notion that we might. For that the changes need to go to Hugo layouts. We would need a partial that we could add to some of the layouts (we don't need breadcrumbs on the front page for example).
siyubu:1585277340:2020-03-27T10:49:00.072+0000:1585277340:2020-03-27T10:49:00.072+0000:How about navigation bar at right side of the page, also some pages don't
have it
*Solange Iyubu*

Student

Carnegie Mellon University in Africa

Tel: +250 785 562 715


On Fri, Mar 27, 2020 at 12:29 PM Zoran Regvart (Jira) <jira@apache.org>


zregvart:1585538418:2020-03-30T11:20:18.293+0000:1585538418:2020-03-30T11:20:18.293+0000:[~siyubu] feel free to experiment, you can post mockups here first if that's easier for you to get feedback.
siyubu:1585894210:2020-04-03T14:10:10.126+0000:1585894210:2020-04-03T14:10:10.126+0000:I have been able to build camel website locally and I found .html files into public folder. however, from the readme I learnt that changing support page I have to refer to content folder, in content folder there are .md file. There is a way I may add a breadcramps on an .md file? In summary, How do I add a partial on html page.

siyubu:1585926860:2020-04-03T23:14:20.656+0000:1585926860:2020-04-03T23:14:20.656+0000:
I am trying to add the breadcrumps manually to the support index.html found in public community before I put it into a partial. But when I run yarn build and yarn preview the old support index.html is rebuilt and I can't find any of my changes.  !breadcrumps not showing.JPG! "
0,CAMEL-14780,Bug,Major,3.2.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-03-24 14:07:17+00:00,2020-03-25 18:27:43+00:00,"During refactor of camel-elytron to implement UndertowSecurityProvider I've noticed that API does not allow to change of the HttpHandler during endpoint registration. This ""hook"" for security provider is required for camel-elytron. 


(Change could be done without breaking back compatibility or compilation for existing implementations.)",
0,CAMEL-14779,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-24 13:40:11+00:00,2020-03-24 14:31:10+00:00,"karaf@root()> start 114
Error executing command: Error executing command on bundles:
	Error starting bundle 114: Uses constraint violation. Unable to resolve resource org.apache.camel.camel-main [org.apache.camel.camel-main [114](R 114.0)] because it exports package 'org.apache.camel' and is also exposed to it from resource org.apache.camel.camel-api [org.apache.camel.camel-api [52](R 52.0)] via the following dependency chain:


  org.apache.camel.camel-main [org.apache.camel.camel-main [114](R 114.0)]
    import: (&(osgi.wiring.package=org.apache.camel.builder)(version>=3.2.0)(!(version>=3.3.0)))










    export: osgi.wiring.package=org.apache.camel.builder; uses:=org.apache.camel
  org.apache.camel.camel-core-engine [org.apache.camel.camel-core-engine [61](R 61.0)]
    import: (&(osgi.wiring.package=org.apache.camel)(version>=3.2.0)(!(version>=4.0.0)))










    export: osgi.wiring.package: org.apache.camel
  org.apache.camel.camel-api [org.apache.camel.camel-api [52](R 52.0)] Unresolved requirements: [[org.apache.camel.camel-main [114](R 114.0)] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel.builder)(version>=3.2.0)(!(version>=3.3.0)))]",
0,CAMEL-14778,Improvement,Major,None,3.18.0,"
None
",Resolved,Fixed,3.18.0,Freeman Yue Fang,Claus Ibsen,1,2,2020-03-24 12:39:21+00:00,2022-06-29 13:05:22+00:00,We have moved OSGi blueprint out. We could look at moving spring out (spring xml) as that could potentially make camel-cxf lighter,"javaduke:1649766657:2022-04-12T20:30:57.208+0000:1649766657:2022-04-12T20:30:57.208+0000:This is very important, looks like a blocker for my camel-quarkus-cxf efforts. CxfEndpointUtils requires Spring, and adding Spring to dependency breaks native image build. Please expedite as possible."
0,CAMEL-14777,Task,Minor,3.2.0,3.5.0,"
None
",Resolved,Fixed,3.5.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-03-24 12:21:53+00:00,2020-07-01 15:43:51+00:00,"From Debezium 1.1.0, the current EmbeddedEngine is being deprecated and replaced with Debezium API as mentioned here.
 Since in Camel we are using the EmbeddedEngine, we will need to migrate it to the new APIs, preferably before Debezium version 1.3.0. 


Also, it would make sense if we can see if we can utilize the converter support in DBZ 1.2 per this Jira ticket  in camel-debezium components",
0,CAMEL-14776,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Andrea Cosentino,0,1,2020-03-24 12:02:42+00:00,2020-03-24 16:41:47+00:00,No Desc,
0,CAMEL-14775,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-24 10:33:39+00:00,2020-03-24 12:36:53+00:00,No Desc,davsclaus:1585024080:2020-03-24T12:28:00.773+0000:1585024080:2020-03-24T12:28:00.773+0000:Also moved cxf-transport into cxf-transport-blueprint
0,CAMEL-14774,Task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-03-24 09:03:44+00:00,2020-03-24 09:43:30+00:00,"We need to add an option to prepareComponentMojo to avoid the SyncPom execution on external project.


 


https://github.com/apache/camel/blob/master/tooling/maven/camel-package-maven-plugin/src/main/java/org/apache/camel/maven/packaging/PrepareComponentMojo.java#L150",
0,CAMEL-14773,Task,Minor,3.1.0,3.2.0,"
None
",Closed,Fixed,3.2.0,Omar Al-Safi,Omar Al-Safi,0,1,2020-03-24 08:38:46+00:00,2020-03-24 12:46:01+00:00,Per titile,
0,CAMEL-14772,Improvement,Major,None,3.x,"

help-wanted

",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,5,2020-03-24 08:18:11+00:00,2020-04-08 16:44:34+00:00,"We should take this tweet with screenshot, and put on the front page to better highlight the Camel projects we have
https://twitter.com/ApacheCamel/status/1242074457050624000","davsclaus:1585009223:2020-03-24T08:20:23.803+0000:1585009223:2020-03-24T08:20:23.803+0000:For example instead of the section we have today that lists the projects that are just text based. Then replace it with the 2 x 3 layout as in the screenshot, and make them clickable so when you click each of them you get to the ""read the docs"" for that project.
jyotiattri:1585014647:2020-03-24T09:50:47.814+0000:1585014647:2020-03-24T09:50:47.814+0000: I want to work on this. Can I take this issue?
jyotiattri:1585015539:2020-03-24T10:05:39.074+0000:1585016038:2020-03-24T10:13:58.805+0000:Just to clarify we need to replace the whole section that shows the list of projects and links to the resources for the projects with the new one that looks like the one in the tweet. 

 
davsclaus:1585017819:2020-03-24T10:43:39.521+0000:1585017819:2020-03-24T10:43:39.521+0000:Yes
jyotiattri:1585018677:2020-03-24T10:57:57.179+0000:1585018744:2020-03-24T10:59:04.800+0000:Ok, Thanks for the input. I will work on it.
jyotiattri:1585042732:2020-03-24T17:38:52.529+0000:1585042732:2020-03-24T17:38:52.529+0000:Hi [~davsclaus] I have one question regarding the images that we are showing for each project.
We have the camel logo and the logo of the other project for each project.
I am not sure if I have to use two images (one for the camel logo and another for the project) for each project or combine both of them into a single image?
@pooja_y:1585049149:2020-03-24T19:25:49.828+0000:1585049149:2020-03-24T19:25:49.828+0000:Hi [~davsclaus], I am searching for an good first issue. can i also work on it?
davsclaus:1585087667:2020-03-25T06:07:47.797+0000:1585087667:2020-03-25T06:07:47.797+0000:For the logos then use what is the best practice. They are individual logos so if its possible to use two and place then next to each other then do so. Otherwise you would have to create your own set of combo and put them together as a single logo.


jyotiattri:1585089159:2020-03-25T06:32:39.870+0000:1585089159:2020-03-25T06:32:39.870+0000:Hi [~@pooja_y], I am already working on this, just don't want that we duplicate work. I am adding the section as listed in the description above.
jyotiattri:1585089177:2020-03-25T06:32:57.832+0000:1585089177:2020-03-25T06:32:57.832+0000:[~davsclaus], Thanks

aashnajena:1585270679:2020-03-27T08:57:59.201+0000:1585270679:2020-03-27T08:57:59.201+0000:Hi! Can I help on this?
zregvart:1585472542:2020-03-29T17:02:22.731+0000:1585472542:2020-03-29T17:02:22.731+0000:See the linked pull request.
jyotiattri:1585507605:2020-03-30T02:46:45.793+0000:1585507605:2020-03-30T02:46:45.793+0000:Hi [~davsclaus], Can you please help me with the high-resolution images that are used in this tweeter image.
davsclaus:1585533448:2020-03-30T09:57:28.132+0000:1585533448:2020-03-30T09:57:28.132+0000:The logos are from different open source projects. 

Apache Kafka
https://svn.apache.org/repos/asf/kafka/site/logos/

Apache Karaf
https://cwiki.apache.org/confluence/display/KARAF/Logo

Spring Boot
https://developer.ibm.com/zsystems/wp-content/uploads/sites/75/2018/05/icon-spring-boot.jpg

Quarkus
https://quarkus.io/blog/quarkus-has-a-new-logo/
https://github.com/quarkusio/quarkus/blob/master/docs/src/main/resources/theme/images/quarkus-logo.svg

Knative
https://github.com/knative/docs/tree/master/docs/images/logo
davsclaus:1585533509:2020-03-30T09:58:29.334+0000:1585533509:2020-03-30T09:58:29.334+0000:Apache Camel
https://github.com/apache/camel-website/blob/master/antora-ui-camel/src/img/logo-d.svg
jyotiattri:1585533674:2020-03-30T10:01:14.967+0000:1585533713:2020-03-30T10:01:53.773+0000:[~davsclaus], Thanks for the help."
0,CAMEL-14771,Improvement,Major,3.1.0,3.x,"
None
",Closed,Won't Fix,3.x,David Jencks,David Jencks,0,1,2020-03-23 21:31:09+00:00,2020-05-08 23:02:00+00:00,"The 3.0.x branch includes the tooling needed to construct the components component index pages, but the 2.x branch does not.  Some slight modification and configuration of the master branch tooling allow it to be used for the 2.x index pages.  The modifications are roughly:



excluding some json files that are not intended for the catalog
changing some parameter names that are shared across mojos but have different meanings, so that they may be configured.



I don't know if this is a good idea or not.  I only changed the one name that conflicts, but if we decide to do this changing some more would be a good idea.",djencks:1588950120:2020-05-08T23:02:00.236+0000:1588950120:2020-05-08T23:02:00.236+0000:I'm taking a different approach to generating tables in 2.x
0,CAMEL-14770,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,3,2020-03-23 21:25:44+00:00,2020-03-27 18:26:10+00:00,The nav files are sorted by file name whereas the index page tables are sorted by doc title (case insensitive).  I already fixed this for the 2.x and 3.0.x components website versions.,"siyubu:1585281092:2020-03-27T11:51:32.497+0000:1585281092:2020-03-27T11:51:32.497+0000:I am working on this issue
djencks:1585293880:2020-03-27T15:24:40.889+0000:1585293880:2020-03-27T15:24:40.889+0000:I think I fixed this with the associated PR and just forgot to resolve the issue.  Is there anything left to do?
siyubu:1585301445:2020-03-27T17:30:45.926+0000:1585301445:2020-03-27T17:30:45.926+0000:Whenever I try to build the camel website using  mvnw.cmd clean install or mvn clean install -Pfastinstall
I am getting the error of maven failing to execute maven-surefire-plugin:3.0.0-M4. any help?
acosentino:1585304770:2020-03-27T18:26:10.241+0000:1585304770:2020-03-27T18:26:10.241+0000:This is already fixed and resolved "
0,CAMEL-14769,Task,Major,3.x,,"

help-wanted

",Closed,Fixed,None,Unassigned,Praveen Kottarathil,0,5,2020-03-23 19:14:28+00:00,2020-07-02 19:14:45+00:00,"I was looking at the JMX docs at https://camel.apache.org/manual/latest/jmx.html


and noticed that the left and right margins for `article.doc` doesn't work well on large screens and wastes quite a lot of available screen real estate as shown in the screen shot (Test setup is a 4K display). Very likely this impacts all pages and not just the JMX page. Just that it is very evident here. 


 





 


Extra attachment: Box model so that an assignee can get started quick.","avgupt:1584994573:2020-03-24T04:16:13.500+0000:1584994573:2020-03-24T04:16:13.500+0000:I am working on this issue.
Amycruz:1585501074:2020-03-30T00:57:54.383+0000:1585501572:2020-03-30T01:06:12.578+0000:I am an outreach applicant, working on this issue
shreya_agarwal:1587712109:2020-04-24T15:08:29.656+0000:1587712109:2020-04-24T15:08:29.656+0000:[~zregvart] I cannot find html page related to this issue. Please help me by telling the file name.

Thankyou!
zregvart:1588126774:2020-04-29T10:19:34.263+0000:1588126774:2020-04-29T10:19:34.263+0000:[~shreya_agarwal] we have a pull request by [~avgupt] at [#271|https://github.com/apache/camel-website/pull/271]
shreya_agarwal:1588163599:2020-04-29T20:33:19.640+0000:1588163599:2020-04-29T20:33:19.640+0000: oh ok ! sorry I didn't notice that.
zregvart:1593686305:2020-07-02T18:38:25.798+0000:1593686305:2020-07-02T18:38:25.798+0000:I think this is now fixed, please reopen if you still find this to be an issue.
praveenkottarathil@gmail.com:1593688454:2020-07-02T19:14:14.782+0000:1593688454:2020-07-02T19:14:14.782+0000:Yes. Its perfect now! Thanks to everyone who contributed fixes.

!camel-14769.PNG|width=2222,height=1135!"
0,CAMEL-14768,Bug,Major,None,None,"
None
",Resolved,Fixed,3.2.0,David Jencks,Andrea Cosentino,0,2,2020-03-22 12:18:15+00:00,2020-03-22 22:34:23+00:00,"in the website we have an htaccess file for redirecting from the old website, we moved a bunch of stuff in the last days, David, can you please double check the links are correct? The EIP ones are wrong for sure.",djencks:1584887663:2020-03-22T22:34:23.504+0000:1584887663:2020-03-22T22:34:23.504+0000:Resolved with PR https://github.com/apache/camel-website/pull/259
0,CAMEL-14767,Bug,Major,None,None,"
None
",Resolved,Fixed,3.2.0,David Jencks,Andrea Cosentino,0,2,2020-03-22 12:03:35+00:00,2020-03-23 11:24:58+00:00,"11:04:10  $ link-checker --disable-external --mkdocs --allow-hash-href public*11:05:07*  page not found from components/latest/eips/enterprise-integration-patterns.html to components/latest/eips/_attachments/Hohpe_EIP_camel_20150622.zip*11:05:07*  page not found from components/latest/eips/enterprise-integration-patterns.html to components/latest/eips/_attachments/Hohpe_EIP_camel_OpenOffice.zip*11:05:07*  page not found from community/articles/index.html to manual/latest/enterprise-integration-patterns.html
 


David, can you please have a look, this looks to be related to your last commits","acosentino:1584849916:2020-03-22T12:05:16.611+0000:1584849916:2020-03-22T12:05:16.611+0000:[https://builds.apache.org/view/C/view/Apache%20Camel/job/Camel.website/job/master/708/console]
acosentino:1584859214:2020-03-22T14:40:14.296+0000:1584859214:2020-03-22T14:40:14.296+0000:I fixed this.
djencks:1584862173:2020-03-22T15:29:33.608+0000:1584862173:2020-03-22T15:29:33.608+0000:Since the attachments actually exist, wouldn't it be better to move them and have correct links?
acosentino:1584862350:2020-03-22T15:32:30.036+0000:1584862350:2020-03-22T15:32:30.036+0000:I don't it's critical. If you have time to reintroduce those links, you're welcome to do it
djencks:1584869481:2020-03-22T17:31:21.545+0000:1584869481:2020-03-22T17:31:21.545+0000:Lets move the attachments to fix the links."
0,CAMEL-14766,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-22 01:25:12+00:00,2020-03-23 21:23:35+00:00,Rearrange website source in the 3.0.x branch for the components component to imitate 'latest' (master) branch.,"djencks:1584969627:2020-03-23T21:20:27.675+0000:1584969627:2020-03-23T21:20:27.675+0000:Preview at [https://camel-preview-1.s3-us-west-2.amazonaws.com/index.html]

Beware, indexified urls in links don't work, you'll need to add the ""index.html"" yourself.
djencks:1584969815:2020-03-23T21:23:35.753+0000:1584969815:2020-03-23T21:23:35.753+0000:PR merged"
0,CAMEL-14735,Improvement,Major,None,,"
None
",Closed,Duplicate,None,Unassigned,Kirill Yankov,0,1,2020-03-18 09:34:55+00:00,2020-03-18 09:36:54+00:00,No Desc,"manonthegithub:1584495396:2020-03-18T09:36:36.527+0000:1584495396:2020-03-18T09:36:36.527+0000:closing as duplicate, sorry"
0,CAMEL-14734,Improvement,Major,None,None,"

help-wanted

",Resolved,Fixed,3.2.0,Unassigned,Claus Ibsen,0,2,2020-03-18 08:55:46+00:00,2020-03-18 16:50:09+00:00,No Desc,manonthegithub:1584495483:2020-03-18T09:38:03.203+0000:1584495483:2020-03-18T09:38:03.203+0000:I'll try to do it 
0,CAMEL-14733,Bug,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Unassigned,Hemang Ajmera,0,3,2020-03-18 05:32:27+00:00,2020-03-20 13:47:31+00:00,"We were migrating the salesforce component code from version 2.24.2 to version 3.1.0. However we are getting error 




Caused by: org.apache.camel.PropertyBindingException: Error binding property (camel.component.salesforce.httpclientproperties.requestbuffersize=65536) with name: httpclientproperties.requestbuffersize on bean: org.apache.camel.component.salesforce.SalesforceComponent@497cd25 with value: 65536




Earlier also there was issue with Map properties, which was raised in CAMEL-13770 and it was fixed by commit https://github.com/apache/camel/commit/2566504f56212b87ff5532a181cb85dfc00f2286


This seems to be new issue.","hemangajmera:1584489334:2020-03-18T07:55:34.758+0000:1584489334:2020-03-18T07:55:34.758+0000:The code base uploaded in CAMEL-13766 can be used to reproduce this error
hemangajmera:1584489459:2020-03-18T07:57:39.793+0000:1584489459:2020-03-18T07:57:39.793+0000:[~cibsen@e-ma.net], Can you please look into this issue, since you have fixed CAMEL-13770.
davsclaus:1584492068:2020-03-18T08:41:08.653+0000:1584492068:2020-03-18T08:41:08.653+0000:Try with master branch for Camel 3.2.0 release
davsclaus:1584497706:2020-03-18T10:15:06.708+0000:1584497706:2020-03-18T10:15:06.708+0000:Works with 3.2, see screenshot
hemangajmera:1584499638:2020-03-18T10:47:18.791+0000:1584499638:2020-03-18T10:47:18.791+0000:can you please share the apache repo url from where I can use the snapshot jar. That way I dont have to download and built the entire source code.
davsclaus:1584568044:2020-03-19T05:47:24.516+0000:1584568044:2020-03-19T05:47:24.516+0000:apache snapshot maven repo
http://repository.apache.org/snapshots/

hemangajmera:1584584291:2020-03-19T10:18:11.354+0000:1584584322:2020-03-19T10:18:42.349+0000:I am not sure how the entire build works on master branch, but there is no version 3.2.0-SNAPSHOT for salesforce starter component at https://repository.apache.org/content/groups/snapshots/org/apache/camel/springboot/camel-salesforce-starter/

acosentino:1584584619:2020-03-19T10:23:39.432+0000:1584584619:2020-03-19T10:23:39.432+0000:Build the code by yourself. First build camel branch master, then build camel-spring-boot master.
hemangajmera:1584682326:2020-03-20T13:32:06.230+0000:1584682326:2020-03-20T13:32:06.230+0000:After 1 day of execution, I finally got build error. 


{code}
[ERROR] Failed to execute goal on project camel-kudu: Could not resolve dependencies for project org.apache.camel:camel-kudu:jar:3.2.0-SNAPSHOT: Failure to find org.apache.kudu:kudu-binary:jar:windows-x86_64:1.10.0 in https://repo1.maven.org/maven2/ was cached in the local repository, resolution will not be reattempted until the update interval of central has elapsed or updates are forced -> [Help 1]
{code}

acosentino:1584682828:2020-03-20T13:40:28.925+0000:1584682828:2020-03-20T13:40:28.925+0000:It doesn't exist for Windows [https://repo1.maven.org/maven2/org/apache/kudu/kudu-binary/1.10.0/]
hemangajmera:1584683081:2020-03-20T13:44:41.412+0000:1584683081:2020-03-20T13:44:41.412+0000:I dont have any OS to work with :(

I am still curious on why jenkins is not generated all snapshot jar.
acosentino:1584683251:2020-03-20T13:47:31.547+0000:1584683251:2020-03-20T13:47:31.547+0000:We can't do the deploy phase actually. We first need to build Camel as snapshot and the we may need to run the Spring Boot build with the latest snapshot and do the deploy, actually we don't have a pipeline for this. "
0,CAMEL-14732,Improvement,Minor,None,None,"
None
",Resolved,Fixed,None,Unassigned,Aemie,0,1,2020-03-18 03:48:12+00:00,2020-03-26 16:17:27+00:00,"It has been observed that for certain pages where the content is minimal, the footer is not fixed to the bottom of the page in the desktop version. 


 


The properties of the footer must be changed such that it remains at the bottom of the page for all the webpages.",zregvart:1585210647:2020-03-26T16:17:27.655+0000:1585210647:2020-03-26T16:17:27.655+0000:Thanks to [~Aemie] for the pull request.
0,CAMEL-14731,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-17 23:02:33+00:00,2020-03-22 00:08:55+00:00,task for playbook changes.,"djencks:1584468358:2020-03-18T02:05:58.882+0000:1584468358:2020-03-18T02:05:58.882+0000:See PR [https://github.com/apache/camel-website/pull/230.] This cannot be used or tested until  the PRs for https://issues.apache.org/jira/browse/CAMEL-14728 and  https://issues.apache.org/jira/browse/CAMEL-14729 and https://issues.apache.org/jira/browse/CAMEL-14731 are merged.  Before then build against the branches supplying the PRs with  the antora-playbook.yml from [https://github.com/djencks/camel-website.git] branch issue-14698-rearrange-adocs.
djencks:1584806935:2020-03-22T00:08:55.084+0000:1584806935:2020-03-22T00:08:55.084+0000:PR merged"
0,CAMEL-14730,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-17 23:01:33+00:00,2020-03-22 00:08:38+00:00,task for 2.x branch components website source rearrangement,"djencks:1584468175:2020-03-18T02:02:55.995+0000:1584468175:2020-03-18T02:02:55.995+0000:See PR https://github.com/apache/camel/pull/3648.  This must be built in combination with the PRs for https://issues.apache.org/jira/browse/CAMEL-14728 and https://issues.apache.org/jira/browse/CAMEL-14729 but, until merged, NOT that for https://issues.apache.org/jira/browse/CAMEL-14731.  Build with  the antora-playbook.yml from [https://github.com/djencks/camel-website.git] branch issue-14698-rearrange-adocs.
djencks:1584806918:2020-03-22T00:08:38.339+0000:1584806918:2020-03-22T00:08:38.339+0000:PR merged"
0,CAMEL-14729,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-17 23:00:33+00:00,2020-03-22 00:08:19+00:00,task for 3.0.x website components.,"djencks:1584468129:2020-03-18T02:02:09.187+0000:1584468129:2020-03-18T02:02:09.187+0000:See PR [https://github.com/apache/camel/pull/3647.]  This must be built in combination with the PRs for https://issues.apache.org/jira/browse/CAMEL-14728 and https://issues.apache.org/jira/browse/CAMEL-14730 but, until merged, NOT that for https://issues.apache.org/jira/browse/CAMEL-14731.  Build with  the antora-playbook.yml from [https://github.com/djencks/camel-website.git] branch issue-14698-rearrange-adocs.
djencks:1584806899:2020-03-22T00:08:19.611+0000:1584806899:2020-03-22T00:08:19.611+0000:PR merged"
0,CAMEL-14728,Sub-task,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,1,2020-03-17 22:59:27+00:00,2020-03-22 00:07:19+00:00,sub task for master branch PR.,"djencks:1584468042:2020-03-18T02:00:42.481+0000:1584468042:2020-03-18T02:00:42.481+0000:See PR [https://github.com/apache/camel/pull/3646.] This must be built in combination with the PRs for https://issues.apache.org/jira/browse/CAMEL-14729 and https://issues.apache.org/jira/browse/CAMEL-14730 but, until merged, NOT that for https://issues.apache.org/jira/browse/CAMEL-14731.  Build with  the antora-playbook.yml from [https://github.com/djencks/camel-website.git] branch issue-14698-rearrange-adocs.
djencks:1584806839:2020-03-22T00:07:19.837+0000:1584806839:2020-03-22T00:07:19.837+0000:PR merged"
0,CAMEL-14727,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,1,2020-03-17 15:42:07+00:00,2020-03-18 09:05:47+00:00,Its not a real camel component but some cdi magic that is causing pain.,
0,CAMEL-14726,Improvement,Minor,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,James Netherton,James Netherton,0,1,2020-03-17 09:50:06+00:00,2020-03-18 07:20:21+00:00,"There's a 4.x version of the Mongo Java drivers available. Some projects (like Quarkus) are already proposing to upgrade. It'd be good if Camel can do likewise.


Initially, to minimise the effort required to upgrade, I was planning to use mongodb-driver-legacy. 


Eventually it'd be good to remove dependencies on legacy APIs as mentioned in CAMEL-14423.",
0,CAMEL-14725,Improvement,Trivial,3.1.0,,"

help-wanted

",Resolved,Auto Closed,None,Unassigned,gunkev,0,3,2020-03-16 16:47:42+00:00,2021-11-18 11:26:08+00:00,Elements in the navigation bar are slightly downward. some line-height or any other method should be applied in order to center the elements vertically.,"Gunkev:1584352023:2020-03-16T17:47:03.376+0000:1584352023:2020-03-16T17:47:03.376+0000:Hello I have worked on that and I did send a pull request to the camel apache website
Gunkev:1584685520:2020-03-20T14:25:20.454+0000:1584685520:2020-03-20T14:25:20.454+0000:navbar look good now
acosentino:1584686432:2020-03-20T14:40:32.346+0000:1584686513:2020-03-20T14:41:53.209+0000:This is not fixed. The Pull request is not merged. Don't resolve it until we merge.
davsclaus:1637205968:2021-11-18T11:26:08.587+0000:1637205968:2021-11-18T11:26:08.587+0000:website has been improved since"
0,CAMEL-14724,Bug,Minor,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Unassigned,Mikhail Lukyanov,0,2,2020-03-16 13:12:32+00:00,2020-03-16 19:02:04+00:00,"In camel-swagger-java, for this service


 


<rest id=""4f777f7b-f2fd-4107-8271-a50640d4525c"" path=""/path"" produces=""application/json"">
 <get id=""026ea872-e2f8-4772-8d10-6482b8549f11"" 
 produces=""application/json"" uri=""/get"">
 <description/>
 <responseMessage message=""OK"" code=""200"" />
 <to uri=""direct-vm://restLink""/>
 </get>
 <get id=""247f814f-5970-4cc1-975d-374195ff9b42"" 
 produces=""application/json"" uri=""/get2"">
 <description/>
 <responseMessage message=""OK"" code=""200"" />
 <to uri=""direct-vm://restLink""/>
 </get>
 </rest>


 
 I get next swagger.json, which does not pass validation because 


Semantic error at paths./path/get2.get.operationId


Operations must have unique operationIds.
  
  


{ ""swagger"" : ""2.0"", ""info"" :


{ ""version"" : ""1.0"", ""title"" : ""REST API"" }


, ""host"" : ""0.0.0.0:9090"", ""basePath"" : ""/fesb-rest"", ""tags"" : [ { ""name"" : ""path"" } ], ""schemes"" : [ ""http"", ""https"" ], ""paths"" : { ""/path/get"" : { ""get"" : { ""tags"" : [ ""path"" ], ""summary"" : """", ""operationId"" : ""4f777f7b-f2fd-4107-8271-a50640d4525c"", ""produces"" : [ ""application/json"" ], ""responses"" : { ""200"" : { ""description"" : ""OK"" } } } }, ""/path/get2"" : { ""get"" : { ""tags"" : [ ""path"" ], ""summary"" : """", ""operationId"" : ""4f777f7b-f2fd-4107-8271-a50640d4525c"", ""produces"" : [ ""application/json"" ], ""responses"" : { ""200"" : { ""description"" : ""OK"" } } } } } }
  
  I need the id of the methods and not the service to be used, while the service id should remain
  I looked at the code and found the following in the class RestSwaggerReader. 


 


String operationId = (String)Optional.ofNullable(rest.getId()).orElse(routeId);
 op.operationId(operationId);",davsclaus:1584356524:2020-03-16T19:02:04.253+0000:1584356524:2020-03-16T19:02:04.253+0000:Also fixed for openapi
0,CAMEL-14723,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Luca Burgazzoli,Luca Burgazzoli,0,2,2020-03-16 12:17:45+00:00,2020-03-17 05:21:20+00:00,"Assuming we have a route defined like:




import org.apache.camel.builder.RouteBuilder;

public class Called extends RouteBuilder {
  @Override
  public void configure() throws Exception {
    restConfiguration();

    rest().get(""/"")
      .route()
      .setBody().constant(""Ciao"");
  }
}




Then any rest property like camel.rest.port=8080 is ignored and overridden by an empty RestConfiguration see RouteBuilder::populateRests


It would be nice if the properties could be propagated to any `RestConfiguration`",
0,CAMEL-14722,Bug,Minor,3.1.0,"3.2.0, 3.1.1","
None
",Resolved,Fixed,"3.2.0, 3.1.1",Andrea Cosentino,Luca Burgazzoli,0,2,2020-03-16 09:11:07+00:00,2020-03-16 10:07:26+00:00,"When using the telegram component, I see the following message spawned ont he console every now and then:



 
WARN  [org.apa.cam.com.tel.ser.TelegramServiceRestBotAPIAdapter] (Camel (camel-1) thread #0 - telegram://bots) Received body for GET https://api.telegram.org/...",acosentino:1584321452:2020-03-16T09:17:32.855+0000:1584321452:2020-03-16T09:17:32.855+0000:I'll set this as trace.
0,CAMEL-14721,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Won't Fix,3.2.0,Andrea Cosentino,Leonardo Vasconcellos,0,3,2020-03-15 18:38:54+00:00,2020-03-20 06:53:55+00:00,"Include confluents schema registry parameters key.subject.name.strategy and value.subject.name.strategy as possible configurations so we can consume/produce topics in which schemas are stored using different strategies. 


https://docs.confluent.io/current/schema-registry/serializer-formatter.html


https://karengryg.io/2018/08/18/multi-schemas-in-one-kafka-topic/","omarsmak:1584319145:2020-03-16T08:39:05.467+0000:1584319169:2020-03-16T08:39:29.175+0000:Is this really necessary since camel-kafka includes a {{additionalProperties}} configuration that allows you to add these kind of properties, e.g: {{additionalProperties.key.subject.name.strategy=keyname&additionalProperties.value.subject.name.strategy=valuename}}. More at the docs: https://camel.apache.org/components/latest/kafka-component.html#_options
acosentino:1584319484:2020-03-16T08:44:44.099+0000:1584319484:2020-03-16T08:44:44.099+0000:Exactly.
LeonardoZV:1584658435:2020-03-20T06:53:55.017+0000:1584658435:2020-03-20T06:53:55.017+0000:Oh, shame on me! Didn't see that option... Thanks guys!"
0,CAMEL-14720,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-15 09:11:25+00:00,2020-03-15 10:55:31+00:00,We can move the cluster support from core-engine to camel-cluster so it become more optional to include.,
0,CAMEL-14719,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-15 08:43:46+00:00,2020-03-15 09:03:06+00:00,"With the recent internal refactorings then the event notifier for camel context started, and startup listener, should be triggered after status is started. 


Before it was still status starting.",
0,CAMEL-14718,Improvement,Major,None,None,"
None
",Resolved,Fixed,None,Unassigned,Aemie,0,2,2020-03-14 17:33:40+00:00,2020-03-23 10:05:27+00:00,"In the front-page of the website, under the camel section, on change of screen width, the title and buttons are center-aligned except the text. Thus to make the text center-aligned so that it looks neat.


Another thing is that for the buttons when hovered, there is an outer-glow and in smaller screen-width for multiple buttons, the glow overlaps. Hence, create a good hover button affect. Refer link creative button hover effects.","zregvart:1584253181:2020-03-15T14:19:41.680+0000:1584253181:2020-03-15T14:19:41.680+0000:Thanks to [~Aemie] for the pull request!
Aemie:1584302879:2020-03-16T04:07:59.531+0000:1584302879:2020-03-16T04:07:59.531+0000:[~zregvart] welcome and I have also made a PR for the change in hover effect which I believed looked more sophisticated for the website than the outer glow."
0,CAMEL-14717,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-14 15:09:52+00:00,2020-03-16 09:34:54+00:00,"See https://issues.apache.org/jira/browse/CAMEL-14598


So you can use keys that may be optional, by having a ? at the start of the key name","davsclaus:1584169843:2020-03-14T15:10:43.357+0000:1584318512:2020-03-16T08:28:32.761+0000:camel.component.aws*.access-key=myAccessKey
camel.component.aws*.secret-key=mySecretKey
camel.component.aws*.region=US_EAST_1
?camel.component.aws*.unknown=does not exist

So you can mark the option as optional by using ? in the beginning of they key name (ignore missing key)"
0,CAMEL-14716,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-14 08:29:53+00:00,2020-03-14 08:50:33+00:00,So you can also inject a java.util.Map / java.util.Properties and have it pre-loaded with the properties for the given prefix.,
0,CAMEL-14715,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Claus Ibsen,0,3,2020-03-14 06:16:59+00:00,2020-03-31 08:00:41+00:00,"See
https://camel.465427.n5.nabble.com/Moving-Karaf-OSGi-code-into-a-Camel-sub-project-td5859320.html","jbonofre:1584139914:2020-03-14T06:51:54.987+0000:1584139914:2020-03-14T06:51:54.987+0000:I will tackle that, thanks !
davsclaus:1584142631:2020-03-14T07:37:11.820+0000:1584142631:2020-03-14T07:37:11.820+0000:Are you really sure you have the time, its significant work and we dont want to be 50% in 2-3 weeks when we should release Camel 3.2.0. 
acosentino:1584149406:2020-03-14T09:30:06.768+0000:1584149406:2020-03-14T09:30:06.768+0000:You're on too much stuff jb, I guess. I'll create the repository as beginning. We cannot be blocked on this, because there are multiple steps to take care of.
acosentino:1584151362:2020-03-14T10:02:42.506+0000:1584151362:2020-03-14T10:02:42.506+0000:Repository created https://github.com/apache/camel-karaf
jbonofre:1584151655:2020-03-14T10:07:35.840+0000:1584151655:2020-03-14T10:07:35.840+0000:At least I can help, but I think I have the time. Let me try to move forward on Monday and see. I will let you know. Thanks guys !
davsclaus:1584945386:2020-03-23T14:36:26.833+0000:1584945386:2020-03-23T14:36:26.833+0000:[ERROR] Failed to execute goal org.apache.camel:camel-eip-documentation-enricher-maven-plugin:3.2.0-SNAPSHOT:eip-documentation-enricher (eip-documentation-enricher) on project camel-blueprint: camelCoreDir does not exist -> [Help 1]

camel-blueprit ^^^
jbonofre:1584945557:2020-03-23T14:39:17.235+0000:1584945557:2020-03-23T14:39:17.235+0000:[~davsclaus] thanks, let me take a look ;)
davsclaus:1585353903:2020-03-28T08:05:03.364+0000:1585353903:2020-03-28T08:05:03.364+0000:The platforms/commands needs to be moved over too
acosentino:1585356160:2020-03-28T08:42:40.126+0000:1585356160:2020-03-28T08:42:40.126+0000:Platform/karaf/commands has been moved. I'll have a look btw"
0,CAMEL-14714,Improvement,Minor,None,None,"
None
",Closed,Duplicate,None,Unassigned,Madhawa Kasun Gunasekara,0,1,2020-03-13 17:06:52+00:00,2020-03-13 17:07:41+00:00,It would be nice to have at least the source check running for each PR possibly as a GitHub action.,
0,CAMEL-14713,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Unassigned,Claus Ibsen,0,2,2020-03-13 15:11:28+00:00,2020-03-16 11:47:45+00:00,"Lets use the simple LRU cache so main is simple as possible.
And then let user choose to use caffeine if they want, by adding the dependency.","davsclaus:1584083531:2020-03-13T15:12:11.910+0000:1584083531:2020-03-13T15:12:11.910+0000:See also
https://github.com/apache/camel-quarkus/issues/886

Also update the upgrade guide about this
gnodet:1584084310:2020-03-13T15:25:10.531+0000:1584084310:2020-03-13T15:25:10.531+0000:On the camel side, it should just be a matter of making the camel-caffeine-lrucache optional.  But even, the way it is, one can simply exclude the dependency.
On the camel-quarkus side, it's a bit different as a simple exclusion won't be sufficient."
0,CAMEL-14712,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Guillaume Nodet,Guillaume Nodet,0,2,2020-03-13 14:38:28+00:00,2020-03-14 08:52:14+00:00,No Desc,"davsclaus:1584147134:2020-03-14T08:52:14.544+0000:1584147134:2020-03-14T08:52:14.544+0000:There are some unit tests that fails in core, and also the new APIs in ExtendedCamelContext should have javadoc"
0,CAMEL-14711,Improvement,Major,None,"3.0.2, 3.2.0, 2.25.1, 3.1.1","
None
",Resolved,Fixed,"3.0.2, 3.2.0, 2.25.1, 3.1.1",Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2020-03-13 14:23:59+00:00,2020-03-19 07:25:19+00:00,"This task is to disable the Rabbit MQ Java serialization functionality by default due to security reasons. It can be re-enabled using an ""allowMessageBodySerialization"" parameter.",
0,CAMEL-14710,Test,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Dmitry Volodin,Andrea Cosentino,0,1,2020-03-13 14:04:59+00:00,2020-03-24 07:56:58+00:00,"It should be related to hazelcast update. Madhawa Gunasekara, please have a look.",
0,CAMEL-14709,Task,Major,None,,"

help-wanted

",Resolved,Abandoned,None,Unassigned,Zoran Regvart,0,3,2020-03-13 11:00:43+00:00,2022-09-02 14:52:39+00:00,"Right now we run the hugo build from a npm/yarn script.
This includes the --cacheDir parameter which specifies where Hugo puts cached data, e.g. data fetched via getJSON.
When we build the website on the build server we wish to take advantage of previously cached data, and to do that we set the HUGO_CACHE_DIR environment variable.
The shell interpolation used: ${HUGO_CACHE_DIR:-$(pwd)/.hugo_data} makes sure that if HUGO_CACHE_DIR is not defined .hugo_data in current directory is used instead.
This doesn't work on Windows as it relies on Unix shell variable interpolation.
We need a solution that has the same functionality, i.e. we can specify the cache directory via HUGO_CACHE_DIR environment variable and if the HUGO_CACHE_DIR variable is not set use .hugo_data in current directory, but works on both Unix and Windows systems.
I think there could be a way to use some cross platform npm packages to do this intended to be used in scripts; or we could create a helper JavaScript file for this and invoke hugo binary from it.","Aemie:1584094845:2020-03-13T18:20:45.494+0000:1584094933:2020-03-13T18:22:13.314+0000:I had a doubt regarding what exactly is the *.hugo_data*? 

What is the need for *$(pwd)* ? Is it to set *$WORKSPACE* environment variable in Jenkins?
zregvart:1584251868:2020-03-15T13:57:48.988+0000:1584251868:2020-03-15T13:57:48.988+0000:The [{{$WORKSPACE}} environment variable|https://jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables] points to the directory that is used when running the build on Jenkins. We want to re-use the cached data obtained from previous builds and this is a way to do it across multiple builds. The [shell parameter expansion|https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html] allows us to substitute for current directory (obtained by executing [pwd|https://en.wikipedia.org/wiki/Pwd]) in cases when {{$WORKSPACE}} environment variable is not defined.
Aemie:1584338715:2020-03-16T14:05:15.522+0000:1584338715:2020-03-16T14:05:15.522+0000:I am closer to getting it to build however I had to make a few changes to how the environment variables are set in both Jenkins and package.json file. Is it fine if I am successfully able to build it, I will create documentation on it?
zregvart:1584927062:2020-03-23T09:31:02.229+0000:1584927062:2020-03-23T09:31:02.229+0000:[~Aemie] should be fine if your changes don't prevent us from building on Unix machines and on the build server.
@pooja_y:1585004848:2020-03-24T07:07:28.747+0000:1585004848:2020-03-24T07:07:28.747+0000:hi,

I am Pooja , an outreachy applicant. I am interested to contribute in Apache camel website. Since all good first issues are taken up, [~zregvart] can u help me to get started. 
zregvart:1585014240:2020-03-24T09:44:00.298+0000:1585014240:2020-03-24T09:44:00.298+0000:[~@pooja_y] as you can see from the discussion here [~Aemie] is already working on this. [~Aemie] is that still the case?
Aemie:1585024919:2020-03-24T12:41:59.143+0000:1585024919:2020-03-24T12:41:59.143+0000:We can work on this together to understand what and where the changes are to be made. It's hard to get everything based on windows as the files are based on how Linux variables are used. Also Pooja, this issue just doesn't get resolved with replacing pwd by %cd% 'cause I tried and it didn't work out. 
@pooja_y:1585028607:2020-03-24T13:43:27.883+0000:1585028607:2020-03-24T13:43:27.883+0000:Hi Aemie, I am happy to work together. I am not having much idea on it. So need read the documentation and set up. I will ask u wherever i am stuck.

[~zregvart] thanks for replying. Since all issues are taken up, if there is anything on which, u think i can work plse  assign me.

 "
0,CAMEL-14708,Bug,Minor,"3.0.0, 3.0.1, 3.1.0",3.2.0,"
None
",Resolved,Won't Fix,3.2.0,Claus Ibsen,Ranabroto Ghosh,0,4,2020-03-12 16:45:42+00:00,2020-03-18 14:21:47+00:00,"I am creating this issue as suggested by claus from Camel-Users group


Hi I am having this clueless problem SAMPLE PROJECT IS ATTACHED IN ATTACHMENT SECTION 
pom.xml:
 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-web</artifactId>
 </dependency>
 <dependency>
    <groupId>org.apache.camel.springboot</groupId>
     <artifactId>camel-spring-boot-starter</artifactId>
    <version>3.0.0</version>
 </dependency>
 <dependency>
 <groupId>org.apache.camel</groupId>
 <artifactId>camel-jetty</artifactId>
 <version>3.0.0</version>
 </dependency>


REST XML : 
 <rests xmlns=""http://camel.apache.org/schema/spring"">
 <rest path=""/api"" description=""Notification consumer with a REST endpoint"">
 <post uri=""/notification"" description=""enque"" >
 <to uri=""direct:test""/>
 </post>
 </rest>
 </rests>


CAMEL ROUTE:
 <route id=""route-test"" autoStartup=""true"">
 <from uri=""direct:test"" />
    <unmarshal><custom ref=""notification""/></unmarshal>
    <to uri=""bean:processor?method=test""/>
    <marshal><custom ref=""notification""/></marshal>
    <setHeader name=""CamelHttpResponseCode"">
 <constant>200</constant>
 </setHeader>
  </route>


EXCEPTION:
 2020-03-12 13:17:12,623 spring-ec2 INFO [main] SpringCamelContext: Route:
 route1 started and consuming from: jetty:
http://0.0.0.0:8081/api/notification?httpMethodRestrict=POST
 2020-03-12 13:17:12,625 spring-ec2 INFO [main] SpringCamelContext: Route:
 route-test started and consuming from: direct://test
 2020-03-12 13:17:12,627 spring-ec2 INFO [main] SpringCamelContext: Apache
 Camel 3.0.0 (CamelContext: charge-process-fonix-context) is shutting down
 2020-03-12 13:17:12,628 spring-ec2 INFO [main] DefaultShutdownStrategy:
 Starting to graceful shutdown 2 routes (timeout 300 seconds)
 2020-03-12 13:17:12,634 spring-ec2 INFO [Camel
 (charge-process-fonix-context) thread #1 - ShutdownTask]
 DefaultShutdownStrategy: Route: route-test shutdown complete, was consuming
 from: direct://test
 2020-03-12 13:17:12,639 spring-ec2 INFO [Camel
 (charge-process-fonix-context) thread #1 - ShutdownTask] AbstractConnector:
 Stopped ServerConnector@26275b46

{HTTP/1.1,[http/1.1]}

{0.0.0.0:8081}


2020-03-12 13:17:12,642 spring-ec2 INFO [Camel
 (charge-process-fonix-context) thread #1 - ShutdownTask] ContextHandler:
 Stopped o.e.j.s.ServletContextHandler@274fdea6{/,null,UNAVAILABLE}
 2020-03-12 13:17:12,644 spring-ec2 INFO [Camel
 (charge-process-fonix-context) thread #1 - ShutdownTask]
 DefaultShutdownStrategy: Route: route1 shutdown complete, was consuming
 from: jetty:http://0.0.0.0:8081/api/notification?httpMethodRestrict=POST
 2020-03-12 13:17:12,644 spring-ec2 INFO [main] DefaultShutdownStrategy:
 Graceful shutdown of 2 routes completed in 0 seconds
 2020-03-12 13:17:12,656 spring-ec2 INFO [main] SpringCamelContext: Apache
 Camel 3.0.0 (CamelContext: charge-process-fonix-context) uptime 0.484
 seconds
 2020-03-12 13:17:12,656 spring-ec2 INFO [main] SpringCamelContext: Apache
 Camel 3.0.0 (CamelContext: charge-process-fonix-context) is shutdown in
 0.029 seconds
 2020-03-12 13:17:12,658 spring-ec2 ERROR [main] SpringCamelContext: Error
 starting CamelContext (charge-process-fonix-context) due to exception
 thrown: Failed to start route route2 because of Multiple consumers for the
 same endpoint is not allowed: jetty:
http://0.0.0.0:8081/api/notification?httpMethodRestrict=POST


org.apache.camel.FailedToStartRouteException: Failed to start route route2
 because of Multiple consumers for the same endpoint is not allowed: jetty:
http://0.0.0.0:8081/api/notification?httpMethodRestrict=POST


Note: Problem does not happen using below version 


<dependency>
 <groupId>org.apache.camel</groupId>
 <artifactId>camel-spring-boot-starter</artifactId>
 <version>2.25.0</version>
 </dependency>


But Any version from 3.0.0 from throws above exception


<dependency>
 <groupId>org.apache.camel.springboot</groupId>
 <artifactId>camel-spring-boot-starter</artifactId>
 <version>3.0.0</version>
 </dependency>","Menekam:1584003583:2020-03-12T16:59:43.782+0000:1584003583:2020-03-12T16:59:43.782+0000:Hello, I am an outreachy applicant, can I work on this issue?
acosentino:1584004799:2020-03-12T17:19:59.753+0000:1584004799:2020-03-12T17:19:59.753+0000:Outreachy is related to camel-website, this is not related to the website.
acosentino:1584005051:2020-03-12T17:24:11.108+0000:1584005051:2020-03-12T17:24:11.108+0000:[~Ranabroto] try to remove the spring-boot-starter-web and set main-run-controller to true in the application.properties, also you should use camel-jetty-starter and not camel-jetty.
Ranabroto:1584067005:2020-03-13T10:36:45.782+0000:1584067005:2020-03-13T10:36:45.782+0000:[~acosentino] Thanks for your reply I tried what you have mentioned still no hope. Please check the screenshots. 

 

!image-2020-03-13-10-30-33-659.png!

 

!image-2020-03-13-10-32-23-060.png!

!image-2020-03-13-10-34-28-450.png!

 

!image-2020-03-13-10-33-54-335.png!

 

!image-2020-03-13-10-36-35-626.png!
Ranabroto:1584413033:2020-03-17T10:43:53.844+0000:1584413033:2020-03-17T10:43:53.844+0000:[~acosentino] is there any update on this issue ?
acosentino:1584413078:2020-03-17T10:44:38.233+0000:1584413078:2020-03-17T10:44:38.233+0000:I didn't have the time to work on this.
Ranabroto:1584413269:2020-03-17T10:47:49.691+0000:1584413269:2020-03-17T10:47:49.691+0000:[~acosentino] I see, not a problem. Thanks for quick reply. I was wondering do you have plan to work on this or somebody else will be assigned to this eventually ? :) 
acosentino:1584415225:2020-03-17T11:20:25.951+0000:1584415225:2020-03-17T11:20:25.951+0000:If people have time they will take this up, it's unassigned actually. You can help too.
Ranabroto:1584417626:2020-03-17T12:00:26.797+0000:1584417626:2020-03-17T12:00:26.797+0000:I would love to, can you guide me please, what needs to be done, i have never contributed in camel before. 
acosentino:1584417899:2020-03-17T12:04:59.084+0000:1584417899:2020-03-17T12:04:59.084+0000:Check what could be the bug if any, or investigate the code and comment here with your findings.
davsclaus:1584496190:2020-03-18T09:49:50.087+0000:1584496190:2020-03-18T09:49:50.087+0000:Put your sample project on github or attach a .zip file with it
Ranabroto:1584498783:2020-03-18T10:33:03.582+0000:1584498783:2020-03-18T10:33:03.582+0000:[~davsclaus] I have just attached the .zip file here in the issue. [^spring-camel3-ec2.zip] 
davsclaus:1584508004:2020-03-18T13:06:44.540+0000:1584508004:2020-03-18T13:06:44.540+0000:Thanks for the project I can reproduce the error
davsclaus:1584509024:2020-03-18T13:23:44.008+0000:1584509024:2020-03-18T13:23:44.008+0000:Okay so its because you use legacy spring XML files, eg with 
{code}
@ImportResource(""classpath:context/*"")
{code}

Then you should put the rest inside this file
{code}
	<camelContext id=""charge-process-fonix-context"" xmlns=""http://camel.apache.org/schema/spring"">

		<dataFormats>
			<json id=""notification"" library=""Jackson"" unmarshalTypeName=""com.rtech.springcamel3ec2.model.Notification"" />
		</dataFormats>

		<rest path=""/api"">
			<post uri=""/notification"" >
				<to uri=""direct:test""/>
			</post>
		</rest>

		<route id=""route-test"" autoStartup=""true"">
			<from uri=""direct:test"" />
		    <unmarshal><custom ref=""notification""/></unmarshal>
		    <to uri=""bean:processor?method=test""/>
		    <marshal><custom ref=""notification""/></marshal>
		    <setHeader name=""CamelHttpResponseCode"">
				<constant>200</constant>
			</setHeader>
	  </route>
	 
  </camelContext>
{code}


davsclaus:1584509062:2020-03-18T13:24:22.821+0000:1584509062:2020-03-18T13:24:22.821+0000:Its when you mix this the camel.main for loading rests DSL xml snippets that you get duplicates."
0,CAMEL-14707,Improvement,Minor,None,,"

help-wanted

",Resolved,Duplicate,None,Unassigned,Esther Itolima,0,2,2020-03-12 16:40:00+00:00,2020-03-13 09:38:25+00:00,"We currently use version 1.22.0, we could upgrade to to 1.22.1, or even better switch to 2.0 (berry) as it includes improvements to the PnP.


Switching to 2.0 (berry) would most likely require migration effort for some of the dependencies we use.


The version needs to change both for the website build and for the antora-ui-camel. Note that we vendor the Yarn within both of them via policies.",acosentino:1584002539:2020-03-12T16:42:19.372+0000:1584002539:2020-03-12T16:42:19.372+0000:Please don't duplicate already opened issue
0,CAMEL-14706,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-12 16:19:06+00:00,2020-03-12 16:25:53+00:00,The JavaUuidGenerator is not in use and its a very slow UUID generator and should not be used.,
0,CAMEL-14705,Improvement,Major,None,,"

pull-request-available

",Closed,Duplicate,None,Unassigned,William Thompson,0,1,2020-03-12 14:59:01+00:00,2020-03-12 15:00:34+00:00,Key_Shared subscriptions are a new feature as of Pulsar 2.4.0 and is in the current version that Camel uses. http://pulsar.apache.org/docs/en/concepts-messaging/#key_shared This would be to add the Key_Shared subscription type and new configurations to make that function as intended. Github PR is being worked on and will be available shortly.,willpthompson:1583996434:2020-03-12T15:00:34.739+0000:1583996434:2020-03-12T15:00:34.739+0000:Forgot already created this ticket. Closing as duplicate.
0,CAMEL-14704,Wish,Minor,None,,"
None
",Closed,Duplicate,None,Unassigned,Kirill Yankov,0,1,2020-03-12 13:12:29+00:00,2020-05-07 17:00:00+00:00,"I am a new contributor. And as I see in docs and after trial the checkstyle command only does checking of your sources, and outputs details of where you need to correct. It would be nice to have check style which does formatting in project's style automatically, so that you won't need to do it manually. I have used corresponding plugin in scala sbt, there must be one for maven java.",
0,CAMEL-14703,Bug,Minor,3.0.1,3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Jeff Peterson,0,2,2020-03-12 12:25:34+00:00,2020-05-05 09:00:41+00:00,"When synchronously running a report and returning the results, an IllegalArgumentException is thrown due to a dataCell  containing an escapedValue as a key.  In the SummaryValue.class in the setAny method the name of the key is checked and throws an error if its other than value.


I'm assuming instead of throwing an error this should bypass any key with name other than value.


Attached is a screenshot of a breakpoint where the error is thrown, the report's key:value pair run through workbench, and the stacktrace.","davsclaus:1583987553:2020-03-12T12:32:33.174+0000:1583987553:2020-03-12T12:32:33.174+0000:Thanks for reporting, you are welcome to dive into the code and provide a PR with an attempted fix for the master branch
davsclaus:1588640441:2020-05-05T09:00:41.446+0000:1588640441:2020-05-05T09:00:41.446+0000:Thanks yeah lets ignore those field names"
0,CAMEL-14702,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-12 10:46:08+00:00,2020-03-12 15:07:58+00:00,We should not use this and get the model updated to not use it. Its only used rarely in a xstream dataformat. But we can do this in alternative way without the complexity of JAXB adapters.,"davsclaus:1583983163:2020-03-12T11:19:23.444+0000:1583994720:2020-03-12T14:32:00.308+0000:TODO: any32 dataformat *DONE*

TODO: xstream dataformat *DONE*

TODO: time unit *DONE*

 TODO: Remove jaxb-api depencey in xml-io parser *DONE*

TODO: XML DSL *DONE*

TODO: Unit tests *DONE*

TODO: Upgrade guide *DONE*"
0,CAMEL-14701,Sub-task,Major,None,,"

help-wanted

",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,4,2020-03-12 10:42:10+00:00,2020-03-13 19:25:43+00:00,jyotiattri shared some ideas on improving the Apache & OpenSource section on frontpage in this comment,"Devkant Gorai:1583983651:2020-03-12T11:27:31.233+0000:1583983651:2020-03-12T11:27:31.233+0000:Before:-

check beforechange.gif that I uploaded and now After Change

 

After:-

check imagesss.png the after change.

 

I have made a [PR 201|[https://github.com/apache/camel-website/pull/201]]
harshika_jain:1584009154:2020-03-12T18:32:34.011+0000:1584009154:2020-03-12T18:32:34.011+0000:Is this issue still open?

It show perfect in my PC as well as mobile version of site.

 
Aemie:1584014770:2020-03-12T20:06:10.235+0000:1584014794:2020-03-12T20:06:34.051+0000:Apart from the front-page, I observed that in `[https://camel.apache.org/manual/latest/java-dsl.html]` there is a paragraph that continues to state that the following code will go within the configure method however in the code provided below is only written after several spaces to match the indent of the previous code written before the paragraph. I believe that is an unnecessary action as it has already been mentioned that the particular code will be written within the *configure method*.
zregvart:1584063946:2020-03-13T09:45:46.612+0000:1584063946:2020-03-13T09:45:46.612+0000:[~Aemie] feel free to create a pull request with your suggestion, I don't think the change is that big that we would need a issue for what you suggest (locate the document to edit by following ""Edit this page"" link).
zregvart:1584063964:2020-03-13T09:46:04.789+0000:1584063964:2020-03-13T09:46:04.789+0000:Thanks to [~Devkant Gorai] for pull request!
Aemie:1584098743:2020-03-13T19:25:43.238+0000:1584098743:2020-03-13T19:25:43.238+0000:Well it was just a suggestion to improve readability and I already created a PR for it. "
0,CAMEL-14700,Sub-task,Major,None,,"

help-wanted

",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,5,2020-03-12 10:39:47+00:00,2020-03-31 08:02:51+00:00,"We could get better usability for visually impaired folk by increasing the colour contrast on the website. I've run some tools (Accessibility inspector in Firefox) and there were some issues identified colour contrast of 2.69 which doesn't meet the WACG standards as explained here.


aashnajena also shared some ideas in a comment here.","itolimaesther:1583981336:2020-03-12T10:48:56.721+0000:1583981336:2020-03-12T10:48:56.721+0000:Please I will love to contribute to this issue.
siyubu:1583986300:2020-03-12T12:11:40.225+0000:1583986300:2020-03-12T12:11:40.225+0000:I already sent an email to develop to claim working on this project 
siyubu:1583988536:2020-03-12T12:48:56.736+0000:1583988536:2020-03-12T12:48:56.736+0000:To be sure if I am working on the right thing, this is the page that need color contract improvement?  !camel_webpage.JPG!  
zregvart:1583991478:2020-03-12T13:37:58.753+0000:1583991478:2020-03-12T13:37:58.753+0000:[~siyubu] I suggest that you read through the [readme|https://github.com/apache/camel-website/blob/master/README.md] on how to get started contributing to the website. What you have opened in your browser is a template file not an web page that will be served at https://camel.apache.org. Changes to colours need to be site wide and managed via CSS via variables in {{antora-ui-camel/src/css/vars.css}}.
aashnajena:1584009302:2020-03-12T18:35:02.399+0000:1584009302:2020-03-12T18:35:02.399+0000:Hey, here are the things I wanted to point out :
- when the user selects some text, the background of the highlighted text is so close to white, that one can hardly notice it.
- when the user opens a drop-down from the main menu and hovers over a sub-menu, it gets thinly underlined in orange, I think it would help if we could change the background colour on hover to improve colour contrast
- put an outline around the search bar to make it stand out
- (not sure about this, please suggest) should we change the colour of the nav-bar? The footer of each page is in grey, so it's easily distinguishable. But there exists only a thin line to separate the nav-bar and the webpage content (except the main landing page - where there's a gradient shading)
siyubu:1584104191:2020-03-13T20:56:31.108+0000:1584104191:2020-03-13T20:56:31.108+0000:Thanks [~zregvart] , Read readme first is very helpful. However while I trying to Build the Antora Camel UI theme, ' {color:#ff8b00}yarn build' {color:#172b4d}command{color} {color}is giving me the error bellow  any anyone may help me on how I may correct it?  !image-2020-03-13-22-51-53-783.png!
zregvart:1584252815:2020-03-15T14:13:35.940+0000:1584252815:2020-03-15T14:13:35.940+0000:[~siyubu] did you run {{yarn install}} as [documented|https://github.com/apache/camel-website/#build-the-antora-camel-ui-theme]?
siyubu:1584328914:2020-03-16T11:21:54.396+0000:1584328914:2020-03-16T11:21:54.396+0000:[~zregvart] , yes I did

 
siyubu:1584342560:2020-03-16T15:09:20.277+0000:1584342560:2020-03-16T15:09:20.277+0000:I have been able to resolve the issue by upgrading  yarn. 
siyubu:1584353188:2020-03-16T18:06:28.128+0000:1584353188:2020-03-16T18:06:28.128+0000:I have been able to build the project and I made some changes. However, I whenever I try to commit and push my code  I am asked to be sure about my access rights and the existence of the repository. Anyone may help? 
Aemie:1584423386:2020-03-17T13:36:26.748+0000:1584423386:2020-03-17T13:36:26.748+0000:I ran Audits for the pages under the Blog section and found several instances where the Color Standards weren't being followed. Hence, I am making efficient changes such that the Color standards, as well as the aesthetic and presentability of the webpage, is maintained under the Blog section.
siyubu:1584427799:2020-03-17T14:49:59.542+0000:1584427799:2020-03-17T14:49:59.542+0000:Whenever I try to push my contribution the Permission to apache/camel-website.git is being denied. I would want to know how contributions are submitted to be reviewed. Meanwhile every changes I did is available here [https://github.com/Siyubu/camel-website] ,
Aemie:1584429353:2020-03-17T15:15:53.570+0000:1584429353:2020-03-17T15:15:53.570+0000:You need to create a pull request first, go to apache/camel-website and select create a pull request and do the comparison between forks where the base fork is the one of apache and the reference one is yours. You will then see all the file changes and you can create a PR after that. 
zregvart:1585612971:2020-03-31T08:02:51.492+0000:1585612971:2020-03-31T08:02:51.492+0000:We received a number of pull requests for this. It's better to have smaller targeted issues than one never ending issue. Resolving this, for any outstanding work create new issues with the description of the problem and outline of the solution."
0,CAMEL-14699,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"3.2.0, 3.1.1",James Netherton,James Netherton,0,1,2020-03-12 08:36:05+00:00,2020-03-12 11:39:43+00:00,No Desc,
0,CAMEL-14698,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,David Jencks,David Jencks,0,2,2020-03-11 18:04:14+00:00,2020-03-22 00:06:51+00:00,Consider rearranging the website source .adocs to conform to expected Antora structure and avoid copying.,"djencks:1583935902:2020-03-11T22:11:42.458+0000:1583935902:2020-03-11T22:11:42.458+0000:I put together a partial demo of what I'm suggesting.

[https://github.com/djencks/camel-website.git]

[https://github.com/djencks/camel.git]

Both on branch 

issue-14698-rearrange-adocs

 

In the website project, make sure you have antora 2.3.0-alpha.2 or later.  Build with antora antora-playbook.yml or if you check out the camel repo as well and get on the correct branch and have camel-website and camel next to one another build with antora antora-playbook-basic-local.yml.

 

In camel, the gulpfile.js is updated to generate a working nav file using the modules some sources are now in.

There seem to be some inconsistencies in the gulpfile that I will ask about on the dev list.

 

So far no example support.
djencks:1584468403:2020-03-18T02:06:43.554+0000:1584468403:2020-03-18T02:06:43.554+0000:There are now 4 PRs for the 4 branches involved.  See instructions on the subtasks.
djencks:1584806811:2020-03-22T00:06:51.710+0000:1584806811:2020-03-22T00:06:51.710+0000:PR merged"
0,CAMEL-14697,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Zoran Regvart,Zoran Regvart,0,1,2020-03-11 14:56:27+00:00,2020-03-11 19:04:03+00:00,"The openapi-rest-dsl-generator doesn't generate a parameter configuration for parameters that are given on a path rather than on a operation.


For example for this OpenAPI document:




{
    ""openapi"": ""3.0.2"",
    ""info"": {
        ""title"": ""Test API"",
        ""version"": ""1.0.0"",
        ""description"": ""A brand new API with no content.  Go nuts!""
    },
    ""paths"": {
        ""/test/{myparam}"": {
            ""get"": {
                ""responses"": {
                    ""200"": {
                        ""description"": ""response""
                    }
                },
                ""operationId"": ""op""
            },
            ""parameters"": [
                {
                    ""$ref"": ""#/components/parameters/MyParam""
                }
            ]
        }
    },
    ""components"": {
        ""parameters"": {
            ""MyParam"": {
                ""name"": ""myparam"",
                ""in"": ""path"",
                ""required"": true
            }
        }
    }
}




There is no <param> tag in XML DSL:




<?xml version=""1.0"" encoding=""UTF-8""?><rests xmlns=""http://camel.apache.org/schema/spring""><restConfiguration component=""servlet""/>
    <rest>
        <get id=""op"" uri=""/test/{myparam}"">
            <to uri=""direct:op""/>
        </get>
    </rest>
</rests>",
0,CAMEL-14696,Improvement,Major,None,3.2.0,"

help-wanted

",Resolved,Fixed,3.2.0,Unassigned,Zoran Regvart,0,2,2020-03-11 12:54:51+00:00,2020-03-13 09:07:32+00:00,"Seems that the tooling around website requires a Unix (Linux or MacOS) operating system. To help contributors getting started we need to figure out how to run the website build/preview on Windows system as well and document that.
Perhaps using Linux Subsystem for Windows is one way of doing that.","Aemie:1583961716:2020-03-12T05:21:56.329+0000:1583961716:2020-03-12T05:21:56.329+0000:I believe the installation of yarn and nvm could be possible through chocolatey package. I will try this today and if it works, would create the documentation for the following as well. 
Aemie:1584000452:2020-03-12T16:07:32.709+0000:1584000452:2020-03-12T16:07:32.709+0000:I have created the required changes for the README and opened a PR."
0,CAMEL-14695,Sub-task,Major,None,,"

help-wanted

",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,8,2020-03-11 11:22:10+00:00,2020-04-06 11:32:56+00:00,The menus we have in the mobile version are a bit cluttered and difficult to use. Let's see if we can do better. This issue was raised by Aemie in CAMEL-14581.,"zregvart:1583897294:2020-03-11T11:28:14.879+0000:1583897294:2020-03-11T11:28:14.879+0000:One site that caught my attention was the [documentation site|https://docs.couchbase.com/java-sdk/3.0/hello-world/start-using-sdk.html] for Couchbase, what they do for responsive design is for the main menu to take over the entire screen. The technology there is somewhat similar what we do for Camel website so we might be able to do something similar ourselves.
avgupt:1583911807:2020-03-11T15:30:07.848+0000:1583911807:2020-03-11T15:30:07.848+0000:I have created a Pull Request: [https://github.com/apache/camel-website/pull/194]

Please check and suggest any changes.
jyotiattri:1583915183:2020-03-11T16:26:23.926+0000:1583915183:2020-03-11T16:26:23.926+0000:Hi, can I work on this issue?
aashnajena:1583917983:2020-03-11T17:13:03.355+0000:1583917983:2020-03-11T17:13:03.355+0000:Hey [~avgupt], Can you please post some screenshots of what changes you have made? I'm not able to understand what you did from your comment and your PR. I had a few things in mind to improve the mobile menu and I don't want to overlap with you.

- Colour odd-even menu items differently for better contrast and readability
- Have drop downs on the main menu items so that the sub-menus are not displayed all the time (currently due to too many sub-menus, the menu looks very cluttered)
- Style the menu - increase font-size and widen it a little to cover more screen area
- I feel that right-aligned menus are a bit more intuitive. This is debatable, what are your thoughts about this [~zregvart] ?
aashnajena:1583919926:2020-03-11T17:45:26.529+0000:1583920012:2020-03-11T17:46:52.784+0000:In fact, I just noticed a couple more things. The camel sign is getting cut on the vertical screen(see screenshot) due to the search bar. Can we have a menu similar to docs.couchbase.com? In addition to the suggestions mentioned above, can we do these :
- the menu covers the full screen
- the search bar can be part of this menu, it's cluttering the navbar 
- nav-bar (and menu icon) be differently coloured to stand out on the screen (similar to how it is on the desktop website - orange-white contrast) 

 !camel_sign_cut.jpeg! 


zregvart:1583981472:2020-03-12T10:51:12.749+0000:1583981472:2020-03-12T10:51:12.749+0000:[~aashnajena] we have a discussion around the placement of the search box in mobile version on the pull requests [#192|https://github.com/apache/camel-website/pull/192], [#191|https://github.com/apache/camel-website/pull/191], and [#196|https://github.com/apache/camel-website/pull/196]. It all looks a bit chaotic but we can coordinate and make things better together, that's how open source looks like :)

I also like the suggestions you have in your [comment|https://issues.apache.org/jira/browse/CAMEL-14695?focusedCommentId=17057228&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17057228].

For the menu item alignment we can do some research and see how other sites do it. I think we can improve the menu a lot in the mobile version.
avgupt:1584003410:2020-03-12T16:56:50.613+0000:1584003410:2020-03-12T16:56:50.613+0000:Hello [~aashnajena] , as [~zregvart] pointed out, most of the discussion is being done on the above-mentioned pull requests. Also, there's a screenshot in my Pull request uploaded [~zregvart] . You can take a look at it.
aashnajena:1584007989:2020-03-12T18:13:09.398+0000:1584007989:2020-03-12T18:13:09.398+0000:Hey [~zregvart],

I see that some of the changes I suggested are already being made in those PRs. I think I'll wait for them to get merged, and then add these following things :
- submenus as drop-downs from main-menu
- odd-even colouring
- colour the nav-bar differently (use the website's signature colours)

Since the search-bar is already being discussed, and moving the search bar into the menu will make sure that the camel sign is fully visible, I think those two issues will be solved by the current PRs. I'll make a PR for styling the menu which will add above-mentioned features. Does that sound fine?

Aemie:1584013876:2020-03-12T19:51:16.186+0000:1584013876:2020-03-12T19:51:16.186+0000:It's better that the manner in which the menus are presented in the navbar for desktop version, we should follow the similar pattern for mobile version within the navbar hamburger as the website has a lot of sub-menus and menus so to avoid clustering just present the menus and with the option to drop-down show the sub-menus.
Aemie:1584014927:2020-03-12T20:08:47.049+0000:1584014927:2020-03-12T20:08:47.049+0000:As I went through different PR, I believe that the search bar will look better within the navbar hamburger as we need to include the social skills as well as they are an important requirement as well in the mobile version which is currently hidden.

 

I am working on aligning the social tools within the navbar, it would be amazing if someone is already working on the search bar within the hamburger menu.
amadikwajoyn:1584508607:2020-03-18T13:16:47.682+0000:1584508607:2020-03-18T13:16:47.682+0000:Hi [~zregvart] [~Aemie]  , I'm Amadikwa Joy. I've gone through the comments and I believe I can deal with the search bar. Can I work on this?. Thanks.
zregvart:1585206815:2020-03-26T15:13:35.961+0000:1585206815:2020-03-26T15:13:35.961+0000:Thanks to [~aashnajena] for the pull request.
amadikwajoyn:1586128766:2020-04-06T07:19:26.978+0000:1586128766:2020-04-06T07:19:26.978+0000:Hi [~zregvart], it seems my previous request about the search bar has been taken up. I noticed something else I can correct on the dropdown menu in mobile view and I hope I can be given permission to work on this sir. I've attached a screenshot too. !Camel-website mobile.png!

I want to work on the dropdowns which are displaying over the other options
zregvart:1586143976:2020-04-06T11:32:56.729+0000:1586143976:2020-04-06T11:32:56.729+0000:[~amadikwajoyn] there is an in progress [pull request|https://github.com/apache/camel-website/pull/315] for this issue. Please check the list of pull request before you start working on an issue to minimize the amount of duplicate work."
0,CAMEL-14694,Bug,Major,None,,"

help-wanted

",Resolved,Duplicate,None,Unassigned,Zoran Regvart,0,3,2020-03-11 09:55:13+00:00,2020-03-11 11:17:36+00:00,"We recently introduced the search functionality. We didn't pay much attention to the responsive design of it.


We previously had the website look like this:


  


And now the logo and the menu are pushed out or replaced by the search input box.


  


Would be good to redesign the top header to adapt responsively. Perhaps the search can be incorporated within the menu rather than occupying the top.","roshni:1583893498:2020-03-11T10:24:58.999+0000:1583893498:2020-03-11T10:24:58.999+0000:[~zregvart]

May I work on this one?
Devkant Gorai:1583894429:2020-03-11T10:40:29.584+0000:1583894429:2020-03-11T10:40:29.584+0000:[~zregvart]

Please have a look at the PR for the issue:-[PR-191|[https://github.com/apache/camel-website/pull/191]]
zregvart:1583896656:2020-03-11T11:17:36.272+0000:1583896656:2020-03-11T11:17:36.272+0000:Let's keep the discussion in one place."
0,CAMEL-14693,Improvement,Minor,None,,"
None
",Closed,Fixed,None,Unassigned,Prerna Singh,0,3,2020-03-11 07:01:08+00:00,2020-03-11 11:31:10+00:00,"To produce this:-



Go to camel.apache/org
Reduce the screen side gradually and make the width to 1023px.   
   you will see the Front header text has grown a lot bigger and if we decrease the size of screen more the two line text becomes 3-4 lines. 



The below visuals could probably explain this better.
the first one is normal and second one is width with around 1023px;","psingh1999587:1583882655:2020-03-11T07:24:15.372+0000:1583882655:2020-03-11T07:24:15.372+0000:Submitted a PR regarding this. #190
Devkant Gorai:1583884030:2020-03-11T07:47:10.833+0000:1583884030:2020-03-11T07:47:10.833+0000:I have submitted a PR regarding that and responsiveness of the swoosh design in mobile.
Devkant Gorai:1583884090:2020-03-11T07:48:10.415+0000:1583884090:2020-03-11T07:48:10.415+0000:... Yesterday Morning
praveenkottarathil@gmail.com:1583885347:2020-03-11T08:09:07.270+0000:1583885347:2020-03-11T08:09:07.270+0000:Thank you for your great contributions [~psingh1999587] and [~Devkant Gorai]
I have a tip to share. When we create a PR in github, if the PR is tagged with the Issue number in JIRA, a bot will automatically link them together!

For example on [PR#190|https://github.com/apache/camel-website/pull/190], if we use the title `CAMEL-14693: Improved the frontpage header text size`, instead of `Improved the frontpage header text size`,  you'll see the PR would start showing up in `Issue Links` in JIRA. 

It is not a hard and fast rule but improves traceability and visibility! Here is a [sample issue|https://issues.apache.org/jira/browse/CAMEL-14482] where github PRs show up as well
psingh1999587:1583885567:2020-03-11T08:12:47.519+0000:1583886006:2020-03-11T08:20:06.684+0000:[~Devkant Gorai] I have tried a different thing here. 
 its about the font-size that suddenly increases when screen size is 1023px. 
 I wanted it to be of a affordable size so that we dont have to scroll that much to get to the lower contents
psingh1999587:1583885655:2020-03-11T08:14:15.559+0000:1583885655:2020-03-11T08:14:15.559+0000:[~praveenkottarathil@gmail.com] Thanks sir, I had not known about it until yet. Will keep in mind in future. :)
psingh1999587:1583887735:2020-03-11T08:48:55.714+0000:1583887735:2020-03-11T08:48:55.714+0000:[~Devkant Gorai] yeah i checked it now yet again. Your PR is merged, so the change is visible now. I will close this issue then"
0,CAMEL-14692,Improvement,Major,None,3.2.0,"

pull-request-available

",Resolved,Fixed,3.2.0,Unassigned,William Thompson,0,1,2020-03-10 16:50:45+00:00,2020-03-13 08:34:20+00:00,"Key-shared subscription mode is a new feature as of Pulsar 2.4 http://pulsar.apache.org/docs/en/concepts-messaging/#key_shared. Given key is already possible to set through exchange headers to the Pulsar producer, it should just be a function of adding another SubscriptionType. Github PR being worked on now.",
0,CAMEL-14691,Bug,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Zoran Regvart,Zoran Regvart,0,1,2020-03-10 15:36:30+00:00,2020-03-10 22:49:52+00:00,"When using reference parameters with openapi-rest-dsl-generator, such as in this example:




{
    ""openapi"": ""3.0.2"",
    ""info"": {
        ""title"": ""Test API"",
        ""version"": ""1.0.0"",
        ""description"": ""A brand new API with no content.  Go nuts!""
    },
    ""paths"": {
        ""/test/{myparam}"": {
            ""get"": {
                ""parameters"": [
                    {
                        ""$ref"": ""#/components/parameters/MyParam""
                    }
                ],
                ""responses"": {
                    ""200"": {
                        ""description"": ""response""
                    }
                },
                ""operationId"": ""op""
            }
        }
    },
    ""components"": {
        ""parameters"": {
            ""MyParam"": {
                ""name"": ""myparam"",
                ""in"": ""path"",
                ""required"": true
            }
        }
    }
}




NullPointerException is raised:




Caused by: java.lang.NullPointerException
    at org.apache.camel.generator.openapi.OperationVisitor.emit (OperationVisitor.java:77)
    at org.apache.camel.generator.openapi.OperationVisitor.lambda$visit$1 (OperationVisitor.java:194)
    at java.util.ArrayList.forEach (ArrayList.java:1257)
    at org.apache.camel.generator.openapi.OperationVisitor.visit (OperationVisitor.java:193)
    at java.util.LinkedHashMap.forEach (LinkedHashMap.java:684)
    at org.apache.camel.generator.openapi.PathVisitor.visit (PathVisitor.java:57)
    at java.util.ArrayList.forEach (ArrayList.java:1257)
    at org.apache.camel.generator.openapi.RestDslXmlGenerator.generate (RestDslXmlGenerator.java:59)
    at org.apache.camel.maven.generator.openapi.GenerateXmlMojo.execute (GenerateXmlMojo.java:116)",
0,CAMEL-14690,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-03-10 14:03:58+00:00,2020-03-18 08:40:02+00:00,No Desc,
0,CAMEL-14689,Improvement,Major,None,,"

help-wanted

",Resolved,Fixed,None,Unassigned,Zoran Regvart,0,4,2020-03-10 11:02:21+00:00,2020-03-12 10:06:44+00:00,I noticed that in the contributing guide we mention Subversion. We should go over the document and update it to reflect the current practices.,"megha070:1583811278:2020-03-10T11:34:38.277+0000:1583811278:2020-03-10T11:34:38.277+0000:Greetings of the day ! I am an outreachy aspirant and would like to contribute to apache camel website. I would like to take up this issue.
aashnajena:1583824486:2020-03-10T15:14:46.596+0000:1583824486:2020-03-10T15:14:46.596+0000:Hey [~zregvart] , should I be editing the /manual/latest/contributing.html file to correct the information on [contributing guide|https://camel.apache.org/manual/latest/contributing.html] page? 
ofonime:1583896262:2020-03-11T11:11:02.629+0000:1583896262:2020-03-11T11:11:02.629+0000:Hi [~zregvart] i am an outreachy applicant. i have started editing this page .let me send the fully edited page to you here for further decision.
aashnajena:1583906677:2020-03-11T14:04:37.878+0000:1583906752:2020-03-11T14:05:52.277+0000:Hey [~zregvart], I have raised [this PR|https://github.com/apache/camel/pull/3624] against this issue. 
zregvart:1583978804:2020-03-12T10:06:44.741+0000:1583978804:2020-03-12T10:06:44.741+0000:Thanks to [~aashnajena] for the pull request!"
0,CAMEL-14688,Bug,Minor,None,,"

help-wanted

",Closed,Fixed,None,Unassigned,Prerna Singh,0,1,2020-03-09 22:22:00+00:00,2020-03-11 06:33:16+00:00,"To produce this:-



go to the https://camel.apache.org/
type something in the search bar
  you will find that it is partially overlapping the search bar.",
0,CAMEL-14687,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Unassigned,Thomas Cunningham,0,2,2020-03-09 18:56:27+00:00,2020-03-31 19:06:41+00:00,"I'm having issues building camel behind a firewall because of camel-javadoc-plugin.    It seems to be mostly copied from maven-javadoc-plugin 3.1.0 or 3.1.1, which stripped out proxy_user/password support https://issues.apache.org/jira/browse/MJAVADOC-565 - it's an issue because of the <links/>, and I end up with an error when javadoc tries to fetch them :


 


[ERROR] Failed to execute goal org.apache.maven.plugins:maven-javadoc-plugin:3.1.1:jar (attach-javadocs) on project camel-util: MavenReportException: Error while generating Javadoc: 
[ERROR] Exit code: 1 - javadoc: error - Error fetching URL: http://download.oracle.com/javase/7/docs/api/
[ERROR] javadoc: error - Error fetching URL: http://download.oracle.com/javaee/7/api/


 


I'd like to contribute a patch to set <isOffline>${camel.javadoc.isOffline}</isOffline> in the maven/camel-javadoc-plugin, so that camel can be built behind a firewall.","dmvolod:1584834107:2020-03-22T07:41:47.560+0000:1584834107:2020-03-22T07:41:47.560+0000:Hello, [~tcunning] !

You are welcome to provide PR

[https://github.com/apache/camel/blob/master/CONTRIBUTING.md]"
0,CAMEL-14686,Improvement,Minor,None,,"

help-wanted

",Resolved,Fixed,None,Unassigned,Prerna Singh,0,3,2020-03-09 16:25:59+00:00,2020-03-11 09:48:40+00:00,"It would be visually appealing as well as organised to look at the list with all the boxes with equal size and the text aligned at the centre. 
I think it looks a little haphazard as of now.","zregvart:1583747527:2020-03-09T17:52:07.049+0000:1583747527:2020-03-09T17:52:07.049+0000:The caveat is that the the width can't be predetermined so having the same predefined fixed width is not the way to go.
psingh1999587:1583757680:2020-03-09T20:41:20.782+0000:1583757680:2020-03-09T20:41:20.782+0000:I agree but i m trying to come up with some other style altogether then. 
also sir, the list items in blog category have this property of

 a.category:hover {
  color: var(--color-white);
}
the font color is already white and so this hover thing is not really useful as what I see because it is not apparent there. Would it be better to change it to some other colors?
zregvart:1583807997:2020-03-10T10:39:57.987+0000:1583807997:2020-03-10T10:39:57.987+0000:[~psingh1999587] I guess there could be an issue if that {{a.category:hover}} was removed that the color set for other {{a:hover}} such as the one in {{doc.css}} would appear instead. I think the goal there was to keep the color of the font unchanged. Feel free to experiment, please have in mind the usability and accessibility issues that might arise with changing color contrast.
petrazoid:1583864660:2020-03-11T02:24:20.135+0000:1583864660:2020-03-11T02:24:20.135+0000:Resolved with this PR: [https://github.com/apache/camel-website/pull/187]
zregvart:1583891320:2020-03-11T09:48:40.707+0000:1583891320:2020-03-11T09:48:40.707+0000:Thanks to [~petrazoid] for the pull request."
0,CAMEL-14655,New Feature,Minor,3.1.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Omar Al-Safi,Omar Al-Safi,0,2,2020-03-04 11:41:35+00:00,2020-04-28 14:11:38+00:00,No Desc,omarsmak:1588054269:2020-04-28T14:11:09.831+0000:1588054269:2020-04-28T14:11:09.831+0000:Component is merged and SpringBoot starter is merged. The Karaf feature on a different JIRA: https://issues.apache.org/jira/browse/CAMEL-14978
0,CAMEL-14654,New Feature,Minor,3.1.0,3.3.0,"
None
",Resolved,Fixed,3.3.0,Omar Al-Safi,Omar Al-Safi,0,3,2020-03-04 11:40:26+00:00,2020-04-28 14:12:03+00:00,Per title,"omarsmak:1585612733:2020-03-31T07:58:53.201+0000:1585612733:2020-03-31T07:58:53.201+0000:Actively working on this, the plan was to push it in 3.2.0. However, let's see how far I can accomplish this week, hoping to send the PR sometimes week if possible
omarsmak:1586588019:2020-04-11T14:53:39.290+0000:1586588019:2020-04-11T14:53:39.290+0000:Merged into the master, will generate the starters for SB and Karaf in the next coming days 
omarsmak:1586831894:2020-04-14T10:38:14.472+0000:1586831894:2020-04-14T10:38:14.472+0000:Added the SB starter
omarsmak:1586836026:2020-04-14T11:47:06.078+0000:1586836026:2020-04-14T11:47:06.078+0000:Hey [~acosentino], for the karaf feature, I think a bundle should created in servicemx, isn't? 
acosentino:1586836711:2020-04-14T11:58:31.259+0000:1586836711:2020-04-14T11:58:31.259+0000:Yes, but until we have a new mechanism for releasing bundles I think you can use the standard JAR with wrap:
omarsmak:1586836872:2020-04-14T12:01:12.764+0000:1586836872:2020-04-14T12:01:12.764+0000:Ah I see, thank you. I will give this a try 
omarsmak:1588054323:2020-04-28T14:12:03.534+0000:1588054323:2020-04-28T14:12:03.534+0000:Component is merged and SpringBoot starter is merged. The Karaf feature on a different JIRA: https://issues.apache.org/jira/browse/CAMEL-14978"
0,CAMEL-14653,Bug,Minor,3.0.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Jimmy Praet,0,1,2020-03-04 10:51:42+00:00,2020-12-22 08:47:41+00:00,"It seems the MDC is not passed from ""XNIO-1 task"" thread to ""default-workqueue"" thread. We use the MDC to associate the request with a unique ticket. When an error occurs processing the request, the error handling is occuring on a different thread. That thread doesn't have the MDC context propagated to it, so the necessary MDC tracing information is not available in the error log.


In fact, the MDC context is propagated later on to the thread, and not cleaned up. This effectively causes the error to be logged with the PREVIOUS request icket handled by that workqueue thread. See attached camel-mdc-trace.txt:


...
2020-03-04 11:20:49,963 TRACE [o.s.b.w.s.f.OrderedRequestContextFilter] (XNIO-1 task-1) {} Bound request context to thread: HttpServletRequestImpl [ POST /DB2PConsultContributionService/consult ]
2020-03-04 11:20:49,965 INFO [be.fgov.kszbcss.tracer.Tracer] (XNIO-1 task-1) {} Loaded tracer binding be.fgov.kszbcss.tracer.spi.Slf4jMdcTracerBinding from ServiceLoader
2020-03-04 11:20:49,968 DEBUG [o.a.c.t.servlet.ServletController] (XNIO-1 task-1) {CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613} Service http request on thread: Thread[XNIO-1 task-1,5,main]
=> Here we've added the CBSS-Trace-InboundTicket to the MDC
...
2020-03-04 11:20:50,038 TRACE [o.a.camel.impl.engine.MDCUnitOfWork] (XNIO-1 task-1) {CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613} UnitOfWork created for ExchangeId: ID-O14-1583317250038-0-1 with Exchange[ID-O14-1583317250038-0-1]
2020-03-04 11:20:50,039 TRACE [o.a.camel.component.cxf.CxfConsumer] (XNIO-1 task-1) {camel.exchangeId=ID-O14-1583317250038-0-1, CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613, camel.contextId=camel-1, camel.messageId=ID-O14-1583317250038-0-2} Suspending continuation of exchangeId: ID-O14-1583317250038-0-1
=> Here, Camel added its own MDC context variables
...
2020-03-04 11:20:50,326 DEBUG [o.a.c.t.servlet.ServletController] (XNIO-1 task-1) {camel.exchangeId=ID-O14-1583317250038-0-1, camel.contextId=camel-1, CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613, camel.routeId=call-sskm, camel.messageId=ID-O14-1583317250038-0-2} Finished servicing http request on thread: Thread[XNIO-1 task-1,5,main]
2020-03-04 11:20:50,326 TRACE [o.s.b.w.s.f.OrderedRequestContextFilter] (XNIO-1 task-1) {camel.exchangeId=ID-O14-1583317250038-0-1, camel.contextId=camel-1, camel.routeId=call-sskm, camel.messageId=ID-O14-1583317250038-0-2} Cleared thread-bound request context: HttpServletRequestImpl [ POST /DB2PConsultContributionService/consult ]
2020-03-04 11:20:50,327 TRACE [org.xnio.nio.selector] (XNIO-1 I/O-1) {} Selected on sun.nio.ch.WindowsSelectorImpl@3511c7
2020-03-04 11:20:50,327 TRACE [org.xnio.nio.selector] (XNIO-1 I/O-1) {} Beginning select on sun.nio.ch.WindowsSelectorImpl@3511c7 (with timeout)
2020-03-04 11:20:50,327 DEBUG [s.n.w.p.http.HttpURLConnection] (default-workqueue-1) {} sun.net.www.MessageHeader@5d05f5811 pairs: {POST /sskm/v2/SskmService_oops HTTP/1.1: null}

{Content-Type: text/xml; charset=UTF-8}

{Accept: /}

{CBSS-Trace-InboundTicket: 06ab8f30-bfae-471b-8901-528d82477613}

{SOAPAction: ""http://kszbcss.fgov.be/SskmService/getDataProviders""}

{User-Agent: Apache-CXF/3.3.4}

{Cache-Control: no-cache}

{Pragma: no-cache}

{Host: dsvc.cbss.inet}

{Connection: keep-alive}

{Content-Length: 553}
2020-03-04 11:20:50,333 TRACE [s.n.w.p.http.HttpURLConnection] (default-workqueue-1) {} KeepAlive stream used: http://dsvc.cbss.inet/sskm/v2/SskmService_oops
2020-03-04 11:20:50,335 DEBUG [s.n.w.p.http.HttpURLConnection] (default-workqueue-1) {} sun.net.www.MessageHeader@40d2c1869 pairs: {null: HTTP/1.1 404 Not Found}

{Date: Wed, 04 Mar 2020 10:20:50 GMT}

{X-Powered-By: Servlet/3.0}{$WSEP: }{Content-Length: 119}

{Keep-Alive: timeout=10, max=100}

{Connection: Keep-Alive}

{Content-Type: text/html;charset=UTF-8}

{Content-Language: en-US}
2020-03-04 11:20:50,336 DEBUG [o.a.cxf.phase.PhaseInterceptorChain] (default-workqueue-1) {} Invoking handleFault on interceptor org.apache.cxf.interceptor.MessageSenderInterceptor$MessageSenderEndingInterceptor@3c9f67c
=> Here, we see the request being passed off to a ""default-workqueue"" thread, and the MDC is gone
...
2020-03-04 11:20:50,348 ERROR [b.f.k.camel.support.XslMessageLogger] (default-workqueue-1) {} file:/D:/projects/db2p-consult-contribution/db2p-consult-contribution-camel/target/classes/common-functions/handle-internal-service-fault.xslt#58: Soap Fault without reasonCode MSG00002 received from internal service. Returning MSG00003 SOAP Fault to caller. The original Fault received was: <SOAP-ENV:Fault><faultcode xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"">SOAP-ENV:Server</faultcode><faultstring>org.apache.cxf.transport.http.HTTPException: HTTP response '404: Not Found' when communicating with http://dsvc.cbss.inet/sskm/v2/SskmService_oops</faultstring><faultactor>http://www.ksz-bcss.fgov.be/</faultactor></SOAP-ENV:Fault>
Error at char 1 in xsl:copy-of/@select on line 58 column 30 of handle-internal-service-fault.xslt:
 XTMM9000: Processing terminated by xsl:message at line 58 in handle-internal-service-fault.xslt
=> Then, we have 2 ERROR logs with missing MDC context
...
2020-03-04 11:20:50,378 DEBUG [o.a.c.i.e.DefaultReactiveExecutor] (default-workqueue-1) {camel.routeId=call-sskm} Queuing reactive work: Callback[org.apache.camel.processor.CamelInternalProcessor$$Lambda$1182/1240607953@5385b8fa]
2020-03-04 11:20:50,378 TRACE [o.a.c.i.e.DefaultReactiveExecutor] (default-workqueue-1) {camel.routeId=call-sskm} Running: Step[ID-O14-1583317250038-0-1,DefaultErrorHandler[sendTo(soap-call://sskmService)]]
2020-03-04 11:20:50,378 TRACE [o.a.c.m.DefaultInstrumentationProcessor] (default-workqueue-1) {camel.exchangeId=ID-O14-1583317250038-0-1, camel.contextId=camel-1, CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613, camel.routeId=call-sskm, camel.messageId=ID-O14-1583317250038-0-2} to: Recording duration: 141 millis for exchange: Exchange[ID-O14-1583317250038-0-1]
2020-03-04 11:20:50,378 TRACE [o.a.c.i.e.DefaultReactiveExecutor] (default-workqueue-1) {camel.exchangeId=ID-O14-1583317250038-0-1, camel.contextId=camel-1, CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613, camel.routeId=call-sskm, camel.messageId=ID-O14-1583317250038-0-2} Schedule [first=true, main=false, sync=false]: Callback[org.apache.camel.processor.Pipeline$$Lambda$1185/2003970840@3adacd81]
=> At this point, the MDC context is available again.
...
2020-03-04 11:20:50,379 TRACE [o.a.camel.component.cxf.CxfConsumer] (default-workqueue-1) {camel.exchangeId=ID-O14-1583317250038-0-1, camel.contextId=camel-1, CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613, camel.messageId=ID-O14-1583317250038-0-2} Resuming continuation of exchangeId: ID-O14-1583317250038-0-1
2020-03-04 11:20:50,380 TRACE [org.xnio.nio.selector] (XNIO-1 I/O-1) {} Selected on sun.nio.ch.WindowsSelectorImpl@3511c7
2020-03-04 11:20:50,380 TRACE [org.xnio.nio.selector] (XNIO-1 I/O-1) {} Beginning select on sun.nio.ch.WindowsSelectorImpl@3511c7 (with timeout)
2020-03-04 11:20:50,382 DEBUG [o.a.c.c.cxf.CxfClientCallback] (default-workqueue-1) {camel.exchangeId=ID-O14-1583317250038-0-1, camel.contextId=camel-1, CBSS-Trace-InboundTicket=06ab8f30-bfae-471b-8901-528d82477613, camel.messageId=ID-O14-1583317250038-0-2} default-workqueue-1 calling handleException
2020-03-04 11:20:50,383 DEBUG [o.a.c.t.servlet.ServletController] (XNIO-1 task-2) {} Service http request on thread: Thread[XNIO-1 task-2,5,default-workqueue]
=> Then, processing is passed off to yet another thread (for the response processing I presume), which also doesn't have the MDC context","jpraet:1583383952:2020-03-05T12:52:32.311+0000:1583383952:2020-03-05T12:52:32.311+0000:The problem only occurs when ""synchronous=false"" (which is the default) on the CXF endpoint. It works fine if I configure ""synchronous=true"", which I'll do for now as a workaround."
0,CAMEL-14652,Test,Minor,None,None,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,5,2020-03-04 09:54:58+00:00,2022-09-03 06:27:45+00:00,"The current test framework is some brittle clunky code that cannot be upgraded to newer solr and jetty version.


Instead use testcontainers with the official solr images","Simpcy:1583559204:2020-03-07T13:33:24.058+0000:1583559204:2020-03-07T13:33:24.058+0000:How about this, may I get this assigned to me?
acosentino:1583559511:2020-03-07T13:38:31.281+0000:1583559511:2020-03-07T13:38:31.281+0000:Sure. Go ahead.
Simpcy:1583609564:2020-03-08T03:32:44.907+0000:1583609564:2020-03-08T03:32:44.907+0000:Alright, thanks. I am having a hard time locating the test modules in the camel-website repo
acosentino:1583627555:2020-03-08T08:32:35.466+0000:1583627555:2020-03-08T08:32:35.466+0000:The test for this are in the main camel repository. Camel-website is not related to this issue. Please, before working on anything have a look at the documentation and learn about the project structure. Anyway the website is completely unrelated. 
Simpcy:1583653617:2020-03-08T15:46:57.133+0000:1583653617:2020-03-08T15:46:57.133+0000:Okay. Please, I am quite new here. This is the specific outreachy project that spurred my interest. Please how may I know the issues specific to camel website? !image-2020-03-08-16-45-42-788.png!
zregvart:1583726010:2020-03-09T11:53:30.183+0000:1583726010:2020-03-09T11:53:30.183+0000:[~Simpcy] please review the documentation on the Outreachy website and [this blog post|https://camel.apache.org/blog/Outreachy-May2020/].
davsclaus:1662101332:2022-09-02T14:48:52.400+0000:1662101332:2022-09-02T14:48:52.400+0000:[~orpiske] not sure if you have seen this ticket
orpiske:1662101697:2022-09-02T14:54:57.492+0000:1662101697:2022-09-02T14:54:57.492+0000:[~davsclaus] this one is new to me. Thanks for mentioning it. 

 

Regarding the test code for Solr, I think this might be outdated. A test-infra component for Solr was added as part of https://issues.apache.org/jira/browse/CAMEL-16542.

 

I believe we may close this one.
davsclaus:1662157665:2022-09-03T06:27:45.492+0000:1662157665:2022-09-03T06:27:45.492+0000:Thanks for checking"
0,CAMEL-14651,Bug,Major,3.1.0,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-03-04 07:25:37+00:00,2020-03-04 09:40:58+00:00,"I have a simple groovy script like:




@Grab(group='org.slf4j', module='slf4j-simple', version='1.7.30')
@Grab(group='org.apache.camel', module='camel-main', version='3.1.0')
@Grab(group='org.apache.camel', module='camel-timer', version='3.1.0')

import org.apache.camel.builder.RouteBuilder
import org.apache.camel.main.Main

def main = new Main()
main.addInitialProperty('camel.context.name', 'test-ctx')
main.addInitialProperty('message', 'test')
main.addRoutesBuilder(new RouteBuilder() {
    @Override
    void configure() {
        from('timer:{{message}}')
            .log('{{message}}');
    }
})

main.run()




Which is supposed to print test every second but what it does is to literally print message :




[main] INFO org.apache.camel.support.LRUCacheFactory - Detected and using LURCacheFactory: camel-caffeine-lrucache
[main] INFO org.apache.camel.main.BaseMainSupport - Using properties from classpath:application.properties;optional=true
[main] INFO org.apache.camel.main.BaseMainSupport - Auto-configuration summary:
[main] INFO org.apache.camel.main.BaseMainSupport - 	camel.context.name=test-ctx
[main] INFO org.apache.camel.main.DefaultRoutesCollector - Loading additional Camel XML routes from: classpath:camel/*.xml
[main] INFO org.apache.camel.main.DefaultRoutesCollector - Loading additional Camel XML rests from: classpath:camel-rest/*.xml
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.1.0 (CamelContext: test-ctx) is starting
[main] INFO org.apache.camel.impl.engine.DefaultManagementStrategy - JMX is disabled
[main] INFO org.apache.camel.impl.engine.HeadersMapFactoryResolver - Detected and using HeadersMapFactory: camel-headersmap
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Route: route1 started and consuming from: timer://test
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Total 1 routes, of which 1 are started
[main] INFO org.apache.camel.impl.engine.AbstractCamelContext - Apache Camel 3.1.0 (CamelContext: test-ctx) started in 0.099 seconds
[Camel (test-ctx) thread #2 - timer://test] INFO route1 - {{message}}
[Camel (test-ctx) thread #2 - timer://test] INFO route1 - {{message}}




Logs show that initial properties are taken into account as both the contex name and the name of the timer are set according to the properties whereas the Log EIP does not work as expected.","davsclaus:1583282078:2020-03-04T08:34:38.289+0000:1583282078:2020-03-04T08:34:38.289+0000:You can use 

.log(""${properties:message}"");

 
davsclaus:1583282648:2020-03-04T08:44:08.579+0000:1583282648:2020-03-04T08:44:08.579+0000:Okay have a fix "
0,CAMEL-14650,Bug,Trivial,3.1.0,,"

camel-http

",Closed,Not A Bug,None,Unassigned,Djordje Bajic,0,4,2020-03-03 21:48:17+00:00,2020-04-06 18:19:51+00:00,"When sending request this is logged




(INFO) o.a.camel.component.http.HttpComponent : Created ClientConnectionManager org.apache.http.impl.conn



It should be set to DEBUG log level.


Sample route:




     from(""timer:foo?period=3600000"")
                .setHeader(HTTP_URI).constant(""https://swapi.co/api/films"")
                .toD(""${headers."" + HTTP_URI + ""}"")
                .split().jsonpath(""$.results[*].episode_id"").streaming()
                    .convertBodyTo(String.class)
                    .setHeader(HTTP_METHOD).constant(GET)
                    .setHeader(HTTP_URI).simple(""https://swapi.co/api/films/${body}"")
                    .toD(""${headers."" + HTTP_URI + ""}"")
                    .log(""${body}"")
                .end();","pascalschumacher:1583244661:2020-03-03T22:11:01.267+0000:1583245906:2020-03-03T22:31:46.685+0000:This should be only for the first request (when the endpoint is created). Imho this is valuable information and we should keep it as it is.
dbajic:1583244963:2020-03-03T22:16:03.824+0000:1583244979:2020-03-03T22:16:19.855+0000:I didn't say we should remove it, just set log level to DEBUG. IMO this is not we should get as INFO.
pascalschumacher:1583245787:2020-03-03T22:29:47.886+0000:1583246514:2020-03-03T22:41:54.553+0000:Each ClientConnectionManager (at least the PoolingClientConnectionManager used by default by Camel) is basically a connection pool and takes quite some memory if I remember correctly.

Seeing (a lot of) these log messages after start-up mostly likely means you can optimize your use of Camel. Therefore I like to keep this message at INFO level.
acosentino:1583245996:2020-03-03T22:33:16.273+0000:1583245996:2020-03-03T22:33:16.273+0000:To me this kind of logging is just noisy. But you're free to revert. I do believe this kind of information is better at debug level.
davsclaus:1583272604:2020-03-04T05:56:44.780+0000:1583272604:2020-03-04T05:56:44.780+0000:Yes its likely an indication that something is creating these pools too frequently. Can you provide details about your Camel route / application or provide a .zip or put on github a sample project that reproduces this?
dbajic:1583274187:2020-03-04T06:23:07.221+0000:1583274187:2020-03-04T06:23:07.221+0000:I will provide a sample during the day.

I get this log a lot because when i am fetching some data by id, and in some cases there are 1000 requests and every endpoint is techically different because id is in base path. Anyway, if you guys feel this should be reverted, it's okay.
davsclaus:1583379927:2020-03-05T11:45:27.458+0000:1583379927:2020-03-05T11:45:27.458+0000:Did you get a chance to build a sample ?
dbajic:1583382368:2020-03-05T12:26:08.228+0000:1583382368:2020-03-05T12:26:08.228+0000:I started yesterday, but didn't manage to finish it since it was late. I hope i will post some code tomorrow. Sorry for delay.
dbajic:1583502553:2020-03-06T21:49:13.595+0000:1583502562:2020-03-06T21:49:22.611+0000:[~davsclaus] Sorry for delay once again, but my schedule is a mess. Just managed to finish sample route. Now it's up to you. :)

Thanks
pascalschumacher:1583550266:2020-03-07T11:04:26.022+0000:1583550266:2020-03-07T11:04:26.022+0000:Hi Djordje,

you can use:
{code:java}
from(""timer:foo?period=3600000"")
    .to(""https://swapi.co/api/films"")
    .split().jsonpath(""$.results[*].episode_id"").streaming()
        .convertBodyTo(String.class)
        .setHeader(Exchange.HTTP_METHOD).constant(HttpMethods.GET)
        .setHeader(Exchange.HTTP_PATH).simple(""${body}"")
        .to(""https://swapi.co/api/films"")
        .log(""${body}"")
    .end();
{code}
instead and only a single ClientConnectionManager etc. will be created.

Or if you need to poll different hosts (different HTTP_URI), use:
{code:java}
from(""timer:foo?period=3600000"")
    .setHeader(Exchange.HTTP_URI).constant(""https://swapi.co/api/films"")
    .toD(""${headers."" + Exchange.HTTP_URI + ""}"")
    .split().jsonpath(""$.results[*].episode_id"").streaming()
        .convertBodyTo(String.class)
        .setHeader(Exchange.HTTP_METHOD).constant(HttpMethods.GET)
        .setHeader(Exchange.HTTP_PATH).simple(""${body}"")
        .toD(""${headers."" + Exchange.HTTP_URI + ""}"")
        .log(""${body}"")
    .end();
{code}
instead and only a single ClientConnectionManager will be created for each host.
dbajic:1583550774:2020-03-07T11:12:54.395+0000:1583550774:2020-03-07T11:12:54.395+0000:[~pascalschumacher] thanks a lot for clarification. :) i appreciate it. :)
pascalschumacher:1583552919:2020-03-07T11:48:39.257+0000:1583553119:2020-03-07T11:51:59.295+0000:You are welcome :).

 I took another look the (imho) simplest and most intuitive implementation:  

{code:java}
from(""timer:foo?period=3600000"")
    .to(""https://swapi.co/api/films"")
    .split().jsonpath(""$.results[*].episode_id"").streaming()
        .convertBodyTo(String.class)
        .setHeader(Exchange.HTTP_METHOD).constant(HttpMethods.GET)
        .toD(""https://swapi.co/api/films/${body}"")
        .log(""${body}"")
    .end();
{code}

is also optimized by Camel ""org.apache.camel.processor.SendDynamicProcessor - Optimising toD via SendDynamicAware component: https to use static uri: https:swapi.co"" and only creates only two ClientConnectionManagers (one for the static to and one for the dynamic tos).

Fore some reason Camel can not optimize your code. 

Maybe Claus can do something about that.
pascalschumacher:1583631423:2020-03-08T09:37:03.377+0000:1583631423:2020-03-08T09:37:03.377+0000:Djordje Bajic Sorry, but I have reverted your commit.
davsclaus:1584065888:2020-03-13T10:18:08.967+0000:1584065888:2020-03-13T10:18:08.967+0000:Okay for the optimized toD to work it requires the toD url starts with the component name, eg http or https. This example uses ${headers.xxx} and therefore its not optimized. So change this to
.toD(""https:$\{headers."" + HTTP_URI + ""}"")
And set the uri without the scheme, eg without https://
swapi.co/api/films"
0,CAMEL-14649,Bug,Major,3.1.0,None,"
None
",Resolved,Fixed,"3.2.0, 3.1.1",Andrea Cosentino,Thomas Diesler,0,2,2020-03-03 16:23:37+00:00,2020-03-04 10:08:40+00:00,"Failed to process: ./target/camel-catalog/org/apache/camel/catalog/components/kafka.json

com.fasterxml.jackson.core.JsonParseException: Invalid UTF-8 middle byte 0x5c
 at [Source: (File); line: 79, column: 766]
	at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840)
	at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:712)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3573)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3580)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(UTF8StreamJsonParser.java:3385)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2489)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2437)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:293)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:267)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:68)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:15)
	at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4254)
	at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2745)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:166)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:1)
	at java.nio.file.Files.walkFileTree(Files.java:2670)
	at java.nio.file.Files.walkFileTree(Files.java:2742)
	at org.wildfly.camel.catalog.CatalogCreator.collectAvailable(CatalogCreator.java:161)
	at org.wildfly.camel.catalog.CatalogCreator.collect(CatalogCreator.java:137)
	at org.wildfly.camel.test.catalog.CatalogCreatorTest.createCatalog(CatalogCreatorTest.java:37)




At that particular location, I see




adding a small amount of artificial delay�\u0080\u0094that is




Also shows with yammer.json","tdiesler:1583223958:2020-03-03T16:25:58.760+0000:1583223958:2020-03-03T16:25:58.760+0000:CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2959
acosentino:1583228385:2020-03-03T17:39:45.566+0000:1583228385:2020-03-03T17:39:45.566+0000:What are you see in yammer instead?
acosentino:1583228405:2020-03-03T17:40:05.727+0000:1583228405:2020-03-03T17:40:05.727+0000:kafka one is fixed.
tdiesler:1583283688:2020-03-04T09:01:28.731+0000:1583283688:2020-03-04T09:01:28.731+0000:yammer.json fails with 

{code}
com.fasterxml.jackson.core.JsonParseException: Invalid UTF-8 middle byte 0x5c
 at [Source: (File); line: 37, column: 617]
	at com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1840)
	at com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:712)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3573)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._reportInvalidOther(UTF8StreamJsonParser.java:3580)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._decodeUtf8_3fast(UTF8StreamJsonParser.java:3385)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishString2(UTF8StreamJsonParser.java:2489)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser._finishAndReturnString(UTF8StreamJsonParser.java:2437)
	at com.fasterxml.jackson.core.json.UTF8StreamJsonParser.getText(UTF8StreamJsonParser.java:293)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:267)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.BaseNodeDeserializer.deserializeObject(JsonNodeDeserializer.java:258)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:68)
	at com.fasterxml.jackson.databind.deser.std.JsonNodeDeserializer.deserialize(JsonNodeDeserializer.java:15)
	at com.fasterxml.jackson.databind.ObjectMapper._readTreeAndClose(ObjectMapper.java:4254)
	at com.fasterxml.jackson.databind.ObjectMapper.readTree(ObjectMapper.java:2745)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:168)
	at org.wildfly.camel.catalog.CatalogCreator$1.visitFile(CatalogCreator.java:1)
	at java.nio.file.Files.walkFileTree(Files.java:2670)
	at java.nio.file.Files.walkFileTree(Files.java:2742)
	at org.wildfly.camel.catalog.CatalogCreator.collectAvailable(CatalogCreator.java:160)
	at org.wildfly.camel.catalog.CatalogCreator.collect(CatalogCreator.java:136)
	at org.wildfly.camel.test.catalog.CatalogCreatorTest.createCatalog(CatalogCreatorTest.java:37)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)

{code}
acosentino:1583285258:2020-03-04T09:27:38.072+0000:1583285258:2020-03-04T09:27:38.072+0000:working on yammer.
acosentino:1583287720:2020-03-04T10:08:40.640+0000:1583287720:2020-03-04T10:08:40.640+0000:It should be fixed on yammer too"
0,CAMEL-14648,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-03 05:26:13+00:00,2020-03-03 15:11:53+00:00,"We encode the context-path twice.


The java.net.URI is much slower and parses endpoint URIs into additional parts which Camel does not use or need.",
0,CAMEL-14647,Improvement,Minor,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Luigi De Masi,Luigi De Masi,0,2,2020-03-02 16:51:24+00:00,2020-10-13 12:19:45+00:00,"Add scheduling feature to blob and queue consumers, extending ScheduledPollConsumer abstract class, like AWS S3 does.","omarsmak:1583491857:2020-03-06T18:50:57.647+0000:1583491857:2020-03-06T18:50:57.647+0000:FYI [~ldemasi], I am working currently on migrating the azure component to sdkv12 and separate them per CAMEL-14655 and CAMEL-14654. Perhaps after is being done, we can add it to the new components for the new sdk. 
ldemasi:1583559046:2020-03-07T13:30:46.600+0000:1583559046:2020-03-07T13:30:46.600+0000:Hello [~omarsmak],

great! sdkv12 supports also batch processing  so we can implement [ScheduledBatchPollingConsumer|https://bit.ly/32WHwGG] as  AWS S3 component does. 

If you need any help for the migration, I'm more than happy to contribute.
omarsmak:1583560451:2020-03-07T13:54:11.184+0000:1583560451:2020-03-07T13:54:11.184+0000:Thanks a lot [~ldemasi]! First, I will try to migrate these as a first version, will send a PR hopefully next week, and from there we might need to iterate over them to make them in par on what we have for AWS S3. 
omarsmak:1586910802:2020-04-15T08:33:22.347+0000:1586910802:2020-04-15T08:33:22.347+0000:Hey [~ldemasi], sorry for delay. Here is the new storage-blob component (https://github.com/apache/camel/tree/master/components/camel-azure-storage-blob). Looking forward to your PR!
ldemasi:1602562757:2020-10-13T12:19:17.048+0000:1602562757:2020-10-13T12:19:17.048+0000:Resolved by CAMEL-15656 "
0,CAMEL-14646,Improvement,Minor,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Luigi De Masi,Luigi De Masi,0,1,2020-03-02 16:33:39+00:00,2020-03-07 15:38:48+00:00,"On both blob and queue, add the possibility to set credentials as query parameters on URI, like in AWS S3:




azure-blob://camelazure/container1/blobBlock?credentialsAccountName=xxxx&credentialsAccountKey=yyyyy",
0,CAMEL-14645,Bug,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Nicola Ferraro,0,2,2020-03-02 15:45:39+00:00,2020-03-05 15:48:58+00:00,"The order in which routes are declared changes the behavior of the integration.


 


E.g.




rest()
  .get(""/{pippo}"")
  .route()
  .setBody().simple(""Route with name: ${header.pippo}"")
  .setHeader(""Content-Type"", constant(""text/plain""));


rest()
  .get(""/"")
  .route()
  .setBody().constant(""Route without name"")
  .setHeader(""Content-Type"", constant(""text/plain""));




When calling it with:




curl http://service:8080/




The first route replies (""Route with name: ...""), but the second was supposed to.


This same example works with jetty and netty-http.


As workaround for undertow, if the order of the two routes is reversed, it works correctly.
But when you create a route from a given openapi.json file, the order is given and you're not supposed to change it.",davsclaus:1583380466:2020-03-05T11:54:26.898+0000:1583380466:2020-03-05T11:54:26.898+0000:Yeah sadly undertow has some custom code and dont rely on RestConsumerContextPathMatcher which is the logic for matching paths. This needs a bit of work to fix
0,CAMEL-14644,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-02 12:22:31+00:00,2020-03-02 18:33:45+00:00,This avoids some overhead of normalizing the same uri twice,
0,CAMEL-14643,Bug,Major,"3.0.1, 3.1.0",3.3.0,"
None
",Resolved,Fixed,3.3.0,Claus Ibsen,Preben Asmussen,0,2,2020-03-02 11:08:06+00:00,2020-05-06 17:41:56+00:00,"When upgrading from camel 3.0.0 to 3.x.x the spring.activemq.broker-url is no longer used when configuring the camel-activemq component. 
It seems that you now have to specify both the spring property (for the SB health check to work) and the camel.componnt.activemq.broker-u-r-l for the component to work when picking up configuration properties.
There is an example here https://github.com/pax95/failover-test 
when you omit the camel.component.activemq.broker-u-r-l the component picks up the default localhost broker and not the spring boot one specified by spring.activemq.broker-url
Maybe there there are some SB bean conditionals missing ?","davsclaus:1583461682:2020-03-06T10:28:02.696+0000:1583461789:2020-03-06T10:29:49.078+0000:You need to turn on allow to use autowired CF as its mistakenly disabled on SB

 

camel:
 springboot:
 shutdown-timeout: 2
 component:
 activemq:
 allow-auto-wired-connection-factory: true
 health:
 check:
 routes:
 enabled: true
davsclaus:1583462050:2020-03-06T10:34:10.324+0000:1583462050:2020-03-06T10:34:10.324+0000:This has been fixed in Camel 3.2 so the default is now true, so when you upgrade to this release you can remove that option
preben:1588653143:2020-05-05T12:32:23.741+0000:1588653143:2020-05-05T12:32:23.741+0000:[~davsclaus] Just upgraded to 3.2.0 and SB 2.2.6.RELEASE  on the app. 
It seems that the allow-auto-wired-connection-factory set to true doesn't work on 3.2.0 as it did on 3.1.0.
Now SB picks up the right CF (seen on the actuator endpoint), but Camel sticks to the default 'localhost:61616' ->
Failed to connect to [tcp://localhost:61616] 
Some other changes on 3.2 might have changed to affect the behaviour.

The effect can be seen on the example project by upgrading Camel and SB.
davsclaus:1588656802:2020-05-05T13:33:22.491+0000:1588656823:2020-05-05T13:33:43.834+0000:Update your github project so its easier for us to reproduce please.

And add instructions if needed how to run/test etc
preben:1588728519:2020-05-06T09:28:39.708+0000:1588728519:2020-05-06T09:28:39.708+0000:upgraded the example to 3.2.0 to show the error.
Run the app by invoking mvn clean package spring-boot:run
Console output will show that camel tries to connect to the default broker url localhost:61616. Where it should have been foo:61617 or bar:61617

2020-05-06 11:18:02.715 WARN 30558 --- [ActiveMQ Task-1] o.a.a.t.failover.FailoverTransport : Failed to connect to [tcp://localhost:61616] after: 10 attempt(s) continuing to retry.

When invoking the health endpoint on [http://localhost:8080/actuator/health]
The SB cf seems to have picked up the right configured CF
2020-05-06 11:24:19.636 ERROR 33231 --- [nio-8080-exec-1] o.a.a.t.failover.FailoverTransport : Failed to Lookup INetAddress for URI[ssl://bar:61617] : {}

I was trying to grog a unittest, but I didn't really find some good examples of how to setup a broker in failover mode in a unittest. Sorry :(
davsclaus:1588756097:2020-05-06T17:08:17.232+0000:1588756097:2020-05-06T17:08:17.232+0000:Thanks I have a potential fix in the works.

If you dont use the spring boot CF then it works fine with Camel

camel:
  springboot:
    shutdown-timeout: 2
  component:
    activemq:
      broker-url: failover:(ssl://foo:61617,ssl://bar:61617)
      allow-auto-wired-connection-factory: true

But then its not a SB CF"
0,CAMEL-14642,Improvement,Minor,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-02 07:44:10+00:00,2020-03-16 12:58:06+00:00,"2020-03-02 08:39:57.590 INFO 2667 — [ngupInterceptor] o.a.c.i.engine.DefaultShutdownStrategy : Graceful shutdown of 1 routes completed in 0 seconds
2020-03-02 08:39:59.598 INFO 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Waited 2.003 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] to terminate...
2020-03-02 08:40:01.604 INFO 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Waited 4.009 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] to terminate...
2020-03-02 08:40:03.605 INFO 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Waited 6.010 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] to terminate...
2020-03-02 08:40:05.606 INFO 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Waited 8.010 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] to terminate...
2020-03-02 08:40:07.601 INFO 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Waited 10.006 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] to terminate...
2020-03-02 08:40:07.602 WARN 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Forcing shutdown of ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] due first await termination elapsed.
2020-03-02 08:40:07.603 INFO 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Shutdown of ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask] is shutdown: true and terminated: true took: 10.009 seconds.
2020-03-02 08:40:07.603 WARN 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : Forced shutdown of 1 ExecutorService's which has not been shutdown properly (acting as fail-safe)
2020-03-02 08:40:07.603 WARN 2667 — [ngupInterceptor] o.a.c.i.e.BaseExecutorServiceManager : forced -> org.apache.camel.util.concurrent.SizedScheduledExecutorService@6940f685[CamelSpringBootTerminateTask]
2020-03-02 08:40:07.604 INFO 2667 — [ngupInterceptor] o.a.c.impl.engine.AbstractCamelContext : Apache Camel 3.2.0-SNAPSHOT (CamelContext: PojoExample) uptime 12.024 seconds
2020-03-02 08:40:07.604 INFO 2667 — [ngupInterceptor] o.a.c.impl.engine.AbstractCamelContext : Apache Camel 3.2.0-SNAPSHOT (CamelContext: PojoExample) is shutdown in 10.021 seconds


 


 


Try the camel-example-spring-boot-pojo and terminate before 60 seconds via ctrl + c and you see above",
0,CAMEL-14641,Improvement,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-02 07:37:30+00:00,2020-03-02 07:42:30+00:00,"to keep the JVM running
camel.springboot.main-run-controller = true


 


If using application.properties then camel-spring-boot via run controller may initialize some options twice, as it use camel-main that pickup application.properties and also initiaze which spring boot already have done before.",
0,CAMEL-14640,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,XuCongying,0,3,2020-03-01 13:02:49+00:00,2020-03-27 10:54:55+00:00,"Hi, I found that your project are using some vulnerable dependencies. To prevent potential risk it may cause, I suggest a library update. Here is the details:


 Vulnerable Library Version: com.squareup.okhttp3 : okhttp : 3.11.0
  CVE ID: [CVE-2018-20200](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20200)
  Import Path: components/camel-jetty/pom.xml
  Suggested Safe Versions: 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.13.0, 3.13.1, 3.14.0, 3.14.1, 3.14.2, 3.14.3, 3.14.4, 3.14.5, 3.14.6, 4.0.0, 4.0.0-RC1, 4.0.0-RC2, 4.0.0-RC3, 4.0.0-alpha01, 4.0.0-alpha02, 4.0.1, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.2.2, 4.3.0, 4.3.1, 4.4.0


 Vulnerable Library Version: org.apache.tomcat.embed : tomcat-embed-core : 8.5.0
  CVE ID: [CVE-2016-0762](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0762), [CVE-2017-5650](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5650), [CVE-2016-6797](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6797), [CVE-2017-5647](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5647), [CVE-2017-5664](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5664), [CVE-2017-12617](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12617), [CVE-2016-3092](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092), [CVE-2019-0199](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0199), [CVE-2017-5648](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5648), [CVE-2019-10072](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10072), [CVE-2017-5651](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5651)
  Import Path: components/camel-servlet/pom.xml
  Suggested Safe Versions: 10.0.0-M1, 8.5.41, 8.5.42, 8.5.43, 8.5.45, 8.5.46, 8.5.47, 8.5.49, 8.5.50, 8.5.51, 9.0.27, 9.0.29, 9.0.30, 9.0.31


 Vulnerable Library Version: org.apache.spark : spark-core_2.11 : 2.4.4
  CVE ID: [CVE-2017-7678](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7678)
  Import Path: components/camel-spark/pom.xml
  Suggested Safe Versions: 2.4.5


 Vulnerable Library Version: org.apache.lucene : lucene-core : 3.6.0
  CVE ID: [CVE-2017-3163](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-3163)
  Import Path: components/camel-jcr/pom.xml
  Suggested Safe Versions: 6.4.1, 6.4.2, 6.5.0, 6.5.1, 6.6.0, 6.6.1, 6.6.2, 6.6.3, 6.6.4, 6.6.5, 6.6.6, 7.0.0, 7.0.1, 7.1.0, 7.2.0, 7.2.1, 7.3.0, 7.3.1, 7.4.0, 7.5.0, 7.6.0, 7.7.0, 7.7.1, 7.7.2, 8.0.0, 8.1.0, 8.1.1, 8.2.0, 8.3.0, 8.3.1, 8.4.0, 8.4.1


 Vulnerable Library Version: org.apache.logging.log4j : log4j-api : 2.7
  CVE ID: [CVE-2017-5645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645)
  Import Path: examples/camel-example-google-pubsub/pom.xml, examples/camel-example-kafka/pom.xml, examples/camel-example-debezium/pom.xml
  Suggested Safe Versions: 2.10.0, 2.11.0, 2.11.1, 2.11.2, 2.12.0, 2.12.1, 2.13.0, 2.8.2, 2.9.0, 2.9.1


 Vulnerable Library Version: org.apache.hadoop : hadoop-hdfs : 2.7.4
  CVE ID: [CVE-2018-11768](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11768)
  Import Path: components/camel-hdfs/pom.xml, components/camel-hbase/pom.xml, components/camel-hbase/pom.xml
  Suggested Safe Versions: 2.10.0, 2.8.5, 2.9.2, 3.1.2, 3.1.3, 3.2.0, 3.2.1


 Vulnerable Library Version: org.apache.logging.log4j : log4j-core : 2.7
  CVE ID: [CVE-2019-17571](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17571), [CVE-2017-5645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645)
  Import Path: examples/camel-example-google-pubsub/pom.xml, examples/camel-example-kafka/pom.xml, examples/camel-example-debezium/pom.xml
  Suggested Safe Versions: 2.10.0, 2.11.0, 2.11.1, 2.11.2, 2.12.0, 2.12.1, 2.13.0, 2.8.2, 2.9.0, 2.9.1


 Vulnerable Library Version: org.asynchttpclient : async-http-client : 2.0.16
  CVE ID: [CVE-2017-14063](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14063)
  Import Path: components/camel-websocket/pom.xml
  Suggested Safe Versions: 2.0.35, 2.0.36, 2.0.37, 2.0.38, 2.0.39, 2.0.40, 2.1.0, 2.1.0-RC1, 2.1.0-RC2, 2.1.0-RC3, 2.1.0-RC4, 2.1.0-alpha1, 2.1.0-alpha10, 2.1.0-alpha11, 2.1.0-alpha12, 2.1.0-alpha13, 2.1.0-alpha14, 2.1.0-alpha15, 2.1.0-alpha16, 2.1.0-alpha17, 2.1.0-alpha18, 2.1.0-alpha19, 2.1.0-alpha2, 2.1.0-alpha20, 2.1.0-alpha21, 2.1.0-alpha22, 2.1.0-alpha23, 2.1.0-alpha24, 2.1.0-alpha25, 2.1.0-alpha26, 2.1.0-alpha3, 2.1.0-alpha4, 2.1.0-alpha5, 2.1.0-alpha6, 2.1.0-alpha7, 2.1.0-alpha8, 2.1.0-alpha9, 2.1.1, 2.1.2, 2.10.0, 2.10.1, 2.10.2, 2.10.3, 2.10.4, 2.10.5, 2.2.0, 2.2.1, 2.3.0, 2.4.0, 2.4.1, 2.4.2, 2.4.3, 2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.5.0, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.6.0, 2.7.0, 2.8.0, 2.8.1, 2.9.0


 Vulnerable Library Version: commons-httpclient : commons-httpclient : 3.1
  CVE ID: [CVE-2014-3577](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3577), [CVE-2012-5783](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5783), [CVE-2012-6153](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-6153)
  Import Path: catalog/camel-catalog-maven/pom.xml, components/camel-elytron/pom.xml, components/camel-weather/pom.xml, components/camel-jetty/pom.xml, components/camel-netty-http/pom.xml, components/camel-spring-ws/pom.xml, components/camel-undertow/pom.xml, tests/camel-itest/pom.xml
  Suggested Safe Versions: 3.0alpha2


 Vulnerable Library Version: org.apache.hadoop : hadoop-common : 2.7.4
  CVE ID: [CVE-2017-15718](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15718), [CVE-2018-8029](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8029), [CVE-2017-15713](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15713), [CVE-2018-8009](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8009)
  Import Path: components/camel-hdfs/pom.xml, components/camel-hbase/pom.xml, components/camel-spark/pom.xml
  Suggested Safe Versions: 3.1.1, 3.1.2, 3.1.3, 3.2.0, 3.2.1


 Vulnerable Library Version: org.eclipse.jetty : jetty-server : 9.4.11.v20180605
  CVE ID: [CVE-2019-10247](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10247)
  Import Path: components/camel-solr/pom.xml
  Suggested Safe Versions: 10.0.0-alpha0, 10.0.0.alpha1, 9.4.17.v20190418, 9.4.18.v20190429, 9.4.19.v20190610, 9.4.20.v20190813, 9.4.24.v20191120, 9.4.25.v20191220, 9.4.26.v20200117


 Vulnerable Library Version: mysql : mysql-connector-java : 8.0.15
  CVE ID: [CVE-2019-2692](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2692)
  Import Path: components/camel-debezium-mysql/pom.xml
  Suggested Safe Versions: 8.0.16, 8.0.17, 8.0.18, 8.0.19


 Vulnerable Library Version: com.google.guava : guava : 14.0.1
  CVE ID: [CVE-2018-10237](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10237)
  Import Path: components/camel-hbase/pom.xml
  Suggested Safe Versions: 24.1.1-android, 24.1.1-jre, 25.0-android, 25.0-jre, 25.1-android, 25.1-jre, 26.0-android, 26.0-jre, 27.0-android, 27.0-jre, 27.0.1-android, 27.0.1-jre, 27.1-android, 27.1-jre, 28.0-android, 28.0-jre, 28.1-android, 28.1-jre, 28.2-android, 28.2-jre


 Vulnerable Library Version: com.google.guava : guava : 19.0
  CVE ID: [CVE-2018-10237](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10237)
  Import Path: components/camel-wordpress/pom.xml, components/camel-gora/pom.xml, components/camel-ignite/pom.xml, components/camel-guava-eventbus/pom.xml, tooling/maven/camel-package-maven-plugin/pom.xml
  Suggested Safe Versions: 24.1.1-android, 24.1.1-jre, 25.0-android, 25.0-jre, 25.1-android, 25.1-jre, 26.0-android, 26.0-jre, 27.0-android, 27.0-jre, 27.0.1-android, 27.0.1-jre, 27.1-android, 27.1-jre, 28.0-android, 28.0-jre, 28.1-android, 28.1-jre, 28.2-android, 28.2-jre


 Vulnerable Library Version: com.fasterxml.jackson.core : jackson-databind : 2.6.7.1
  CVE ID: [CVE-2017-17485](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17485), [CVE-2020-8840](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8840), [CVE-2019-20330](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-20330), [CVE-2019-12384](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12384), [CVE-2019-14439](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14439), [CVE-2018-19362](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362), [CVE-2018-11307](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11307), [CVE-2018-14721](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14721), [CVE-2018-14719](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14719), [CVE-2018-7489](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7489), [CVE-2019-17531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17531), [CVE-2019-12086](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12086), [CVE-2017-15095](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15095), [CVE-2018-14718](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14718), [CVE-2019-16943](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16943), [CVE-2019-12814](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12814), [CVE-2018-19361](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19361), [CVE-2018-19360](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19360), [CVE-2018-14720](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14720), [CVE-2019-16942](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16942), [CVE-2017-7525](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7525)
  Import Path: components/camel-spark/pom.xml
  Suggested Safe Versions: 2.10.0, 2.10.1, 2.10.2, 2.9.10.3


 Vulnerable Library Version: com.nimbusds : nimbus-jose-jwt : 4.13.1
  CVE ID: [CVE-2019-17195](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17195), [CVE-2017-12973](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12973), [CVE-2017-12974](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12974), [CVE-2017-12972](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12972)
  Import Path: components/camel-elytron/pom.xml
  Suggested Safe Versions: 7.8.1, 7.9, 8.0, 8.1, 8.2, 8.2.1, 8.3, 8.4, 8.4.1, 8.5, 8.5.1, 8.6, 8.7


Vulnerable Library Version: org.apache.ws.security : wss4j : 1.6.8
  CVE ID: [CVE-2015-0227](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0227), [CVE-2014-3623](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3623), [CVE-2015-0226](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0226)
  Import Path: tests/camel-performance/pom.xml
  Suggested Safe Versions: 1.6.17, 1.6.18, 1.6.19","acosentino:1583106542:2020-03-02T07:49:02.590+0000:1583106542:2020-03-02T07:49:02.590+0000:Please report what version of the library you were scanning, otherwise this report would be useless.
acosentino:1583133578:2020-03-02T15:19:38.468+0000:1583133578:2020-03-02T15:19:38.468+0000:I don't think the image is useful.
acosentino:1583133803:2020-03-02T15:23:23.273+0000:1583133803:2020-03-02T15:23:23.273+0000:I mean the Camel version, please report the camel version you were scanning.
XuCY:1583135328:2020-03-02T15:48:48.046+0000:1583135328:2020-03-02T15:48:48.046+0000:Sorry, the image is not clear, and I will replace it with a CVE report file.

The camel version is [3.1.0|[https://github.com/apache/camel/releases/tag/camel-3.1.0]] , thanks
XuCY:1583135509:2020-03-02T15:51:49.024+0000:1583135509:2020-03-02T15:51:49.024+0000:This is the content of the CVE report (apache-camel_CVE-report.md).

 

I found that the buggy methods of the CVEs are in the program execution path of your project, which makes your project at risk. I have suggested some version updates. See details below:
 * *Vulnerable Dependency:* org.apache.hadoop : hadoop-common : 2.7.4

 * *Call Chain to Buggy Methods:*

 ** *Some files in your project call the library method org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(java.lang.String,java.lang.String), which can reach the buggy method of [CVE-2017-15713|https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15713].*

 *** Files in your project:  components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/kerberos/KerberosAuthentication.java

 *** One of the possible call chain:
org.apache.hadoop.security.UserGroupInformation.loginUserFromKeytab(java.lang.String,java.lang.String)
org.apache.hadoop.security.UserGroupInformation.isSecurityEnabled()
org.apache.hadoop.security.UserGroupInformation.isAuthenticationMethodEnabled(org.apache.hadoop.security.UserGroupInformation$AuthenticationMethod)
org.apache.hadoop.security.UserGroupInformation.ensureInitialized()
org.apache.hadoop.security.UserGroupInformation.initialize(org.apache.hadoop.conf.Configuration,boolean)
org.apache.hadoop.security.SecurityUtil.getAuthenticationMethod(org.apache.hadoop.conf.Configuration)
org.apache.hadoop.conf.Configuration.get(java.lang.String,java.lang.String)
org.apache.hadoop.conf.Configuration.substituteVars(java.lang.String) [buggy method]
 ** *Some files in your project call the library method org.apache.hadoop.security.UserGroupInformation.setConfiguration(org.apache.hadoop.conf.Configuration), which can reach the buggy method of [CVE-2017-15713|https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15713].*

 *** Files in your project:  components/camel-hdfs/src/main/java/org/apache/camel/component/hdfs/kerberos/KerberosAuthentication.java

 *** One of the possible call chain:
org.apache.hadoop.security.UserGroupInformation.setConfiguration(org.apache.hadoop.conf.Configuration)
org.apache.hadoop.security.UserGroupInformation.initialize(org.apache.hadoop.conf.Configuration,boolean)
org.apache.hadoop.security.SecurityUtil.getAuthenticationMethod(org.apache.hadoop.conf.Configuration)
org.apache.hadoop.conf.Configuration.get(java.lang.String,java.lang.String)
org.apache.hadoop.conf.Configuration.substituteVars(java.lang.String) [buggy method]
 ** *Update suggestion:* version 3.2.1 3.2.1 is a safe version without CVEs. From 2.7.4 to 3.2.1, 11 of the APIs (called by 30 times in your project) were modified.
acosentino:1583135939:2020-03-02T15:58:59.457+0000:1583135939:2020-03-02T15:58:59.457+0000:It's not possible to update dependencies everywhere. We're doing what we can.

 

Also in the original report there are also some examples references, but examples folder has been removed. So I don't really know on what you're running this automatic check.
acosentino:1583136969:2020-03-02T16:16:09.407+0000:1585277528:2020-03-27T10:52:08.611+0000:Status will be reported here 

-Vulnerable Library Version: com.squareup.okhttp3 : okhttp : 3.11.0-
 CVE ID: [CVE-2018-20200]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20200])
 Import Path: components/camel-jetty/pom.xml
 Suggested Safe Versions: 3.12.1, 3.12.2, 3.12.3, 3.12.4, 3.12.5, 3.12.6, 3.12.7, 3.12.8, 3.13.0, 3.13.1, 3.14.0, 3.14.1, 3.14.2, 3.14.3, 3.14.4, 3.14.5, 3.14.6, 4.0.0, 4.0.0-RC1, 4.0.0-RC2, 4.0.0-RC3, 4.0.0-alpha01, 4.0.0-alpha02, 4.0.1, 4.1.0, 4.1.1, 4.2.0, 4.2.1, 4.2.2, 4.3.0, 4.3.1, 4.4.0

-Vulnerable Library Version: org.apache.tomcat.embed : tomcat-embed-core : 8.5.0-
 CVE ID: [CVE-2016-0762]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0762]), [CVE-2017-5650]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5650]), [CVE-2016-6797]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6797]), [CVE-2017-5647]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5647]), [CVE-2017-5664]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5664]), [CVE-2017-12617]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12617]), [CVE-2016-3092]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-3092]), [CVE-2019-0199]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0199]), [CVE-2017-5648]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5648]), [CVE-2019-10072]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10072]), [CVE-2017-5651]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5651])
 Import Path: components/camel-servlet/pom.xml
 Suggested Safe Versions: 10.0.0-M1, 8.5.41, 8.5.42, 8.5.43, 8.5.45, 8.5.46, 8.5.47, 8.5.49, 8.5.50, 8.5.51, 9.0.27, 9.0.29, 9.0.30, 9.0.31

-Vulnerable Library Version: org.apache.spark : spark-core_2.11 : 2.4.4-
 CVE ID: [CVE-2017-7678]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7678])
 Import Path: components/camel-spark/pom.xml
 Suggested Safe Versions: 2.4.5

Vulnerable Library Version: org.apache.lucene : lucene-core : 3.6.0
 CVE ID: [CVE-2017-3163]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-3163])
 Import Path: components/camel-jcr/pom.xml
 Suggested Safe Versions: 6.4.1, 6.4.2, 6.5.0, 6.5.1, 6.6.0, 6.6.1, 6.6.2, 6.6.3, 6.6.4, 6.6.5, 6.6.6, 7.0.0, 7.0.1, 7.1.0, 7.2.0, 7.2.1, 7.3.0, 7.3.1, 7.4.0, 7.5.0, 7.6.0, 7.7.0, 7.7.1, 7.7.2, 8.0.0, 8.1.0, 8.1.1, 8.2.0, 8.3.0, 8.3.1, 8.4.0, 8.4.1

-Vulnerable Library Version: org.apache.logging.log4j : log4j-api : 2.7-
 CVE ID: [CVE-2017-5645]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645])
 Import Path: examples/camel-example-google-pubsub/pom.xml, examples/camel-example-kafka/pom.xml, examples/camel-example-debezium/pom.xml
 Suggested Safe Versions: 2.10.0, 2.11.0, 2.11.1, 2.11.2, 2.12.0, 2.12.1, 2.13.0, 2.8.2, 2.9.0, 2.9.1

-Vulnerable Library Version: org.apache.hadoop : hadoop-hdfs : 2.7.4-
 CVE ID: [CVE-2018-11768]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11768])
 Import Path: components/camel-hdfs/pom.xml, components/camel-hbase/pom.xml, components/camel-hbase/pom.xml
 Suggested Safe Versions: 2.10.0, 2.8.5, 2.9.2, 3.1.2, 3.1.3, 3.2.0, 3.2.1

-Vulnerable Library Version: org.apache.logging.log4j : log4j-core : 2.7-
 CVE ID: [CVE-2019-17571]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17571]), [CVE-2017-5645]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645])
 Import Path: examples/camel-example-google-pubsub/pom.xml, examples/camel-example-kafka/pom.xml, examples/camel-example-debezium/pom.xml
 Suggested Safe Versions: 2.10.0, 2.11.0, 2.11.1, 2.11.2, 2.12.0, 2.12.1, 2.13.0, 2.8.2, 2.9.0, 2.9.1

-Vulnerable Library Version: org.asynchttpclient : async-http-client : 2.0.16-
 CVE ID: [CVE-2017-14063]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14063])
 Import Path: components/camel-websocket/pom.xml
 Suggested Safe Versions: 2.0.35, 2.0.36, 2.0.37, 2.0.38, 2.0.39, 2.0.40, 2.1.0, 2.1.0-RC1, 2.1.0-RC2, 2.1.0-RC3, 2.1.0-RC4, 2.1.0-alpha1, 2.1.0-alpha10, 2.1.0-alpha11, 2.1.0-alpha12, 2.1.0-alpha13, 2.1.0-alpha14, 2.1.0-alpha15, 2.1.0-alpha16, 2.1.0-alpha17, 2.1.0-alpha18, 2.1.0-alpha19, 2.1.0-alpha2, 2.1.0-alpha20, 2.1.0-alpha21, 2.1.0-alpha22, 2.1.0-alpha23, 2.1.0-alpha24, 2.1.0-alpha25, 2.1.0-alpha26, 2.1.0-alpha3, 2.1.0-alpha4, 2.1.0-alpha5, 2.1.0-alpha6, 2.1.0-alpha7, 2.1.0-alpha8, 2.1.0-alpha9, 2.1.1, 2.1.2, 2.10.0, 2.10.1, 2.10.2, 2.10.3, 2.10.4, 2.10.5, 2.2.0, 2.2.1, 2.3.0, 2.4.0, 2.4.1, 2.4.2, 2.4.3, 2.4.4, 2.4.5, 2.4.6, 2.4.7, 2.4.8, 2.4.9, 2.5.0, 2.5.1, 2.5.2, 2.5.3, 2.5.4, 2.6.0, 2.7.0, 2.8.0, 2.8.1, 2.9.0

-Vulnerable Library Version: commons-httpclient : commons-httpclient : 3.1-
 CVE ID: [CVE-2014-3577]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3577]), [CVE-2012-5783]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-5783]), [CVE-2012-6153]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-6153])
 Import Path: catalog/camel-catalog-maven/pom.xml, components/camel-elytron/pom.xml, components/camel-weather/pom.xml, components/camel-jetty/pom.xml, components/camel-netty-http/pom.xml, components/camel-spring-ws/pom.xml, components/camel-undertow/pom.xml, tests/camel-itest/pom.xml
 Suggested Safe Versions: 3.0alpha2

-Vulnerable Library Version: org.apache.hadoop : hadoop-common : 2.7.4-
 CVE ID: [CVE-2017-15718]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15718]), [CVE-2018-8029]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8029]), [CVE-2017-15713]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15713]), [CVE-2018-8009]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8009])
 Import Path: components/camel-hdfs/pom.xml, components/camel-hbase/pom.xml, components/camel-spark/pom.xml
 Suggested Safe Versions: 3.1.1, 3.1.2, 3.1.3, 3.2.0, 3.2.1

-Vulnerable Library Version: org.eclipse.jetty : jetty-server : 9.4.11.v20180605-
 CVE ID: [CVE-2019-10247]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-10247])
 Import Path: components/camel-solr/pom.xml
 Suggested Safe Versions: 10.0.0-alpha0, 10.0.0.alpha1, 9.4.17.v20190418, 9.4.18.v20190429, 9.4.19.v20190610, 9.4.20.v20190813, 9.4.24.v20191120, 9.4.25.v20191220, 9.4.26.v20200117

-Vulnerable Library Version: mysql : mysql-connector-java : 8.0.15-
 CVE ID: [CVE-2019-2692]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-2692])
 Import Path: components/camel-debezium-mysql/pom.xml
 Suggested Safe Versions: 8.0.16, 8.0.17, 8.0.18, 8.0.19

-Vulnerable Library Version: com.google.guava : guava : 14.0.1-
 CVE ID: [CVE-2018-10237]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10237])
 Import Path: components/camel-hbase/pom.xml
 Suggested Safe Versions: 24.1.1-android, 24.1.1-jre, 25.0-android, 25.0-jre, 25.1-android, 25.1-jre, 26.0-android, 26.0-jre, 27.0-android, 27.0-jre, 27.0.1-android, 27.0.1-jre, 27.1-android, 27.1-jre, 28.0-android, 28.0-jre, 28.1-android, 28.1-jre, 28.2-android, 28.2-jre

-Vulnerable Library Version: com.google.guava : guava : 19.0-
 CVE ID: [CVE-2018-10237]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10237])
 Import Path: components/camel-wordpress/pom.xml, components/camel-gora/pom.xml, components/camel-ignite/pom.xml, components/camel-guava-eventbus/pom.xml, tooling/maven/camel-package-maven-plugin/pom.xml
 Suggested Safe Versions: 24.1.1-android, 24.1.1-jre, 25.0-android, 25.0-jre, 25.1-android, 25.1-jre, 26.0-android, 26.0-jre, 27.0-android, 27.0-jre, 27.0.1-android, 27.0.1-jre, 27.1-android, 27.1-jre, 28.0-android, 28.0-jre, 28.1-android, 28.1-jre, 28.2-android, 28.2-jre

-Vulnerable Library Version: com.fasterxml.jackson.core : jackson-databind : 2.6.7.1-
 CVE ID: [CVE-2017-17485]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-17485]), [CVE-2020-8840]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-8840]), [CVE-2019-20330]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-20330]), [CVE-2019-12384]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12384]), [CVE-2019-14439]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-14439]), [CVE-2018-19362]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362]), [CVE-2018-11307]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11307]), [CVE-2018-14721]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14721]), [CVE-2018-14719]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14719]), [CVE-2018-7489]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7489]), [CVE-2019-17531]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17531]), [CVE-2019-12086]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12086]), [CVE-2017-15095]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15095]), [CVE-2018-14718]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14718]), [CVE-2019-16943]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16943]), [CVE-2019-12814]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-12814]), [CVE-2018-19361]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19361]), [CVE-2018-19360]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19360]), [CVE-2018-14720]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14720]), [CVE-2019-16942]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16942]), [CVE-2017-7525]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7525])
 Import Path: components/camel-spark/pom.xml
 Suggested Safe Versions: 2.10.0, 2.10.1, 2.10.2, 2.9.10.3

-Vulnerable Library Version: com.nimbusds : nimbus-jose-jwt : 4.13.1-
 CVE ID: [CVE-2019-17195]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-17195]), [CVE-2017-12973]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12973]), [CVE-2017-12974]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12974]), [CVE-2017-12972]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12972])
 Import Path: components/camel-elytron/pom.xml
 Suggested Safe Versions: 7.8.1, 7.9, 8.0, 8.1, 8.2, 8.2.1, 8.3, 8.4, 8.4.1, 8.5, 8.5.1, 8.6, 8.7

-Vulnerable Library Version: org.apache.ws.security : wss4j : 1.6.8-
 CVE ID: [CVE-2015-0227]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0227]), [CVE-2014-3623]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3623]), [CVE-2015-0226]([https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0226])
 Import Path: tests/camel-performance/pom.xml
 Suggested Safe Versions: 1.6.17, 1.6.18, 1.6.19
XuCY:1583288401:2020-03-04T10:20:01.542+0000:1583288401:2020-03-04T10:20:01.542+0000:Sorry to bother you. Maybe my first report is out pf date. But the second report I provide is about what dependency I found really affects your project. It contains only one dependency. I would appreciate if you could think about the second report.

 
davsclaus:1583288647:2020-03-04T10:24:07.936+0000:1583288647:2020-03-04T10:24:07.936+0000:Some of the reports are on testing scoped JARs that are only used for testing, and hence not a end user problem.
davsclaus:1585135963:2020-03-25T19:32:43.243+0000:1585258291:2020-03-27T05:31:31.942+0000:http client 3.1 is only used for testing but it would be good to switch it to http client 4.x
- TODO: camel-weather *DONE*
- TODO: camel-elytron *DONE*
- TODO: camel-catalog-maven: *DONE*
davsclaus:1585277695:2020-03-27T10:54:55.626+0000:1585277695:2020-03-27T10:54:55.626+0000:Only camel-jcr cannot upgrade to a newer Lucene version at this moment. Its tracked by Apache Jackrabbit project as its a problem in their library.

The Camel side has been fixed"
0,CAMEL-14639,Improvement,Major,2.23.1,"3.2.0, 2.25.1","
None
",Resolved,Fixed,"3.2.0, 2.25.1",Unassigned,Jiri Novak,0,1,2020-03-01 12:57:47+00:00,2020-03-03 05:27:58+00:00,"Currently DefaultHttpRegistry uses common HashSets for storing
HttpConsumers and CamelServlets. So when you are trying to register more
consumers in paralel it can lead to missing consumer in hashset due to its
nature. Another case is when you are registering consumers and servlets in
paralel. This case can lead to ConcurrentModificationException.


 




private final Set<HttpConsumer> consumers;
private final Set<CamelServlet> providers;

public DefaultHttpRegistry() {
    consumers = new HashSet<>();
    providers = new HashSet<>();
}

public void register(HttpConsumer consumer) {
    if (LOG.isDebugEnabled()) {
        LOG.debug(""Registering consumer for path {} providers present: {}"",
        consumer.getPath(), providers.size());
    }
    consumers.add(consumer);
    for (CamelServlet provider : providers) {
        provider.connect(consumer);
    }
}

public void register(CamelServlet provider) {
    if (LOG.isDebugEnabled()) {
        LOG.debug(""Registering CamelServlet with name {} consumers present: {}"", provider.getServletName(), consumers.size());
    }
    providers.add(provider);
    for (HttpConsumer consumer : consumers) {
        provider.connect(consumer);
    }
}




I know there's possibility to use own http registry in camel route starting
with servlet. But you have to register it to servlet-component, then
implement custom servlet because inits DefaultHttpRegistry in it's init
method.",JNk:1583038861:2020-03-01T13:01:01.702+0000:1583038861:2020-03-01T13:01:01.702+0000:I'm working on it…
0,CAMEL-14638,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.3.0,Unassigned,Kaifeng Huang,0,3,2020-03-01 12:20:24+00:00,2020-04-04 19:14:41+00:00,"Hi. I have implemented a tool to detect library version inconsistencies. Your project have 27 inconsistent libraries and 16 false consistent libraries.
 
Take com.google.guava:guava for example, this library is declared as version 19.0 in components/camel-ignite, 28.0-jre in catalog/camel-main-maven-plugin, 14.0.1 in components/camel-hbase and etc... Such version inconsistencies may cause unnecessary maintenance effort in the long run. For example, if two modules become inter-dependent, library version conflict may happen. It has already become a common issue and hinders development progress. Thus a version harmonization is necessary.
 
Provided we applied a version harmonization, I calculated the cost it may have to harmonize to all upper versions including an up-to-date one. The cost refers to POM config changes and API invocation changes. Take com.google.guava:guava for example, if we harmonize all the library versions into 28.2-android. The concern is, how much should the project code adapt to the newer library version. We list an effort table to quantify the harmonization cost.
 
The effort table is listed below. It shows the overall harmonization effort by modules. The columns represents the number of library APIs and API calls(NA,NAC), deleted APIs and API calls(NDA,NDAC) as well as modified API and API calls(NMA,NMAC). Modified APIs refers to those APIs whose call graph is not the same as previous version. Take the first row for example, if upgrading the library into version 28.2-android. Given that 14 APIs is used in module components/camel-wordpress, 0 of them is deleted in a recommended version(which will throw a NoMethodFoundError unless re-compiling the project), 14 of them is regarded as modified which could break the former API contract.
 
 





Index
Module
NA(NAC)
NDA(NDAC)
NMA(NMAC)


1
components/camel-wordpress
14(21)
0(0)
14(21)


2
components/camel-gora
1(3)
0(0)
1(3)


3
components/camel-ignite
2(2)
0(0)
1(1)


4
..
..
..
..





 
 
Also we provided another table to show the potential files that may be affected due to library API change, which could help to spot the concerned API usage and rerun the test cases. The table is listed below.





Module
File
Type
API


components/camel-ignite
components/camel-ignite/src/test/java/org/apache/camel/component/ignite/TestIgniteComputeResources.java
modify
com.google.common.collect.Lists.newArrayList()


components/camel-gora
components/camel-gora/src/main/java/org/apache/camel/component/gora/GoraConfiguration.java
modify
com.google.common.base.Strings.isNullOrEmpty(java.lang.String)


components/camel-wordpress
components/camel-wordpress/src/main/java/org/apache/camel/component/wordpress/api/model/User.java
modify
com.google.common.base.MoreObjects.ToStringHelper.addValue(java.lang.Object)


4
..
..
..





 
As for false consistency, take org.apache.geronimo.specs geronimo-annotation_1.0_spec jar for example. The library is declared in version 1.1.1 in all modules. However they are declared differently. As components are developed in parallel, if one single library version is updated, which could become inconsistent as mentioned above, may cause above-mentioned inconsistency issues


If you are interested, you can have a more complete and detailed report in the attached PDF file.","acosentino:1583037729:2020-03-01T12:42:09.763+0000:1583037729:2020-03-01T12:42:09.763+0000:It's not always possible to align deps. We're doing our best but it's not totally possible.
davsclaus:1585998881:2020-04-04T19:14:41.338+0000:1585998881:2020-04-04T19:14:41.338+0000:Thanks we have aligned and also did some updates in recent time so it should be better now.

You are welcome to run a report again, for example against SNAPSHOT or the 3.3.0 release when its out later in a couple of months."
0,CAMEL-14637,New Feature,Major,None,3.x,"
None
",Resolved,Abandoned,3.x,Unassigned,Claus Ibsen,0,2,2020-03-01 10:14:58+00:00,2022-09-02 14:48:03+00:00,"It would be nice to have a way to say min-max range for concurrent consumers on camel-sjms like you can in spring-jms. And that this is based on automatic grow/shrink based on demand (eg if being idle then shrink, etc.)


This requires some effort to implement and its not trivial.",
0,CAMEL-14636,Test,Major,3.2.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Claus Ibsen,0,2,2020-03-01 08:49:11+00:00,2020-03-02 10:37:05+00:00,And also the itests for spring-ws and websocket-jsr and the rest producer examples fails too,"davsclaus:1583108162:2020-03-02T08:16:02.283+0000:1583108162:2020-03-02T08:16:02.283+0000:The reactive-streams has been fixed.
acosentino:1583108197:2020-03-02T08:16:37.372+0000:1583108197:2020-03-02T08:16:37.372+0000:Only camel-google-pubsub is failing now."
0,CAMEL-14635,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-03-01 08:29:22+00:00,2020-03-02 08:16:15+00:00,This makes the option easier to configure via SB as otherwise its named broker-u-r-l,davsclaus:1583023654:2020-03-01T08:47:34.157+0000:1583023654:2020-03-01T08:47:34.157+0000:The same for camel-stomp
0,CAMEL-14634,Improvement,Major,None,3.4.0,"

help-wanted

",Resolved,Fixed,3.4.0,Unassigned,Claus Ibsen,0,8,2020-02-29 19:26:10+00:00,2020-05-27 13:08:45+00:00,"We need to document the cool new features of endpoint-dsl and component-dsl better. We should have a page for each of them, and added to the user guide


https://camel.apache.org/manual/latest/","Devkant Gorai:1583491665:2020-03-06T18:47:45.240+0000:1583560093:2020-03-07T13:48:13.138+0000: 

I am an outreachy 2020 applicant.

If you could help me to understand what endpoint-dsl and component-dsl features are or provide me some resuorces to clearly understand how cool these features are then I can contribute in building the webpages for the following features.

Working Plan:-
 1) Incorporate all the contents
 With Proper heading,Tables,colors.

2)Add code snippets in a proper manner.

3)Follow all the code of conduct of the contribution process.

 

[~davsclaus] and [~zregvart] please guide me.
zregvart:1583727285:2020-03-09T12:14:45.260+0000:1583727285:2020-03-09T12:14:45.260+0000:[~Devkant Gorai] you can have a look at the current documentation of various [domain specific languages|https://camel.apache.org/manual/latest/dsl.html] we have, the source documents for that documentation can be located by following the ""Edit this page"" link. To create documentation for this you would need to have a working Java knowledge (to provide examples like we have currently for the Java DSL) and basic understanding of Camel.
gnodet:1583727576:2020-03-09T12:19:36.368+0000:1583727576:2020-03-09T12:19:36.368+0000:One can also refer to the following blog post if needed: [http://gnodet.blogspot.com/2019/12/camel-endpoint-dsl.html]
aadyamishra:1583970850:2020-03-12T07:54:10.990+0000:1583970850:2020-03-12T07:54:10.990+0000:[~zregvart] I am an outreachy 2020 applicant. Can I take up this issue?
zregvart:1583982354:2020-03-12T11:05:54.228+0000:1583982354:2020-03-12T11:05:54.228+0000:[~aadyamishra] feel free to do so, I haven't seen any work proposed by [~Devkant Gorai] thus far. [~Devkant Gorai] if you're working on this please comment so [~aadyamishra] is aware.
aadyamishra:1584018526:2020-03-12T21:08:46.989+0000:1584018526:2020-03-12T21:08:46.989+0000:Alright [~zregvart], I will take up this issue.
RimshaCh:1584352649:2020-03-16T17:57:29.168+0000:1584352649:2020-03-16T17:57:29.168+0000:Hey [~aadyamishra] are you still working on this issue?

RimshaCh:1584361684:2020-03-16T20:28:04.998+0000:1584361684:2020-03-16T20:28:04.998+0000:I was thinking to highlight this feature in main introduction part and then add link to main documentation of endpoint-dsl in components
davsclaus:1584664351:2020-03-20T08:32:31.722+0000:1584664351:2020-03-20T08:32:31.722+0000:We have endpoint DSL now
https://camel.apache.org/manual/latest/Endpoint-dsl.html

What is missing is a similar page about Component DSL
RimshaCh:1584676044:2020-03-20T11:47:24.997+0000:1584676044:2020-03-20T11:47:24.997+0000:To make page for endpoint-dsl the link mentioned by [~gnodet] helped alot.To make a page for component dsl I need some guidance regarding it's features and functionality
Chima:1584676906:2020-03-20T12:01:46.892+0000:1584676906:2020-03-20T12:01:46.892+0000:Hi [~davsclaus]

I want to fix this issue quickly. Can you assign it to me, outreachy applicant. if you have similar issue please, highlight it to me.

Thank
omarsmak:1588662319:2020-05-05T15:05:19.861+0000:1588662319:2020-05-05T15:05:19.861+0000:[~RimshaCh] or [~Chima] are you guys still interested on creating the missing page for component-dsl? I can assist any of you if needed
RimshaCh:1588668552:2020-05-05T16:49:12.053+0000:1588668552:2020-05-05T16:49:12.053+0000:Hey [~omarsmak]  yeah I would want to work on it but I need some reference to know about component-dsl to create a page.
omarsmak:1588725381:2020-05-06T08:36:21.323+0000:1588725398:2020-05-06T08:36:38.458+0000:Sure [~RimshaCh] !

Is basically very similar to the Endpoint DSL, but instead of constructing the endpoint through a DSL, you can construct a component through a DSL instead of initializing through a constructor. It allows you to resolve the placeholder when constructing the configurations as well as binding the component to the Camel context directly besides of course, the type saftey similar to the endpoint dsl.
 Example can be found [here|https://github.com/apache/camel-examples/blob/master/examples/camel-example-kafka/src/main/java/org/apache/camel/example/kafka/MessageConsumerClient.java#L48]. Referring to the example, it used to be done something like this which wasn't ideal after all:
{code:java}
KafkaComponent kafka = new KafkaComponent();
kafka.setBrokers(""localhost:9090"");

camelContext.addComponent(""kafka"", kafka);
{code}
These [list of generated DSLs for Camel Components|https://github.com/apache/camel/tree/master/core/camel-componentdsl/src/generated/java/org/apache/camel/builder/component.%20This%20is%20the%20public%20APIs%20https://github.com/apache/camel/blob/master/core/camel-componentdsl/src/main/java/org/apache/camel/builder/component/ComponentBuilder.java] uses in association with the generated DSL API in order to construct the component, you can skip {{doSetProperty}} as only used internally.

To use it, similar to the endpoint DSL, you need to include the following dependency:
{code:java}
 <dependency>
 <groupId>org.apache.camel</groupId>
 <artifactId>camel-componentdsl</artifactId>
 <version>x.x.x</version>
 </dependency>
{code}
I hope this gives you a good background to work with it, also, I advice you to spend time to play around with it in order to grasp it. If you have any questions, please don't hesitate to ask! :).
RimshaCh:1588838112:2020-05-07T15:55:12.054+0000:1588838112:2020-05-07T15:55:12.054+0000:[~omarsmak] thankyou so much !

omarsmak:1588895609:2020-05-08T07:53:29.783+0000:1588895609:2020-05-08T07:53:29.783+0000:No worries. [Here|https://github.com/apache/camel/blob/master/core/camel-componentdsl/src/main/java/org/apache/camel/builder/component/ComponentBuilder.java] is base API used to construct the final component as I forgot to add it in the last comment. And [this is updated link|https://github.com/apache/camel/tree/master/core/camel-componentdsl/src/generated/java/org/apache/camel/builder/component/dsl] for the components list.
omarsmak:1589785545:2020-05-18T15:05:45.146+0000:1589785545:2020-05-18T15:05:45.146+0000:Hey [~RimshaCh], wanted to check if you still need help on the componentdsl page?
RimshaCh:1589791621:2020-05-18T16:47:01.084+0000:1589791621:2020-05-18T16:47:01.084+0000:Hey , sorry I just got busy with some personal work,I 'll start to work on this in 2 days.
omarsmak:1590556115:2020-05-27T13:08:35.988+0000:1590556115:2020-05-27T13:08:35.988+0000:Hey [~RimshaCh], 

 

I hope you don't mind, I have created the initial doc already [https://github.com/apache/camel/pull/3862], you are welcome to enhance it if you have time :) .

 

Regards, 

Omar"
0,CAMEL-14633,Bug,Minor,2.25.0,2.25.1,"
None
",Resolved,Fixed,2.25.1,Unassigned,Oliver Limberg,0,1,2020-02-29 19:17:54+00:00,2020-03-02 10:36:57+00:00,"If sending an exchange with attachments on the 'in' message but without headers to a seda endpoint with parameter waitForTaskToComplete set to never, the attachments will not be copied.",
0,CAMEL-14632,Bug,Minor,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Benjamin Graf,0,1,2020-02-29 15:29:12+00:00,2020-03-02 08:53:45+00:00,"The changes to DefaultExchangeFormatter from issue CAMEL-14354 have an ""ugly"" side effect. If using multiline logging and StringBuffer is less than 10000 chars you'll get a String logged with lots of ###REPLACE_ME###.


Reproduce with test case  Camel14632Test.java and see log output
e.g.:



2020-02-29T16:25:58,966 INFO  [main            ] test                             - Exchange[###REPLACE_ME###  Id: ID-PC47376-1582989958950-0-1###REPLACE_ME###  ExchangePattern: InOnly###REPLACE_ME###  Properties: {CamelToEndpoint=log://test?multiline=true&showAll=true}###REPLACE_ME###  Headers: {}###REPLACE_ME###  BodyType: String###REPLACE_ME###  Body: test]","graben:1582961588:2020-02-29T15:33:08.423+0000:1582961588:2020-02-29T15:33:08.423+0000:Hi [~davsclaus],

issue created with test case as requested. ;)

Regards,
Benjamin"
0,CAMEL-14631,Improvement,Minor,"2.20.4, 3.17.0",3.18.0,"
None
",Resolved,Fixed,3.18.0,Claus Ibsen,Ralf Claussnitzer,0,3,2020-02-29 09:38:48+00:00,2022-06-07 14:38:51+00:00,"It should be possible to provide a custom TypeConverter for converting strings into an Enum instances.


The conversion of `String` to `Enum` is hard coded to fail with an Exception if `EnumTypeConverter` cannot instantiate an `Enum` constant by name. However, Java allows to override the string representation for enums. Converting such strings back to enums is only possible through a special converting function.


Currently `org.apache.camel.impl.converter.EnumTypeConverter` tries to find the Enum instance by name. If that fails it falls back  to calling the built-in valueOf(String) method which will end the program with a RuntimeException. The type conversion process stops there instead of further looking for custom type converters. The line with `return null;` in `EnumTypeConverter` is never reached. Would `EnumTypeConverter` indeed return null, the process would continue and a custom converter would finally be called.



https://mail-archives.apache.org/mod_mbox/camel-dev/202002.mbox/%3Cc87cef78-9709-5b92-efee-9bf0e2c2370d%40slub-dresden.de%3E","swwyatt:1653288678:2022-05-23T14:51:18.503+0000:1653288678:2022-05-23T14:51:18.503+0000:This used to work all the way up to 2.19.5. We are trying to upgrade to 2.20.4 and our enum type converter is no longer called.
claussni:1653350473:2022-05-24T08:01:13.279+0000:1653350473:2022-05-24T08:01:13.279+0000:So that's indeed a regression. I've updated the ticket accordingly.

I looked  up the current tag on GitHub. The problem seems to remain: https://github.com/apache/camel/blob/camel-3.17.0/core/camel-base/src/main/java/org/apache/camel/impl/converter/EnumTypeConverter.java

Also there seems to be no explicit EnumTypeConverter test.
davsclaus:1653352982:2022-05-24T08:43:02.741+0000:1653353011:2022-05-24T08:43:31.975+0000:Camel 2.x is EOL and type converters are reworked in Camel 3.
davsclaus:1653353073:2022-05-24T08:44:33.228+0000:1653353073:2022-05-24T08:44:33.228+0000:Ralf you are welcome to attach a custom unit test where you have a custom enum that can help to speedup this implementation
davsclaus:1653369693:2022-05-24T13:21:33.187+0000:1653369693:2022-05-24T13:21:33.187+0000:If any of you have an example of your custom enum that can't be converted today, then you are welcome to paste it in the comments
davsclaus:1654229026:2022-06-03T12:03:46.628+0000:1654229026:2022-06-03T12:03:46.628+0000:Anyone with an example of the enums you want to have Camel be able to convert?
claussni:1654232187:2022-06-03T12:56:27.238+0000:1654232187:2022-06-03T12:56:27.238+0000:I will try to provide an example and unit test this weekend or beginning of next week.
claussni:1654560753:2022-06-07T08:12:33.673+0000:1654560753:2022-06-07T08:12:33.673+0000:[~davsclaus] I created a branch with two tests. One succeeding test for the existing EnumTypeConverter class and a failing test trying to convert to a specific Enum using a custom type converter: https://github.com/apache/camel/compare/main...claussni:CAMEL-14631-supportCustomEnumTypeConverters
davsclaus:1654576938:2022-06-07T12:42:18.262+0000:1654576938:2022-06-07T12:42:18.262+0000:Thanks for the unit tests, this helped implement support for this.
claussni:1654580912:2022-06-07T13:48:32.238+0000:1654580912:2022-06-07T13:48:32.238+0000:You're welcome. Tell me if you still need the branch. Otherwise I will remove my fork from GitHub.
davsclaus:1654583931:2022-06-07T14:38:51.094+0000:1654583931:2022-06-07T14:38:51.094+0000:Branch no longer needed"
0,CAMEL-14630,New Feature,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Alex Dettinger,Alex Dettinger,0,1,2020-02-28 18:11:48+00:00,2020-03-02 15:42:12+00:00,No Desc,
0,CAMEL-14629,Bug,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Guillaume Nodet,Gerald Kallas,0,5,2020-02-28 16:35:07+00:00,2020-03-27 20:28:46+00:00,"I tried to upgrade from Karaf 4.2.7 w/ Camel 3.0.1 towards Karaf 4.2.7 w/ Camel 3.1.0. Same behaviour also with Karaf 4.2.8 w/ Camel 3.1.0
 
While executing these commands
 
 




karaf@root()>  feature:repo-add hawtio 2.9.1
Adding feature url mvn:io.hawt/hawtio-karaf/2.9.1/xml/features
karaf@root()>  feature:repo-add activemq 5.15.11
Adding feature url mvn:org.apache.activemq/activemq-karaf/5.15.11/xml/features
karaf@root()>  feature:repo-add camel 3.1.0
Adding feature url mvn:org.apache.camel.karaf/apache-camel/3.1.0/xml/features
karaf@root()>  feature:install webconsole hawtio activemq-broker-noweb camel camel-jms jms camel-http camel-jetty camel-swagger-java camel-ftp camel-jackson camel-jsonpath camel-zipfile camel-velocity camel-groovy  



 
I'm getting the following error
 
 




org.apache.felix.resolver.reason.ReasonException: Unable to resolve root: missing requirement [root] osgi.identity; osgi.identity=camel-jackson; type=karaf.feature; version=""[3.1.0,3.1.0]""; filter:=""(&(osgi.identity=camel-jackson)(type=karaf.feature)(version>=3.1.0)(version<=3.1.0))"" [caused by: Unable to resolve camel-jackson/3.1.0: missing requirement [camel-jackson/3.1.0] osgi.identity; osgi.identity=org.apache.camel.camel-jackson; type=osgi.bundle; version=""[3.1.0,3.1.0]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-jackson/3.1.0: missing requirement [org.apache.camel.camel-jackson/3.1.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.module.jaxb)(version>=2.9.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=  javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))""]]] at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) at org.apache.felix.resolver.ResolverImpl.doResolve(ResolverImpl.java:392) at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:378) at org.apache.felix.resolver.ResolverImpl.resolve(ResolverImpl.java:332) at org.apache.karaf.features.internal.region.SubsystemResolver.resolve(SubsystemResolver.java:257) at org.apache.karaf.features.internal.service.Deployer.deploy(Deployer.java:393) at org.apache.karaf.features.internal.service.FeaturesServiceImpl.doProvision(FeaturesServiceImpl.java:1062) at org.apache.karaf.features.internal.service.FeaturesServiceImpl.lambda$doProvisionInThread$13(FeaturesServiceImpl.java:998) at java.util.concurrent.FutureTask.run(FutureTask.java:266) at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) at java.lang.Thread.run(Thread.java:748) Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve camel-jackson/3.1.0: missing requirement [camel-jackson/3.1.0] osgi.identity; osgi.identity=org.apache.camel.camel-jackson; type=osgi.bundle; version=""[3.1.0,3.1.0]""; resolution:=mandatory [caused by: Unable to resolve org.apache.camel.camel-jackson/3.1.0: missing requirement [org.apache.camel.camel-jackson/3.1.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.module.jaxb)(version>=2.9.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))""]] at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) ... 12 more Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve org.apache.camel.camel-jackson/3.1.0: missing requirement [org.apache.camel.camel-jackson/3.1.0] osgi.wiring.package; filter:=""(&(osgi.wiring.package=com.fasterxml.jackson.module.jaxb)(version>=2.9.0)(!(version>=3.0.0)))"" [caused by: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))""] at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) ... 13 more Caused by: org.apache.felix.resolver.reason.ReasonException: Unable to resolve com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2: missing requirement [com.fasterxml.jackson.module.jackson-module-jaxb-annotations/2.10.2] osgi.wiring.package; filter:=""(&(osgi.wiring.package=javax.xml.bind)(version>=2.3.0)(!(version>=3.0.0)))"" at org.apache.felix.resolver.Candidates$MissingRequirementError.toException(Candidates.java:1343) ... 14 more","jbonofre:1582880645:2020-02-28T17:04:05.886+0000:1582880645:2020-02-28T17:04:05.886+0000:Gonna fix that. Some other features are affected as well with JDK 9+.
catshout:1582882632:2020-02-28T17:37:12.236+0000:1582882632:2020-02-28T17:37:12.236+0000:Add-On ..

I was using Java 8
 
{code:java}
$ java -version
openjdk version ""1.8.0_222""
OpenJDK Runtime Environment (build 1.8.0_222-b10)
OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode){code}
jbonofre:1582882930:2020-02-28T17:42:10.664+0000:1582882963:2020-02-28T17:42:43.257+0000:Thanks for the update. So, the camel feature is just bad ;) Let me fix that. I think the dependency has changed in the codebase, and we don't define range in the bundle, so it fails. Easy fix ;)
acosentino:1582888884:2020-02-28T19:21:24.148+0000:1582888884:2020-02-28T19:21:24.148+0000:What's wrong with the feature? The verify on camel works correctly
jbonofre:1582926369:2020-02-29T05:46:09.843+0000:1582926369:2020-02-29T05:46:09.843+0000:[~acosentino] I think it depends of the JAXB version present in the runtime. The verify probably works because another feature provide JAXB. Let me fix that.
catshout:1583449132:2020-03-06T06:58:52.246+0000:1583449132:2020-03-06T06:58:52.246+0000:[~jbonofre], [~acosentino], do you have a forecast when this issue would be fixed? Many thanks in advance.
jbonofre:1583449678:2020-03-06T07:07:58.238+0000:1583449678:2020-03-06T07:07:58.238+0000:[~catshout] I'm back on this issue. I will create a PR.
jamesnetherton:1584419387:2020-03-17T12:29:47.066+0000:1584419387:2020-03-17T12:29:47.066+0000:Any progress on this? Other features depending on camel-jackson will also likely fail e.g camel-mongo.
catshout:1584923433:2020-03-23T08:30:33.422+0000:1584923433:2020-03-23T08:30:33.422+0000:[~jbonofre] do you have any news in between? Client is still waiting for a solution .. many thanks in advance.

Gerald
davsclaus:1585024208:2020-03-24T12:30:08.822+0000:1585024208:2020-03-24T12:30:08.822+0000:Yeah either we make camel import jaxb 2.2,3 so it can use that older version. Or karaf comes installed with 2.3 as well.
davsclaus:1585033514:2020-03-24T15:05:14.408+0000:1585033514:2020-03-24T15:05:14.408+0000:Okay so we have made the camel bundles themselves that import jaxb support 2.2 ... 3 so they can install. But 3rd party bundles like jackson that requires 2.3 onwards requires fixes in karaf itself.
catshout:1585038876:2020-03-24T16:34:36.369+0000:1585038876:2020-03-24T16:34:36.369+0000:Great [~davsclaus]. Many thanks, will wait for the next fix release than."
0,CAMEL-14628,Task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-02-28 14:38:33+00:00,2020-03-03 06:40:58+00:00,No Desc,"gnodet:1583188858:2020-03-03T06:40:58.178+0000:1583188858:2020-03-03T06:40:58.178+0000:We should now be able to run a full
{code}
     mvn install
{code}
 after a
{code}
     rm -Rf */*/src/generated */*/target
{code}
"
0,CAMEL-14627,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Unassigned,Andrea Cosentino,0,1,2020-02-28 07:22:01+00:00,2020-03-15 09:43:17+00:00,"core/camel-base/src/generated/resources/META-INF/services/org/apache/camel/language.properties:version=3.1.0-SNAPSHOT core/camel-base/src/generated/resources/org/apache/camel/language/constant/constant.json: ""version"": ""3.1.0-SNAPSHOT"" core/camel-base/src/generated/resources/org/apache/camel/language/header/header.json: ""version"": ""3.1.0-SNAPSHOT"" core/camel-base/src/generated/resources/org/apache/camel/language/property/exchangeProperty.json: ""version"": ""3.1.0-SNAPSHOT"" core/camel-base/src/generated/resources/org/apache/camel/language/ref/ref.json: ""version"": ""3.1.0-SNAPSHOT"" core/camel-base/src/generated/resources/org/apache/camel/language/simple/file.json: ""version"": ""3.1.0-SNAPSHOT"" core/camel-base/src/generated/resources/org/apache/camel/language/simple/simple.json: ""version"": ""3.1.0-SNAPSHOT"" core/camel-base/src/generated/resources/org/apache/camel/language/tokenizer/tokenize.json: ""version"": ""3.1.0-SNAPSHOT""


 


I believe we modify the languages json metadata by hand, while the language.properties should be regenerated.",
0,CAMEL-14626,Improvement,Major,None,3.3.0,"

help-wanted

",Resolved,Fixed,3.3.0,Unassigned,Claus Ibsen,0,3,2020-02-28 06:55:17+00:00,2020-04-07 07:13:26+00:00,"Lets improve this maven plugin to skip classes that are just type ids, eg T etc. We can check that the length of the class must be 2+ at least


[WARNING] Ignoring type parameters <T> for argument type, unable to load parametric type argument T
java.lang.ClassNotFoundException: java.lang.T
    at java.net.URLClassLoader.findClass (URLClassLoader.java:471)
    at java.lang.ClassLoader.loadClass (ClassLoader.java:588)
    at java.lang.ClassLoader.loadClass (ClassLoader.java:521)
    at org.apache.camel.maven.AbstractApiMethodGeneratorMojo.getCanonicalName (AbstractApiMethodGeneratorMojo.java:345)
    at jdk.internal.reflect.GeneratedMethodAccessor226.invoke (Unknown Source)
    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
    at java.lang.reflect.Method.invoke (Method.java:566)
    at org.apache.velocity.util.introspection.UberspectImpl$VelMethodImpl.doInvoke (UberspectImpl.java:556)
    at org.apache.velocity.util.introspection.UberspectImpl$VelMethodImpl.invoke (UberspectImpl.java:539)
    at org.apache.velocity.runtime.parser.node.ASTMethod.execute (ASTMethod.java:214)
    at org.apache.velocity.runtime.parser.node.ASTReference.execute (ASTReference.java:324)
    at org.apache.velocity.runtime.parser.node.ASTReference.value (ASTReference.java:637)
    at org.apache.velocity.runtime.parser.node.ASTExpression.value (ASTExpression.java:72)
    at org.apache.velocity.runtime.parser.node.ASTSetDirective.render (ASTSetDirective.java:235)
    at org.apache.velocity.runtime.parser.node.ASTBlock.render (ASTBlock.java:144)
    at org.apache.velocity.runtime.directive.Foreach.renderBlock (Foreach.java:306)
    at org.apache.velocity.runtime.directive.Foreach.render (Foreach.java:276)
    at org.apache.velocity.runtime.parser.node.ASTDirective.render (ASTDirective.java:295)
    at org.apache.velocity.runtime.parser.node.SimpleNode.render (SimpleNode.java:423)
    at org.apache.velocity.Template.merge (Template.java:357)
    at org.apache.velocity.Template.merge (Template.java:262)
    at org.apache.camel.maven.AbstractGeneratorMojo.mergeTemplate (AbstractGeneratorMojo.java:161)
    at org.apache.camel.maven.AbstractApiMethodGeneratorMojo.executeInternal (AbstractApiMethodGeneratorMojo.java:83)
    at org.apache.camel.maven.ApiComponentGeneratorMojo.executeInternal (ApiComponentGeneratorMojo.java:87)
    at org.apache.camel.maven.AbstractGeneratorMojo.execute (AbstractGeneratorMojo.java:103)","amfirnas22:1585474833:2020-03-29T17:40:33.949+0000:1585474833:2020-03-29T17:40:33.949+0000:Hi,

I am a newbie to open source development. I would like to give a try here. Any guidelines are welcome.

Thanks
manonthegithub:1585637901:2020-03-31T14:58:21.013+0000:1585637901:2020-03-31T14:58:21.013+0000:type parameter can be also encountered in a list of argTypes, for example Map<String, T>, just ignoring it will make the generated code not compilable. Should we better substitute it with Object?
manonthegithub:1585638031:2020-03-31T15:00:31.775+0000:1585638031:2020-03-31T15:00:31.775+0000:[~amfirnas22] did you already start? I have done some progress here, I can leave it for you, and maybe help, in case you have already started. "
0,CAMEL-14625,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Masa,0,1,2020-02-28 03:20:30+00:00,2020-03-11 15:19:51+00:00,"Currently, Pulsar messages are processed synchronously. Add support for asynchronous processing using the asynchronous routing engine.",
0,CAMEL-14624,Bug,Minor,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Benjamin Graf,0,3,2020-02-27 19:01:07+00:00,2020-03-02 10:36:48+00:00,Camel 3.1 adds method setOuput() to TransactedDefinition without a corresponding getter this causes JAXB to fail.,"graben:1582801695:2020-02-27T19:08:15.831+0000:1582801695:2020-02-27T19:08:15.831+0000:Hi [~gnodet],

the commit https://github.com/apache/camel/commit/3a4bfe51dbde6bd3bacf26da6b77d075cbaab5c2 might cause more problems even in other classes than only TransactedDefinition .

Regards
Benjamin
acosentino:1582802467:2020-02-27T19:21:07.635+0000:1582802467:2020-02-27T19:21:07.635+0000:How jaxb fails? Can you please add details on what you see? The description is not complete
graben:1582804462:2020-02-27T19:54:22.176+0000:1582804462:2020-02-27T19:54:22.176+0000:Hi [~acosentino]

sorry, exception is in German

{noformat}
Caused by: com.sun.xml.bind.api.AccessorException: Die Eigenschaft enthält einen Setter ""public void org.apache.camel.model.TransactedDefinition.setOutputs(java.util.List)"", jedoch keinen Getter. Für das Marshalling müssen Sie Getter definieren.
{noformat}

Simple translation, JAXB marshaling needs getter but no getter defined!

davsclaus:1582810243:2020-02-27T21:30:43.073+0000:1582810243:2020-02-27T21:30:43.073+0000:We need a reproducer like a sample project or some unit test or something that reproduces this.  
graben:1582890096:2020-02-28T19:41:36.623+0000:1582890096:2020-02-28T19:41:36.623+0000:Hi [~davsclaus],

Test case as requested.  [^Camel14624Test.java] 

Regards
Benjamin"
0,CAMEL-14623,Bug,Minor,None,,"

website

",Resolved,Duplicate,None,Unassigned,Djordje Bajic,0,2,2020-02-27 18:05:09+00:00,2020-02-27 18:29:54+00:00,"I noticed when we go on this URL


and click on  ""some easy issues to resolve"" we get redirected to Jira and get following message:




The option 'Novice' for field 'Estimated Complexity' does not exist.","acosentino:1582798455:2020-02-27T18:14:15.036+0000:1582798455:2020-02-27T18:14:15.036+0000:There is already CAMEL-14617
dbajic:1582799381:2020-02-27T18:29:41.449+0000:1582799394:2020-02-27T18:29:54.050+0000:[~acosentino]  Sorry, I just noticed so I reported it immediately. We can close this task then."
0,CAMEL-14622,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Claus Ibsen,0,2,2020-02-27 17:02:28+00:00,2020-06-16 14:52:40+00:00,"We should favour options on component classes to be annotation based, eg with @Metadata so we mark up only the options that are options. As other delegates and getter/setters may get mixed up.


Then in the future we will drop support and only require marked up options, just like endpoints where you must use @UriParam etc.


At first we can make our tool log a WARN and then we can see how many of our own components suffer from this.","hien711:1585482686:2020-03-29T19:51:26.075+0000:1585482686:2020-03-29T19:51:26.075+0000:I would like to work on this project for GSoC. I have experience with Java, Spring framework, logging,etc. Please guide me through this project. I will make architecture implementation for this task on my proposal. Thank you so much for your help. :)
davsclaus:1592275022:2020-06-16T10:37:02.751+0000:1592275022:2020-06-16T10:37:02.751+0000:[WARNING] Component class org.apache.camel.component.amqp.AMQPComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.as2.AS2Component has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.atomix.client.AbstractAtomixClientComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.atomix.client.AbstractAtomixClientComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.atomix.client.AbstractAtomixClientComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.atomix.client.AbstractAtomixClientComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.atomix.client.AbstractAtomixClientComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.atomix.client.AbstractAtomixClientComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.atomix.client.map.AtomixMapComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.atomix.client.messaging.AtomixMessagingComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.atomix.client.multimap.AtomixMultiMapComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.atomix.client.queue.AtomixQueueComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.atomix.client.set.AtomixSetComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.atomix.client.value.AtomixValueComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.beanstalk.BeanstalkComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.cmis.CMISComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumMongodbComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumMySqlComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumPostgresComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.debezium.DebeziumSqlserverComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.flink.FlinkComponent has not been marked up with @Metadata for 4 options.
[WARNING] Component class org.apache.camel.component.google.bigquery.GoogleBigQueryComponent has not been marked up with @Metadata for 3 options.
[WARNING] Component class org.apache.camel.component.google.bigquery.sql.GoogleBigQuerySQLComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.guava.eventbus.GuavaEventBusComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.hdfs.HdfsComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.iec60870.client.ClientComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.iec60870.server.ServerComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.ignite.AbstractIgniteComponent has not been marked up with @Metadata for 3 options.
[WARNING] Component class org.apache.camel.component.influxdb.InfluxDbComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.jcache.JCacheComponent has not been marked up with @Metadata for 5 options.
[WARNING] Component class org.apache.camel.component.jclouds.JcloudsComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.jdbc.JdbcComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.milo.server.MiloServerComponent has not been marked up with @Metadata for 18 options.
[WARNING] Component class org.apache.camel.component.mongodb.MongoDbComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.resteasy.ResteasyComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.scp.ScpComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.slack.SlackComponent has not been marked up with @Metadata for 1 options.
[WARNING] Component class org.apache.camel.component.spark.SparkComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.spring.batch.SpringBatchComponent has not been marked up with @Metadata for 2 options.
[WARNING] Component class org.apache.camel.component.sql.stored.SqlStoredComponent has not been marked up with @Metadata for 1 options."
0,CAMEL-14621,Bug,Major,3.1.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Pascal Schumacher,Pascal Schumacher,0,3,2020-02-27 13:05:21+00:00,2020-02-28 21:14:39+00:00,"In Version 3.1.0 every camel-spring-boot-starter has (a lot) of unnecessary JAX-B and JAX-WS dependencies when used with Java 11. E.g.:



[INFO] +- org.apache.camel.springboot:camel-micrometer-starter:jar:3.1.0:compile
[INFO] |  +- org.apache.camel:camel-micrometer:jar:3.1.0:compile
[INFO] |  +- org.apache.camel.springboot:camel-spring-boot-starter:jar:3.1.0:compile
[INFO] |  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile
[INFO] |  +- javax.xml.ws:jaxws-api:jar:2.3.1:compile
[INFO] |  +- jakarta.xml.bind:jakarta.xml.bind-api:jar:2.3.2:compile
[INFO] |  |  \- jakarta.activation:jakarta.activation-api:jar:1.2.1:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-ws-metadata_2.0_spec:jar:1.1.3:compile
[INFO] |  +- com.sun.xml.messaging.saaj:saaj-impl:jar:1.5.1:compile
[INFO] |  |  +- jakarta.xml.soap:jakarta.xml.soap-api:jar:1.4.1:compile
[INFO] |  |  \- org.jvnet.mimepull:mimepull:jar:1.9.12:compile
[INFO] |  +- org.apache.geronimo.specs:geronimo-jta_1.1_spec:jar:1.1.1:compile
[INFO] |  +- org.jboss.spec.javax.rmi:jboss-rmi-api_1.0_spec:jar:1.0.6.Final:compile
[INFO] |  +- org.glassfish.jaxb:jaxb-runtime:jar:2.3.2:compile
[INFO] |  |  +- org.glassfish.jaxb:txw2:jar:2.3.2:compile
[INFO] |  |  +- com.sun.istack:istack-commons-runtime:jar:3.0.8:compile
[INFO] |  |  +- org.jvnet.staxex:stax-ex:jar:1.8.1:compile
[INFO] |  |  \- com.sun.xml.fastinfoset:FastInfoset:jar:1.2.16:compile
[INFO] |  \- javax.xml.soap:javax.xml.soap-api:jar:1.4.0:compile




It is the same for other starters.


I think the cause is that the Java9+ profile of the camel-spring-boot/pom.xml (see: https://github.com/apache/camel-spring-boot/blob/5c8d1e30fe8df62382a264def38c9d827bd8cfb9/pom.xml#L765) which is an ancestor of every camel-spring-boot-stater adds the JAX-WS and JAX-B dependencies.


This wasn't the case in Camel 3.0.1/3.0.0/2.24.0.","davsclaus:1582810349:2020-02-27T21:32:29.559+0000:1582810349:2020-02-27T21:32:29.559+0000:Yeah jaxb should only be needed via camel-xml-jaxb dependency that brings in those. And camel-spring requires this afair. So I think those java9+ profile can be removed. I think we did that in the core camel repo.
davidkarlsen:1582817152:2020-02-27T23:25:52.217+0000:1582817152:2020-02-27T23:25:52.217+0000:+1.
That's a bit of exclude-pain going on in my pom's.
Also - I think it's good to move to jakarta.* based dependencies rather than javax.* etc - since the community seems to go in that direction.
davsclaus:1582845744:2020-02-28T07:22:24.216+0000:1582845744:2020-02-28T07:22:24.216+0000:Yep there is no jdk9 build profile anymore on main repo, so this one should be removed on camel-spring-boot
<id>jdk9+-build</id>"
0,CAMEL-14620,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-27 10:55:30+00:00,2020-03-15 09:47:16+00:00,A ticket to remind to look into the source code generated auto configuration classes uses the new configurer classes from Camel or they rely on reflection based setting,davsclaus:1584236836:2020-03-15T09:47:16.256+0000:1584236836:2020-03-15T09:47:16.256+0000:They are
0,CAMEL-14619,New Feature,Major,None,,"
None
",Open,Unresolved,None,Unassigned,Luca Burgazzoli,0,3,2020-02-27 08:34:16+00:00,2023-07-24 17:26:37+00:00,"Some data formats such as the future CloudEvent one (https://issues.apache.org/jira/browse/CAMEL-13335) have specifications that describe how to bind them to specific transports (https://github.com/cloudevents/spec) so we should introduce a SPI to make this binding automatic so in a route like:




from(""undertow://http://0.0.0.0:8080"")
    .unmarshal().cloudEvents()
    .to(""kafka:my-topic"");




the exchange gets automatically translated to a Kafka message according to the CloudEvent binding specs for Kafka.","zregvart:1582854232:2020-02-28T09:43:52.351+0000:1582854232:2020-02-28T09:43:52.351+0000:[~lb] I've added labels to help find this issue for GSoC, if you're already working on this please remove them.
davsclaus:1690190762:2023-07-24T17:26:02.620+0000:1690190762:2023-07-24T17:26:02.620+0000:Christopher is working on this"
0,CAMEL-14618,Improvement,Major,None,3.3.0,"
None
",Resolved,Fixed,3.3.0,Andrea Cosentino,Andrea Cosentino,0,2,2020-02-27 07:08:24+00:00,2021-09-30 10:34:44+00:00,Like deleteAfterRead but with a different bucket as target.,
0,CAMEL-14617,Sub-task,Minor,None,,"

gsoc2020

",Resolved,Fixed,None,Zoran Regvart,Praveen Kottarathil,0,1,2020-02-25 23:11:08+00:00,2020-02-28 09:30:26+00:00,"Contributor guidelines page here has a link pointing to ASF Jira. The link targets a filter, owned and published by dkulp. Something in the data structures appears to have changed over the course of time and Jira is erroring out. This could be a turn-off for potential new contributors.


To fix there are two ways.
1. If this filter could be fixed by its owner, thats the easiest possible option


2. Alternately, someone with access to ASF Jira to create filters should create an easy to pick filter and the link the the filter should be updated at <root>/docs/user-manual/modules/ROOT/pages/contributing.adoc : Line 9",
0,CAMEL-14616,Bug,Major,"3.0.0, 3.0.1, 3.1.0",,"

type-converter

",Resolved,Workaround,None,Unassigned,Laurent Chabot,0,2,2020-02-25 15:48:41+00:00,2020-02-25 18:12:58+00:00,"I have a very basic usage of camel-mail that's been working fine with Camel 2.x:




import java.io.IOException;
import org.apache.camel.CamelContext;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.impl.DefaultCamelContext;

public class MailTest {
    public static void main(String[] args) throws IOException {
        try (CamelContext ctx = new DefaultCamelContext(); ProducerTemplate pt = ctx.createProducerTemplate()) {
            ctx.start();
            pt.sendBody(""smtp://localhost:25?to=me@mydomain"", ""Hello, World"");
        }
    }
}




It is packaged as an executable jar using maven-assembly-plugin jar-with-dependencies.


When I run it with Camel 3.x (tested with 3.0.0, 3.0.1 and 3.1.0), I get below error:



Exception in thread ""main"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[]
        at org.apache.camel.CamelExecutionException.wrapCamelExecutionException(CamelExecutionException.java:47)
        at org.apache.camel.support.ExchangeHelper.extractResultBody(ExchangeHelper.java:636)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:568)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:564)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:189)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:195)
        at MailTest.main(MailTest.java:10)
Caused by: java.lang.NullPointerException
        at org.apache.camel.component.mail.MailBinding.populateMailMessage(MailBinding.java:133)
        at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:61)
        at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:67)
        at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:212)
        at org.apache.camel.processor.SharedCamelInternalProcessor$1.process(SharedCamelInternalProcessor.java:110)
        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:84)
        at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:107)
        at org.apache.camel.impl.engine.DefaultProducerCache.send(DefaultProducerCache.java:185)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:176)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:172)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.send(DefaultProducerTemplate.java:153)
        at org.apache.camel.impl.engine.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:187)
        ... 2 more




Conversion of the in message to AttachmentMessage appears to be failing.
When I checked file META-INF/services/org/apache/camel/TypeConverterLoader in my assembled jar, it was missing the ""org.apache.camel.attachment.AttachmentConverterLoader"" entry.


If I now add the following line after starting the Camel context:




new AttachmentConverterLoader().load(ctx.getTypeConverterRegistry());




then mail sending is working fine again.


Am I doing smth wrong or is this a Camel 3.x bug?
Possible link with CAMEL-13677?","davsclaus:1582617720:2020-02-25T16:02:00.408+0000:1582617720:2020-02-25T16:02:00.408+0000:Do you have camel-attachments on the classpath
laurent149:1582620348:2020-02-25T16:45:48.795+0000:1582620348:2020-02-25T16:45:48.795+0000:I believe Maven retrieves it as a compile dependency of camel-mail, yes.
But as I suspected that the issue was related to it, I also tried to have it as an explicit Maven dependency and it didn't help.
davsclaus:1582622918:2020-02-25T17:28:38.786+0000:1582622918:2020-02-25T17:28:38.786+0000:Ah okay so you package your own JAR with camel-jars inlined? Like an Uber JAR then its your responsibility to ensure its all correct. For individual JARs then it should work fine.
davsclaus:1582622938:2020-02-25T17:28:58.216+0000:1582622938:2020-02-25T17:28:58.216+0000:See FAQ
https://camel.apache.org/manual/latest/faq/how-do-i-use-a-big-uber-jar.html
laurent149:1582625436:2020-02-25T18:10:36.136+0000:1582625436:2020-02-25T18:10:36.136+0000:Yes, uber jar indeed, not using shade plugin but assembly plugin does smth similar.
It's one-shot tooling for which we were aiming for quick & not so clean but I guess I didn't expect issues like this when moving to Camel 3.

Anyway, if this is as expected, then so be it, I'll keep the workaround in place.
Many thanks for the super quick help! "
0,CAMEL-14615,Bug,Minor,3.0.1,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Tarocchi,Adam,0,3,2020-02-25 14:35:17+00:00,2020-02-26 12:39:36+00:00,"When using camel-kafka-starter with Spring, I am declaring the bokers list in the application properties (camel.component.kafka.brokers=localhost:9092) and want to connect to kafka as a producer with


.to(""kafka:files"").


However I get the following error: Caused by: 


java.lang.IllegalArgumentException: URL to the Kafka brokers must be configured with the brokers option on either the component or endpoint.


It only works if I configure the broker via the query parameter:


.to(""kafka:files?brokers=127.0.0.1:9092"")


Sample projects have been created to reproduce the bug:


https://github.com/deradam/camel-kafka-java


https://github.com/deradam/camel-kafka (kotlin version)","valdar:1582614746:2020-02-25T15:12:26.462+0000:1582614746:2020-02-25T15:12:26.462+0000:[~Giemza] I have created a PR that solves the issue https://github.com/deradam/camel-kafka-java/pull/1 still not sure if it can be regarded only as a workaround. Still investigating.
Giemza:1582615779:2020-02-25T15:29:39.513+0000:1582615779:2020-02-25T15:29:39.513+0000:[~valdar] your change works! Thanks a lot for that.

Still I am wondering why there are two settings for the brokers list and what the difference is

_camel.component.kafka.brokers_ vs. _camel.component.kafka.configuration.brokers_

Might also be confusing for other newcomers.
davsclaus:1582616349:2020-02-25T15:39:09.878+0000:1582616349:2020-02-25T15:39:09.878+0000:Try with 3.1.0 release
davsclaus:1582622436:2020-02-25T17:20:36.391+0000:1582622436:2020-02-25T17:20:36.391+0000:Okay so its SB auto configuration that pickup that brokers option directly on the component. That should be removed so the option is configured on the configuration, like the other options.
valdar:1582691976:2020-02-26T12:39:36.281+0000:1582691976:2020-02-26T12:39:36.281+0000:This has been addressed here https://github.com/apache/camel/pull/3600 by removing one of the 2 options, this should reflect on the documentation as well when 3.2.0 will be released."
0,CAMEL-14614,Bug,Major,3.0.1,None,"
None
",Resolved,Won't Fix,None,Unassigned,Alexander Domke,0,3,2020-02-25 10:53:17+00:00,2020-03-17 08:40:56+00:00,"Hello everybody,


I have problems with the Camel update to version 3.0.1.


We currently use Apache Karaf 4.2.7 + Spring Deployer + Gemini Blueprint 3.0 + Camel 2.23.2.
After updating from Camel 2.23.2 to 3.0.1 I get unexpected errors:




11:14:35.440 ERROR [EclipseGeminiBlueprintExtenderThread-1] Unable to create application context for [camel-context.xml], unsatisfied dependencies: none
org.springframework.beans.factory.BeanDefinitionStoreException: Failed to create the JAXB binder; nested exception is javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
        at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:349) ~[?:?]
        at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:88) ~[!/:?]
        at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:63) ~[!/:?]
        at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:74) ~[!/:?]
        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1391) ~[!/:?]
        at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1371) ~[!/:?]
        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:179) ~[!/:?]
        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:149) ~[!/:?]
        at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:96) ~[!/:?]
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:513) ~[!/:?]
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:393) ~[!/:?]
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) ~[!/:?]
        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304) ~[!/:?]
        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188) ~[!/:?]
        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:224) ~[!/:?]
        at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:195) ~[!/:?]
        at org.eclipse.gemini.blueprint.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:171) ~[?:?]
        at org.eclipse.gemini.blueprint.context.support.OsgiBundleXmlApplicationContext.loadBeanDefinitions(OsgiBundleXmlApplicationContext.java:141) ~[?:?]
        at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:133) ~[!/:?]
        at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:636) ~[!/:?]
        at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.access$800(AbstractDelegatedExecutionApplicationContext.java:57) ~[!/:3.0.0.M01]
        at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext$3.run(AbstractDelegatedExecutionApplicationContext.java:239) ~[!/:3.0.0.M01]
        at org.eclipse.gemini.blueprint.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85) ~[!/:3.0.0.M01]
        at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.startRefresh(AbstractDelegatedExecutionApplicationContext.java:217) ~[!/:3.0.0.M01]
        at org.eclipse.gemini.blueprint.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.stageOne(DependencyWaiterApplicationContextExecutor.java:224) [!/:?]
        at org.eclipse.gemini.blueprint.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.refresh(DependencyWaiterApplicationContextExecutor.java:177) [!/:?]
        at org.eclipse.gemini.blueprint.context.support.AbstractDelegatedExecutionApplicationContext.refresh(AbstractDelegatedExecutionApplicationContext.java:154) [!/:3.0.0.M01]
        at org.eclipse.gemini.blueprint.extender.internal.activator.LifecycleManager$1.run(LifecycleManager.java:213) [!/:?]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_231]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_231]
        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_231]
Caused by: javax.xml.bind.JAXBException: ""org.apache.camel.model.config"" doesnt contain ObjectFactory.class or jaxb.index
        at com.sun.xml.bind.v2.ContextFactory.createContext(ContextFactory.java:254) ~[jaxb-runtime-2.3.2.jar:2.3.2]
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_231]
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_231]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_231]
        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_231]
        at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:143) ~[?:1.8.0_231]
        at javax.xml.bind.ContextFinder.find(ContextFinder.java:297) ~[?:1.8.0_231]
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:431) ~[?:1.8.0_231]
        at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:394) ~[?:1.8.0_231]
        at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:38) ~[?:?]
        at org.apache.camel.spring.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:186) ~[?:?]
        at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:347) ~[?:?]
        ... 30 more





If I understand the error correctly, the ObjectFactory class is not found in the org.apache.camel.model.config package.


The jaxb.index file appears to be there.


Would anyone have any idea how I could work around the problem?


Thank you very much
Alex","acosentino:1582599472:2020-02-25T10:57:52.301+0000:1582599472:2020-02-25T10:57:52.301+0000:cc [~gnodet]

 
davsclaus:1582599564:2020-02-25T10:59:24.260+0000:1582599609:2020-02-25T11:00:09.489+0000:spring xml is not supported in osgi, it has been deprecated for a long time on 2.x, and removed in 3.0. Only Aries Blueprint XML is supported, see the camel-examples https://github.com/apache/camel-examples
delphisual:1582602977:2020-02-25T11:56:17.278+0000:1582602977:2020-02-25T11:56:17.278+0000:[~davsclaus]Hello Claus, we have been using Apache Karaf, Apache Camel and Spring Frameworks for many years. So far we have successfully mastered all problems related to spring integration. I will see if I can still solve it this time if a lot of services don't have to be migrated. 
Is it still that aries blueprint does not support imports?
greeting
Alex"
0,CAMEL-14613,Improvement,Major,None,,"
None
",Closed,Won't Fix,None,Unassigned,Sergey,0,2,2020-02-25 08:03:28+00:00,2020-02-25 08:24:51+00:00,"Now camel-salesforce component is able to work only with one salesforce instance.
Now all auth/connect configuration is made on component-level.
But simetimes it`s necessary to integrate with more than one salesforce instance.


I suggest to refacrot component and add posibility to set connection and auth configuration params on endpoint level.","davsclaus:1582589995:2020-02-25T08:19:55.664+0000:1582589995:2020-02-25T08:19:55.664+0000:You can setup a salesforce2 component and have it with different auth settings and use salesforce2 as component name in the endpoints etc.
Malkevich:1582590193:2020-02-25T08:23:13.405+0000:1582590193:2020-02-25T08:23:13.405+0000:Thank you so much! Good idea!
Malkevich:1582590278:2020-02-25T08:24:38.559+0000:1582590278:2020-02-25T08:24:38.559+0000:We can achieve this by creating separate instancec of component with different params."
0,CAMEL-14612,Improvement,Minor,None,None,"

help-wanted

",Resolved,Fixed,3.3.0,Unassigned,Djordje Bajic,0,3,2020-02-24 10:52:16+00:00,2020-05-21 15:37:56+00:00,We need to update version to support json schema drafts >4. Currently it supports to draft-04.,"dbajic:1582512829:2020-02-24T10:53:49.550+0000:1582512829:2020-02-24T10:53:49.550+0000:It would be nice to have this in camel 2 and in camel 3.  Don't know if there are gonna be any minor releases for camel 2.25 in the future.

I am willing to file a PR for this once we decide for which version.
davsclaus:1582515767:2020-02-24T11:42:47.365+0000:1582515767:2020-02-24T11:42:47.365+0000:Camel 3 only
dbajic:1582538783:2020-02-24T18:06:23.507+0000:1582538783:2020-02-24T18:06:23.507+0000:Created PR.
davsclaus:1582586976:2020-02-25T07:29:36.790+0000:1582586976:2020-02-25T07:29:36.790+0000:That PR is just a micro version update, and does that version really contain > 4 draft support? 
dbajic:1582587911:2020-02-25T07:45:11.690+0000:1582587941:2020-02-25T07:45:41.330+0000:Yeah, i noticed that, when i pulled camel master before updating it anyway.

Camel 2 doesn't support anything above 4.
dbajic:1585919754:2020-04-03T21:15:54.009+0000:1585919754:2020-04-03T21:15:54.009+0000:[~davsclaus] Should we close this task? Since Camel 2 won't be updated anymore.
davsclaus:1585960177:2020-04-04T08:29:37.538+0000:1585960177:2020-04-04T08:29:37.538+0000:Yeah lets close this and create a new ticket about draft > 4 support 
dbajic:1585978371:2020-04-04T13:32:51.903+0000:1585978371:2020-04-04T13:32:51.903+0000:Can you please assign me to that task? [~davsclaus]  Thanks
mattbishop:1590046676:2020-05-21T15:37:56.734+0000:1590046676:2020-05-21T15:37:56.734+0000:Online docs need to be updated to indicate what versions of json-schema are supported. It currently states v4 draft only: [https://camel.apache.org/components/latest/json-validator-component.html]"
0,CAMEL-14611,Bug,Major,2.24.1,,"
None
",Resolved,Cannot Reproduce,None,Unassigned,Djordje Bajic,0,2,2020-02-24 10:45:06+00:00,2020-02-25 07:30:07+00:00,"One of our users reported a bug for the jsonpath component.


 




I found the rout cause of the ""'org.apache.camel.jsonpath.JsonPathLanguage': Lookup method resolution failed; nested exception"". It appears that when you set the camel-jsonpath dependency equal to the core version of camel, it will pull an older version of the json-smart. When I upped the version of camel-json to, let's say 3.0.0, instead of the core version 2.24.1. The problem was solved.
Root cause was: Caused by: java.lang.NoClassDefFoundError: [Lcom/jayway/jsonpath/Option;","davsclaus:1582519130:2020-02-24T12:38:50.749+0000:1582519130:2020-02-24T12:38:50.749+0000:Can you better show what is wrong, as on 2.25.x branch it pulls in json-smart v2.3

[INFO] org.apache.camel:camel-jsonpath:jar:2.25.0-SNAPSHOT
[INFO] +- org.apache.camel:camel-core:jar:2.25.0-SNAPSHOT:compile
[INFO] |  \- org.slf4j:slf4j-api:jar:1.7.26:compile
[INFO] +- com.jayway.jsonpath:json-path:jar:2.4.0:compile
[INFO] |  \- net.minidev:json-smart:jar:2.3:compile
[INFO] |     \- net.minidev:accessors-smart:jar:1.2:compile
[INFO] |        \- org.ow2.asm:asm:jar:5.0.4:compile
[INFO] +- net.minidev:json-smart-action:jar:2.3:compile
davsclaus:1582519152:2020-02-24T12:39:12.635+0000:1582519152:2020-02-24T12:39:12.635+0000:The json-smart-action dependency is not needed and has been removed in Camel 3.2 onwards.
dbajic:1582520831:2020-02-24T13:07:11.090+0000:1582520831:2020-02-24T13:07:11.090+0000:[~davsclaus] If there is no issue in 2.25  it's fixed. User complained on 2.24.1."
0,CAMEL-14610,New Feature,Major,None,None,"
None
",Open,Unresolved,Future,Jiri Ondrusek,Luca Burgazzoli,1,1,2020-02-22 19:58:40+00:00,2022-09-02 14:46:54+00:00,"We should create a an AsyncAPI (https://www.asyncapi.com/ ) component, similar to the OpenAPI one",
0,CAMEL-14609,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-22 17:23:20+00:00,2020-02-22 19:54:46+00:00,If creating many dynamic endpoints then the URIScanner creates too much waste and can be optimized.,davsclaus:1582364313:2020-02-22T17:38:33.328+0000:1582364313:2020-02-22T17:38:33.328+0000:Now it creates 5-6 times less objects
0,CAMEL-14608,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Unassigned,Connor McAuliffe,0,1,2020-02-21 18:14:47+00:00,2020-02-25 07:28:50+00:00,"Pulsar has support to add Dead Letter Topics to consumers which messages which have exceeded max retries get sent to. Camel should be able to support the creation and customization of dead letter policies.


Link to Pulsar documentation: https://pulsar.apache.org/docs/en/next/concepts-messaging/#dead-letter-topic",
0,CAMEL-14607,Improvement,Minor,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Connor McAuliffe,0,1,2020-02-21 15:55:13+00:00,2020-02-24 16:19:54+00:00,"In the upgrade to camel-3, the pulsar version also got updated, meaning that negative acks are now supported. Currently the DefaultPulsarMessageReceipt throws an UnsupportedOperationException if you try to negative ack. Now that it is supported we can change the function to actually negative ack.",
0,CAMEL-14606,Task,Major,None,None,"
None
",Resolved,Fixed,3.2.0,Thomas Diesler,Thomas Diesler,0,1,2020-02-21 15:25:07+00:00,2020-02-22 09:37:43+00:00,Integrators (like me) may see a snakeyaml version that is incompatible with camel-yaml,
0,CAMEL-14575,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,4,2020-02-16 13:43:10+00:00,2020-04-07 09:12:38+00:00,"We should look at dropping the support for time pattern in long values which are used for milli seconds, eg


1000 = 1s
30000 = 30s
60000 = 1h


The shothand requires a regexp parser for those syntax patterns. And if we drop this then the type converter for String -> Long just becomes plain simple and therefore faster.


An alternative is to have some kind of marker on @UriParam that indicate this option is a long value but it accepts the time pattern too, and then have generated type converter configurer to handle this specially.


This requires to markup those from all the components, eg timer, scheduler and so on.","zregvart:1582857016:2020-02-28T10:30:16.327+0000:1582857016:2020-02-28T10:30:16.327+0000:Perhaps we could offer ISO-8601 duration format PnDTnHnMn.nS and parse via the [Duration.parse|https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html#parse-java.lang.CharSequence-] for those not inclined to use milliseconds instead?
davsclaus:1584237179:2020-03-15T09:52:59.233+0000:1584237179:2020-03-15T09:52:59.233+0000:Yeah we can switch to use Duration as type for those that are milli second based, like those on timer/scheduler etc. As string -> long is a common type converter then it should be as fast as possible and we can make it quicker without this parsing check.
davsclaus:1584237349:2020-03-15T09:55:49.266+0000:1584237349:2020-03-15T09:55:49.266+0000:The only problem with ISO-8601 format is that its a standard but its not so well know, eg to say 2 seconds you have to say, PT2S which frankly is harder to read, than 2000, or 2s or 2sec
gnodet:1584311328:2020-03-16T06:28:48.370+0000:1584311328:2020-03-16T06:28:48.370+0000:Agreed, I think for all timeout and durations, we should use the {{Duration}} type and drop the combo {{long / TimeUnit}}, where {{TimeUnit}} usually implicitely defaults to milliseconds.

On the parsing side, maybe we could just support both ? It should not be very complicated to support both the ISO format and the natural one.
MaartenTutak:1586220777:2020-04-07T08:52:57.652+0000:1586220777:2020-04-07T08:52:57.652+0000:[~davsclaus] I know this is speaking after the facts, but shouldn't we deprecate such a feature before removing it completely?
I just upgraded from 3.1.0 to 3.2.0 and had issues due to this breaking change.
davsclaus:1586221483:2020-04-07T09:04:43.514+0000:1586221483:2020-04-07T09:04:43.514+0000:No the 3.x releases are in active development until the first LTS release. 
https://camel.apache.org/blog/LTS-Release-Schedule/

MaartenTutak:1586221958:2020-04-07T09:12:38.635+0000:1586221958:2020-04-07T09:12:38.635+0000:Alright, clear. I was thinking in terms of SemVer so I was not expecting a ""breaking"" change."
0,CAMEL-14574,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Claus Ibsen,Claus Ibsen,0,1,2020-02-16 12:45:35+00:00,2022-09-02 14:46:00+00:00,"An idea is to source code generate a single class with switch statements for from -> to, so we avoid adding them into the TC registry via DoubleMap which takes up heap memory and also the lookup requires to build a hash key.


If we source code generate a single class with a single method that does a switch on the from, and then another switch per to that it supports, and then invoke the coverter, then there is no map registration needed and we can save heap memory, and the coverter is faster also.


The JVM can much better optimize switch java code.",
0,CAMEL-14573,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,1,2020-02-16 10:50:11+00:00,2022-09-02 14:45:32+00:00,"We can move the logic for Camel 2.x style @Converter annotation scanning to its own JAR and outside camel-core / camel-core-engine so you need to opt-in to enable this.


Today you need to set a flag on camel context to enable this. But instead we can have it as a JAR on classpath. Then the code is outside camel-core and we avoid a bit of complexity to support both the new fast style via source code generated loaders vs old style.",
0,CAMEL-14572,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-16 07:36:24+00:00,2020-02-16 15:58:12+00:00,There are some use-cases where we convert Boolean -> boolean etc which triggers a lookup in type converter registry. We can do this quicker.,
0,CAMEL-14571,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-16 07:35:18+00:00,2020-02-16 15:58:30+00:00,We can make it faster when using to have it eager initialized so its ready without having to check first the need to create it.,
0,CAMEL-14570,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Claus Ibsen,0,1,2020-02-15 18:48:31+00:00,2020-02-17 12:08:01+00:00,Would be good to use test containers for testing this,
0,CAMEL-14569,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Claus Ibsen,0,1,2020-02-15 18:48:03+00:00,2020-02-17 13:54:33+00:00,Would be good to use testcontainers for testing this,
0,CAMEL-14568,Improvement,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,4,2020-02-15 07:58:05+00:00,2020-03-01 08:25:43+00:00,"We should make the build system generate camel component json metadata with nested configuration options, like we do for endpoints.


For example some components allow to set a global configuration class which is then copied and then per endpoint can override individual settings. This class is annotated with @UriParams and the metadata tool generate these options included for endpoint.


For component we only refer to the configuration class itself and not its options.


Then the options table in the generated docs should also be updated for components to be more similar to what we do for SB, eg with camel.component.kafka.xxx as prefix. Then its the same way to configure this with SB, Main, Quarkus, Kafka Connectors and whatnot. And for Java configuration you still have just java code. Also the componentdsl tool needs to be updated to support this.","davsclaus:1582759837:2020-02-27T07:30:37.521+0000:1582759837:2020-02-27T07:30:37.521+0000:This also requires component-dsl to be updated to deal with configuration classes.
davsclaus:1582765979:2020-02-27T09:12:59.783+0000:1583022335:2020-03-01T08:25:35.536+0000:TODO: Add note to 3.2 update guide *DONE*
 TODO: Update spring boot starters *DONE*
 TODO: Remove nested configuration from spring boot starters *DONE*
 TODO: Update upgrade guide about (SB change) *DONE*

TODO: SB should use configurer to set component properties in auto configuration *DONE*
davsclaus:1582849232:2020-02-28T08:20:32.902+0000:1582855322:2020-02-28T10:02:02.980+0000:Okay getting closer, I need to take a closer look at a few components that somehow was affected. *DONE*
davsclaus:1582873439:2020-02-28T15:03:59.112+0000:1582873439:2020-02-28T15:03:59.112+0000:camel-activemq
camel-ahc-ws
camel-amqp
camel-atmosphere-websocket
camel-aws-ec2
camel-aws-ecs
camel-aws-eks
camel-aws-iam
camel-aws-kinesis
camel-aws-kms
camel-aws-mq
camel-aws-msk
camel-aws-s3
camel-aws-ses
camel-aws-sns
camel-aws-sqs
camel-aws-swf
camel-aws-translate
camel-aws2-cw
camel-aws2-ddb
camel-aws2-ec2
camel-aws2-ecs
camel-aws2-eks
camel-aws2-iam
camel-aws2-kinesis
camel-aws2-kms
camel-aws2-lambda
camel-aws2-mq
camel-aws2-msk
camel-aws2-sns
camel-aws2-translate
camel-bean
camel-braintree
camel-dataset
camel-elytron
camel-ftp
camel-kafka
camel-msv
camel-netty-http
camel-sjms2
camel-stub
camel-vm
camel-xj
camel-xslt-saxon

 
acosentino:1582873481:2020-02-28T15:04:41.419+0000:1582873481:2020-02-28T15:04:41.419+0000:Going through all the AWS and AWS2
acosentino:1582876934:2020-02-28T16:02:14.270+0000:1582876934:2020-02-28T16:02:14.270+0000:camel-activemq
camel-ahc-ws
camel-amqp
camel-atmosphere-websocket
-camel-aws-ec2-
-camel-aws-ecs-
-camel-aws-eks-
-camel-aws-iam-
-camel-aws-kinesis-
-camel-aws-kms-
-camel-aws-mq-
-camel-aws-msk-
-camel-aws-s3-
-camel-aws-ses-
-camel-aws-sns-
-camel-aws-sqs-
-camel-aws-swf-
-camel-aws-translate-
camel-aws2-cw
camel-aws2-ddb
camel-aws2-ec2
camel-aws2-ecs
camel-aws2-eks
camel-aws2-iam
camel-aws2-kinesis
camel-aws2-kms
camel-aws2-lambda
camel-aws2-mq
camel-aws2-msk
camel-aws2-sns
camel-aws2-translate
camel-bean
camel-braintree
camel-dataset
camel-elytron
camel-ftp
camel-kafka
camel-msv
camel-netty-http
camel-sjms2
camel-stub
camel-vm
camel-xj
camel-xslt-saxon
davsclaus:1582947554:2020-02-29T11:39:14.655+0000:1582947554:2020-02-29T11:39:14.655+0000:Now its only the components where the configurers extends another that regen
davsclaus:1582948201:2020-02-29T11:50:01.206+0000:1582948201:2020-02-29T11:50:01.206+0000:Okay I think it works now again. 
davsclaus:1582957030:2020-02-29T14:17:10.813+0000:1582957030:2020-02-29T14:17:10.813+0000:All the components should be fixed now"
0,CAMEL-14567,Test,Major,None,None,"

help-wanted
website

",Resolved,Incomplete,None,Unassigned,Claus Ibsen,0,8,2020-02-14 12:28:44+00:00,2022-09-02 14:45:02+00:00,"Apache Camel extensions for Quarkus
Apache Camel K
Apache Camel Kafka Connector
Camel Spring Boot Starters
Component reference
User manual


Make this into


Camel Components
Camel Kafka Connectors
Camel Quarkus Extensions
Camel Spring Boot Starters
User manual","zregvart:1582857327:2020-02-28T10:35:27.395+0000:1582857327:2020-02-28T10:35:27.395+0000:This needs changing in the {{docs/antora.yml}} files in each documentation module, for example for Camel Quarkus it's [here|https://github.com/apache/camel-quarkus/blob/c34d83e81524df1289ca659cc4a7955de04c78ce/docs/antora.yml#L19].
Shula_Aso:1583446555:2020-03-06T06:15:55.005+0000:1583446751:2020-03-06T06:19:11.805+0000:Hello [~zregvart], i'm an outreachy applicant. And i'ld love to contribute to this project during and after the outreachy contribution phase.  I want to know please if i can get assigned this issue for a start.       Also if there is another newComer friendly issue that you think would be a better place for me to start, i'ld appreciate if i can get assigned that one. if not, i think this is also good one.
zregvart:1583458807:2020-03-06T09:40:07.286+0000:1583458807:2020-03-06T09:40:07.286+0000:Hi all, just in case you haven't already received this information on how to contribute I'll enclose it in here first, I'll try to address your individual comments next.

We much appreciate your interest and willingness to contribute, I don't think it makes much sense for all of you to work on the same issue. There's also no need to have a competition on who gets to contribute first, we have plenty of other issues (outlined below) that you can help with. Since most of you are interested in participating in the Outreachy program, and help with the website, please have a look at some issues in that area via this search:

https://issues.apache.org/jira/issues/?jql=project%20%3D%20CAMEL%20AND%20status%20%3D%20Open%20AND%20component%20%3D%20website

And feel free to propose new ideas by creating new issues around the website.

For those wondering how to get started contributing to the website.

Make sure have a [GitHub account|https://github.com/join], read how you can [get started|https://help.github.com/en/github/getting-started-with-github], and [create a pull request|https://help.github.com/en/github/collaborating-with-issues-and-pull-requests].

Have a look at the [README.md|https://github.com/apache/camel-website/blob/master/README.md] in the website project on how to build and how to preview your changes on your own computer.

I'll try to address the questions in you comments here, for future conversations please do subscribe to the developer's mailing list and send emails there, discussions on the Jira issues can get a bit out of control and it's not that easy to follow the conversation here.

The following text includes information on how to reach us, and get started:

First of all, thank you for having an interest in contributing to Apache Camel.

Here are some guidelines on how to best approach the Apache Camel community and how to best apply yourself.

1. Communication

Apache Camel is an Apache Software Foundation project, all communication is done in the open on the project mailing lists.

You can read more on the reasoning behind this to get a better understanding of:

https://www.apache.org/foundation/mailinglists.html

All communication is subject to the ASF Code of Conduct, which you can read here:

https://www.apache.org/foundation/policies/conduct.html

For questions and guidance around contributing subscribe to the developer's mailing list by sending an e-mail to dev-subscribe@camel.apache.org.

We can also be reached on the Gitter chat at https://gitter.im/apache/apache-camel/.

We track issues using ASF Jira located at:

https://issues.apache.org/jira/browse/CAMEL

Where we maintain a list of issues that are easy to get started with, so you can familiarize yourself with the process and get your first contribution in:

https://issues.apache.org/jira/issues/?filter=12348073

And some areas that we are actively looking for help on:

https://issues.apache.org/jira/issues/?filter=12348074

When you're ready to contribute create a Pull request to one of the Camel projects you can find under the Apache organization on GitHub:

https://github.com/apache?q=camel

Expect that your Pull request will receive a review and that you will need to respond and correspond to that via comments at GitHub.

2. Getting started

Read the ""Contributing to Apache Camel"" document on the Camel website:

https://camel.apache.org/manual/latest/contributing.html

Identify areas you can contribute first. You don't have to be an expert in an area, the Apache Camel developers are available to offer help and guidance.

Introduce yourself on the developer's mailing list (see above), tell us what area of work or problem you wish to address in Camel. Create a draft of your solution, this can be simple 1-2 sentences on the change you wish to make. Try to be as specific as you can: include a short description of your intent, what you tried and what didn't work, or what you need help with. The best way of approaching the developers is by describing what you would like to work on and asking specific questions on how to get started. We'll do our best to guide you and help you make your contribution. 

We also participate in Google Summer of Code and Outreachy programs, for information about those look at those program websites. If you wish to participate in either of those follow the guidelines and schedule set by those programs. If you're unsure please reach out via official communication channels of those programs, or ask on the developer's mailing list for help.

3. Your first contribution

Make sure you followed the steps and guidelines outlined above. For bigger changes, make sure that you have discussed on the developer's mailing list or in the Jira issue tracker before hand. We love receiving contributions, to get the best response make sure that the reasoning behind the contribution you wish to make is clear: outline the problem and explain your solution for it.

Make sure you follow the guidelines outlined in the ""Contributing to Apache Camel"" document. Be respectful of the source checks, formatting and the structure of the git commit message we abide by. This will help you in getting your contribution accepted. Outline any changes you made but are unaware or unsure of any consequences or side effects.

Stay engaged, follow and respond to comments or questions you might be asked.

With that I wish you all the best and please do have fun while contributing to Apache Camel, we certainly do :)
Bob160:1583900378:2020-03-11T12:19:38.247+0000:1583900378:2020-03-11T12:19:38.247+0000:[~zregvart]may I take up this issue?

Thanks
zregvart:1583902024:2020-03-11T12:47:04.093+0000:1583902024:2020-03-11T12:47:04.093+0000:[~Bob160] feel free to, thanks!
RimshaCh:1584358132:2020-03-16T19:28:52.925+0000:1584358132:2020-03-16T19:28:52.925+0000:I was going through the description and from my understanding ,we have to reorganize the names in the navbar?
aashnajena:1584527900:2020-03-18T18:38:20.332+0000:1584527900:2020-03-18T18:38:20.332+0000:Hi! Does this issue still persist? I think some part of it has already been done. If I'm mistaken and there are more tasks to be done, can I please take this up? :)
RimshaCh:1584531114:2020-03-18T19:31:54.427+0000:1584531287:2020-03-18T19:34:47.188+0000:Hey [~aashnajena] ,I was going through the issue,I wanted work on the side bar of blog page.It's not consistent with other page's side bar.I think it's important to have consistency in design  for all pages in a website.
 We should  coordinate so that we don't duplicate any work.

zregvart:1584928769:2020-03-23T09:59:29.486+0000:1584928769:2020-03-23T09:59:29.486+0000:From the description this looks like an issue in this menu:

 !Screenshot_2020-03-23 Apache Camel user manual - Apache Camel.png! 

That can be accessed bottom left. Those are component names in Antora terminology and they need to be changed, as described in the [comment above|https://issues.apache.org/jira/browse/CAMEL-14567?focusedCommentId=17047443&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17047443].
jyotiattri:1584929147:2020-03-23T10:05:47.082+0000:1584929147:2020-03-23T10:05:47.082+0000:Hi [~zregvart], 

I want to work on this issue but shows error.

 For this, I need to change in [https://github.com/apache/camel-quarkus/blob/c34d83e81524df1289ca659cc4a7955de04c78ce/docs/antora.yml#L19]. So after changing the text, I was trying to build the repository to run the tests. For that, I need to install maven but when I am running this command in Powershell it shows error. Please help me, if I am wrong then tell me. I have asked this error in Gitter chat also but no reply there.
RimshaCh:1584938799:2020-03-23T12:46:39.975+0000:1584938799:2020-03-23T12:46:39.975+0000:[~zregvart] thankyou for the help.
RimshaCh:1584939082:2020-03-23T12:51:22.035+0000:1584939082:2020-03-23T12:51:22.035+0000:[~jyotiattri] hi , I am already working on this ,just don't want that we duplicate work.I am rearranging the sidebar as listed in the comment and description above.
jyotiattri:1584939713:2020-03-23T13:01:53.869+0000:1584939713:2020-03-23T13:01:53.869+0000:[~RimshaCh], Ok
RimshaCh:1585306861:2020-03-27T19:01:01.785+0000:1585306861:2020-03-27T19:01:01.785+0000:[~zregvart] hi I made changes in the antora.yml of required documentations , however to test run the changes  do I require to run the documentation module? However that still would not preview me how the changes are appearing in the main website,could you guide me here ?
zregvart:1585538584:2020-03-30T11:23:04.585+0000:1585538584:2020-03-30T11:23:04.585+0000:[~RimshaCh] have a look at the [Antora documentation|https://docs.antora.org/antora/2.2/playbook/configure-content-sources/#current-branch]
RimshaCh:1585653475:2020-03-31T19:17:55.193+0000:1585653475:2020-03-31T19:17:55.193+0000:Thankyou [~zregvart]
klease78:1620118914:2021-05-04T17:01:54.224+0000:1620120295:2021-05-04T17:24:55.711+0000:Currently the popup sidebar has different names so the antora.yml files have indeed been changed. The linked pages still have the previous names, such as ""Apache Camel Kafka Connector""; that is in the index.adoc files.
davsclaus:1662101102:2022-09-02T14:45:02.942+0000:1662101102:2022-09-02T14:45:02.942+0000:Report on github"
0,CAMEL-14566,Test,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Claus Ibsen,0,1,2020-02-14 09:57:49+00:00,2020-02-15 07:54:05+00:00,No Desc,
0,CAMEL-14565,Task,Major,None,3.5.0,"

help-wanted

",Resolved,Fixed,3.5.0,Andrea Cosentino,Claus Ibsen,0,4,2020-02-14 09:33:24+00:00,2020-07-14 04:28:32+00:00,"[WARNING] Option camel.component.consul.cluster.service.acl-token has no description
[WARNING] Option camel.component.consul.cluster.service.block-seconds has no description
[WARNING] Option camel.component.consul.cluster.service.connect-timeout-millis has no description
[WARNING] Option camel.component.consul.cluster.service.consistency-mode has no description
[WARNING] Option camel.component.consul.cluster.service.datacenter has no description
[WARNING] Option camel.component.consul.cluster.service.first-index has no description
[WARNING] Option camel.component.consul.cluster.service.near-node has no description
[WARNING] Option camel.component.consul.cluster.service.node-meta has no description
[WARNING] Option camel.component.consul.cluster.service.password has no description
[WARNING] Option camel.component.consul.cluster.service.ping-instance has no description
[WARNING] Option camel.component.consul.cluster.service.read-timeout-millis has no description
[WARNING] Option camel.component.consul.cluster.service.recursive has no description
[WARNING] Option camel.component.consul.cluster.service.root-path has no description
[WARNING] Option camel.component.consul.cluster.service.session-lock-delay has no description
[WARNING] Option camel.component.consul.cluster.service.session-refresh-interval has no description
[WARNING] Option camel.component.consul.cluster.service.session-ttl has no description
[WARNING] Option camel.component.consul.cluster.service.ssl-context-parameters has no description
[WARNING] Option camel.component.consul.cluster.service.tags has no description
[WARNING] Option camel.component.consul.cluster.service.url has no description
[WARNING] Option camel.component.consul.cluster.service.user-name has no description
[WARNING] Option camel.component.consul.cluster.service.write-timeout-millis has no description
[WARNING] Option camel.component.consul.health.check.repository.enabled has no description
[WARNING] Option camel.component.consul.health.check.repository.failure-threshold has no description
[WARNING] Option camel.component.consul.health.check.repository.interval has no description
[WARNING] Option camel.component.consul.service-registry.acl-token has no description
[WARNING] Option camel.component.consul.service-registry.block-seconds has no description
[WARNING] Option camel.component.consul.service-registry.check-interval has no description
[WARNING] Option camel.component.consul.service-registry.check-ttl has no description
[WARNING] Option camel.component.consul.service-registry.connect-timeout-millis has no description
[WARNING] Option camel.component.consul.service-registry.consistency-mode has no description
[WARNING] Option camel.component.consul.service-registry.datacenter has no description
[WARNING] Option camel.component.consul.service-registry.deregister-after has no description
[WARNING] Option camel.component.consul.service-registry.deregister-services-on-stop has no description
[WARNING] Option camel.component.consul.service-registry.first-index has no description
[WARNING] Option camel.component.consul.service-registry.near-node has no description
[WARNING] Option camel.component.consul.service-registry.node-meta has no description
[WARNING] Option camel.component.consul.service-registry.override-service-host has no description
[WARNING] Option camel.component.consul.service-registry.password has no description
[WARNING] Option camel.component.consul.service-registry.ping-instance has no description
[WARNING] Option camel.component.consul.service-registry.read-timeout-millis has no description
[WARNING] Option camel.component.consul.service-registry.recursive has no description
[WARNING] Option camel.component.consul.service-registry.service-host has no description
[WARNING] Option camel.component.consul.service-registry.ssl-context-parameters has no description
[WARNING] Option camel.component.consul.service-registry.tags has no description
[WARNING] Option camel.component.consul.service-registry.url has no description
[WARNING] Option camel.component.consul.service-registry.user-name has no description
[WARNING] Option camel.component.consul.service-registry.write-timeout-millis has no description
[WARNING] Option camel.component.zookeeper.cluster.service.auth-info-list has no description
[WARNING] Option camel.component.zookeeper.cluster.service.base-path has no description
[WARNING] Option camel.component.zookeeper.cluster.service.connection-timeout has no description
[WARNING] Option camel.component.zookeeper.cluster.service.connection-timeout-unit has no description
[WARNING] Option camel.component.zookeeper.cluster.service.curator-framework has no description
[WARNING] Option camel.component.zookeeper.cluster.service.max-close-wait has no description
[WARNING] Option camel.component.zookeeper.cluster.service.max-close-wait-unit has no description
[WARNING] Option camel.component.zookeeper.cluster.service.namespace has no description
[WARNING] Option camel.component.zookeeper.cluster.service.nodes has no description
[WARNING] Option camel.component.zookeeper.cluster.service.reconnect-base-sleep-time has no description
[WARNING] Option camel.component.zookeeper.cluster.service.reconnect-base-sleep-time-unit has no description
[WARNING] Option camel.component.zookeeper.cluster.service.reconnect-max-retries has no description
[WARNING] Option camel.component.zookeeper.cluster.service.reconnect-max-sleep-time has no description
[WARNING] Option camel.component.zookeeper.cluster.service.reconnect-max-sleep-time-unit has no description
[WARNING] Option camel.component.zookeeper.cluster.service.retry-policy has no description
[WARNING] Option camel.component.zookeeper.cluster.service.session-timeout has no description
[WARNING] Option camel.component.zookeeper.cluster.service.session-timeout-unit has no description
[WARNING] Option camel.component.zookeeper.service-registry.auth-info-list has no description
[WARNING] Option camel.component.zookeeper.service-registry.base-path has no description
[WARNING] Option camel.component.zookeeper.service-registry.connection-timeout has no description
[WARNING] Option camel.component.zookeeper.service-registry.connection-timeout-unit has no description
[WARNING] Option camel.component.zookeeper.service-registry.curator-framework has no description
[WARNING] Option camel.component.zookeeper.service-registry.deregister-services-on-stop has no description
[WARNING] Option camel.component.zookeeper.service-registry.max-close-wait has no description
[WARNING] Option camel.component.zookeeper.service-registry.max-close-wait-unit has no description
[WARNING] Option camel.component.zookeeper.service-registry.namespace has no description
[WARNING] Option camel.component.zookeeper.service-registry.nodes has no description
[WARNING] Option camel.component.zookeeper.service-registry.override-service-host has no description
[WARNING] Option camel.component.zookeeper.service-registry.reconnect-base-sleep-time has no description
[WARNING] Option camel.component.zookeeper.service-registry.reconnect-base-sleep-time-unit has no description
[WARNING] Option camel.component.zookeeper.service-registry.reconnect-max-retries has no description
[WARNING] Option camel.component.zookeeper.service-registry.reconnect-max-sleep-time has no description
[WARNING] Option camel.component.zookeeper.service-registry.reconnect-max-sleep-time-unit has no description
[WARNING] Option camel.component.zookeeper.service-registry.retry-policy has no description
[WARNING] Option camel.component.zookeeper.service-registry.service-host has no description
[WARNING] Option camel.component.zookeeper.service-registry.session-timeout has no description
[WARNING] Option camel.component.zookeeper.service-registry.session-timeout-unit has no description","amdmdi:1593519956:2020-06-30T20:25:56.361+0000:1593519956:2020-06-30T20:25:56.361+0000:Hello,

I am trying to fix this issue but i am out of ideas, any hints ?

All of these warnings refer to private properties inherited from parent configuration classes.
{code:java}
@ConfigurationProperties(prefix = ""camel.component.consul.cluster.service"")
public class ConsulClusterServiceConfiguration extends ConsulClusterConfiguration {

// ...
}

@ConfigurationProperties(prefix = ""camel.component.zookeeper.cluster.service"")
public class ZooKeeperClusterServiceConfiguration extends ZooKeeperCuratorConfigurationCopy {

}
{code}
The {{spring-boot-configuration-processor}} seems to find them by using the inherited public getters but it can't find the associated javadoc comments hence the missing descriptions. It also can't find the default values.

 The generated {{spring-configuration-metadata.json}}  files look like this :
{code:json}
  ""properties"": [
   ...
    {
      ""name"": ""camel.component.consul.cluster.service.block-seconds"",
      ""type"": ""java.lang.Integer"",
      ""sourceType"": ""org.apache.camel.component.consul.springboot.cluster.ConsulClusterServiceConfiguration""
    },
    {
      ""name"": ""camel.component.consul.cluster.service.connect-timeout"",
      ""type"": ""java.time.Duration"",
      ""sourceType"": ""org.apache.camel.component.consul.springboot.cluster.ConsulClusterServiceConfiguration""
    },
   ...
{code}
I tried to add javadoc to the public getters/setters but it did not work.

PS: This will be my first contribution to Camel, well... that if i manage to fix it :)


davsclaus:1593604107:2020-07-01T19:48:27.436+0000:1593604107:2020-07-01T19:48:27.436+0000:Yeah so its a spring boot tooling problem, they could (like we had once in camel) have the tool automatic download the -source JARs via maven and parse the .java file and grab its javadoc - we did that in some camel-main tooling.

You can try to @override the parent option getter/setter and copy its javadoc, for example take one parameter and try with that.
amdmdi:1593823268:2020-07-04T08:41:08.908+0000:1593823268:2020-07-04T08:41:08.908+0000:I found 2 different ways to fix this. See linked PullRequests for more details.

 "
0,CAMEL-14564,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-02-14 09:20:37+00:00,2020-02-14 10:49:59+00:00,"The WebHookRoutePolicy is triggered when a route is initialized but the underlying web-hook endpoint may not be fully initialized


See https://github.com/apache/camel-k-runtime/issues/236","davsclaus:1581645929:2020-02-14T10:05:29.339+0000:1581645929:2020-02-14T10:05:29.339+0000:Its likely in the camel-k-runtime the problem is

You can trigger to start the endpoint before you use it, add

ServiceHelper.startService(webhook);

after this line

https://github.com/apache/camel-k-runtime/blob/master/camel-k-runtime-webhook/src/main/java/org/apache/camel/k/webhook/WebhookRoutePolicyFactory.java#L65

lb:1581646273:2020-02-14T10:11:13.670+0000:1581646273:2020-02-14T10:11:13.670+0000:That would be a solution but I think the delegate endpoint should be computed as earlier as possible so that DelegateEndpoint::getEndpoint is never null, regardless of when it is invoked
davsclaus:1581646804:2020-02-14T10:20:04.416+0000:1581646804:2020-02-14T10:20:04.416+0000:Ah okay yeah lets do that"
0,CAMEL-14563,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-02-14 08:08:56+00:00,2020-02-14 09:19:20+00:00,"The camel-twilio component has two conflicting apis: notification and call-notification using respectively the proxy classes com.twilio.rest.api.v2010.account.Notification and com.twilio.rest.api.v2010.account.call.Notification.


However, the simple names of the generated classes are the same NotificationEndpointConfiguration and thus the second one overrides the first one during the generation.",
0,CAMEL-14562,Test,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Claus Ibsen,0,1,2020-02-14 07:24:52+00:00,2020-02-14 15:14:34+00:00,Would be good to use testcontainers to bootstrap ES for testing,
0,CAMEL-14561,Bug,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Andrea Cosentino,0,3,2020-02-13 18:23:14+00:00,2020-02-14 15:14:23+00:00,"17:59:47.865 ERROR [fileinstall-/home/oscerd/playground/apache-karaf-4.2.7/deploy] Unable to start container for blueprint bundle camel-context.xml/0.0.0org.osgi.service.blueprint.container.ComponentDefinitionException: Failed to create the JAXB binder : javax.xml.bind.JAXBException: Provider class com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: java.lang.NullPointerException	 - with linked exception:[java.lang.NullPointerException]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:252) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parse(CamelNamespaceHandler.java:204) ~[?:?]	at org.apache.aries.blueprint.parser.Parser.parseCustomElement(Parser.java:1369) ~[!/:1.10.2]	at org.apache.aries.blueprint.parser.Parser.loadComponents(Parser.java:427) ~[!/:1.10.2]	at org.apache.aries.blueprint.parser.Parser.populate(Parser.java:331) ~[!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintContainerImpl.doRun(BlueprintContainerImpl.java:371) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintContainerImpl.run(BlueprintContainerImpl.java:298) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:311) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:280) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.createContainer(BlueprintExtender.java:276) [!/:1.10.2]	at org.apache.aries.blueprint.container.BlueprintExtender.modifiedBundle(BlueprintExtender.java:266) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:500) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.customizerModified(BundleHookBundleTracker.java:433) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$AbstractTracked.track(BundleHookBundleTracker.java:725) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$Tracked.bundleChanged(BundleHookBundleTracker.java:463) [!/:1.10.2]	at org.apache.aries.util.tracker.hook.BundleHookBundleTracker$BundleEventHook.event(BundleHookBundleTracker.java:422) [!/:1.10.2]	at org.apache.felix.framework.util.SecureAction.invokeBundleEventHook(SecureAction.java:1179) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.EventDispatcher.createWhitelistFromHooks(EventDispatcher.java:730) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.EventDispatcher.fireBundleEvent(EventDispatcher.java:485) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4579) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.Felix.startBundle(Felix.java:2174) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:998) [org.apache.felix.framework-5.6.12.jar:?]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundle(DirectoryWatcher.java:1260) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.startBundles(DirectoryWatcher.java:1233) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.doProcess(DirectoryWatcher.java:520) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.process(DirectoryWatcher.java:365) [!/:3.6.4]	at org.apache.felix.fileinstall.internal.DirectoryWatcher.run(DirectoryWatcher.java:316) [!/:3.6.4]Caused by: javax.xml.bind.JAXBException: Provider class com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: java.lang.NullPointerException		at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:202) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:129) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.find(ContextFinder.java:318) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:478) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:435) ~[?:1.8.0_201]	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:38) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:678) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:250) ~[?:?]	... 26 moreCaused by: java.lang.NullPointerException	at javax.xml.bind.ContextFinder.handleClassCastException(ContextFinder.java:114) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:187) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.newInstance(ContextFinder.java:129) ~[?:1.8.0_201]	at javax.xml.bind.ContextFinder.find(ContextFinder.java:318) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:478) ~[?:1.8.0_201]	at javax.xml.bind.JAXBContext.newInstance(JAXBContext.java:435) ~[?:1.8.0_201]	at org.apache.camel.impl.DefaultModelJAXBContextFactory.newJAXBContext(DefaultModelJAXBContextFactory.java:38) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.getJaxbContext(CamelNamespaceHandler.java:678) ~[?:?]	at org.apache.camel.blueprint.handler.CamelNamespaceHandler.parseCamelContextNode(CamelNamespaceHandler.java:250) ~[?:?]	... 26 more17:59:47.871 DEBUG [fileinstall-/home/oscerd/playground/apache-karaf-4.2.7/deploy] Sending blueprint container event BlueprintEvent[type=FAILURE, exception=Failed to create the JAXB binder : javax.xml.bind.JAXBException: Provider class com.sun.xml.internal.bind.v2.ContextFactory could not be instantiated: java.lang.NullPointerException




With a simple blueprint.xml. With JDK11 this is ok.","davsclaus:1581634732:2020-02-14T06:58:52.762+0000:1581634732:2020-02-14T06:58:52.762+0000:So its JAXBContext that seems to load an implementation that is not an instanceof JAXBContext and then when it attempts to report this, then it has a NPE in its own code, because getClassloader returns null.

So its some OSGi classloading hell on Karaf that is causing this. 

I wonder if we could generate the ObjectFactory classes instead of using jaxb.index files and rely on JAXB itself. But its a big change as you would need to add annotations to refer to the factory classes in the model.

This is also only on JDK8 and Karaf. And JDK8 will become dropped in the future.

For Camel 3.1.0 we can release with a known issue and then see if we can find a fix for 3.1.1.
gnodet:1581663661:2020-02-14T15:01:01.849+0000:1581663661:2020-02-14T15:01:01.849+0000:The problem is caused by {{camel-xml-jaxb}} having an import package on {{javax.xml.bind}} with a range {{[2.3.0,3.00)}}, while Karaf system bundle exports the package in version 2.2.
To work around the problem, the camel features install its own jaxb-api bundle, but it does not work as the {{JAXBContext}} interface used by the internal jaxb implementation from the JDK does not use the one that is wired to camel (hence the {{ClassCastException}}).
"
0,CAMEL-14560,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-02-13 15:24:53+00:00,2020-02-13 15:26:23+00:00,No Desc,
0,CAMEL-14559,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-02-13 11:40:06+00:00,2020-02-13 12:56:16+00:00,No Desc,
0,CAMEL-14558,Task,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-02-13 11:35:39+00:00,2020-02-13 13:36:43+00:00,No Desc,
0,CAMEL-14557,Improvement,Major,3.1.0,3.x,"
None
",Closed,Fixed,3.x,Ramu,Omar Al-Safi,0,3,2020-02-13 09:56:05+00:00,2021-01-04 13:30:35+00:00,"As we have moved the main camel examples to the camel-examples per CAMEL-13830, it will make sense to move the other examples for the other camel projects and centerlize this under one repo, these examples are:



camel-spring-boot
camel-k
camel-quarkus
camel-kafka-connector



This includes as well the associated maven plugin MOJO to generate the readme files for these examples","davsclaus:1581559392:2020-02-13T10:03:12.143+0000:1581559392:2020-02-13T10:03:12.143+0000:At first I think we should only move camel and camel-spring-boot, they are the classic examples.
Camel K should be at Camel K as its a bit different (need k8s et all).

omarsmak:1581559973:2020-02-13T10:12:53.009+0000:1581559973:2020-02-13T10:12:53.009+0000:Then I guess we can move the rest except camel-k? 
ramu11:1586115764:2020-04-06T03:42:44.384+0000:1586115764:2020-04-06T03:42:44.384+0000:looking
davsclaus:1586215130:2020-04-07T07:18:50.463+0000:1586215130:2020-04-07T07:18:50.463+0000:We need to organize the examples better first. There are about 200 examples and its a bit hard to navigate them when they are all in the same folder.

Lets open a discussion on Camel dev first.
omarsmak:1609738235:2021-01-04T13:30:35.713+0000:1609738235:2021-01-04T13:30:35.713+0000:Examples have been separated into different repos"
0,CAMEL-14556,Sub-task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:07:05+00:00,2020-02-24 08:01:16+00:00,No Desc,
0,CAMEL-14555,Sub-task,Major,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:06:41+00:00,2020-03-06 10:25:48+00:00,No Desc,
0,CAMEL-14554,Sub-task,Major,None,3.2.0,"
None
",Resolved,Won't Fix,3.2.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:06:00+00:00,2020-02-27 10:30:20+00:00,No Desc,acosentino:1582770620:2020-02-27T10:30:20.944+0000:1582770620:2020-02-27T10:30:20.944+0000:Too much code changes needed. If someone want to port this component is welcome.
0,CAMEL-14553,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:05:27+00:00,2020-02-17 13:33:23+00:00,No Desc,
0,CAMEL-14552,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:05:04+00:00,2020-02-14 15:26:13+00:00,No Desc,
0,CAMEL-14551,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:04:25+00:00,2020-02-14 11:41:59+00:00,No Desc,
0,CAMEL-14550,Sub-task,Major,None,3.1.0,"
None
",Resolved,Won't Fix,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:03:59+00:00,2020-02-13 08:29:36+00:00,No Desc,"acosentino:1581553776:2020-02-13T08:29:36.947+0000:1581553776:2020-02-13T08:29:36.947+0000:From AWS SDK v2 changelog

_Amazon SimpleDB module is removed from the SDK 2.0. To use SimpleDB, use SDK 1.11.x. Note that you can run SDK 1.11 and 2.0 in the same application._

[https://github.com/aws/aws-sdk-java-v2/blob/master/CHANGELOG.md]"
0,CAMEL-14549,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-13 07:03:06+00:00,2020-02-13 07:38:04+00:00,"We already the verify phase in the main build, these tests are slow and they don't add too much, also they should be maintained.",
0,CAMEL-14548,Bug,Major,3.0.1,None,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Christoph Giera,0,2,2020-02-13 06:58:19+00:00,2020-02-13 17:38:01+00:00,"Configuring the resilience4j component with spring boot like in the example https://github.com/apache/camel-spring-boot/blob/master/examples/camel-example-spring-boot-resilience4j/client/src/main/java/sample/camel/ClientRoute.java doesn't work correctly.




.circuitBreaker() 
// see application.properties how resilience is configured 
.to(""http://localhost:9090/service1"")




 


The configuration in application.properties is not taken into account.",davsclaus:1581578753:2020-02-13T15:25:53.032+0000:1581578753:2020-02-13T15:25:53.032+0000:Yeah reproduced on master. Works for the camel-main client but not for SB
0,CAMEL-14547,Test,Major,None,3.1.0,"
None
",Resolved,Won't Fix,3.1.0,Andrea Cosentino,Claus Ibsen,0,2,2020-02-13 05:38:58+00:00,2020-02-13 07:54:21+00:00,"They pass on JDK11 but fail on JDK8


tests/camel-itest-karaf


[ERROR] Tests run: 263, Failures: 0, Errors: 242, Skipped: 4",acosentino:1581551651:2020-02-13T07:54:11.894+0000:1581551651:2020-02-13T07:54:11.894+0000:camel-itest-karaf have been removed.
0,CAMEL-14546,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-13 05:36:05+00:00,2020-02-13 12:55:53+00:00,They are different and have different options and then its better to have different component/endpoints so the configurer classes are also generated correctly.,"davsclaus:1581562688:2020-02-13T10:58:08.961+0000:1581562688:2020-02-13T10:58:08.961+0000:Its a complex component with a lot of ""less maintainable code"" :(
davsclaus:1581565235:2020-02-13T11:40:35.355+0000:1581569753:2020-02-13T12:55:53.274+0000:TODO: Regen camel-spring-boot starter for this component *DONE*"
0,CAMEL-14545,Improvement,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Peter Palaga,0,2,2020-02-12 20:31:58+00:00,2020-02-14 07:26:32+00:00,"Camel Quarkus is about to expose some configuration options related to Camel Catalog.
Some voices in https://github.com/apache/camel-quarkus/pull/704#issuecomment-585137226 ask for having a page an the Apache Camel website that would explain what is the Camel Catalog and what is it good for so the Camel Quarkus can refer to that page rather than having that info inline.","davsclaus:1581636153:2020-02-14T07:22:33.290+0000:1581636153:2020-02-14T07:22:33.290+0000:There will be a camel-catalog page you can find at website when its rebuild
ppalaga:1581636392:2020-02-14T07:26:32.445+0000:1581636392:2020-02-14T07:26:32.445+0000:Perfect, thanks!"
0,CAMEL-14544,Improvement,Major,None,3.2.0,"

help-wanted

",Resolved,Fixed,3.2.0,Unassigned,Andrea Cosentino,0,1,2020-02-12 16:42:33+00:00,2020-03-12 17:13:57+00:00,No Desc,
0,CAMEL-14543,Task,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-02-12 16:28:03+00:00,2020-02-13 13:36:32+00:00,No Desc,
0,CAMEL-14542,Task,Major,None,3.6.0,"
None
",Resolved,Fixed,3.6.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-12 15:47:02+00:00,2020-09-29 09:25:03+00:00,There are potentially some improvements we can for simple language.,"davsclaus:1582003957:2020-02-18T13:32:37.721+0000:1582003957:2020-02-18T13:32:37.721+0000:Did a little optimizations but there are likely more potential
davsclaus:1600559363:2020-09-20T07:49:23.114+0000:1600559363:2020-09-20T07:49:23.114+0000:Maybe we can do some optimizations around operators where one type would be a static expression ( ${header.foo} == true) where true would be the static part. This can lead to knowing some type matching optimizations so that the dynamic part header.foo should be converted to boolean
http://camel.465427.n5.nabble.com/Unclear-reasons-for-conversion-rules-when-using-Simple-language-td5883835.html


davsclaus:1601290469:2020-09-28T18:54:29.446+0000:1601290469:2020-09-28T18:54:29.446+0000:Optimize simple to have special token for boolean true|false value which can avoid some type conversions in simple prediates. *DONE*
davsclaus:1601295429:2020-09-28T20:17:09.009+0000:1601333398:2020-09-29T06:49:58.914+0000:Optimize simple for numeric values which we can avoid some type conversions, and also make the binary operator more natural when working with numeric types vs string texts *DONE*
davsclaus:1601333437:2020-09-29T06:50:37.715+0000:1601340018:2020-09-29T08:40:18.481+0000:Optimize when comparing numeric values to favour using existing type as-is, eg if right side is integer, instead of using long comparision first. *DONE*"
0,CAMEL-14541,Task,Major,None,,"
None
",Closed,Won't Fix,None,Guillaume Nodet,Claus Ibsen,0,2,2020-02-12 15:45:53+00:00,2020-05-05 12:35:01+00:00,It would be good to see if we can move the refiers into its own JAR so they over time become less entangled into camel-base / camel-core-engine.,"gnodet:1588653301:2020-05-05T12:35:01.349+0000:1588653301:2020-05-05T12:35:01.349+0000:The camel-core-engine now mostly contains the model + reifiers + builders.

The 3 packages are really difficult to split but the new lightweight context provides a good alternative to get rid of most of those classes at runtime when compiling to native."
0,CAMEL-14540,Improvement,Major,None,3.x,"
None
",Closed,Fixed,3.x,Andrea Tarocchi,Andrea Tarocchi,1,4,2020-02-12 15:25:44+00:00,2020-02-13 23:56:27+00:00,"Since recently I have been playing with our sourcheck to hook it in as a GitHub action at each PR, I have been fixing some sourcecheck findings leftover from previous unchecked commits.


Most of the stuff makes sense but this one:




// Some comments here
        <module name=""Indentation"">
            <property name=""lineWrappingIndentation"" value=""0""/>
            <property name=""caseIndent"" value=""0""/>
        </module>




this impose that switch/case blocks should be in the form of:




switch(...) {
case:
    ...
case:
    ...
case:
    ...
default:
}




i.e. switch and case keywords MUST have the same indentation. I have searched a little bit and it seems this is not widely used as a code style, the tendency is to have the case indented.


Since there are 2053 occurrences of switch/case blocks, before attempting to fix this I would like a general agreement on this.","valdar:1581492433:2020-02-12T15:27:13.899+0000:1581492433:2020-02-12T15:27:13.899+0000:[~davsclaus] [~acosentino] WDYT?
davsclaus:1581492869:2020-02-12T15:34:29.025+0000:1581492869:2020-02-12T15:34:29.025+0000:Yeah its a odd rule. IDEA also reformat with them indented 4 spaces.

Most of them are sourece code generated so you cannot do a search/replace etc. You need to fix this also in the maven plugin that generates the code in src/generated/java.
acosentino:1581493036:2020-02-12T15:37:16.295+0000:1581493036:2020-02-12T15:37:16.295+0000:+1
valdar:1581493064:2020-02-12T15:37:44.636+0000:1581493064:2020-02-12T15:37:44.636+0000:The generated stuff under {{*src/generated}} is generally excluded from sourcecheck:

{code:xml}
<suppressions>
    <suppress checks="".*""
              files="".+[\\\/]generated[\\\/].+\.java""
              />
{code}

I will take in account generated stuff outside this path.
omarsmak:1581494017:2020-02-12T15:53:37.329+0000:1581494017:2020-02-12T15:53:37.329+0000:I always wondered why do we have it but never got to question it, thank you [~valdar] :). 

+1 

 "
0,CAMEL-14539,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-12 10:44:30+00:00,2020-02-14 09:33:34+00:00,"Many of the adoc files dont have marker files which we need to add via the tooling


WARNING] Option camel.component.docker.configuration.parameters has no description
[WARNING] Cannot find markers in file components-starter/camel-docker-starter/src/main/docs/docker-starter.adoc
[WARNING] Add the following markers
[WARNING] 	// spring-boot-auto-configure options: START
[WARNING] 	// spring-boot-auto-configure options: END",
0,CAMEL-14538,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-12 08:58:35+00:00,2020-02-12 09:50:13+00:00,"Camel has now been configured to not package scan for custom `@Converter` classes on startup.
Type converters are now loaded and registered in faster way via source code generated loader classes
by having `@Converter(loader = true)` specified.",
0,CAMEL-14537,Wish,Trivial,None,None,"
None
",Resolved,Information Provided,None,Unassigned,Den Doeson,0,2,2020-02-12 07:52:54+00:00,2020-02-28 10:48:34+00:00,"If it is OK, I will post just link here. If not, can duplicate question.


https://stackoverflow.com/questions/60171261/get-http-body-in-apache-camel-not-working-if-content-type-not-presented",zregvart:1582858093:2020-02-28T10:48:13.683+0000:1582858093:2020-02-28T10:48:13.683+0000:Answered on SO
0,CAMEL-14536,Bug,Major,2.23.1,,"
None
",Resolved,Invalid,None,Unassigned,Padma Priya Kowlwar,0,2,2020-02-11 16:09:21+00:00,2020-02-11 16:12:48+00:00,"Hello Team,


We are trying to connect to a https endpoint from our camel route using http4 component which has an underscore in the hostname. The endpoint looks like https://x_y.abc.zu.dw:1243/path  and we receive an error message  ""Invalid uri: https:/path?chunked=true&httpClient.connectTimeout=XXXX&httpClient.socketTimeout=XXX&throwExceptionOnFailure=false&bridgeEndpoint=true If you are forwarding/bridging http endpoints, then enable the bridgeEndpoint option on the endpoint: https:/path?chunked=true&httpClient.connectTimeout=XXXX&httpClient.socketTimeout=XXX&throwExceptionOnFailure=false&bridgeEndpoint=true.


Usually it is against the valid host name rules but is there any way to fix in the http4 component to avoid the issue as the system can't change their hostname currently.


I saw a similar kind of issue in https://issues.apache.org/jira/browse/CAMEL-4769.


If there is any possibility to fix this issue in camel http4 component, it will help us a lot.


 


Thanks,


Priya","acosentino:1581408761:2020-02-11T16:12:41.669+0000:1581408761:2020-02-11T16:12:41.669+0000:Please ask on the users mailing list first. This sounds more like a question for community than an issue, that hostname is invalid."
0,CAMEL-14535,Improvement,Major,None,,"
None
",Closed,Fixed,None,Andrea Tarocchi,Andrea Tarocchi,0,1,2020-02-11 15:37:42+00:00,2020-02-11 22:54:49+00:00,Would be nice to have at least the source check running for each PR possibly as a GitHub action as is done in https://github.com/apache/camel-kafka-connector/blob/master/.github/workflows/master-pr-build.yml#L36,
0,CAMEL-14534,Bug,Major,None,None,"
None
",Closed,Fixed,3.1.0,Andrea Tarocchi,Andrea Tarocchi,0,1,2020-02-11 14:08:47+00:00,2020-02-11 16:01:37+00:00,"In some cases `org.apache.camel.PropertyBindingException` logs a wrong message see:




org.apache.camel.PropertyBindingException: Error binding property (camel.component.sjms2..connectionfactory.brokerurl=tcp://localhost:61616) with name: connectionfactory.brokerurl on bean: org.apache.camel.component.sjms2.Sjms2Component@601eed8b with value: tcp://localhost:61616
	at org.apache.camel.main.BaseMainSupport.setPropertiesOnTarget(BaseMainSupport.java:175) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.BaseMainSupport.autoConfigurationFromProperties(BaseMainSupport.java:929) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.BaseMainSupport.postProcessCamelContext(BaseMainSupport.java:545) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.BaseMainSupport.initCamelContext(BaseMainSupport.java:422) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.main.Main.doInit(Main.java:108) ~[camel-main-3.0.1.jar:3.0.1]
	at org.apache.camel.support.service.ServiceSupport.init(ServiceSupport.java:80) ~[camel-api-3.0.1.jar:3.0.1]
	at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:108) ~[camel-api-3.0.1.jar:3.0.1]
	at org.apache.camel.main.MainSupport.run(MainSupport.java:77) ~[camel-main-3.0.1.jar:3.0.1]




specifically the double dots .. in camel.component.sjms2..connectionfactory.brokerurl that can be very confusing.",
0,CAMEL-14533,Bug,Minor,"2.22.2, 2.24.2, 3.0.1","2.25.2, 3.4.3, 3.5.0","
None
",Resolved,Fixed,"2.25.2, 3.4.3, 3.5.0",Claus Ibsen,Claus Skou Nielsen,0,2,2020-02-11 12:20:52+00:00,2020-08-03 08:00:02+00:00,"If you both have fileExist=Append and tempPrefix=<something> options on a sftp to-endpoint, the de facto behaviour of the route is as if it was configured with fileExist=Override.


When you think about how fileExist and tempPrefix works, this bug actually makes sense. The temporary prefix makes it so that a ""new"" file is written every time, and therefore fileExist=Append is just working like it does when there isn't an existing file to append to.


I think there are a couple of possible solutions to this problem:



Document this behaviour in the camel documentation, and let the user be responsible for knowing that these two options are incompatible
Throw an exception when building the route if these two mutually exclusive options are used on the same route
Make fileExist=Append and tempPrefix=<something> be compatible, by making the 'mv' operation after writing the temporary file merge the two files, instead of replacing it
Some other brilliant solution that the camel maintainers will see, that has escaped me



Recreate the issue


Define and start up the following route:




from(""timer://loltimer?delay=5000&period=5000"")
 .setHeader(""CamelFileName"", constant(""foo.txt""))
 .setBody(constant(""Davs""))
 .to(""sftp://mysftpserver:22/fileappendtest?username=myusername&password=mypassword&fileExist=Append&tempPrefix=.uploading"");



Then you can observe the folder on the sftp-server, and see that the file size never increases, but the files Last-Modified timestamp gets renewed every five seconds.


If you remove the ""tempPrefix=.uploading"" option from the sftp uri it works like it should, and the file size increases every 5 seconds.","davsclaus:1581398009:2020-02-11T13:13:29.897+0000:1581398009:2020-02-11T13:13:29.897+0000:You are welcome to work on a PR with the option to throw an exception.
kalusn:1581399986:2020-02-11T13:46:26.990+0000:1581399986:2020-02-11T13:46:26.990+0000:Ok, I'll give it a go.
davsclaus:1596411749:2020-08-03T07:42:29.491+0000:1596411749:2020-08-03T07:42:29.491+0000:The file component throws an exception so lets do the same for ftp"
0,CAMEL-14532,Task,Major,None,"3.1.0, 3.0.2, 2.25.1","
None
",Resolved,Fixed,"3.1.0, 3.0.2, 2.25.1",Colm O hEigeartaigh,Claus Ibsen,0,3,2020-02-11 09:01:28+00:00,2020-02-19 14:29:47+00:00,"There is an issue with this library that can cause endless recursion. A PR has been submitted upstream, however we can work around it in Camel until (if) it is applied.","davsclaus:1581383155:2020-02-11T09:05:55.029+0000:1581383155:2020-02-11T09:05:55.029+0000:And for 3.1 onwards we need to add camel-jacksonyaml to have yaml support and tie that into yaml dataformat.
acosentino:1581995366:2020-02-18T11:09:26.779+0000:1581995366:2020-02-18T11:09:26.779+0000:The release cut for 3.1.0 is under work, so I don't think this will go in 3.1.0
coheigea:1581995592:2020-02-18T11:13:12.313+0000:1581995592:2020-02-18T11:13:12.313+0000:I am literally about to merge it - is there still time?
acosentino:1581995688:2020-02-18T11:14:48.404+0000:1581995688:2020-02-18T11:14:48.404+0000:There some troubles with camel-restdsl-openapi, so you should be ok.
coheigea:1582000484:2020-02-18T12:34:44.074+0000:1582000484:2020-02-18T12:34:44.074+0000:[~acosentino] - It's merged to master now. Just a question though - I added two configuration options to [https://github.com/apache/camel/blob/ffda93ae1dd43d18a88b498c4c073f8f0f58b1be/components/camel-snakeyaml/src/main/java/org/apache/camel/component/snakeyaml/SnakeYAMLDataFormat.java]

However I don't see them added to the adoc after I run mvn clean install. What am I missing here?
acosentino:1582000568:2020-02-18T12:36:08.633+0000:1582000568:2020-02-18T12:36:08.633+0000:Probably you need to rebuild the whole Camel project. There were big changes.
davsclaus:1582000677:2020-02-18T12:37:57.071+0000:1582000677:2020-02-18T12:37:57.071+0000:For data formats you need to add them to the model in core/camel-core-engine in YAMLDataFormat
coheigea:1582001352:2020-02-18T12:49:12.942+0000:1582001352:2020-02-18T12:49:12.942+0000:[~davsclaus] Thanks, that's done.
acosentino:1582001844:2020-02-18T12:57:24.712+0000:1582001844:2020-02-18T12:57:24.712+0000:xml-io module is now failing.
coheigea:1582002530:2020-02-18T13:08:50.248+0000:1582002530:2020-02-18T13:08:50.248+0000:Are you sure it's related to my merges? I don't see anything obvious that could have caused it
coheigea:1582002669:2020-02-18T13:11:09.243+0000:1582002669:2020-02-18T13:11:09.243+0000:I see there are some sourcecheck errors - I'll fix them.
acosentino:1582003094:2020-02-18T13:18:14.529+0000:1582003094:2020-02-18T13:18:14.529+0000:Yes, it's related to that. I'm running a full build, probably you did not. In the dataformat in xml, the javatype can be whatever you want but the concrete type in the class must be a String. If you declare it as int or boolean, it will break the xml-io module with unsupported operation exception.

Dataformats are really tricky, so once you add an option, I always suggest to run a full build.

I usually suggest to run a full build anyway, "
0,CAMEL-14531,New Feature,Major,None,None,"

gsoc2020
help-wanted
metrics
tracing

",Resolved,Fixed,3.x,Unassigned,Luca Burgazzoli,0,3,2020-02-11 08:26:37+00:00,2022-09-02 14:44:35+00:00,OpenTelemetry is becoming more and more relevant and would be nice to support it in camel,"amfirnas22:1585526594:2020-03-30T08:03:14.979+0000:1585526594:2020-03-30T08:03:14.979+0000:hi,

My name is Firnas, Msc student from Colombo, Sri Lanka. I am new to this Apache open source development. But I am confident that I can develop skills on this when I spend more time in future. I would like to work on this task for gsoc2020. I have just started looking in to this. can someone guide me to write proposal ?

thanks.
davsclaus:1662101075:2022-09-02T14:44:35.705+0000:1662101075:2022-09-02T14:44:35.705+0000:There is a camel-opentelemtry"
0,CAMEL-14530,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-11 04:27:08+00:00,2020-02-11 04:59:52+00:00,"We should just keep the adoc files as its then a straight 1:1 copy and not convert to html which are not in use, and makes build slower. And also causes CI issues with the build currently.",
0,CAMEL-14529,Bug,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Zoran Regvart,0,2,2020-02-10 13:34:13+00:00,2021-03-22 18:07:53+00:00,"The org.apache.camel.processor.Pipeline eagerly computes the size of the pipeline and converts the Processors to AsyncProcessors in construction. It also allows access to the processors field via List<Processor> getProcessors method, through which the list of processors in a pipeline can be mutated without recalculating the size or converting any added Processors to AsyncProcessors, leading to inconsistency.


e.g. if I have code like:




Pipeline pipeline = Pipeline.newInstance(context, processor1, processor2);
pipeline.getProcessors().add(processor3);




processor3 will never be executed.


I see two possible solutions:



disallow processors list mutation, or
don't eagerly compute size and convert Processors to AsyncProcessors on demand","davsclaus:1581313263:2020-02-10T13:41:03.248+0000:1581313263:2020-02-10T13:41:03.248+0000:getProcessors is intended for read-only - not for mutation. so its #1 and its mostly used for testing. And its use can be replaced with org.apache.camel.Navigate, so we can remove the method and use Navigate instead. 
davsclaus:1581316358:2020-02-10T14:32:38.050+0000:1581316358:2020-02-10T14:32:38.050+0000:Use next instead as documented in the upgrade guide
zregvart:1581318243:2020-02-10T15:04:03.935+0000:1581318243:2020-02-10T15:04:03.935+0000:Thanks [~davsclaus]!"
0,CAMEL-14528,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-10 13:16:42+00:00,2020-02-10 15:51:09+00:00,"It would be good to move all those camel-spring-boot into a core folder so they are not cluttered in the root folder. And move the test into itests, and the catalog provider into catalog",
0,CAMEL-14527,Bug,Major,3.0.1,,"
None
",Closed,Not A Bug,None,Jiri Ondrusek,Gerald Kallas,0,4,2020-02-10 00:05:25+00:00,2020-02-12 21:16:22+00:00,"After several research I did create the following Blueprint DSL route that still fails with a TLS handshake failure.




<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

 <sslContextParameters id=""sslContextParameters"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <secureSocketProtocolsFilter>
     <include>TLSv1.2</include>
     <include>TLSv1.1</include>
   </secureSocketProtocolsFilter>
   <cipherSuitesFilter>
     <include>.*</include>
     <exclude/>
   </cipherSuitesFilter>
   <keyManagers keyPassword=""xxxxx"">
     <keyStore resource=""etc/truststore.jks"" password=""xxxxx""/>
   </keyManagers>
   <trustManagers>
     <keyStore resource=""etc/keystore.p12"" password=""xxxxx""/>
   </trustManagers>
 </sslContextParameters>

 <camelContext id=""WEBISP001"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <route id=""WEBISP001"">
     <from uri=""jetty:https://0.0.0.0:8444/hello?sslContextParameters=sslContextParameters""  />
     <log message=""hello request body: ${in.body}"" />
   </route>
 </camelContext>
</blueprint>




This is the deployment log




2020-02-08T20:31:49,784 | INFO  | fileinstall-/opt/apache-karaf-4.2.7/deploy | BlueprintContainerImpl           | 80 - org.apache.aries.blueprint.core - 1.10.2 | Blueprint bundle WEBISP001.xml/0.0.0 has been started
2020-02-08T20:31:49,786 | INFO  | Blueprint Event Dispatcher: 1 | BlueprintCamelContext            | 88 - org.apache.camel.camel-api - 3.0.1 | Attempting to start CamelContext: WEBISP001
2020-02-08T20:31:49,789 | INFO  | Blueprint Event Dispatcher: 1 | BlueprintCamelContext            | 88 - org.apache.camel.camel-api - 3.0.1 | Apache Camel 3.0.1 (CamelContext: WEBISP001) is starting
2020-02-08T20:31:49,791 | INFO  | Blueprint Event Dispatcher: 1 | JmxManagementStrategy            | 88 - org.apache.camel.camel-api - 3.0.1 | JMX is enabled
2020-02-08T20:31:49,877 | INFO  | Blueprint Event Dispatcher: 1 | HttpComponent                    | 88 - org.apache.camel.camel-api - 3.0.1 | Created ClientConnectionManager org.apache.http.impl.conn.PoolingHttpClientConnectionManager@12fc7e57
2020-02-08T20:31:49,881 | INFO  | Blueprint Event Dispatcher: 1 | BlueprintCamelContext            | 88 - org.apache.camel.camel-api - 3.0.1 | StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2020-02-08T20:31:49,896 | INFO  | Blueprint Event Dispatcher: 1 | SSLContextParameters             | 88 - org.apache.camel.camel-api - 3.0.1 | Available providers: SUN version 1.8.
2020-02-08T20:31:49,906 | INFO  | Blueprint Event Dispatcher: 1 | JettyHttpComponent9              | 112 - org.apache.camel.camel-jetty - 3.0.1 | Connector on port: 8444 is using includeCipherSuites: [.*] excludeCipherSuites: [] includeProtocols: [TLSv1.3, TLSv1.2, TLSv1.1] excludeProtocols: [SSL, SSLv2, SSLv2Hello, SSLv3]
2020-02-08T20:31:49,907 | INFO  | Blueprint Event Dispatcher: 1 | Server                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | jetty-9.4.20.v20190813; built: 2019-08-13T21:28:18.144Z; git: 84700530e645e812b336747464d6fbbf370c9a20; jvm 1.8.0_242-b08
2020-02-08T20:31:49,908 | INFO  | Blueprint Event Dispatcher: 1 | ContextHandler                   | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Started o.e.j.s.ServletContextHandler@4d63dc0b{/,null,AVAILABLE}
2020-02-08T20:31:49,915 | INFO  | Blueprint Event Dispatcher: 1 | SslContextFactory                | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Protocol TLSv1.3 not supported in [SSLv2Hello, SSLv3, TLSv1, TLSv1.1, TLSv1.2]
2020-02-08T20:31:49,915 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_256_CBC_SHA256 enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,916 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,916 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,917 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,917 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,917 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,918 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDH_RSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,918 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_DHE_RSA_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,919 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_DHE_DSS_WITH_AES_256_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,919 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_128_CBC_SHA256 enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,921 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,922 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,923 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,924 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,925 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,926 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_ECDH_RSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,927 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_DHE_RSA_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,927 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_DHE_DSS_WITH_AES_128_CBC_SHA enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,928 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_256_GCM_SHA384 enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,929 | WARN  | Blueprint Event Dispatcher: 1 | config                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Weak cipher suite TLS_RSA_WITH_AES_128_GCM_SHA256 enabled for SslContextFactory@6234ffd1[provider=null,keyStore=null,trustStore=null]
2020-02-08T20:31:49,930 | INFO  | Blueprint Event Dispatcher: 1 | AbstractConnector                | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Started ServerConnector@11e4bb7f{ssl,[ssl, http/1.1]}{0.0.0.0:8444}
2020-02-08T20:31:49,931 | INFO  | Blueprint Event Dispatcher: 1 | Server                           | 217 - org.eclipse.jetty.util - 9.4.20.v20190813 | Started @1786570ms
2020-02-08T20:31:49,932 | INFO  | Blueprint Event Dispatcher: 1 | BlueprintCamelContext            | 88 - org.apache.camel.camel-api - 3.0.1 | Route: WEBISP001 started and consuming from: jetty:https://0.0.0.0:8444/hello
2020-02-08T20:31:49,933 | INFO  | Blueprint Event Dispatcher: 1 | BlueprintCamelContext            | 88 - org.apache.camel.camel-api - 3.0.1 | Total 1 routes, of which 1 are started
2020-02-08T20:31:49,933 | INFO  | Blueprint Event Dispatcher: 1 | BlueprintCamelContext            | 88 - org.apache.camel.camel-api - 3.0.1 | Apache Camel 3.0.1 (CamelContext: WEBISP001) started in 0.145 seconds
2020-02-08T20:31:49,987 | INFO  | fileinstall-/opt/apache-karaf-4.2.7/deploy | fileinstall                      | 10 - org.apache.felix.fileinstall - 3.6.4 | Started bundle: blueprint:file:/opt/apache-karaf-4.2.7/deploy/WEBISP001.xml




The request to the endpoint still fails with




curl -vvv --insecure --location --request POST 'https://host:8444/hello'  --data-raw 'Hello World!'
Note: Unnecessary use of -X or --request, POST is already inferred.
*   Trying 10.0.0.147...
* TCP_NODELAY set
* Connected to host (10.0.0.147) port 8444 (#0)
* ALPN, offering h2
* ALPN, offering http/1.1
* successfully set certificate verify locations:
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
  CApath: none
* TLSv1.3 (OUT), TLS handshake, Client hello (1):
* TLSv1.3 (IN), TLS alert, handshake failure (552):
* error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure
* Closing connection 0
curl: (35) error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure","jondruse:1581405440:2020-02-11T15:17:20.769+0000:1581405457:2020-02-11T15:17:37.589+0000:[~catshout]
I've tested your blueprint on karaf 4.2.7

I've used selfsigned certificate (and also I've removed truststore from blueprint) and result was successful:
{code}
Note: Unnecessary use of -X or --request, POST is already inferred.
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 8444 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
* skipping SSL peer certificate verification
* ALPN/NPN, server did not agree to a protocol
* SSL connection using TLS_DHE_DSS_WITH_AES_256_CBC_SHA
* Server certificate:
* 	subject: CN=localhost,OU=a,O=b,L=c,ST=d,C=CR
* 	start date: Apr 11 13:57:32 2019 GMT
* 	expire date: Jun 25 13:57:32 2037 GMT
* 	common name: localhost
* 	issuer: CN=localhost,OU=a,O=b,L=c,ST=d,C=CR
> POST /hello HTTP/1.1
> Host: localhost:8444
> User-Agent: curl/7.53.1
> Accept: */*
> Content-Length: 11
> Content-Type: application/x-www-form-urlencoded
> 
* upload completely sent off: 11 out of 11 bytes
< HTTP/1.1 200 OK
< Content-Type: application/x-www-form-urlencoded
< Accept: */*
< Hello: World
< User-Agent: curl/7.53.1
< Content-Length: 0
< Server: Jetty(9.4.20.v20190813)
< 
* Connection #0 to host localhost left intact
{code}
Log from karaf:
{code}
2020-02-11T16:08:31,444 | INFO  | qtp281376449-126 | WEBISP001                        | 62 - org.apache.camel.camel-core-engine - 3.0.0 | hello request body: Hello=World
{code}


Then I've created signed certificate (using modified script from https://github.com/apache/camel/blob/master/components/camel-milo/src/test/resources/run.sh), I've aldo add cacert into parameters of curl. 
Result is also successful:
{code}
curl -vvv --location --request POST 'https://localhost:8444/hello'  --data-raw 'Hello=World' --cacert src/main/resources/cacert.pem
Note: Unnecessary use of -X or --request, POST is already inferred.
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 8444 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
*   CAfile: src/main/resources/cacert.pem
  CApath: none
* ALPN/NPN, server did not agree to a protocol
* SSL connection using TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256
* Server certificate:
* 	subject: CN=localhost,L=RH,ST=RH,C=RH
* 	start date: Feb 11 15:03:10 2020 GMT
* 	expire date: Nov 07 15:03:10 2022 GMT
* 	common name: localhost
* 	issuer: CN=localhost,O=Test CA,L=RH,ST=RH,C=RH
> POST /hello HTTP/1.1
> Host: localhost:8444
> User-Agent: curl/7.53.1
> Accept: */*
> Content-Length: 11
> Content-Type: application/x-www-form-urlencoded
> 
* upload completely sent off: 11 out of 11 bytes
< HTTP/1.1 200 OK
< Content-Type: application/x-www-form-urlencoded
< Accept: */*
< Hello: World
< User-Agent: curl/7.53.1
< Content-Length: 0
< Server: Jetty(9.4.20.v20190813)
< 
* Connection #0 to host localhost left intact
{code}
Log from karaf:
{code}
2020-02-11T16:09:39,444 | INFO  | qtp281376449-122 | WEBISP001                        | 62 - org.apache.camel.camel-core-engine - 3.0.0 | hello request body: Hello=World
{code}

I could miss some crutial configuration option, which makes my case work. So could you please point me to missing peace? (output from your curl seems almost like there is no --insecure option, but it isn't true)
catshout:1581415419:2020-02-11T18:03:39.816+0000:1581415437:2020-02-11T18:03:57.349+0000:Tx [~jondruse] for validate and re-test. You pointed me out to an important detail while removing the truststore from blueprint.

I've confused both, keystore and truststore, in my blueprint file. Often checked all but overseen this detail every time. The sample is working now, the issue can be closed.

One question so far, can I define the sslContextParameters in a separate blueprint file an reference to it in the other ones that have HTTPS jetty endpoints? Or, much better, in a config file in etc folder as common parameters for camel-jetty?

Many thanks for your effort
Gerald

 
jondruse:1581464852:2020-02-12T07:47:32.102+0000:1581464852:2020-02-12T07:47:32.102+0000:[~catshout] 
If I understand your question correctly. you can define 1 sslContextParameters bean in one blueprint and use it from other blueprints in the same bundle.
Does it answer your question?
catshout:1581466649:2020-02-12T08:17:29.278+0000:1581476879:2020-02-12T11:07:59.705+0000:Tx [~jondruse]. Yes, you're right. I tried this out with 2 blueprint files like

 
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

	<sslContextParameters id=""sslContextParameters"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<keyManagers keyPassword=""xxxxx"">
			<keyStore resource=""etc/keystore.p12"" password=""xxxxx""/>
		</keyManagers>
	</sslContextParameters>
</blueprint>
{code}
and

 
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

	<camelContext id=""WEBISP001"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<route id=""WEBISP001"">
			<from uri=""jetty:https://0.0.0.0:8444/hello?sslContextParameters=sslContextParameters"" />
			<log message=""hello request body: ${in.body}"" />
		</route>
	</camelContext>
</blueprint>
{code}
It gives an error
{code:java}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jetty://https://0.0.0.0:8444/hello?sslContextParameters=sslContextParameters due to: No bean could be found in the registry for: sslContextParameters of type: org.apache.camel.support.jsse.SSLContextParameters
{code}
Do I still miss something?

Tx
 Gerald
acosentino:1581466909:2020-02-12T08:21:49.492+0000:1581466909:2020-02-12T08:21:49.492+0000:You need to refer the bean with 
sslContextParameters=#sslContextParameters
catshout:1581468618:2020-02-12T08:50:18.037+0000:1581468618:2020-02-12T08:50:18.037+0000:[~acosentino] I tried this out but it doesn't work either. Same error ..
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

	<camelContext id=""WEBISP001"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<route id=""WEBISP001"">
			<from uri=""jetty:https://0.0.0.0:8444/hello?sslContextParameters=#sslContextParameters"" />
			<log message=""hello request body: ${in.body}"" />
		</route>
	</camelContext></blueprint>
{code}
jondruse:1581473773:2020-02-12T10:16:13.071+0000:1581473773:2020-02-12T10:16:13.071+0000:[~catshout]
Following 2 blueprints in one bundle works for me:

{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

 <sslContextParameters id=""sslContextParameters"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <secureSocketProtocolsFilter>
     <include>TLSv1.2</include>
     <include>TLSv1.1</include>
   </secureSocketProtocolsFilter>
   <cipherSuitesFilter>
     <include>.*</include>
     <exclude/>
   </cipherSuitesFilter>
   <keyManagers keyPassword=""test"">
     <keyStore resource=""keystore2"" password=""testtest""/>
   </keyManagers>
      <trustManagers>
     <keyStore resource=""server.truststore"" password=""testtest""/>
   </trustManagers>
 </sslContextParameters>

 <camelContext id=""WEBISP001"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <route id=""WEBISP001"">
     <from uri=""jetty:https://0.0.0.0:8444/hello?sslContextParameters=#sslContextParameters""  />
     <log message=""hello request body: ${in.body}"" />
   </route>
 </camelContext>
 
 <service ref=""sslContextParameters"" />
{code}

and 

{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

 <camelContext id=""WEBISP002"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <route id=""WEBISP001"">
     <from uri=""jetty:https://0.0.0.0:8444/hello2?sslContextParameters=#sslContextParameters""  />
     <log message=""hello request body: ${in.body}"" />
   </route>
 </camelContext>
</blueprint>
{code}

 

jondruse:1581474376:2020-02-12T10:26:16.673+0000:1581474376:2020-02-12T10:26:16.673+0000:[~catshout]

Please ignore line  <service ref=""sslContextParameters"" /> from first route. It doesn't belong there.
catshout:1581476078:2020-02-12T10:54:38.436+0000:1581476078:2020-02-12T10:54:38.436+0000:[~jondruse] I need the configuration of the sslContextParametersin different bundles / files as the blueprint XML files will be deployed independently and so far it will be created separate bundles.

Further .. I was required to add the auto-export option like

 
{code:java}
	<service ref=""sslContextParameters"" auto-export=""interfaces"" />
{code}
 

 

These both in different files/bundles (hot deployment in /deploy folder) don't work for me
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

	<sslContextParameters id=""sslContextParameters"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<keyManagers keyPassword=""xxxxx"">
			<keyStore resource=""etc/keystore.p12"" password=""xxxxx""/>
		</keyManagers>
	</sslContextParameters>

	<service ref=""sslContextParameters"" auto-export=""interfaces"" />
</blueprint>
{code}
and

 
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

	<camelContext id=""WEBISP001"" xmlns=""http://camel.apache.org/schema/blueprint"">
		<route id=""WEBISP001"">
			<from uri=""jetty:https://0.0.0.0:8444/hello?sslContextParameters=#sslContextParameters"" />
			<log message=""hello request body: ${in.body}"" />
		</route>
	</camelContext>
 </blueprint>
{code}
I'm still getting

 
{code:java}
Caused by: org.apache.camel.NoSuchBeanException: No bean could be found in the registry for: sslContextParameters of type: org.apache.camel.support.jsse.SSLContextParameters
{code}
 

 

P.S. For the JMS configuration the 2 separate blueprint files / bundles work

 
{code:java}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"">

	<!-- set JMS connection factory -->
	<bean id=""activemq"" class=""org.apache.activemq.ActiveMQConnectionFactory"">
		<property name=""brokerURL"" value=""tcp://localhost:61616"" />
		<property name=""userName"" value=""admin"" />
		<property name=""password"" value=""xxxxx"" />
	</bean>

	<service interface=""javax.jms.ConnectionFactory"" ref=""activemq""/>

</blueprint>
{code}
and further use of the JMS connection factory in other blueprints files / bundles (separated).

 

 
{code:java}
...
			<from uri=""jms:queue:EVENT?connectionFactory=activemq"" />
...
{code}
 

 
catshout:1581476854:2020-02-12T11:07:34.115+0000:1581476854:2020-02-12T11:07:34.115+0000:Just for edit one comment ..
catshout:1581476908:2020-02-12T11:08:28.289+0000:1581476908:2020-02-12T11:08:28.289+0000:Closed again after comment edit.
jondruse:1581480828:2020-02-12T12:13:48.980+0000:1581480828:2020-02-12T12:13:48.980+0000:[~catshout]

Working configuration, where sslContextParameters are defined in one bundle. Second blueprint is in second bundle:

{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd"">

 <sslContextParameters id=""sslContextParameters"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <secureSocketProtocolsFilter>
     <include>TLSv1.2</include>
     <include>TLSv1.1</include>
   </secureSocketProtocolsFilter>
   <cipherSuitesFilter>
     <include>.*</include>
     <exclude/>
   </cipherSuitesFilter>
   <keyManagers keyPassword=""test"">
     <keyStore resource=""keystore2"" password=""testtest""/>
   </keyManagers>
      <trustManagers>
     <keyStore resource=""server.truststore"" password=""testtest""/>
   </trustManagers>
 </sslContextParameters>

 <camelContext id=""WEBISP001"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <route id=""WEBISP001"">
     <from uri=""jetty:https://0.0.0.0:8444/hello?sslContextParameters=#sslContextParameters""  />
     <log message=""hello request body: ${in.body}"" />
   </route>
 </camelContext>

 <service ref=""sslContextParameters"" auto-export=""all-classes"" />
 
</blueprint>
{code}

and 

{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd""
           xmlns:ext=""http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.0.0"">
 
    <reference id=""sslContextParameters"" interface=""org.apache.camel.support.jsse.SSLContextParameters"" ext:proxy-method=""classes""/>
     
     
 <camelContext id=""WEBISP002"" xmlns=""http://camel.apache.org/schema/blueprint"">
   <route id=""WEBISP002"">
     <from uri=""jetty:https://0.0.0.0:8444/hello2?sslContextParameters=#sslContextParameters""  />
     <log message=""hello request body2: ${in.body}"" />
   </route>
 </camelContext>
</blueprint>
{code}

Could you please verify it in your environment?
davsclaus:1581482127:2020-02-12T12:35:27.591+0000:1581482127:2020-02-12T12:35:27.591+0000:Can you please move this conversation to the user mailing list or chat, thanks. 
catshout:1581513382:2020-02-12T21:16:22.306+0000:1581513382:2020-02-12T21:16:22.306+0000:Many thanks, [~jondruse], it works like a charm!

And, [~davsclaus], sorry for discuss here, I moved the answer to here

[https://camel.465427.n5.nabble.com/Re-camel-jetty-HTTPS-consumer-still-fails-with-handshake-failure-possible-bug-td5855702.html]"
0,CAMEL-14526,Bug,Major,None,None,"
None
",Closed,Fixed,None,Andrea Tarocchi,Andrea Tarocchi,0,1,2020-02-07 21:13:01+00:00,2020-02-07 21:44:44+00:00,The issue is well described here: https://github.com/checkstyle/checkstyle/issues/5575,valdar:1581081559:2020-02-07T21:19:19.869+0000:1581081559:2020-02-07T21:19:19.869+0000:PR provided https://github.com/apache/camel/pull/3553
0,CAMEL-14495,Improvement,Minor,2.25.0,3.2.0,"

help-wanted

",Resolved,Fixed,3.2.0,Dmitry Volodin,Hobbert,0,3,2020-02-05 13:25:35+00:00,2020-03-25 14:52:48+00:00,"When I set the samplingInterval  parameter on a Milo OPC UA Client route, the interval not changes on the real OPC application! Remains 1000 mili seconds even after configuring!! Can anyone confirm that??


 Heres my route


<routes xmlns=""http://camel.apache.org/schema/spring"" >
     <route id=""sensor"">


        <from uri=""milo-client:tcp://192.168.0.2:4840?samplingInterval=50&node=RAW(ns=4;i=12)""/>
         <process ref=""set-opc""/>
         <setBody><simple>${in.body}</simple></setBody> 
         <to uri=""stream:out""/>
     </route>
 </routes>


Thanks","davsclaus:1581400459:2020-02-11T13:54:19.911+0000:1581400459:2020-02-11T13:54:19.911+0000:If you debug the code then the sampling interval ought to be set, have you tried that?
evergreen:1582045808:2020-02-19T01:10:08.138+0000:1582045808:2020-02-19T01:10:08.138+0000:I think I have discovered the point
 
Exploring the Milo library, I found a *createsubscription* parameter that is set to 1000 ms of requesting subscription interval
{quote}// create a subscription @ 1000ms
        UaSubscription subscription = client.getSubscriptionManager().*createSubscription(1000.0)*.get();{quote}
[https://github.com/eclipse/milo/blob/master/milo-examples/client-examples/src/main/java/org/eclipse/milo/examples/client/SubscriptionExample.java] 
 
Looking for the parameter over the milo library, it confirms the idea:
{quote}* @param *requestedPublishingInterval* the requested publishing interval of the subscription.
     * @return a \{@link CompletableFuture} containing the \{@link UaSubscription}.
     */
    CompletableFuture<UaSubscription> createSubscription(double *_requestedPublishingInterval_*);{quote}
[https://github.com/eclipse/milo/blob/5ed4edad57be181b3b0d08fb124e252cf2decc56/opc-ua-sdk/sdk-client/src/main/java/org/eclipse/milo/opcua/sdk/client/api/subscriptions/UaSubscriptionManager.java] 
 
And when I looked at this parameter in the Camel, seems that its really fixed at 1000 ms
{quote}final UaSubscription manager = client.getSubscriptionManager().*createSubscription(1_000.0)*.get();{quote}
[https://github.com/apache/camel/blob/b78d16f720b7ee54b16bde820d9439b56e8fea7d/components/camel-milo/src/main/java/org/apache/camel/component/milo/client/internal/SubscriptionManager.java] 
 
I believe that this parameter needs to be included at the Camel OPC UA Client configuration!!
 
Anyone knows how to do that??
 
Thanks
davsclaus:1582148220:2020-02-20T05:37:00.099+0000:1582148220:2020-02-20T05:37:00.099+0000:Thanks for diving into this. So you can add a new option to the MiloClientConfiguration class and then use that in the code you found
dmvolod:1585098249:2020-03-25T09:04:09.358+0000:1585098249:2020-03-25T09:04:09.358+0000:[~evergreen] do you need to configure hardcoded requestedPublishingInterval?

samplingInterval and requestedPublishingInterval are different parameters:

[https://stackoverflow.com/questions/41183394/what-does-the-requestedpublishinginterval-in-milo-mean]"
0,CAMEL-14494,Task,Minor,3.0.1,3.2.0,"
None
",Closed,Won't Fix,3.2.0,Omar Al-Safi,Omar Al-Safi,0,2,2020-02-05 12:29:54+00:00,2020-03-04 11:43:59+00:00,"Similar to the aws component, we can break down the azure component into multiple components so it will be easier to add more azure services as components","omarsmak:1583290510:2020-03-04T10:55:10.130+0000:1583290510:2020-03-04T10:55:10.130+0000:hey [~acosentino], I got to realize the current component uses v8 legacy sdk which a big change from the current version 12. I was thinking, do you think it makes sense to keep the legacy component with v8 and label it as deprecated and create new broken down components that uses version the new sdk v12 instead? If not mistaken, you have done the similar thing with the aws components? 
acosentino:1583290731:2020-03-04T10:58:51.300+0000:1583290731:2020-03-04T10:58:51.300+0000:It makes sense, to me. The aws components are not deprecated, until we tested the v2 version extensively.
omarsmak:1583290919:2020-03-04T11:01:59.435+0000:1583290919:2020-03-04T11:01:59.435+0000:Sure, we could do similar thing in azure, until we are sure the new components works perfectly fine, we can label the legacy as deprecated. 
omarsmak:1583292869:2020-03-04T11:34:29.844+0000:1583292869:2020-03-04T11:34:29.844+0000:Will keep this and create new components based on sdkv12"
0,CAMEL-14493,Bug,Major,2.25.0,None,"
None
",Closed,Fixed,2.25.1,John Poth,John Poth,0,1,2020-02-05 10:33:43+00:00,2020-02-05 12:10:21+00:00,"java.lang.ClassNotFoundException: org.apache.camel.spring.Main
 at java.net.URLClassLoader.findClass (URLClassLoader.java:382)
 at java.lang.ClassLoader.loadClass (ClassLoader.java:418)
 at java.lang.ClassLoader.loadClass (ClassLoader.java:351)
 at org.apache.camel.maven.RunMojo$1.run (RunMojo.java:498)
 at java.lang.Thread.run (Thread.java:748)


 


Thanks @cmonmous for reporting the issue !",jpoth:1580875812:2020-02-05T12:10:12.527+0000:1580875812:2020-02-05T12:10:12.527+0000:[https://github.com/apache/camel/pull/3546]
0,CAMEL-14492,Bug,Major,3.x,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Thomas Diesler,0,2,2020-02-05 10:24:27+00:00,2020-02-12 11:22:53+00:00,"Caused by: org.apache.camel.PropertyBindingException: Error binding property (uris=http://192.168.178.30:23379,http://192.168.178.30:40001) with name: uris on bean: etcd://keys?uris=http%3A%2F%2F192.168.178.30%3A23379%2Chttp%3A%2F%2F192.168.178.30%3A40001 with value: http://192.168.178.30:23379,http://192.168.178.30:40001
 at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:502)
 at org.apache.camel.support.PropertyBindingSupport.access$000(PropertyBindingSupport.java:62)
 at org.apache.camel.support.PropertyBindingSupport$Builder.bind(PropertyBindingSupport.java:250)
 at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:513)
 at org.apache.camel.support.DefaultComponent.setProperties(DefaultComponent.java:482)
 at org.apache.camel.component.etcd.EtcdComponent.createEndpoint(EtcdComponent.java:153)
 at org.apache.camel.support.DefaultComponent.createEndpoint(DefaultComponent.java:245)
 at org.apache.camel.impl.engine.AbstractCamelContext.getEndpoint(AbstractCamelContext.java:756)
 ... 168 more
Caused by: java.lang.ClassCastException: org.apache.camel.component.etcd.EtcdKeysEndpoint cannot be cast to org.apache.camel.component.etcd.AbstractEtcdPollingEndpoint
 at org.apache.camel.component.etcd.AbstractEtcdPollingEndpointConfigurer.doConfigure(AbstractEtcdPollingEndpointConfigurer.java:28)
 at org.apache.camel.component.etcd.AbstractEtcdPollingEndpointConfigurer.configure(AbstractEtcdPollingEndpointConfigurer.java:19)
 at org.apache.camel.support.PropertyBindingSupport.doBindProperties(PropertyBindingSupport.java:497)
 ... 175 more





 


Shows with this test: https://github.com/wildfly-extras/wildfly-camel/blob/master/itests/standalone/docker/src/test/java/org/wildfly/camel/test/etcd/EtcdIntegrationTest.java",davsclaus:1581400722:2020-02-11T13:58:42.688+0000:1581400722:2020-02-11T13:58:42.688+0000:Ah yeah camel-etcd is abit wrong with its structure
0,CAMEL-14491,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-05 10:17:38+00:00,2020-02-05 15:13:22+00:00,No Desc,
0,CAMEL-14490,Improvement,Major,None,3.9.0,"
None
",Resolved,Fixed,3.9.0,Andrea Cosentino,Claus Ibsen,0,2,2020-02-04 17:00:33+00:00,2021-03-09 11:12:55+00:00,"Lets see if we can have 



camel-aws
camel-aws2



as middle folders, where we have all the aws-sks sqs and etc as sub folders. 


The stuff that builds the camel-catalog may need to be updated too, so it can scan these sub folders. But it may already work as its done for camel-box and camel-salesforce etc which has middle folders too.","acosentino:1615259575:2021-03-09T11:12:55.236+0000:1615259575:2021-03-09T11:12:55.236+0000:I created just a camel-aws middle folder. We have only aws-xray from sdk v1, so it is included with the aws2 components in middle folder"
0,CAMEL-14489,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-04 16:24:04+00:00,2020-02-04 18:54:57+00:00,See details on CAMEL-14484,
0,CAMEL-14488,Bug,Major,3.0.0.RC3,,"
None
",Resolved,Won't Fix,None,Unassigned,Thomas Thiele,0,2,2020-02-04 16:23:15+00:00,2020-02-04 16:40:28+00:00,"After switch from apache-camel.version 3.0.0-M2 to 3.0.0-RC3 annotation @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
 seems not to work as usual.
 Complete sample project is attached (camel-prototype-verification.2020-02-04.7z).
 Run test: ``mvn clean package`` /or run test folder in your IDE.)
 For test you may switch the apache-camel.version in _pom.xm_l (see ``TODO``).


 Sample:
 {{In a camel route with reference to both classes, the ValueChangedFilter class is instantiated
 every time the ValueChangedFilter.matches (Exchange exchange) method is called.
 Class ValueChangedProcessor is instantiated only once (as expected).
 In apache-camel.version 3.0.0-M2 both classes are treated the same (like class ValueChangedProcessor).


```
 @Component
 @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
 public class ValueChangedFilter {
 public boolean matches(Exchange exchange)


{ // do something ... }


 }


 @Slf4j
 @Component
 @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
 public class ValueChangedProcessor implements Processor 

{
 
 @Override
 public void process(Exchange exchange)
 \{ // do something ... }


}
 }}


// CamelRoutes:
 ?xml version=""1.0"" encoding=""UTF-8""?>
 <routes xmlns=""http://camel.apache.org/schema/spring"">
 <route id=""filterRoute"">
 <from uri=""direct:GENERATOR_Filter_EntryPoint""/>
 <filter>
 <method ref=""valueChangedFilter"" method=""matches(${exchange})""/>
 <stop/>
 </filter>
 <to uri=""mock:messageReceiverFilter""/>
 </route>


<route id=""processorRoute"">
 <from uri=""direct:GENERATOR_to_Processor_EntryPoint""/>
 <process ref=""valueChangedProcessor""/>
 <to uri=""mock:messageReceiverProcessor""/>
 </route>


</routes>
 ```","davsclaus:1580804880:2020-02-04T16:28:00.291+0000:1580804880:2020-02-04T16:28:00.291+0000:Camel 3 works a bit different than 2.x.

Dont use a processor as a bean if you want to have scope etc. Remove implements Processor
davsclaus:1580805628:2020-02-04T16:40:28.499+0000:1580805628:2020-02-04T16:40:28.499+0000:You can use <bean> instead where you can set cache=false in Camel 3.0. 

And in Camel 3.1 there is a bean scope option (instead of cache) which you can set to scope=request, which will then lookup the bean once for each request/exchange. Or use prototype scope which will lookup each time."
0,CAMEL-14487,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-04 16:23:05+00:00,2020-02-05 10:03:37+00:00,So it has xml in its name and similar to camel-xml-jaxb and camel-xml-io,
0,CAMEL-14486,Improvement,Minor,None,3.x,"
None
",Closed,Fixed,3.x,Unassigned,Omar Al-Safi,0,1,2020-02-04 11:08:47+00:00,2021-01-04 13:29:56+00:00,"There are lot functionalities can be shared between EndpointDslMojo and ComponentDslMojo, hence will make sense to refactor EndpointDslMojo in order to allow it to share the common functionalities with ComponentDslMojo in the maven plugin",omarsmak:1609738196:2021-01-04T13:29:56.891+0000:1609738196:2021-01-04T13:29:56.891+0000:There has been heavy work on this that has been done
0,CAMEL-14485,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.1.0,Omar Al-Safi,Claus Ibsen,0,2,2020-02-04 10:42:00+00:00,2020-02-05 10:40:57+00:00,"They are in random order, we should sort them a..z so its easier to see the list in the pom.xml of camel-componentdsl","davsclaus:1580785357:2020-02-04T11:02:37.562+0000:1580785357:2020-02-04T11:02:37.562+0000:Also sort ComponentsBuilderFactory so the build is consistent and its easier to browse the code knowing they are a..z
omarsmak:1580786036:2020-02-04T11:13:56.614+0000:1580786036:2020-02-04T11:13:56.614+0000:Also in the metadata.json"
0,CAMEL-14484,Improvement,Minor,3.0.1,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-02-04 09:31:33+00:00,2020-02-04 18:55:03+00:00,"The ValidateReifier requires the class PredicateValidatingProcessor which is provided by the camel-jaxp package which make camel-base to depends on camel-jaxp but looking at the classes the ValidateReifier requiires, it does not look like they depend on jaxp","davsclaus:1580781899:2020-02-04T10:04:59.568+0000:1580781899:2020-02-04T10:04:59.568+0000:If we try to make camel-jaxp optional from camel-core-engine then there are 2 other places. The ModelHelper and the JAXB code that loads routes from XML. The latter can be moved to camel-jaxp. The former we can work on as its the dump model API which we can make pluggable as well.
lb:1580782956:2020-02-04T10:22:36.031+0000:1580782956:2020-02-04T10:22:36.031+0000:+1000"
0,CAMEL-14483,Improvement,Minor,3.0.1,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-02-04 09:29:27+00:00,2020-02-05 10:07:56+00:00,"camel-endpointdsl has direct dependencies on camel-jaxp and camel-util-json, see:



https://github.com/apache/camel/blob/master/core/camel-endpointdsl/pom.xml#L60
https://github.com/apache/camel/blob/master/core/camel-endpointdsl/pom.xml#L64



Both dependencies do not seem really needed.",davsclaus:1580868476:2020-02-05T10:07:56.052+0000:1580868476:2020-02-05T10:07:56.052+0000:Yeah it should only depend on camel-core-engine (due to route builder)
0,CAMEL-14482,Sub-task,Trivial,None,,"
None
",Resolved,Fixed,None,Unassigned,Praveen Kottarathil,0,1,2020-02-03 22:56:59+00:00,2020-02-12 08:41:26+00:00,"In the old version of the website, Javadoc used to get published at 'http://camel.apache.org/maven/current/*' .  Several pages in the current documentation (107 occurrances) still refers to the non existent Javadoc pages.


A sample broken link highlighted below (source doc page)





The proposal is to fix these links, by pointing them to appropriate Javadoc hosted on https://javadoc.io/


I am already working on this and shall send in a PR shortly. Can someone assign this task to me?


 


Documentation pages with broken Javadoc links are below


docs/components/modules/ROOT/pages/mock-component.adoc
 docs/components/modules/ROOT/pages/log-component.adoc
 docs/components/modules/ROOT/pages/scp-component.adoc
 docs/components/modules/ROOT/pages/jpa-component.adoc
 docs/components/modules/ROOT/pages/bean-component.adoc
 docs/components/modules/ROOT/pages/dataset-test-component.adoc
 docs/components/modules/ROOT/pages/xpath-language.adoc
 docs/components/modules/ROOT/pages/cdi.adoc
 docs/components/modules/ROOT/pages/cxfrs-component.adoc
 docs/components/modules/ROOT/pages/dataset-component.adoc
 docs/components/modules/ROOT/pages/stomp-component.adoc
 docs/user-manual/modules/ROOT/pages/camelcontext.adoc
 docs/user-manual/modules/ROOT/pages/type-converter.adoc
 docs/user-manual/modules/ROOT/pages/faq/how-does-the-camel-api-compare-to.adoc
 docs/user-manual/modules/ROOT/pages/faq/running-camel-standalone.adoc
 docs/user-manual/modules/ROOT/pages/jmx.adoc
 docs/user-manual/modules/ROOT/pages/lifecycle.adoc
 docs/user-manual/modules/ROOT/pages/endpoint.adoc
 docs/user-manual/modules/ROOT/pages/spring.adoc
 docs/user-manual/modules/ROOT/pages/processor.adoc
 docs/user-manual/modules/ROOT/pages/message-endpoint.adoc
 docs/user-manual/modules/ROOT/pages/dead-letter-channel.adoc
 docs/user-manual/modules/ROOT/pages/predicate.adoc
 docs/user-manual/modules/ROOT/pages/book-getting-started.adoc
 docs/user-manual/modules/ROOT/pages/process-eip.adoc
 docs/user-manual/modules/ROOT/pages/expression.adoc
 docs/user-manual/modules/ROOT/pages/architecture.adoc
 docs/user-manual/modules/ROOT/pages/injector.adoc
 docs/user-manual/modules/ROOT/pages/jndi.adoc
 docs/user-manual/modules/ROOT/pages/browsable-endpoint.adoc
 docs/user-manual/modules/ROOT/pages/transactional-client.adoc
 docs/user-manual/modules/ROOT/pages/rollback-eip.adoc
 docs/user-manual/modules/ROOT/pages/error-handler.adoc
 docs/user-manual/modules/ROOT/pages/exception-clause.adoc
 docs/user-manual/modules/ROOT/pages/eventDrivenConsumer-eip.adoc
 docs/user-manual/modules/ROOT/pages/message.adoc
 docs/user-manual/modules/ROOT/pages/async.adoc","praveenkottarathil@gmail.com:1581468086:2020-02-12T08:41:26.358+0000:1581468086:2020-02-12T08:41:26.358+0000:Fixed user manuals & individual component documentation.
Refer to linked commits."
0,CAMEL-14481,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Pascal Schumacher,Pascal Schumacher,0,1,2020-02-03 21:57:22+00:00,2020-02-06 06:50:10+00:00,"Spring Boot 2.2 disables JMX by default (see:
https://github.com/spring-projects/spring-boot/issues/16090, https://github.com/spring-projects/spring-boot/issues/16498).


We should follow suit and remove the camel-management compile dependency from  camel-spring-boot to disable JMX by default.


See discussion on the mailing list: http://mail-archives.apache.org/mod_mbox/camel-dev/202002.mbox/%3Caa3aef09-5ff9-d60b-7ef4-2c4c9c30153f%40gmx.net%3E",
0,CAMEL-14480,Bug,Major,3.0.1,3.7.0,"
None
",Resolved,Fixed,3.7.0,Unassigned,Dhimitraq Jorgji,0,2,2020-02-03 17:52:48+00:00,2020-11-16 21:26:14+00:00,"When two SObjects have a one-to-one relationship and one of the objects in that relationship does not have a plural form the resulting DTO has duplicate properties causing compilation to fail. Similarly when the SObject with no plural form has a hierarchical child parent relationship with itself.


 


EX: Equipment_c has a relationship with Yard_Slot_c, were they both lookup to each other for a 1-to-1 relationship. Yard_Slot_c.java DTO has duplicate properties because both its Relationship *and its Child Relationship are named *Equipment_r.


 


EX2: Equipment_c has a parent/child relationship with itself causing both the Parent and Child relationship names to be Equipment_r.


 


**Salesforce allows and handles both these scenarios properly, however the resulting DTO classes do not compile because of the duplicate properties and duplicate getters.


 


An easy fix would be to always append the suffix List on child relationship properties in DTO.",jeremyross:1605431666:2020-11-15T17:14:26.822+0000:1605431666:2020-11-15T17:14:26.822+0000:PR forthcoming.
0,CAMEL-14479,Improvement,Major,None,3.x,"
None
",Resolved,Duplicate,3.x,Unassigned,Claus Ibsen,0,1,2020-02-03 16:11:12+00:00,2020-02-03 19:12:26+00:00,"It would be good to move runtime camel catalog out of camel-core and have it in its own JAR. Or complete get rid of it.


There are some components that use dynamic send aware that uses it. But we can find a way to do this in another way as they use only catalog details from their own component.


And the runtime catalog details on camel-core via JMX are not so useable.


Also this avoids having dependencies on tooling-model JARs in camel-core.",
0,CAMEL-14478,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-02-03 16:10:56+00:00,2020-02-05 10:17:11+00:00,No Desc,
0,CAMEL-14477,Improvement,Major,None,"3.1.0, 3.0.2, 2.25.1","
None
",Resolved,Fixed,"3.1.0, 3.0.2, 2.25.1",Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2020-02-03 11:26:08+00:00,2020-02-04 15:19:04+00:00,"For the camel-netty component, we should disallow object serialization by default, by removing the object encoders/decoders. If the user really wants object serialization, they can configure custom encoders/decoders.",
0,CAMEL-14476,Sub-task,Major,3.x,3.1.0,"
None
",Resolved,Fixed,3.1.0,Dmitry Volodin,Dmitry Volodin,0,1,2020-02-03 11:10:10+00:00,2020-02-05 07:12:07+00:00,No Desc,
0,CAMEL-14475,New Feature,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-02-03 10:09:48+00:00,2020-02-03 13:18:49+00:00,So we can use the camel-xml-io with camel-main etc to load XML routes.,"davsclaus:1580707129:2020-02-03T13:18:49.192+0000:1580707129:2020-02-03T13:18:49.192+0000:Just add camel-xml-io to the classpath and Camel will use it. Notice this is not for spring xml with <beans> as that is still spring parsing. And ditto for blueprint etc.

But for camel only xml in <routes> xml"
0,CAMEL-14474,Task,Trivial,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Aurélien Pupier,0,1,2020-02-03 08:36:38+00:00,2020-02-03 09:13:10+00:00,"in page, https://camel.apache.org/manual/latest/exchange.html
link to http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Exchange.html which doesn't exist.",
0,CAMEL-14473,Bug,Major,2.24.0,,"
None
",Closed,Duplicate,None,Unassigned,Muhammed Shanid A K,0,2,2020-02-03 05:14:39+00:00,2020-02-03 07:45:12+00:00,"-  Consumer not receiving the message from one of the queue after the restart of rabbitMQ pods ( Not always , intermittently ) ( Queue is not present for the consumer when checked via RabbitMQ management console ).


 - Using high Availability rabbit MQ Kubernetes service.


-  connecting to rabbitQueue  as 




""?exchangeType=fanout""
             + ""&durable=false&autoDelete=true&queue=abc-"" + hostOrProcessName



Below error is present in the application log.




""2020-02-02 01:05:23.767 ERROR --- [abbitMQConsumer] mq.client.impl.ForgivingExceptionHandler                 -  : Consumer org.apache.camel.component.rabbitmq.RabbitConsumer@437dba4d (amq.ctag-N3IUnRHiiOb) method handleCancel for channel AMQChannel(amqp://guest@187.34.72.463:5672/,1) threw an exception for channel AMQChannel(amqp://guest@187.34.72.463:5672/,1)java.io.IOException
\tat com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:126)
\tat com.rabbitmq.client.impl.AMQChannel.wrap(AMQChannel.java:122)
\tat com.rabbitmq.client.impl.AMQChannel.exnWrappingRpc(AMQChannel.java:144)
\tat com.rabbitmq.client.impl.ChannelN.queueDeclare(ChannelN.java:962)
\tat com.rabbitmq.client.impl.recovery.AutorecoveringChannel.queueDeclare(AutorecoveringChannel.java:333)
\tat org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindQueue(RabbitMQDeclareSupport.java:141)
\tat org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangeWithQueue(RabbitMQDeclareSupport.java:55)
\tat org.apache.camel.component.rabbitmq.RabbitMQDeclareSupport.declareAndBindExchangesAndQueuesUsing(RabbitMQDeclareSupport.java:36)
\tat org.apache.camel.component.rabbitmq.RabbitMQEndpoint.declareExchangeAndQueue(RabbitMQEndpoint.java:241)
\tat org.apache.camel.component.rabbitmq.RabbitConsumer.handleCancel(RabbitConsumer.java:247)
\tat com.rabbitmq.client.impl.ConsumerDispatcher$3.run(ConsumerDispatcher.java:115)
\tat com.rabbitmq.client.impl.ConsumerWorkService$WorkPoolRunnable.run(ConsumerWorkService.java:104)
\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
\tat java.lang.Thread.run(Thread.java:748)
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=404, reply-text=NOT_FOUND - queue 'abc-myservice-6c4b868767-mtbnx3' in vhost '/' process is stopped by supervisor, class-id=50, method-id=10)","dmvolod:1580686992:2020-02-03T07:43:12.849+0000:1580686992:2020-02-03T07:43:12.849+0000:[~mohdshanidak@gmail.com] it can be related to the CAMEL-13267 issue or any latest fix for 2.24.latest, 2.25.x or 3.x

Please try with the latest stable Camel release and return back."
0,CAMEL-14472,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Unassigned,Claus Ibsen,0,4,2020-02-02 17:44:13+00:00,2021-11-18 11:24:43+00:00,"We can likely use HashMap instead of ConcurrentHashMap for exchange properties as concurrency access is improved in 3.x with the new routing engine.


This reduces the number of object allocations as hash map is less overhead than a concurrent hashmap.","specs:1583711797:2020-03-09T07:56:37.045+0000:1583711797:2020-03-09T07:56:37.045+0000:Hi, I am an outreachy applicant. Can I work on this issue?
acosentino:1583712136:2020-03-09T08:02:16.275+0000:1583712136:2020-03-09T08:02:16.275+0000:The outreachy participation of Apache Camel is only related to the camel-website. This is not a camel-website issue and also it requires a bit of knowledge of where and when to change the class usage. 
specs:1583712927:2020-03-09T08:15:27.661+0000:1583712927:2020-03-09T08:15:27.661+0000:Ok but some UI changes were mentioned to be made on the Airflow website in the projects list. Can you please let me know about those issues?
zregvart:1583724982:2020-03-09T11:36:22.854+0000:1583724982:2020-03-09T11:36:22.854+0000:[~specs] Apache Camel and Apache Airflow are two different projects under the Apache Software Foundation, please refer to the [Airflow Outreachy project page|https://www.outreachy.org/outreachy-may-2020-internship-round/communities/apache/#extend-improve-apache-airflow-rest-api] for details on Airflow.
davsclaus:1637205883:2021-11-18T11:24:43.685+0000:1637205883:2021-11-18T11:24:43.685+0000:We have since optimized internally the exchange and how properties are stored"
0,CAMEL-14471,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Pascal Schumacher,Pascal Schumacher,0,1,2020-02-02 12:50:55+00:00,2020-02-04 20:35:19+00:00,"Spring 5.2 makes it possible to disable proxying of bean methods for configuration classes (with @Configuration(proxyBeanMethods=false)) to avoid the generation of cglib proxies and improve performance. For details see:
https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html#proxyBeanMethods--


Spring Boot (see: https://github.com/spring-projects/spring-boot/issues/9068) and other Spring projects already use this for their auto-configuration classes.


Camel-spring-boot and camel-spring-boot-starter should also use this feature.",
0,CAMEL-14470,Improvement,Major,None,4.x,"
None
",Open,Unresolved,4.x,Andrea Cosentino,Andrea Cosentino,0,4,2020-02-01 17:41:00+00:00,2023-08-22 05:41:46+00:00,"Egit is not updated from a while, at least the version in mylyn. The github-api from kohsuke is actually the best Java client out there. So probably it makes sense to switch.","acosentino:1609746082:2021-01-04T15:41:22.136+0000:1609746082:2021-01-04T15:41:22.136+0000:Or maybe create a new component based on this? camel-github works fine.
davsclaus:1662100187:2022-09-02T14:29:47.896+0000:1662100187:2022-09-02T14:29:47.896+0000:The project is at
https://github.com/hub4j/github-api
vmanel:1692011002:2023-08-14T19:03:22.019+0000:1692011002:2023-08-14T19:03:22.019+0000:[~acosentino] I can try working on this, pls let me know if old component should be modified or new component should be created?
acosentino:1692654106:2023-08-22T05:41:46.314+0000:1692654106:2023-08-22T05:41:46.314+0000:I think a new component should be created, but let's gather more opinions"
0,CAMEL-14469,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-01-31 14:18:43+00:00,2020-02-04 15:47:49+00:00,No Desc,
0,CAMEL-14468,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Thomas Diesler,Thomas Diesler,0,1,2020-01-31 12:07:55+00:00,2020-02-03 15:33:25+00:00,No Desc,tdiesler:1580449261:2020-01-31T13:41:01.142+0000:1580449261:2020-01-31T13:41:01.142+0000:PR: https://github.com/apache/camel/pull/3536
0,CAMEL-14467,New Feature,Minor,3.0.1,4.0.0,"
None
",Resolved,Fixed,4.0.0,Claus Ibsen,Jens Kleine-Herzbruch,0,2,2020-01-31 09:58:40+00:00,2023-07-25 06:51:07+00:00,"Currently, the JCachePolicy can only enabled or disable the cache completely at startup.


 


It would be useful to be able to enable or disable caching per request, though. This change adds a new property ""bypassExpression"". If this expression is set and returns true, the cache is ignored for lookup, the underlying route is executed as normal, and the returned value is inserted in the cache for future lookups.","davsclaus:1690239067:2023-07-25T06:51:07.348+0000:1690239067:2023-07-25T06:51:07.348+0000:Thanks for the patch, and sorry for this ticket was unnoticed for years."
0,CAMEL-14466,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-31 08:56:05+00:00,2020-02-01 10:16:00+00:00,"Just experimenting if we can reduce the RedeliveryTask object size, for example to have a simple task for non redeliverable processing, and then the current when you need advanced error handling. This may reduce the object sizes in memory during routing for some use-cases.","davsclaus:1580438872:2020-01-31T10:47:52.621+0000:1580438872:2020-01-31T10:47:52.621+0000:Its a big state object so it takes up in a basic Camel example 76% of the memory and I can get that reduced to 59% of the memory usage.

5 min sampling takes 98 MB (76% space by this) reduced to 55 MB (59% space by this)
davsclaus:1580448296:2020-01-31T13:24:56.892+0000:1580448296:2020-01-31T13:24:56.892+0000:Another idea is to store the redelivery state on the exchange once on uow-start and then reset the state before each redelivery error handler. Then its one object created per uow/exchange instead of per step in the routing
davsclaus:1580464548:2020-01-31T17:55:48.605+0000:1580464548:2020-01-31T17:55:48.605+0000:First optimisation done, look next week on that 2nd idea
davsclaus:1580479945:2020-01-31T22:12:25.245+0000:1580479945:2020-01-31T22:12:25.245+0000:2nd optimasation reduces object allocations by 10% in the sample app. But that would vary how many steps there are in routes. But it helps nevertheless.
davsclaus:1580480338:2020-01-31T22:18:58.662+0000:1580480338:2020-01-31T22:18:58.662+0000:Also look at initializing exchange properties map with smaller default capacity as 16 may be too much on regular use.
davsclaus:1580521192:2020-02-01T09:39:52.564+0000:1580521192:2020-02-01T09:39:52.564+0000:So the vast majority of exchange properties are 1,2,3,4 in size and tests in camel-core goes up till 15, and in camel-jms to 9. A default of 8 is good. "
0,CAMEL-14465,Task,Major,None,None,"
None
",Resolved,Abandoned,None,Guillaume Nodet,Guillaume Nodet,0,1,2020-01-30 16:54:56+00:00,2022-09-02 11:48:28+00:00,http://openclover.org/doc/manual/4.2.0/general--what-is-test-optimization.html,
0,CAMEL-14464,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-30 15:21:28+00:00,2020-02-03 15:46:25+00:00,No Desc,
0,CAMEL-14463,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-30 15:20:55+00:00,2020-02-03 10:59:03+00:00,No Desc,
0,CAMEL-14462,Bug,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Andrea Cosentino,0,2,2020-01-30 09:43:58+00:00,2020-02-11 13:00:53+00:00,"I was testing aws-translate in camel-blueprint with a stupid route like this one:




<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">  
    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"" id=""aws-translate"">
    <route id=""aws"">      
      <from uri=""timer:name?repeatCount=5"" />      
      <to uri=""aws-translate:test?accessKey=RAW(xxxx)&amp;secretKey=RAW(xxxx)&amp;region=eu-west-1""/>
      <log message=""Receiving body ${body}"" />    
    </route>
</camelContext>
</blueprint>



In the component we have a check for having a client or accessKey and secretKey set, the error I'm getting is the following




org.apache.camel.FailedToCreateRouteException: Failed to create route aws at: >>> To[aws-translate:test?accessKey=RAW(xxxx)&secretKey=RAW(xxxx)&region=eu-west-1] <<< in route: Route(aws)[From[timer:name?repeatCount=5] -> [To[aws-transla... because of Failed to resolve endpoint: aws-translate://test?accessKey=RAW(xxxx)&region=eu-west-1&secretKey=xxxxxx due to: Amazon translate client or accessKey and secretKey must be specified




Then I tried to remove the check and use a modified version of the component, at that point, the options are completely not recognized.




[To[aws-transla... because of Failed to resolve endpoint: aws-translate://test?accessKey=RAW(xxxx)&region=eu-west-1&secretKey=xxxxxx due to: Failed to resolve endpoint: aws-translate://test?accessKey=RAW(xxx)&region=eu-west-1&secretKey=xxxxxx due to: There are 3 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{accessKey=xxxx, region=eu-west-1, secretKey=xxxx}]





It looks like there is something wrong while building the configuration and setting the properties on endpoint.


cc davsclaus gnodet


I tested only with camel-aws components, but it may be with others too","davsclaus:1581386638:2020-02-11T10:03:58.963+0000:1581386638:2020-02-11T10:03:58.963+0000:On karaf 4.2.8 with camel 3.1 then this blueprint xml file works for me
{code}
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xsi:schemaLocation=""
             http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">  

    <camelContext xmlns=""http://camel.apache.org/schema/blueprint"">
    <route id=""hello"">      
      <from uri=""timer:foo?period=1s""/>      
      <log message=""Hello world""/>    
    </route>
</camelContext>
</blueprint>
{code}
davsclaus:1581393189:2020-02-11T11:53:09.425+0000:1581393189:2020-02-11T11:53:09.425+0000:Okay working on how configurers are loaded so we can make it via a resolver like components, languges etc which then allows OSGi to do something custom"
0,CAMEL-14461,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-30 08:02:44+00:00,2020-02-06 20:59:49+00:00,"Lets see if we can move RuntimeCamelCatalog to its own module and make it optional. 


Its used by component extension verifiers and components that use dynamic to optimization like toD with http components. But we can look at source code generate what they may need for this, so it can be more optional.


The new tooling model classes can then also become optional so we can keep plain Camel JARs to less JARs and classes.",
0,CAMEL-14460,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-30 08:00:46+00:00,2020-01-31 06:15:33+00:00,"By default camel use case insensitive headers so Content-Type and content-type header keys are the same.


Typically HTTP related component rely on this as HTTP spec has case insensitive headers.


But there can be use-cases where you dont use HTTP or dont care and want to optimize and just use a plain HashMap.",
0,CAMEL-14459,Task,Major,3.0.0,None,"
None
",Resolved,Fixed,3.1.0,Tadayoshi Sato,Tadayoshi Sato,0,1,2020-01-30 00:34:09+00:00,2020-02-06 10:23:04+00:00,It's possible that camel-webhook has the same issue as CAMEL-14456  with camel-master on handling RAW() parameter in the delegated URI. Let's check if it really has the issue or not.,"tadayosi:1580865671:2020-02-05T09:21:11.196+0000:1580865671:2020-02-05T09:21:11.196+0000:Worse, for camel-webhook {{RAW()}} wrapper seems to be stripped and thus ignored at all. I'll take care of it here."
0,CAMEL-14458,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-29 14:28:41+00:00,2020-01-30 15:20:16+00:00,No Desc,
0,CAMEL-14457,Bug,Minor,"3.0.0, 3.0.1","3.1.0, 3.0.2","
None
",Resolved,Fixed,"3.1.0, 3.0.2",Claus Ibsen,Alex Soto,0,2,2020-01-29 13:29:47+00:00,2020-02-06 21:20:43+00:00,"With Camel 3.0.1, I am experiencing this error:
  


java.lang.RuntimeException: java.lang.NoClassDefFoundError: groovy/lang/Script
 {{ at org.codehaus.groovy.control.CompilationUnit.convertUncaughtExceptionToCompilationError(CompilationUnit.java:1107)}}
 {{ at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:1087)}}
 {{ at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:634)}}
 {{ at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:612)}}
 {{ at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:589)}}
 {{ at groovy.lang.GroovyClassLoader.doParseClass(GroovyClassLoader.java:401)}}
 {{ at groovy.lang.GroovyClassLoader.access$300(GroovyClassLoader.java:89)}}
 {{ at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:341)}}
 {{ at groovy.lang.GroovyClassLoader$5.provide(GroovyClassLoader.java:338)}}
 {{ at org.codehaus.groovy.runtime.memoize.ConcurrentCommonCache.getAndPut(ConcurrentCommonCache.java:147)}}
 {{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:336)}}
 {{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:320)}}
 {{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:262)}}
 {{ at groovy.lang.GroovyClassLoader.parseClass(GroovyClassLoader.java:272)}}
 {{ at org.apache.camel.language.groovy.GroovyExpression.instantiateScript(GroovyExpression.java:73)}}…


 
  
 I am running Camel in Karaf OSGi environment with camel-groovy feature installed.  In old Camel 2.X, I had to install features camel-script, and camel-script-groovy, but they are no longer available.
  
Adding:


DynamicImport-Package:  groovy.*, org.codehaus.groovy.*


Fixes the issue.","davsclaus:1580277204:2020-01-29T13:53:24.515+0000:1580277204:2020-01-29T13:53:24.515+0000:That dynamic import is that on your own custom bundle, or did you patch camel-groovy ?
alex.soto:1580277747:2020-01-29T14:02:27.715+0000:1580277747:2020-01-29T14:02:27.715+0000:I added the dynamic import to my custom bundle, which contain the Camel routes. However, this is a work-around, as I think it should in the Groovy bundle itself.
davsclaus:1580277975:2020-01-29T14:06:15.644+0000:1580277975:2020-01-29T14:06:15.644+0000:Yeah for OSGi that camel-groovy should be able to load any class because of scripting. So you are welcome to provide a PR with the fix in the camel-groovy/pom.xml
alex.soto:1580278592:2020-01-29T14:16:32.510+0000:1580278592:2020-01-29T14:16:32.510+0000:I am not sure if it should be *any* class, perhaps just the Groovy classes, dynamically importing all classes at this level may cause other problems. Probably better for [~jbonofre] to look into this."
0,CAMEL-14456,Bug,Major,"3.0.0, 2.25.0",None,"
None
",Resolved,Fixed,3.1.0,Tadayoshi Sato,Tadayoshi Sato,0,1,2020-01-29 07:59:48+00:00,2020-01-30 00:26:17+00:00,"Given the following endpoint URI:




master:test:dummy://path?foo=hello}+world&bar=RAW(hello}+world)




the value of parameter bar gets hello%7D+world instead of hello}+world.",
0,CAMEL-14455,New Feature,Major,2.24.1,3.2.0,"

help-wanted

",Resolved,Fixed,3.2.0,Unassigned,Muhammed Shanid A K,0,3,2020-01-29 02:27:22+00:00,2020-03-12 18:55:10+00:00,"As mentioned below in the document, Rabbit MQ provide an option to override the handler of unhandled exception  using ConnectionFactory#setExceptionHandler


https://www.rabbitmq.com/api-guide.html#unhandled-exceptions


 


Please add a this feature in camel-rabbit when connecting to Rabbit MQ via Apache Camel.","davsclaus:1580243196:2020-01-29T04:26:36.080+0000:1580243196:2020-01-29T04:26:36.080+0000:You can use RabbitMQ ConnectionFactory to use this today. 

But what you ask is for a new option on the endpoint/component level that you can use as well
mohdshanidak@gmail.com:1580247491:2020-01-29T05:38:11.334+0000:1580247491:2020-01-29T05:38:11.334+0000:Thanks , [~davsclaus] I am able to set Exception Handler via RabbitMQ ConnectionFactory
manonthegithub:1583865931:2020-03-11T02:45:31.295+0000:1583865931:2020-03-11T02:45:31.295+0000:I think, I can take this issue. I will submit PR asap."
0,CAMEL-14454,Task,Major,None,,"
None
",Resolved,Fixed,None,Freeman Yue Fang,Freeman Yue Fang,0,1,2020-01-28 21:41:37+00:00,2020-01-31 21:21:36+00:00,like the swagger examples counterparts,
0,CAMEL-14453,Bug,Major,None,"3.1.0, 2.25.1","
None
",Resolved,Fixed,"3.1.0, 2.25.1",Freeman Yue Fang,Freeman Yue Fang,0,1,2020-01-28 21:39:11+00:00,2020-01-31 21:21:23+00:00,"example
camel-example-spring-boot-rest-swagger-simple on Camel 3.x
camel-example-rest-swagger on Camel 2.x 
broken due to the changes on petstore.swagger.io server. Like change from http to https, and available Pet ID changed on the server",
0,CAMEL-14452,Bug,Minor,3.1.0,None,"
None
",Resolved,Fixed,3.1.0,James Netherton,James Netherton,0,1,2020-01-28 19:16:46+00:00,2020-01-31 08:25:07+00:00,"This could be related to CAMEL-14284.


If you try to set the font or pageSize options on a PDF endpoint then you get an NPE. E.g


pdf:create?fontSize=6&pageSize=PAGE_SIZE_A5&font=courier


Probably due to PdfEndpointConfigurer expecting the type to be either PDFont or PDRectangle when its actually trying to deal with a String.",
0,CAMEL-14451,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Andrea Cosentino,0,1,2020-01-28 14:46:35+00:00,2020-01-30 14:54:38+00:00,[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-dataset: Compilation failure [ERROR] error: Unable to process annotated elements in EndpointAnnotationProcessor: Error: java.io.FileNotFoundException: META-INF/services/org/apache/camel/component/mock,
0,CAMEL-14450,Bug,Major,None,None,"
None
",Resolved,Invalid,None,Unassigned,Mahdi Karami,0,2,2020-01-28 13:43:54+00:00,2020-01-28 14:49:44+00:00,"I have problem in a service built with cxf-proxy pattern. In may case I found in org.apache.camel.component.http.HttpComponent class, the SSLContexts class is imported from org.apache.http.ssl.SSLContexts but error classNotFoundException returned. it seems the true class is org.apache.http.conf.ssl.SSLContexts. this problem happend  when I migrated to camel 3.0.1. and several days I can't release version of my project because of this problem. can anybody help???",acosentino:1580194184:2020-01-28T14:49:44.498+0000:1580194184:2020-01-28T14:49:44.498+0000:Please ask on the user mailing list and read the migration guide.
0,CAMEL-14449,Bug,Minor,3.0.0,"3.1.0, 3.0.2","
None
",Resolved,Fixed,"3.1.0, 3.0.2",Luca Burgazzoli,Luca Burgazzoli,0,1,2020-01-28 10:03:46+00:00,2020-01-28 11:22:03+00:00,"camel-main can be configured to shut down after  after a specific amount of time or number of messages but at this is done before properties are bound to the main's configuration object (MainConfigurationProperties), it is not possible to configure such behaviour through propertiees i.e. the camel.main.duration-max-messages is ignored.",
0,CAMEL-14448,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,4,2020-01-28 06:47:48+00:00,2020-02-05 11:02:29+00:00,No Desc,"davsclaus:1580168188:2020-01-28T07:36:28.706+0000:1580168188:2020-01-28T07:36:28.706+0000:Hmm what is the main improvement of doing this?
omarsmak:1580171110:2020-01-28T08:25:10.158+0000:1580171110:2020-01-28T08:25:10.158+0000:[~gnodet] can we please hold on this until the componentdsl generation is done? I am afraid it may break things to me
gnodet:1580374746:2020-01-30T16:59:06.279+0000:1580374746:2020-01-30T16:59:06.279+0000:The benefits imho would be :

 * better tracking of this code

 * easy change detection when working on the generators 

 * simplify IDE integration

 

There's definitely no urge on that, so it can be postponed and investigated later.

 
gnodet:1580782432:2020-02-04T10:13:52.825+0000:1580782432:2020-02-04T10:13:52.825+0000:[~omarsmak]  i'm waiting for the component DSL to be merged in, but I'm nearly finished with CAMEL-14448 and CAMEL-14469.
omarsmak:1580871026:2020-02-05T10:50:26.687+0000:1580871026:2020-02-05T10:50:26.687+0000:[~gnodet] [~acosentino] If not mistaken, if we have all the generated source files in git, should they contain the license headers?
acosentino:1580871749:2020-02-05T11:02:29.530+0000:1580871749:2020-02-05T11:02:29.530+0000:They should, yes."
0,CAMEL-14447,Bug,Major,3.1.0,None,"
None
",Resolved,Fixed,3.1.0,Freeman Yue Fang,Freeman Yue Fang,0,1,2020-01-27 20:49:30+00:00,2020-01-31 21:23:03+00:00,No Desc,
0,CAMEL-14446,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-27 12:22:51+00:00,2020-01-27 14:26:42+00:00,No Desc,
0,CAMEL-14415,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-19 16:05:37+00:00,2020-01-20 08:39:26+00:00,"We moved everything in camel-spring-boot repository


 


gnodet",
0,CAMEL-14414,Improvement,Major,"2.24.3, 3.x","3.1.0, 3.0.2, 2.25.1","
None
",Resolved,Fixed,"3.1.0, 3.0.2, 2.25.1",Unassigned,Gianandrea Rigoni,0,1,2020-01-18 14:14:19+00:00,2020-02-08 08:29:47+00:00,"following headers or properties are handled in an inconsistent way
sometimes setted as prop then removed as headers or viceversa
documentation in describing how to set them is also slightly inconsistent


affected flags are (I am on purpose avoiding naming them header or property)
AGGREGATION_COMPLETE_CURRENT_GROUP
AGGREGATION_COMPLETE_ALL_GROUPS
AGGREGATION_COMPLETE_ALL_GROUPS_INCLUSIVE


also chaining aggregations is not working when using 
AGGREGATION_COMPLETE_CURRENT_GROUP
AGGREGATION_COMPLETE_ALL_GROUPS


because setting is done on prop and removal is done on header level


I have created a PR proposing a change","grigoni:1579610076:2020-01-21T20:34:36.875+0000:1579610076:2020-01-21T20:34:36.875+0000:hi [~cibsen@e-ma.net]
one reason for my PR is to fix a side effect that happens when using AGGREGATION_COMPLETE_CURRENT_GROUP and AGGREGATION_COMPLETE_ALL_GROUPS
the header/property is not cleaned up and it survives being propagated to following routes, for example a second aggregation chained to one which has group completion
therefore instead of improvement this should be considered as a bug

also see: CAMEL-12589

kind regards"
0,CAMEL-14413,Bug,Major,3.0.1,None,"
None
",Resolved,Fixed,None,Unassigned,Daniel Scalzi,0,2,2020-01-17 15:20:41+00:00,2020-01-18 10:57:59+00:00,"Several components are missing jars and metadata for the 3.0.1 release. The ones I'm specifically referencing (and missing) are:



 org.apache.camel:camel-core
org.apache.camel:camel-main
org.apache.camel:camel-aws-ddb
org.apache.camel:camel-gson



Ex. 


https://repo.maven.apache.org/maven2/org/apache/camel/camel-core/3.0.1/camel-core-3.0.1.pom


https://repo.maven.apache.org/maven2/org/apache/camel/camel-core/3.0.1/camel-core-3.0.1.jar


 


As far as I can tell this is supposed to be a released version. https://camel.apache.org/download/","acosentino:1579245997:2020-01-17T15:26:37.175+0000:1579246008:2020-01-17T15:26:48.468+0000:this is a sonatype problem. Use the apache repository for the moment. This is not our fault.
dscalzi-lmco:1579246203:2020-01-17T15:30:03.359+0000:1579246203:2020-01-17T15:30:03.359+0000:Will do, thanks
acosentino:1579316258:2020-01-18T10:57:38.696+0000:1579316258:2020-01-18T10:57:38.696+0000:This should be now resolved.
acosentino:1579316279:2020-01-18T10:57:59.203+0000:1579316279:2020-01-18T10:57:59.203+0000:Re-open eventually please :)"
0,CAMEL-14412,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.25.0, 3.1.0, 3.0.2",Andrea Cosentino,Andrea Cosentino,0,1,2020-01-17 10:51:35+00:00,2020-02-06 20:58:37+00:00,"We need to switch to https


https://support.sonatype.com/hc/en-us/articles/360041287334",
0,CAMEL-14411,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Peter Palaga,0,3,2020-01-16 16:35:43+00:00,2020-01-31 14:18:04+00:00,"See the following call path when a new DataFormat is configured in Camel Quarkus (against Camel 3.0.0). Note that the setLineSeparator() method is accessed using reflection there.


Should this be fixed in Camel or should perhaps Camel Quarkus be adapted to use some generated configurer?




 at org.apache.camel.dataformat.base64.Base64DataFormat.setLineSeparator(Base64DataFormat.java:94)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.apache.camel.support.IntrospectionSupport.setProperty(IntrospectionSupport.java:715)
        at org.apache.camel.support.IntrospectionSupport.setProperty(IntrospectionSupport.java:795)
        at org.apache.camel.impl.engine.DefaultBeanIntrospection.setProperty(DefaultBeanIntrospection.java:170)
        at org.apache.camel.reifier.dataformat.DataFormatReifier.setProperty(DataFormatReifier.java:243)
        at org.apache.camel.reifier.dataformat.Base64DataFormatReifier.configureDataFormat(Base64DataFormatReifier.java:41)
        at org.apache.camel.reifier.dataformat.DataFormatReifier.createDataFormat(DataFormatReifier.java:203)
        at org.apache.camel.reifier.dataformat.DataFormatReifier.getDataFormat(DataFormatReifier.java:169)
        at org.apache.camel.reifier.MarshalReifier.createProcessor(MarshalReifier.java:35)
        at org.apache.camel.reifier.ProcessorReifier.makeProcessorImpl(ProcessorReifier.java:571)
        at org.apache.camel.reifier.ProcessorReifier.makeProcessor(ProcessorReifier.java:537)
        at org.apache.camel.reifier.ProcessorReifier.addRoutes(ProcessorReifier.java:250)
        at org.apache.camel.reifier.RouteReifier.doCreateRoute(RouteReifier.java:384)
        at org.apache.camel.reifier.RouteReifier.createRoute(RouteReifier.java:108)
        at org.apache.camel.quarkus.core.FastModel.start(FastModel.java:61)
        at org.apache.camel.quarkus.core.BaseModel.startRoute(BaseModel.java:327)
        at org.apache.camel.quarkus.core.BaseModel.startRouteDefinitions(BaseModel.java:320)
        at org.apache.camel.quarkus.core.BaseModel.startRouteDefinitions(BaseModel.java:299)
        at org.apache.camel.quarkus.core.FastCamelContext.startRouteDefinitions(FastCamelContext.java:135)
        at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2597)
        at org.apache.camel.impl.engine.AbstractCamelContext.lambda$doStart$2(AbstractCamelContext.java:2445)
        at org.apache.camel.impl.engine.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:2462)
        at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2443)
        at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117)
        at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2352)
        at org.apache.camel.quarkus.core.CamelMain.doStart(CamelMain.java:50)
        at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117)
        at org.apache.camel.quarkus.core.CamelMainRecorder.start(CamelMainRecorder.java:92)
        at io.quarkus.deployment.steps.Main$start38.deploy_0(Main$start38.zig:97)
        at io.quarkus.deployment.steps.Main$start38.deploy(Main$start38.zig:36)
        at io.quarkus.runner.ApplicationImpl.doStart(ApplicationImpl.zig:180)
        at io.quarkus.runtime.Application.start(Application.java:87)
        at io.quarkus.runner.RuntimeRunner.run(RuntimeRunner.java:167)
        at io.quarkus.test.junit.QuarkusTestExtension.doJavaStart(QuarkusTestExtension.java:249)
        at io.quarkus.test.junit.QuarkusTestExtension.createTestInstance(QuarkusTestExtension.java:394)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.invokeTestInstanceFactory(ClassBasedTestDescriptor.java:285)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateTestClass(ClassBasedTestDescriptor.java:275)
        at org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateTestClass(ClassTestDescriptor.java:77)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.instantiateAndPostProcessTestInstance(ClassBasedTestDescriptor.java:258)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$2(ClassBasedTestDescriptor.java:252)
        at java.util.Optional.orElseGet(Optional.java:267)
        at org.junit.jupiter.engine.descriptor.ClassBasedTestDescriptor.lambda$testInstancesProvider$3(ClassBasedTestDescriptor.java:251)
        at org.junit.jupiter.engine.execution.TestInstancesProvider.getTestInstances(TestInstancesProvider.java:29)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$prepare$0(TestMethodTestDescriptor.java:106)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:105)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:69)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$1(NodeTestTask.java:107)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:107)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:75)
        at java.util.ArrayList.forEach(ArrayList.java:1257)
        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
        at java.util.ArrayList.forEach(ArrayList.java:1257)
        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
        at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
        at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
        at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
        at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
        at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
        at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
        at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
        at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
        at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)
        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)
        at org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:127)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:377)
        at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:138)
        at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:465)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:451)","gnodet:1579164168:2020-01-16T16:42:48.761+0000:1579164168:2020-01-16T16:42:48.761+0000:We do generate {{PropertyConfigurer}} for components, so we should do the same for {{DataFormat}}.
davsclaus:1579226049:2020-01-17T09:54:09.267+0000:1579226049:2020-01-17T09:54:09.267+0000:Data formats and languages do not have source code generated configurers. And also data formats are configured a bit differently than components, but yeah it should be possible to lookup and use the configurer class and use it. "
0,CAMEL-14410,Bug,Major,None,,"
None
",Resolved,Fixed,None,Guillaume Nodet,Andrea Cosentino,0,3,2020-01-16 09:40:47+00:00,2020-01-20 09:32:56+00:00,"[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile (default-compile) on project camel-spring-boot-generator-maven-plugin: Compilation failure: Compilation failure: 
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/AbstractSpringBootGenerator.java:[47,47] cannot find symbol
[ERROR] symbol: class PackageHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/AbstractSpringBootGenerator.java:[47,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[48,40] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[58,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[59,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[60,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[61,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[62,47] package org.apache.camel.maven.packaging.srcgen does not exist
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[93,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[93,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[94,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[94,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[95,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[95,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[96,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[96,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[97,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[97,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[98,47] cannot find symbol
[ERROR] symbol: class JSonSchemaHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[98,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[99,47] cannot find symbol
[ERROR] symbol: class PackageHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[99,1] static import only from classes and interfaces
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[789,63] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[789,88] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[994,42] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[994,18] cannot find symbol
[ERROR] symbol: class Property
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1010,37] cannot find symbol
[ERROR] symbol: class GenericType
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1035,13] cannot find symbol
[ERROR] symbol: class GenericType
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1087,42] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1087,66] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1110,13] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1247,91] cannot find symbol
[ERROR] symbol: class Annotation
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[1877,37] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/SpringBootAutoConfigurationMojo.java:[2079,39] cannot find symbol
[ERROR] symbol: class JavaClass
[ERROR] location: class org.apache.camel.springboot.maven.SpringBootAutoConfigurationMojo
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/PrepareCatalogSpringBootMojo.java:[40,47] cannot find symbol
[ERROR] symbol: class PackageHelper
[ERROR] location: package org.apache.camel.maven.packaging
[ERROR] /home/oscerd/workspace/apache-camel/camel-spring-boot/tooling/camel-spring-boot-generator-maven-plugin/src/main/java/org/apache/camel/springboot/maven/PrepareCatalogSpringBootMojo.java:[40,1] static import only from classes and interfaces
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR] mvn <goals> -rf :camel-spring-boot-generator-maven-plugin","acosentino:1579161875:2020-01-16T16:04:35.321+0000:1579161875:2020-01-16T16:04:35.321+0000:So I think we can switch directly to 3.1.0-SNAPSHOT, without a dev profile.

[~gnodet] [~cibsen@e-ma.net] [~lburgazzoli] does this sound good to everybody?
davsclaus:1579167531:2020-01-16T17:38:51.773+0000:1579167531:2020-01-16T17:38:51.773+0000:+1
gnodet:1579176410:2020-01-16T20:06:50.916+0000:1579176410:2020-01-16T20:06:50.916+0000:+1
acosentino:1579233741:2020-01-17T12:02:21.100+0000:1579233741:2020-01-17T12:02:21.100+0000:[~gnodet] can you give a look so we can switch easily? thanks"
0,CAMEL-14409,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-16 09:26:52+00:00,2020-01-16 18:40:56+00:00,"We can optimize Exchange to reduce object allocations and there are some transient state we store in exchange properties that can be stored in a faster way.


Also the created timestamp is a Date which dont add value, using a long is better.","davsclaus:1579142661:2020-01-16T10:44:21.185+0000:1579142661:2020-01-16T10:44:21.185+0000:TODO: update upgrade guide for API change

davsclaus:1579142735:2020-01-16T10:45:35.169+0000:1579142735:2020-01-16T10:45:35.169+0000:Introduced ExtendedExchange like we have ExtendedCamelContext etc where the SPI and advanced API are, so we dont clutter up Exchange.
I do think we could move some of the APIs from Exchange to ExtendedExchange for 3.1 to cleanup. 3.0 is brand new, and many have not migratated. The API change is easy as its just to adapt from exchange to extended to use it."
0,CAMEL-14408,Sub-task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-15 18:18:46+00:00,2020-01-15 18:57:26+00:00,No Desc,
0,CAMEL-14407,Improvement,Major,2.24.2,3.2.0,"
None
",Resolved,Fixed,3.2.0,Andrea Cosentino,Arnaud Chotard,0,2,2020-01-15 15:31:52+00:00,2020-03-02 13:54:25+00:00,"What do you think about adding a consumerTag to the Camel RabbitMQ endpoint ?


The consumerTag allows you to specify a client-generated consumer tag to establish context when invoking channel.basicConsume(). This function is useful from an operational point of view to specialize the names of consumers in the RabbitMQ management console. See attachments.




String basicConsume(String queue, boolean autoAck, String consumerTag, boolean noLocal, boolean exclusive, Map<String, Object> arguments, Consumer callback) throws IOException;



The evolution to realize is simple.


1/ Add the consumerTag in the RabbitMQEndpoint class:




@UriParam (label = ""consumer"")
private String consumerTag = """";



2/ Use the consumerTag in the RabbitConsumer class:




@Override
protected void doStart () throws Exception {
   if (channel == null) {
      throw new IOException (""The RabbitMQ channel is not open"");
   }
   tag = channel.basicConsume (consumer.getEndpoint(). getQueue(), consumer.getEndpoint().isAutoAck(), consumer.getEndpoint().getConsumerTag(), false, consumer.getEndpoint().isExclusiveConsumer(), null, this);
 }



NB : This functionnality exists on Spring AMQP through the org.springframework.amqp.support.ConsumerTagStrategy interface.",davsclaus:1579346823:2020-01-18T19:27:03.114+0000:1579346823:2020-01-18T19:27:03.114+0000:Maybe you can work on a PR with your suggestion
0,CAMEL-14406,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Claus Ibsen,0,2,2020-01-15 13:33:32+00:00,2020-02-12 08:31:34+00:00,"As part of bootstrapping Camel we do some convention to configure components with objects from registry. And as part of this we introspect the component which complex properties it has. We could optimize this and have a source code generated method we can use via the configurer


camel-example-main reports on bootstrap


13:43:36.332 [main] INFO  o.a.c.i.e.DefaultBeanIntrospection - Invoked: 6 times (overall) [Method: getProperties, Target: org.apache.camel.component.timer.TimerComponent@1a75e76a, Arguments: null]
13:43:36.407 [main] INFO  o.a.c.i.e.DefaultBeanIntrospection - Invoked: 7 times (overall) [Method: getProperties, Target: org.apache.camel.component.log.LogComponent@4a8355dd, Arguments: null]
13:43:36.409 [main] INFO  o.a.c.i.e.DefaultBeanIntrospection - Invoked: 8 times (overall) [Method: getPropertyGetter, Target: class org.apache.camel.component.log.LogComponent, Arguments: [exchangeFormatter]]","gnodet:1581467494:2020-02-12T08:31:34.082+0000:1581467494:2020-02-12T08:31:34.082+0000:The reflection calls when configuring processors, components, languages and dataformats have almost been all removed."
0,CAMEL-14405,Bug,Major,2.24.3,3.x,"
None
",Resolved,Information Provided,3.x,Unassigned,Arnaud Chotard,0,2,2020-01-15 11:19:45+00:00,2021-03-22 18:02:57+00:00,"The Camel RabbitMQ endpoint has a connectionFactory property allowing you to use an existing RabbitMQ connection factory.




from(""rabbitmq://server:5672?connectionFactory=#brokerConnectionFactory&..."");

ConnectionFactory brokerConnectionFactory = new com.rabbitmq.client.ConnectionFactory();
  brokerConnectionFactory.setHost(hostname);
  brokerConnectionFactory.setPort(port);
  brokerConnectionFactory.setVirtualHost(virtualHost);
  brokerConnectionFactory.setUsername(username);
  brokerConnectionFactory.setPassword(password);
  brokerConnectionFactory.setAutomaticRecoveryEnabled(true);




The documentation states ""When this option is set, all connection options (connectionTimeout, requestedChannelMax…) set on URI are not used"".


We observed problems during the recovery of connections to the broker when using the automaticRecoveryEnabled option which is present at the connectionFactory level and at the camelEndpoint level :




from(""rabbitmq://server:5672?connectionFactory=#brokerConnectionFactory&automaticRecoveryEnabled=..."");




1/ If camelEndpoint.automaticRecoveryEnabled = false and connectionFactory.automaticRecoveryEnabled = false => The connection and the channel are manually recreated by Camel RabbitMQ. On the other hand the doStart () is not invoked by the start () and the consumption of messages via channel.basicConsume is never reset. Messages are no longer consumed.


2/ If camelEndpoint.automaticRecoveryEnabled = true and connectionFactory.automaticRecoveryEnabled = false => Endless attempt to reconnect: Unable to obtain a RabbitMQ channel. Will try again. Caused by: Waiting for channel to re-open. Camel waits for RabbitMQ client to reset connection indefinitely. Messages are no longer consumed.


3/ If camelEndpoint.automaticRecoveryEnabled = false and connectionFactory.automaticRecoveryEnabled = true => Conflict in reopening channels by Camel Endpoint and by RabbitMQ client. Unknown delivery tag when using basickAck in doHandleDelivery and ShutdownSignalException at the initiative of the application. Messages are no longer consumed.


4/ If camelEndpoint.automaticRecoveryEnabled = true and connectionFactory.automaticRecoveryEnabled = true => It works.


The cause of 1 seems to come from the doStart() method which is not called if the consumer is already started :




@Override 
protected void doStart() throws Exception {
   if (channel == null) { 
      throw new IOException(""The RabbitMQ channel is not open""); 
   }
   tag = channel.basicConsume(consumer.getEndpoint().getQueue(), consumer.getEndpoint().isAutoAck(), """", false, consumer.getEndpoint().isExclusiveConsumer(), null, this); 
}




The cause of 2 and 3 seems to come from the isAutomaticRecoveryEnabled() methods of RabbitConsumer and RabbitMQConsumer classes which tests the value of the property automaticRecoveryEnabled only on the camelEndpoint and not on the connectionFactory :




private boolean isAutomaticRecoveryEnabled() {}}
    return this.endpoint.getAutomaticRecoveryEnabled() != null
        && this.endpoint.getAutomaticRecoveryEnabled();
}","davsclaus:1610000624:2021-01-07T14:23:44.226+0000:1610000624:2021-01-07T14:23:44.226+0000:We are considering rewriting the component and since the CF out of the box has automatic recovery then we shouldn't have all that complex logic in camel-rabbitmq.
davsclaus:1611186911:2021-01-21T07:55:11.669+0000:1611186911:2021-01-21T07:55:11.669+0000:There is a new camel-spring-rabbitmq in Camel 3.8 onwards to use
davsclaus:1616407377:2021-03-22T18:02:57.565+0000:1616407377:2021-03-22T18:02:57.565+0000:Use camel-spring-rabbitmq instead"
0,CAMEL-14404,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,1,2020-01-14 15:16:59+00:00,2020-02-12 08:39:24+00:00,"The goal is to avoid having to rely on xalan + xerces + jaxb to load xml routes.


This is especially interesting when going into native mode, so for camel-k / camel-quarkus.",
0,CAMEL-14403,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.1.0,James Netherton,James Netherton,0,1,2020-01-14 13:53:33+00:00,2020-02-05 07:28:53+00:00,It'd be useful if users could have some finer control over configuration of the WebSocket ServerEndpoint and the deployment of the ServerEndpoint into the host container.,
0,CAMEL-14402,Bug,Major,2.23.1,,"
None
",Resolved,Invalid,None,Unassigned,shiva,0,2,2020-01-14 10:35:57+00:00,2020-01-14 11:15:54+00:00,"Hi Team,


I am using camel version: 2.23.1


Query timeout not working in both JDBC or SQL component.


for jdbc: i tried passing timeout value a  jdbc:dataSource?statement.queryTimeout=1&statement.maxRows=0


 


for sql: 


i tried passing timeout value a  sql:quey?template.queryTimeout=1


 


but if i set the socket timeout (defaultQueryTimeout) value in basic data source that works.but individual Statement query timeout is not working.


please help me with this issue.


 


Thanks,


Shiva",acosentino:1578971754:2020-01-14T11:15:54.313+0000:1578971754:2020-01-14T11:15:54.313+0000:Ask on the users mailing list first. 
0,CAMEL-14401,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Thomas Diesler,Thomas Diesler,0,1,2020-01-14 08:54:00+00:00,2020-01-15 12:37:38+00:00,"Caused by: java.lang.IllegalStateException: Invalid IPv4 address: null
 at io.ipfs.multiaddr.Protocol.addressToBytes(Protocol.java:88)
 at io.ipfs.multiaddr.MultiAddress.decodeFromString(MultiAddress.java:77)
 at io.ipfs.multiaddr.MultiAddress.<init>(MultiAddress.java:18)
 at io.nessus.ipfs.client.DefaultIPFSClient.<init>(DefaultIPFSClient.java:66)
 at org.apache.camel.component.ipfs.IPFSProducer.createClient(IPFSProducer.java:113)
 at org.apache.camel.component.ipfs.IPFSProducer.doStart(IPFSProducer.java:57)",tdiesler:1578978063:2020-01-14T13:01:03.322+0000:1578978063:2020-01-14T13:01:03.322+0000:PR : https://github.com/apache/camel/pull/3479
0,CAMEL-14400,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Thomas Diesler,Thomas Diesler,0,1,2020-01-14 08:31:07+00:00,2020-01-31 07:42:46+00:00,"Add a component for Weka


Weka is tried and tested open source machine learning software that can be accessed through a graphical user interface, standard terminal applications, or a Java API. It is widely used for teaching, research, and industrial applications, contains a plethora of built-in tools for standard machine learning tasks, and additionally gives transparent access to well-known toolboxes such as scikit-learn, R, and Deeplearning4j. 


https://www.cs.waikato.ac.nz/ml/weka/",tdiesler:1580276249:2020-01-29T13:37:29.805+0000:1580282522:2020-01-29T15:22:02.084+0000:PR: https://github.com/apache/camel/pull/3532
0,CAMEL-14399,Improvement,Minor,3.0.0,3.1.0,"

jmx
osgi

",Resolved,Fixed,3.1.0,Claus Ibsen,Rob T,0,2,2020-01-13 21:11:15+00:00,2020-02-11 09:35:19+00:00,OsgiDefaultCamelContext does not use super(false) like the blueprint camel context and therefore a management strategy is created before the OSGi resolvers are set,davsclaus:1579638430:2020-01-22T04:27:10.362+0000:1579638430:2020-01-22T04:27:10.362+0000:You are welcome to provide a PR for us to review
0,CAMEL-14398,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-13 19:16:40+00:00,2020-01-15 11:39:45+00:00,"We could consider having message history off by default which optimizes Camel. Then in off mode, we can still calculate the top history, and print a route stracktrace like exception message as today, but with just the top message. This still aids during tracking the issue.","davsclaus:1579049786:2020-01-15T08:56:26.439+0000:1579059581:2020-01-15T11:39:41.597+0000:TODO: message history stacktrace when turned off *DONE*
TODO: turn on message history if using custom factory *DONE*
TODO: inflight registry browse requires history turned on *DONE*
TODO: await manager browse requires history turned on *DONE*
TODO: update documentation *DONE*
TODO: update upgrade guide *DONE*"
0,CAMEL-14397,Improvement,Major,3.1.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Peter Palaga,Peter Palaga,0,1,2020-01-13 17:00:22+00:00,2020-01-15 11:24:57+00:00,I'd change the DefaultComponent.doInit() to prefer getting the configurers from the Camel registry before checking the FactoryFinder. This would solve the problem reported in https://github.com/apache/camel-quarkus/issues/617,
0,CAMEL-14396,Bug,Minor,None,None,"
None
",Resolved,Fixed,"3.1.0, 3.0.2",James Netherton,James Netherton,0,1,2020-01-13 16:24:07+00:00,2020-01-15 09:40:12+00:00,"If you try to configure the websocket-jsr356 consumer like websocket-jsr356:///test?sessionCount=10, then the WebSocket endpoint is attempted to be configured on the entire path string including the query params. Hence it's not reachable from a client.",
0,CAMEL-14395,Improvement,Minor,None,3.2.0,"
None
",Resolved,Fixed,3.2.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-13 13:14:27+00:00,2020-03-17 07:36:43+00:00,"Reported on user forum


The byte[] vs Byte[] is likely more of a Artemis question how their
JMS client handle this.
For byte[] then Camel creates a javax.jms.BytesMessage and for the
other it creates a javax.jmx.ObjectMessage.


You can force what JMS message type Camel should use with the option
(see its docs)
You can also turn on TRACE logging and see if you see this logging message


LOG.trace(""Optimised for Artemis: Reading from BytesMessage in
streaming mode directly into CachedOutputStream payload"");


It smells that this optimized mode (CAMEL-11931) somehow cause Artemis
to close the stream. (smells like a bug in Artemis).
We could maybe add an option to turn this optimized Artemis mode off.


You can also turn off mapJmsMessage then Camel does not extract
body/headers etc.",
0,CAMEL-14394,Improvement,Minor,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Luca Burgazzoli,1,2,2020-01-13 09:40:03+00:00,2022-09-02 11:48:11+00:00,"camel-spring-boot ha an utility to automatically generate/scaffold starters and a similar utility could be very useful for other subprojects:



camel-kafka-connector to generate/scaffold connectors
camel-quarkus  to generate/scaffold extensions",lb:1578879717:2020-01-13T09:41:57.922+0000:1578879717:2020-01-13T09:41:57.922+0000:I know that some work is already ongogin by [~gnodet] to make amel-spring-boot ' startr-add/delete generic enough to be re-used by sub-projects
0,CAMEL-14393,Improvement,Major,None,None,"
None
",Resolved,Not A Problem,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-11 10:05:47+00:00,2020-01-11 13:41:17+00:00,See the cron component. Its endpoint does some override the setters for the common options like synchronous and so on.,davsclaus:1578721277:2020-01-11T13:41:17.802+0000:1578721277:2020-01-11T13:41:17.802+0000:Okay the others didnt have such a problem as they are a little bit different in their delegate endpoint
0,CAMEL-14392,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-11 10:00:41+00:00,2020-01-11 11:03:03+00:00,"They have this  option listed as component option. Lets filter this out.


See eg the new camel-cron as an example (timer would be that too)",
0,CAMEL-14391,Bug,Major,3.0.0,,"
None
",Resolved,Invalid,None,Unassigned,Madhav,0,2,2020-01-10 21:10:09+00:00,2020-01-11 14:16:30+00:00,"We are trying to migrate from 2.x (2.24.1) to 3.0.0. 


We have a cxfEndpoint routed to camel route . So camel exchange headers and body are populated to soap response accordingly.  It was working fine, but after upgrade defaultCxfbinding (which i believe is responsible class for this), is unable to pass it on. Hence soap response always comes empty. 


 


<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
 <soap:Body/>
</soap:Envelope>


 


 


DataFormat is PAYLOAD.","davsclaus:1578701926:2020-01-11T08:18:46.134+0000:1578701926:2020-01-11T08:18:46.134+0000:You need to provide a sample project / unit test or something that reproduces this, and also discuss this first on the user mailing list.
mkjha58:1578723390:2020-01-11T14:16:30.859+0000:1578723390:2020-01-11T14:16:30.859+0000:I dig down further, actually the issue is BaseTypeConverterRegistry fails to find any type in the context. There is difference in context.

2.X its SpringCamelContext

3. X its SpringBootCamelContext

 

In the former case, it has quite higher number of type mapping present in the defaultTypeConverter.

 

In the former case, during the fallback conversion, it somewhere find the java class type (corresponds to the payload), but in later its not added in whatever mappings are present in the context. Hence the response from DefaultCxfBinding.getBodyFromCamel() returns null. 

 "
0,CAMEL-14390,Bug,Minor,"3.0.0, 3.0.1, 3.1.0",None,"
None
",Resolved,Fixed,"3.1.0, 3.0.2",James Netherton,James Netherton,0,1,2020-01-10 16:04:21+00:00,2020-01-13 10:09:22+00:00,"The websocket-jsr356 producer does not seem to work at all in 3.x. It hangs and no response ever seems to be returned.


It's simple to reproduce by removing the @ignore from the ensureServerModeSendsProperly test case.",
0,CAMEL-14389,Improvement,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Luca Burgazzoli,0,1,2020-01-10 09:35:51+00:00,2020-01-15 13:53:45+00:00,"The entrypoint for ""endpoint dsl"" should be static which allow to use the endpoint DSL in additional places than just inside a EndpointRouteBuilder implementation.


As example I'd like to do something like:




    fluentProducerTemplate
        .to(direct(""test"").advanced().synchronous(true))
        .send()",lb:1578620175:2020-01-10T09:36:15.391+0000:1578620175:2020-01-10T09:36:15.391+0000:/cc [~gnodet]
0,CAMEL-14388,Task,Major,3.0.0,3.1.0,"
None
",Resolved,Won't Fix,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2020-01-10 08:32:01+00:00,2020-01-10 08:38:40+00:00,No Desc,"acosentino:1578616720:2020-01-10T08:38:40.738+0000:1578616720:2020-01-10T08:38:40.738+0000:Cannot be done, because username is used at producer level."
0,CAMEL-14387,Bug,Minor,"3.0.0.RC3, 3.0.0",3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Jean-Baptiste Defard,0,1,2020-01-10 07:30:16+00:00,2020-01-11 14:20:28+00:00,"When attempt to restart Cometd client, the component throw NPE:


2019-11-21 13:11:47.200 INFO 1 — [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Restarting on unexpected disconnect from Salesforce...
2019-11-21 13:11:47.200 DEBUG 1 — [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Waiting to disconnect...
2019-11-21 13:11:52.201 DEBUG 1 — [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Pausing for 0 msecs before restart attempt
2019-11-21 13:11:52.201 INFO 1 — [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.internal.SalesforceSession : Login at Salesforce loginUrl: https://login.salesforce.com/services/oauth2/token
2019-11-21 13:11:52.328 ERROR 1 — [SalesforceHttpClient@3991fe6d-14724] o.a.c.c.s.i.s.SubscriptionHelper : Error restarting: {errors:[

{""errorCode"":""unknown_error"",""message"":""Login error code:[unknown_error] description:[retry your request]"",""fields"":null}

],statusCode:400}


org.apache.camel.component.salesforce.api.SalesforceException: {errors:[

{""errorCode"":""unknown_error"",""message"":""Login error code:[unknown_error] description:[retry your request]"",""fields"":null}

],statusCode:400}
 at org.apache.camel.component.salesforce.internal.SalesforceSession.parseLoginResponse(SalesforceSession.java:279) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.SalesforceSession.login(SalesforceSession.java:130) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.createClient(SubscriptionHelper.java:353) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper.doStart(SubscriptionHelper.java:112) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:277) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at java.base/java.lang.Thread.run(Unknown Source) ~[na:na]


2019-11-21 13:11:52.331 WARN 1 — [SalesforceHttpClient@3991fe6d-14724] o.e.jetty.util.thread.QueuedThreadPool :


java.lang.NullPointerException: null
 at org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$4.run(SubscriptionHelper.java:284) ~[camel-salesforce-3.0.0-RC3.jar:3.0.0-RC3]
 at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938) ~[jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
 at java.base/java.lang.Thread.run(Unknown Source) ~[na:na]


 


When restart in restartClient the client instance is null and (line 284)


if (client.isHandshook()) {
    LOG.info(""Successfully restarted!"");


raise NPE.


probably the patch:


if (client != null && client.isHandshook()) { ....


fix this.


 


When error occur Salesforce subscription never restart. We must restart services.","jbdefard:1578613748:2020-01-10T07:49:08.489+0000:1578613748:2020-01-10T07:49:08.489+0000:I have created a PR :

https://github.com/apache/camel/pull/3473"
0,CAMEL-14386,Bug,Minor,2.22.0,3.x,"
None
",Resolved,Not A Problem,3.x,Andrea Cosentino,Claus Ibsen,1,2,2020-01-09 15:16:29+00:00,2021-10-02 08:32:26+00:00,"We should take a look at this
https://stackoverflow.com/questions/59650142/camel-aws-s3-not-all-bytes-were-read-from-the-s3objectinputstream-aborting-ht?noredirect=1#comment105490591_59650142


And if its still a problem on 3.x, then try to fix it by doing that GET range or whatever is needed.","davsclaus:1633134746:2021-10-02T08:32:26.512+0000:1633134746:2021-10-02T08:32:26.512+0000:As documented in the includeBody you need to close it yourself, or set autoCloseBody=true"
0,CAMEL-14385,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Nicola Ferraro,Nicola Ferraro,0,2,2020-01-09 14:53:36+00:00,2020-02-07 11:33:24+00:00,"This comes from a discussion on Camel K: https://github.com/apache/camel-k-runtime/pull/223#issuecomment-572515581


 


It would be a wrapper component, currently around Quartz only. Camel K would be able to override it with the Kubernetes scheduler if needed.",davsclaus:1580994226:2020-02-06T21:03:46.020+0000:1580994226:2020-02-06T21:03:46.020+0000:Is there more work or can this ticket be closed
0,CAMEL-14384,Improvement,Minor,3.0.0,None,"
None
",Resolved,Fixed,"3.0.1, 3.1.0",Alex Dettinger,Alex Dettinger,0,1,2020-01-09 14:42:51+00:00,2020-01-10 08:30:01+00:00,Do not use reflection on the annotation proxy in DefaultAnnotationExpressionFactory. This is JVM implementation detail and some VM may not implement it.,
0,CAMEL-14383,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-09 14:19:10+00:00,2020-01-09 19:17:00+00:00,"So when you use bean language from simple, then you can refer to a FQN class name by its type class name.


For example




                    .setBody().simple(""The host is ${bean:type:org.apache.camel.util.InetAddressUtil?method=getLocalHostNameSafe}"")




You can now use ${bean:type:xxx}",
0,CAMEL-14382,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Ramu,0,1,2020-01-09 13:47:28+00:00,2020-01-11 14:23:57+00:00,"[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR] org.apache.camel.component.seda.SedaDefaultDiscardWhenFullTest.testDiscardWhenFull
[ERROR]   Run 1: SedaDefaultDiscardWhenFullTest.testDiscardWhenFull:42->ContextTestSupport.assertMockEndpointsSatisfied:353 mock://result Received message count. Expected: <3> but was: <2>
[ERROR]   Run 2: SedaDefaultDiscardWhenFullTest.testDiscardWhenFull:42->ContextTestSupport.assertMockEndpointsSatisfied:353 mock://result Received message count. Expected: <3> but was: <2>
[ERROR]   Run 3: SedaDefaultDiscardWhenFullTest.testDiscardWhenFull:42->ContextTestSupport.assertMockEndpointsSatisfied:353 mock://result Received message count. Expected: <3> but was: <2>
[INFO] 
[WARNING] Flakes: 
[WARNING] org.apache.camel.component.validator.ValidatorEndpointClearCachedSchemaTest.testClearCachedSchema
[ERROR]   Run 1: ValidatorEndpointClearCachedSchemaTest.testClearCachedSchema:81->Assert.assertTrue:41->Assert.fail:88 Less then expected exchanges
[INFO]   Run 2: PASS
[INFO] 
[INFO] 
[ERROR] Tests run: 5603, Failures: 1, Errors: 0, Skipped: 16, Flakes: 1[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary for Camel :: Core Modules 3.1.0-SNAPSHOT:
[INFO] 
[INFO] Camel :: Core Modules .............................. SUCCESS [ 56.465 s]
[INFO] Camel :: Util ...................................... SUCCESS [ 22.526 s]
[INFO] Camel :: API ....................................... SUCCESS [ 13.591 s]
[INFO] Camel :: Management API ............................ SUCCESS [  0.994 s]
[INFO] Camel :: Support ................................... SUCCESS [  4.673 s]
[INFO] Camel :: Caffeine LRUCache ......................... SUCCESS [  2.655 s]
[INFO] Camel :: Headers Map ............................... SUCCESS [03:59 min]
[INFO] Camel :: Base ...................................... SUCCESS [  5.334 s]
[INFO] Camel :: JAXP ...................................... SUCCESS [  2.834 s]
[INFO] Camel :: Core Engine ............................... SUCCESS [ 16.329 s]
[INFO] Camel :: Core ...................................... FAILURE [08:41 min]
[INFO] Camel :: Management ................................ SKIPPED
[INFO] Camel :: Endpoint DSL .............................. SKIPPED
[INFO] Camel :: Core OSGi ................................. SKIPPED
[INFO] Camel :: Core XML .................................. SKIPPED
[INFO] Camel :: Cloud ..................................... SKIPPED
[INFO] Camel :: Main ...................................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  14:46 min
[INFO] Finished at: 2020-01-09T18:41:40+05:30
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M4:test (default-test) on project camel-core: There are test failures.
[ERROR] 
[ERROR] Please refer to /home/xxxx/development/git/direct-camel/camel/core/camel-core/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.
[ERROR] -> [Help 1]",
0,CAMEL-14381,Improvement,Major,None,None,"
None
",Open,Unresolved,Future,Unassigned,Luca Burgazzoli,1,3,2020-01-09 13:27:14+00:00,2022-09-02 11:47:48+00:00,"We should create a mutiny component, similar to camel-reactive-streams 
https://github.com/smallrye/smallrye-mutiny




CamelMutiny.on(context)
    .toMulti(servicenow().table(""incident"").max(100))
    .then(m -> doSomething(m))
    .await().indefinitely();




In Quarkus, we can nicely integrate camel into reactive messaging, like:




@Inject
CamelMutiny mutiny;

@Outgoing
Multi<Whatever> fromEndpoint() {
    return mutiny.toMulti(servicenow().table(""incident"").max(100));
}
@Outgoing
Multi<Whatever> fromEndpointURI() {
    return mutiny.toMulti(""servicenow?table=incident"");
}

@Incoming
void toEndpoint(Multi<Item> items) {
    return mutiny.subscribeTo(items)
        .with(servicenow().table(""incident"").max(100).async());
}
@Incoming
void toEndpointURI(Multi<Item> items) {
    return mutiny.subscribeTo(items)
        .with(s""servicenow?table=incident"");
}","lb:1578625556:2020-01-10T11:05:56.151+0000:1578625556:2020-01-10T11:05:56.151+0000:/cc [~nferraro]
davsclaus:1581297492:2020-02-10T09:18:12.067+0000:1581297492:2020-02-10T09:18:12.067+0000:Nicola are you working on this or we would move it to 3.2"
0,CAMEL-14380,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-09 12:11:41+00:00,2020-01-09 12:23:57+00:00,So its easier to grab the hostname where Camel is running.,
0,CAMEL-14379,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-08 12:45:17+00:00,2020-01-08 13:29:51+00:00,See CAMEL-14375,
0,CAMEL-14378,Wish,Minor,2.22.4,2.25.0,"
None
",Resolved,Won't Fix,2.25.0,Unassigned,Koen Castermans,0,2,2020-01-08 12:43:00+00:00,2020-01-20 08:19:11+00:00,"I wanted to add camel-as2 to my features.xml in Karaf, but I get the following error:



Failed to execute goal org.apache.karaf.tooling:karaf-maven-plugin:4.2.0:assembly (default-assembly) on project karaf: Unable to build assembly: Could not find matching feature for camel-xmljson/2.22.4



Turns out that Karaf support for camel-as2 is only added starting from Camel version 3.0.0-M3. It is not possible for me at the moment to upgrade to Camel version 3, but I do need the component. It is possible that the support is added in a new 2.25.0 version?","davsclaus:1578462376:2020-01-08T13:46:16.233+0000:1578462376:2020-01-08T13:46:16.233+0000:You are welcome to try yourself and add camel-as2 to the features in camel-2.x branch, and test it, and submit a PR. Otherwise its not a priority as we focus our development effort on 3.x now."
0,CAMEL-14377,Improvement,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,James Netherton,James Netherton,0,1,2020-01-08 09:29:37+00:00,2020-01-09 10:35:43+00:00,"The Braintree component has its own JUL-SLF4J bridge class BraintreeLogHandler.


If there's an existing log framework on the classpath that can already do such bridging (E.g JBoss Logging on WildFly and Quarkus), then you end with an endless recursion situation when Braintree invokes any of its logger methods.


It'd be nice to have the option of disabling BraintreeLogHandler in such scenarios.",
0,CAMEL-14376,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2020-01-08 09:25:29+00:00,2020-01-08 12:28:22+00:00,Lets see if we can drop this,"davsclaus:1578449731:2020-01-08T10:15:31.601+0000:1578449731:2020-01-08T10:15:31.601+0000:Adding a new camel-http-base that has the basic non servlet stuff we can move over from camel-http-common
davsclaus:1578451507:2020-01-08T10:45:07.614+0000:1578451717:2020-01-08T10:48:37.795+0000:We drop servlet dependency from

- camel-ahc
- camel-netty-http
- camel-undertow"
0,CAMEL-14375,Improvement,Major,None,"3.0.1, 2.25.0, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 2.25.0, 3.1.0",Claus Ibsen,Claus Ibsen,0,1,2020-01-08 04:18:20+00:00,2020-01-08 13:39:40+00:00,"See SO
https://stackoverflow.com/questions/57912692/camel-defaultshutdownstrategy-logging-full-url


We would need to mask this key (add it to existing known keys) if it always contains sensitive details such as username and passwords","davsclaus:1578428432:2020-01-08T04:20:32.944+0000:1578428432:2020-01-08T04:20:32.944+0000:Also we could consider logging only the start of the route urls (without parameters), as that should be sufficient and with all the parameters its a bit too verbose. Having the route id, and url context-path should be fine. Then no query parameters is logged that may otherwise contain some details you may not want to be logged at INFO level. Likewise on startup."
0,CAMEL-14374,Improvement,Minor,3.1.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Jiri Ondrusek,Jiri Ondrusek,0,2,2020-01-07 15:21:45+00:00,2020-01-09 09:27:30+00:00,"According to documentation https://camel.apache.org/components/latest/irc-component.html there are two options for endpoint urls:



irc:nick@host[:port]/#room[?options]
irc:nick@host[:port]?channels=#channel1,#channel2,#channel3[?options]



But both of these urls are not valid according to camel validations  (e.g. validation by plugins)
""Invalid integer value 6667/#test"" or ""option ""channels"" from doc is not part of the model, hence it is not valid""","davsclaus:1578381969:2020-01-07T15:26:09.903+0000:1578381969:2020-01-07T15:26:09.903+0000:The doc is wrong, the generated doc is the correct, eg irc:hostname:port
davsclaus:1578382012:2020-01-07T15:26:52.113+0000:1578382012:2020-01-07T15:26:52.113+0000:Just fix the documentation
jondruse:1578382738:2020-01-07T15:38:58.501+0000:1578382738:2020-01-07T15:38:58.501+0000:Ok, no problem with this approach. 
It will only need some more refactoring, as parameter channels is not defined in model.

[~davsclaus] Just to be sure, following syntax option works (in master) - irc:nick@host[:port]/#room[?options] - if I remove it from doc (as model doesn't support it), should it still work as before?
I was planning to create issue (enhancement) to get rid of deprecated sanitize method and keep parsing only according to the model - https://github.com/apache/camel/blob/master/components/camel-irc/src/main/java/org/apache/camel/component/irc/IrcConfiguration.java#L502
I can imagine, that by slight change in model, it will allow both url syntaxes without breaking back compatibility.  From my point of view it would be nice, to have the same functionality as is now, but incorporated also in the model and ideally get rid of deprecated method. What do you think?
(it works because of this sanitize method ...)

davsclaus:1578382879:2020-01-07T15:41:19.873+0000:1578382879:2020-01-07T15:41:19.873+0000:Oh yikes lets get rid of that ugly code. Dont care about backwards compatability, its an easy update, just add a note in the 3.0 -> 3.1 upgrade guide
jondruse:1578383012:2020-01-07T15:43:32.126+0000:1578383012:2020-01-07T15:43:32.126+0000:According to the model, there is no way how to define channel right now.
jondruse:1578383090:2020-01-07T15:44:50.022+0000:1578383090:2020-01-07T15:44:50.022+0000:I'll remove the ""ugly"" code and during that, I'll try to not remove any functionality, which works only because of this code (like allow to define channels)"
0,CAMEL-14373,Bug,Major,2.24.2,2.25.0,"
None
",Resolved,Fixed,2.25.0,Jiri Ondrusek,Jiri Ondrusek,0,1,2020-01-07 14:58:00+00:00,2020-01-08 03:49:34+00:00,"Define netty endpoint with requestTimeout property.


Receive message with this endpoint without delay (timeout is not applied).
But Timeout is removed from endpoint (see https://github.com/apache/camel/blob/master/components/camel-netty/src/main/java/org/apache/camel/component/netty/handlers/ClientChannelHandler.java#L155)
Receive second message - delayed - no request timeout is applied.",jondruse:1578380838:2020-01-07T15:07:18.507+0000:1578380838:2020-01-07T15:07:18.507+0000:PR: https://github.com/apache/camel/pull/3466
0,CAMEL-14372,Bug,Minor,"2.18.0, 3.0.0","2.25.0, 3.1.0, 3.0.2","
None
",Resolved,Fixed,"2.25.0, 3.1.0, 3.0.2",Unassigned,Alexander Kardapolov,0,2,2020-01-07 14:09:27+00:00,2021-05-17 08:30:41+00:00,"When using the Validator component with the http protocol the component throw an IllegalArgumentException.


To reproduce the issue run (for example):


.toD(""validator:http://foo.com/apps/func/schemas/part/myap/dummy-schema.xsd"")


Error:


IllegalArgumentException: protocol = http host = null error (see full stack trace in IllegalArgumentException_StackTrace.txt)


 


Find out the root cause: Calling the FileUtil.compactPath from resolveResource method in org/apache/camel/component/validator/DefaultLSResourceResolver.java 


 


Test case and output in attachments.


 


Thanks,


Alex.","davsclaus:1578725740:2020-01-11T14:55:40.956+0000:1578725740:2020-01-11T14:55:40.956+0000:Thanks I could not reproduce this on 3.1, but we have done some work since.
Looking at fixing file util to not compact http urls."
0,CAMEL-14371,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Unassigned,Claus Ibsen,0,1,2020-01-07 13:59:56+00:00,2020-01-08 08:59:52+00:00,No Desc,
0,CAMEL-14370,Task,Minor,None,None,"
None
",Resolved,Not A Problem,None,Unassigned,Thomas Diesler,0,2,2020-01-07 09:23:32+00:00,2020-01-08 09:00:36+00:00,"I think that needs to be fixed. This (https://camel.apache.org/components/3.0.x/asterisk-component.html) works, but this (https://camel.apache.org/components/3.0.0/asterisk-component.html) does not.


 


CrossRef: https://github.com/wildfly-extras/wildfly-camel/issues/2930","davsclaus:1578379331:2020-01-07T14:42:11.925+0000:1578379331:2020-01-07T14:42:11.925+0000:At the moment there is only a version of docs per branch, not tag."
0,CAMEL-14369,Bug,Major,3.0.0,,"
None
",Resolved,Not A Bug,None,Unassigned,imran raza khan,0,2,2020-01-06 22:46:37+00:00,2020-01-08 10:59:17+00:00,"I developed syslog server in camel like below




 from(""netty:udp://127.0.0.1:514?sync=false&allowDefaultCodec=false"")
    .routeId(""sysloglistener"").routeGroup(""sysloglistener-group"")
    .unmarshal().syslog()
    .to(""log:DEBUG?showBody=true&showHeaders=true"");





I tested with simple netcat command and it throws error




 echo ""Test syslog message from Netcat"" | nc -w1 -u 127.0.0.1 514




*Error Trace:*




2020-01-06 23:27:08.756 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Step[ID-imrans-MBP-1578349622523-0-5,DefaultErrorHandler[Unmarshal[org.apache.camel.component.syslog.SyslogDataFormat@270d43a7]]]
    2020-01-06 23:27:08.757 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: CamelInternalProcessor - UnitOfWork - afterProcess - DefaultErrorHandler[Unmarshal[org.apache.camel.component.syslog.SyslogDataFormat@270d43a7]] - ID-imrans-MBP-1578349622523-0-5
    2020-01-06 23:27:08.757 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Step[ID-imrans-MBP-1578349622523-0-5,DefaultErrorHandler[Unmarshal[org.apache.camel.component.syslog.SyslogDataFormat@270d43a7]]]
    2020-01-06 23:27:08.757 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Callback[org.apache.camel.processor.CamelInternalProcessor$$Lambda$1103/433074890@3c888d6f]
    2020-01-06 23:27:08.761 ERROR 2772 --- [ntExecutorGroup] o.a.c.p.e.DefaultErrorHandler            : Failed delivery for (MessageId: ID-imrans-MBP-1578349622523-0-6 on ExchangeId: ID-imrans-MBP-1578349622523-0-5). Exhausted after delivery attempt: 1 caught: java.nio.BufferUnderflowException
    
    Message History
    ---------------------------------------------------------------------------------------------------------------------------------------
    RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
    [sysloglistener    ] [sysloglistener    ] [from[netty://udp://127.0.0.1:514?allowDefaultCodec=false&sync=false]          ] [         2]
    [sysloglistener    ] [unmarshal1        ] [unmarshal[org.apache.camel.model.dataformat.SyslogDataFormat@7ec1effa]        ] [         0]
    
    Stacktrace
    ---------------------------------------------------------------------------------------------------------------------------------------
    
    java.nio.BufferUnderflowException: null
    	at java.nio.Buffer.nextGetIndex(Buffer.java:500) ~[na:1.8.0_121]
    	at java.nio.HeapByteBuffer.get(HeapByteBuffer.java:135) ~[na:1.8.0_121]
    	at org.apache.camel.component.syslog.SyslogConverter.parseMessage(SyslogConverter.java:147) ~[camel-syslog-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.syslog.SyslogDataFormat.unmarshal(SyslogDataFormat.java:47) ~[camel-syslog-3.0.0.jar:3.0.0]
    	at org.apache.camel.support.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:62) ~[camel-support-3.0.0.jar:3.0.0]
    	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.processor.Pipeline.process(Pipeline.java:87) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.netty.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:141) [camel-netty-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.netty.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:112) [camel-netty-3.0.0.jar:3.0.0]
    	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:56) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:365) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:66) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]
    
    2020-01-06 23:27:08.762 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Callback[org.apache.camel.processor.Pipeline$$Lambda$1105/1936839498@779c7a4d]
    2020-01-06 23:27:08.762 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Step[ID-imrans-MBP-1578349622523-0-5,Pipeline[[Channel[Unmarshal[org.apache.camel.component.syslog.SyslogDataFormat@270d43a7]], Channel[sendTo(log://DEBUG?showBody=true&showHeaders=true)]]]]
    2020-01-06 23:27:08.762 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Callback[org.apache.camel.processor.CamelInternalProcessor$$Lambda$1103/433074890@730c9c78]
    2020-01-06 23:27:08.762 DEBUG 2772 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Callback[org.apache.camel.component.netty.handlers.ServerChannelHandler$1@789d178]





I tried with python client




    $ cat syslog-client1.py 
    import logging
    import logging.handlers
    
    my_logger = logging.getLogger('MyLogger')
    my_logger.setLevel(logging.DEBUG)
    
    handler = logging.handlers.SysLogHandler(address = ('127.0.0.1',514))
    
    my_logger.addHandler(handler)
    
    my_logger.debug('this is debug')
    my_logger.critical('this is critical')




this time error is different `Invalid syslog message, missing a mandatory space after month`




 2020-01-06 23:32:03.846 ERROR 2796 --- [ntExecutorGroup] o.a.c.component.syslog.SyslogConverter   : Invalid syslog message, missing a mandatory space after month
    2020-01-06 23:32:03.846 DEBUG 2796 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Step[ID-imrans-MBP-1578349917797-0-7,DefaultErrorHandler[Unmarshal[org.apache.camel.component.syslog.SyslogDataFormat@1da4b3f9]]]
    2020-01-06 23:32:03.846 DEBUG 2796 --- [ntExecutorGroup] o.a.c.i.engine.DefaultReactiveExecutor   : Queuing reactive work: Callback[org.apache.camel.processor.CamelInternalProcessor$$Lambda$1103/1805110340@57ed6495]
    2020-01-06 23:32:03.847 ERROR 2796 --- [ntExecutorGroup] o.a.c.p.e.DefaultErrorHandler            : Failed delivery for (MessageId: ID-imrans-MBP-1578349917797-0-8 on ExchangeId: ID-imrans-MBP-1578349917797-0-7). Exhausted after delivery attempt: 1 caught: java.lang.NullPointerException
    
    Message History
    ---------------------------------------------------------------------------------------------------------------------------------------
    RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
    [sysloglistener    ] [sysloglistener    ] [from[netty://udp://127.0.0.1:514?allowDefaultCodec=false&sync=false]          ] [         0]
    [sysloglistener    ] [unmarshal1        ] [unmarshal[org.apache.camel.model.dataformat.SyslogDataFormat@682d75eb]        ] [         0]
    
    Stacktrace
    ---------------------------------------------------------------------------------------------------------------------------------------
    
    java.lang.NullPointerException: null
    	at org.apache.camel.component.syslog.SyslogConverter.parseRfc3164Date(SyslogConverter.java:370) ~[camel-syslog-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.syslog.SyslogConverter.parseMessage(SyslogConverter.java:185) ~[camel-syslog-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.syslog.SyslogDataFormat.unmarshal(SyslogDataFormat.java:47) ~[camel-syslog-3.0.0.jar:3.0.0]
    	at org.apache.camel.support.processor.UnmarshalProcessor.process(UnmarshalProcessor.java:62) ~[camel-support-3.0.0.jar:3.0.0]
    	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.processor.Pipeline.process(Pipeline.java:87) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) [camel-base-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.netty.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:141) [camel-netty-3.0.0.jar:3.0.0]
    	at org.apache.camel.component.netty.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:112) [camel-netty-3.0.0.jar:3.0.0]
    	at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:99) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:56) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:365) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:66) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-all-4.1.43.Final.jar:4.1.43.Final]
    	at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]






Above server code works if i send syslog message from client developed in Apache Camel, Please find below link of github repo


SyslogApplication","bedla:1578401648:2020-01-07T20:54:08.896+0000:1578401648:2020-01-07T20:54:08.896+0000:Your netcat test is invalid - You are sending some random string, but you need to follow syslog message format.

Camel Syslog Dataformat can handle either RFC-3164 or RFC-5424 compliant messages (this is documented), but python handler does not follow none of these. _logging.handlers.SysLogHandler_ uses timestamp format specified in RFC-5424, but excludes version, which is in RFC-5424 required. Because missing version field, Camel assumes it is RFC-3164 message and fails to decode timestamp.


 In python, you can use some RFC compliant logger - eg [https://github.com/jobec/rfc5424-logging-handler]

If you need to stick with _logging.handlers.SysLogHandler_, the [camel-grok|https://camel.apache.org/components/latest/grok-dataformat.html] should work for you.
{code:java}
.unmarshal().grok(""%{SYSLOGLINE}""){code}
imranrazakhan:1578452357:2020-01-08T10:59:17.355+0000:1578452357:2020-01-08T10:59:17.355+0000:[~bedla] I tested netcat command with fluentd syslog and linux syslog, it works which mean fluentd take message as it is and consider other fields with some default values."
0,CAMEL-14368,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.25.0, 3.1.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2020-01-06 20:53:45+00:00,2020-02-06 20:58:37+00:00,"For example if we have a camel-undertow consumer endpoint like




               <route id=""counter-route"">
                        <from uri=""undertow:http://0.0.0.0:8080/srv/count""/>
                        <process ref=""counterProcessor""/>
                </route>




and the the counterProcessor is like




public class CounterProcessor implements Processor {
        private static final transient Logger LOG = LoggerFactory.getLogger(CounterProcessor.class);

        public void process(Exchange exchange) throws Exception {
                Long count = 0L;
                if (exchange.getIn().getHeader(""count"", Long.class) != null) {
                        count = exchange.getIn().getHeader(""count"", Long.class);
                }
                String cid = exchange.getIn().getHeader(""cid"", String.class);
                Long delay = 0L;
                if (exchange.getIn().getHeader(""delay"", Long.class) != null) {
                        delay = exchange.getIn().getHeader(""delay"", Long.class);
                }

                Long c = count + 1;

                LOG.info(""count before delay {} {}"", cid, c);
                Thread.sleep(delay == null ? 0 : delay);
                LOG.info(""count after delay {} {}"", cid, c);

                exchange.getOut().setBody(UuidBean.uuid() + "" "" + c);
        }
}




If we send http request with url like




http://localhost:8080/srv/count?count=5&cid=42&delay=20000




This suppose to return in 20 sec. If we use ""kill -15 process_id_camel_route"",  we should wait and see this camel route gracefully shutdown and let the flight exchange finish. But it's not this case now, while with camel-jetty, it works as expected.",ffang:1578315304:2020-01-06T20:55:04.451+0000:1578315304:2020-01-06T20:55:04.451+0000:I believe UndertowConsumer should be Suspendable to fix this.
0,CAMEL-14367,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Luca Burgazzoli,0,2,2020-01-06 16:49:48+00:00,2020-01-08 09:53:04+00:00,"Some components, such as camel-netty or camel-ahc have a dependency on netty-all, this is usually fine but I think we should review this policy as:



it will make the dependencies list even more modular and minimal
it will play better wit camel-quarkus as netty-all may bring some unwanted classes that may cause troubles to the native compilation","davsclaus:1578307532:2020-01-06T18:45:32.708+0000:1578307532:2020-01-06T18:45:32.708+0000:Yeah we can look at which bundles the karaf feature uses as it does not use netty-all, but all the netty-xxx jars"
0,CAMEL-14366,Bug,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Zoran Regvart,Zoran Regvart,0,1,2020-01-06 14:32:25+00:00,2020-01-06 14:33:59+00:00,JUnit dependency is transitively inherited in compile scope in the FHIR component.,
0,CAMEL-14335,Bug,Major,3.0.0,,"
None
",Closed,Won't Fix,None,Unassigned,michael elbaz,0,1,2019-12-26 15:35:44+00:00,2019-12-26 17:49:06+00:00,"I'm getting weird comportement when i try to use the original body




    DeadLetterChannelBuilder deadLetterChannelBuilder = new DeadLetterChannelBuilder();
    deadLetterChannelBuilder.setRedeliveryPolicy(new RedeliveryPolicy().disableRedelivery());
    deadLetterChannelBuilder.useOriginalBody();




When i start my module for the first time is consuming some data from rabbitmq then i don't get the original body (when error happen) but the transformed one later when i push the same 'wrong' message (without restarting my module) i will get the originalBody


Here the route




from(""rabbitmq:foo?queue=foo"")
                .routeId(""foo"")
                // Preserve directory content
                .errorHandler(deadLetterChannel(""rabbitmq:dead?queue=dead"")
                .useOriginalBody() // If i use useOriginalMessage() instead it will work as expected
                .onPrepareFailure(exchange -> {
                      Exception exception = exchange.getProperty(EXCEPTION_CAUGHT, Exception.class);
                      // ...
                 }))
                .setBody(constant(""test""));




My scenario is: 



The module not running i pushing to the foo queue some 'wrong' data
I start the module
I get in dead queue the body 'test'
I push the same 'wrong' data again and this time i get the 'wrong' data in dead queue","davsclaus:1577347876:2019-12-26T16:11:16.756+0000:1577347876:2019-12-26T16:11:16.756+0000:Please ask on the user mailing list first and also take a look at the existing documentation on configuring error handling, you do not use the builder clases above, but uses

errorHandler(xxx) in the route dsl
michael992:1577348456:2019-12-26T16:20:56.267+0000:1577348914:2019-12-26T16:28:34.765+0000:Sorry [~davsclaus] but is exactly what i'm doing this is from the documentation  (https://camel.apache.org/manual/latest/dead-letter-channel.html)
{code:java}
 public DeadLetterChannelBuilder myErrorHandler() {
        DeadLetterChannelBuilder deadLetterChannelBuilder = new DeadLetterChannelBuilder();
        deadLetterChannelBuilder.setDeadLetterUri(XXX); // My rabbit in my case...
        deadLetterChannelBuilder.setRedeliveryPolicy(new RedeliveryPolicy().disableRedelivery());
        deadLetterChannelBuilder.useOriginalBody();

        deadLetterChannelBuilder.onPrepareFailure(exchange -> {
            Exception exception = exchange.getProperty(EXCEPTION_CAUGHT, Exception.class);
            exchange.getIn().removeHeaders(REMOVE_HEADERS_PATTERN);
        });

        return deadLetterChannelBuilder;
    }

  // and in my route
 .errorHandler(myErrorHandler())
{code}
And is working as expected but just not at startup
michael992:1577348762:2019-12-26T16:26:02.677+0000:1577348862:2019-12-26T16:27:42.518+0000:To be more accurate this is not happen when using *deadLetterChannelBuilder.useOriginalMessage();* instead of *deadLetterChannelBuilder.useOriginalBody();*

So i'm think there is something going wrong in this case.
michael992:1577353724:2019-12-26T17:48:44.282+0000:1577353724:2019-12-26T17:48:44.282+0000:Ok it was related to this one https://issues.apache.org/jira/browse/CAMEL-14257?filter=-2 sorry for this ticket
michael992:1577353746:2019-12-26T17:49:06.409+0000:1577353746:2019-12-26T17:49:06.409+0000:Due to this one https://issues.apache.org/jira/browse/CAMEL-14257?filter=-2"
0,CAMEL-14334,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Unassigned,Andrea Cosentino,0,2,2019-12-26 11:18:27+00:00,2020-02-06 21:02:33+00:00,https://builds.apache.org/view/C/view/Apache%20Camel/job/camel.daily.karaf/377/console,zregvart:1578548135:2020-01-09T13:35:35.217+0000:1578548135:2020-01-09T13:35:35.217+0000:Looks like it's stable now.
0,CAMEL-14333,Bug,Minor,2.24.2,"2.25.0, 3.1.0","
None
",Resolved,Fixed,"2.25.0, 3.1.0",Luigi De Masi,Luigi De Masi,0,2,2019-12-24 19:10:14+00:00,2020-01-16 09:22:43+00:00,"The Camel JGroups component does not export package org.apache.camel.component.jgroups.cluster, resulting in unresolved dependencies when trying to use jgroups to back the master / singleton pattern documented here though the necessary package / classes seem to be present.","davsclaus:1577318847:2019-12-26T08:07:27.978+0000:1577318847:2019-12-26T08:07:27.978+0000:I dont think we need that export in the pom.xml, we can just remove it and let the bundle plugin figure this out, this is what we do in 99% of the components."
0,CAMEL-14332,Bug,Major,"2.24.2, 3.0.0","3.0.1, 2.25.0, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 2.25.0, 3.1.0",Jean-Baptiste Onofré,Luigi De Masi,0,4,2019-12-24 13:24:34+00:00,2020-12-02 15:00:45+00:00,"In an OSGI context when Blueprint framework is used, if the shutdown strategy timeout is greater than one minute, the timeout is not effective.


When the bundle is stopping, this is the call chain:



BlueprintEventDispatcher (timeout 1 minute) --> BlueprintCamelContext.blueprintEvent --> BlueprintCamelContext.stop (timeout 5 minute by default)



So when the Shutdown strategy timeout is longer than one minute, the BlueprintEventDispatcher timeout is triggered for first, making the shutdown strategy useless.


The solution to this, is to remove the piece of code that handle the destroy event from BlueprintCamelContext.","davsclaus:1577411842:2019-12-27T09:57:22.117+0000:1577411842:2019-12-27T09:57:22.117+0000:Ah okay, yeah its maybe a trade-off with Camel shutdown is 5 minutes (too long) and blueprint having a limit of 1 min.


davsclaus:1577420326:2019-12-27T12:18:46.281+0000:1577420326:2019-12-27T12:18:46.281+0000:Okay but blueprint is calling the destroy method first when its stopping right? So its already being stopped before that timeout triggers?


davsclaus:1577420425:2019-12-27T12:20:25.241+0000:1577420425:2019-12-27T12:20:25.241+0000:And this also implies that if Camel takes > 1 minute to stop then this blueprint timeout is triggered, that then calls stop yet again (which wont hurt as camel is already stopping). So where is the issue/bug really?
ldemasi:1577934576:2020-01-02T11:09:36.645+0000:1577934576:2020-01-02T11:09:36.645+0000:What is happening is that when the blueprint timeout is triggered, the ShutdownStrategy is forced to shutdown earlier than its deadline so user defined or default timeout is not effective when it's longer than one minute.
davsclaus:1578274011:2020-01-06T09:26:51.790+0000:1578274011:2020-01-06T09:26:51.790+0000:Okay then lets try this
jbonofre:1606892445:2020-12-02T15:00:45.644+0000:1606892445:2020-12-02T15:00:45.644+0000:Is it really an issue or just a configuration issue between blueprint timeout and camel shutdown strategy ?"
0,CAMEL-14331,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Unassigned,Claus Ibsen,0,2,2019-12-24 07:38:45+00:00,2019-12-28 19:20:10+00:00,No Desc,"davsclaus:1577144336:2019-12-24T07:38:56.639+0000:1577144336:2019-12-24T07:38:56.639+0000:❯ mvn clean install -Pdev -Pfastinstall
[INFO] BuildTimeEventSpy is registered.
[INFO] Scanning for projects...
[ERROR] [ERROR] Some problems were encountered while processing the POMs:
[WARNING] The expression ${name} is deprecated. Please use ${project.name} instead. @
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-boot:jar is missing. @ line 64, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-cloud:jar is missing. @ line 69, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-boot:jar is missing. @ line 73, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-boot:jar is missing. @ line 73, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-cloud:jar is missing. @ line 77, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-cloud:jar is missing. @ line 69, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel:camel-spring-boot:jar is missing. @ line 73, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel.springboot:camel-telegram-starter:jar is missing. @ line 65, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel.springboot:camel-webhook-starter:jar is missing. @ line 69, column 21
[ERROR] 'dependencies.dependency.version' for org.apache.camel.springboot:camel-servlet-starter:jar is missing. @ line 79, column 21
davsclaus:1577144494:2019-12-24T07:41:34.164+0000:1577144494:2019-12-24T07:41:34.164+0000:We should likely make it the default as we should build against master all the time. And then do releases against a known release.
acosentino:1577532010:2019-12-28T19:20:10.317+0000:1577532010:2019-12-28T19:20:10.317+0000:I added two jobs on CI to be able to test against master on daily basis (for jdk8 and jdk11)

[https://builds.apache.org/job/camel.daily.sb.jdk11.dev/]

[https://builds.apache.org/job/camel.daily.sb.dev/]"
0,CAMEL-14330,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Ramu,Claus Ibsen,0,2,2019-12-24 06:45:05+00:00,2019-12-26 10:30:49+00:00,"You have to specify it, and 99% users wants to invoke a function so lets make it the default","davsclaus:1577318716:2019-12-26T08:05:16.554+0000:1577318716:2019-12-26T08:05:16.554+0000:You should also set the default value on the configuration, so its included in the documentation too
ramu11:1577327449:2019-12-26T10:30:49.549+0000:1577327449:2019-12-26T10:30:49.549+0000:Done"
0,CAMEL-14329,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-24 06:41:31+00:00,2019-12-24 07:42:10+00:00,"We should not do this nested as for example a sql component can discover the datasource but the datasource instance should not attempt to be autowired as well, but used as-is.",
0,CAMEL-14328,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-23 17:46:27+00:00,2019-12-23 17:53:28+00:00,"The endpoint function (from uri path) is always in use, so we can remove it from global component level configuration which can cause confusion
https://stackoverflow.com/questions/59432157/spring-boot-apache-camel-aws-lambda-with-multiple-lambda-endpoints?noredirect=1#comment105096738_59432157",
0,CAMEL-14327,Bug,Major,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Unassigned,Rafał Gała,0,2,2019-12-23 17:02:24+00:00,2019-12-30 09:11:43+00:00,"Today I migrated to 3.0.0 version and there seems to be an issue with Service pooling for the Jt400PgmpProducer.


 


Here's what I have:


 




    from(
        ""seda:someName?concurrentConsumers=2&size=10"")
            .to(""jt400://{{as400.user}}:{{as400.password}}@{{as400.host}}/QSYS.LIB/PROGRAM.LIB/KFKEVR.SRVPGM?fieldsLength=200,2000,4,8,8,1000&outputFieldsIdx=0,1,2,3,4,5&connectionPool=#as400ConnectionPool&format=binary&procedureName=RECEIVEEVENT"");




When concurrentConsumers attribute of seda endpoint is set to 1 everything works fine, but when it is greater than 1 then it looks like the evict method from MultiplePool class calls stop method on a Jt400PgmProducer instance that is still being used (the process method on it is still getting called). This results in nulling the iSeries object inside Jt400PgmProducer instance:




    @Override
    protected void doStop() throws Exception {
        if (iSeries != null) {
            LOG.info(""Releasing connection to {}"", getISeriesEndpoint());
            getISeriesEndpoint().releaseSystem(iSeries);
            iSeries = null;
        }
    }




and when the process method gets called later on this instance, it fails with NPE while constructing ServiceProgramCall:




    @Override
    public void process(Exchange exchange) throws Exception {
...
            pgmCall = new ServiceProgramCall(iSeries);
...            




 


I believe this may be related to producer caching in ServicePool class, some sort of key issue in the cache Map maybe?","davsclaus:1577095521:2019-12-23T18:05:21.319+0000:1577095521:2019-12-23T18:05:21.319+0000:Are you sure its the evict method? Maybe you can breakpoint in that doStop and see the stacktrace. 

Also as workaround you can try to increate the default capacity from 100, to a higher value.

rgala:1577097570:2019-12-23T18:39:30.968+0000:1577097634:2019-12-23T18:40:34.779+0000:Here's the stack, I believe the doStop method is called from onEvict lambda passed to LRUCache instance.

{noformat}
Daemon Thread [ForkJoinPool.commonPool-worker-6] (Suspended (breakpoint at line 212 in Jt400PgmProducer))	
	owns: Object  (id=386)	
	Jt400PgmProducer.doStop() line: 212	
	Jt400PgmProducer(ServiceSupport).stop() line: 159	
	ServiceHelper.stopService(Object) line: 119	
	AsyncProcessorConverterHelper$ProducerToAsyncProducerBridge(AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge).stop() line: 112	
	ServicePool<S>.stop(S) line: 214	
	ServicePool$MultiplePool.evict(S) line: 324	
	ServicePool$MultiplePool.evict(Object) line: 283	
	ServicePool<S>.onEvict(S) line: 88	
	451064016.accept(Object) line: not available	
	CaffeineLRUCache<K,V>.onRemoval(K, V, RemovalCause) line: 239	
	SSLMS<K,V>(BoundedLocalCache<K,V>).lambda$notifyRemoval$1(Object, Object, RemovalCause) line: 333	
	38917799.run() line: not available	
	ForkJoinTask$RunnableExecuteAction.exec() line: 1402	
	ForkJoinTask$RunnableExecuteAction(ForkJoinTask<V>).doExec() line: 289	
	ForkJoinPool$WorkQueue.runTask(ForkJoinTask<?>) line: 1056	
	ForkJoinPool.runWorker(ForkJoinPool$WorkQueue) line: 1692	
	ForkJoinWorkerThread.run() line: 157	
{noformat}

I don't think increasing cache would do any good. From what I see less than 10 instances of Jt400PgmProducer are created.

rgala:1577144735:2019-12-24T07:45:35.749+0000:1577144735:2019-12-24T07:45:35.749+0000:Tried to increase producer cache size, but it looks like it is always set to 1, here is part of the code from SendProcessor class:


{code:java}

    @Override
    protected void doStart() throws Exception {
        if (producerCache == null) {
            // use a single producer cache as we need to only hold reference for one destination
            // and use a regular HashMap as we do not want a soft reference store that may get re-claimed when low on memory
            // as we want to ensure the producer is kept around, to ensure its lifecycle is fully managed,
            // eg stopping the producer when we stop etc.
            producerCache = new DefaultProducerCache(this, camelContext, 1);
            // do not add as service as we do not want to manage the producer cache
        }

{code}
rgala:1577151954:2019-12-24T09:45:54.205+0000:1577151954:2019-12-24T09:45:54.205+0000:I think I got it.

Evictions are done in a separate thread. When the following method is executed:
{code:java}
    protected void onEvict(S s) {
        Endpoint e = getEndpoint.apply(s);
        Pool<S> p = pool.get(e);
        if (p != null) {
            if (p.evict(s)) {
                pool.remove(e);
            }
        } else {
            ServicePool.stop(s);
            try {
                e.getCamelContext().removeService(s);
            } catch (Exception ex) {
                LOG.error(""Error removing service {}"", s, ex);
            }
        }
    }
{code}
the call to *p.evict(s)* results in *doStop()* method of *Jt400PgmProducer* instance being called. After the p.evict(s) method has finished, but before pool.remove(e) call, the producer can still be acquired from the pool, but because the *doStop* has already been called and the *iSeries* field is already nulled, exchange processing fails on NPE.

I set breakpoints in *onEvict(S)* method of *ServicePool* and in *acquire(Endpoint endpoint)* method, they evict/acquire the same *Jt400PgmProducer* instance at the same time.

 
{noformat}
Daemon Thread [ForkJoinPool.commonPool-worker-6] (Suspended (breakpoint at line 85 in ServicePool))	
	ServicePool<S>.onEvict(S) line: 85	
	146690937.accept(Object) line: not available	
	CaffeineLRUCache<K,V>.onRemoval(K, V, RemovalCause) line: 239	
	SSLMS<K,V>(BoundedLocalCache<K,V>).lambda$notifyRemoval$1(Object, Object, RemovalCause) line: 333	
	1106690494.run() line: not available	
	ForkJoinTask$RunnableExecuteAction.exec() line: 1402	
	ForkJoinTask$RunnableExecuteAction(ForkJoinTask<V>).doExec() line: 289	
	ForkJoinPool$WorkQueue.runTask(ForkJoinTask<?>) line: 1056	
	ForkJoinPool.runWorker(ForkJoinPool$WorkQueue) line: 1692	
	ForkJoinWorkerThread.run() line: 157	
{noformat}

{noformat}
Daemon Thread [Camel (camel-1) thread #17 - seda://seda] (Suspended (breakpoint at line 113 in ServicePool))	
	ServicePool<S>.acquire(Endpoint) line: 113	
	DefaultProducerCache.acquireProducer(Endpoint) line: 112	
	DefaultProducerCache.doInAsyncProducer(Endpoint, Exchange, AsyncCallback, ProducerCache$AsyncProducerCallback) line: 264	
	SendProcessor.process(Exchange, AsyncCallback) line: 162	
	RedeliveryErrorHandler$RedeliveryState.run() line: 476	
	DefaultReactiveExecutor$Worker.schedule(Runnable, boolean, boolean, boolean) line: 185	
	DefaultReactiveExecutor.scheduleMain(Runnable, String) line: 59	
	Pipeline.process(Exchange, AsyncCallback) line: 87	
	CamelInternalProcessor.process(Exchange, AsyncCallback) line: 228	
	SedaConsumer.sendToConsumers(Exchange) line: 266	
	SedaConsumer.doRun() line: 180	
	SedaConsumer.run() line: 125	
	RejectableThreadPoolExecutor(ThreadPoolExecutor).runWorker(ThreadPoolExecutor$Worker) line: 1149	
	ThreadPoolExecutor$Worker.run() line: 624	
	Thread.run() line: 748	

{noformat}

Maybe the p.evict() should be called after pool.remove()?
davsclaus:1577408225:2019-12-27T08:57:05.518+0000:1577408225:2019-12-27T08:57:05.518+0000:Ah thanks for spotting this. Yeah we need to find a better solution. 

If its removed then we may need to add it back again if it was not intended to removed yet. Or come up with some locking during evicting so acquire/release are waiting for this task to complete etc.
rgala:1577409847:2019-12-27T09:24:07.075+0000:1577409847:2019-12-27T09:24:07.075+0000:I wonder what the purpose of LRUCache is anyway. In ServicePool class I see that objects are put in this cache but never seem to be retrieved:


{code:java}
    public S acquire(Endpoint endpoint) throws Exception {
        if (!isStarted()) {
            return null;
        }
        S s = getPool(endpoint).acquire();
        if (s != null && cache != null) {
            cache.putIfAbsent(new Key<>(s), s);
        }
        return s;
    }
{code}

and the getPool():


{code:java}
    protected Pool<S> getPool(Endpoint endpoint) {
        return pool.computeIfAbsent(endpoint, this::createPool);
    }
{code}


{code:java}
    private Pool<S> createPool(Endpoint endpoint) {
        boolean singleton = endpoint.isSingleton();
        try {
            S s = producer.apply(endpoint);
            if (s instanceof IsSingleton) {
                singleton = ((IsSingleton) s).isSingleton();
            }
        } catch (Exception e) {
            // Ignore
        }
        if (singleton && capacity > 0) {
            return new SinglePool(endpoint);
        } else {
            return new MultiplePool(endpoint);
        }
    }
{code}

davsclaus:1577410964:2019-12-27T09:42:44.313+0000:1577410964:2019-12-27T09:42:44.313+0000:This only affects components that are non singleton, which is very rare, but the jt400 is that. Another way is to rewrite this to be singleton which it ought to be in the first place.
davsclaus:1577411051:2019-12-27T09:44:11.631+0000:1577411051:2019-12-27T09:44:11.631+0000:Yeah this code is rewrite by [~gnodet] and possibly a bit too complex.

The 2.x code is
https://github.com/apache/camel/blob/camel-2.x/camel-core/src/main/java/org/apache/camel/impl/DefaultServicePool.java
rgala:1577415168:2019-12-27T10:52:48.864+0000:1577415168:2019-12-27T10:52:48.864+0000:I think that Jt400Endpoint can be converted to a singleton. There is a comment saying that it cannot be because the AS400 instance is stored in configuration, but imo this is not true. The AS400ConnectionPool is stored in Configuration, AS400 instances are retrieved using getConnection() method.
davsclaus:1577419265:2019-12-27T12:01:05.743+0000:1577419265:2019-12-27T12:01:05.743+0000:Yeah its using a connection pool so this ought to be safe
rgala:1577422922:2019-12-27T13:02:02.476+0000:1577422922:2019-12-27T13:02:02.476+0000:I changed *isSingleton()* method to return true, but as a result, all threads were executing the process method on the same *Jt400PgmProducer* instance, so they shared the same iSeries object (connection). This may lead to unpredictable results. I modified the code to obtain *AS400* instance within *process()* method and release it back to the connection pool upon finishing.

Please take a look at proposed patch. I checked and the code worked. The amount of connections that were open to iSeries system were equal to amount of consumers on seda endpoint.

 

[^jt400.patch]
davsclaus:1577423373:2019-12-27T13:09:33.204+0000:1577423373:2019-12-27T13:09:33.204+0000:Yeah that patch looks good. One thing to improve is maybe to have the release in a try .. finally block so its released in case of an exception was thrown
rgala:1577424165:2019-12-27T13:22:45.975+0000:1577424165:2019-12-27T13:22:45.975+0000:Ok, here's another one :)

[^jt400.patch]
davsclaus:1577425095:2019-12-27T13:38:15.136+0000:1577425095:2019-12-27T13:38:15.136+0000:Thanks for the patch, its applied to master for Camel 3.1. The bug in the service pool is still there.
rgala:1577425324:2019-12-27T13:42:04.770+0000:1577425324:2019-12-27T13:42:04.770+0000:The same needs to be done also for the Jt400DataQueueProducer. I will provide a patch this weekend.
davsclaus:1577666825:2019-12-30T08:47:05.031+0000:1577666825:2019-12-30T08:47:05.031+0000:Thanks Rafal.

I created a ticket for the bug in the multi pool so we have a dedicated ticket for that bug.
rgala:1577667613:2019-12-30T09:00:13.463+0000:1577667613:2019-12-30T09:00:13.463+0000:Hello. Please find attached the patch for Jt400DataQueueProducer

 

[^jt400_2.patch]
davsclaus:1577668303:2019-12-30T09:11:43.336+0000:1577668303:2019-12-30T09:11:43.336+0000:Thanks for the patches. The bug in multipool is in another JIRA ticket"
0,CAMEL-14326,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.x,Zheng Feng,Claus Ibsen,0,2,2019-12-23 14:10:12+00:00,2020-03-17 03:44:08+00:00,"Create a camel-qute component that uses quarkus as tempalte engine. This allows to do more build time preparation and be faster than using velocity and others etc.


https://quarkus.io/guides/qute","zhfeng:1578510939:2020-01-09T03:15:39.578+0000:1578510939:2020-01-09T03:15:39.578+0000:[~davsclaus] I assign it myself to take a look.
zhfeng:1584387812:2020-03-17T03:43:32.940+0000:1584387812:2020-03-17T03:43:32.940+0000:This component is introduced in the camel-quarkus since 1.0.0-M6"
0,CAMEL-14325,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Vladimir,0,2,2019-12-23 14:07:42+00:00,2019-12-25 12:11:13+00:00,"Add :
find object by id


find object by path


download document


get folder


create folder by path


list folder","Cherepnalkovski:1577081546:2019-12-23T14:12:26.067+0000:1577081546:2019-12-23T14:12:26.067+0000:[https://github.com/apache/camel/pull/3439]
davsclaus:1577247073:2019-12-25T12:11:13.968+0000:1577247073:2019-12-25T12:11:13.968+0000:Thanks for the PR"
0,CAMEL-14324,Bug,Minor,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Dietrich Schulten,0,2,2019-12-23 11:46:42+00:00,2021-01-07 10:20:17+00:00,"When useMDCLogging is set to true on a CamelContext with camel-zipkin, the application fails to start. The error message is java.lang.NoClassDefFoundError: brave/internal/propagation/CorrelationFieldScopeDecorator.


The reason might be that the brave.context.slf4j.MDCScopeDecorator from brave-context-slf4j, introduced into ZipkinTracer with CAMEL-12721, extends brave.internal.propagation.CorrelationFieldScopeDecorator, which seems not to get exported by the brave bundle https://github.com/openzipkin/brave/tree/5.6.5/brave, according to its bnd file (https://github.com/openzipkin/brave/blob/5.6.5/brave/bnd.bnd). Possibly this is why the instance creation fails.


The solution could be to use only exported brave classes (effectively recreating MDCScopeDecorator) or maybe let OSGi create the MDCScopeDecorator instance.","davsclaus:1577095909:2019-12-23T18:11:49.435+0000:1577095909:2019-12-23T18:11:49.435+0000:What version of Camel and karaf are you using?
dschulten:1577258681:2019-12-25T15:24:41.210+0000:1577258681:2019-12-25T15:24:41.210+0000:Karaf 4.2.7 and Camel 3.1.0-SNAPSHOT
davsclaus:1577500694:2019-12-28T10:38:14.250+0000:1577500694:2019-12-28T10:38:14.250+0000:Do you have a sample project that demonstrates this, so its easier to try - maybe put something on github or attach a .zip file
dschulten:1577579970:2019-12-29T08:39:30.575+0000:1577580681:2019-12-29T08:51:21.497+0000:Sure - just use [https://github.com/dschulten/karaf/tree/zipkin-mdc/examples/karaf-camel-example/karaf-camel-example-blueprint]. When you set 

{{useMDCLogging=""false""}}

on the camelContext in route.xml, zipkin works against a Zipkin instance on localhost (e.g. started with {{docker run -d -p 9411:9411 openzipkin/zipkin}}). The problem only occurs when you try to enable the MDC logging.

See the README.md for instructions how to trigger an exchange.

(BTW It is the same fork where I have created the experimental branch opentracing-mdc for MDC support with camel-opentracing, CAMEL-14322)
davsclaus:1608609258:2020-12-22T11:54:18.441+0000:1608609258:2020-12-22T11:54:18.441+0000:Can you try with newer releases of Camel, and Zipkin"
0,CAMEL-14323,Bug,Minor,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Andrea Cosentino,Tapio Piironen,0,1,2019-12-23 08:33:14+00:00,2019-12-23 10:34:41+00:00,"Camel-xmpp component with room password seems to login first but logouts right after. On previous patch missed one place where the room password is required to be added.


Patch included.",
0,CAMEL-14322,Improvement,Major,None,None,"
None
",Resolved,Won't Fix,None,Unassigned,Dietrich Schulten,1,2,2019-12-21 10:05:24+00:00,2022-09-02 11:47:18+00:00,"Allow to hook in a custom enricher where you can add custom data from the current exchange to opentracing traces.


E.g. put a process instance id from some process manager into opentracing baggages for correlation purposes.


Also see CAMEL-12879 and https://stackoverflow.com/q/59428904/743507","dschulten:1576899111:2019-12-21T11:31:51.311+0000:1577084615:2019-12-23T15:03:35.111+0000:See if we can build upon decorators: [https://github.com/apache/camel/commit/6b089f89c84acc81b0e918cd838f1b2619d75fa4]
dschulten:1577490990:2019-12-28T07:56:30.344+0000:1577492118:2019-12-28T08:15:18.166+0000:SpanDecorators are not a good fit to observe an exchange. They are component-specific and they run for every span, not just for the beginning of an exchange.

There are two issues to solve:
 # Allow to observe spans and put traceId, spanId and baggage items into the MDC
 # Allow to add an observer on all exchanges which allows you to write an observer to add information from the exchange to the current span, so you do not have to add interceptors on routes. 

The first is already possible. I was able to implement an {{MdcTracerObserver}} experimentally, based {{on the io.opentracing.contrib:opentracing-api-extensions-tracer}}. Basically, you wrap the {{io.opentracing.Tracer}} into an {{APIExtensionsTracer}} where you can register a {{TraceObserver}}. However I would suggest to make this similar to camel-zipkin and integrate with the {{useMDCLogging}} flag on CamelContext. If that flag is true, we could wrap the tracer and add a default {{MdcTracerObserver}} similar to my experiment (see below). In addition, we could consider to let camel's {{OpenTracingTracer}} implement the {{APIExtensionsManager}} interface directly so people could add their own tracerObservers, as suggested in the readme of opentracing-api-extensions.

The second issue would require to introduce something like a {{TracingExchangeObserver}} with a method that receives the current exchange and the active span and call that in {{OpenTracingEventNotifier.notify}} and {{OpenTracingRoutePolicy.onExchangeBegin}}.

What do you think? Should I create a PR along these lines?

I have made sure that the solution works with Karaf in a forked branch of karaf-camel-example-java: [https://github.com/dschulten/karaf/tree/opentracing-mdc/examples/karaf-camel-example/karaf-camel-example-java]

Also see [https://github.com/opentracing-contrib/java-api-extensions] for the OpenTracing {{TraceObserver}} mechanism.
davsclaus:1662090438:2022-09-02T11:47:18.612+0000:1662090438:2022-09-02T11:47:18.612+0000:use open-telemtry"
0,CAMEL-14321,Improvement,Minor,None,None,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Bob Paulin,0,1,2019-12-20 15:38:55+00:00,2019-12-23 08:15:11+00:00,"One gap identified in the thread [1] was the lack of support for configuring the camel context pre-startup.  This would require a means of identifying RouteBuilders that needed to be started pre-startup and restarting/reloading the context if pre-startup routes were added following other non-prestartup routes.  


Suggest adding a Boolean OSGi Service Property called ""camel.osgi.activator.pre-startup"" that could be set to true for pre startup configuration.  


Second will need to modify the behavior of CamelRoutesActivator to handle this new flag as well as restart/reload.


 


[1] https://lists.apache.org/thread.html/092a0b13ed330e92570ba2bfaa8aabbe3b70cb0ecadfff0b21823156%40%3Cdev.camel.apache.org%3E",
0,CAMEL-14320,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Claus Ibsen,0,1,2019-12-20 04:28:08+00:00,2019-12-27 10:11:49+00:00,"Its a bit out of date
https://camel.apache.org/manual/latest/building.html


Also remove the stuff about mvn idea:idea as we dont really support this way. Just open the pom.xml file from IDEA.


And add note about not opening the entire source code as its a big project, but open each module you work on individually.


And update the pre-requisitie and so on.",
0,CAMEL-14319,Task,Major,None,None,"
None
",Resolved,Fixed,3.5.0,Unassigned,Andrea Cosentino,0,2,2019-12-19 17:38:16+00:00,2020-06-26 05:36:35+00:00,Actually it is using a really old version 1.4.x,"mmelko:1578026055:2020-01-03T12:34:15.450+0000:1578026055:2020-01-03T12:34:15.450+0000:I will look at it
mmelko:1585708262:2020-04-01T10:31:02.003+0000:1585708262:2020-04-01T10:31:02.003+0000:[~acosentino] 3.x is already out. Does it make sense to upgrade to 3.x ?
acosentino:1585708911:2020-04-01T10:41:51.924+0000:1585708911:2020-04-01T10:41:51.924+0000:Yes, it is. We still need the servicemix bundle for it anyway."
0,CAMEL-14318,Bug,Minor,3.0.0,"3.0.1, 2.25.0, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 2.25.0, 3.1.0",Claus Ibsen,Claus Ibsen,0,2,2019-12-19 10:07:02+00:00,2019-12-20 04:04:32+00:00,The generated XSD is wrong as it refers to a non specific type. It should refer to the proxy factory bean,"ggrzybek:1576722565:2019-12-19T10:29:25.176+0000:1576722565:2019-12-19T10:29:25.176+0000:Thanks [~davsclaus], I'm on it, but not necessarily today.
ggrzybek:1576724783:2019-12-19T11:06:23.471+0000:1576724801:2019-12-19T11:06:41.661+0000:Hmm, in camel-spring.xsd there's:
{code:xml}
  <xs:element name=""proxy"" type=""tns:camelProxyFactoryDefinition"">
    <xs:annotation>
      <xs:documentation xml:lang=""en""><![CDATA[
To proxy a service call using a interface
      ]]></xs:documentation>
    </xs:annotation>
  </xs:element>
{code}

so why did you change {{@XmlRootElement(name = ""proxy"")}} to {{@XmlRootElement(name = ""proxyFactoryBean"")}} in {{org.apache.camel.blueprint.CamelProxyFactoryBean}}?
davsclaus:1576725740:2019-12-19T11:22:20.565+0000:1576725740:2019-12-19T11:22:20.565+0000:They cannot be 100% identical as spring got some extra magic in its namespace parser that osgi blueprint dont have. But what matters is the XSD structure from end user pov are similar/the same.


ggrzybek:1576744416:2019-12-19T16:33:36.826+0000:1576744416:2019-12-19T16:33:36.826+0000:This fix is better:
{noformat}
diff --git a/components/camel-blueprint/pom.xml b/components/camel-blueprint/pom.xml
index 674fec41f9a..d5016802caa 100644
--- a/components/camel-blueprint/pom.xml
+++ b/components/camel-blueprint/pom.xml
@@ -358,6 +358,7 @@
                       <fileset dir=""${basedir}/../camel-core-xml/src/main/java"">
                         <include name=""org/apache/camel/core/xml/*.java"" />
                         <include name=""org/apache/camel/core/xml/util/**/*.java"" />
+                        <exclude name=""org/apache/camel/core/xml/CamelProxyFactoryDefinition.java"" />
                       </fileset>
                       <fileset dir=""${basedir}/../../camel-core/src/main/java"">
                         <include name=""org/apache/camel/model/**/*.java"" />
{noformat}

It gives me (in camel-blueprint.xsd):
{code:xml}
  <xs:element name=""proxy"" type=""tns:camelProxyFactoryBean"">
    <xs:annotation>
      <xs:documentation xml:lang=""en""><![CDATA[
To proxy a service call using a interface
      ]]></xs:documentation>
    </xs:annotation>
  </xs:element>
{code}

and it's consistent wrt differences between Spring and Blueprint's CamelContextFactoryBean.

I also compared Spring's {{org.apache.camel.core.xml.CamelProxyFactoryDefinition}} and Blueprint's {{org.apache.camel.blueprint.CamelProxyFactoryBean}} and the latter misses {{camelContextId}} property added with CAMEL-2328... Is this not included in Blueprint's {{org.apache.camel.blueprint.CamelProxyFactoryBean}} on purpose? Or just not added by mistake?
ggrzybek:1576746845:2019-12-19T17:14:05.143+0000:1576746845:2019-12-19T17:14:05.143+0000:PR: https://github.com/apache/camel/pull/3429"
0,CAMEL-14317,Task,Major,3.0.0,None,"

help-wanted

",Resolved,Fixed,3.5.0,Unassigned,Claus Ibsen,0,4,2019-12-19 04:17:41+00:00,2020-08-07 12:28:11+00:00,"There are a few places log4j v1 are in use in the archetypes.


 git grep log4j-version


Those should be migrated to use log4j2 instead","blackfox:1579557921:2020-01-21T06:05:21.825+0000:1579557973:2020-01-21T06:06:13.228+0000:hey Claus, I have cloned the repo and foud the files where log4j is being used... I have searched for how to migrate to log4j2 and it asks to follow some of the rules([https://logging.apache.org/log4j/2.x/manual/migration.html )|https://logging.apache.org/log4j/2.x/manual/migration.html]. I am a little worried to make these changes. are there any precautions I should keep in mind before making these changes.
blackfox:1579561862:2020-01-21T07:11:02.497+0000:1579561946:2020-01-21T07:12:26.722+0000:so I have just changed the archetype-metadata.xml files from camel-archetype-api-component, camel-archetype-dataformat and camel-archetype-spring-boot in archetype directory.

previous

<requiredProperty key=""log4j-version"">
 <defaultValue>${log4j-version}</defaultValue>
 </requiredProperty>



after changing

 

<requiredProperty key=""*log4j2-version*"">
 <defaultValue>${*log4j2-version*}</defaultValue>
 </requiredProperty>
davsclaus:1579591138:2020-01-21T15:18:58.846+0000:1579591138:2020-01-21T15:18:58.846+0000:For changing the maven archetypes its maybe not as easy as changing log4j version, there is also the pom.xml files the archetype uses that needs to be migrated too.
amdmdi:1594531249:2020-07-12T13:20:49.822+0000:1594531249:2020-07-12T13:20:49.822+0000:I fixed some minor issues in the {{camel-archetype-api-component}} and also removed a reference to {{log4j.version}}
See PR [#3995|https://github.com/apache/camel/pull/3995] and [#3996|https://github.com/apache/camel/pull/3996]
zbendhiba:1596690440:2020-08-06T13:07:20.544+0000:1596690440:2020-08-06T13:07:20.544+0000:what is still missing for that JIRA? Do we need to remove log4j from the parent ?
davsclaus:1596745288:2020-08-07T04:21:28.252+0000:1596745288:2020-08-07T04:21:28.252+0000:Yeah if possible we should remove all usage / traces of log4 v1
zbendhiba:1596753020:2020-08-07T06:30:20.032+0000:1596753020:2020-08-07T06:30:20.032+0000:Ok I'll do that
zbendhiba:1596765557:2020-08-07T09:59:17.235+0000:1596765567:2020-08-07T09:59:27.395+0000:PR https://github.com/apache/camel/pull/4079"
0,CAMEL-14316,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Djordje Bajic,0,3,2019-12-18 21:53:08+00:00,2019-12-28 10:25:20+00:00,"Hello!


I would like to clean up a little http component test code. I saw a couple of cases where i can make it look better.","davsclaus:1576888122:2019-12-21T08:28:42.300+0000:1576888122:2019-12-21T08:28:42.300+0000:Thanks so you are welcome to provide PRs for this
dbajic:1577071320:2019-12-23T11:22:00.372+0000:1577071356:2019-12-23T11:22:36.432+0000:[~davsclaus] Will do, it's work in progress.

Just a quick question for you Claus. Is there any reason that all tests throws Exception? I don't see that it is used anywhere.

Also feel free to assign me to this task.
davsclaus:1577075445:2019-12-23T12:30:45.941+0000:1577075445:2019-12-23T12:30:45.941+0000:Its much easier to just throws exception than having to add multiple exceptions etc.

Its fine to comment you work on a ticket. When you have done a bit more work then we can grant your user karma to self assign tickets in jira. So keep contributing :) and btw merry christmas
dbajic:1577075767:2019-12-23T12:36:07.488+0000:1577075767:2019-12-23T12:36:07.488+0000:Thanks for the explanation!

Sounds great to me! Will continue to contribute as much my schedule allows me to.

Merry Christmas to you too! :)
dbajic:1577280806:2019-12-25T21:33:26.103+0000:1577280806:2019-12-25T21:33:26.103+0000:Anyone knows reason why i get this when i run sourcecheck?

 
{code:java}
-----------------------------------------------------------------------
[ERROR] Could not find goal 'prepare-spring-boot-starter' in plugin org.apache.camel:camel-package-maven-plugin:3.1.0-SNAPSHOT among available goals generate-and-attach-archetype-catalog, generate-components-list, generate-dataformats-list, generate-eips-list, generate-endpoint-dsl, generate-jaxb-list, generate-languages-list, generate-legal, generate-others-list, prepare-catalog, prepare-catalog-karaf, prepare-catalog-springboot, prepare-components, prepare-example, prepare-parent-pom, prepare-release-pom, prepare-user-guide, update-doc-component-list, update-readme, update-spring-boot-auto-configuration-readme, validate-components -> [Help 1]
org.apache.maven.plugin.MojoNotFoundException: Could not find goal 'prepare-spring-boot-starter' in plugin org.apache.camel:camel-package-maven-plugin:3.1.0-SNAPSHOT among available goals generate-and-attach-archetype-catalog, generate-components-list, generate-dataformats-list, generate-eips-list, generate-endpoint-dsl, generate-jaxb-list, generate-languages-list, generate-legal, generate-others-list, prepare-catalog, prepare-catalog-karaf, prepare-catalog-springboot, prepare-components, prepare-example, prepare-parent-pom, prepare-release-pom, prepare-user-guide, update-doc-component-list, update-readme, update-spring-boot-auto-configuration-readme, validate-components
	at org.apache.maven.plugin.internal.DefaultMavenPluginManager.getMojoDescriptor(DefaultMavenPluginManager.java:290)
	at org.apache.maven.plugin.DefaultBuildPluginManager.getMojoDescriptor(DefaultBuildPluginManager.java:241)
	at org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator.setupMojoExecution(DefaultLifecycleExecutionPlanCalculator.java:169)
	at org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator.setupMojoExecutions(DefaultLifecycleExecutionPlanCalculator.java:155)
	at org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator.calculateExecutionPlan(DefaultLifecycleExecutionPlanCalculator.java:131)
	at org.apache.maven.lifecycle.internal.DefaultLifecycleExecutionPlanCalculator.calculateExecutionPlan(DefaultLifecycleExecutionPlanCalculator.java:145)
	at org.apache.maven.lifecycle.internal.builder.BuilderCommon.resolveBuildPlan(BuilderCommon.java:96)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:109)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)
	at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
	at org.codehaus.classworlds.Launcher.main(Launcher.java:47)
{code}
davsclaus:1577318425:2019-12-26T08:00:25.217+0000:1577318425:2019-12-26T08:00:25.217+0000:Are you sure you have rebuild the project as spring-boot stuff has been moved out to separate repo
dbajic:1577328306:2019-12-26T10:45:06.065+0000:1577328306:2019-12-26T10:45:06.065+0000:I didn't for some time. Do i need to run fast Install again in order to resolve this? 
davsclaus:1577330873:2019-12-26T11:27:53.157+0000:1577330873:2019-12-26T11:27:53.157+0000:Yeah I would run

git clean -dXf
mvn clean install -P fastinstall

in the root folder.
dbajic:1577366625:2019-12-26T21:23:45.763+0000:1577370643:2019-12-26T22:30:43.356+0000:Tried it, didn't work. Any workaround? 
 Once we resolve this, I will create PR.

Edit: Resolved. I cloned repository again and pulled new changes from the upstream and it worked. Thanks a lot [~davsclaus]!
acosentino:1577366916:2019-12-26T21:28:36.810+0000:1577366916:2019-12-26T21:28:36.810+0000:Git clean -df and rebuild
davsclaus:1577499920:2019-12-28T10:25:20.613+0000:1577499920:2019-12-28T10:25:20.613+0000:Thanks for the PR"
0,CAMEL-14315,New Feature,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Freeman Yue Fang,Freeman Yue Fang,0,2,2019-12-18 20:38:12+00:00,2020-02-06 21:04:56+00:00,No Desc,"davsclaus:1580994216:2020-02-06T21:03:36.584+0000:1580994216:2020-02-06T21:03:36.584+0000:Is there more work or can this ticket be closed
ffang:1580994296:2020-02-06T21:04:56.395+0000:1580994296:2020-02-06T21:04:56.395+0000:sorry, forget to mark this as ""Resolved"""
0,CAMEL-14314,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2019-12-18 11:56:53+00:00,2019-12-21 12:03:52+00:00,No Desc,
0,CAMEL-14313,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2019-12-18 11:02:11+00:00,2019-12-18 11:21:54+00:00,No Desc,
0,CAMEL-14312,Bug,Minor,3.0.0,None,"
None
",Resolved,Fixed,3.1.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-12-18 08:51:29+00:00,2019-12-19 16:16:14+00:00,"There are couple of issues being reported lgtm https://lgtm.com/projects/g/apache/camel/. However some of them need to be fixed/looked at, most importantly identified here: https://lgtm.com/projects/g/apache/camel/alerts/?sort=name&dir=ASC&mode=list&tag=correctness%2Clogic%2Creliability",omarsmak:1576646285:2019-12-18T13:18:05.819+0000:1576646285:2019-12-18T13:18:05.819+0000:Will wait for the second report and check if we need a round 2
0,CAMEL-14311,Improvement,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Aurélien Pupier,0,2,2019-12-18 08:51:19+00:00,2019-12-23 13:54:05+00:00,"it would be nice to have validation of Camel Properties files as we have for Camel URIs on other types of Camel files.


Having methods like CamelCatalog.validatePropertiesFile(String) and/or CamelCatalog.validatePropertyEntry(String)","davsclaus:1576635032:2019-12-18T10:10:32.681+0000:1576635032:2019-12-18T10:10:32.681+0000:What kind of validation are you looking for as the catalog dont know exactly which runtime you use, and if you use spring-boot then it has spring boot options there too which camel-catalog do not know about etc.


apupier:1576635419:2019-12-18T10:16:59.188+0000:1576635434:2019-12-18T10:17:14.898+0000:In the catalog there is the notion of Runtimeprovider. Maybe we can rely on that.

for instance, if I have
camel.component.timer.aninvalidoption=1000
it will report an error saying that the ""aninvalidoption"" is an unknown property.

if I have 
camel.component.timer.basicPropertyBinding=toto
it will report an error saying that the value must be a boolean .

Even if we canot enforce it, I think we can expect that people using camel.{component|main|rest|hystrix|resilience4j}.* are using Camel 
davsclaus:1576638459:2019-12-18T11:07:39.354+0000:1576638459:2019-12-18T11:07:39.354+0000:Yeah okay we can probably add an api to camel-catalog to validate a property line under those conditions, so its mainly for camel-main based runtimes
davsclaus:1576816430:2019-12-20T12:33:50.315+0000:1576816430:2019-12-20T12:33:50.315+0000:Almost got the validation api in camel-catalog. Only a few things missing for camel.main properties.
And then polish a bit to make a nice summary.


davsclaus:1576892137:2019-12-21T09:35:37.014+0000:1577080445:2019-12-23T13:54:05.428+0000:TODO: summary *DONE*
TODO: maven camel-report integration *DONE*
TODO: support [] maps for camel.main configuration *DONE*
davsclaus:1577080434:2019-12-23T13:53:54.601+0000:1577080434:2019-12-23T13:53:54.601+0000:There is now API on CamelContext for this."
0,CAMEL-14310,Improvement,Major,3.0.0,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Aurélien Pupier,0,2,2019-12-18 08:47:46+00:00,2019-12-18 10:09:07+00:00,"I'm wondering in which measure it is possible to provide a clearer separation in the json model.



to have easier access to which group a property is part of:
	
have properties contained inside the group to which it is related
or to have a field group for the property


for properties name, to have only the suffix and not the group prefix. it is possible if one of the 2 previous options is implemented. It will allow less manipulation when accessing the model to provide completion.
for some of the properties, the type can be java.lang.Boolean and some others boolean. Maybe we can use the same for all fields? or it has a different expectations?
same for int/ java.lang.Integer



None of this is blocking usage of the Catalog but I feel that it will be easier to manipulate it with a slightly different catalog. Maybe I miss some use cases explaining the current json format, so let's start a discussion.","davsclaus:1576633579:2019-12-18T09:46:19.287+0000:1576633579:2019-12-18T09:46:19.287+0000:The json structure is based on spring-boot metadata.
davsclaus:1576634932:2019-12-18T10:08:52.785+0000:1576634932:2019-12-18T10:08:52.785+0000:Yeah a int vs Integer can have a little different meaning as the latter can be undefined (eg null) where as int will be initialized to a value such as 0 etc.

Especially for java.lang.Boolean this can be used to know if it was unset (null) then the end user has not configured it, vs we get a true or false value etc."
0,CAMEL-14309,Improvement,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Aurélien Pupier,0,1,2019-12-18 08:32:55+00:00,2019-12-18 09:49:02+00:00,it is currently available here https://github.com/apache/camel/blob/master/core/camel-main/src/main/resources/META-INF/camel-main-configuration-metadata.json but not in the catalog,
0,CAMEL-14308,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Claus Ibsen,0,2,2019-12-18 07:47:47+00:00,2020-01-14 12:32:37+00:00,"Kafka 2.4.0 was released. We should upgrade when we can. 
And we can try to get zookeeper upgraded also as kafka uses the new 3.5.5 release.


OSGi likely need SMX team to do a kafka 2.4.0 bundle release. And it uses Scala 2.13 I think.


And SB should likely also support Kafka 2.4.x.","acosentino:1576629167:2019-12-18T08:32:47.039+0000:1576629167:2019-12-18T08:32:47.039+0000:Bundles are created already, just need to be released.
acosentino:1578468661:2020-01-08T15:31:01.159+0000:1578468661:2020-01-08T15:31:01.159+0000:ZkUtils has been totally removed in 2.4.0.

So the EmbeddedKafka instance cannot be started with the old method. I believe it's time to switch to test containers and get rid of that test code.

[~davsclaus]
davsclaus:1578474577:2020-01-08T17:09:37.087+0000:1578474577:2020-01-08T17:09:37.087+0000:Yeah it would be really good to migrate to test via testcontainers
acosentino:1578976338:2020-01-14T12:32:18.331+0000:1578976338:2020-01-14T12:32:18.331+0000:I removed the tests for Offset Repositories, we need to write something else. Everything seems to be ok. I'll try to move the test suite to testcontainers, we'll need to map the container used to confluent, because testcontainers is basing the image on the confluent one."
0,CAMEL-14307,Improvement,Major,"2.22.1, 2.24.2","3.0.1, 2.25.0, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 2.25.0, 3.1.0",Unassigned,Robin Vanderhallen,0,2,2019-12-18 07:27:40+00:00,2019-12-21 07:31:03+00:00,"The Camel RabbitMQ endpoint does not allow to set an empty routing key when configuring a dead letter exchange:


[error] <0.664.0> Channel error on connection <0.649.0> (192.168.224.3:55000 -> 192.168.224.2:5672, vhost: '/', user: 'rabbitmq'), channel 1:
 operation queue.declare caused a channel exception precondition_failed: inequivalent arg 'x-dead-letter-routing-key' for queue 'testqueue' in vhost '/': received the value 'undefined' of type 'void' but current is none


This is required if you want to keep the original routing key on the message when it is sent to the dead letter queue.
 When setting the deadLetterRoutingKey property to an empty value, the error doesn't appear but the original routing is lost.","davsclaus:1576626279:2019-12-18T07:44:39.611+0000:1576626279:2019-12-18T07:44:39.611+0000:Can you provide some more details how you setup Camel routes and whatnot.
rvanderhallen:1576652467:2019-12-18T15:01:07.088+0000:1576652467:2019-12-18T15:01:07.088+0000:[~davsclaus] I attached a test to reproduce the issue. I'll try to create a PR with the fix.
rvanderhallen:1576723349:2019-12-19T10:42:29.330+0000:1576723349:2019-12-19T10:42:29.330+0000:PR created [https://github.com/apache/camel/pull/3423]"
0,CAMEL-14306,Bug,Major,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Claus Ibsen,0,1,2019-12-18 05:20:08+00:00,2019-12-18 06:43:06+00:00,"See SO
https://stackoverflow.com/questions/59361749/resolveendpointfailedexception-there-are-1-parameters-that-couldnt-be-set-on",
0,CAMEL-14305,Task,Major,3.0.0,None,"
None
",Resolved,Won't Fix,None,Unassigned,Seva Safris,0,3,2019-12-17 08:08:58+00:00,2022-09-02 11:46:58+00:00,"The OpenTracing SpecialAgent includes support for the Apache Camel OpenTracing component. Since the release of Camel v3.0.0, the integration fails to install.


For previous versions of Camel, the SpecialAgent has used the  `InstallOpenTracingTracerRuleTest` to assert that the Camel OpenTracing component works with SpecialAgent.


Since the release of Camel v3.0.0, the `InstallOpenTracingTracerRuleTest` that is in Camel's GitHub has been marked with `@Ignore`. When I remove the `@Ignore` annotation, the test fails. I am not experienced with the Camel OpenTracing component to attempt to debug this issue.


Currently, SpecialAgent integrates the Camel OpenTracing component for versions 2.24.0 to 2.24.2. Does the Apache Camel team desire integration of the Camel 3.0.0 OpenTracing component in SpecialAgent?","davsclaus:1576541943:2019-12-17T08:19:03.615+0000:1576541943:2019-12-17T08:19:03.615+0000:[~garybrown] wonder if you can help and take a look at this?
objectiser:1576557292:2019-12-17T12:34:52.954+0000:1576557292:2019-12-17T12:34:52.954+0000:I applied the following change and it worked:
{noformat}
-@Ignore
 public class InstallOpenTracingTracerRuleTest extends CamelTestSupport {
 
-    @BindToRegistry(""tracer"")
     private static MockTracer tracer = new MockTracer(Propagator.TEXT_MAP);
 
     @EndpointInject(""mock:result"")
@@ -45,6 +44,18 @@ public class InstallOpenTracingTracerRuleTest extends CamelTestSupport {
     @Produce(""direct:start"")
     protected ProducerTemplate template;
 
+    @Override
+    protected CamelContext createCamelContext() throws Exception {
+        CamelContext context = super.createCamelContext();
+
+        OpenTracingTracer ottracer = new OpenTracingTracer();
+        ottracer.setTracer(tracer);
+
+        ottracer.init(context);
+
+        return context;
+    }
+
     @Before
     public void init() {
 {noformat}

But depends whether the @BindToRegistry is important for the agent?

davsclaus:1576558968:2019-12-17T13:02:48.160+0000:1576558968:2019-12-17T13:02:48.160+0000:Gary, no BindToRegistry is not important in this matter as setting up open tracing is done as you do above, so you are welcome to provide a fix as PR
davsclaus:1662090418:2022-09-02T11:46:58.992+0000:1662090418:2022-09-02T11:46:58.992+0000:use opentelemtry"
0,CAMEL-14304,Test,Minor,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Mahesh,0,1,2019-12-16 11:17:06+00:00,2019-12-17 07:25:28+00:00,"Stomp Consumer Header Filter Strategy was introduced in https://github.com/apache/camel/pull/3369.


This is unit test for checking header filter strategy",
0,CAMEL-14303,Bug,Trivial,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Unassigned,Bob Paulin,0,2,2019-12-16 04:18:29+00:00,2020-01-09 10:27:09+00:00,"When using the rest dsl with the following configuration:




 restConfiguration().component(""netty-http"").port(8080)
            .endpointProperty(""matchOnUriPrefix"", ""true"")
            .apiContextPath(""/api-doc"").apiProperty(""api.title"", ""Camel Examples Karaf Rest API"")
            .apiProperty(""api.version"", ""1.0.0"");



Starting the /api-doc route throws the following error:




 org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: netty-http://http://localhost:8080/api-doc?httpMethodRestrict=GET&matchOnUriPrefix=true&matchOnUriPrefix=true due to: Error binding property (matchOnUriPrefix=[true, true]) with name: matchOnUriPrefix on bean: org.apache.camel.component.netty.http.NettyHttpConfiguration@2918e3d7 with value: [true, true] 



This is because the NettyHttpComponent class hard codes matchOnUriPrefix  on this route so it is added twice.  This configuration should only be added if it does not already exists.",davsclaus:1576888317:2019-12-21T08:31:57.470+0000:1576888317:2019-12-21T08:31:57.470+0000:Are all of them done now?
0,CAMEL-14302,Bug,Major,3.0.0,"3.0.1, 3.1.0","

regression

",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Pascal Schumacher,0,2,2019-12-15 13:15:40+00:00,2019-12-16 16:55:01+00:00,"This route worked fine in Camel 2.24.2 (and Spring Boot 2.2.1.RELEASE):




@Component
public class UuidRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from(""seda:in"")
            .setHeader(""CorrelationId"", method(java.util.UUID.class, ""randomUUID""))
            .to(""mock:out"");
    }
}




but fails with Camel 3.0.0 (and Spring Boot 2.2.1.RELEASE (also with Spring Boot 2.2.2.RELEASE)) when the route is used:



2019-12-15 14:00:09.453  WARN 17476 --- [ #1 - seda://in] o.a.camel.component.seda.SedaConsumer    : Error processing exchange. Exchange[]. Caused by: [org.springframework.beans.factory.UnsatisfiedDependencyException - Error creating bean with name 'java.util.UUID': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'byte[]' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}]

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'java.util.UUID': Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'byte[]' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:787) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:226) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1358) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:353) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.apache.camel.spring.spi.SpringInjector.newInstance(SpringInjector.java:64) ~[camel-spring-3.0.0.jar:3.0.0]
	at org.apache.camel.spring.spi.SpringInjector.newInstance(SpringInjector.java:41) ~[camel-spring-3.0.0.jar:3.0.0]
	at org.apache.camel.component.bean.ConstantTypeBeanHolder.getBean(ConstantTypeBeanHolder.java:65) ~[camel-bean-3.0.0.jar:3.0.0]
	at org.apache.camel.component.bean.AbstractBeanProcessor.process(AbstractBeanProcessor.java:71) ~[camel-bean-3.0.0.jar:3.0.0]
	at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:78) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:40) ~[camel-support-3.0.0.jar:3.0.0]
	at org.apache.camel.language.bean.BeanExpression.invokeBean(BeanExpression.java:297) ~[camel-bean-3.0.0.jar:3.0.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:159) ~[camel-bean-3.0.0.jar:3.0.0]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:171) ~[camel-bean-3.0.0.jar:3.0.0]
	at org.apache.camel.processor.SetHeaderProcessor.process(SetHeaderProcessor.java:46) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$RedeliveryState.run(RedeliveryErrorHandler.java:476) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:87) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) ~[camel-base-3.0.0.jar:3.0.0]
	at org.apache.camel.component.seda.SedaConsumer.sendToConsumers(SedaConsumer.java:266) ~[camel-seda-3.0.0.jar:3.0.0]
	at org.apache.camel.component.seda.SedaConsumer.doRun(SedaConsumer.java:180) ~[camel-seda-3.0.0.jar:3.0.0]
	at org.apache.camel.component.seda.SedaConsumer.run(SedaConsumer.java:125) ~[camel-seda-3.0.0.jar:3.0.0]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:831) ~[na:na]
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'byte[]' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {}
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.raiseNoMatchingBeanFound(DefaultListableBeanFactory.java:1695) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1253) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1207) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:874) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:778) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	... 27 common frames omitted




Test to allow reproduction:




@RunWith(CamelSpringBootRunner.class)
@SpringBootTest
public class InvokeBeanNotCreatableBySpring {

    @Produce(uri = ""seda:in"")
    private ProducerTemplate template;
    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint mockOut;

    @Test
    public void test() throws Exception {
        mockOut.expectedMessageCount(1);
        template.sendBody("""");
        mockOut.assertIsSatisfied();
    }
}","davsclaus:1576442337:2019-12-16T04:38:57.727+0000:1576442337:2019-12-16T04:38:57.727+0000:You can use SpEL for this as a workaround. 
pascalschumacher:1576486501:2019-12-16T16:55:01.778+0000:1576486501:2019-12-16T16:55:01.778+0000:Yes, the workaround is to use:

{code:java}
.setHeader(""CorrelationId"").spel(""#{T(java.util.UUID).randomUUID()}"")
{code}

Thank you very much for the quick fix!"
0,CAMEL-14301,New Feature,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Mahesh,0,1,2019-12-15 12:48:01+00:00,2019-12-17 07:25:12+00:00,"Though the org.fusesource.stomp.client.Stomp class has setter method for custom headers, the Camel-Stomp Component has not exposed that option to be set by the users.


Looks like StompEndpoint and StompConfiguration classes would need changes to allow users to set custom headers.",
0,CAMEL-14300,Bug,Critical,3.0.0,None,"
None
",Resolved,Fixed,3.1.0,Luca Burgazzoli,Nicola Ferraro,0,3,2019-12-14 13:55:47+00:00,2019-12-17 08:09:27+00:00,"There are a number of issues opened in Camel K since most DSLs are no longer working. The cause is probably the addition of these overloadings of the `.process()` method that work in Java but fail in Groovy and JS:


https://github.com/apache/camel/commit/e38f2a0751445478a2a71620407a723ffab9ab04


 


Camel K issues:


- https://github.com/apache/camel-k/issues/1143


- https://github.com/apache/camel-k/issues/1144


 


Are they really important for Camel users? Can we deprecate them and then remove in next minor?


 


cc: davsclaus, lb","davsclaus:1576447252:2019-12-16T06:00:52.355+0000:1576447252:2019-12-16T06:00:52.355+0000:Yeah lets deprecate on 3.0.1 and remove on 3.1 and add it to the upgrade guide
davsclaus:1576447395:2019-12-16T06:03:15.601+0000:1576447395:2019-12-16T06:03:15.601+0000:I assume this is for the process method. The others may seem okay to keep ?
lb:1576454699:2019-12-16T08:04:59.391+0000:1576454699:2019-12-16T08:04:59.391+0000:they seems to be ok
lb:1576474986:2019-12-16T13:43:06.664+0000:1576474986:2019-12-16T13:43:06.664+0000:deprecated on 3.0.x and 3.1.0
lb:1576475065:2019-12-16T13:44:25.891+0000:1576475065:2019-12-16T13:44:25.891+0000:[~davsclaus] should we remove the deprecated methods right now or better when we are closed to 3.1.x ?
davsclaus:1576478041:2019-12-16T14:34:01.130+0000:1576478041:2019-12-16T14:34:01.130+0000:Fine to remove so master reflects 3.1 version.

And add a note in the upgrade guide
https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/pages/camel-3x-upgrade-guide.adoc"
0,CAMEL-14299,Bug,Minor,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Gurpal2000,0,3,2019-12-13 22:13:55+00:00,2020-01-17 20:49:02+00:00,"Spring Boot: 2.2.1


Camel: 3.0.0


Works using ""to()""


 




from(""file://d:/tmp/?fileName=test&noop=true"")
.setHeader(""val1"", constant(1))
.setHeader(""val2"", constant(""yo""))
.to(""sql:insert into gbtemp (col1, col2) values (:#val1, :#val2)?dataSource=#dataSource"");




Does not work using "".toD()""




from(""file://d:/tmp/?fileName=test&noop=true"")
.setHeader(""val1"", constant(1))
.setHeader(""val2"", constant(""yo""))
.setHeader(""insertSql"", constant(""insert into gbtemp (col1, col2) values (:#val1, :#val2)""))
.toD(""sql:${header.insertSql}?dataSource=#dataSource"");




This used to work fine under Camel 2.x


Example error lines:




Caused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: sql

Caused by: org.apache.camel.PropertyBindingException: Error binding properties on bean: org.apache.camel.component.sql.SqlComponent@a72b3b2

org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: sql://insert...","davsclaus:1576447481:2019-12-16T06:04:41.518+0000:1576447481:2019-12-16T06:04:41.518+0000:Can you maybe try with master as we have fixed stuff since 3.0.0 release
davsclaus:1576447877:2019-12-16T06:11:17.230+0000:1576447877:2019-12-16T06:11:17.230+0000:I created a test that could not reproduce this
https://github.com/apache/camel/commit/59e26c8cfcdf82267d6bfeb0b7cc005a8df75e4d

If you have still a problem then add a reproducer and/or provide more details from the stacktrace etc.
Gurpal2000:1576486028:2019-12-16T16:47:08.263+0000:1576509909:2019-12-16T23:25:09.939+0000:[~davsclaus] I created a simple test app with Spring Boot and minimal dependencies, and hopefully this show the behaviour [https://github.com/gurpal2000/camelproblemdemo]

Spring Boot 2.2.2.RELEASE + Camel 3.0.0.

*Attached the log.*

 
Gurpal2000:1576502472:2019-12-16T21:21:12.570+0000:1576509929:2019-12-16T23:25:29.091+0000:More: in my application.yml I have 

camel.springboot.main-run-controller: true

Removing this seems to solve this issue _in the particular case where web-starter is used._

The documentation says ""Applications using web modules (e.g. importing the {{org.springframework.boot:spring-boot-web-starter}} module), usually don’t need to use this feature because the application is kept alive by the presence of other non-daemon threads.""

If I remove the web starter module and remove the h2 web console dependency things start going wrong again.
davsclaus:1576554036:2019-12-17T11:40:36.843+0000:1576554036:2019-12-17T11:40:36.843+0000:Ah for spring boot with Camel you should use camel-sql-starter as dependency, eg generally use -starter JARs
davsclaus:1576554882:2019-12-17T11:54:42.926+0000:1576554882:2019-12-17T11:54:42.926+0000:And your sample project dont run out of the box, can you update to make it work.

Gurpal2000:1576603259:2019-12-18T01:20:59.535+0000:1576604814:2019-12-18T01:46:54.125+0000:Ah apologies, a missed the main class; should be good now.

Also - I switched the camel-sql to camel-sql-starter (I see it's part of org.apache.camel.springboot) as per your advice. Removed/disabled web, etc.

I added a query to read back the count as soon as the insert is done. Things work fine. Moment I remove the to(""direct:query"") start seeing errors again. Did I miss something?
davsclaus:1576623014:2019-12-18T06:50:14.947+0000:1576623014:2019-12-18T06:50:14.947+0000:This works fine for me, cannot reproduce any issue.

{code}
    from(""file:tmp-datad"")
      .setHeader(""val1"", constant(1))
      .setHeader(""val2"", constant(""yo""))
      .setHeader(""insertSql"", constant(""insert into tmp (col1, col2) values (:#val1, :#val2)""))
      .toD(""sql:${header.insertSql}?dataSource=#dataSource"")
      //.to(""direct:query"")
    ;

    from(""timer:query"")
      .to(""sql:select count(*) from tmp?outputType=SelectOne&dataSource=#dataSource"")
      .to(""log:result"")
    ;
{code}

This logs the 0 and 1 as output when a file is created in that folder

2019-12-18 07:49:03.679  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:04.683  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:05.688  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:06.691  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:07.696  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:08.699  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:09.703  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:10.706  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 0]
2019-12-18 07:49:11.709  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 1]
2019-12-18 07:49:12.712  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 1]
2019-12-18 07:49:13.712  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 1]
2019-12-18 07:49:14.716  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 1]
2019-12-18 07:49:15.718  INFO 58546 --- [- timer://query] result                                   : Exchange[ExchangePattern: InOnly, BodyType: Long, Body: 1]
Gurpal2000:1576683732:2019-12-18T23:42:12.065+0000:1577028885:2019-12-22T23:34:45.355+0000:[~davsclaus] Going crazy here. I've done exactly the same as you except my from looks like this for example on windows 

{code:java}
from(""file://d:/tmp-data"")
{code}

And then comment out the timer:query. As soon as i create the ""test"" file in the directory I get the errors. And with the errors filling up my screen, when i remove the test file, the errors stop.

I've added a short video on github - https://github.com/gurpal2000/camelproblemdemo/blob/master/CAMEL-14299.mp4

Tried on a different PC same result. Code still works fine with 2.24.1

If i put a sql select as the FIRST thing, then things work, eg:

{code:java}
from(""file://d:/tmp-data"")
.to(""sql:select 1?dataSource=...)
...
{code}

It's almost like there is a difference in how the datasource is initialised or autoconf'd with camel between camel 2 and 3. For me unfortunately this is a blocker in using Camel 3 and I've to continue with 2.x. I don't know where the root cause is Spring or Camel.

[~davsclaus] Reopening - but please Close if you feel that is the right thing to do. I'll post on Stack if you do choose to close.
Gurpal2000:1577018974:2019-12-22T20:49:34.024+0000:1577019018:2019-12-22T20:50:18.959+0000:See prior comments. Reopening - but please Close if you feel that is the right thing to do. I'll post on Stack if you do choose to close.
bedla:1577024043:2019-12-22T22:14:03.272+0000:1577024203:2019-12-22T22:16:43.172+0000:I can reproduce this with your code. The datasource is auto configured with spring boot. During this initialization there are some calls to openConnection, which causes HikariConfig to seal. Then comes in place Camel Introspection trying to set DataSource to HikariConfig object, which is already sealed and cannot be modified (fails with exception *{{The configuration of the pool is sealed once started. Use HikariConfigMXBean for runtime changes.}}*).

Until we find solution, you can use one of these workarounds:

Replace *toD* with *to* and *CamelSqlQuery* header
{code:java}
      .setHeader(""insertSql"", constant(""insert into tmp (col1, col2) values (:?val1, :?val2)"")) //Notice ? instead of #
      .setHeader(""CamelSqlQuery"", header(""insertSql""))
      .to(""sql:insert?dataSource=#dataSource"")
{code}
OR downgrade hikari in your pom to lower version , where sealing mechanism was not implemented
{code:java}
<dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>2.7.4</version>
    </dependency>
{code}
Gurpal2000:1577072560:2019-12-23T11:42:40.085+0000:1577091964:2019-12-23T17:06:04.439+0000:[~bedla] Thank you for your in depth analysis; a seasonal present :)

Question: why would Camel try to set the DS to HikariConfig? I thought one benefit of using Spring/Boot with Camel was so that those sort of things are already taken care of to some extent.

(Could it be related to: https://github.com/brettwooldridge/HikariCP/issues/1095)
davsclaus:1577095853:2019-12-23T18:10:53.422+0000:1577095853:2019-12-23T18:10:53.422+0000:Jan can you post more details. I dont immediately see Camel setting or introspecting datasource.
bedla:1577103912:2019-12-23T20:25:12.010+0000:1577105551:2019-12-23T20:52:31.680+0000:[~davsclaus] I also dont see any direct introspection in code, but it is happening. After increasing logging level with property *bean-introspection-logging-level: info* then right before the exception is logged.
{code:java}
Invoked: 203 times (overall) [Method: setProperty, Target: HikariDataSource (HikariPool-1), Arguments: [dataSource, HikariDataSource (HikariPool-1)]]
{code}
To see the exception you need to comment out the timer route in the reproducer code. Full log with logged introspection is here [^CAMEL-14299.log]

 

[~Gurpal2000] Another workaround you can use in the meantime is to warmup sql component. Call 
{code:java}
getContext().getComponent(""sql"");
{code}
on the beginning of configure method in RouteBuilder 
Gurpal2000:1577112171:2019-12-23T22:42:51.723+0000:1577112171:2019-12-23T22:42:51.723+0000:[~bedla] agreed the warmup works; requires less code alteration. Better than .to(""sql:select 1"") also.
davsclaus:1577140127:2019-12-24T06:28:47.842+0000:1577140127:2019-12-24T06:28:47.842+0000:This has been fixed for 3.1.


Gurpal2000:1579265342:2020-01-17T20:49:02.157+0000:1579265342:2020-01-17T20:49:02.157+0000:Fantastic thank you all."
0,CAMEL-14298,Bug,Minor,3.0.0,,"
None
",Resolved,Abandoned,None,Unassigned,Andrey Tyurin,0,2,2019-12-13 21:41:25+00:00,2020-05-18 19:41:53+00:00,"For example we have route:


from(direct:processSf)


.process(new SomeProcessor())


.toD(sfEndpointName + "":createSObject?sObjectName=AgentWork"")


.process(new ResponseProcessor())


 


where sfEndpointName is like ""salesforce-${header[HeaderConstants.SF_ENDPOINT]}-rest"" - dynamic name for different SF components


HeaderConstants.SF_ENDPOINT is set in SomeProcessor, for example.


 


then response from SF is received when SF producer is stopped. In my case it takes 10 seconds to get event in ResponseProcessor","davsclaus:1576447952:2019-12-16T06:12:32.965+0000:1576447952:2019-12-16T06:12:32.965+0000:In your example your toD is not really dynamic as sfEndpointName is constant
davsclaus:1576448015:2019-12-16T06:13:35.303+0000:1576448015:2019-12-16T06:13:35.303+0000:Can you provide more details, you error report is vague. Does it work with to and not with toD ? And is your SF always slow with a +10 sec response time? There are options on camel-salesforce to set higher timeouts and whatnot.
davsclaus:1589802113:2020-05-18T19:41:53.023+0000:1589802113:2020-05-18T19:41:53.023+0000:No update from reporter"
0,CAMEL-14297,New Feature,Major,None,3.5.0,"
None
",Resolved,Fixed,3.5.0,Claus Ibsen,Luca Burgazzoli,0,2,2019-12-13 16:05:30+00:00,2020-08-12 09:51:54+00:00,"We could introduce a RouteBuilderConfigurer interface that would allow to reduce the ceremony needed to set up routes especially when working with CDI/Spring environments like:




@Produce
RouteBuilderConfigurer myRoutes() {
    return builder -> builder.from("""").to("""")
}




Would be even shorter in kotlin:




@Produce
fun myRoutes: RouteBuilderConfigurer = builder -> builder.from("""").to("""")




A similar idea is implemented in RouteBuilder 


davsclaus does it make sense ?","davsclaus:1576442048:2019-12-16T04:34:08.409+0000:1576442048:2019-12-16T04:34:08.409+0000:Yeah sure
davsclaus:1580995306:2020-02-06T21:21:46.251+0000:1580995306:2020-02-06T21:21:46.251+0000:Did you start work on a prototype?
davsclaus:1580995357:2020-02-06T21:22:37.282+0000:1580995357:2020-02-06T21:22:37.282+0000:And can we get it working with endpointdsl also ?
lb:1581025666:2020-02-07T05:47:46.441+0000:1581025666:2020-02-07T05:47:46.441+0000:I've not yet started working on this, I will have a look after 3.1 is out
davsclaus:1597119698:2020-08-11T12:21:38.805+0000:1597119698:2020-08-11T12:21:38.805+0000:Got a rude prototype working. Need to add the discover of the interface from the registry / so we can have that @Produces stuff working too
davsclaus:1597120774:2020-08-11T12:39:34.749+0000:1597189772:2020-08-12T07:49:32.356+0000:TODO: RouteBuilderConfgurer *DONE*
TODO: Discover RouteBuilderConfigurer from registry and add them as routes (main *DONE*, spring boot *DONE*, quarkus *DONE*)
TODO: camel-example *DONE*
TODO: documentation *DONE*
davsclaus:1597125876:2020-08-11T14:04:36.611+0000:1597125876:2020-08-11T14:04:36.611+0000:There is an example at
https://github.com/apache/camel-examples/blob/master/examples/camel-example-main-lambda/src/main/java/org/apache/camel/example/MyConfiguration.java#L40
davsclaus:1597189818:2020-08-12T07:50:18.768+0000:1597189818:2020-08-12T07:50:18.768+0000:[~lb] I wonder if the name should be LambdaRouteBuilder instead of RouteBuilderConfigurer ?
lb:1597191304:2020-08-12T08:15:04.463+0000:1597191304:2020-08-12T08:15:04.463+0000:[~davsclaus] don't ask me about naming :) 

best would have been to use RoutesBuilder but it's already taken so pick the one you'd like more, I've no strong opinions"
0,CAMEL-14296,Bug,Major,"2.24.2, 3.0.0",,"
None
",Resolved,Cannot Reproduce,None,Unassigned,michael elbaz,0,2,2019-12-13 10:47:17+00:00,2019-12-16 08:11:00+00:00,"This test pass only if i directly use out (MockEnpoint) and not out.getEndpointUri() or string representation but only when i use adviceWith (is weird because i was always doing that in past and never faced this situation)




package com.demo.camel;

import org.apache.camel.EndpointInject;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.AdviceWithRouteBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Before;
import org.junit.Test;

public class AdviceWithFailTest extends CamelTestSupport {
    @EndpointInject(uri = ""mock:out"")
    private MockEndpoint out;

    @Override
    @Before
    public void setUp() throws Exception {
        super.setUp();

       // Commenting this one or using out and not out.getEndpointUri() will make this test pass
        context.getRouteDefinition(out.getEndpointUri()).adviceWith(context, adviceWithRouteBuilder());
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""timer:foo?repeatCount=1"")
                        .setBody(constant(""test""))
                        .routeId(out.getEndpointUri())
                        .to(out.getEndpointUri());
                // Worked one is weird !
                // .to(out);
            }
        };
    }

    @Test
    public void test() throws InterruptedException {
        out.expectedMessageCount(1);
        out.assertIsSatisfied();
    }

    private AdviceWithRouteBuilder adviceWithRouteBuilder() {
        return new AdviceWithRouteBuilder() {
            @Override
            public void configure() throws Exception {
                weaveAddFirst().setBody(constant(""test""));
            }
        };
    }
}




Is weird because before it fail i see this line in my log so it's mean that i get an exchange




2019-12-14 11:59:56,292 [3 - timer://foo] DEBUG SendProcessor                  - >>>> mock://out Exchange[ID-DESKTOP-S8PM2C4-1576321194338-0-1]
2019-12-14 11:59:56,292 [3 - timer://foo] DEBUG MockEndpoint                   - mock://out >>>> 0 : Exchange[ID-DESKTOP-S8PM2C4-1576321194338-0-1] with body: test and headers:{breadcrumbId=ID-DESKTOP-S8PM2C4-1576321194338-0-1, firedTime=Sat Dec 14 11:59:56 CET 2019}




By little changing the route to




@Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""timer:foo?repeatCount=1"")
                        .setBody(constant(""test""))
                        .routeId(out.getEndpointUri())
                        .to(""direct:glue"");

                from(""direct:glue"")
                        .to(out.getEndpointUri());
            }
        };
    }




Will cause the test to pass so i think there is a bug here","acosentino:1576216537:2019-12-13T13:55:37.102+0000:1576216537:2019-12-13T13:55:37.102+0000:what do you mean with resolution incomplete?
michael992:1576292184:2019-12-14T10:56:24.912+0000:1576292609:2019-12-14T11:03:29.199+0000:[~acosentino] I was just closing and reopen for more precision, i wrote some tests until i point the issue. I was thinking is related to camel 3 but it is not.
michael992:1576295610:2019-12-14T11:53:30.998+0000:1576295672:2019-12-14T11:54:32.355+0000:[~davsclaus] What do you think about this one ?
davsclaus:1576448476:2019-12-16T06:21:16.282+0000:1576448476:2019-12-16T06:21:16.282+0000:On Camel 3

public class AdviceWithFailTest extends CamelTestSupport {

    @EndpointInject(""mock:out"")
    private MockEndpoint out;

    @Override
    public boolean isUseAdviceWith() {
        return true;
    }

    @Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
    }

    @Override
    protected RoutesBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""timer:foo?repeatCount=1"")
                        .setBody(constant(""test""))
                        .routeId(out.getEndpointUri())
                        .to(out.getEndpointUri());
            }
        };
    }

    @Test
    public void test() throws Exception {
        // Commenting this one or using out and not out.getEndpointUri() will make this test pass
        AdviceWithRouteBuilder.adviceWith(context, out.getEndpointUri(), rb -> {
            rb.weaveAddFirst().setBody(constant(""test""));
        });
        context.start();

        out.expectedMessageCount(1);
        out.assertIsSatisfied();
    }

}
davsclaus:1576448530:2019-12-16T06:22:10.483+0000:1576448530:2019-12-16T06:22:10.483+0000:Read the documentation on using advice-with, you need to set that in the test support class.

Next time you ask for help then use the mailing list first and study the docs, other examples more please.
michael992:1576455060:2019-12-16T08:11:00.720+0000:1576455060:2019-12-16T08:11:00.720+0000:Ok thanks"
0,CAMEL-14295,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2019-12-13 09:58:01+00:00,2020-01-02 14:30:21+00:00,"[org.ops4j.pax.exam.spi.reactors.ReactorManager] INFO : suite finished
[ERROR] Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 19.078 s <<< FAILURE! - in org.apache.camel.itest.karaf.CamelCmSmsTest
[ERROR] org.apache.camel.itest.karaf.CamelCmSmsTest.test  Time elapsed: 19.021 s  <<< ERROR!
java.lang.ClassNotFoundException: javax.validation.NoProviderFoundException (no security manager: RMI class loader disabled)







Caused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: cm-smsCaused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: cm-sms at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:503) at org.apache.camel.itest.springboot.command.ComponentTestCommand.executeTest(ComponentTestCommand.java:45) at org.apache.camel.itest.springboot.command.ComponentTestCommand.executeTest(ComponentTestCommand.java:32) at org.apache.camel.itest.springboot.command.AbstractTestCommand.execute(AbstractTestCommand.java:48) at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:498) at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344) at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198) at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) at org.springframework.aop.interceptor.AsyncExecutionInterceptor.lambda$invoke$0(AsyncExecutionInterceptor.java:115) at java.util.concurrent.FutureTask.run(FutureTask.java:266) ... 3 moreCaused by: org.apache.camel.RuntimeCamelException: Cannot auto create component: cm-sms at org.apache.camel.impl.engine.AbstractCamelContext.initComponent(AbstractCamelContext.java:564) at org.apache.camel.impl.engine.AbstractCamelContext.access$000(AbstractCamelContext.java:165) at org.apache.camel.impl.engine.AbstractCamelContext$2.apply(AbstractCamelContext.java:489) at org.apache.camel.impl.engine.AbstractCamelContext$2.apply(AbstractCamelContext.java:485) at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660) at org.apache.camel.impl.engine.AbstractCamelContext.getComponent(AbstractCamelContext.java:485) ... 15 moreCaused by: javax.validation.ValidationException: HV000183: Unable to initialize 'javax.el.ExpressionFactory'. Check that you have the EL dependencies on the classpath, or use ParameterMessageInterpolator instead at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.buildExpressionFactory(ResourceBundleMessageInterpolator.java:123) at org.hibernate.validator.messageinterpolation.ResourceBundleMessageInterpolator.<init>(ResourceBundleMessageInterpolator.java:47) at org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultMessageInterpolator(ConfigurationImpl.java:474) at org.hibernate.validator.internal.engine.ConfigurationImpl.getDefaultMessageInterpolatorConfiguredWithClassLoader(ConfigurationImpl.java:650) at org.hibernate.validator.internal.engine.ConfigurationImpl.getMessageInterpolator(ConfigurationImpl.java:397) at org.hibernate.validator.internal.engine.ValidatorFactoryImpl.<init>(ValidatorFactoryImpl.java:183) at org.hibernate.validator.HibernateValidator.buildValidatorFactory(HibernateValidator.java:38) at org.hibernate.validator.internal.engine.ConfigurationImpl.buildValidatorFactory(ConfigurationImpl.java:364) at javax.validation.Validation.buildDefaultValidatorFactory(Validation.java:103) at org.apache.camel.component.cm.CMComponent.doInit(CMComponent.java:78) at org.apache.camel.support.service.ServiceSupport.init(ServiceSupport.java:80) at org.apache.camel.support.service.ServiceHelper.initService(ServiceHelper.java:55) at org.apache.camel.impl.engine.AbstractCamelContext.initComponent(AbstractCamelContext.java:560) ... 20 more
 at org.apache.camel.itest.springboot.CamelCmSmsTest.componentTests(CamelCmSmsTest.java:44)",
0,CAMEL-14294,Task,Minor,None,None,"
None
",Resolved,Abandoned,None,Unassigned,Pasquale Congiusti,0,1,2019-12-13 08:21:42+00:00,2022-09-02 11:46:37+00:00,"https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/pages/camel-3x-upgrade-guide.adoc


Add a chapter highlighting the changes needed to migrate from camel 3.0 to 3.1 for camel-mongodb and camel-mongodb-gridfs.",
0,CAMEL-14293,Improvement,Minor,None,None,"
None
",Resolved,Fixed,4.x,Unassigned,Pasquale Congiusti,0,2,2019-12-13 08:13:37+00:00,2023-12-25 18:47:08+00:00,"As discussed in CAMEL-14258, the mongo-java-driver library is deprecating com.mongodb.MongoClient class in favour of com.mongodb.client.MongoClient interface. We should apply same refactory as provided in camel-mongodb component.",davsclaus:1703501228:2023-12-25T18:47:08.223+0000:1703501228:2023-12-25T18:47:08.223+0000:This component is using com.mongodb.client.MongoClient now
0,CAMEL-14292,Improvement,Major,2.24.2,"2.24.3, 3.0.1, 2.25.0, 3.1.0","
None
",Resolved,Fixed,"2.24.3, 3.0.1, 2.25.0, 3.1.0",Andrea Cosentino,Matthieu Ricciuti,0,3,2019-12-12 09:49:00+00:00,2020-04-01 11:53:59+00:00,"Current version of this component has an annoying implicit dependency to ""com.google.http-client:google-http-client:1.22.0"" library, due to the following import in GooglePubsubEndpoint class:


 import com.google.api.client.repackaged.com.google.common.base.Strings;


The wrong Strings class is being used ( the one from guava repackaged in  google-http-client library, instead of the expected one from com.google.guava )


This makes very difficult to use this component as soon as we introduced other google-related libraries that bring newer version of `com.google.api-client:google-api-client` : newer version of this library depend on version '1.28.0' of the 'google-http-client' library which does not repackage guava anymore.


At runtime we simply get a NoClassDefFoundError:


java.lang.NoClassDefFoundError: com/google/api/client/repackaged/com/google/common/base/Stringsjava.lang.NoClassDefFoundError: com/google/api/client/repackaged/com/google/common/base/Strings at org.apache.camel.component.google.pubsub.GooglePubsubEndpoint.afterPropertiesSet(GooglePubsubEndpoint.java:87)


 


Could you please fix this wrong import to ""Strings"" class?


Thanks.","davsclaus:1576116239:2019-12-12T10:03:59.330+0000:1576116239:2019-12-12T10:03:59.330+0000:You are welcome to provide a PR
mricciuti:1576116461:2019-12-12T10:07:41.006+0000:1576116461:2019-12-12T10:07:41.006+0000:Hi,

I made simple PR in my own fork repo, see: [https://github.com/mricciuti/camel/commit/319bae3949b4816fb281f8dc9acf8c35bdf90d0a]

 

I thinks better would be not to depend on guava at all (not for a simple nullstring check in one single place in the module)

 
acosentino:1576116551:2019-12-12T10:09:11.044+0000:1576116551:2019-12-12T10:09:11.044+0000:Absolutely agreed, I think you can open a PR against master and camel-2.x with this fix, if you have time, otherwise I'll take care of it.
mricciuti:1576116884:2019-12-12T10:14:44.818+0000:1576116884:2019-12-12T10:14:44.818+0000:Thanks for your quick feedback.

I created PR  : [https://github.com/apache/camel/pull/3404]

 "
0,CAMEL-14291,Bug,Major,3.0.0.RC3,,"
None
",Resolved,Not A Bug,None,Unassigned,Andrey Tyurin,0,2,2019-12-11 22:18:13+00:00,2019-12-11 23:09:28+00:00,"When several events are received from Salesforce they are processed in wrong order for createdDate field:


 


2019-12-11 14:01:40.751 [SalesforceHttpClient@4eac29e0-142] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper$5 - Received messages [{data={event={createdDate=2019-12-11T22:01:40.258Z, replayId=15230, type=deleted}, sobject={Id=0JRf4000003pfDYGAY}}, channel=/topic/ExtRoutPsr}, {data={event={createdDate=2019-12-11T22:01:40.073Z, replayId=10779, type=updated}, sobject={Status=3, IsDeleted=false, UserId=005f4000001gXxkAAE, ServiceChannelId=0N9f4000000M9YjCAK, DeclineReason=null, WorkItemId=500f400000NOxKNAA1, Id=0Bzf4000005akscCAA, PendingServiceRoutingId=0JRf4000003pfDYGAY}}, channel=/topic/ExtRoutAgentWork}, 

{channel=/meta/connect, id=29, successful=true}

]


2019-12-11 14:01:40.751 [SalesforceHttpClient@4eac29e0-142] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper - Received Message: {data={event={createdDate=2019-12-11T22:01:40.258Z, replayId=15230, type=deleted}, sobject={Id=0JRf4000003pfDYGAY}}, channel=/topic/ExtRoutPsr}


2019-12-11 14:01:40.752 [SalesforceHttpClient@4eac29e0-142] DEBUG org.apache.camel.component.salesforce.internal.streaming.SubscriptionHelper - Received Message: {data={event={createdDate=2019-12-11T22:01:40.073Z, replayId=10779, type=updated}, sobject={Status=3, IsDeleted=false, UserId=005f4000001gXxkAAE, ServiceChannelId=0N9f4000000M9YjCAK, DeclineReason=null, WorkItemId=500f400000NOxKNAA1, Id=0Bzf4000005akscCAA, PendingServiceRoutingId=0JRf4000003pfDYGAY}}, channel=/topic/ExtRoutAgentWork}","bedla:1576076968:2019-12-11T23:09:28.424+0000:1576076968:2019-12-11T23:09:28.424+0000:The order of events is not guaranteed - [https://developer.salesforce.com/docs/atlas.en-us.api_streaming.meta/api_streaming/using_streaming_api_message_order.htm]

If you expect events sorted by createdDate, you need to sort it yourself (Eg with [Resequence EIP|https://camel.apache.org/manual/latest/resequence-eip.html])"
0,CAMEL-14290,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Claus Ibsen,0,1,2019-12-11 09:54:47+00:00,2020-01-08 14:38:04+00:00,No Desc,"davsclaus:1576029327:2019-12-11T09:55:27.443+0000:1576029327:2019-12-11T09:55:27.443+0000:We need SMX bundles for this
davsclaus:1576029405:2019-12-11T09:56:45.843+0000:1576029405:2019-12-11T09:56:45.843+0000:Also upgrade the docker image version in the integration tests of camel-pulsar
davsclaus:1576029405:2019-12-11T09:56:45.885+0000:1576029405:2019-12-11T09:56:45.885+0000:Also upgrade the docker image version in the integration tests of camel-pulsar"
0,CAMEL-14289,Improvement,Major,None,3.x,"
None
",Resolved,Fixed,3.x,Ramu,Claus Ibsen,0,1,2019-12-11 09:41:29+00:00,2020-01-01 10:49:50+00:00,"Endpoints should generally be singletons, and then state stored on the consumer or producer. Or shared state on component level.",
0,CAMEL-14288,Improvement,Major,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Claus Ibsen,0,1,2019-12-11 05:21:30+00:00,2019-12-11 07:44:11+00:00,"When you set list types from a string value in endpoint uri, then it should deal better when we refer to beans in registry, which will be a single entity that should be wrapped into a list. 


The bean reflection configurer could handle this, but the new optimized source code generated configurer didnt",
0,CAMEL-14287,Improvement,Major,None,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Claus Ibsen,0,1,2019-12-11 04:29:16+00:00,2019-12-11 07:44:20+00:00,So its initialized eager which is needed for component to load its source code generated configurer classes,
0,CAMEL-14286,Task,Minor,3.1.0,None,"
None
",Resolved,Fixed,3.1.0,Unassigned,Bob Paulin,0,2,2019-12-10 15:29:33+00:00,2020-02-06 21:09:46+00:00,"Usage of camel-osgi-activator is not clear to the community [1].  Create examples using adding a rest endpoint at runtime to demonstrate some capabilities.


 


[1]https://lists.apache.org/thread.html/c72efef1f194a21c28da7dfdc8e238fde2c8bf3473fdc691191d3a36%40%3Cdev.camel.apache.org%3E","fpapon:1579148893:2020-01-16T12:28:13.812+0000:1579148893:2020-01-16T12:28:13.812+0000:The PR is merged so I think this issue can be resolved.

Is there anything else to add? (I can work on it :) )
bob:1579154377:2020-01-16T13:59:37.300+0000:1579154377:2020-01-16T13:59:37.300+0000:Hi [~fpapon] .  From my perspective I think the example address the intent of this issue but always open to improvement.  I know JB mentioned he was going to look at cleaning up some of the OSGi work.  My next step is working some of my existing projects into using the component and seeing where that takes me.
fpapon:1579434841:2020-01-19T19:54:01.252+0000:1579434841:2020-01-19T19:54:01.252+0000:Hi [~bob] ok ;)

I'm also working on some Camel integration with Karaf / OSGi, I will check with JB."
0,CAMEL-14255,Task,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Aurélien Pupier,0,2,2019-12-04 09:39:58+00:00,2019-12-04 10:13:57+00:00,"from https://camel.apache.org/manual/latest/exchange-pattern.html
there is a link to http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/ExchangePattern.html which doesn't exist","apupier:1575423927:2019-12-04T09:45:27.347+0000:1575423965:2019-12-04T09:46:05.126+0000:the ExchangePattern class is now part of camel-api jar but there is nothing on https://camel.apache.org/maven/current/camel-api/apidocs/org/apache/camel/ExchangePattern.html neither
davsclaus:1575424831:2019-12-04T10:00:31.316+0000:1575424831:2019-12-04T10:00:31.316+0000:Click edit this page, and remove the hyperlink please"
0,CAMEL-14254,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-04 08:31:39+00:00,2019-12-11 09:58:21+00:00,"Lets start having migration guides between minor releases. We can have a Camel 3.x migration guide and then add all to the same file.


The existing we have is from Camel 2 -> 3 so lets keep that one as-is.","davsclaus:1575945061:2019-12-10T10:31:01.760+0000:1575945061:2019-12-10T10:31:01.760+0000:The guide is here, which we should keep up to date
https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/pages/camel-3x-migration-guide.adoc
davsclaus:1575946365:2019-12-10T10:52:45.653+0000:1575946365:2019-12-10T10:52:45.653+0000:And the guide is now online on the website
https://camel.apache.org/manual/latest/camel-3x-migration-guide.html"
0,CAMEL-14253,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-04 08:30:19+00:00,2019-12-04 09:12:51+00:00,"Lets rework this so the component works like others, where we configure broker urls on component level, and context-path is topic name.


This allows to configure broker urls in application.properties and/or via ENV variables more easily OOTB and works similar to others like kafka/jms/ etc","davsclaus:1575421971:2019-12-04T09:12:51.110+0000:1575421971:2019-12-04T09:12:51.110+0000:This changes the syntax from

nats:brokers?topic=xxx

to

nats:xxx?brokers=aaaa

"
0,CAMEL-14252,New Feature,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-04 07:03:27+00:00,2019-12-04 07:29:46+00:00,"If there is a replyTo in the message, then you are supposed to send back a reply message.",
0,CAMEL-14251,Improvement,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-04 06:50:08+00:00,2019-12-04 10:00:48+00:00,"It stores the nats message where you likely want to store the payload as body, and other details as headers.",
0,CAMEL-14250,Improvement,Minor,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-12-03 17:08:45+00:00,2020-01-09 10:33:44+00:00,"I recall this discussion came up few months ago to allow custom configurations into camel-kafka component as currently is not possible. 


Before jumping on CAMEL-14062, it would make sense to have this done first as the maven plugin will need a lot of work and testing in order not to break any existing config",
0,CAMEL-14249,Task,Minor,None,None,"
None
",Resolved,Fixed,None,Andrea Cosentino,Omar Al-Safi,0,4,2019-12-03 16:52:34+00:00,2019-12-11 13:08:14+00:00,"Thanks to RedHat folks to volunteer camel-kafka-connect https://github.com/jboss-fuse/camel-kafka-connector to asf and therefore be one subproject of Camel community projects. 


This ticket represents the initial effort to get the project into asf and hence setup the necessary infrastructure in order to get the project ready to community contributions.","omarsmak:1576040202:2019-12-11T12:56:42.061+0000:1576040202:2019-12-11T12:56:42.061+0000:[~acosentino] shall we as well create the gitter channel for this project?
acosentino:1576040685:2019-12-11T13:04:45.592+0000:1576040685:2019-12-11T13:04:45.592+0000:It's already created
omarsmak:1576040894:2019-12-11T13:08:14.441+0000:1576040894:2019-12-11T13:08:14.441+0000:thanks a lot!"
0,CAMEL-14248,New Feature,Minor,None,"4.0-M3, 4.0.0","
None
",Resolved,Implemented,"4.0-M3, 4.0.0",Unassigned,Julia,0,2,2019-12-03 15:34:38+00:00,2023-03-22 15:48:00+00:00,Enable Route Coverage tooling is not available under JUnit5.,"davsclaus:1575358855:2019-12-03T15:40:55.569+0000:1575358855:2019-12-03T15:40:55.569+0000:I think its the @EnableRouteCoverage annotation.
davsclaus:1575358895:2019-12-03T15:41:35.235+0000:1575358895:2019-12-03T15:41:35.235+0000:And btw you are using camel-test-spring-junit5 ?
Juliana:1575382787:2019-12-03T22:19:47.192+0000:1575382787:2019-12-03T22:19:47.192+0000:Yes I would like to use @EnableRouteCoverage. 

Yes, I have one test class inheriting from org.apache.camel.test.spring.junit5.CamelSpringTestSupport. Other classes don't, they use org.springframework.boot.test.context.SpringBootTest without adding @RunWith(CamelSpringBootRunner.class). 
Juliana:1576461461:2019-12-16T09:57:41.912+0000:1576461461:2019-12-16T09:57:41.912+0000:Don't use org.springframework.boot.test.context.SpringBootTest anymore after refactoring.
davsclaus:1679471260:2023-03-22T15:47:40.185+0000:1679471260:2023-03-22T15:47:40.185+0000:Its there in camel-test-spring-junit5"
0,CAMEL-14247,Improvement,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-03 12:08:19+00:00,2019-12-04 13:53:41+00:00,"There is a shared worker pool on the component level that has 16 threads out of the box. You can turn this off as said before and it uses nettys worker threads directly. So that pool would be shared if you have more netty consumers eg maybe 2 or more routes that start from netty.
Today I am not sure if it was a good idea to have a 16 thread pool by default that is shared among all netty consumers in the same Camel app.It should possible have been turned off, and just use the netty worker threads directly.","davsclaus:1575364215:2019-12-03T17:10:15.812+0000:1575364215:2019-12-03T17:10:15.812+0000:Ah okay we need thread pool ordering for http so request/reply are mapped correctly. Turning this off for camel-netty-http makes some tests blow up
davsclaus:1575436486:2019-12-04T13:14:46.584+0000:1575436486:2019-12-04T13:14:46.584+0000:Ah yeah we need to use an ordered thread pool as in CAMEL-5689. So lets fix so the default size is not 16 but take into account if netty uses more threads such as when you have many cpu cores (default 2 x cpu core)"
0,CAMEL-14246,Improvement,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,Andrea Cosentino,0,1,2019-12-03 11:33:41+00:00,2019-12-03 11:55:43+00:00,In this way the jdbcTemplate can be manipulated a bit from end users.,
0,CAMEL-14245,Improvement,Major,None,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Luca Burgazzoli,Luca Burgazzoli,0,1,2019-12-03 11:23:27+00:00,2019-12-03 15:31:35+00:00,"In camel-spring-boot we can control auto configuration of various services (component, languages, data-formats) using the following patter:


    camel.${type}.${name}.enabled = true|false


so as example it is possible to turn off auto configuration of the seda component with a property like:


     camel.component.seda.enabled = false


it would be nice to have the same feature in camel-main",
0,CAMEL-14244,Task,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-12-03 08:33:03+00:00,2019-12-04 06:21:15+00:00,"This allows to lookup decorators using FQN component name when a scheme name dont match, such as when setting up custom JMS components etc.",
0,CAMEL-14243,Bug,Minor,2.24.2,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Serkan,0,2,2019-12-03 07:47:10+00:00,2019-12-05 11:39:41+00:00,"see also:


https://github.com/opentracing/opentracing-java/issues/307#issuecomment-560329283


 


I'm using the following libraries:


-JDK 8


-camel 2.24.2


-camel-jms-2.24.2


-camel-opentracing 2.24.2


-jaeger-client-0.34.0


 


Issue:


-Define JmsComponent as a Spring bean:


@Bean(name = ""core-jms"")
 public JmsComponent createJmsComponentBean(
 @Qualifier(value = ""core-jmsConnectionFactory"") ConnectionFactory connectionFactory) throws JMSException


{ JmsComponent jmsComponent = new JmsComponent(); JmsConfiguration jmsConfiguration = new JmsConfiguration(connectionFactory); jmsConfiguration.setJmsMessageType(JmsMessageType.Text); jmsConfiguration.setUseMessageIDAsCorrelationID(true); jmsComponent.setConfiguration(jmsConfiguration); return jmsComponent; }


If you use this JmsComponent in your route (like: from(""core-jms://...) then the protocol name change from jms:// into core-jms:// and the current registered SpanDecorators wont match with this one. What will result into wrong tracing id's among the whole flow.


Thus let's say we have the following situation:


Route A -> Jms Queue -> Route B -> WS call.


What I expect is that Route A and Route B have the same traceId, but what I get is 2 traces:


one for Route A -> Jms Queue, and another one from Jms Queue -> Route B.


 


See also the discussion in the link above for more info.","davsclaus:1575332743:2019-12-03T08:25:43.866+0000:1575332743:2019-12-03T08:25:43.866+0000:This is only when you create a custom named component and wont use the default jms name
davsclaus:1575333053:2019-12-03T08:30:53.849+0000:1575333053:2019-12-03T08:30:53.849+0000:You need to register core-jms as a decorator but camel-opentracing hasn't been made so easily customizable in that regard
Serkan80:1575337524:2019-12-03T09:45:24.899+0000:1575337524:2019-12-03T09:45:24.899+0000:I did that, but it's still not working. Route B doesn't extract the existing traceId from the JmsMessage and instead it creates a new one.
Serkan80:1575425544:2019-12-04T10:12:24.740+0000:1575425544:2019-12-04T10:12:24.740+0000:Btw, Ive changed the way Im creating JmsComponent. Im not defining it as a Spring Bean, and Im using the jms protocol now.

I think I've found the reason why my JMS route was not traced well. 

In the OpenTracingTracer class there are only 2 events on which is listened: 

@Override
public boolean isEnabled(EventObject event) {
     return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent;
}

But when you have the following route:
from(""jms:queue..."")...

ExchangeCreatedEvent is fired, and the tracing for this endpoint is skipped. And this has to be the first event in the chain to check for an existing traceId.

And strangely, the OpenTracingRoutePolicy (in OpenTracingTracer class) which listens for onExchangeBegin(..) is also never called.

So I wonder how this has been tested and worked before, because only adding a new SpanDecorator is not solving the problem.
davsclaus:1575429819:2019-12-04T11:23:39.778+0000:1575429819:2019-12-04T11:23:39.778+0000:The code works fine for me, the route policy ensures the exchange begin/end is called, which would be the consumer side.
then the other is the producer side with sending/sent.

Also opentracing is working for others on Camel 2.x."
0,CAMEL-14242,Bug,Minor,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,michael elbaz,0,4,2019-12-02 15:49:41+00:00,2019-12-05 12:42:01+00:00,"I can' use some rabbitMq parameter eg: x-max-priority please provide an working exemple. 
It was before possible doing that using deprecated parameter &queueArgsConfigurer=#rabbitMqQueueArgsConfigurer 




@Bean(""rabbitMqQueueArgsConfigurer"")
public ArgsConfigurer rabbitMqQueueArgsConfigurer() {
    return map -> map.put(""x-max-priority"", 10);
}




See this one:
https://stackoverflow.com/a/44651087/4271976","omarsmak:1575275837:2019-12-02T16:37:17.481+0000:1575275837:2019-12-02T16:37:17.481+0000:did you try with arg option? https://camel.apache.org/components/latest/rabbitmq-component.html
omarsmak:1575275861:2019-12-02T16:37:41.917+0000:1575275861:2019-12-02T16:37:41.917+0000:Also, I think the best place for these question, gitter or dev mailing list 
michael992:1575275922:2019-12-02T16:38:42.613+0000:1575275922:2019-12-02T16:38:42.613+0000:Yeah the arg option is doesn't well documented and not working in the documentation we can also find this parameter *bindingArgs* that in fact even doesn't exist
michael992:1575276271:2019-12-02T16:44:31.705+0000:1575286938:2019-12-02T19:42:18.500+0000:No i think the place is here sorry because i already check the code in past and there is many improvement (maybe rollback some commits) see my comment on github for exemple  x-max-priority *must* be sended as int to rabbitMQ but is sended as String you can try by yourself so its bugged
omarsmak:1575276323:2019-12-02T16:45:23.681+0000:1575276337:2019-12-02T16:45:37.089+0000:From docs:
{code}
Specify arguments for configuring the different RabbitMQ concepts, a different prefix is required for each: Exchange: arg.exchange. Queue: arg.queue. Binding: arg.binding. For example to declare a queue with message ttl argument: http://localhost:5672/exchange/queueargs=arg.queue.x-message-ttl=60000
{code}
Therefore, {{bindingArgs}} *does exist.*
michael992:1575276383:2019-12-02T16:46:23.418+0000:1575276758:2019-12-02T16:52:38.041+0000:Are you trying by yourself ? when i use bindingArgs camel say that is doesn't exist 


{code:java}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: rabbitmq://demo-input?bindingArgs=test&queue=demo-input due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{bindingArgs=test}]
{code}

michael992:1575276527:2019-12-02T16:48:47.001+0000:1575276562:2019-12-02T16:49:22.834+0000:The docs is wrong for many years for this component the only way was the deprecated parameter that was removed from camel 3.0.0
omarsmak:1575277205:2019-12-02T17:00:05.694+0000:1575277205:2019-12-02T17:00:05.694+0000:I am actually looking at the code now, trying to grasp it. Might need your help, can you please try out like this in route {{arg.binding.<<key>>=<value>>}}. Also, if you are going with the binding approach, can you try to bind using this {{args=#args}} instead. 
acosentino:1575277226:2019-12-02T17:00:26.897+0000:1575277226:2019-12-02T17:00:26.897+0000:We'll review the component. Thanks for reporting [~michael992]
acosentino:1575277343:2019-12-02T17:02:23.019+0000:1575277343:2019-12-02T17:02:23.019+0000:We don't consider this critical.
michael992:1575277529:2019-12-02T17:05:29.500+0000:1575277529:2019-12-02T17:05:29.500+0000:[~omarsmak] this one *arg.binding.<<key>>=<value>>* will create an exchange argument and that not the aim the second one doesn't work
acosentino:1575284078:2019-12-02T18:54:38.825+0000:1575284078:2019-12-02T18:54:38.825+0000:By the way, [~michael992] if the code is ""badly wrong"" and you noticed that, why are you complaining on this Jira instead of providing a fix and open a PR? You always use this approach, is this constructive for the project?
michael992:1575286773:2019-12-02T19:39:33.767+0000:1575290849:2019-12-02T20:47:29.058+0000:Your'e right by the way i think there is too much thing to change in this component.

michael992:1575353237:2019-12-03T14:07:17.474+0000:1575353237:2019-12-03T14:07:17.474+0000:[~cibsen@e-ma.net] i not agree is not an improvement is bug and is not only about x arguments, please guys is someone take care about this one ?
davsclaus:1575357515:2019-12-03T15:18:35.192+0000:1575357515:2019-12-03T15:18:35.192+0000:Nobody is taking care of this at this moment. Its open source and community is very much welcome to help. See https://camel.apache.org/manual/latest/contributing.html


michael992:1575359850:2019-12-03T15:57:30.104+0000:1575359872:2019-12-03T15:57:52.205+0000:Ok so i'll use the native client is more reliable i think (this component was working before wrong PR validation) thanks for your help
davsclaus:1575360121:2019-12-03T16:02:01.115+0000:1575360121:2019-12-03T16:02:01.115+0000:Why not help, sorry there is no free lunch. If you need priority help, then get in touch with commercial vendors. but in general its mostly ""when people get time to work on"" and if they fancy rabbitmq, eg i dont really use it, so i am not jumping on it asap, as opposed to kafka, jms, activemq, and others etc.

And btw thanks for reporting and testing.
michael992:1575360508:2019-12-03T16:08:28.643+0000:1575372161:2019-12-03T19:22:41.046+0000:Ok i'll try to check this one
michael992:1575361533:2019-12-03T16:25:33.746+0000:1575361618:2019-12-03T16:26:58.413+0000:Using maven or ide i get a lots of exceptions when i trying to run tests for example:

// org.apache.camel.component.rabbitmq.RabbitMQBasicIntTest
{code:java}
Caused by: org.apache.camel.RuntimeCamelException: com.rabbitmq.client.AuthenticationFailureException: ACCESS_REFUSED - Login was refused using authentication mechanism PLAIN. For details see the broker logfile.
	at org.apache.camel.RuntimeCamelException.wrapRuntimeException(RuntimeCamelException.java:68)
	at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:130)
	at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:70)
	at org.apache.camel.component.rabbitmq.RabbitMQProducer.createReplyManager(RabbitMQProducer.java:373)
	at org.apache.camel.component.rabbitmq.RabbitMQProducer.initReplyManager(RabbitMQProducer.java:335)

{code}

acosentino:1575370124:2019-12-03T18:48:44.198+0000:1575370124:2019-12-03T18:48:44.198+0000:Anyone with committer power can merge pull requests. We are very careful each time and it seems to me you're criticizing this project a bit too much. Enough is enough.
michael992:1575371265:2019-12-03T19:07:45.674+0000:1575371759:2019-12-03T19:15:59.858+0000:I'm just asking for better understanding the process that all. I all the time recommend and advise my clients using camel is for me the best integration Framework, you can see i'm now trying to improve this component but i don't know how because the tests are not passing for me.
bedla:1575383320:2019-12-03T22:28:40.278+0000:1575383320:2019-12-03T22:28:40.278+0000:For integration tests you need to start local instance of rabbitmq, there is docker image ready for this, see readme ( https://github.com/apache/camel/blob/master/components/camel-rabbitmq/readme.txt ). While looking into this, you might be interested in [RabbitMQDeclareSupport#formatSpecialQueueArguments|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQDeclareSupport.java#L76] which handles the conversion of x-max-priority from String to Integer and debug, why the conversion is not happening in your case.
omarsmak:1575385030:2019-12-03T22:57:10.392+0000:1575385030:2019-12-03T22:57:10.392+0000:Honestly I *don't think* this is a bug, this feature was deprecated in 2.x and I guess you were aware of it and yet you didn't raise your concerns back then as Andrea mentioned in the chat. However, I do agree with you that docs are bit misleading in this regards and wasn't clear on the alternatives.
 Second, did you try what I suggested in the chat? To add this in the route {{arg.queue.x-max-priority=x}} (this is different from what I suggested earlier as I wasn't really aware)? As I understood from the code, this used to work as alternative to {{queueArgsConfigurer}}. 
 Third, we read your comments that you delete in JIRA as email notification, again this is an open source project, which means we treat each other with respect and of course constructive criticism is always welcome, hence I again as I mentioned before we would appreciate the same from you.
michael992:1575412323:2019-12-04T06:32:03.185+0000:1575417524:2019-12-04T07:58:44.347+0000:What did mean by adding in the route ? 

[~bedla] I thanks ! all the tests are now passed, i'll now try to check whats exactly happen with args arguments (I was think that integration tests should be run independently there is no embedded rabbit or some of ?)
michael992:1575419502:2019-12-04T08:31:42.998+0000:1575419502:2019-12-04T08:31:42.998+0000:Ok guys after investigate the tests its appear to achieve the same as before the only way now is by configuring component like this:

{code:java}
  private Endpoint rabbitMq() throws Exception {
        RabbitMQComponent rabbitMQComponent = getContext().getComponent(""rabbitmq"", RabbitMQComponent.class);
        rabbitMQComponent.setArgs(Collections.singletonMap(""queue.x-max-priority"", ""10""));

        return rabbitMQComponent.createEndpoint(""rabbitmq:foo?queue=foo"");
    }
{code}

So is working this way but the doc should be updated i think (i personally prefer the oldest way because we was free to add any option directly using query parameters and simple map and now like it was the case with x-max-priority we have to code every options in the component source code).

Thanks for your help

omarsmak:1575419676:2019-12-04T08:34:36.912+0000:1575419676:2019-12-04T08:34:36.912+0000:Sorry I meant in the URI as query parameter  e.g: {{rabbitmq:foo?queue=foo&arg.queue.x-max-priority=10}}
michael992:1575420419:2019-12-04T08:46:59.278+0000:1575420586:2019-12-04T08:49:46.080+0000:A directly i'm trying this now (this will be of course not possible btw with the new camel-endpointdsl)

[~omarsmak] It's working thanks for your help ! I think again the doc is not clear about this and what about camel-endpointdsl ?
omarsmak:1575421590:2019-12-04T09:06:30.448+0000:1575421590:2019-12-04T09:06:30.448+0000:You are encouraged to help out on fixing the docs, click on 'Edit this Page` here: https://camel.apache.org/components/latest/rabbitmq-component.html and you will be redirected to github where you can amend your modifications. 

I think it should work, you just need to omit the prefix {{arg.}}, e.g: {{rabbitmq(""abbitmq:foo"").args(""queue.x-max-priority"", ""10"")}}.
omarsmak:1575421634:2019-12-04T09:07:14.127+0000:1575421634:2019-12-04T09:07:14.127+0000:Closing this as we clarified it 
michael992:1575424758:2019-12-04T09:59:18.063+0000:1575424778:2019-12-04T09:59:38.851+0000:No it doesn't that why i'm asking here 
{code:java}
    private AdvancedRabbitMQEndpointBuilder rabbitMq() {
        return rabbitmq(""foo"")
                .queue(""foo"")
                .advanced()
                .args(Collections.singletonMap(""queue.x-max-priority"", ""10""));
    }
{code}

michael992:1575424846:2019-12-04T10:00:46.168+0000:1575424846:2019-12-04T10:00:46.168+0000:I'll upgrade the documentation when i'll sure about the right way
michael992:1575425320:2019-12-04T10:08:40.837+0000:1575425489:2019-12-04T10:11:29.109+0000:The only way i found what is your opinion about ? is not ideal for me


{code:java}
    private Endpoint rabbitMq() throws Exception {
        RabbitMQComponent rabbitMQComponent = getContext().getComponent(""rabbitmq"", RabbitMQComponent.class);
        rabbitMQComponent.setArgs(Collections.singletonMap(""queue.x-max-priority"", ""10""));

        return rabbitMQComponent.createEndpoint(rabbitmq(""foo"").queue(""foo"").getUri());
    }
{code}
I don't understand why the args is accessible from the dsl in my previous example if it is no taken into account, when i debug the code i observe that args map always empty (in org.apache.camel.component.rabbitmq.RabbitMQComponent) when using this as query parameter or dsl eg:""rabbitmq:foo?args=any.args"" 
michael992:1575426091:2019-12-04T10:21:31.256+0000:1575426091:2019-12-04T10:21:31.256+0000:[~omarsmak] I don't sure about closing this now is right
omarsmak:1575429742:2019-12-04T11:22:22.426+0000:1575429742:2019-12-04T11:22:22.426+0000:Yes, it seems there is a bug in regards to endpointdsl and RabbitMQComponent and I verified it. To give you a context, when you do something like this: 
{code}
rabbitmq(""foo"")
        .queue(""foo"")
        .advanced()
        .args(Collections.singletonMap(""queue.x-max-priority"", ""10""));
{code}
The endpointdsl will bootstrap a URI route and parameters. However, these parameters that being bootstrapped by the endpointdsl, is taking this shape:
{code}
""queue.x-max-priority"" -> ""10""
{code}
Meanwhile, the [component expects parameters|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java#L256] with prefix appended {{arg.}}, e.g in this form:
{code}
""arg.queue.x-max-priority"" -> ""10""
{code}
The fix is fairly simple, you just need to check if why args are not assigned [here|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java#L252]. 
However, if you wish, you are encouraged to send a PR to fix this since you spent the time to test it and report. Let me know if you are willing to jump on this one to fix. 
michael992:1575433614:2019-12-04T12:26:54.642+0000:1575433680:2019-12-04T12:28:00.893+0000:[~omarsmak] Yeah i'll do but still not sure about what i explain my understanding:

*Options* must be set using components object only
*Query parameters* Using dsl or string

Args is in Options section (in the documentation) so i guess we can't set args using dsl maybe i'm wrong ? Options and query parameters i'm still not sure about what the difference thanks for your answer
omarsmak:1575441133:2019-12-04T14:32:13.260+0000:1575441180:2019-12-04T14:33:00.016+0000:Query parameters appear in the URI string. Options, that you set in the component level using the APIs. Endpointdsl uses options (API) to set args. Camel normally will parse the URI into {{Map}} of params that will be passed into the component, then component set these params using the options in the component level, you can add a breakpoint [here|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java#L151] and you will see what happens to param. Try it on both, endpointdsl and running the route using the URI string
michael992:1575441729:2019-12-04T14:42:09.984+0000:1575441729:2019-12-04T14:42:09.984+0000:Ok thanks for this precision you can assign me this ticket if you want i'll try to fix this as you're proposed 
omarsmak:1575441882:2019-12-04T14:44:42.340+0000:1575441882:2019-12-04T14:44:42.340+0000:Cool. A comment from you that you are working on it is enough. Good luck!
michael992:1575461243:2019-12-04T20:07:23.259+0000:1575461341:2019-12-04T20:09:01.157+0000:[~omarsmak] i made [some modifications |https://github.com/apache/camel/pull/3385]it's appear to be work but not sure at all about side effect, it still not clear for me what's relation between options and query parameters.

I also detected some weird test see org.apache.camel.component.rabbitmq.RabbitMQConsumerIntTest.sentMessageIsReceivedWithHeadersRouting()

*// Don't know what it suppose to do but nothing is filtered i get the 3 headers so this test is wrong off course it pass because 1 < 3*
{code:java}
    @Test
    public void sentMessageIsReceivedWithHeadersRouting() throws InterruptedException, IOException, TimeoutException {
        //should only be one message that makes it through because only
        //one has the correct header set
        to.expectedMessageCount(1);

        Channel channel = connection().createChannel();
        channel.basicPublish(HEADERS_EXCHANGE, """", propertiesWithHeader(""foo"", ""bar""), MSG.getBytes());
        channel.basicPublish(HEADERS_EXCHANGE, """", null, MSG.getBytes());
        channel.basicPublish(HEADERS_EXCHANGE, """", propertiesWithHeader(""foo"", ""bra""), MSG.getBytes());

        to.assertIsSatisfied();
    }
{code}

davsclaus:1575518077:2019-12-05T11:54:37.067+0000:1575518077:2019-12-05T11:54:37.067+0000:Also it may be its when you use Map instance, you can try with

.args(""arg.queue.x-max-priority=10"")


omarsmak:1575518664:2019-12-05T12:04:24.756+0000:1575518664:2019-12-05T12:04:24.756+0000:I don't think is going to work. The issue is, when the endpointdsl constructs the params map, it will assign {{arg.queue.x-max-priority}} to {{args}} of the endpoint which is expected when using the property binding [here|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java#L244]. However, then at this [check|https://github.com/apache/camel/blob/master/components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQComponent.java#L252], we don't check if it was assigned to the endpoint and we end up with overwriting an empty {{localArgs}} that overrides what being set at the endpoint. 

davsclaus:1575519701:2019-12-05T12:21:41.788+0000:1575519701:2019-12-05T12:21:41.788+0000:Yeah it should honour the existing args on the endpoint
davsclaus:1575520921:2019-12-05T12:42:01.061+0000:1575520921:2019-12-05T12:42:01.061+0000:And yeah it would be nice to use testcontainers to bootstrap rabbitmq for integration testing. I created a ticket: https://issues.apache.org/jira/browse/CAMEL-14260"
0,CAMEL-14241,Bug,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Thomas Diesler,Thomas Diesler,0,1,2019-12-02 15:14:27+00:00,2019-12-03 11:13:29+00:00,"camel-influxdb has a direct dependency on




 <dependency>
 <groupId>com.squareup.okio</groupId>
 <artifactId>okio</artifactId>
</dependency>





 


but doesn't define its version",
0,CAMEL-14240,Improvement,Major,3.0.0,None,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Konstantin J. Chernov,0,1,2019-12-02 15:10:55+00:00,2019-12-03 09:19:09+00:00,"Problem


Currently, there's no way to enable backlog debugger on a camel context when it's configured using blueprint xml. The only option is to use some java code that turns on debugging on a camel context.


Possible solution


Add support for a backlogTracing (backlogDebugging?) boolean attribute on CamelContext type.",
0,CAMEL-14239,Task,Major,None,None,"
None
",Resolved,Fixed,"3.0.1, 3.1.0",Unassigned,Claus Ibsen,0,5,2019-12-02 14:08:30+00:00,2019-12-03 13:13:59+00:00,The XSD is missing we should post it online so we have -3.0.0 and also the default is the latest.,"acosentino:1575267131:2019-12-02T14:12:11.121+0000:1575267131:2019-12-02T14:12:11.121+0000:I think it's the same for spring schema.. [~gzurowski] can you have a look please?
davsclaus:1575267171:2019-12-02T14:12:51.519+0000:1575267171:2019-12-02T14:12:51.519+0000:[~gzurowski] I wonder if we have uploaded new XSDs for the Camel 3 release to the website. We need these for spring xml / blueprint xml and so forth.

In the old days it was sub-version. Is it still that? Or what's the procedure now?
I think the new release guide needs to be updated
https://github.com/apache/camel/blob/master/docs/user-manual/modules/ROOT/pages/release-guide.adoc


zregvart:1575267712:2019-12-02T14:21:52.692+0000:1575267712:2019-12-02T14:21:52.692+0000:The schemas are served from the static content in the website here:

https://github.com/apache/camel-website/tree/master/static/schema
davsclaus:1575267881:2019-12-02T14:24:41.957+0000:1575267881:2019-12-02T14:24:41.957+0000:Thanks Zoran.

So we need RC1, RC2, RC3 and the GA release.
How do we gen those files? I assume there is some script?
zregvart:1575270329:2019-12-02T15:05:29.221+0000:1575270329:2019-12-02T15:05:29.221+0000:They have been copied one-to-one from SVN. I guess it's the same way we used to generate those before, the only difference is that they're not in SVN but in GIT.
davsclaus:1575336577:2019-12-03T09:29:37.655+0000:1575336577:2019-12-03T09:29:37.655+0000:Andrea and Zoran helped get these published
gzurowski:1575350039:2019-12-03T13:13:59.917+0000:1575350039:2019-12-03T13:13:59.917+0000:Thanks all for the clarification. I was not aware that the repository has changed. I will include this in the release building documentation."
0,CAMEL-14238,Improvement,Minor,3.0.0.RC3,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Aurélien Pupier,0,1,2019-12-02 09:24:52+00:00,2020-02-12 13:28:04+00:00,"in case, no description is provided, it is taking the copyright header and it can insert several lines in the json files, which is not supported by the JSON format.


see https://github.com/apache/camel-k-runtime/issues/203 for a real case


on implementation it can be (one or several of these):



fail build if json is invalid in general
don't provide any description inside catalog, or an empty one if the javadoc is not put directly on the class component
fail build if the javadoc is not put directly on the class component",
0,CAMEL-14237,Bug,Minor,"3.0.0.RC1, 3.0.0.RC2, 3.0.0.RC3, 3.0.0",None,"
None
",Closed,Done,3.4.0,Unassigned,Jan Bednar,0,2,2019-12-01 16:45:28+00:00,2020-07-25 18:41:23+00:00,"All write operations fails with 



org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: type is missing;



The issue here is we have upgraded dependencies to 7.3.2 to support elastic 7 (indexType was removed in Elastic 7), but somehow starter is packaged with 6.8.4 dependencies, so the request validation fails. Not sure how this could happen, all poms seems to be fine


Using plain camel-elasticsearch-rest dependency instead of starter does not help, because elasticsearch.client versions are somewhere overriden (probably by camel-spring-boot-dependencies)


The only way I was able to make this component work was by overriding elastic dependency versions in my pom ( https://github.com/bedlaj/camel3-elastic-sb-workaround/blob/master/pom.xml#L91 ):


 



<dependency>
   <groupId>org.elasticsearch</groupId>
   <artifactId>elasticsearch</artifactId>
   <version>7.3.2</version>
 </dependency>
 <dependency>
   <groupId>org.elasticsearch.client</groupId>
   <artifactId>elasticsearch-rest-high-level-client</artifactId>
   <version>7.3.2</version>
 </dependency>
 <dependency>
   <groupId>org.elasticsearch.client</groupId>
   <artifactId>elasticsearch-rest-client</artifactId>
   <version>7.3.2</version>
 </dependency>



Reproducer project can be found here https://github.com/bedlaj/camel3-elastic-sb-workaround/blob/master/pom.xml#L91


Remove workaround in pom.xml on lines 75-88 and 91-105 to see this bug in action.


mvn dependency:tree on current camel master shows this:




maven-dependency-plugin:3.1.1:tree[m [1m(default-cli)[m @ [36mcamel-elasticsearch-rest-starter[0;1m ---[m                                                                                     
org.apache.camel.springboot:camel-elasticsearch-rest-starter:jar:3.1.0-SNAPSHOT                                                                                                                                    
+- org.springframework.boot:spring-boot-starter:jar:2.2.1.RELEASE:compile                                                                                                                                          
|  +- org.springframework.boot:spring-boot-starter-logging:jar:2.2.1.RELEASE:compile                                                                                                                               
|  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile                                                                                                                                                          
|  |  |  \- ch.qos.logback:logback-core:jar:1.2.3:compile                                                                                                                                                          
|  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.12.1:compile                                                                                                                                                
|  |  |  \- org.apache.logging.log4j:log4j-api:jar:2.12.1:compile                                                                                                                                                  
|  |  \- org.slf4j:jul-to-slf4j:jar:1.7.29:compile                                                                                                                                                                 
|  +- jakarta.annotation:jakarta.annotation-api:jar:1.3.5:compile                                                                                                                                                  
|  +- org.springframework:spring-core:jar:5.2.1.RELEASE:compile                                                                                                                                                    
|  |  \- org.springframework:spring-jcl:jar:5.2.1.RELEASE:compile                                                                                                                                                  
|  \- org.yaml:snakeyaml:jar:1.25:compile                                                                                                                                                                          
+- org.apache.camel:camel-elasticsearch-rest:jar:3.1.0-SNAPSHOT:compile                                                                                                                                            
|  +- org.apache.camel:camel-support:jar:3.1.0-SNAPSHOT:compile                                                                                                                                                    
|  |  +- org.apache.camel:camel-api:jar:3.1.0-SNAPSHOT:compile                                                                                                                                                     
|  |  +- org.apache.camel:camel-management-api:jar:3.1.0-SNAPSHOT:compile                                                                                                                                          
|  |  +- org.apache.camel:camel-util:jar:3.1.0-SNAPSHOT:compile                                                                                                                                                    
|  |  +- org.apache.camel:camel-util-json:jar:3.1.0-SNAPSHOT:compile                                                                                                                                               
|  |  \- org.slf4j:slf4j-api:jar:1.7.29:compile                                                                                                                                                                    
|  +- org.elasticsearch.client:elasticsearch-rest-high-level-client:jar:6.8.4:compile                                                                                                                              
|  |  +- org.elasticsearch:elasticsearch:jar:6.8.4:compile                                                                                                                                                         
|  |  |  +- org.elasticsearch:elasticsearch-core:jar:6.8.4:compile                                                                                                                                                 
|  |  |  +- org.elasticsearch:elasticsearch-secure-sm:jar:6.8.4:compile                                                                                                                                            
|  |  |  +- org.elasticsearch:elasticsearch-x-content:jar:6.8.4:compile                                                                                                                                            
|  |  |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.10.1:compile                                                                                                                        
|  |  |  |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.10.1:compile                                                                                                                         
|  |  |  |  \- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.10.1:compile                                                                                                                         
|  |  |  +- org.apache.lucene:lucene-core:jar:7.7.2:compile                                                                                                                                                        
|  |  |  +- org.apache.lucene:lucene-analyzers-common:jar:7.7.2:compile                                                                                                                                            
|  |  |  +- org.apache.lucene:lucene-backward-codecs:jar:7.7.2:compile                                                                                                                                             
|  |  |  +- org.apache.lucene:lucene-grouping:jar:7.7.2:compile                                                                                                                                                    
|  |  |  +- org.apache.lucene:lucene-highlighter:jar:7.7.2:compile                                                                                                                                                 
|  |  |  +- org.apache.lucene:lucene-join:jar:7.7.2:compile                                                                                                                                                        
|  |  |  +- org.apache.lucene:lucene-memory:jar:7.7.2:compile                                                                                                                                                      
|  |  |  +- org.apache.lucene:lucene-misc:jar:7.7.2:compile                                                                                                                                                        
|  |  |  +- org.apache.lucene:lucene-queries:jar:7.7.2:compile                                                                                                                                                     
|  |  |  +- org.apache.lucene:lucene-queryparser:jar:7.7.2:compile                                                                                                                                                 
|  |  |  +- org.apache.lucene:lucene-sandbox:jar:7.7.2:compile                                                                                                                                                     
|  |  |  +- org.apache.lucene:lucene-spatial:jar:7.7.2:compile                                                                                                                                                     
|  |  |  +- org.apache.lucene:lucene-spatial-extras:jar:7.7.2:compile                                                                                                                                              
|  |  |  +- org.apache.lucene:lucene-spatial3d:jar:7.7.2:compile                                                                                                                                                   
|  |  |  +- org.apache.lucene:lucene-suggest:jar:7.7.2:compile                                                                                                                                                     
|  |  |  +- org.elasticsearch:elasticsearch-cli:jar:6.8.4:compile                                                                                                                                                  
|  |  |  |  \- net.sf.jopt-simple:jopt-simple:jar:5.0.2:compile                                                                                                                                                    
|  |  |  +- com.carrotsearch:hppc:jar:0.7.1:compile                                                                                                                                                                
|  |  |  +- joda-time:joda-time:jar:2.10.5:compile                                                                                                                                                                 
|  |  |  +- com.tdunning:t-digest:jar:3.2:compile                                                                                                                                                                  
|  |  |  +- org.hdrhistogram:HdrHistogram:jar:2.1.9:compile                                                                                                                                                        
|  |  |  \- org.elasticsearch:jna:jar:4.5.1:compile                                                                                                                                                                
|  |  +- org.elasticsearch.client:elasticsearch-rest-client:jar:6.8.4:compile                                                                                                                                      
|  |  |  +- org.apache.httpcomponents:httpasyncclient:jar:4.1.4:compile                                                                                                                                            
|  |  |  \- org.apache.httpcomponents:httpcore-nio:jar:4.4.12:compile                                                                                                                                              
|  |  +- org.elasticsearch.plugin:parent-join-client:jar:6.8.4:compile                                                                                                                                             
|  |  +- org.elasticsearch.plugin:aggs-matrix-stats-client:jar:6.8.4:compile                                                                                                                                       
|  |  +- org.elasticsearch.plugin:rank-eval-client:jar:6.8.4:compile                                                                                                                                               
|  |  \- org.elasticsearch.plugin:lang-mustache-client:jar:6.8.4:compile                                                                                                                                           
|  |     \- com.github.spullara.mustache.java:compiler:jar:0.9.3:compile                                                                                                                                           
|  +- org.elasticsearch.client:elasticsearch-rest-client-sniffer:jar:7.3.2:compile                                                                                                                                 
|  |  +- org.apache.httpcomponents:httpclient:jar:4.5.10:compile                                                                                                                                                   
|  |  +- org.apache.httpcomponents:httpcore:jar:4.4.12:compile                                                                                                                                                     
|  |  +- commons-codec:commons-codec:jar:1.13:compile                                                                                                                                                              
|  |  \- com.fasterxml.jackson.core:jackson-core:jar:2.10.1:compile                                                                                                                                                
|  \- com.fasterxml.jackson.core:jackson-databind:jar:2.10.1:compile                                                                                                                                               
|     \- com.fasterxml.jackson.core:jackson-annotations:jar:2.10.1:compile                                                                                                                                         
...                                                                                                                                                      




Currently this component cannot be used with ES6, because we have removed indexType option in CAMEL-13767. Also cannot be used with ES7, because old client validates indexType, which was removed.","bedla:1575288115:2019-12-02T20:01:55.376+0000:1575288115:2019-12-02T20:01:55.376+0000:Closer look reveals the version is overriden from org.springframework.boot:spring-boot-dependencies pom import.
bedla:1575381735:2019-12-03T22:02:15.669+0000:1575381735:2019-12-03T22:02:15.669+0000:Unassigning from myself, because I havent found a way how to properly override version defined in SB BOM. Someone smarter needs to take a look at this. Whatever I try, it fails on dependency conflict validation in +org.apache.camel:bom-generator-maven-plugin+.

What we need is to somehow force into starters 7.3.2 version of +org.elasticsearch.client:elasticsearch-rest-client+, +org.elasticsearch.client:elasticsearch-rest-high-level-client+ and +org.elasticsearch:elasticsearch+. It is needed, because +camel-elasticsearch-rest+ component is not compatible with 6.8.4 version inherited from SB BOM.

 
amdmdi:1595669496:2020-07-25T17:31:36.916+0000:1595669496:2020-07-25T17:31:36.916+0000:Can't reproduce this with *camel 3.4.1* and spring-boot *2.3.2.RELEASE*
[Spring boot upgraded to Elastic 7.6 in 2.3.0.RELEASE|https://spring.io/blog/2020/05/15/spring-boot-2-3-0-available-now]

[INFO] +- org.apache.camel.springboot:camel-elasticsearch-rest-starter:jar:*3.4.1*:compile
 [INFO] | - org.apache.camel:camel-elasticsearch-rest:jar:3.4.1:compile
 [INFO] | +- org.elasticsearch.client:elasticsearch-rest-high-level-client:jar:*7.6.2*:compile
 [INFO] | | +- org.elasticsearch:elasticsearch:jar:7.6.2:compile
 [INFO] | | | +- org.elasticsearch:elasticsearch-core:jar:7.6.2:compile
 [INFO] | | | +- org.elasticsearch:elasticsearch-secure-sm:jar:7.6.2:compile
 [INFO] | | | +- org.elasticsearch:elasticsearch-x-content:jar:7.6.2:compile
 [INFO] | | | | +- com.fasterxml.jackson.dataformat:jackson-dataformat-smile:jar:2.11.1:compile
 [INFO] | | | | +- com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:jar:2.11.1:compile
 [INFO] | | | | - com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.11.1:compile
 [INFO] | | | +- org.elasticsearch:elasticsearch-geo:jar:7.6.2:compile
 [INFO] | | | +- org.apache.lucene:lucene-core:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-analyzers-common:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-backward-codecs:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-grouping:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-highlighter:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-join:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-memory:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-misc:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-queries:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-queryparser:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-sandbox:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-spatial:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-spatial-extras:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-spatial3d:jar:8.4.0:compile
 [INFO] | | | +- org.apache.lucene:lucene-suggest:jar:8.4.0:compile
 [INFO] | | | +- org.elasticsearch:elasticsearch-cli:jar:7.6.2:compile
 [INFO] | | | | - net.sf.jopt-simple:jopt-simple:jar:5.0.2:compile
 [INFO] | | | +- com.carrotsearch:hppc:jar:0.8.1:compile
 [INFO] | | | +- joda-time:joda-time:jar:2.10.4:compile
 [INFO] | | | +- com.tdunning:t-digest:jar:3.2:compile
 [INFO] | | | - org.elasticsearch:jna:jar:4.5.1:compile
 [INFO] | | +- org.elasticsearch.client:elasticsearch-rest-client:jar:7.6.2:compile
 [INFO] | | | +- org.apache.httpcomponents:httpasyncclient:jar:4.1.4:compile
 [INFO] | | | - org.apache.httpcomponents:httpcore-nio:jar:4.4.13:compile
 [INFO] | | +- org.elasticsearch.plugin:mapper-extras-client:jar:7.6.2:compile
 [INFO] | | +- org.elasticsearch.plugin:parent-join-client:jar:7.6.2:compile
 [INFO] | | +- org.elasticsearch.plugin:aggs-matrix-stats-client:jar:7.6.2:compile
 [INFO] | | +- org.elasticsearch.plugin:rank-eval-client:jar:7.6.2:compile
 [INFO] | | - org.elasticsearch.plugin:lang-mustache-client:jar:7.6.2:compile
 [INFO] | | - com.github.spullara.mustache.java:compiler:jar:0.9.6:compile
 [INFO] | - org.elasticsearch.client:elasticsearch-rest-client-sniffer:jar:*7.7.0:*compile
 [INFO] | +- org.apache.httpcomponents:httpclient:jar:4.5.12:compile
 [INFO] | +- org.apache.httpcomponents:httpcore:jar:4.4.13:compile
 [INFO] | - commons-codec:commons-codec:jar:1.14:compile

 

 
bedla:1595673683:2020-07-25T18:41:23.797+0000:1595673683:2020-07-25T18:41:23.797+0000:Great! Thanks for testing with actual versions. Seems this is indeed fixed in Apache Camel 3.4.0 with SB upgraded to 2.3.0 by CAMEL-15069"
0,CAMEL-14236,Bug,Major,3.0.0,None,"
None
",Resolved,Invalid,None,Unassigned,Pascal Schumacher,0,2,2019-11-30 13:17:26+00:00,2019-11-30 13:35:10+00:00,"https://camel.apache.org/components/latest/platform-http-component.html says:


The Platform HTTP is used to allow Camel to use the existing HTTP server from the rumtime. For example when running Camel on Spring Boot...


But when I try to use the component e.g. with this simple route:




import org.apache.camel.builder.RouteBuilder;
import org.springframework.stereotype.Component;

@Component
public class HelloRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        from(""platform-http:/hello"")
            .setBody(constant(""hello""));
    }
}




start-up of the application fails with :




2019-11-30 13:17:02.953 ERROR 9648 --- [  restartedMain] o.s.boot.SpringApplication               : Application run failed
org.apache.camel.FailedToStartRouteException: Failed to start route route1 because of Route(route1)[From[platform-http:/hello] -> [SetBody[hello]]...
       at org.apache.camel.impl.engine.BaseRouteService.warmUp(BaseRouteService.java:131) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.doWarmUpRoutes(AbstractCamelContext.java:3152) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.safelyStartRouteServices(AbstractCamelContext.java:3047) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.doStartOrResumeRoutes(AbstractCamelContext.java:2836) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.doStartCamel(AbstractCamelContext.java:2640) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.lambda$doStart$2(AbstractCamelContext.java:2445) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext$$Lambda$1253.0000000000000000.run(Unknown Source) ~[na:na]
       at org.apache.camel.impl.engine.AbstractCamelContext.doWithDefinedClassLoader(AbstractCamelContext.java:2462) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.doStart(AbstractCamelContext.java:2443) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.spring.boot.SpringBootCamelContext.doStart(SpringBootCamelContext.java:39) ~[camel-spring-boot-3.0.0.jar:3.0.0]
       at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117) ~[camel-api-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.AbstractCamelContext.start(AbstractCamelContext.java:2352) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.spring.SpringCamelContext.start(SpringCamelContext.java:121) ~[camel-spring-3.0.0.jar:3.0.0]
       at org.apache.camel.spring.SpringCamelContext.onApplicationEvent(SpringCamelContext.java:157) ~[camel-spring-3.0.0.jar:3.0.0]
       at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:897) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
       at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
       at test.Application.main(Application.java:10) ~[classes/:na]
       at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
       at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]
       at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
       at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]
       at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49) ~[spring-boot-devtools-2.2.1.RELEASE.jar:2.2.1.RELEASE]
Caused by: java.lang.IllegalStateException: PlatformHttpEngine neither set on this PlatformHttpEndpoint neither found in Camel Registry.
       at org.apache.camel.component.platform.http.PlatformHttpEndpoint.doStart(PlatformHttpEndpoint.java:148) ~[camel-platform-http-3.0.0.jar:3.0.0]
       at org.apache.camel.support.service.ServiceSupport.start(ServiceSupport.java:117) ~[camel-api-3.0.0.jar:3.0.0]
       at org.apache.camel.support.service.ServiceHelper.startService(ServiceHelper.java:70) ~[camel-api-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.BaseRouteService.doWarmUp(BaseRouteService.java:144) ~[camel-base-3.0.0.jar:3.0.0]
       at org.apache.camel.impl.engine.BaseRouteService.warmUp(BaseRouteService.java:129) ~[camel-base-3.0.0.jar:3.0.0]
       ... 33 common frames omitted




Complete example can be found here: https://github.com/PascalSchumacher/CamelSpringBootPlatformHttpTest


I do not see any way to fix this other than creating a custom PlatformHttpEngine implementation. Am I missing something?","davsclaus:1575091397:2019-11-30T13:23:17.470+0000:1575091397:2019-11-30T13:23:17.470+0000:spring boot is not yet supported, there is another ticket about this
pascalschumacher:1575091696:2019-11-30T13:28:16.607+0000:1575091748:2019-11-30T13:29:08.937+0000:I guess the cause is that https://issues.apache.org/jira/browse/CAMEL-14206 is not implemented yet.

Imho there should be no starter if the component does not work with Spring Boot.
davsclaus:1575092057:2019-11-30T13:34:17.211+0000:1575092057:2019-11-30T13:34:17.211+0000:The starters are auto-generated
davsclaus:1575092110:2019-11-30T13:35:10.965+0000:1575092110:2019-11-30T13:35:10.965+0000:And you are welcome to work on that other ticket and add the implementation, you should do that in the -starter code so its added there via spring boot auto configuration magic."
0,CAMEL-14235,New Feature,Major,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Claus Ibsen,0,1,2019-11-30 09:58:48+00:00,2019-11-30 13:41:01+00:00,"See SO
https://stackoverflow.com/questions/59095408/camel-seda-dismiss-messages-if-the-queue-is-full",
0,CAMEL-14234,Bug,Major,3.0.0,None,"
None
",Resolved,Fixed,"3.0.1, 3.1.0",Jan Bednar,Jan Bednar,0,1,2019-11-30 00:17:52+00:00,2019-11-30 00:54:47+00:00,"As a workaround until new patch release users needs to replace in their pom.xml




<!-- Camel BOM -->
<dependency>
  <groupId>org.apache.camel</groupId>
  <artifactId>camel-spring-boot-dependencies</artifactId>
  <version>3.0.0</version>
  <type>pom</type>
  <scope>import</scope>
</dependency>




with




<!-- Camel BOM -->
<dependency>
  <groupId>org.apache.camel.springboot</groupId>
  <artifactId>camel-spring-boot-dependencies</artifactId>
  <version>3.0.0</version>
  <type>pom</type>
  <scope>import</scope>
</dependency>",
0,CAMEL-14233,Improvement,Minor,2.24.2,3.1.0,"
None
",Closed,Fixed,3.1.0,Omar Al-Safi,Rafał Gała,0,4,2019-11-29 20:44:41+00:00,2020-01-09 10:06:52+00:00,"When exchange aggregation is used, using GroupedExchangeAggregationStrategy for example:


 




from(..)
.process(some processor here that sets KafkaConstants.TOPIC header here)
.aggregate(new GroupedExchangeAggregationStrategy ())
.to(kafka:...)




it is not possible to override topic per exchange by using KafkaConstants.TOPIC header, because in createRecord of KafkaProducer class, the topic is chosen from header of aggregating Exchange which may not be set because it may have been set only on Exchanges that were aggregated. When creating ProducerRecord from Iterable, the topic should be chosen from header of each Exchange separately:




protected Iterator<ProducerRecord> createRecorder(Exchange exchange) throws Exception {
    String topic = endpoint.getConfiguration().getTopic();

    if (!endpoint.getConfiguration().isBridgeEndpoint()) {
        String headerTopic = exchange.getIn().getHeader(KafkaConstants.TOPIC, String.class);
        boolean allowHeader = true;

        // when we do not bridge then detect if we try to send back to ourselves
        // which we most likely do not want to do
        if (headerTopic != null && endpoint.getConfiguration().isCircularTopicDetection()) {
            Endpoint from = exchange.getFromEndpoint();
            if (from instanceof KafkaEndpoint) {
                String fromTopic = ((KafkaEndpoint) from).getConfiguration().getTopic();
                allowHeader = !headerTopic.equals(fromTopic);
                if (!allowHeader) {
                    log.debug(""Circular topic detected from message header.""
                            + "" Cannot send to same topic as the message comes from: {}""
                            + "". Will use endpoint configured topic: {}"", from, topic);
                }
            }
        }
        if (allowHeader && headerTopic != null) {
            topic = headerTopic;
        }
    }

    if (topic == null) {
        // if topic property was not received from configuration or header parameters take it from the remaining URI
        topic = URISupport.extractRemainderPath(new URI(endpoint.getEndpointUri()), true);
    }

...

    Object msg = exchange.getIn().getBody();

    // is the message body a list or something that contains multiple values
    Iterator<Object> iterator = null;
    if (msg instanceof Iterable) {
        iterator = ((Iterable<Object>) msg).iterator();
    } else if (msg instanceof Iterator) {
        iterator = (Iterator<Object>) msg;
    }
    if (iterator != null) {
        final Iterator<Object> msgList = iterator;




The msgTopic variable below should be set from KafkaConstants.TOPIC header of next exchange from collection




        final String msgTopic = topic;

        return new Iterator<ProducerRecord>() {
            @Override
            public boolean hasNext() {
                return msgList.hasNext();
            }

            @Override
            public ProducerRecord next() {

                // must convert each entry of the iterator into the value according to the serializer
                Object next = msgList.next();
                Object value = tryConvertToSerializedType(exchange, next, endpoint.getConfiguration().getSerializerClass());

                if (hasPartitionKey && hasMessageKey) {
                    return new ProducerRecord(msgTopic, partitionKey, null, key, value, propagatedHeaders);
                } else if (hasMessageKey) {
                    return new ProducerRecord(msgTopic, null, null, key, value, propagatedHeaders);
                } else {
                    return new ProducerRecord(msgTopic, null, null, null, value, propagatedHeaders);
                }
            }

            @Override
            public void remove() {
                msgList.remove();
            }
        };
    }

...
}","omarsmak:1575342036:2019-12-03T11:00:36.119+0000:1575342036:2019-12-03T11:00:36.119+0000:Hey [~davsclaus], do you think this indirectly addressed by CAMEL-13878? 
davsclaus:1575342406:2019-12-03T11:06:46.837+0000:1575342406:2019-12-03T11:06:46.837+0000:Yeah ideally you should use OVERRIDE header if you set it manually. But the code likely still need to evaluate the header per message in that iterator, instead of once outside
rgala:1575602801:2019-12-06T11:26:41.666+0000:1575602801:2019-12-06T11:26:41.666+0000:Any chance this gets implemented in 2.24.x branch too?
omarsmak:1575606862:2019-12-06T12:34:22.251+0000:1575606862:2019-12-06T12:34:22.251+0000:[~rgala] yes and no, the reason is, this fix uses the header being introduced in CAMEL-13878, which exists in Camel 3. Hence IMO I am not comfortable of changing the header to TOPIC only for 2.24.x, therefore I'd prefer to keep it at Camel 3 releases
rgala:1575612892:2019-12-06T14:14:52.930+0000:1575612892:2019-12-06T14:14:52.930+0000:In version 2.x.x there is no KafkaConstants.TOPIC_OVERRIDE, instead the KafkaConstants.TOPIC is used, so your fix should be possible to implement.
omarsmak:1575614486:2019-12-06T14:41:26.381+0000:1575614486:2019-12-06T14:41:26.381+0000:[~davsclaus] what do you think? Shall we add it as well to 2.24.x branch but with {{KafkaConstants.TOPIC}} instead? 
acosentino:1575614632:2019-12-06T14:43:52.031+0000:1575614632:2019-12-06T14:43:52.031+0000:It depends if we consider this a bug. To me this is an improvement so it should go in 2.25.0
omarsmak:1575615485:2019-12-06T14:58:05.491+0000:1575615485:2019-12-06T14:58:05.491+0000:For me as well it is more an improvement. I was only concerned about the header being used, as for Camel 3 is a different header to override topic but when I think about it again, is not a big deal to use TOPIC header as [~rgala] mentioned, only for 2.25.0 branch if we agree on it  
davsclaus:1575615651:2019-12-06T15:00:51.060+0000:1575615651:2019-12-06T15:00:51.060+0000:Not in 2.24.x - its not a bug, and 2.24.3 is the last one so we wont touch an import component like kafka.

All work is focused on 3.x and 2.25 is last 2.x so if you want to help, you can take the work done on 3.x and provide as PR against camel-2.x branch. Then it can come into 2.25.0
rgala:1577691850:2019-12-30T15:44:10.327+0000:1577691850:2019-12-30T15:44:10.327+0000:I think that one more thing needs to be fixed.

Currently kafka metadata is set on aggregating Exchange (KafkaProducerCallback):

 
{code:java}
    public boolean process(Exchange exchange, AsyncCallback callback) {
        try {
            Iterator<ProducerRecord> c = createRecorder(exchange);
            KafkaProducerCallBack cb = new KafkaProducerCallBack(exchange, callback);
            while (c.hasNext()) {
                cb.increment();
                ProducerRecord rec = c.next();
                if (log.isDebugEnabled()) {
                    log.debug(""Sending message to topic: {}, partition: {}, key: {}"", rec.topic(), rec.partition(), rec.key());
                }
                kafkaProducer.send(rec, cb);
            }
            return cb.allSent();
        } catch (Exception ex) {
            exchange.setException(ex);
        }
        callback.done(true);
        return true;
    }
{code}
Because of this it is impossible to match that data with each individual aggregated exchange.

 

For example, when aggregating 10 exchanges, after sending data to kafka, the recordMetadatas list in KafkaProducerCallback will have 10 elements (callback is called by kafka client 10 times).

It would be better if the KafkaProducerCallback was created separately for each aggregated exchange and the metadata set in KafkaConstants.KAFKA_RECORDMETA header on exchange. Currently I can try to match metadata by array index numbers of recordMetadatas and exchange list, but I am not sure if this is a reliable solution. Kafka client may not necessarily call callbacks in the same order as the kafkaProducer.send(rec, cb) was called.
rgala:1577752557:2019-12-31T08:35:57.842+0000:1577754442:2019-12-31T09:07:22.336+0000:Also, kafka message key should be taken from aggregated exchange:

 Currently it is taken from aggregating exchange:
{code:java}
        Object key = endpoint.getConfiguration().getKey() != null
                ? endpoint.getConfiguration().getKey() : exchange.getIn().getHeader(KafkaConstants.KEY);
{code}
Patch proposition attached. I added possibilty to override key and partition on aggregated exchange. Also I think I fixed the call to *tryConvertToSerializedType* method, because it was different for aggregated exchanges than non aggregated.

 
rgala:1577754457:2019-12-31T09:07:37.616+0000:1577754457:2019-12-31T09:07:37.616+0000:[^kafka2.patch]
rgala:1577938337:2020-01-02T12:12:17.135+0000:1577938337:2020-01-02T12:12:17.135+0000:Here is the patch that adds setting metadata for each aggregated exchange/message individually. I left setting metadata on aggregated exchange for backwards compatibility. I am not really proud of this code, but it works. Please take a look.

 

[^metadata.patch]
omarsmak:1578271780:2020-01-06T08:49:40.341+0000:1578271780:2020-01-06T08:49:40.341+0000:Hey [~rgala], can you please put the metadata aggregation and for the aggregated exchanges as separate JIRA tickets? Also since you have a patch already, I'd strongly recommend if you can port the patch as PR attached to the tickets so we can review them :) 
rgala:1578281115:2020-01-06T11:25:15.201+0000:1578281115:2020-01-06T11:25:15.201+0000:Done :)

https://issues.apache.org/jira/browse/CAMEL-14360

https://issues.apache.org/jira/browse/CAMEL-14362
omarsmak:1578282903:2020-01-06T11:55:03.712+0000:1578282903:2020-01-06T11:55:03.712+0000:thanks 
davsclaus:1578535612:2020-01-09T10:06:52.013+0000:1578535612:2020-01-09T10:06:52.013+0000:Thanks for spotting this and creating a new JIRA and PR. I added review on the PR"
0,CAMEL-14232,Task,Minor,None,3.1.0,"
None
",Resolved,Fixed,3.1.0,Claus Ibsen,Alex Dettinger,0,2,2019-11-29 17:23:28+00:00,2019-12-03 09:35:17+00:00,"The documentation for the serverAliveInterval option is not clear:
+ What is the default value ? zero ?
+ The unit looks to be milliseconds and could be precised in the documentation, link in the code.",davsclaus:1575336917:2019-12-03T09:35:17.052+0000:1575336917:2019-12-03T09:35:17.052+0000:Yes its in millis and default is zero
0,CAMEL-14231,Bug,Minor,None,,"
None
",Resolved,Fixed,None,Omar Al-Safi,Heiko Braun,0,2,2019-11-29 16:29:52+00:00,2019-11-29 19:05:44+00:00,The https://camel.apache.org/discussion-forums.html  link here https://camel.apache.org/manual/latest/contributing.html#getting-in-touch is broken,"omarsmak:1575016822:2019-11-29T16:40:22.438+0000:1575016822:2019-11-29T16:40:22.438+0000:we have this page now: https://camel.apache.org/community/support/ and this page https://camel.apache.org/manual/latest/mailing-lists.html 
omarsmak:1575016967:2019-11-29T16:42:47.054+0000:1575016967:2019-11-29T16:42:47.054+0000:Sorry forgot to ask, but from where did you get to this page?
heiko.braun:1575021712:2019-11-29T18:01:52.380+0000:1575021712:2019-11-29T18:01:52.380+0000:Its taken from here: https://camel.apache.org/manual/latest/contributing.html#getting-in-touch
omarsmak:1575024529:2019-11-29T18:48:49.284+0000:1575024529:2019-11-29T18:48:49.284+0000:Thanks, updated the issue description "
0,CAMEL-14230,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.1,Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-11-29 14:22:20+00:00,2019-11-29 14:23:44+00:00,This task is to disable RC4 and MD5 TLS ciphersuites by default. They're likely disabled by the JVM anyway so this should have no real impact.,
0,CAMEL-14229,Improvement,Major,3.0.0.RC3,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Mahesh,0,1,2019-11-29 10:29:05+00:00,2019-12-02 07:38:38+00:00,The response from the Exchange contains only Body. The headers are missing in the response.,
0,CAMEL-14228,Improvement,Major,"2.24.2, 3.0.0",None,"
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Claus Ibsen,0,1,2019-11-29 10:07:00+00:00,2019-11-29 10:19:04+00:00,"We set it as cpu core x 2, which was what netty used to do. But lets just use 0 and let netty figure it out.",
0,CAMEL-14227,New Feature,Major,3.0.0,3.1.0,"
None
",Resolved,Fixed,3.1.0,Freeman Yue Fang,Freeman Yue Fang,0,2,2019-11-28 20:39:39+00:00,2019-12-06 10:02:53+00:00,"similarly as CAMEL-12619, but just the other way.


We can add a new camel-rest-openapi component and use apicurio-data-module which can support OpenApi 2 & 3 at the same time instead of using swagger.","ffang:1574944964:2019-11-28T20:42:44.931+0000:1574944964:2019-11-28T20:42:44.931+0000:will send PR soon...
ffang:1575449030:2019-12-04T16:43:50.817+0000:1575449206:2019-12-04T16:46:46.481+0000:Hi [~zregvart] [~davsclaus],

Please see the PR.

It's like old camel-rest-swagger component but use apicurio data model so can parse both OpenApi 2 & 3 doc and generate REST DSL Client accordingly.

Compared to camel-rest-swagger, the default open api doc location changed from swagger.json to openapi.json.

All the existing open api v2 tests passed, also added open api v3 tests accordingly.

Please let me know what you guys think.

Cheers
Freeman
ffang:1575531753:2019-12-05T15:42:33.544+0000:1575531753:2019-12-05T15:42:33.544+0000:Hi [~zregvart] [~davsclaus],

Merged to master. I think we also want it backport to camel 2.x branch, correct?
If so, please let me know which version we should backport.

Cheers
Freeman
zregvart:1575597773:2019-12-06T10:02:53.731+0000:1575597773:2019-12-06T10:02:53.731+0000: Thanks for that [~ffang]! You can backport this change to the camel-2.x branch, this branch is scheduled to be released with Camel 2.25. We don't add new features to other branches, we only backport fixes to those."
0,CAMEL-14226,Task,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Guillaume Nodet,Guillaume Nodet,0,1,2019-11-28 18:57:17+00:00,2020-02-04 16:27:58+00:00,I'd like to experiment moving the spring-boot support into a different git repository ...,
0,CAMEL-14225,Bug,Minor,2.23.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Rajesh Pote,0,2,2019-11-28 08:58:25+00:00,2020-05-18 19:43:19+00:00,"HI Team,


We have setup the camel route over camel restlet for processing incoming http request requests but while returning the HTTP Response the http client is getting incorrect header name ""Content-type"" instead of ""Content-Type"".


When we deploy same web service over spring or cxf then we are getting correct header name in HTTP response.


 


Steps to reproduce:


1.Deploy restlet service.


2. Call the rest service using http client ""SoupUI"" or Postman and check the response headers.


 


Response Return by camel-restlet:


Tue Nov 26 12:27:33 GMT 2019:DEBUG:<< ""HTTP/1.1 200 OK[\r][\n]""


Tue Nov 26 12:27:33 GMT 2019:DEBUG:<< ""Server: Restlet-Framework/2.3.12[\r][\n]""


Tue Nov 26 12:27:33 GMT 2019:DEBUG:<< ""Date: Tue, 26 Nov 2019 12:27:33 GMT[\r][\n]""


Tue Nov 26 12:27:33 GMT 2019:DEBUG:<< ""Content-type: application/xml[\r][\n]""


Tue Nov 26 12:27:33 GMT 2019:DEBUG:<< ""Content-length: 139[\r][\n]""


Tue Nov 26 12:27:33 GMT 2019:DEBUG:<< ""[\r][\n]""


 


Response Return by spring:


Tue Nov 26 12:31:43 GMT 2019:DEBUG:<< ""HTTP/1.1 200 OK[\r][\n]""


Tue Nov 26 12:31:43 GMT 2019:DEBUG:<< ""Date: Tue, 26 Nov 2019 12:31:43 GMT[\r][\n]""


Tue Nov 26 12:31:43 GMT 2019:DEBUG:<< ""Content-Type: application/xml[\r][\n]""


Tue Nov 26 12:31:43 GMT 2019:DEBUG:<< ""Content-Length: 139[\r][\n]""


Tue Nov 26 12:31:43 GMT 2019:DEBUG:<< ""Server: -[\r][\n]""


Tue Nov 26 12:31:43 GMT 2019:DEBUG:<< ""[\r][\n]""


 


We have tried to set correct header name on exchange object but still camel is overriding it.


 


Questions:



Is there way to override the content type header name?
Is this known issue in camel? if yes, do we have resolution available in any latest version?","davsclaus:1574904992:2019-11-28T09:36:32.675+0000:1574904992:2019-11-28T09:36:32.675+0000:camel-restlet is deprecated.
Also http header keys are case insensitive.
davsclaus:1574905056:2019-11-28T09:37:36.236+0000:1574905056:2019-11-28T09:37:36.236+0000:You can set a header with setHeader in Camel routes.

setHeader(""Content-Type"", constant(""xxx""))
rajesh.pote:1574922610:2019-11-28T14:30:10.559+0000:1574922725:2019-11-28T14:32:05.362+0000:Thanks a lot [~davsclaus] for quick response.

I tried to set header on camel (as you suggested) but no luck. Do we know which class from camel framework is overriding the header key? and is it possible to write our own implementation for same?

I know camel follows the industry standard but our problem here is the other external application which is calling this restlet service is legacy application which works on TCP protocol and cant be changed in production unless it is replaced by some another application.    

 

Much appreciate your help here.

Thanks,

Rajesh Pote 
davsclaus:1575092931:2019-11-30T13:48:51.589+0000:1575092931:2019-11-30T13:48:51.589+0000:Try using something else than camel-restlet. Or dive into the source code and see what happens in camel-restlet/restlet as its smells as an issue there.

davsclaus:1589802199:2020-05-18T19:43:19.335+0000:1589802199:2020-05-18T19:43:19.335+0000:camel-restlet is deprecated and removed in 3.x"
0,CAMEL-14224,Bug,Minor,2.24.2,"2.24.3, 3.0.1, 2.25.0, 3.1.0","
None
",Resolved,Fixed,"2.24.3, 3.0.1, 2.25.0, 3.1.0",Claus Ibsen,michael elbaz,0,3,2019-11-27 14:49:45+00:00,2019-12-05 12:37:31+00:00,"I don't know what the idea behind but in this class (Producer) sendToAll method the Thread.sleep in the while loop make all the process crazy slow just try to run this code




    @Override
    public void configure() throws Exception {
        String uri = ""websocket://127.0.0.1:8443/test?sendToAll=true&sendTimeout=0"";

        from(uri).to(uri);
    }




and send multiple message to the server and you will see how slow is it for my point there is two defect:



Give the availability to send to all expect the sender
Fix the while loop



During my test to have decent performance i set this parameter `sendTimeout` to 0 but i got this exception then: 




org.apache.camel.component.websocket.WebsocketSendException: Failed to deliver message within 0 millis to one or more recipients.. Exchange[ID-DESKTOP-S8PM2C4-1574865248397-0-3]
	at org.apache.camel.component.websocket.WebsocketProducer.sendToAll(WebsocketProducer.java:149) ~[camel-websocket-2.24.2.jar:2.24.2]
	at org.apache.camel.component.websocket.WebsocketProducer.process(WebsocketProducer.java:52) ~[camel-websocket-2.24.2.jar:2.24.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61) ~[camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:76) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:148) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201) [camel-core-2.24.2.jar:2.24.2]
	at org.apache.camel.component.websocket.WebsocketConsumer.sendMessage(WebsocketConsumer.java:75) [camel-websocket-2.24.2.jar:2.24.2]
	at org.apache.camel.component.websocket.WebsocketConsumer.sendMessage(WebsocketConsumer.java:59) [camel-websocket-2.24.2.jar:2.24.2]
	at org.apache.camel.component.websocket.DefaultWebsocket.onMessage(DefaultWebsocket.java:66) [camel-websocket-2.24.2.jar:2.24.2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_201]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_201]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_201]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_201]
	at org.eclipse.jetty.websocket.common.events.annotated.CallableMethod.call(CallableMethod.java:70) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.events.annotated.OptionalSessionCallableMethod.call(OptionalSessionCallableMethod.java:72) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.events.JettyAnnotatedEventDriver.onTextMessage(JettyAnnotatedEventDriver.java:251) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.events.JettyAnnotatedEventDriver.onTextFrame(JettyAnnotatedEventDriver.java:243) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:150) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:322) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.extensions.AbstractExtension.nextIncomingFrame(AbstractExtension.java:147) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.nextIncomingFrame(PerMessageDeflateExtension.java:112) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.extensions.compress.CompressExtension.forwardIncoming(CompressExtension.java:168) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.extensions.compress.PerMessageDeflateExtension.incomingFrame(PerMessageDeflateExtension.java:92) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:202) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:225) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.Parser.parseSingleFrame(Parser.java:259) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:460) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:441) [websocket-common-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:311) [jetty-io-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) [jetty-io-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117) [jetty-io-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.runTask(EatWhatYouKill.java:336) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.doProduce(EatWhatYouKill.java:313) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.tryProduce(EatWhatYouKill.java:171) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.strategy.EatWhatYouKill.run(EatWhatYouKill.java:129) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:388) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:806) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:938) [jetty-util-9.4.22.v20191022.jar:9.4.22.v20191022]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_201]","davsclaus:1575092979:2019-11-30T13:49:39.882+0000:1575092979:2019-11-30T13:49:39.882+0000:And what happens when you use =1
davsclaus:1575093076:2019-11-30T13:51:16.624+0000:1575093076:2019-11-30T13:51:16.624+0000:And yeah looks like you can move this sleep out in the outer loop so it sleeps per run and not per message, can you try to patch the code and test it, and then provide a PR
michael992:1575272274:2019-12-02T15:37:54.677+0000:1575272274:2019-12-02T15:37:54.677+0000:With 1 same exception depending on how fast the message was processed, yeah i'll try 
michael992:1575291960:2019-12-02T21:06:00.567+0000:1575292175:2019-12-02T21:09:35.148+0000:Hum i don't know how to proceed because there is no test for this specific part, by the way there is a lot of non passing tests when i running using my IDE (IntelliJ) for different raison is it normal ?
bedla:1575294725:2019-12-02T21:52:05.922+0000:1575294725:2019-12-02T21:52:05.922+0000:All tests (except one for hystrix) are passing on CI ( [https://builds.apache.org/job/Camel/job/master/1716/testReport/] ) . I was never able to run tests directly in Intellij, the project is simply too huge for IDE and it randomly fails. You need to test it with maven.

 
{code:java}
cd components/whatever
mvn clean install # build and test all in submodule
mvn clean install -Dtest=YourTestClassName # build module and run single test 
{code}
 
michael992:1575339964:2019-12-03T10:26:04.318+0000:1575339964:2019-12-03T10:26:04.318+0000:I know tests are passed using maven but for my point it must be passed when using an IDE also, by the way you can just open your component when you are using an ide and not the whole project 
davsclaus:1575357605:2019-12-03T15:20:05.715+0000:1575357605:2019-12-03T15:20:05.715+0000:Well it can be some weird limitation in jetty how fast you can send using it.
michael992:1575359765:2019-12-03T15:56:05.909+0000:1575359765:2019-12-03T15:56:05.909+0000:It is not limitation of jetty actual implementation are wrong as you say before we have to fix this loop
michael992:1575520651:2019-12-05T12:37:31.438+0000:1575520651:2019-12-05T12:37:31.438+0000:Oh you already fix this one thanks !"
0,CAMEL-14223,Bug,Minor,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Omar Al-Safi,Omar Al-Safi,0,1,2019-11-27 14:49:12+00:00,2019-11-29 09:53:39+00:00,"While I was trying out the endpoint DSL, I noticed whenever mvn clean install :camel-package:generate-endpoint-dsl maven command is executed under specific component, the corresponding DSL factory will be be created as expected, however EndpointBuilderFactory interface won't be updated to include the new generated DSL factory which as result, the generated factory won't be exposed whenever camel-endpointdsl is imported",
0,CAMEL-14222,New Feature,Minor,3.0.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Omar Al-Safi,0,1,2019-11-27 10:32:10+00:00,2022-09-02 11:43:29+00:00,"While I was thinking of CAMEL-13807 and the endpoint DSL, I thought it would be cool to combine these DSLs into global camel context DSL where the user just configure DSL without doing much further, e,g:




camelContext.builder()
                .components().jms(). concurrentConsumers()
                .routes()
                    .from(kafka(....))
                        .marshal().json()
                    .to(file(....))
                .end()
          .start();




Above is just a rough idea, not sure how feasible it is but I think is going to be very cool to have such feature in Camel, it could simplify camel context to users.",
0,CAMEL-14221,New Feature,Major,3.0.0.RC3,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Unassigned,Mahesh,0,1,2019-11-27 04:23:11+00:00,2019-11-29 12:52:07+00:00,"The STOMP version is hardcoded in the org.fusesource.stomp.client.Stomp class. Though the org.fusesource.stomp.client.Stomp class has setter method for version, the Camel-Stomp Component has not exposed that option to be set by the users.


Looks like StompEndpoint and StompConfiguration classes would need changes to allow users to set version.


 


STOMP 1.2 has been available for years and most of the message brokers support STOMP 1.2. In such scenarios it becomes a necessary feature for the camel-stomp to include the support for STOMP 1.2",
0,CAMEL-14220,Bug,Major,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Claus Ibsen,0,2,2019-11-26 19:06:42+00:00,2020-01-23 07:38:11+00:00,It triggers a lazy create connection factory that uses localhost:61616 and sets it due camel-main can detect singleton instanses from registry and auto configure them. But sadly activemq uses this lazy create convention in getter (legacy from Camel 1.x days),"davsclaus:1575353975:2019-12-03T14:19:35.863+0000:1575353975:2019-12-03T14:19:35.863+0000:Okay fixing this in camel-jms which was the cause with some lazy creation in the getter, that was a style James used ;)
preben:1579680639:2020-01-22T16:10:39.630+0000:1579680639:2020-01-22T16:10:39.630+0000:When upgrading to 3.0.1 from 3.0.0 I found issue in initializing the Activemq FailoverTransport. It will always use localhost:61616.

I think we should reopen this issue.

See gitter [https://gitter.im/apache/apache-camel?at=5e284b963fd0cc7cfe17da8d]
davsclaus:1579727608:2020-01-23T05:13:28.758+0000:1579727608:2020-01-23T05:13:28.758+0000:You are using spring boot, its not entirely the same. Can you put a sample project on github. And also try with 3.1.0-SNAPSHOT
preben:1579735810:2020-01-23T07:30:10.466+0000:1579736291:2020-01-23T07:38:11.635+0000:Sure. I created the project here [https://github.com/pax95/failover-test]

When running the project the failover task will try to connect to localhost

(I see the same behaviour on 3.1.0-SNAPSHOT)
{code:java}
2020-01-23 08:17:32.352 WARN 8463 --- [ActiveMQ Task-1] o.a.a.t.failover.FailoverTransport : Failed to connect to [tcp://localhost:61616] after: 10 attempt(s) continuing to retry.{code}
 

If you change the camel version to 3.0.0 you should see the expected behaviour 
{code:java}
2020-01-23 08:24:20.043 WARN 10019 --- [ActiveMQ Task-1] o.a.a.t.failover.FailoverTransport : Failed to connect to [ssl://foo:61617, ssl://bar:61617] after: 10 attempt(s) continuing to retry.{code}
 

It seems that the FailoverTransport get intialized twice and the default localhost get's added the second time.

I'm aware of that camel also has a camel.component.activemq.broker-u-r-l, but when using SB it should still work with the spring configuration property i would guess

 "
0,CAMEL-14219,Bug,Major,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Nicola Ferraro,Nicola Ferraro,0,1,2019-11-26 00:01:06+00:00,2019-11-27 04:01:35+00:00,See: https://stackoverflow.com/questions/59004326/my-camel-route-app-detects-other-apps-published-ampq-message-but-fails-to/59041466#59041466,
0,CAMEL-14218,Bug,Minor,None,None,"
None
",Resolved,Duplicate,None,Unassigned,Omar Al-Safi,0,2,2019-11-25 18:09:32+00:00,2019-11-30 13:52:01+00:00,"Related to CAMEL-10937, now if we have the same example as CAMEL-10937:




                KafkaComponent kafka = new KafkaComponent();
                kafka.setBrokers(""{{kafka.host}}:{{kafka.port}}"");




Having the properties component injected, looks camel is not resolving the placeholder for these properties. However, since the property binding has been heavily reworked in 3.0.0, I wasn't sure if that is an expected behavior or a bug, perhaps davsclaus you can shed some light here? 
In case it needs to be fixed, I'd like to help out to fix it .","davsclaus:1574763349:2019-11-26T18:15:49.443+0000:1574798619:2019-11-27T04:03:39.770+0000:For Camel 3 - That is only supported when you configure via spring boot / camel-main etc via properties.

For direct Java configuration via Java API then there is a JIRA ticket (CAMEL-13807) about a ""component fluent builder"" alike endpoint-dsl. We need that for this kind of configuration, where each option would then be configurable via property placeholders and as well via their type - just as endpoint dsl.

So for Camel 3.1 it would be cool to have component configuration fluent builders auto-generated like endpoint dsl. We can drop that into the same JAR camel-endpointdsl.
"
0,CAMEL-14217,New Feature,Major,None,,"
None
",Resolved,Not A Problem,None,Unassigned,Ravishankar Hassain,0,2,2019-11-25 18:08:05+00:00,2019-11-30 13:53:57+00:00,"I am using Apache AMQP protocol to connect with RabbitMQ. I am using transacted route and when the camel routes starts I have noticed the below error in the RabbitMQ server logs 


{'v1_0.error',\{symbol,<<""amqp:not-implemented"">>}

,{utf8,<<""Transactions not supported"">>},undefined}","davsclaus:1575093231:2019-11-30T13:53:51.172+0000:1575093231:2019-11-30T13:53:51.172+0000:its likely better to use camel-rabbitmq with the rabbit, as its not amqp 1.0 spec compliant."
0,CAMEL-14216,Task,Minor,3.0.0,3.x,"
None
",Resolved,Fixed,3.x,Omar Al-Safi,Omar Al-Safi,0,2,2019-11-25 16:30:10+00:00,2019-11-26 09:15:52+00:00,"Since Camel-stomp component is relying on https://github.com/fusesource/stompjms/tree/master/stompjms-client which looks like is no longer actively maintained, it will make sense to remove it from camel next releases in order to reduce the overhead.","davsclaus:1574671636:2019-11-25T16:47:16.845+0000:1574671636:2019-11-25T16:47:16.845+0000:There is no alternative component, and yes it may not be active, but the STOMP spec is also not active, its a dead spec.

I dont see a reason to remove it so aggresively. People in the community can step up to help maintain the stomp client project etc.
At best you can do is to add a note in the docs.



omarsmak:1574672203:2019-11-25T16:56:43.939+0000:1574672203:2019-11-25T16:56:43.939+0000:Sure then, we can add this as note in the docs in regards to the STOMP specs. Thanks for the info"
0,CAMEL-14215,New Feature,Major,3.x,3.1.0,"

karaf
osgi

",Resolved,Fixed,3.1.0,Jean-Baptiste Onofré,Bob Paulin,0,3,2019-11-25 15:15:15+00:00,2019-12-09 15:33:56+00:00,"The current camel-core-osgi implementation sets up everything to work in an OSGi environment but does not start the OsgiDefaultCamelContext .  Currently Spring Boot has an implementation that recognizes RouteBuilder components and adds them to the context at starter.   This issue is to create a similar OSGi implementation that achieves the following goals:


 


1) Starts a CamelContext the is available to the entire runtime.


2) Detects and adds RouteBuilders that have been registered as services in the runtime prior to the Context Starting.


3) Detects and adds new RouteBuilders that are registered after the context is started.


4) Detects and removes RouteBuilders as they are de-registered from the runtime.


5) Allows the runtime to stop the CamelContext when the runtime or bundle is stopped.


 


 


For discussion see https://lists.apache.org/thread.html/63506b8fac49c9f50a921ba0fd81ed37e69c66ad778fb9d16adb90c3@%3Cdev.camel.apache.org%3E","bob:1574802049:2019-11-27T05:00:49.591+0000:1574802049:2019-11-27T05:00:49.591+0000:Created the an initial implementation in [https://github.com/bobpaulin/camel/tree/feature/camel-main-osgi] .

This initial work does the following:

Creates a camel-core module called camel-main-osgi that fulfills the goals stated in the Jira.

This registers a CamelContext as an OSGi Service (Should this be a different interface or multiple interfaces? ModelCamelContext? )

Converte unit tests to the karaf harness as dependencies already exist in the Camel Project

Places the camel-main-osgi in the camel-core karaf feature. (Should this be it's own separate feature?)

CC [~jbonofre]
bob:1575359474:2019-12-03T15:51:14.314+0000:1575359474:2019-12-03T15:51:14.314+0000:Reopen for refactors requested by [~davsclaus]
davsclaus:1575404651:2019-12-04T04:24:11.105+0000:1575404651:2019-12-04T04:24:11.105+0000:Thanks for keep working on this.

Thanks so what I think is really taking people with some surprise is that it registers Camel routes into the same single camel context from any bundles. The point of Apache Karaf was to be like an app server where each bundle is isolated. So this goes against this practice. This should be documented much much more clearly. And also it lacks features with the ease of use how to configure camel context itself (you end up with its defaults) and how would people do dependency injections for beans etc.

Also it should be renamed to camel-osgi-activator, and moved to components (as its not a core piece, eg not used by other osgi like osgi blueprint which is the main osgi support in Camel)."
0,CAMEL-14214,New Feature,Minor,3.0.0.RC3,None,"
None
",Resolved,Won't Fix,None,Andrea Cosentino,Vilmos Nagy,0,2,2019-11-25 14:02:33+00:00,2020-01-08 10:31:15+00:00,"I use the AWS-S3 component to sync some files from an FTP server to a self-hosted minio client. (Minio is object storage server compatible with Amazon S3 APIs). It works fine, and the route is fairly simple, see




<route>
    <from uri=""ftp://{{ftp.uri}}/?password=password""/>
    <setBody>
        <simple>${body.body}</simple>
    </setBody>
    <setHeader name=""CamelAwsS3Key"">
        <simple>{{s3.basepath}}/${header.CamelFileNameOnly}</simple>
    </setHeader>
    <to uri=""aws-s3://{{s3.bucket}}?amazonS3Client=#minioClient""/>
</route>




We'd like to be able to start the application even when the minio server is not available.


Currently, the app fails to start in this case, because the S3Endpoint class tries to check whether the given bucket exists (in line S3Endpoint.java:102). If I define the fileName query parameter, the S3Endpoint will skip the check, and the application starts (and the uploaded file's name is correct, so I can't see what this query parameter does in this case when the S3 component is a producer).


So, currently, I can do a workaround like:




<to uri=""aws-s3://{{s3.bucket}}?amazonS3Client=#minioClient&amp;fileName=a""/>




But I'd like to do the following:




<to uri=""aws-s3://{{s3.bucket}}?amazonS3Client=#minioClient&amp;lazyCreateBucket=true""/>




(Something similar to lazyStartProducer, but lazyStartProducer does not solve my problem :\ )","acosentino:1578037883:2020-01-03T15:51:23.801+0000:1578037883:2020-01-03T15:51:23.801+0000:This should be fixed through CAMEL-13591. Can you double check? You can use autoCreateBucket option and set it to false.
acosentino:1578038130:2020-01-03T15:55:30.503+0000:1578038130:2020-01-03T15:55:30.503+0000:No, it doesn't fix it, because you don't want to interact with the server as it's not started. aws-s3 component is developed to work with AWS and not with minio, so the possibilty of server not up and running is really remote, near impossible I'd say. We can by the way introduce a lazy initiliziation, but it makes much more sense to have a minio component.
acosentino:1578038148:2020-01-03T15:55:48.180+0000:1578038148:2020-01-03T15:55:48.180+0000:There is an issue about minio somewhere.
acosentino:1578038203:2020-01-03T15:56:43.701+0000:1578038203:2020-01-03T15:56:43.701+0000:CAMEL-13934
acosentino:1578450675:2020-01-08T10:31:15.401+0000:1578450675:2020-01-08T10:31:15.401+0000:Lets support this in the minio component, makes much more sense."
0,CAMEL-14213,Bug,Major,3.0.0,"3.0.1, 3.1.0","
None
",Resolved,Fixed,"3.0.1, 3.1.0",Claus Ibsen,Claus Ibsen,0,1,2019-11-25 09:11:52+00:00,2019-12-03 14:55:33+00:00,"If you have 2 jms components with their own settings, and you dont set a CF then it may gets autowired to the wrong CF in case you have XA and non-XA mixed up etc. (a bit complex).",
0,CAMEL-14212,Bug,Major,"2.20.4, 2.24.0",,"
None
",Resolved,Won't Fix,None,Unassigned,Francesco Boscarino,0,2,2019-11-24 11:10:10+00:00,2019-11-24 11:27:42+00:00,"groovy language is expected to export ""properties"" as org.apache.camel.builder.script.PropertiesFunction but it turns out ""properties"" is a LinkedHashMap without .resolve() method.


Just try the simple context:
<?xml version=""1.0"" encoding=""UTF-8""?>
<beans xmlns=""http://www.springframework.org/schema/beans""xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsdhttp://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">
 
<bean id=""properties""class=""org.apache.camel.component.properties.PropertiesComponent"">
<property name=""location"" value=""classpath:myprop.properties""/>
</bean>
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
<route>
<from uri=""timer:timer?repeatCount=1""/>
<setBody>
<groovy>properties</groovy>
</setBody>
<to uri=""log:debug?showAll=true&multiline=true""/>
</route>
</camelContext>
</beans>
 
The output is:


[l-1) thread #2 - timer://timer] debug                          INFO  Exchange[


, Id: ID-mba2015-lan-1574592722421-0-1


, ExchangePattern: InOnly


, Properties: {CamelCreatedTimestamp=Sun Nov 24 11:52:03 CET 2019, CamelExternalRedelivered=false, CamelMessageHistory=[DefaultMessageHistory[routeId=route1, node=setBody1], DefaultMessageHistory[routeId=route1, node=to1]], CamelTimerCounter=1, CamelTimerFiredTime=Sun Nov 24 11:52:03 CET 2019, CamelTimerName=timer, CamelTimerPeriod=1000, CamelToEndpoint=log://debug?multiline=true&showAll=true}


, Headers: {breadcrumbId=ID-mba2015-lan-1574592722421-0-1, firedTime=Sun Nov 24 11:52:03 CET 2019}


, BodyType: java.util.LinkedHashMap


, Body: {class=class script1574592724113926053069, binding=groovy.lang.Binding@748ee9f1}


, Out: null: 


]","davsclaus:1574566057:2019-11-24T11:27:37.588+0000:1574566057:2019-11-24T11:27:37.588+0000:camel-script is deprecated
https://github.com/apache/camel/blob/camel-2.x/components/camel-script/pom.xml#L31

And it may be that you are using camel-groovy directly and not camel-script. But camel-script is deprecated and as such dont use it."
0,CAMEL-14211,Task,Minor,3.0.0,3.0.0,"
None
",Resolved,Fixed,3.0.0,Marius Cornescu,Claus Ibsen,0,2,2019-11-23 07:51:24+00:00,2019-11-23 09:55:26+00:00,Added @ignore to 2 tests that fails which we need to fix after recent changes,"davsclaus:1574466783:2019-11-23T07:53:03.598+0000:1574466783:2019-11-23T07:53:03.598+0000:[~marius_cornescu] can you take a look
marius_cornescu:1574470925:2019-11-23T09:02:05.975+0000:1574470925:2019-11-23T09:02:05.975+0000:[~davsclaus], I'll take a look.
marius_cornescu:1574471570:2019-11-23T09:12:50.945+0000:1574471570:2019-11-23T09:12:50.945+0000:[~davsclaus], fixed. That code was lost during my merge."
0,CAMEL-14210,Improvement,Minor,3.0.0.RC3,3.0.0,"
None
",Closed,Duplicate,3.0.0,Unassigned,krishnath poologanathan,0,1,2019-11-22 16:50:49+00:00,2019-11-22 17:27:36+00:00,Corda has released C4.3 last week and this version need to be upgraded in camel-corda component,pkrishnath:1574414844:2019-11-22T17:27:24.229+0000:1574414844:2019-11-22T17:27:24.229+0000:This has been updated and duplicate ticket 
0,CAMEL-14209,New Feature,Minor,3.0.0-M3,3.x,"
None
",Resolved,Abandoned,3.x,Unassigned,Vilmos Nagy,0,2,2019-11-22 16:05:54+00:00,2022-09-02 11:43:05+00:00,"I want to sync the files from a directory to an S3 bucket - in case there's a doneFile in the directory. It's an easy job with the file component and with the aggregator.


But I do want to include the doneFile as well.


As far as I understand it's easy to implement a new query parameter to the file component (includeDoneFile) and modify the GenericFileConsumer accordingly (around the 660. line):




            if (endpoint.isDoneFile(file.getFileNameOnly()) && !endpoint.isIncludeDoneFile()) {
                log.trace(""Skipping done file: {}"", file);
                return false;
            }




Would you accept a PR with this change?","davsclaus:1574415848:2019-11-22T17:44:08.673+0000:1574415848:2019-11-22T17:44:08.673+0000:So you are doing a from file to s3 and in the file directory you are using doneFile option, and want to sync that file as well to s3, even if such a file is an empty marker file?

Yeah sure you are welcome to work on a PR and include an unit test (just mind unit tests goes into camel-core) as file used to be in camel-core for camel 2.x
vilmos.nagy:1574660712:2019-11-25T13:45:12.584+0000:1574660712:2019-11-25T13:45:12.584+0000:Yeah, you're understanding is correct - except that the marker file is not empty, they write some comments into that. Those comments are not _that_ important, but the previous solution saved the marker file with the other files, and I'd like to save the marker file as well.

 I'll do the PR this week, thanks.
davsclaus:1575093257:2019-11-30T13:54:17.693+0000:1575093257:2019-11-30T13:54:17.693+0000:How is it going with the PR?
vilmos.nagy:1575246198:2019-12-02T08:23:18.523+0000:1575246198:2019-12-02T08:23:18.523+0000:Didn't have the time for it last week, sorry. I'll do it this week ;)"
0,CAMEL-14208,Improvement,Major,3.0.0,3.2.0,"
None
",Resolved,Fixed,3.2.0,Jiri Ondrusek,Jiri Ondrusek,0,4,2019-11-22 07:18:23+00:00,2020-03-20 10:43:55+00:00,It should be possible to configure Keycloak adapter with spring-boot to secure endpoints.,"omarsmak:1584671969:2020-03-20T10:39:29.089+0000:1584671969:2020-03-20T10:39:29.089+0000:[~jondruse] this ticket should be closed now I guess, isnt?
acosentino:1584672065:2020-03-20T10:41:05.193+0000:1584672065:2020-03-20T10:41:05.193+0000:yes, I think so"
0,CAMEL-14207,Bug,Major,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Tadayoshi Sato,Tadayoshi Sato,0,1,2019-11-22 07:03:18+00:00,2019-11-22 07:24:57+00:00,This bug is the Olingo2 version of CAMEL-13464.,
0,CAMEL-14206,New Feature,Major,None,None,"
None
",Resolved,Duplicate,3.x,Unassigned,Claus Ibsen,0,1,2019-11-21 19:50:11+00:00,2022-09-02 11:42:33+00:00,We should have the -starter JAR detect the HTTP server of Spring Boot (via spring boot api) and then expose that into the camel platform-http component,
0,CAMEL-14175,Sub-task,Major,None,3.x,"

help-wanted

",Resolved,Done,3.x,Unassigned,Omar Al-Safi,0,6,2019-11-13 14:17:12+00:00,2020-06-27 18:48:55+00:00,The current guide may lacking some info the may help users to get started with Camel. It would make sense to re-write this guide,"praveenkottarathil@gmail.com:1582643652:2020-02-25T23:14:12.003+0000:1582643652:2020-02-25T23:14:12.003+0000:I have started looking into this. 
Progress at: 
[https://github.com/PickledDragon/camel/tree/CAMEL-14175]

Comments and contributions welcome.
smile_outreachy:1583461759:2020-03-06T10:29:19.164+0000:1583461759:2020-03-06T10:29:19.164+0000:@[~zregvart] Can I work on this task as my first contribution ? 

Do we want the Getting Started Guide to be explaining more about the codebase and the installation procedure ?

Thanks
zregvart:1583468096:2020-03-06T12:14:56.833+0000:1583468096:2020-03-06T12:14:56.833+0000:[~smile_outreachy], [~praveenkottarathil@gmail.com] is already working on this, see the comment preceding yours. You can certainly help with this by collaborating, reviewing and commenting on the proposed changes made on the branch mentioned.
praveenkottarathil@gmail.com:1583472651:2020-03-06T13:30:51.662+0000:1583472651:2020-03-06T13:30:51.662+0000:Hi [~smile_outreachy]
 Thank you for offering help with this task. There is a [thread on the dev mailing list|http://mail-archives.apache.org/mod_mbox/camel-dev/202002.mbox/%3cCAJ1+MEOBTq0dh_WwLCyVGq-sz9hVvUECVa_BWX_xK9=o2Mu0zw@mail.gmail.com%3e], where some of the project committers indicated their views and expectations on this task (6 Messages so far). You may use it as a high-level guideline.[ This commit|https://github.com/PickledDragon/camel/commit/aa6227c0c5349457539a676a496d3b984be42649#diff-3e5fe0caeef794a78d51f0d755c296db] is my first attempt at rewriting the `getting started guide`.
Gracie:1585217277:2020-03-26T18:07:57.604+0000:1585217277:2020-03-26T18:07:57.604+0000:Hi [~zregvart], I would like to work on this issue if that's fine
 I'm an outreachy applicant
zregvart:1585275314:2020-03-27T10:15:14.040+0000:1585275314:2020-03-27T10:15:14.040+0000:Hi [~Gracie] please see above comment by [~praveenkottarathil@gmail.com] and the work already done. Please don't duplicate any work.
zregvart:1593254935:2020-06-27T18:48:55.703+0000:1593254935:2020-06-27T18:48:55.703+0000:I see [some work|https://github.com/apache/camel/search?q=CAMEL-14175&type=Commits] done by [~acosentino] on this few months ago, I'm going to resolve this, feel free to reopen with comment on what else needs to be done."
0,CAMEL-14174,Bug,Minor,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Otavio Rodolfo Piske,Otavio Rodolfo Piske,0,1,2019-11-13 11:53:10+00:00,2021-09-30 10:34:44+00:00,"When checking for the existence of the bucket the AWS S3 endpoint does not respect the values set with maxMessagesPerPoll [1]. Although it's not a severe problem, it may lead to a small degradation in the route startup when dealing with very larger buckets or simply an undesired behavior for users setting the maxMessagesPerPoll option. 


 


I'll send a PR for this.


 


1. https://github.com/apache/camel/blob/camel-3.0.0-RC3/components/camel-aws-s3/src/main/java/org/apache/camel/component/aws/s3/S3Endpoint.java#L102",
0,CAMEL-14173,Bug,Major,3.0.0.RC3,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Claus Ibsen,Roland Beisel,0,3,2019-11-13 11:22:30+00:00,2019-11-20 20:29:22+00:00,"If a client connects to MQTT broker with cleanSession=false, the broker creates a durable subscription for the client. If the application/camel-paho is shutdown (e.g. application deployment) the client is being unsubscribed from the topic (doStop() method in PahoConsumer.java). All messages that are sent in the meantime (while the client is offline) are lost for the client (irrespective of QOS level) because of unsubscription.


Expected behaviour: Camel / Paho Route Shutdown should not unsubscribe durable subscribers (QOS > 1) from topics.","davsclaus:1573650386:2019-11-13T21:06:26.661+0000:1573650386:2019-11-13T21:06:26.661+0000:Ah okay, you are welcome to work on a PR to help fix this. "
0,CAMEL-14172,Bug,Trivial,2.24.2,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Unassigned,David Schlenk,0,3,2019-11-12 16:11:21+00:00,2019-11-13 04:19:14+00:00,"The docs for the CXF component claim that setting the value of option loggingSizeLimit to -1 will disable the size limit. This is not the case - when using -1, the default size limit is still in place. CAMEL-9102 theoretically fixes this issue, but seems to have been closed without merging the PR. Happy to provide a new PR that does similar against current, but it would be nice if either the docs were changed or the bug gets fixed to do what the docs say.","acosentino:1573552432:2019-11-12T17:53:52.053+0000:1573552432:2019-11-12T17:53:52.053+0000:You're welcome to work on the fix. I don't remember why it wasn't merged.

This is the situation on master

[https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfEndpoint.java#L322]
dschlenkC1:1573573119:2019-11-12T23:38:39.613+0000:1573573119:2019-11-12T23:38:39.613+0000:[~acosentino] thanks for responding! I've tested this change against the v2 branch IRL and it does fix the issue. I tried my hand at figuring out how to write a unit test, but I couldn't figure out how to either obtain the underlying LoggingFeature from the CxfEndpoint to check for its value or successfully intercept the output to brute force testing that a message longer than the default worked. Happy to add one if someone can point me in the right direction, though. [PR #3332|https://github.com/apache/camel/pull/3332].
davsclaus:1573589954:2019-11-13T04:19:14.576+0000:1573589954:2019-11-13T04:19:14.576+0000:Thanks for the PR"
0,CAMEL-14171,Improvement,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,2,2019-11-12 10:19:09+00:00,2022-09-02 11:41:23+00:00,We should ideally avoid using jetty http client and use for example apache http client (4.x),"jeremyross:1621266635:2021-05-17T23:50:35.766+0000:1621266635:2021-05-17T23:50:35.766+0000:This would probably be a lot of work. Also, it looks like Apache HttpClient still doesn't support [websockets|https://issues.apache.org/jira/browse/HTTPCLIENT-973].

What's the rationale for switching?"
0,CAMEL-14170,Task,Major,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-11-12 09:35:00+00:00,2019-11-12 09:48:37+00:00,"Lets fix this WARN as the properties component is not a component anymore


2019-11-12 10:33:15.390  WARN 147 — [           main] o.a.c.i.e.DefaultCamelBeanPostProcessor  : No CamelContext defined yet so cannot inject into bean: properties",
0,CAMEL-14169,New Feature,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-11-12 08:51:58+00:00,2019-11-12 09:35:30+00:00,"So you can configure options like lazy start producer once globally or per component.
And ditto for a few other default endpoint options.


We shall expose this via CamelContext API, camel-main, camel-spring-boot and in XML DSL too.",
0,CAMEL-14168,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2019-11-11 13:44:48+00:00,2019-11-11 15:15:48+00:00,Api V1 are no longer supported.,
0,CAMEL-14167,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-11-11 13:36:29+00:00,2019-11-14 11:48:32+00:00,"The jdk url connection is too basic and camel-stream was not really intended for http streams.


Lets remove it and dont have hazzle about this problem in the future",
0,CAMEL-14166,Bug,Major,3.0.0.RC2,3.0.0.RC3,"
None
",Resolved,Fixed,3.0.0.RC3,Unassigned,Mark Grand,0,2,2019-11-11 13:21:28+00:00,2019-11-11 13:25:44+00:00,"I am seeing this stack trace:


Camel (camel-1) thread #7 - NettyEventExecutorGroup ERROR io.netty.util.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.Camel (camel-1) thread #7 - NettyEventExecutorGroup ERROR io.netty.util.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See https://netty.io/wiki/reference-counted-objects.html for more information.Recent access records: Created at: io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:349) io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:187) io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:178) io.netty.buffer.CompositeByteBuf.allocBuffer(CompositeByteBuf.java:1835) io.netty.buffer.CompositeByteBuf.copy(CompositeByteBuf.java:1487) io.netty.buffer.AbstractByteBuf.copy(AbstractByteBuf.java:1209) org.apache.camel.component.netty.http.NettyChannelBufferStreamCache.copy(NettyChannelBufferStreamCache.java:93) org.apache.camel.processor.MulticastProcessor.createProcessorExchangePairs(MulticastProcessor.java:620) org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:221) org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) org.apache.camel.processor.Pipeline.lambda$null$2(Pipeline.java:104) org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59) org.apache.camel.processor.Pipeline.process(Pipeline.java:87) org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:228) org.apache.camel.component.netty.handlers.ServerChannelHandler.processAsynchronously(ServerChannelHandler.java:141) org.apache.camel.component.netty.handlers.ServerChannelHandler.channelRead0(ServerChannelHandler.java:112) org.apache.camel.component.netty.http.handlers.HttpServerChannelHandler.channelRead0(HttpServerChannelHandler.java:202) io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) org.apache.camel.component.netty.http.handlers.HttpServerMultiplexChannelHandler.channelRead0(HttpServerMultiplexChannelHandler.java:156) io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105) io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374) io.netty.channel.AbstractChannelHandlerContext.access$600(AbstractChannelHandlerContext.java:56) io.netty.channel.AbstractChannelHandlerContext$7.run(AbstractChannelHandlerContext.java:365) io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:66) io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044) io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) java.base/java.lang.Thread.run(Thread.java:834)


 
 Here is the rest configuration:


restConfiguration()
{{ .component(""netty-http"")}}
{{ .host(""0.0.0.0"").port(config.getUiaPortNumber())}}
{{ .bindingMode(RestBindingMode.off)}}
{{ .apiContextPath(""api-doc"")}}
{{ .apiProperty(""api.title"", ""Unified Item API"")}}
{{ .apiProperty(""api.version"", ""0.1.0"")}}
{{ .apiProperty(""api.description"",}}
{{ ""This API allows callers to get information from multiple sources by sending just one request.""}}
{{ + "" A single response is returned that contains all of the requested information in a single JSON object.\n\n""}}
{{ + ""Currently supported sources include\n""}}
{{ + ""* "" + PRODUCT_API_HD_CATALOG_HOST + ""\n""}}
{{ + ""* "" + PRICING_API_HOST + ""\n""}}
{{ + ""* "" + ASSORTMENT_COMMONS_HOST)}}
{{ .apiProperty(""api.contact.name"", ""Mark Grand"")}}
{{ .apiProperty(""api.contact.email"", ""mark_grand@homedepot.com"")}}
{{ .apiProperty(""api.specification.contentType.json"", APPLICATION_JSON)}}
{{ .scheme(""http"")}}


Here is rest endpoint configuration:


rest().path(""/uia"").bindingMode(RestBindingMode.off)
{{ .get(""/admin/health"").produces(""text/plain"")}}
{{ .description(""This returns a static \""Hello world!\\n\"" response. It is intended to be used as a health check."")}}
{{ .to(""bean:helloBean"")}}
{{ .responseMessage().code(200).message(""Hello world!"").endResponseMessage()}}
;{{}}


 


rest().path(""/uia/api/v1"").bindingMode(RestBindingMode.off).produces(APPLICATION_JSON)
 .post(""/authorization"").consumes(""text/plain"").type(String.class).produces(""text/plain"")
 .description(""This should be a client's first request to this API. ""
 + ""The request includes the client's credentials for accessing the aggregated services. ""
 + ""The response is a JWT that contains the client's credentials."")
 .param().name(JwtConstants.PRICING_TOKEN_TAG)
 .type(RestParamType.header)
 .dataType(""string"")
 .required(false)
 .description(""The OAuth2 token to be used for accessing pricing information. This will be included in the JWT returned by this operation."")
 .endParam()
 .param().name(JwtConstants.SERVICE_ACCT_TAG)
 .type(RestParamType.header)
 .dataType(""string"")
 .required(true)
 .description(""This is a service account that identifies the client."")
 .endParam()
 .to(DIRECT_AUTHORIZATION)
 .responseMessage().code(200)
 .example(""credentialJwt"", ""eyJhbGciOiJub25lIn0.eyJpc3MiOiJ1bmlmaWVkLWl0ZW0tYXBpIiwiWC1wcmljaW5nLXRva2VuIjoiZXlKcmFXUWlPaUl4SWl3aWRIbHdJam9pU2xkVUlpd2lZV3huSWpvaVVsTXlOVFlpZlEuZXlKaFkyTmxjM05mZEc5clpXNGlPaUpVYm05cE1XeEpaVGxIU2xocGJuSnlhMkV4ZHpkelJrdGxUWFkzSWl3aVlYVmtJam9pYldsamNtOW5ZWFJsZDJGNUlpd2lZWEJwWDNCeWIyUjFZM1JmYkdsemRDSTZXeUpTWlhSaGFXd2dSRzl0WVdsdUlGTmxjblpwWTJVZ0xTQk9iMjRnVUhKdlpDSmRMQ0poY0hCc2FXTmhkR2x2Ymw5dVlXMWxJam9pVWtSVElDMGdSVkFnTFNCT2IyNHRVSEp2WkNJc0ltNWlaaUk2TVRVM01ESXdNRFExTXl3aVpHVjJaV3h2Y0dWeVgyVnRZV2xzSWpvaVpXNTBaWEp3Y21selpYQnlhV05wYm1kQWFHOXRaV1JsY0c5MExtTnZiU0lzSW1semN5STZJbWgwZEhBNlhDOWNMMmh2YldWa1pYQnZkQzF3Y21samFXNW5MV1JsZGk1aGNHbG5aV1V1Ym1WMFhDOWxaR2RsYldsamNtOHRZWFYwYUZ3dmRHOXJaVzRpTENKbGVIQWlPakUxTnpBeU1ESXlOVE1zSW1saGRDSTZNVFUzTURJd01EUTFNeXdpWTJ4cFpXNTBYMmxrSWpvaWRHNDBlalJXTTNKV1JWVktRbHBvUm1kUFVVTk1hVWRRZUdKbWQwazBURzRpTENKcWRHa2lPaUkwWm1aak9EVmxOUzFoTnpFNExUUmlaamt0T0dFek5pMHdZek0xWlRBNE9HRmlNbVlpZlEuR3IzSEdNRl9sUk44eF9qM01YbXRMMHRJWGxCeWZxUEpLVWFuX3hYSF80aHB6Q0Q4eDJJSnQyV1gtR3N3Zm1ZT0pWUm8zMDFyWmZBUDBRdTVkUS12TzM0VDVLcDhmX2txZmpkeFRCM1ZtbUdtQ3p2SlN6eEVDbmVqZU56SG5NTk9BUTAzTVRRX3FnYXB0d0taWjNDTjVwLVU1YXdYN2Rya2NiWldsV0lpS0dmTmNVaFhFZjc5bHpJMnVXbXV2TjgxN3lIMDdXUU16cEJteGh5TFpMdUQ3ZW5CRktvMmwwcnNJYXlORnJqbU5ycl9GTWxCMlVMRkRxcUd4UGpmcDJ2N184TlJ6ZS1hcjIzZUlPelpWdGo3YkRBOW5uQzNoWS1jNk8zckpXRXR6ZzVzT3VqUExNZTFYLS1QNXg1NzhmajZ2R3U0WnFGXzFaNDgwVTZWVFpld1B3Iiwic3ZjQWNjdCI6InBsYWNlaG9sZGVyIGZvciBhIHNlcnZpY2UgYWNjb3VudCJ9."")
 .message(""An encoded JWT whose payload contains the service account and credentials provided by the client. ""
 + ""This JWT will be needed to authorize requests to other endpoints"")
 .responseModel(String.class)
 .endResponseMessage()
 .responseMessage().code(400).message(""Bad Request"").endResponseMessage()


 .get(""/raw?skus={skus}&stores={stores}"")
 .description(""Queries `"" + PRODUCT_API_HD_CATALOG_HOST + ""`, `"" + PRICING_API_HOST + ""` and `""
 + ASSORTMENT_COMMONS_HOST + ""` for data about combinations of the given stores and SKUs. ""
 + ""The data from the individual services is returned as-is, without being combined."")
 .param().name(JwtConstants.SKUS_ITAG).description(""A comma-separated list of SKUS"").required(true).type(RestParamType.header).endParam()
 .param().name(JwtConstants.STORES_ITAG).description(""A comma-separated list of stores"").required(true).type(RestParamType.header).endParam()
 .clientRequestValidation(true)
 .responseMessage().code(200)
 .message(""Returns a JSON object whose fields have the values returned by the queried services and ""
 + ""also the status codes returned by the queried services."")
 .example(""success"", RAW_RESULT_EXAMPLE)
 .endResponseMessage()
 .responseMessage().code(400).message(""Bad Request"").endResponseMessage()
 .to(DIRECT_RAW)


 .get(""/skus-stores?skus={skus}&stores={stores}"")
 .description(""Queries `"" + PRODUCT_API_HD_CATALOG_HOST + ""`, `"" + PRICING_API_HOST + ""` and `""
 + ASSORTMENT_COMMONS_HOST + ""` for data about combinations of the given stores and SKUs. ""
 + ""Data from the individual services is reorganized into JSON objects that each refer to a single store-SKU combination."")
 .param().name(JwtConstants.SKUS_ITAG).description(""A comma-separated list of SKUS"").required(true).type(RestParamType.header).endParam()
 .param().name(JwtConstants.STORES_ITAG).description(""A comma-separated list of stores"").required(true).type(RestParamType.header).endParam()
 .clientRequestValidation(true)
 .responseMessage().code(200)
 .message(""Returns a JSON object whose fields describe the request and result. ""
 + ""One field is an array of JSON objects that each describe a different store-sku combination"")
 .example(""success"", SKU_STORE_RESULT_EXAMPLE)
 .endResponseMessage()
 .responseMessage().code(400).message(""Bad Request"").endResponseMessage()
 .to(DIRECT_SKU_STORES)
;","acosentino:1573449944:2019-11-11T13:25:44.057+0000:1573449944:2019-11-11T13:25:44.057+0000:Fixed on RC3.

 

[https://github.com/apache/camel/commit/ae2719732eb4867ecdb182e969e02a301bddc9f3#diff-e6e9f7220479f25103b607fae7cc9b28]"
0,CAMEL-14165,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Thomas Diesler,Thomas Diesler,0,1,2019-11-11 12:04:17+00:00,2019-11-11 12:25:06+00:00,"camel-pubnub has a direct dependency on





 <dependency>
 <groupId>com.squareup.okio</groupId>
 <artifactId>okio</artifactId>
</dependency>





 


but doesn't define its version",
0,CAMEL-14164,New Feature,Major,None,3.x,"
None
",Resolved,Won't Fix,3.x,Unassigned,Claus Ibsen,0,3,2019-11-11 10:20:33+00:00,2022-09-02 11:40:50+00:00,"You can use camel-test today and test your Camel routes etc, and whatnot. But for a camel-main project you may want a way to test it bootstrap camel main, ala you test spring-boot etc.","specs:1583730623:2020-03-09T13:10:23.018+0000:1583730623:2020-03-09T13:10:23.018+0000:Hi, I am an outreachy applicant. Can I take up this issue?
zregvart:1583735486:2020-03-09T14:31:26.538+0000:1583735486:2020-03-09T14:31:26.538+0000:[~specs] this issue has no relevance to the website, do you understand what the issue is about? If so we do like contributions in other areas as well. If not please take care to notice the ""Component"" which should say ""website"" for the website related issues."
0,CAMEL-14163,Improvement,Major,2.18.0,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Zoran Regvart,Zoran Regvart,0,1,2019-11-08 17:17:06+00:00,2019-11-21 19:53:13+00:00,"The RestProducer doesn't have a way for specifying multiple query parameters. Given a header value that's a collection of values the resulting query parameter will be a joining of those values with the comma separator.


Given that the query parameter can be specified multiple times, it is more common to have the parameter specified for each value of the collection rather than a single parameter with the coma-separated list of values.


For example, endpoint URI of rest:GET:/v2/:pet/findByStatus and endpoint property queryParameters set to status={status}, and on the message header the status is a collection or array of values (e.g. [""available"", ""pending""]), the resulting URI path will be /v2/pet/findByStatus?status=available,pending.


I think we could extemd the syntax of the placeholder (the {status}) to indicate that multiple query parameters should be provided instead of the coma-separated values.


Perhaps something like status={status*} as we already have status={status?} to signify optional parameters. This would generate the URI path as /v2/pet/findByStatus?status=available&status=pending.","zregvart:1573215473:2019-11-08T20:17:53.509+0000:1573215473:2019-11-08T20:17:53.509+0000:Actually I found out that with a small tweak to the way query parameter values are passed, that is without forcing them to convert to Strings, the support in {{URISupport::createQueryString}} generates the correct URI. So no need for any special indicator for this case."
0,CAMEL-14162,Bug,Minor,None,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Claus Ibsen,Claus Ibsen,0,1,2019-11-08 15:04:09+00:00,2019-11-08 15:09:33+00:00,When using JDKs URLConnection it wont send data until you start to read the input stream. So we need to add logic to do this so we force a flush and send data.,
0,CAMEL-14161,Improvement,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-11-08 11:58:20+00:00,2019-11-08 12:02:32+00:00,We should remove the default encryption key from camel-shiro as it's not secure. The user must specify an encryption key.,
0,CAMEL-14160,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-11-08 11:39:25+00:00,2019-11-08 16:01:52+00:00,"This task is to update the default algorithms in the Crypto Component/DataFormat. For the Crypto Component, the default algorithm will change from SHA1WithDSA -> SHA256withRSA. For the Crypto DataFormat, the default algorithm will change from ""DES/CBC/PKCS5Padding"" just to null, thus forcing the client to specify a default algorithm.",
0,CAMEL-14159,New Feature,Major,None,None,"
None
",Resolved,Fixed,3.1.0,Jiri Ondrusek,Claus Ibsen,0,2,2019-11-08 10:15:08+00:00,2020-02-06 21:04:46+00:00,"Maybe we can create a security component ala spring security where you can setup policies per route


https://docs.jboss.org/author/display/WFLY/WildFly+Elytron+Security","davsclaus:1576838660:2019-12-20T18:44:20.618+0000:1576838660:2019-12-20T18:44:20.618+0000:Thanks for the work Jiri, its been merged.
jondruse:1579504152:2020-01-20T15:09:12.855+0000:1579504152:2020-01-20T15:09:12.855+0000:Starter and example added as https://github.com/apache/camel-spring-boot/pull/2. 

This concludes changes for this issue."
0,CAMEL-14158,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,2,2019-11-08 10:12:46+00:00,2023-07-17 11:52:02+00:00,"We should look at adding a new camel component for MP reactive messaging spec
https://github.com/eclipse/microprofile-reactive-messaging","vinod.pahuja@gmail.com:1662593578:2022-09-08T07:32:58.464+0000:1662593578:2022-09-08T07:32:58.464+0000:There is a SmallRye implementation available

[https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.9/camel/camel.html]

Can it be generalized to support this ?
vinod.pahuja@gmail.com:1662594181:2022-09-08T07:43:01.356+0000:1662594181:2022-09-08T07:43:01.356+0000:is it already done ?

https://camel.apache.org/camel-quarkus/next/reference/extensions/smallrye-reactive-messaging.html
davsclaus:1689565922:2023-07-17T11:52:02.669+0000:1689565922:2023-07-17T11:52:02.669+0000:There is a camel component in reactive messaging
https://github.com/smallrye/smallrye-reactive-messaging/tree/main/smallrye-reactive-messaging-camel"
0,CAMEL-14157,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-11-08 10:09:25+00:00,2019-11-08 11:42:12+00:00,For the 3.0.0 release we should update the default signature algorithm for XML Signature from RSA-SHA1 to RSA-SHA256.,
0,CAMEL-14156,Bug,Major,2.24.2,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,2,2019-11-08 09:49:45+00:00,2019-11-08 21:47:38+00:00,"CAMEL-13750 introduces a change checking the endpoint in JmsBinding:




if (headerName.equals(""JMSCorrelationID"") && !endpoint.isUseMessageIDAsCorrelationID()) {




As endpoint can be null (for instance if you just do new JmsBinding()), this change is wrong as it can throw NullPointerException.


I'm fixing.","acosentino:1573178021:2019-11-08T09:53:41.454+0000:1573178021:2019-11-08T09:53:41.454+0000:We won't release 2.23.x. there is no need to fix there
jbonofre:1573192385:2019-11-08T13:53:05.988+0000:1573192385:2019-11-08T13:53:05.988+0000:It has been fixed on {{master}}:

{code}
if (headerName.equals(""JMSCorrelationID"") && (endpoint == null || !endpoint.isUseMessageIDAsCorrelationID()))
{code}
jbonofre:1573192503:2019-11-08T13:55:03.465+0000:1573192503:2019-11-08T13:55:03.465+0000:I'm porting the fix on other branches.
acosentino:1573192629:2019-11-08T13:57:09.671+0000:1573192629:2019-11-08T13:57:09.671+0000:I'm removing 2.23.5"
0,CAMEL-14155,Bug,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Luigi De Masi,Luigi De Masi,0,3,2019-11-08 08:52:28+00:00,2019-11-13 21:02:40+00:00,"despite XPath API spec states:


 


If a null value is provided for item, an empty document will be used for the context


saxon, starting from 9.6, they decided to ignore it and throw NPE if the node is null, from saxon javadoc:


 


Contrary to the interface specification, Saxon does not supply an empty document when the value is null. This is because XPath 2.0 allows the context item to be ""absent"" (null). So Saxon executes the XPath expression with the context item undefined.


 


 So in case of xpath expression is executed against a null body or header, saxon throws an NPE","davsclaus:1573438848:2019-11-11T10:20:48.112+0000:1573438848:2019-11-11T10:20:48.112+0000:I think Lugi works on this
ramu11:1573493454:2019-11-12T01:30:54.300+0000:1573493454:2019-11-12T01:30:54.300+0000:[~ldemasi] fell free to own this Jira"
0,CAMEL-14154,Improvement,Major,3.0.0.RC3,3.1.0,"
None
",Resolved,Fixed,3.1.0,Andrea Cosentino,John Poth,0,3,2019-11-08 08:18:58+00:00,2019-12-19 07:33:57+00:00,It might be nice to have an option in camel-infinispan to create the cache if it doesn't exits.,"mmelko:1575506377:2019-12-05T08:39:37.306+0000:1575506377:2019-12-05T08:39:37.306+0000:I will look at this.
acosentino:1575506566:2019-12-05T08:42:46.505+0000:1575506566:2019-12-05T08:42:46.505+0000:Thanks a lot [~mmelko]
mmelko:1576048764:2019-12-11T15:19:24.331+0000:1576048764:2019-12-11T15:19:24.331+0000:Do we want to explicitly specify option to useinternal component cache or it should be rather automatically if cacheContainer is not provided.  [~jpoth] [~acosentino]  WDYT ?
acosentino:1576116620:2019-12-12T10:10:20.150+0000:1576116620:2019-12-12T10:10:20.150+0000:I think automatically is better, can you please document it in the .adoc file of the component? Thanks
acosentino:1576116683:2019-12-12T10:11:23.858+0000:1576116683:2019-12-12T10:11:23.858+0000:[~lburgazzoli] wdyt?
mmelko:1576203970:2019-12-13T10:26:10.411+0000:1576203970:2019-12-13T10:26:10.411+0000:Ok so I've found that this is actually already working in certain circumstances due to endpoint's being singletons.  Default cache is always created in internally in _InfinispanManager.java_. This works in routes where same endpoint is used. For example: 
{code}
 from(""direct:start"").to(""infinispan:test"");
                                from(""direct:get"").to(""infinispan:test"").to(""mock:result"");
{code}

Creating default _cacheContainer_  on component level when no other configuration is provided will solve this also for different endpoints. "
0,CAMEL-14153,New Feature,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-11-08 07:43:45+00:00,2019-11-11 18:33:33+00:00,"For example when configuring jms with amq/qpid etc then they have constructor parameters




camel.component.jms.connection-factory=#class:org.apache.qpid.jms.JmsConnectionFactory(""xxxx"")




Where (""xxx"") are constructor parameters",davsclaus:1573172364:2019-11-08T08:19:24.762+0000:1573172364:2019-11-08T08:19:24.762+0000:This is a bit more complex as constructors can have several parameters and we would need to convert to their type and also parse the input ala bean language does.
0,CAMEL-14152,New Feature,Minor,None,None,"
None
",Resolved,Won't Fix,3.x,Unassigned,Omar Al-Safi,0,4,2019-11-07 14:42:57+00:00,2022-09-02 11:39:19+00:00,"Although we have LevelDB Aggregator in Camel, I thought it will be as well beneficial for users to have as well RocksDB Aggregator. Although RocksDB is basically based on LevelDB, I think Facebook has done great optimizations on it to have a good performance on sample data bigger than the machine's RAM. 
I can work on it after we release 3.0.0 GA","acosentino:1573109190:2019-11-07T14:46:30.208+0000:1573109201:2019-11-07T14:46:41.009+0000:Rocksdb is licensed under GNU GPL

 which is not compatible with ASF [https://www.apache.org/legal/resolved.html#category-x]
acosentino:1573109235:2019-11-07T14:47:15.256+0000:1573109235:2019-11-07T14:47:15.256+0000:So it cannot be included.
omarsmak:1573109432:2019-11-07T14:50:32.013+0000:1573109432:2019-11-07T14:50:32.013+0000:As I see from here: https://github.com/facebook/rocksdb, is a dual licence GPLv2 and Apache 2.0. As I recall, it is as well included in Apache Kafka Streams library https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Streams+Internal+Data+Management#:~:targetText=RocksDB%20is%20just%20used%20as,created%20for%20fault%2Dtolerance%20reasons.
omarsmak:1573109531:2019-11-07T14:52:11.418+0000:1573109531:2019-11-07T14:52:11.418+0000:interesting they added the Apache 2.0 licence 2 years go https://github.com/facebook/rocksdb/commits/master/LICENSE.Apache
acosentino:1573109662:2019-11-07T14:54:22.780+0000:1573109662:2019-11-07T14:54:22.780+0000:I just don't want to create legal trouble, personally I don't like double licensed project, it's not clear what you get, what you can and what you can't do, and so on.

Since there is this doubt, I'd prefer to avoid using this kind of projects.

[~davsclaus] and other committers and PMC member, what do you think?
jbonofre:1573110206:2019-11-07T15:03:26.039+0000:1573110206:2019-11-07T15:03:26.039+0000:I would rather add this in camel-extra: https://github.com/camel-extra/camel-extra

It's where I added some ""non Apache"" licensed connector.
davsclaus:1573120448:2019-11-07T17:54:08.581+0000:1573120448:2019-11-07T17:54:08.581+0000:They clearly indicate that its a dual licensed project and has been this for 2 years. So I would says its fine to add this.

Also if you search for rocksdb on maven search you see other Apache projects that seems to use it (flink, samza etc)
https://search.maven.org/

acosentino:1573177505:2019-11-08T09:45:05.197+0000:1573177505:2019-11-08T09:45:05.197+0000:Sounds good then. If legal will complain we'll move it to extra
omarsmak:1573179130:2019-11-08T10:12:10.435+0000:1573179130:2019-11-08T10:12:10.435+0000:+1"
0,CAMEL-14151,Improvement,Major,None,None,"
None
",Resolved,Fixed,3.0.0,Colm O hEigeartaigh,Colm O hEigeartaigh,0,1,2019-11-07 13:22:58+00:00,2019-11-07 14:32:22+00:00,"For Camel 3.0.0, we should use the opportunity to get rid of the insecure default encryption key for the XML Security component. In addition, update the default encryption algorithm from 3DES to AES-256-GCM.",
0,CAMEL-14150,Improvement,Minor,3.0.0,3.0.0,"
None
",Resolved,Fixed,3.0.0,Jiri Ondrusek,Jiri Ondrusek,0,2,2019-11-07 08:24:33+00:00,2019-11-08 10:09:42+00:00,"It's possible, that ExecCommand may contain sensitive information. These commands are logged on level INFO during route execution. New configuration parameter should be introduced, which will change the level of the log for ExecCommand to DEBUG.","jondruse:1573100730:2019-11-07T12:25:30.149+0000:1573100730:2019-11-07T12:25:30.149+0000:PR https://github.com/apache/camel/pull/3325
davsclaus:1573178982:2019-11-08T10:09:42.645+0000:1573178982:2019-11-08T10:09:42.645+0000:Thanks for the PR"
0,CAMEL-14149,Improvement,Major,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,John Poth,John Poth,0,4,2019-11-06 14:43:18+00:00,2019-11-18 08:27:42+00:00,No Desc,"acosentino:1573022726:2019-11-06T14:45:26.627+0000:1573022726:2019-11-06T14:45:26.627+0000:[~jpoth] are you working on this?
acosentino:1573023226:2019-11-06T14:53:46.710+0000:1573023226:2019-11-06T14:53:46.710+0000:I saw you're using the same approach as infinispan-kafka repo. I hope they will release something correct to start and stop the infinispan server, with this approach you'll leave the server running at the end.
jpoth:1573023255:2019-11-06T14:54:15.962+0000:1573023255:2019-11-06T14:54:15.962+0000:[~acosentino] yes, I just push two commits that should resolve this - don't think this can be backported easily
acosentino:1573023530:2019-11-06T14:58:50.410+0000:1573023530:2019-11-06T14:58:50.410+0000:Thanks. This will go GA.
tdiesler:1573795850:2019-11-15T13:30:50.554+0000:1573795989:2019-11-15T13:33:09.325+0000:Infinispan is one of the components covered by the [Wildfly/EAP compatibility contract|https://github.com/wildfly-extras/wildfly-camel/blob/master/feature/common/etc/smartics/wildfly-modules.xml#L30]. Which means that neither Wildfly nor Camel should change that component without considering compatibility constraints.

In this case, we have [infinispan-9.4.16|https://github.com/wildfly/wildfly/blob/d69bb0d32cc506f6729e2c705d968a263e884f94/pom.xml#L338] that comes with WildFly-18.0.0 and [infinispan-10.0.1|https://github.com/apache/camel/blob/master/parent/pom.xml#L284] that comes with the latest Camel-3.0.x master.

This currently fails with
{code:java}
Caused by: java.lang.NoSuchMethodError: org.infinispan.AdvancedCache.withFlags(Lorg/infinispan/context/Flag;)Lorg/infinispan/AdvancedCache;
 at org.apache.camel.component.infinispan.InfinispanUtil.ignoreReturnValuesCache(InfinispanUtil.java:95)
 at org.apache.camel.component.infinispan.InfinispanManager.getCache(InfinispanManager.java:200)
 at org.apache.camel.component.infinispan.InfinispanProducer.onPut(InfinispanProducer.java:50)

{code}
acosentino:1573796051:2019-11-15T13:34:11.240+0000:1573796051:2019-11-15T13:34:11.240+0000:I'm not aware of any contract between camel community and Wildfly.

[~cibsen@e-ma.net] is this something agreed in the past? We cannot release camel 3, without upgrading to Infinispan 10, otherwise we'll be tied to an old version.
davsclaus:1573800735:2019-11-15T14:52:15.655+0000:1573800735:2019-11-15T14:52:15.655+0000:There is no contract. ASF projects runs as in best interest of Apache.

Camel 3 is a total new baseline and the Camel PMC and community decide what we do.
So IMHO we should upgrade to latest Infinispan version.

davsclaus:1573963100:2019-11-17T11:58:20.815+0000:1573963100:2019-11-17T11:58:20.815+0000:Thanks John for the PR that made the API compatible with v9 and v10."
0,CAMEL-14148,Bug,Minor,2.24.2,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Unassigned,Bas Claessen,0,1,2019-11-06 13:35:49+00:00,2022-10-24 13:57:35+00:00,"An exception during the first attempt to resolve a temporary destination will cause an infinitive wait for next resolve attempts after the exception is cleared.
A likely scenario for this behaviour to occur is when no connection to a jms server can be established during startup.


This bug is caused by not setting the refreshWanted to false when no previous destination exists in the org.apache.camel.component.jms.reply.TemporaryQueueReplyManager$TemporaryReplyQueueDestinationResolver class.




public Destination resolveDestinationName(Session session, String destinationName, boolean pubSubDomain) throws JMSException {
    // use a temporary queue to gather the reply message
    synchronized (refreshWanted) {
        if (queue == null || refreshWanted.compareAndSet(true, false)) {
            queue = session.createTemporaryQueue();
            setReplyTo(queue);
            if (log.isDebugEnabled()) {
                log.debug(""Refreshed Temporary ReplyTo Queue. New queue: {}"", queue.getQueueName());
            }
            refreshWanted.notifyAll();
        }
    }
    return queue;
}




When queue == null the refreshWanted.compareAndSet(true, false) is not executed.","Bas Claessen:1573018980:2019-11-06T13:43:00.905+0000:1573018980:2019-11-06T13:43:00.905+0000:Added pull request with a fix and a test case.
Bas Claessen:1573110490:2019-11-07T15:08:10.049+0000:1573110490:2019-11-07T15:08:10.049+0000:Added PRs for master and camel-2.x"
0,CAMEL-14147,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Andrea Cosentino,Andrea Cosentino,0,2,2019-11-06 10:28:21+00:00,2019-11-12 11:41:21+00:00,Actually we have hard-coded strings in the code.,"davsclaus:1573525018:2019-11-12T10:16:58.102+0000:1573525018:2019-11-12T10:16:58.102+0000:Andrea will you be able to get this done before GA
acosentino:1573525064:2019-11-12T10:17:44.818+0000:1573525064:2019-11-12T10:17:44.818+0000:Sure, let me work on this today"
0,CAMEL-14146,Improvement,Major,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Marius Cornescu,Marius Cornescu,0,2,2019-11-06 10:11:48+00:00,2019-11-22 09:11:03+00:00,"HdfsConsumer will split files into chunks based on the chunkSize.


Each chunk is sent in an individual message, but these messages are not that compatible with a aggregator component.


The component should send the same info on the header, like the splitter component.","marius_cornescu:1573006322:2019-11-06T10:12:02.883+0000:1573006322:2019-11-06T10:12:02.883+0000:will work on this.
davsclaus:1573525053:2019-11-12T10:17:33.180+0000:1573525053:2019-11-12T10:17:33.180+0000:Thanks Marius, hopefully you get the time to work on this before we go GA later this month.
marius_cornescu:1573556194:2019-11-12T18:56:34.932+0000:1573556194:2019-11-12T18:56:34.932+0000:[~davsclaus], I've made some progress on this."
0,CAMEL-14145,Bug,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-11-06 10:00:54+00:00,2019-11-06 14:02:30+00:00,"Since Debezium mongodb contains a slight structure format omitted from Debezium from other databases, for example `after` key is being replaced with `patch` only for the mongodb connector which is a results populate the body with `null` since the debezium component relies on `after` key to populate the message body",
0,CAMEL-14144,Improvement,Minor,None,None,"
None
",Resolved,Invalid,None,Unassigned,Shahbaz Akhter,0,2,2019-11-06 09:17:01+00:00,2019-11-06 09:58:32+00:00,"For the points 1 & 2, do we have camel docs available ?


1) When java calls a seda component directly, if the seda queue is full, Java must handle it.


2) If java calls direct component first, which in turn calls seda, if the seda queue is full, the DQL camel error handler handles it.


The underlying problem we experienced was java calling seda, getting a 'queue full' exception, but since the java code didn't look at the exception on the response object, it was being missed.


Since this queue was full we tend to have inflight messages which are kinda lost since batch shutdowns without waiting for inflight message to process.


Below is sample code




import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.FluentProducerTemplate;
import org.apache.camel.LoggingLevel;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.spring.ShutdownTimeout;
import org.junit.jupiter.api.Test;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestPropertySource;

import javax.inject.Inject;

import java.util.stream.IntStream;

//@TestPropertySource(properties=""camel.springboot.shutdownTimeout=5"")
@ShutdownTimeout(value = 1)
@ContextConfiguration(classes = CamelShutdownTest.TestConfiguration.class)
public class CamelShutdownTest extends AbstractCamelTest {
    @Configuration
    public static class TestConfiguration {
        @Bean
        public RouteBuilder sedaRoute() {
            return new RouteBuilder() {
                @Override
                public void configure() {
                    errorHandler(deadLetterChannel(""direct:dead""));
                    from(""direct:test"")
                            .to(""seda:test?size=2"");
                    from(""seda:test?size=2"")
                            .delayer(2000L)
                            .log(LoggingLevel.INFO, LoggerFactory.getLogger(CamelShutdownTest.class), ""done ${body}"");
                    from(""direct:dead"")
                            .log(LoggingLevel.INFO, LoggerFactory.getLogger(CamelShutdownTest.class), ""dead ${body}"");
                }
            };
        }
    }

    @EndpointInject(uri = ""direct:test"")
    private FluentProducerTemplate fluentProducerTemplate;
    @Inject
    private CamelContext context;

    @Test
    public void test() throws Exception {
        context.start();
        fluentProducerTemplate.withBody(""warm up"").send();
        Thread.sleep(1000L);
        IntStream.range(0, 100).boxed().forEach((i) -> {
            logger.info(""Queued {}"", i);
            try {
                Thread.sleep(5L);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            fluentProducerTemplate.withBody(""test message "" + i).send();
        });
    }
}","acosentino:1573005504:2019-11-06T09:58:24.459+0000:1573005504:2019-11-06T09:58:24.459+0000:This is a question for the dev mailing list, not an issue."
0,CAMEL-14143,Bug,Major,None,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Andrea Cosentino,Andy Krohg,0,1,2019-11-05 20:10:10+00:00,2019-11-06 10:31:30+00:00,"The JSON object that Slack delivers for message events no longer sends a username attribute; it issues the user's GUID in the user field. For example:


 




{
        ""client_msg_id"":""6d1d3108-cf2a-4475-941c-0dd70200e88a"",
        ""type"":""message"",
        ""text"":""hello"",
        ""user"":""UMQLDBWQY"",
        ""ts"":""1572977454.000200"",
        ""team"":""T0383HKJ0""
}




The SlackEndpoint class still looks for the username attribute when creating the exchange, so the SlackMessage object comes out pretty bare.




    public Exchange createExchange(ExchangePattern pattern, JsonObject object) {
        Exchange exchange = super.createExchange(pattern);
        SlackMessage slackMessage = new SlackMessage();
        String text = object.getString(""text"");
        String username = object.getString(""username"");
        slackMessage.setText(text);
        slackMessage.setUsername(username);
        if (ObjectHelper.isNotEmpty(object.get(""icons""))) {
            JsonObject icons = object.getMap(""icons"");
            if (ObjectHelper.isNotEmpty(icons.get(""emoji""))) {
                slackMessage.setIconEmoji(icons.getString(""emoji""));
            }
        }
        Message message = exchange.getIn();
        message.setBody(slackMessage);
        return exchange;
    }




I've attached a .patch that retrieves the user's GUID instead, so it's at least available if people using this component want to look up the username with the users.info API.",
0,CAMEL-14142,Bug,Major,3.0.0.RC3,3.0.0,"

camel-archetype-dataformat
converter

",Resolved,Fixed,3.0.0,Andrea Cosentino,Omid Dehghan,0,3,2019-11-05 13:24:57+00:00,2019-11-06 14:24:44+00:00,"I tried to create a project with camel-archetype-dataformat archetype with Maven archetype generator like this:


F:\Spring-work-space\New Folder>mvn archetype:generate -B -e -DarchetypeGroupId=
 org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-dataformat -DarchetypeVersion=3.0.0-RC3 -DgroupId=camelinaction -DartifactId=reverse-dataformat2 -Dname=Reverse -Dscheme=reverse


The project gets built.


But when I opened it , there is a class named ReverseDataFormat at camelinaction package which extends to ServiceSupport.


public class ReverseDataFormat extends ServiceSupport implements DataFormat, DataFormatName


The problem here is that by default it uses the org.apache.camel.support.ServiceSupport;


in order to import this class, but it is wrong and IDEA throw an exception which is right! The ServiceSupport reside in this package: org.apache.camel.support.service.ServiceSupport;","davsclaus:1572999274:2019-11-06T08:14:34.106+0000:1572999274:2019-11-06T08:14:34.106+0000:Thanks you are welcome to provide a PR with a fix
davsclaus:1572999302:2019-11-06T08:15:02.648+0000:1572999302:2019-11-06T08:15:02.648+0000:And if you could take a look at the other archetypes, they may have similar issue
odehghan:1573004372:2019-11-06T09:39:32.347+0000:1573004372:2019-11-06T09:39:32.347+0000:I did something here at  [https://github.com/apache/camel/pull/3319] Hopefully It's right! :)
acosentino:1573017517:2019-11-06T13:18:37.370+0000:1573017517:2019-11-06T13:18:37.370+0000:This is not merged yet, when it will be merged we can mark this as resolved.
acosentino:1573021479:2019-11-06T14:24:39.447+0000:1573021479:2019-11-06T14:24:39.447+0000:This is merged now. No need to reopen."
0,CAMEL-14141,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Andrea Cosentino,Andrea Cosentino,0,1,2019-11-05 09:49:00+00:00,2019-11-05 14:45:56+00:00,No Desc,
0,CAMEL-14140,Task,Major,None,None,"
None
",Resolved,Abandoned,3.x,Unassigned,Thomas Diesler,0,3,2019-11-05 07:55:22+00:00,2021-05-26 07:58:44+00:00,"Currently, camel comes with google-guava-version=19.0 which contains a number of deprecated APIs that have been removed in 20.x. AFAICS, cassandra-3.x is the only component that depends on these deprecated guava APIs. This dependency has been removed in cassandra-4.x, which is currently in alpha. In WildFly-Camel, I confirmed that it should generally be possible to update to guava-26.x as long as cassandra can still use 19.x","tdiesler:1572930148:2019-11-05T13:02:28.651+0000:1572930148:2019-11-05T13:02:28.651+0000:Here are the various usages of guava ...

{code}

[tdiesler@MacBook3 camel]$ cat parent/pom.xml | grep guava-version
 <azure-guava-version>20.0</azure-guava-version>
 <cassandra-driver-guava-version>19.0</cassandra-driver-guava-version>
 <google-guava-version>19.0</google-guava-version>
 <google-mail-guava-version>17.0</google-mail-guava-version>
 <grpc-guava-version>26.0-android</grpc-guava-version>
 <influx-guava-version>20.0</influx-guava-version>
 <jackrabbit-guava-version>15.0</jackrabbit-guava-version>
 <jclouds-google-guava-version>18.0</jclouds-google-guava-version>
 <jclouds-google-guava-version-range>[18.0,19.0)</jclouds-google-guava-version-range>
 <jira-guava-version>26.0-jre</jira-guava-version>
 <leveldb-guava-version>21.0</leveldb-guava-version>
 <mustache-guava-version>20.0</mustache-guava-version>
 <openstack4j-guava-version>17.0</openstack4j-guava-version>
 <protobuf-guava-version>26.0-android</protobuf-guava-version>
 <swagger-java-guava-version>27.1-jre</swagger-java-guava-version>
 <zookeeper-guava-version>16.0</zookeeper-guava-version>

{code}
tdiesler:1573016170:2019-11-06T12:56:10.511+0000:1573016188:2019-11-06T12:56:28.170+0000:PR: [https://github.com/apache/camel/pull/3321]

In this (bold) PR I replaced all occurrences of guava >= 20.0 with the latest that was already being used i.e. 27.1-jre. References to older guava versions remain unchanged.

This changes/aligns the referenced guava version for: azure, grpc, influxdb, jira, leveldb, mustache, protobuf and swagger

I verified that this change is valid for WFC module wiring i.e. all tests pass. There may however be code paths that WFC did not go through. I trust that the Camel test suite would catch problems in those if there are any.
davsclaus:1573159882:2019-11-08T04:51:22.889+0000:1573159882:2019-11-08T04:51:22.889+0000:The karaf features are affected and a bunch of them fails, where we need to hardcode them to use older guava versions
acosentino:1573188135:2019-11-08T12:42:15.547+0000:1573188135:2019-11-08T12:42:15.547+0000:I reverted this fix, even by hardcoding the version, using a common version of guava all around doesn't work for some of them, for example guava-eventbus and nsq.

It must stay as-is. I'm sorry.
davsclaus:1621987124:2021-05-26T07:58:44.075+0000:1621987124:2021-05-26T07:58:44.075+0000:It will not be possible to align to a single guava version across all components."
0,CAMEL-14139,Bug,Major,3.0.0.RC3,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Andrea Cosentino,Avinash Dongre,0,1,2019-11-05 07:21:09+00:00,2019-11-14 11:50:49+00:00,"Camel undertow always propagates the same host header from source to target. There is no option to disable this.




<route>
            <from uri=""undertow:http://localhost:8189""/>
            <log message=""Source ${in.headers.Host}"" />
            <to uri=""undertow:http://localhost:8289""/>
        </route>
        <route>
            <from uri=""undertow:http://localhost:8289""/>
            <log message=""Target ${in.headers.Host}"" />
        </route>




 
 Result:




2019-11-05 12:43:54.738  INFO 30967 --- [  XNIO-2 task-1] route1 :  Source localhost:8189
2019-11-05 12:43:54.789  INFO 30967 --- [  XNIO-3 task-1] route2 :  Target localhost:8189




Expected:




2019-11-05 12:43:54.738  INFO 30967 --- [  XNIO-2 task-1] route1 :  Source localhost:8189
2019-11-05 12:43:54.789  INFO 30967 --- [  XNIO-3 task-1] route2 :  Target localhost:8289




An option to disable the preservation of the original host is present in camel-http",
0,CAMEL-14138,Bug,Major,3.0.0.RC3,3.8.0,"
None
",Resolved,Resolved,3.8.0,Unassigned,Jeremy Ross,1,4,2019-11-04 21:56:15+00:00,2021-09-18 16:39:26+00:00,"Using the synchronous URL option, a synchronous operation following an asynchronous operation will result in a java.util.concurrent.TimeoutException. Subsequent synchronous operations will succeed. Despite the TimeoutException, the operation can still be successful on the salesforce side. I've yet to determine why Camel thinks the operation is timing out.


Test case: https://github.com/jeremyross/CAMEL-14138


stack trace:



org.apache.camel.component.salesforce.api.SalesforceException: Unexpected error {0:null} executing {POST:https://cs44.salesforce.com/services/data/v45.0/sobjects/Contact}
	at org.apache.camel.component.salesforce.internal.client.AbstractClientBase$1.onComplete(AbstractClientBase.java:206) ~[camel-salesforce-3.0.0-SNAPSHOT.jar:3.0.0-SNAPSHOT]
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:196) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.ResponseNotifier.notifyComplete(ResponseNotifier.java:188) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpReceiver.terminateResponse(HttpReceiver.java:441) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpReceiver.abort(HttpReceiver.java:523) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpChannel.abortResponse(HttpChannel.java:156) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpChannel.abort(HttpChannel.java:149) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpExchange.abort(HttpExchange.java:257) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpConversation.abort(HttpConversation.java:149) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.HttpRequest.abort(HttpRequest.java:766) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.abort(HttpConnectionOverHTTP.java:204) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.close(HttpConnectionOverHTTP.java:190) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.client.http.HttpConnectionOverHTTP.onIdleExpired(HttpConnectionOverHTTP.java:145) ~[jetty-client-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.io.ssl.SslConnection.onIdleExpired(SslConnection.java:302) ~[jetty-io-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.io.AbstractEndPoint.onIdleExpired(AbstractEndPoint.java:401) ~[jetty-io-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.io.IdleTimeout.checkIdleTimeout(IdleTimeout.java:171) ~[jetty-io-9.4.19.v20190610.jar:9.4.19.v20190610]
	at org.eclipse.jetty.io.IdleTimeout.idleCheck(IdleTimeout.java:113) ~[jetty-io-9.4.19.v20190610.jar:9.4.19.v20190610]
	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[na:na]
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]
	at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) ~[na:na]
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) ~[na:na]
	at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]
Caused by: java.util.concurrent.TimeoutException: Idle timeout 10000 ms","jeremyross:1572945668:2019-11-05T17:21:08.137+0000:1572945668:2019-11-05T17:21:08.137+0000:Simpler use case that just queries:
{code:java}
from(""direct:synchronousTest"")
 .setBody(constant(""SELECT Id FROM Contact LIMIT 1""))
 .to(""salesforce:query?synchronous=false&sObjectClass="" + QueryRecordsContact.class.getName())
 .setBody(constant(""SELECT Id FROM Contact LIMIT 1""))
 .to(""salesforce:query?synchronous=true&sObjectClass="" + QueryRecordsContact.class.getName())
 .log(""done"");{code}
 
davsclaus:1573525096:2019-11-12T10:18:16.801+0000:1573525096:2019-11-12T10:18:16.801+0000:Thanks for reporting and the simpler use case
jeremyross:1606897709:2020-12-02T16:28:29.830+0000:1606897709:2020-12-02T16:28:29.830+0000:Test case: https://github.com/jeremyross/CAMEL-14138
jeremyross:1609875883:2021-01-06T03:44:43.057+0000:1609876105:2021-01-06T03:48:25.628+0000:I've dug into this a little more, but I don't have the camel-core chops to know how to fix. Here's what I think is happening:
 * AbstractClientBase#doHttpRequest queries salesforce, passing a Listener instance to the HttpClient.
 * Jetty client calls the Listener's [onComplete|https://github.com/apache/camel/blob/f735261d75a296b1ed6baf5b947e9d2710fda368/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java#L193]. A key point here is that onComplete gets blocked [here|https://github.com/apache/camel/blob/f735261d75a296b1ed6baf5b947e9d2710fda368/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java#L248] and never returns (#1 in screen shot).
 * Camel continues to the second (synchronous) query. I've confirmed via debugging proxy that this query returns successfully, however HttpClient uses a *single* thread [for all listeners|https://www.eclipse.org/jetty/documentation/jetty-9/index.html#http-client]:
{quote}The implementation invokes these listeners in the same thread that is used to process the request or response. Therefore, *if the application code in these listeners takes a long time to execute, the request or response processing is delayed until the listener returns*.
{quote}
 * Because the first call to Listener#onComplete is blocked, HttpClient never calls the second query's Listener, and things get stuck at #2 in screen shot.
 * Then Idle Timeout exception happens.
 * [Invoking|https://github.com/apache/camel/blob/f735261d75a296b1ed6baf5b947e9d2710fda368/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/client/AbstractClientBase.java#L248] the Camel callback in a new thread ""solves"" the problem, however this probably is not playing nice with the camel threading/reactive system:
{code:java}
new Thread() {
    @Override
    public void run() {
        callback.onResponse(getContentAsInputStream(), headers, null);
    }
}.start();
{code}

 

Paging [~zregvart] and [~davsclaus] for help.

!Call stack.png!
zregvart:1609977910:2021-01-07T08:05:10.717+0000:1609977910:2021-01-07T08:05:10.717+0000:Perhaps for my better understanding what would be the use case for using {{synchronous=true}}, from git blame I can see that it was added in the initial component contribution without much explanation as to why. I can't think of an use case for it, can we remove it and not try to fix it?
davsclaus:1609984927:2021-01-07T10:02:07.766+0000:1609984927:2021-01-07T10:02:07.766+0000:Yeah setting synchronous=true|false should not really be needed to be used. 

However one situation where synchronous may be forced is when using old fashioned Spring / JTA transactions which requires the work to be done on the same thread.

But that old code Zoran refers to can surely be removed.

davsclaus:1609985524:2021-01-07T10:12:04.803+0000:1609985524:2021-01-07T10:12:04.803+0000:Also a thought is that in jetty http client listener callback, then we should decouple its thread from continue routing in Camel. 

That means either where Camel's AsyncCallback is invoked such as 

1)
https://github.com/apache/camel/blob/8a317028c4cb34791fa0e122e70a30aa9d86fdaa/components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/processor/JsonRestProcessor.java#L226

and the other places where it's invoked.

should be done by separate thread (thread pool).

2)
Or we do it earlier in the jetty http listener, where we then use another thread (thread pool). Which is also a bit what Jeremy said.

3)
An alternative (although its not yet used by camel components) is to put the work on reactive executor via
org.apache.camel.impl.engine.DefaultReactiveExecutor#schedule

Then its some other thread that eventually will process this. But the reactive executor is first implemented internally in the EIPs, and not (yet) for Camel components.
jeremyross:1610008418:2021-01-07T16:33:38.634+0000:1610008418:2021-01-07T16:33:38.634+0000:[~zregvart] I'm not sure there is a great use case for synchronous. My original use case was from the early 3.x days. There was some bug that I worked around by using synchronous=true. That's when I discovered that mixing true and false caused issues. That bug was resolved, so I don't really have a use case for synchronous=true anymore.

I do use local transactions with Spring, so not sure if there is a problem there. 

It seems like we may want to deprecate the synchronous option. 
davsclaus:1610068887:2021-01-08T09:21:27.542+0000:1610068887:2021-01-08T09:21:27.542+0000:There are only a few components that has special synchronous handling - for salesforce then its fine to just remove it since it dont really work and that there was no async vs sync code implementation, so its some old cruft - the component was created in 2013 - so thats a lifetime ago ;)

zregvart:1610071607:2021-01-08T10:06:47.915+0000:1610071607:2021-01-08T10:06:47.915+0000:I don't think it's worth the effort to resolve this without having good use cases behind it. I'd rather deprecate this and remove it in the next LTS. I'm not sure if there are use cases that folk rely on this, if they do, I think deprecating it should bring about the use cases.
davsclaus:1611267275:2021-01-22T06:14:35.136+0000:1611267275:2021-01-22T06:14:35.136+0000:We have removed the synchronous and deprecated in older releases."
0,CAMEL-14137,Bug,Major,None,"3.0.0, 2.25.0","
None
",Resolved,Fixed,"3.0.0, 2.25.0",Andrea Cosentino,Luigi De Masi,0,1,2019-11-04 21:31:59+00:00,2019-11-06 08:25:39+00:00,"If a jetty component is configured as a bean with default thread pool settings, the thread pool get closed along with context.


If maxThreads,minThreads or both component properties are set, a new QueuedThreadPool is instantiated in JettyHttpComponent class  that  not get closed when the context is stopping.


 
  Attached a reproducer.


 


camel-jetty-Tleak-reproducer.zip",
0,CAMEL-14136,Bug,Major,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Christian Mohr,0,2,2019-11-04 14:55:52+00:00,2019-11-06 07:24:10+00:00,"I already asked this on the mailing list:


I encountered a ConcurrentModificationException in Camel: 




java.util.ConcurrentModificationException: null 
                at java.base/java.util.HashMap.computeIfAbsent(HashMap.java:1134) 
                at org.apache.camel.util.Scanner.cachePattern(Scanner.java:305) 
                at org.apache.camel.util.Scanner.<init>(Scanner.java:82) 
                at org.apache.camel.support.ObjectHelper.lambda$createIterable$3(ObjectHelper.java:593) 
                at org.apache.camel.support.ObjectHelper$$Lambda$1118.0000000000000000.iterator(Unknown Source) 
                at org.apache.camel.support.ObjectHelper.createIterator(ObjectHelper.java:435) 
                at org.apache.camel.support.ObjectHelper.createIterator(ObjectHelper.java:412) 
                at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:137) 
                at org.apache.camel.processor.RecipientList.process(RecipientList.java:125) 
                at org.apache.camel.processor.Pipeline.doProcess(Pipeline.java:103) 
                at org.apache.camel.processor.Pipeline.lambda$null$2(Pipeline.java:104) 
                at org.apache.camel.processor.Pipeline$$Lambda$1096.0000000000000000.run(Unknown Source) 
                at org.apache.camel.impl.engine.DefaultReactiveExecutor$3.run(DefaultReactiveExecutor.java:116) 
                at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:185) 
                at org.apache.camel.impl.engine.DefaultReactiveExecutor.schedule(DefaultReactiveExecutor.java:67) 
                at org.apache.camel.spi.ReactiveExecutor.schedule(ReactiveExecutor.java:32) 
                at org.apache.camel.processor.MulticastProcessor.lambda$schedule$1(MulticastProcessor.java:249) 
                at org.apache.camel.processor.MulticastProcessor$$Lambda$1099.0000000000000000.run(Unknown Source) 
                at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) 
                at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) 
                at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) 
                at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) 
                at java.base/java.lang.Thread.run(Thread.java:831) 



My simplified route is as follows. The input is a list of objects, these are split, and based on the object the recipientList is different. When there are two recipients in the String provided by „getRecipients"", the named exception is thrown. Sadly not consistently. 




  from(""seda:input"") 
      .split(method(TestClass.class, ""split""), AggregationStrategies.groupedBody()) 
        .parallelProcessing() 
        .recipientList(method(TestClass.class, ""getRecipients"")) 
          .parallelProcessing() 



It looks like the Scanner uses an internal map of compiled Patterns, but this map (LinkedHashMap) is not threadsafe. 


 


Response from Claus Ibsen:


Yeah its a bug in Camel 3, you are surely welcome to log a JIRA ticket 
and work on a patch. 
I can see we (gnodet) introduced a custom fast scanner implementation, 
but its not thread safe. 


We could add synchronization block to that compute if absent. And for 
those constant patterns WHITE_SPACE, FIND_ANY etc we can make them 
static 
as java.util.Pattern is thread-safe and create them once in a class 
static block.


 


I did that and will post a PR-Request to the github project shortly, when the ticket number is known.",davsclaus:1572996250:2019-11-06T07:24:10.560+0000:1572996250:2019-11-06T07:24:10.560+0000:Thanks for the PR
0,CAMEL-14135,New Feature,Major,None,3.x,"
None
",Resolved,Abandoned,3.x,Unassigned,Claus Ibsen,0,1,2019-11-04 10:22:49+00:00,2022-09-02 11:38:58+00:00,We may consider a classpath scanner that can use jandex indexes scan and load classes. So you can quickly load all RouteBuilder classes etc. Or all classes annotated with TypeConverter etc.,
0,CAMEL-14134,Task,Minor,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Andrea Cosentino,Omar Al-Safi,0,2,2019-11-04 09:42:28+00:00,2019-11-05 09:30:59+00:00,"Currently we have the Debezium Karaf itests disabled with annotation @Ignore due to this error related to Karaf dependencies whenever we run the Karaf itests for DBZ:




java.lang.ClassNotFoundException: org.apache.camel.component.debezium.DebeziumComponent not found by org.apache.camel.camel-debezium-mysql [127]




Therefore, is better to remove the karaf features with karaf itests for this component and label it as not supported in Karaf","omarsmak:1572831812:2019-11-04T09:43:32.553+0000:1572831812:2019-11-04T09:43:32.553+0000:[~davsclaus][~acosentino] how critical you guys think this issue is for our GA release?
acosentino:1572831907:2019-11-04T09:45:07.218+0000:1572831907:2019-11-04T09:45:07.218+0000:Not critical at all, we can say it's not supported on Karaf, we have other components in this situation. Before GA we can removed the karaf feature and integration test to avoid confusion
omarsmak:1572832071:2019-11-04T09:47:51.715+0000:1572832071:2019-11-04T09:47:51.715+0000:Thanks for the feedback. Then I will just change the title of this issue to remove the karaf feature with its integration tests"
0,CAMEL-14133,Task,Minor,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Omar Al-Safi,0,1,2019-11-04 08:38:47+00:00,2019-11-05 10:02:36+00:00,No Desc,
0,CAMEL-14132,Bug,Major,3.0.0.RC3,3.0.0,"
None
",Resolved,Fixed,3.0.0,Unassigned,Marius Cornescu,0,2,2019-11-04 07:14:58+00:00,2019-11-04 07:51:12+00:00,"When running a route FROM sftp with streamDownload=true TO hdfs, an exception is thrown, with the root cause that GenericFileConverter.genericFileToInputStream(GenericFile<?> file, Exchange exchange) needs the exchange instance to be non null


 




exchange.getContext().getTypeConverter().convertTo(InputStream.class);




returns null, while 




exchange.getContext().getTypeConverter().convertTo(InputStream.class, exchange, value);




works","marius_cornescu:1572822930:2019-11-04T07:15:30.028+0000:1572822930:2019-11-04T07:15:30.028+0000:I may have broken this originally.
marius_cornescu:1572824145:2019-11-04T07:35:45.932+0000:1572824145:2019-11-04T07:35:45.932+0000:[https://github.com/apache/camel/pull/3310]
davsclaus:1572825072:2019-11-04T07:51:12.651+0000:1572825072:2019-11-04T07:51:12.651+0000:Thanks for the PR"
0,CAMEL-14131,Task,Major,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,Claus Ibsen,0,1,2019-11-04 06:29:41+00:00,2019-11-08 07:36:34+00:00,"Remove old links from when we used subversion


git grep ""http://svn""",
0,CAMEL-14130,Task,Minor,None,3.0.0,"
None
",Resolved,Fixed,3.0.0,Omar Al-Safi,Claus Ibsen,0,3,2019-11-04 04:41:51+00:00,2019-11-06 08:46:33+00:00,"The option uses underscore in debezium (maybe a mistake). But it would be good to avoid this in Apache Camel as we dont use underscores in our option names (it also fails agains our checkstyle rules).


So maybe we can add a mapping rule to the debezium maven plugin. So the option in Camel is slotDropOnStop","davsclaus:1572813739:2019-11-04T04:42:19.170+0000:1572813739:2019-11-04T04:42:19.170+0000:You can see the CS errors
https://builds.apache.org/job/Camel/job/master/1652/checkstyleResult/HIGH/
davsclaus:1572813777:2019-11-04T04:42:57.995+0000:1572813777:2019-11-04T04:42:57.995+0000:Or do a git grep ""slotDrop_on""
davsclaus:1572813810:2019-11-04T04:43:30.071+0000:1572813810:2019-11-04T04:43:30.071+0000:The field is with underscore in debezum postregres
https://github.com/debezium/debezium/blob/master/debezium-connector-postgres/src/main/java/io/debezium/connector/postgresql/PostgresConnectorConfig.java#L555


omarsmak:1572827870:2019-11-04T08:37:50.160+0000:1572827870:2019-11-04T08:37:50.160+0000:Pretty odd indeed to have underscore in the naming. I will fix it and send the PR soon
gunnar.morling:1573001193:2019-11-06T08:46:33.953+0000:1573001193:2019-11-06T08:46:33.953+0000:Thanks for pointing me to this one, [~davsclaus]. Indeed that's an oversight on the Debezium side of things, and I've logged [DBZ-1595|https://issues.jboss.org/browse/DBZ-1595] for changing the name into ""drop.on.stop"". The old name will be deprecated but usable for Debezium 1.0.x. Btw. to give some background, that option rarely should be set to true, it's only useful really for testing purposes. Otherwise the connector cannot resume from the previous offset after a restart."
0,CAMEL-14129,Bug,Major,None,"2.24.3, 3.0.0, 2.25.0","
None
",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Andrea Cosentino,imran raza khan,0,2,2019-11-03 20:33:24+00:00,2019-11-06 11:31:23+00:00,"I am running following code and its not working with ""kubernetesConfiguration.setNamespace"" but if i set "".setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, simple(""my-ns""))"" then its work


Main Class:




public static void main(String[] args) throws Exception {        
KubernetesConfiguration kubernetesConfiguration = new KubernetesConfiguration();        kubernetesConfiguration.setMasterUrl(""https://0.0.0.0:8443""); kubernetesConfiguration.setOauthToken(""52rAQP_gk3GOtAG8o53loVtozrzPbKy9meNrpNSyCtA""); kubernetesConfiguration.setTrustCerts(true);
kubernetesConfiguration.setNamespace(""my-ns"");
KubernetesClient kc = KubernetesHelper.getKubernetesClient(kubernetesConfiguration);
final Main main = new Main();
main.addRouteBuilder(new MyRoute());
main.bind(""kubeClient"", kc);
main.run(args);    
}



 


Route Code:




from(""timer://ipc?repeatCount=1"")
//.setHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, simple(""my-ns""))
.setHeader(KubernetesConstants.KUBERNETES_CONFIGMAP_NAME, simple(""my-cm""))
.to(""kubernetes-config-maps:///?kubernetesClient=#kubeClient&operation=getConfigMap"")
.to(""log:my?showAll=true&multiline=true"");



 if in route i set namespace header then it works otherwise it give null body so if we already configured client with namespace it should be used rather than we have to explicitly provide in header of route, yes if we provide in header it should be override on client configuration","acosentino:1573009245:2019-11-06T11:00:45.140+0000:1573009245:2019-11-06T11:00:45.140+0000:Using the kubernetesHelper for this purpose is wrong. This class is used only internally for instatianting the client based on the KubernetesConfiguration of the component. If you need to set your own client and set a namespace, just create the client through the kubernetes-client API and bind it to the registry. Using the Camel helper for this is wrong.
imranrazakhan:1573009726:2019-11-06T11:08:46.327+0000:1573009726:2019-11-06T11:08:46.327+0000:Thanks for updates, I think it would be nice if we have examples in documentation or github with usage of kubernetes-client API, so for novice it would be good.
acosentino:1573010933:2019-11-06T11:28:53.416+0000:1573010933:2019-11-06T11:28:53.416+0000:By the way on the helper the namespace wasn't set during the client creation, so the bug is there for real. I'm fixing it. I'll add documentation on the instatiation of the client, thanks [~imranrazakhan]"
0,CAMEL-14128,Improvement,Minor,None,,"
None
",Resolved,Fixed,None,Jan Bednar,Jan Bednar,0,1,2019-11-03 19:42:44+00:00,2019-11-05 01:06:49+00:00,"As discussed with Zoran few months ago in commit: https://github.com/apache/camel/commit/500b7c442ac88ce59ff6d0c56a5b607fbe3a7206#commitcomment-34820028


 


In reaction to this discussion I have developed openfonts, which is few months stable, so we can switch to this dependency",
0,CAMEL-14127,Bug,Major,3.0.0.RC3,"2.24.3, 3.0.0, 2.25.0","

append
file-component
fileExist
override

",Resolved,Fixed,"2.24.3, 3.0.0, 2.25.0",Unassigned,Omid Dehghan,0,3,2019-11-03 12:40:13+00:00,2020-09-17 13:53:47+00:00,"Hi, I'm trying to append the content of a series of text files to another file with file-component using fileExist=Append but the destination file acts like it's been overrided!
Here's how I did it:


from(""file:G:/high"").to(""file:G:/test?fileName=test.txt&fileExist=Append"");","mcollovati:1572757299:2019-11-03T13:01:39.273+0000:1572757299:2019-11-03T13:01:39.273+0000:It seems the bug has been introduced in 2.20.x, by commit d8c0a53b6787778661fb4cde3c59a50b5691efac

Previous implementaion of {{writeFileByFile}} used {{prepareOutputFileChannel}} that considered {{fileExist=Append}}, whereas the new version directly does a {{Files.copy}} with {{StandardCopyOption.REPLACE_EXISTING option}}
davsclaus:1572814386:2019-11-04T04:53:06.465+0000:1572814400:2019-11-04T04:53:20.741+0000:Thanks for reporting. And thanks Marco for the fix in the PR
mcollovati:1572862486:2019-11-04T18:14:46.835+0000:1572862486:2019-11-04T18:14:46.835+0000:For the record, a workaround for older version is to set *charset* property 
{code:java}
from(""file:G:/high"").to(""file:G:/test?fileName=test.txt&charset=utf-8&fileExist=Append"");{code}
mcollovati:1573362167:2019-11-10T13:02:47.794+0000:1573362167:2019-11-10T13:02:47.794+0000:Will the fix be backported  to 2.x? Should I open another PR targeting at camel-2.x branch?
davsclaus:1573368708:2019-11-10T14:51:48.697+0000:1573368708:2019-11-10T14:51:48.697+0000:Only if 2.x has the same issue - can you check
mcollovati:1573380777:2019-11-10T18:12:57.125+0000:1573380777:2019-11-10T18:12:57.125+0000:As commented above, it seems the bug has been introduced in 2.20.x, by commit d8c0a53b6787778661fb4cde3c59a50b5691efac

The test added on PR fails on camel-2.x branch "
0,CAMEL-14126,Bug,Minor,2.24.2,3.0.0,"
None
",Resolved,Fixed,3.0.0,Claus Ibsen,tomahi,0,2,2019-11-01 20:55:03+00:00,2019-11-13 05:05:09+00:00,"I discovered a situation where the stax component causes an infinite loop of the file component in case of invalid UTF-8 characters in the file. I attached a sample project with the most simplistic route that shows the behaviour:  staxSample.zip 


The input file containes invalid UTF-8 characters. The route definition is as following:




from(""file://inbound?moveFailed=.failed"")
    .split(stax(Product.class))
        .log(""${body.name}"");




I get the exceptions



Error renaming file from C:\Users\...\inbound\products.xml to inbound\.failed\products.xml


and



[javax.xml.stream.XMLStreamException: ParseError at [row,col]:[4,29]
Message: Ungültiges Byte 2 von 3-Byte-UTF-8-Sequenz.]


When I marshal the whole document at once I don't get the first exception. When I use the splitter with tokenizeXML I won't get any of the exceptions.





The sample contains another example where a combination of Splitter with aggregation + seda route called by inOut and an exception in the seda route causes the infinite loop too (Message is ""error renaming file"" as above). 


I could figure out that the issue doesn't occur if at least one of the following changes:



the Exception is thrown in the ""file""-route instead of in the seda route
the aggregation returns the newExchange if the oldExchange is null instead of creating a new DefaultExchange
""to"" instead of ""inOut"" is used to call the seda endpoint","davsclaus:1573525335:2019-11-12T10:22:15.437+0000:1573525335:2019-11-12T10:22:15.437+0000:The first one smells like a problem with windows file system where a file input stream is not closed, then it can't move the file
davsclaus:1573525382:2019-11-12T10:23:02.744+0000:1573525382:2019-11-12T10:23:02.744+0000:And if you do custom aggregation strategy then do not create a new exchange, but use the existing ones!
davsclaus:1573592299:2019-11-13T04:58:19.813+0000:1573592299:2019-11-13T04:58:19.813+0000:Okay so this works on linux on also on master branch. The reader is getting closed when there is an invalid file
davsclaus:1573592709:2019-11-13T05:05:09.469+0000:1573592709:2019-11-13T05:05:09.469+0000:Added a explicit close. You can work around this on 2.x, by adding a convertBodyTo(byte[].class) before calling the splitter."
