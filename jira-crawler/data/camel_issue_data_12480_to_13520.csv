,Issue Key,Type,Priority,Affects Version/s,Component/s,Labels,Status,Resolution,Fix Version/s,Assignee,Reporter,Votes,Watchers,Created,Updated,Description,Comments
0,CAMEL-7843,Task,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-09-20 17:29:27+00:00,2014-09-20 18:24:28+00:00,No Desc,
0,CAMEL-7842,Bug,Major,2.14.0,"2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Willem Jiang,Benjamin Graf,0,2,2014-09-20 14:02:31+00:00,2014-09-22 08:23:45+00:00,"Sending byte[] input via http in some circumstances causes ugly NonRepeatableEntityException because of the internal usage of InputStreamEntity in the HttpEntityConverter which is not repeatable. The usage of ByteArrayEntity seems more resonable for this input.


A workaround is to explicitly convertbodyto string but this is taken with care because of encoding when creating string and StringEntity later on!","njiang:1411345425:2014-09-22T08:23:45.737+0000:1411345425:2014-09-22T08:23:45.737+0000:Applied the patch into master, camel-2.14.x, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7841,Improvement,Major,2.14.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Marc Carter,0,2,2014-09-19 16:07:54+00:00,2015-07-09 10:37:36+00:00,"The test for BridgePropertyPlaceholderConfigurer shows a very unrealistic example of putting some SpEL into a camel variable. This requires pre-declaring every such spel expression as you instantiate the bridge. Essentaily the SpEL is only evaluated when directly in the Spring context refresh.


This bridge class can be ugraded to parse SpEL expressions dynamically as Camel requests properties allowing the usecases like:



.from(""direct:dostuff"")
.wireTap( ""file:#{@runtime.dataPath}?fileName=${date:now:yyyyMMdd}.txt"" )




In today's code the first part of URI cannot be paramterised.


I'll submit a PR via github with my solution and example tests.","davsclaus:1417608294:2014-12-03T20:04:54.987+0000:1417608294:2014-12-03T20:04:54.987+0000:Marc, did you get stated working on this?
drekbour:1417789302:2014-12-05T22:21:42.026+0000:1417789302:2014-12-05T22:21:42.026+0000:yes, its all functional locally but needs unpicking from other local customisations and testing to be presentable. i'll give it another look over soon with an eye to getting something visible for you to look at even if its not the finished article 
davsclaus:1426891850:2015-03-21T06:50:50.010+0000:1426891850:2015-03-21T06:50:50.010+0000:Any update on this?"
0,CAMEL-7840,Task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-09-19 16:05:57+00:00,2014-09-19 16:06:55+00:00,There is a new release and they changed the mvn group id to dropwizard.,
0,CAMEL-7839,Bug,Major,2.14.0,"2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Willem Jiang,Oliver Holzmann,0,3,2014-09-19 10:21:11+00:00,2014-09-22 08:02:59+00:00,"I have a route (XML definition) containing a choice based on xpath expressions. The xpath expressions are using custom namespaces. After migration from camel 2.13.2 to camel 2.14.0 the namespaces are not registered to the XpathExpression and XPathBuilder anymore.


XPath in ""setProperty"" definitions referencing the same namespaces still work fine.","davsclaus:1411262361:2014-09-21T09:19:21.051+0000:1411262361:2014-09-21T09:19:21.051+0000:Can you tell more about your app, and maybe provided a sample project that demonstrates this. Are you using spring or blueprint etc.
OHolzma:1411288732:2014-09-21T16:38:52.490+0000:1411288732:2014-09-21T16:38:52.490+0000:The test in the attached project works with camel 2.13.2, but it fails with 2.14.0.

It is based on spring and uses an imported route context like my real project is also doing. When the route context is included in the camel-context xml file (like in /camel/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/xpathFilterWithNamespaceOnRouteContext.xml) the namespaces are registered correct and the test succeeds. 
njiang:1411329971:2014-09-22T04:06:11.453+0000:1411331493:2014-09-22T04:31:33.109+0000:It looks like the error is cause by the recent change of  CAMEL-7562.
It cause the route context clone doesn't pick up the right ExpressionNode for copying the namespaces.
I will commit a quick fix for it shortly.

njiang:1411344179:2014-09-22T08:02:59.921+0000:1411344179:2014-09-22T08:02:59.921+0000:Apply the patch into camel master, camel-2.14.x, camel-2.13.x and camel-2.12.x."
0,CAMEL-7838,Improvement,Minor,2.13.2,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Marc Carter,0,2,2014-09-19 09:25:40+00:00,2015-03-21 10:01:49+00:00,"CAMEL-6744 encompassed setting the List<V> into the body onCompletion only when using anything based on AbstractListAggregationStrategy


However any strategies based on this class cannot be used with a persistent repository because the GROUPED_EXCHANGE property appears not to be serialised so keeps being reset to the latest message only.
(I spotted this by checking properties in the completion predicate and AGGREGATED_SIZE != GROUPED_EXCHANGE.size())


Given this limitation, it doesn't seem sensible to only promote to the body on completion. The only reason I can think of is to limit regression to existing completionPredicates that expect the first message in body instead of body.get(0). That said, CAMEL-6744 already introduced this change to the subsequent route.","davsclaus:1426903309:2015-03-21T10:01:49.740+0000:1426903309:2015-03-21T10:01:49.740+0000:Use your own strategy if you want some kind of serialized repo of a list of pojos.

"
0,CAMEL-7837,New Feature,Major,2.14.0,None,"
None
",Resolved,Won't Fix,None,Unassigned,Moulliard Charles,0,2,2014-09-19 07:09:55+00:00,2019-08-06 05:13:03+00:00,"We should support json2json data transformation.
A good candidate project exists which is Apache Licensed 2 : 



http://chunqishi.github.io/json2json/
https://github.com/chunqishi/json2json",davsclaus:1565039583:2019-08-06T05:13:03.381+0000:1565039583:2019-08-06T05:13:03.381+0000:These projects are dead
0,CAMEL-7836,Bug,Minor,2.13.1,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Claus Ibsen,Matt Nathan,0,1,2014-09-18 15:37:13+00:00,2015-04-21 11:36:27+00:00,"There is a (small) chance of ConcurrentModificationException when creating routes dynamically.



java.util.ConcurrentModificationException
  at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:373)
  at java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:384)
  at java.util.AbstractCollection.toArray(AbstractCollection.java:124)
  at java.util.ArrayList.&lt;init&gt;(ArrayList.java:131)
  at org.apache.camel.impl.DefaultCamelContext.getRoutes(DefaultCamelContext.java:650)
  at org.apache.camel.impl.DefaultCamelContext.getRoute(DefaultCamelContext.java:655)




The cause is that if you happen to be calling getRoute at the same time you are creating a new route then the internals of new ArrayList call collection.toArray which throws the error.",
0,CAMEL-7835,Task,Major,2.14.0,2.15.0,"

deprecation
junit
spring
test

",Resolved,Fixed,2.15.0,Claus Ibsen,Henrik,1,6,2014-09-18 14:59:02+00:00,2015-09-09 11:59:08+00:00,"CamelSpringJUnit4ClassRunner calls the TestContextManager(Class, String) constructor, and the TestContextManager.getDefaultTestExecutionListenerClasses() method.  


Both of these are deprecated in spring-test-4.0.x, and are gone in 4.1.x.","davsclaus:1411264057:2014-09-21T09:47:37.619+0000:1411264057:2014-09-21T09:47:37.619+0000:Grrrr spring guys changed this totally for spring 4.1 meaning its absolute not backwards compatible, which means we need a camel-test-spring41 component :(

davsclaus:1411284980:2014-09-21T15:36:20.909+0000:1411284980:2014-09-21T15:36:20.909+0000:This is too big for a patch release. So we have a camel-test-spring40 for spring 4.0.x, and camel-test-spring now supports spring 4.1 onwards.
githubbot:1411290775:2014-09-21T17:12:55.657+0000:1411290775:2014-09-21T17:12:55.657+0000:GitHub user wuwen5 opened a pull request:

    https://github.com/apache/camel/pull/273

    CAMEL-7835:No need to inject Camel first listener using CamelSpringJUnit...

    No need to inject Camel first listener using CamelSpringJUnit4ClassRunner,  spring4.1 just only need set listeners are ordered

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/wuwen5/camel CAMEL-7835

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/273.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #273
    
----
commit 0965fe519547699c70df182c3b448bf4c756d8fe
Author: wuwen <wuwen.55@gmail.com>
Date:   2014-09-21T17:11:03Z

    CAMEL-7835:No need to inject Camel first listener using CamelSpringJUnit4ClassRunner,  spring4.1 just only need set listeners are ordered

----

githubbot:1411526744:2014-09-24T10:45:44.037+0000:1411526744:2014-09-24T10:45:44.037+0000:Github user wuwen5 closed the pull request at:

    https://github.com/apache/camel/pull/273

githubbot:1411531755:2014-09-24T12:09:15.642+0000:1411531755:2014-09-24T12:09:15.642+0000:GitHub user wuwen5 opened a pull request:

    https://github.com/apache/camel/pull/276

    CAMEL-7835:Camel listener with the Ordered

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/wuwen5/camel CAMEL-7835-Ordered

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/276.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #276
    
----
commit 8053a274977d4a710ace777df355cdcfd84d62a4
Author: wuwen <wuwen.55@gmail.com>
Date:   2014-09-24T12:08:01Z

    CAMEL-7835:Camel listener with the Ordered

----

githubbot:1411532085:2014-09-24T12:14:45.966+0000:1411532085:2014-09-24T12:14:45.966+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/276

monti:1418007222:2014-12-08T10:53:42.480+0000:1418007751:2014-12-08T11:02:31.190+0000:[~davsclaus] [~wuwen] Any chance this can go into 2.14.1?
TheLibrarian:1441771138:2015-09-09T11:58:58.090+0000:1441771138:2015-09-09T11:58:58.090+0000:Same here, stuck with 2.14.x (because of Java 6) but now we can't upgrade Spring to 4.1 because of this. Any chance of a camel-test-spring41 in 2.14.x?"
0,CAMEL-7834,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,James Strachan,0,5,2014-09-18 10:30:01+00:00,2014-11-26 12:24:39+00:00,"Docker provides a REST API to query events (for containers starting and stopping etc):
https://docs.docker.com/reference/api/docker_remote_api_v1.14/#monitor-dockers-events


it'd be nice to support a simple camel component to make it easier to consume docker events; with the events available as a JSON String or as a POJO","sabre1041:1411323096:2014-09-22T02:11:36.036+0000:1411323096:2014-09-22T02:11:36.036+0000:I have began to work on a docker component integrating the docker-java API (https://github.com/docker-java/docker-java). The API provides an extensive range of integration with the Docker API which can allow for a broad range of options from within Camel and not limited to consumption of Docker Events.
jstrachan:1411374033:2014-09-22T16:20:33.749+0000:1411374033:2014-09-22T16:20:33.749+0000:Ah cool!

BTW if its any help, we've a Docker REST API using JAXRS 2.0 (which today is on resteasy but we're about to move in a few days to CXF 3.0.1 instead)
https://github.com/fabric8io/fabric8/tree/master/fabric/fabric-docker-api#fabric8-docker-api
sabre1041:1412713881:2014-10-08T04:31:21.782+0000:1412713881:2014-10-08T04:31:21.782+0000:Completed an initial implementation for a Camel component for Docker

Features
* Consumes Events
* Various producer invocations

Source can be found at https://github.com/sabre1041/camel-docker
njiang:1413848331:2014-10-21T07:38:51.754+0000:1413848331:2014-10-21T07:38:51.754+0000:Hi Andy
Thanks for you contribution. 
I just have a quick look at the components and check the dependency of docker-java, they are good. The only missing part you need to Add the Apache Header to java files in your repo. 
You can send a pull request based on Camel master branch once you updated the java files. I’d happy to merge the patch into camel master for you. 

Regards,

Willem
githubbot:1413923342:2014-10-22T04:29:02.049+0000:1413923342:2014-10-22T04:29:02.049+0000:GitHub user sabre1041 opened a pull request:

    https://github.com/apache/camel/pull/306

    CAMEL-7834 - Camel Docker Component

    Created a Docker component for Camel. Includes the functionality requested in [CAMEL-7834](https://issues.apache.org/jira/browse/CAMEL-7834) to consume events and includes the majority of the functionality as documented in the [Docker Remote API](https://docs.docker.com/reference/api/docker_remote_api/)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sabre1041/camel CAMEL-7834

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/306.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #306
    
----
commit 6f6ffe3c50a951d44edcac5e56c53831f541cfd2
Author: Andrew Block <andy.block@gmail.com>
Date:   2014-10-22T04:11:09Z

    Add camel-docker component

----

njiang:1413955326:2014-10-22T13:22:06.949+0000:1413955326:2014-10-22T13:22:06.949+0000:Applied the patch into master branch with thanks to Andy.
davsclaus:1414894235:2014-11-02T10:10:35.347+0000:1414894235:2014-11-02T10:10:35.347+0000:Thanks. Added the docs to the wiki
githubbot:1416975879:2014-11-26T12:24:39.650+0000:1416975879:2014-11-26T12:24:39.650+0000:Github user sabre1041 closed the pull request at:

    https://github.com/apache/camel/pull/306
"
0,CAMEL-7833,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,James Strachan,0,4,2014-09-17 12:50:46+00:00,2015-04-06 13:53:47+00:00,"with Camel RX and java 8 we can do some nice lambdas and typesafe filtering and transformation:



ReactiveCamel rx = new ReactiveCamel(camelContext);
Observable<Order> observable = rx.toObservable(""seda:orders"", Order.class);
 
// now lets filter and map using Java 8
Observable<String> largeOrderIds = observable.
  filter(order -> order.getAmount() > 100.0).
  map(order -> order.getId());
 
rx.sendTo(observable, ""activemq:MyQueue"");




however the DSL isn't quite as nice as Camel's due to the lack of the camel verbs like ""to()"". It'd be nice to provide an extended Observable<T> interface which adds more of Camel's DSL in there too; so you can still use things the RX way; but can also reuse the camel DSL too (in a typesafe way). 


e.g. something like this



// Observable comes from RX; it'd be nice to have a camel extended version so we can add camel DSL stuff in there like to() etc....
CamelStream<Order> orders = rx.stream(""seda:orders"", Order.class);
 
// now lets filter and map using Java 8
orders.
  filter(order -> order.getAmount() > 100.0).
  map(order -> order.getId()).
  to(""activemq:MyQueue"");","githubbot:1427874291:2015-04-01T15:44:51.925+0000:1427874291:2015-04-01T15:44:51.925+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/459

    CAMEL-7833 Use Camel endpoints inside RX sequence

    CamelOperator class allows us to use Camel endpoints inside an RX sequence, like so:
    
    ```
    Observable<Message> in = reactiveCamel.toObservable(""direct:start"")
       .lift(new CamelOperator(camelContext, ""xslt:something.xsl""))
       .lift(new CamelOperator(anotherEndpoint));
    ```


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-rx

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/459.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #459
    
----
commit 414e968fb26cfb5f707f2e7024ff423dcdac9af9
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-04-01T14:54:26Z

    Added CamelOperator for lift()

commit 5384bc26859c1af73610ce3d74a3f014620a19b7
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-04-01T15:34:47Z

    Added CamelOperatorTest

----

njiang:1427932345:2015-04-02T07:52:25.554+0000:1427932345:2015-04-02T07:52:25.554+0000:Applied the patch into camel master branch with thanks to Jyrki, I also did some change on the CamelOperation to use ProducerTemplate and handler the exception which is thrown from to processing.
githubbot:1427939436:2015-04-02T09:50:36.020+0000:1427939436:2015-04-02T09:50:36.020+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/459

githubbot:1427975336:2015-04-02T19:48:56.347+0000:1427975336:2015-04-02T19:48:56.347+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/462

    CAMEL-7833 Added convenience method ReactiveCamel.to(...)

    Added convenience method ReactiveCamel.to(String uri) and ReactiveCamel.to(Endpoint endpoint) for nicer DSL experience.
    
    Changed the unit test to further highlight the idea of creating (Camel-like) routes with RX.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-rx-convenience

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/462.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #462
    
----
commit 24b54c3212d57edd1ddc2003ae3b6178818bec68
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-04-02T19:38:55Z

    Added convenience method ReactiveCamel.to(...).
    Changed test to highlight the idea of creating routes with RX.

----

njiang:1427998788:2015-04-03T02:19:48.200+0000:1427998788:2015-04-03T02:19:48.200+0000:Merged the patch into camel master branch with thanks to Jyrki.
githubbot:1428011399:2015-04-03T05:49:59.252+0000:1428011399:2015-04-03T05:49:59.252+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/462

githubbot:1428199679:2015-04-05T10:07:59.634+0000:1428199679:2015-04-05T10:07:59.634+0000:GitHub user yuruki opened a pull request:

    https://github.com/apache/camel/pull/467

    CAMEL-7833 InOnly and InOut routes as Observable<Exchange> sequences

    Basic InOnly and InOut routes seem to just work as Observable<Exchange> sequences.
    
    To be honest, I don't quite understand why the response is correctly propagated to consumer automatically without an explicit call to UnitOfWork.done() and friends...

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/yuruki/camel camel-rx-routes

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/467.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #467
    
----
commit 88417414d3679178adbe9abd8b3b4bde99c37119
Author: Jyrki Ruuskanen <yuruki@kotikone.fi>
Date:   2015-04-05T09:59:12Z

    InOnly and InOut routes as Observable<Exchange> sequences

----

githubbot:1428299627:2015-04-06T13:53:47.055+0000:1428299627:2015-04-06T13:53:47.055+0000:Github user yuruki closed the pull request at:

    https://github.com/apache/camel/pull/467
"
0,CAMEL-7832,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,James Strachan,0,1,2014-09-17 12:47:45+00:00,2016-09-12 14:29:01+00:00,"Camel RX can already do typesafe processing of messages
http://camel.apache.org/rx.html


it'd be nice to show a demo using Java 8 and lambdas. e.g. like this...



ReactiveCamel rx = new ReactiveCamel(camelContext);
Observable<Order> observable = rx.toObservable(""seda:orders"", Order.class);
 
// now lets filter and map using Java 8
Observable<String> largeOrderIds = observable.
  filter(order -> order.getAmount() > 100.0).
  map(order -> order.getId());
 
rx.sendTo(observable, ""activemq:MyQueue"");",
0,CAMEL-7831,New Feature,Major,None,2.18.0,"
None
",Resolved,Fixed,2.18.0,Luca Burgazzoli,James Strachan,3,6,2014-09-17 12:45:35+00:00,2016-09-08 15:43:28+00:00,"e.g. so folks can type things like



from(""seda:cheese"").
  filter(m -> m.getHeader(""foo"", int.class) > 5).
  map(m -> createPurchaseOrder(m.getBody(Invoice.class)).
  to(""seda:bar"");




Note if the current Predicate/Expression classes don't work as lambdas we could add a new interface with a single method to the DSL to ensure Java 8 does the right thing with lambdas","christian.ohr:1437460279:2015-07-21T14:31:19.526+0000:1437463396:2015-07-21T15:23:16.653+0000:Predicate and Processor can be implemented with lambdas or function references, but Expressions cannot. 
Lambdas can only implement an interface fully known at compile-time, but Expression#evaluate is generic.

As of now, one requires a bridge, like this:

{code}
    private <V> Expression function(Function<Exchange, V> function) {
        return new ExpressionBridge<>(function);
    }

    private class ExpressionBridge<V> implements Expression {

        private final Function<Exchange, V> function;

        public ExpressionBridge(Function<Exchange, V> function) {
            this.function = function;
        }

        @Override
        public <T> T evaluate(Exchange exchange, Class<T> type) {
            return exchange.getContext().getTypeConverter().convertTo(type, function.apply(exchange));
        }
    }
{code}

Then you can go ahead and use in your route something like:

{code}
        from(""direct:blorg"")
                .transform(function(exchange -> exchange.getProperty(""some prop"")))
                .to(""direct:gablorg"");
{code}
davsclaus:1437699470:2015-07-24T08:57:50.706+0000:1437699470:2015-07-24T08:57:50.706+0000:Ah thanks for the heads up on the exchange. Maybe we can add to the java dsl an ObjectExpression that is returning an Object so the lambda can use that?
davsclaus:1437876796:2015-07-26T10:13:16.076+0000:1437876796:2015-07-26T10:13:16.076+0000:I logged CAMEL-9018 as it would be good to get a small example and archetype that is java 8 based. It can help quicker try out this and maybe find ways to improve the java-dsl, or maybe we need a camel-java8-dsl module that has some improvements in the RouteBuilder or something?

Though ideally its the current DSL in camel-core that should be java8 friendly
davsclaus:1437876868:2015-07-26T10:14:28.079+0000:1437876868:2015-07-26T10:14:28.079+0000:Also I wonder if we can get a lambdas to work with something else than the exchange, eg in the example above you have to use exchange.getIn().getBody to access the body. Wonder if we could work on the body directly, or body/header, or message or something. Just a thought.
christian.ohr:1438056279:2015-07-28T12:04:39.573+0000:1438056279:2015-07-28T12:04:39.573+0000:Extracting the DSL from camel-core was one of the strategic goals (https://cwiki.apache.org/confluence/display/CAMEL/Camel+3.0+-+Ideas#Camel3.0-Ideas-ClearerArchitectureofCamelCore), but I don't think the effort is justified just to have lambda-friendly expressions.... It may be justified due to many other reasons, though.
lb:1472688820:2016-09-01T08:13:40.407+0000:1472688820:2016-09-01T08:13:40.407+0000:As an ExpressionAdapter already exists, would it make sense to write things like transform as follow ?

{code:java}
   public Type transform(final Function<Exchange, Object> function) {
        return transform(new ExpressionAdapter() {
            public Object evaluate(Exchange exchange) {
                return function.apply(exchange);
            } 
        });
    }
{code}

christian.ohr:1473032245:2016-09-05T07:37:25.259+0000:1473032245:2016-09-05T07:37:25.259+0000:It certainly does, except that you need this for *all* methods in ProcessorDefinition taking an Expression as argument... Bloating the interface just to add syntactic sugar feels cumbersome.
A function bridge could also be added to ExpressionClause/ExpressionClauseSupport to be able to write:

{code}
        from(""direct:blorg"")
                .transform().function(exchange -> exchange.getProperty(""some prop""))
                .to(""direct:gablorg"");
{code}
lb:1473041965:2016-09-05T10:19:25.036+0000:1473041965:2016-09-05T10:19:25.036+0000:Looks nicer and more fluent, I personally do not like the transform(function(...)), should I try to implement it ?
christian.ohr:1473043106:2016-09-05T10:38:26.239+0000:1473043106:2016-09-05T10:38:26.239+0000:Yes, the initial version was just for demonstration purposes without requiring API changes.
Just go ahead, my spare time is somewhat limited currently...
lb:1473063658:2016-09-05T16:20:58.277+0000:1473063691:2016-09-05T16:21:31.894+0000:I've enhanced ExpressionClause so you have:

{code:java}
    /**
     * transform().function(e -> e.getProperty(""some prop""))
     */
    public T function(final ExchangeFunction function);

    /**
     * transform().function(m -> m.getHeader(""key""))
     */
    public T inFunction(final MessageFunction function);

    /**
     * transform().function(m -> m.getHeader(""key""))
     */
    public T outFunction(final MessageFunction function);
{code}


We could create some more functional interface like

{code:java}
    interface BodyFunction extends BiFunction<Object, Map<String, Object>, Object> {
    }
{code}"
0,CAMEL-7830,Bug,Major,2.13.2,"2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.3, 2.14.1, 2.15.0",Willem Jiang,Willem Jiang,0,1,2014-09-17 02:48:06+00:00,2014-09-17 05:10:06+00:00,"As we don't set the transfer_encoding protocol header for the restlet service, we need to remove the transfer_encoding header which could let the client wait forever.","njiang:1410901806:2014-09-17T05:10:06.838+0000:1410901806:2014-09-17T05:10:06.838+0000:Applied the patch into master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7829,Bug,Major,2.14.0,None,"

camel-olingo2
odata2
olgino2

",Resolved,Fixed,"2.14.1, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-09-16 19:45:41+00:00,2014-09-16 20:50:43+00:00,"Some OData servers, like the JBoss Data Virtualization server based on OData4J library respond with HTTP 200 OK instead of 204 No Content for PUT methods. 
The component needs to be able to handle this scenario.","dhirajsb:1410871811:2014-09-16T20:50:11.765+0000:1410871811:2014-09-16T20:50:11.765+0000:Also add support for handling updated resources for properties, property values, complex properties, and single and multiple links for PATCH and MERGE requests. Some OData servers may respond with an updated resource value for these operations. Some servers may also respond with an updated value for properties for PUT requests. 
dhirajsb:1410871843:2014-09-16T20:50:43.236+0000:1410871843:2014-09-16T20:50:43.236+0000:Commit pushed to master and camel-2.14.x

https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=3bafd8bfe1efabeb9b44513b26446cd7236c02b6"
0,CAMEL-7828,New Feature,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2014-09-16 14:22:57+00:00,2014-11-02 11:44:06+00:00,"User may need to use the exchange to update the entity bean's property.
http://camel.465427.n5.nabble.com/Consumed-td5756556.html",njiang:1411345370:2014-09-22T08:22:50.291+0000:1411345370:2014-09-22T08:22:50.291+0000:Applied the patch into camel master branch.
0,CAMEL-7827,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,François LAROCHE,0,3,2014-09-16 14:06:47+00:00,2014-09-29 13:18:47+00:00,"I am calling an endpoint using cxfrs client with the http api. So I have 
something like that in the DSL : 


.... 
.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(true)) 
.setHeader(Exchange.HTTP_PATH, simple(""/endpoint/${header.myHeader}"")) 
.setHeader(Exchange.HTTP_METHOD, constant(POST)) 
.to(""cxfrs:bean:myClient"") 
.... 


This usually works fine. 


I had a somewhat nasty error when someone did a copy paste of my server, 
with the variable substitution style (something like /endpoint/

{myVariable}) 





at that point, ${header.myHeader} resolved to {myVariable}

, thus the url the 
client will try to resolve is  /endpoint/

{myVariable}. When trying to parse 


this URL, CXF will not be happy, since there is no value to replace what it 


thinks to be a variable, and will throw an IllegalArgumentException with 


message Unresolved variables; only 0 value(s) given for 1 unique 


variable(s). 





After looking a bit in the code, I understood better what happens. 





In order to avoid that, it would be nice to use the mechanism of CXF to 


replace variables in URI. 





In the DSL, we would have something like : 





.... 


.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, constant(true)) 


.setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, 


simple(""
[${header.myHeader}]
"")) 


.setHeader(Exchange.HTTP_PATH, constant(""/endpoint/{myVariable}

"")) 
.setHeader(Exchange.HTTP_METHOD, constant(""POST"")) 
.to(""cxfrs:bean:myClient"") 
....","githubbot:1410847841:2014-09-16T14:10:41.076+0000:1410847841:2014-09-16T14:10:41.076+0000:GitHub user larochef opened a pull request:

    https://github.com/apache/camel/pull/266

    [CAMEL-7827] Add possibility to specify parameters to URLs using http api.

    Added the replacement in CxfRsProducer + unit test to validate it

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/larochef/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/266.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #266
    
----
commit ebf5c2e1767b759e20467db7a23b5d3ebe7f29b0
Author: larochef <flaroche@gmail.com>
Date:   2014-09-16T12:50:03Z

    Add possibility to specify parameters to URLs using http api. For example : have a URI like /service/{id} and have an array to merge the parameters

----

flaroche:1410847865:2014-09-16T14:11:05.062+0000:1410847865:2014-09-16T14:11:05.062+0000:associated pull request : https://github.com/apache/camel/pull/266
njiang:1411097591:2014-09-19T11:33:11.424+0000:1411097591:2014-09-19T11:33:11.424+0000:Applied the patch into camel master branch with thanks to François.
githubbot:1411967927:2014-09-29T13:18:47.147+0000:1411967927:2014-09-29T13:18:47.147+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/266
"
0,CAMEL-7826,Bug,Major,2.14.0,None,"

camel-olingo2
odata
odata2
olingo2

",Resolved,Fixed,"2.14.1, 2.15.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-09-16 03:29:08+00:00,2014-09-16 04:56:45+00:00,"The serviceRoot property is not set correctly to the OData base URI when creating the EntityProviderWriteProperties, which causes the generated links in body to be incorrect.","dhirajsb:1410809963:2014-09-16T03:39:23.133+0000:1410814605:2014-09-16T04:56:45.169+0000:Fix pushed to master and merged into camel-2.14.x

https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=0d94bfe0c92a93d0a097fc77967385f2afea60a4"
0,CAMEL-7825,New Feature,Major,None,Future,"
None
",Resolved,Implemented,Future,Unassigned,Scott England-Sullivan,2,4,2014-09-15 17:07:19+00:00,2017-02-26 08:33:12+00:00,Add DestinationResolver support to allow for vendor proprietary configuration options to be added to destination URIs.,"aaronjwhiteside:1413302319:2014-10-14T23:58:39.835+0000:1413302319:2014-10-14T23:58:39.835+0000:Is this related to CAMEL-7908, or is this something different?
davsclaus:1417607296:2014-12-03T19:48:16.409+0000:1417607296:2014-12-03T19:48:16.409+0000:Yeah maybe Aarons work covers this?
davsclaus:1488069192:2017-02-26T08:33:12.896+0000:1488069192:2017-02-26T08:33:12.896+0000:Yes Aarons works does this"
0,CAMEL-7824,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Willem Jiang,Christian Müller,0,2,2014-09-15 15:04:36+00:00,2014-09-19 11:32:11+00:00,"In Safari and Firefox, I got some errors by opening the Camel manual: ""SyntaxHighlighter: Can't find brush for: py""","njiang:1410839158:2014-09-16T11:45:58.473+0000:1410839158:2014-09-16T11:45:58.473+0000:I just updated the [page|https://cwiki.apache.org/confluence/display/CAMEL/Scripting+Languages+Context] to remove the py brush.  
njiang:1411097531:2014-09-19T11:32:11.860+0000:1411097531:2014-09-19T11:32:11.860+0000:I just checked the generated html file, the error is gone."
0,CAMEL-7823,Bug,Major,2.14.0,2.15.0,"
None
",Resolved,Fixed,2.15.0,Unassigned,Christian Müller,0,2,2014-09-15 14:45:03+00:00,2014-09-23 20:31:55+00:00,"Installing feature camel-spring-redis is failing:



features:install camel-spring-redis
Error executing command: Could not start bundle mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE in feature(s) camel-spring-redis-2.14.0: Unresolved constraint in bundle org.springframework.data.redis [171]: Unable to resolve 171.0: missing requirement [171.0] osgi.wiring.package; (&(osgi.wiring.package=org.springframework.aop.framework)(version>=3.2.9)(!(version>=4.0.5)))




Spring AOP is in the spring-aspects feature. However, the import range is [3.2.4,4.0.5) and will not be satisfied in Karaf 2.3.7:



karaf@root> features:list | grep spring-aspects
[uninstalled] [3.0.7.RELEASE  ] spring-aspects                          karaf-2.3.7             Spring 3.0.x AOP support
[uninstalled] [3.1.4.RELEASE  ] spring-aspects                          karaf-2.3.7             Spring 3.1.x AOP support
[uninstalled] [3.2.4.RELEASE  ] spring-aspects                          karaf-2.3.7             Spring 3.2.x AOP support
[uninstalled] [4.0.5.RELEASE_1] spring-aspects                          karaf-2.3.7             Spring 4.0.x AOP support","njiang:1410800078:2014-09-16T00:54:38.793+0000:1410800078:2014-09-16T00:54:38.793+0000:I already sent a [PR|https://github.com/spring-projects/spring-data-redis/pull/103] to spring data redis. 
muellerc:1411475449:2014-09-23T20:30:49.484+0000:1411475449:2014-09-23T20:30:49.484+0000:It's now working with Karaf 2.4.0 and Camel 2.15-SNAPSHOT:
{noformat}
christians-mbp:bin cmueller$ ./karaf clean
        __ __                  ____
       / //_/____ __________ _/ __/
      / ,<  / __ `/ ___/ __ `/ /_
     / /| |/ /_/ / /  / /_/ / __/
    /_/ |_|\__,_/_/   \__,_/_/

  Apache Karaf (2.4.0)

Hit '<tab>' for a list of available commands
and '[cmd] --help' for help on a specific command.
Hit '<ctrl-d>' or type 'osgi:shutdown' or 'logout' to shutdown Karaf.

karaf@root> features:chooseurl camel 2.15-SNAPSHOT
Adding feature url mvn:org.apache.camel.karaf/apache-camel/2.15-SNAPSHOT/xml/features
karaf@root> features:install camel-spring-redis
karaf@root>
{noformat}"
0,CAMEL-7822,Bug,Major,"2.14.0, 2.15.0",,"
None
",Closed,Invalid,None,Christian Müller,Christian Müller,0,1,2014-09-15 14:23:02+00:00,2014-09-15 14:27:14+00:00,"Installation of feature camel-google-drive in Karaf 2.3.7 is failing:



features:install camel-google-drive
Error executing command: Could not start bundle mvn:org.apache.camel/camel-google-drive/2.14.0 in feature(s) camel-google-drive-2.14.0: Unresolved constraint in bundle org.apache.camel.camel-google-drive [136]: Unable to resolve 136.0: missing requirement [136.0] osgi.wiring.package; (&(osgi.wiring.package=org.apache.camel)(version>=2.14.0.SNAPSHOT))",
0,CAMEL-7821,Bug,Minor,2.13.2,"2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Martin Kühl,0,2,2014-09-15 13:50:35+00:00,2015-02-15 15:20:15+00:00,"A BridgePropertyPlaceholderConfigurer configured to use a custom PropertiesParser like this:



  <bean id=""bridgePropertyPlaceholder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer""
      p:location=""classpath:application.properties""
      p:parser-ref=""jasyptParser"" />




fails to actually use the parser to parse properties.


It seems that org.apache.camel.spring.CamelContextFactoryBean#initPropertyPlaceholder, which is called from afterPropertiesSet, overwrites the custom parser with the default parser from the properties component (on line 279).","mkhl1:1410760334:2014-09-15T13:52:14.306+0000:1410760334:2014-09-15T13:52:14.306+0000:Reproduction repository at https://github.com/ewerk/bug-report_camel-bridge-property-placeholder-parser

Run {{gradle test}} to reproduce, switch to branch ""split"" to see the workaround of using distinct property placeholders for Spring and Camel.
davsclaus:1423984815:2015-02-15T15:20:15.553+0000:1423984815:2015-02-15T15:20:15.553+0000:Thanks for reporting and the sample"
0,CAMEL-7820,Bug,Major,2.14.0,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Espen Tjonneland,3,1,2014-09-15 13:26:10+00:00,2014-11-30 14:27:23+00:00,"My project only has one Rest DSL route. 


If I add interceptFrom().stop() in the beginning of a my RouteDefinition file, no stop of that route occurs. In addition, if I add the interceptFrom().stop() after my rest dsl route is defined, no exception is thrown (as it should be). 


However, if I add another regular DSL, like: 


from(""timer://foo?fixedRate=true&period=10s"").log(""Hello world"") 


The interceptor is fired (and Exception is thrown if I move the interceptor below the route). 


Here is a snippet of the code (I have removed some details inside it, like just piping the rest call over to log hello, and removed the details for the servlet config part).



@Component 
@DependsOn(""camelConfig"") 
public class IncomingRestCalls extends RouteBuilder { 

    interceptFrom().id(""Logging interceptor"").bean(NISAccessLog.class); 

   restConfiguration()<more code here>......; 

        rest(NISConfig.API_VERSION_1 + ""/holdings"").description(""Holdings service "" +   NISConfig.API_VERSION_1) 
                .consumes(""application/json"").produces(""application/json"") 

                .get(""/{ID}"").description(""List the customers holdings for the given ID."").outTypeList( 
                InsuranceDTO.class).to(""log:hello""); 
}",
0,CAMEL-7819,Task,Major,2.15.0,,"
None
",Resolved,Later,None,Unassigned,Christian Müller,0,1,2014-09-14 13:18:18+00:00,2015-07-09 11:18:57+00:00,"After upgrading to Spring 4, the feature validation of camel-spring-ws is failing:



cmueller$ mvn install -Pvalidate
...
[WARNING] Failed to validate feature camel-spring-ws
[WARNING] No export found to match org.springframework.jms.listener;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-support/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.oxm;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-core/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.jms.core;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-support/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.web.util;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-core/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.jms;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-support/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.jms.support;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-support/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.web.context;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-core/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.web.servlet;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-core/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.oxm.mime;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-core/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.jms.support.destination;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-support/2.1.4.RELEASE)
[WARNING] No export found to match org.springframework.jms.connection;version=""[3.2.4, 4.0.0)"" (imported by mvn:org.springframework.ws/spring-ws-support/2.1.4.RELEASE)




Upgrading to version 2.2.0.RELEASE (which is using Spring 4) isn't an option at present, because it's not an OSGI bundle anymore and there is no OSGI bundle from the SMX guys at present:



cmueller$ mvn install -Pvalidate
...
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.3.7:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: mvn:org.springframework.ws/spring-xml/2.2.0.RELEASE is not an OSGi bundle -> [Help 1]",
0,CAMEL-7818,Task,Major,2.15.0,,"
None
",Resolved,Later,None,Unassigned,Christian Müller,0,2,2014-09-14 13:10:57+00:00,2015-07-09 11:18:42+00:00,"After upgrading to Spring 4, the feature validation of camel-spring-integration is failing:



mvn install -Pvalidate
...
WARNING] Failed to validate feature camel-spring-security
[WARNING] No export found to match org.springframework.security.ldap.authentication;version=""[3.2.5.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.web.filter;version=""[3.2.8.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-web/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.http;version=""[3.2.8.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-web/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.security.ldap;version=""[3.2.5.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.security.ldap.search;version=""[3.2.5.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.security.access.intercept.aspectj.aspect;version=""[3.2.5.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.security.ldap.server;version=""[3.2.5.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.web.servlet.config.annotation;version=""[3.2.8.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.web.accept;version=""[3.2.8.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.context.expression;version=""[3.2.8.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-core/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.security.ldap.userdetails;version=""[3.2.5.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[WARNING] No export found to match org.springframework.web.servlet.support;version=""[3.2.8.RELEASE, 3.3.0)"" (imported by mvn:org.springframework.security/spring-security-config/3.2.5.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------




The latest Spring Security version (3.2.5.RELEASE at present) is still using Spring 3.2.",davsclaus:1436411922:2015-07-09T11:18:42.779+0000:1436411922:2015-07-09T11:18:42.779+0000:Just create one ticket
0,CAMEL-7817,Task,Major,2.15.0,,"
None
",Resolved,Later,None,Unassigned,Christian Müller,0,2,2014-09-14 13:02:05+00:00,2015-07-09 11:19:51+00:00,"The feature validation of camel-spring-redis is failing:



cmueller$ mvn install -Pvalidate
...
[WARNING] Failed to validate feature camel-spring-redis
[WARNING] No export found to match org.springframework.dao;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.transaction.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.context;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.serializer.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.util;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.cache.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.io.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.beans;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.cache.transaction;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.beans.factory.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.io;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.convert.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.aop.framework;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.convert.converter;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.cglib.proxy;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.util.xml;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.beans.factory;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.task;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.beans.factory.config;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.cache;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.core.convert;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.beans.factory.xml;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)
[WARNING] No export found to match org.springframework.dao.support;version=""[3.2.9, 4.0.5)"" (imported by mvn:org.springframework.data/spring-data-redis/1.3.4.RELEASE)




Upgrading to version 1.4.0.RELEASE isn't an option at present, because it's not a valid OSGI bundle:



cmueller$ mvn install -Pvalidate
...
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.3.7:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: invalid version range: [4.0.6,4.0.6) -> [Help 1]",
0,CAMEL-7816,Task,Major,2.15.0,,"
None
",Resolved,Later,None,Unassigned,Christian Müller,0,1,2014-09-14 12:35:48+00:00,2015-07-09 11:19:38+00:00,"After upgrading to Spring 4, the feature validation of camel-spring-integration is failing:



cmueller$ mvn install -Pvalidate
...
[WARNING] Failed to validate feature camel-spring-integration
[WARNING] No export found to match org.springframework.expression;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.expression.spel;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.core.convert;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.expression.spel.standard;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.core.convert.converter;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.transaction;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.core.serializer;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.core.serializer.support;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.expression.common;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.core.convert.support;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.transaction.support;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.expression.spel.support;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.transaction.interceptor;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[WARNING] No export found to match org.springframework.context.expression;version=""[3.0.7, 4.0.0)"" (imported by mvn:org.springframework.integration/spring-integration-core/2.2.6.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------




Upgrading to version 4.0.4.RELEASE (which is using Spring 4) isn't an option at present, because it's not an OSGI bundle and there is no OSGI bundle from the SMX guys yet.",
0,CAMEL-7815,Task,Major,2.15.0,,"
None
",Resolved,Later,None,Unassigned,Christian Müller,0,1,2014-09-14 11:47:01+00:00,2015-07-09 11:19:24+00:00,"After upgrading to Spring 4, the feature validation of camel-spring-batch is failing:



cmueller$ mvn install -Pvalidate
...
[WARNING] Failed to validate feature camel-spring-batch
[WARNING] No export found to match org.springframework.core.serializer;version=""[3.1.2, 4.0.0)"" (imported by mvn:org.springframework.batch/spring-batch-core/2.2.7.RELEASE)
[WARNING] No export found to match org.springframework.core.convert.converter;version=""[3.1.2,4.0.0)"" (imported by mvn:org.springframework.batch/spring-batch-infrastructure/2.2.7.RELEASE)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------




Upgrading to version 3.0.1.RELEASE (which is using Spring 4) isn't an option at present, because it's not an OSGI bundle anymore and there is no OSGI bundle from the SMX guys at present:



cmueller$ mvn install -Pvalidate
...
[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.3.7:validate (validate) on project apache-camel: Unable to validate /Users/cmueller/workspaceCamel/camel/platforms/karaf/features/target/classes/features.xml: mvn:org.springframework.batch/spring-batch-core/3.0.1.RELEASE is not an OSGi bundle -> [Help 1]",
0,CAMEL-7814,Task,Major,"2.14.0, 2.15.0",None,"
None
",Resolved,Later,None,Unassigned,Christian Müller,0,1,2014-09-14 11:25:44+00:00,2015-07-09 11:19:11+00:00,"Feature validation of camel-olingo2 is failing:



mvn install -Pvalidate
...
[WARNING] Failed to validate feature camel-olingo2
[WARNING] No export found to match javax.ws.rs.ext;version=""[2.0,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.olingo-odata2-core/2.0.0_1)
[WARNING] No export found to match javax.ws.rs;version=""[2.0,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.olingo-odata2-core/2.0.0_1)
[WARNING] No export found to match javax.ws.rs.core;version=""[2.0,3)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.olingo-odata2-core/2.0.0_1)",
0,CAMEL-7813,Improvement,Minor,2.13.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Edward Ost,0,3,2014-09-14 02:28:11+00:00,2016-01-26 16:42:37+00:00,"When a JMS queue is used as a camel consumer for a route it may well be one of possibly many intermediate stops in a chain of processing.  If the previous processing step itself used Camel to route the message, then both the JMS replyTo and the camel-header JMSReplyTo will both be populated with the same value.  This will cause an infinite loop.


Of course, this is in some sense a developer error, but it is a pain to constantly add code to clear the camel JMSReplyTo header if it equals the destination.  This should probably be internal to the camel-jms component itself.","davsclaus:1426903424:2015-03-21T10:03:44.528+0000:1426903424:2015-03-21T10:03:44.528+0000:Yeah lets see if we can in the consumer detect if its destination is the same as a JMSReplyTo and then remove that header, as it would cause it to send it back to itself.

We could have a option to turn this off, if people are crazy and want to send it back to the same queue as a kinda while loop
ochiriac:1453797303:2016-01-26T16:35:03.309+0000:1453797757:2016-01-26T16:42:37.754+0000:Hello,

For some reasons I can see the issue is still in 2.16.1.
When Camel sends a reply it keeps JMSRepyTo/ReplyTo on the JMS Message.

Have to add though that I'm using the activemq component, version 5.12.1.
"
0,CAMEL-7812,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,1,2014-09-13 12:12:41+00:00,2017-02-26 08:33:32+00:00,"The browsable endpoint can only browse all the messages, but sometimes you want to access the index, so you can consume a specific message (maybe the first or last).


Though some components may have harder to support this like the JMS api.


So this should be some kind of optional extension to the api today.",
0,CAMEL-7811,Improvement,Minor,None,,"
None
",Closed,Invalid,None,Unassigned,Camel Guy,0,2,2014-09-12 21:19:35+00:00,2014-09-13 05:40:42+00:00,"Computing environments must promote decomposition if they are to withstand the ravages of time. It is very convenient in Camel to define routes as subroutines. As a particular route becomes reused often, and is even copy and pasted across camel projects (this happens especially when Spring DSL is used), perhaps the functionality should be refactored into a Java class (easy) or a Camel component (harder). But that is a different topic. Sometimes route reuse is preferred.


Again, routes are very convenient for encapsulating arbitrarily complex logic. However, the downside to factoring a Camel program into reusable routes is that it appears that one Java thread is dedicated to every route, even when they start with the ""Direct"" component, which is commonly advertised in Camel literature as being the most efficient way for a route to invoke another.


If it is true that every route that starts with the Direct component has its own thread, then these routes consume thread resources and are also expensive to invoke because calling across thread boundaries ultimately requires some form of synchronization.


I may be missing an important aspect of Camel messaging, such as in vs. in/out. I would like see Camel's architects discuss this topic so that I can learn the best way to build complex Camel programs. I wonder if the Direct component could be changed some day to merely be called in-thread without the additional overhead.","davsclaus:1410557988:2014-09-13T05:39:48.227+0000:1410557988:2014-09-13T05:39:48.227+0000:Use the user forum / mailing list for asking Camel questions
davsclaus:1410558042:2014-09-13T05:40:42.527+0000:1410558042:2014-09-13T05:40:42.527+0000:And btw you are wrong, direct does not have its own thread, it uses the caller thread, just like a direct method invocation in Java does - hence the name."
0,CAMEL-7810,Improvement,Major,2.13.2,"2.25.2, 3.4.0","
None
",Resolved,Fixed,"2.25.2, 3.4.0",Unassigned,K Smith,1,4,2014-09-12 19:44:23+00:00,2020-05-22 13:15:52+00:00,"Part 2 of CAMEL-6144


A similar Race condition happens when more than one Camel Aggregator(s) tries to update a row in the AGGREGATION table. This problem does not lead into any exceptions. But it leads into missing exchanges. Because both the Aggregator's are trying to update the same row in the AGGREGATION table, But one update is overwritten by other update, thus losing an exchange.


Simple example:



I'm awaiting completion based on counting 5 messages.
The current data in the aggregation table indicates 3 have been aggregated so far.
If I have either two threads or two process with a camel route that listens to a queue and then aggregates:
	
thread one gets the existing message from the aggregation table (#3)
thread two gets the existing message from the aggregation table (#3)
thread one aggregates and adds its message to the aggregation table (#4)
thread two does the same then I've lost the message from thread one





But there is no exception in this case – the optimistic lock is only on the message key, there's no versioning going on.","krsmes:1410522538:2014-09-12T19:48:58.559+0000:1410522538:2014-09-12T19:48:58.559+0000:I did find someone's implementation of an AggregationRepository that factors versioning in:
http://grepcode.com/file/repo1.maven.org/maven2/org.nhind/direct-msg-monitor/1.1/org/nhindirect/monitor/aggregator/repository/ConcurrentJPAAggregationRepository.java

bq. This specific implementation throws a Runtime exception on DAO errors. This implementation also checks for consistency/concurrency of the exchange. If the attempted exchange does match the latest and greatest exchange version, then an AggregationVersionException is wrapped by the runtime error. Routes using this repository should catch the AggregationVersionException and attempt to retry the exchange. If exception handling and redelivery is configured correctly, Camel should automatically reload the exchange from the latest version in the and attempt the aggregation process again.

This prevents dropping/losing messages like the current camel implementation JdbcAggregationRepository can when in a multithreaded or cluster environment.


krsmes:1410628734:2014-09-14T01:18:54.586+0000:1410628734:2014-09-14T01:18:54.586+0000:not quite sure how the current implementation of losing messages is not a bug, considering it claims to do optimistic locking
bendherville:1416456698:2014-11-20T12:11:38.793+0000:1416456698:2014-11-20T12:11:38.793+0000:This is a bit of a nasty one. I assumed, as it wasn't written anywhere, that enabling optimistic locking would prevent any race conditions from occurring. If we hadn't tested extensively we wouldn't have noticed it wasn't catching race conditions when doing updates which caused messages to be lost and aggregations to fail which would have cost us and potentially our customers financially.

It would be worth explaining the limits of optimistic locking in the current implementations of JdbcAggregationRepository and MemoryAggregationRepository in the documentation at least. Both implementations prevent multiple inserts and won't update if the key doesn't exist but neither prevent race conditions in concurrent updates. Neither are suitable for use where multiple threads (on a single server or distributed across servers) can process exchanges from the same aggregation group in parallel and message loss is a concern.

I have modified JdbcAggregationRepository to use a version in the DB for our project. I think this change is safe for general use so I'll submit it in a pull request soon.
westerg:1433910327:2015-06-10T12:25:27.900+0000:1433910993:2015-06-10T12:36:33.668+0000:Does anyone have a unit test that can reproduce this issue? We are experiencing a similar problem (silently dropped exchanges in a JdbcAggregationRepository), but we have not yet been able to reproduce it outside of production.

[~bendherville] did you ever submit your pull request?
bendherville:1433947648:2015-06-10T22:47:28.982+0000:1433947827:2015-06-10T22:50:27.075+0000:[~westerg] Sorry, I haven't as I need to find time to write tests and updated documentation for the changes.
Here's a gist of my changes -- [https://gist.github.com/bendherville/a223c58ebfc19ae15c70]
Note, you need to use the DB schema mentioned in the class javadoc.  

Also, if you're using aggregator with a JDBC repo in a clustered environment you'll likely hit CAMEL-4271 as well.  We've disabled aggregator recovery in our project until this is fixed. 
fvaleri:1590124552:2020-05-22T13:15:52.247+0000:1590124552:2020-05-22T13:15:52.247+0000:This is now fixed and works with every database. You can find [an example here|https://github.com/apache/camel-examples/tree/master/examples/camel-example-aggregate-dist]."
0,CAMEL-7809,Improvement,Major,2.13.1,"2.18.4, 2.19.0","
None
",Resolved,Fixed,"2.18.4, 2.19.0",Claus Ibsen,Steffen Ryll,1,4,2014-09-12 17:12:19+00:00,2017-03-28 09:48:04+00:00,"I tested the patch developed in CAMEL-7663 and ran into another issue that prevents the CamelContext from starting up. The setup is the same as described in CAMEL-7663.
Upon startup I get following exception from Quartz on at least one cluster node:



13:23:36|INFO |component.quartz2.QuartzComponent|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Shutting down scheduler. (will wait for all jobs to complete first.)
13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 shutting down.
13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 paused.
13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler unregistered from name 'quartz:type=QuartzScheduler,name=IPP_Integration_Scheduler-emerald-integration-web,instance=fra...1410348212901' in the local MBeanServer.
2014-09-10-13:23:36|INFO |quartz.core.QuartzScheduler|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Scheduler IPP_Integration_Scheduler-emerald-integration-web_$_fra...1410348212901 shutdown complete.
13:23:36|ERROR|component.servletlistener.CamelServletContextListener|[ACTIVE] ExecuteThread: '3' for queue: 'weblogic.kernel.Default (self-tuning)'|Error starting CamelContext.
org.quartz.ObjectAlreadyExistsException: Unable to store Trigger with name: 'scheduler.fax.in' and group: 'QuartzScheduledPollConsumerScheduler', because one already exists with this identification.
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeTrigger(JobStoreSupport.java:1179)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport$2.executeVoid(JobStoreSupport.java:1063)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3703)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3701)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3787)
	at org.quartz.impl.jdbcjobstore.JobStoreTX.executeInLock(JobStoreTX.java:93)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:1058)
	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886)
	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249)
	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler.doStart(QuartzScheduledPollConsumerScheduler.java:187)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:499)
	at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:640)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2042)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2336)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2272)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2202)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.component.servletlistener.CamelServletContextListener.contextInitialized(CamelServletContextListener.java:179)
	at weblogic.servlet.internal.EventsManager$FireContextListenerAction.run(EventsManager.java:661)
	at weblogic.security.acl.internal.AuthenticatedSubject.doAs(AuthenticatedSubject.java:321)
	at weblogic.security.service.SecurityManager.runAs(SecurityManager.java:120)
	at weblogic.servlet.provider.WlsSubjectHandle.run(WlsSubjectHandle.java:57)
	at weblogic.servlet.internal.EventsManager.executeContextListener(EventsManager.java:241)
	at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:198)
	at weblogic.servlet.internal.EventsManager.notifyContextCreatedEvent(EventsManager.java:183)
	at weblogic.servlet.internal.WebAppServletContext.preloadResources(WebAppServletContext.java:1783)
	at weblogic.servlet.internal.WebAppServletContext.start(WebAppServletContext.java:2807)
	at weblogic.servlet.internal.WebAppModule.startContexts(WebAppModule.java:1661)
	at weblogic.servlet.internal.WebAppModule.start(WebAppModule.java:822)
	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:360)
	at weblogic.application.internal.ExtensibleModuleWrapper$StartStateChange.next(ExtensibleModuleWrapper.java:356)
	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)
	at weblogic.application.internal.ExtensibleModuleWrapper.start(ExtensibleModuleWrapper.java:138)
	at weblogic.application.internal.flow.ModuleListenerInvoker.start(ModuleListenerInvoker.java:124)
	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:213)
	at weblogic.application.internal.flow.ModuleStateDriver$3.next(ModuleStateDriver.java:208)
	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)
	at weblogic.application.internal.flow.ModuleStateDriver.start(ModuleStateDriver.java:70)
	at weblogic.application.internal.flow.StartModulesFlow.activate(StartModulesFlow.java:24)
	at weblogic.application.internal.BaseDeployment$2.next(BaseDeployment.java:729)
	at weblogic.application.utils.StateMachineDriver.nextState(StateMachineDriver.java:42)
	at weblogic.application.internal.BaseDeployment.activate(BaseDeployment.java:258)
	at weblogic.application.internal.EarDeployment.activate(EarDeployment.java:61)
	at weblogic.application.internal.DeploymentStateChecker.activate(DeploymentStateChecker.java:165)
	at weblogic.deploy.internal.targetserver.AppContainerInvoker.activate(AppContainerInvoker.java:80)
	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.activate(AbstractOperation.java:586)
	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.activateDeployment(ActivateOperation.java:148)
	at weblogic.deploy.internal.targetserver.operations.ActivateOperation.doCommit(ActivateOperation.java:114)
	at weblogic.deploy.internal.targetserver.operations.StartOperation.doCommit(StartOperation.java:151)
	at weblogic.deploy.internal.targetserver.operations.AbstractOperation.commit(AbstractOperation.java:339)
	at weblogic.deploy.internal.targetserver.DeploymentManager.handleDeploymentCommit(DeploymentManager.java:846)
	at weblogic.deploy.internal.targetserver.DeploymentManager.activateDeploymentList(DeploymentManager.java:1275)
	at weblogic.deploy.internal.targetserver.DeploymentManager.handleCommit(DeploymentManager.java:442)
	at weblogic.deploy.internal.targetserver.DeploymentServiceDispatcher.commit(DeploymentServiceDispatcher.java:176)
	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.doCommitCallback(DeploymentReceiverCallbackDeliverer.java:195)
	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer.access$100(DeploymentReceiverCallbackDeliverer.java:13)
	at weblogic.deploy.service.internal.targetserver.DeploymentReceiverCallbackDeliverer$2.run(DeploymentReceiverCallbackDeliverer.java:68)
	at weblogic.work.SelfTuningWorkManagerImpl$WorkAdapterImpl.run(SelfTuningWorkManagerImpl.java:550)
	at weblogic.work.ExecuteThread.execute(ExecuteThread.java:295)
	at weblogic.work.ExecuteThread.run(ExecuteThread.java:254)




I have started working on a fix that adopt the approach for clustering found in QuartzEndpoint to QuartzSchedulerPollConsumerScheduler.


The patch is attached and I am asking for feedback.","steffen.ryll:1410513263:2014-09-12T17:14:23.503+0000:1410513263:2014-09-12T17:14:23.503+0000:I am also looking to transfer the changes from my local dev environment to a GitHub fork and post a pull request. I'm just not quite there with migrating the changes to git.
steffen.ryll:1410513598:2014-09-12T17:19:58.964+0000:1410513598:2014-09-12T17:19:58.964+0000:Ahem, I have to admit that the patch is not yet tested. I could not get hold of the test environment yet...
davsclaus:1436482894:2015-07-10T07:01:34.018+0000:1436482894:2015-07-10T07:01:34.018+0000:Can you try with latest code, we have done changes since and this ticket is a bit old now
steffen.ryll:1436831771:2015-07-14T07:56:11.333+0000:1436831771:2015-07-14T07:56:11.333+0000:Ok, thanks for your efforts and the heads-up, will do. I'm afraid I won't get to it before my summer vacation. 
Expect to hear from me in August.
davsclaus:1437444299:2015-07-21T10:04:59.154+0000:1437444299:2015-07-21T10:04:59.154+0000:Thanks Steffen. Looking forward to hear from you when you get back from vacation.
davsclaus:1461580653:2016-04-25T18:37:33.003+0000:1461580653:2016-04-25T18:37:33.003+0000:I assume you never got the time to work on your patch?
etienne.dethoor@gmail.com:1487147312:2017-02-15T16:28:32.657+0000:1487147632:2017-02-15T16:33:52.555+0000:I encounter the same bug when i want to consume files in a folder with the {{file2}} component in association with {{QuartzScheduledPollConsumerScheduler}} to ensure the execution is fire on one node of our cluster.

When i restart my application, Camel Quartez try to create again the job.
githubbot:1490587357:2017-03-27T12:02:37.446+0000:1490587357:2017-03-27T12:02:37.446+0000:GitHub user edethoor opened a pull request:

    https://github.com/apache/camel/pull/1577

    CAMEL-7809 : Quartz PollConsumerScheduler in a cluster tries to create duplicate triggers, fails

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/edethoor/camel CAMEL-7809

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1577.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1577
    
----
commit bb6b9f9cab25518f56fdfb4ed33fbb2306e49751
Author: [a556724] etienne dethoor <etienne.dethoor@atos.net>
Date:   2017-03-27T11:55:06Z

    CAMEL-7809 : Quartz PollConsumerScheduler in a cluster tries to create duplicate triggers, fails

----

githubbot:1490592207:2017-03-27T13:23:27.689+0000:1490592207:2017-03-27T13:23:27.689+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/1577

davsclaus:1490592219:2017-03-27T13:23:39.511+0000:1490592219:2017-03-27T13:23:39.511+0000:Thanks for the PR
githubbot:1490662540:2017-03-28T08:55:40.894+0000:1490662540:2017-03-28T08:55:40.894+0000:GitHub user driseley opened a pull request:

    https://github.com/apache/camel/pull/1579

    CAMEL-7809: Ensure the cron schedule is updated when the job is rescheduled

    The previous fix does not allow the Cron Schedule to be modified after initial creation.
    
    This reschedules to the trigger to the latest schedule.
    
    See: http://www.quartz-scheduler.org/documentation/quartz-2.x/cookbook/UpdateTrigger.html

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/driseley/camel CAMEL-7809

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1579.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1579
    
----
commit e25aa9d4ccd90719c95f869d49d5ab7d3bd58a69
Author: David Riseley <dave@openanswers.co.uk>
Date:   2017-03-28T08:52:53Z

    CAMEL-7809: Ensure the cron schedule is updated when the job is rescheduled

----

githubbot:1490665684:2017-03-28T09:48:04.168+0000:1490665684:2017-03-28T09:48:04.168+0000:Github user driseley closed the pull request at:

    https://github.com/apache/camel/pull/1579
"
0,CAMEL-7808,New Feature,Minor,2.14.0,None,"
None
",Resolved,Fixed,2.16.0,Willem Jiang,Gareth Healy,1,5,2014-09-12 09:10:49+00:00,2015-03-31 06:05:43+00:00,"I have been playing around the Boon (http://richardhightower.github.io/site/Boon/Welcome.html) and decided to write a data formatter for the JSON side.


Repo: https://github.com/garethahealy/camel-boon


This is my first contribution, so be interesting to see if this is needed/wanted/etc","garethahealy:1410484364:2014-09-12T09:12:44.017+0000:1410484364:2014-09-12T09:12:44.017+0000:Currently, the component is very simple. The only known issue i have to work is on that the Boon jar is not OSGi'ed - i.e.: the manifest doesnt include versions in its export/import
davsclaus:1410558188:2014-09-13T05:43:08.117+0000:1410558188:2014-09-13T05:43:08.117+0000:Thanks keep on hacking on the component until you think its more ready.

Also mind we need documentation, so consider writing that also now, such as in your readme.md, then we can transfer that to the Camel wiki documentation when we add the component to Camel.

And there is this guide if you have not seen it before
http://camel.apache.org/add-new-component-guide.html
davsclaus:1423194168:2015-02-06T11:42:48.522+0000:1423194168:2015-02-06T11:42:48.522+0000:Hi

Any update on this, is the component ready? And if you need an OSGi bundle, then log a ticket at
https://issues.apache.org/jira/browse/SMX4
garethahealy:1423283128:2015-02-07T12:25:28.879+0000:1423283128:2015-02-07T12:25:28.879+0000:Hi [~davsclaus],

Sorry for this taking so long. Have had little time to complete.

I got some time yesterday to create a pull-request for boon, to make it OSGi'ed, so waiting on that being accepted. I should have more time this week as well to complete the other tasks, i.e.: features file, docs etc

Sorry again for the delay.
davsclaus:1424570451:2015-02-22T10:00:51.798+0000:1424570451:2015-02-22T10:00:51.798+0000:Hi

Did the osgi change get accepted and how does it go? 

As we are closing down on the 2.15 release we may have to slip this for 2.16
garethahealy:1425882537:2015-03-09T14:28:57.153+0000:1425882537:2015-03-09T14:28:57.153+0000:Hi,

Have committed changes to my forked repo @ https://github.com/garethahealy/camel/commit/cfccf4cd6a14957721f17e5c9db4fdb854bf4d97

Am i missing anything before i create a PR?

Cheers.
njiang:1425921973:2015-03-10T01:26:13.898+0000:1425921973:2015-03-10T01:26:13.898+0000:Hi Gareth,

I can see boon already accepted your PR[1] and release a new version of it. 
Please sent out a PR for the camel-boon component, I will help you merge it into the master.

[1]https://github.com/boonproject/boon/commit/c59fc76991e7201fde2ef4cdae34415ddbd641cf

Regards,

Willem
githubbot:1425952830:2015-03-10T10:00:30.279+0000:1425952830:2015-03-10T10:00:30.279+0000:GitHub user garethahealy opened a pull request:

    https://github.com/apache/camel/pull/432

    CAMEL-7808 - Added version 1 of camel-boon

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/garethahealy/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/432.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #432
    
----
commit cfccf4cd6a14957721f17e5c9db4fdb854bf4d97
Author: Gareth Healy <garethahealy@gmail.com>
Date:   2015-03-09T14:27:05Z

    CAMEL-7808 - Added version 1 of camel-boon

----

njiang:1426044522:2015-03-11T11:28:42.889+0000:1426044522:2015-03-11T11:28:42.889+0000:Hi Gareth,

Merged the patch into camel master branch.
Do you mind add a new page in [data-format|https://camel.apache.org/data-format.html] for it ?

Regards,

Willem
githubbot:1426664072:2015-03-18T15:34:32.263+0000:1426664072:2015-03-18T15:34:32.263+0000:Github user garethahealy closed the pull request at:

    https://github.com/apache/camel/pull/432

garethahealy:1427702322:2015-03-30T15:58:42.807+0000:1427702322:2015-03-30T15:58:42.807+0000:Add docs @ https://cwiki.apache.org/confluence/display/CAMEL/Boon
davsclaus:1427753143:2015-03-31T06:05:43.401+0000:1427753143:2015-03-31T06:05:43.401+0000:Thanks for the docs"
0,CAMEL-7807,Task,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Willem Jiang,0,1,2014-09-12 06:46:26+00:00,2014-09-16 12:01:51+00:00,"Camel 2.14-SNAPSHOT already supports Spring 4.0.x, and camel-spring-test only support Spring 4.0.x. It's time to change the default spring version to 4.0.x.",
0,CAMEL-7806,Bug,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-09-11 19:53:12+00:00,2014-09-13 05:46:47+00:00,"Olingo2 component had an underlying assumption that all entity sets for an OData service would be in its default entity container. But designating containers as default is optional in OData. 
So the component needs to account for fully qualified resource paths like entity-container.entity-set","dhirajsb:1410440524:2014-09-11T21:02:04.380+0000:1410440524:2014-09-11T21:02:04.380+0000:Fix committed to master branch

https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=56615ec332f51899eb6fc17e47dae4c67c6a887f"
0,CAMEL-7805,Bug,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-09-11 19:10:16+00:00,2014-09-13 05:46:37+00:00,"Olingo2 component doesn't set HttpHeaders property from configuration on its API proxy, which ignores any custom HTTP headers altogether.","dhirajsb:1410440481:2014-09-11T21:01:21.050+0000:1410440481:2014-09-11T21:01:21.050+0000:Fix committed to master branch
https://git-wip-us.apache.org/repos/asf/camel/repo?p=camel.git;a=commit;h=6984401aad894c4cd4bbfbaddd263e920a9ee3ae"
0,CAMEL-7804,Improvement,Minor,None,"2.12.5, 2.13.3, 2.14.0, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0, 2.15.0",Claus Ibsen,Claus Ibsen,0,1,2014-09-11 16:58:51+00:00,2014-09-12 05:32:39+00:00,"For example if creating some exception to be logged and the message payload causes some problem, like OOME etc, then we should be resilient to this so the caused exception can be created and logged.



Caused by: java.lang.OutOfMemoryError: Java heap space
    at java.util.Arrays.copyOf(Arrays.java:2367)
    at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:130)
    at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:114)
    at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:415)
    at java.lang.StringBuilder.append(StringBuilder.java:132)
    at java.lang.StringBuilder.append(StringBuilder.java:128)
    at java.util.AbstractMap.toString(AbstractMap.java:523)
    at java.lang.String.valueOf(String.java:2854)
    at java.lang.StringBuilder.append(StringBuilder.java:128)
    at java.util.AbstractMap.toString(AbstractMap.java:523)
    at java.lang.String.valueOf(String.java:2854)
    at java.lang.StringBuilder.append(StringBuilder.java:128)
    at org.apache.camel.processor.DefaultExchangeFormatter.format(DefaultExchangeFormatter.java:99)
    at org.apache.camel.util.MessageHelper.doDumpMessageHistoryStacktrace(MessageHelper.java:475)
    at org.apache.camel.util.MessageHelper.dumpMessageHistoryStacktrace(MessageHelper.java:425)
    at org.apache.camel.processor.RedeliveryErrorHandler.logFailedDelivery(RedeliveryErrorHandler.java:990)",davsclaus:1410426118:2014-09-11T17:01:58.465+0000:1410426118:2014-09-11T17:01:58.465+0000:Need to be merged to 2.14.x branch when its created
0,CAMEL-7803,Bug,Major,2.13.2,"2.12.5, 2.13.3, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.1, 2.15.0",Willem Jiang,Nathan Wray,0,4,2014-09-11 12:53:01+00:00,2014-11-11 01:29:55+00:00,"The iterator returned by createPopulateIterator in DefaultJdbcPrepareStatementStrategy incorrectly uses a next value of ""null"" to identify when it has run out of parameters.  This fails when the parameter map intentionally contains a name with a null value, which is the case when some columns in an insert should be set to null.  The attached pull request adds an explicit preFetch flag and relies on the done flag, avoiding the incorrect overloading of (next==null) to indicate completion.


The iterator reports ""hasNext() == false"" when it encounters a map value of null.  This happens when using the map header JDBC_PARAMETERS = ""CamelJdbcParameters"" to insert null values with a prepared statement.  The Iterator ends prematurely when it reaches a parameter name with a null value.  


For example, passing in a map where the 3rd parameter of 19 has a value of null causes the following exception to be thrown:


java.sql.SQLException: Number of parameters mismatch. Expected: 19, was:2
        at org.apache.camel.component.jdbc.DefaultJdbcPrepareStatementStrategy.populateStatement(DefaultJdbcPrepareStatementStrategy.java:137)
        at org.apache.camel.component.jdbc.JdbcProducer.doCreateAndExecuteSqlStatementWithHeaders(JdbcProducer.java:133)
        at org.apache.camel.component.jdbc.JdbcProducer.createAndExecuteSqlStatement(JdbcProducer.java:116)
        at org.apache.camel.component.jdbc.JdbcProducer.processingSqlBySettingAutoCommit(JdbcProducer.java:85)","nathanwray:1410412623:2014-09-11T13:17:03.132+0000:1410412623:2014-09-11T13:17:03.132+0000:Patch added new boolean flag ""preFetched"" that replaces the (next==null) test.  this allows names with null values to succeed.
githubbot:1410422263:2014-09-11T15:57:43.791+0000:1410422263:2014-09-11T15:57:43.791+0000:GitHub user nathanwray opened a pull request:

    https://github.com/apache/camel/pull/265

    CAMEL-7803

     Patch added new boolean flag ""preFetched"" to allow inserts with parameters that have null values

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nathanwray/camel patch-1

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/265.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #265
    
----
commit 693fea2b3cee7be931b4bcfd92726e75f782adf9
Author: nathanwray <nathanwray@users.noreply.github.com>
Date:   2014-09-11T15:57:09Z

    CAMEL-7803
    
     Patch added new boolean flag ""preFetched"" to allow inserts with parameters that have null values

----

nathanwray:1410422390:2014-09-11T15:59:50.928+0000:1410422390:2014-09-11T15:59:50.928+0000:Created pull request https://github.com/apache/camel/pull/265

njiang:1410844153:2014-09-16T13:09:13.032+0000:1410844153:2014-09-16T13:09:13.032+0000:Applied the patch into master, camel-2.14.x, camel-2.13.x and camel-2.12.x with thanks to Nathan.
githubbot:1410844951:2014-09-16T13:22:31.865+0000:1410844951:2014-09-16T13:22:31.865+0000:Github user nathanwray closed the pull request at:

    https://github.com/apache/camel/pull/265

camelguy:1415626026:2014-11-10T21:27:06.823+0000:1415626026:2014-11-10T21:27:06.823+0000:I appreciate that this is fixed. I spent the past 48 hours trying to figure this out. Eventually I found this JIRA and switched to 2.14.1-SNAPSHOT. When will 2.14.1 be released? I'm OK but I thought I would add my two cents about the severity of this problem especially for newbies. This was a killer as the error message implies that it's user error.
njiang:1415640573:2014-11-11T01:29:33.355+0000:1415640595:2014-11-11T01:29:55.365+0000:As we target Camel 2.14.1 release at the end of this year, I suggest you to use the Camel 2.13.3 if you are not using any new Camel components of 2.14.0."
0,CAMEL-7802,Improvement,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Willem Jiang,Franz Forsthofer,0,2,2014-09-11 12:10:42+00:00,2014-09-19 11:23:10+00:00,"Two  improvements for the xmlsec component concerning the XML Signature signer and verifier:



The output character encoding for the signer and verifier (if no character encoding is specified UTF-8 will be used as before) can be specified via the configuration parameter 'outputXmlEncoding'.
In the Enveloped XML Signature case, the parent node can be now specified via an XPATH expression (new parameter 'parentXpath'). This allows selecting the parent node in a more flexible way as before where the parent node was specified via local name and namespace.","forsthofer:1410410654:2014-09-11T12:44:14.256+0000:1410410654:2014-09-11T12:44:14.256+0000:I can update the wiki after the patch was applied.
njiang:1410841357:2014-09-16T12:22:37.010+0000:1410841357:2014-09-16T12:22:37.010+0000:Applied the patch with thanks to Franz.
forsthofer:1410995055:2014-09-18T07:04:15.923+0000:1410995055:2014-09-18T07:04:15.923+0000:Hi Willem, 
I updated the wiki. See https://cwiki.apache.org/confluence/display/CAMEL/XML+Security+component
I think this item can be closed now. 
Regards Franz"
0,CAMEL-7801,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Akitoshi Yoshida,Akitoshi Yoshida,0,1,2014-09-11 08:51:33+00:00,2014-09-12 00:35:49+00:00,"XMLTokenizer's wrapped mode used with grouping does not generate reasonable results from most user's point of view. 


More concretely speaking, Its wrapped mode generates a sequence of tokens, each token element wrapped in its context elements (i.e., the parent elements). This is appropriate when no grouping is used. However, with grouping used, it results in a token consisting of a group of such context-wrapped tokens. A more intuitive and user-friendly result would be to have a token consisting of the original token elements wrapped in their common context elements. In other words, a token must consist of multiple token elements in their common wrapped context.",
0,CAMEL-7800,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,3,2014-09-11 05:44:14+00:00,2015-09-24 13:42:44+00:00,"We should upgrade swagger to their release that is pure java based, that is named 1.5 or something, but is not ready yet","davsclaus:1436933447:2015-07-15T12:10:47.233+0000:1436933447:2015-07-15T12:10:47.233+0000:swagger 1.5 has been released which is Java based
ay:1442539723:2015-09-18T09:28:43.901+0000:1442539723:2015-09-18T09:28:43.901+0000:Hi Claus,
for OSGI support, if we can wait for 1.5.4, that will make life easier (not needing to create a SMX bundle version of swagger-core-1.5.3.jar).
Do you think we need to get swagger-1.5.4 out before releasing camel-2.16.0 or can use swagger-1.5.3 for the moment without osgi-support and go for swagger-1.5.4 in camel-2.16.1? I really like to have swagger-1.5.4 out soon but I don't know when this will happen. I'll ask at their ML again.
In CXF 3.x, we are using optionally swagger-1.5.3 in cxf-rt-rs-service-description but its OSGi sample currently uses 1.5.4-SNAPSHOT.
regards, aki
davsclaus:1442540188:2015-09-18T09:36:28.652+0000:1442540188:2015-09-18T09:36:28.652+0000:Well if the swagger team release it before us, then sure we will use latest release - using 1.5.3 now.

OSGi should not hold back a Camel release, today camel-swagger with scala dont work in osgi either (unless you do some hard work and maybe get some parts of it working).

An we can upgrade to 1.5.4 in a patch release etc.
davsclaus:1442555544:2015-09-18T13:52:24.110+0000:1442555544:2015-09-18T13:52:24.110+0000:Okay got the model parser up and going so it can generate a spec 2 json for the rest-dsl.

There is an outstanding to have the cors filter enabled if you turn cors=true.
davsclaus:1442562455:2015-09-18T15:47:35.234+0000:1442562455:2015-09-18T15:47:35.234+0000:The cors filter is now also included, and I pushed the code to the master branch
davsclaus:1442562490:2015-09-18T15:48:10.725+0000:1442562490:2015-09-18T15:48:10.725+0000:The module is named camel-swagger-java. 

I wonder if we should keep the scala based around or kick it out? It could be deprecated and then removed in a future release.
davsclaus:1443073364:2015-09-24T13:42:44.401+0000:1443073364:2015-09-24T13:42:44.401+0000:[~ay] do you know if swagger java 1.5.4 onwards is OSGi bundle out of the box?"
0,CAMEL-7799,Task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-09-10 07:57:54+00:00,2014-09-10 13:20:59+00:00,We need to update some options to reflect the API change.,njiang:1410326459:2014-09-10T13:20:59.703+0000:1410326459:2014-09-10T13:20:59.703+0000:Applied the patch into camel master branch.
0,CAMEL-7798,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Raúl Kripalani,Raúl Kripalani,0,1,2014-09-09 17:17:34+00:00,2014-09-10 13:43:36+00:00,"Currently configuring a custom ExchangeFormatter at the Log Component level may lead to incoherent results if there are multiple Log endpoints in the context, with different log options (e.g. showBody=true, showBody=false).


This is because the component looks up the ExchangeFormatter in the registry, sets its properties and then remembers the result for the subsequent endpoint initialisations. This is incorrect.


The correct procedure is:



Look up the ExchangeFormatter each time, obtaining a new fresh copy each time. This can be ensured by using @scope=prototype in Spring/Blueprint in the bean definition.
Set its properties, according to the current endpoint's properties.
Use the resulting ExchangeFormatter for that endpoint only.
Subsequent endpoint initialisations must repeat the same procedure.",
0,CAMEL-7797,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Raúl Kripalani,Raúl Kripalani,0,1,2014-09-09 16:57:16+00:00,2014-09-09 16:58:37+00:00,"Code already pushed. Creating this ticket for change tracking purposes – so that it appears on release notes.


DefaultCxfRsBinding is using the wrong directionality when applying the header filter strategy. The method copyProtocolHeaders is used when turning an incoming CXF payload into a Camel exchange/message. 


However, it was calling the Header Filter Strategy's applyFilterToCamelHeaders instead of applyFilterToExternalHeaders.","raulvk:1410253111:2014-09-09T16:58:31.407+0000:1410253111:2014-09-09T16:58:31.407+0000:Fixed in commits:

* 2.14.x (current master branch) => c047e25.
* 2.13.x => 5a05109.
* 2.12.x => bef79b5."
0,CAMEL-7796,Improvement,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Raúl Kripalani,Raúl Kripalani,0,1,2014-09-09 13:59:21+00:00,2014-09-09 14:55:21+00:00,No Desc,"raulvk:1410245721:2014-09-09T14:55:21.334+0000:1410245721:2014-09-09T14:55:21.334+0000:Added new option ""Custom"" to bindingStyle option + the ability to specify a custom binding."
0,CAMEL-7795,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Raúl Kripalani,Raúl Kripalani,0,2,2014-09-09 12:50:12+00:00,2014-09-09 13:08:25+00:00,"CAMEL-6377 introduced some optimisations in the MDC Logging mechanism which make it lose MDC values when the async routing engine is used.


If we are using an async component such as CXF, the response or done() callback will be issued from a thread NOT managed by Camel. Therefore, we need the MDCCallback to reset ALL MDC values, not just the routeId (as was intended by the commits that caused the regression).


The situation may be salvaged by the fact that underlying MDC implementations use an InheritableThreadLocal, so the first requests after system initialisation may see correct behaviour, because the MDC values from the requesting thread is propagated to the newly initialised threads in the underlying stack's ThreadPool, as the coreThreads are being initialised within the context of the original threads which act like parent threads.


But after those first attempts, odd behaviour is seen and all responses from the async endpoint come back without an MDC.",
0,CAMEL-7794,Improvement,Major,2.13.2,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Juan Vazquez,1,2,2014-09-09 11:14:04+00:00,2014-12-17 10:09:26+00:00,"As discussed in developer mailing list [1], we needed to add support for Hazelcast distributed topics in Camel. We provide a PR that addresses this [2].


[1] http://camel.465427.n5.nabble.com/Topics-support-in-camel-hazelcast-td5756233.html
[2] https://github.com/apache/camel/pull/263","davsclaus:1417604310:2014-12-03T18:58:30.213+0000:1417604310:2014-12-03T18:58:30.213+0000:Thanks for the PR, do you mind helping with the documentation of this functionality?
http://camel.apache.org/hazelcast-component.html
jvazquez:1417676979:2014-12-04T15:09:39.694+0000:1417676979:2014-12-04T15:09:39.694+0000:Of course. My username is 'jvazquez' and I already have a CLA accepted. Would you mind giving me permission to edit the documentation?. Thanks.
davsclaus:1417677121:2014-12-04T15:12:01.858+0000:1417677121:2014-12-04T15:12:01.858+0000:Just granted your user karma. 

Thanks for helping.
davsclaus:1418772027:2014-12-17T07:20:27.087+0000:1418772027:2014-12-17T07:20:27.087+0000:Did you have a chance to update the documentation?
jvazquez:1418781543:2014-12-17T09:59:03.743+0000:1418781543:2014-12-17T09:59:03.743+0000:Documentation updated. Sorry for the delay. If everything is ok, please feel free to close the issue. Thanks!.
davsclaus:1418782166:2014-12-17T10:09:26.051+0000:1418782166:2014-12-17T10:09:26.051+0000:Thanks"
0,CAMEL-7763,Bug,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Henryk Konsek,Henryk Konsek,0,1,2014-08-29 13:58:50+00:00,2014-08-29 14:05:35+00:00,"Currently NettyServerBootstrapConfiguration doesn't provide default values of keyStoreFormat and securityProvider options. This is not in sync with description of these options in Netty doc (1).


For example the following configuration:



<bean id=""httpsConfiguration"" class=""org.apache.camel.component.netty.http.NettySharedHttpServerBootstrapConfiguration"">
  <property name=""port"" value=""10020""/>
  <property name=""host"" value=""0.0.0.0""/>
  <property name=""keyStoreResource"" value=""jsse/localhost.ks""/>
  <property name=""trustStoreResource"" value=""jsse/localhost.ks""/>
  <property name=""passphrase"" value=""changeit""/>
</bean>	 




...won't work until I add keyStoreFormat and securityProvider explicitly to it:



  <property name=""keyStoreFormat"" value=""JKS""/>
  <property name=""securityProvider"" value=""SunX509""/>




Solution:


We should add keyStoreFormat=JKS and securityProvider=SunX509 defaults to the NettyServerBootstrapConfiguration.


(1) http://camel.apache.org/netty.html",hekonsek:1409292335:2014-08-29T14:05:35.095+0000:1409292335:2014-08-29T14:05:35.095+0000:Resolved in 9430e4d55ae7e91f46c70d7969156767a5f42da4.
0,CAMEL-7762,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-08-29 09:05:34+00:00,2014-08-30 06:55:31+00:00,"When using Camel CXF in PAYLOAD mode.If the client sends a SOAP request with body having no namespace prefix. The element which get for the Payload body has an attribute ""xmlns:xmlns"".


You can find more information in the stack overflow site",
0,CAMEL-7761,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-08-28 12:16:31+00:00,2014-08-29 05:07:49+00:00,We need to set the application context classloader with the bundle classloader when creating the OSGiDefaultCamelContext.,njiang:1409260069:2014-08-29T05:07:49.659+0000:1409260069:2014-08-29T05:07:49.659+0000:Applied the patch into camel master branch.
0,CAMEL-7760,Bug,Minor,2.13.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Markus Eisele,4,4,2014-08-28 11:06:43+00:00,2015-11-20 18:10:35+00:00,"Trying to bootstrap camel in a @singleton @startup bean with enabled CDI leads to a deployment exception.


 Ambiguous dependencies for type CdiCamelContext with qualifiers @Default



org.apache.camel.cdi.internal.CamelContextBean@35921a07,
Managed Bean [class org.apache.camel.cdi.CdiCamelContext] with qualifiers [@Any @Default]



The only way to workaround this, is to implement a custom Cdi-Extension to veto the bean in question.


Here is a demo-app: https://github.com/myfear/CamelEE7/
(including workaround)


The deployment exception:
https://gist.github.com/myfear/40bfc75c292dafa7ba64


This should be solved in order to make it easier to use Camel on EE servers with CDI integration.","davsclaus:1425086411:2015-02-28T09:20:11.274+0000:1425086411:2015-02-28T09:20:11.274+0000:An improved camel-cdi is in the works to be contributed for Camel 2.16
https://github.com/astefanutti/camel-cdi/issues/7#issuecomment-75986058
davsclaus:1436411279:2015-07-09T11:07:59.401+0000:1436411279:2015-07-09T11:07:59.401+0000:Works fine now - tried without that veto in wildfly 9"
0,CAMEL-7759,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,2,2014-08-28 07:09:34+00:00,2015-02-13 10:12:38+00:00,"Normally, we just the set the TCCL with the classloader which we want to use to load the application, as camel always try to setup the right ApplicationContextClassLoader with Spring or Blueprint, it should be OK if we use the TCCL as the default value of camel ApplicationContextClassLoader.","njiang:1409260042:2014-08-29T05:07:22.581+0000:1409260042:2014-08-29T05:07:22.581+0000:Applied the patch into camel master branch.
tdiesler:1423793455:2015-02-13T10:10:55.940+0000:1423793455:2015-02-13T10:10:55.940+0000:This would bind the ApplicationContextClassLoader to the TCCL of the thread that happens to call CamelContext.start(). IHMO, this is unlikely to be correct."
0,CAMEL-7758,Bug,Major,None,"2.13.2, 2.14.0","
None
",Resolved,Duplicate,"2.13.2, 2.14.0",Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,1,2014-08-28 05:37:59+00:00,2014-09-16 12:00:07+00:00,"In order to easily register startup services in end user Camel Test Blueprint, the asService() method should be protected (instead of default).",
0,CAMEL-7757,Bug,Major,2.13.1,"2.12.5, 2.13.3, 2.14.0","

patch

",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Sandeep Poreddy,0,2,2014-08-27 12:00:42+00:00,2015-07-08 07:53:03+00:00,Please refer to : http://camel.465427.n5.nabble.com/Came-2-13-1-Reading-ZipInputStream-EOFException-tt5755726.html,"sandeepreddip:1409114176:2014-08-27T12:36:16.443+0000:1409114176:2014-08-27T12:36:16.443+0000:Patch for the fix.
njiang:1409259932:2014-08-29T05:05:32.908+0000:1409259932:2014-08-29T05:05:32.908+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Sandeep."
0,CAMEL-7756,Test,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,3,2014-08-27 10:53:13+00:00,2014-08-27 12:40:16+00:00,"This test fails intermittently with the error below as it is using MockEndpoint.expectedBodiesReceived() even though it uses parallelProcessing() in the route.  The test should use MockEndpoint.expectedBodiesReceivedInAnyOrder() instead


java.lang.AssertionError: mock://complete Body of message: 0. Expected: <finish> but was: <stop>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint$5.run(MockEndpoint.java:628)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:394)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)
	at org.apache.camel.ContextTestSupport.assertMockEndpointsSatisfied(ContextTestSupport.java:343)
	at org.apache.camel.issues.OnCompletionIssueTest.testOnCompletionIssue(OnCompletionIssueTest.java:39)","githubbot:1409108415:2014-08-27T11:00:15.241+0000:1409108415:2014-08-27T11:00:15.241+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/255

    Fix for CAMEL-7756 OnCompletionIssueTest fails because of order dependen...

    ...cy

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7756

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/255.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #255
    
----
commit 2d7a2194c80fe7ffcd094b5cc343fd21104270d1
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-08-27T10:58:38Z

    Fix for CAMEL-7756 OnCompletionIssueTest fails because of order dependency

----

githubbot:1409113949:2014-08-27T12:32:29.636+0000:1409113949:2014-08-27T12:32:29.636+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/255

davsclaus:1409114416:2014-08-27T12:40:16.461+0000:1409114416:2014-08-27T12:40:16.461+0000:Thanks"
0,CAMEL-7755,Task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Guillaume Nodet,Guillaume Nodet,0,4,2014-08-27 10:16:07+00:00,2014-09-07 06:33:11+00:00,"There are some feature tests are failed.



Failed tests:
  CamelDisruptorTest.test:30->AbstractFeatureTest.testComponent:69 Cannot get component with name: disruptor
  CamelHbaseTest.test:32->AbstractFeatureTest.testComponent:69 Cannot get component with name: hbase
  CamelInfinispanTest.test:31->AbstractFeatureTest.testComponent:69 Cannot get component with name: infinispan
  CamelKafkaTest.test:32->AbstractFeatureTest.testComponent:69 Cannot get component with name: kafka
  CamelOptaplannerTest.test:32->AbstractFeatureTest.testComponent:69 Cannot get component with name: optaplanner
  CamelSolrTest.test:32->AbstractFeatureTest.testComponent:69 Cannot get component with name: solr
  CamelSpringRedisTest.test:32->AbstractFeatureTest.testComponent:69 Cannot get component with name: spring-redis

Tests in error:
  CamelAvroTest.test:38->AbstractFeatureTest.testDataFormat:91 ? IllegalArgument","njiang:1409271841:2014-08-29T08:24:01.004+0000:1409271841:2014-08-29T08:24:01.004+0000:Fixed the feature install error of camel-optaplanner, camel-kafka.

For the camel-avro, camel-solr, camel-habase, I hit a issue of snappy-java.  It can be addressed by applying a fix as [this|https://groups.google.com/forum/#!topic/orient-database/gk0OHfPCYXQ] suggested in mac OSX.
{code}
Caused by: org.osgi.framework.BundleException: Activator start error in bundle org.xerial.snappy.snappy-java [225].
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:2027)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.Felix.startBundle(Felix.java:1895)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:944)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.felix.framework.BundleImpl.start(BundleImpl.java:931)[org.apache.felix.framework-4.0.3.jar:]
	at org.apache.karaf.features.internal.FeaturesServiceImpl.installFeatures(FeaturesServiceImpl.java:491)[27:org.apache.karaf.features.core:2.3.6]
	... 15 more
Caused by: java.lang.UnsatisfiedLinkError: no libsnappyjava.dylib in java.library.path
	at java.lang.ClassLoader.loadLibrary(ClassLoader.java:1886)[:1.7.0_45]
	at java.lang.Runtime.loadLibrary0(Runtime.java:849)[:1.7.0_45]
	at java.lang.System.loadLibrary(System.java:1088)[:1.7.0_45]
	at org.xerial.snappy.SnappyBundleActivator.start(SnappyBundleActivator.java:52)
	at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:645)
	at org.apache.felix.framework.Felix.activateBundle(Felix.java:1977)
	... 19 more
{code}

camel-spring-redis doesn't support spring 4.0.5 which is used by karaf 2.3.6.

camel-disruptor need to update the jre.properties of karaf to export the sum.misc package.

githubbot:1409298362:2014-08-29T15:46:02.377+0000:1409298362:2014-08-29T15:46:02.377+0000:GitHub user gnodet opened a pull request:

    https://github.com/apache/camel/pull/257

    [CAMEL-7755] Fix all karaf feature definitions

    Using a PR has I can't push to master for some reason (my local repo may be a bit broken)

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gnodet/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/257.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #257
    
----
commit 392cc8438c875ce6821324a00e829b16bc4d6e63
Author: Guillaume Nodet <gnodet@gmail.com>
Date:   2014-08-27T13:21:18Z

    [CAMEL-7755] Fix all karaf feature definitions

----

githubbot:1409352788:2014-08-30T06:53:08.243+0000:1409352788:2014-08-30T06:53:08.243+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/257

davsclaus:1409353048:2014-08-30T06:57:28.869+0000:1409353048:2014-08-30T06:57:28.869+0000:[~njiang]

Validating the features fails with a CXF 3.0.1 issue

[ERROR] Failed to execute goal org.apache.karaf.tooling:features-maven-plugin:2.3.6:validate (validate) on project apache-camel: Unable to validate /Users/davsclaus/workspace/camel/platforms/karaf/features/target/classes/features.xml: mvn:org.apache.cxf/cxf-tools-common/3.0.1 is not an OSGi bundle -> [Help 1]

running

davsclaus:~/workspace/camel/platforms (master)/$ mvn clean install -Pvalidate


gnodet:1409558972:2014-09-01T16:09:32.587+0000:1409558972:2014-09-01T16:09:32.587+0000:This is fixed on cxf 3.0.2-SNAPSHOT
davsclaus:1409634790:2014-09-02T13:13:10.409+0000:1409634790:2014-09-02T13:13:10.409+0000:Is that cxf-tools-common needed in OSGi or in other words do we need to wait for CXF 3.0.2? Or drop back to CXF 3.0.0 ?
njiang:1409636665:2014-09-02T13:44:25.227+0000:1409636665:2014-09-02T13:44:25.227+0000:Hi Claus,

The cxf-tools-common issue only affects the karaf feature validation, camel-cxf feature and other cxf feature can be installed without any issue.
I need to disable the validate profile if I cut the camel 2.14.0 with CXF 3.0.1.


gnodet:1409637311:2014-09-02T13:55:11.664+0000:1409637311:2014-09-02T13:55:11.664+0000:Fwiw, CXF 3.0 has the same issue where tools jars aren't OSGi bundles.
davsclaus:1410042791:2014-09-07T06:33:11.073+0000:1410042791:2014-09-07T06:33:11.073+0000:Willem fixed them"
0,CAMEL-7754,Bug,Major,"2.12.1, 2.13.2",2.14.0,"
None
",Resolved,Fixed,2.14.0,Moulliard Charles,Moulliard Charles,0,1,2014-08-27 08:37:35+00:00,2014-09-01 07:24:41+00:00,"Seems that we have a problem with Quartz/Quartz2 components. The doc claims that we can setup this property in the URI ""trigger.timeZone"" (http://camel.apache.org/quartz.html - see specifying timezone ) but quartz don't use it even if a constant is defined :https://www.dropbox.com/s/1wjt3slsz3jajlh/Screenshot%202014-08-27%2010.29.53.png?dl=0


We have the same issue too with quartz2 --> https://www.dropbox.com/s/jcxnn72bzi38qob/Screenshot%202014-08-27%2010.31.34.png?dl=0","cmoulliard:1409099961:2014-08-27T08:39:21.034+0000:1409099961:2014-08-27T08:39:21.034+0000:Test case used

{code}
public class CamelQuartzTest extends CamelTestSupport {

    @Test
    public void testQuartzCronRoute() throws Exception {
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMinimumMessageCount(3);

        assertMockEndpointsSatisfied();

        JobDetail job = mock.getReceivedExchanges().get(0).getIn().getHeader(""jobDetail"", JobDetail.class);
        assertNotNull(job);

        assertEquals(""cron"", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_TYPE));
        assertEquals(""UTC"", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE)); // ERROR
        assertEquals(""0/2 * * * * ?&trigger.timeZone=UTC"", job.getJobDataMap().get(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION));
    }

    @Override
    protected RouteBuilder createRouteBuilder() {
        return new RouteBuilder() {
            public void configure() {
                from(""quartz2://myGroup/myTimerName?cron=0/2+*+*+*+*+?&trigger.timeZone=UTC"").to(""mock:result"");
            }
        };
    }
}
{code}
cmoulliard:1409103520:2014-08-27T09:38:40.550+0000:1409103520:2014-08-27T09:38:40.550+0000:For Quartz 1, we should improve the QuartzComponent class to add the CamelProperty ""QUARTZ_TRIGGER_CRON_TIMEZONE""

{code}
        // enrich job data map with trigger information
        if (cron != null) {
            answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_TYPE, ""cron"");
            answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_EXPRESSION, cron);
            String timeZone = EndpointHelper.resloveStringParameter(getCamelContext(), (String)triggerParameters.get(""timeZone""), String.class);
            if (timeZone != null) {
                answer.getJobDetail().getJobDataMap().put(QuartzConstants.QUARTZ_TRIGGER_CRON_TIMEZONE, timeZone);
            }
        } 
{code}
cmoulliard:1409106535:2014-08-27T10:28:55.400+0000:1409106535:2014-08-27T10:28:55.400+0000:For Quartz2, the TimeZone property must be pass as parameter to the Trigger.newBuilder()
cmoulliard:1409527370:2014-09-01T07:22:50.671+0000:1409527481:2014-09-01T07:24:41.942+0000:There is a bug with Quartz Scheduler as the TIMEZONE which is well used by the calendar is not taken into consideration when the nextFiredTime is calculated by the CronExpression class

{code}
    protected Date getTimeAfter(Date afterTime) {

        // Computation is based on Gregorian year only.
        Calendar cl = new java.util.GregorianCalendar(getTimeZone()); 

        // move ahead one second, since we're computing the time *after* the
        // given time
        afterTime = new Date(afterTime.getTime() + 1000); // CALENDAR SYSTEM IS USED AS WE DON'T USE THE cl object
{code}

See screenshots "
0,CAMEL-7753,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,2,2014-08-27 07:57:39+00:00,2016-01-25 21:53:16+00:00,"If you use xslt:message to output an error and terminate the xslt processing, then you cannot get hold of the message, just some generic exception about xslt terminated.


We should capture those warnings/error/fatal error messages the listener emits and store on exchange so end users can get hold of those details.


An example
http://www.w3schools.com/xsl/el_message.asp


We should be able to get that artist is empty text message.","davsclaus:1409110943:2014-08-27T11:42:23.020+0000:1409110943:2014-08-27T11:42:23.020+0000:Saxon is a bit special, so we need to do some special code to hook it into use the jaxp error listener for xslt messages.
https://stackoverflow.com/questions/4695489/capture-xslmessage-output-in-java"
0,CAMEL-7752,Bug,Major,2.10.0,,"

GenericFile
camel-ftp
filter
ftp

",Resolved,Invalid,None,Claus Ibsen,Raghavan,0,2,2014-08-27 03:49:47+00:00,2014-08-27 15:21:06+00:00,"We are testing camel sftp with filter options to restrict the source files using a pattern.


We get a NullPointerException when try to use a filter (CustomFilter)


Attached herewith the code snippet


[[CodeSnippet]]


<beans xmlns=""http://www.springframework.org/schema/beans""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:camel=""http://camel.apache.org/schema/spring""
	xsi:schemaLocation=""
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd"">


	<camelContext xmlns=""http://camel.apache.org/schema/spring"">
	<camel:propertyPlaceholder id=""ftpadapterProperty"" location=""classpath:ftpadapter.properties""/>


		<!-- The file filter is to be tested -->
		<route>
			<from uri=""sftp://ftp.user@ftp.host/ftp.remote.dir?password=ftp.pwd&separator=UNIX&recursive=ftp.dir.recursive&binary=true&delete=ftp.deletefiles&stepwise=ftp.stepwise&delay=ftp.pollinginterval&filter=#fileFilter""/>
			<to uri=""file://local.dir?fileName=${date:now:yyyyMMddhhmmss}_${file:onlyname.noext}.${file:ext}""/>
			<log message=""Routing message from remote server to target folder with data ${body}"" />
		</route>
	</camelContext>    


	<bean id=""fileFilter"" class=""org.myapp.ftpadapter.FileFilter""/>


</beans>


FileFilter src:
public class FileFilter<T> implements GenericFileFilter<T> {
	private static Logger logger = LoggerFactory.getLogger(FileFilter.class);


	/* The purpose of this method is to apply a custom filter based on file pattern



This enables the ftp adapter to filter files based on the criteria implemented here
(non-Javadoc)
@see org.apache.camel.component.file.GenericFileFilter#accept(org.apache.camel.component.file.GenericFile)
	 */
	public boolean accept(GenericFile<T> file) {



		if(logger.isDebugEnabled()) 

{
			logger.debug(""IsDirectory="" + file.isDirectory());
			logger.debug(""FileName=""+file.getFileName());
		}


		if(file !=null && file.getFileName() != null) 

{ 
			return file.getFileName().endsWith("".xml"");
		}

		else 

{
			return false;
		}

	}


}


[[/CodeSnippet]]","davsclaus:1409090876:2014-08-27T06:07:56.104+0000:1409090876:2014-08-27T06:07:56.104+0000:And where is the NPE. You must report that, eg post the stacktrace you get.

Also next time use the user forum / mailing list first as we ask people to do. And only report JIRAs if we say so
tvraghavan:1409094117:2014-08-27T07:01:57.580+0000:1409094117:2014-08-27T07:01:57.580+0000:The NPE is raised under 
return file.getFileName().endsWith("".xml"");

So added the if condition to check the file object and observed that getFileName was returning null 
if(file !=null && file.getFileName() != null) { 
			return file.getFileName().endsWith("".xml"");
}


davsclaus:1409094622:2014-08-27T07:10:22.276+0000:1409094622:2014-08-27T07:10:22.276+0000:Use getFileNameOnly()
tvraghavan:1409096723:2014-08-27T07:45:23.032+0000:1409096723:2014-08-27T07:45:23.032+0000:Thanks Claus. Using getFileNameOnly() fixed the issue related to files

However with filter in place, even with recursive=true, the files under subDirectories are not read in the filter.
For e.g.
/home/user1
                   > a.xml                          [processed successfully]
                   > b.txt                            [ignored as expected]
                   > folder1/c.xml              [not read]
                   > folder2/d.xml              [not read] "
0,CAMEL-7751,Bug,Trivial,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Ramon Rosa da Silva,0,2,2014-08-26 23:44:09+00:00,2014-08-27 05:09:20+00:00,"Class https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/processor/interceptor/Tracer.java implements add instead of remove in method: 


    public void removeTraceHandler(TraceEventHandler traceHandler) 

{
        this.traceHandlers.add(traceHandler);
    }","njiang:1409087360:2014-08-27T05:09:20.350+0000:1409087360:2014-08-27T05:09:20.350+0000:Applied the patch to camel-2.12.x, camel-2.13.x and master branches with thanks to Ramon."
0,CAMEL-7750,Improvement,Major,None,,"
None
",Resolved,Abandoned,None,Unassigned,Sergey Beryozkin,1,4,2014-08-26 21:25:14+00:00,2022-09-02 08:52:53+00:00,It appears the invoker does not recognize the endpoints depending on a new suspended invocations feature of JAX-RS 2.0. We can tweak CXF JAXRSInvoker a bit if needed.,"rin:1409109795:2014-08-27T11:23:15.528+0000:1409109795:2014-08-27T11:23:15.528+0000:Not sure about the enhancement you mean, but i tried to reduce my project to demonstrate my issue and my error changed. Earlier no response was sent back when using AsyncResponse-enabled JAX-RS endpoint. But in the reduced example an another error occurs: a strange response is returned instead of the expected one. See the attached demo maven project.
rin:1409112665:2014-08-27T12:11:05.985+0000:1409112665:2014-08-27T12:11:05.985+0000:Ah, the demo above gives different error probably because it is fully processed in the original http thread. And my app is doing some async backend calls, so end of the route actually should be called in another thread. I'll make additional demo project for that. 
rin:1409131313:2014-08-27T17:21:53.629+0000:1409131313:2014-08-27T17:21:53.629+0000:Ok, I managed to make a simple project that demonstrates async variant handing forever while sync one working well. It started to hand after I added a call to a backend webservice. See the attached camel-async-response-test-that-hangs.zip."
0,CAMEL-7749,Test,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,3,2014-08-26 13:54:30+00:00,2014-08-26 14:03:50+00:00,This test was previously ignored.  It looks like the @Ignore was commented out by accident as part of another change.,"githubbot:1409032749:2014-08-26T13:59:09.405+0000:1409032749:2014-08-26T13:59:09.405+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/254

    Fix for CAMEL-7749 restore @Ignore on testTXForceShutdown

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7749

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/254.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #254
    
----
commit 99a76e70678b4a99ff7139fed7bd393dafaacf6f
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-08-26T13:58:08Z

    Fix for CAMEL-7749 restore @Ignore on testTXForceShutdown

----

davsclaus:1409032997:2014-08-26T14:03:17.773+0000:1409032997:2014-08-26T14:03:17.773+0000:Thanks again for spotting this.
githubbot:1409033030:2014-08-26T14:03:50.296+0000:1409033030:2014-08-26T14:03:50.296+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/254
"
0,CAMEL-7748,Test,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,3,2014-08-26 13:10:15+00:00,2014-08-26 13:52:09+00:00,"This test fails with the error below.  I think Clause missed this on the fix for CAMEL-7495.


java.lang.AssertionError: null
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at org.apache.camel.component.twitter.UriConfigurationTest.testComponentConfiguration(UriConfigurationTest.java:77)","githubbot:1409030211:2014-08-26T13:16:51.370+0000:1409030211:2014-08-26T13:16:51.370+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/253

    Fix for CAMEL-7748 Test was failing because of change in returning json ...

    ...schema object types.    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7748

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/253.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #253
    
----
commit d70039b14e971654af9e13a080954ee46f233456
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-08-26T13:15:01Z

    Fix for CAMEL-7748 Test was failing because of change in returning json schema object types

----

githubbot:1409032272:2014-08-26T13:51:12.632+0000:1409032272:2014-08-26T13:51:12.632+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/253

davsclaus:1409032329:2014-08-26T13:52:09.758+0000:1409032329:2014-08-26T13:52:09.758+0000:Thanks"
0,CAMEL-7747,Task,Major,2.14.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-26 12:25:31+00:00,2014-08-26 12:27:14+00:00,We should use a broader jline import version so we can support jline 2.11 also. As that version is used by Karaf 3.0.x and newer Karaf releases may be using jline 2.12.,
0,CAMEL-7746,Task,Major,None,None,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-26 08:46:30+00:00,2014-12-03 20:09:01+00:00,"We should switch to use spring 4.x as the default in Camel 2.15 onwards.


Spring 3.x is still supported by not the default version.
For OSGi users on Karaf they can still use spring 3.x with Camel 2.15 etc.",davsclaus:1417608541:2014-12-03T20:09:01.824+0000:1417608541:2014-12-03T20:09:01.824+0000:We do this now
0,CAMEL-7745,Bug,Major,None,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-08-26 07:50:19+00:00,2014-08-26 07:59:06+00:00,"When using osgi such as blueprint/spring-dm.


When using



    @EndpointInject(ref = ""sourceDirectoryXml"")
    Endpoint sourceUri;




In a RouteBuilder class then the endpoint is not enlisted in jmx. But if you use uri instead of ref, then they are enlisted in JMX.",
0,CAMEL-7744,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,2,2014-08-25 12:40:34+00:00,2014-08-25 13:03:58+00:00,Allow to configure using a custom error listener.,
0,CAMEL-7743,Task,Trivial,None,2.14.0,"

camel
docuentation

",Closed,Fixed,2.14.0,Claus Ibsen,Josef Ludvíček,0,2,2014-08-25 12:26:50+00:00,2014-08-25 14:27:36+00:00,"In Camel component documentation (http://camel.apache.org/components.html), 
both hdfs and hdfs2 links points to http://camel.apache.org/hdfs.html.


hdfs2 should probably lead to http://camel.apache.org/hdfs2.html.","davsclaus:1408941065:2014-08-25T12:31:05.491+0000:1408941065:2014-08-25T12:31:05.491+0000:Thanks for spotting
ludvicekj:1408948056:2014-08-25T14:27:36.435+0000:1408948056:2014-08-25T14:27:36.435+0000:fixed"
0,CAMEL-7742,Improvement,Major,2.13.2,,"
None
",Resolved,Fixed,None,Moulliard Charles,Moulliard Charles,0,1,2014-08-25 06:16:46+00:00,2014-09-01 07:00:55+00:00,"Issue 



I currently have a problem concerning Camel Bindy. I have a csv file that
should be parsed with Camel Bindy using a given model class. This csv file
contains a number that should be parsed as a BigDecimal. The problem is that
this number contains a comma as a grouping separator and a point as the
decimal separator.
If I start the camel route the unmarshal process will throw a
NumberFormatException mentioning the invalid format of that number. So I
tried to add a pattern to the DataField annotation, but the error stays.

After digging throw the documentation (http://camel.apache.org/bindy.html)
and the source code of FormatFactory
(http://grepcode.com/file_/repo1.maven.org/maven2/org.apache.camel/camel-bindy/2.13.1/org/apache/camel/dataformat/bindy/FormatFactory.java/?v=source)
I'm a little bit confused, because the documentation mentions the ability to
specify a grouping separator, but the source code shows that the pattern is
ignored for BigDecimal data types.

Does anyone know how to specify that grouping separator? Or is this not
implemented yet?




Solution



    public void parsePattern(String formattedString,
                      Locale locale,
                      String pattern,
                      char groupingSeparator,
                      char decimalSeparator) throws ParseException {

        DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
        symbols.setGroupingSeparator(groupingSeparator);
        symbols.setDecimalSeparator(decimalSeparator);
        DecimalFormat decimalFormat = new DecimalFormat(pattern, symbols);
        decimalFormat.setParseBigDecimal(true);

        // parse the string
        BigDecimal bigDecimal = (BigDecimal) decimalFormat.parse(formattedString);
        bigDecimal.setScale(precision);
        System.out.println(bigDecimal);
    }","cmoulliard:1408924422:2014-08-25T07:53:42.809+0000:1408924422:2014-08-25T07:53:42.809+0000:Remark : We can't use together the pattern provided as property by @DataField annotation with DecimalFormat as a comparison is done automtically with the pattern of the LOCALE and we could generate a Malformed pattern exception

{code}
FRENCH LOCALE
java.lang.IllegalArgumentException: Malformed pattern ""###.##0,00""
	at java.text.DecimalFormat.applyPattern(DecimalFormat.java:2610)
	at java.text.DecimalFormat.applyPattern(DecimalFormat.java:2304)

        Locale.setDefault(locale);

        NumberFormat f = NumberFormat.getInstance(locale);
        if (f instanceof DecimalFormat) {
            DecimalFormat df = ((DecimalFormat) f);
            df.setParseBigDecimal(true);
            df.applyPattern(pattern); // ERROR RAISED HERE
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(locale);
            symbols.setDecimalSeparator(decimalSeparator);
            symbols.setGroupingSeparator(groupingSeparator);
            df.setDecimalFormatSymbols(symbols);
        }

        // parse the string
        BigDecimal bigDecimal = (BigDecimal) f.parse(formattedString);
        bigDecimal.setScale(precision,RoundingMode.HALF_DOWN);
        System.out.println(bigDecimal);
        Locale.getDefault();

where we use as parameter

            locale = Locale.FRENCH;
            pattern = ""###.##0,00"";
            groupingSeparator = ',';
            decimalSeparator = '.';
            formatedString = ""123,000.45"";
{code}
"
0,CAMEL-7741,Test,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Willem Jiang,Claus Ibsen,0,2,2014-08-25 06:08:50+00:00,2015-07-09 11:12:43+00:00,We should have a sanity check in itests that check that Camel can deploy and run on karaf 2.x / 3.0.x.,"davsclaus:1409013545:2014-08-26T08:39:05.493+0000:1409013545:2014-08-26T08:39:05.493+0000:Thanks Willem.

Do you mind creating a tests/camel-itest-karaf23 that just has a few unit tests and is forced to use karaf 2.3. Then its easy to run, like we do for spring32 testing etc.
https://github.com/apache/camel/tree/master/tests/camel-itest-spring32
njiang:1409016325:2014-08-26T09:25:25.351+0000:1409016325:2014-08-26T09:25:25.351+0000:I just added a profile of karaf3 which could tell pax-exam to switch the version of karaf, but pax-exam complains the version of felix platform cannot be found when I switch to use karaf3.
I will create a camel-itest-karaf23 module and commit the patch from running test with  karaf3 profile shortly.

davsclaus:1410043206:2014-09-07T06:40:06.430+0000:1410043206:2014-09-07T06:40:06.430+0000:We have profiles now for testing with karaf 2.x and 3.0. That is fine. But a little module to just test a few tests with karaf 23 would be nice.
davsclaus:1423191710:2015-02-06T11:01:50.766+0000:1423191710:2015-02-06T11:01:50.766+0000:Karaf 23 is no longer support, so it should be 24 and 30 tests"
0,CAMEL-7740,Improvement,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Cristiano Nicolai,0,3,2014-08-25 03:04:51+00:00,2014-08-25 06:27:44+00:00,Provide new option that allows configuring if producer pool should be prefilled or created on demand as exchanges are processed.,"githubbot:1408907235:2014-08-25T03:07:15.804+0000:1408907235:2014-08-25T03:07:15.804+0000:GitHub user cristianonicolai opened a pull request:

    https://github.com/apache/camel/pull/252

    CAMEL-7740: Allow pool prefill configuration for SjmsProducer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cristianonicolai/camel camel-7740

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/252.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #252
    
----
commit f2132d3c83f27694be5d650c227a49a0a82ecaa7
Author: Cristiano Nicolai <cnicolai@redhat.com>
Date:   2014-08-25T02:57:47Z

    CAMEL-7740: Allow pool prefill configuration for SjmsProducer

----

davsclaus:1408919246:2014-08-25T06:27:26.753+0000:1408919246:2014-08-25T06:27:26.753+0000:Thanks 
githubbot:1408919264:2014-08-25T06:27:44.841+0000:1408919264:2014-08-25T06:27:44.841+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/252
"
0,CAMEL-7739,Bug,Minor,2.13.0,"2.13.4, 2.14.2, 2.15.0","

bug
onCompletion
pop3

",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Laabidi Raissi,0,3,2014-08-22 16:42:09+00:00,2015-02-15 11:34:57+00:00,"I think I found a bug in Camel OncompletionProcessor code when used with a Mail poller route and onCompletion.
The error occurs when the Log level is set to DEBUG or TRACE. In that case the logger tries to call the toString() method of the DefaultExchange class which calls org.apache.camel.component.mail.MailMessage.toString().


At that stage, the POP3Folder is already closed.
A very obvious (but not elegant) solution, would be to add a try-catch block to the log instruction. 
Otherwise, I think a good solution is to change the DefaultExchange#toString method.
Here is the exception that occured:


java.lang.IllegalStateException: Folder is not Open
	at com.sun.mail.pop3.POP3Folder.checkOpen(POP3Folder.java:551)
	at com.sun.mail.pop3.POP3Folder.getProtocol(POP3Folder.java:581)
	at com.sun.mail.pop3.POP3Message.loadHeaders(POP3Message.java:606)
	at com.sun.mail.pop3.POP3Message.getHeader(POP3Message.java:383)
	at javax.mail.internet.MimeMessage.getAddressHeader(MimeMessage.java:701)
	at javax.mail.internet.MimeMessage.getFrom(MimeMessage.java:362)
	at org.apache.camel.component.mail.MailUtils.dumpMessage(MailUtils.java:106)
	at org.apache.camel.component.mail.MailMessage.toString(MailMessage.java:49)
	at java.lang.String.valueOf(String.java:2854)
	at java.lang.StringBuilder.append(StringBuilder.java:128)
	at org.apache.camel.impl.DefaultExchange.toString(DefaultExchange.java:81)
	at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
	at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
	at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
	at ch.qos.logback.classic.spi.LoggingEvent.<init>(LoggingEvent.java:115)
	at ch.qos.logback.classic.Logger.buildLoggingEventAndAppend(Logger.java:439)
	at ch.qos.logback.classic.Logger.filterAndLog_1(Logger.java:413)
	at ch.qos.logback.classic.Logger.debug(Logger.java:506)
	at org.apache.camel.processor.OnCompletionProcessor$OnCompletionSynchronization$1.call(OnCompletionProcessor.java:178)
	at org.apache.camel.processor.OnCompletionProcessor$OnCompletionSynchronization$1.call(OnCompletionProcessor.java:176)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:722)",davsclaus:1423970984:2015-02-15T11:29:44.960+0000:1423970984:2015-02-15T11:29:44.960+0000:Yeah we should not dump the mail content in the toString()
0,CAMEL-7738,Test,Minor,2.14.0,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-22 12:51:22+00:00,2014-08-22 13:18:47+00:00,No Desc,
0,CAMEL-7737,Test,Major,2.14.0,None,"
None
",Resolved,Fixed,2.14.1,Willem Jiang,Claus Ibsen,0,2,2014-08-22 11:37:09+00:00,2014-12-03 20:09:45+00:00,There is an unit test that fails in camel-fop on master,"davsclaus:1408680275:2014-08-22T12:04:35.000+0000:1408680275:2014-08-22T12:04:35.000+0000:[~njiang] I wonder if this test failure is due some of the recent xml parser changes you have done ?
njiang:1408843728:2014-08-24T09:28:48.099+0000:1408843728:2014-08-24T09:28:48.099+0000:It's caused by upgrading the xalan to 2.7.2. When I change the xalan version to 2.7.1, the test passed."
0,CAMEL-7736,Bug,Major,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-08-22 09:07:57+00:00,2014-08-22 11:39:49+00:00,"If an endpoint.createProducer throws an exception from a dynamic eip, then the exchange is kept marked as inflight, and the error handler does not react asap and as expected.


This was working in Camel 2.10.x etc.",
0,CAMEL-7735,Bug,Minor,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-08-22 08:24:49+00:00,2014-08-22 08:40:52+00:00,Only when you manually create  the exchange and pass it to the producer template send method there will be 2x sent event in the notifier.,
0,CAMEL-7734,Improvement,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Cristiano Nicolai,0,3,2014-08-22 01:17:20+00:00,2014-08-22 06:38:37+00:00,"Apache commons-pool library provides solid implementation of object pooling. Furthermore, extra features can be used to validate connections, producers and consumers. Switching to this library also removes the necessity of maintaining custom code to handle different pool implementations.","githubbot:1408641635:2014-08-22T01:20:35.145+0000:1408641635:2014-08-22T01:20:35.145+0000:GitHub user cristianonicolai opened a pull request:

    https://github.com/apache/camel/pull/251

    CAMEL-7734: Replace custom pool implementation by commons-pool

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cristianonicolai/camel camel-7734

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/251.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #251
    
----
commit 88809ef3d08a8752572ae2302e90499c995121e6
Author: Cristiano Nicolai <cristiano.nicolai@gmail.com>
Date:   2014-08-20T15:25:54Z

    CAMEL-7734: Replace custom pool implementation by commons-pool

----

githubbot:1408660695:2014-08-22T06:38:15.081+0000:1408660695:2014-08-22T06:38:15.081+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/251

davsclaus:1408660712:2014-08-22T06:38:32.794+0000:1408660712:2014-08-22T06:38:32.794+0000:Thanks. 

It may be nice to allow the end user to configure the various pool options for idle time and whatnot."
0,CAMEL-7733,Bug,Minor,2.13.2,,"
None
",Resolved,Won't Fix,None,Unassigned,Matt Sicker,2,4,2014-08-22 01:11:47+00:00,2014-08-26 20:34:02+00:00,"Sending a CamelCacheOperation of CamelCacheDeleteAll doesn't actually delete anything from the cache. It might be clearing out the in-memory cache, but anything that's persisted to disk won't be cleared. This causes immense problems anytime a stray class gets serialized that had its serialization format updated. Constant exceptions from attempting to get items from the cache is not what should be happening here.


If I delete the cache file EHCache is using, that obviously does nothing as it still has a file handle on it and will continue using it unless I completely restart Karaf.","davidkarlsen@gmail.com:1408659257:2014-08-22T06:14:17.530+0000:1408659257:2014-08-22T06:14:17.530+0000:When would you expect the cache-backing file to change? AFAIK it will not happen immediately/synchronously, but when worker thread wakes or cache is shutdown: http://whatdidilearn2day.blogspot.no/2009/09/semantics-of-flushing-in-ehcache.html .

Do you call shutdown on the cache when your app/service terminates?
eschizoid:1408692863:2014-08-22T15:34:23.122+0000:1408692963:2014-08-22T15:36:03.465+0000:From my understanding whenever we do a call to the camel cache component using  the following header: 

{code:xml}
<setHeader headerName=""CamelCacheOperation"">
	<constant>CamelCacheDeleteAll</constant>
</setHeader>
{code}

Is when the cache-backing file needs to change. In my case like [~jvz] that is not happening.
mattsicker:1408715003:2014-08-22T21:43:23.688+0000:1408715003:2014-08-22T21:43:23.688+0000:When would I want it to happen? How about when I send the delete all command? I thought ""all"" would mean ""all"" and not ""all heap data"" or some other subset.
davsclaus:1409054344:2014-08-26T19:59:04.300+0000:1409054344:2014-08-26T19:59:04.300+0000:Working as designed, we use the api of ehcache to remove all.
mattsicker:1409056442:2014-08-26T20:34:02.275+0000:1409056442:2014-08-26T20:34:02.275+0000:So then I'd assume this is an issue with EHCache specifically and not the component? Thanks for the help in pinning this down. I'll pursue that avenue."
0,CAMEL-7732,Bug,Minor,2.13.2,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Nathan Wray,0,3,2014-08-21 17:07:43+00:00,2014-08-22 05:42:10+00:00,"Update: beanRowMapper works when passed a Spring reference to a mapper class, but does not accept a class name as the outputType option does.


—
When trying to override the DefaultBeanRowMapper with a custom mapper on a jdbc using the beanRowMapper option in the URI, such as:


jdbc:MyDS?useHeadersAsParameters=true&outputType=SelectOne&outputClass=com.foo.Bar&beanRowMapper=com.my.CorrectedBeanRowMapper


The following error is thrown, complaining that it doesn't know how to turn a string into an instance of BeanRowMapper:


Caused By: java.lang.IllegalArgumentException: Could not find a suitable setter for property: beanRowMapper as there isn't a setter method with same type: java.lang.String nor type conversion possible: No type converter available to convert from type: java.lang.String to the required type: org.apache.camel.component.jdbc.BeanRowMapper with value com.my.CorrectedBeanRowMapper","davidkarlsen@gmail.com:1408612406:2014-08-21T17:13:26.666+0000:1408612406:2014-08-21T17:13:26.666+0000:try this instead:
beanRowMapper=#nameOfSpringBean
nathanwray:1408619506:2014-08-21T19:11:46.162+0000:1408619506:2014-08-21T19:11:46.162+0000:That works, thanks David.  I think ideally it would accept the class name as outputClass does.  
davsclaus:1408657330:2014-08-22T05:42:10.123+0000:1408657330:2014-08-22T05:42:10.123+0000:See this page
http://camel.apache.org/how-do-i-configure-endpoints.html

the section about referring beans"
0,CAMEL-7731,Bug,Minor,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Nathan Wray,0,2,2014-08-21 16:33:15+00:00,2014-08-22 15:05:54+00:00,"DefaultBeanRowMapper current version does not upper-case when it should, due to what appears to be a copy paste error (note the toLowerCase in both branches)


if (toUpper) {
	char upper = Character.toLowerCase(ch);
	sb.append(upper);
	// reset flag
	toUpper = false;
} else {
	char lower = Character.toLowerCase(ch);
	sb.append(lower);
}


should be


if (toUpper) {
	char upper = Character.toUpperCase(ch);
	sb.append(upper);
	// reset flag
	toUpper = false;
} else {
	char lower = Character.toLowerCase(ch);
	sb.append(lower);
}","nathanwray:1408610496:2014-08-21T16:41:36.916+0000:1408610496:2014-08-21T16:41:36.916+0000:patch
githubbot:1408610940:2014-08-21T16:49:00.666+0000:1408610940:2014-08-21T16:49:00.666+0000:GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/249

    CAMEL-7731: fix typo

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7731

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/249.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #249
    
----
commit d7ba926794b4df826c0fc8c57e4ce5afb72bb0e2
Author: david <david@davidkarlsen.com>
Date:   2014-08-21T16:48:03Z

    CAMEL-7731: fix typo

----

githubbot:1408657191:2014-08-22T05:39:51.261+0000:1408657191:2014-08-22T05:39:51.261+0000:Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/249
"
0,CAMEL-7730,Bug,Major,2.13.2,None,"
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,Roman jakubco,0,3,2014-08-21 09:31:03+00:00,2014-08-22 06:13:33+00:00,"Documentation for the component states that ""command"" URI option can be used in producer for setting operations for infinispan. But is seems only the default value is working because commands REMOVE, CLEAR and GET  fail with NullPointerException:



Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route7            ] [route7            ] [direct://commandGet                                                           ] [         3]
[route7            ] [setHeader11       ] [setHeader[CamelInfinispanKey]                                                 ] [         0]
[route7            ] [to7               ] [infinispan://localhost?cacheContainer=#container1&command=GET                 ] [         1]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-roman-ThinkPad-T430s-46536-1408612528972-0-4
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-roman-ThinkPad-T430s-46536-1408612528972-0-3, CamelInfinispanKey=commandKey1, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            null
	Body                [Body is null]
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.lang.NullPointerException: Null values are not supported!
	at org.infinispan.CacheImpl.assertKeyValueNotNull(CacheImpl.java:187)
	at org.infinispan.CacheImpl.putInternal(CacheImpl.java:876)
	at org.infinispan.CacheImpl.put(CacheImpl.java:870)
	at org.infinispan.CacheImpl.put(CacheImpl.java:1351)
	at org.infinispan.CacheImpl.put(CacheImpl.java:215)
	at org.apache.camel.component.infinispan.InfinispanOperation$Operation$1.execute(InfinispanOperation.java:50)
	at org.apache.camel.component.infinispan.InfinispanOperation.process(InfinispanOperation.java:34)
	at org.apache.camel.component.infinispan.InfinispanProducer.process(InfinispanProducer.java:42)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:110)
	at org.jboss.fuse.qa.infinispan.component.test.InfinispanComponentTest.testUriCommandOption(InfinispanComponentTest.java:158)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)




Looking at the code it seems there is a missing test if the operation is not specified in the URI and default operation PUT is always used( that is why there is NullPointerException). I will correct it later in the evening or tomorrow a make a pullrequest to the git.","githubbot:1408603237:2014-08-21T14:40:37.913+0000:1408603237:2014-08-21T14:40:37.913+0000:GitHub user romanjakubco opened a pull request:

    https://github.com/apache/camel/pull/248

    CAMEL-7730 

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/romanjakubco/camel CAMEL-7730

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/248.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #248
    
----
commit 7e699997bdad65ee89129055db7f97b7dd922942
Author: Roman Jakubco <rjakubco@redhat.com>
Date:   2014-08-21T14:38:57Z

    CAMEL-7730 plus added junit test for this bug

----

githubbot:1408659165:2014-08-22T06:12:45.027+0000:1408659165:2014-08-22T06:12:45.027+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/248

davsclaus:1408659213:2014-08-22T06:13:33.532+0000:1408659213:2014-08-22T06:13:33.532+0000:Thanks"
0,CAMEL-7729,Bug,Minor,2.14.0,None,"

eclipse

",Resolved,Done,None,Unassigned,Andrea Cosentino,0,2,2014-08-21 08:30:17+00:00,2014-08-21 14:10:05+00:00,"Hi,


I've just fetch the original repository of camel from github and try to import in eclipse by this command:



mvn process-test-sources eclipse:eclipse




and even with this command



mvn eclipse:clean eclipse:eclipse




I get the following error:



[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Camel ............................................. SUCCESS [0.523s]
[INFO] Camel :: Parent ................................... SUCCESS [0.482s]
[INFO] Camel :: Buildtools ............................... SUCCESS [0.197s]
[INFO] Camel :: Tooling .................................. SUCCESS [0.079s]
[INFO] Camel :: SPI Annotations .......................... FAILURE [0.331s]
[INFO] Camel :: Annotation Processor ..................... SKIPPED
[INFO] Camel :: Maven Plugins ............................ SKIPPED
[INFO] Camel :: Maven Plugins :: Camel Package ........... SKIPPED
[INFO] Camel :: Core ..................................... SKIPPED
[INFO] Camel :: Components ............................... SKIPPED
[INFO] Camel :: Test ..................................... SKIPPED
[INFO] Camel :: Core XML ................................. SKIPPED
[INFO] Camel :: Core OSGi ................................ SKIPPED
[INFO] Camel :: Spring ................................... SKIPPED
[INFO] Camel :: Test :: Spring ........................... SKIPPED
[INFO] Camel :: TestNG ................................... SKIPPED
[INFO] Camel :: Blueprint ................................ SKIPPED
[INFO] Camel :: Test Blueprint ........................... SKIPPED
[INFO] Camel :: Test :: Spring ........................... SKIPPED
[INFO] Camel :: JUEL ..................................... SKIPPED
[INFO] Camel :: BAM ...................................... SKIPPED
[INFO] Camel :: Groovy ................................... SKIPPED
[INFO] Camel :: JXPath ................................... SKIPPED
[INFO] Camel :: Velocity ................................. SKIPPED
[INFO] Camel :: Scala .................................... SKIPPED
[INFO] Camel :: HTTP ..................................... SKIPPED
[INFO] Camel :: HTTP4 (HttpClient 4.x) ................... SKIPPED
[INFO] Camel :: Jackson .................................. SKIPPED
[INFO] Camel :: Spring JavaConfig ........................ SKIPPED
[INFO] Camel :: JAXB ..................................... SKIPPED
[INFO] Camel :: Jetty .................................... SKIPPED
[INFO] Camel :: CXF :: Transport ......................... SKIPPED
[INFO] Camel :: CXF ...................................... SKIPPED
[INFO] Camel :: Web ...................................... SKIPPED
[INFO] Camel :: Web :: Standalone ........................ SKIPPED
[INFO] Camel :: JMS ...................................... SKIPPED
[INFO] Camel :: AHC ...................................... SKIPPED
[INFO] Camel :: AHC-WS ................................... SKIPPED
[INFO] Camel :: AMQP ..................................... SKIPPED
[INFO] Camel :: APNS ..................................... SKIPPED
[INFO] Camel :: Servlet .................................. SKIPPED
[INFO] Camel :: Atmosphere WebSocket Servlet ............. SKIPPED
[INFO] Camel :: Atom ..................................... SKIPPED
[INFO] Camel :: Avro ..................................... SKIPPED
[INFO] Camel :: AWS ...................................... SKIPPED
[INFO] Camel :: Base64 ................................... SKIPPED
[INFO] Camel :: BeanIO ................................... SKIPPED
[INFO] Camel :: Bean validator ........................... SKIPPED
[INFO] Camel :: Barcode .................................. SKIPPED
[INFO] Camel :: Bindy .................................... SKIPPED
[INFO] Camel :: Maven Plugins :: Camel API Component Plugin  SKIPPED
[INFO] Camel :: Box.com .................................. SKIPPED
[INFO] Camel :: Cache .................................... SKIPPED
[INFO] Camel :: Castor ................................... SKIPPED
[INFO] Camel :: CDI ...................................... SKIPPED
[INFO] Camel :: CMIS ..................................... SKIPPED
[INFO] Camel :: Stream ................................... SKIPPED
[INFO] Camel :: Cometd ................................... SKIPPED
[INFO] Camel :: Context .................................. SKIPPED
[INFO] Camel :: CouchDB .................................. SKIPPED
[INFO] Camel :: Crypto ................................... SKIPPED
[INFO] Camel :: CSV ...................................... SKIPPED
[INFO] Camel :: Disruptor ................................ SKIPPED
[INFO] Camel :: DNS ...................................... SKIPPED
[INFO] Camel :: Dozer .................................... SKIPPED
[INFO] Camel :: Maven Plugins :: Camel Maven Run ......... SKIPPED
[INFO] Camel :: Dropbox .................................. SKIPPED
[INFO] Camel :: Eclipse .................................. SKIPPED
[INFO] Camel :: EJB ...................................... SKIPPED
[INFO] Camel :: ElasticSearch ............................ SKIPPED
[INFO] Camel :: Event Admin .............................. SKIPPED
[INFO] Camel :: Exec ..................................... SKIPPED
[INFO] Camel :: Facebook ................................. SKIPPED
[INFO] Camel :: FlatPack ................................. SKIPPED
[INFO] Camel :: FOP ...................................... SKIPPED
[INFO] Camel :: Freemarker ............................... SKIPPED
[INFO] Camel :: SSH ...................................... SKIPPED
[INFO] Camel :: FTP ...................................... SKIPPED
[INFO] Camel :: GAE ...................................... SKIPPED
[INFO] Camel :: Geocoder ................................. SKIPPED
[INFO] Camel :: Gora ..................................... SKIPPED
[INFO] Camel :: Gson ..................................... SKIPPED
[INFO] Camel :: Guava-EventBus ........................... SKIPPED
[INFO] Camel :: Guice .................................... SKIPPED
[INFO] Camel :: HawtDB ................................... SKIPPED
[INFO] Camel :: HazelCast ................................ SKIPPED
[INFO] Camel :: Hbase .................................... SKIPPED
[INFO] Camel :: HDFS ..................................... SKIPPED
[INFO] Camel :: HDFS2 .................................... SKIPPED
[INFO] Camel :: MINA-2 ................................... SKIPPED
[INFO] Camel :: HL7 ...................................... SKIPPED
[INFO] Camel :: iBatis ................................... SKIPPED
[INFO] Camel :: iCal ..................................... SKIPPED
[INFO] Camel :: Infinispan ............................... SKIPPED
[INFO] Camel :: IRC ...................................... SKIPPED
[INFO] Camel :: Javaspace ................................ SKIPPED
[INFO] Camel :: Jasypt ................................... SKIPPED
[INFO] Camel :: JClouds .................................. SKIPPED
[INFO] Camel :: JCR ...................................... SKIPPED
[INFO] Camel :: JDBC ..................................... SKIPPED
[INFO] Camel :: JGroups .................................. SKIPPED
[INFO] Camel :: Jing ..................................... SKIPPED
[INFO] Camel :: JMX ...................................... SKIPPED
[INFO] Camel :: JoSQL .................................... SKIPPED
[INFO] Camel :: JPA ...................................... SKIPPED
[INFO] Camel :: JSon Path ................................ SKIPPED
[INFO] Camel :: Jsch ..................................... SKIPPED
[INFO] Camel :: Java Toolbox for AS/400 .................. SKIPPED
[INFO] Camel :: Kafka .................................... SKIPPED
[INFO] Camel :: Kestrel .................................. SKIPPED
[INFO] Camel :: Krati .................................... SKIPPED
[INFO] Camel :: LDAP ..................................... SKIPPED
[INFO] Camel :: LevelDB .................................. SKIPPED
[INFO] Camel :: LinkedIn Component Parent ................ SKIPPED
[INFO] Camel :: LinkedIn Component API ................... SKIPPED
[INFO] Camel :: LinkedIn Component ....................... SKIPPED
[INFO] Camel :: Lucene ................................... SKIPPED
[INFO] Camel :: Mail ..................................... SKIPPED
[INFO] Camel :: Metrics .................................. SKIPPED
[INFO] Camel :: MINA ..................................... SKIPPED
[INFO] Camel :: MongoDB .................................. SKIPPED
[INFO] Camel :: MQTT ..................................... SKIPPED
[INFO] Camel :: MSV ...................................... SKIPPED
[INFO] Camel :: Mustache ................................. SKIPPED
[INFO] Camel :: MVEL ..................................... SKIPPED
[INFO] Camel :: MyBatis .................................. SKIPPED
[INFO] Camel :: Nagios ................................... SKIPPED
[INFO] Camel :: Netty .................................... SKIPPED
[INFO] Camel :: Netty4 ................................... SKIPPED
[INFO] Camel :: Netty HTTP ............................... SKIPPED
[INFO] Camel :: OGNL ..................................... SKIPPED
[INFO] Camel :: OpenShift ................................ SKIPPED
[INFO] Camel :: OptaPlanner .............................. SKIPPED
[INFO] Camel :: Pax Logging .............................. SKIPPED
[INFO] Camel :: Printer .................................. SKIPPED
[INFO] Camel :: Protobuf ................................. SKIPPED
[INFO] Camel :: Quartz ................................... SKIPPED
[INFO] Camel :: Quartz2 .................................. SKIPPED
[INFO] Camel :: QuickFIX/J ............................... SKIPPED
[INFO] Camel :: RabbitMQ ................................. SKIPPED
[INFO] Camel :: Restlet .................................. SKIPPED
[INFO] Camel :: RMI ...................................... SKIPPED
[INFO] Camel :: Routebox ................................. SKIPPED
[INFO] Camel :: RSS ...................................... SKIPPED
[INFO] Camel :: Ruby ..................................... SKIPPED
[INFO] Camel :: RX ....................................... SKIPPED
[INFO] Camel :: SAP NetWeaver ............................ SKIPPED
[INFO] Camel :: SAXON .................................... SKIPPED
[INFO] Camel :: Salesforce :: Parent ..................... SKIPPED
[INFO] Camel :: Salesforce ............................... SKIPPED
[INFO] Camel :: Salesforce :: Maven plugin ............... SKIPPED
[INFO] Camel :: Script ................................... SKIPPED
[INFO] Camel :: Servlet Listener ......................... SKIPPED
[INFO] Camel :: Shiro .................................... SKIPPED
[INFO] Camel :: SIP ...................................... SKIPPED
[INFO] Camel :: SMPP ..................................... SKIPPED
[INFO] Camel :: SNMP ..................................... SKIPPED
[INFO] Camel :: Simple JMS ............................... SKIPPED
[INFO] Camel :: SOAP ..................................... SKIPPED
[INFO] Camel :: Solr ..................................... SKIPPED
[INFO] Camel :: Spark REST ............................... SKIPPED
[INFO] Camel :: Splunk ................................... SKIPPED
[INFO] Camel :: Spring Batch ............................. SKIPPED
[INFO] Camel :: Spring Integration ....................... SKIPPED
[INFO] Camel :: Spring LDAP .............................. SKIPPED
[INFO] Camel :: Redis .................................... SKIPPED
[INFO] Camel :: Spring Security .......................... SKIPPED
[INFO] Camel :: Spring Web Services ...................... SKIPPED
[INFO] Camel :: SQL ...................................... SKIPPED
[INFO] Camel :: StAX ..................................... SKIPPED
[INFO] Camel :: Stomp .................................... SKIPPED
[INFO] Camel :: StringTemplate ........................... SKIPPED
[INFO] Camel :: Syslog ................................... SKIPPED
[INFO] Camel :: Swagger .................................. SKIPPED
[INFO] Camel :: TagSoup .................................. SKIPPED
[INFO] Camel :: Twitter .................................. SKIPPED
[INFO] Camel :: URLRewrite ............................... SKIPPED
[INFO] Camel :: Vertx .................................... SKIPPED
[INFO] Camel :: Weather .................................. SKIPPED
[INFO] Camel :: WebSocket ................................ SKIPPED
[INFO] Camel :: XMLBeans ................................. SKIPPED
[INFO] Camel :: XML JSON ................................. SKIPPED
[INFO] Camel :: XML RPC .................................. SKIPPED
[INFO] Camel :: XML Security ............................. SKIPPED
[INFO] Camel :: XMPP ..................................... SKIPPED
[INFO] Camel :: XStream .................................. SKIPPED
[INFO] Camel :: Yammer ................................... SKIPPED
[INFO] Camel :: Zip File ................................. SKIPPED
[INFO] Camel :: Zookeeper ................................ SKIPPED
[INFO] Camel :: Jibx ..................................... SKIPPED
[INFO] Camel :: Platforms ................................ SKIPPED
[INFO] Camel :: Platforms :: Apache Karaf ................ SKIPPED
[INFO] Camel :: Platforms :: Apache Karaf :: Commands .... SKIPPED
[INFO] Camel :: Platforms :: Apache Karaf :: Features .... SKIPPED
[INFO] Camel :: Maven Plugins :: Camel Maven Guice ....... SKIPPED
[INFO] Camel :: Archetypes ............................... SKIPPED
[INFO] Camel :: Archetypes :: Camel Router with ActiveMQ . SKIPPED
[INFO] Camel :: Archetypes :: Component .................. SKIPPED
[INFO] Camel :: Archetypes :: Blueprint (OSGi) Based Router  SKIPPED
[INFO] Camel :: Archetypes :: Component .................. SKIPPED
[INFO] Camel :: Archetypes :: Scala Component ............ SKIPPED
[INFO] Camel :: Archetypes :: CXF :: Code First :: Blueprint (OSGi)  SKIPPED
[INFO] Camel :: Archetypes :: CXF :: Contract First :: Blueprint (OSGi)  SKIPPED
[INFO] Camel :: Archetypes :: Data Format ................ SKIPPED
[INFO] Camel :: Archetypes :: Groovy Router .............. SKIPPED
[INFO] Camel :: Archetypes :: Java Router ................ SKIPPED
[INFO] Camel :: Archetypes :: Scala Router ............... SKIPPED
[INFO] Camel :: Archetypes :: Spring XML Based Router .... SKIPPED
[INFO] Camel :: Archetypes :: Spring DM (OSGi) Based Router  SKIPPED
[INFO] Camel :: Archetypes :: Camel Routes WAR ........... SKIPPED
[INFO] Camel :: Archetypes :: Camel Router with web console  SKIPPED
[INFO] Camel :: Manual ................................... SKIPPED
[INFO] Camel :: Integration Tests :: Test Bundles ........ SKIPPED
[INFO] Camel :: Integration Tests :: Test Bundles: mock-javamail-1.7  SKIPPED
[INFO] Camel :: Integration Tests ........................ SKIPPED
[INFO] Camel :: Integration Tests :: Standalone .......... SKIPPED
[INFO] Camel :: Integration Tests :: Non OSGi ............ SKIPPED
[INFO] Camel :: Integration Tests :: CDI ................. SKIPPED
[INFO] Camel :: Integration Tests :: Spring 3.2 .......... SKIPPED
[INFO] Camel :: Integration Tests :: Blueprint CXF Tests . SKIPPED
[INFO] Camel :: Integration Tests :: Partial Classpath ... SKIPPED
[INFO] Camel :: Integration Tests :: TypeConverter Scan .. SKIPPED
[INFO] Camel :: Examples ................................. SKIPPED
[INFO] Camel :: Example :: ActiveMQ :: Tomcat ............ SKIPPED
[INFO] Camel :: Example :: Aggregate ..................... SKIPPED
[INFO] Camel :: Example :: BAM ........................... SKIPPED
[INFO] Camel :: Example :: Cafe .......................... SKIPPED
[INFO] Camel :: Example :: CDI ........................... SKIPPED
[INFO] Camel :: Example :: CXF ........................... SKIPPED
[INFO] Camel :: Example :: CXF :: Blueprint .............. SKIPPED
[INFO] Camel :: Example :: CXF :: OSGI ................... SKIPPED
[INFO] Camel :: Example :: CXF :: Proxy .................. SKIPPED
[INFO] Camel :: Example :: CXF :: Tomcat ................. SKIPPED
[INFO] Camel :: Example :: Console ....................... SKIPPED
[INFO] Camel :: Example :: Docs .......................... SKIPPED
[INFO] Camel :: Example :: ETL ........................... SKIPPED
[INFO] Camel :: Example :: FTP ........................... SKIPPED
[INFO] Camel :: Example :: GAE ........................... SKIPPED
[INFO] Camel :: Example :: GAuth ......................... SKIPPED
[INFO] Camel :: Example :: Guice :: JMS .................. SKIPPED
[INFO] Camel :: Example :: JDBC .......................... SKIPPED
[INFO] Camel :: Example :: JMX ........................... SKIPPED
[INFO] Camel :: Example :: JMS-File ...................... SKIPPED
[INFO] Camel :: Example :: Load Balancing ................ SKIPPED
[INFO] Camel :: Example :: Loan-Broker ................... SKIPPED
[INFO] Camel :: Example :: Management .................... SKIPPED
[INFO] Camel :: Example :: MyBatis ....................... SKIPPED
[INFO] Camel :: Example :: Netty HTTP .................... SKIPPED
[INFO] Camel :: Example :: Netty HTTP :: Shared Netty HTTP Server  SKIPPED
[INFO] Camel :: Example :: Netty HTTP :: My Application One  SKIPPED
[INFO] Camel :: Example :: Netty HTTP :: My Application Two  SKIPPED
[INFO] Camel :: Example :: OSGi .......................... SKIPPED
[INFO] Camel :: Example :: OSGi RMI ...................... SKIPPED
[INFO] Camel :: Example :: POJO Messaging ................ SKIPPED
[INFO] Camel :: Example :: Report Incident ............... SKIPPED
[INFO] Camel :: Example :: Report Incident :: WS-Security  SKIPPED
[INFO] Camel :: Example :: Restlet :: JDBC ............... SKIPPED
[INFO] Camel :: Example :: Route :: Throttling ........... SKIPPED
[INFO] Camel :: Example :: Servlet REST Blueprint ........ SKIPPED
[INFO] Camel :: Example :: Servlet REST Tomcat ........... SKIPPED
[INFO] Camel :: Example :: Servlet Tomcat ................ SKIPPED
[INFO] Camel :: Example :: Servlet Tomcat :: Blueprint Web  SKIPPED
[INFO] Camel :: Example :: Servlet Tomcat without Spring . SKIPPED
[INFO] Camel :: Example :: Simple Jira Bot ............... SKIPPED
[INFO] Camel :: Example :: Simple Jira Bot :: Java DSL ... SKIPPED
[INFO] Camel :: Example :: Simple Jira Bot :: XML Configuration  SKIPPED
[INFO] Camel :: Example :: Spark REST Tomcat ............. SKIPPED
[INFO] Camel :: Example :: Splunk ........................ SKIPPED
[INFO] Camel :: Example :: Spring ........................ SKIPPED
[INFO] Camel :: Example :: Spring :: JavaConfig .......... SKIPPED
[INFO] Camel :: Example :: Spring :: JMS ................. SKIPPED
[INFO] Camel :: Example :: Spring :: Web Services ........ SKIPPED
[INFO] Camel :: Example :: Spring :: XQuery .............. SKIPPED
[INFO] Camel :: Example :: Spring :: Security ............ SKIPPED
[INFO] Camel :: Example :: SSH ........................... SKIPPED
[INFO] Camel :: Example :: SSH :: Security ............... SKIPPED
[INFO] Camel :: Example :: SQL ........................... SKIPPED
[INFO] Camel :: Example :: SQL :: Blueprint .............. SKIPPED
[INFO] Camel :: Example :: Tracer ........................ SKIPPED
[INFO] Camel :: Example :: Twitter WebSocket ............. SKIPPED
[INFO] Camel :: Example :: Twitter WebSocket using OSGi Blueprint  SKIPPED
[INFO] Camel :: Assembly ................................. SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 5.404s
[INFO] Finished at: Thu Aug 21 09:52:57 CEST 2014
[INFO] Final Memory: 133M/471M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-eclipse-plugin:2.9:eclipse (default-cli) on project spi-annotations: Unable to resolve resource location: /camel-eclipse-checkstyle -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.maven.plugins:maven-eclipse-plugin:2.9:eclipse (default-cli) on project spi-annotations: Unable to resolve resource location: /camel-eclipse-checkstyle
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)
Caused by: org.apache.maven.plugin.MojoExecutionException: Unable to resolve resource location: /camel-eclipse-checkstyle
	at org.apache.maven.plugin.eclipse.EclipsePlugin.writeAdditionalConfig(EclipsePlugin.java:1333)
	at org.apache.maven.plugin.eclipse.EclipsePlugin.writeConfiguration(EclipsePlugin.java:1234)
	at org.apache.maven.plugin.ide.AbstractIdeSupportMojo.execute(AbstractIdeSupportMojo.java:511)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
[ERROR] 
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :spi-annotations




and it seems to be related to this issue: https://issues.apache.org/jira/browse/CAMEL-3018


Maybe I'm doing something wrong, but I always been importing camel in that way.


Thanks,
Andrea","dkulp:1408600858:2014-08-21T14:00:58.624+0000:1408600858:2014-08-21T14:00:58.624+0000:Use the setup.eclipse profile:

{code}
mvn -Psetup.eclipse
{code}

You may need to pass the location of your workspace:

{code}
mvn -Psetup.eclipse -Declipse.workspace.dir=/path/to/your/workspace
{code}

to make sure all the checkstyle and things are wired in.  Somewhat documented at http://camel.apache.org/building.html

acosentino:1408601372:2014-08-21T14:09:32.575+0000:1408601384:2014-08-21T14:09:44.059+0000:Thanks Daniel, now it works.

I was just wondering why it was working, before the fetch from github repository, with simple

{code}
mvn eclipse:eclipse
{code}

Anyway thanks,
Bye,
Andrea"
0,CAMEL-7728,Improvement,Major,None,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,1,3,2014-08-21 03:43:05+00:00,2014-08-28 07:20:20+00:00,It could be useful for creating the instance if we can set up the TCCL with the camel application context class loader in the OSGi world.,"njiang:1408583197:2014-08-21T09:06:37.869+0000:1408583197:2014-08-21T09:06:37.869+0000:Applied the patch into master, camel-2.13.x and camel-2.12.x branches.
igarashitm:1409178639:2014-08-28T06:30:39.969+0000:1409178639:2014-08-28T06:30:39.969+0000:FYI - I needed to do CamelContext.setApplicationContextClassLoader() explicitly before adding route to get work with this fix. Apparently the CamelContext application context class loader is initialized with the class loader other than bundle deployment class loader on karaf by default.

The original TCCL at deploying SwitchYard quickstart bundle:
BundleClassLoader{bundle=[DelegatingBundle: [org.switchyard.quickstarts.switchyard-camel-mqtt-binding [246], org.ops4j.pax.cdi.weld [117], org.jboss.weld.osgi-bundle [115], org.switchyard.components.switchyard-component-bean [210], org.apache.deltaspike.core.deltaspike-core-api [118]]],parent=null}

ApplicationContextClassLoader in CamelContext:
org.apache.felix.framework.BundleWiringImpl@54f6b00e
njiang:1409180706:2014-08-28T07:05:06.352+0000:1409181017:2014-08-28T07:10:17.496+0000:Hi Tomohisa,

You need to setup the ApplicationContextClassLoader when you create the camel context. If you don't set that, camel will set it with the classloader which loads the camel class. I suggest you setup the bundle class loader when you create the camel context in the SwitchYard.

BTW, I will update the code in DefaultCamelContext to take the TCCL into consideration CAMEL-7759. If the TCCL is null, it just setup the ApplicationContextClassLoader with the class loader which load itself.
igarashitm:1409181620:2014-08-28T07:20:20.414+0000:1409181620:2014-08-28T07:20:20.414+0000:Thanks for the clarification, Willem! OK I'll add setting TCCL in SwitchYard route initialization - it will be unnecessary once CAMEL-7759 is implemented though :)"
0,CAMEL-7727,Improvement,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Cristiano Nicolai,0,3,2014-08-20 11:30:57+00:00,2014-09-05 07:09:39+00:00,InOnlyProducer and InOutProducer have similar code for borrowing MessageProducerResources from pool but different behavior for handling errors associated to it. Also InOnlyProducer does not apply the responsetimeout parameter as timeout for borrowing producer from pool. Moving this logic and error handling to SjmsProducer can remove duplicate code and provide same behavior for both classes.,"githubbot:1408505756:2014-08-20T11:35:56.521+0000:1408505756:2014-08-20T11:35:56.521+0000:GitHub user cristianonicolai opened a pull request:

    https://github.com/apache/camel/pull/245

    CAMEL-7727: Unify MessageProducerResources handling into SjmsProducer

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cristianonicolai/camel camel-7727

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/245.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #245
    
----
commit 3f11a6f7e0f2eaf6d29fff44382daaf149f31058
Author: Cristiano Nicolai <cristiano.nicolai@gmail.com>
Date:   2014-08-20T11:32:05Z

    CAMEL-7727: Unify MessageProducerResources handling into SjmsProducer

----

njiang:1408559794:2014-08-21T02:36:34.975+0000:1408559794:2014-08-21T02:36:34.975+0000:Applied the patch into camel master branch with thanks to Cristiano.
githubbot:1409872179:2014-09-05T07:09:39.685+0000:1409872179:2014-09-05T07:09:39.685+0000:Github user cristianonicolai closed the pull request at:

    https://github.com/apache/camel/pull/245
"
0,CAMEL-7726,Task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,2,2014-08-20 03:25:31+00:00,2014-09-05 06:55:08+00:00,"There are lots of unit test failed due to the camel-test-spring3 doesn't support the Spring4. When using Spring4 profile, these components doesn't pick up the camel-test-spring which support the spring4 test out of box.","githubbot:1408594966:2014-08-21T12:22:46.831+0000:1408594966:2014-08-21T12:22:46.831+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/247

    Fix for CAMEL-7726 added property for camel-test-spring artifactId to Fi...

    ...x the test failures of spring4 profile

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7726

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/247.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #247
    
----
commit 3adf0b700a9808472816b332f92e167efeed806f
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-08-21T12:21:15Z

    Fix for CAMEL-7726 added property for camel-test-spring artifactId to Fix the test failures of spring4 profile

----

githubbot:1409871308:2014-09-05T06:55:08.173+0000:1409871308:2014-09-05T06:55:08.173+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/247
"
0,CAMEL-7725,Improvement,Minor,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Edin Hodzic,0,2,2014-08-19 23:31:30+00:00,2014-08-22 05:44:36+00:00,"The startupOrder method is missing from the Scala DSL.


MyRoute.scala
import org.apache.camel.scala.dsl.builder.RouteBuilder

class MyRoute extends RouteBuilder {
  ""direct:start"" ==> {
    startupOrder(1) // this is not available
    to(""mock:end"")
  }
}




This is an important piece of functionality to have for any non-trivial route integration.","edinhodzic:1408462387:2014-08-19T23:33:07.516+0000:1408462387:2014-08-19T23:33:07.516+0000:Patch attached. This is my first patch on the project, didn't write a unit test but below is some code exercising the functionality.

{code:title=Main.scala}
object Main {

  import org.apache.camel.impl.DefaultCamelContext

  def main(args: Array[String]) {
    val context = new DefaultCamelContext
    context.addRoutes(new MyRoute(""one"", 3))
    context.addRoutes(new MyRoute(""two"", 2))
    context.addRoutes(new MyRoute(""three"", 1))
    context.start
  }

  import org.apache.camel.scala.dsl.builder.RouteBuilder

  class MyRoute(id: String, startupOrder: Int) extends RouteBuilder {
    s""direct:$id"" ==> {
      id(id)
      startupOrder(startupOrder) // this is now available
      to(""mock:end"")
    }
  }

}
{code}

And the output is:

{noformat}
[main] INFO DefaultCamelContext - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is starting
[main] INFO ManagedManagementStrategy - JMX is enabled
[main] INFO DefaultTypeConverter - Loaded 219 type converters
[main] INFO DefaultCamelContext - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
[main] INFO DefaultCamelContext - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[main] INFO DefaultCamelContext - Route: three started and consuming from: Endpoint[direct://three]
[main] INFO DefaultCamelContext - Route: two started and consuming from: Endpoint[direct://two]
[main] INFO DefaultCamelContext - Route: one started and consuming from: Endpoint[direct://one]
[main] INFO DefaultCamelContext - Total 3 routes, of which 3 is started.
[main] INFO DefaultCamelContext - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) started in 0.430 seconds
{noformat}
njiang:1408474471:2014-08-20T02:54:31.818+0000:1408474471:2014-08-20T02:54:31.818+0000:Applied the patch into camel master with thanks to Edin. I also added an unit test for it."
0,CAMEL-7724,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,3,2014-08-19 18:04:51+00:00,2014-08-22 06:12:44+00:00,"See SO
http://stackoverflow.com/questions/25366673/camel-bindy-set-default-value-for-boolean-field


And this code should support boolean/Boolean types
http://camel.apache.org/maven/camel-2.11.0/camel-bindy/apidocs/src-html/org/apache/camel/dataformat/bindy/FormatFactory.html","acosentino:1408603579:2014-08-21T14:46:19.611+0000:1408603579:2014-08-21T14:46:19.611+0000:I'd like to work on this improvement.

Andrea
githubbot:1408628532:2014-08-21T21:42:12.380+0000:1408628532:2014-08-21T21:42:12.380+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/250

    Improvement Camel-7724 camel-bindy - Add support for boolean data type formatter

    Hi,
    
    This PR is related to the improvement: https://issues.apache.org/jira/browse/CAMEL-7724
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel improvement-camel-7724

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/250.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #250
    
----
commit 6c66ed409dcfb50bfcbc1a696a1852ad6d044e96
Author: ancosen <ancosen@gmail.com>
Date:   2014-08-21T21:37:15Z

    Improvement Camel-7724 camel-bindy - Add support for boolean data type formatter

----

acosentino:1408628620:2014-08-21T21:43:40.151+0000:1408628620:2014-08-21T21:43:40.151+0000:PR submitted: https://github.com/apache/camel/pull/250

Thanks,

Bye,
Andrea
davsclaus:1408658886:2014-08-22T06:08:06.696+0000:1408658886:2014-08-22T06:08:06.696+0000:Thanks for the PR
githubbot:1408659164:2014-08-22T06:12:44.997+0000:1408659164:2014-08-22T06:12:44.997+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/250
"
0,CAMEL-7723,Improvement,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Cristiano Nicolai,0,3,2014-08-19 13:19:31+00:00,2014-09-07 09:26:58+00:00,"Similar to jms component behavior, been able to start and stop consumers and producers asynchronously ensures that starting a route or stopping won't get blocked by trying to establish a connection to remote broker or running some sort of failover logic.","githubbot:1408425761:2014-08-19T13:22:41.400+0000:1408425761:2014-08-19T13:22:41.400+0000:GitHub user cristianonicolai opened a pull request:

    https://github.com/apache/camel/pull/244

    CAMEL-7723: Support async start and stop for consumers and producers

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cristianonicolai/camel camel-7723

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/244.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #244
    
----
commit 1b27a80c2e1f6ad983a77d595e7b9c6f53695a87
Author: Cristiano Nicolai <cristiano.nicolai@gmail.com>
Date:   2014-08-19T13:21:00Z

    CAMEL-7723: Support async start and stop for consumers and producers

----

njiang:1408487691:2014-08-20T06:34:51.085+0000:1408487691:2014-08-20T06:34:51.085+0000:Applied the patch into camel master branch with thanks to Cristiano.
githubbot:1410053218:2014-09-07T09:26:58.752+0000:1410053218:2014-09-07T09:26:58.752+0000:Github user cristianonicolai closed the pull request at:

    https://github.com/apache/camel/pull/244
"
0,CAMEL-7722,Bug,Major,None,,"
None
",Resolved,Not A Problem,None,Willem Jiang,Tomohisa Igarashi,0,2,2014-08-19 08:52:46+00:00,2014-08-21 09:56:07+00:00,"Loading a file in the application bundle through TCCL fails if the route starts from MQTT consumer while it succeeds if it starts from file consumer. Apparently MQTT consumer executing thread should be using BundleDelegatingClassLoader like file consumer, but it's using sun.misc.Launcher$AppClassLoader.



2014-08-19 16:34:14,035 | INFO  | tmp/myfileinput/ | MyBean                           | apache.camel.example.mqtt.MyBean   25 | 124 - org.apache.camel.camel-example-mqtt - 2.12.2 | ##### ##### META-INF/myresource.txt>>>foobar ##### ##### ClassLoader=BundleDelegatingClassLoader(org.apache.camel.camel-example-mqtt [124])
2014-08-19 16:34:14,075 | ERROR | spatch-DEFAULT-2 | DefaultErrorHandler              | rg.apache.camel.util.CamelLogger  215 | 116 - org.apache.camel.camel-core - 2.12.2 | Failed delivery for (MessageId: ID-tomo-t530-47023-1408432602776-3-7 on ExchangeId: ID-tomo-t530-47023-1408432602776-3-8). Exhausted after delivery attempt: 1 caught: java.io.FileNotFoundException: ##### ##### META-INF/myresource.txt not found ##### ##### ClassLoader=sun.misc.Launcher$AppClassLoader@29d22104

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route4            ] [route4            ] [mqtt://input?password=xxxxxx&subscribeTopicName=testTopicIn&userName=karaf    ] [         3]
[route4            ] [removeProperty4   ] [removeProperty[MQTTTopicPropertyName]                                         ] [         0]
[route4            ] [bean4             ] [bean[ref:myBean]                                                              ] [         0]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
	Id                  ID-tomo-t530-47023-1408432602776-3-8
	ExchangePattern     InOnly
	Headers             {breadcrumbId=ID-tomo-t530-47023-1408432602776-3-7, CamelRedelivered=false, CamelRedeliveryCounter=0}
	BodyType            byte[]
	Body                test mqtt
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
java.io.FileNotFoundException: ##### ##### META-INF/myresource.txt not found ##### ##### ClassLoader=sun.misc.Launcher$AppClassLoader@29d22104
	at org.apache.camel.example.mqtt.MyBean.process(MyBean.java:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)[:1.7.0_65]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)[:1.7.0_65]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)[:1.7.0_65]
	at java.lang.reflect.Method.invoke(Method.java:606)[:1.7.0_65]
	at org.apache.camel.component.bean.MethodInfo.invoke(MethodInfo.java:407)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:278)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:251)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)[116:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.mqtt.MQTTConsumer.processExchange(MQTTConsumer.java:46)[122:org.apache.camel.camel-mqtt:2.12.2]
	at org.apache.camel.component.mqtt.MQTTEndpoint$1.onPublish(MQTTEndpoint.java:90)[122:org.apache.camel.camel-mqtt:2.12.2]
	at org.fusesource.mqtt.client.CallbackConnection.toReceiver(CallbackConnection.java:815)[118:org.fusesource.mqtt-client.mqtt-client:1.6]
	at org.fusesource.mqtt.client.CallbackConnection.processFrame(CallbackConnection.java:732)[118:org.fusesource.mqtt-client.mqtt-client:1.6]
	at org.fusesource.mqtt.client.CallbackConnection.access$1500(CallbackConnection.java:51)[118:org.fusesource.mqtt-client.mqtt-client:1.6]
	at org.fusesource.mqtt.client.CallbackConnection$6.onTransportCommand(CallbackConnection.java:392)[118:org.fusesource.mqtt-client.mqtt-client:1.6]
	at org.fusesource.hawtdispatch.transport.TcpTransport.drainInbound(TcpTransport.java:664)[120:org.fusesource.hawtdispatch.hawtdispatch-transport:1.18.0]
	at org.fusesource.hawtdispatch.transport.TcpTransport$6.run(TcpTransport.java:543)[120:org.fusesource.hawtdispatch.hawtdispatch-transport:1.18.0]
	at org.fusesource.hawtdispatch.internal.NioDispatchSource$3.run(NioDispatchSource.java:209)[119:org.fusesource.hawtdispatch.hawtdispatch:1.18.0]
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.run(SerialDispatchQueue.java:100)[119:org.fusesource.hawtdispatch.hawtdispatch:1.18.0]
	at org.fusesource.hawtdispatch.internal.pool.SimpleThread.run(SimpleThread.java:77)[119:org.fusesource.hawtdispatch.hawtdispatch:1.18.0]




I'll attach a reproducer soon.","igarashitm:1408409894:2014-08-19T08:58:14.352+0000:1408409894:2014-08-19T08:58:14.352+0000:See README.txt in the [^camel-example-mqtt.tar.gz] for instructions
njiang:1408487317:2014-08-20T06:28:37.383+0000:1408487317:2014-08-20T06:28:37.383+0000:Hi Tomohisa,

You cannot assume that all the TCCL is set with the BundleDelegatingClassLoader, as there are some thread which mqtt consumer is using is out of control of camel. It's not a issue of camel-mqtt. 
To resolve this kind of issue, CamelContext provides a method getApplicationContextClassLoader to find the classloader which is load the application. You can let MyBean to use that classloader by lookup the camel context from the exchange.

Regards,
Willem
igarashitm:1408489597:2014-08-20T07:06:37.986+0000:1408489597:2014-08-20T07:06:37.986+0000:Hi Willem,

I think it will be solved if it just set the application context class loader as a TCCL here:
https://github.com/apache/camel/blob/master/components/camel-mqtt/src/main/java/org/apache/camel/component/mqtt/MQTTEndpoint.java#L86
Isn't it acceptable for camel-mqtt?

FWIW, The real issue we hit is following, we got ""Unable to find BeanManager"" on execution due to the class loader difference.
https://issues.jboss.org/browse/SWITCHYARD-2220
In this case, we can't control the class loader from outside of camel-mqtt. This is a fatal issue as SwitchYard is deeply integrated with CDI.

Thanks,
Tomo
njiang:1408556722:2014-08-21T01:45:22.009+0000:1408557209:2014-08-21T01:53:29.932+0000:Hi Tomo,

Even we set the application context class loader to the TCCL as you suggested, we may still hit the issue if the calling thread is switched.
As I said, you need to find the way to setup the TCCL before calling the bean method.  I just have a quick look at the quick start, you may need to setup the TCCL yourself when the greeting service is called.

Regards,

Willem

igarashitm:1408560111:2014-08-21T02:41:51.176+0000:1408560308:2014-08-21T02:45:08.386+0000:What do you mean by ""calling thread is switched""? If you mean like adding threads(2) in a route, then application can control the TCCL in a route. However, the stacktrace in SWITCHYARD-2220 shows the camel CdiInjector is looking for BeanManager at very beginning of camel exchange. Application can't touch the TCCL before it happens.
As far as I know, only mqtt component has this problem. other consumers run with bundle class loader as a TCCL.
njiang:1408564001:2014-08-21T03:46:41.324+0000:1408564001:2014-08-21T03:46:41.324+0000:In camel EIP,  split, multicast, threads could switch the calling thread in camel route.  With the help of the Camel interceptor, we can setup the TCCL from the camel route. 
After digging the stack trace of SWITCHYARD-2220, we could set up the TCCL before the BaseResolver create the instance, to let the CdiInject work rightly. In this way we don't need to setup the TCCL from the component consumer side.  

So I created a new JIRA CAMEL-7728 to address the issue SWITCHYARD-2220.
igarashitm:1408564869:2014-08-21T04:01:09.965+0000:1408564869:2014-08-21T04:01:09.965+0000:Thank you for your help on this, Willem! I'm looking forward to having CAMEL-7728.
njiang:1408586167:2014-08-21T09:56:07.532+0000:1408586167:2014-08-21T09:56:07.532+0000:Hi Tomo,

I commit the patch of CAMEL-7728 into camel master branch. 
You can verify it by applying the patch into the camel code repository that Switchyard is using.
Please let me know if you have any further question about it.

Regards,

Willem"
0,CAMEL-7721,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-08-19 07:27:22+00:00,2014-08-20 06:32:30+00:00,It could be handy if we can setup the SAXParserFactory from the exchange property.,"njiang:1408487533:2014-08-20T06:32:13.559+0000:1408487550:2014-08-20T06:32:30.726+0000:Now you can set the SaxParserFactory by setting exchange property with key ""*CamelSaxParserFactory*"", XmlConverter can use it if possible."
0,CAMEL-7720,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-08-19 07:26:08+00:00,2014-08-20 06:31:27+00:00,It could be handy if we can let the end user setup the DocumentBuilderFactory from the exchange property.,"njiang:1408487487:2014-08-20T06:31:27.962+0000:1408487487:2014-08-20T06:31:27.962+0000:Now you can set the DocumentBuilderFactory by setting exchange property with key ""*CamelDocumentBuilderFactory*"", XmlConverter can use it if possible."
0,CAMEL-7719,Improvement,Major,None,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-08-19 06:55:26+00:00,2014-08-20 06:46:41+00:00,In this way can get the control of setting up the SAXParser to enable the security feature by default.,"njiang:1408488361:2014-08-20T06:46:01.374+0000:1408488361:2014-08-20T06:46:01.374+0000:Applied the patch camel master , camel-2.13.x and camel-2.12.x.
"
0,CAMEL-7718,Bug,Major,2.13.2,None,"
None
",Resolved,Fixed,"2.13.3, 2.14.0",Willem Jiang,Roman jakubco,0,3,2014-08-19 06:54:28+00:00,2014-08-20 01:55:09+00:00,"Constants used for setting headers in camel-infinispan are not accessible in application because class containing them  is not public. 


These constants are used in unit tests and also in example in the documentation of the component, so it seems this is minor mistake and also a bug.","githubbot:1408411158:2014-08-19T09:19:18.193+0000:1408411158:2014-08-19T09:19:18.193+0000:GitHub user romanjakubco opened a pull request:

    https://github.com/apache/camel/pull/243

    CAMEL-7718 Constants used in camel-infinispan component have restricted access

    https://issues.apache.org/jira/browse/CAMEL-7718

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/romanjakubco/camel CAMEL-7718

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/243.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #243
    
----
commit 8945cf1863f43fbe79948f7b51f9b5f51e906bbd
Author: Roman Jakubco <rjakubco@redhat.com>
Date:   2014-08-19T09:05:32Z

    CAMEL-7718 Constants used in camel-infinispan component have restricted access

----

githubbot:1408414289:2014-08-19T10:11:29.414+0000:1408414289:2014-08-19T10:11:29.414+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/243

njiang:1408470909:2014-08-20T01:55:09.564+0000:1408470909:2014-08-20T01:55:09.564+0000:Applied the patch into apache camel master and camel-2.13.x branches."
0,CAMEL-7717,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-19 06:29:56+00:00,2014-08-19 06:30:27+00:00,This component does not support consumer so we should tell the user that.,
0,CAMEL-7716,Improvement,Minor,2.13.2,2.15.0,"
None
",Resolved,Fixed,2.15.0,Unassigned,Daniel Gredler,1,5,2014-08-19 01:53:13+00:00,2014-12-03 12:12:59+00:00,"The camel-csv component depends on a servicemix snapshot of the Apache CSV library because Apache CSV did not have an official release.


However, last week Apache CSV 1.0 was released, so the camel-csv component should be updated to depend on the official release.


http://commons.apache.org/proper/commons-csv/changes-report.html","muellerc:1408408017:2014-08-19T08:26:57.078+0000:1408408017:2014-08-19T08:26:57.078+0000:It's available in Maven Central (http://search.maven.org/#artifactdetails|org.apache.commons|commons-csv|1.0|jar) and it's an OSGI bundle. Let's do it for the trunk.
Will work on it later today.
muellerc:1408540422:2014-08-20T21:13:42.231+0000:1408540422:2014-08-20T21:13:42.231+0000:commons-csv 1.0 changed a lot the public API and it requires some work to adapt the Camel component. Will pick up this ticket if I have more time or somebody provides a patch...
githubbot:1412149249:2014-10-01T15:40:49.608+0000:1412149249:2014-10-01T15:40:49.608+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/292

    CAMEL-7716 Migrate camel-csv component to Apache CSV 1.0

    It's a pretty big update since the base API of commons-csv has changed too (completely other objects, fluent api...).
    
    If it's too big we can create another data format called csv1 since it's the first official version of commons-csv.
    
    By the way, I've used JDK7 (try-with-resources and diamond operator) but checkstyle doesn't like it :(

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-7716

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/292.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #292
    
----
commit 3ec304329d429a4fdc899443fb03113bf1aa2d8f
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2014-10-01T15:32:43Z

    CAMEL-7716 Migrate camel-csv component to Apache CSV 1.0

----

githubbot:1416989272:2014-11-26T16:07:52.741+0000:1416989272:2014-11-26T16:07:52.741+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/292

sdanig:1417171153:2014-11-28T18:39:13.654+0000:1417171153:2014-11-28T18:39:13.654+0000:Commons CSV 1.1 has since been released with a number of bug fixes and small additions to the API... it may make sense to upgrade directly to 1.1 instead of 1.0:

http://commons.apache.org/proper/commons-csv/changes-report.html#a1.1
antoine.dessaigne:1417173059:2014-11-28T19:10:59.049+0000:1417173059:2014-11-28T19:10:59.049+0000:Hi,

In fact, this already is the case. I wrote a pull request for this issue that got accepted and it uses commons-csv 1.1. I'll update the documentation in a few days."
0,CAMEL-7715,Bug,Major,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Cristiano Nicolai,0,3,2014-08-19 00:37:45+00:00,2014-09-05 07:09:36+00:00,"SjmsConsumer and SjmsProducer always register a new ThreadPool on Camel context ExecutorServiceManager every time a new instance is created for an endpoint.  If consumer or producer is stopped or removed or even component is removed, thread pool still exists.","githubbot:1408382696:2014-08-19T01:24:56.295+0000:1408382696:2014-08-19T01:24:56.295+0000:GitHub user cristianonicolai opened a pull request:

    https://github.com/apache/camel/pull/242

    CAMEL-7715: Fix SJMS ThreadPool for SjmsConsumer and SjmsProducer.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/cristianonicolai/camel camel-7715

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/242.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #242
    
----
commit f90c8967c573226bdf0ede8656b91ea5f34b5960
Author: Cristiano Nicolai <cristiano.nicolai@gmail.com>
Date:   2014-08-19T01:21:24Z

    CAMEL-7715: Fix SJMS ThreadPool for SjmsConsumer and SjmsProducer.

----

njiang:1408485081:2014-08-20T05:51:21.217+0000:1408485081:2014-08-20T05:51:21.217+0000:Applied the patch into master, camel-2.13.x and camel-2.12.x branch with thanks to Cristiano.
githubbot:1409872176:2014-09-05T07:09:36.412+0000:1409872176:2014-09-05T07:09:36.412+0000:Github user cristianonicolai closed the pull request at:

    https://github.com/apache/camel/pull/242
"
0,CAMEL-7714,Bug,Minor,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-08-18 07:12:26+00:00,2014-08-18 07:50:49+00:00,"If setting a route or camel context to autoStartup=false, and then advicing that route, then it will always be started.


We should honor the auto startup option and only start it if that option is default or true.",
0,CAMEL-7683,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,ayache khettar,0,5,2014-08-12 08:38:19+00:00,2019-12-19 17:29:56+00:00,"Hi


camel-hbase uses a very old version of base (094.0). The latest version of base is 0.98 and so much has gone through and besides it uses hadoop version 2.4 as opposed to 1.2. I am currently working on an upgrade of this component, once happy I will submit a patch upgrade for you to review.


Regards,


Ayache","joed:1409643531:2014-09-02T15:38:51.569+0000:1409643531:2014-09-02T15:38:51.569+0000:This feature will work with quite a bit newer versions.
<features name=""com.packt.chapter.nine-${project.version}"">

    <repository>mvn:org.apache.cxf.karaf/apache-cxf/3.0.0/xml/features</repository>

    <feature name='xml-specs-api' version='${project.version}' resolver='(obr)' start-level='10'>
        <bundle dependency='true'>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activation-api-1.1/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.2/</bundle>
        <bundle>mvn:org.codehaus.woodstox/stax2-api/</bundle>
        <bundle>mvn:org.codehaus.woodstox/woodstox-core-asl/</bundle>
        <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/</bundle>
    </feature>

    <feature name='hdfs2' version='${project.version}' resolver='(obr)' start-level='50'>
        <feature>xml-specs-api</feature>
        <feature>cxf-jaxrs</feature>
        <bundle dependency='true'>mvn:commons-lang/commons-lang/2.6</bundle>
        <bundle dependency='true'>mvn:com.google.guava/guava/16.0.1</bundle>
        <bundle dependency='true'>mvn:com.google.protobuf/protobuf-java/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.guice/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jsch/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.paranamer/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.avro/1.7.3_1</bundle>
        <bundle dependency='true'>mvn:org.apache.commons/commons-compress/</bundle>
        <bundle dependency='true'>mvn:org.apache.commons/commons-math3/3.1.1</bundle>
        <bundle dependency='true'>mvn:commons-cli/commons-cli/1.2</bundle>
        <bundle dependency='true'>mvn:commons-configuration/commons-configuration/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.commons-httpclient/</bundle>
        <bundle dependency='true'>mvn:io.netty/netty/3.9.2.Final</bundle>
        <bundle dependency='true'>mvn:org.codehaus.jackson/jackson-core-asl/1.9.12</bundle>
        <bundle dependency='true'>mvn:org.codehaus.jackson/jackson-mapper-asl/1.9.12</bundle>
        <bundle dependency=""true"">mvn:org.codehaus.jackson/jackson-jaxrs/1.9.12</bundle>
        <bundle dependency=""true"">mvn:org.codehaus.jackson/jackson-xc/1.9.12</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.snappy-java</bundle>
        <bundle dependency='true'>mvn:commons-codec/commons-codec/</bundle>
        <bundle dependency='true'>mvn:commons-collections/commons-collections/3.2.1</bundle>
        <bundle dependency='true'>mvn:commons-io/commons-io/</bundle>
        <bundle dependency='true'>mvn:commons-net/commons-net/</bundle>
        <bundle dependency='true'>mvn:org.apache.zookeeper/zookeeper/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlenc/0.52_1</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xerces/</bundle>
        <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlresolver/</bundle>
        <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-client/</bundle>
    </feature>

</features>
akhettar:1409647018:2014-09-02T16:36:58.535+0000:1409647200:2014-09-02T16:40:00.383+0000:Thanks Johan for the input. It's not just a matter of working out the right dependencies in the feature. There has been lots of changes in hbase-client: 
1- Hadoop-core is no longer used, hadoop client is used instead
2- Classes under the org.apache.camel.componnet.hbase.filters need to use composition as opposed to inheritance for it to compile.
3- Some minor changes to hbase-client osgi imports.
4- Some minor changes to the hbase-protocol which is exposing com.google.protobuf package as well as org.apache.hbase and the classLoader isn't able to load classes defined in package com.google.protobuf - I have raised a ticket for this:  https://issues.apache.org/jira/browse/HBASE-11875

In short, I have a working solution but I have not tested every feature of the camel-hbase component, certainly not the filtering feature of hbase. But writing and Querying without filtering is working fine with Hbase 0.98 and Hadoop 2.4. I will be submitting my working solution hopefully when I get time this week.

Regards,

Ayache
jbonofre:1426592176:2015-03-17T19:36:16.643+0000:1426592176:2015-03-17T19:36:16.643+0000:I just did the upgrade to HBase 0.98.0-hadoop2 for a customer. I gonna push it.
jbonofre:1427075335:2015-03-23T09:48:55.671+0000:1427075335:2015-03-23T09:48:55.671+0000:This is the update. I have to fix the utests and it's done. I will do that later today.
jbonofre:1427075359:2015-03-23T09:49:19.312+0000:1427075359:2015-03-23T09:49:19.312+0000:I will update the Camel Karaf features XML as well.
woj_in:1437695605:2015-07-24T07:53:25.853+0000:1437695605:2015-07-24T07:53:25.853+0000:I also prepared a patch. Please review and comimt it.
woj_in:1437963050:2015-07-27T10:10:50.500+0000:1576747796:2019-12-19T17:29:56.632+0000:[~ggrzybek] [~muellerc] could you review the patch? https://issues.apache.org/jira/secure/attachment/12746981/CAMEL-7683.1.patch
davsclaus:1437963420:2015-07-27T10:17:00.046+0000:1437963420:2015-07-27T10:17:00.046+0000:Please do not change the artifact id in the camel component

 <artifactId>camel-hbase-${hbase-version}</artifactId>

It should stay the same as before.
woj_in:1437970610:2015-07-27T12:16:50.363+0000:1437970636:2015-07-27T12:17:16.170+0000:[~davsclaus] you're right, I forgot about it. I've corrected it in a new version (2) of the patch. Could you review it?
davsclaus:1438041418:2015-07-28T07:56:58.661+0000:1438041418:2015-07-28T07:56:58.661+0000:Thanks for the patch.

I had to fight OSGi as the smx bundle had a bug. I logged a ticket but found a workaround.
woj_in:1438067643:2015-07-28T15:14:03.750+0000:1438067643:2015-07-28T15:14:03.750+0000:You are welcome! The patch has been granted by [Agora S.A. | http://www.agora.pl ] . [~davsclaus] Could you put such note in a release note?"
0,CAMEL-7682,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-08-12 07:41:34+00:00,2014-08-12 08:11:52+00:00,"Camel bean component has the  multiParameterArray option, but we cannot set this option with the bean DSL.",njiang:1407802312:2014-08-12T08:11:52.475+0000:1407802312:2014-08-12T08:11:52.475+0000:Applied the patch camel master branch.
0,CAMEL-7681,New Feature,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Sébastien Brousse,0,3,2014-08-11 20:43:28+00:00,2014-08-13 08:44:23+00:00,"Hi,


It would be nice if the ES component could support the bulk mode to index several documents in one row in a faster and more performant way.


I propose a new operation named BULK_INDEX.
The incoming body would be a List of any type that is already accepted (XContentBuilder, Map, byte[], String). Or simply a Collection may be, if a List is too narrow-minded.


The result could be a List of the id of the successfully indexed documents.


Have you any tips on the way you usely treat this kind of operation","githubbot:1407767066:2014-08-11T22:24:26.728+0000:1407767066:2014-08-11T22:24:26.728+0000:GitHub user sebbrousse opened a pull request:

    https://github.com/apache/camel/pull/235

    Fix CAMEL-7681 : Add Bulk Index mode to Elasticsearch component

    Add BULK_INDEX method
    Add unit test that index 2 Map in a row

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sebbrousse/camel CAMEL-7681

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/235.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #235
    
----
commit d09e71aeec1b9dfb33782d9ce48fb1f6c80fbead
Author: sebbrousse <seb.brousse@gmail.com>
Date:   2014-08-11T21:15:52Z

    Fix CAMEL-7681 : Add Bulk Index mode to Elasticsearch component
    Add BULK_INDEX method
    Add unit test that index 2 Map in a row

----

njiang:1407890305:2014-08-13T08:38:25.068+0000:1407890305:2014-08-13T08:38:25.068+0000:Applied the patch with thanks to Sébastien, I also updated the camel-elasticsearch wiki page for the new added option.

seb_brousse:1407890611:2014-08-13T08:43:31.429+0000:1407890611:2014-08-13T08:43:31.429+0000:I was going to ask you the best way to update the documentation but you were faster. Thanks !
githubbot:1407890663:2014-08-13T08:44:23.777+0000:1407890663:2014-08-13T08:44:23.777+0000:Github user sebbrousse closed the pull request at:

    https://github.com/apache/camel/pull/235
"
0,CAMEL-7680,Improvement,Minor,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Sébastien Brousse,0,3,2014-08-11 18:26:02+00:00,2014-08-11 18:55:08+00:00,"Hi,


When I stop my route, the component throws a NPE in the log. Considering the source code (ElasticsearchEndpoint class), it seems that the node field (Line 96) is not assigned when the ip parameter is set.


StackTrace is attached.","githubbot:1407753718:2014-08-11T18:41:58.289+0000:1407753718:2014-08-11T18:41:58.289+0000:GitHub user sebbrousse opened a pull request:

    https://github.com/apache/camel/pull/234

    Fix CAMEL-7680 : Throw NPE when stopping if transport client is used

    Protecting an unassigned field when component is stopped

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sebbrousse/camel CAMEL-7680

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/234.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #234
    
----
commit fe35d1be5d7f8afc4b0c64b40a557931fcc6c802
Author: sebbrousse <seb.brousse@gmail.com>
Date:   2014-08-11T18:39:11Z

    Fix CAMEL-7680 : Throw NPE when stopping if transport client is used

----

seb_brousse:1407753816:2014-08-11T18:43:36.315+0000:1407753816:2014-08-11T18:43:36.315+0000:I propose a (very simple) patch on github (PR #234). I could not imagine any unit test to add with the patch. 
davsclaus:1407754466:2014-08-11T18:54:26.187+0000:1407754466:2014-08-11T18:54:26.187+0000:Thanks
githubbot:1407754508:2014-08-11T18:55:08.209+0000:1407754508:2014-08-11T18:55:08.209+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/234
"
0,CAMEL-7679,Bug,Major,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Alexey Markevich,0,2,2014-08-11 13:58:45+00:00,2014-08-12 08:11:20+00:00,No Desc,"njiang:1407740287:2014-08-11T14:58:07.390+0000:1407740287:2014-08-11T14:58:07.390+0000:You can work around this issue by converting the message body into an Object Array and setup the message header of ""CamelBeanMultiParameterArray"" to be true, just like this.
{code}
from(""cxfrs://http://0.0.0.0:8080?resourceClasses=org.apache.camel.bug.Service&loggingFeatureEnabled=true"")
					.to(""log:cxfrs8080"").process(new Processor() {

                        @Override
                        public void process(Exchange exchange) throws Exception {
                            List<Object> parameter = exchange.getIn().getBody(List.class);
                            exchange.getIn().setBody(parameter.toArray());
                            exchange.getIn().setHeader(""CamelBeanMultiParameterArray"", true);
                        }
                    }).bean(org.apache.camel.bug.ServiceUtil.class, ""invoke"");
{code}
I will update the camel bean method to leverage the camel converter to get the Object array by default.
njiang:1407802280:2014-08-12T08:11:20.766+0000:1407802280:2014-08-12T08:11:20.766+0000:I just committed a quick fix of it, now the route could be like this
{code}
from(CXF_RS_ENDPOINT_URI).to(""bean://service?multiParameterArray=true"");
{code}

If you want to use the bean DSL, you need to wait for camel 2.14.0 which has the patch of CAMEL-7682."
0,CAMEL-7678,Bug,Major,2.13.2,"2.14.3, 2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.14.3, 2.15.3, 2.16.0",Willem Jiang,Edward Ost,0,3,2014-08-11 13:17:49+00:00,2015-04-30 07:07:52+00:00,"The camel-rabbitmq requires a mandatory amqp exchange as the first parameter in the URI.  Other options are specfied after the ""?.  This is appropriate for producers, but not for consumers.  Subscribers should specify the queue name as the first parameter.","davsclaus:1407810240:2014-08-12T10:24:00.866+0000:1407810240:2014-08-12T10:24:00.866+0000:Can you maybe provide some examples to better explain what you see as a problem?
reusable:1415918750:2014-11-14T06:45:50.367+0000:1415930118:2014-11-14T09:55:18.462+0000:I think [~edwardost] is refering to the RabbitMQ's default exchange, where the default exchange is specify with empty string.  I use camel-rabbitmq just two days ago, and i encounter that i am unable to define a <from> route with the rabbitmq default exchange as following:
{quote}
<camelContext xmlns=""http://camel.apache.org/schema/spring"">
  <route>
    <from uri=""rabbitmq://localhost?routingKey=ad_google_dfa_reporting_queue""/>
{quote}

Following is the Java exception stack
{noformat}
Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint, the URI is rabbitmq://localhost?routingKey=ad_google_dfa_reporting_queue
	at org.apache.camel.component.rabbitmq.RabbitMQComponent.createEndpoint(RabbitMQComponent.java:50)
	at org.apache.camel.component.rabbitmq.RabbitMQComponent.createEndpoint(RabbitMQComponent.java:31)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:122)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:525)
{noformat}
instead, the following is required:
{quote}
<from uri=""rabbitmq://localhost/*adserver*?routingKey=ad_google_dfa_reporting_queue""/>
{quote}
davsclaus:1417331120:2014-11-30T15:05:20.975+0000:1417331120:2014-11-30T15:05:20.975+0000:Can you guys try with latest release as we have fixed stuff in camel-rabbitmq
reusable:1417800097:2014-12-06T01:21:37.670+0000:1417800097:2014-12-06T01:21:37.670+0000:[~davsclaus]

I am using the latest release, v2.14.0. "
0,CAMEL-7677,Improvement,Major,None,"3.0.0.RC1, 3.0.0","
None
",Resolved,Fixed,"3.0.0.RC1, 3.0.0",Claus Ibsen,Claus Ibsen,0,2,2014-08-11 07:38:34+00:00,2019-07-30 13:40:43+00:00,"See nabble
http://camel.465427.n5.nabble.com/How-to-remove-intercept-or-process-from-superclass-with-adviceWith-tp5753834p5753951.html


Take a look at what it would take to try to support interceptors/onException etc with the advice with, so people can remove / add / modify those as well on their adviced routes.",
0,CAMEL-7676,Bug,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-11 07:36:08+00:00,2014-08-22 15:11:20+00:00,"Take a look at #3 this to see if its reproducable on latest code
http://camel.465427.n5.nabble.com/Camel-AdviceWith-issues-tp5752786.html",davsclaus:1408691480:2014-08-22T15:11:20.332+0000:1408691480:2014-08-22T15:11:20.332+0000:We have fixed this recently.
0,CAMEL-7675,Sub-task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-10 09:19:43+00:00,2014-08-11 13:45:48+00:00,"Add a new camel-swagger module that supports the new Rest DSL, so we can output the rest apis using swagger.","davsclaus:1407718332:2014-08-11T08:52:12.918+0000:1407718332:2014-08-11T08:52:12.918+0000:There is a new module
http://camel.apache.org/swagger"
0,CAMEL-7674,Bug,Major,2.13.2,,"
None
",Resolved,Fixed,None,Willem Jiang,Hendy Irawan,0,2,2014-08-10 05:45:39+00:00,2014-08-15 10:13:20+00:00,"From the doc http://camel.apache.org/facebook.html :



To poll, every 5 sec., all statuses on your home feed:
from(""facebook://home?delay=5"")
    .to(""bean:blah"");




But attempting to set delay parameter throws:


There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[{delay=60}]


Additionally, the delay was never mentioned in the parameters documentation.","njiang:1407715195:2014-08-11T07:59:55.559+0000:1407715195:2014-08-11T07:59:55.559+0000:It should be ""consumer.delay"" not ""delay"". 
You can find more information about it [here|http://camel.apache.org/polling-consumer.html].
njiang:1407715629:2014-08-11T08:07:09.629+0000:1407715629:2014-08-11T08:07:09.629+0000:I just updated the wiki page example code.
ceefour:1407720196:2014-08-11T09:23:16.418+0000:1407720196:2014-08-11T09:23:16.418+0000:Thanks [~njiang] but please re-update the example code: consumer.delay=5 means  5 milliseconds, not 5 seconds as intended.
njiang:1408067609:2014-08-15T09:53:29.430+0000:1408067609:2014-08-15T09:53:29.430+0000:I just updated the example code to consumer.delay=5000.
ceefour:1408068800:2014-08-15T10:13:20.150+0000:1408068800:2014-08-15T10:13:20.150+0000:Thank you [~njiang] :)"
0,CAMEL-7673,Bug,Major,"2.12.2, 2.14.0",2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Tomohisa Igarashi,0,3,2014-08-09 07:35:34+00:00,2015-01-12 09:06:47+00:00,"MQTT consumer sets its subscribeTopicName as a exchange property, and it will be used by MQTT producer as a destination if it exists in the route.


If you have a following route:



from(""mqtt:input?subscribeTopicName=topicIn"")
        .to(""mqtt:output?publishTopicName=topicOut"");




MQTT consumer put ""topicIn"" to ""MQTTTopicPropertyName"" exchange property, and MQTT producer uses this property to determine a destination topic to publish. Then MQTT producer ignores publishTopicName and send a message to ""topicIn"", so MQTT consumer consumes the message again, eventually it causes infinite delivery. We need to stop this property to be used as a destination for producer.","njiang:1407698357:2014-08-11T03:19:17.295+0000:1407698357:2014-08-11T03:19:17.295+0000:You can workaround this issue by changing the route like this
{code}
from(""mqtt:input?subscribeTopicName=topicIn"")
        .removeProperty(""MQTTTopicPropertyName"")
        .to(""mqtt:output?publishTopicName=topicOut"");
{code}
I will add an option ""bridgeEndpoint"" to  the mqtt component to ignore the property header if the ""bridgeEndpoint"" option is true.

davsclaus:1407708174:2014-08-11T06:02:54.412+0000:1407708174:2014-08-11T06:02:54.412+0000:I think it should be similar as we do in camel-jms. 

The component should work out of the box as camel-jms would do, and only if you want to send a message to a special topic you need to use a special header - as done in camel-jms.

We talked about this on the mailing list

igarashitm:1407709354:2014-08-11T06:22:34.087+0000:1407709424:2014-08-11T06:23:44.065+0000:I think the problem is that MQTT consumer and producer are using same property for different purpose, consumer set its susbcribeTopicName into the property so application can read it to know the topic name, and producer use the property for destination. I would prefer to use different property name for those since producer never sends back to the topic which is subscribed by consumer, otherwise it causes infinite delivery.
igarashitm:1407709893:2014-08-11T06:31:33.758+0000:1407709893:2014-08-11T06:31:33.758+0000:I would give +1 that the topic name property should be removed after it's used by producer as done in camel-jms producer btw.
njiang:1407957018:2014-08-14T03:10:18.592+0000:1407957018:2014-08-14T03:10:18.592+0000:I just take a look at the camel-jms component, it just put the destination into the message header with ""JMSDestination"" in the consumer and use ""CamelJMSDestination"" in the producer, so it doesn't hit the issue like of mqtt component.

For the camel-rabbitmq, the consumer and producer use the same message header name of ""RabbitMQConstants.EXCHANGE_NAME"" and ""RabbitMQConstants.ROUTING_KEY"" so we use  ""bridgeEndpoint"" to avoid this kind of issue.

As the mqtt consumer and producer treat the ""MQTTTopicPropertyName"" differently, I'm +1 for  consumer and producer use different header name to store the topic,  and we need put that information into message header instead of exchange property.
njiang:1409094099:2014-08-27T07:01:39.498+0000:1409094099:2014-08-27T07:01:39.498+0000:Introduced CamelMQTTSubscribeTopic for MQTTConsumer and CamelMQTTPublishTopic MQTTProducer in camel master branch."
0,CAMEL-7672,New Feature,Minor,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,Onder Sezgin,Claus Ibsen,0,2,2014-08-09 06:39:45+00:00,2017-09-12 14:06:03+00:00,"See nabble
http://camel.465427.n5.nabble.com/Missing-headers-when-using-Stomp-request-reply-tp5754917.html


This component does not support so many of the stomp headers. Also we may want to map Camel headers to properties so they get propagated and send with the stomp message.


We would need to have a header mapping ala we have with the camel-jms component, and a default implementation. Then people can configure a custom impl for special cases.","githubbot:1410943821:2014-09-17T16:50:21.567+0000:1410943821:2014-09-17T16:50:21.567+0000:GitHub user jgquinn opened a pull request:

    https://github.com/apache/camel/pull/267

    CAMEL-7672 copy message headers that do not begin with 'camel' into STOMP frame headers

    CAMEL-7672 copy message headers that do not begin with 'camel' into STOMP frame headers

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jgquinn/camel CAMEL-7672

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/267.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #267
    
----
commit 49450c991e9cb6612d951be00cf49ec6a1cb8fa4
Author: Ryan Calder <ryan@jgquinn.com>
Date:   2014-09-17T16:46:02Z

    CAMEL-7672 copy message headers that do not begin with 'camel' into STOMP frame headers

----

githubbot:1430999643:2015-05-07T19:54:03.254+0000:1430999643:2015-05-07T19:54:03.254+0000:Github user jgquinn closed the pull request at:

    https://github.com/apache/camel/pull/267

githubbot:1494303011:2017-05-09T12:10:11.217+0000:1494303011:2017-05-09T12:10:11.217+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1680

    CAMEL-7672- use of HeaderFilterStrategy to send message headers as stomp frames

    reimplemented what is tried to achieve in this pull request.
    
    https://github.com/apache/camel/pull/267

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-7672

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1680.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1680
    
----
commit 13f5b684e90b203cf78413fc96c4200f39d250f2
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-09T12:02:36Z

    CAMEL-7672- use of HeaderFilterStrategy to send message headers as stomp frames

commit 28cf1a812d11bfcc840c58a04be3f09d5adf047b
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-05-09T12:06:32Z

    CAMEL-7672- use of HeaderFilterStrategy to send message headers as stomp frames

----

githubbot:1494473757:2017-05-11T11:35:57.612+0000:1494473757:2017-05-11T11:35:57.612+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1680
"
0,CAMEL-7671,New Feature,Major,None,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Claus Ibsen,0,1,2014-08-08 07:57:12+00:00,2019-07-28 08:37:36+00:00,"We have a rest registry from CAMEL-7620. But we could consider making this more generic as a Api registry that components can enlist consumers (or producers), and details about the data types (apis) they support.


We can then have some open type format where each component has a json schema that defines the open type, which we can map to JMX opentypes so the JMX tabular browser can support any kind of types.


Then this json schema can be retrieved as well so tooling and others can use that to understand those types. And/or we can add a DTO class in the component that maps to this json schema type also, so we also have a java type safe representation too.


Though this ticket is just to capture this idea. We may want to ponder a bit more about this.",
0,CAMEL-7670,Bug,Blocker,2.13.1,,"

security

",Closed,Won't Fix,None,Claus Ibsen,Ishara,0,2,2014-08-08 05:42:45+00:00,2014-08-08 05:51:39+00:00,"Bug scenario includes a route which has a password set to it.
In addition to other values set to route, password is set in plain text.
And when the schedules are started, camel log printes the password to log during DEBUG level.


During INFO level this does not happen.But what we need is DEBUG level to show the password, but with masking facility.


Below is how password is shown in 2 places in the log when camel is running.


2014-08-07 17:50:54 DEBUG [tid=colkvm15-140807174358079-1768700077-19-28] [FileTransferAgent] org.apache.camel.util.IntrospectionSupport - Configured property: password on bean: /data/Test1 with value: myPassword123


org.apache.camel:context=camel-1-1,type=endpoints,name=""sftp://ih40329@testhost.com//data/Test1?antInclude=*.txt&autoCreate=false&idempotent=true&idempotentKey=%24%7Bfile%3Asize%7D%2C%24%7Bfile%3Amodified%7D%2CTest1%2C%24%7Bfile%3Aname%7D&idempotentRepository=%23fileTransferRepo&localWorkDirectory=%2Fdata%2FTest2%2F.inprogress&move=transferred&password=\myPassword123&scheduledExecutorService=%23ftsThreadPool&scheduler=spring&scheduler.cron=0%2F30+****%3F&sendEmptyMessageWhenIdle=true&startingDirectoryMustExist=true


I am using Log4j for logging configurations in my application. My camel version is 2.13.1 
Is there any way to avoid this?","davsclaus:1407448294:2014-08-08T05:51:34.215+0000:1407448294:2014-08-08T05:51:34.215+0000:Logging at DEBUG/TRACE level is expected to log inner details.

And please use the mailing list to get in contact first, instead of creating tickets you feel is blocker level. See this page how to get help/support and how you should do
http://camel.apache.org/support"
0,CAMEL-7669,Test,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-07 14:25:25+00:00,2014-08-08 04:42:32+00:00,"Those tests do not start|stop the connection pool, which leads to resources not being stopped nicely.",
0,CAMEL-7668,Improvement,Minor,None,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-08-07 12:20:42+00:00,2014-09-01 07:50:13+00:00,"When using POJO consuming and we shutdown CamelContext and if by chance something hangs, such as the JMS shutdown (see other tickets) then the file endpoint may be stopped but the POJO consumer is still running (not shutdown) and this causes the idempotent repo to reset its state, and the POJO consumer will then pickup the same files again.


eg as demonstrated by the pojo example



2014-08-07 14:17:49,909 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:49,945 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:49,950 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:49,955 [sonnel.records]] INFO  XPathBuilder                   - Created default XPathFactory com.sun.org.apache.xpath.internal.jaxp.XPathFactoryImpl@3e9037f9
2014-08-07 14:17:49,996 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from EMEA region
2014-08-07 14:17:50,008 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from AMER region
2014-08-07 14:17:50,014 [sonnel.records]] INFO  DistributeRecordsBean          - Person is from AMER region
^C2014-08-07 14:17:52,237 [Thread-5       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.
2014-08-07 14:17:52,237 [Thread-5       ] INFO  MainSupport                    - Apache Camel 2.14-SNAPSHOT stopping
2014-08-07 14:17:52,237 [Thread-5       ] INFO  ClassPathXmlApplicationContext - Closing org.springframework.context.support.ClassPathXmlApplicationContext@1f361707: startup date [Thu Aug 07 14:17:46 CEST 2014]; root of context hierarchy
2014-08-07 14:17:52,238 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutting down
2014-08-07 14:17:52,242 [sonnel.records]] WARN  ultJmsMessageListenerContainer - Setup of JMS message listener invoker failed for destination 'personnel.records' - trying to recover. Cause: The Session is closed
2014-08-07 14:17:52,247 [sonnel.records]] ERROR ultJmsMessageListenerContainer - Could not refresh JMS Connection for destination 'personnel.records' - retrying in 5000 ms. Cause: null
2014-08-07 14:17:52,466 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:52,467 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:52,469 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:52,469 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:52,470 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:52,470 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:52,976 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:52,977 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:52,978 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:52,979 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:52,980 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:52,980 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:53,484 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:53,485 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:53,487 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:53,487 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:53,489 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:53,489 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:53,993 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:53,994 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:53,995 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:53,996 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:53,997 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:53,997 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:54,500 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:54,500 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:54,502 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:54,502 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:54,503 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:54,504 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:55,007 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:55,008 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:55,009 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:55,009 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:55,011 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:55,011 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:55,515 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:55,515 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:55,517 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:55,517 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:55,518 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:55,518 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:56,021 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:56,022 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:56,023 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:56,024 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:56,025 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:56,026 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:56,529 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:56,530 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:56,531 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:56,532 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:56,533 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:56,533 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:57,035 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message1.xml
2014-08-07 14:17:57,036 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message1.xml]
2014-08-07 14:17:57,037 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message2.xml
2014-08-07 14:17:57,037 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message2.xml]
2014-08-07 14:17:57,038 [file://src/data] INFO  SendFileRecordsToQueueBean     - Incoming file: message3.xml
2014-08-07 14:17:57,038 [file://src/data] WARN  GenericFileOnCompletion        - Rollback file strategy: org.apache.camel.component.file.strategy.GenericFileRenameProcessStrategy@693a9769 for file: GenericFile[message3.xml]
2014-08-07 14:17:57,251 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) uptime 8.256 seconds
2014-08-07 14:17:57,252 [Thread-5       ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) is shutdown in 5.013 seconds
2014-08-07 14:17:57,252 [Thread-5       ] INFO  DefaultListableBeanFactory     - Destroying singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@4e358ab7: defining beans [broker,activemq,org.apache.camel.example.pojo_messaging.SendFileRecordsToQueueBean#0,org.apache.camel.example.pojo_messaging.DistributeRecordsBean#0,template,consumerTemplate,camel-1:beanPostProcessor,camel-1]; root of factory hierarchy
2014-08-07 14:17:57,253 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) is shutting down
2014-08-07 14:17:57,254 [Thread-5       ] INFO  TransportConnector             - Connector vm://myBroker stopped
2014-08-07 14:17:57,264 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) uptime 9.268 seconds
2014-08-07 14:17:57,264 [Thread-5       ] INFO  BrokerService                  - Apache ActiveMQ 5.11-SNAPSHOT (myBroker, ID:davsclaus.air-50520-1407413868345-0:1) is shutdown",davsclaus:1409014065:2014-08-26T08:47:45.838+0000:1409014065:2014-08-26T08:47:45.838+0000:This is the pojo example btw that is shipped with Apache Camel.
0,CAMEL-7667,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-08-07 09:41:46+00:00,2014-08-07 14:48:52+00:00,"See
https://issues.apache.org/jira/browse/AMQ-5310


When shutting down a Camel app etc that connects to a AMQ broker either embedded or remotely, then during that shutdown phase, the message listener container may try to accept new messages, as it has not yet been shutdown, but Camel is being stopped. And during that work the connection to the broker may not be valid and a failover is being done by spring jms. And if that work fails such as thrown some non JMSException then we can get stuck.


To help this we can stop listening quicker in camel-jms, by detecting that we are stopping CamelContext and not allow running. This can be done as  the acceptMessagesWhileStopping is default false also.","davsclaus:1407377907:2014-08-07T10:18:27.087+0000:1407377907:2014-08-07T10:18:27.087+0000:Mind that we should not stop the listener containers that are used for request/reply asap, as they should ideally be running to pickup any pending reply messages expected.

So its only the route from jms consumers that we should stop asap."
0,CAMEL-7666,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-08-07 08:18:52+00:00,2014-08-07 14:49:01+00:00,"Most likely to happen only for pojo consuming where you may have a JMS listener execute concurrently and do some routing, and on initial messages then they need to register as service in CamelContext which can trigger to this ConcurrentModificationException.



2014-08-07 10:09:09,338 [sonnel.records]] WARN  EndpointMessageListener        - Execution of JMS message listener failed. Caused by: [org.apache.camel.FailedToCreateProducerException - Failed to create Producer for endpoint: Endpoint[file://target/messages/amer/finance_pickup]. Reason: java.util.ConcurrentModificationException]
org.apache.camel.FailedToCreateProducerException: Failed to create Producer for endpoint: Endpoint[file://target/messages/amer/finance_pickup]. Reason: java.util.ConcurrentModificationException
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:410)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.RecipientListProcessor.createProcessorExchangePairs(RecipientListProcessor.java:174)
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:219)
	at org.apache.camel.processor.RecipientList.sendToRecipientList(RecipientList.java:167)
	at org.apache.camel.component.bean.MethodInfo$1.doProceed(MethodInfo.java:286)
	at org.apache.camel.component.bean.MethodInfo$1.proceed(MethodInfo.java:252)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:166)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:103)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:562)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:500)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:468)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1101)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1093)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:990)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.util.ConcurrentModificationException
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:859)
	at java.util.ArrayList$Itr.next(ArrayList.java:831)
	at org.apache.camel.impl.DefaultCamelContext.doAddService(DefaultCamelContext.java:976)
	at org.apache.camel.impl.DefaultCamelContext.addService(DefaultCamelContext.java:963)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:408)
	... 22 more
2014-08-07 10:09:09,345 [main           ] INFO  SpringCamelContext             - Apache Camel 2.14-SNAPSHOT (CamelContext: camel-1) started in 0.254 seconds
2014-08-07 10:09:14,347 [main           ] INFO  CamelContextTest               - ********************************************************************************
2014-08-07 10:09:14,347 [main           ] INFO  CamelContextTest               - Testing done: testCheckFiles(org.apache.camel.example.pojo_messaging.CamelContextTest)",
0,CAMEL-7665,Bug,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Ramon Rosa da Silva,0,4,2014-08-06 18:48:59+00:00,2014-09-11 13:23:03+00:00,"RabbitMQ does not execute command to reject a message when consumers or end point throws an exception or shutdown is executed by karaf.
We need execute channel.basicReject(deliveryTag, false) to send message to Dead Letter Exchange.
In current implementation the message is always acknowledged. 
Scenario:



from(""rabbitmq://localhost:5672/myFailTest?""
+""routingKey=myFailTest&queue=myFailTest&exchangeType=direct""
+ ""&vhost=test&durable=true&autoDelete=false""
+ ""&autoAck=false&username=guest&password=guest"")
.to(""ftp://localhost/notExists?connectTimeout=100&timeout=100"");




Using errorHandler(deadLetterChannel(""..another queue"") the message is Redelivered in same queue.","githubbot:1409312874:2014-08-29T19:47:54.577+0000:1409312874:2014-08-29T19:47:54.577+0000:GitHub user neoramon opened a pull request:

    https://github.com/apache/camel/pull/258

    CAMEL-7665

    RabbitMq don't reject messages when consumer or endpoint fail.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/neoramon/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/258.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #258
    
----
commit ba230db56fa903e10c790da82e98a287c9662baf
Author: neoramon <neoramon@gmail.com>
Date:   2014-08-29T19:42:12Z

    CAMEL-7665
    RabbitMq don't reject messages when consumer or endpoint fail.

----

davsclaus:1410043619:2014-09-07T06:46:59.120+0000:1410043619:2014-09-07T06:46:59.120+0000:Thanks for reporting, and the PR.
githubbot:1410043659:2014-09-07T06:47:39.873+0000:1410043659:2014-09-07T06:47:39.873+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/258

githubbot:1410360098:2014-09-10T22:41:38.426+0000:1410360098:2014-09-10T22:41:38.426+0000:GitHub user neoramon opened a pull request:

    https://github.com/apache/camel/pull/264

    CAMEL-7665

    RabbitMq don't reject messages when consumer or endpoint fail.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/neoramon/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/264.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #264
    
----
commit 668316f0a06da0664765e64b12cf45e3dc451fab
Author: neoramon <neoramon@gmail.com>
Date:   2014-09-10T22:32:31Z

    CAMEL-7665
    RabbitMq don't reject messages when consumer or endpoint fail.

----

githubbot:1410412983:2014-09-11T13:23:03.551+0000:1410412983:2014-09-11T13:23:03.551+0000:Github user neoramon closed the pull request at:

    https://github.com/apache/camel/pull/264
"
0,CAMEL-7664,New Feature,Major,None,"3.0.0, Future","
None
",Resolved,Won't Fix,"3.0.0, Future",Unassigned,Claus Ibsen,0,1,2014-08-06 13:43:32+00:00,2014-08-22 15:19:45+00:00,"So people can choose to use camel-metrics which has codehale for metrics, and we can then expose more details that this library can do out of the box.","davsclaus:1407311839:2014-08-06T15:57:19.603+0000:1407311839:2014-08-06T15:57:19.603+0000:Or maybe for Camel 3.0 use metrics out of the box in camel-core, and adjust the mbeans to expose those extra details we get ""for free"".
davsclaus:1408691979:2014-08-22T15:19:39.723+0000:1408691979:2014-08-22T15:19:39.723+0000:There is a route policy you can easily apply to get ""per route"" stats now. So we can keep both worlds. 
It may be to abrupt to replace the came statis in our mbeans as they have been like that since the start."
0,CAMEL-7663,Improvement,Major,2.13.1,2.14.0,"
None
",Closed,Fixed,2.14.0,Claus Ibsen,Steffen Ryll,0,2,2014-08-05 17:13:54+00:00,2014-09-12 17:18:23+00:00,"I configured a setup with an SFTP consumer like this in Spring DSL:



<from uri=""sftp:user@host/some.directory?privateKeyUri=classpath:FOO.key&amp;delete=true&amp;scheduler=#q2scheduler"" />




Note: q2scheduler refers to an instance of QuartzScheduledPollConsumerScheduler that I set have up with my Cron pattern.


Starting up the Camel context fails with a NotSerializableException as soon as I switch Quartz from a RAMJobStore to a JDBCJobStore.


The following exception gets thrown:



org.quartz.JobPersistenceException: Couldn't store job: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer [See nested exception: java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer]
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJob(JobStoreSupport.java:1115)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport$2.executeVoid(JobStoreSupport.java:1062)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3703)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport$VoidTransactionCallback.execute(JobStoreSupport.java:3701)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.executeInNonManagedTXLock(JobStoreSupport.java:3787)
	at org.quartz.impl.jdbcjobstore.JobStoreTX.executeInLock(JobStoreTX.java:93)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJobAndTrigger(JobStoreSupport.java:1058)
	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:886)
	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:249)
	at org.apache.camel.pollconsumer.quartz2.QuartzScheduledPollConsumerScheduler.doStart(QuartzScheduledPollConsumerScheduler.java:174)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.ScheduledPollConsumer.doStart(ScheduledPollConsumer.java:499)
	at org.apache.camel.component.file.GenericFileConsumer.doStart(GenericFileConsumer.java:640)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.startService(DefaultCamelContext.java:2042)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRouteConsumers(DefaultCamelContext.java:2336)
	at org.apache.camel.impl.DefaultCamelContext.doStartRouteConsumers(DefaultCamelContext.java:2272)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2202)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1981)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1851)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.component.servletlistener.CamelServletContextListener.contextInitialized(CamelServletContextListener.java:179)
               Truncated WebLogic classes....
Caused by: java.io.NotSerializableException: Unable to serialize JobDataMap for insertion into database because the value of property 'task' is not serializable: org.apache.camel.component.file.remote.SftpConsumer
	at org.quartz.impl.jdbcjobstore.StdJDBCDelegate.serializeJobData(StdJDBCDelegate.java:3083)
	at org.quartz.impl.jdbcjobstore.oracle.OracleDelegate.insertJobDetail(OracleDelegate.java:154)
	at org.quartz.impl.jdbcjobstore.JobStoreSupport.storeJob(JobStoreSupport.java:1112)
	... 65 more




That implies, that a File consumer will fail in such a scenario as well, not only an SFTP consumer.
Given that the documentation http://camel.apache.org/file2.html advertises Quartz2 support for polling scheduling, we were expecting that this really works.


For us, this is kind of tragic, as we wanted to use Quartz2's clustering capabilities to make the SFTP consumer fit for use in a (Weblogic) cluster.
Looking at GenericFileConsumer, it seems at least non-trivial to make all the fields in SftpConsumer's class hierarchy serializable.","steffen.ryll:1407279020:2014-08-06T06:50:20.659+0000:1407279020:2014-08-06T06:50:20.659+0000:Just in case it help, here are the contents of the quartz.properties that I used:
{code}
org.quartz.scheduler.instanceName = MyScheduler
org.quartz.scheduler.skipUpdateCheck = true
org.quartz.threadPool.threadCount = 3

org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.oracle.weblogic.WebLogicOracleDelegate
org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.tablePrefix = QRTZ_
org.quartz.jobStore.isClustered = false
org.quartz.jobStore.useProperties = false

org.quartz.dataSource.myDS.jndiURL = jdbc/MyDataSource
{code}
davsclaus:1407394315:2014-08-07T14:51:55.738+0000:1407394315:2014-08-07T14:51:55.738+0000:Thanks for reporting. That scheduler was intended as being a memory only, though I can see you want to reuse existing scheduler. Also is your intention to have the scheduler clustered so it only triggers on one node, in case you have the same Camel app running on 2+ nodes?

To improve on this, we need to store in the job just details about which route that consumer belongs to, then we can lookup at runtime that route, and find the consumer, and then trigger it. It requires some work and maybe a little API change etc.
steffen.ryll:1408927176:2014-08-25T08:39:36.786+0000:1408927176:2014-08-25T08:39:36.786+0000:Wow, thanks for fixing this so quickly. Sorry for my delayed reply. You summarized the intended use absolutely right, i.e. there are 2+ cluster cluster nodes and Quartz shall assure that exactly one node gets triggered to perform a poll in one instant. For the next scheduled trigger instant it may be another node.

I will try to test your fix soon, though I'm not completely sure when the cluster environment will be available for such a test.
steffen.ryll:1410513503:2014-09-12T17:18:23.983+0000:1410513503:2014-09-12T17:18:23.983+0000:Verified that the NotSerializableException is not thrown any more. Thanks for fixing!"
0,CAMEL-7662,Bug,Major,"2.12.2, 2.14.0","2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Willem Jiang,Tomohisa Igarashi,0,3,2014-08-05 08:36:05+00:00,2014-11-17 08:01:39+00:00,"MQTTProducerTest fails once you enable this testcase. This is disabled here:
https://github.com/apache/camel/blob/master/components/camel-mqtt/pom.xml#L84
Although this may be a known issue as it's explicitly disabled, I'm filing this anyway since I couldn't find any corresponding JIRA.


It fails with different error on 2.12.2 and current upstream master, but both case show the producer can't send messages through the MQTT producer correctly. I think there is an issue in camel-mqtt since I hit same issue in our application (https://issues.jboss.org/browse/SWITCHYARD-2221), but even if the problem is in the testcase, it still needs to be replaced with appropriate testcase to verify MQTT producer works correctly.","igarashitm:1407274133:2014-08-06T05:28:53.770+0000:1407274133:2014-08-06T05:28:53.770+0000:http://camel.465427.n5.nabble.com/Dispatch-queue-mqtt-client-was-not-executing-error-from-camel-mqtt-producer-td5753937.html
igarashitm:1407817062:2014-08-12T12:17:42.254+0000:1407817092:2014-08-12T12:18:12.622+0000:This attaching example reproduces the issue by CamelMQTTExampleTest - it fails with following error in spite of it succeeds if it runs with ""mvn exec:java -PExample -DskipTests=true"". CamelMQTTExampleTest just kicks CamelMQTTExample. No difference between exec:java and test. So this strange behavior is only shown in unit test.

{code}
Caused by: java.lang.AssertionError: Dispatch queue 'mqtt client' was not executing, (currently executing: '<not-dispatched>')
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.assertExecuting(SerialDispatchQueue.java:145)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:585)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:581)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:160)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:58)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)
{code}
njiang:1407821032:2014-08-12T13:23:52.495+0000:1407821032:2014-08-12T13:23:52.495+0000:Hi Tomohisa,

Can you explain why there is an file of byteman.btm?
Does it have something with running the unit test?


igarashitm:1407821401:2014-08-12T13:30:01.181+0000:1407821401:2014-08-12T13:30:01.181+0000:Hi Willem,

Just ignore the byteman.btm - you can run the unit test with byteman if you add -PByteman, but not necessarily.
njiang:1407977323:2014-08-14T08:48:43.597+0000:1407977323:2014-08-14T08:48:43.597+0000:Hi Tomohisa,

I managed to find out why the unit test cannot work, even it does the same work as the example does.
First the exception is java [assertion|http://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html] exception, it is thrown from 
{code}
Caused by: java.lang.AssertionError: Dispatch queue 'mqtt client' was not executing, (currently executing: '<not-dispatched>')
	at org.fusesource.hawtdispatch.internal.SerialDispatchQueue.assertExecuting(SerialDispatchQueue.java:145)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:585)
	at org.fusesource.mqtt.client.CallbackConnection.publish(CallbackConnection.java:581)
	at org.apache.camel.component.mqtt.MQTTEndpoint.publish(MQTTEndpoint.java:160)
	at org.apache.camel.component.mqtt.MQTTProducer.process(MQTTProducer.java:58)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:120)
	... 36 more
{code}
By default, JVM assertions are disabled at runtime, but Surefire enables JVM assertions for the execution of your test cases by default. That could explain why you can get the different result here in the unit test.
If you disable the assertion in the surefire configuration just like this, the test is passed.
{code}
          <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <forkMode>perTest</forkMode>
                    <enableAssertions>false</enableAssertions>
                </configuration>
            </plugin>
{code}

I will ping Hiram for the assertion in the hawtdispatch at the mean time.
igarashitm:1407989414:2014-08-14T12:10:14.381+0000:1407989414:2014-08-14T12:10:14.381+0000:Ah good catch! I didn't notice that. Thanks for handling this.
njiang:1408583370:2014-08-21T09:09:30.989+0000:1408583370:2014-08-21T09:09:30.989+0000:Enable the test by disable the assertion when running the unit test in Apache Camel trunk.
chirino:1411708695:2014-09-26T13:18:15.361+0000:1411708695:2014-09-26T13:18:15.361+0000:Disabling the assertions is the wrong thing to do.  The assertion failure is telling you that camel is using the MQTT client incorrectly.
githubbot:1416103850:2014-11-16T10:10:50.212+0000:1416103850:2014-11-16T10:10:50.212+0000:GitHub user igarashitm opened a pull request:

    https://github.com/apache/camel/pull/333

    CAMEL-7662 MQTTProducerTest fails once enables it

    The assertion expects MQTT publish/disconnect call to be submitted as a async task, i.e. enqueued in a dispatch queue

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/igarashitm/camel CAMEL-7662

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/333.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #333
    
----
commit f686fcb0d3c1a97a561474eb75d934310b8f9e44
Author: Tomohisa Igarashi <tm.igarashi@gmail.com>
Date:   2014-11-16T07:55:45Z

    CAMEL-7662 MQTTProducerTest fails once enables it
    
    The assertion expects MQTT publish/disconnect call to be submitted as a async task, i.e. enqueued in a dispatch queue

----

igarashitm:1416104842:2014-11-16T10:27:22.283+0000:1416104842:2014-11-16T10:27:22.283+0000:I looked into this issue again and finally found what should be done. So the assertion expects MQTT publish call to be enqueued in a dispatch queue, but camel MQTTEndpoint was invoking it directly. For the same reason, disconnect was also failing, it was just a WARN on shutdown though. 
githubbot:1416167671:2014-11-17T03:54:31.264+0000:1416167671:2014-11-17T03:54:31.264+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/333

njiang:1416182499:2014-11-17T08:01:39.652+0000:1416182499:2014-11-17T08:01:39.652+0000:Merged the patch into camel master, camel-2.14.x and camel-2.13.x branches."
0,CAMEL-7661,Task,Major,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,3,2014-08-05 06:47:36+00:00,2015-02-02 18:53:48+00:00,We need to upgrade as there is also some security issues fixed in that newer release.,"davsclaus:1407192477:2014-08-05T06:47:57.783+0000:1407192477:2014-08-05T06:47:57.783+0000:OSGi upgrade has a problem

[08:43:37]  <davsclaus>	 got this karaf osgi issue with karaf 2.3.6 and elasticsearch 1.2.0 bundle upgrade for camel-elasticsearch
[08:43:37]  <davsclaus>	 https://gist.github.com/davsclaus/0a01bdc6fd68d0ad5e66
[08:43:43]  <davsclaus>	 never seen that error before
[08:44:00]  <davsclaus>	 doing this
[08:44:01]  <davsclaus>	 camel/tests/camel-itest-karaf (master)/$ mvn clean test -Dtest=CamelElasticsearchTest
[08:44:13]  <davsclaus>	 found this
[08:44:13]  <davsclaus>	 http://blog.osgi.org/2013/02/javautilserviceloader-in-osgi.html
[08:44:21]  <davsclaus>	 seems like osgi 4.3 serviceloader
[08:44:42]  <davsclaus>	 wonder what to do
[08:46:32]  <davsclaus>	 wonder if karaf provides any bundle or something that provides that service
[08:46:37]  <davsclaus>	 (osgi.extender=osgi.serviceloader.registrar)
jbonofre:1407192747:2014-08-05T06:52:27.797+0000:1407192747:2014-08-05T06:52:27.797+0000:Thanks for the update, I gonna take a look on that.
gnodet:1410132960:2014-09-08T07:36:00.255+0000:1410132960:2014-09-08T07:36:00.255+0000:Fwiw, the service loader OSGI extender is provided by Aries WildFly.
davsclaus:1422874428:2015-02-02T18:53:48.755+0000:1422874428:2015-02-02T18:53:48.755+0000:We have upgraded to 1.4 afair"
0,CAMEL-7660,Improvement,Major,2.14.0,2.18.0,"
None
",Resolved,Fixed,2.18.0,Claus Ibsen,Claus Ibsen,1,1,2014-08-04 18:38:47+00:00,2016-05-06 10:00:28+00:00,"In order to be able to use tokenization elements based on the type of the to be processed message I would like to request for support for expressions inside the tokenizeXML DSL element (http://camel.apache.org/splitter.html).


One use-case would be to determine the splitting element by identifying the type of the document in a processor and then provide this information via an exchange property which then can be used inside the attribute of tokenizeXml that supports expressions.


The xpath DSL is not really an alternative as it comes with memory and processing time costs and doesn't work in streaming mode.


A proposal would be to add the following methods to



org.apache.camel.builder.ExpressionClause:
public T tokenizeXML(Expression tagName, int group)
public T tokenizeXML(Expression tagName)




Though as we need changes to the XML DSL also, we would need to make sure the model fits that too.


eg in other words. Allow to use camel expressions to define which tag name to use.",davsclaus:1462495973:2016-05-06T08:52:53.490+0000:1462495973:2016-05-06T08:52:53.490+0000:We now allow to specify the start/end token / xml tags using simple language so you can refer to headers/properties or whatnot.
0,CAMEL-7659,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Tomas Turek,0,2,2014-08-04 11:53:55+00:00,2014-08-13 14:22:29+00:00,"I have problem with camel setup to consume feeds atom://atomUri?splitEntries=true&filter=true&throttleEntries=false, feed processor does not skip last consumed entry.


The source of problem is in UpdateDateFilter class, it filters only entries older than last update and entries of same pubdate are once more
consumed.","njiang:1407910949:2014-08-13T14:22:29.079+0000:1407910949:2014-08-13T14:22:29.079+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7658,Bug,Major,2.13.2,2.15.0,"
None
",Resolved,Cannot Reproduce,2.15.0,Claus Ibsen,Paul McCulloch,0,2,2014-08-04 10:40:09+00:00,2015-02-15 16:53:45+00:00,"Messages are occasionally consumed out of order when the JMS or ActiveMQ component has a cache level name of CACHE_NONE or CACHE_SESSION.


The out of order message id is related to the previous message. For example: messages received are:
02885-DESKTOP-60405-1407148471972-3:1:2:1:315
02885-DESKTOP-60405-1407148471972-3:1:2:1:1316
02885-DESKTOP-60405-1407148471972-3:1:2:1:316


Attempts to debug cause the issue not to occur  - perhaps some sort of race condition.


Test case attached. An equivalent test with plain Spring JMS, consuming via DMLC passes.","davsclaus:1423990425:2015-02-15T16:53:45.049+0000:1423990425:2015-02-15T16:53:45.049+0000:Works today with latest code and ActiveMQ 5.11.0.
All 4 different cache levels works."
0,CAMEL-7657,Improvement,Minor,2.13.2,"2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,Petr Juza,0,2,2014-08-04 08:17:57+00:00,2014-08-04 13:28:26+00:00,"There are two lookup methods in SpringRouteBuilder:



lookup(java.lang.String beanName, java.lang.Class<T> type) calls getBean(beanName, type) from ApplicationContext




lookup(java.lang.Class<T> type) calls internally getBeanNamesForType (http://docs.spring.io/spring/docs/3.2.9.RELEASE/javadoc-api/org/springframework/beans/factory/ListableBeanFactory.html#getBeanNamesForType(java.lang.Class) ) and this method does not consider any hierarchy this factory may participate in.



Two same methods can return different results when using Spring context hierarchy.",davsclaus:1407127177:2014-08-04T12:39:37.159+0000:1407127177:2014-08-04T12:39:37.159+0000:Thanks that code was historically for supporting spring 2.x where spring itself did not have getBean(type) method.
0,CAMEL-7656,Bug,Major,2.14.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Dhiraj Sureshkumar Bokde,Claus Ibsen,0,2,2014-08-04 06:41:47+00:00,2014-08-04 16:25:34+00:00,"See this CI build and see th console output (raw) and check in the end of the build where it does the assembly of the build


https://builds.apache.org/job/Camel.trunk.notest/2124/consoleText


You get a bunch of errors like



[ERROR] Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.14-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-linkedin: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: Error loading class java.lang.String&nbspcomment_id, -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-api-component-maven-plugin:2.14-SNAPSHOT:fromApis (generate-test-component-classes) on project camel-linkedin: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: Error loading class java.lang.String&nbspcomment_id,
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.jvnet.hudson.maven3.launcher.Maven3Launcher.main(Maven3Launcher.java:117)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchStandard(Launcher.java:329)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:239)
	at org.jvnet.hudson.maven3.agent.Maven3Main.launch(Maven3Main.java:178)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at hudson.maven.Maven3Builder.call(Maven3Builder.java:134)
	at hudson.maven.Maven3Builder.call(Maven3Builder.java:69)
	at hudson.remoting.UserRequest.perform(UserRequest.java:118)
	at hudson.remoting.UserRequest.perform(UserRequest.java:48)
	at hudson.remoting.Request$2.run(Request.java:328)
	at hudson.remoting.InterceptingExecutorService$1.call(InterceptingExecutorService.java:72)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
	at java.util.concurrent.FutureTask.run(FutureTask.java:138)
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
	at java.lang.Thread.run(Thread.java:662)
Caused by: org.apache.maven.plugin.MojoExecutionException: Error generating source for org.apache.camel.component.linkedin.api.CommentsResource: Error loading class java.lang.String&nbspcomment_id,
	at org.apache.camel.maven.ApiComponentGeneratorMojo.execute(ApiComponentGeneratorMojo.java:89)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 31 more
Caused by: java.lang.IllegalArgumentException: Error loading class java.lang.String&nbspcomment_id,
	at org.apache.camel.util.component.ApiMethodParser.forName(ApiMethodParser.java:229)
	at org.apache.camel.util.component.ApiMethodParser.parse(ApiMethodParser.java:126)
	at org.apache.camel.maven.AbstractApiMethodGeneratorMojo.execute(AbstractApiMethodGeneratorMojo.java:71)
	at org.apache.camel.maven.ApiComponentGeneratorMojo.execute(ApiComponentGeneratorMojo.java:86)
	... 33 more","dhirajsb:1407138937:2014-08-04T15:55:37.873+0000:1407138937:2014-08-04T15:55:37.873+0000:Looks like an issue with building with Java6, which somehow breaks decoding Javadoc HTML escapes in the API component framework Javadoc parser. I will provide a patch soon. 
dhirajsb:1407140607:2014-08-04T16:23:27.877+0000:1407140607:2014-08-04T16:23:27.877+0000:Fixed org.apache.camel.maven.JavadocParser to replace &nbsp with ' ', tested with Java6, and changes pushed to master branch. "
0,CAMEL-7655,Task,Minor,"2.13.2, 2.14.0","2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,Krzysztof Sobkowiak,0,2,2014-08-02 23:10:13+00:00,2014-08-04 06:42:24+00:00,"The Avro 1.7.6_1 bundle from ServiceMix imports the sun.misc package which is mandatory and it makes problems, because no bundle exports this package (see SM-2346). This has been changed by SMX4-1709 and this package is now optional, but the fix is available in Avro bundle 1.7.6_2. 


Could you please upgrade the Avro bundle in Camel to fix the problems with the sun.misc package?","githubbot:1406992706:2014-08-02T23:18:26.148+0000:1406992706:2014-08-02T23:18:26.148+0000:GitHub user sobkowiak opened a pull request:

    https://github.com/apache/camel/pull/230

    CAMEL-7655: Upgrade to Avro bundle 1.7.6_2

    Please review this and apply in `2.13.x` and `master`

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/sobkowiak/camel CAMEL-7655

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/230.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #230
    
----
commit 236c8e5d93d1fcf5ad330454957e7bab0dff8939
Author: Krzysztof Sobkowiak <krzys.sobkowiak@gmail.com>
Date:   2014-08-02T23:14:53Z

    CAMEL-7655: Upgrade to Avro bundle 1.7.6_2

----

sobkowiak:1406993014:2014-08-02T23:23:34.024+0000:1406993014:2014-08-02T23:23:34.024+0000:Please review the pull request https://github.com/apache/camel/pull/230 and apply to both {{2.13.x}} and {{master}}. 
githubbot:1407055591:2014-08-03T16:46:31.602+0000:1407055591:2014-08-03T16:46:31.602+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/230
"
0,CAMEL-7654,Improvement,Major,"2.13.2, 2.14.0",2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Velizar Angelov,0,2,2014-08-01 11:07:22+00:00,2014-08-13 09:47:12+00:00,"The work is based on jira CAMEL-7602 AWS SQS component does not support Message Attributes. Two changes are introduced in the attached patch:


1.Support for sending attributes in the SqsProducer is introduced.
2 On receiving a message with attributes in the SqsConsumer, application specific attributes contained as value of type Map<String, MessageAttributeValue> to an attribute called CamelAwsSqsMessageAttributes, are extracted and added as headers to the camel message. The reason is to avoid the MessageAttributeValue class, which is an SQS class, to leak to the client application so that the application will not depend on SQS classes.","njiang:1407894379:2014-08-13T09:46:19.642+0000:1407894379:2014-08-13T09:46:19.642+0000:Applied the patch with thanks to  Velizar, I also added a HeaderFilterStrategy to filter header and message attributes as we do in other camel components.
njiang:1407894432:2014-08-13T09:47:12.000+0000:1407894432:2014-08-13T09:47:12.000+0000:As this is new added feature, I didn't merge the change to camel-2.13.x branch."
0,CAMEL-7653,Bug,Major,2.12.0,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Jo Geraerts,0,1,2014-07-31 09:45:36+00:00,2014-08-04 07:26:39+00:00,"I use the sql endpoint against oracle, however the DefaultSqlPrepareStatementStrategy uses PreparedStatement.setObject to set all the named parameters. With most jdbc drives this works fine except for oracle. Oracle throws an ORA-17004 exception stating an invalid column type. 


My route looks like this



from(""{{ktn.stkbal.in"")
                .routeId(""KTN.StkBal"")
                .onCompletion().onCompleteOnly()
                    .to(""seda:generatestockbalancereport"")
                .end()
                .setHeader(""ts"",constant(new Timestamp(new Date().getTime())))
                .split().tokenizeXML(""product"",""stockPicture"").streaming()
                    .setHeader(""ean"",xpath(""/st:product/@ean"").resultType(String.class).namespaces(KTNConstants.STOCK_NAMESPACES))
                    .setHeader(""available"", xpath(""/st:product/st:available"").resultType(Integer.class).namespaces(KTNConstants.STOCK_NAMESPACES))
                    .setHeader(""blocked"",xpath(""/st:product/st:blocked"").resultType(Integer.class).namespaces(KTNConstants.STOCK_NAMESPACES))
                    .to(""sql:insert into stockbalance(ean,available,blocked,picturets) values (:#ean,:#available,:#blocked,:#ts)?dataSourceRef=hybrisDataSource"");




And from our dear oracle i get



23:34:20,821 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Prepared query: insert into stockbalance(ean,available,blocked,picturets) values (?,?,?,?)
23:34:20,824 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #1 with value: 10000000000001
23:34:20,825 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #2 with value: 2
23:34:20,826 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #3 with value: 5
23:34:20,828 | TRACE | 2/STKBAL/inbound | faultSqlPrepareStatementStrategy | 286 - org.apache.camel.camel-sql - 2.12.0.redhat-610379 | Setting parameter #4 with value: Wed Jul 30 23:33:18 CEST 2014
23:34:20,831 | ERROR | 2/STKBAL/inbound | DefaultErrorHandler              | 142 - org.apache.camel.camel-core - 2.12.0.redhat-610379 | Failed delivery for (MessageId: ID-tst-esb-inno1-41429-1406755976005-6-7 on ExchangeId: ID-tst-esb-inno1-41429-1406755976005-6-9). Exha
usted after delivery attempt: 1 caught: org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [insert into stockbalance(ean,available,blocked,picturets) values (?,?,?,?)]; SQL state [99999]; error code [17004];
Invalid column type; nested exception is java.sql.SQLException: Invalid column type

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[KTN.StkBal        ] [KTN.StkBal        ] [sftp://TSTKATOEN2341@<edited>/STKBAL/inbound?antExcl] [        21]
[KTN.StkBal        ] [setHeader69       ] [setHeader[ean]                                                                ] [         2]
[KTN.StkBal        ] [setHeader70       ] [setHeader[available]                                                          ] [         1]
[KTN.StkBal        ] [setHeader71       ] [setHeader[blocked]                                                            ] [         1]
[KTN.StkBal        ] [to107             ] [sql:insert into stockbalance(ean,available,blocked,picturets) values (:#ean,:#] [         9]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.springframework.jdbc.UncategorizedSQLException: PreparedStatementCallback; uncategorized SQLException for SQL [insert into stockbalance(ean,available,blocked,picturets) values (?,?,?,?)]; SQL state [99999]; error code [17004]; Invalid column type; nested exception is
 java.sql.SQLException: Invalid column type
        at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:83)[285:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
        at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)[285:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]
        at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:80)[285:org.apache.servicemix.bundles.spring-jdbc:3.2.8.RELEASE_1]





As workaround i extended the DefaultSqlPrepareStatementStrategy and override populateStatement. It leverages springs ArgumentPreparedStatementSetter to do the right thing.  



    @Override
    public void populateStatement(PreparedStatement ps, Iterator<?> iterator, int expectedParams) throws SQLException {
        final Object[] args = new Object[expectedParams];
        int i = 0 ;
        while (iterator != null && iterator.hasNext()) {
            args[i]=iterator.next();
            i++;
        }
        final ArgumentPreparedStatementSetter setter = new ArgumentPreparedStatementSetter(args);
        setter.setValues(ps);
    }",
0,CAMEL-7652,Sub-task,Major,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,1,3,2014-07-31 08:52:09+00:00,2021-04-19 19:12:06+00:00,camel-cxfrs should be integrated with the new Rest DSL.,"davsclaus:1407454327:2014-08-08T07:32:07.299+0000:1407454327:2014-08-08T07:32:07.299+0000:This is problematic as Apache CXF-RS requires a JAX-RS resource class (eg the guy with those JAX-RS annotations)

{code}
Caused by: org.apache.cxf.service.factory.ServiceConstructionException: No resource classes found
	at org.apache.cxf.jaxrs.AbstractJAXRSFactoryBean.checkResources(AbstractJAXRSFactoryBean.java:316)
	at org.apache.cxf.jaxrs.JAXRSServerFactoryBean.create(JAXRSServerFactoryBean.java:154)
	... 48 more
{code}
sergey_beryozkin:1407734774:2014-08-11T13:26:14.360+0000:1407734774:2014-08-11T13:26:14.360+0000:Hi, can the no-annotations feature help ? 

See https://cwiki.apache.org/confluence/display/CXF20DOC/JAX-RS+Advanced+Features#JAX-RSAdvancedFeatures-RESTfulserviceswithoutannotations.
The endpoint can be created with the interface only plus an XML text (pseudo-annotating it) though a concrete implementation would be required at run-time; a no-op proxy can be created if needed.
Johan has also extended a CXF JAX-RS Blueprint element with a jaxrs:servert/jaxrs:resourceClasses element - it can refer to interfaces only with no implementations required at run time. 
Can either of the above help ? Is there anything that we can enhance at the CXF level for it work ?
 



davsclaus:1407887229:2014-08-13T07:47:09.911+0000:1407887229:2014-08-13T07:47:09.911+0000:Yeah something is likely needed to be enhanced in CXF or we need to do some heavy work to get this nicely integrated.

At first though it seems the docs at is wrong. They say that the resourceClass is required=no.
http://camel.apache.org/cxfrs

Ideally we need a model api in CXF that 3rd party can use to build the REST service definitions. Then the current logic in CXF that scans JAX-RS classes can build that same model under the covers. Eg similar as to the Camel route model where people can build this by hand, using pojo annotations, java dsl, xml dsl, scala etc.

Though I haven't dived into the codebase of camel-cxfrs or CXF very much. And I am very sure you are much more of an CXF export than I. 

Another area that would be awesome with CXF would be to make it possible for 3rd party to use the CXF WADL generator, where you can provide a model of the REST definitions (eg that API I talk about).

The no-annotations feature you refer to. Does it only work if there is a class or interface? eg ideally we would like to avoid any requirement of a java class. And thus the need for us to generate a .class on the fly to represent the rest service.


sergey_beryozkin:1443170906:2015-09-25T16:48:26.683+0000:1443170906:2015-09-25T16:48:26.683+0000:The initial patch:
- CxfRsComponent creates a single CXF Server that manages mulltipe REST DSL routes (a single CXF JAX-RS endpoint can hold multiple JAX-RS resources)
- Each REST DSL route model is converted into CXF Specific model which is understood by CXF (when doing the request matching)
- CxfRsDslInvoker is introduced which is a map of CXF ClassResourceInfo (representing individual route resource) to Camel Consumer/Processor

Changes to the existing code are quite minor:
- CxfRsInvoker had most of its code pushed to AbstractCxfRsInvoker (this is also extended by CxfRsDslInvoker too), but otherwise it is mostly unchanged
- Existing CxfRsComponent code which creates CxfRsEndpoint has some code to differentiate between CXFRS URI and the actual CXF Server URI.

This is by no means a final patch. I've validated by tweaking a camel-servlet-rest-tomcat example to use an absolute CXFRS endpoint. So:
- the tests will have to be provided
- some of the code may need to be cleaned up
- Some work will likely need to be done to have more control over whether an absolute or relative cxfrs URI needs to be used (ex, when running in OSGI) - this is what I'm actually planning to do next
- Support for finer grained routes, example, where we have two get on the same path but with diff produces - need to figure out how to build CXFRS URI in such cases, etc

I'll have no problems to work on adding tests first to make the patch accepted If the initial lack of tests is a blocker. Though I'm not sure I can make it just in time for 2.16.0 as I'm travelling all of next week.

Overall some progress have def been made
Cheers, Sergey  
  



sergey_beryozkin:1443171302:2015-09-25T16:55:02.479+0000:1443171302:2015-09-25T16:55:02.479+0000:Right now the REST DSL consumer code assumes that SimpleCxfRsBinding is used by default hence the relation to CAMEL-9170
davsclaus:1443220375:2015-09-26T06:32:55.456+0000:1443220375:2015-09-26T06:32:55.456+0000:Yeah lets push this for the next release so the CXF rest-dsl integration can be more solid and ready."
0,CAMEL-7651,Bug,Minor,2.13.2,,"

documentation

",Closed,Invalid,None,Unassigned,Jochen Cordes,0,2,2014-07-31 08:23:00+00:00,2018-09-12 22:02:10+00:00,On http://camel.apache.org/file.html FileComponent.HEADER_FILE_NAME should be changed to FileComponent.FILE_EXCHANGE_FILE.,"davsclaus:1406766565:2014-07-31T08:29:25.324+0000:1406766565:2014-07-31T08:29:25.324+0000:That is the old file component for Camel 1.x.

The doc is at
http://camel.apache.org/file2
jcordes:1536760930:2018-09-12T22:02:10.019+0000:1536760930:2018-09-12T22:02:10.019+0000:Invalid component."
0,CAMEL-7650,Bug,Minor,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,2,2014-07-31 07:19:50+00:00,2014-08-04 08:19:48+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-Restlet-2-13-1-Consumer-Questions-tp5754698.html","raulvk:1406787763:2014-07-31T14:22:43.690+0000:1406787763:2014-07-31T14:22:43.690+0000:In the fix applied in commit 563d143, how do we differentiate between the method not being allowed (405) and the resource not existing (404)? 

In other words, if we have a Restlet consumer listening on {{restlet:http://0.0.0.0/abcd?method=POST}}, these two circumstances are different:

* GET /abcd => should lead to HTTP 405.
* POST /abcd/def => should lead to HTTP 404.

Moreover, RFC2616 specifies the following:

{quote}
10.4.6 405 Method Not Allowed
The method specified in the Request-Line is not allowed for the resource identified by the Request-URI. The response MUST include an Allow header containing a list of valid methods for the requested resource.
{quote}

So we must return the Allow header along with the HTTP 405. 

Can we delegate this stuff to the Restlet engine instead of handling it manually?
davsclaus:1407111588:2014-08-04T08:19:48.356+0000:1407111588:2014-08-04T08:19:48.356+0000:Well spotted about the allow header to be returned - fixed that.

About the resource not found then that is handled by restlet already if an uri template does not match."
0,CAMEL-7649,Improvement,Major,None,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,3,2014-07-30 14:42:51+00:00,2014-08-12 08:39:28+00:00,As the current logic will browse the entire queue and not use any JMS selector which may have been configured.,"davsclaus:1406702770:2014-07-30T14:46:10.619+0000:1406702770:2014-07-30T14:46:10.619+0000:There is a API change in org.apache.camel.component.jms.QueueBrowseStrategy so keeping this on master for now.
dhirajsb:1406703036:2014-07-30T14:50:36.994+0000:1406703036:2014-07-30T14:50:36.994+0000:It looks like the DefaultQueueBrowseStrategy just needs to use the selector from JmsQueueEndpoint without having to change the QueueBrowseStrategy interface. 
davsclaus:1407802531:2014-08-12T08:15:31.254+0000:1407802531:2014-08-12T08:15:31.254+0000:Yeah [~dhirajsb] that is a good idea, let me change this, so we also can backport the fix."
0,CAMEL-7648,Improvement,Major,2.13.2,"2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-29 09:56:22+00:00,2014-07-29 11:14:04+00:00,"See CAMEL-7647


Loading does not work in OSGi as the classloader is the end user bundle context, and not from camel-core which is the one we need to load that class.",
0,CAMEL-7647,Improvement,Minor,None,"2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-29 08:55:42+00:00,2014-07-29 11:13:56+00:00,"We have logic in camel-blueprint to detect which components/data formats etc are in use.


But if people define a route that uses a quartz2 scheduler
http://camel.apache.org/polling-consumer.html


Then we should detect this, so we can add a reference to the quartz2 component etc.",
0,CAMEL-7646,Bug,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Franz Forsthofer,0,2,2014-07-29 08:32:10+00:00,2014-07-29 16:02:30+00:00,Code cleanup for xmlsecurity component: remove cyclic package dependency,davsclaus:1406620950:2014-07-29T16:02:30.289+0000:1406620950:2014-07-29T16:02:30.289+0000:Thanks
0,CAMEL-7645,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-07-29 06:46:36+00:00,2014-08-04 13:41:05+00:00,"See
https://community.jboss.org/thread/243249


The outputClass option is currently limited to when there is only 1 row returned. But we should also support this for a list.",
0,CAMEL-7644,Bug,Major,2.13.1,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Bob Browning,0,3,2014-07-28 16:39:53+00:00,2015-03-03 09:12:32+00:00,"Since the camel DSL is invoked prior to `.addRoutesToCamelContext(CamelContext)` being invoked there is no camel context set on the delegate java RouteBuilder which causes it to create a new context when the first dsl method is invoked.


With the implementation of CAMEL-7327 introduced in 2.13.1 which stores created camel contexts in a set in `Container.Instance#CONTEXT`; this causes instances of DefaultCamelContext to be leaked, they are never removed from the static set. This is especially aparrent during unit testing.


The following test shows that an additional context is registered for the scala route builder as opposed to java. Verification of the leak can be requires profiler and capturing of heap after termination of the test case (in ParentRunner.java).



package org.apache.camel.scala.dsl.builder;

import com.google.common.collect.Sets;

import org.apache.camel.CamelContext;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.spi.Container;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.lang.ref.WeakReference;
import java.util.Set;

import static org.junit.Assert.assertEquals;

public class BuggyScalaTest implements Container {

  Set<CamelContext> managed = Sets.newHashSet();

  @Before
  public void setUp() throws Exception {
    Container.Instance.set(this);
  }

  @After
  public void tearDown() throws Exception {
    Container.Instance.set(null);
  }

  @Test
  public void testNameJava() throws Exception {
    DefaultCamelContext defaultCamelContext = new DefaultCamelContext();
    defaultCamelContext.addRoutes(new RouteBuilder() {
      @Override
      public void configure() throws Exception {
        from(""direct:start"").log(""a message"");
      }
    });
    defaultCamelContext.start();

    ProducerTemplate producerTemplate = defaultCamelContext.createProducerTemplate();
    producerTemplate.start();
    producerTemplate.sendBody(""direct:start"", """");
    producerTemplate.stop();
    defaultCamelContext.stop();

    assertEquals(1, managed.size());
  }

  @Test
  public void testNameScala() throws Exception {
    DefaultCamelContext defaultCamelContext = new DefaultCamelContext();
    defaultCamelContext.addRoutes(new SimpleRouteBuilder());
    defaultCamelContext.start();

    ProducerTemplate producerTemplate = defaultCamelContext.createProducerTemplate();
    producerTemplate.start();
    producerTemplate.sendBody(""direct:start"", """");
    producerTemplate.stop();
    defaultCamelContext.stop();

    assertEquals(1, managed.size()); // will equal 2
  }

  @Override
  public void manage(CamelContext camelContext) {
    managed.add(camelContext);
  }
}





  package org.apache.camel.scala.dsl.builder

  import org.apache.camel.scala.dsl.builder.RouteBuilder

  class SimpleRouteBuilder extends RouteBuilder {
    from(""direct:start"").log(""a message"")
  }","njiang:1406608301:2014-07-29T12:31:41.008+0000:1406608301:2014-07-29T12:31:41.008+0000:I just dug the code and found out all the unit tests which extends the CamelTestSupport has the same problem which lets the RouteBuilder creates a default camel context when the first dsl method is used.  

To resolve this, we need to pass the camel context instance to the RouteBuilder to avoid create the default camel context there.

For adding the created camel context into the static set, I think maybe we can do it when the camel context is start the CAMEL-7327.

davsclaus:1423971356:2015-02-15T11:35:56.308+0000:1423971356:2015-02-15T11:35:56.308+0000:What is the status of this ticket?
davsclaus:1425335964:2015-03-03T06:39:24.112+0000:1425335964:2015-03-03T06:39:24.112+0000:Okay so the problem is that camel-scala RouteBuilder runs the route configure in its constructor, it should use a configure method just like java does.


davsclaus:1425344501:2015-03-03T09:01:41.176+0000:1425344501:2015-03-03T09:01:41.176+0000:We are adding a ScalaRouteBuilder ppl should use that requires to pass in a CamelContext, then its a fairly easy migration effort.
davsclaus:1425345137:2015-03-03T09:12:17.370+0000:1425345137:2015-03-03T09:12:17.370+0000:See this unit test how to use the new ScalaRouteBuilder and with lazy modifier when using ScalaTestSupport
https://github.com/apache/camel/commit/01f08a6267232089adba90a380050ba5dc9c43d2"
0,CAMEL-7643,New Feature,Major,2.14.0,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,1,2014-07-28 14:47:55+00:00,2014-08-12 14:18:02+00:00,"After CAMEL-7641 is implemented, we can add a new interceptor that runs after the route is complete, but before the consumer sends back any reply message (if InOut). This allows end users to do logging / add special headers / or whatnot they may need.","davsclaus:1407812070:2014-08-12T10:54:30.474+0000:1407812070:2014-08-12T10:54:30.474+0000:We should not add new interceptor, but improve the OnCompletion where we can add options to do this.
davsclaus:1407813764:2014-08-12T11:22:44.058+0000:1407813764:2014-08-12T11:22:44.058+0000:With CAMEL-5286 we can allow to work sync and then add a scope to define if its before/after consumer work, so we can configure when to run the on completion work. This would allow end users to define in the DSL onCompletion to be executed before the route consumer writes back any responses.
davsclaus:1407824282:2014-08-12T14:18:02.769+0000:1407824282:2014-08-12T14:18:02.769+0000:We implement this using OnCompletion instead"
0,CAMEL-7642,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-07-28 14:44:12+00:00,2014-07-28 15:14:46+00:00,"f you send the corrupted request to the Netty consumer...
> header1: value1
> GET /some/resource HTTP/1.1
> header2: value2
...Netty will hang on the open connection, instead of returning error immediately.","njiang:1406531686:2014-07-28T15:14:46.427+0000:1406531686:2014-07-28T15:14:46.427+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7641,New Feature,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-07-27 08:54:25+00:00,2014-07-28 14:48:51+00:00,"As this makes it easier to add custom logic to be executed before any routing happens. And when the routing is done. But before any consumer will write any response back to clients.


As today the UoW done callback happens after the consumer has written the response. But there are situations where you want more fine grained callbacks.


This also allows us to add into the DSL a way for end users to do a reverse of interceptFrom, (maybe interceptAfterRoute, interceptAfterFrom or some good name) so people can easily add any custom logic to be executed after the routing is done, but before any response is being written. For example to add special headers or something.",davsclaus:1406530131:2014-07-28T14:48:51.069+0000:1406530131:2014-07-28T14:48:51.069+0000:Logged a new ticket about the interceptor idea
0,CAMEL-7640,Bug,Minor,2.13.1,,"
None
",Resolved,Not A Problem,None,Claus Ibsen,Dennis Walker,0,2,2014-07-25 16:37:29+00:00,2014-07-27 09:37:12+00:00,"The camel-core JAR file contains several classes from the org/apache/camel/dataformat/zipfile package that are also contained in the camel-zipfile JAR.


My assumption (possibly invalid) is that this JAR should function with those classes standalone (i.e. without the camel-zipfile JAR).  Otherwise the classes should be removed from camel-core I would think?


The problem is when I attempted to use camel-core standalone (this is how it is delivered in activemq, sorry) camel stopped during startup and shut itself down.  The following debug message appeared:
2014-07-25 12:27:30,188 | DEBUG | Cannot find class: zipfile | org.apache.camel.util.ObjectHelper | main


When I add the camel-zipfile JAR file to activemq's lib directory, the message goes away and camel starts up successfully (actually I added v2.13.2 but I assume would be the same with v2.13.1 which is what my activemq comes bundled with).


I am making this a Minor Priority as that seems correct to me.  It did take me some time to find the answer and others may not find it, which is why I don't think it's Trivial.  I could see the case for that however if desired.


I am using Camel embedded in ApacheMQ version 5.10.0.  I am using Sun Java version 1.6.0_45.","denw:1406277542:2014-07-25T16:39:02.369+0000:1406277542:2014-07-25T16:39:02.369+0000:This is the configuration file I am using.  The camel route is near the bottom.
denw:1406277864:2014-07-25T16:44:24.893+0000:1406277864:2014-07-25T16:44:24.893+0000:Log file.  Search for ""zipfile"" all in lowercase.  This has multiple start/stop including what should be one failed startup followed by one successful startup (with camel-zipfile JAR).
davsclaus:1406425032:2014-07-27T09:37:12.972+0000:1406425032:2014-07-27T09:37:12.972+0000:There is no problem.

In your activemq.xml you have added a Camel route that uses the camel-zipfile data format. So you need to add to your classpath, eg copy the JAR into the lib/camel dir of activemq.

There is also a zip data format in camel-core, but its not the same. The zip is not file based."
0,CAMEL-7639,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-07-25 14:38:36+00:00,2014-07-25 15:05:07+00:00,We have the option defined in the json dataformat for xstream etc. We just need to support that also for camel-jackson,
0,CAMEL-7638,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Willem Jiang,6,5,2014-07-25 08:23:48+00:00,2016-02-11 09:13:27+00:00,"It could save us lots of the memory and time if the response is a big and chunked message.
Here are some discussion in the mailing list about it.


http://camel.465427.n5.nabble.com/Stream-only-reverse-proxy-with-minimal-memory-footprint-tp5754424.html 
http://camel.465427.n5.nabble.com/Chunking-issue-with-http-producer-td5735075.html","davsclaus:1406248643:2014-07-25T08:37:23.693+0000:1406248643:2014-07-25T08:37:23.693+0000:Be careful we need to keep current behavior where the stream is cached so load balancing / error handling / retry etc is working.
If you do as that the stream cannot be re-read and causing problems for people.

So any new behavior must be a new option people must explicit enable if they want to use it.
ralfsteppacher:1427273711:2015-03-25T16:55:11.570+0000:1427273711:2015-03-25T16:55:11.570+0000:Is this ticket somewhere on the roadmap? It would be extremely beneficial to my project if this could be implemented.

Another thing I noticed in this context: The netty4-http component currently re-calculates the content length of a response if used in a proxy route. And it seems I have no control over the headers, that is I cannot switch to chunked transfer encoding if I massage the response stream contents in a streaming fashion. I came across at least one recent ticket that was about expected content length/transfer encoding headers in proxy setups.
rlarsen5:1431907501:2015-05-18T08:05:01.411+0000:1431908127:2015-05-18T08:15:27.493+0000:We have the same issue where trying to proxy a HTTP server that returns a 1GB document fails due to running out of heap space. Is anybody working on handling the issue?

NOTE: We are using the Jetty consumer and producer.
davsclaus:1431908520:2015-05-18T08:22:00.167+0000:1431908520:2015-05-18T08:22:00.167+0000:Use disableStreamCache=true on jetty that is what you need.


rlarsen5:1431912712:2015-05-18T09:31:52.458+0000:1431912982:2015-05-18T09:36:22.376+0000:I tried to use disableStream on the consumer:

{noformat}
<from uri=""jetty:http://0.0.0.0:{{jetty.port}}/dawa?matchOnUriPrefix=true&amp;continuationTimeout=3600000&amp;disableStreamCache=true"" />
<to uri=""jetty:{{real-endpoint-base-url}}?bridgeEndpoint=true&amp;throwExceptionOnFailure=false&amp;httpClient.timeout=3600000"" />
{noformat}

But I am getting the same error:

{noformat}
org.apache.camel.CamelExchangeException: JettyClient failed cause by: Java heap space. Exchange[Message: [Body is null]]. Caused by: [java.lang.OutOfMemoryError - Java heap space]
	at org.apache.camel.component.jetty.JettyContentExchange.doTaskCompleted(JettyContentExchange.java:223)[237:org.apache.camel.camel-jetty:2.14.1]
	at org.apache.camel.component.jetty.JettyContentExchange.onException(JettyContentExchange.java:143)[237:org.apache.camel.camel-jetty:2.14.1]
	at org.eclipse.jetty.client.HttpExchange$Listener.onException(HttpExchange.java:1108)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.client.AsyncHttpConnection.handle(AsyncHttpConnection.java:168)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:696)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:53)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
Caused by: java.lang.OutOfMemoryError: Java heap space
	at java.util.Arrays.copyOf(Arrays.java:2271)[:1.7.0_51]
	at java.io.ByteArrayOutputStream.grow(ByteArrayOutputStream.java:113)[:1.7.0_51]
	at java.io.ByteArrayOutputStream.ensureCapacity(ByteArrayOutputStream.java:93)[:1.7.0_51]
	at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:140)[:1.7.0_51]
	at org.eclipse.jetty.io.AbstractBuffer.writeTo(AbstractBuffer.java:689)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.client.ContentExchange.onResponseContent(ContentExchange.java:105)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.client.HttpExchange$Listener.onResponseContent(HttpExchange.java:1177)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.client.AbstractHttpConnection$Handler.content(AbstractHttpConnection.java:332)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:957)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	at org.eclipse.jetty.client.AsyncHttpConnection.handle(AsyncHttpConnection.java:135)[73:org.eclipse.jetty.aggregate.jetty-all-server:8.1.15.v20140411]
	... 5 more
{noformat}

If I try to set disableStreamCache=true on the producer, the proxy does not work. It appears to strip the url. 
If for example, I try to reach http://example.com/somepart, then I get content from http://example.com

ralfsteppacher:1431996925:2015-05-19T08:55:25.538+0000:1431996925:2015-05-19T08:55:25.538+0000:[~claus_maps_on@yahoo.com], setting {{disableStreamCache=true}} only effects the http consumers, but not the procuders.

All http producers that I am aware of (Jetty, http4, netty-http) read the response stream into a byte-array, wrap it in an InputStream and place that in the exchange body. Thus a large http response blows a proxy route out of the water. None of the producers seem to offer an option to make them put the original socket input stream into the exchange.

{{http4}}: Everything happens in org.apache.camel.component.http4.HttpProducer::process() -> populateResponse(..) -> extractResponseBody(..) -> doExtractResponseBodyAsStream(); here the original stream is copied into an instance of CachedOutputStream, backed by a byte-array.

{{Jetty}}: org.eclipse.jetty.client.AsyncHttpConnection::handle() -> org.eclipse.jetty.http.HttpParser::parseNext() will fill a byte-array in org.eclipse.jetty.client.ContentExchange which is a CachedExchange which is a HttpExchange.

{{netty-http}}: Builds a pipeline that assembles the HttpResponse content as a composite ChannelBuffer. The wrapped channel buffers make up the complete response stream. 
davsclaus:1454985025:2016-02-09T10:30:25.054+0000:1454985025:2016-02-09T10:30:25.054+0000:Jett's {{org.eclipse.jetty.client.util.BufferingResponseListener}} do not allow access to its internal {{ByteBuffer}}. All its apis to get the data will read the data in memory.

It would be a shame having to copy/paste the jetty code to get access to the buffer directly.
davsclaus:1454985355:2016-02-09T10:35:55.411+0000:1454985355:2016-02-09T10:35:55.411+0000:This has now been implemented for http and http4 producers.

As said its not possible / easy to do with jetty. And netty is already storing the raw response object from netty itself.
davsclaus:1454985669:2016-02-09T10:41:09.119+0000:1454985669:2016-02-09T10:41:09.119+0000:Though spotted a few spots to improve the netty converters so we use ByteBufInputStream when asked to convert to InputStream from HTTP"
0,CAMEL-7637,Improvement,Minor,None,None,"
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-07-25 06:24:54+00:00,2014-07-25 08:20:37+00:00,""" If detailed message is not provided by the exception, name of the exception should be printed in logs "" . 


You can find more information here","njiang:1406247637:2014-07-25T08:20:37.350+0000:1406247637:2014-07-25T08:20:37.350+0000:Applied the patch into master, camel-2.13.x and camel-2.12.x."
0,CAMEL-7636,Bug,Major,2.12.3,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-24 15:02:09+00:00,2014-07-25 07:44:59+00:00,"Got a tidbit of a problem


<raul>	 2014-07-24 02:12:02,250 | WARN  | CorrelationTimeoutMap | 123 - org.apache.camel.camel-core - 2.13.1 | Exception happened during eviction of entry ID org.apache.camel.component.jms.reply.TemporaryQueueReplyHandler@7f3a3f81, won't evict and will continue trying: java.lang.NullPointerException


This could lead to endless retry if processing the timeout keeps causing the same exception.",
0,CAMEL-7635,Bug,Major,2.13.1,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Raúl Kripalani,0,2,2014-07-24 14:06:26+00:00,2014-08-18 16:58:19+00:00,"We just had an OOM incident in our dev environments after upgrading from Camel 2.10.3 to 2.13.1. Heap settings have remained untouched.


A heap dump showed millions of DefaultMessageHistory instances retained (see image1.png), along with their corresponding Date and StopWatch instances. Obviously our first solution will be to disable message history in all contexts.


Digging deeper, I'm utterly confused because I don't seem to find the GC roots that are keeping these objects alive.


OQL query for VisualVM:



select x from org.apache.camel.impl.DefaultMessageHistory x where count(referrers(x)) > 0




returns many objects, which is good.


However, they are referenced by some Object[] which in turn has no referrers , see image2.png.


Using the ""Find nearest GC root"" feature yields no results either.


This mysterious Object[] seems to be filled from position 4072 onwards (see image3.png), it has 9k+ items... Perhaps some kind of Queue? There are many more Object[] arrays storing DefaultMessageHistory instances too.","davsclaus:1406183124:2014-07-24T14:25:24.166+0000:1406183124:2014-07-24T14:25:24.166+0000:So does none of the DefaultMessageHistory have any data, eg are they all empty for routeId, and the other fields?


raulvk:1406183649:2014-07-24T14:34:09.547+0000:1406183649:2014-07-24T14:34:09.547+0000:[~davsclaus] – at first sight it seems so. See attached screenshot ([^Screen Shot 2014-07-24 at 15.32.05.png]). I'm running an OQL query to confirm, though. Will post back the results. I've also made myself available on IRC in case you'd like to use that channel.
davsclaus:1406244432:2014-07-25T07:27:12.601+0000:1406244432:2014-07-25T07:27:12.601+0000:The issue seems to be that request/reply over JMS having replies not coming back within the timeout period, so a timeout is triggered, and being processed. But a NPE is being thrown somewhere during the onTimeout, which causes the timeout entry to not be removed, and reprocessed the next time the timeout eviction process is being run (by default every 1 sec). So this can also be seen from the headdump that the entries are 1 second apart.

CAMEL-7636 should fix the issue so the entry is being removed in cause of an exception. But the NPE may be triggered in some end user code or something, so best to track that down.
davsclaus:1408352299:2014-08-18T16:58:19.131+0000:1408352299:2014-08-18T16:58:19.131+0000:Fixed by that other ticket"
0,CAMEL-7634,Task,Minor,2.13.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,3,2014-07-24 11:52:06+00:00,2015-04-11 19:52:32+00:00,Currently we are on 1.x. But there is a 2.x release of facebook4j,"acosentino:1406444164:2014-07-27T14:56:04.542+0000:1406444250:2014-07-27T14:57:30.758+0000:It seems that AlbumCreate and CheckinCreate classes doesn't exist anymore in Facebook4j release 2.1.0. I just changed the facebook4j-core-version property in camel parent/pom.xml.

I'll try to investigate.
githubbot:1428723403:2015-04-11T11:36:43.069+0000:1428723403:2015-04-11T11:36:43.069+0000:GitHub user oscerd opened a pull request:

    https://github.com/apache/camel/pull/476

    CAMEL-7634 camel-facebook - Upgrade facebook4j to 2.x

    Hi all,
    
    This PR is related:
    https://issues.apache.org/jira/browse/CAMEL-7634
    
    Thanks,
    Bye.
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/oscerd/camel update-facebook4j-to-2.2.2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/476.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #476
    
----
commit b78b354e45886e6a002a60fd8676b96002a0139e
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-11T10:42:29Z

    Resolve CAMEL-7634 camel-facebook - Upgrade facebook4j to 2.x

commit 95cdb7adbe89cb268d1fcbba2d55bb0f05db656e
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-11T10:44:52Z

    CAMEL-7634 fix CS of camel-facebook component

commit e8807e2affe73f543eaf9bb628bd5ba26d4b7a66
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-11T10:48:57Z

    CAMEL-7634 Remove old API methods deleted from 1.x to 2.2.2 version

commit ced1574db38d577ec981f506dea36a9d6bc0a74f
Author: ancosen <ancosen@gmail.com>
Date:   2015-04-11T10:52:53Z

    CAMEL-7634 Use Reading property constant instead of plain string

----

acosentino:1428723434:2015-04-11T11:37:14.948+0000:1428723444:2015-04-11T11:37:24.419+0000:PR submitted:
https://github.com/apache/camel/pull/476

Andrea
davsclaus:1428729108:2015-04-11T13:11:48.097+0000:1428729108:2015-04-11T13:11:48.097+0000:Thanks a lot Andrea. Keep em coming.
githubbot:1428729124:2015-04-11T13:12:04.807+0000:1428729124:2015-04-11T13:12:04.807+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/476

davsclaus:1428729171:2015-04-11T13:12:51.113+0000:1428729171:2015-04-11T13:12:51.113+0000:Btw do you have ICLA signed so you can edit the web site. It would be great if you can take on that work so when a component is upgraded you can potential add a note to the release notes, and upgrade any needed info on the component doc page?

You can read here how to get ICLA
http://camel.apache.org/how-do-i-edit-the-website.html
acosentino:1428752212:2015-04-11T19:36:52.267+0000:1428752212:2015-04-11T19:36:52.267+0000:Hi Claus,

Yes. I already have a signed ICLA.

I'll update the release notes and the doc page :-)
acosentino:1428753152:2015-04-11T19:52:32.647+0000:1428753152:2015-04-11T19:52:32.647+0000:Already started to update the release notes:
https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.16.0+Release"
0,CAMEL-7603,Bug,Minor,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-07-16 07:37:45+00:00,2014-08-13 07:43:32+00:00,We need to store the security context information when generate the camel exchange from CXF request message as camel-cxf does.,"njiang:1407887012:2014-08-13T07:43:32.848+0000:1407887012:2014-08-13T07:43:32.848+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x."
0,CAMEL-7602,Improvement,Minor,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,MEL,0,2,2014-07-15 18:41:42+00:00,2014-08-13 07:45:59+00:00,No Desc,"njiang:1405470435:2014-07-16T08:27:15.544+0000:1405470435:2014-07-16T08:27:15.544+0000:Applied the patch with thanks to MEL, I also did some change on the code to fix CS errors."
0,CAMEL-7601,Bug,Minor,"2.12.1, 2.13.2",,"
None
",Resolved,Not A Problem,None,Unassigned,Andrzej Gdula,0,3,2014-07-15 18:00:07+00:00,2014-07-16 09:59:48+00:00,"https://github.com/agdula/camel-test/blob/master/src/test/java/com/pb/psep/testbase/ThreadPoolTest.java


Test that demonstrates a problem when
      onException(SomeException.class).maximumRedeliveries(-1)
    and
      scheduledExecutorService=poolOfThreads(X)
When there are lots of routes using single threadPool and there happen to be more than X exceptions in X routes that will be redelivered forever
then thread pool gets hogged and other routes are unable to process.
Thread are stuck on org.apache.camel.processor.RedeliveryPolicy.sleep(RedeliveryPolicy.java:188)
  If camel instead of waiting would schedule retry then it probably would solve the problem.","njiang:1405472081:2014-07-16T08:54:41.119+0000:1405472081:2014-07-16T08:54:41.119+0000:You can use the asyncDelayedRedelivery() to avoid the calling of sleep method.
Did you have a chance to test it?
agdula:1405474074:2014-07-16T09:27:54.661+0000:1405474074:2014-07-16T09:27:54.661+0000:I did test that option. It does not guarantee that messages are processed in *order* which *is requirement* of my project.
The test fails because it expects that when a message in a queue has an exception next message is not processed until that exceptional condition is over.

Problem.
    1. I  must not pass message out of order - project specific requirement. 
    2. I have lots of source messages and lots of destinations - need to use thread pool to limit Threading overhead. 
    3. Some of these outputs are unavailable for some time ( imagine lots of mobile devices that I could push thing to and they tend to be out of range for most of the time ). 

3'rd point  is not an actual case. I use exceptions as a way to hold processing on one queue when i detect that processing cannot be done yet. Anyways is a similar situation as in 3.rd point.

 

davsclaus:1405475546:2014-07-16T09:52:26.412+0000:1405475546:2014-07-16T09:52:26.412+0000:Just use maxMessagesPerPoll on the file consumer, and let it rollback if there was a problem. Then you dont need any kind of redelivery and the files are picked up in the order you want, eg if you do any kind of sorting.

The current code in camel-core works as designed. Redelivery is blocked by default. And if you enable async, then redeliveries can happen out of order.

And please use the mailing list / user forum for the initial help, as we say here
http://camel.apache.org/support
agdula:1405475988:2014-07-16T09:59:48.379+0000:1405475988:2014-07-16T09:59:48.379+0000:That would be Ok... if i didn't have tens of thousands of these files. Polling with sorting lots of files is really inefficient.."
0,CAMEL-7600,Bug,Minor,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Adam Slomka,0,3,2014-07-15 10:52:14+00:00,2014-07-20 08:08:31+00:00,"QueueLoadBalancer needs to set callback before ending processing but when no processor is returned by chooseProcessor method, it only throws exception, which in turn makes it impossible to use it with onException.
To fix it setException should be used instead of throwing exception.","davsclaus:1405756794:2014-07-19T15:59:54.732+0000:1405756794:2014-07-19T15:59:54.732+0000:Thanks for spotting a patch is welcome.
githubbot:1405814685:2014-07-20T08:04:45.582+0000:1405814685:2014-07-20T08:04:45.582+0000:GitHub user nkukhar opened a pull request:

    https://github.com/apache/camel/pull/224

    Fix for CAMEL-7600

    Fixed QueueLoadBalancer issue when callback is not executed when processor is not found.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/nkukhar/camel CAMEL-7600

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/224.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #224
    
----
commit 03a6b58269a0c8bda740ad7af1f32079cbcc3bc6
Author: nkukhar <kukhar.n@gmail.com>
Date:   2014-07-20T07:56:09Z

    Fixed QueueLoadBalancer issue when callback is not executed when processor is not found.

----

githubbot:1405814893:2014-07-20T08:08:13.547+0000:1405814893:2014-07-20T08:08:13.547+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/224

davsclaus:1405814911:2014-07-20T08:08:31.894+0000:1405814911:2014-07-20T08:08:31.894+0000:Thanks for the PR"
0,CAMEL-7599,Improvement,Minor,2.13.1,2.14.0,"
None
",Closed,Fixed,2.14.0,Willem Jiang,moritz löser,0,3,2014-07-14 13:27:54+00:00,2014-07-18 14:20:33+00:00,"I just tried to setup a throughput logger with java dsl (not using uri strings) and it seems that setGroupSize and other setters are ignored.
To reproduce i wrote a test:


EndpointsUtilTest

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.log.LogEndpoint;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;

public class EndpointsUtilTest extends CamelTestSupport {
    
        
    
    private static final String MOCK_OUT = ""mock:out"";
    private static final String DIRECT_IN = ""direct:in"";

    @Test
    public void test() throws InterruptedException {
        MockEndpoint out = context.getEndpoint(MOCK_OUT, MockEndpoint.class);
        int expectedCount = 1000;
        out.expectedMessageCount(expectedCount);
        for (int i = 0; i < expectedCount; i++) {
            template.sendBody(DIRECT_IN, ""blub"");
        }
        out.assertIsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            
            @Override
            public void configure() throws Exception {
                from(DIRECT_IN).to(getTPLogger()).to(getTPLoggerSetter()).to(MOCK_OUT);
            }
        };
    }
    
    private LogEndpoint getTPLogger(){
        LogEndpoint endpoint = context.getEndpoint(""log:tplogger?groupSize=10"", LogEndpoint.class);
        
        return endpoint;
    }
    
    private LogEndpoint getTPLoggerSetter(){
        LogEndpoint endpoint = context.getEndpoint(""log:tploggerSetter"", LogEndpoint.class);
        endpoint.setGroupSize(10);
        
        return endpoint;
    }
    
}




Both loggers should produce same output but only the one produced with getTPLogger() is a correct throughput logger.","njiang:1405382034:2014-07-15T07:53:54.591+0000:1405382034:2014-07-15T07:53:54.591+0000:When you use the context.getEndpoint() to create the endpoint, the endpoint properties are set by the uri, I don't think it's bug.
I just did some work on the camel-logger component to support to configure the logEndpoint like this.

{code}
                LogEndpoint endpoint = new LogEndpoint();
                endpoint.setLoggerName(""loggerSetter"");
                endpoint.setGroupSize(10);
                // We need to inject the camel context here
                endpoint.setCamelContext(context);
                // Need to call the start to setup right logger processor  
                endpoint.start();
{code}
njiang:1405382559:2014-07-15T08:02:39.533+0000:1405382559:2014-07-15T08:02:39.533+0000:Applied the patch into camel master branch.
dermoritz:1405385621:2014-07-15T08:53:41.650+0000:1405386027:2014-07-15T09:00:27.619+0000:I think this is a bug. It should not matter how i acquire an object. The methods on the object should just work (as documented in Javadoc).  This is not an api question but normal java behavior imho.
But thx for hint how to do it with more boilplate(

// We need to inject the camel context here
                endpoint.setCamelContext(context);
                // Need to call the start to setup right logger processor  
                endpoint.start(); )

I saw similar problems with configureing ftp endpoint and using indempotent settings on it. There are other endpoints that worked as documented in javadoc. Is there a way to know when an endpoint can be configured with java and when it only works with uri (not compile time checked :-()
davsclaus:1405386276:2014-07-15T09:04:36.352+0000:1405386276:2014-07-15T09:04:36.352+0000:Any component can be configured using java. After all uri uses java.
Using uri is often faster and easier. So if you use java you need to inject component / camelcontext etc. And start it manually etc.

dermoritz:1405386373:2014-07-15T09:06:13.388+0000:1405386373:2014-07-15T09:06:13.388+0000:The Problem with the solution you suggested is that it can't be used with uri in combination: Uri's could be exposed via user settings (property file) end then used to create a ""preconfigured"" endpoint. This endpoint is then configured as specified by requirements (probably overwriting some settings).

dermoritz:1405386596:2014-07-15T09:09:56.789+0000:1405386596:2014-07-15T09:09:56.789+0000:LogEndpoint endpoint = new LogEndpoint();
LogEndpoint endpoint = context.getEndpoint(""log:tplogger"", LogEndpoint.class);

Should acquiere the same ""kind"" of object, shouldn't it? Same kind should mean calling a method does always the same (as documented)?
njiang:1405664433:2014-07-18T14:20:33.217+0000:1405664433:2014-07-18T14:20:33.217+0000:Using the setting methods to configure the endpoint is useful if you want to setup the endpoint through the Spring configuration file or Blueprint, and there are some magics such as inject the camel context instance etc  happen.  "
0,CAMEL-7598,Bug,Major,2.12.3,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Daniel Seidewitz,0,3,2014-07-14 12:58:57+00:00,2014-07-24 13:23:07+00:00,"We are using apache camel to poll from a database. As we want processed rows only to be updated we have disabled consumeDelete on the JPA endpoint. 


During testing we found a large memory leak: all polled entities are kept in the session cache (we are using hibernate as persistence provider). 


The issue seems to be in the JpaConsumer. In method poll() it calls enitityManager.joinTransaction() at the beginning and entitiyManager.flush() at the end of the method but it never calls  entityManager.clear(). As camel is reusing the underlying session during each poll() this causes the first level entity cache to grow indefinitely.","davsclaus:1405756888:2014-07-19T16:01:28.381+0000:1405756888:2014-07-19T16:01:28.381+0000:Thanks, so do you mean that we should just call clear after the flush?

A patch is welcome
dseidewitz:1406178261:2014-07-24T13:04:21.783+0000:1406178317:2014-07-24T13:05:17.044+0000:Yes, i think the correct patch would be to call clear after the flush. 

I've implemented this fix and we now don't see any rise in used heap on our production system (system is running since 2 days and was showing heap rises of 100 MB / day before). 

Do you think it's possible to include the patch in release 2.12.5?

{code}
Index: components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java             (revision 89bf25387d3798620dc6972067e4a563e11f0b5a)
+++ components/camel-jpa/src/main/java/org/apache/camel/component/jpa/JpaConsumer.java             (revision )
@@ -135,6 +135,7 @@
                 // commit
                 LOG.debug(""Flushing EntityManager"");
                 entityManager.flush();
+                entityManager.clear();
                 return messagePolled;
             }
         });
{code}
davsclaus:1406179387:2014-07-24T13:23:07.947+0000:1406179387:2014-07-24T13:23:07.947+0000:Thanks for reporting and the patch."
0,CAMEL-7597,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-07-14 01:57:33+00:00,2014-08-13 07:46:48+00:00,There is a question for the rabbmitmq endpoint in stackoverflow. We could throw a more meaningful exception to inform the user to change the URI path for the exchangeName.,
0,CAMEL-7596,Improvement,Trivial,2.10.2,2.14.0,"

documentation
easyfix

",Resolved,Fixed,2.14.0,Claus Ibsen,Anders Rabo Thorbeck,0,4,2014-07-11 10:08:46+00:00,2014-07-23 08:17:02+00:00,"The six different overloaded versions of the method org.apache.camel.builder.ExpressionClause.method() all have incorrect javadoc, where the href attribute of an <a> tag has no end quote. This means the javadoc in an IDE (Eclipse in my case) doesn't display anything after and including this tag.


Example:



    /**
     * Evaluates an expression using the <a
     * href=""http://camel.apache.org/bean-language.html>bean language</a>
     * which basically means the bean is invoked to determine the expression
     * value.
     * 
     * @param bean the name of the bean looked up the registry
     * @return the builder to continue processing the DSL
     */
    public T method(String bean) {
        return delegate.method(bean);
    }","githubbot:1405125837:2014-07-12T08:43:57.870+0000:1405125837:2014-07-12T08:43:57.870+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/215

    Camel-7596: Syntax error in javadoc of ExpressionClause.method()

    Hi,
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-7596
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel fix-Camel-7596

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/215.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #215
    
----
commit c71628ad9202cb037b7ff7bb30651216947d5f6c
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-12T08:41:54Z

    Fix Camel-7596 syntax error in javadoc of ExpressionClause.method()

----

acosentino:1405125929:2014-07-12T08:45:29.298+0000:1405125929:2014-07-12T08:45:29.298+0000:PR created:

https://github.com/apache/camel/pull/215
githubbot:1405126581:2014-07-12T08:56:21.035+0000:1405126581:2014-07-12T08:56:21.035+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/215

davsclaus:1406074622:2014-07-23T08:17:02.876+0000:1406074622:2014-07-23T08:17:02.876+0000:Thanks for the PR"
0,CAMEL-7595,Bug,Major,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-11 09:56:17+00:00,2014-07-11 10:12:41+00:00,"See nabble
http://camel.465427.n5.nabble.com/I-m-having-problems-with-the-jdbc-component-header-CamelJdbcUpdateCount-tp5753590p5753603.html",
0,CAMEL-7594,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-07-11 09:36:43+00:00,2014-07-11 10:06:47+00:00,"For example people may want to limit logging any message body if possible, by setting that option to -1.


Though if for some reason the type converter cannot do, it creates an exception with the message body value.


We should support using the CamelLogDebugBodyMaxChars as we do when logging Exchange Message etc.",
0,CAMEL-7593,Bug,Major,"2.12.4, 2.13.2","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-11 09:04:19+00:00,2014-07-11 09:06:40+00:00,"The option to configure the setting was only exposed on the shared netty http server config. We should also expose it for the non shared out of the box netty http consumer.


People today will run into this problem


When sending an HTTP request bigger than 1MB, netty HTTP throws an exception - org.jboss.netty.handler.codec.frame.TooLongFrameException: HTTP content length exceeded 1048576 bytes .",
0,CAMEL-7592,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,4,2014-07-11 01:34:31+00:00,2015-02-24 12:59:10+00:00,"User may need to set the mode when create the xstream instance, current we don't provide this setting in XstreamDataFormat.","githubbot:1405128261:2014-07-12T09:24:21.648+0000:1405128261:2014-07-12T09:24:21.648+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/216

acosentino:1405128415:2014-07-12T09:26:55.533+0000:1405128464:2014-07-12T09:27:44.373+0000:Sorry about that. I've seen the Issue open and I submitted a PR.

Next time I'll see Activity before submitting.
davsclaus:1406074578:2014-07-23T08:16:18.343+0000:1406074578:2014-07-23T08:16:18.343+0000:Could we add a bit of docs about this new option to the docs at
http://camel.apache.org/xstream.html
njiang:1407887351:2014-08-13T07:49:11.856+0000:1407887351:2014-08-13T07:49:11.856+0000:Already updated the wiki page for this new option."
0,CAMEL-7591,Improvement,Major,None,,"
None
",Resolved,Abandoned,None,Unassigned,Andy Redhead,0,2,2014-07-10 13:31:33+00:00,2022-09-02 08:51:40+00:00,"It would be useful to be able to send a ""delete"" message to SQS for a message that was read from SQS earlier in a route (rather than leaving the original consumer to delete it).


This is particularly useful when the consumer is sending ""inOnly"" (and has the ""do not delete message"" attribute set. This allows the point where the message is deleted from the incoming queue to be dictated by the route.


To try and get the best throughput from SQS, there should be an option to batch multiple delete messages into a single SQS request.


Cheers, Andy","njiang:1405011561:2014-07-11T00:59:21.817+0000:1405011561:2014-07-11T00:59:21.817+0000:AWS always delete the message which age is more then two week. Do we really need the AWS SQS delete message endpoint?
andyredhead:1405036838:2014-07-11T08:00:38.953+0000:1405036838:2014-07-11T08:00:38.953+0000:If you don't delete the message, the queue will make a non-deleted message visible to consumers after a certain amount of time, which will allow it to be re-consumed.

Explicitly deleting the message off the queue once it has been successfully processed prevents ""pointless"" re-delivery and processing."
0,CAMEL-7590,Improvement,Major,None,,"
None
",Resolved,Information Provided,None,Unassigned,Andy Redhead,0,2,2014-07-10 13:02:13+00:00,2022-09-02 08:51:24+00:00,"The AWS SDK for SQS now has an async client that includes the ability to send batches of write and delete messages, this could be really useful for increasing message throughput with SQS.


The doco for the async client is at:


http://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/buffering.html


For batches we would need to be able set max batch size and max buffering wait time.


Cheers, Andy",davsclaus:1662079884:2022-09-02T08:51:24.706+0000:1662079884:2022-09-02T08:51:24.706+0000:We are using a new AWS SDK v2 now and this ticket is very old
0,CAMEL-7589,Improvement,Minor,"2.10.7, 2.13.2",2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Concombre Masqué,0,4,2014-07-10 08:21:12+00:00,2014-08-18 05:57:22+00:00,"In class DefaultProducerTemplate, in methods :



public void sendBodyAndHeaders(Endpoint endpoint, final Object body, final Map<String, Object> headers)
public Object sendBodyAndHeaders(Endpoint endpoint, ExchangePattern pattern, final Object body, final Map<String, Object> headers)



Passing 'null' as last parameter (headers) should be allowed and handled correctly. 


A simple check is to be added before entering the 'for' loop:


if(headers != null) {
       for (Map.Entry<String, Object> header : headers.entrySet()) 

{
                    in.setHeader(header.getKey(), header.getValue());
       }

}


With current implementation an exception is raised:
Caused by: java.lang.NullPointerException
	at org.apache.camel.impl.DefaultProducerTemplate$2.process(DefaultProducerTemplate.java:241)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:337)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:192)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:115)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeaders(DefaultProducerTemplate.java:238)","davsclaus:1404952649:2014-07-10T08:37:29.175+0000:1404952649:2014-07-10T08:37:29.175+0000:Why should this be allowed? If you do not have headers then use the method that do not have a header parameter.
nsaboy:1404959813:2014-07-10T10:36:53.641+0000:1404960077:2014-07-10T10:41:17.129+0000:Hi Claus,

I understand your point of view. Nevertheless the 'null' value for the headers parameter has to be properly dealt with. This is not the case in my opinion (it could be improved).
davsclaus:1406074669:2014-07-23T08:17:49.932+0000:1406074669:2014-07-23T08:17:49.932+0000:A patch or PR is much welcome.
davsclaus:1406074698:2014-07-23T08:18:18.811+0000:1406074698:2014-07-23T08:18:18.811+0000:To fix that NPE
githubbot:1408263229:2014-08-17T16:13:49.431+0000:1408263229:2014-08-17T16:13:49.431+0000:GitHub user wuwen5 opened a pull request:

    https://github.com/apache/camel/pull/240

    CAMEL-7589: fix NPE

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/wuwen5/camel CAMEL-7589

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/240.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #240
    
----
commit de13f934ecb300a93d3fc311fbb2f1de50343400
Author: wuwen <wuwen.55@gmail.com>
Date:   2014-08-17T16:07:06Z

    CAMEL-7589: fix NPE

----

githubbot:1408312642:2014-08-18T05:57:22.818+0000:1408312642:2014-08-18T05:57:22.818+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/240
"
0,CAMEL-7588,Improvement,Major,"2.12.4, 2.13.2",None,"
None
",Resolved,Abandoned,None,Unassigned,Heath Kesler,2,3,2014-07-09 22:48:50+00:00,2022-09-02 08:50:39+00:00,It would be nice to have the ability to set a custom thread pool via blueprint/Spring that will be used by all the routes in a camel context without having to call the executorServiceManager and setting all of the parameters in code.,"davsclaus:1404952530:2014-07-10T08:35:30.387+0000:1404952530:2014-07-10T08:35:30.387+0000:Have you seen
http://camel.apache.org/threading-model.html

You can configure the default thread pool profile
charly:1404974870:2014-07-10T14:47:50.758+0000:1404974870:2014-07-10T14:47:50.758+0000:Hi Claus,

AFAIK, that is only configuring the default, we want to introduce a way in Blueprint/Spring to use our own thread pool.  We are doing it now using the ExecutorServiceManager in JavaDSL, but would like to implement a way in XML to change the default for all routes/components in a CamelContext.  I do not see anything in the schema that allows this.

Or am I wrong ;)"
0,CAMEL-7587,Bug,Minor,2.13.2,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Marco Zapletal,0,2,2014-07-09 14:08:49+00:00,2014-07-10 05:57:23+00:00,"The MessageHistory feature currently keeps passwords in plain text in case they are part of the URI. 
MessageHelper.doDumpMessageHistoryStacktrace() does some sanitizing, but only for the from node - other nodes/processors are currently not sanitized. 
In order to prevent handling sensitive information in the message history in general, I would suggest to sanitize the URI already when storing a MessageHistory item.","njiang:1404943043:2014-07-10T05:57:23.033+0000:1404943043:2014-07-10T05:57:23.033+0000:Applied the patch into master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7586,Bug,Minor,"2.12.3, 2.13.0","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Lefillastre Alexandre,0,1,2014-07-08 15:29:04+00:00,2014-07-20 08:00:38+00:00,"Hello, I wasn't able to subscribe on the mailing list, so I'm posting my issue directly here.


In my project I need to use some ManagedCamelContextMBean, which I am trying to access through JMX.newMBeanProxy


However, it is not working as I'm getting a NotCompliantMBeanException because the attribute MessageHistory is said to have more than one getter.


I checked the source code of newMBeanProxy, then the JMX 1.4 specification, and then Camel's source code, and it appears that ManagedCamelContextMBean is indeed not respecting the standard MBean.


The problem is that two methods are defined in ManagedCamelContextMBean : isMessageHistory() and getMessageHistory()
Since the return type is boolean, isMessageHistory is considered to be a getter, which makes two getter according to the JMX specification and is blocking the newMBeanProxy() method.",
0,CAMEL-7585,Bug,Minor,"2.13.0, 2.13.2",2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Maurice Betzel,0,2,2014-07-08 11:44:15+00:00,2015-08-07 15:50:23+00:00,"On bundle shutdown the DMLC for the temporary queue does not get discarded. When stop() is called on the request reply JmsEndpoint the runningMessageListeners.get() count returns 1 preventing to call stop on ServiceSupport. Then inside the DMLC in refreshConnectionUntilSuccessful() isRunning() gets called resulting in a JmsEndpoint isRunning() returning true from ServiceSupport.
As a quick and dirty solution one can do this on bundle shutdown:


JmsEndpoint jmsEndpoint = camelContext.getEndpoint(""amq:queue:Endpoint"", JmsEndpoint.class);
jmsEndpoint.onListenerContainerStopped(null);


This will decrement the runningMessageListeners (which should always be one for temp queues because a singlethreadexecuter is used) to zero allowing stop() to propagate to ServiceSupport.","davsclaus:1423971445:2015-02-15T11:37:25.027+0000:1423971445:2015-02-15T11:37:25.027+0000:Can you explain more about this, and what proxy you use etc. And do you use 1 or more bundles etc.
davsclaus:1438933502:2015-08-07T15:45:02.672+0000:1438933502:2015-08-07T15:45:02.672+0000:Its the producer that is responsible for the temporary queue manager and therefore its count down / stopped when the producer stops.
davsclaus:1438933804:2015-08-07T15:50:04.973+0000:1438933804:2015-08-07T15:50:04.973+0000:CAMEL-8491 now stores producers as a service which allows Camel to shutdown on stopping so this should stop the producer, eg if you use Camel proxy stuff."
0,CAMEL-7584,Bug,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Akitoshi Yoshida,Akitoshi Yoshida,0,1,2014-07-07 16:18:24+00:00,2014-07-08 08:55:58+00:00,"There is some issue in the underlining Stax reader's  getLocation().getCharOffset() when the input data is an InputStream to the stax reader.


This issue was brought up in the woodstox community. But I believe fixing it seems to be non trivial as woodstox internally uses char/Reader and keeps the offset value to the character sequence and not to the original input stream.


We change the tokenzer to pass java.io.Reader to the woodstox parser instead of passing java.io.InputStream directly.",
0,CAMEL-7583,Improvement,Major,2.13.2,None,"
None
",Resolved,Fixed,2.14.0,Henryk Konsek,Henryk Konsek,0,1,2014-07-07 08:15:08+00:00,2014-07-07 08:18:25+00:00,"NettyWorkerPoolBuilder#build is package protected now, what makes it unusable from Spring @Configuration.",hekonsek:1404692305:2014-07-07T08:18:25.377+0000:1404692305:2014-07-07T08:18:25.377+0000:Fixed in master commit 14b61640abd4434485b146222873a3d52aad809f .
0,CAMEL-7582,Bug,Minor,2.13.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Tim Dudgeon,0,2,2014-07-05 10:31:07+00:00,2014-07-23 08:18:44+00:00,"As reported here: 
http://camel.465427.n5.nabble.com/Return-Value-from-Python-Script-Not-In-Message-Body-tt5724056.html#none


It seems that when calling python script that has more than a single statement  the return value from the script is null. Here is a simple example in groovy that  shows this:



package com.im.examples

import org.apache.camel.*
import org.apache.camel.impl.*
import org.apache.camel.builder.*

String script = URLEncoder.encode('""Hello world!""', ""UTF-8"") // this works - script returns ""Hello world!""
//String script = URLEncoder.encode('bar = ""baz""; ""Hello world!""', ""UTF-8"") // this fails - script returns null

CamelContext camelContext = new DefaultCamelContext()
camelContext.addRoutes(new RouteBuilder() {
        def void configure() {
            from(""direct:python"")
            .to(""language:python:"" + script)
        }
    }
)

camelContext.start()

ProducerTemplate t = camelContext.createProducerTemplate()
def result = t.requestBody('direct:python', 'foo')
println result

camelContext.stop()","njiang:1404947442:2014-07-10T07:10:42.411+0000:1404947442:2014-07-10T07:10:42.411+0000:camel-script component just can get result for one line expression.
If you want to run a more complicated scripts, the script engine can store the statements values into a value set.  I just did some change in the camel ScriptBuilder to look up the result value by using the key of ""result"".  Now I can get the result in multiple statements.
"
0,CAMEL-7581,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,2,2014-07-05 08:43:30+00:00,2014-09-01 09:18:20+00:00,"This is the behavior that multicast/splitter/recipient list does. So we should do that same for enricher/pollEnrich.


See nabble
http://camel.465427.n5.nabble.com/Enricher-EIP-skips-AggregationStrategy-if-Exchange-contains-exception-td5746533.html","davsclaus:1409529410:2014-09-01T07:56:50.218+0000:1409529410:2014-09-01T07:56:50.218+0000:We should keep the current behavior, and we can add an option to call aggregate even if the exchange failed.

As enrich / pollEnrich is for a single endpoint then it makes sense to keep the behavior as if its like a .to(uri) where if an exception was thrown, then the enricher / pollEnricher behaves the same as .to(uri) does.

There can be use-cases where you want to handle the exception in the aggregation strategy, and thus a flag to allow to do that."
0,CAMEL-7580,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Jonathan Anstey,Jonathan Anstey,0,2,2014-07-04 19:16:35+00:00,2014-09-09 19:28:42+00:00,Looking into creating a component for accessing Google's Drive service (see https://developers.google.com/drive/v2/reference/). Going to use the new camel-api-component-maven-plugin for this.,"davsclaus:1408918891:2014-08-25T06:21:31.379+0000:1408918891:2014-08-25T06:21:31.379+0000:Is this possible in the foreseeable future or can we moved this to the next release?
janstey:1408943970:2014-08-25T13:19:30.274+0000:1408943970:2014-08-25T13:19:30.274+0000:I'll try and take a look later this week. Not a blocker for the 2.14 release though."
0,CAMEL-7579,Task,Trivial,2.13.1,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Gardella Juan Pablo,0,2,2014-07-04 13:52:32+00:00,2014-07-04 14:15:44+00:00,"At http://camel.apache.org/components.html, there are broken links



at Krati component. It refers to http://data.linkedin.com/opensource/krati and this URL show 404.
camel-msv","gardellajuanpablo:1404454320:2014-07-04T14:12:00.261+0000:1404454320:2014-07-04T14:12:00.261+0000:[~davsclaus] They are still broken. 
davsclaus:1404454442:2014-07-04T14:14:02.400+0000:1404454442:2014-07-04T14:14:02.400+0000:Fixed at wiki which takes some time to update to static site.
gardellajuanpablo:1404454544:2014-07-04T14:15:44.456+0000:1404454544:2014-07-04T14:15:44.456+0000:Oh, ok. I will check tomorrow. Thanks!"
0,CAMEL-7578,Bug,Major,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Peter Keller,0,4,2014-07-04 12:44:12+00:00,2014-07-11 06:50:37+00:00,"This code doesn't pad field mandant with ""0"" if locale is not set: 



@CsvRecord(separator = "","")
public class Unity {
    @DataField(pos = 1, pattern = ""000"")
    public float mandant;




Route:



final BindyCsvDataFormat bindy = new BindyCsvDataFormat(Unity.class);
from(""direct:start"")
    .marshal(bindy)
    .log(""${body}"");




Testing with:



final Unity unity = new Unity();
unity.mandant = 50f;
final ProducerTemplate template = context.createProducerTemplate();




This prints:



50.0


Only when setting the locale, pattern is not ignored:



bindy.setLocale(Locale.US.getISO3Country());




This prints:



050","Peter Keller:1404449510:2014-07-04T12:51:50.240+0000:1404449510:2014-07-04T12:51:50.240+0000:See {{org.apache.camel.dataformat.bindy.format.NumberPatternFormat#getNumberFormat()}}:
{code}
if (locale == null) {
    return null;
}
{code}

This should be:
{code}
if (locale == null) {
    locale = Locale.getDefault();
}
{code}
githubbot:1404526407:2014-07-05T10:13:27.050+0000:1404526407:2014-07-05T10:13:27.050+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/212

    CAMEL-7578 pattern attribute should not be ignored if locale is not set

    Hi,
    
    This PR is related to https://issues.apache.org/jira/browse/CAMEL-7578
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel fix-Camel-7578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/212.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #212
    
----
commit 8989bc7b2ddf75cbcc9d39e59c7b8a511ca684c7
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-05T10:10:23Z

    Fixes CAMEL-7578 pattern attribute should not be ignored if locale is not set

----

acosentino:1404526473:2014-07-05T10:14:33.296+0000:1404526473:2014-07-05T10:14:33.296+0000:PR created:

https://github.com/apache/camel/pull/212
davsclaus:1404607741:2014-07-06T08:49:01.448+0000:1404607741:2014-07-06T08:49:01.448+0000:Thanks for the PR but that is not the solution, as returning null is by design according to CAMEL-5326
acosentino:1404608139:2014-07-06T08:55:39.437+0000:1404608206:2014-07-06T08:56:46.768+0000:Ok. Do you have an idea to solve this issue? Looking at CAMEL-5326 it seems there is no way.
davsclaus:1404608983:2014-07-06T09:09:43.907+0000:1404608983:2014-07-06T09:09:43.907+0000:You can now configure the local as 'default' which will use the platform default. Added note to docs about this, and also indicate that if you use the @DataField pattern then its recommended to set a locale on bindy.
acosentino:1404609409:2014-07-06T09:16:49.593+0000:1404609409:2014-07-06T09:16:49.593+0000:Sorry about the uselessness of this PR.
githubbot:1404609436:2014-07-06T09:17:16.419+0000:1404609436:2014-07-06T09:17:16.419+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/212

davsclaus:1404609671:2014-07-06T09:21:11.408+0000:1404609671:2014-07-06T09:21:11.408+0000:Thanks for the PR and help contributing to the project. We love that.
Keep em coming.


acosentino:1404609875:2014-07-06T09:24:35.368+0000:1404609875:2014-07-06T09:24:35.368+0000:I was thinking to submit a PR with a test case for this specific case. Should it be useful?
githubbot:1404611236:2014-07-06T09:47:16.791+0000:1404611236:2014-07-06T09:47:16.791+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/213

    CAMEL-7578 specific test case

    Hi,
    
    This PR is related to https://issues.apache.org/jira/browse/CAMEL-7578
    
    It's just a specific test case for the reported issue.
    
    I hope it should be useful.
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel test-Camel-7578

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/213.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #213
    
----
commit 8ffb77bb1956de618ac8314c39303cfb8ce290c0
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-06T09:44:10Z

    Test case related to the fix of CAMEL-7578 issue

----

acosentino:1404611297:2014-07-06T09:48:17.623+0000:1404611297:2014-07-06T09:48:17.623+0000:PR created:

https://github.com/apache/camel/pull/213

Just a test case related to this discussion and this issue.
davsclaus:1404611804:2014-07-06T09:56:44.344+0000:1404611804:2014-07-06T09:56:44.344+0000:Yeah a test case is welcome. Just mind that if using default locale then testing depends on what that value is. eg we have people testing this from all the world. So the unit test needs to work on all those defaults too.
acosentino:1404611962:2014-07-06T09:59:22.573+0000:1404612005:2014-07-06T10:00:05.116+0000:Ok. I'll improve this test case. Thanks.

I'll post a comment when the PR will be updated with generic test case.
Peter Keller:1404617124:2014-07-06T11:25:24.437+0000:1404617124:2014-07-06T11:25:24.437+0000:Thanks a lot for the quick fix!
acosentino:1404622797:2014-07-06T12:59:57.693+0000:1404622797:2014-07-06T12:59:57.693+0000:PR updated

https://github.com/apache/camel/pull/213

I hope this should help.
acosentino:1404624720:2014-07-06T13:32:00.961+0000:1404624720:2014-07-06T13:32:00.961+0000:PR updated

https://github.com/apache/camel/pull/213

Now it examines all the available locale.

acosentino:1404814256:2014-07-08T18:10:56.749+0000:1404814256:2014-07-08T18:10:56.749+0000:Since the bug is already resolved.. can someone take a look to the Pr before it could be lost? Thanks.
davsclaus:1404858806:2014-07-09T06:33:26.313+0000:1404858806:2014-07-09T06:33:26.313+0000:Thanks for the PR I added a comment on the PR about maybe a better way to set a fixed locale during testing. Maybe you could look into that and submit and updated PR, then we can get that merged.
acosentino:1404860914:2014-07-09T07:08:34.735+0000:1404860914:2014-07-09T07:08:34.735+0000:Hi Claus,

Updated. My aim was to test all the possible Locale. You're right. That kind of test can lead to unexpected behavior.

Thanks,

Andrea
acosentino:1405031569:2014-07-11T06:32:49.271+0000:1405031569:2014-07-11T06:32:49.271+0000:Just to remember the PR is updated.

davsclaus:1405032410:2014-07-11T06:46:50.206+0000:1405032433:2014-07-11T06:47:13.425+0000:Thanks the PR has been merged (only on master). Do you mind closing the PR at github?
githubbot:1405032526:2014-07-11T06:48:46.860+0000:1405032526:2014-07-11T06:48:46.860+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/213

acosentino:1405032637:2014-07-11T06:50:37.063+0000:1405032637:2014-07-11T06:50:37.063+0000:Hi Claus,

AsfGit already closed it. Many thanks.

Andrea"
0,CAMEL-7577,Bug,Major,2.13.1,None,"
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-04 12:16:20+00:00,2014-07-04 12:19:25+00:00,"See nabble
http://camel.465427.n5.nabble.com/File-component-does-not-delete-file-tp5753140p5753207.html


The ZipIterator should be Closable so the splitter eip closes it correctly.",
0,CAMEL-7576,Improvement,Major,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-04 07:27:05+00:00,2014-08-26 13:50:07+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-cache-2-13-1-fails-on-UpdateChecker-tp5753294.html


And some links
https://issues.apache.org/jira/browse/SHINDIG-1617?jql=text%20~%20%22updatechecker%22
https://jira.terracotta.org/jira/browse/QTZ-29",
0,CAMEL-7575,Improvement,Major,None,2.14.0,"
None
",Resolved,Won't Fix,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-07-03 14:17:44+00:00,2014-07-04 12:14:14+00:00,"As the user may add the attachments in the bean method call, we should support to copy the attachments back to the exchange when call the bean method.


http://camel.465427.n5.nabble.com/Attachments-are-Lost-using-Bean-Language-tp5753283.html","njiang:1404447254:2014-07-04T12:14:14.719+0000:1404447254:2014-07-04T12:14:14.719+0000:For BeanExpression, we are not supposed to modify the exchange or the message in the evaluation processor, camel just want to know the result of the evaluation. "
0,CAMEL-7574,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-07-03 08:59:23+00:00,2014-07-03 11:19:05+00:00,Expose the component options for the Camel Atmosphere Websocket component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1404354426:2014-07-03T10:27:06.352+0000:1404354426:2014-07-03T10:27:06.352+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/209

    Fix for CAMEL-7574 Expose the component options for Camel Atmosphere Web...

    ...socket

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7574

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/209.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #209
    
----
commit 9e773d8982210b70bda2aad83dd88aea068ca549
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-07-03T10:25:33Z

    Fix for CAMEL-7574 Expose the component options for Camel Atmosphere Websocket

----

githubbot:1404357545:2014-07-03T11:19:05.406+0000:1404357545:2014-07-03T11:19:05.406+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/209
"
0,CAMEL-7573,Task,Trivial,2.13.1,2.14.0,"

documentaion

",Resolved,Fixed,2.14.0,Claus Ibsen,Per Jørgen Walstrøm,0,2,2014-07-03 08:18:36+00:00,2014-07-04 10:52:37+00:00,"http://camel.apache.org/disruptor.html is missing a description of the multipleConsumers option (if there is any). One of the last paragraphs, ""Using multipleConsumers"", implies that there is such an option.",davsclaus:1404442350:2014-07-04T10:52:30.857+0000:1404442350:2014-07-04T10:52:30.857+0000:Add it to the table.
0,CAMEL-7572,Bug,Major,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-03 06:23:22+00:00,2014-07-03 11:16:56+00:00,"If setting a custom id on a CBR then the dump route as xml JMX operation will include the id duplicated in the otherwise tag



<routes xmlns=""http://camel.apache.org/schema/spring"">
    <route id=""route1"">
        <from uri=""file:src/data?noop=true""/>
        <to uri=""activemq:personnel.records"" customId=""true"" id=""amq""/>
    </route>
    <route id=""route2"">
        <from uri=""activemq:personnel.records""/>
        <choice customId=""true"" id=""myChoice"">
            <when id=""when1"">
                <xpath>/person/city = 'London'</xpath>
                <to uri=""file:target/messages/uk"" id=""to1""/>
            </when>
            <otherwise customId=""true"" id=""myChoice"">
                <to uri=""file:target/messages/others"" id=""to2""/>
            </otherwise>
        </choice>
    </route>
</routes>",davsclaus:1404339825:2014-07-03T06:23:45.696+0000:1404339825:2014-07-03T06:23:45.696+0000:Notice that <otherwise> has id = myChoice also
0,CAMEL-7571,Bug,Minor,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-07-03 05:53:18+00:00,2014-07-03 06:10:22+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-RabbitMQProducer-tp5753248.html",
0,CAMEL-7570,Bug,Major,"2.12.3, 2.13.1",None,"
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Willem Jiang,1,2,2014-07-03 03:15:44+00:00,2014-07-03 11:31:02+00:00,"When using enrich DSL, camel doesn't send out ExchangeSendingEvent nor ExchangeSentEvent  for management.
You can find more information about it here","j0xaf:1404343946:2014-07-03T07:32:26.730+0000:1404343946:2014-07-03T07:32:26.730+0000:Attached unit tests. Testcases testInOut() and testInOnly() are passing whereas testEnrich() is failing.
njiang:1404358261:2014-07-03T11:31:01.998+0000:1404358261:2014-07-03T11:31:01.998+0000:Applied the patch into master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7569,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-07-02 14:27:57+00:00,2014-07-02 19:02:12+00:00,Expose the component options for the Camel Google App Engine component as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1404289392:2014-07-02T16:23:12.733+0000:1404289392:2014-07-02T16:23:12.733+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/206

    Fix for CAMEL-7569 Expose the component options for Camel GAE

    This includes updates to the gauth, ghttp, glogin, gmail, and gtask components

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7569

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/206.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #206
    
----
commit fe3de4af7162dff3a1fda227536cdd629c4f68a3
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-07-02T16:20:14Z

    Fix for CAMEL-7569 Expose the component options for Camel GAE

----

githubbot:1404298785:2014-07-02T18:59:45.716+0000:1404298785:2014-07-02T18:59:45.716+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/206
"
0,CAMEL-7568,Bug,Minor,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,André Ricardo da Silva Souza,0,1,2014-07-02 14:04:54+00:00,2014-09-01 11:06:47+00:00,"Example:


Route Sample
this.from(""servlet:///test"").routeId(""CamelTestRoute"") 
   .onCompletion() 
      .bean(this.logCompletionRoute) 
   .end() 
   .onException(Exception.class) 
      .log(LoggingLevel.ERROR, this.log, ""Error on processing message. Sending Rollback command!"") 
      .log(LoggingLevel.ERROR, this.log, ""${exception.stacktrace}"") 
      .rollback()
      .handled(true) 
   .end() 
   .transacted(RouteTransactionConfiguration.PROPAGATION_REQUIRED) 
   .process(new Processor() { 
                @Override 
                public void process(Exchange exchange) throws Exception { 
                    throw new Exception(); 
                }}); 




In this sample, the OnCompletion bean never is executed. But, if I remove the ""rollback()"" call, it is executed properly.


thanks,",
0,CAMEL-7567,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-07-02 13:36:51+00:00,2014-07-03 11:32:49+00:00,"We have these attributes on almost all other mbeans, we should have it on the mbeans in the tracer tree, as it allows ppl to easier figure out which camel context they are from.",davsclaus:1404358369:2014-07-03T11:32:49.019+0000:1404358369:2014-07-03T11:32:49.019+0000:There were a few other mbeans where it was missing.
0,CAMEL-7566,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-07-02 12:25:58+00:00,2014-07-02 13:50:18+00:00,Expose the component options for Camel Servlet as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1404276711:2014-07-02T12:51:51.885+0000:1404276711:2014-07-02T12:51:51.885+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/205

    Fix for CAMEL-7566 Expose the component options for Camel Servlet

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7566

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/205.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #205
    
----
commit 9d661ab4b9097855ea4c9ac9bd1301808bb9a1fe
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-07-02T12:50:40Z

    Fix for CAMEL=7566 Expose the component options for Camel Servlet

----

githubbot:1404280041:2014-07-02T13:47:21.413+0000:1404280041:2014-07-02T13:47:21.413+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/205
"
0,CAMEL-7565,Bug,Minor,2.13.1,"2.15.1, 2.16.0","

delete
disconnection
pollenrich
sftp

",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Steve Ardis,0,2,2014-07-01 18:18:39+00:00,2015-03-21 11:11:37+00:00,"Attached are two test cases - one with a ""non-pollEnrich"" test (which works fine) and one with a ""pollEnrich"" test (which fails).


In stepping through some of the code, it appears that the ""disconnect"" and ""delete"" are on two different threads (true for both scenarios).  However, for the ""non-pollEnrich"" test, there seems to be a cycle that allows the timing of the two threads to NOT be an issue.  For the ""pollEnrich"" test, that cycle doesn't seem to occur.  


My uneducated guess is that both tests (code executions) are checking to see if the ""from"" has completed (including performing the delete) before disconnecting.  This makes sense for the ""non-pollEnrich"" test, but for the ""pollEnrich"" it should be checking to see if the ""pollEnrich"" is done, not the ""from"".


Please note that if you do not indicate ""disconnect=true"", file deletion occurs as expected.  This seems to be broken in 2.12.x through 2.13.1 (not sure if it goes back further or not).


I have attached two different test cases to show the different behaviors (""non-pollEnrich"" vs ""pollEnrich"").","davsclaus:1404257986:2014-07-02T07:39:46.719+0000:1404257986:2014-07-02T07:39:46.719+0000:Sounds like disconnect is executed before the file is deleted, which happens with the UoW is done. Likely need to move the logic to disconnect in the UoW after file is deleted.
yarddog:1404294083:2014-07-02T17:41:23.412+0000:1404294083:2014-07-02T17:41:23.412+0000:Claus - 

I either have to come up with some hack using a bean and ConsumerTemplate, or given I can get my head around the fix you are suggesting, I can look into trying to create a patch for this issue.  I have breakpoints in the code at SftpConsumer.postPollCheck() (which does the disconnect and is NOT in the UOW) and GenericFileDeleteProcessStrategy.commit() (which does the delete and is in the UOW).  If it was easy enough to point me towards the piece of code(s) that I might be able to move from A to B, I can test it and submit a patch.

davsclaus:1404356714:2014-07-03T11:05:14.896+0000:1404356714:2014-07-03T11:05:14.896+0000:Yeah the disconnect logic should be moved to an UoW instead of post poll check. Though the trick is to only disconnect on the last Exchange, eg in case the consumer polled 5 files, then the disconnect should only happen on the last UoW. And that gets more complicated if the exchanges is processed in parallel and asynchronous. Then you could have that even the last file polled was not last processed, but maybe it was the 3rd file etc.

But for a single file, such as you may use with pollEnrich then there is only 1 exchange and therefore a bit easier.


yarddog:1404363461:2014-07-03T12:57:41.303+0000:1404363461:2014-07-03T12:57:41.303+0000:Something has to know when all the UoW(s) are done, right?  Would it be possible to put the disconnect logic in the ""supervisor"" (if there is such a thing) of the UoW(s), after they have all completed?
yarddog:1404716298:2014-07-07T14:58:18.978+0000:1404716298:2014-07-07T14:58:18.978+0000:I'm not sure I explicitly said this, but the ""non-pollEnrich"" test also throws an ""java.io.IOException: An established connection was aborted by the software in your host machine"", although the test case itself still completes successfully (and has the file deleted).
davsclaus:1426907497:2015-03-21T11:11:37.953+0000:1426907497:2015-03-21T11:11:37.953+0000:Thanks for the test case and reporting."
0,CAMEL-7564,Improvement,Major,2.13.1,2.14.0,"

Camel

",Resolved,Duplicate,2.14.0,Unassigned,Ramon Rosa da Silva,0,1,2014-07-01 15:45:36+00:00,2014-08-02 16:50:55+00:00,"Consumer RabbitMQ Component 
To minimize number of connections (TCP/IP) in production servers and have more consumer threads, we need a list of channels per connection instead just one.
Like: 
Collection<Channel> channels;","neoramon:1406969455:2014-08-02T16:50:55.091+0000:1406969455:2014-08-02T16:50:55.091+0000:CAMEL-7556, provide solution for this issue. "
0,CAMEL-7563,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Alexander Lomov,0,3,2014-07-01 10:02:20+00:00,2015-04-14 12:50:45+00:00,It is impossible now to pass an existing HazelcastInstance to a HazelcastEndpoint as a bean from Registry. It complicates Hazelcast Endpoint usage in any DI environment.,"githubbot:1404265884:2014-07-02T09:51:24.519+0000:1404265884:2014-07-02T09:51:24.519+0000:GitHub user alexlomov opened a pull request:

    https://github.com/apache/camel/pull/204

    CAMEL-7563: Hazelcast instance as an endpoint url param

    This improvement allows to refer an existing HazelcastInstance bean from Hazelcast endpoint URI.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alexlomov/camel hazelcast-instance-as-an-endpoint-url-param

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/204.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #204
    
----
commit 93525de01a6c12328c98bec0095cb088a4d67854
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-01T15:05:25Z

    Add feature to refer a HazelcastInstance from a Hazelcast endpoint query parameters.

commit 0a281676b40e053e4afe47fdcfe530ef9ce91699
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-01T15:08:01Z

    Add Spring tests to verify two Hazelcast endpoints use the same HazelcastInstance.

commit 90c4fecddab3fb2ba0caca32d3244829f036a4ed
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-01T17:14:10Z

    Optimize imports.

----

alexlomov:1404265963:2014-07-02T09:52:43.253+0000:1404265963:2014-07-02T09:52:43.253+0000:Created pull request https://github.com/apache/camel/pull/204

githubbot:1404434468:2014-07-04T08:41:08.067+0000:1404434468:2014-07-04T08:41:08.067+0000:Github user alexlomov closed the pull request at:

    https://github.com/apache/camel/pull/204

githubbot:1404438749:2014-07-04T09:52:29.030+0000:1404438749:2014-07-04T09:52:29.030+0000:GitHub user alexlomov opened a pull request:

    https://github.com/apache/camel/pull/211

    CAMEL-7563: Hazelcast instance as an endpoint url param

    Important fix was included with 31867fd commit.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alexlomov/camel hazelcast-instance-as-an-endpoint-url-param

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/211.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #211
    
----
commit 93525de01a6c12328c98bec0095cb088a4d67854
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-01T15:05:25Z

    Add feature to refer a HazelcastInstance from a Hazelcast endpoint query parameters.

commit 0a281676b40e053e4afe47fdcfe530ef9ce91699
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-01T15:08:01Z

    Add Spring tests to verify two Hazelcast endpoints use the same HazelcastInstance.

commit 90c4fecddab3fb2ba0caca32d3244829f036a4ed
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-01T17:14:10Z

    Optimize imports.

commit 31867fd080c9d506b5175b0fa94e2070b28b0034
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-07-04T09:41:47Z

    Handle own instance creation properly: create it only if neither bean reference was provided nor instance was set programmatially.

----

alexlomov:1404707062:2014-07-07T12:24:22.057+0000:1404707062:2014-07-07T12:24:22.057+0000:Hi Willem,
Could we please continue the conversation on the last fix?
I've just tried to create a HazelcastComponent with a Blueprint container and pass a Hazelcast instance to a property setter. The results are as follows: doStart in being invoked before the property setter is being called, the component checks the this.hazelcastInstance == null, creates the default one, and then assigns the setHazelcastInstance parameter to the hazelcastInstance field.
I believe we should either add an overloaded constructor that accepts a HazelcastInstance parameter or create the default HazelcastInstance not in the doStart method.
What do you think?

njiang:1404754968:2014-07-08T01:42:48.721+0000:1404754968:2014-07-08T01:42:48.721+0000:Can I have a look at your blueprint setting?
Please make sure the component name is same with the hazelcast, otherwise Camel will load a default one for you.
alexlomov:1404771906:2014-07-08T06:25:06.670+0000:1404771906:2014-07-08T06:25:06.670+0000:Yes please:
<?xml version=""1.0"" encoding=""UTF-8""?>
<blueprint xmlns=""http://www.osgi.org/xmlns/blueprint/v1.0.0""
           xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
           xmlns:cm=""http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0""
           xmlns:enc=""http://karaf.apache.org/xmlns/jasypt/v1.0.0""
           xmlns:camel=""http://camel.apache.org/schema/blueprint""
           xsi:schemaLocation=""http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
             http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd"">

    <reference id=""hazelcastInstance"" interface=""com.hazelcast.core.HazelcastInstance""
               filter=""(instanceName=cbh)""/>

    <bean id=""hazelcastConfig"" class=""com.hazelcast.config.Config"" factory-ref=""hazelcastInstance""
          factory-method=""getConfig"" />

    <bean id=""opCoCalloutRouter"" depends-on=""hazelcastInstance""
          class=""com.mypackage.OpCoCalloutRouter""/>

    <bean id=""opCoCallbackRouter"" depends-on=""hazelcastInstance""
          class=""com.mypackage.OpCoCallbackRouter""/>

    <bean id=""hazelcastComponent"" class=""org.apache.camel.component.hazelcast.HazelcastComponent"">
        <argument index=""0"" ref=""OpcoMediatorCtx"" type=""org.apache.camel.CamelContext"" />
        <property name=""hazelcastInstance"" ref=""hazelcastInstance"" />
    </bean>

    <camel:camelContext id=""OpcoMediatorCtx"">
        <camel:propertyPlaceholder id=""properties"" location=""blueprint:opco.mediator.context"" prefixToken=""{{""
                                   suffixToken=""}}""/>
        <camel:routeBuilder ref=""opCoCalloutRouter"" />
        <camel:routeBuilder ref=""opCoCallbackRouter"" />
    </camel:camelContext>
</blueprint>

> Please make sure the component name is same with the hazelcast
Didn't get it :(
njiang:1404772335:2014-07-08T06:32:15.737+0000:1404772335:2014-07-08T06:32:15.737+0000:We camel context look up the component, it always lookup the component from the registry (which holds reference of blueprint beans or spring beans) first.  Please change the below bean id to ""hazelcast"", in this way camel can use this configured component directly.

{code}
<bean id=""hazelcastComponent"" class=""org.apache.camel.component.hazelcast.HazelcastComponent"">
<argument index=""0"" ref=""OpcoMediatorCtx"" type=""org.apache.camel.CamelContext"" />
<property name=""hazelcastInstance"" ref=""hazelcastInstance"" />
</bean>
{code}
alexlomov:1404891510:2014-07-09T15:38:30.750+0000:1404891510:2014-07-09T15:38:30.750+0000:Hi Willem!
Thanks for the advice, it solves my issue.
njiang:1404933541:2014-07-10T03:19:01.040+0000:1404933541:2014-07-10T03:19:01.040+0000:Applied the patch into master branch and updated the wiki page for this new option.
githubbot:1428987045:2015-04-14T12:50:45.529+0000:1428987045:2015-04-14T12:50:45.529+0000:Github user alexlomov closed the pull request at:

    https://github.com/apache/camel/pull/211
"
0,CAMEL-7562,Bug,Major,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-06-30 19:25:51+00:00,2014-07-02 07:37:43+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-AdviceWith-issues-tp5752786.html


When using advice-with for a CBR it may add to the when clauses 2 times.",
0,CAMEL-7561,Bug,Major,2.13.1,None,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Vitalii Tymchyshyn,0,2,2014-06-30 19:18:06+00:00,2014-07-03 12:24:25+00:00,"We've got ProducerTemplate injected into our beans that are used to call direct routes. Unfortunately after camel context restart we are starting to get 
DirectConsumerNotAvailableException. It looks like it's because of cache used. The workaround is to restart a template itself, but it's used in beans that don't know about context restarts.


Here is a test, only testTemplateRestart works now:



public class ContextRestartTest {

    CamelContext camelContext;
    ProducerTemplate template;

    @Before
    public void makeContext() throws Exception {
        camelContext = new DefaultCamelContext();
        camelContext.addRoutes(new RouteBuilder(){

            @Override
            public void configure() throws Exception {
                from(""direct:test"").to(""log:test"");
            }
        });
        camelContext.start();
        template = camelContext.createProducerTemplate();
    }

    @After
    public void stopContext() throws Exception {
        template.stop();
        camelContext.stop();
    }

    @Test
    public void testDefaultURI() throws Exception {
        template.setDefaultEndpointUri(""direct:test"");
        template.sendBody(""test"");
        camelContext.stop();
        camelContext.start();
        template.sendBody(""test"");
    }

    @Test
    public void testGivenURI() throws Exception {
        template.sendBody(""direct:test"", ""test"");
        camelContext.stop();
        camelContext.start();
        template.sendBody(""direct:test"", ""test"");
    }

    @Test
    public void testTemplateRestart() throws Exception {
        template.sendBody(""direct:test"", ""test"");
        camelContext.stop();
        template.stop();
        template.start();
        camelContext.start();
        template.sendBody(""direct:test"", ""test"");
    }

}","davsclaus:1404127696:2014-06-30T19:28:16.666+0000:1404127696:2014-06-30T19:28:16.666+0000:This is not a bug, it works as designed.

Any bean that has X injected can use stale references if X is restarted or something.
tivv:1404210450:2014-07-01T18:27:30.366+0000:1404210450:2014-07-01T18:27:30.366+0000:So, basically, POJO Producing can't be used if camel contexts are restarted, can it? Should it be documented in the http://camel.apache.org/pojo-producing.html page? As for me it's serious limitation
davsclaus:1404263099:2014-07-02T09:04:59.570+0000:1404263099:2014-07-02T09:04:59.570+0000:See
http://camel.apache.org/lifecycle

Maybe instead of stop/start CamelContext then use suspend/resume instead.
davsclaus:1404355853:2014-07-03T10:50:53.450+0000:1404355853:2014-07-03T10:50:53.450+0000:btw if you want Camel to manage the lifecycle of your ProducerTemplate, you can add it as a service

{code}
context.addService(template);
{code}

Then the template is stopped when Camel stops.
Though when you start Camel again, you would need to re-create a new template, or start the old one again.
davsclaus:1404355986:2014-07-03T10:53:06.079+0000:1404355986:2014-07-03T10:53:06.079+0000:And btw by restart how do you do that? Is it 

context.stop();
context.start();

eg the same instance?

It as said before better to use suspend/resume.
davsclaus:1404356466:2014-07-03T11:01:06.931+0000:1404356466:2014-07-03T11:01:06.931+0000:And for POJO producing do you use @Produce or how do you get the template injected?

The issue is that to restart the template automatic we would need to keep a reference to the template in Camel, and start them up again when you restart. Today Camel will clear all such resources on shutdown. And that is why using suspend/resume is the recommended way.

And btw what is your use-case for the need of a Camel restart?
tivv:1404361465:2014-07-03T12:24:25.728+0000:1404361465:2014-07-03T12:24:25.728+0000:Yes, we've tried adding the template to context and indeed it was stopped and never started again.
We are using @EndpointInject to get it into our beans.
As of usecase, it's HA solution and we've got LifecycleStrategy that stops the context when node is out of quorum. We'll check if we can switch to suspend/resume instead. Currently we are using suspend/resume for single-node-only routes (we have route strategy for that), so we don't want to have it mixed somehow in the wrong way.
As of fix, I though, Cache can check if passed and cached endpoint (or it's component) is the same and invalidate cache entry if it's not.
Also, I'd document this limitation on http://camel.apache.org/pojo-producing.html."
0,CAMEL-7560,Bug,Major,2.13.1,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-06-30 18:27:22+00:00,2014-07-02 07:37:33+00:00,"See nabble
http://camel.465427.n5.nabble.com/Problem-with-adviceWith-on-2-13-x-tp5752421.html


The work-around when using transacted is to set isUseAdvice return false.",
0,CAMEL-7559,Wish,Major,2.13.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Shaun A Elliott,0,2,2014-06-30 15:54:24+00:00,2014-06-30 19:34:33+00:00,Bindy is a great library for csv serialization but users can't always use camel. Ideally one could use bindy without camel or with it.,"davsclaus:1404127796:2014-06-30T19:29:56.122+0000:1404127796:2014-06-30T19:29:56.122+0000:Not sure if there is the bandwith to maintain bindy outside Apache etc.
javamonkey79:1404128073:2014-06-30T19:34:33.340+0000:1404128073:2014-06-30T19:34:33.340+0000:Would it really be that complex to decouple it from camel in such a way that it is not required to use camel? If not I suppose it could be forked."
0,CAMEL-7558,Improvement,Minor,None,None,"
None
",Closed,Won't Fix,None,Unassigned,Kevin Anthony Earls,0,1,2014-06-30 11:32:44+00:00,2014-07-01 13:00:00+00:00,"We need to refactor the HttpEndpoint and ServletEndpoint classes to be based on abstract classes in order to allow exposing component options on Jetty (see CAMEL-7535) 


The current class hierarchy looks like:
    HttpEndpoint
        JettyHttpEndpoint
        Servlet Endpoint
            GhttpEndpoint
            WebsocketEndpoint
            GTaskEndpoint


It needs to look more like:
    AbstractHttpEndpoint
        HttpEndpoint
        JettyHttpEndpoint
        AbstractServletEndpoint
            ServletEndpoint
            GhttpEndpoint
            WebsocketEndpoint
            GTaskEndpoint",kearls:1404190800:2014-07-01T13:00:00.624+0000:1404190800:2014-07-01T13:00:00.624+0000:I found an easier way to do this.  See CAMEL-7535 / https://github.com/apache/camel/pull/203
0,CAMEL-7557,Bug,Minor,"2.12.3, 2.13.1","2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Sergey Beryozkin,0,2,2014-06-30 09:21:07+00:00,2014-07-04 11:53:30+00:00,No Desc,"njiang:1404446010:2014-07-04T11:53:30.411+0000:1404446010:2014-07-04T11:53:30.411+0000:I just commit the patch into master, camel-2.13.x and camel-2.12.x branches.
Now the message header is copying to client whether CxfRsProducer is in Proxy model or not."
0,CAMEL-7556,New Feature,Major,2.13.1,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Gérald Quintana,0,3,2014-06-29 13:02:44+00:00,2014-09-16 02:02:41+00:00,Allow multiple concurrent threads listening to a single queue (like the JMS endpoint),"githubbot:1404030030:2014-06-29T16:20:30.176+0000:1404030030:2014-06-29T16:20:30.176+0000:GitHub user gquintana opened a pull request:

    https://github.com/apache/camel/pull/202

    CAMEL-7556 Multiple concurrent consumer threads

    In relation with https://issues.apache.org/jira/browse/CAMEL-7556

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gquintana/camel camel-7556-multiple-concurrent-consumer-threads

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/202.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #202
    
----
commit fc48963d9410229e4ee3118f9cd95d4abea2cfe8
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2014-06-29T16:12:42Z

    CAMEL-7556 Multiple concurrent consumer threads

----

githubbot:1410061288:2014-09-07T11:41:28.651+0000:1410061288:2014-09-07T11:41:28.651+0000:Github user gquintana closed the pull request at:

    https://github.com/apache/camel/pull/202

gquintana:1410782421:2014-09-15T20:00:21.298+0000:1410782421:2014-09-15T20:00:21.298+0000:Please add to Confluence the option:
concurrentConsumers   |    1   |   *Camel 2.14:* Number of threads/channels used to consume messages
njiang:1410804161:2014-09-16T02:02:41.408+0000:1410804161:2014-09-16T02:02:41.408+0000:I just checked the wiki page, this option was updated."
0,CAMEL-7555,Bug,Major,2.13.1,None,"
None
",Resolved,Won't Fix,None,Willem Jiang,Peter Keller,0,2,2014-06-29 10:56:56+00:00,2015-01-15 00:49:19+00:00,"ZipAggregationStrategy does not preserve properties:



public class MyRouteBuilder extends RouteBuilder {
    @Override
    public void configure() {
        from(""file:zipper/in?include=.*.xml&noop=true"")
            .process(new Processor() {
                @Override
                public void process(final Exchange exchange) throws Exception {
                    exchange.setProperty(""myProperty"", ""myValue"");
                }
            })
            .aggregate(new ZipAggregationStrategy())
            .constant(true)
            .completionFromBatchConsumer()
            .eagerCheckCompletion()
            .log(""myProperty = ${property.myProperty}"")
            .to(""file:zipper/out"");
    }
}




This logs:



myProperty = 


Instead it should log:



myProperty = myValue


See http://stackoverflow.com/questions/24473035/how-to-access-calling-exchange-with-camels-zipaggregationstrategy","njiang:1404067419:2014-06-30T02:43:39.770+0000:1404067419:2014-06-30T02:43:39.770+0000:Camel doesn't suppose to copy the properties in default aggregator, as it is hard to tell which property need to be copy if the exchanges use different properties. If you want to set the FILE_NAME, you can just put the custom process jut before the setHeader DSL. 
Peter Keller:1404450054:2014-07-04T13:00:54.591+0000:1404450054:2014-07-04T13:00:54.591+0000:It's expected that properties are accessible during the *entire* lifetime of the {{Exchange}} object. From the JavaDoc of [Exchange|http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/Exchange.html]:

{quote}
The Exchange also holds meta-data during its *entire* lifetime stored as properties accessible using the various getProperty(String) methods.
{quote}

Why not copy just all properties as this is be done everywhere else?"
0,CAMEL-7554,New Feature,Major,None,None,"

component
features
github
metrics

",Resolved,Fixed,2.14.0,Claus Ibsen,Lauri Kimmel,0,3,2014-06-28 11:11:14+00:00,2014-08-14 07:00:51+00:00,"I created camel-metrics component to report various metrics like counters, meters, histograms and timers directly from Camel routes using Metrics  library.


Source code can be found https://github.com/laurikimmel/camel-metrics","njiang:1404071811:2014-06-30T03:56:51.770+0000:1404071811:2014-06-30T03:56:51.770+0000:Hi Lauri,

Could send a pull request to apache/camel in the GitHub? 
I'd happy to merge it into Apache camel master branch, it could be part of Camel-2.14.0 :)

Regards,

Willem
davsclaus:1404077791:2014-06-30T05:36:31.146+0000:1404077791:2014-06-30T05:36:31.146+0000:Or attach the source code to this JIRA as a .zip file
laurikimmel:1404363086:2014-07-03T12:51:26.096+0000:1404363086:2014-07-03T12:51:26.096+0000:Created pull request in GitHub https://github.com/apache/camel/pull/210.
davsclaus:1406075015:2014-07-23T08:23:35.440+0000:1406075015:2014-07-23T08:23:35.440+0000:Hi do you mind creating a new PR with the component added to the master branch of Apache Camel, and where the component is added to the components directory, where all the other components are.

The current patch / PR cannot be applied without a lot of work on our end.
laurikimmel:1406179592:2014-07-24T13:26:32.616+0000:1406179592:2014-07-24T13:26:32.616+0000:I will look the master branch issue.

The second issue looks strange to me since new files are added to {{components/camel-metrics}} folder next to all other components. When I tested with local merge to master all files where there as expected. So it's hard for me to understand what exactly is misplaced.

Also noticed that some of the unit tests in camel-metrics component are broken after update from main repository. I will update them as needed.
laurikimmel:1406690422:2014-07-30T11:20:22.731+0000:1406690422:2014-07-30T11:20:22.731+0000:Merged Camel Metric component to master branch, fixed unit tests and created new pull request [#229 | https://github.com/apache/camel/pull/229].
davsclaus:1406692901:2014-07-30T12:01:41.114+0000:1406692901:2014-07-30T12:01:41.114+0000:Thanks Lauri,

Do you mind helping with the documentation for the component?

See here how to be able to edit yourself
http://camel.apache.org/how-do-i-edit-the-website.html


davsclaus:1406693014:2014-07-30T12:03:34.750+0000:1406693014:2014-07-30T12:03:34.750+0000:I guess the documentation is very much what you got in the readme.md today at
https://github.com/laurikimmel/camel-metrics

But formatted and styled in camel wiki, and the components added in the list here
http://camel.apache.org/components.html
laurikimmel:1406693973:2014-07-30T12:19:33.763+0000:1406693973:2014-07-30T12:19:33.763+0000:{quote}
Do you mind helping with the documentation for the component?
See here how to be able to edit yourself
http://camel.apache.org/how-do-i-edit-the-website.html
{quote}

Sure, I'll start tomorrow. Probably the ICLA and access to the wiki will take few days though.
laurikimmel:1407909114:2014-08-13T13:51:54.285+0000:1407909349:2014-08-13T13:55:49.873+0000:Added
* https://cwiki.apache.org/confluence/display/CAMEL/Metrics+Component.

Updated
* https://cwiki.apache.org/confluence/display/CAMEL/Component+List
* https://cwiki.apache.org/confluence/display/CAMEL/Component+List+Grouped
* https://cwiki.apache.org/confluence/display/CAMEL/Camel+2.14.0+Release


davsclaus:1407970851:2014-08-14T07:00:51.747+0000:1407970851:2014-08-14T07:00:51.747+0000:Thanks for helping with the docs."
0,CAMEL-7523,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-19 13:14:29+00:00,2014-07-02 07:50:50+00:00,Expose the component options for Camel CXFas has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1403590568:2014-06-24T14:16:08.457+0000:1403590568:2014-06-24T14:16:08.457+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/194

    Fix for CAMEL-7523 Expose the component options for Camel CXF

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7523

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/194.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #194
    
----
commit ebbce3afcc4e8b57d0cc1ebb16e51f1faf69f9c9
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-24T14:13:09Z

    Fix for CAMEL-7523 Expose the component options for Camel CXF

----

githubbot:1403590725:2014-06-24T14:18:45.726+0000:1403590725:2014-06-24T14:18:45.726+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/194
"
0,CAMEL-7522,Improvement,Minor,2.13.1,,"
None
",Resolved,Not A Problem,None,Willem Jiang,Alexey Markevich,0,2,2014-06-19 13:10:42+00:00,2014-06-20 08:01:40+00:00,No Desc,"njiang:1403160228:2014-06-19T14:43:48.922+0000:1403160228:2014-06-19T14:43:48.922+0000:
As there are some API package changes relates to ReflectionServiceFactoryBean, we have to use reflection to support the compiled code can work with these two version of CXF at the same time.

It can be verified by running the test (without recompile the code) with different version CXF.
amarkevich:1403166121:2014-06-19T16:22:01.744+0000:1403166121:2014-06-19T16:22:01.744+0000:Then break; expected if appropriate method called at for (Method m : cf.getClass().getMethods())"
0,CAMEL-7521,Improvement,Major,2.13.2,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Jerry Williamson,0,2,2014-06-18 15:55:09+00:00,2014-07-04 11:31:46+00:00,"We use a splitter route that splits very large files.
The splits need to be aggregated in order.
The splitter is therefore configured with streaming=true and parallelProcessing=false.


When there are multiple in-flight exchanges on the route (i.e. different files are being processed) the end-to-end processing time for each file is significantly impacted because each aggregation call is synchronized in MulticastProcessor.doAggregate method..


It is not uncommon, in our environment, to have thousands of splits per file and the synchronization is significantly impacting the throughput of the route.


I propose that an option be added (to splitter at least) to allow for an unsynchronized aggregation. The option would default to false for backward compatibility and would possibly be ignored if parallelProcessing = true.


The body of the MulticastProcess.doAggregate method could be moved to a new, unsynchronized method (say doAggregateInternal). The MulticastProcessor.doAggregate method could remain synchronized (again for backward compatibility) but the body of that method would then call the new unsynchronized doAggregateInternal method. In this way, existing code would remain synchronized.


The splitter, then, could call the unsynchronized doAggregateInternal method when the unsynchronizedAggregation option was true.","jwilliamson:1403100726:2014-06-18T22:12:06.766+0000:1403100726:2014-06-18T22:12:06.766+0000:attached a patch that provides an unsynchronizedSequentialAggregation option on MulticastProcessor and exposes it through the SplitterDefinition.
I tried backwardly compatible and provide opt-in to the behavior for the option.

I've also attached a ""test"".
It's not really a proper test that asserts conditions but it will print out the elapsed time of running concurrent in-flight requests with synchronized and unsynchronized aggregation. It will demonstrate the increasing impact of the synchronization as the number of concurrent in-flight requests grows.
davsclaus:1404444706:2014-07-04T11:31:46.421+0000:1404444706:2014-07-04T11:31:46.421+0000:Thanks I added the new option as parallelAggregate so it has similar names as the other options. I also enabled the options on mutlicast, recipient list, as they all extend from multicast where the logic is added."
0,CAMEL-7520,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-06-18 06:33:57+00:00,2017-02-04 18:55:53+00:00,"If there are two camel-jetty endpoint are using the same port, they are sharing the same jetty sever. But if one endpoint has a custom handler need to be set and another endpoint has not, the endpoints start order could affect the handler setting of jetty server.
So we need to make sure the handler is set even the jetty server is started.","njiang:1408488448:2014-08-20T06:47:28.541+0000:1408488448:2014-08-20T06:47:28.541+0000:Applied patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7519,Improvement,Major,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Onder Sezgin,James Birchfield,1,5,2014-06-18 03:23:40+00:00,2017-04-20 08:05:37+00:00,"If you have String field that contains the same character (String) as the quote character, and quoting is set to true, the embedded character should be escaped.


val s:String = ""\""foo\""""


Bindy will unmarshal to the CSV stream """"foo"""",""..."",""..."",""..."",...
it should be ""\""foo\"""",""..."",""..."",""..."",...","birchsport:1403033291:2014-06-18T03:28:11.042+0000:1403033291:2014-06-18T03:28:11.042+0000:I understand different CSV parsers handle escaped quotes differently.  Some want \"" and some want """".  Perhaps this could be an option.

I still believe that all embedded delimiters should be escaped as well, but probably only by prepending the \ character.
davsclaus:1403044932:2014-06-18T06:42:12.826+0000:1403044932:2014-06-18T06:42:12.826+0000:This is not a bug, bindy have never intended to escape quotes. 

This would be an enhancement to add logic to include an escape character.
mtran:1407690584:2014-08-11T01:09:44.860+0000:1407690584:2014-08-11T01:09:44.860+0000:I'm encountering this issue in my project as well.

I do consider this a bug. To me it's like the MVC pattern. Our Bindy POJO is our model and the marshalling to csv is the view. How we configure the view, to include quoting or not should have no effect on our model. At the moment, this issue is forcing a coupling between the model and the view. The model has to understand which view it is using and have to change itself.
githubbot:1492573089:2017-04-19T11:38:09.357+0000:1492573089:2017-04-19T11:38:09.357+0000:GitHub user onders86 opened a pull request:

    https://github.com/apache/camel/pull/1640

    CAMEL-7519 - new option quotingEscaped added for marshalling/unmarsha…

    …lling with escape char and fix some typo

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onders86/camel CAMEL-7519

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/1640.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #1640
    
----
commit dea74cc06c6aca27102c8e4dfa0c3b5737892756
Author: onders86 <ondersezgin@gmail.com>
Date:   2017-04-19T11:34:05Z

    CAMEL-7519 - new option quotingEscaped added for marshalling/unmarshalling with escape char and fix some typo

----

githubbot:1492646737:2017-04-20T08:05:37.731+0000:1492646737:2017-04-20T08:05:37.731+0000:Github user onders86 closed the pull request at:

    https://github.com/apache/camel/pull/1640
"
0,CAMEL-7518,Bug,Major,2.13.0,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-06-17 18:38:18+00:00,2014-06-17 18:41:24+00:00,"See nabble
http://camel.465427.n5.nabble.com/Bug-in-org-apache-camel-util-FileUtil-renameFile-introduced-in-2-13-0-tp5752450.html


Regression introduced by CAMEL-6458",
0,CAMEL-7517,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-17 12:34:04+00:00,2014-08-22 15:24:55+00:00,Expose the component options for Camel HDFS2 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402980861:2014-06-17T12:54:21.014+0000:1402980861:2014-06-17T12:54:21.014+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/187

    Fix for CAMEL-7517 Expose the component options for Camel HDFS2

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7517

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/187.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #187
    
----
commit 8579307e1592c695aa9c0229104eb67d9ead4394
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-17T12:52:39Z

    Fix for CAMEL-7517 Expose the component options for Camel HDFS2

----

githubbot:1402982233:2014-06-17T13:17:13.692+0000:1402982233:2014-06-17T13:17:13.692+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/187
"
0,CAMEL-7516,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-17 12:09:52+00:00,2014-08-22 15:25:07+00:00,Expose the component options for Camel HDFS as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402979532:2014-06-17T12:32:12.241+0000:1402979532:2014-06-17T12:32:12.241+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/186

    Fix for CAMEL-7516 Expose the component options for Camel HDFS

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7516

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/186.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #186
    
----
commit 6a47e9bd5ed1dfa0c47a42b3d5d1ef916c6262d8
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-17T12:30:41Z

    Fix for CAMEL-7516 Expose the component options for Camel HDFS

----

githubbot:1402982233:2014-06-17T13:17:13.515+0000:1402982233:2014-06-17T13:17:13.515+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/186
"
0,CAMEL-7515,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-17 11:40:54+00:00,2014-08-22 15:21:35+00:00,Expose the component options for Camel Netty HTTP as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1404705296:2014-07-07T11:54:56.804+0000:1404705296:2014-07-07T11:54:56.804+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/214

    Fix for CAMEL-7515 Expose the component options for Camel Netty HTTP

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7515

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/214.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #214
    
----
commit e8216ac7b82f5010054479fea4ebfcb6e883988e
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-07-07T11:53:29Z

    Fix for CAMEL-7515 Expose the component options for Camel Netty HTTP

----

githubbot:1405128171:2014-07-12T09:22:51.743+0000:1405128171:2014-07-12T09:22:51.743+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/214
"
0,CAMEL-7514,Improvement,Minor,2.13.1,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-06-17 07:57:38+00:00,2014-06-17 08:06:41+00:00,It may be initialized twice,
0,CAMEL-7513,Bug,Major,2.13.1,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Claus Ibsen,Jonathan Vila,0,2,2014-06-16 15:51:57+00:00,2014-06-16 18:39:30+00:00,"I have an Aggregator POJO with this method :


public Map<Hoteles, List<EventoPrecio>> agregaEventoPrecio(Map<Hoteles, List<EventoPrecio>> lista, EventoPrecio evento) 


With this route :


from(""timer://tesipro?fixedRate=true&period=60000"").
beanRef(""uploadARIService"", ""getEventosPrecio"").
aggregate(constant(true), AggregationStrategies.bean(AgregadorEventos.class, ""agregaEventoPrecio"")).
completionSize(100).
log(""Ejecucion de Quartz "");


And I get this error :


Error occurred during starting Camel: CamelContext(249-camel-9) due Parameter annotations at index 1 is not supported on method: public java.util.HashMap com.tesipro.conectores.interfaces.tesiproconpush.camel.AgregadorEventos.agregaEventoPrecio(java.util.HashMap,com.tesipro.conectores.domain.EventoPrecio)          


It seems the problem is that annotations are not supported in the aggregator arguments nor in the argument class.


https://github.com/apache/camel/blob/3f4f8e9ddcc8de32cca084927a10c5b3bceef7f9/camel-core/src/main/java/org/apache/camel/processor/aggregate/AggregationStrategyBeanInfo.java#L67",davsclaus:1402915170:2014-06-16T18:39:30.626+0000:1402915170:2014-06-16T18:39:30.626+0000:Thanks for reporting.
0,CAMEL-7512,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-16 15:26:17+00:00,2014-08-22 15:25:19+00:00,Expose the component options for Camel Netty as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402904980:2014-06-16T15:49:40.626+0000:1402904980:2014-06-16T15:49:40.626+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/185

    Fix for CAMEL-7512 Expose the component options for Camel Netty

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7512

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/185.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #185
    
----
commit 3f8dcdde56b3012667a047f7f3b52a6f3640c12c
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-16T15:48:09Z

    Fix for CAMEL-7512 Expose the component options for Camel Netty

----

githubbot:1402915360:2014-06-16T18:42:40.607+0000:1402915360:2014-06-16T18:42:40.607+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/185
"
0,CAMEL-7511,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-16 13:17:10+00:00,2014-08-22 15:25:31+00:00,Expose the component options for Camel Quartz2 as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402897590:2014-06-16T13:46:30.218+0000:1402897590:2014-06-16T13:46:30.218+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/184

    Fix for CAMEL-7511 Expose the component options for Camel Quartz2

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7511

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/184.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #184
    
----
commit 3956583c7aec40f89b75cf77f4ed5c20085c3ee2
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-16T13:44:31Z

    Fix for CAMEL-7511 Expose the component options for Camel Quartz2

----

githubbot:1402915360:2014-06-16T18:42:40.257+0000:1402915360:2014-06-16T18:42:40.257+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/184
"
0,CAMEL-7510,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-16 12:40:23+00:00,2014-08-07 14:50:36+00:00,Expose the component options for Camel Quartz as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402895731:2014-06-16T13:15:31.721+0000:1402895731:2014-06-16T13:15:31.721+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/183

    Fix for CAMEL-7510 Expose the component options for Camel Quartz

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7510

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/183.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #183
    
----
commit 4a0e89e58c339462701267fa8339530a7fd71105
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-16T13:14:06Z

    Fix for CAMEL-7510 Expose the component options for Camel Quartz

----

githubbot:1407223205:2014-08-05T15:20:05.915+0000:1407223205:2014-08-05T15:20:05.915+0000:Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/183

githubbot:1407284729:2014-08-06T08:25:29.502+0000:1407284729:2014-08-06T08:25:29.502+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/231

    Fix for CAMEL-7510 Expose the component options for Camel Quartz

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7510

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/231.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #231
    
----
commit 329a40c00efdb2eea8c002974083e51ae1ec3d5b
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-08-06T08:19:11Z

    Fix for CAMEL-7510 Expose the component options for Camel Quartz

----

githubbot:1407394236:2014-08-07T14:50:36.021+0000:1407394236:2014-08-07T14:50:36.021+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/231
"
0,CAMEL-7509,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-16 09:57:52+00:00,2014-08-22 15:25:42+00:00,Expose the component options for Camel JGroupsas has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402884309:2014-06-16T10:05:09.910+0000:1402884309:2014-06-16T10:05:09.910+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/182

    Fix for CAMEL-7509 Expose the component options for Camel JGroups

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7509

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/182.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #182
    
----
commit d62ac0f4eb86d1e1eef4a5314a94e24e582dbbdd
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-16T10:03:27Z

    Fix for CAMEL-7509 Expose the component options for Camel JGroups

----

githubbot:1402892640:2014-06-16T12:24:00.480+0000:1402892640:2014-06-16T12:24:00.480+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/182
"
0,CAMEL-7508,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-13 15:36:50+00:00,2014-06-14 07:23:07+00:00,Expose the component options for Camel Infinispan as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402645668:2014-06-13T15:47:48.516+0000:1402645668:2014-06-13T15:47:48.516+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/181

    Fixes CAMEL-7508 Expose the component options for Camel Infinispan

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7508

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/181.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #181
    
----
commit 2be3d6f8d8c77a7f26d608c2b5048438d3ac6424
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-13T15:45:36Z

    Fixes CAMEL-7508 Expose the component options for Camel Infinispan

----

githubbot:1402701066:2014-06-14T07:11:06.328+0000:1402701066:2014-06-14T07:11:06.328+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/181
"
0,CAMEL-7507,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-13 12:25:17+00:00,2014-06-14 07:23:24+00:00,Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402635549:2014-06-13T12:59:09.749+0000:1402635549:2014-06-13T12:59:09.749+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/180

    Fix for CAMEL-7507 Expose the component options for Camel JPA

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7507

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/180.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #180
    
----
commit b00f75e426f96586e09cf0fb0c82a2ca038ca195
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-13T12:56:42Z

    Fix for CAMEL-7507 Expose the component options for Camel JPA

----

githubbot:1402701066:2014-06-14T07:11:06.329+0000:1402701066:2014-06-14T07:11:06.329+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/180
"
0,CAMEL-7506,Bug,Major,2.13.1,None,"
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Henryk Konsek,Henryk Konsek,0,1,2014-06-13 06:26:22+00:00,2014-06-13 14:56:15+00:00,"In Camel Netty HTTP component, we don't remove headerFilterStrategy option from the parameters, so it is propagated as a query parameter.


When I create producer URL like this - netty-http:http://host.com?headerFilterStrategy=#headerFilterStrategy&foo=bar I expect only foo=bar to be send as a query to to endpoint (while headerFilterStrategy=#headerFilterStrategy should be resolved from the registry and removed from the parameters). This is how it works in Jetty component for example.","hekonsek:1402612250:2014-06-13T06:30:50.942+0000:1402612250:2014-06-13T06:30:50.942+0000:Fixed in 0da7ade0b994a9404054aa0b3bb6eee02183994b .
hekonsek:1402642320:2014-06-13T14:52:00.295+0000:1402642320:2014-06-13T14:52:00.295+0000:Backported to 2.13.2 in commit c98d0430575e6c1746ba9d6ba65dcd945a0a51cc.
hekonsek:1402642551:2014-06-13T14:55:51.571+0000:1402642551:2014-06-13T14:55:51.571+0000:Backported to 2.12.4 in commit 265c2899279144f55b46f1e691deccaa5439cd95."
0,CAMEL-7505,Improvement,Trivial,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,David J. M. Karlsen,0,2,2014-06-12 16:21:08+00:00,2014-08-22 15:27:25+00:00,http://camel.apache.org/uuidgenerator.html mentions the different UUID generators which can be set on a context - but does not mention what it´s used for. Does an ID always be generated for an exchange? Will it be set as a header? Can I as an user interact with it and get id´s generated? etc,davsclaus:1408692445:2014-08-22T15:27:25.470+0000:1408692445:2014-08-22T15:27:25.470+0000:Added a little text
0,CAMEL-7504,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,David J. M. Karlsen,0,5,2014-06-12 16:11:25+00:00,2014-07-02 19:01:50+00:00,"It would be nice if the throttler, http://camel.apache.org/throttler.html, could discard/filter the messages exceeding the limit.


My usecase is to send alerts to a alering route, and stick the trottler in front of an smtp endpoint to limit the number of emails sent during a period.","njiang:1402945147:2014-06-17T02:59:07.886+0000:1402945147:2014-06-17T02:59:07.886+0000:I just did change CAMEL-7491 in camel master branch to let throttler throw the ExcuctionRejctionException instead of delaying the processing. Can you try it with the latest camel-2.14-SNAPSHOT?
davidkarlsen@gmail.com:1403055705:2014-06-18T09:41:45.934+0000:1403055705:2014-06-18T09:41:45.934+0000:Upgraded one of my production instances.
Need to wait until the route gets some traffic to see if it works.
davidkarlsen@gmail.com:1403525081:2014-06-23T20:04:41.170+0000:1403525081:2014-06-23T20:04:41.170+0000:Works like a charm!:
{noformat}
2014-06-23 21:49:15,467 [Camel (camel-1) thread #0 - timer://myTimer][][][][][][][] ERROR org.apache.camel.processor.FatalFallbackErrorHandler:54 - \--> Previous exception on exchangeId: ID-aap-prx-01-34540-140300
3938060-0-366007
java.util.concurrent.RejectedExecutionException: Exceed the max request limit!
        at org.apache.camel.processor.Throttler.processDelay(Throttler.java:215) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:168) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:40) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at com.davidkarlsen.httptest.MyRouteBuilder$2.process(MyRouteBuilder.java:113) ~[http-test-1.0-SNAPSHOT.jar:na]
        at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:42) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:839) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:337) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:157) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:68) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at java.util.Timer$TimerImpl.run(Timer.java:291) [na:na]
2014-06-23 21:49:15,470 [Camel (camel-1) thread #0 - timer://myTimer][][][][][][][] ERROR org.apache.camel.processor.FatalFallbackErrorHandler:55 - \--> New exception on exchangeId: ID-aap-prx-01-34540-14030039380
60-0-366007
java.util.concurrent.RejectedExecutionException: Exceed the max request limit!
        at org.apache.camel.processor.Throttler.processDelay(Throttler.java:215) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:168) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:87) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:40) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at com.davidkarlsen.httptest.MyRouteBuilder$2.process(MyRouteBuilder.java:113) ~[http-test-1.0-SNAPSHOT.jar:na]
        at org.apache.camel.processor.DelegateSyncProcessor.process(DelegateSyncProcessor.java:63) ~[camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:42) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:839) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:337) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:118) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:157) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:68) [camel-core-2.14-20140617.030729-34.jar:2.14-SNAPSHOT]
        at java.util.Timer$TimerImpl.run(Timer.java:291) [na:na]
{noformat}

Thanks!
davsclaus:1403558864:2014-06-24T05:27:44.521+0000:1403558864:2014-06-24T05:27:44.521+0000:I wonder if we need an option to reject them messages silently? eg today you get this exception which may be noisy in the logs out of the box. Maybe in some use cases you do not care if the message was discarded?

Also {{RejectedExecutionException}} is a generic exception so you cannot easily configure the error handler today to ignore this exception, as you would need to check the exception message text being `Exceed the max request limit!` to know its from a throttler
githubbot:1404297070:2014-07-02T18:31:10.179+0000:1404297070:2014-07-02T18:31:10.179+0000:GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/207

    CAMEL-7504: Have a ThrottlerRejectedExecutionException instead of a gene...

    ...ric RejectedExecutionException

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7504

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/207.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #207
    
----
commit e7eddb02286cd8f147324462d6e15b8f09dec1df
Author: david <david@davidkarlsen.com>
Date:   2014-07-02T18:29:59Z

    CAMEL-7504: Have a ThrottlerRejectedExecutionException instead of a generic RejectedExecutionException

----

githubbot:1404298910:2014-07-02T19:01:50.242+0000:1404298910:2014-07-02T19:01:50.242+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/207
"
0,CAMEL-7503,Bug,Major,2.13.0,"2.12.5, 2.13.3, 2.14.0","
None
",Resolved,Not A Problem,"2.12.5, 2.13.3, 2.14.0",Willem Jiang,Alexey Markevich,0,4,2014-06-12 09:50:15+00:00,2014-08-26 20:13:56+00:00,"Webservice [1] contains two operations.
Following route works:
from(""timer:cTimer_1?period=1&repeatCount=1&delay=1"")
.setBody().constant(""<web:GetWeather xmlns:web='http://www.webserviceX.NET'><web:CityName>Minsk</web:CityName></web:GetWeather>"")
.to(""cxf://http://www.webservicex.net/globalweather.asmx?wsdlURL=F:/globalweather.wsdl&dataFormat=PAYLOAD&serviceName=

{http://www.webserviceX.NET}

GlobalWeather&endpointName=

{http://www.webserviceX.NET}

GlobalWeatherSoap"")
.to(""log:cLog_1?level=INFO"")


But with body 
<web:GetCitiesByCountry xmlns:web='http://www.webserviceX.NET'><web:CountryName>Belarus</web:CountryName></web:GetCitiesByCountry>
there is exception [2].


Looking into the sources [3] I found that first available opration used.
Expected that operation lookup is based on payload root element (which is different for operations)


1. http://www.webservicex.net/globalweather.asmx?WSDL


2. 
[WARN ]: org.apache.camel.component.timer.TimerConsumer - Error processing exchange. Exchange[Message: <web:GetCitiesByCountry xmlns:web='http://www.webserviceX.NET'><web:CountryName>Belarus</web:CountryName></web:GetCitiesByCountry>]. Caused by: [java.lang.IllegalArgumentException - The PayLoad elements cannot fit with the message parts of the BindingOperation. Please check the BindingOperation and PayLoadMessage.]
java.lang.IllegalArgumentException: The PayLoad elements cannot fit with the message parts of the BindingOperation. Please check the BindingOperation and PayLoadMessage.
	at org.apache.camel.component.cxf.CxfEndpoint$CamelCxfClientImpl.setParameters(CxfEndpoint.java:1011)
	at org.apache.cxf.endpoint.ClientImpl.doInvoke(ClientImpl.java:526)
	at org.apache.cxf.endpoint.ClientImpl.invoke(ClientImpl.java:472)
	at org.apache.camel.component.cxf.CxfProducer.process(CxfProducer.java:112)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:113)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.timer.TimerConsumer.sendTimerExchange(TimerConsumer.java:139)
	at org.apache.camel.component.timer.TimerConsumer$1.run(TimerConsumer.java:64)
	at java.util.TimerThread.mainLoop(Timer.java:555)
	at java.util.TimerThread.run(Timer.java:505)


3. https://github.com/apache/camel/blob/master/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfProducer.java#L344","njiang:1402546115:2014-06-12T12:08:35.419+0000:1402546115:2014-06-12T12:08:35.419+0000:You can specify the defaultOperationName in camel-cxf endpoint to let CxfProducer use, otherwise you have to specify the message header of  operationName.
I think I can add INFO log to let user know that CxfProducer pick up the first available operation if the operationName header isn't specified. 
githubbot:1404343398:2014-07-03T07:23:18.801+0000:1404343398:2014-07-03T07:23:18.801+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/208

    CAMEL-7503 PAYLOAD Producer select first available operation if OPERATION_NAME is not specified

    Hi,
    
    This PR is related to https://issues.apache.org/jira/browse/CAMEL-7503
    
    I just added an info log line.
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel fix-Camel-7503

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/208.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #208
    
----
commit c4f98205d9c9bae52df5c08782d0b92a2d38606b
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-03T07:16:07Z

    Fixes CAMEL-7503 by adding a simple INFO level log line

----

acosentino:1404346734:2014-07-03T08:18:54.035+0000:1404346734:2014-07-03T08:18:54.035+0000:Created pull request:

https://github.com/apache/camel/pull/208
githubbot:1404391635:2014-07-03T20:47:15.841+0000:1404391635:2014-07-03T20:47:15.841+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/208
"
0,CAMEL-7502,Bug,Major,2.13.1,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Willem Jiang,Claus Ibsen,2,3,2014-06-12 05:48:36+00:00,2014-06-13 02:52:20+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-elasticsearch-component-starts-up-an-instance-even-though-IP-specified-tp5751825.html","njiang:1402531820:2014-06-12T08:10:20.714+0000:1402531820:2014-06-12T08:10:20.714+0000:Jose already provides a solution in the thread, so I just apply the patch into master branch with thanks to Jose.
nocturnal:1402568583:2014-06-12T18:23:03.850+0000:1402568732:2014-06-12T18:25:32.756+0000:hey guys, I see the code has already been committed ;) - was just about to work on this (only just refreshed the JIRA page). Thanks a mil!
njiang:1402599140:2014-06-13T02:52:20.851+0000:1402599140:2014-06-13T02:52:20.851+0000:Committed the patch with thanks to Jose into master and camel-2.13.x branch."
0,CAMEL-7501,Improvement,Major,2.12.3,"2.14.3, 2.15.3","
None
",Resolved,Fixed,"2.14.3, 2.15.3",Andrea Cosentino,Scott Stults,2,3,2014-06-11 22:05:09+00:00,2015-05-04 15:00:23+00:00,"If two ZooKeeperRoutePolicy's are created and used in separate routes, only one leader election route gets created. This effectively nullifies the route policy for the second route, meaning it works regardless of leadership status (even on the other route).","nathanic:1430483100:2015-05-01T20:25:00.961+0000:1430483100:2015-05-01T20:25:00.961+0000:I believe this bug is caused by the generated names for the zookeeper election routes.  In ZookeeperElection.java, it generates a candidate name which is the machine's hostname followed by a UUID.  But later when it goes to set up the election route, it only uses the first 8 chars of candidateName, leading to name collisions on any subsequent election routes, if your hostname is more than 8 chars long.

            from(zep).id(""election-route-"" + candidateName.substring(0, 8)).sort(body(), comparator).process(new Processor() { ... })

I'm not sure if there is a length limit on camel route IDs that lead to this very conservative 8 char policy, but I think if we removed the .substring(0,8) call, this would properly support multiple routes.

acosentino:1430539846:2015-05-02T12:10:46.374+0000:1430539846:2015-05-02T12:10:46.374+0000:You're right, Nathan. Good catch! :-)

Test with the substring:

{code}
2015-05-02 13:58:23,478 [main           ] INFO  AvailablePortFinder            - getNextAvailable(39913) -> 39913
2015-05-02 13:58:23,478 [main           ] INFO  ZooKeeperTestSupport           - Starting Zookeeper Test Infrastructure
2015-05-02 13:58:23,606 [ain-EventThread] INFO  estSupport$TestZookeeperClient - TestClient connected
2015-05-02 13:58:23,606 [main           ] INFO  ZooKeeperTestSupport           - Started Zookeeper Test Infrastructure on port 39913
2015-05-02 13:58:23,608 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:58:23,608 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - Testing: routeDoublePoliciesAndTwoRoutes(org.apache.camel.component.zookeeper.policy.ZookeeperDoubleRoutePolicyTest)
2015-05-02 13:58:23,608 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:58:23,806 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is starting
2015-05-02 13:58:23,807 [main           ] INFO  DefaultManagementStrategy      - JMX is disabled
2015-05-02 13:58:23,863 [main           ] INFO  DefaultTypeConverter           - Loaded 183 type converters
2015-05-02 13:58:23,864 [main           ] INFO  DefaultCamelContext            - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2015-05-02 13:58:23,864 [main           ] INFO  DefaultCamelContext            - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2015-05-02 13:58:23,864 [main           ] INFO  DefaultCamelContext            - Total 0 routes, of which 0 is started.
2015-05-02 13:58:23,869 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) started in 0.058 seconds
2015-05-02 13:58:24,084 [main           ] INFO  estSupport$TestZookeeperClient - Created znode named '/someapp'
2015-05-02 13:58:24,288 [main           ] INFO  estSupport$TestZookeeperClient - Created znode named '/someapp/somepolicy'
2015-05-02 13:58:24,492 [main           ] INFO  estSupport$TestZookeeperClient - Created znode named '/someapp/someotherpolicy'
2015-05-02 13:58:24,632 [main           ] INFO  DefaultCamelContext            - Route: route1 started and consuming from: Endpoint[direct://policy-controlled]
2015-05-02 13:58:24,635 [main           ] INFO  DefaultCamelContext            - Route: route2 started and consuming from: Endpoint[direct://policy-controlled-1]
2015-05-02 13:58:24,651 [main           ] INFO  ZooKeeperElection              - Initializing ZookeeperElection with uri 'zookeeper:localhost:39913/someapp/somepolicy'
2015-05-02 13:58:24,669 [main           ] WARN  ZookeeperProducer              - Node '/someapp/somepolicy/ancosen-home-73fdb664-2361-4fbd-9c06-74958c140c5c' did not exist, creating it.
2015-05-02 13:58:24,677 [main           ] INFO  ZooKeeperElection              - Candidate node '/someapp/somepolicy/ancosen-home-73fdb664-2361-4fbd-9c06-74958c140c5c' has been created
2015-05-02 13:58:24,700 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:58:24,707 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://controlled] is satisfied
2015-05-02 13:58:24,708 [main           ] INFO  ZooKeeperElection              - Initializing ZookeeperElection with uri 'zookeeper:localhost:39913/someapp/someotherpolicy'
2015-05-02 13:58:24,714 [main           ] WARN  ZookeeperProducer              - Node '/someapp/someotherpolicy/ancosen-home-e61215bc-dc9e-4773-8040-8af82bea10e3' did not exist, creating it.
2015-05-02 13:58:24,717 [main           ] INFO  ZooKeeperElection              - Candidate node '/someapp/someotherpolicy/ancosen-home-e61215bc-dc9e-4773-8040-8af82bea10e3' has been created
2015-05-02 13:58:24,718 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2015-05-02 13:58:24,723 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: election-route-ancosen- shutdown complete, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:58:24,723 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 0 seconds
2015-05-02 13:58:24,724 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- is stopped, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:58:24,730 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- is shutdown and removed, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:58:24,734 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/someotherpolicy]
2015-05-02 13:58:24,736 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://controlled-1] is satisfied
2015-05-02 13:58:24,736 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:58:24,736 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - Testing done: routeDoublePoliciesAndTwoRoutes(org.apache.camel.component.zookeeper.policy.ZookeeperDoubleRoutePolicyTest)
2015-05-02 13:58:24,736 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - Took: 0.867 seconds (867 millis)
2015-05-02 13:58:24,736 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:58:24,737 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is shutting down
2015-05-02 13:58:24,737 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 3 routes (timeout 10 seconds)
2015-05-02 13:58:24,738 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: election-route-ancosen- shutdown complete, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/someotherpolicy]
2015-05-02 13:58:24,738 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route2 shutdown complete, was consuming from: Endpoint[direct://policy-controlled-1]
2015-05-02 13:58:24,738 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete, was consuming from: Endpoint[direct://policy-controlled]
2015-05-02 13:58:24,738 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 3 routes completed in 0 seconds
2015-05-02 13:58:24,743 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) uptime 0.937 seconds
2015-05-02 13:58:24,743 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.006 seconds
2015-05-02 13:58:24,744 [main           ] INFO  ZooKeeperTestSupport           - Stopping Zookeeper Test Infrastructure
2015-05-02 13:58:24,747 [main           ] INFO  ZooKeeperTestSupport           - Stopped Zookeeper Test Infrastructure
{code}

Only one election route started, shutdown of this route and start of the other election route with the same id.

{code}
2015-05-02 13:58:24,700 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
.
.
.
2015-05-02 13:58:24,718 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 1 routes (timeout 10 seconds)
2015-05-02 13:58:24,723 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: election-route-ancosen- shutdown complete, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:58:24,723 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 1 routes completed in 0 seconds
2015-05-02 13:58:24,724 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- is stopped, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]

2015-05-02 13:58:24,734 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen- started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/someotherpolicy]
{code}

Test without substring:

{code}
2015-05-02 13:59:42,606 [main           ] INFO  AvailablePortFinder            - getNextAvailable(39913) -> 39913
2015-05-02 13:59:42,607 [main           ] INFO  ZooKeeperTestSupport           - Starting Zookeeper Test Infrastructure
2015-05-02 13:59:42,735 [ain-EventThread] INFO  estSupport$TestZookeeperClient - TestClient connected
2015-05-02 13:59:42,735 [main           ] INFO  ZooKeeperTestSupport           - Started Zookeeper Test Infrastructure on port 39913
2015-05-02 13:59:42,738 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:59:42,738 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - Testing: routeDoublePoliciesAndTwoRoutes(org.apache.camel.component.zookeeper.policy.ZookeeperDoubleRoutePolicyTest)
2015-05-02 13:59:42,738 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:59:42,962 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is starting
2015-05-02 13:59:42,962 [main           ] INFO  DefaultManagementStrategy      - JMX is disabled
2015-05-02 13:59:43,028 [main           ] INFO  DefaultTypeConverter           - Loaded 183 type converters
2015-05-02 13:59:43,029 [main           ] INFO  DefaultCamelContext            - AllowUseOriginalMessage is enabled. If access to the original message is not needed, then its recommended to turn this option off as it may improve performance.
2015-05-02 13:59:43,029 [main           ] INFO  DefaultCamelContext            - StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
2015-05-02 13:59:43,030 [main           ] INFO  DefaultCamelContext            - Total 0 routes, of which 0 is started.
2015-05-02 13:59:43,034 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) started in 0.069 seconds
2015-05-02 13:59:43,248 [main           ] INFO  estSupport$TestZookeeperClient - Created znode named '/someapp'
2015-05-02 13:59:43,454 [main           ] INFO  estSupport$TestZookeeperClient - Created znode named '/someapp/somepolicy'
2015-05-02 13:59:43,659 [main           ] INFO  estSupport$TestZookeeperClient - Created znode named '/someapp/someotherpolicy'
2015-05-02 13:59:43,795 [main           ] INFO  DefaultCamelContext            - Route: route1 started and consuming from: Endpoint[direct://policy-controlled]
2015-05-02 13:59:43,797 [main           ] INFO  DefaultCamelContext            - Route: route2 started and consuming from: Endpoint[direct://policy-controlled-1]
2015-05-02 13:59:43,813 [main           ] INFO  ZooKeeperElection              - Initializing ZookeeperElection with uri 'zookeeper:localhost:39913/someapp/somepolicy'
2015-05-02 13:59:43,832 [main           ] WARN  ZookeeperProducer              - Node '/someapp/somepolicy/ancosen-home-74bce950-9db9-4d75-b070-cd5fefcaba42' did not exist, creating it.
2015-05-02 13:59:43,838 [main           ] INFO  ZooKeeperElection              - Candidate node '/someapp/somepolicy/ancosen-home-74bce950-9db9-4d75-b070-cd5fefcaba42' has been created
2015-05-02 13:59:43,860 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen-home-74bce950-9db9-4d75-b070-cd5fefcaba42 started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:59:43,866 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://controlled] is satisfied
2015-05-02 13:59:43,867 [main           ] INFO  ZooKeeperElection              - Initializing ZookeeperElection with uri 'zookeeper:localhost:39913/someapp/someotherpolicy'
2015-05-02 13:59:43,873 [main           ] WARN  ZookeeperProducer              - Node '/someapp/someotherpolicy/ancosen-home-e00213ec-cf67-4a80-ac11-8b0d8b7785fe' did not exist, creating it.
2015-05-02 13:59:43,876 [main           ] INFO  ZooKeeperElection              - Candidate node '/someapp/someotherpolicy/ancosen-home-e00213ec-cf67-4a80-ac11-8b0d8b7785fe' has been created
2015-05-02 13:59:43,880 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen-home-e00213ec-cf67-4a80-ac11-8b0d8b7785fe started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/someotherpolicy]
2015-05-02 13:59:43,881 [main           ] INFO  MockEndpoint                   - Asserting: Endpoint[mock://controlled-1] is satisfied
2015-05-02 13:59:43,881 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:59:43,881 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - Testing done: routeDoublePoliciesAndTwoRoutes(org.apache.camel.component.zookeeper.policy.ZookeeperDoubleRoutePolicyTest)
2015-05-02 13:59:43,881 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - Took: 0.847 seconds (847 millis)
2015-05-02 13:59:43,881 [main           ] INFO  ZookeeperDoubleRoutePolicyTest - ********************************************************************************
2015-05-02 13:59:43,882 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is shutting down
2015-05-02 13:59:43,882 [main           ] INFO  DefaultShutdownStrategy        - Starting to graceful shutdown 4 routes (timeout 10 seconds)
2015-05-02 13:59:43,886 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: election-route-ancosen-home-e00213ec-cf67-4a80-ac11-8b0d8b7785fe shutdown complete, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/someotherpolicy]
2015-05-02 13:59:43,887 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: election-route-ancosen-home-74bce950-9db9-4d75-b070-cd5fefcaba42 shutdown complete, was consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
2015-05-02 13:59:43,888 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route2 shutdown complete, was consuming from: Endpoint[direct://policy-controlled-1]
2015-05-02 13:59:43,888 [ - ShutdownTask] INFO  DefaultShutdownStrategy        - Route: route1 shutdown complete, was consuming from: Endpoint[direct://policy-controlled]
2015-05-02 13:59:43,888 [main           ] INFO  DefaultShutdownStrategy        - Graceful shutdown of 4 routes completed in 0 seconds
2015-05-02 13:59:43,897 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) uptime 0.936 seconds
2015-05-02 13:59:43,897 [main           ] INFO  DefaultCamelContext            - Apache Camel 2.16-SNAPSHOT (CamelContext: camel-1) is shutdown in 0.015 seconds
2015-05-02 13:59:43,898 [main           ] INFO  ZooKeeperTestSupport           - Stopping Zookeeper Test Infrastructure
2015-05-02 13:59:43,902 [main           ] INFO  ZooKeeperTestSupport           - Stopped Zookeeper Test Infrastructure

{code}

Two distinct election routes started:

{code}
2015-05-02 13:59:43,860 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen-home-74bce950-9db9-4d75-b070-cd5fefcaba42 started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/somepolicy]
.
.
.
2015-05-02 13:59:43,880 [main           ] INFO  DefaultCamelContext            - Route: election-route-ancosen-home-e00213ec-cf67-4a80-ac11-8b0d8b7785fe started and consuming from: Endpoint[zookeeper://localhost:39913/someapp/someotherpolicy]
{code}
acosentino:1430539949:2015-05-02T12:12:29.228+0000:1430539966:2015-05-02T12:12:46.095+0000:Related commit:

http://git-wip-us.apache.org/repos/asf/camel/commit/0b3e38a7

Thanks for the catch Nathan :-)
acosentino:1430550951:2015-05-02T15:15:51.421+0000:1430551139:2015-05-02T15:18:59.297+0000:Cherry-pick camel-2.15.x: http://git-wip-us.apache.org/repos/asf/camel/commit/2f2746e3

Cherry-pick camel-2.14.x: http://git-wip-us.apache.org/repos/asf/camel/commit/a47daab6
sstults:1430716717:2015-05-04T13:18:37.221+0000:1430716717:2015-05-04T13:18:37.221+0000:Thank you Nathan and Andrea, this is great!
acosentino:1430722823:2015-05-04T15:00:23.888+0000:1430722823:2015-05-04T15:00:23.888+0000:I've updated the fix versions. The commit is following the 2.15.2 release cut."
0,CAMEL-7500,Bug,Major,2.13.1,"2.15.3, 2.16.0","
None
",Resolved,Fixed,"2.15.3, 2.16.0",Claus Ibsen,Bob Browning,0,4,2014-06-11 17:03:58+00:00,2021-02-15 16:53:41+00:00,"When a exception occurs on a netty TCP channel such as ChanelClosedException then there are two invocations of the producer callback. 


If there is a redelivery handler configured this causes either two threads to be added to the scheduled thread-pool which then compete or in the more common case the first invocation adds the redelivery thread but in doing so clears the exception from the exchange such that when the subsequent callback invocation occurs it see's the event as a success and continues routing of the exchange.


Note this also seems to be a cause of negative inflight messages on the route.


The first callback invocation occurs in the ChannelFutureListener which is the usual case.


The second callback invocation which comes from the ClientChannelHandler registered in the DefaultClientPipelineFactory used by the NettyProducer.","njiang:1402860069:2014-06-16T03:21:09.676+0000:1402860069:2014-06-16T03:21:09.676+0000:In ClientChannelHandler, we need to updated the state of exceptionHandled to avoid the callback be called twice when the ChannelClosedException is thrown. I just committed a quick fix for that.

The other part of the issue is cased by Exchange instance could be modified by more then one thread in you test case. Current RedeliveryErrorHandler doesn't prevent this situation. It just treat the error handle is working in an single thread environment.
Maybe we need to do some refactoring there.

davsclaus:1406076139:2014-07-23T08:42:19.307+0000:1406076139:2014-07-23T08:42:19.307+0000:Willem has this been fixed?
njiang:1406261939:2014-07-25T12:18:59.125+0000:1406261939:2014-07-25T12:18:59.125+0000:Hi Claus,

I didn't find a way to fix the issue that the exchange states could be modified by multiple threads at the same time.
I'd like to keep this JIRA open until we find a way to address that issue.
davsclaus:1436487434:2015-07-10T08:17:14.593+0000:1436487434:2015-07-10T08:17:14.593+0000:Okay so it seems its because both netty producer detects the exception and also the client handler, and therefore we do 2 x callback.
Thanks Bob for this test case it helps dig down the problem, although it was a bit complicated to track down."
0,CAMEL-7499,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-11 13:55:01+00:00,2014-08-22 15:28:23+00:00,Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402470619:2014-06-11T15:10:19.070+0000:1402470619:2014-06-11T15:10:19.070+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/178

    Fix for CAMEL-7499, Expose the component options for Camel Mail

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7499

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/178.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #178
    
----
commit cc4e7785f82e2e9cd524c2b155a56f6722bee2d0
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-11T15:07:21Z

    Fix for CAMEL-7499, Expose the component options for Camel Mail

----

githubbot:1402480858:2014-06-11T18:00:58.402+0000:1402480858:2014-06-11T18:00:58.402+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/178
"
0,CAMEL-7498,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,2,2014-06-11 12:13:14+00:00,2014-07-23 08:43:15+00:00,Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402460657:2014-06-11T12:24:17.817+0000:1402460657:2014-06-11T12:24:17.817+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/177

    Fix for CAMEL-7498.  Most of this was already done, just adding a test h...

    ...ere

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7498

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/177.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #177
    
----
commit b66df8b76357fd4f292a40f0d4c12b49dc88d50c
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-11T12:22:41Z

    Fix for CAMEL-7498.  Most of this was already done, just adding a test here

----

githubbot:1402463444:2014-06-11T13:10:44.300+0000:1402463444:2014-06-11T13:10:44.300+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/177
"
0,CAMEL-7497,Bug,Minor,2.13.1,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Paul D Johe,0,2,2014-06-11 09:09:08+00:00,2014-06-11 13:12:01+00:00,"It looks like there are duplicate classes between the camel-test and camel-test-spring artifacts:



[WARNING] Rule 0: org.apache.maven.plugins.enforcer.BanDuplicateClasses failed with message:
Duplicate classes found:

  Found in:
    org.apache.camel:camel-test:jar:2.13.1:test
    org.apache.camel:camel-test-spring:jar:2.13.1:test
  Duplicate classes:
    org/apache/camel/test/junit4/CamelTestSupport$1.class
    org/apache/camel/test/junit4/CamelTestSupport$4.class
    org/apache/camel/test/junit4/CamelTestSupport$2.class
    org/apache/camel/test/junit4/CamelTestSupport$DebugBreakpoint.class
    org/apache/camel/test/junit4/LanguageTestSupport.class
    org/apache/camel/test/junit4/CamelTestSupport.class
    org/apache/camel/test/junit4/TestSupport.class
    org/apache/camel/test/junit4/ExchangeTestSupport.class
    org/apache/camel/test/junit4/CamelTestSupport$3.class","njiang:1402463347:2014-06-11T13:09:07.921+0000:1402463367:2014-06-11T13:09:27.446+0000:This is caused by camel-spring-test and camel-test are exports the same package of ""org.apache.camel.test.junit4"".
As the org.apache.camel.test.junit4.CamelSpringJUnit4ClassRunner and org.apache.camel.test.junit4.CamelSpringTestSupport were derecated since camel-2.11.0, it should be safe for us to remove them in camel-2.14.0 now.

"
0,CAMEL-7496,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-06-11 08:49:00+00:00,2014-06-13 03:06:04+00:00,No Desc,njiang:1402599964:2014-06-13T03:06:04.818+0000:1402599964:2014-06-13T03:06:04.818+0000:Applied the patch into camel master branch.
0,CAMEL-7495,Improvement,Major,2.13.1,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2014-06-11 08:34:47+00:00,2014-08-25 09:33:41+00:00,"For example this DataSource option
https://github.com/apache/camel/blob/master/components/camel-jdbc/src/main/java/org/apache/camel/component/jdbc/JdbcEndpoint.java#L42


We need to expose that in the json schema as an object type.


And for configuring endpoint using uris, you would use a # registry lookup.
eg dataSource=#myDataSource.


But the schema needs to support this option","davsclaus:1408930421:2014-08-25T09:33:41.672+0000:1408930421:2014-08-25T09:33:41.672+0000:for complex types we output the type as object, according to the spec. And then include a property with a description of the java type."
0,CAMEL-7494,Improvement,Major,2.13.1,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-06-10 13:13:42+00:00,2014-06-10 13:18:06+00:00,"enum fields is not supported, which we should.",
0,CAMEL-7493,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,3,2014-06-10 12:53:21+00:00,2014-08-22 15:28:11+00:00,Expose the component options for Camel JDBC as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402445282:2014-06-11T08:08:02.942+0000:1402445282:2014-06-11T08:08:02.942+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/176

    Fix for CAMEL-7493, Expose the component options for Camel JDBC

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7493

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/176.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #176
    
----
commit c2c90120b71e1a34ffe832d1e9e29f655247d30b
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-11T08:05:00Z

    Fix for CAMEL-7493, Expose the component options for Camel JDBC

----

githubbot:1402446237:2014-06-11T08:23:57.428+0000:1402446237:2014-06-11T08:23:57.428+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/176
"
0,CAMEL-7492,Improvement,Minor,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,2,2014-06-10 08:51:05+00:00,2015-02-02 19:02:03+00:00,"See
http://stackoverflow.com/questions/24124015/apache-camel-xpath-routing


If you use a content based router, and have different kind of xml coming in, you may want to ignore any exceptions, if a < xpath > expression fails to evaluate as the xml does not fit that format.


So if we have



   <xpath ignoreException=""true"">/foo/bar</xpath>




eg a new attribute to set a flag to ignore exceptions. Though naming is hard, so maybe there is a better name for the attribute.


Related is also the validate eip, but I dont think we can use that as an expression/predicate: http://camel.apache.org/validate


Otherwise we could do something like this; which may be even better as then it works with any Camel expression/predicate. 



<choice>
   <when><validate><xpath>/foo/bar</xpath></validate>
     <to uri=""jms:fooOrBar""/>
  </when>
  ...","muellerc:1402491081:2014-06-11T20:51:21.321+0000:1402491081:2014-06-11T20:51:21.321+0000:Why not simply:
{code}
<xpath>/foo/bar</xpath>
{code}
or
{code}
<choice>
  <when><xpath>/foo/bar</xpath>
    <to uri=""jms:fooOrBar""/>
  </when>
...
{code}
?

I think it's because of the backwards compatibility, but is there a real use case where the user would like to receive the exception instead of true/false?

May be we should introduce the change in the behavior (being not backwards compatible) but providing a better default behavior.
davsclaus:1402522543:2014-06-12T05:35:43.128+0000:1402522543:2014-06-12T05:35:43.128+0000:You want the current behavior with the exception if the input message is invalid, such as not XML or a different XML that does not match the `form of xpath expression`.

But there are times where you may want to relax that and dont care, and just want the CBR to evaluate the next when/otherwise. eg sorta like a < tryWhen > .

muellerc:1402547114:2014-06-12T12:25:14.898+0000:1402547114:2014-06-12T12:25:14.898+0000:Sounds like the anti pattern [coding by exception|http://en.wikipedia.org/wiki/Coding_by_exception]. Our recommendation should be to have a content based router (before) which sends different payloads into different routes.
davsclaus:1422874923:2015-02-02T19:02:03.702+0000:1422874923:2015-02-02T19:02:03.702+0000:Yeah its likely a bit anti, lets close it"
0,CAMEL-7491,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-06-10 06:45:38+00:00,2014-06-13 03:49:25+00:00,"Current throttler just delay the processing of the exchange, we need to add an option for throwing the RejectExcecutionException to stop the processing of exchange. 
With the help of ErrorHandler, camel route can return a meaningful response to the client immediately.",njiang:1402602565:2014-06-13T03:49:25.080+0000:1402602565:2014-06-13T03:49:25.080+0000:Applied the patch into camel master branch and updated the wiki page.
0,CAMEL-7490,Improvement,Minor,2.12.2,"2.13.4, 2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.1, 2.15.0",Claus Ibsen,Ajay Kapoor,0,1,2014-06-09 22:59:31+00:00,2014-11-29 09:48:04+00:00,"My application needs to modify the redelivery delay at runtime, thereby overriding the values set by the application during configuration /loading time.
The Redelivery delay for subsequent retries will have varied retry intervals and it needs to be done asynchronously. As of the current implementation, this is possible only in synchronous mode where by the thread handling the message on a route sleeps for specified amount time and uses the Exchange.REDELIVERY_DELAY header to populate the delay values for each reattempt.


Issue 1:
In asynchronous mode, the Exchange.REDELIVERY_DELAY is used only in the first attempt and the same value is used in subsequent attempts. 


Issue 2:
There is no mechanism to set the delayPattern value if set for Redelivery Policy at runtime. Need to have some mechanism where the DELAY_PATTERN can be passed via Exchange at runtime such that it gets used for retries asynchronously.


Possible Fix::
-----------------
Issue-1:
 org.apache.camel.processor:: RedeliveryErrorHandler
---------------------------------------------------------------------
In the method (processAsyncErrorHandler) below, the code calls calculateRedeliveryDelay() API for calculating the redelivery delay which is wrong.  It should be calling the wrapper API - determineRedeliveryDelay() in its place which will allow the usage of Exchange.REDELIVERY_DELAY being passed in the headers. That way, it will allow the user to have the complete asynchronous behavior based on the values being passed to the CAMEL at runtime.


The following code points to the bug exists::


public abstract class RedeliveryErrorHandler extends ErrorHandlerSupport implements AsyncProcessor, ShutdownPrepared {
...........
    private class AsyncRedeliveryTask implements Callable<Boolean> {
..............
    protected void processAsyncErrorHandler(final Exchange exchange, final AsyncCallback callback, final RedeliveryData data) {
..............


        if (data.redeliveryCounter > 0) {
            // we are doing a redelivery then a thread pool must be configured (see the doStart method)
            ObjectHelper.notNull(executorService, ""Redelivery is enabled but ExecutorService has not been configured."", this);


            // let the RedeliverTask be the logic which tries to redeliver the Exchange which we can used a scheduler to
            // have it being executed in the future, or immediately
            // Note: the data.redeliverFromSync should be kept as is, in case it was enabled previously
            // to ensure the callback will continue routing from where we left
            AsyncRedeliveryTask task = new AsyncRedeliveryTask(exchange, callback, data);


            // calculate the redelivery delay
            data.redeliveryDelay = data.currentRedeliveryPolicy.calculateRedeliveryDelay(data.redeliveryDelay, data.redeliveryCounter);
            if (data.redeliveryDelay > 0) {
                // schedule the redelivery task
                if (log.isTraceEnabled()) {
                    log.trace(""Scheduling redelivery task to run in {} millis for exchangeId: {}"", data.redeliveryDelay, exchange.getExchangeId());
                }
                executorService.schedule(task, data.redeliveryDelay, TimeUnit.MILLISECONDS);
            } else 

{
                // execute the task immediately
                executorService.submit(task);
            }

        }
    }


}


}",
0,CAMEL-7489,Bug,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Marco Carvalho,0,3,2014-06-07 17:20:31+00:00,2017-02-28 14:43:06+00:00,"When using DataField as in ""case 8"" of the documentation page (sorry, no anchor links):


http://camel.apache.org/bindy.html


A exception is risen for a missing Section annotation.


""@Section and/or @KeyValuePairDataField have not been defined""","sabre1041:1431283128:2015-05-11T02:38:48.860+0000:1431283128:2015-05-11T02:38:48.860+0000:Looked into this issue and confirmed the issue. The following could be made in BindyCsvFactory to allow for positioning in csv marshaling 

{code}
                if (isMessageOrdered() && obj != null) {

                    if(sections.size() > 0) {
                        // Generate a key using the number of the section
                        // and the position of the field
                        Integer key1 = sections.get(obj.getClass().getName());
                        Integer key2 = datafield.position();
                        Integer keyGenerated = generateKey(key1, key2);
    
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(""Key generated: {}, for section: {}"", String.valueOf(keyGenerated), key1);
                        }
    
                        key = keyGenerated;
                    }
                    else {
                        key = datafield.position();
                    }

                } else {
                    key = datafield.pos();
                }
{code}

For the KeyValuePair, there are unit tests expecting the existing functionality. What is the ultimate desired functionality for each marshaling options?
davsclaus:1461814277:2016-04-28T11:31:17.770+0000:1461814277:2016-04-28T11:31:17.770+0000:Can you explain what is the problem?
macmacbr:1461827020:2016-04-28T15:03:40.616+0000:1461827020:2016-04-28T15:03:40.616+0000:Either need to add to the documentation that session or keyvaluepair
annotation is also needed or remove that requirement.

Thank you for viewing it.

Regards
Marco


"
0,CAMEL-7488,Bug,Minor,"2.13.0, 2.13.1","2.13.4, 2.14.2, 2.15.0","
None
",Resolved,Fixed,"2.13.4, 2.14.2, 2.15.0",Claus Ibsen,Sven Nold,0,3,2014-06-07 11:11:00+00:00,2015-02-15 14:17:12+00:00,"Using BridgePropertyPlaceholderConfigurer & Spring util constant namespace  to reference a static field, the Properties Component gets initialized with this constant.


camelContext.xml
<util:constant static-field=""anypackage.CONSTANT_1""/>

<bean id=""bridgePropertyPlaceHolder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
    <property name=""locations"">
      <list>
        <value>classpath:test.properties</value>
      </list>
    </property>
</bean>

<camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <camel:route>
      <camel:from uri=""direct://ignore"" />
      <camel:setBody>
        <camel:simple>{{testProperty}}</camel:simple>
      </camel:setBody>
      <camel:to uri=""mock://ignore"" />
    </camel:route>
</camel:camelContext>   




Will produce following Stacktrace (constant contained '>>This will be loaded as location; but I am simply a constant<<'):



Caused by: java.io.FileNotFoundException: Properties file >>This will be loaded as location; but I am simply a constant<< not found in classpath
	at org.apache.camel.component.properties.DefaultPropertiesResolver.loadPropertiesFromClasspath(DefaultPropertiesResolver.java:96)
	at org.apache.camel.component.properties.DefaultPropertiesResolver.resolveProperties(DefaultPropertiesResolver.java:55)
	at org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer.resolveProperties(BridgePropertyPlaceholderConfigurer.java:118)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:131)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:117)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1223)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:571)




My current workaround was to specify propertyPlaceholder with empty location in  camelContext ...


camelContext.xml
<!-- same as above -->
<camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">
    <!-- location and id are mandatory -->
    <camel:propertyPlaceholder id=""stupidMandatoryId"" location=""""/>
    <camel:route>
      <camel:from uri=""direct://ignore"" />
      <camel:setBody>
        <camel:simple>{{testProperty}}</camel:simple>
      </camel:setBody>
      <camel:to uri=""mock://ignore"" />
    </camel:route>
</camel:camelContext>","njiang:1402256435:2014-06-09T03:40:35.387+0000:1402256435:2014-06-09T03:40:35.387+0000:Camel PropertyComponent will use the  PropertiesResolver(bridgePropertyPlaceHolder) to lookup the properties, so you can get the exception by default, as bridgePropertyPlaceHolder cannot find the resource file. 

You can define the propertyPlaceholder to override the default feature like this.
{code}
 <camel:propertyPlaceholder id=""propertiesOverride"" ignoreMissingLocation=""true""/>
{code}
SvenNold:1402368046:2014-06-10T10:40:46.076+0000:1402368046:2014-06-10T10:40:46.076+0000:The current fix (w/o ignoreMissingLocation) is also working, but the main problem is that w/o declaring the propertyPlaceHolder inside the camel context it throws weird errors. It would be great if you could use springs util constants w/o getting those autowired.
njiang:1402444122:2014-06-11T07:48:42.398+0000:1402445340:2014-06-11T08:09:00.072+0000:Hi Sven,
I managed to reproduce the issue and find out PropertyPlaceholderConfigurer know nothing about the util:constant as a property.
You have to use it in [a different way|http://stackoverflow.com/questions/7309956/how-to-reference-constant-in-attribute-in-spring].

I did some work to enable the configuration of ""ignoreResourceNotFound"", so you don't need to addition camel:propertyPlaceholder to the camel context there, the bridgePropertyPlaceHolder could be.
{code}
<bean id=""bridgePropertyPlaceHolder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
      <property name=""ignoreResourceNotFound"" value=""true""/>
      <property name=""locations"">
        <list>
          <value>classpath:test.properties</value>
        </list>
      </property>
   </bean>
{code}
SvenNold:1402444916:2014-06-11T08:01:56.665+0000:1402444916:2014-06-11T08:01:56.665+0000:Files for new case
SvenNold:1402445310:2014-06-11T08:08:30.244+0000:1402445612:2014-06-11T08:13:32.871+0000:Hi Willem,

I already had that setting enabled, but even with 2.13-SNAPSHOT no luck.
If you enable tracing you can see lines like:


[pache.camel.spring.Main.main()] CamelContextFactoryBean        INFO  Bridging Camel and Spring property placeholder configurer with id: bridgePropertyPlaceHolder
[pache.camel.spring.Main.main()] SpringCamelContext             DEBUG Using ComponentResolver: org.apache.camel.impl.DefaultComponentResolver@70ff4bfb to resolve component with name: properties
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     TRACE No bean named 'properties' found in org.springframework.beans.factory.support.DefaultListableBeanFactory@4b37f3f9: defining beans [ag.isb.camel.Constants.CONSTANT_1,bridgePropertyPlaceHolder,template,consumerTemplate,camel-1:beanPostProcessor,camel-1]; root of factory hierarchy
[pache.camel.spring.Main.main()] DefaultComponentResolver       DEBUG Found component: properties in registry: null
[pache.camel.spring.Main.main()] ObjectHelper                   TRACE Loading class: org.apache.camel.component.properties.PropertiesComponent using classloader: java.net.URLClassLoader@154f6189
[pache.camel.spring.Main.main()] DefaultComponentResolver       DEBUG Found component: properties via type: org.apache.camel.component.properties.PropertiesComponent via: META-INF/services/org/apache/camel/component/properties
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Creating instance of bean 'org.apache.camel.component.properties.PropertiesComponent'
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Returning cached instance of singleton bean 'ag.isb.camel.Constants.CONSTANT_1'
[pache.camel.spring.Main.main()] DefaultCamelBeanPostProcessor  TRACE Camel bean processing after initialization for bean: ag.isb.camel.Constants.CONSTANT_1
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Autowiring by type from bean name 'org.apache.camel.component.properties.PropertiesComponent' via constructor to bean named 'ag.isb.camel.Constants.CONSTANT_1'
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG Returning cached instance of singleton bean 'ag.isb.camel.Constants.CONSTANT_1'
[pache.camel.spring.Main.main()] DefaultCamelBeanPostProcessor  TRACE Camel bean processing after initialization for bean: ag.isb.camel.Constants.CONSTANT_1
[pache.camel.spring.Main.main()] DefaultListableBeanFactory     DEBUG *Autowiring by type from bean name 'org.apache.camel.component.properties.PropertiesComponent' via constructor to bean named 'ag.isb.camel.Constants.CONSTANT_1'*
[pache.camel.spring.Main.main()] DefaultCamelBeanPostProcessor  TRACE Camel bean processing before initialization for bean: org.apache.camel.component.properties.PropertiesComponent

Why is it doing that?
njiang:1402447460:2014-06-11T08:44:20.020+0000:1402447460:2014-06-11T08:44:20.020+0000:I just set the constant Property into the BridgePropertyPlaceholderConfigurer just like this
{code}
    <util:constant id=""test"" static-field=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurerTest.CONSTANT""/>  
    
    <bean id=""bridgePropertyPlaceHolder"" class=""org.apache.camel.spring.spi.BridgePropertyPlaceholderConfigurer"">
      <property name=""properties"">
         <props>
           <!-- reference the constant value in a property-->
           <prop key=""testProperty"">#{test}</prop>
         </props>
      </property>
      <property name=""ignoreResourceNotFound"" value=""true""/>
      <property name=""locations"">
        <list>
          <value>classpath:someplaceToOverride</value>
        </list>
      </property>
   </bean>
{code}

I think you can also wire the Properties that way.

SvenNold:1402448056:2014-06-11T08:54:16.802+0000:1402448056:2014-06-11T08:54:16.802+0000:Sorry but the main problem/issue is that PropertiesComponent autowires that constants.
I cannot get rid off that (util:)constant(s) because they're referenced else where, which I cannot change.

Is there any way to remove this auto magic of using these constants as part of the PropertiesComponent (constructor) initialization. I couldn't find any @Autowired annotation.
njiang:1402600433:2014-06-13T03:13:53.486+0000:1402600433:2014-06-13T03:13:53.486+0000:Can you check the class file fo constant object?
I don't think ProerptiesComponent has the dependency of constant object.
davsclaus:1423972261:2015-02-15T11:51:01.993+0000:1423972261:2015-02-15T11:51:01.993+0000:Reproduced this. It looks a bit odd that spring will autowire that util:constant in the ctr of PropertiesComponent as it has no match / makes no sense at all."
0,CAMEL-7487,Improvement,Major,2.12.4,2.14.0,"
None
",Resolved,Fixed,2.14.0,Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,2,2014-06-06 18:21:37+00:00,2014-08-22 15:22:59+00:00,"The Facebook component took the approach of creating an API model for the Facebook4J API and mapping its methods and parameters to its URI endpoint using API independent code. This reduced the number of lines of code in the component significantly while still being able to expose every operation in the Facebook4J API.


This approach can be made generic, so that an API model can be created for any Java Class/Interface that needs to be wrapped by a Camel component. This model can either be manually written in a signature file similar to the output from the 'javap' command with a method per line with parameter names, or automatically generated by parsing Javadoc. 


The method and parameter names then can be mapped to the component's URI paths and URI parameters/options. The component could use a map of API name path prefixes to several APIs it supports/implements. 


An API-component archetype could generate boilerplate code that uses the code-generation plugins that can generate models. The component developer then just has to populate with code for actually creating the API proxies. Even integration tests can be generated (which use nulls for test values) for producer endpoints for the component, and the developer just needs to complete the skeleton test with actual values. The producer endpoint code can be easily copied and modified to write consumer tests. 


Components may want to customize consumer processing based on the consumer capabilities or features of the wrapped API/technology, which can be easily done by modifying the generated consumer code. 


This micro-framework for generating Camel components that use API models, will significantly reduce the amount of effort and time it takes to wrap any API and expose it as a Camel component. The framework is also useful in situations where an API is not readily available, but one can be written as a  Java POJO or Interface and then wrapped as an API component.","githubbot:1402400468:2014-06-10T19:41:08.588+0000:1402400468:2014-06-10T19:41:08.588+0000:GitHub user dhirajsb opened a pull request:

    https://github.com/apache/camel/pull/175

    CAMEL-7487 Create an archetype and code generation plugins to generate Camel Components that wrap some API

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dhirajsb/camel camel-7487

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/175.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #175
    
----
commit 0e76f0495007c3bbc469c4f1f6a2bffb4eae7581
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-23T20:29:39Z

    Initial version of Component utilities

commit 61836d69a2869c1e15e6edb398ec853bc0844502
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-24T00:47:51Z

    Fixed substitution order in ArgumentSubstitutionParser

commit 0ab55029578eede76bb0c0595cb42bb41ea87981
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-24T01:33:04Z

    Made ApiMethodParser.parse() final and added processResults to avoid warnings from ApiMethodParser

commit 8e386fa88fb01f499ff6de9b02619c02c7506280
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-24T01:35:56Z

    Initial version of component util maven plugin

commit 2206b345fd578ad5b824f7d4a99b87cb50dc5fb5
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-24T01:38:10Z

    Removed redundant test class

commit d45927a7ceaf131d9a8e87e004bfd041cdd63556
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-26T12:37:45Z

    Refactored mojos, added JavadocApiMethodGenerator, ApiComponentGenerator

commit 1be812015f44910abc14af7b02b06330580de57b
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-26T13:04:01Z

    Added generated source validation, refactored package_path in unit tests

commit c3afc84d6ec57c9baa610610603971ef0ee357a7
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:18:17Z

    Fixed array argument handling

commit 09cd27ffa0eb13d8c6ed63b3f27ef0243cccc834
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:19:08Z

    Fixed argument substituion check to use exact type match

commit ae4154eed1964bad6dc557605738c6bfa497ee4c
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:19:35Z

    Added test for invoking a derived proxy class

commit 07ae0bc5a2b549ba0477209528f296af68d57373
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:20:13Z

    Added argument name and type uniqueness check

commit a653acbed484b1191e8617cbba1c1ef5b50e892e
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:21:05Z

    Converted generated ApiCollection class to singleton

commit 0e3108f9c6389bda0658002363c724ec3a2f2dd9
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:21:43Z

    Added substitution for duplicate argument name key

commit 84d6d268fb0a11ddbe25c6c3e02a67adaf32898c
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:22:26Z

    Added check to exclude static methods in proxies

commit 6f5fd33bb4862ce6113bf26744fea296aedef499
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-28T21:24:51Z

    Removed author name

commit 93365f7fa9b2e0cb4cc01a984811663e4d1a037f
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-30T01:00:49Z

    Added support for generating integration tests, fixed JavadocApiMethodGeneratorMojoTest, refactored ApiComponentGeneratorMojo to only generate component classes, refactored plugin tests

commit f6a0a839c23184d9796a11ec3227e1671e660fd8
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-30T18:14:46Z

    Added getApiNames() to ApiCollection, added more method modifiers to signature parsing

commit ed1a4aff1abb3c7b22f4efdde4ca11fc1aa52d19
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-05-30T19:48:09Z

    Added support for generating endpoint config using component-util plugin, added integration tests, refactored unit tests, cleaned-up generated code

commit eeb2c4cd527df4018fb4227ca2d69d5ded754774
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-02T22:45:47Z

    Updated ApiCollection to use type ApiName, fixed method name constant to be locale independent

commit 77b26ab45d98c5a87a7a22dc8319d237b8dc61fc
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-02T22:47:54Z

    Updated ApiComponentGeneratorMojo to generate ApiName enumeration

commit 4b1c1f0c5531edec8f4da231c0c8258cc40b4340
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-03T19:44:16Z

    Initial version of camel-archetype-api-component

commit d5ab202ea13196e600c4ecc451fa00dc8d0c8b39
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-04T04:39:35Z

    Added support for creating endpoint configuration from ApiCollection, added method aliases to tests, minor refactoring

commit 94aba1c73e173c3b243831afccf3fb2b7fded074
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-04T20:47:58Z

    Fixed method alias handling, changed component config file name pattern

commit 849bf6cbd8a14382bf8170e740092c28bca772ac
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-04T20:55:36Z

    Updated archetype files to first real implementation

commit 52c45365b206d7af166017a1a94f2579c966c89a
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-05T01:41:37Z

    Updated generated tests to get api name for test routes from ApiCollection, added java.awt.headless=true to Javadoc mojo

commit 612ca92d8b36f64b9a47765b350c8f62d9fdd28c
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-05T02:03:50Z

    Fixed generated ApiCollection, fixed integration test

commit 8aaed089af4c96051602dc3190b52f5c092d0447
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-05T02:05:45Z

    Fixed endpoint configuration, added component default ctor

commit 49290ca2412902076d420c9b677b9b9910740668
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-05T02:28:24Z

    Renamed test API classes for clarity

commit 7531db45dffc218c86d2f67ddf8efc53d1cc3121
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-05T02:39:18Z

    Fixed formatting

commit 99a405190bbc5a6b8e3f46a4de17da4fe1e71c70
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-05T18:40:53Z

    Added missing '/' to test route path

----

githubbot:1402401113:2014-06-10T19:51:53.545+0000:1402401113:2014-06-10T19:51:53.545+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/175

dhirajsb:1402402053:2014-06-10T20:07:33.791+0000:1402402053:2014-06-10T20:07:33.791+0000:Merged PR 175
Added the following to tooling:

archetype camel-archetype-api-component
maven plugin camel-api-component-maven-plugin

The archetype generates a project that is pre-configured to generate an API model from the Java API Interface/Class configured by user in the component pom.xml. 
The generated configuration also shows how to exclude packages, classes, methods, substitute argument names using name and type patterns. There are a couple of API samples that show how to use a .txt description of the API (with parameter names), or generate and use Javadoc for API. 
The maven plugin generates API model classes, and helper classes, which are used by the archetype generated component code. The plugin also generates Integration tests, which can be moved to src/test and edited to remove 'Ignore' annotations add test values. 
dhirajsb:1402513966:2014-06-12T03:12:46.248+0000:1402514069:2014-06-12T03:14:29.984+0000:Simplify generated code, hiding all the API method model magic, call to helpers etc. and expose various interception points in the method invocation flow as protected methods. 
Also add support for excluding arguments based on name or type from being exposed through endpoint configuration to hide internal/component provided arguments. 
githubbot:1402514088:2014-06-12T03:14:48.542+0000:1402514088:2014-06-12T03:14:48.542+0000:GitHub user dhirajsb opened a pull request:

    https://github.com/apache/camel/pull/179

    CAMEL-7487 Simplify generated code, add support for excluding endpoint configuration properties

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dhirajsb/camel camel-7487

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/179.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #179
    
----
commit 37541d2e31ce640f77298c599bc050bc80166902
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-11T23:12:50Z

    Refactored API Endpoint, Consumer and Producer to extrac Abstract classes in camel-core, simplifying generated code, minor fixes in route test template, added two parameter method in sample API

commit 4b0381f2983343a4d47a5f3fc3df0ed8427991bc
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-11T23:54:04Z

    Added support for excluding generated endpoint config properties by name or type

----

githubbot:1402515977:2014-06-12T03:46:17.394+0000:1402515977:2014-06-12T03:46:17.394+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/179

githubbot:1403041686:2014-06-18T05:48:06.971+0000:1403041686:2014-06-18T05:48:06.971+0000:GitHub user dhirajsb opened a pull request:

    https://github.com/apache/camel/pull/188

    CAMEL-7487 Add support for generating API Component documentation, simplify generated code further

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/dhirajsb/camel camel-7487

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/188.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #188
    
----
commit f037c2da57492eac1819e415752f9d2b6585d5d6
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-13T21:55:54Z

    Minor polish, added utility methods for document generation

commit c639b46d2e8e440ea6acfff894a7f5e22a886830
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-16T19:44:20Z

    Initial version of API component documentation report generator MOJO, minor re-factoring, fixed MOJO logging to use Log4J-SLF4J bridge to work with Maven 3.1.0 logging

commit dee15fb2a59644c00073b5cf922e71896d6776d6
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-16T19:58:59Z

    Added project description to api-component archetype

commit 5dd9cc0f0981603ea1ac8f0f6ee6dfcb7ad56a26
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-17T04:21:57Z

    Fixed ApiMethodHelper to throw RuntimeCamelException with API exception on InvocationTargetException

commit 7dc2bb13a645c2c2a4dbfc9ec0ed0e5b2a63b914
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-17T20:50:34Z

    Major refactor of API component framework to generify base classes, added AbstractApiComponent to reduce boilderplate code, minor compiler warnings removed

commit ef4d0a7ec43f4c702c75aafc3c6cba72ff9b9281
Author: Dhiraj Bokde <dhirajsb@yahoo.com>
Date:   2014-06-17T22:01:04Z

    Moved sample APIs to api package, added bnd instructions in archetype

----

githubbot:1403041877:2014-06-18T05:51:17.630+0000:1403041877:2014-06-18T05:51:17.630+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/188
"
0,CAMEL-7486,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Kevin Anthony Earls,0,3,2014-06-06 15:55:50+00:00,2014-06-10 12:28:59+00:00,Expose the component options for Camel MyBatis as has already been done for camel-core components and selected others such as jms / ftp / twitter etc.,"githubbot:1402372548:2014-06-10T11:55:48.799+0000:1402372548:2014-06-10T11:55:48.799+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/174

    Fix for CAMEL-7486

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7482

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/174.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #174
    
----
commit 30f18e3f4c3211768b365c86a3b0f8c5be38e4b9
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-10T11:53:38Z

    Fix for CAMEL-7486

----

githubbot:1402374518:2014-06-10T12:28:38.445+0000:1402374518:2014-06-10T12:28:38.445+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/174

davsclaus:1402374539:2014-06-10T12:28:59.007+0000:1402374539:2014-06-10T12:28:59.007+0000:Thanks"
0,CAMEL-7485,Bug,Major,"2.12.3, 2.13.0","2.13.3, 2.14.0","
None
",Resolved,Fixed,"2.13.3, 2.14.0",Claus Ibsen,João Rodrigues,0,2,2014-06-06 14:15:48+00:00,2014-08-22 12:42:22+00:00,"AdviceWithRouteBuilder.weaveById() and weaveByToString() creates duplicated endpoint if there's a ""choice"" in camel route. Tested with java 1.7.0_55.


Test case to demonstrate this issue:



git clone https://github.com/joaocenoura/sandbox.git
mvn clean package -f sandbox/camel-weaving/pom.xml



Test logs shows the duplicated endpoint insertion.
Excerpt of GoodRouteTest logs:
23:44:45,644 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> before [pipeline -> [[To[mock:checkpoint.before]]]]
23:44:45,644 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> after [pipeline -> [[To[mock:checkpoint.after]]]]


Excerpt of BadRouteTest logs:
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> before [pipeline -> [[To[mock:checkpoint.before]]]]
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> before [pipeline -> [[To[mock:checkpoint.before]]]]
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> after [pipeline -> [[To[mock:checkpoint.after]]]]
23:44:45,740 INFO AdviceWith (checkpoint) : [To[mock:checkpoint]] --> after [pipeline -> [[To[mock:checkpoint.after]]]]","joaocenoura:1402035437:2014-06-06T14:17:17.632+0000:1402035437:2014-06-06T14:17:17.632+0000:Related discussion at users list: http://camel.465427.n5.nabble.com/AdviceWithRouteBuilder-weaveById-creates-duplicated-endpoint-td5751888.html
davsclaus:1406076246:2014-07-23T08:44:06.469+0000:1406076246:2014-07-23T08:44:06.469+0000:Do you mind testing with 2.13.2 and/or 2.14-SNAPSHOT as we have had some fixes in advice-with recently.
davsclaus:1408682542:2014-08-22T12:42:22.327+0000:1408682542:2014-08-22T12:42:22.327+0000:Works now"
0,CAMEL-7484,New Feature,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-06-06 11:22:34+00:00,2014-06-06 11:46:13+00:00,"Add this setting to marshaller configuration will output schema location in the generated xml:



marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,
""schemaLocation.xsd"");","njiang:1402026373:2014-06-06T11:46:13.861+0000:1402026373:2014-06-06T11:46:13.861+0000:Applied the patch to camel master branch, and updated the wiki page for it."
0,CAMEL-7483,Bug,Major,2.13.1,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Willem Jiang,Abdelghani,0,2,2014-06-06 10:19:36+00:00,2014-06-06 12:03:07+00:00,"// SmppConfiguration has wrong value setDataCoding
public void setDataCoding(byte dataCoding) 

{
        this.alphabet = dataCoding;
    }","njiang:1402027387:2014-06-06T12:03:07.334+0000:1402027387:2014-06-06T12:03:07.334+0000:Applied patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Abdelghani."
0,CAMEL-7482,Bug,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Unassigned,Kevin Anthony Earls,0,3,2014-06-06 09:40:34+00:00,2014-08-20 06:54:08+00:00,"camel:route-stop does not work properly when there are messages in flight. 
Running a route that consumes from JMS where the route hung waiting for an ack, the route will eventually be stopped. However the JMS consumer does not unregister from the broker and the brokers JMX stats still show a consumer registered.","githubbot:1402029608:2014-06-06T12:40:08.839+0000:1402029608:2014-06-06T12:40:08.839+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/172

    First part of CAMEL-7482, update log messages on timeout

    Update the warn messages that are logged when the graceful timeout is hit to let people know some resources may still be running.


You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel CAMEL-7482

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/172.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #172
    
----
commit 15f60b9b78d885b791d4dca4789b44671b6b02d5
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-06-06T12:34:16Z

    First part of CAMEL-7482, update log messages on timeout

----

githubbot:1402031444:2014-06-06T13:10:44.866+0000:1402031444:2014-06-06T13:10:44.866+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/172

davsclaus:1402031488:2014-06-06T13:11:28.172+0000:1402031488:2014-06-06T13:11:28.172+0000:Thanks for the 172 PR which has been applied to master."
0,CAMEL-7481,Task,Major,None,None,"
None
",Resolved,Won't Fix,None,Willem Jiang,Willem Jiang,0,3,2014-06-06 01:26:50+00:00,2016-05-05 17:03:44+00:00,We need to provide a camel-gora feature for using camel-gora in karaf.,"ipolyzos:1402149462:2014-06-07T21:57:42.155+0000:1402149694:2014-06-07T22:01:34.740+0000:Hello, I would like to share a very early features workas used for the [camel-gora-examples|https://github.com/ipolyzos/camel-gora-examples] and in some in-house projects.

The features xml include :
 - gora-core-0.4
 - gora-hbase-0.4
 - camel-gora-2.13.1
 - hbase-0.94.6
 - hbase-0.98.0-hadoop2
 - dynamodb-0.95.0 
njiang:1402252493:2014-06-09T02:34:53.216+0000:1402252493:2014-06-09T02:34:53.216+0000:Hi [~ipolyzos],
The feature file I means is a bunch of OSGi bundles which can help us to deploy the camel-gora component into Apache Karaf.
But It also important to write an example to show the user how to use camel-gora component.
ipolyzos:1402295761:2014-06-09T14:36:01.739+0000:1402295761:2014-06-09T14:36:01.739+0000:Hi Willem, 

 The [camel-gora-examples|https://github.com/ipolyzos/camel-gora-examples] repository aims to host of usage examples. In any case I could go through and prepare something in the form of a tutorial. Do you think such a writing would serve the purpose ?"
0,CAMEL-7480,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Claus Ibsen,Claus Ibsen,0,1,2014-06-05 12:26:16+00:00,2015-07-12 07:19:35+00:00,This allows to introspect the running camel app easier using jolokia.,"davsclaus:1401945961:2014-06-05T13:26:01.756+0000:1401945961:2014-06-05T13:26:01.756+0000:This is a bit tougher as we would need to start a JVM with the javaagent of jolokia
{code}
-javaagent:jolokia-agent.jar=host=0.0.0.0
{code}

So the camel:run plugin would need to start the process itself, and stop it, just as mvn exec:java does."
0,CAMEL-7479,Bug,Minor,None,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Gregor Zurowski,Peter Keller,0,4,2014-06-04 19:22:29+00:00,2014-06-05 06:23:54+00:00,"Some Java exception messages are language specific and JUnit tests evaluating theses messages fail in a non-English environment.


Such assertions are done in JaxbDataFormatSchemaValidationSpringTest and JaxbDataFormatSchemaValidationTest:



The assertion ""Invalid content was found"" fails for the German message ""Ungültiger Content wurde beginnend mit Element ""age"" gefunden"" (#testMarshallWithValidationException())
The assertion ""The content of element 'person' is not complete"" fails for the German message ""Content des Elements ""person"" ist nicht vollständig"" (#testUnmarshallWithValidationException()).","githubbot:1401914995:2014-06-05T04:49:55.787+0000:1401914995:2014-06-05T04:49:55.787+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/170

    CAMEL-7479: Make unit tests run with any JVM system locale

    Use SAX validation error code instead of the localized error message in
    assert statements, so that the tests run with any JVM system locale.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7479

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/170.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #170
    
----
commit a16c105141bbd434c248f55f37ed3143c6bd127c
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-06-05T04:20:45Z

    CAMEL-7479: Make unit tests run with any JVM system locale
    
    Use SAX validation error code instead of the localized error message in
    assert statements, so that the tests run with any JVM system locale.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

gzurowski:1401915134:2014-06-05T04:52:14.161+0000:1401915185:2014-06-05T04:53:05.620+0000:Fix successfully tested by running unit tests with languages en, de, sv, zh and using the following Maven configuration:

{code:title=camel-jaxb/pom.xml}
<plugin>
  <artifactId>maven-surefire-plugin</artifactId>
    <configuration>
      <forkMode>pertest</forkMode>
      <argLine>-Duser.language=de</argLine> <!-- replace language code here -->
    </configuration>
</plugin>
{code}
githubbot:1401920596:2014-06-05T06:23:16.487+0000:1401920596:2014-06-05T06:23:16.487+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/170

davsclaus:1401920634:2014-06-05T06:23:54.895+0000:1401920634:2014-06-05T06:23:54.895+0000:Thanks for the PR. It has been pushed to the branches."
0,CAMEL-7478,Bug,Major,2.13.1,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Willem Jiang,Peter Keller,0,2,2014-06-04 17:42:22+00:00,2014-06-06 06:24:17+00:00,"If the exchange body is an array, then body.length returns correctly the length of the array. However, if the array is a property of an object, then not the correct value is returned:


MyClass.java
public class MyClass {
    public Object[] getMyArray() {
        return new Object[]{""Hallo"", ""World"", ""!""};
    }
}




Accessing the property myArray with Simple:



<setHeader headerName=""mySimpleHeader"">
    <simple>body.myArray.length</simple>
</setHeader>
<log message=""mySimpleHeader = ${header.mySimpleHeader}"" />




Java:



final ProducerTemplate template = main.getCamelTemplate();
template.sendBody(""direct:start"", new MyClass());




Log:



[main] route1 INFO  mySimpleHeader = 1




The return value should be 3 instead of 1.","njiang:1401989356:2014-06-06T01:29:16.239+0000:1401989356:2014-06-06T01:29:16.239+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.
Peter Keller:1402007057:2014-06-06T06:24:17.279+0000:1402007057:2014-06-06T06:24:17.279+0000:Thanks a lot."
0,CAMEL-7477,Task,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Claus Ibsen,0,4,2014-06-04 08:11:59+00:00,2014-07-14 06:23:25+00:00,"See
http://camel.465427.n5.nabble.com/camel-jclouds-parameter-operation-ignored-tp5750789p5750791.html


Though the value of the operation would be better if it was just get or put etc. But the key should be CamelJcloudsOperation still.","githubbot:1405216812:2014-07-13T10:00:12.432+0000:1405216812:2014-07-13T10:00:12.432+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/217

    Camel-7477:  Close task operation is wrong in docs

    Hi, 
    
    This PR is related to: https://issues.apache.org/jira/browse/CAMEL-7477
    
    Bye,
    Andrea

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel task-Camel-7477

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/217.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #217
    
----
commit ffcf760d2797f60e91e1a71fa1b515b0f4e6472f
Author: ancosen <ancosen@gmail.com>
Date:   2014-07-13T09:24:29Z

    Close task Camel-7477 operation is wrong in docs

----

acosentino:1405216854:2014-07-13T10:00:54.135+0000:1405216854:2014-07-13T10:00:54.135+0000:PR submitted:

https://github.com/apache/camel/pull/217
njiang:1405273791:2014-07-14T01:49:51.121+0000:1405273791:2014-07-14T01:49:51.121+0000:Hi Andrea,

Thanks for the PR, but I think it's a document issue instead of a code issue. 
Normally we don't share the operation (Get, Put, List) across the component, so it make sense to use ""CamelJcloudsPut"" instead of ""Put"" as the operation name.

njiang:1405273814:2014-07-14T01:50:14.907+0000:1405273814:2014-07-14T01:50:14.907+0000:Update the document for it.
githubbot:1405290102:2014-07-14T06:21:42.567+0000:1405290102:2014-07-14T06:21:42.567+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/217

acosentino:1405290205:2014-07-14T06:23:25.304+0000:1405290205:2014-07-14T06:23:25.304+0000:Sorry about that. I did not understand the issue."
0,CAMEL-7476,Bug,Minor,"2.13.0, 2.13.1",,"
None
",Resolved,Later,None,Willem Jiang,Gareth Bird,1,3,2014-06-03 09:25:14+00:00,2017-02-28 14:38:44+00:00,"(1) The cxfrs option throwExceptionOnFailure=true does not suppress exceptions from being thrown when an invoked REST service returns a http status > 207.  i.e. the following does not work:


...
.to(""cxfrs:bean:rsClient?throwExceptionOnFailure=false"")
....


(2) The cxfrs throwExceptionOnFailure option should default to false; to make it easier to process status codes in the route.


When invoking REST services, the logic is currently complicated by the fact that common status' need to be processed in exception handlers. i,e (404 not found, 412 precondition failed).  It would be more useful to filter on statuses with a main route.","sergey_beryozkin:1401870046:2014-06-04T16:20:46.182+0000:1401870046:2014-06-04T16:20:46.182+0000:Regarding 2), IMHO we should keep the existing default (""true"") as is to prevent the existing code out there from breaking, possibly default to 'false' later on...
njiang:1401922369:2014-06-05T06:52:49.316+0000:1401925651:2014-06-05T07:47:31.474+0000:I think we need more information about the description 1. 
If the option throwExceptionOnFailure set to be false, camel doesn't throw an exception if the response http status is > 207. 
I don't know what's wrong the below code?
{code}
        //Throw exception on a response > 207
        //http://en.wikipedia.org/wiki/List_of_HTTP_status_codes
        if (throwException) {
            if (response instanceof Response) {
                Integer respCode = ((Response) response).getStatus();
                if (respCode > 207) {
                    throw populateCxfRsProducerException(exchange, (Response) response, respCode);
                }
            }
        }
{code}

For 2) question, I agree with Sergey. 
techbird:1401926179:2014-06-05T07:56:19.690+0000:1401926179:2014-06-05T07:56:19.690+0000:Hi Willem - firstly can I just say simply thank you for your commitment and energy you put into everything you do (I've been reading your work online for years).  You and Sergey are exemplary; I feel  rather small in comparison. Amazing abilities.  I'm a huge huge fan.  Thank you for everything you do for the community.

Secondly forgive me, if this problem turns out to be a user (looser!) error.  From using the cxfrs option throwExceptionOnFailure=false in an cxfrs endpoint, I've been unable to to set throwException to false.  I think it stems down to setThrowExceptionOnFailure(boolean throwExceptionOnFailure) in CxfRsEndpoint.java; I don't think the code is called - well not from my route.

As quoted the code looks good; but is it possible to set throwException to false?

---
Can I sneak in a quick off topic question:- Surgery hinted that there might a new version of cxfrs - would this cover jaxrs 2.0 (jsr339)?

sergey_beryozkin:1401929280:2014-06-05T08:48:00.596+0000:1401929280:2014-06-05T08:48:00.596+0000:Hi
> You and Sergey are exemplary; I feel rather small in comparison
I feel small too :-), I haven't contributed much to Camel yet.

Re your other question: CXF 2.7.x supports most of JAX-RS 2.0 so CXFRS depending on CXF 2.7.x can utilize most of 2.0 features. CXFRS which will depend on CXF 3.0.0 will be fully 2.0 aware.

Sergey
techbird:1403492328:2014-06-23T10:58:48.565+0000:1403492328:2014-06-23T10:58:48.565+0000:Thank you for taking the time Willem for writing the test case to prove that throwExceptionOnFailure=false suppresses exceptions.

I still do have exceptions being raised in the route. 

I've been looking at my code, your code, and the cxfrs source - what I am now thinking is that the exception may be being raised on this line in (CxfRsProducer.java):

       // invoke the client
        Object response = null;
        if (responseClass == null || Response.class.equals(responseClass)) {
            response = client.invoke(httpMethod, body);
        } else { ...

The exception type is javax.ws.rs.ClientErrorException, so it may be being raised by CXF during invoke.  The REST service being called is returning a status of 412 (already exists).  

For reference - this is how I am calling the service in the route:

  .to(""cxfrs://http://www.example.com:8080/opendj-rest2ldap-servlet-2.6.0-servlet/?httpClientAPI=true&throwExceptionOnFailure=false&providers=#jaxproviders"")
 
[ As an aside I am invoking OpenDJ - LDAP REST service - to create a user ]

If response status 4xx, CXF will wrap response in javax.ws.rs.ClientErrorException and throws out;

So to re-cap I think that CXF is raising the exception - should these type of exception  be caught by and suppressed in the method invokeHttpClient?





 
sergey_beryozkin:1403492940:2014-06-23T11:09:00.674+0000:1403492940:2014-06-23T11:09:00.674+0000:Hi, CXF itself won't throw the exception if response class is Response.
WebClient has the following pseudo-code: 

""if (r.getStatus() >= 300 && responseClass != Response.class) => throw the exception...""

So I wonder do we have responseClass set to something else in the route ?

Cheers, Sergey



techbird:1403494629:2014-06-23T11:37:09.524+0000:1403494629:2014-06-23T11:37:09.524+0000:Yes  Sergey...

.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, constant(java.util.Map.class))

This allows CXF to unmarhsall (using Jackson) the JSON payload to a map.

Is there another way I should be doing this?
sergey_beryozkin:1403496262:2014-06-23T12:04:22.606+0000:1403496262:2014-06-23T12:04:22.606+0000:Do not let CXF do the unmarshalling,

You can do response.readEntity(Map.class) later on on the received Response instance.

There's another JIRA pending that would make it possible to integrate CXF Responses with Camel-level unmarshallers, you can do it right now too by extracting Response.getEntity() which will be InputStream before Camel unmarshaller is used.

Cheers, Sergey
techbird:1403574880:2014-06-24T09:54:40.023+0000:1403574880:2014-06-24T09:54:40.023+0000:Understood Sergey - you've saved me a lot of time. I'll recode my example and let Camel unmarshall.

I've always had a choice which way I architect the system I am shaping.  Should I use CXFRS or CXF/JAXRS as an endpoint for REST services.  If I use CXF directly I can use CAMEL for mediation and call out to routes by proxy (DI).   If I use CXFRS - I can keep both the endpoint/mediation logic in Camel.  Too much choice :)

Thanks for your assistance (again), Gareth
sergey_beryozkin:1403674895:2014-06-25T13:41:35.628+0000:1403674895:2014-06-25T13:41:35.628+0000:Hi Gareth, 

Can you please let us know if you can have throwExceptionOnfailure=false having an effect when you do not ask CXFRS to unmarshall to Map ?
Basically, JAX-RS clients are not expected to throw the exceptions if Response only is returned.
So if you have a code that unmarshalls Response entities later and also have throwExceptionOnfailure=false then indeed CXFRS should not throw the exceptions with HTTP statues >= 300

Thanks, Sergey"
0,CAMEL-7475,Bug,Major,2.10.0,,"
None
",Closed,Invalid,None,Unassigned,Radhakrishnan,0,2,2014-06-01 11:44:44+00:00,2014-06-01 12:38:52+00:00,"Hi,
Using Apache camel using ""exchange"" to read the file and filer some content and again write the file using ""exchange"" object. In file using delimiter is ""£"". After write the file before delimiter one special character is added and looks like ""Â£"". For remove this special character I used all different type of charset (ISO-8859-1, UTF-8, UTF-16, UTF-16BE, UTF-16LE, US-ASCII, Cp1252) but still I am not able to remove the special character. How to remove the special character through apache camel exchange?


Using Version:
JBoss FUSE : jboss-fuse-6.0.0.redhat-024
Apache Camel : 2.10.0


Thanks","davsclaus:1401597525:2014-06-01T12:38:45.446+0000:1401597525:2014-06-01T12:38:45.446+0000:Please use the mailing list / user forum for questions on using Camel.

See more details here
http://camel.apache.org/support
http://camel.apache.org/mailing-lists.html
http://camel.apache.org/discussion-forums.html

And as you are using JBoss Fuse then you can also use that vendors user forum for questions on their product
http://community.jboss.org/en/jbossfuse
"
0,CAMEL-7474,Improvement,Major,"2.12.3, 2.13.0","2.15.1, 2.16.0","
None
",Resolved,Fixed,"2.15.1, 2.16.0",Claus Ibsen,Stefan Hof,0,3,2014-05-30 10:01:28+00:00,2015-12-09 14:40:27+00:00,"If there is an error in the mail-consumer while consuming the mail, you cannot skip this mail and move to the next:


For example:
      from(""imaps://email.server?username=email.username&password=RAW(email.password)""
         + ""&delete=true&copyTo=email.folder/done&unseen=true& folderName=email.folder""
         + ""&fetchSize=1&contentType=text/html"")
moves the processed mail in the ""done""-subfolder of the email-folder, if everything is ok, eg, the route finishes. 


It is possible, to handle an error, after the consumer starts the route, but if the mail-consumer hits an error before the route starts, the error will be logged and nothing more happens. This means, the processed mail remains unchanged in in the email-folder and will be the next polled email, that leads to the same error, where the error will be logged and...


This endless circle cannot be broken, because the email cannot be marked as (unsuccessfully) processed.","davsclaus:1426907666:2015-03-21T11:14:26.732+0000:1426907666:2015-03-21T11:14:26.732+0000:You can use the bridge error handler to let Camel error handler handle it.
davsclaus:1426908935:2015-03-21T11:35:35.639+0000:1426908935:2015-03-21T11:35:35.639+0000:There is now 2 new options you can use to either skip or handle the message that is problematic, and the consumer will be able to move on to the next message.
Neffez:1449643227:2015-12-09T14:40:27.049+0000:1449643227:2015-12-09T14:40:27.049+0000:The solution only solves the issue with errors while retrieving the mails. If one of the received mails is corrupt and the exchange cannot be created, this issue still exists. 
"
0,CAMEL-7442,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Gregor Zurowski,Gregor Zurowski,0,2,2014-05-15 19:27:05+00:00,2014-05-23 06:02:45+00:00,Upgrade Apache Jackrabbit for the camel-jcr component to the recently released stable version 2.8.0 (see release notes: http://www.apache.org/dist/jackrabbit/2.8.0/RELEASE-NOTES.txt).,"githubbot:1400350143:2014-05-18T02:09:03.056+0000:1400350143:2014-05-18T02:09:03.056+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/155

    CAMEL-7442: Update Apache Jackrabbit to version 2.8.0

    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel Jackrabbit280

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/155.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #155
    
----
commit 08d90fe56e1e0842c2e3a3b324ef9a14197a351e
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-05-18T02:02:13Z

    CAMEL-7442: Update Apache Jackrabbit to version 2.8.0
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

githubbot:1400378790:2014-05-18T10:06:30.944+0000:1400378790:2014-05-18T10:06:30.944+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/155
"
0,CAMEL-7441,Task,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Jason Sherman,0,3,2014-05-14 16:06:39+00:00,2014-05-18 03:52:27+00:00,The documentation at http://camel.apache.org/bindy.html does not provide information on the quoting property.  Can the doc be updated to provide details on this option?,"davsclaus:1400105377:2014-05-15T06:09:37.212+0000:1400105377:2014-05-15T06:09:37.212+0000:Do you have a  suggestion for the text to be added?
jsherman1:1400128569:2014-05-15T12:36:09.674+0000:1400128569:2014-05-15T12:36:09.674+0000:Maybe something like:

||Option||Type||Default||Description||
|quoting|boolean|false|Used to specify when field is enclosed in quotes.  The quote option must also be set.|
njiang:1400356347:2014-05-18T03:52:27.568+0000:1400356347:2014-05-18T03:52:27.568+0000:Applied the patch into wiki page with thanks to Jason."
0,CAMEL-7440,Bug,Minor,2.13.0,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Claus Ibsen,Jason Sherman,0,3,2014-05-14 15:51:48+00:00,2014-05-15 06:09:11+00:00,"The property quoting is not logging the correct value in ./org/apache/camel/dataformat/bindy/BindyCsvFactory.java:



...
quoting = record.quoting();
LOG.debug(""CSV will be quoted: {}"", messageOrdered);
...




The value for messageOrdered is being logged instead.","githubbot:1400053931:2014-05-14T15:52:11.745+0000:1400053931:2014-05-14T15:52:11.745+0000:GitHub user jsherman1 opened a pull request:

    https://github.com/apache/camel/pull/152

    CSV log message should log the quoting property

    Fix for https://issues.apache.org/jira/browse/CAMEL-7440

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/jsherman1/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/152.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #152
    
----
commit 7dd3a69796b66c08af20da7a0a0bad6f005e1d34
Author: Jason Sherman <jsherman1@gmail.com>
Date:   2014-05-14T15:41:24Z

    CSV log message should log the quoting property

----

jsherman1:1400053985:2014-05-14T15:53:05.774+0000:1400053985:2014-05-14T15:53:05.774+0000:Pull request created to resolve this issue:

https://github.com/apache/camel/pull/152

Diff:

https://github.com/apache/camel/pull/152.diff
githubbot:1400105320:2014-05-15T06:08:40.189+0000:1400105320:2014-05-15T06:08:40.189+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/152

davsclaus:1400105351:2014-05-15T06:09:11.798+0000:1400105351:2014-05-15T06:09:11.798+0000:Thanks for the PR"
0,CAMEL-7436,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-05-13 11:58:19+00:00,2014-05-13 14:21:21+00:00,It could useful for the user to use the http related header after camel-cxf endpoint just as camel-jetty or camel-netty-http.,njiang:1399962081:2014-05-13T14:21:21.507+0000:1399962081:2014-05-13T14:21:21.507+0000:Applied the patch into camel master branch.
0,CAMEL-7435,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Henryk Konsek,Henryk Konsek,0,1,2014-05-13 06:50:44+00:00,2014-05-13 06:54:35+00:00,"We should add an empty callback method to ApnsServiceFactory that could be used to configure (or even replace) the default ApnsServiceBuilder instance.


Signature of the method could look as follows: 



protected ApnsServiceBuilder configureServiceBuilder(ApnsServiceBuilder serviceBuilder)




And could be used like:



ApnsServiceFactory proxiedApnsServiceFactory = new ApnsServiceFactory(){

    @Override
    protected ApnsServiceBuilder configureServiceBuilder(ApnsServiceBuilder serviceBuilder) {
        return serviceBuilder.withSocksProxy(""my.proxy.com"", 6666);
    }

};",hekonsek:1399935275:2014-05-13T06:54:35.150+0000:1399935275:2014-05-13T06:54:35.150+0000:Fixed in ca3e8a0a62fd93f30ab2fa1bbb2190a14ce53f8e.
0,CAMEL-7434,New Feature,Major,2.13.0,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Susan Javurek,0,5,2014-05-12 20:05:01+00:00,2015-03-21 09:05:46+00:00,"There is a way to do this by creating a ""trigger"" exchange that is handled in a special way by the aggregation strategy and a completion predicate. But this solution is quite intrusive and painful to write.


It would actually be much easier if the AggregateProcessor would implement and expose the following methods:


public void forceCompletionOfGroup(String key)
public Expression getCorrelationExpression()


This way, it becomes possible to control ""externally"" an aggregator without having to implement some intrusive logic.","boday:1401829958:2014-06-04T05:12:38.480+0000:1401867103:2014-06-04T15:31:43.115+0000:[~sjavurek] - if we added forceCompletionOfGroup(key) on the AggregateProcessor class, how would you invoke it externally?  

I suppose we could add support for a new marker header (AGGREGATION_COMPLETE_FOR_GROUP) and expect a groupKey as the body of the message to force the completion...though this would still require an explicit message be sent (vs. an API call)...is that what you are looking for?
davsclaus:1402003226:2014-06-06T05:20:26.948+0000:1402003226:2014-06-06T05:20:26.948+0000:You would need to introduce a new interface, that has a method to trigger that group completion. And then allow end users to implement that interface, and configure this to the aggregate eip defintion. 

Though naming is usually the hard part, but maybe an option named externalController, or externalSomething. Then we could potential have other controller functions in the future.

{code}
<aggregate externalController=""#myAggController"" ... >
 ...
{code}

And we could also expose the operation in JMX so people can trigger it from there too.
spetrucci:1407973572:2014-08-14T07:46:12.828+0000:1407973572:2014-08-14T07:46:12.828+0000:Hello,
As of today, we use a InterceptStrategy to get a reference on the AggregateProcessor. So this is not an issue, though an extra JMX method might also prove useful.
Regards.
boday:1409045167:2014-08-26T17:26:07.797+0000:1409045167:2014-08-26T17:26:07.797+0000:in the short term, I can add the support for a new marker header (AGGREGATION_COMPLETE_FOR_GROUP) which would invoke forceCompletionOfGroup(key)...if this is acceptable.  then perhaps log a separate task to add an external controller as Claus suggested...thoughts?
davsclaus:1409049911:2014-08-26T18:45:11.647+0000:1409049911:2014-08-26T18:45:11.647+0000:I think its the external controller that is the most needed. As sometimes you need a way of management to force a completion etc. Or some external tooling to do that.

Ben, I suggest you log a new ticket about  that completion for group header, so we keep this about the external controller.
spetrucci:1409055522:2014-08-26T20:18:42.750+0000:1409055522:2014-08-26T20:18:42.750+0000:Hello,
I tend to agree with Claus. Using a marker header would not help much in the scenario where you want to pre-complete a group to obey a maximum size limit.
I started to prototype a sample code some time ago, I can share this with you if this may help.
Regards,
Sebastien.
boday:1409082911:2014-08-27T03:55:11.163+0000:1409082911:2014-08-27T03:55:11.163+0000:[~spetrucci], if you have a potential patch for this, attach it and I'll try to work it in...thanks
davsclaus:1426899946:2015-03-21T09:05:46.952+0000:1426899946:2015-03-21T09:05:46.952+0000:There is now a aggregate controller to do this from java code. And its exposed in JMX operations on the aggreate mbean"
0,CAMEL-7433,New Feature,Major,2.10.7,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Susan Javurek,0,4,2014-05-12 19:59:24+00:00,2015-03-23 10:54:57+00:00,"We often face the same issue when it comes to aggregating multiple records into a single file.


A very common requirement that we have is that the aggregated files that we produce must not be bigger than a certain size (for example, 10MB). Relying on a predefined maximum of records or doing the size check after the aggregation is not option.


So ideally, before an exchange (holding a single file record) gets aggregated by a Camel aggregator, we should have a way to verify that the new exchange will fit into the current aggregate. If not, the current aggregate should be completed. And only after that, the new exchange could be aggregated.


This could be easily achieved if Camel's aggregator would have a new optional attribute 'preCompletionPredicate'. This predicate could be have an interface/signature as follows:


boolean preComplete(Exchange aggregate, Exchange newExchange);


The predicate implementation would then be able to use information from both exchanges to know if the aggregate should be completed before aggregating the new exchange or not.","davsclaus:1400105790:2014-05-15T06:16:30.813+0000:1400105790:2014-05-15T06:16:30.813+0000:Related to this you have the option eagerCheckCompletion you can set to true
http://camel.apache.org/aggregator2

spetrucci:1407973809:2014-08-14T07:50:09.008+0000:1407973809:2014-08-14T07:50:09.008+0000:Hello Claus,
The issue with 'eagerCheckCompletion' is that the incoming exchange will still be added to the current aggregate. The intent here is to have a way to say ""the incoming exchange will not fit, please flush the current aggregate and start a new one"".
Should you require more details about the use case, please just let me know.
Regards."
0,CAMEL-7432,Bug,Major,2.12.0,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Claus Ibsen,Narayanan Harihara,0,1,2014-05-12 14:13:12+00:00,2014-06-26 20:13:26+00:00,"I am using camel-mybatis (version 2.12.0) component in Fuse 6.1 environment to invoke an oracle SP with 2 resultsets. The request is a HashMap and once mybatis maps the resultsets to java beans, the List is again saved in the original HashMap itself. 


Here is the snippet of SqlMap:


<select
    id=""searchUsers""
    parameterType=""java.util.HashMap""       
    statementType=""CALLABLE"">
    {call ORACLE.SP_NAME_1(
        #

{userId,mode=IN,jdbcType=VARCHAR}

,
#

{maxResultsCount,mode=IN,jdbcType=DECIMAL}

,
#

{view,mode=IN,jdbcType=VARCHAR}

,
#

{statusInfo,mode=OUT,jdbcType=CURSOR,resultMap=statusInfoRowMap}

,
#

{memberInfo,mode=OUT,jdbcType=CURSOR,resultMap=claimInfoRowMap}

)}


And here is how I invoke the mybatis component:


<setBody>
    <groovy>
[
    userId:'ID-1234',
    maxResultsCount:20,
    view:'MEMBER',
]
   </groovy>
</setBody>
<to uri=""mybatis:searchUsers?statementType=SelectOne"" />


Since there are no result object (all the results are stored in the original requested HashMap itself), MyBatisProducer is setting null to exchange OUT message. The original body which contains the results from stored procedure is lost.


The Question is: is this the expected behaviour? mybatis component already stores the result in exchange header, so why to update the body as well?


The workaround I had to do was - to store the original body to a header, invoke mybatis and reset body from the header (which has the stored procedure result now) : 
<setBody>
            <groovy>
                [
             userId:'ID1234',
             maxResultsCount:20,
             view:'MEMBER'
          ]
        </groovy>
    </setBody>
    <setHeader headerName=""originalRequest"">
        <simple>${body}</simple>
    </setHeader>
    <to uri=""mybatis:searchUsers?statementType=SelectOne"" />
    <setBody>
        <simple>${in.headers.originalRequest}</simple>
    </setBody>
    <log message=""status: ${body.statusInfo}"" />",
0,CAMEL-7431,Bug,Major,2.13.0,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Willem Jiang,Pierre Maréchal,0,2,2014-05-12 13:09:11+00:00,2014-05-13 14:26:14+00:00,"When using DefaultJavaMailSender with an existing javax.mail.Session instance (i.e. retrieved from JNDI) it is not possible to leave host and port unconfigured.


My JavaMailSender is configured as follows:


    @Bean
    public JavaMailSender mailSender() 

{
        JavaMailSender jms = new DefaultJavaMailSender();
        jms.setSession(mailSession);
        jms.setProtocol(""smtp"");
        return jms;
    }


mailSession is a preconfigured Session instance retrieved from JNDI registry. I do not know about it's configuration.


When calling the send() method, it tries to connect using the connect(host, port, username, password) method passing the (unconfigured) host and port which defaults to localhost:0 and then fails.


In case the session is supplied, it should call connect() instead.","smokeshield:1399871375:2014-05-12T13:09:35.615+0000:1399871375:2014-05-12T13:09:35.615+0000:StackTrace of the Exception :

javax.mail.MessagingException: Could not connect to SMTP host: localhost, port: 0;
  nested exception is:
	java.net.ConnectException: connect: Address is invalid on local machine, or port is not valid on remote machine
	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1961)
	at com.sun.mail.smtp.SMTPTransport.protocolConnect(SMTPTransport.java:654)
	at javax.mail.Service.connect(Service.java:295)
	at org.apache.camel.component.mail.DefaultJavaMailSender.send(DefaultJavaMailSender.java:111)
	at org.apache.camel.component.mail.MailProducer.process(MailProducer.java:56)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:143)
	at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:307)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:138)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:168)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:119)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:359)
	at lu.chd.svc.mailing.service.MailingServiceImpl.sendMail(MailingServiceImpl.java:80)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.remoting.support.RemoteInvocationTraceInterceptor.invoke(RemoteInvocationTraceInterceptor.java:78)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)
	at com.sun.proxy.$Proxy56.sendMail(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.springframework.remoting.support.RemoteInvocation.invoke(RemoteInvocation.java:212)
	at org.springframework.remoting.support.DefaultRemoteInvocationExecutor.invoke(DefaultRemoteInvocationExecutor.java:39)
	at org.springframework.remoting.support.RemoteInvocationBasedExporter.invoke(RemoteInvocationBasedExporter.java:78)
	at org.springframework.remoting.support.RemoteInvocationBasedExporter.invokeAndCreateResult(RemoteInvocationBasedExporter.java:114)
	at org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter.handleRequest(HttpInvokerServiceExporter.java:74)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:51)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:863)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:727)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:652)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:445)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:556)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:227)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1044)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:372)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:189)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:978)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)
	at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:369)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:486)
	at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:944)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1005)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:662)
Caused by: java.net.ConnectException: connect: Address is invalid on local machine, or port is not valid on remote machine
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.PlainSocketImpl.doConnect(PlainSocketImpl.java:351)
	at java.net.PlainSocketImpl.connectToAddress(PlainSocketImpl.java:213)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:200)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:366)
	at java.net.Socket.connect(Socket.java:529)
	at java.net.Socket.connect(Socket.java:478)
	at com.sun.mail.util.SocketFetcher.createSocket(SocketFetcher.java:321)
	at com.sun.mail.util.SocketFetcher.getSocket(SocketFetcher.java:237)
	at com.sun.mail.smtp.SMTPTransport.openServer(SMTPTransport.java:1927)
	... 78 more
njiang:1399941519:2014-05-13T08:38:39.188+0000:1399941519:2014-05-13T08:38:39.188+0000:I just checked the code of java mail, we just need to set the default port of DefaultJavaMailSender to -1, then we can get the same result if the host, username and password parameter are not set.

njiang:1399962374:2014-05-13T14:26:14.210+0000:1399962374:2014-05-13T14:26:14.210+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7430,Improvement,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-05-12 03:19:18+00:00,2014-05-12 08:53:55+00:00,Here is the user request for adding properties support in BeanIODataFormat.,njiang:1399856035:2014-05-12T08:53:55.025+0000:1399856035:2014-05-12T08:53:55.025+0000:Added a properties option into BeanIODataFormat
0,CAMEL-7429,Bug,Major,2.12.3,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Claus Ibsen,Andrea Cosentino,0,3,2014-05-09 10:48:46+00:00,2014-08-14 09:27:24+00:00,"Hi,


Suppose you have a properties file of this type



#PROPERTIES CONCATENATION
prop1=file:
prop2=dirname
concat.property={{prop1}}{{prop2}}

#PROPERTIES WITHOUT CONCATENATION
property.complete=file:dirname




and you want to use the property concat.property. Using Camel 2.10.3 loading this property doesn't create any kind of problem. When I upgrade to Camel 2.12.3 I get an exception, that you can reproduce with the following informations.


In DefaultPropertiesParser class of org.apache.camel.component.properties package, I found a strange behaviour relative to that specific kind of property.  When I execute a test like the following, (the first try to use concatenated property and the second try to use property without concatenation):


PropertiesComponentConcatenatePropertiesTest.java
import org.apache.camel.CamelContext;
import org.apache.camel.ContextTestSupport;
import org.apache.camel.builder.RouteBuilder;

public class PropertiesComponentConcatenatePropertiesTest extends ContextTestSupport {
    
    @Override
    protected CamelContext createCamelContext() throws Exception {
        CamelContext context = super.createCamelContext();
        context.addComponent(""properties"", new PropertiesComponent(""classpath:org/apache/camel/component/properties/concatenation.properties""));
        return context;
    }
    
    @Override
    protected void setUp() throws Exception {
        System.setProperty(""environment"", ""junit"");
        super.setUp();
    }
    
    @Override
    protected void tearDown() throws Exception {
        System.clearProperty(""environment"");
        super.tearDown();
    }
    
    public void testConcatPropertiesComponentDefault() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").setBody(simple(""${properties:concat.property}""))
                .to(""mock:result"");
            }
        });
        context.start();

        getMockEndpoint(""mock:result"").expectedBodiesReceived(""file:dirname"");

        template.sendBody(""direct:start"", ""Test"");

        assertMockEndpointsSatisfied();
    }
    
    public void testWithoutConcatPropertiesComponentDefault() throws Exception {
        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"").setBody(simple(""${properties:property.complete}""))
                .to(""mock:result"");
            }
        });
        context.start();

        getMockEndpoint(""mock:result"").expectedBodiesReceived(""file:dirname"");

        template.sendBody(""direct:start"", ""Test"");

        assertMockEndpointsSatisfied();
    }
}




The first test return the following exception:



org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[Message: Test]
	at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1379)
	at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:622)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:467)
	at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:463)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:139)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
	at org.apache.camel.component.properties.PropertiesComponentConcatenatePropertiesTest.testConcatPropertiesComponentDefault(PropertiesComponentConcatenatePropertiesTest.java:56)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at org.apache.camel.TestSupport.runBare(TestSupport.java:58)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)
Caused by: org.apache.camel.RuntimeCamelException: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: prop1}}{{prop2
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1363)
	at org.apache.camel.builder.ExpressionBuilder$78.evaluate(ExpressionBuilder.java:1784)
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)
	at org.apache.camel.builder.SimpleBuilder.evaluate(SimpleBuilder.java:83)
	at org.apache.camel.processor.SetBodyProcessor.process(SetBodyProcessor.java:46)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
	at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
	at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
	at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
	at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
	at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
	at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
	... 22 more
Caused by: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: prop1}}{{prop2
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:38)
	at org.apache.camel.component.properties.DefaultPropertiesParser.createPlaceholderPart(DefaultPropertiesParser.java:189)
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:105)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:158)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:117)
	at org.apache.camel.builder.ExpressionBuilder$78.evaluate(ExpressionBuilder.java:1781)
	... 40 more




It seems that DefaultPropertiesParser doesn't like concatenation of properties. I've forked Camel project on GitHub and I've added the unit test posted above. Here is the link: https://github.com/ancosen/camel


Investigating the history of the particular class I found that the problem should arise from:
CAMEL-5328 supports resolution of nested properties in PropertiesComponent


Here is the link of the commit:
https://github.com/apache/camel/commit/83f4b0f485521967d05de4e65025c4558a75ff3c


Thanks.
Bye","githubbot:1400301642:2014-05-17T12:40:42.659+0000:1400301642:2014-05-17T12:40:42.659+0000:GitHub user ancosen opened a pull request:

    https://github.com/apache/camel/pull/154

    [CAMEL-7429] Camel Properties Component concatenation issue

    Hi all,
    
    This pull request is related to
    **https://issues.apache.org/jira/browse/CAMEL-7429**
    
    I added a new private method in the **DefaultPropertiesParser** class to determine if the property we're parsing is a concatenation with the aim to distinguish it from a nesting.
    
    I added an **AllPropertiesTest** test class (SuiteTest) to execute all the tests related to Properties when some improvements or patches are added. I have improved the Tests with a new class **PropertiesComponentConcatenatePropertiesTest** where I test the new DefaultPropertiesParser.
    
    Hope this should be useful.
    
    Thanks.
    
    Bye

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/ancosen/camel camel-7429-concatenatedproperties

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/154.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #154
    
----
commit f89de09a25e6b8a4a284d2c406c1e146bab16750
Author: ancosen <ancosen@gmail.com>
Date:   2014-05-17T12:28:29Z

    Fixes CAMEL-7429 Camel Properties Component concatenation issue

----

acosentino:1400301979:2014-05-17T12:46:19.330+0000:1400301979:2014-05-17T12:46:19.330+0000:I think I've fixed the concatenation case. Anyway I'll add other tests later.
davsclaus:1400536615:2014-05-20T05:56:55.902+0000:1400536656:2014-05-20T05:57:36.802+0000:Thanks for the PR but its not a complete solution, as you can have 
{code}
{{foo}blabla{{bar}}{{baz}}123{{dude}}
{code}
etc. 

So its not as easy as just to check for 
{code}
}}{{
{code}

acosentino:1400536810:2014-05-20T06:00:10.976+0000:1400536810:2014-05-20T06:00:10.976+0000:You're right. I'll improve this solution.
acosentino:1400537267:2014-05-20T06:07:47.165+0000:1400537294:2014-05-20T06:08:14.583+0000:We can have

- nested properties
- concatenated properties
- something like what you've posted 

What else? 

In *DefaultParserProperties* class in *isNestProperty* private method we just control this:

{code}
uri.startsWith(prefixToken) && uri.endsWith(suffixToken)
{code}

as condition to have a nested property.. I think this is a soft condition and this is the point where concatenation fails.
githubbot:1403062467:2014-06-18T11:34:27.881+0000:1403062467:2014-06-18T11:34:27.881+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/189

    CAMEL-7429 Camel Properties Component concatenation issue

    I've changed the logic for finding and replacing properties. All the previous tests still pass and the new contatenation one of Adrea is working too.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-7429

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/189.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #189
    
----
commit 1258691c272ee31dca112141cfcf1f0439e8e506
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2014-06-18T11:31:39Z

    CAMEL-7429 Camel Properties Component concatenation issue

----

davsclaus:1403064842:2014-06-18T12:14:02.044+0000:1403064842:2014-06-18T12:14:02.044+0000:Thanks Anotine, but unfortunately the latest PR breaks in other modules, such as camel-blueprint.

Try running tests for components, eg it should pass for camel-spring, camel-blueprint, camel-test-blueprint, camel-scala, camel-groovy etc.
{code}
testConfigAdmin(org.apache.camel.test.blueprint.ConfigAdminOverridePropertiesOutsideCamelContextTest)  Time elapsed: 2.531 sec  <<< ERROR!
org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[{{destination}}] <<< in route: Route(route1)[[From[direct:start]] -> [Bean[ref:myCoolBean m... because of Property with key [destination] not found in properties from text: {{destination}}
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:910)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2068)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1816)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:187)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
Caused by: java.lang.IllegalArgumentException: Property with key [destination] not found in properties from text: {{destination}}
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.getPropertyValue(DefaultPropertiesParser.java:207)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.readProperty(DefaultPropertiesParser.java:131)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.doParse(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser$ParsingContext.parse(DefaultPropertiesParser.java:77)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:42)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:158)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:117)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1223)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:571)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:474)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:780)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:2068)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1816)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1683)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1651)
	at org.apache.camel.blueprint.BlueprintCamelContext.start(BlueprintCamelContext.java:177)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:187)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
{code}

antoine.dessaigne:1403066063:2014-06-18T12:34:23.997+0000:1403066063:2014-06-18T12:34:23.997+0000:Sorry about that, I'll fix this
antoine.dessaigne:1403132718:2014-06-19T07:05:18.198+0000:1403132718:2014-06-19T07:05:18.198+0000:Ok, I've fixed the issue in the pull request, it should be good now
davsclaus:1403133485:2014-06-19T07:18:05.012+0000:1403133485:2014-06-19T07:18:05.012+0000:Thanks for the PR
githubbot:1403135645:2014-06-19T07:54:05.612+0000:1403135645:2014-06-19T07:54:05.612+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/189

githubbot:1405125875:2014-07-12T08:44:35.877+0000:1405125875:2014-07-12T08:44:35.877+0000:Github user ancosen closed the pull request at:

    https://github.com/apache/camel/pull/154
"
0,CAMEL-7428,Bug,Major,"2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Duplicate,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Peter Keller,0,2,2014-05-09 09:19:57+00:00,2014-06-04 17:02:54+00:00,"Operators are not evaluated if using simple for setting bodies or headers:



from(""direct:simple"")
    .setHeader(""myHeader"").simple(""true == true"", Boolean.class)
    .log(""header = [${header.myHeader}]"")
    .setBody(simple(""true == true"", Boolean.class))
    .log(""body = [${body}]"");




Output is as follows:



INFO  header = [false]
INFO  body = [false]




The outcome should be true in both cases.


Also, see http://stackoverflow.com/questions/23523409/camel-how-to-set-boolean-header-parameter-using-simple-comparison/23560989#23560989","davsclaus:1399761894:2014-05-11T06:44:54.770+0000:1399761894:2014-05-11T06:44:54.770+0000:Can you test with 2.13.0 or 2.12.x SNAPSHOT as we ought to have fixed this recently.
Peter Keller:1399767154:2014-05-11T08:12:34.067+0000:1399767154:2014-05-11T08:12:34.067+0000:I tested with 2.13.0, 2.13-SNAPSHOT and 2.12-SNAPSHOT and none of them handled the operators correctly.
davsclaus:1399767738:2014-05-11T08:22:18.441+0000:1399767738:2014-05-11T08:22:18.441+0000:Use a better/real life use case than true == true.

You may need to do

${true} == true
Peter Keller:1399769658:2014-05-11T08:54:18.823+0000:1399770324:2014-05-11T09:05:24.318+0000:Using 
{code}
${true}
{code} 
fails with {{Unknown function: true}}? 

I tested with {{'hello' == 'hello'}} and {{'hello' contains 'hello'}} and both return {{false}} instead of {{true}}. The following more complete and realistic scenario fails too:

{code}
 from(""direct:simple"")
    .setHeader(""param1"", constant(""hello""))
    .log(""param1 = ${header.param1}"")
    .setHeader(""param2"").simple(""${header.param1} == 'hello'"", Boolean.class)
    .log(""param2 = ${header.param2}"");
{code}

This logs:
{noformat}
INFO  param1 = hello
INFO  param2 = false
{noformat}


davsclaus:1399769916:2014-05-11T08:58:36.588+0000:1399769990:2014-05-11T08:59:50.668+0000:Do NOT use literals, but you must have a function on the left hand side, such as 
{code}
${body}
{code}
 or
{code}
 ${header.foo}.
{code}

 The simple language is not for evaluating 
{code}
""true == true"" 
{code}
  or
{code}
 ""'hello' == 'hello'""
{code}

. That is NOT its purpose. It is for evaluating data from the Camel Exchange / Message.

Peter Keller:1399770298:2014-05-11T09:04:58.191+0000:1399770298:2014-05-11T09:04:58.191+0000:{code}
""${header.param1} == 'hello'""
{code}
has a function on the left hand side and doesn't work? By the way
{code}
""${header.param1} == ${header.param1}""
{code}
does't work neither.
davsclaus:1399771382:2014-05-11T09:23:02.613+0000:1399771382:2014-05-11T09:23:02.613+0000:This has been fixed and works fine.
I added your example as an unit test too

You need to build from source if you want to test with SNAPSHOT


Peter Keller:1399772006:2014-05-11T09:33:26.889+0000:1399772048:2014-05-11T09:34:08.994+0000:I guess fix version 2.13.0 is wrong as I tested with this version and it does not work properly. It would be helpful to link to the original issue, however I didn't find it.
Peter Keller:1399772544:2014-05-11T09:42:24.321+0000:1399772544:2014-05-11T09:42:24.321+0000:Thanks for updating the fix versions and the link.
davsclaus:1399772725:2014-05-11T09:45:25.786+0000:1399772725:2014-05-11T09:45:25.786+0000:There is a 2.13.1 RC you can give a test spin
http://camel.465427.n5.nabble.com/VOTE-Release-Apache-Camel-2-13-1-td5750981.html"
0,CAMEL-7427,Bug,Major,2.13.0,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-05-09 08:34:46+00:00,2014-05-09 11:47:13+00:00,We need to fix the same issue of CAMEL-7426 in camel-netty-http,njiang:1399607219:2014-05-09T11:46:59.100+0000:1399607219:2014-05-09T11:46:59.100+0000:Applied the patch into camel master and camel-2.13.x.
0,CAMEL-7426,Bug,Major,"2.11.4, 2.12.3, 2.13.0","2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-05-09 08:32:55+00:00,2014-05-09 11:46:36+00:00,"When the camel http related component gets the post request of from, it always parsers the request body to get the from parameter. This feature could cause some trouble when the camel route proxy the request to other endpoint.","njiang:1399607196:2014-05-09T11:46:36.167+0000:1399607196:2014-05-09T11:46:36.167+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x."
0,CAMEL-7425,New Feature,Minor,"2.12.4, 2.13.2, 2.14.0",2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Benedikt Waldvogel,0,1,2014-05-08 11:19:56+00:00,2015-08-12 12:46:57+00:00,"This is a follow-up feature request for CAMEL-7411.


Since the EventDrivenPollingConsumer is blocking on the internal queue by default now, another option (e.g. pollingConsumerBlockTimeout) would be helpful to specify the maximum wait time on the internal queue.offer(…) call.",
0,CAMEL-7424,Bug,Major,"2.12.3, 2.13.0","2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Grzegorz Grzybek,Grzegorz Grzybek,0,2,2014-05-08 08:16:40+00:00,2015-02-02 14:37:33+00:00,See full description here: CXF-5733,"githubbot:1399509398:2014-05-08T08:36:38.824+0000:1399509398:2014-05-08T08:36:38.824+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/145

    [CAMEL-7424] copy new version of StaxSource from CXF (with tests)

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7424

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/145.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #145
    
----
commit 7884c7ac22363cb3e0cf30230d26c37df1ae07d6
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-05-08T08:34:17Z

    [CAMEL-7424] copy new version of StaxSource from CXF (with tests)

----

githubbot:1399513520:2014-05-08T09:45:20.293+0000:1399513520:2014-05-08T09:45:20.293+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/145
"
0,CAMEL-7423,Bug,Major,None,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Henryk Konsek,Henryk Konsek,0,1,2014-05-08 07:14:44+00:00,2014-05-08 10:54:08+00:00,"DefaultClientPipelineFactory respects the requestTimeout option, but HttpClientPipelineFactory doesn't. We should add requestTimeout resolution logic (and ReadTimeoutHandler) to the HTTP pipeline creation process.","hekonsek:1399504841:2014-05-08T07:20:41.914+0000:1399504841:2014-05-08T07:20:41.914+0000:Master fix: 5c8b2e953a7e7b23f849849a14ff8a018faa586c

I'll backport the fix later today.
hekonsek:1399516452:2014-05-08T10:34:12.317+0000:1399516452:2014-05-08T10:34:12.317+0000:Backported to 2.13.2 in 3827064b39137aa8134cc8359bc849c27477c7b7.
hekonsek:1399517637:2014-05-08T10:53:57.602+0000:1399517637:2014-05-08T10:53:57.602+0000:Backported to 2.12.4 in 8e3b01b26bca49cface17956f38805c330d7dfba.
"
0,CAMEL-7422,Improvement,Minor,2.13.0,,"
None
",Resolved,Fixed,None,Unassigned,Gérald Quintana,0,4,2014-05-07 20:47:46+00:00,2014-06-07 17:22:02+00:00,"Add RabbitMQ consumer options:



consumerCount : number of concurrent threads/channels used to consume messages
prefetchSize : amount of content (in octets) the broker will deliver
prefetchCount : number of messages the broker will deliver



http://www.rabbitmq.com/javadoc/com/rabbitmq/client/Channel.html#basicQos%28int,%20int,%20boolean%29","neoramon:1401811109:2014-06-03T23:58:29.105+0000:1401811109:2014-06-03T23:58:29.105+0000:How Can I assign to me this issue?
njiang:1401817717:2014-06-04T01:48:37.808+0000:1401817717:2014-06-04T01:48:37.808+0000:Hi Ramon,

I tried to assign the task to you, but it looks you are not the camel developer, I cannot find your name from the list.
Anyway, please feel free to submit your patch, I'd happy to apply it for you.

githubbot:1401822819:2014-06-04T03:13:39.775+0000:1401822819:2014-06-04T03:13:39.775+0000:GitHub user neoramon opened a pull request:

    https://github.com/apache/camel/pull/168

    CAMEL-7422 camel-rabbit - Consumer tuning: thread count, prefetch

    With Prefetch we can set number of messages to be consumed from a rabbit queue.
    It's about issue: https://issues.apache.org/jira/browse/CAMEL-7422

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/neoramon/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/168.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #168
    
----
commit 51e8679227b82b97d2a4691145d4ba7e7412bda3
Author: neoramon <neoramon@gmail.com>
Date:   2014-06-04T02:55:20Z

    CAMEL-7422 RabbitMQ component improvement
    
    CAMEL-7422
    camel-rabbit - Consumer tuning: thread count, prefetch

commit 20c5e576a903161b149eca0cd8804883f7385b5f
Author: neoramon <neoramon@gmail.com>
Date:   2014-06-04T03:01:23Z

    Merge branch 'master' of https://github.com/neoramon/camel

----

njiang:1401834034:2014-06-04T06:20:34.067+0000:1401834034:2014-06-04T06:20:34.067+0000:Applied the patch into master branch with thanks to Ramon.
njiang:1401834785:2014-06-04T06:33:05.142+0000:1401834785:2014-06-04T06:33:05.142+0000:I just updated the wiki page of camel-rabbitmq to add these new options.
githubbot:1402132922:2014-06-07T17:22:02.765+0000:1402132922:2014-06-07T17:22:02.765+0000:Github user neoramon closed the pull request at:

    https://github.com/apache/camel/pull/168
"
0,CAMEL-7421,Improvement,Major,2.12.3,"2.14.1, 2.15.0","
None
",Resolved,Fixed,"2.14.1, 2.15.0",Claus Ibsen,Gérald Quintana,0,3,2014-05-07 20:21:37+00:00,2014-12-04 06:48:13+00:00,"Channels are not fully thread-safe (see below), as a result the RabbitMQProducer shouldn't use a single Channel. In short, Channels should be pooled, and each thread given a Channel from the pool.


http://www.rabbitmq.com/api-guide.html#channel-threads 


applications should prefer using a Channel per thread instead of sharing the same Channel across multiple threads.


http://www.rabbitmq.com/javadoc/com/rabbitmq/client/Channel.html 


An important caveat to this is that confirms are not handled properly when a Channel is shared between multiple threads. In that scenario, it is therefore important to ensure that the Channel instance is not accessed concurrently by multiple threads.","githubbot:1402271840:2014-06-09T07:57:20.965+0000:1402271840:2014-06-09T07:57:20.965+0000:GitHub user gquintana opened a pull request:

    https://github.com/apache/camel/pull/173

    CAMEL-7421 Producer Channel pooling

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gquintana/camel camel-7421-producer-channel-pooling

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/173.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #173
    
----
commit 974a8e803fe6c2bbab9c9a4ebb1247f9737196c1
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2014-05-14T14:35:21Z

    Adding Channel pooling in RabbitMQProducer

commit 752a3d2a64bbd76776dcacb0e57251bb7e6029f6
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2014-06-09T07:51:48Z

    Merge branch 'master' into camel-7421-producer-channel-pooling
    
    Conflicts:
    	components/camel-rabbitmq/src/main/java/org/apache/camel/component/rabbitmq/RabbitMQProducer.java

----

davsclaus:1417564856:2014-12-03T08:00:56.761+0000:1417564856:2014-12-03T08:00:56.761+0000:I think its better to use commons-pool as the pooling implementation, instead of writing your own. 
We do this with camel-netty etc.
gquintana:1417612530:2014-12-03T21:15:30.345+0000:1417612530:2014-12-03T21:15:30.345+0000:Replaced object pool by Commons Pool in commit 
https://github.com/gquintana/camel/commit/e193ff7ad9cefae64449163a665d71083e420d6c

Also rebased by branch
davsclaus:1417646639:2014-12-04T06:43:59.928+0000:1417646639:2014-12-04T06:43:59.928+0000:Thanks for the PR"
0,CAMEL-7420,Sub-task,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,James Strachan,0,3,2014-05-07 11:04:24+00:00,2019-07-31 08:48:50+00:00,"once CAMEL-7354 is implemented; it'd be great to provide a JMX API to be able to get the WADL of a camel endpoint/component/route/context so we can document and browse the available camel REST APIs like we can with CXF.


Having a course grained API WADL would be better; e.g. at the component level; maybe with documentation/links to specific route ids / camel context ids etc?",
0,CAMEL-7419,New Feature,Major,None,"3.0.0.M4, 3.0.0","
None
",Resolved,Fixed,"3.0.0.M4, 3.0.0",Unassigned,Claus Ibsen,3,5,2014-05-07 05:49:14+00:00,2019-07-31 08:48:39+00:00,"See nabble
http://camel.465427.n5.nabble.com/longish-uri-on-file-endpoint-tp5750862.html


We could toy with the idea of allowing to configure endpoints using a mix of uri's and properties. So you can define the uri in a more readable manner if it has many options.



<from uri=""ftp:someserver"">
   <property name=""delete"" value=""true""/>
   <property name=""username"" value=""{{ftpUser}}""/>
   <property name=""password"" value=""Se!@rec""/>
   ... // more properties here
</from>




This should also be supported in the <endpoint>, eg



<endpoint id=""myFtp"" uri=""ftp:/xxxx"">
  <property name=""delete"" value=""true""/>
   <property name=""username"" value=""{{ftpUser}}""/>
   <property name=""password"" value=""Se!@rec""/>
</endpoint>




We could also support breaking (a bit wacky idea) up the url's in multiple properties url2, url3, url4, which get's appended as one combined url by Camel internally. This allows people to breakup options that may belong together in a few url's. We may come up with a better name than url2, url3 etc.



<from uri=""ftp:someserver"">
  <property name=""url2"" value="".... more options here""/>
  <property name=""url3"" value="".... more options here""/>
</from>




Also we can support the p:xxx attribute syntax so you can do shorthand property assignment. We do this with the property placeholder in the EIPs.
(see Using property placeholders for any kind of attribute in the XML DSL at http://camel.apache.org/using-propertyplaceholder.html). Then it becomes just one tag.



<from uri=""ftp:someserver""
   p:delete=""true"" 
   p:username=""{{ftpUser}}""
   p:password=""Se!@rec""/>




Although using the <from><property> is similar to what you do in spring/blueprint and also tooling friendly. So you can have code assistance in your IDE, and XML schema validation. 


Also it allows for people to configure their passwords without using RAW() style. As the value is used as-is.


And for Java DSL, we can have some java builder to do similar. But people can also just break up their strings, or use string format etc.","githubbot:1400217041:2014-05-16T13:10:41.963+0000:1400217041:2014-05-16T13:10:41.963+0000:GitHub user adessaigne opened a pull request:

    https://github.com/apache/camel/pull/153

    CAMEL-7419 - Configure endpoints with many options in the DSL using a mix of url and properties

    I'm using the following XML representation:
    ```xml
    <from uri=""timer:foo"">
        <option key=""repeatCount"">10</option>
    </from>
    ```
    It's only available when creating a `FromDefinition` from XML, if you're using the Java DSL you can use `URISupportcreateRemainingURI()` in order to create your very long URI.
    It's handled by `<from />`, `<to />`, `<inOut />` and `<inOnly />`.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/adessaigne/camel CAMEL-7419

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/153.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #153
    
----
commit ec40430f4d70f6df5f02773edaf869ac30f07eda
Author: Antoine DESSAIGNE <antoine.dessaigne@gmail.com>
Date:   2014-05-16T13:02:57Z

    CAMEL-7419 - Configure endpoints with many options in the DSL using a mix of url and properties

----

nfx:1409805315:2014-09-04T12:35:15.367+0000:1409805315:2014-09-04T12:35:15.367+0000:Please don't forget about Java DSL for this purpose
davsclaus:1422874506:2015-02-02T18:55:06.143+0000:1422874506:2015-02-02T18:55:06.143+0000:CAMEL-8309 is a non intrusive which we plan to implement for Camel 2.15
antoine.dessaigne:1422877912:2015-02-02T19:51:52.430+0000:1422877912:2015-02-02T19:51:52.430+0000:Hi Claus,
I'm not completely sure that CAMEL-8309 will do the trick. First and foremost the ""&amp;"" separator makes the URL difficult to read. Also we need to check that new line separators (""\n"", ""\r\n"" and ""\r"") in an XML attribute value produce a valid and well formed XML document.
I don't see why we cannot have children nodes for dealing with URL parameters.
davsclaus:1422947212:2015-02-03T15:06:52.066+0000:1422947252:2015-02-03T15:07:32.186+0000:There is more on the table

The verbose configuration of endpoints, is better suited in the <endpoint> configuration, eg such as
https://github.com/apache/camel/blob/master/components/camel-spring/src/test/resources/org/apache/camel/spring/endpointReference.xml#L32

Then we can allow to do
{code}
<endpoint id=""foo"" uri=""file:something"">
   <property name=""includes"" value=""backup/*.xml""/>
   <property name=""recursive"" value=""true""/>
   ...
</endpoint>
{code}

And then in the routes you refer to the endpoint from its id, which keeps it tidy and lean
{code}
<from uri=""ref:foo""/>
 ...
{code}


Now the other things that is on the table is that eg Camel 2.15 would allow us to generate per component type safe XSD schema, so we could do

{code}
<from>
   <file directory=""somewhere"" includes=""backup/*.xml"" recursive=""true""/>
</from>
{code}

Though it would require a fair bit of work to get the generation correct, and also configuring ""repeatable/dynamic"" options can maybe become too verbose? eg such as on the http endpoint we have httpClient.XXX where XXX maps to a option on the http client library, that Camel do not know about at compile time, but is mapped at runtime.

And btw an xml attribute is valid with a new line, for example all the top of the xml files uses that in the namespace mapping such as:
https://github.com/apache/camel/blob/master/components/camel-spring/src/test/resources/org/apache/camel/spring/endpointReference.xml#L20



But having the functionality to use <property> in the <endpoint> is something that I think we can do in the 2.x timeline.
antoine.dessaigne:1422948690:2015-02-03T15:31:30.896+0000:1422948690:2015-02-03T15:31:30.896+0000:We may be the only ones but we're not using spring at all, we're using classic JAXB deserialization of a {{RoutesDefinition}} object. Thus, the solution based on spring won't help us.

On the other hand, I love the notation with children tags such as {{file}}, that way you can have attribute type information. The only thing that we need to take care of is handling of custom Components.

davsclaus:1423178308:2015-02-06T07:18:28.107+0000:1423178308:2015-02-06T07:18:28.107+0000:We now support using <property> style for <endpoint>. 

This ticket CAMEL-5197 is related to that. We could look into allowing to define <endpoint> as abstract=true, so you can define common options for re-use. 

{code}
<endpoint id=""baseJms"" abstract=""true"">
  <property name=""cacheLevel"" value=""CACHE_CONSUMER""/>
  ...
</endpoint>

<endpoint id=""myJms"" extends=""baseJms"" uri=""activemq:queue:bar""/>
   <property name=""transacted"" value=""true""/>
</endpoint>
{code}
githubbot:1438419454:2015-08-01T16:57:34.812+0000:1438419454:2015-08-01T16:57:34.812+0000:Github user ke4qqq closed the pull request at:

    https://github.com/apache/camel/pull/153

davsclaus:1564534119:2019-07-31T08:48:39.184+0000:1564534119:2019-07-31T08:48:39.184+0000:There is a endpoint DSL now"
0,CAMEL-7418,Bug,Minor,2.13.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,André Ricardo da Silva Souza,0,2,2014-05-06 22:59:39+00:00,2014-07-02 18:57:32+00:00,"I guess this line isn't correct:
if (type.isInstance(pair.getClass()) || type.getName().equals(pair.getClassName()))


The variable ""pair.getClass()"" always returns ""javax.naming.NameClassPair"" or its subclasses and the method ""isInstance"" works only with Instances, but doesnt Classes.


 I think the correct code should be:
if (type.isAssignableFrom(Class.forName(pair.getClassName())))


I've tried to test a transacted route, but i couldnt because the error: 
Failed to create route route1 at: >>> Transacted[] <<< in route: Route(route1)[[From[direct:start]] -> [Transacted[]]] because of No bean could be found in the registry of type: PlatformTransactionManager","davsclaus:1399502173:2014-05-08T06:36:13.119+0000:1399502173:2014-05-08T06:36:13.119+0000:We cannot do Class.forName as that does not work with classloading in various containers / OSGi etc.


andrericos:1399527460:2014-05-08T13:37:40.799+0000:1399527460:2014-05-08T13:37:40.799+0000:ok, but at that moment we have only the class name."
0,CAMEL-7417,Bug,Major,2.12.2,,"
None
",Closed,Invalid,None,Unassigned,Oliver Wilkie,0,1,2014-05-06 13:16:07+00:00,2014-05-06 13:26:07+00:00,"When the body to return to the mina2:tcp consumer is org.apache.camel.component.hl7.AckExpression we get the error below


Caused by: java.lang.IllegalArgumentException: The message to encode is not a supported type: org.apache.camel.component.hl7.AckExpression
	at org.apache.camel.component.hl7.HL7MLLPEncoder.encode(HL7MLLPEncoder.java:71)",
0,CAMEL-7416,Test,Major,None,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Akitoshi Yoshida,Colm O hEigeartaigh,0,4,2014-05-06 11:08:48+00:00,2014-05-15 14:52:58+00:00,"The WS-Security testing in the camel-cxf component is a bit of a mess and only covers one use-case. Please apply the attached patch, which covers the main use-cases of Signature + Timestamp, Encryption, UsernameToken and WS-SecurityPolicy.","ay:1400047747:2014-05-14T14:09:07.332+0000:1400047747:2014-05-14T14:09:07.332+0000:Applied Colm's patch.
Thanks.
njiang:1400048447:2014-05-14T14:20:47.417+0000:1400048447:2014-05-14T14:20:47.417+0000:Hi Colm,

I tried to ran camel-cxf unit tests with JDK8 and found there are some errors in  WSSecurityRouteTest.
{code}
  WSSecurityRouteTest.testSecurityPolicy:147 » SOAPFault Error reading XMLStream...
  WSSecurityRouteTest.testEncryption:126 » SOAPFault Error reading XMLStreamRead...
{code}

It looks like the server just send a 0 content-length message back. I'm not sure if you already fix this kind of issue in CXF already.

Regards,

Willem
dkulp:1400081867:2014-05-14T23:37:47.024+0000:1400081867:2014-05-14T23:37:47.024+0000:Willem,

Neither WSS4J or CXF will pass all their tests using JDK8.   Thus, I would definitely not expect ws-security related tests in Camel to pass either.



coheigea:1400136757:2014-05-15T14:52:37.525+0000:1400136778:2014-05-15T14:52:58.422+0000:WSS4J is now passing with JDK 8, as are all of the WS-Security related tests in CXF trunk. The errors in Camel only crop up when encryption is used, no idea why though.

Colm."
0,CAMEL-7415,Bug,Major,"2.12.3, 2.13.0","2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-05-06 06:51:59+00:00,2014-05-24 10:23:34+00:00,"CsvDataFormat csv = new CsvDataFormat() 
csv.setDelimiter(' ') 
csv.setSkipFirstLine(false) 
csv.setLazyLoad(true) 

CamelContext camelContext = new DefaultCamelContext() 
camelContext.addRoutes(new RouteBuilder() { 
def void configure() { 
from('direct:start') 
.unmarshal(csv) 
.split(body()).streaming() 
.log('row: ${body}') 
} 
}) 
camelContext.start() 

ProducerTemplate t = camelContext.createProducerTemplate() 
t.sendBody('direct:start', new File('/Users/timbo/data/test.txt')) 

camelContext.stop() 





Here is the exception when camel try to access the last line of the file.




java.lang.IllegalStateException: java.io.IOException: Stream closed 
at 
org.apache.camel.dataformat.csv.CsvIterator.next(CsvIterator.java:61) 
at 
org.apache.camel.processor.Splitter$SplitterIterable$1.next(Splitter.java:170) 
at 
org.apache.camel.processor.Splitter$SplitterIterable$1.next(Splitter.java:146) 
at 
org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:502)","njiang:1399330735:2014-05-06T06:58:55.343+0000:1399330735:2014-05-06T06:58:55.343+0000:This issue is caused by the UnmarshalProcessor always wants to close the inputstream even the marshalled object is iterator.
The input stream can be closed by the iterator, so leave the input stream if the result object is iterator solve the issue.
antoine.dessaigne:1400888832:2014-05-24T07:47:12.294+0000:1400888832:2014-05-24T07:47:12.294+0000:Hi Willem,

Correct me if I'm wrong but the InputStream won't be closed if the iterator is not processed until the end. This case can happen if you're processing manually the iterator and not rely on split.

For my pull request of CAMEL-7447, I've called exchange.addOnCompletion in order to close the inputstream.

Is it correct ?
njiang:1400895682:2014-05-24T09:41:22.928+0000:1400895682:2014-05-24T09:41:22.928+0000:Hi Antoine 

I think we need to let the user close the iterator or the input stream when he finish the process.

Closing the stream in exchange.onCompletion could cause some trouble if we just route the message to other system which is not part of camel route,  As the exchange onCompletion is called when the route processes the exchange. we may hit the same issue as we meet in CAMEL-7415.

Regards,

Willem
njiang:1400895868:2014-05-24T09:44:28.990+0000:1400895868:2014-05-24T09:44:28.990+0000:Applied the patch into master, camel-2.12.x and camel-2.13.x branches.
antoine.dessaigne:1400898214:2014-05-24T10:23:34.364+0000:1400898214:2014-05-24T10:23:34.364+0000:Hi Willem,

Thanks you very much for sharing your insights.

Antoine"
0,CAMEL-7414,Improvement,Major,None,2.20.0,"
None
",Resolved,Fixed,2.20.0,Jean-Baptiste Onofré,Jean-Baptiste Onofré,0,2,2014-05-05 15:14:24+00:00,2017-08-14 20:12:51+00:00,"Right now, the camel-salesforce component defines its own callback, forcing the object marshalling (using jackson for instance).


It would be great to add an option like ""raw=true"" or to let the user provides its own callback to populate the body of the out message with json or xml (depending of the payload format) raw data.",zregvart:1502712771:2017-08-14T20:12:51.769+0000:1502712771:2017-08-14T20:12:51.769+0000:[~dhirajsb] implemented support for {{rawPayload}} parameter in CAMEL-10743.
0,CAMEL-7413,Improvement,Minor,None,2.19.0,"
None
",Resolved,Fixed,2.19.0,Unassigned,Jean-Baptiste Onofré,0,4,2014-05-05 15:12:16+00:00,2018-03-18 20:30:17+00:00,"Right now, the maven-camel-salesforce-plugin is only able to use the default Salesforce login URL defined in the SalesforceLoginConfig class.
When using test platform, it would be great to be able to provide a ""custom"" login URL.","RickCreation:1407490730:2014-08-08T17:38:50.531+0000:1407490730:2014-08-08T17:38:50.531+0000:I fixed this by making all of the parameters configurable, and updating the documentation.

Here are the new docs.

## Usage ##

The plugin configuration has the following properties.

* camelSalesforce.loginUrl - Salesforce url to use to generate the dtos.  Defaults to https://login.salesforce.com, but https://test.salesforce.com is useful for development environments.
* camelSalesforce.timeOutInMilliseconds - Maximum time to hold the connection open to Salesforce when generating the dtos.  Defaults to 60 seconds, which is usually fine unless you have a big Salesforce schema or slow connection.
* camelSalesforce.clientId - Salesforce client Id for Remote API access
* camelSalesforce.clientSecret - Salesforce client secret for Remote API access
* camelSalesforce.userName - Salesforce account user name
* camelSalesforce.password - Salesforce account password (including secret token)
* camelSalesforce.version - Salesforce Rest API version, defaults to 27.0  NOTE: Currently no version higher than 27.0 will work.
* camelSalesforce.outputDirectory - Directory where to place generated DTOs, defaults to ${project.build.directory}/generated-sources/camel-salesforce
* camelSalesforce.includes - List of SObject types to include
* camelSalesforce.excludes - List of SObject types to exclude
* camelSalesforce.includePattern - Java RegEx for SObject types to include
* camelSalesforce.excludePattern - Java RegEx for SObject types to exclude
* camelSalesforce.packageName - Java package name for generated DTOs, defaults to org.apache.camel.salesforce.dto.

For obvious security reasons it is recommended that the clientId, clientSecret, userName and password fields be not set in the pom.xml. 
The plugin should be configured for the rest of the properties, and can be executed using the following command:

	mvn camel-salesforce:generate -DcamelSalesforce.clientId=<clientid> -DcamelSalesforce.clientSecret=<clientsecret> -DcamelSalesforce.userName=<username> -DcamelSalesforce.password=<password>

The generated DTOs use Jackson and XStream annotations. All Salesforce field types are supported. Date and time fields are mapped to Joda DateTime, and picklist fields are mapped to generated Java Enumerations. 

hemangajmera:1521007821:2018-03-14T14:10:21.916+0000:1521007821:2018-03-14T14:10:21.916+0000:The camelSalesforce.loginUrl is working in version 2.20.2. Should this be resolved?
zregvart:1521376201:2018-03-18T20:30:01.829+0000:1521376201:2018-03-18T20:30:01.829+0000:This was implemented in 2.19."
0,CAMEL-7412,Bug,Minor,2.12.3,2.13.0,"
None
",Resolved,Fixed,2.13.0,Unassigned,Torsten Mielke,0,1,2014-05-05 14:17:35+00:00,2014-05-06 15:12:34+00:00,"The docs at http://camel.apache.org/jdbc.html state 



This component can not be used as a Transactional Client. If you need transaction support in your route, you should use the SQL component instead.


This statement however seems to be wrong. 
I have a demo at https://github.com/tmielke/fuse-demos/tree/master/Camel/Camel-JMS-JDBC-XA-TX that uses the camel-jdbc component in an XA transaction scenario without errors.


Can someone please confirm the docs is wrong and I can correct it in the docs? 


This statement was introduced in 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=27822683","tmielke:1399360106:2014-05-06T15:08:26.687+0000:1399360106:2014-05-06T15:08:26.687+0000:I am going to remove the statement for now. Please let me know if this raises any concerns.
Again, have tested the camel-jdbc component (2.12.0) with XA transactions myself and am confident that it works correctly. 
tmielke:1399360354:2014-05-06T15:12:34.547+0000:1399360354:2014-05-06T15:12:34.547+0000:Fixed in revision 31 of 
https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=64933"
0,CAMEL-7411,Bug,Minor,2.13.0,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Benedikt Waldvogel,0,2,2014-05-05 11:39:53+00:00,2014-05-08 11:21:00+00:00,"The exchange processing in the EventDrivenPollingConsumer can lose exchanges when the internal queue is bounded and full.


The implementation:



public void process(Exchange exchange) throws Exception {
    queue.offer(exchange);
}




The reason is that BlockingQueue.offer(...) is non-blocking and returns a boolean which indicates whether the element was added.
However, the return value is ignored causing the exchange to get lost if it could not be added.


A potential workaround is to use an unbounded BlockingQueue (e.g. LinkedBlockingQueue).","davsclaus:1399334204:2014-05-06T07:56:44.092+0000:1399334204:2014-05-06T07:56:44.092+0000:Thanks for reporting. We now block by default, and there is new options you can use to configure the initial queue size, and whether to block or not.

Documented at
https://cwiki.apache.org/confluence/display/CAMEL/Polling+Consumer
bwaldvogel:1399418604:2014-05-07T07:23:24.051+0000:1399418660:2014-05-07T07:24:20.700+0000:Thanks for fixing this so quickly!

Is it also planned to backport this fix on Camel 2.12?

One nit-picky remark on your [commit f0b8e011|https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=f0b8e011f29772da7d0da92852b8f70d5b31ad80]:
Why do do you use a {{LinkedBlockingDeque}} instead of a {{LinkedBlockingQueue}}?

How do you like the idea to add another option (e.g. {{pollingConsumerBlockTimeout}}) to set a max wait time before it gives up adding an exchange to the internal queue?
davsclaus:1399497168:2014-05-08T05:12:48.522+0000:1399497168:2014-05-08T05:12:48.522+0000:Thanks for spotting the dequeue.

Log another ticket for the timeout idea.
bwaldvogel:1399519260:2014-05-08T11:21:00.007+0000:1399519260:2014-05-08T11:21:00.007+0000:Thanks!

I've created a follow-up ticket: CAMEL-7425."
0,CAMEL-7410,Bug,Major,2.13.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Benjamin Habegger,0,2,2014-05-05 10:57:31+00:00,2014-05-05 13:35:19+00:00,"When switching from version 2.12.3 to 2.13.0 a route using the http4 component in which the httpClient.cookiePolicy and httpClient.soTimeout parameters were set inline won't start generating the following error:


Caused by: 
org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: http4://localhost/?httpClient.cookiePolicy=ignoreCookies&httpClient.soTimeout=10000 due to: There are 2 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{cookiePolicy=ignoreCookies, soTimeout=10000}

]


This route worked as is in 2.12.3. No indication in the document shows how to set these parameters otherwise.","njiang:1399262407:2014-05-05T12:00:07.543+0000:1399262407:2014-05-05T12:00:07.543+0000:camel-http4 is switched to use [HttpClientBuilder|https://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/org/apache/http/impl/client/HttpClientBuilder.html] and [RequestConfig.Builder|https://hc.apache.org/httpcomponents-client-4.3.x/httpclient/apidocs/org/apache/http/client/config/RequestConfig.Builder.html] to setup the client. There are some changes on the httpClient setting just like:
{code}
cookPolicy --> cookieSpec,  soTimeout --> socketTimeout
{code}

I will update the wiki page for these changes.

njiang:1399268119:2014-05-05T13:35:19.503+0000:1399268119:2014-05-05T13:35:19.503+0000:Updated the wiki page of camel-http4 component."
0,CAMEL-7409,Bug,Major,2.13.0,None,"
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Willem Jiang,0,2,2014-05-05 02:24:16+00:00,2014-05-06 15:23:45+00:00,"If there are some thing wrong with the Zip file which is split by ZipIterator, we cannot find any warning or exception from the camel route. We should not let ZipIterator eat up the exception without do anything.","njiang:1399231463:2014-05-05T03:24:23.793+0000:1399231463:2014-05-05T03:24:23.793+0000:Applied the patch into camel master, camel-2.12.x and camel-2.13.x.
cp1:1399277619:2014-05-05T16:13:39.058+0000:1399277752:2014-05-05T16:15:52.546+0000:Willem, have you added corrupted zip file for testing? W/o it all tests passed as expected, but if you add corrupted zip file, tests will fail, w/o any errors:

{code}
testSplitter(org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest)  Time elapsed: 2.186 sec  <<< FAILURE!
java.lang.AssertionError: mock://entry Received message count. Expected: <2> but was: <3>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)
	at org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest.testSplitter(ZipSplitterRouteIssueTest.java:39)

testSplitterWithWrongFile(org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest)  Time elapsed: 11.211 sec  <<< FAILURE!
java.lang.AssertionError: mock://errors Received message count. Expected: <1> but was: <0>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)
	at org.apache.camel.dataformat.zipfile.ZipSplitterRouteIssueTest.testSplitterWithWrongFile(ZipSplitterRouteIssueTest.java:49)
{code}

Steps to reproduce: any file with .zip extension, or corrupted data.zip (in my tests I have removed 1st 2 bytes from data.zip).
njiang:1399332898:2014-05-06T07:34:58.678+0000:1399332898:2014-05-06T07:34:58.678+0000:Hi Serge 

I think just removing the first 2 bytes of the data.zip is not enough, I debugged the code and found out if I did that, camel just cannot read any thing from the zip entry. If I messed up the data.zip file by remove the bytes from multiple place, I can get the same as I test with an empty file stream.
cp1:1399361025:2014-05-06T15:23:45.239+0000:1399361025:2014-05-06T15:23:45.239+0000:Yes, probably ZipInputStream just can't read anything, but ZipFile could detect such corrupted zips.

What about something like in ZipIterator constructor?
{code}
        try {
            final ZipFile zipFile= new ZipFile(inputMessage.getBody(File.class));
            final InputStream inputStream = inputMessage.getBody(InputStream.class);
            if (inputStream instanceof ZipInputStream) {
                zipInputStream = (ZipInputStream)inputStream;
            } else {
                zipInputStream = new ZipInputStream(new BufferedInputStream(inputStream));
            }
        } catch (ZipException e) {
            LOGGER.error(""ZipException"", e);
            zipInputStream= null;
// or            throw new RuntimeException(""ZipException"", e);
        } catch (IOException e) {
            LOGGER.error(""IOException"", e);
            zipInputStream= null;
// or           throw new RuntimeException(""IOException"", e);
        }
{code}"
0,CAMEL-7408,Improvement,Minor,None,,"
None
",Resolved,Abandoned,None,Unassigned,Sergey Beryozkin,0,1,2014-05-02 11:13:53+00:00,2022-09-02 08:50:27+00:00,"CXFRS producer sets Response on the exchange which is not understood by the follow up Camel data reader components.


Proposal: introduce an option called ""unwrapResponse"", it will affect the process as follows:



If it is a CXF WebClient call then we will have Response.readEntity(InputStream.class) set on the exchange.
If it is a CXF proxy call then we will have Response.readEntity(method.getReturnType()) set on the exchange.",
0,CAMEL-7407,Bug,Major,2.13.0,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Claus Ibsen,Nordin Haouari,0,2,2014-05-02 10:00:08+00:00,2014-06-26 20:13:18+00:00,"When an error occurs in the middle of polling (e.g. read timeout on ftp server), all files that have been read up to that point are stored in the inProgressRepospitory (last line GenericFileConsumer.isValidFile()). Due to the error, those files are not passed on to the ftp route, but remain in the inProgressRepository. The effect is that those files are never picked up unless we clear the inProgressRepository somehow (e.g. by restarting). When polling fails, files should not be allowed to remain in the inProgressRepository","davsclaus:1403782204:2014-06-26T19:30:04.485+0000:1403782204:2014-06-26T19:30:04.485+0000:Thanks for reporting. Yeah indeed there is a problem there, if the exception occurs in the pollDirectory method."
0,CAMEL-7406,Bug,Minor,None,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Gregor Zurowski,Gregor Zurowski,0,3,2014-05-02 02:31:48+00:00,2014-05-02 09:45:59+00:00,"Leaving the password empty in a Camel JCR Endpoint URI (e.g. ""jcr://gregor:@repository/home"") leads to NullPointerExceptions. Empty passwords are valid when used with Jackrabbit's SimpleSecurityManager and useful for testing.



Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: jcr://gregor:@repository/home/test due to: null
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:534)
	at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:71)
	at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:190)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:106)
	at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:112)
	at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)
	at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:499)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:212)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:907)
	... 38 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.component.jcr.JcrEndpoint.<init>(JcrEndpoint.java:60)
	at org.apache.camel.component.jcr.JcrComponent.createEndpoint(JcrComponent.java:31)
	at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:123)
	at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:514)
	... 47 more","githubbot:1398969816:2014-05-02T02:43:36.347+0000:1398969816:2014-05-02T02:43:36.347+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/142

    CAMEL-7406: Avoid NPE when password empty in JCR endpoint URI

    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7406

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/142.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #142
    
----
commit 1073c9737e8f2f003966170aca0bdd6751e4396a
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-05-02T02:39:09Z

    CAMEL-7406: Avoid NPE when password empty in JCR endpoint URI
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

davsclaus:1398993510:2014-05-02T09:18:30.602+0000:1398993510:2014-05-02T09:18:30.602+0000:Thanks for the PR
githubbot:1398995159:2014-05-02T09:45:59.430+0000:1398995159:2014-05-02T09:45:59.430+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/142
"
0,CAMEL-7405,Bug,Major,2.13.0,"2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.13.2, 2.14.0",Claus Ibsen,Jeff Eltgroth,0,2,2014-05-01 14:59:27+00:00,2014-06-26 18:22:31+00:00,"I have a bundle using aws-sqs endpoint that works in Karaf 2.3.3 and Camel 2.12.1.  We have to upgrade Karaf 2.3.5 and Camel to 2.13.0 for required improvements, and now my bundle fails to load because of missing classes.  I would be satisfied to know which packages to include in my imports or which feature I may be missing,  I have run the below steps in two versions of Camel.  The bundle works in 2.12.1 and fails in 2.13.0.  Here are the steps for version 2.13.0:


$ mvn archetype:generate -DarchetypeGroupId=org.apache.camel.archetypes -DarchetypeArtifactId=camel-archetype-blueprint -DarchetypeVersion=2.13.0 -DgroupId=com.example.aws -DartifactId=example-aws -Dpackage=com.example.aws -Dversion=2.13.0
$ mvn package
$ mvn camel:run
(verifies archetype runs)


Add dependency to pom.xml
	<dependency>    
	  <groupId>org.apache.camel</groupId>    
	  <artifactId>camel-aws</artifactId>    
	  <version>2.13.0</version>
	</dependency>


Add following to maven-bundle-plugin in pom.xml
    <Import-Package>
      org.apache.http.conn.routing;version=""[4.3.3,5)"",
      *
    </Import-Package>


Change endpoint in blueprint.xml
    <to uri=""aws-sqs://test-queue?accessKey=yourkey&secretKey=yourkey"" />


(need to change or skip test to package)
$ mvn -Dmaven.test.skip=true package
$ mvn camel:run
(above works, so maven is including all classes)


Install Karaf 2.3.5
Set JAVA_HOME to JDK 1.7.0_51
karaf@root> features:chooseurl camel 2.13.0
karaf@root> features:install camel-core
karaf@root> features:install camel-blueprint
karaf@root> features:install camel-aws


Drop bundle into deploy folder and observe the following stack trace in the Karaf console:
karaf@root> ERROR: Bundle example-aws [70] EventDispatcher: Error during dispatch. (java.lang.NoClassDefFoundError: org.apache.http.conn.routing.HttpRoute not found by org.apache.servicemix.bundles.aws-java-sdk [68])
java.lang.NoClassDefFoundError: org.apache.http.conn.routing.HttpRoute not found by org.apache.servicemix.bundles.aws-java-sdk [68]
        at com.amazonaws.http.conn.$Proxy36.<clinit>(Unknown Source)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:526)
        at java.lang.reflect.Proxy.newInstance(Proxy.java:748)
        at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:739)
        at com.amazonaws.http.conn.ClientConnectionManagerFactory.wrap(ClientConnectionManagerFactory.java:42)
        at com.amazonaws.http.impl.client.SdkHttpClient.<init>(SdkHttpClient.java:29)
        at com.amazonaws.http.HttpClientFactory.createHttpClient(HttpClientFactory.java:98)
        at com.amazonaws.http.AmazonHttpClient.<init>(AmazonHttpClient.java:155)
        at com.amazonaws.AmazonWebServiceClient.<init>(AmazonWebServiceClient.java:118)
        at com.amazonaws.AmazonWebServiceClient.<init>(AmazonWebServiceClient.java:102)
        at com.amazonaws.services.sqs.AmazonSQSClient.<init>(AmazonSQSClient.java:166)
        at com.amazonaws.services.sqs.AmazonSQSClient.<init>(AmazonSQSClient.java:147)
        at org.apache.camel.component.aws.sqs.SqsEndpoint.createClient(SqsEndpoint.java:219)
        at org.apache.camel.component.aws.sqs.SqsEndpoint.getClient(SqsEndpoint.java:204)
        at org.apache.camel.component.aws.sqs.SqsEndpoint.doStart(SqsEndpoint.java:81)
        at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)


(remaining stack omitted)","davsclaus:1398983523:2014-05-02T06:32:03.277+0000:1398983523:2014-05-02T06:32:03.277+0000:Yes the aws-sdk bundle is flawed, logged a ticket SMX4-1751.
davsclaus:1398984339:2014-05-02T06:45:39.880+0000:1398984339:2014-05-02T06:45:39.880+0000:If you enabled dynamic import on the aws-sdk bundle you can get it working

dev:dynamic-import <bundleId>

Also install joda-time 2.3, as that is required. And maybe uninstall the older 1.x first.
davsclaus:1398984494:2014-05-02T06:48:14.558+0000:1398984494:2014-05-02T06:48:14.558+0000:karaf@root> features:chooseurl camel 2.13.1-SNAPSHOT
adding feature url mvn:org.apache.camel.karaf/apache-camel/2.13.1-SNAPSHOT/xml/features
karaf@root> features:install camel
karaf@root> features:install camel-aws
karaf@root> list
[  70] [Active     ] [            ] [   50] Apache ServiceMix :: Bundles :: aws-java-sdk (1.7.1.1)
[  71] [Active     ] [            ] [   50] camel-aws (2.13.1.SNAPSHOT)
karaf@root> dynamic-import 70
Enabling dynamic imports on bundle org.apache.servicemix.bundles.aws-java-sdk [70]
karaf@root> install -s mvn:com.example.aws/example-aws/2.13.0
Bundle ID: 72
karaf@root> list
[  72] [Active     ] [Created     ] [       ] [   80] A Camel Blueprint Route (2.13.0)
davsclaus:1398984612:2014-05-02T06:50:12.915+0000:1398984612:2014-05-02T06:50:12.915+0000:Okay we have a workaround until a new aws-sdk bundle is released.
jeltgroth:1399007141:2014-05-02T13:05:41.432+0000:1399007141:2014-05-02T13:05:41.432+0000:Great, I just verified my bundle is functional with that workaround.
davsclaus:1401600843:2014-06-01T13:34:03.242+0000:1401600843:2014-06-01T13:34:03.242+0000:Waiting for new SMX bundle releases which has the fix.
davsclaus:1403778151:2014-06-26T18:22:31.256+0000:1403778151:2014-06-26T18:22:31.256+0000:We have upgraded to 1.7.12_1 bundle"
0,CAMEL-7404,Improvement,Minor,2.13.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Matt Altermatt,0,2,2014-04-29 20:06:05+00:00,2014-05-26 07:58:34+00:00,"When using the ZipAggregationStrategy with the file as the source and recursion on, all of the files would be added to the zip file in the root level.","mattaltermatt:1398773292:2014-04-29T20:08:12.289+0000:1398773292:2014-04-29T20:08:12.289+0000:This patch modifies ZipAggregationStrategy to have a default constructor and another constructor that accepts a boolean flag if the folder preservation should be preserved.  Modified the method to handle the new constructor and included a new unit test.
njiang:1398841454:2014-04-30T15:04:14.159+0000:1398841454:2014-04-30T15:04:14.159+0000:Applied the patch into master branch with thanks to Matt.
I also fixed the unit test issue  and some code formate issue. "
0,CAMEL-7403,Improvement,Minor,2.13.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Christian Ohr,0,3,2014-04-29 14:31:15+00:00,2014-09-05 14:43:42+00:00,"Update camel-hl7 to the current HAPI version, introducing the concept of a HapiContext to bundle all configurations related to HL7 message handling (cf. http://hl7api.sourceforge.net/base/apidocs/ca/uhn/hl7v2/HapiContext.html).","ohr:1398753432:2014-04-29T14:37:12.606+0000:1398757762:2014-04-29T15:49:22.064+0000:I did this in a fork in my github repo, but I forked Camel from git-wip-us.apache.org/repos/asf/camel.git instead of github.com/apache/camel. Oh well.
The patch is backwards-compatible, and it should be possible to backport it to the 2.13 branch as well.
davsclaus:1408920561:2014-08-25T06:49:21.061+0000:1408920561:2014-08-25T06:49:21.061+0000:Thanks Christian.

Do you mind taking a look at the code on master, as the MessageValidatorTest has some failing methods. I added @Ignore for those.
christian.ohr:1409119281:2014-08-27T14:01:21.901+0000:1409119281:2014-08-27T14:01:21.901+0000:I cloned master, removed the @Ignores (and added one test case that had disappeared) and everything works on my side. I attached a patch of MessageValidatorTest. 
Do you mind checking again and let me have details if the tests still fail for you?
davsclaus:1409123607:2014-08-27T15:13:27.662+0000:1409123607:2014-08-27T15:13:27.662+0000:Tests still fail. Doing a mvn clean install on the camel-hl7 module.
Using mvn 3.1.1 on osx with java 7
davsclaus:1409123624:2014-08-27T15:13:44.885+0000:1409123624:2014-08-27T15:13:44.885+0000:{code}
Running org.apache.camel.component.hl7.MessageValidatorTest
Tests run: 7, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 44.631 sec <<< FAILURE! - in org.apache.camel.component.hl7.MessageValidatorTest
testDynamicCustomHapiContext(org.apache.camel.component.hl7.MessageValidatorTest)  Time elapsed: 44.399 sec  <<< ERROR!
java.lang.Exception: Unexpected exception, expected<org.apache.camel.CamelExecutionException> but was<java.lang.AssertionError>
	at org.apache.camel.component.mock.MockEndpoint.fail(MockEndpoint.java:1333)
	at org.apache.camel.component.mock.MockEndpoint.assertEquals(MockEndpoint.java:1315)
	at org.apache.camel.component.mock.MockEndpoint.doAssertIsSatisfied(MockEndpoint.java:383)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:362)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:350)
	at org.apache.camel.component.mock.MockEndpoint.assertIsSatisfied(MockEndpoint.java:188)
	at org.apache.camel.test.junit4.CamelTestSupport.assertMockEndpointsSatisfied(CamelTestSupport.java:675)
	at org.apache.camel.component.hl7.MessageValidatorTest.testDynamicCustomHapiContext(MessageValidatorTest.java:124)
{code}
davsclaus:1409123841:2014-08-27T15:17:21.456+0000:1409123841:2014-08-27T15:17:21.456+0000:Thanks for that missing test. I pushed the code changes to master.
davsclaus:1409124329:2014-08-27T15:25:29.061+0000:1409124329:2014-08-27T15:25:29.061+0000:The logs gets flooded with these WARNs in the logs in that failed test
{code}
2014-08-27 17:20:28,829 WARN  ReportingValidationExceptionHandler - Message with warnings
ca.uhn.hl7v2.validation.ValidationException: Validation failed:  'null' requires to be not empty at PID-8(0)-1-1
        at ca.uhn.hl7v2.validation.impl.RuleSupport.failed(RuleSupport.java:67)
        at ca.uhn.hl7v2.validation.impl.RuleSupport.failedWithValue(RuleSupport.java:58)
        at ca.uhn.hl7v2.validation.builder.PredicateMessageRule.apply(PredicateMessageRule.java:61)
        at ca.uhn.hl7v2.validation.builder.PredicateMessageRule.apply(PredicateMessageRule.java:37)
        at ca.uhn.hl7v2.validation.AbstractValidator.testMessageRules(AbstractValidator.java:98)
        at ca.uhn.hl7v2.validation.AbstractValidator.validate(AbstractValidator.java:82)
        at ca.uhn.hl7v2.parser.Parser.assertMessageValidates(Parser.java:611)
        at ca.uhn.hl7v2.parser.Parser.encode(Parser.java:275)
        at ca.uhn.hl7v2.parser.PipeParser.encode(PipeParser.java:1003)
        at ca.uhn.hl7v2.model.AbstractMessage.encode(AbstractMessage.java:207)
        at org.apache.camel.component.hl7.HL7Converter.toString(HL7Converter.java:41)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:1002)
        at org.apache.camel.impl.converter.StaticMethodTypeConverter.convertTo(StaticMethodTypeConverter.java:59)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:276)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:114)
        at org.apache.camel.util.MessageHelper.extractValueForLogging(MessageHelper.java:300)
        at org.apache.camel.util.MessageHelper.extractValueForLogging(MessageHelper.java:184)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:562)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:131)
        at org.apache.camel.util.MessageHelper.extractValueForLogging(MessageHelper.java:300)
        at org.apache.camel.util.MessageHelper.extractValueForLogging(MessageHelper.java:184)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.createTypeConversionException(BaseTypeConverterRegistry.java:562)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:131)
        at org.apache.camel.util.MessageHelper.extractValueForLogging(MessageHelper.java:300)
        at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:234)
        at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:217)
        at org.apache.camel.util.MessageHelper.extractBodyForLogging(MessageHelper.java:151)
        at org.apache.camel.impl.DefaultMessage.toString(DefaultMessage.java:46)
        at java.lang.String.valueOf(String.java:2854)
        at java.lang.StringBuilder.append(StringBuilder.java:128)
        at org.apache.camel.impl.DefaultExchange.toString(DefaultExchange.java:81)
        at java.lang.String.valueOf(String.java:2854)
        at java.lang.StringBuilder.append(StringBuilder.java:128)
        at org.apache.camel.CamelExchangeException.createExceptionMessage(CamelExchangeException.java:66)
        at org.apache.camel.CamelExchangeException.<init>(CamelExchangeException.java:31)
        at org.apache.camel.ValidationException.<init>(ValidationException.java:31)
        at org.apache.camel.processor.validation.PredicateValidationException.<init>(PredicateValidationException.java:35)
        at org.apache.camel.processor.validation.PredicateValidatingProcessor.process(PredicateValidatingProcessor.java:52)
        at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
        at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
        at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)
        at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
        at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:74)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:375)
        at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:343)
        at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:233)
        at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:343)
        at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
        at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
        at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
        at org.apache.camel.component.hl7.MessageValidatorTest.testDynamicCustomHapiContext(MessageValidatorTest.java:123)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:606)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
        at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:19)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
        at org.junit.rules.RunRules.evaluate(RunRules.java:20)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBoo
{code}
christian.ohr:1409127133:2014-08-27T16:12:13.923+0000:1409127133:2014-08-27T16:12:13.923+0000:Strange things going on here. mvn works for me (same version, just win7), but inside Idea I can reproduce your problem.
In general the assumption for this test must be mock.expectedMessageCount(0);, not (1); but that does not fix it.
Will look into it.
christian.ohr:1409182236:2014-08-28T07:30:36.095+0000:1409182254:2014-08-28T07:30:54.652+0000:MessageValidator2.patch should eventually fix the failing test(s)
davsclaus:1409187887:2014-08-28T09:04:47.470+0000:1409187887:2014-08-28T09:04:47.470+0000:Thanks it works now.
christian.ohr:1409899422:2014-09-05T14:43:42.061+0000:1409899422:2014-09-05T14:43:42.061+0000:Did some editing on https://cwiki.apache.org/confluence/display/CAMEL/HL7"
0,CAMEL-7402,Task,Major,2.14.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Claus Ibsen,0,2,2014-04-29 07:39:44+00:00,2014-09-07 06:33:29+00:00,"seems like the camel-aws has some problems in osgi land. Running the tests/camel-itest-osgi and it fails due some no class found exception.


There is likely other failures we need to address.","davsclaus:1398730333:2014-04-29T08:12:13.476+0000:1398730333:2014-04-29T08:12:13.476+0000:{code}
Failed tests:
  SedaTest.testCamelContextName:62->Assert.assertTrue:52->Assert.assertTrue:41->Assert.fail:86 null

Tests in error:
  AwsS3Test>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsS3Test>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSesTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSesTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSnsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSnsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSqsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  AwsSqsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 » NoClassDefFound
  CamelBlueprint4Test.testRouteWithXSLT:42->AbstractIntegrationTest.getOsgiService:87 » Runtime
  XsltBlueprintRouteTest>CamelTestSupport.setUp:218->doPostSetup:68->AbstractIntegrationTest.getOsgiService:87 » Runtime
  DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  DisruptorVmTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  GroovyTest.testGroovyLanguage:38 » ClassNotFound groovy.lang.Script
  JaxbDataFormatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » JAXB
  GroovyScriptOsgiTest.testLanguage:47 » ClassNotFound groovy.lang.Script

Tests run: 185, Failures: 1, Errors: 30, Skipped: 23
{code}
njiang:1408932560:2014-08-25T10:09:20.242+0000:1408932560:2014-08-25T10:09:20.242+0000:I just ran the karaf OSGi integration tests in the camel master branch, I got these tests errors.
{code}
Tests in error:
  AwsS3Test>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsS3Test>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSdbTest.setUp:48->CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSesTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSesTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSnsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSnsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSqsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument
  AwsSqsTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:247->OSGiIntegrationSpringTestSupport.createCamelContext:33 ? IllegalArgument

Tests run: 171, Failures: 0, Errors: 8, Skipped: 23

{code}
njiang:1408943998:2014-08-25T13:19:58.043+0000:1408944013:2014-08-25T13:20:13.442+0000:The IllegalArgument Exception is caused by SMX4-1813, we need to upgrade the aws sdk bundle version to 1.8.3_2.
"
0,CAMEL-7401,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-04-29 06:11:49+00:00,2014-04-29 08:18:07+00:00,"camel-cxf component use CXF continuation async API by default, we need to  let user set the continuationTimeout option to avoid the suspend option wait forever.",njiang:1398730687:2014-04-29T08:18:07.169+0000:1398730687:2014-04-29T08:18:07.169+0000:Applied the patch into camel master branch and also update the wiki page for it.
0,CAMEL-7400,Bug,Trivial,2.13.0,None,"

documentation

",Resolved,Fixed,2.14.0,Claus Ibsen,Jan-Helge Bergesen,0,2,2014-04-29 06:09:17+00:00,2014-04-29 08:45:12+00:00,"http://camel.apache.org/redis.html :



URIs must apparently start with ""spring-redis"" not ""redis"".","davsclaus:1398732312:2014-04-29T08:45:12.578+0000:1398732312:2014-04-29T08:45:12.578+0000:The page was renamed for redis -> spring-redis and then apache infra has some old cached pages. If you refresh the page, or go to spring-redis then the doc is correct."
0,CAMEL-7399,Bug,Critical,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,1,2014-04-28 22:16:42+00:00,2014-05-02 04:00:46+00:00,"An upgrade to XStream version has broken the alias cache manipulation in XmlRestProcessor. Earlier versions of XStream used to only throw a ClassNotFoundException when CachingMapper.realClass call failed to find a mapped class, but recent versions now add the exception to its cache. This makes it imperative that the cache be flushed when no real class is found. As a result, the cache lookup optimization now only avoids flushing in case the alias mapping hasn't changed, which still works for repeated invocation of the same endpoint which requires using an XML alias for Salesforce's RESTish API.","dhirajsb:1398694898:2014-04-28T22:21:38.046+0000:1398694898:2014-04-28T22:21:38.046+0000:Fixed with commit 4fceb6a18cf57a5694a4d99be395b060e8bf3ea3
dhirajsb:1398974446:2014-05-02T04:00:46.868+0000:1398974446:2014-05-02T04:00:46.868+0000:Fixed with commit 4fceb6a18cf57a5694a4d99be395b060e8bf3ea3,
merged commit in 2.13.x and master for 2.14.0"
0,CAMEL-7398,Bug,Critical,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Dhiraj Sureshkumar Bokde,Dhiraj Sureshkumar Bokde,0,2,2014-04-28 19:30:30+00:00,2014-05-04 08:19:27+00:00,Salesforce added new fields to the login API response. These fields should be added to the LoginToken DTO.,"dhirajsb:1398694856:2014-04-28T22:20:56.761+0000:1398694856:2014-04-28T22:20:56.761+0000:Fixed with commit 34740e78fab12054100e8278f218739107353e4f
davsclaus:1398720151:2014-04-29T05:22:31.697+0000:1398720151:2014-04-29T05:22:31.697+0000:You need to fix this on master *first*, and then cherry-pick the fix to the 2.13.x branch.
dhirajsb:1398974541:2014-05-02T04:02:21.286+0000:1398974577:2014-05-02T04:02:57.298+0000:[~davsclaus] Sorry about that, will remember to follow protocol next time
Should I change it to resolved?
davsclaus:1398979045:2014-05-02T05:17:25.860+0000:1398979045:2014-05-02T05:17:25.860+0000:Yeah its resolved now, as the fix is on all needed branches."
0,CAMEL-7397,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-04-28 03:01:57+00:00,2014-04-28 07:37:29+00:00,camel-example-spring-javaconfig should be deployed into OSGi container out of box.,njiang:1398641849:2014-04-28T07:37:29.296+0000:1398641849:2014-04-28T07:37:29.296+0000:Applied the patch into master branch.
0,CAMEL-7396,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,0,1,2014-04-28 02:49:46+00:00,2014-04-28 07:41:58+00:00,We should provide the defaultMethodName option to help user to reduce the message header setting of xmlrpc.,njiang:1398642118:2014-04-28T07:41:58.091+0000:1398642118:2014-04-28T07:41:58.091+0000:Applied the patch into camel master branch and updated the wik page.
0,CAMEL-7395,Test,Minor,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Sergey Beryozkin,0,2,2014-04-25 10:22:48+00:00,2014-04-25 14:11:22+00:00,"I was working on fixing the regression where CxfRsProducer  was losing the in/out interceptors set from Blueprint/Spring caused by my own patch to support setting interceptors directly on CxfRsEndpoint and my test passed without me fixing CxfRsEndpoint, I checked, CxfRsEndpoint was already fixed 


That said, I'd still  like to provide a test patch with minor modifications to CxfRsProducer to make it simpler to test the underlying JAXRSClientFactoryBean was properly set up. The attached test file can be extended with many more tests making sure no regression can be introduced","njiang:1398398465:2014-04-25T12:01:05.346+0000:1398398465:2014-04-25T12:01:05.346+0000:Hi Sergey 
I tried to apply your patch into camel master branch and found out there is no CxfRsProducerClientFactoryBeanTest.java file.
Can you just submit the modified CxfRsProducerClientFactoryBeanTest.jar to the JIRA?

Regards,

Willem
sergey_beryozkin:1398399668:2014-04-25T12:21:08.080+0000:1398399668:2014-04-25T12:21:08.080+0000:Hi Willem, sorry about it, I think I did 'git add' new files, then I modified them by removing tabs, and 'git diff' produced the patch 'assuming' the test files were already there...
Please find both test resources attached directly

thanks, Sergey
njiang:1398403615:2014-04-25T13:26:55.761+0000:1398403615:2014-04-25T13:26:55.761+0000:Applied the patch into camel master branch with thanks to Sergey. As there are some changes in CxfRsProducer, I don't plan to merge the patch into other camel-2.13.x branch.
sergey_beryozkin:1398406282:2014-04-25T14:11:22.957+0000:1398406282:2014-04-25T14:11:22.957+0000:Sounds good, thanks"
0,CAMEL-7394,Improvement,Major,2.12.3,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-04-25 08:26:32+00:00,2014-04-25 08:29:28+00:00,"This allows to reuse same netty producer for dynamic-to on the same host:port, but using dynamic context-path and query parameters.","davsclaus:1398385768:2014-04-25T08:29:28.637+0000:1398385768:2014-04-25T08:29:28.637+0000:Exchange.HTTP_PATH is now supported too, just like camel-http does"
0,CAMEL-7393,Improvement,Major,2.12.3,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-04-24 14:40:33+00:00,2014-04-24 16:26:17+00:00,"When using recipient list we use a default producer cache with a default size. We should allow end user to configure the size, so they can control that, or even turn it off, in case they use one-time only uris in the recipinent list (so they are not reuse later). Then it does not make sense to cache them anyway.",davsclaus:1398327977:2014-04-24T16:26:17.839+0000:1398327977:2014-04-24T16:26:17.839+0000:There is now a new cacheSize option on recipinent list and routing slip you can use.
0,CAMEL-7392,Bug,Major,2.13.0,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Martin Lichtin,0,2,2014-04-24 14:03:00+00:00,2014-04-26 09:36:31+00:00,"When loading features


	<repository>mvn:org.apache.activemq/activemq-karaf/5.7.0/xml/features</repository>
	<repository>mvn:org.apache.camel.karaf/apache-camel/2.13.0/xml/features</repository>
	<repository>mvn:io.hawt/hawtio-karaf/1.2.3/xml/features</repository>


		<feature>activemq</feature>
		<feature>camel</feature>
		<feature>camel-jms</feature>
		<feature>camel-mvel</feature>
		<feature>camel-groovy</feature>
		<feature>hawtio-core</feature>
		<feature>camel-cache</feature>
		<feature>cxf</feature>
		<feature>camel-cxf</feature>
		<feature>camel-http</feature>
		<feature>camel-http4</feature>
		<feature>camel-servlet</feature>


the following issue occurs:


Error executing command: Could not start bundle mvn:org.apache.camel/camel-servlet/2.13.0 in feature(s) camel-servlet-2.13.0: Uses constraint violation. Unable to resolve bundle revision org.apache.camel.camel-servlet [243.0] because it is exposed to package 'javax.servlet' from bundle revisions org.apache.geronimo.specs.geronimo-servlet_2.5_spec [110.0] and org.apache.geronimo.specs.geronimo-servlet_3.0_spec [238.0] via two dependency chains.


Chain 1:
  org.apache.camel.camel-servlet [243.0]
    import: (&(osgi.wiring.package=javax.servlet)(version>=2.5.0)(!(version>=4.0.0)))










    export: osgi.wiring.package=javax.servlet
  org.apache.geronimo.specs.geronimo-servlet_2.5_spec [110.0]


Chain 2:
  org.apache.camel.camel-servlet [243.0]
    import: (&(osgi.wiring.package=org.apache.camel.component.http)(version>=2.13.0)(!(version>=2.14.0)))










    export: osgi.wiring.package=org.apache.camel.component.http; uses:=javax.servlet
  org.apache.camel.camel-http [239.0]
    import: (&(osgi.wiring.package=javax.servlet)(version>=2.5.0)(!(version>=4.0.0)))










    export: osgi.wiring.package=javax.servlet
  org.apache.geronimo.specs.geronimo-servlet_3.0_spec [238.0]","davsclaus:1398321279:2014-04-24T14:34:39.106+0000:1398321279:2014-04-24T14:34:39.106+0000:ActiveMQ 5.7 does not support Camel 2.13.0
lichtin:1398323165:2014-04-24T15:06:05.957+0000:1398323165:2014-04-24T15:06:05.957+0000:Thanks for the info. Actually we happily run with ActiveMQ 5.7 (client-side only) and Camel 2.13.0.

What seems to be causing the problem here is hawtio.
Camel and the ""camel-servlet"" feature come up fine when I do not load the ""hawtio-core"" feature.
davsclaus:1398323523:2014-04-24T15:12:03.040+0000:1398323523:2014-04-24T15:12:03.040+0000:Try with hawtio 1.3.1
lichtin:1398385210:2014-04-25T08:20:10.403+0000:1398385210:2014-04-25T08:20:10.403+0000:Unfortunately that didn't make a difference.
To reproduce, it's sufficient to first load hawtio-core, then load camel-servlet into a cleanly started Karaf:

karaf@root> features:addurl mvn:io.hawt/hawtio-karaf/1.3.1/xml/features
karaf@root> features:install hawtio
karaf@root> features:install camel-servlet
Error executing command: Could not start bundle mvn:org.apache.camel/camel-servlet/2.13.0 in feature(s) camel-servlet-2.13.0: Uses constraint violation. Unable to resolve bundle revision org.apache.camel.camel-servlet [99.0] 
because it is exposed to package 'javax.servlet' from bundle revisions org.apache.geronimo.specs.geronimo-servlet_2.5_spec [55.0] and org.apache.geronimo.specs.geronimo-servlet_3.0_spec [97.0] via two dependency chains.

Chain 1:
  org.apache.camel.camel-servlet [99.0]
    import: (&(osgi.wiring.package=javax.servlet)(version>=2.5.0)(!(version>=4.0.0)))
     |
    export: osgi.wiring.package=javax.servlet
  org.apache.geronimo.specs.geronimo-servlet_2.5_spec [55.0]

Chain 2:
  org.apache.camel.camel-servlet [99.0]
    import: (&(osgi.wiring.package=org.apache.camel.component.http)(version>=2.13.0)(!(version>=2.14.0)))
     |
    export: osgi.wiring.package=org.apache.camel.component.http; uses:=javax.servlet
  org.apache.camel.camel-http [98.0]
    import: (&(osgi.wiring.package=javax.servlet)(version>=2.5.0)(!(version>=4.0.0)))
     |
    export: osgi.wiring.package=javax.servlet
  org.apache.geronimo.specs.geronimo-servlet_3.0_spec [97.0]
karaf@root> 

davsclaus:1398474320:2014-04-26T09:05:20.273+0000:1398474320:2014-04-26T09:05:20.273+0000:This is not a hawtio problem, but camel-servlet that uses the war/http feature from karaf 2.3.x that exports Servlet 2.5 only. And Camel 2.13.x onwards uses Servlet 3.0. And then we get that osgi problem :(
davsclaus:1398476191:2014-04-26T09:36:31.371+0000:1398476191:2014-04-26T09:36:31.371+0000:Its Karaf 2.3.x that comes with http service out of the box only supporting servlet 2.x. eg pax-web

  org.ops4j.pax.web.pax-web-runtime [75.0]
    import: (&(osgi.wiring.package=javax.servlet.http)(version>=2.3.0)(!(version>=3.0.0)))

This would require pax-web that supports servlet 3.0 onwards. Which may require Karaf 3.0 onwards.
"
0,CAMEL-7391,Bug,Major,2.12.3,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-04-24 13:42:29+00:00,2014-04-24 14:14:24+00:00,"We should use the shared timer, instead of creating a new timer per producer.","davsclaus:1398320042:2014-04-24T14:14:02.255+0000:1398320042:2014-04-24T14:14:02.255+0000:There is an issue in Netty which prevents this.
https://github.com/netty/netty/issues/2424
davsclaus:1398320064:2014-04-24T14:14:24.519+0000:1398320064:2014-04-24T14:14:24.519+0000:So we had to use a private timer per producer as using a shared is not possible."
0,CAMEL-7390,Bug,Minor,2.11.2,,"
None
",Resolved,Won't Fix,None,Claus Ibsen,Nathan Jensen,0,2,2014-04-23 16:28:28+00:00,2014-04-27 08:36:01+00:00,"Some of the Spring ApplicationContext implementations (i.e. AbstractRefreshableApplicationContext) allow you to call setAllowBeanDefinitionOverriding(false) to enforce that beans initialized by spring do not reuse ids.  This can be especially helpful in a pluggable application where different developers may contribute different spring files.


CamelNamespaceHandler.registerTemplates() is helpful and automatically creates a template and consumerTemplate if they're not defined on a camelContext.  Unfortunately, if there are multiple camelContexts, then it creates a template for each camelContext with the id of ""template"", which will then cause an exception IF the spring application context is not allowing bean definition overriding.  An example of the exception:



Caused by: org.springframework.beans.factory.parsing.BeanDefinitionParsingException: Configuration problem: Invalid bean definition with name 'template' defined in null: Cannot register bean definition [Generic bean: class [org.apache.camel.spring.CamelProducerTemplateFactoryBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] for bean 'template': There is already [Generic bean: class [org.apache.camel.spring.CamelProducerTemplateFactoryBean]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null] bound.
Offending resource: class path resource [springfile.xml]
	at org.springframework.beans.factory.parsing.FailFastProblemReporter.error(FailFastProblemReporter.java:68) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:85) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.parsing.ReaderContext.error(ReaderContext.java:72) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:82) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.apache.camel.spring.handler.CamelNamespaceHandler.registerTemplates(CamelNamespaceHandler.java:519) ~[camel-spring-2.11.2.jar:2.11.2]
	at org.apache.camel.spring.handler.CamelNamespaceHandler$CamelContextBeanDefinitionParser.doParse(CamelNamespaceHandler.java:369) ~[camel-spring-2.11.2.jar:2.11.2]
	at org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser.parseInternal(AbstractSingleBeanDefinitionParser.java:85) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.AbstractBeanDefinitionParser.parse(AbstractBeanDefinitionParser.java:59) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1423) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1413) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:184) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:140) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:111) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:243) ~[org.springframework.beans-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127) ~[org.springframework.context-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93) ~[org.springframework.context-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:131) ~[org.springframework.context-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:530) ~[org.springframework.context-3.1.4.RELEASE.jar:3.1.4.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:444) ~[org.springframework.context-3.1.4.RELEASE.jar:3.1.4.RELEASE]




This appears to only be a problem if using multiple camel contexts and setting allowBeanDefinitionOverriding to false.  If you need to enforce the unique bean ids, I suspect a workaround is to define a template with a unique id for each camelContext in the XML, but then you lose the helpful benefit of not having to define that for every context.","ndjensen:1398243092:2014-04-23T16:51:32.429+0000:1398243092:2014-04-23T16:51:32.429+0000:This is related to this spring feature: https://jira.spring.io/browse/SPR-4374
davsclaus:1398558954:2014-04-27T08:35:54.245+0000:1398558954:2014-04-27T08:35:54.245+0000:Yes in those cases you need to explicit set id's of the templates. "
0,CAMEL-7359,Bug,Major,"2.12.3, 2.13.0",None,"
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Alan Foster,0,2,2014-04-11 00:39:49+00:00,2014-04-12 04:26:21+00:00,"The following Simple expression is valid and runs OK - however it may have been appropriate to report an error to the developer.



            <setBody>
                <simple>${bodyAs(java.lang.String) Additional text ignored...}</simple>
            </setBody>




The above seems a somewhat contrived example; However this is a more 'realistic' scenario in which the behaviour is not unexpected -



            <setBody>
                <simple>${bodyAs(java.lang.String).toUpperCase()}</simple>
            </setBody>




The above simple expression will simply set the body to be of type java.lang.String, however will not invoke the subsequent toUpperCase() call - likewise no error is reported to the developer.


Camel has the same issue when using the function of headerAs and mandatoryBodyAs.","njiang:1397177651:2014-04-11T08:54:11.280+0000:1397177730:2014-04-11T08:55:30.485+0000:The right syntax of bodyAs is {code} ${bodyAs(type)} {code}, current code don't check the rest string after bodyAs(type).
I will updated the code to check the rest string and throw the exception if the string is not empty.
njiang:1397191574:2014-04-11T12:46:14.565+0000:1397191574:2014-04-11T12:46:14.565+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.
alanfoster:1397212057:2014-04-11T18:27:37.916+0000:1397212057:2014-04-11T18:27:37.916+0000:Thanks [~njiang] - For what it's worth, this problem is also apparent within the headerAs function -

{code:xml}
            <setBody>
                <simple>${headerAs(""foo"", String).test)}</simple>
            </setBody>
{code}

Should I reopen, or create a different issue for this scenario?
njiang:1397246733:2014-04-12T04:05:33.382+0000:1397246733:2014-04-12T04:05:33.382+0000:Hi Alan,
We need to fix the headerAs function at the same time.
You don't need to create a new JIRA, I can keep fixing the issue by using this JIRA number.

njiang:1397247981:2014-04-12T04:26:21.693+0000:1397247981:2014-04-12T04:26:21.693+0000:Committed the patch to fix headerAs issue into master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7358,Improvement,Minor,None,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Claus Ibsen,0,3,2014-04-10 07:23:42+00:00,2014-04-28 01:17:45+00:00,"So people can configure if the tracer should load the message body from streams or files, or not.


Currently it will load the content into memory as a String.


But we need options to turn this off by default for file / streams. And then people can turn these option on if they really want that


See also
http://camel.465427.n5.nabble.com/Java-heap-space-with-FILE-producer-and-larges-files-tp5749845.html","njiang:1397109980:2014-04-10T14:06:20.428+0000:1397109980:2014-04-10T14:06:20.428+0000:It doesn't make sense to log all the content of a big file,  we can consider to set a default log size to avoid reading all the file content into memory.
njiang:1397771954:2014-04-18T05:59:14.764+0000:1397771954:2014-04-18T05:59:14.764+0000:Current DefaultTraceFormatter already take the inputstream and file object into consideration. Camel don't read the content of the inputstream and file by default. The key of the OutOfMemoryError issue is caused by the DefaultTraceEventMessage construction method call the MessageHelper#extractBodyAsString. 
I will commit a quick fix for it shortly.
Brendi:1398588000:2014-04-27T16:40:00.114+0000:1398588000:2014-04-27T16:40:00.114+0000:You're right.
Method extractBodyAsString return java.lang.OutOfMemoryError with Tracer Interceptor and large files using destination for custom processing and routing.

when the issue will be fixed?
njiang:1398619021:2014-04-28T01:17:01.512+0000:1398619065:2014-04-28T01:17:45.352+0000:It has been fixed for a while. The patch were committed into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7357,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Sergey Beryozkin,0,2,2014-04-09 15:04:18+00:00,2014-04-11 10:44:52+00:00,No Desc,"sergey_beryozkin:1397029959:2014-04-09T15:52:39.396+0000:1397029959:2014-04-09T15:52:39.396+0000:If calling CXF JaxrsUtils.convertFaultToResponse(throwable, currentCxfMessage) returns non-null Response then the exception has been mapped
njiang:1397072000:2014-04-10T03:33:20.088+0000:1397073411:2014-04-10T03:56:51.707+0000:Current CxfRsInvoker just hijack the exception and turn it into WebApplicationException, which disables the CXF default feature of exception mapping. 
I'm working on the patch now.
njiang:1397094729:2014-04-10T09:52:09.338+0000:1397094729:2014-04-10T09:52:09.338+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches.
sergey_beryozkin:1397184292:2014-04-11T10:44:52.296+0000:1397184292:2014-04-11T10:44:52.296+0000:thanks Willem"
0,CAMEL-7356,Bug,Minor,None,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Ray Slater,0,2,2014-04-09 09:18:35+00:00,2014-04-10 07:04:40+00:00,"Just browsing the code and noticed this bug introduced in commit f42b0ce:


String PASSWORD = ""CamelSmppSystemId"";


The junit tests in SmppProducerLazySessionCreationTest repeat the mistake.",davsclaus:1397084680:2014-04-10T07:04:40.096+0000:1397084680:2014-04-10T07:04:40.096+0000:Thanks for reporting and the patch.
0,CAMEL-7355,Task,Minor,None,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-04-09 08:03:28+00:00,2014-04-09 09:06:23+00:00,There is a missing pice of CAMEL-7010,"njiang:1397005583:2014-04-09T09:06:23.380+0000:1397005583:2014-04-09T09:06:23.380+0000:Applied the patch into camel master, camel-2.13.x branches."
0,CAMEL-7354,New Feature,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,James Strachan,2,5,2014-04-09 06:07:30+00:00,2014-08-26 08:41:17+00:00,"All the current HTTP-like endpoints tend to have host/port in the URI and are not that DRY; plus there's no easy way to view the API if the consumer of the REST API is a REST developer (rather than Java/Camel developer).


It'd be nice to make things more DRY to have an easy way to define mappings from restful operations and URI templates to camel routes. 


Exposing camel routes and endpoints as nice clean RESTful APIs is going to get more common (as an alternative to doing things by hand in pure Java with JAX-RS for example). Particularly in the age of BaaS and API Management; its going to be really handy to use Camel as a facade to wrap back end services as clean RESTful APIs.


So it'd be nice to be able to do things like...



from(""rest:get://customers"").to(...);
from(""rest:put://customer/{id}"").to(...);




i.e. define a rest component which can be configured with a HTTP plugin to use (e.g. use netty by default, or be able to reuse the servlet/http engine in tomcat/karaf) along with configuring the host/port if not using the current containers web connector.


Then the remaining URI format is HTTP method (GET/PUT/POST/DELETE/OPTION etc) followed by a URI template. Optional parameters could be to set content type and the like. The Camel DSL can be used to do content based routing and so forth.


It might be even cooler to add a little RestRouteBuilder class which extends RouteBuilder to add extra Java DSL operations....



public class MyRouteBuilder extends RestRouteBuilder {
  protected void configure() {
    get(""/customers"").to(...);
    put(""/customers/{id}"").to(...);
    
    // the above is just a facade over from(""get:/"" + uriTemplate) etc
  }
}




When using URI templates the values (such as 'id' in the examples above) should be exposed as properties so they can be referred to in any expressions and so forth in the camel DSL.


Extra brownie points if by default the REST component also exposed a WADL / Swagger file listing all the RESTful operations defined on the endpoint; so the API can be easily introspected.


Since JSON / XML are going to be the most common stuff; it might be good if the REST endpoint defaulted to using those out of the box if nothing's specified. Or at least if something like this were used in the Java DSL...



public class MyRouteBuilder extends RestRouteBuilder {
  protected void configure() {
    put(""/customers/{id}"", MyDTO.class).to(...);
  }
}




it'd default to unmarshalling/marshalling using jackson / JSON by default (the Binding could be configured on the REST component - or via the DSL on a per endpoint basis; but doing JSON / jackson by default seems the most useful out of the box)","jstrachan:1400462229:2014-05-19T09:17:09.119+0000:1400462229:2014-05-19T09:17:09.119+0000:maybe sparkjava might be a nice Java DSL for exposing camel endpoints over REST APIs?
http://sparkjava.com/

e.g. instead of the hello world sparkjava app:
{code}
import static spark.Spark.*;
...
      get(""/hello"", (req, res) -> ""Hello World"");
{code}
we could do something like...
{code}
import static spark.Spark.*;
import static org.apache.camel.component.spark.*;
...
      get(""/hello"", endpoint(""activemq:cheese""));
{code}


davsclaus:1403836681:2014-06-27T10:38:01.429+0000:1403836681:2014-06-27T10:38:01.429+0000:Okay got a bit working. I started with a traditional Camel component, so you can do
{code}
public class CamelSparkTest extends CamelTestSupport {

    @Test
    public void testSparkGet() throws Exception {
        getMockEndpoint(""mock:foo"").expectedMessageCount(1);

        String out = template.requestBody(""http://0.0.0.0:4567/hello"", null, String.class);
        assertEquals(""Bye World"", out);

        assertMockEndpointsSatisfied();
    }

    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""spark:get:hello"")
                    .to(""mock:foo"")
                    .transform().constant(""Bye World"");
            }
        };
    }
}
{code}

Will work on the DSL later.

Mind that Spark requires Java8 at runtime. And its currently tied to Jetty, so we would need to add our own transport adapter, as Spark should support that too. Though it has a bit singleton/static builder stuff, so maybe we need a bit more work to isolate this better in case ppl run in OSGi with isolated bundles.

davsclaus:1403857607:2014-06-27T16:26:47.218+0000:1403857607:2014-06-27T16:26:47.218+0000:There is now a SparkRouteBuilder that allows to do
{code}
    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new SparkRouteBuilder() {
            @Override
            public void configure() throws Exception {
                post(""hello"")
                    .to(""mock:foo"")
                    .transform().simple(""Bye ${body}"");
            }
        };
    }
{code}

Notice that we use just start a route with the REST verbs such as get/post/trace etc.
davsclaus:1404168165:2014-07-01T06:42:45.900+0000:1404168165:2014-07-01T06:42:45.900+0000:I renamed camel-spark to camel-spark-rest to avoid confusion with Apache Spark project.
The component name is then ""camel-spark"".
davsclaus:1405474896:2014-07-16T09:41:36.984+0000:1405474896:2014-07-16T09:41:36.984+0000:The rest DSL is being aligned with the JAX-RS annotations and verbs
http://docs.oracle.com/javaee/6/tutorial/doc/gilik.html


davsclaus:1405493831:2014-07-16T14:57:11.152+0000:1405493831:2014-07-16T14:57:11.152+0000:The Rest Java DSL can now do
{code}
                rest()
                    .path(""/say/hello"")
                        .get()
                            .to(""mock:hello"")
                            .transform(constant(""Hello World""))
                    .path(""/say/bye"")
                        .get().consumes(""application/json"")
                            .to(""mock:bye"")
                            .transform(constant(""Bye World""))
                        .post()
                            .to(""mock:update"");
{code}

Though I am considering being able to imply the path in the verb, so you do not have to use path(""/foo/bar).get() to setup a get. But maybe just do .get(""foo/bar"") as a shorthand.
davsclaus:1405494052:2014-07-16T15:00:52.509+0000:1405494052:2014-07-16T15:00:52.509+0000:For example we could remove the path and just rely on the verbs
{code}
                rest()
                    .get(""/say/hello"")
                            .to(""mock:hello"")
                            .transform(constant(""Hello World""))
                    .get(""/say/bye"").consumes(""application/json"")
                            .to(""mock:bye"")
                            .transform(constant(""Bye World""))
                   .post(""/say/bye"")
                            .to(""mock:update"");
{code}
davsclaus:1405567456:2014-07-17T11:24:16.350+0000:1405567456:2014-07-17T11:24:16.350+0000:Removed the need for path, and we just do
{code}
                rest(""/say/hello"")
                    .get().to(""direct:hello"");

                rest(""/say/bye"")
                    .get().consumes(""application/json"").to(""direct:bye"")
                    .post().to(""mock:update"");
{code}

And you can also prefix the rest to make it shorter, such as
{code}
                rest(""/say"")
                    .get(""/hello"").to(""direct:hello"")
                    .get(""/bye"").consumes(""application/json"").to(""direct:bye"")
                    .post(""/bye"").to(""mock:update"");
{code}
davsclaus:1405575043:2014-07-17T13:30:43.467+0000:1405575043:2014-07-17T13:30:43.467+0000:Integrated with camel-restlet with not too much trouble

From an unit test this is the code in the Java DSL route builder. 
{code}
                // configure to use restlet on localhost with the given port
                restConfiguration().component(""restlet"").host(""localhost"").port(portNum);

                // use the rest DSL to define the rest services
                rest(""/users/"")
                    .get(""{id}/basic"")
                        .to(""mock:input"")
                        .process(new Processor() {
                            public void process(Exchange exchange) throws Exception {
                                String id = exchange.getIn().getHeader(""id"", String.class);
                                exchange.getOut().setBody(id + "";Donald Duck"");
                            }
                        });
{code}
davsclaus:1405650612:2014-07-18T10:30:12.034+0000:1405650612:2014-07-18T10:30:12.034+0000:The XML DSL is a bit tricker to embed routes, as the best way is to reuse the RouteDefintion, which means there is a need for a <route> tag in the XML.

A sample below how the 2 get servies as a short-hand with a single <to>. Where as the post has an embedded <route>
{code}
    <rest uri=""/say/hello"">
      <get>
        <to uri=""direct:hello""/>
      </get>
    </rest>
    <rest uri=""/say/bye"">
      <get consumes=""application/json"">
        <to uri=""direct:bye""/>
      </get>
      <post>
        <route id=""myCoolRoute"" streamCache=""true"">
          <choice>
            <when>
              <simple>${body} contains 'Camel'</simple>
              <to uri=""jms:camel""/>
            </when>
            <otherwise>
              <to uri=""jms:other""/>
            </otherwise>
          </choice>
          <transform>
            <constant>OK</constant>
          </transform>
        </route>
      </post>
    </rest>
{code}

The XML XSD schema allows you to chose either one of them, either a <to> or a <route>. 
davsclaus:1405650703:2014-07-18T10:31:43.542+0000:1405650703:2014-07-18T10:31:43.542+0000:If we do this, we could then allow end users to decide if a REST service should be a Camel route or not. If they do not use <route> then there is no route, and its just a consumer -> to without a route. But if they want it to be a route, then add the <route> tag.
davsclaus:1405810691:2014-07-20T06:58:11.465+0000:1405810691:2014-07-20T06:58:11.465+0000:Okay went for the model which allows to define either a shorthand singular <to> or an embedded <route>. The latter allows to define all the routing options such as route id, autoStartup, etc. And the former is just for use-cases where all you need to send to an endpoint, or another route etc.

The Java DSL reflects this as you need to do a

{code}
 rest(""/users/"")
    .get(""{id}/basic"")
        .route()
            .choice().
           // embedded route here
     .endRest() // end route and go back to build another rest
    .get(""{id}/extended"")
         ...
{code}
davsclaus:1405902358:2014-07-21T08:25:58.884+0000:1405902358:2014-07-21T08:25:58.884+0000:Documentation in the works at
https://cwiki.apache.org/confluence/display/CAMEL/Rest+DSL
davsclaus:1406686238:2014-07-30T10:10:38.465+0000:1406686238:2014-07-30T10:10:38.465+0000:You can now also externalize the rests like the routes

davsclaus:1406686386:2014-07-30T10:13:06.858+0000:1406686386:2014-07-30T10:13:06.858+0000:In the Java RouteBuilder we could imply rest, and allow people to define get/post asap,

{code}
public void configure() {
   get(""/hello"")
      .route().transform(constant(""Hello World""));
{code}

Today you would need to specify rest first
{code}
public void configure() {
   rest().get(""/hello"")
      .route().transform(constant(""Hello World""));
{code}

davsclaus:1409013677:2014-08-26T08:41:17.074+0000:1409013677:2014-08-26T08:41:17.074+0000:We got the bulk of this done, improvements logged as sub tasks for next release."
0,CAMEL-7353,Bug,Major,"2.11.4, 2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Andreas Würl,0,2,2014-04-08 21:13:04+00:00,2014-04-09 09:05:49+00:00,"Trying to configure an endpoint like



http4://http.org




where the hostname starts with the characters ""http"" leads to an URISyntaxException ""Expected scheme-specific part at index http4:""


This behaviour is caused by the following lines in camel-http4's HttpComponent (around line 211):



        // need to set scheme on address uri depending on if its secure or not
        String addressUri = remaining.startsWith(""http"") ? remaining : null;




In our case, the hostname is not prefixed with http:// or https:// which leads to the mentioned exception.


The code in question was introduced within CAMEL-6880. I'm not shure why the variable remaining is checked for a protocol prefix as it already comes without one. Setting



        String addressUri == null;




would solve the problem and does not break any test.","njiang:1397005549:2014-04-09T09:05:49.589+0000:1397005549:2014-04-09T09:05:49.589+0000:Applied patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Andreas. "
0,CAMEL-7352,New Feature,Major,None,,"
None
",Closed,Invalid,None,Unassigned,Bryce Alcock,0,2,2014-04-08 19:45:33+00:00,2014-04-09 05:52:47+00:00,"Camel does not work with Hadoop 2:


See:
http://stackoverflow.com/a/19726096/214718


How can I help fix this?","davsclaus:1396993960:2014-04-09T05:52:40.333+0000:1396993960:2014-04-09T05:52:40.333+0000:There is a new camel-hdfs2 component in Camel 2.13 that works with Hadoop 2.x.

And next time please read this page how to ask for questions / help.
http://camel.apache.org/support"
0,CAMEL-7351,Bug,Minor,2.12.2,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Richard O'Sullivan,0,3,2014-04-08 14:06:00+00:00,2014-05-29 03:29:09+00:00,"Using Trace mode in Hawtio throws NPE when route uses <onException> to handle a business exception. Trace mode is successful (no NPE) when the route does not throw a business exception (i.e. route is successful).


I suspect that the value of routeDefinition in BacklogTracerAdvice is null when <onException> handles an exception.


CamelInternalProcessor$BacklogTracerAdvice
public BacklogTracerAdvice
(
    Queue<DefaultBacklogTracerEventMessage> queue, 
    BacklogTracer backlogTracer,
    ProcessorDefinition<?> processorDefinition, 
    ProcessorDefinition<?> routeDefinition, 
    boolean first
)





org.apache.camel.processor.CamelInternalProcessor
522		String routeId = routeDefinition.getId();





2014-04-08 09:15:24,036 ERROR {qtp1100200721-83}    [o.a.c.p.FatalFallbackErrorHandler]  \--> New exception on exchangeId: ID-RICHAOSU-ULX1310-54949-1396894883751-56-12
java.lang.NullPointerException
    at o.a.c.p.CamelInternalProcessor$BacklogTracerAdvice.before(CamelInternalProcessor.java:522)
    at o.a.c.p.CamelInternalProcessor.process(CamelInternalProcessor.java:139)
    at o.a.c.p.FatalFallbackErrorHandler.process(FatalFallbackErrorHandler.java:42)
    at o.a.c.p.RedeliveryErrorHandler.deliverToFailureProcessor(RedeliveryErrorHandler.java:839)
    at o.a.c.p.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:337)
    at o.a.c.p.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at o.a.c.p.Pipeline.process(Pipeline.java:118)
    at o.a.c.p.Pipeline.process(Pipeline.java:80)
    at o.a.c.p.ChoiceProcessor.process(ChoiceProcessor.java:111)
...","davsclaus:1397086380:2014-04-10T07:33:00.421+0000:1397086380:2014-04-10T07:33:00.421+0000:Thanks for reporting.
niels.bertram:1401305349:2014-05-29T03:29:09.933+0000:1401305349:2014-05-29T03:29:09.933+0000:It also throws that exception when one configures a route with any of the interceptors, e.g.:

{code:java}
interceptFrom(""direct:start"")
  .process(new SomeProcessor());

from(""direct:start"")
  .routeId(""some-route"")
  .transacted(""PROPAGATION_REQUIRED"")
  .to(""log:me"")
{code}"
0,CAMEL-7350,Improvement,Minor,"2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","

performance

",Resolved,Duplicate,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Sebastian Bösl,1,3,2014-04-07 11:34:59+00:00,2014-04-15 03:18:27+00:00,"Currently the createMarshaller and createUnmarshaller methods parse the javax.xml.validation.Schema from scratch, which is a severe overhead considering that a Schema instance is threadsafe and it is  encuraged to re-use it as much as possible 
(see http://xerces.apache.org/xerces2-j/javadocs/api/javax/xml/validation/Schema.html) 


I extended the DataFormat and cached the parsed Schema and did a small benchmark that parsed an input document 64000 times:
JaxbDataFormat: 3:18
AltJaxbDataFormat: 0:35",sbo13:1396841784:2014-04-07T11:36:24.684+0000:1396841784:2014-04-07T11:36:24.684+0000:My extension of JaxbDataformat
0,CAMEL-7349,Improvement,Minor,"2.12.3, 2.13.0",,"
None
",Resolved,Duplicate,None,Willem Jiang,Sebastian Bösl,0,2,2014-04-07 11:34:02+00:00,2014-04-10 07:10:33+00:00,"Currently the createMarshaller and createUnmarshaller methods parse the javax.xml.validation.Schema from scratch, which is a severe overhead considering that a Schema instance is threadsafe and it is  encuraged to re-use it as much as possible 
(see http://xerces.apache.org/xerces2-j/javadocs/api/javax/xml/validation/Schema.html) 


I extended the DataFormat and cached the parsed Schema and did a small benchmark:
JaxbDataFormat: 3:18
AltJaxbDataFormat: 0:35",
0,CAMEL-7348,Improvement,Major,None,None,"
None
",Closed,Not A Problem,None,Unassigned,Richard Groote,0,2,2014-04-07 09:45:49+00:00,2014-04-07 11:29:47+00:00,"Following pseudo camel route gives a ""end of file"" exception when the bean call uses a javax.xml.transform.Source. The XPATH reads the body and applies the xpath. After the xpath call the source has been read and therefore the xslt will fail with the end of file exception.


Is it not possible that the xpath resets of makes a copy of the source. Current alternative is use the convertBody(String) after the bean call


<camel:to uri=""bean:someBean"" />
<camel:choice>
	<camel:when>
		<camel:xpath>//xpath</camel:xpath>
		<camel:to uri=""xslt:some.xslt"" />
	</camel:when>	
</camel:choice>","r.groote@beinformed.com:1396835475:2014-04-07T09:51:15.593+0000:1396835475:2014-04-07T09:51:15.593+0000:May be reset the input stream in org.apache.camel.converter.jaxp.XmlConverter.toDOMSourceFromStream(StreamSource)
davsclaus:1396835747:2014-04-07T09:55:47.827+0000:1396835747:2014-04-07T09:55:47.827+0000:See
http://camel.apache.org/stream-caching
r.groote@beinformed.com:1396841299:2014-04-07T11:28:19.099+0000:1396841299:2014-04-07T11:28:19.099+0000:Thanx, issue can be closed"
0,CAMEL-7347,Bug,Minor,"2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-04-07 09:01:12+00:00,2014-04-07 09:15:20+00:00,We should return 404 instead as the service is there but the resource requested was not found.,
0,CAMEL-7346,Improvement,Minor,None,None,"
None
",Closed,Fixed,2.14.0,Gregor Zurowski,Gregor Zurowski,0,2,2014-04-06 21:15:46+00:00,2014-04-24 01:45:38+00:00,"This is a follow-up ticket for CAMEL-7326 and is supposed to further clean up Maven pom.xml files. Currently there are ~100 warnings after Camel is imported into Eclipse. This ticket requests to reduce the number of warning by fixing Maven problems such as duplicate group definitions, redundant version specification, etc.","githubbot:1396808083:2014-04-07T02:14:43.580+0000:1396808083:2014-04-07T02:14:43.580+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/130

    CAMEL-7346: Clean-Up Maven Project Definitions

    Reduce redundancies in Maven pom.xml files:
    - Remove redundant groupId definition
    - Remove redundant version specification
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7346

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/130.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #130
    
----
commit 29dee17af39cf335f9c067e8d0280424ffb848b5
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-04-06T21:26:39Z

    CAMEL-7346: Remove redundant groupId definition
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit bdf3021d0b9c19110088c93f9ad7b41d273930c0
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-04-06T22:39:51Z

    CAMEL-7346: Remove redundant version specification
    
    Remove redundant version specification from dependencies that are
    already defined with the exact same version by their parents.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

githubbot:1396824399:2014-04-07T06:46:39.396+0000:1396824399:2014-04-07T06:46:39.396+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/130
"
0,CAMEL-7345,Improvement,Major,None,2.21.0,"
None
",Resolved,Fixed,2.21.0,Claus Ibsen,Claus Ibsen,0,2,2014-04-06 09:19:46+00:00,2018-01-05 09:23:12+00:00,"This improves using file/ftp with pollEnrich and consumer template if we do implement PollingConsumer and do not need to use the scheduled consumer to do a poll and grab the returned exchange. 


Then we can avoid the scheduler, and also fail if the consumer cannot connect etc.


See nabble
http://camel.465427.n5.nabble.com/Exception-not-thrown-while-doing-sftp-inside-consumer-receive-tp5749793.html","davsclaus:1408918701:2014-08-25T06:18:21.070+0000:1408918701:2014-08-25T06:18:21.070+0000:This is a bit more tricky to implemented. I had an initial stab that caused a side effect. Will have to revisit this in the future.
davsclaus:1515115392:2018-01-05T09:23:12.862+0000:1515115392:2018-01-05T09:23:12.862+0000:I implemented this recently"
0,CAMEL-7344,Bug,Major,"2.11.4, 2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2014-04-04 22:06:36+00:00,2014-04-07 13:12:51+00:00,"CAMEL-6130 seems to have introduced this issue or more precisely speaking, it has made this issue visible.


DefaultEndpoint's toString() method seems to require its endpoint string value to be set. If it's not set, the toString method throws an exception. A fully built endpoint always has its endpoint string value set, thus there is no issue. However, an endpoint being manually set up may not have its endpoint string value set from the beginning (e.g., when its super class uses the DefaultEndpoint's default constructor to instantiate using a bean based instantiation).


The debug log statement introduced in CAMEL-6130 invokes this toString method during the endpoint setup.


That means, a spring based CXF endpoint may result in the following exception under the debug mode.


SLF4J: Failed toString() invocation on an object of type [org.apache.camel.component.cxf.CxfSpringEndpoint]
java.lang.IllegalArgumentException: endpointUri is not specified and org.apache.camel.component.cxf.CxfSpringEndpoint does not implement createEndpointUri() to create a default value
at org.apache.camel.impl.DefaultEndpoint.getEndpointUri(DefaultEndpoint.java:154)
at org.apache.camel.impl.DefaultEndpoint.toString(DefaultEndpoint.java:139)
at org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:304)
at org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:276)
at org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:230)
at org.slf4j.impl.Log4jLoggerAdapter.debug(Log4jLoggerAdapter.java:271)
at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:528)
at org.apache.camel.util.IntrospectionSupport.setProperty(IntrospectionSupport.java:570)
at org.apache.camel.util.IntrospectionSupport.setProperties(IntrospectionSupport.java:454)
at org.apache.camel.util.EndpointHelper.setProperties(EndpointHelper.java:249)
at org.apache.camel.component.cxf.CxfEndpoint.setCamelContext(CxfEndpoint.java:840)


I  wonder whether we really need DefaultEndpoint's getEndpointUri() to throw an exception when it's endpoint string value is not set. But if we keep this rule, we must catch the exception in its toString() method so that we won't throw the above exception when the toString() method is called during the endpoint setup


I would propose to add the exception catching in the toString method. If we decide to change the getEndpointUri() method to not throw the exception (that change will likely require the NPE check at the users of this method), we can make that change and remove the exception catch from the toString method


This issue affects camel 2.11.0 and later versions.",
0,CAMEL-7343,Bug,Major,2.13.0,None,"
None
",Resolved,Fixed,None,Christian Schneider,Xilai Dai,0,2,2014-04-04 07:28:32+00:00,2014-04-04 08:29:41+00:00,"Gson is also a dependency of camel-splunk component, but it is missing in the camel-splunk feature definition.


<bundle dependency='true'>mvn:com.google.code.gson/gson/${gson-version}</bundle>


should be added into the camel-splunk feature.",cschneider:1396571372:2014-04-04T08:29:32.284+0000:1396571381:2014-04-04T08:29:41.166+0000:Applied the patch and checked that the bundle can be resolved. Looks good.
0,CAMEL-7342,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Ray Slater,0,3,2014-04-03 09:15:34+00:00,2015-04-10 15:35:20+00:00,"If a SMPP consumer route is configured but the the initial connection attempt fails (eg if the SMSC is not accessible), then the route fails (java.io.IOException: Connection refused) and the camel context shuts everything down.


For SMPP producers there is a ""lazySessionCreation"" flag which allows the route to be created and go into a reconnection attempt cycle until the SMSC is available.


Please implement this flag for the consumer.


See discussion from last year here: http://camel.465427.n5.nabble.com/Route-failure-on-startup-for-SMPP-consumer-if-SMSC-down-td5730666.html","njiang:1428297984:2015-04-06T13:26:24.069+0000:1428297984:2015-04-06T13:26:24.069+0000:I just went through the discussion of the mailing list, I agree with Christian Mueller, we should not implement the ""lazySessionCreation"" flag for the SMPP consumer.

For the SMPP consumer, it need to be connect to the server before the consumer is started, otherwise camel don't have chance to start the consumer again. The work around could be set the route autoStart option to be false if you don't want the SMPP consumer connect to the SMSC when the camel route is loaded, then you can start the camel by calling the route start when the time is ready.

rayslater:1428651320:2015-04-10T15:35:20.912+0000:1428651320:2015-04-10T15:35:20.912+0000:Having looked at this issue afresh I wonder if my description of implementing the ""lazySessionCreation"" flag is a cause of confusion and reluctance to add this feature. On re-reading, I realise that this description of what is required is misleading - of course you always want the consumer to attempt to connect upon start of the route, however if the bind to the SMSC fails for whatever reason, I need it to enter into a reconnection attempt cycle until the SMSC is available rather than stopping the route (and any others in the same camel context).

Anyway, this is a requirement for me, and so I have implemented the functionality change for myself as a branch from 2.15.1.
It is configured using a new option ""startConsumerIfDown"". If this is set to true, then a reconnect thread is started instead of trying once only to create the session.
The major change here is the removal of the wait for the thread completion in the reconnect method (to allow doStart to complete), and movement of the reconnectLock mutex.

https://github.com/RaySlater/camel/tree/CAMEL-7342"
0,CAMEL-7341,Bug,Major,"2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Stephan Schuster,0,2,2014-04-03 07:11:37+00:00,2014-04-04 04:16:07+00:00,"A CXF InInterceptor added to the rsServer via Spring is not added to the interceptor chain and therefore is not executed.



<cxf:rsServer id=""service"" address=""/exampleService""
              serviceClass=""com.example.service.ExampleService""
              loggingFeatureEnabled=""true""
              xmlns:cxf=""http://camel.apache.org/schema/cxf"">
    <cxf:providers>
        <bean class=""com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider""/>
    </cxf:providers>
    <cxf:inInterceptors>
        <bean class=""com.example.service.ExampleInInterceptor""/>
    </cxf:inInterceptors>
</cxf:rsServer>





public class ExampleInInterceptor extends AbstractPhaseInterceptor<Message> {
    public ExampleInInterceptor() {
        super(Phase.RECEIVE);
    }

    @Override
    public void handleMessage(Message message) throws Fault {
        ...
    }
}




The same configuration works with Camel Version 2.12.2.","s.schuster:1396480466:2014-04-03T07:14:26.076+0000:1396480466:2014-04-03T07:14:26.076+0000:Could be related to CAMEL-7207
njiang:1396553477:2014-04-04T03:31:17.326+0000:1396553477:2014-04-04T03:31:17.326+0000:Yeah, this regression is caused by CAMEL-7207, I just did a quick fix for it.
njiang:1396556167:2014-04-04T04:16:07.549+0000:1396556167:2014-04-04T04:16:07.549+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7340,Improvement,Major,2.10.4,,"
None
",Resolved,Later,None,Unassigned,Willem Jiang,0,2,2014-04-03 03:30:19+00:00,2015-07-09 12:12:33+00:00,"Current camel property component doesn't support to load the nested properties, we got a complain in stackoverflow","davsclaus:1406076467:2014-07-23T08:47:47.277+0000:1406076467:2014-07-23T08:47:47.277+0000:That is an old Camel version. Try with latest code.
davsclaus:1436415152:2015-07-09T12:12:32.996+0000:1436415152:2015-07-09T12:12:32.996+0000:Try with latest and report back"
0,CAMEL-7339,Improvement,Major,2.13.0,Future,"
None
",Resolved,Incomplete,Future,Unassigned,Ioannis Polyzos,1,3,2014-04-02 21:35:56+00:00,2016-03-23 09:05:32+00:00,There is cases that need to transfer the whole exchange through kafka.  I would like to share a patch for camel-kafka that support transfer exchange along with some more minor improvements such as more flexible configuration and default values preset.,"davsclaus:1396479268:2014-04-03T06:54:28.039+0000:1396479268:2014-04-03T06:54:28.039+0000:At first glance this patch seem to big and changes too much,

We have some transferExchange logic from camel-core to serialize/de-serialize an exchange which we use for the components that support transferExchange option. 

The patch should reuse that logic. It's this class
org.apache.camel.impl.DefaultExchangeHolder

And you can find an examples used in these components
./camel-hawtdb/src/main/java/org/apache/camel/component/hawtdb/HawtDBCamelCodec.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaConsumer.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-hazelcast/src/main/java/org/apache/camel/component/hazelcast/seda/HazelcastSedaProducer.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-jms/src/main/java/org/apache/camel/component/jms/JmsBinding.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-leveldb/src/main/java/org/apache/camel/component/leveldb/LevelDBCamelCodec.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-mina/src/main/java/org/apache/camel/component/mina/MinaPayloadHelper.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-mina2/src/main/java/org/apache/camel/component/mina2/Mina2PayloadHelper.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-netty/src/main/java/org/apache/camel/component/netty/NettyPayloadHelper.java:import org.apache.camel.impl.DefaultExchangeHolder;
./camel-sql/src/main/java/org/apache/camel/processor/aggregate/jdbc/JdbcCamelCodec.java:import org.apache.camel.impl.DefaultExchangeHolder;


Maybe you can work on a patch that uses the current code base as-is, and adds support for transferExchange using the logic from camel-core.
ipolyzos:1396485493:2014-04-03T08:38:13.425+0000:1396486405:2014-04-03T08:53:25.155+0000:The component already uses the DefaultExchangeHolder.  This can be traced in the serializeExchange method in the KafkaComponentUtil class.

The major change is that is not used in the form:
   kafka:<servers>?zkConnect=<zookeeper>&topic=<topic>

But it is in the form:
  kafka:<topic>?metadataBrokerList=<servers>& zkConnect=<zookeeper>

And this due i believe topic would serve better as the identifier of the component instance.
davsclaus:1396565502:2014-04-04T06:51:42.126+0000:1396565502:2014-04-04T06:51:42.126+0000:We cannot accept a patch that uses a SNAPSHOT dependency
<kafka_2.10-version>0.8.0_1-SNAPSHOT</kafka_2.10-version>
davsclaus:1396565582:2014-04-04T06:53:02.315+0000:1396565582:2014-04-04T06:53:02.315+0000:And why do you have hadoop imports?
ipolyzos:1396577865:2014-04-04T10:17:45.474+0000:1396577927:2014-04-04T10:18:47.253+0000: Thanks for your kind feedback.

  I have gone through and removed hadoop import _(probably has been added by mistake)_ and used the released version of servicemix bundle for kafka instead of SNAPSHOT. Finally I have gone through some minor cleanup  and removed any unused dependencies. 

 A new patch has been uploaded with the changes.

cheers,
davsclaus:1408930823:2014-08-25T09:40:23.407+0000:1408930823:2014-08-25T09:40:23.407+0000:The patch cannot be applied as there is many conflicts and whatnot. 
Please redo the patch, and make it applicable to the latest code on master.
davsclaus:1408930850:2014-08-25T09:40:50.969+0000:1408930850:2014-08-25T09:40:50.969+0000:And please avoid too many unnessarary code changes, but only change code when its needed.


ipolyzos:1409064171:2014-08-26T22:42:51.247+0000:1409064171:2014-08-26T22:42:51.247+0000:OK, I will proceed with the changes
davsclaus:1417608497:2014-12-03T20:08:17.337+0000:1417608497:2014-12-03T20:08:17.337+0000:Any update on this?
davsclaus:1426891911:2015-03-21T06:51:51.743+0000:1426891911:2015-03-21T06:51:51.743+0000:Any update on this?
davsclaus:1451463027:2015-12-30T16:10:27.004+0000:1451463027:2015-12-30T16:10:27.004+0000:Do you want to work on a new patch for the transfer exchange part only? If not then please close this ticket.
davsclaus:1458695132:2016-03-23T09:05:32.330+0000:1458695132:2016-03-23T09:05:32.330+0000:The camel-kafka module has changed to use the java library so the code has changed a lot since."
0,CAMEL-7338,Bug,Major,2.10.4,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Joe Luo,0,2,2014-04-02 16:14:36+00:00,2014-04-15 03:21:11+00:00,"I have a following camel route:



String destination = ""cxf:http://localhost:9090/test?dataFormat=MESSAGE"";

    from(""jms:queue:dslSource"")
        .onException(java.net.ConnectException.class, Exception.class)
            .maximumRedeliveries(3)
            .maximumRedeliveryDelay(3000)
            .retryAttemptedLogLevel(LoggingLevel.INFO)
            .log(LoggingLevel.WARN, ""Failed to send message ${body}"") 
            .log(LoggingLevel.WARN, ""Sending message to the error queue: ${body}"")          // body is null here
            .to(""jms:queue:dslError"")
            .end()
        .log(LoggingLevel.INFO, ""Sending message ..."")
        .setHeader(""bridgeDestination"", constant(destination))
        .to(destination)
        .log(LoggingLevel.INFO, ""received back: ${body}"")
        .routeId(""example-dsl"");




If an exception is thrown, for instance, a ConnectionException due to unavailability of the backend web service, the onException() route will be executed. The first log endpoint:



.log(LoggingLevel.WARN, ""Failed to send message ${body}"") 




prints out camel exchange IN message body without any problem. However, the second log endpoint:



.log(LoggingLevel.WARN, ""Sending message to the error queue: ${body}"")




only prints out a ""null"".


The reason is that when an exception is thrown, the CxfClientCallback.handleException() is called:



public void handleException(Map<String, Object> ctx, Throwable ex) {
    ....
        if (!boi.getOperationInfo().isOneWay()) {
            // copy the InMessage header to OutMessage header                 
            camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());
            binding.populateExchangeFromCxfResponse(camelExchange, cxfExchange, ctx);
            camelAsyncCallback.done(false);
        }
...




and this line always populates camel exchange OUT message regardless whether there is a CXF response back or not:



camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders());




Therefore, the second log endpoint within onException() block has it's camel exchange IN message been overwritten and replaced with OUT message from previous endpoint's although it is a message of NULL body.","njiang:1396463651:2014-04-03T02:34:11.570+0000:1396463651:2014-04-03T02:34:11.570+0000:Hi Joe,

Thanks for you patch. You are right, we should not copy the header so aggressively. 
I will commit the path after running some tests to verify the patch.

Regards,

Willem
njiang:1397503271:2014-04-15T03:21:11.428+0000:1397503271:2014-04-15T03:21:11.428+0000:Applied patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Joe."
0,CAMEL-7337,Bug,Major,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Willem Jiang,Franz Forsthofer,0,2,2014-04-02 05:29:22+00:00,2014-04-02 11:05:47+00:00,The PGPDataFormat does not close some streams during unmarshaling.,njiang:1396407915:2014-04-02T11:05:15.279+0000:1396407915:2014-04-02T11:05:15.279+0000:Applied patch into camel master and camel-2.13.x with thanks to Franz.
0,CAMEL-7336,Bug,Minor,2.13.0,None,"
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Willem Jiang,0,1,2014-04-01 06:39:38+00:00,2014-04-01 06:55:55+00:00,No Desc,"njiang:1396306555:2014-04-01T06:55:55.777+0000:1396306555:2014-04-01T06:55:55.777+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7335,Improvement,Major,2.13.0,"2.13.1, 2.14.0","

patch

",Resolved,Fixed,"2.13.1, 2.14.0",Willem Jiang,Fabien Chaillou,0,2,2014-03-31 21:29:20+00:00,2014-04-15 03:17:45+00:00,"Hello,
Kafka provides a lot of property configurable for both consumer and producer (See http://kafka.apache.org/documentation.html#consumerconfigs and http://kafka.apache.org/documentation.html#producerconfigs).
With this change, all this properties are exposed to the camel component.
To do that, i splitted the configuration in its own class so that it is possible to create a separated configuration that can be reused.


See the pull request on github : https://github.com/apache/camel/pull/126","njiang:1396313131:2014-04-01T08:45:31.095+0000:1396313131:2014-04-01T08:45:31.095+0000:Applied the patch into camel master and camel-2.13.x branches with thanks to Fabien.
fchaillou:1396333146:2014-04-01T14:19:06.051+0000:1396333146:2014-04-01T14:19:06.051+0000:Great , thank you for your quick response !
Have a nice day"
0,CAMEL-7334,Improvement,Major,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-30 10:05:46+00:00,2014-03-30 11:50:57+00:00,"We have notifications for route started|stopped, but we do not have for added|removed.


We should add that as it allows users to react to these events as well.",
0,CAMEL-7333,New Feature,Major,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-28 19:36:22+00:00,2014-03-28 19:43:28+00:00,"To allow more insight of runtime behavior of routes in Camel. 


We have statics information about the routes from their model. But the runtime charactistica of routing messages throught dynamic EIPs such as recipient list is not captured.


We should introduce a runtime registry to capture such details. We can start with mapping which routes are using which endpoints. 


And expose that over JMX, which allows better insight.",
0,CAMEL-7332,Improvement,Major,2.12.3,Future,"
None
",Resolved,Won't Fix,Future,Willem Jiang,Claus Ibsen,0,2,2014-03-28 13:03:15+00:00,2015-07-10 08:50:51+00:00,"If you use OSGi blueprint and use camel-sql, to setup a jdbc driver then it cannot load it from a blueprint xml file.


But if you use spring-dm it works.","njiang:1396223437:2014-03-31T07:50:37.482+0000:1396223437:2014-03-31T07:50:37.482+0000:I just did a quick test , if we use the servicemix wrapped dbcp bundle,  we won't hit the jdbc driver loading issue.
I will create an new camel-examples-sql-blueprint to show who to use camel-sql with blueprint shortly.

BTW, freeman wrote [a blog|http://freemanfang.blogspot.com/2012/03/how-to-use-jdbc-driver-in-osgi.html] discusses about jdbc issue.
davsclaus:1396224378:2014-03-31T08:06:18.058+0000:1396224378:2014-03-31T08:06:18.058+0000:Whether or not you use a SMX wrapped pool, it should be possible to use the spring single connection driver (or what its called too). eg people should be able to grab existing spring xml examples and put in their blueprint xml and have it work out of the box.
njiang:1396239274:2014-03-31T12:14:34.922+0000:1396239274:2014-03-31T12:14:34.922+0000:After digging the issue for a while, I find the issue is caused by blueprint doesn't set the TCCL with the Application bundle class loader, but Spring DM sets the TCCL with the Application bundle classloader. 

davsclaus:1398560267:2014-04-27T08:57:47.199+0000:1398560267:2014-04-27T08:57:47.199+0000:[~njiang] can you point in the source code where we set the TCCL? It may be worthwhile to make spring-dm and blueprint similar in this regards. Though classloading change is non-trivial, and if we do a change then lets only do it on master.

camql-sql should still IMHO have dynamic import so it can load any JDBC driver the user provides.
njiang:1398620039:2014-04-28T01:33:59.851+0000:1398620039:2014-04-28T01:33:59.851+0000:camel-sql doesn't load the JDBC driver itself, the contain (Spring, Blueprint) create a pool from camel . As  dbcp bundle use TCCL as fall back option, we could work around the dbcp bundle issue by setting up the Application bundle classloader as the TCCL. Spring setup the TCCL with the application bundle class loader when it loads the application, but Aries doesn't do the same thing. In camel if we set the TCCL ourselves, it won't effect the dbcp pool loading, we just put the BundleClassLoader as ApplicationContext classloader for camel internal usage.  
davsclaus:1403776818:2014-06-26T18:00:18.168+0000:1403776818:2014-06-26T18:00:18.168+0000:We should consider setting the TCCL for camel-blueprint in 2.14.x so we keep the current patch releases as-is."
0,CAMEL-7331,Improvement,Major,2.13.0,None,"

patch

",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Fabien Chaillou,0,3,2014-03-26 21:41:43+00:00,2015-07-01 08:22:35+00:00,"Hello,
By default, a kafka producer is not tied to a specific topic.
The topic is related to each message.
Instead of having to specify the topic in the endpoint definition, we can define the topic as a message header.
If no topic is defined in the message then we fall back to the topic defined in the endpoint if any.


I created a pull request in github for this improvement, here is the link : https://github.com/apache/camel/pull/121","fchaillou:1395902588:2014-03-27T14:43:08.741+0000:1395902669:2014-03-27T14:44:29.869+0000:[~davsclaus] : Hello, thank you for merging the code :)
Should resolve the issue here ? What about CAMEL-7329 and CAMEL-7330 ?

Thank you !
davsclaus:1395923924:2014-03-27T20:38:44.136+0000:1395923924:2014-03-27T20:38:44.136+0000:Thanks
rahulj51:1435132894:2015-06-24T16:01:34.737+0000:1435133014:2015-06-24T16:03:34.676+0000:This causes a critical bug.

For a camel route as follows:

from(""kafka://<broker>?topic=T1"")
.process(myProcessor)
.to(""kafka://<broker>?topic=T2"")

KafkaExchange will be created by KafkaConsumer and the topic will be set to ""T1"" in the header.
For the  'to' endpoint, KafkaProducer will try to read the topic from the exchange header which is still ""T1"" instead of ""T2"" thereby causing an infinite loop.

For now, I am handling this by removing KafkaConstant.TOPIC from exchange headers in myProcessor.

Perhaps we should not set this header in createExchange and let users set it explicitly if they want.

Thoughts?

rahulj51:1435710155:2015-07-01T08:22:35.416+0000:1435710155:2015-07-01T08:22:35.416+0000:Created new issue CAMEL-8923 to fix the above mentioned bug."
0,CAMEL-7330,Bug,Major,2.13.0,None,"

patch

",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Fabien Chaillou,0,2,2014-03-26 19:20:34+00:00,2014-03-27 20:38:10+00:00,"Hello,
After taking a short look at the Consumer for the kafka component, it appears that the consumer never fills the camel message body with the kafka message received.


I fixed it on master but i think this is major enough to be backported to camel 2.13.1.


Here is the link to the pull request  : https://github.com/apache/camel/pull/120


Thank you.
Fabien",davsclaus:1395923890:2014-03-27T20:38:10.529+0000:1395923890:2014-03-27T20:38:10.529+0000:Thanks
0,CAMEL-7329,Improvement,Minor,2.13.0,None,"

patch

",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Fabien Chaillou,0,1,2014-03-26 18:25:26+00:00,2014-03-27 20:37:51+00:00,"Hello,
My company is interested in using the camel-kafka component.
Since the latest release of kafka is 0.8.1, I updated the camel-kafka component for this latest version.
Even if this patch doesnt go in right now, we will still be abled to use the component but i figured it would be a good idea to do that anyway.


I did a pull request on github : https://github.com/apache/camel/pull/119


Thank you
Fabien


PS : FYI Jira is missing the camel-kafka as a component. It might be a good idea to add it to be able to track issues related to it !",
0,CAMEL-7328,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Akitoshi Yoshida,Akitoshi Yoshida,0,1,2014-03-25 14:09:54+00:00,2014-03-25 16:05:51+00:00,"A minor modification in camel-ahc (i.e., making some operations to be implemented by protected methods) will allow this component to be directly reused for  websocket clients. This will avoid code duplication in the websocket client component code.
.",
0,CAMEL-7327,Improvement,Major,2.12.3,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,James Strachan,0,1,2014-03-25 13:10:18+00:00,2014-03-28 10:30:18+00:00,"In environments like OSGi startup ordering is kinda random. Right now CamelContexts's can startup and call 



Container.Instance.manage(CamelContext)




https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L64


before any Container has called Container.Instance.set(). These CamelContexts's will then not be managed.


A neater solution would be, if there is no container currently set:
https://github.com/apache/camel/blob/master/camel-core/src/main/java/org/apache/camel/spi/Container.java#L66


then keep a track of the CamelContext objects in a Set<CamelContext> - until Container.Instance.unmanage() is called when they are stopped; then when Container.Instance.set(Container) is called; all the previously registered CamelContext's can be passed into the Container (and removed from the Set).",
0,CAMEL-7326,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.14.0,Gregor Zurowski,Gregor Zurowski,1,4,2014-03-25 01:40:25+00:00,2014-04-24 01:48:42+00:00,"Importing the Camel code base using Eclipse and the m2e plugin currently results in numerous errors due to missing lifecycle mappings for some Maven plugins. The following errors occur during the import process:


""Plugin execution not covered by lifecycle configuration""


To improve and simplify development using Eclipse, missing lifecycle mappings need to be manually provided in pom.xml files for all plugins that do not provide such information (see http://wiki.eclipse.org/M2E_plugin_execution_not_covered). As a result, it should be possible to import all Camel projects using m2e (i.e. Import -> Existing Maven Projects) without the need to generate Eclipse settings (.classpath/.project/.settings) using the maven-eclipse-plugin.","githubbot:1395774629:2014-03-26T03:10:29.211+0000:1395774629:2014-03-26T03:10:29.211+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/118

    CAMEL-7326: Add Eclipse m2e lifecycle mappings

    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7326

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/118.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #118
    
----
commit 713981a320bfb2006b50ca1c3e3a48c78662e5bd
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-26T03:05:15Z

    CAMEL-7326: Add Eclipse m2e lifecycle mappings
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

gzurowski:1395774941:2014-03-26T03:15:41.863+0000:1395775168:2014-03-26T03:19:28.678+0000:After applying the patch, all Camel projects were successfully imported with Eclipse m2e into a fresh workspace (via Import... -> Maven/Existing Maven Projects).

See screenshots:
- Before patch: https://issues.apache.org/jira/secure/attachment/12636496/Eclipse%20m2e%20Import%20Errors.jpg
- After patch: https://issues.apache.org/jira/secure/attachment/12636852/Eclipse%20m2e%20Import%20Without%20Errors%20After%20Applying%20Patch.jpg.
githubbot:1395791160:2014-03-26T07:46:00.783+0000:1395791160:2014-03-26T07:46:00.783+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/118

githubbot:1395862409:2014-03-27T03:33:29.441+0000:1395862409:2014-03-27T03:33:29.441+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/122

    CAMEL-7326: Exclude unused dependency

    Exclude unused dependency on jdk.tools (tools.jar) to avoid problems when importing and working with Eclipse m2e integration.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7326-2

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/122.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #122
    
----
commit 942902c101c7309f86c914e65c1e9a05d95af24b
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-27T01:47:34Z

    CAMEL-7326: Exclude unused dependency
    
    Exclude unused dependency on jdk.tools (tools.jar) to avoid problems
    when importing and working with Eclipse m2e integration.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

commit 2d84828d8f8089af93e64c0021e604dd6ca4b944
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-27T03:27:58Z

    CAMEL-7326: Exclude unused dependency
    
    Exclude unused dependency on jdk.tools (tools.jar) to avoid problems
    when importing and working with Eclipse m2e integration.
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

githubbot:1395877734:2014-03-27T07:48:54.992+0000:1395877734:2014-03-27T07:48:54.992+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/122

davsclaus:1395923853:2014-03-27T20:37:33.903+0000:1395923853:2014-03-27T20:37:33.903+0000:Thanks
gzurowski:1395924820:2014-03-27T20:53:40.124+0000:1395924820:2014-03-27T20:53:40.124+0000:Reopening issue as I still need to update the documentation, i.e. the m2e section in ""Building Camel from Source"" (https://camel.apache.org/building.html). I will close this ticket once it's done.
gzurowski:1396464163:2014-04-03T02:42:43.359+0000:1396464163:2014-04-03T02:42:43.359+0000:Closing issue after updating the m2e section on the ""Building"" page (http://camel.apache.org/building.html). Please feel free to reopen this ticket, if more details need to be added to the documentation."
0,CAMEL-7325,Bug,Minor,2.12.3,,"
None
",Resolved,Not A Problem,None,Willem Jiang,vedat demir,0,2,2014-03-24 15:38:36+00:00,2016-03-23 09:06:23+00:00,"WrappedInputStream may take InputStream or ByteArrayInputStream in its construction and we use org.apache.camel.util.IOHelper class for stream operation. Please check the line 173 (in version 2.13.3) in IOHelper. You'll see there is a ""if (input instanceof ByteArrayInputStream) {"" statement to treat ByteArrayInputStream in a different way.  Since WrappedInputStream  extends InputStream class rest of the API can not execute these parts and we may not be able to read the stream since we need to reset the ByteArrayInputStream before executing the ""available()"" method. 


I've attached two different converter to show the difference.","vedat227:1395646805:2014-03-24T15:40:05.740+0000:1395646805:2014-03-24T15:40:05.740+0000:this is working since InputStream is an instance of InputStreamCache
vedat227:1395646936:2014-03-24T15:42:16.865+0000:1395646936:2014-03-24T15:42:16.865+0000:this one does not work since the inputstream is instance of InputStreamCache , which is and ByteArrayInputStream and WrappedInputStream suppresses this info....
njiang:1395984696:2014-03-28T13:31:36.953+0000:1395984696:2014-03-28T13:31:36.953+0000:For the InputStream, we can not reset stream as we do for the ByteArrayInputStream, because the stream may be consumed and we cannot reread it again. 
As the the StreamCache can be reset when the message is routed to other processor, so I don't think we need to worry about reset the stream. Can you give a test case to show what kind of error you hit?
"
0,CAMEL-7324,Bug,Major,None,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Rene Avontuur,0,2,2014-03-24 14:25:47+00:00,2014-04-15 03:17:08+00:00,"The DynamicRouter appears to send the in-message in stead of the out-message to the next destination, which is an unexpected behaviour.","rene avontuur:1395642471:2014-03-24T14:27:51.328+0000:1395642471:2014-03-24T14:27:51.328+0000:added an unit test
rene avontuur:1395648292:2014-03-24T16:04:52.782+0000:1395648292:2014-03-24T16:04:52.782+0000:Added a patch file that solves this issue.
rene avontuur:1395649793:2014-03-24T16:29:53.537+0000:1395649793:2014-03-24T16:29:53.537+0000:RoutingSlip.java appears to contain untested duplicated code (below  public boolean doInAsyncProducer), that probably needs the same kind of code-change. 
rene avontuur:1395663340:2014-03-24T20:15:40.072+0000:1395663340:2014-03-24T20:15:40.072+0000:Added the unit test for the AsyncEndpoint
Added an updated patch
njiang:1397502960:2014-04-15T03:16:00.746+0000:1397503028:2014-04-15T03:17:08.285+0000:Applied patch into master, camel-2.13.x and camel-2.12.x branches with thanks to Rene.
I also did some modification on the unit tests."
0,CAMEL-7323,Bug,Minor,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-24 07:19:32+00:00,2014-03-24 07:29:52+00:00,"If there is no routes, we have an extra } which should not be there



{
  ""routes"": {
    }
  }
}




Parse error on line 5:
... {            }}}
-------------------^
Expecting 'EOF'",
0,CAMEL-7322,New Feature,Major,2.13.0,,"
None
",Resolved,Won't Fix,None,Unassigned,David Jorm,0,1,2014-03-24 04:39:02+00:00,2014-08-25 00:45:48+00:00,"Camel supports various serialized data formats. Camel routes using these data formats could expose security issues if vulnerable classes are on the classpath. For example, CVE-2013-2186 describes a poison null byte flaw that existed in Apache Commons FileUpload:


http://svn.apache.org/viewvc?view=revision&revision=1507048


If an application was exposing Camel routes that used serialized data formats, and had a vulnerable class such as Commons FileUpload on the classpath, it could be exploited, as an attacker would be able to call the deserialization methods on that class.


Camel could address this by exposing a configuration mechanism for type-checking data prior to deserialization, using a technique such as:


http://www.ibm.com/developerworks/java/library/se-lookahead/index.html


And then providing documentation warning users against deserializing arbitrary user-supplied content. Alternatively, this could be conisidered a problem to be solved by applications exposing Camel routes that use serialized data formats, and therefore be addressed entirely in documentation. If the latter approach is taken, then I am happy to provide draft documentation content.",dfj:1408898748:2014-08-25T00:45:48.347+0000:1408898748:2014-08-25T00:45:48.347+0000:Can I ask why this issue was marked as Won't Fix?
0,CAMEL-7321,Bug,Major,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Gregor Zurowski,Gregor Zurowski,0,3,2014-03-23 01:32:55+00:00,2014-03-25 07:46:17+00:00,"In January njiang reported that the JUnit test JcrConsumerTest fails in his environment. This could not be reproduced in other environments at that time. njiang applied the following fix to the pom.xml in order make the test pass:


camel-jcr/pom.xml
[...]
  <build>
    <plugins>
     <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <forkMode>pertest</forkMode>
        </configuration>
     </plugin>
    </plugins>
  </build>
[...]




This made all tests run in separate processes, but was also an indicator for potential multi-threading issues in JcrConsumer. I was recently able to reproduce the problem by running Maven within Eclipse. The problem is indeed a synchronization issue and should be addressed with this ticket.","githubbot:1395584484:2014-03-23T22:21:24.944+0000:1395584484:2014-03-23T22:21:24.944+0000:GitHub user gzurowski opened a pull request:

    https://github.com/apache/camel/pull/116

    CAMEL-7321: Fix inconsistent synchronization to prevent freezing of JcrConsumer

    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gzurowski/camel CAMEL-7321

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/116.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #116
    
----
commit adf86876f3f4fdc895a66d50361102093ee4f98a
Author: Gregor Zurowski <gregor@zurowski.org>
Date:   2014-03-23T22:17:14Z

    CAMEL-7321: Fix inconsistent synchronization to prevent freezing of
    JcrConsumer
    
    Signed-off-by: Gregor Zurowski <gregor@zurowski.org>

----

davsclaus:1395615338:2014-03-24T06:55:38.490+0000:1395615338:2014-03-24T06:55:38.490+0000:The JcrConsumerTest hangs on my laptop. I have attached a thread dump.
davsclaus:1395704580:2014-03-25T07:43:00.324+0000:1395704580:2014-03-25T07:43:00.324+0000:Thanks for the PR
githubbot:1395704777:2014-03-25T07:46:17.712+0000:1395704777:2014-03-25T07:46:17.712+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/116
"
0,CAMEL-7320,Bug,Major,"2.12.3, 2.13.0","2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Willem Jiang,Franz Forsthofer,0,2,2014-03-22 11:08:53+00:00,2014-03-23 12:46:50+00:00,"If you call the PGP Data Format unmarshaller with a PGP message containing a PGP Encrypted Data packet and a Singature packet then you get the following exception


java.io.EOFException: Unexpected end of ZIP input stream
	at org.bouncycastle.openpgp.PGPCompressedData$1.fill(Unknown Source)
	at java.util.zip.InflaterInputStream.read(InflaterInputStream.java:158)
	at org.bouncycastle.bcpg.BCPGInputStream.read(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream$PartialInputStream.read(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.read(Unknown Source)
	at org.bouncycastle.util.io.Streams.readFully(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.readFully(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.readFully(Unknown Source)
	at org.bouncycastle.bcpg.MPInteger.<init>(Unknown Source)
	at org.bouncycastle.bcpg.SignaturePacket.<init>(Unknown Source)
	at org.bouncycastle.bcpg.BCPGInputStream.readPacket(Unknown Source)
	at org.bouncycastle.openpgp.PGPSignature.<init>(Unknown Source)
	at org.bouncycastle.openpgp.PGPObjectFactory.nextObject(Unknown Source)
	at org.apache.camel.converter.crypto.PGPKeyAccessDataFormat.verifySignature(PGPKeyAccessDataFormat.java:474)
	at org.apache.camel.converter.crypto.PGPKeyAccessDataFormat.unmarshal(PGPKeyAccessDataFormat.java:405)


The provided patch is for 2.13 and 2.14. The patch must be adapted for 2.12.


The problem also occurs with the other compression algorithms ZLIB and BZIP2.
Regards Franz","njiang:1395550010:2014-03-23T12:46:50.895+0000:1395550010:2014-03-23T12:46:50.895+0000:Applied the patch into master, camel-2.13.x branches with thanks to Franz."
0,CAMEL-7319,Task,Minor,2.13.0,,"
None
",Resolved,Fixed,None,Willem Jiang,Benjamin Graf,0,2,2014-03-21 18:51:05+00:00,2014-03-28 03:09:29+00:00,"The test testUsingJavaExtensions in camel-core/src/test/java/org/apache/camel/builder/xml/XPathTest.java is ""dead"" since checkin git-svn-id: https://svn.apache.org/repos/asf/camel/trunk@824639 13f79535-47bb-0310-9956-ffa450edef68 if you enable xalan on testing classpath.","njiang:1395947369:2014-03-28T03:09:29.960+0000:1395947369:2014-03-28T03:09:29.960+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7318,Bug,Minor,2.11.2,"2.14.3, 2.15.0","

concurrency
parallel

",Resolved,Fixed,"2.14.3, 2.15.0",Grzegorz Grzybek,Martha Obrinteschi,0,2,2014-03-21 09:08:05+00:00,2015-03-05 12:45:04+00:00,"If we have two HDFS consumers the files are being processed twice (once by each consumer, waiting one after the other) so the consumers are not working in parallel. If we add this the consumers will work as a team and the transfer will go faster.


This happens because there is no exception thrown (the rename method just returns true or false and everything carries on as nothing would have happened .


In order to fix this we could add in the HdfsInputStream: 49


boolean tf = info.getFileSystem().rename(new Path(ret.actualPath), new Path(ret.suffixedPath));
if (!tf) 

{
	throw new IOException(""This exception is thrown because the rename did not succeded."");
	}


And also in the HdfsConsumer: 150
try {
     this.rwlock.writeLock().lock();
     this.istream = HdfsInputStream.createInputStream(fileStatuses[i].getPath().toString(), this.config);
} catch (IOException ioe) {
     log.info(ioe.getMessage()	+ "" If the rename fails we move on to the next file."");
     continue;
}","ggrzybek:1397086572:2014-04-10T07:36:12.989+0000:1397086572:2014-04-10T07:36:12.989+0000:[~thadia], there is [this page|https://camel.apache.org/competing-consumers.html], which talks about concurrent consumers. While this is obvious for JMS, other endpoints have more problems with such configuration.
Of course this may be done, but have you considered using {{pattern}} endpoint parameter described [here|http://camel.apache.org/hdfs.html]?

Please let me know.

regards
Grzegorz Grzybek
thadia:1397700110:2014-04-17T10:01:50.723+0000:1397700110:2014-04-17T10:01:50.723+0000:The pattern parameter it had been considered, but that is not good enough for this case and I couldn't find another way except the one from the description.
Thank you.
ggrzybek:1397700911:2014-04-17T10:15:11.532+0000:1397700911:2014-04-17T10:15:11.532+0000:Hello Martha - I just wanted to say, that according to https://camel.apache.org/competing-consumers.html, the only competing consumers are currently JMS and SEDA. I'm not saying that it cannot be done for HDFS/HDFS2, but it's not trivial.
Please be patient ;)
ggrzybek:1425518944:2015-03-05T09:29:04.034+0000:1425518944:2015-03-05T09:29:04.034+0000:Actually the file is not being read twice.
I've setup two consumers and watched the behavior under debugger.
This code you've mentioned (in org.apache.camel.component.hdfs2.HdfsInputStream#createInputStream()):
{code:java}
        info.getFileSystem().rename(new Path(ret.actualPath), new Path(ret.suffixedPath));
{code}
doesn't return {{false}} if can't rename, it throws exception with the following stack trace (""file://"" case):
{noformat}
java.io.FileNotFoundException: File file:/data/ggrzybek/sources/github.com/grgrzybek/camel/components/camel-hdfs2/target/test/multiple-consumers/file-0194.txt does not exist
	at org.apache.hadoop.fs.RawLocalFileSystem.deprecatedGetFileStatus(RawLocalFileSystem.java:511)
	at org.apache.hadoop.fs.RawLocalFileSystem.getFileLinkStatusInternal(RawLocalFileSystem.java:722)
	at org.apache.hadoop.fs.RawLocalFileSystem.getFileStatus(RawLocalFileSystem.java:501)
	at org.apache.hadoop.fs.FileUtil.copy(FileUtil.java:337)
	at org.apache.hadoop.fs.FileUtil.copy(FileUtil.java:289)
	at org.apache.hadoop.fs.RawLocalFileSystem.rename(RawLocalFileSystem.java:334)
	at org.apache.hadoop.fs.ChecksumFileSystem.rename(ChecksumFileSystem.java:503)
	at org.apache.camel.component.hdfs2.HdfsInputStream.createInputStream(HdfsInputStream.java:49)
	at org.apache.camel.component.hdfs2.HdfsConsumer.doPoll(HdfsConsumer.java:140)
	at org.apache.camel.component.hdfs2.HdfsConsumer.poll(HdfsConsumer.java:98)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:174)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
	at java.lang.Thread.run(Thread.java:745)
{noformat}
so then Camel invokes org.apache.camel.spi.PollingConsumerPollStrategy#rollback() and simply skips this file and move to the next one.
I'll check how it works in ""hdfs://"" case.
ggrzybek:1425519373:2015-03-05T09:36:13.217+0000:1425519373:2015-03-05T09:36:13.217+0000:You're right - for ""hdfs://"" scheme, the rename just returns {{false}}.
ggrzybek:1425530636:2015-03-05T12:43:56.138+0000:1425530704:2015-03-05T12:45:04.503+0000:Thanks [~thadia] for investigating this issue. I've added [similar check|https://github.com/apache/camel/commit/08eb8bf] to skip missing (failed to rename) file."
0,CAMEL-7317,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Freeman Yue Fang,Freeman Yue Fang,0,1,2014-03-21 03:56:01+00:00,2014-03-28 09:24:21+00:00,"When OBR resolver is available, If the bundle in features.xml has dependency=""true"" means if there's on other bundle in this feature explicitly depend on this bundle than it won't get installed, so xml-specs-api feature shouldn't have all bundles marked as dependency=""true"",


We should remove dependency=""true"" for woodstox and jaxb-impl bundles","ffang:1395345444:2014-03-21T03:57:24.642+0000:1395345444:2014-03-21T03:57:24.642+0000:related discussion from smx mailling list is
http://servicemix.396122.n5.nabble.com/Adding-features-to-ServiceMix-4-5-3-minimal-dependency-resolution-not-working-td5719659.html
ffang:1395969861:2014-03-28T09:24:21.830+0000:1395969861:2014-03-28T09:24:21.830+0000:commit fix
http://git-wip-us.apache.org/repos/asf/camel/commit/8bfd1232 for master
http://git-wip-us.apache.org/repos/asf/camel/commit/2249559a for camel-2.13.x
http://git-wip-us.apache.org/repos/asf/camel/commit/ced3c084 for camel-2.12.x"
0,CAMEL-7316,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Akitoshi Yoshida,Akitoshi Yoshida,0,2,2014-03-20 16:07:22+00:00,2014-05-21 10:25:48+00:00,"Introducing a client-side websockert component that can connect to a remote websocket and transfer data in both directions in the duplex mode.


It uses AHC and its endpoint can be used in the producer role to write to the socket or in the consumer role to read from the socket.


This is the cliend-side component described in the following dev@camel message:


http://camel.465427.n5.nabble.com/update-of-websocket-td5740578.html#a5742396","rkettelerij:1395884523:2014-03-27T09:42:03.497+0000:1395884523:2014-03-27T09:42:03.497+0000:[~ay] This is a nice contribution. A websocket client based on async-http-client would definitely come in handy, especially for users who are already using async-http-client for HTTP.

I'm just thinking since this component extends the camel-ahc component wouldn't it be better to rename it to *camel-ahc-websocket*. This is much clearer for end users. Also camel-ws is to generic for my taste, ws can refer to either websocket or webservice.
rkettelerij:1395885030:2014-03-27T09:50:30.609+0000:1395885030:2014-03-27T09:50:30.609+0000:In that case the URI-part would change to ahc-ws:// and ahc-wss://
ay:1395890284:2014-03-27T11:18:04.004+0000:1395890359:2014-03-27T11:19:19.570+0000:Hi Richard,
Thank you for your comment. I was unsettled for the component naming and the protocol name :-). 

I was not sure if we should provide a component that is not specific to its implementation (i.e., which could change in the future) or a component that is specifically bound to its implementation.

Initially, the code was not using camel-ahc directly but using the ahc client library. But after I made a minor refactoring in camel-ahc, I could use camel-ahc as the base component.

Since the current code is specific to ahc and its configuration is embedded in the endpoint (as ahc configuration), that means we are necessarily exposing ahc specificness to its endpoint configuration. So, I agree that we should have ""ahc"" name in the part of the component and protocol name.

If no one objects the name change, I can rename the component and protocol name accordingly.

thanks.
regards, aki

rkettelerij:1395891311:2014-03-27T11:35:11.494+0000:1395891311:2014-03-27T11:35:11.494+0000:Great! 

I think the general consensus in the Camel community is to name components after their specific implementation since there's often no ""one true"" implementation, i.e. more implementation may appear in the future (see camel-http vs camel-ahc for example or camel-sql and camel-jdbc, etc). 
ay:1395927596:2014-03-27T21:39:56.326+0000:1395927596:2014-03-27T21:39:56.326+0000:Hi Richard, 
I renamed the component name and protocol names to include the implementation name ""ahc"".
I kept the short notation ""ws"" in the part of the component name (i.e., as in camel-ahc-ws) to keep it more aligned with its exposed protocol names ahc-ws and ahc-wss.
regards, aki


ay:1400639148:2014-05-21T10:25:48.593+0000:1400639148:2014-05-21T10:25:48.593+0000:Close this ticket with the current code that has the default plain binding for the client part.
Use new tickets for further options and specific bindings etc.
"
0,CAMEL-7315,Bug,Major,None,"2.12.4, 2.13.1, 2.14.0","

patch

",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Knut-Olav Hoven,0,2,2014-03-20 10:16:16+00:00,2014-03-28 08:49:28+00:00,"Java 6 ServiceLocator requires SPI resources to be encoded in UTF8 according to <http://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html>.


I believe Camel SPI locator should confirm to this.


Pull request with patch:
<https://github.com/apache/camel/pull/115>


Sorry for not supplying tests. Try running tests using property ""file.encoding=UTF16""","njiang:1395967768:2014-03-28T08:49:28.406+0000:1395967768:2014-03-28T08:49:28.406+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Knut-Olav."
0,CAMEL-7314,Task,Major,None,None,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Willem Jiang,1,3,2014-03-20 08:53:07+00:00,2014-09-07 06:50:20+00:00,"[ERROR] Failed to execute goal 
org.apache.maven.plugins:maven-antrun-plugin:1.6:run (generate-sources) on 
project camel-spring: An Ant BuildException has occured: taskdef A class 
needed by class com.sun.tools.jxc.SchemaGenTask cannot be found: 
com/sun/mirror/apt/AnnotationProcessorFactory","njiang:1398843181:2014-04-30T15:33:01.454+0000:1398843445:2014-04-30T15:37:25.160+0000:This error is caused by JDK 8 removed old sun's APT implementation. I managed to get ride of that error by force maven to JAXB 2.2.6.  But I got the schema generate issue after that.
{code}
Caused by: /Users/jiangning/work/camel/git/camel/components/camel-spring/target/antrun/build-main.xml:42: schema generation failed
	at com.sun.tools.jxc.ApBasedTask.compile(ApBasedTask.java:171)
	at org.apache.tools.ant.taskdefs.Javac.execute(Javac.java:906)
	at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)
	at sun.reflect.GeneratedMethodAccessor13.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)
	at org.apache.tools.ant.Task.perform(Task.java:348)
	at org.apache.tools.ant.Target.execute(Target.java:390)
	at org.apache.tools.ant.Target.performTasks(Target.java:411)
	at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1397)
	at org.apache.tools.ant.Project.executeTarget(Project.java:1366)
	at org.apache.maven.plugin.antrun.AntRunMojo.execute(AntRunMojo.java:270)
	... 21 more
[ERROR] 
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
{code}

I also tried to use org.codehaus.mojo:jaxb2-maven-plugin to generate the schema, but it looks like this plugin cannot load the file from custom directory. 

muellerc:1399102399:2014-05-03T15:33:19.733+0000:1399102399:2014-05-03T15:33:19.733+0000:We are using org.codehaus.mojo:jaxb2-maven-plugin in some other projects. You can configure the source file/directory. Did you checked http://mojo.codehaus.org/jaxb2-maven-plugin/xjc-mojo.html?
chirino:1399480993:2014-05-08T00:43:13.023+0000:1399480993:2014-05-08T00:43:13.023+0000:I think I've almost got this one sorted.  I got it working if I upgrade the JAXB version and make a couple of other adjustments.  Any objections to moving up to JAXB 2.2.7 ???
chirino:1399490337:2014-05-08T03:18:57.893+0000:1399490337:2014-05-08T03:18:57.893+0000:I've started a Java 8 porting branch at https://github.com/chirino/camel/tree/java8
davsclaus:1399502055:2014-05-08T06:34:15.341+0000:1399502055:2014-05-08T06:34:15.341+0000:Yeah for Camel 2.14, then building with Java8 would be nice to have supported.
But for 2.13.x we should keep it as-is, as we only do patch releases there, and have to respect people running with 2.13.x in production."
0,CAMEL-7313,Improvement,Major,"2.12.0, 2.13.0","2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Grzegorz Grzybek,Claus Ibsen,0,4,2014-03-20 08:09:07+00:00,2014-04-03 13:05:04+00:00,"We should add support for fetching primary keys that may be used when doing an INSERT. The JDBC has API to fetch that.


See also nabble
http://camel.465427.n5.nabble.com/Question-generated-keys-and-SQL-component-tp5749065.html","githubbot:1396010840:2014-03-28T20:47:20.716+0000:1396010840:2014-03-28T20:47:20.716+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/123

    [CAMEL-7313] Adding support to retrieve generated keys for camel-sql

    I decided to return not simple `List<Map<String, Object>>`, but spring-jdbc's `org.springframework.jdbc.support.KeyHolder` as `camel-sql` component is tied to spring-jdbc.
    
    This `KeyHolder` is just a thin wrapper around the aforementioned list of maps.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7313

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/123.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #123
    
----
commit 008ec70cea417ec8cd1c88171dab10e36a6621dd
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-28T20:44:35Z

    [CAMEL-7313] Adding support to retrieve generated keys for camel-sql

----

githubbot:1396221580:2014-03-31T07:19:40.082+0000:1396221580:2014-03-31T07:19:40.082+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/125

    [CAMEL-7313] Retrieve generated keys as plain list of maps

    We don't force user to depend on spring-jdbc interfaces.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7313-updates

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/125.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #125
    
----
commit 4ff2dd87684524e2a1caf48dbee92cbdffee981f
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-31T07:18:44Z

    [CAMEL-7313] Retrieve generated keys as plain list of maps
    
    We don't force user to depend on spring-jdbc interfaces.

----

githubbot:1396305680:2014-04-01T06:41:20.568+0000:1396305680:2014-04-01T06:41:20.568+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/123

githubbot:1396307933:2014-04-01T07:18:53.540+0000:1396307933:2014-04-01T07:18:53.540+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/125

njiang:1396308454:2014-04-01T07:27:34.822+0000:1396308454:2014-04-01T07:27:34.822+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x branches with thanks to Grzegorz.
githubbot:1396310471:2014-04-01T08:01:11.395+0000:1396310471:2014-04-01T08:01:11.395+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/127

    [CAMEL-7313] Polishing to match camel-jdbc wrt generated keys

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7313-updates

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/127.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #127
    
----
commit f5839ccd39809ba86b5ecc178bf1d775afa56554
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-04-01T07:59:39Z

    [CAMEL-7313] Polishing to match camel-jdbc wrt generated keys

----

ggrzybek:1396311300:2014-04-01T08:15:00.057+0000:1396311300:2014-04-01T08:15:00.057+0000:Resolved. Documentation updated.
githubbot:1396501504:2014-04-03T13:05:04.760+0000:1396501504:2014-04-03T13:05:04.760+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/127
"
0,CAMEL-7312,Improvement,Minor,2.13.0,"2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-20 08:05:59+00:00,2014-03-20 08:43:07+00:00,"See
http://stackoverflow.com/questions/22523637/read-contents-of-a-file-containing-key-value-pairs-without-normal-parsing


This allows people to pickup files and convert to properties more easily.",
0,CAMEL-7311,Bug,Major,"2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-19 09:44:24+00:00,2014-03-19 09:48:41+00:00,"See nabble
http://camel.465427.n5.nabble.com/Polling-Email-Component-Runtime-Error-tp5749047.html",
0,CAMEL-7310,Bug,Major,"2.12.3, 2.13.0","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-19 09:02:54+00:00,2014-03-19 09:05:52+00:00,"There is a NPE bug in restlet when the restlet client timeout
https://github.com/restlet/restlet-framework-java/issues/871


This causes camel restlet producer to not have its callback called, which can lead to Camel hanging.


We need to force sync mode until restlet fixes their NPE bug",davsclaus:1395191152:2014-03-19T09:05:52.811+0000:1395191152:2014-03-19T09:05:52.811+0000:Fixed on Camel side. When restlet have fixed theirs we can switch back.
0,CAMEL-7279,Bug,Major,2.12.3,None,"
None
",Resolved,Fixed,"2.12.4, 2.13.1",Jonathan Anstey,Jonathan Anstey,0,1,2014-03-07 16:42:52+00:00,2014-03-07 16:50:34+00:00,... which means camel-yammer cannot connect to the yammer API currently.,"janstey:1394182234:2014-03-07T16:50:34.403+0000:1394182234:2014-03-07T16:50:34.403+0000:master - http://git-wip-us.apache.org/repos/asf/camel/commit/263b5681
camel-2.12.x - http://git-wip-us.apache.org/repos/asf/camel/commit/496026d6"
0,CAMEL-7278,Wish,Minor,2.11.2,"2.12.4, 2.13.0","

security

",Resolved,Fixed,"2.12.4, 2.13.0",Claus Ibsen,Martha Obrinteschi,0,2,2014-03-07 08:36:14+00:00,2014-03-14 10:01:53+00:00,"1. HdfsConsumer:129 
if(this.config.getOwner() != null){
      	if(!(status.getOwner().equals(this.config.getOwner())))
       		continue;
}


2. HdfsConfiguration:
private String owner = HdfsConstants.DEFAULT_OWNER;
public String getOwner() {
	return owner;
}
public void setOwner(String owner) {
	this.owner = owner;
}


3. HdfsConstants:
 public static final String DEFAULT_OWNER = null;","davsclaus:1394755951:2014-03-14T08:12:31.798+0000:1394755951:2014-03-14T08:12:31.798+0000:What is the purpose of this? What does the new option solve?
thadia:1394758969:2014-03-14T09:02:49.804+0000:1394758969:2014-03-14T09:02:49.804+0000:Right now all the files from hdfs are being processed, no matter who the owner of the file is. If this option would be added, there would be the possibility to set it up with the current user so that it will process only the files owned from the current user. If the option will not be set it will process all the files. This option is useful from a security perspective.
davsclaus:1394762513:2014-03-14T10:01:53.455+0000:1394762513:2014-03-14T10:01:53.455+0000:Thanks"
0,CAMEL-7277,Bug,Major,"2.11.4, 2.12.3","2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Willem Jiang,0,1,2014-03-07 03:08:53+00:00,2014-03-07 10:53:44+00:00,Here is the complain from the stackoverfow,"njiang:1394160824:2014-03-07T10:53:44.465+0000:1394160824:2014-03-07T10:53:44.465+0000:Applied patch into trunk, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7276,Bug,Minor,2.12.3,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Claus Ibsen,Bob Browning,0,1,2014-03-06 13:41:37+00:00,2014-03-09 07:33:27+00:00,"When using the camel-quartz component in an unmanged context with multiple camel contexts, for example in a JUnit test case, causes the scheduler to be created with the instance name ""DefaultQuartzScheduler"" which is then shared across all camel context's within the same jvm.


This is in contradiction of the previous behaviour that uses `getCamelContext.getName()` which isolates the scheduler by denoting that the default instance is specific to the camel context.



package org.apache.camel.component.quartz;

import org.apache.camel.CamelContext;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.management.JmxSystemPropertyKeys;
import org.junit.Test;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotSame;

/**
 * Test regression of camel-context isolation of default scheduler instance introduced in CAMEL-7034.
 */
public class QuartzComponentCamelContextSchedulerIsolationTest {

  @Test
  public void testSchedulerIsolation_unmanaged() throws Exception {
    disableJMX();
    testSchedulerIsolation();
  }

  @Test
  public void testSchedulerIsolation_managed() throws Exception {
    enableJMX();
    testSchedulerIsolation();
  }

  private void testSchedulerIsolation() throws Exception {
    CamelContext context = createCamelContext();
    context.start();

    CamelContext anotherContext = createCamelContext();
    assertNotEquals(anotherContext.getName(), context.getName());
    assertNotEquals(anotherContext, context);

    assertNotSame(getDefaultScheduler(context), getDefaultScheduler(anotherContext));
  }

  /**
   * Create a new camel context instance.
   */
  private DefaultCamelContext createCamelContext() {
    return new DefaultCamelContext();
  }

  /**
   * Get the quartz component for the provided camel context.
   */
  private QuartzComponent getQuartzComponent(CamelContext context) {
    return context.getComponent(""quartz"", QuartzComponent.class);
  }

  /**
   * Get the default scheduler for the provided camel context.
   */
  private Scheduler getDefaultScheduler(CamelContext context) throws SchedulerException {
    return getQuartzComponent(context).getFactory().getScheduler();
  }

  /**
   * Disables the JMX agent.
   */
  private void disableJMX() {
    System.setProperty(JmxSystemPropertyKeys.DISABLED, ""true"");
  }

  /**
   * Enables the JMX agent.
   */
  private void enableJMX() {
    System.setProperty(JmxSystemPropertyKeys.DISABLED, ""false"");
  }

}",
0,CAMEL-7275,Bug,Major,2.12.3,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-03-06 09:59:35+00:00,2014-03-06 16:00:13+00:00,"When you have a route like this



                from(""direct:start"")
                    .doTry()
                        .recipientList(constant(""direct:foo"")).end()
                    .doCatch(Exception.class)
                        .to(""mock:catch"")
                        .transform().constant(""doCatch"")
                    .end()
                    .to(""mock:result"");




Then if an exception was thrown it should be catch by doCatch


A similar route with to instead works as expected.",
0,CAMEL-7274,Bug,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Raúl Kripalani,Colm O hEigeartaigh,0,2,2014-03-05 18:11:55+00:00,2014-03-05 19:05:23+00:00,"The Camel-shiro component allows the ability to perform authorization based on permissions. However, it does not allow using straight-forward roles for authorization. While using permissions is more flexible, we should also support authorization using roles.","coheigea:1394014718:2014-03-05T18:18:38.277+0000:1394014718:2014-03-05T18:18:38.277+0000:
A patch + tests for this issue.

Colm.
raulvk:1394017427:2014-03-05T19:03:47.261+0000:1394017427:2014-03-05T19:03:47.261+0000:Patch applied on master (2.13.x) with thanks to [~coheigea]."
0,CAMEL-7273,Bug,Major,None,None,"
None
",Closed,Fixed,None,Christian Müller,Sebb,0,2,2014-03-05 17:29:21+00:00,2014-03-10 23:43:20+00:00,"The ASF mirror systems only holds releases that are current; in the case of Camel that is currently 2.11.4 and 2.12.3. All other releases are available on the archive server.


However, all of the superseded release download pages still point to the ASF mirror system. Their links are broken.
For example, in the download page for 2.12.2, instead of 
http://www.apache.org/dyn/closer.cgi/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip
and
http://www.apache.org/dist/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip.asc


the page should point to
http://archive.apache.org/dist/camel/apache-camel/2.11.2/apache-camel-2.11.2.zip
and
http://archive.apache.org/dist/camel/apache-camel/2.12.2/apache-camel-2.12.2.zip.asc","muellerc:1394458515:2014-03-10T21:35:15.890+0000:1394458515:2014-03-10T21:35:15.890+0000:I have updated the links for all releases. Feel free to check if you want. And thanks for reporting!
sebb:1394466200:2014-03-10T23:43:20.644+0000:1394466200:2014-03-10T23:43:20.644+0000:Thanks!

I checked a few random pages and they were OK."
0,CAMEL-7272,Improvement,Minor,None,None,"
None
",Closed,Fixed,None,Christian Müller,Sebb,0,2,2014-03-05 17:17:30+00:00,2014-03-05 23:31:46+00:00,"The list of releases on the download archives page seems to be sorted in alphabetic rather than numeric order.


So for example  we have


Camel 2.1.0 Release
Camel 2.10.0 Release
Camel 2.10.1 Release
...
Camel 2.11.0 Release
...
Camel 2.12.0 Release
Camel 2.12.1 Release
Camel 2.12.2 Release
Camel 2.12.3 Release
Camel 2.2.0 Release
Camel 2.3.0 Release


This makes it harder to find a particular release.","muellerc:1394031020:2014-03-05T22:50:20.436+0000:1394031020:2014-03-05T22:50:20.436+0000:Thanks for spotting this Sebb. It's fixed in the wiki now and should be online in a few minutes...
sebb:1394033506:2014-03-05T23:31:46.697+0000:1394033506:2014-03-05T23:31:46.697+0000:Thanks, than looks better"
0,CAMEL-7271,Bug,Major,"2.11.3, 2.12.2","2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Claus Ibsen,Luke Hamaty,0,2,2014-03-05 00:00:19+00:00,2014-04-28 05:39:33+00:00,"If the first exchange received by a (concrete implementation of) AggregationStrategy  contains an exception, then the result of the aggregation will also contain that exception, and so will not continue routing without error. This makes the first received exchange have an effect that subsequent exchanges do not have.


The specific use case multicasts to GroupedExchangeAggregationStrategy. The MulticastProcessor.doDone function uses ExchangeHelper.copyResults to copy the aggregated result to the original exchange. The copyResults method copies the exception as well, thereby propagating the error.


 The attached unit test has 3 tests, testAFail, testBFail, and testAllGood. All three of these should pass, but testAFail does not.


What is happening is that AbstractListAggregationStrategy is directly storing its values on and returning the first exchange:
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        List<V> list;


        if (oldExchange == null) 

{
            list = getList(newExchange);
        }

 else 

{
            list = getList(oldExchange);
        }


        if (newExchange != null) {
            V value = getValue(newExchange);
            if (value != null) 

{
                list.add(value);
            }

        }


        return oldExchange != null ? oldExchange : newExchange;
    }


The pre-CAMEL-5579 version of GroupedExchangeAggregationStrategy created a fresh exchange to store and return the aggregated exchanges:
    public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {
        List<Exchange> list;
        Exchange answer = oldExchange;


        if (oldExchange == null) 

{
            answer = new DefaultExchange(newExchange);
            list = new ArrayList<Exchange>();
            answer.setProperty(Exchange.GROUPED_EXCHANGE, list);
        }

 else 

{
            list = oldExchange.getProperty(Exchange.GROUPED_EXCHANGE, List.class);
        }


        if (newExchange != null) 

{
            list.add(newExchange);
        }

        return answer;
    }",davsclaus:1398634773:2014-04-28T05:39:33.192+0000:1398634773:2014-04-28T05:39:33.192+0000:Thanks for reporting and providing test cases.
0,CAMEL-7270,Improvement,Minor,None,,"
None
",Resolved,Implemented,None,Unassigned,Jan Materne,0,3,2014-03-04 19:39:48+00:00,2014-03-09 07:02:47+00:00,No Desc,"jhm:1393933612:2014-03-04T19:46:52.320+0000:1393933612:2014-03-04T19:46:52.320+0000:On the user list an often asked question is how to store multiple exchanges/bodies in a list using aggregator EIP.
Here is an implementation - also added to the toolbox class.
raulvk:1393952634:2014-03-05T01:03:54.634+0000:1393952634:2014-03-05T01:03:54.634+0000:Hi [~jan],

Thanks for the contribution. However, this is already possible with the FlexibleAggregationStrategy. Take a look at https://github.com/apache/camel/blob/8ace0ebc09287a9d84f008d546ef87ce4eaa7dc0/camel-core/src/test/java/org/apache/camel/util/toolbox/FlexibleAggregationStrategiesTest.java#L271.

Documentation on Wiki is needed.

Regards,
Raúl.
davsclaus:1394319767:2014-03-09T07:02:47.390+0000:1394319767:2014-03-09T07:02:47.390+0000:We have this functionality implemented already as Raul says.

Help with the docs is appreciated"
0,CAMEL-7269,Bug,Major,2.12.0,Future,"
None
",Resolved,Not A Problem,Future,Grzegorz Grzybek,Hristo Sabev,1,5,2014-03-04 18:17:01+00:00,2015-02-12 10:30:40+00:00,"At line 82, JpaConsumer calls entityManager.joinTransaction(). This call cannot really work in environmnent without JTA. This is a change since 2.11.x and earlier versions where non JTA environments were supported","njiang:1393959756:2014-03-05T03:02:36.952+0000:1393959756:2014-03-05T03:02:36.952+0000:It's the change of CAMEL-5932. Please feel free to provide patch for it.
davsclaus:1394319591:2014-03-09T06:59:51.603+0000:1394319591:2014-03-09T06:59:51.603+0000:Yeah maybe we should have an option on the component you can turn on|off to control if join should be called or not?
davsclaus:1394612493:2014-03-12T16:21:33.598+0000:1394612493:2014-03-12T16:21:33.598+0000:There is a joinTransaction option you can set to false.
flyzepp:1396247802:2014-03-31T14:36:42.837+0000:1396247802:2014-03-31T14:36:42.837+0000:Hi,

Just tested the fix. Now the call to joinTransaction is ommited, however there's a later call to EntityManager.flush(), which also requires a transaction. This call is at JpaConsumer:137

To my understanding the problem is a bit more generic and the fix to ommit the joinTransaction call is not enough. What is visible from the code is that the polling is done inside a TransactionTemplate with TransactionRequired behavior. This is seen at JpaEndpoint:280, where the method createTransactionTemplate is overriden and that is called at JpaConsumer:82 to create the transaction template. Now the problem is that a TransactionStatus which says that there's a new transaction is obtained from the TransactionManager at TransactionTemplate:128, no call to EntityManager.getTransaction().begin() is ever made. This leaves the entity transaction with no real jdbc transaction and the later call to EntityManager.flush just fails.

An alternative would be to ommit the call to flush() and execute the call withouth any transaction similarly to how call is ommited for joinTransaction. However this more or less mangles the semantics of the transaction template with ""required"" behavior


ggrzybek:1421374169:2015-01-16T10:09:29.861+0000:1421377451:2015-01-16T11:04:11.098+0000:camel-jpa uses spring-orm (for camel 2.12.0 it is spring-orm-3.2.4.RELEASE). Even if JpaConsumer (and JpaProducer) calls {{javax.persistence.EntityManager#joinTransaction()}}, the invocation is intercepted by spring-orm's {{org.springframework.orm.jpa.ExtendedEntityManagerCreator.ExtendedEntityManagerInvocationHandler#doJoinTransaction()}} method which delegates only if JTA is in use. So for {{transaction-type=""RESOURCE_LOCAL""}} the call is not delegated.

Here's working example:

h6. META-INF/persistence.xml
{code:xml}
<persistence xmlns=""http://java.sun.com/xml/ns/persistence"" version=""2.0"">
    <persistence-unit name=""camel"" transaction-type=""RESOURCE_LOCAL"">
        <class>grgr.test.camel.model.Person</class>
        <exclude-unlisted-classes>true</exclude-unlisted-classes>
    </persistence-unit>
</persistence>
{code}

h6. JUnit test
{code:java}
public class JpaTest extends CamelTestSupport {

    public static Logger LOG = LoggerFactory.getLogger(JpaTest.class);
    public static DateFormat TS = new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
    private javax.sql.DataSource ds;
    private EntityManagerFactory emf;

    @Override
    protected CamelContext createCamelContext() throws Exception {
        DataSource dataSource = new DataSource();
        this.ds = dataSource;
        dataSource.setDriverClassName(Driver.class.getName());
        // docker PostgreSQL instance
        dataSource.setUrl(""jdbc:postgresql://172.17.0.2:5432/camel"");
        dataSource.setUsername(""postgres"");
        dataSource.setPassword(""postgres"");

        LocalEntityManagerFactoryBean localEntityManagerFactoryBean = new LocalEntityManagerFactoryBean();
        localEntityManagerFactoryBean.setJpaDialect(new OpenJpaDialect());
        localEntityManagerFactoryBean.setPersistenceUnitName(""camel"");
        HashMap<String, Object> jpaProperties = new HashMap<>();
        jpaProperties.put(""openjpa.ConnectionFactory"", this.ds);
        localEntityManagerFactoryBean.setJpaPropertyMap(jpaProperties);
        localEntityManagerFactoryBean.afterPropertiesSet();
        this.emf = localEntityManagerFactoryBean.getObject();

        JpaTransactionManager txManager = new JpaTransactionManager();
        txManager.setDataSource(this.ds);
        txManager.setEntityManagerFactory(this.emf);
        txManager.afterPropertiesSet();

        DefaultCamelContext context = (DefaultCamelContext) super.createCamelContext();
        SimpleRegistry registry = new SimpleRegistry();
        registry.put(""txManager"", txManager);
        context.setRegistry(registry);

        JpaComponent jpaComponent = new JpaComponent();
        jpaComponent.setEntityManagerFactory(this.emf);
        jpaComponent.setTransactionManager(txManager);
        context.addComponent(""jpa"", jpaComponent);

        context.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from(""direct:start"")
                        .log(""Body written: ${body}"")
                        .to(""jpa:grgr.test.camel.model.Person"");
                from(""jpa:grgr.test.camel.model.Person?consumeDelete=false&consumer.delay=5000"")
                        .transacted()
                        .log(""Body read: ${body}"")
                        .process(new Processor() {
                            @Override
                            public void process(Exchange exchange) throws Exception {
                                Person person = exchange.getIn().getBody(Person.class);
                                LOG.info(""Received: {} ({})"", person.getName(), person.getDate());
                            }
                        });
            }
        });

        return context;
    }

    @Test
    public void testJpaWrite() throws Exception {
        Person result = template.requestBody(""direct:start"", new Person(""Terrence"", new Date()), Person.class);
        LOG.info(""Result: {}: {}"", result.getId(), result.getName());
    }

}
{code}

Please reopen if the problem persists.
abdelgadiri:1423646169:2015-02-11T17:16:09.773+0000:1423646252:2015-02-11T17:17:32.882+0000:Hi,
I am hitting same issue when upgraded from camel 2.11.x to (2.13.x). Also failing for me in 2.14.x.
when joinTransaction=true (the default in 2.12.x, 2.13.x and 2.14.x) my route hangs on below line in JpaConsumer.java class

               // commit 
                LOG.debug(""Flushing EntityManager"");
                entityManager.flush(); (line 137 of JpaConsumer.java class)


when I set joinTransaction=false on the route uri, the route completes fine. But subsequent polls keep throwing following warning below. Now this may not be really an issue as it is just a warning but it is filling up my logs and I wonder if something is wrong.

I am using RESOURCE_LOCAL entitymanager.

 2015-02-11 16:49:10.633 [Camel (DefaultCamelContext) thread #0 - jpa://VFile] WARN  o.a.camel.component.jpa.JpaConsumer - Consumer Consumer[jpa://VFile?consumeDelete=false&consumer.query=select+vf+fro
m+VFile+vf+where+vf.processed%3Dfalse+and+vf.processorId+in+%28%27REPORT_EXPORT%27%29&joinTransaction=false&maximumResults=1] failed polling endpoint: Endpoint[jpa://VFile?consumeDelete=false&
consumer.query=select+vf+from+VFile+vf+where+vf.processed%3Dfalse+and+vf.processorId+in+%28%27REPORT_EXPORT%27%29&joinTransaction=false&maximumResults=1]. Will try again at next poll. Caused b
y: [javax.persistence.TransactionRequiredException - no transaction is in progress]
javax.persistence.TransactionRequiredException: no transaction is in progress
        at org.hibernate.jpa.spi.AbstractEntityManagerImpl.checkTransactionNeeded(AbstractEntityManagerImpl.java:1171) ~[hibernate-entitymanager-4.3.8.Final.jar:4.3.8.Final]
        at org.hibernate.jpa.spi.AbstractEntityManagerImpl.flush(AbstractEntityManagerImpl.java:1332) ~[hibernate-entitymanager-4.3.8.Final.jar:4.3.8.Final]
        at sun.reflect.GeneratedMethodAccessor139.invoke(Unknown Source) ~[na:na]
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_67]
        at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_67]
        at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:366) ~[spring-orm-3.2.13.RELEASE.jar:3.2.13.RELEASE]

        at com.sun.proxy.$Proxy178.flush(Unknown Source) ~[na:na]
        at org.apache.camel.component.jpa.JpaConsumer$1.doInTransaction(JpaConsumer.java:137) ~[camel-jpa-2.13.3.jar:2.13.3]
        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131) ~[spring-tx-3.2.13.RELEASE.jar:3.2.13.RELEASE]
        at org.apache.camel.component.jpa.JpaConsumer.poll(JpaConsumer.java:91) ~[camel-jpa-2.13.3.jar:2.13.3]
        at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187) [camel-core-2.13.3.jar:2.13.3]
        at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114) [camel-core-2.13.3.jar:2.13.3]
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471) [na:1.7.0_67]
        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304) [na:1.7.0_67]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178) [na:1.7.0_67]
        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [na:1.7.0_67]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145) [na:1.7.0_67]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615) [na:1.7.0_67]
        at java.lang.Thread.run(Thread.java:745) [na:1.7.0_67]
		


abdelgadiri:1423705873:2015-02-12T09:51:13.684+0000:1423705873:2015-02-12T09:51:13.684+0000:update:
my problems seems to be solved when I specify following uri parameters: ""consumer.transacted=true&amp;joinTransaction=true""

I am fetching only **one** db record at a time, so 'consumer.transacted' is not really changing the semantics of my original logic as I still commit after every 1 message as opposed to after a batch of messages. I am not sure though why joinTransaction=true worked this time even though my data source is still RESOURCE_LOCAL
ggrzybek:1423706260:2015-02-12T09:57:40.739+0000:1423706260:2015-02-12T09:57:40.739+0000:Hi

Have you run your test case under debugger? You should be able to see that
Spring-provided entity manager wrapper actually checks if it has to
delegate ""joinTransaction()"" call or not.

regards
Grzegorz Grzybek



abdelgadiri:1423708240:2015-02-12T10:30:40.676+0000:1423708240:2015-02-12T10:30:40.676+0000:I have now debugged and yes the entitymanager wrapper (org.springframework.orm.jpa.ExtendedEntityManagerCreator.java) is checking whether JTA is being used in which case it joins the transaction else it calls entityManager.getTransaction().begin()

Thank you for your help.
"
0,CAMEL-7268,Improvement,Trivial,2.12.3,,"

documentation

",Resolved,Fixed,None,Willem Jiang,Sébastien Brousse,0,2,2014-03-04 15:03:51+00:00,2014-03-05 02:48:37+00:00,"Since the commit of 26/11/11 named ""CAMEL-4161: camel-mail no longer dep on Spring JARs."", there is no more ""defaultEncoding"" option in the camel-mail component unlike it is said by the documentation.


PS : For my knowledge, is there a way to contribute directly to the documentation (pull-request, patch, etc) ? I did'nt find any.


Thx,","njiang:1393958801:2014-03-05T02:46:41.747+0000:1393958801:2014-03-05T02:46:41.747+0000:If it is a small change, you can add a comment into the wiki doc, we can update the page for you, otherwise you may need to sign a ICLA document for full edit access of wiki page[1]

[1]https://camel.apache.org/how-do-i-edit-the-website.html
njiang:1393958917:2014-03-05T02:48:37.571+0000:1393958917:2014-03-05T02:48:37.571+0000:I just updated the mail wiki page for it."
0,CAMEL-7267,Improvement,Major,2.12.3,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Claus Ibsen,Claus Ibsen,0,2,2014-03-04 13:37:37+00:00,2014-03-04 13:40:34+00:00,"There is a problem if joda-time 1.6 is installed as part of other features etc. And then you install camel-salesforce you can have this error



karaf@root> features:install camel-salesforce
Refreshing bundles org.apache.camel.camel-core (61)
Error executing command: Could not start bundle mvn:org.apache.camel/camel-salesforce/2.12.3 in feature(s) camel-salesforce-2.12.3: Uses constraint violation. Unable to resolve bundle revision org.apache.camel.camel-salesforce [105.0] because it is exposed to package 'org.joda.time' from bundle revisions joda-time [104.0] and joda-time [54.0] via two dependency chains.

Chain 1:
  org.apache.camel.camel-salesforce [105.0]
    import: (&(osgi.wiring.package=org.joda.time)(version>=2.1.0)(!(version>=3.0.0)))
     |
    export: osgi.wiring.package=org.joda.time
  joda-time [104.0]

Chain 2:
  org.apache.camel.camel-salesforce [105.0]
    import: (&(osgi.wiring.package=com.thoughtworks.xstream.annotations)(version>=1.3.0)(!(version>=2.0.0)))
     |
    export: osgi.wiring.package=com.thoughtworks.xstream.annotations; uses:=org.joda.time
  org.apache.servicemix.bundles.xstream [99.0]
    import: (&(osgi.wiring.package=org.joda.time)(version>=1.6.0)(!(version>=3.0.0)))
     |
    export: osgi.wiring.package=org.joda.time
  joda-time [54.0]",
0,CAMEL-7266,Wish,Minor,2.12.3,3.0.0,"
None
",Resolved,Won't Fix,3.0.0,Unassigned,Marcus Krantz,0,2,2014-03-04 10:54:14+00:00,2019-07-28 08:36:18+00:00,"I would like to save trace event messages into a MongoDB. Since there is no need for a schema, I would like to persist properties and headers as pure json.


In the DefaultTraceEventMessage the properties map as well as the headers map are converted to Strings (using toString()) due to the fact that the TraceEventMessage interface defines the methods getProperties() and getHeaders() to return a String. It would be much better if the headers and properties could be left as is (Map<String, Object>) which would allow me to persist the maps directly to my NoSQL-database.",davsclaus:1564274178:2019-07-28T08:36:18.097+0000:1564274178:2019-07-28T08:36:18.097+0000:The old tracer has been removed and a new implementation is in the works
0,CAMEL-7265,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2014-03-04 09:32:50+00:00,2014-03-04 09:59:43+00:00,"Introduce an API on CamelContext to get a json of all the routes input and outputs. This allows tooling and end users to get a better understanding what can come in and out of their routes.


The api will parse the route model and grab the endpoint uris from static configured eips, such as to, wireTap, enrich etc. For dynamic eips we cannot know this.


We can then make a karaf command that can show this details as well, for example in a nice table structure, so people can quickly get an overview of what can come in and out of their routes (in terms of endpoint uris)","davsclaus:1393898339:2014-03-04T09:58:59.962+0000:1393898339:2014-03-04T09:58:59.962+0000:The API is at
- org.apache.camel.CamelContext#createRouteStaticEndpointJson
- org.apache.camel.api.management.mbean.ManagedCamelContextMBean#createRouteStaticEndpointJson
- org.apache.camel.api.management.mbean.ManagedRouteMBean#createRouteStaticEndpointJson"
0,CAMEL-7264,Wish,Minor,2.11.2,"2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Martha Obrinteschi,0,2,2014-03-04 08:40:05+00:00,2014-03-07 13:24:49+00:00,"It would be very helpful if we could get the file path of the file and not just the file name, so please if somebody has the time please set on the message the path also. It would be very useful. 
HdfsConsumer.java  on line 144 message.setHeader(Exchange.FILE_PATH, status.getPath().toString());
Thank you!","njiang:1394161159:2014-03-07T10:59:19.652+0000:1394161159:2014-03-07T10:59:19.652+0000:Applied patch into master, camel-2.12.x and camel-2.11.x branches with thanks Martha.
thadia:1394169889:2014-03-07T13:24:49.913+0000:1394169889:2014-03-07T13:24:49.913+0000:My pleasure :)
Thanks!"
0,CAMEL-7263,Task,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,2,2014-03-04 07:16:48+00:00,2015-03-22 16:04:46+00:00,"It has been deprecated a for a long time, and we discussed this on the dev mailing list to remove it from future Camel releases.


http://camel.465427.n5.nabble.com/DISCUSS-Remove-the-camel-dot-goal-td5744057.html#a5745865",
0,CAMEL-7262,Bug,Minor,"2.12.2, 2.12.3","2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Joni Nousiainen,0,2,2014-03-03 11:58:56+00:00,2014-03-14 04:27:32+00:00,"I have a Camel route along which I do something like this:



<setHeader headerName=""CamelHttpPath"">
  <simple>/resource/${headers.RESOURCE_ID.replaceAll(""/"", ""%2F"")}</simple>
</setHeader>




The header RESOURCE_ID is a String. I have JUnit test set up for the route and it passes OK. But when I deploy my bundle to Karaf I get the following exception:



org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: .replaceAll(""/"", ""%2F"") on null due to: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replaceAll(""/"", ""%2F"") on null due to: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:117)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:132)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:121)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.model.language.ExpressionDefinition.evaluate(ExpressionDefinition.java:113)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ExpressionBuilder$KeyedOgnlExpressionAdapter.evaluate(ExpressionBuilder.java:1814)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ExpressionBuilder$58.evaluate(ExpressionBuilder.java:1381)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.support.ExpressionAdapter.evaluate(ExpressionAdapter.java:36)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.SimpleBuilder.evaluate(SimpleBuilder.java:83)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.builder.ProcessorBuilder$4.process(ProcessorBuilder.java:103)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Splitter.process(Splitter.java:98)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:573)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.doProcessSequential(MulticastProcessor.java:506)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.MulticastProcessor.process(MulticastProcessor.java:215)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Splitter.process(Splitter.java:98)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:51)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.FilterProcessor.process(FilterProcessor.java:58)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:163)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:401)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)[73:org.apache.camel.camel-core:2.12.2]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)[:1.7.0_51]
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:304)[:1.7.0_51]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)[:1.7.0_51]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_51]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_51]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_51]
Caused by: org.apache.camel.language.bean.RuntimeBeanExpressionException: Failed to invoke method: replaceAll(""/"", ""%2F"") on null due to: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:285)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression.evaluate(BeanExpression.java:114)[73:org.apache.camel.camel-core:2.12.2]
	... 90 more
Caused by: java.lang.IllegalArgumentException: name must be specified and not empty
	at org.apache.camel.util.ObjectHelper.notEmpty(ObjectHelper.java:331)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.core.osgi.OsgiClassResolver.doLoadClass(OsgiClassResolver.java:87)[76:org.apache.camel.camel-spring:2.12.2]
	at org.apache.camel.core.osgi.OsgiClassResolver.resolveClass(OsgiClassResolver.java:47)[76:org.apache.camel.camel-spring:2.12.2]
	at org.apache.camel.component.bean.BeanHelper.isAssignableToExpectedType(BeanHelper.java:121)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$2.evaluateParameterValue(MethodInfo.java:515)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo$2.evaluate(MethodInfo.java:472)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.MethodInfo.createMethodInvocation(MethodInfo.java:239)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:278)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanInfo.createInvocation(BeanInfo.java:180)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:148)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:105)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:67)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression$InvokeProcessor.process(BeanExpression.java:189)[73:org.apache.camel.camel-core:2.12.2]
	at org.apache.camel.language.bean.BeanExpression$OgnlInvokeProcessor.process(BeanExpression.java:281)[73:org.apache.camel.camel-core:2.12.2]
	... 91 more




The notable difference seems to be that the JUnit test uses DefaultClassResolver instead of OsgiClassResolver which is used in Karaf.","njiang:1393884870:2014-03-04T06:14:30.719+0000:1393884870:2014-03-04T06:14:30.719+0000:I just committed a patch into camel master, camel-2.12.x and camel-2.11.x branches to fix the NPE issue in the OsgiClassResolver."
0,CAMEL-7261,Improvement,Minor,2.12.0,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Grzegorz Grzybek,Grzegorz Grzybek,0,3,2014-03-03 09:05:30+00:00,2014-03-12 13:57:46+00:00,No Desc,"githubbot:1393810837:2014-03-03T09:40:37.415+0000:1393810837:2014-03-03T09:40:37.415+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/106

    [CAMEL-7261] camel:context-suspend and camel:context-resume commands

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7261-2.12.x

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/106.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #106
    
----
commit c4bcfff72401f29602171d55befbbb74c180eac0
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-03T09:16:20Z

    [CAMEL-7261] camel:context-suspend and camel:context-resume commands

----

githubbot:1393810882:2014-03-03T09:41:22.141+0000:1393810882:2014-03-03T09:41:22.141+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/107

    [CAMEL-7261] camel:context-suspend and camel:context-resume commands

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7261

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/107.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #107
    
----
commit 62a2df88c0f26a19a5a3986fca9713626f14ca71
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-03T09:16:20Z

    [CAMEL-7261] camel:context-suspend and camel:context-resume commands

----

ggrzybek:1393814371:2014-03-03T10:39:31.234+0000:1393814371:2014-03-03T10:39:31.234+0000:Just checked with clean installation of karaf-2.3.4:
{noformat}
karaf@root> camel:context-<TAB>
camel:context-info       camel:context-list       camel:context-resume     camel:context-start      camel:context-stop       camel:context-suspend    
karaf@root> camel:context-list 
 Context        Status         Uptime          
 -------        ------         ------          
 camel-1        Started        19.298 seconds  
karaf@root> camel:context-<TAB>
camel:context-info       camel:context-list       camel:context-resume     camel:context-start      camel:context-stop       camel:context-suspend    
karaf@root> camel:context-s<TAB>
camel:context-start      camel:context-stop       camel:context-suspend    
karaf@root> camel:context-suspend x
Camel context x not found.
karaf@root> camel:context-suspend <TAB>camel-1 
karaf@root> camel:context-list 
 Context        Status         Uptime          
 -------        ------         ------          
 camel-1        Suspended      34.970 seconds  
karaf@root> camel:context-resume 
Error executing command camel:context-resume: argument context is required
karaf@root> camel:context-resume <TAB>camel-1 
karaf@root> camel:context-list 
 Context        Status         Uptime          
 -------        ------         ------          
 camel-1        Started        43.553 seconds  
karaf@root> camel:context-s<TAB>
camel:context-start      camel:context-stop       camel:context-suspend    
karaf@root> camel:context-st<TAB>
camel:context-start    camel:context-stop     
karaf@root> camel:context-stop <TAB>camel-1 
karaf@root> camel:context-list 
karaf@root> camel:context-resume camel-1
Camel context camel-1 not found.
{noformat}
davsclaus:1393815646:2014-03-03T11:00:46.074+0000:1393815646:2014-03-03T11:00:46.074+0000:Thanks for the patches.
githubbot:1393818306:2014-03-03T11:45:06.994+0000:1393818306:2014-03-03T11:45:06.994+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/107

ggrzybek:1393912464:2014-03-04T13:54:24.844+0000:1393912464:2014-03-04T13:54:24.844+0000:Needs changes in documentation
githubbot:1393997709:2014-03-05T13:35:09.375+0000:1393997709:2014-03-05T13:35:09.375+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/108

    [CAMEL-7261] camel:context-stop. Information in command description.

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7261-help

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/108.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #108
    
----
commit 963ac1e45f0a84d8dec3336148e21c7eb8f370a2
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-05T13:34:19Z

    [CAMEL-7261] camel:context-stop. Information in command description.

----

ggrzybek:1394000656:2014-03-05T14:24:16.022+0000:1394000656:2014-03-05T14:24:16.022+0000:Updated the docs and information in {{context-stop}} command.
githubbot:1394002053:2014-03-05T14:47:33.470+0000:1394002053:2014-03-05T14:47:33.470+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/108

githubbot:1394603866:2014-03-12T13:57:46.106+0000:1394603866:2014-03-12T13:57:46.106+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/106
"
0,CAMEL-7260,Task,Trivial,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Stephen Swensen,0,2,2014-03-01 04:43:22+00:00,2014-03-01 07:04:48+00:00,"There is a bug in the HTTP4 component documentation at http://camel.apache.org/http4.


Under ""Setting up SSL for HTTP Client"", the ""Programmatic configuration of the component"" example shows setting the SSLContextParameters of the http4 component instead of the correct https4 component.


It might also be helpful to give an example of using the SSLContextParameters to force https4 to use a specific protocol, such as SSLv3. Notably, the underlying Apache HttpClient 4.x does not respect the Java environment variable ""https.protocols"", the only way I was able to successfully force SSLv3 in my case was by configuring the SSLContextParameters of the https4 component.


My groovy spring DSL looks like this:


    sslContextParams(SSLContextParameters) {
        secureSocketProtocols = new SecureSocketProtocolsParameters().with 

{ secureSocketProtocol.add('SSLv3'); it }

        secureSocketProtocol = ""SSLv3""
    }


    https4(org.apache.camel.component.http4.HttpComponent) 

{
        connectionsPerRoute = 50
        sslContextParameters = ref('sslContextParams')
    }


Note that setting SSLContextParameters.secureSocketProtocol alone is not sufficient, secureSocketProtocols also needs to be set (and I had hand-instantiate it as the list is not easily constructable via Spring - for me at least).","davsclaus:1393628305:2014-03-01T06:58:25.549+0000:1393628305:2014-03-01T06:58:25.549+0000:If you want to help with documentation, then please read this page
http://camel.apache.org/how-do-i-edit-the-website.html

And send an ICLA to Apache, and then we can grant you edit rights to the documentation.
davsclaus:1393628688:2014-03-01T07:04:48.315+0000:1393628688:2014-03-01T07:04:48.315+0000:Fixed the typo in the doc"
0,CAMEL-7259,Improvement,Minor,2.12.3,2.13.0,"
None
",Resolved,Cannot Reproduce,2.13.0,Claus Ibsen,Aaron Whiteside,0,2,2014-03-01 00:42:13+00:00,2014-03-01 06:56:12+00:00,"ProducerTemplate is not aligned with the lifecycle of CamelContext and therefore it's possible to have a Producer that's never shutdown correctly.



        context.start();
        ProducerTemplate template = context.createProducerTemplate();
        template.sendBody(""test://test"", ""Hello"");
        context.stop();




If I never call template.stop() the Producer for the test component (or indeed any other component in it's place) will never receive a call to doStop. But the Endpoint that the Producer is associated with will be stopped.. which is a weird situation/state to be in..?


context.stop() should cleanup any and all Producers, even those created by a ProducerTemplate.. after such time a ProducerTemplate should become invalid and perhaps throw an exception that the camel context has been shutdown?","aaronjwhiteside:1393607050:2014-03-01T01:04:10.148+0000:1393607050:2014-03-01T01:04:10.148+0000:the same thing goes for ProducerTemplate.start(); if it's not called then you can be interacting with a Producer that might not be setup correctly. The ProducerTemplate should be invalid until start() is called.. perhaps throw an exception?


davsclaus:1393627477:2014-03-01T06:44:37.955+0000:1393627510:2014-03-01T06:45:10.799+0000:Are you sure, as the template is already started, see the javadoc
http://camel.apache.org/maven/current/camel-core/apidocs/org/apache/camel/CamelContext.html#createProducerTemplate()

davsclaus:1393627618:2014-03-01T06:46:58.364+0000:1393627618:2014-03-01T06:46:58.364+0000:And its your responsibility to stop the template when no longer needed.

davsclaus:1393628159:2014-03-01T06:55:59.161+0000:1393628159:2014-03-01T06:55:59.161+0000:If you want Camel to stop the template when you stop CamelContext, then use the addService API on CamelContext."
0,CAMEL-7258,Bug,Minor,"2.12.2, 2.12.3","2.11.5, 2.12.4, 2.13.0","

patch

",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Raúl Kripalani,Alexander Lomov,0,3,2014-02-28 12:59:19+00:00,2014-02-28 19:46:24+00:00,"""elementName"" value is assigned to ""encoding"" field, ""arrayName"" is assigned to ""elementName"" field when using XmlJsonDataFormat(Map<String, String> options) constructor.","githubbot:1393565628:2014-02-28T13:33:48.158+0000:1393565628:2014-02-28T13:33:48.158+0000:GitHub user alexlomov opened a pull request:

    https://github.com/apache/camel/pull/105

    CAMEL-7258 fix.

    CAMEL-7258 fix for XmlJsonDataFormat.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/alexlomov/camel CAMEL-7258_XmlJsonDataFormat

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/105.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #105
    
----
commit 23f5a1d6038a8002308e893c35db2e7f80a780f9
Author: Alexander Lomov <alexandr.lomov@gmail.com>
Date:   2014-02-28T13:26:58Z

    CAMEL-7258 fix.

----

raulvk:1393586926:2014-02-28T19:28:46.471+0000:1393586926:2014-02-28T19:28:46.471+0000:Many thanks for the patch! Applied to master (2.13.x), 2.12.x and 2.11.x branches. 

[~alexlomov] - I forgot to quote your name and thank you in the commit message, but GitHub will hopefully pick up the closure of the pull request, so it will be credited to you!
raulvk:1393586955:2014-02-28T19:29:15.741+0000:1393586955:2014-02-28T19:29:15.741+0000:Also added 2 unit tests for JSON arrays marshalling and unmarshalling.
githubbot:1393587984:2014-02-28T19:46:24.079+0000:1393587984:2014-02-28T19:46:24.079+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/105
"
0,CAMEL-7257,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,2,2014-02-28 07:14:44+00:00,2014-03-12 17:10:20+00:00,"So people can more easily get JndiRegistry / SimpleRegistry / SpringAppCtxRegistry and what else is there.


Currently we wrap that in a property placeholder registry at runtime. So if people call getRegistry they get that back.


So having


JndiRegistry jndi = context.getRegistry(JndiRegistry.class);


allows us to know what type they want, and return the actual registry.


See nabble
http://camel.465427.n5.nabble.com/update-JNDI-camel-registery-at-runtime-tp5748047.html",
0,CAMEL-7256,Bug,Major,2.12.1,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Willem Jiang,Valentin Mayamsin,0,2,2014-02-27 22:00:04+00:00,2014-03-05 03:08:40+00:00,"In case if message.isFault() is true, but no Exception set:



Caused by: java.lang.NullPointerException
        at org.apache.camel.component.cxf.jaxrs.DefaultCxfRsBinding.populateCxfRsResponseFromExchange(DefaultCxfRsBinding.java:76)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.returnResponse(CxfRsInvoker.java:166)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.asyncInvoke(CxfRsInvoker.java:107)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.camel.component.cxf.jaxrs.CxfRsInvoker.performInvocation(CxfRsInvoker.java:57)[202:org.apache.camel.camel-cxf:2.12.1]
        at org.apache.cxf.service.invoker.AbstractInvoker.invoke(AbstractInvoker.java:96)[158:org.apache.cxf.cxf-api:2.7.6]
        ... 23 more","njiang:1393525934:2014-02-28T02:32:14.256+0000:1393525934:2014-02-28T02:32:14.256+0000:We need to check if the exchange has the exception before throw it.
I just committed a patch for it into master, camel-2.12.x and camel-2.11.x."
0,CAMEL-7255,Improvement,Minor,2.12.3,,"
None
",Resolved,Invalid,None,Unassigned,Ron Wheeler,0,2,2014-02-27 18:52:00+00:00,2014-02-28 07:26:46+00:00,"On the page http://camel.apache.org/tutorial-jmsremoting.html it says ""For the purposes of the tutorial a single Maven project will be used for both the client and server. Ideally you would break your application down into the appropriate components.""


Would it not be better to show the right way to do things rather than give an example that the Camel team says is not the right way to do things.


If developers use the example as a model, they will be creating software that the Team thinks is poorly architected.


How much more work is it to break it down the way you recommend.",davsclaus:1393543606:2014-02-28T07:26:46.281+0000:1393543606:2014-02-28T07:26:46.281+0000:Please use the user forum / mailing list for this kind of question
0,CAMEL-7254,Bug,Critical,2.12.2,"2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Matt Nathan,0,3,2014-02-27 17:57:52+00:00,2014-02-28 13:09:41+00:00,"The MailComponent peek setting doesn't work due to the following line:



    private void peekMessage(Message mail) {
        // this only applies to IMAP messages which has a setPeek method
        if (mail.getClass().getName().startsWith(""IMAP"")) {
            try {
                LOG.trace(""Calling setPeek(true) on mail message {}"", mail);
                IntrospectionSupport.setProperty(mail, ""peek"", true);
            } catch (Throwable e) {
                // ignore
                LOG.trace(""Error setting peak property to true on: "" + mail + "". This exception is ignored."", e);
            }
        }
    }




The line that checks the class name for IMAP should be using getSimpleName. Otherwise it's checking the package name instead.


This effectively means that rollback of processing in camel mail is not supported.","githubbot:1393501218:2014-02-27T19:40:18.022+0000:1393501218:2014-02-27T19:40:18.022+0000:GitHub user davidkarlsen opened a pull request:

    https://github.com/apache/camel/pull/103

    CAMEL-7254: Fix IMAP peeking, use simpleName() for classcheck

    Signed-off-by: david <david@davidkarlsen.com>

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/davidkarlsen/camel CAMEL-7254

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/103.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #103
    
----
commit 8af0b6069c414e8c46fb9843d99374d63c7c9581
Author: david <david@davidkarlsen.com>
Date:   2014-02-27T19:38:45Z

    CAMEL-7254: Fix IMAP peeking, use simpleName() for classcheck
    
    Signed-off-by: david <david@davidkarlsen.com>

----

njiang:1393526679:2014-02-28T02:44:39.120+0000:1393526679:2014-02-28T02:44:39.120+0000:Applied the patch with thanks to Matt into master, camel-2.12.x and camel-2.11.x branches.
githubbot:1393564181:2014-02-28T13:09:41.910+0000:1393564181:2014-02-28T13:09:41.910+0000:Github user davidkarlsen closed the pull request at:

    https://github.com/apache/camel/pull/103
"
0,CAMEL-7253,Bug,Major,2.12.3,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Willem Jiang,Franz Forsthofer,0,2,2014-02-27 15:26:22+00:00,2014-03-05 03:08:12+00:00,"if the PGPDataFormat gets an invalid format during the decryption process a NullPointerException is thrown.


The attached patch throws an IllegalArgumentException instead and improves further error situations if a wrong formated input is provided.","njiang:1393527162:2014-02-28T02:52:42.022+0000:1393527162:2014-02-28T02:52:42.022+0000:Hi Franz,

I think here is a code error in your patch in the patched PGPKeyAccessDataFormat.
You add two same check of ""o instanceof PGPEncryptedDataList"" in a if ... else block.
{code}
   @SuppressWarnings(""resource"")
    public Object unmarshal(Exchange exchange, InputStream encryptedStream) throws Exception {
        if (encryptedStream == null) {
            return null;
        }
        InputStream in = PGPUtil.getDecoderStream(encryptedStream);
        PGPObjectFactory pgpFactory = new PGPObjectFactory(in);
        Object o = pgpFactory.nextObject();
        // the first object might be a PGP marker packet 
        PGPEncryptedDataList enc;
        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) pgpFactory.nextObject();
        } else {
            enc = null;
        }
{code}
forsthofer:1393535844:2014-02-28T05:17:24.499+0000:1393535844:2014-02-28T05:17:24.499+0000:You are right. I have a look at this adn will update the patch.
forsthofer:1393541740:2014-02-28T06:55:40.488+0000:1393541740:2014-02-28T06:55:40.488+0000:Hi Willem,

i corrected the error. Please have a look.

Regards Franz
forsthofer:1393636499:2014-03-01T09:14:59.141+0000:1393636499:2014-03-01T09:14:59.141+0000:I corrected an error message.
njiang:1393807375:2014-03-03T08:42:55.468+0000:1393807375:2014-03-03T08:42:55.468+0000:Applied into camel master branch and back port the patch into camel-2.12.x branch with thanks to Franz."
0,CAMEL-7252,Task,Trivial,2.12.3,2.13.0,"

web-site

",Resolved,Fixed,2.13.0,Claus Ibsen,Ron Wheeler,0,2,2014-02-27 14:33:57+00:00,2014-02-28 07:34:01+00:00,"On http://camel.apache.org/tutorial-jmsremoting.html, the sentence describing the Message Endpoint says ""It should be easy to send messages to the Server from the the clients. This is **archived** with Camels powerful Endpoint pattern that even can be more powerful combined with Spring remoting. The tutorial **have** clients using each kind of technique for this."" 
It probably should say ""It should be easy to send messages to the Server from the the clients. This is achieved with Camels powerful Endpoint pattern that even can be more powerful combined with Spring remoting. The tutorial has clients using each kind of technique for this.""","ronatartifact:1393497939:2014-02-27T18:45:39.236+0000:1393497939:2014-02-27T18:45:39.236+0000: Point to Point Channel
We using JMS queues so there are only one receive of the message exchange 
It is difficult to understand what the author actully intended to say.

We using JMS queues so there is only one receive of the message exchange.
Fixes the verb agreemet but still leaves the question about ""only one receive of the message exchange."" actually is trying to describe.

 Event Driven Consumer

Yes the JMS broker is of course event driven and only reacts when the client sends a message to the server.  contains extra words that add nothing and lack punctuation to make is readable

The JMS broker is event driven and is invoked (or activated?) when the client sends a message to the server.

davsclaus:1393543673:2014-02-28T07:27:53.829+0000:1393543673:2014-02-28T07:27:53.829+0000:Hi

If you want to help improve the documentation, then please read this page how you would be able to do so yourself
http://camel.apache.org/contributing.html
davsclaus:1393544028:2014-02-28T07:33:48.285+0000:1393544028:2014-02-28T07:33:48.285+0000:Fixed the couple of sentences.

It would be better if you signed up the ICLA and improved the documentation directly yourself. Thanks. "
0,CAMEL-7251,Bug,Major,2.12.3,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Willem Jiang,Mathieu Boretti,0,3,2014-02-27 14:10:40+00:00,2014-03-12 13:43:27+00:00,"The SqlProducer class use the following lines of code :


ResultSet rs = ps.getResultSet();
                        SqlOutputType outputType = getEndpoint().getOutputType();
                        log.trace(""Got result list from query: {}, outputType={}"", rs, outputType);
                        if (outputType == SqlOutputType.SelectList) 

{
                            List<Map<String, Object>> data = getEndpoint().queryForList(ps.getResultSet());
                           .................................
                        }

 else if (outputType == SqlOutputType.SelectOne) 

{
                            Object data = getEndpoint().queryForObject(ps.getResultSet());
                            .................................
                        }

 else 

{
                            throw new IllegalArgumentException(""Invalid outputType="" + outputType);
                        }


The problem is that the ResultSet is retrieved at the start, and then only used for the log. Later, when the result set is required, a new call to getResultSet is done. It is an issue with HSQL DB (tested with version 2.3.0 and 2.3.2 of HSQL DB), which in this case return null for the second call.


As the ResultSet is already available in a variable ""rs"", I would recommand to use this variable to replace the two last call to ps.getResultSet().


Thanks","githubbot:1393505894:2014-02-27T20:58:14.668+0000:1393505894:2014-02-27T20:58:14.668+0000:GitHub user boretti opened a pull request:

    https://github.com/apache/camel/pull/104

    CAMEL-7251 SqlProducer call twice the getResultSet on the PreparedStatement => This cause issue with HSQLDB (NPE)

    According https://issues.apache.org/jira/browse/CAMEL-7251

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/boretti/camel camel-7251

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/104.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #104
    
----
commit e44f258a2f4fac85dcb67c48a9dc9ae129aa87e8
Author: boretti <mathieu.boretti@gmail.com>
Date:   2014-02-27T20:56:04Z

    SqlProducer call twice the getResultSet on the PreparedStatement => This
    cause issue with HSQLDB (NPE)

----

njiang:1393530443:2014-02-28T03:47:23.624+0000:1393530443:2014-02-28T03:47:23.624+0000:Applied the patch with thanks to Mathieu into master and camel-2.12.x branches.
githubbot:1394603007:2014-03-12T13:43:27.763+0000:1394603007:2014-03-12T13:43:27.763+0000:Github user boretti closed the pull request at:

    https://github.com/apache/camel/pull/104
"
0,CAMEL-7250,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,2,2014-02-27 13:14:56+00:00,2015-09-08 08:53:04+00:00,"When executorServiceRef option is set on the Threads DSL, we should not let users to set pool profile options (poolSize, maxQueueSize, etc) at the same time. When executorServiceRef is set on Threads DSL, mentioned options are ignored as referred ExecutorService uses its own settings.


Users tend to think that they can override thread profile options of referred ExecutorService on the Threads DSL level. We should validate DSL to make Threads DSL thread pool options and executorServiceRef mutually exclusive.","hekonsek:1393482174:2014-02-27T14:22:54.309+0000:1393482174:2014-02-27T14:22:54.309+0000:Fixed in 87105eee5c303af4751661af9480d4a76223b01b.
dsebbagh:1441673584:2015-09-08T08:53:04.382+0000:1441673584:2015-09-08T08:53:04.382+0000:so what is the current alternative on setting a custom threadName to a thread pool profile.
I'm asking that because we have many routes that all (or many) uses the threads() component taken from some profile, but each pool its using its own name, in code: from(a).threads().executorServiceRef(""someProfile"").threadName(""someGroup"").
now from 2.13 we cannot do that , and I am unable to find alternative.

appreciate any help given.
Thanks
Daniel"
0,CAMEL-7249,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.13.0,Grzegorz Grzybek,Grzegorz Grzybek,0,5,2014-02-27 13:08:12+00:00,2014-03-14 08:09:28+00:00,Currently camel-hdfs depends on hadoop-core:1.2.1. Make (working name) camel-hdfs2 component using newest (hadoop 2.3.0) libraries.,"ggrzybek:1393485071:2014-02-27T15:11:11.660+0000:1393485071:2014-02-27T15:11:11.660+0000:What I did so far is:
* a copy of {{camel-hdfs}} to {{camel-hdfs2}} component repackaged into {{org.apache.camel.component.hdfs2}} and {{hdfs2://}} uri
* a change in POM - switch from single {{hadoop-core:1.2.1}} to two deps:
** {{hadoop-common:2.3.0}}
** {{hadoop-hdfs:2.3.0}}
* all tests passed without any changes to the Hadoop API used

Then came the OSGi checking time, I:
* asked Jean-Baptiste Onofré to prepare OSGified versions of hadoop client-side JARs (he was working on that)
* prepared my own snapshot versions of OSGified:
** hadoop-annotations
** hadoop-auth
** hadoop-common
** hadoop-hdfs
* prepared {{camel-hdfs2}} feature to be able to install this into Karaf / test with PAX-Exam. Here's the feature right now:
{code:xml}
  <feature name='camel-hdfs2' version='${project.version}' resolver='(obr)' start-level='50'>
    <feature version='${project.version}'>camel-core</feature>
    <bundle dependency='true'>mvn:commons-lang/commons-lang/2.6</bundle>
    <bundle dependency='true'>mvn:com.google.guava/guava/14.0.1</bundle>
    <bundle dependency='true'>mvn:com.google.protobuf/protobuf-java/2.5.0</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jsch/0.1.50_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.paranamer/2.4_1</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.avro/1.7.3_1</bundle>
    <bundle dependency='true'>mvn:org.apache.commons/commons-compress/1.5</bundle>
    <bundle dependency='true'>mvn:org.codehaus.jackson/jackson-core-asl/1.9.12</bundle>
    <bundle dependency='true'>mvn:org.codehaus.jackson/jackson-mapper-asl/1.9.12</bundle>
    <bundle dependency='true'>mvn:org.xerial.snappy/snappy-java/1.1.0.1</bundle>
    <bundle dependency='true'>mvn:commons-codec/commons-codec/1.8</bundle>
    <bundle dependency='true'>mvn:commons-collections/commons-collections/3.2.1</bundle>
    <bundle dependency='true'>mvn:commons-io/commons-io/1.4</bundle>
    <bundle dependency='true'>mvn:commons-net/commons-net/3.3</bundle>
    <bundle dependency='true'>mvn:org.apache.zookeeper/zookeeper/3.4.5</bundle>
    <bundle dependency='true'>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlenc/0.52_1</bundle>
    <bundle>mvn:org.apache.camel/camel-hdfs2/2.13-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-annotations/2.3.0_1-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-auth/2.3.0_1-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-common/2.3.0_1-SNAPSHOT</bundle>
    <bundle>mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-hdfs/2.3.0_1-SNAPSHOT</bundle>
  </feature>
{code}
* succesfully installed the feature in clean Karaf-2.3.4:
{noformat}
karaf@root> features:install -v camel-hdfs2
Installing feature camel-hdfs2 2.13-SNAPSHOT
Installing feature camel-core 2.13-SNAPSHOT
Installing feature xml-specs-api 2.2.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.activation-api-1.1/2.2.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.stax-api-1.0/2.2.0
Installing bundle mvn:org.apache.servicemix.specs/org.apache.servicemix.specs.jaxb-api-2.2/2.2.0
Installing bundle mvn:org.codehaus.woodstox/stax2-api/3.1.1
Installing bundle mvn:org.codehaus.woodstox/woodstox-core-asl/4.2.0
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jaxb-impl/2.2.1.1_2
Installing bundle mvn:org.apache.camel/camel-core/2.13-SNAPSHOT
Installing bundle mvn:org.apache.camel.karaf/camel-karaf-commands/2.13-SNAPSHOT
Installing bundle mvn:commons-lang/commons-lang/2.6
Installing bundle mvn:com.google.guava/guava/14.0.1
Installing bundle mvn:com.google.protobuf/protobuf-java/2.5.0
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.jsch/0.1.50_1
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.paranamer/2.4_1
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.avro/1.7.3_1
Installing bundle mvn:org.apache.commons/commons-compress/1.5
Installing bundle mvn:org.codehaus.jackson/jackson-core-asl/1.9.12
Installing bundle mvn:org.codehaus.jackson/jackson-mapper-asl/1.9.12
Installing bundle mvn:org.xerial.snappy/snappy-java/1.1.0.1
Installing bundle mvn:commons-codec/commons-codec/1.8
Installing bundle mvn:commons-collections/commons-collections/3.2.1
Installing bundle mvn:commons-io/commons-io/1.4
Installing bundle mvn:commons-net/commons-net/3.3
Installing bundle mvn:org.apache.zookeeper/zookeeper/3.4.5
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xmlenc/0.52_1
Installing bundle mvn:org.apache.camel/camel-hdfs2/2.13-SNAPSHOT
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-annotations/2.3.0_1-SNAPSHOT
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-auth/2.3.0_1-SNAPSHOT
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-common/2.3.0_1-SNAPSHOT
Installing bundle mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.hadoop-hdfs/2.3.0_1-SNAPSHOT
{noformat}

The issues so far:
* I used mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.avro/1.7.3_1. But the default avro bundle version for features in current master of Camel is *1.7.5_1* which has {{sun.misc}} in the list if {{Import-Package}} making camel-hdfs2 unusable outside Oracle JDK (maybe it's not an issue after all)
* {{org.apache.camel:camel-itest-osgi}} can't be used to test both versions of camel-hdfs becuse API's of Hadoop 1 and 2 are mostly the same. It'd be weird to duplicate this itest project just for hdfs2.
njiang:1393527959:2014-02-28T03:05:59.748+0000:1393527959:2014-02-28T03:05:59.748+0000:Can we just make the import of sun.misc be optional in the avro bundle?
If we just want to test the osgi feature, we could add some test on the camel-itest-karaf.
ggrzybek:1393546368:2014-02-28T08:12:48.988+0000:1393546368:2014-02-28T08:12:48.988+0000:Test {{org.apache.camel.itest.karaf.CamelHdfs2Test}} works perfectly!
ggrzybek:1393559500:2014-02-28T11:51:40.957+0000:1393559536:2014-02-28T11:52:16.277+0000:While testing more advanced (than just installation of a feature) scenarion, I've run into problem of split packages.
Generally the hierarchy of dependencies of hadoop2 libs is:
{noformat}
hadoop-annotations
+- hadoop-auth
   +- hadoop-common
      +- hadoop-hdfs
{noformat}
but both hadoop-auth and hadoop-common must export {{org.apache.hadoop.util}} package si we have split packages problem.
ggrzybek:1394502645:2014-03-11T09:50:45.507+0000:1394502645:2014-03-11T09:50:45.507+0000:I just stopped because of [this|http://blog.osgi.org/2013/02/javautilserviceloader-in-osgi.html]...
ggrzybek:1394512033:2014-03-11T12:27:13.581+0000:1394512033:2014-03-11T12:27:13.581+0000:The problem is this hadoop code:
{code:java}
  private static void loadFileSystems() {
    synchronized (FileSystem.class) {
      if (!FILE_SYSTEMS_LOADED) {
        ServiceLoader<FileSystem> serviceLoader = ServiceLoader.load(FileSystem.class);
        for (FileSystem fs : serviceLoader) {
          SERVICE_FILE_SYSTEMS.put(fs.getScheme(), fs.getClass());
        }
        FILE_SYSTEMS_LOADED = true;
      }
    }
  }
...
  public static Class<? extends FileSystem> getFileSystemClass(String scheme,
      Configuration conf) throws IOException {
    if (!FILE_SYSTEMS_LOADED) {
      loadFileSystems();
    }
    Class<? extends FileSystem> clazz = null;
    if (conf != null) {
      clazz = (Class<? extends FileSystem>) conf.getClass(""fs."" + scheme + "".impl"", null);
    }
    if (clazz == null) {
      clazz = SERVICE_FILE_SYSTEMS.get(scheme);
    }
    if (clazz == null) {
      throw new IOException(""No FileSystem for scheme: "" + scheme);
    }
    return clazz;
  }
{code}
which uses either {{java.util.ServiceLoader}} (doesn't work in OSGi) or {{""fs.<scheme>.impl""}} configuration properties.

OK. If I create routes manually, I can do the following:
{code:java}
org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();
conf.setClass(""fs.file.impl"", org.apache.hadoop.fs.LocalFileSystem.class, FileSystem.class);
conf.setClass(""fs.hdfs.impl"", org.apache.hadoop.hdfs.DistributedFileSystem.class, FileSystem.class);

FileSystem.get(""file:///"", conf)
{code}

which caches the mapping {{file: -> org.apache.hadoop.fs.LocalFileSystem.class}} in current classloader (static field {{org.apache.hadoop.fs.FileSystem.CACHE}}).

But it's not that easy with Blueprint based routes...

OK. I'll work more on ways to configure {{HdfsComponent}}.
gangliu:1394562283:2014-03-12T02:24:43.338+0000:1394562283:2014-03-12T02:24:43.338+0000:I'm not sure who's in charge of camel-hdfs feature on Karaf. it seems have the same problem to load the default configuration core-default.xml file, so we have to add this fine into each route bundle to make it work. and this is not easy for blueprint file case, because it requires to change the auto-generated bundle manually. do you will also care about that? (but I prefer to use this camel-hdfs2 component once it presents)
Thanks.
ggrzybek:1394579938:2014-03-12T07:18:58.241+0000:1394582188:2014-03-12T07:56:28.897+0000:OSGi observations:
* commons-cli is *not* optional for HDFS
* find a way to initialize default hadoop properties ({{core-defaults.xml}}, ...)
davsclaus:1394583678:2014-03-12T08:21:18.033+0000:1394583678:2014-03-12T08:21:18.033+0000:IMHO the 1st priority is to get the camel-hdfs2 into the master branch and available for Camel 2.13 release.
Then afterwards we can look at the OSGi issues. Its okay if the 2.13 release does not have a Karaf feature for camel-hdfs2 as we have majority of Camel users, not using OSGi/Karaf and they can benefit from this component.

This gives us time to fix the OSGi issues and have it as part of Camel 2.13.1 release.

githubbot:1394586706:2014-03-12T09:11:46.843+0000:1394586706:2014-03-12T09:11:46.843+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/110

    [CAMEL-7249] camel-hdfs2 component

    Finally I've managed to adapt camel-hdfs component to work with hadoop-2.3.0 libraries.
    Thanks to Jean-Baptiste Onofré for providing hadoop-client-2.3.0 OSGi bundle. It'd be hard to use OSGi bundle per hadoop-*.jar artifact because of split packages. So aggregate `hadoop-client` is ok.
    
    Information:
    * Generally camel-hdfs2 component is repackaged version of camel-hdfs component with Maven dependencies switched to hadoop-common:2.3.0 and hadoop-hdfs:2.3.0
    * Some deprecated API usage was replaced by 2.3.0 equivalents
    * This component works in OSGi environment (e.g., inside Apache Karaf) both as classic bundle and blueprint definition
    * There are some quirks related to OSGi:
    * - Hadoop uses `java.util.ServiceLocator` to find filesystem implementations, so some static code initialization must be performed to replace this mechanism (works both in pure OSGi and Blueprint container)
    * - `Import-Package` is not just a list generated by *maven-bundle-plugin* - it must be adjusted to contain all packages reachable by reflection (e.g. `org.apache.hadoop.hdfs*`)
    * - I didn't touch some bundle versions in parent POM and instead I used hardcoded versions for example in AVRO in `platforms/karaf/features/src/main/resources/features.xml`, as the one used in parent POM requires OSGi package `sun.misc`
    * - I had to tweak `org.osgi.framework.system.packages.extra` property in `camel-itest-osgi/**/itest/karaf/config.properties` to contain Xerces packages
    * The documentation must be added for new component

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-7249

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/110.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #110
    
----
commit af7661abb98b85658c35974bb914aae6602365a4
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-10T14:05:43Z

    [CAMEL-7249] Working version of camel-hdfs2 component
    
    * All unit tests works fine.
    * Usage of all deprecated APIs changed.
    * hdfs://localhost tests work (@Ignored - they require external hdfs
    system)

commit 0b9b3531e4a4bfe82492e3037eb36381ad0b1865
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-11T18:29:30Z

    [CAMEL-7249] Working OSGi tests for camel-hdfs2
    
    There are some issues with this implementation:
    * Import-Packages for `camel-hdfs2` are not just the ones generated by
      maven-bundle plugin. They must contain some packages reachable only by
      reflection (different FileSystem implementations)
    * There is problem with using java.util.ServiceLoader inside OSGi and Hadoop 2
      uses ServiceLoader to discover different FileSystem implementations. For OSGi
      (especially blueprint container) we have to use a hack to populate STATIC
      cache
    * `camel-hdfs2` feature contains some hardcoded versions and for e.g., AVRO a
      downgraded one (1.7.5_1 requires `sun.misc` package - this changed however
      since SMX4-1709)
    * org.osgi.framework.system.packages.extra property in
      camel-itest-osgi/**/itest/karaf/config.properties was added with xerces
      packages
    * documentation has to be added describing hadoop2 specific configuration inside
      OSGi - this changed since hadoop 1.2.1 (using java.util.ServiceLoader)

commit 2131dce4d8df10ec207d74f160e926dd74f068c5
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-12T07:05:36Z

    [CAMEL-7249] Working camel-itest-karaf for camel-hdfs2

commit cd101646c688206f73adac68352d14d264287b30
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-03-12T08:54:29Z

    [CAMEL-7249] Working blueprint tests
    
    All itests now work both with LOCAL and HDFS filesystems

----

ggrzybek:1394586871:2014-03-12T09:14:31.238+0000:1394586871:2014-03-12T09:14:31.238+0000:Finally - I have PR ready.
All the tests works great:
|| ||OSGi||non OSGi||
||LOCAL|(+)|(+)|
||HDFS|(+)|(+)|

I tested the `hdfs://localhost:9000` access in local (two virtual Fedora 20 systems) cluster and everything worked fine.

All I'd like to do is to add new documentation page for camel-hdfs2 component.
ggrzybek:1394586924:2014-03-12T09:15:24.282+0000:1394586924:2014-03-12T09:15:24.282+0000:Karaf feature is ready also - it installs cleanly on fresh Karaf.
githubbot:1394603272:2014-03-12T13:47:52.901+0000:1394603272:2014-03-12T13:47:52.901+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/110

ggrzybek:1394603726:2014-03-12T13:55:26.341+0000:1394603726:2014-03-12T13:55:26.341+0000:Merged to master. Commits: cd10164, 2131dce, 0b9b353, af7661a

ggrzybek:1394603810:2014-03-12T13:56:50.086+0000:1394603810:2014-03-12T13:56:50.086+0000:The docs...
davsclaus:1394755768:2014-03-14T08:09:28.026+0000:1394755768:2014-03-14T08:09:28.026+0000:There is a new camel-hdfs2"
0,CAMEL-7248,Bug,Major,"2.12.2, 2.12.3",None,"
None
",Resolved,Abandoned,None,Unassigned,Thomas Duchatelle,0,2,2014-02-27 11:04:00+00:00,2014-04-27 08:38:23+00:00,"Hi,


I have an issue (NullPointerException) when using module camel dozer on nested classes. Here the stacktrace:



    Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dozerConverterLoader' defined in URL [file:.../applicationContext-camel.xml]: Initialization of bean failed; nested exception is org.apache.camel.spring.GenericBeansException: Error post processing bean: dozerConverterLoader; nested exception is java.lang.NullPointerException
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:529)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:458)
        at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:296)
        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:223)
        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:293)
        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:628)
        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:932)
        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:479)
        at org.apache.camel.test.spring.CamelSpringTestContextLoader.loadContext(CamelSpringTestContextLoader.java:148)
        at org.apache.camel.test.spring.CamelSpringTestContextLoader.loadContext(CamelSpringTestContextLoader.java:85)
        at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContextInternal(CacheAwareContextLoaderDelegate.java:64)
        at org.springframework.test.context.CacheAwareContextLoaderDelegate.loadContext(CacheAwareContextLoaderDelegate.java:91)
        ... 31 more
Caused by: org.apache.camel.spring.GenericBeansException: Error post processing bean: dozerConverterLoader; nested exception is java.lang.NullPointerException
        at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:154)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:396)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1505)
        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:521)
        ... 43 more
Caused by: java.lang.NullPointerException
        at org.dozer.loader.DozerBuilder$MappingBuilder.classA(DozerBuilder.java:135)
        at org.dozer.loader.DozerBuilder$MappingBuilder.classA(DozerBuilder.java:130)
        at org.dozer.loader.xml.XMLParser.parseMapping(XMLParser.java:188)
        at org.dozer.loader.xml.XMLParser.read(XMLParser.java:135)
        at org.dozer.loader.xml.XMLParser.read(XMLParser.java:43)
        at org.dozer.loader.xml.MappingStreamReader.read(MappingStreamReader.java:51)
        at org.dozer.loader.xml.MappingFileReader.read(MappingFileReader.java:58)
        at org.apache.camel.converter.dozer.DozerTypeConverterLoader.loadMappings(DozerTypeConverterLoader.java:267)
        at org.apache.camel.converter.dozer.DozerTypeConverterLoader.init(DozerTypeConverterLoader.java:184)
        at org.apache.camel.converter.dozer.DozerTypeConverterLoader.setCamelContext(DozerTypeConverterLoader.java:310)
        at org.apache.camel.impl.DefaultCamelBeanPostProcessor.postProcessBeforeInitialization(DefaultCamelBeanPostProcessor.java:90)
        at org.apache.camel.spring.CamelBeanPostProcessor.postProcessBeforeInitialization(CamelBeanPostProcessor.java:148)
        ... 46 more




It's generated classes thus my only solution to avoid this problem  it's to map object manually 


Thanks,
Thomas","davsclaus:1393544170:2014-02-28T07:36:10.895+0000:1393544170:2014-02-28T07:36:10.895+0000:Can you build a unit test or sample project that reproduces this? 

And do you have a mapping rule in dozer for a class which is not available in the classpath, and you get a NPE? Or how is your use-case special? 

And what do you mean by nested class? Is it a inlined class or something?
davsclaus:1398559041:2014-04-27T08:37:21.812+0000:1398559041:2014-04-27T08:37:21.812+0000:Can you try with latest Dozer 5.5.1 release
davsclaus:1398559103:2014-04-27T08:38:23.780+0000:1398559103:2014-04-27T08:38:23.780+0000:No response from user."
0,CAMEL-7247,Improvement,Major,2.12.2,2.17.0,"
None
",Resolved,Fixed,2.17.0,Claus Ibsen,Matt Nathan,0,3,2014-02-27 10:15:37+00:00,2016-02-20 11:21:53+00:00,"I have a route that reads from an email inbox, passes the message through a distributed IdempotentConsumer and then processes the mail if it's not been seen before.


The reason I have this setup is because we are running multiple instances of camel all pointing to the same inbox and don't want mails to be processed more than once across the cluster.


Now leaving aside the fact that this may not be the best way to achieve what we want to do, the issue I have is that when the route completes, either by 'aborting' as part of the IdempotentConsumer filtering or by processing the mail successfully, the completion listener added by the MailComponent always gets called.


This is not ideal because it effectively disables any rollback or reprocessing logic that may exist, and was even more problematic for us as we had delete=true set on the MailConsumer, which meant mails were removed under the feet of the node that was actually processing the mail.


What I'd like is a way for the route to complete successfully but for the MailComponent to not do anything to the mail. A state which is currently impossible without overriding the mail component (it either marks as deleted or marks as read, there is no 'don't do anything' option)","mattnathan:1393481960:2014-02-27T14:19:20.714+0000:1393481960:2014-02-27T14:19:20.714+0000:Just had a thought that it would also be ok if you added an inProgressRepository property to the mail consumer, like you have in the GenericFileConsumer style classes.
davsclaus:1426909651:2015-03-21T11:47:31.019+0000:1426909651:2015-03-21T11:47:31.019+0000:Yeah maybe some header or something you can set on the message to control what it should do at the end.
davsclaus:1455933479:2016-02-20T09:57:59.594+0000:1455933479:2016-02-20T09:57:59.594+0000:To ensure some consistent UUID for the mail message you would need to plugin some or calculate some hash of the message. There is no UUID in the mail api. Though maybe the mail server has some uuid header you can use.
davsclaus:1455938513:2016-02-20T11:21:53.681+0000:1455938513:2016-02-20T11:21:53.681+0000:Okay we have now added support for using idempontent repository so you can use that to coordinate concurrent read to the same mailbox, if you use a cluster aware repo."
0,CAMEL-7246,Bug,Major,2.12.2,,"
None
",Closed,Cannot Reproduce,None,Unassigned,Alexey Markevich,4,9,2014-02-27 09:14:54+00:00,2018-04-16 11:04:20+00:00,Looks like Content-Type is taken from request,"amarkevich:1393463803:2014-02-27T09:16:43.932+0000:1393463803:2014-02-27T09:16:43.932+0000:Sample: send JSON; accept XML - actualy JSON Content-Type returned; also Content-Length is wrong.
amarkevich:1393464553:2014-02-27T09:29:13.363+0000:1393464553:2014-02-27T09:29:13.363+0000:Without bindingStyle=SimpleConsumer works as expected
sergey_beryozkin:1393467679:2014-02-27T10:21:19.996+0000:1393467720:2014-02-27T10:22:00.538+0000:Hi Raul, 

Do you think we can block the copying of the input Content-Type to the output *by default*, without having to start blocking the whole headers via the header strategy, when the Content-Type of the response is already available ?

This can be checked on the CXF exchange, exchange.get(org.apache.cxf.message.Message.CONTENT_TYPE) ?

Otherwise we have the side-effects, like the one in the attached test, and another one when we have a wildcard Content-Type in GET requests, this wildcard (\*/\*) overrides the Content-Type of the response derived from @Produces

Thanks, Sergey
 
janhoeve:1402013490:2014-06-06T08:11:30.041+0000:1402014523:2014-06-06T08:28:43.670+0000:I encountered the same issue (but with Content-Length instead of Content-Type).
Wrote a question about it on the mailinglist: http://cxf.547215.n5.nabble.com/Why-is-the-Content-Length-header-copied-from-request-to-response-td5744803.html 

I figured out a workaround:
{code:java}
from(""cxfrs:bean:rsServer?bindingStyle=SimpleConsumer&resourceClasses=my.own.ResourceClass)
.removeHeader(""Content-Length"") // <!-- workaround.. just remove the incoming header so it cannot do any harm
.bean(myBean, ""myMethod"") 
{code}

Is this workaround known to cause any side-effects though?
sergey_beryozkin:1402017252:2014-06-06T09:14:12.362+0000:1402017252:2014-06-06T09:14:12.362+0000:Hi Jan, no side-effect is expected, it should be a clean approach.
ay:1402363270:2014-06-10T09:21:10.848+0000:1402363270:2014-06-10T09:21:10.848+0000:I am commenting on this behavior (the default behavior of passing those headers as desired).

When you have a consumer endpoint, you want to pass those headers to the inside component in the camel route so that they can be used in routing. When you have a producer endpoint, you want to set some headers from the camel route to control the behavior of the producer endpoint. 

This leads to the conclusion that those headers must be transported through the boundary between the endpoint and the route that is attached to. To prevent the wrong or unintended headers from being passed to the endpoint or component down the route, those headers should be removed after they are consumed in the route.

The workaround suggested by Sergey or its similar variant  (e.g., removing all content-* headers or removing all headers except some headers matching some pattern, etc) is a required step that you need in your route to connect two endpoints that share the same headers.

regards, aki
sergey_beryozkin:1402545611:2014-06-12T12:00:11.910+0000:1402545611:2014-06-12T12:00:11.910+0000:Hi Aki,

The problem with Content-Type is that when Simple binding is enabled, it interferes with un-setting the correct output Content-Type already set by the JAX-RS runtime, in cases where we have some kind of HTTP-level negotiation going on. 
So yes, I can understand that the original request Content-Type or Content-Length may need to be visible to the rest of the route. But having such headers copied to outbound CXF message by default is an issue as it is breaking the original consumers who made the request and expect the data back. The fact that it's not happening with the default binding suggests it is specific to Simple Binding only

Cheers, Sergey
ay:1402559405:2014-06-12T15:50:05.169+0000:1402559405:2014-06-12T15:50:05.169+0000:Hi Sergey,
I am confused with your reply. You want to have this removal in SimpleBinding at cxf2camel or camel2cxf? I thought you were suggesting for the use of camel's removeHeader.

I have seen a similar problem with the default binding for other headers, when they are tunneled and passed to the other endpoint (e.g., Content-Encoding interfering with the gzip handling). For the content-length, I thought (or expected) that CXF would be removing it (or updating it if used) when it was passed externally. And I am wondering if CXF should be always automatically updating or correcting those content headers instead of using those externally passed directly.

regards, aki

raulvk:1402561524:2014-06-12T16:25:24.315+0000:1402561590:2014-06-12T16:26:30.437+0000:Hi guys,

Sorry I didn't realise I was mentioned above.

Header propagation has always been a major plus of Camel, and also a major PITA many times. I always recommend customers to implement a common HeaderFilterStrategy to fully control and lock down possible these oddities. After all, Camel is an integration platform. We could be connecting camel-http accepting text/plain as a consumer, with camel-cxfrs as a producer, dispatching to an endpoint that requires JSON. Different wire formats, i.e. different Content-Types and Accepts at each edge.

It's quite normal for a mediation platform to have to intermediate between two different wireformats. And unfortunately Camel is not intuitive in this sense because of header propagation. You get this effect with Content-Type, Accept, Accept-Encoding, Content-Length, etc. I've seen this issue with many, many of these protocol headers which are normally calculated automatically by the underlying stack.

Now – after this rant – let's discuss solutions ;-)

# Make it very clear in the documentation of ""vulnerable"" components that headers are propagated and weird interactions like this one could happen.
# Suppress propagating these headers in all vulnerable components, by adjusting their default header filter strategies => I would -1 this one because it's a breaking change, and as a user I may want to know if the client sent JSON or HTTP by inspecting the Content-Type.
# Make the suppression optional by providing a switch in all HeaderFilterStrategies (not just HTTP). However, we have the problem of deciding which headers to suppress and which not, and in what direction. However, it gets complicated: I may not want to suppress the Content-Type in a consumer when receiving the request, but I would like ignore any existing Content-Type headers when I send back the response, so that the stack can decide for itself – this is what would help the OP in this case.

As you can see, the level of customisation required to make any ""auto-magic"" or ""intelligent"" logic work defeats the purpose of making it automatic in the first place...

I'm sure there are many more creative solutions we can put to work. But I have little time now to continue thinking :( Perhaps we could take a look at how other frameworks handle this header propagation across adapters?

Hope this helps, and it doesn't confuse everybody more :)

Regards,
Raúl.
raulvk:1402562845:2014-06-12T16:47:25.335+0000:1402562884:2014-06-12T16:48:04.256+0000:Another possibility (and this is the one I like the most) entails qualifying ALL protocol headers transmitted through a boundary in some manner, for example by storing the headers as a {{Map<String, Object>}} under header keys: 

{code}
[endpointId].protocolHeaders.[input/output]
{code}

That way, if you're route is like this:

{code}
from(""jetty:http://0.0.0.0:9090"").id(""jettyConsumer"")
   .to(""cxfrs:bean:blablabla"").id(""cxfrsProducer"");
{code}

Camel could store the protocol headers under:
* jettyConsumer.protocolHeaders.input => incoming HTTP headers from the outside world.
* cxfrsProducer.protocolHeaders.input => place where to look to pick up headers to be sent by the producer.
* cxfrsProducer.protocolHeaders.output => outgoing HTTP headers from producer.
* jettyConsumer.protocolHeaders.output => place where to look to pick up headers to send to the original client.

Like this, there's no confusion anymore. Because a big flaw of the current model is that incoming and outgoing headers – no matter which endpoint they appeared from – are all being dumped in the same place with the same names. And there's no traceability. Therefore, you can end up with a Content-Type from one endpoint and Content-Length from another. And that, in my opinion, is what needs to be fixed first: how headers are scoped.

It's a major change, though, not an easy fix.

Sorry for the rant again :D

Regards,
Raúl.
sergey_beryozkin:1402621339:2014-06-13T09:02:19.889+0000:1402621339:2014-06-13T09:02:19.889+0000:Hi Aki

Let me clarify the actual issue here briefly mentioned in my first comment above.
Consider the fact that many clients expecting some data back add a redundant wildcard Content-Type, for example:

Content-Type: */*
Accept: application/json, application/xml;q=0.8

and we have a JAX-RS method:

@Produces(""application/xml"", ""application/json"")

Only the runtime will know what the correct response Content-Type is here, even in this simple case figuring out the correct response CT manually is not a good idea.
CXF knows the response CT when it matched a request URI against a given request method, still on the in chain, and saves it on the exchange as I noted above for the out chain to set it.

But we have the incoming ""*/*"" overriding the correctly calculated response Content-Type. Alexey described another scenario.
We can keep adding removeHeader() for Content-Type and Content-Length. 
But is it ever a good idea to put these 2 incoming specific headers into the outgoing CXF chain ?

Sergey







sergey_beryozkin:1402621497:2014-06-13T09:04:57.253+0000:1402621497:2014-06-13T09:04:57.253+0000:Hi Raúl

Many thanks for the clarifications and ideas :-).

Let me clarify something first before I can try and contribute something positive :-).

As far as this JIRA issue is concerned, why do you think we do not see this issue when using a DefaultBinding (as mentioned by Alexei) but only a SimpleBinding ?

Cheers, Sergey




ay:1402628083:2014-06-13T10:54:43.996+0000:1402628083:2014-06-13T10:54:43.996+0000:Hi Sergey,
I didn't see the example/test code attached to this ticket earlier. My fault.
I thought we were talking about the tunneling scenario like from:cxfrs -->camel-> to:cxfrs and some interfering props passed to the from-ep to the to-el.
I just saw the test code and this was doing a plain request-response. It looks like there is rather an issue in the simple binding. I'll take a quick look at it.
regards, aki
raulvk:1402630134:2014-06-13T11:28:54.259+0000:1402630134:2014-06-13T11:28:54.259+0000:Hi [~ay],

The issue lies here:

http://grepcode.com/file/repo1.maven.org/maven2/org.apache.camel/camel-cxf/2.12.0/org/apache/camel/component/cxf/jaxrs/SimpleCxfRsBinding.java#181

The Simple Binding propagates the message headers from Camel into the JAX-RS Response headers. However, since headers are not contextualised (as I explained above) and they are just ""mished-mashed"", the Content-Type from the original requests ends up being propagated back in the response.

The CXF stack then uses this Content-Type to pick the MessageBodyWriter and ends up serialising the response in the same wireformat as the request, even if the client demanded a different one with ""Accept"".

In my opinion there is no black or white solution, nor easy solution. We want to allow users to set headers in their routes that are sent back to the client, yet this facility is colliding with Camel's way of dumping all headers in the same place.

For an easy solution out, we could add a parameter to SimpleConsumer: headerPropagationPolicy, with the following values:
* none => never propagate any headers.
* propagate => apply header filter strategy (today's behaviour).

This parameter allows some level of tuning, and, most importantly, makes the user aware upfront that if they want to propagate at least 1 header, they will have to configure a header filter strategy.

[~amarkevich], for now you can solve this issue simply by removing the Content-Type header before the end of the route.

Regards,
Raúl.
ay:1402633084:2014-06-13T12:18:04.078+0000:1402634094:2014-06-13T12:34:54.056+0000:Hi Sergey, Raul,
for SimpleBinding has the following response transfer code
    public Object populateCxfRsResponseFromExchange(org.apache.camel.Exchange camelExchange, Exchange cxfExchange) throws Exception {
        Object base = super.populateCxfRsResponseFromExchange(camelExchange, cxfExchange);
        return buildResponse(camelExchange, base);
    }

and this buildResponse(…) is making the difference in the behavior.
This buildResponse takes the plain response into a javax.ws.rs.core.Response using cxf's ResponseBuilder. Additionally, it is adding all the external headers like content-length (unless they are blocked by the header-stragety) to the builder. And this leads to those headers being later directly serialized into the response message.

So, I am wondering three things.

1. do we need this header insertion part there if it is not there in the default binding? (or at least setting the content-length there does not make sense when setting the content entity that doesn't match the content length).
2. for the case when the body is already an instance of Response, which may already have headers set, do we need the header addition code in this case as well?
3. if the headers are supposed to be added for SimpleBinding, can we do the consistency check in CXF to avoid this issue? In other words, what would be the desired behavior in the following case.

You are doing a plain cxf jaxrs without camel and building a response using the ResponseBuilder and inconsistently setting some properties, as

builder.entity(""foo"");
…
builder.header(""Content-Length"", ""9"")
…
builder.build()

Should this inconsistency be recognized in the builder itself to correct it and produce a consistent Response object?

regards, aki
ay:1402634934:2014-06-13T12:48:54.803+0000:1402634934:2014-06-13T12:48:54.803+0000:Hi Raul,
thanks. I didn't see your reply when I pushed the Add button :)
You answered part of my questions and I agree with this default transport of headers in general.
However, if you could get more concrete on my questions 1's length issue and question 2, that would be appreciated.
thanks.
regards, aki


sergey_beryozkin:1402635818:2014-06-13T13:03:38.335+0000:1402635818:2014-06-13T13:03:38.335+0000:Hi Aki

Re your question 3, I doubt we can prevent users setting the wrong Content-Length, it can become quite hairy :-), we might be able to prevent the inconsistency for only limited set of entity types like byte[] or String...It is not recommended, explicitly setting Content-Length.

I guess we have plenty of options at Camel level to control it.
At the end of the day it is not a big issue.

I'd go for preventing copying an in Content-Length from Camel to out CXF headers, it is probably safe enough.
Re Content-Type: probably safe blocking copying it it the out CXF chain too, but I won't insist,

Cheers, Sergey


nsarathk:1487279997:2017-02-17T05:19:57.069+0000:1487280012:2017-02-17T05:20:12.652+0000:Has this been solved in the latest 3.0 version ?
onders:1523833638:2018-04-16T07:07:18.184+0000:1523833638:2018-04-16T07:07:18.184+0000:Tested with latest versions of all dependencies. Could not see the problem. Content-Length is not set all and Content-Type is set correctly. Could this be resolved already on CXF side? [~sergey_beryozkin] or [~amarkevich] could you confirm and we can close this issue? Not sure if it is already fixed (somehow) on Camel side too. [~davsclaus] or [~ffang] may confirm.

 
davsclaus:1523835026:2018-04-16T07:30:26.572+0000:1523835026:2018-04-16T07:30:26.572+0000:Thanks Onder.

If we cannot reproduce this then lets close it. This ticket is very old.
onders:1523847835:2018-04-16T11:03:55.279+0000:1523847835:2018-04-16T11:03:55.279+0000:closing. not reproducable anymore."
0,CAMEL-7245,New Feature,Major,None,None,"
None
",Closed,Invalid,2.13.0,Claus Ibsen,Claus Ibsen,0,3,2014-02-27 08:26:47+00:00,2014-02-27 08:57:27+00:00,"We have a PR for this
https://github.com/apache/camel/pull/87","cemmersb:1393462096:2014-02-27T08:48:16.495+0000:1393462096:2014-02-27T08:48:16.495+0000:Guys, the camel-couchbase component is hosted in camel-extra (see [1], not ASF camel). Therefore it does not make sense to open a pull request agains ASF Camel.

Please provide a patch and file a JIRA in [2]

[1] https://code.google.com/a/apache-extras.org/p/camel-extra/
[2] https://camel-extra.atlassian.net/secure/Dashboard.jspa
ugol:1393462212:2014-02-27T08:50:12.505+0000:1393462212:2014-02-27T08:50:12.505+0000:Yep, I'll be busy until friday, I'll write the documentation in the weekend
davsclaus:1393462639:2014-02-27T08:57:19.275+0000:1393462639:2014-02-27T08:57:19.275+0000:Not ASF should be logged and tracked at camel-extra"
0,CAMEL-7244,Bug,Major,2.13.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Franz Forsthofer,0,2,2014-02-26 15:45:08+00:00,2014-02-27 07:26:05+00:00,"If you verify a PGP signature with a subkey which should have a certain User ID, then you run into an error.


Reason: The implementation has not taken into account that the subkey has no User ID on its own. One must consider the User ID of its master/primary key.",njiang:1393457165:2014-02-27T07:26:05.917+0000:1393457165:2014-02-27T07:26:05.917+0000:Applied the patch into camel master branch with thanks to Franz.
0,CAMEL-7243,Bug,Major,2.12.3,,"
None
",Resolved,Cannot Reproduce,None,Claus Ibsen,Venkatesh,0,2,2014-02-26 04:24:48+00:00,2014-02-26 07:05:54+00:00,No Desc,"davsclaus:1393369526:2014-02-26T07:05:26.859+0000:1393369526:2014-02-26T07:05:26.859+0000:Works fine for me.

Can you use the user forum / user mailing list for getting help. 

See
http://camel.apache.org/discussion-forums.html
http://camel.apache.org/support"
0,CAMEL-7242,Bug,Major,2.10.7,None,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Oleg Kozlov,0,3,2014-02-26 02:04:16+00:00,2014-02-26 06:52:46+00:00,"I have a body object of type ArrayList<String>, the following Java DSL when() condition incorrectly evaluates to ""false"" in Camel version 2.10.7. In versions 2.10.3 and 2.12.2 it evaluates correctly to ""true"".


when(body().isInstanceOf(Collection.class))


Using Java 6.","njiang:1393353574:2014-02-26T02:39:34.006+0000:1393353574:2014-02-26T02:39:34.006+0000:We don't provide community support for camel-2.10.x. Please update your Camel version for it.
oleg.kozlov:1393353743:2014-02-26T02:42:23.805+0000:1393353743:2014-02-26T02:42:23.805+0000:That's ok, as long as this bug does not get merged to 2.12 branch.

Thanks!
davsclaus:1393368766:2014-02-26T06:52:46.513+0000:1393368766:2014-02-26T06:52:46.513+0000:Fixed in 2.12 onwards. 

Camel 2.10.x is EOL"
0,CAMEL-7241,Bug,Major,2.12.3,"2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Aaron Whiteside,0,2,2014-02-25 22:50:38+00:00,2014-02-28 07:36:44+00:00,"Camel's conversion logic for ByteBuffer's to String's has a bug where camel uses a ByteBuffers capacity() instead of it's limit().


If you allocate a large byte buffer and only partially fill it with data, and use camel to convert this into a string, camel tries to convert all the bytes, even the non-used ones.


This unit test reproduces this bug.



    @Test
    public void testByteBufferToStringConversion()
    {
        String str = ""123456789"";
        ByteBuffer buffer = ByteBuffer.allocate( 16 );
        buffer.put( str.getBytes() );

        Exchange exchange = new DefaultExchange( context() );
        exchange.getIn().setBody( buffer );
        assertEquals( str, exchange.getIn().getBody( String.class ) );
    }","njiang:1393353359:2014-02-26T02:35:59.780+0000:1393353359:2014-02-26T02:35:59.780+0000:Applied the patch into camel master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7240,Bug,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Unassigned,Henryk Konsek,0,1,2014-02-25 16:52:33+00:00,2014-02-25 16:54:05+00:00,"Hi,


ThreadsProcessor uses rejectedPolicy field to determine if it should set the exception on the exchange. 



boolean abort = ThreadPoolRejectedPolicy.Abort == rejectedPolicy;
if (abort) {
  exchange.setException(new RejectedExecutionException());
}




Unfortunately ThreadsDefinition reads rejectedPolicy only if the latter is set directly on the Threads definition level. If getExecutorServiceRef is set on the ThreadsDefinition, the rejectedPolicy value from the referenced thread pool profile is ignored.



ThreadsProcessor thread = ...;
...
thread.setRejectedPolicy(getRejectedPolicy());




That leads to the situations when task is rejected, but exception is not set on the exchange, because ThreadsProcessor is unaware of the effective rejection policy.


The following configuration demonstrates the issue:



<threadPool id=""bigPool"" poolSize=""1"" maxPoolSize=""1"" threadName=""foo"" maxQueueSize=""1"" rejectedPolicy=""Abort""/>
...
<threads executorServiceRef=""bigPool"" ...>
...




ThreadsProcessor should resolve the rejection policy from the thread pool profile if one is referenced with the ExecutorServiceRef option.",hekonsek:1393318445:2014-02-25T16:54:05.199+0000:1393318445:2014-02-25T16:54:05.199+0000:Fixed in 77bbb6e2783cb552fb735ce6caeb711bec8eb472.
0,CAMEL-7239,Bug,Major,"2.11.3, 2.12.3","2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Willem Jiang,0,1,2014-02-24 04:45:58+00:00,2014-02-24 07:16:43+00:00,"SchemaFactory is not thread safe, we need to do addition work in ValidatorProcessor to avoid the threads issue.","njiang:1393197403:2014-02-24T07:16:43.413+0000:1393197403:2014-02-24T07:16:43.413+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7238,Sub-task,Minor,None,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Willem Jiang,Filippo Balicchia,0,2,2014-02-22 22:17:35+00:00,2014-03-05 03:09:45+00:00,No Desc,"fbalicchia:1393079454:2014-02-22T22:30:54.734+0000:1393079454:2014-02-22T22:30:54.734+0000:Please see the attach for component base64 itest
njiang:1393960185:2014-03-05T03:09:45.555+0000:1393960185:2014-03-05T03:09:45.555+0000:Applied the patch into camel-2.12.x and master branches with thanks to Filippo."
0,CAMEL-7236,Task,Minor,None,,"
None
",Closed,Duplicate,None,Unassigned,Filippo Balicchia,0,2,2014-02-22 19:15:31+00:00,2014-02-23 09:51:41+00:00,No Desc,davsclaus:1393120301:2014-02-23T09:51:41.406+0000:1393120301:2014-02-23T09:51:41.406+0000:Duplicate of CAMEL-7214
0,CAMEL-7235,Task,Major,None,,"
None
",Closed,Duplicate,None,Unassigned,Filippo Balicchia,0,1,2014-02-22 19:12:53+00:00,2014-02-22 22:21:24+00:00,No Desc,
0,CAMEL-7234,Improvement,Minor,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Sergey Beryozkin,0,1,2014-02-21 21:55:02+00:00,2022-09-02 08:50:12+00:00,"If we have two DataFormat implementations and say two different HTTP media types then it is not possible to write a generic code selecting the right format matching the current media type. While this is specific to the marshalling/unmarshalling, the problem can easily be generalized


Proposal: add a new method, ""Set<String> getSupportedFormats()"" in the next major Camel release, and document it as a migration issue for users implementing custom Data formats not shipped with Camel be aware of the upgrade.",
0,CAMEL-7233,Improvement,Trivial,2.10.7,,"
None
",Resolved,Won't Fix,None,Unassigned,metatech,0,2,2014-02-21 11:39:32+00:00,2014-02-23 10:06:07+00:00,"When stopping ServiceMix with about 40 Camel Spring bundles, a NoSuchBeanException is logged several hundred times, which generates a few megabytes in the logs.
This patch catches the exception to avoid it.



2014-02-21 11:59:33,645 | WARN  | Timer-2          |  | faultManagementLifecycleStrategy | Could not unregister error handler: org.apache.camel.management.mbean.ManagedErrorHandler@5110989a as ErrorHandler MBean.
org.apache.camel.NoSuchBeanException: Cannot lookup: evenementsErrorHandler from registry: org.apache.camel.spring.spi.ApplicationContextRegistry@6f4f89ed with expected type: interface org.apache.camel.builder.ErrorHandlerBuilder due: Error creating bean with name 'eventsErrorHandler': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:57)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:62)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.util.CamelContextHelper.lookup(CamelContextHelper.java:108)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.util.CamelContextHelper.mandatoryLookup(CamelContextHelper.java:128)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.DefaultRouteContext.mandatoryLookup(DefaultRouteContext.java:146)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.builder.ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(ErrorHandlerBuilderRef.java:125)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.management.DefaultManagementNamingStrategy.getObjectNameForErrorHandler(DefaultManagementNamingStrategy.java:140)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.management.ManagedManagementStrategy.getManagedObjectName(ManagedManagementStrategy.java:102)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.management.ManagedManagementStrategy.unmanageObject(ManagedManagementStrategy.java:135)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.unmanageObject(DefaultManagementLifecycleStrategy.java:790)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.management.DefaultManagementLifecycleStrategy.onErrorHandlerRemove(DefaultManagementLifecycleStrategy.java:589)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.RouteService.stopChildService(RouteService.java:333)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.RouteService.doStop(RouteService.java:212)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:74)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.support.ChildServiceSupport.stop(ChildServiceSupport.java:98)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.util.ServiceHelper.stopService(ServiceHelper.java:112)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:158)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1751)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1776)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1764)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1627)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:102)[121:org.apache.camel.camel-core:2.10.7]
	at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.destroy(AbstractCamelContextFactoryBean.java:421)[173:org.apache.camel.camel-spring:2.10.7]
	at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:184)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:487)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:463)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:431)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1048)[113:org.springframework.context:3.0.7.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.destroyBeans(AbstractOsgiBundleApplicationContext.java:204)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1022)[113:org.springframework.context:3.0.7.RELEASE]
	at org.springframework.osgi.context.support.AbstractOsgiBundleApplicationContext.doClose(AbstractOsgiBundleApplicationContext.java:197)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.access$501(AbstractDelegatedExecutionApplicationContext.java:69)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext$2.run(AbstractDelegatedExecutionApplicationContext.java:214)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.util.internal.PrivilegedUtils.executeWithCustomTCCL(PrivilegedUtils.java:85)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.normalClose(AbstractDelegatedExecutionApplicationContext.java:210)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.osgi.extender.internal.dependencies.startup.DependencyWaiterApplicationContextExecutor.close(DependencyWaiterApplicationContextExecutor.java:374)[130:org.springframework.osgi.extender:1.2.1]
	at org.springframework.osgi.context.support.AbstractDelegatedExecutionApplicationContext.doClose(AbstractDelegatedExecutionApplicationContext.java:236)[126:org.springframework.osgi.core:1.2.1]
	at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:970)[113:org.springframework.context:3.0.7.RELEASE]
	at org.springframework.osgi.extender.internal.activator.ContextLoaderListener$1.run(ContextLoaderListener.java:522)[130:org.springframework.osgi.extender:1.2.1]
	at org.springframework.osgi.extender.internal.util.concurrent.RunnableTimedExecution$MonitoredRunnable.run(RunnableTimedExecution.java:60)[130:org.springframework.osgi.extender:1.2.1]
	at org.springframework.scheduling.timer.DelegatingTimerTask.run(DelegatingTimerTask.java:70)[113:org.springframework.context:3.0.7.RELEASE]
	at java.util.TimerThread.mainLoop(Timer.java:512)[:1.6.0_45]
	at java.util.TimerThread.run(Timer.java:462)[:1.6.0_45]
Caused by: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'eventsErrorHandler': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:209)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:196)[111:org.springframework.beans:3.0.7.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1079)[113:org.springframework.context:3.0.7.RELEASE]
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:43)[173:org.apache.camel.camel-spring:2.10.7]
	at org.apache.camel.impl.CompositeRegistry.lookup(CompositeRegistry.java:51)[121:org.apache.camel.camel-core:2.10.7]
	... 42 more",davsclaus:1393121167:2014-02-23T10:06:07.017+0000:1393121167:2014-02-23T10:06:07.017+0000:This is not a solution to just debug log that instead. There was a problem with shutting down cleanly and the user should be ware of this.
0,CAMEL-7232,Bug,Minor,2.12.2,,"
None
",Resolved,Fixed,None,Unassigned,Andrzej Gdula,0,2,2014-02-21 10:44:14+00:00,2014-02-21 12:34:18+00:00,description of pollStrategy of File2 endpoint and Polling Consumer parameter is documentet to be an instance of org.apache.camel.PollingConsumerPollStrategy. There is no such class. It should be  org.apache.camel.spi.PollingConsumerPollStrategy,"hekonsek:1392957200:2014-02-21T12:33:20.040+0000:1392957258:2014-02-21T12:34:18.104+0000:Thanks Andrew. Well spotted :) . I've just fixed it - the changes should be visible on the page within next 24 hours.

Cheers."
0,CAMEL-7231,Improvement,Major,None,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Richard Kettelerij,Richard Kettelerij,0,2,2014-02-21 06:38:07+00:00,2014-03-21 08:49:50+00:00,Add support for receiving attachments to the CamelSpringWsConsumer. See  http://camel.465427.n5.nabble.com/Spring-WS-Consumer-and-Attachments-td5747567.html,"rkettelerij:1395019021:2014-03-17T09:17:01.969+0000:1395019021:2014-03-17T09:17:01.969+0000:Patch ready, will commit after 2.13 is cut.
rkettelerij:1395038804:2014-03-17T14:46:44.232+0000:1395038804:2014-03-17T14:46:44.232+0000:Pushed to master
njiang:1395362969:2014-03-21T08:49:29.993+0000:1395362969:2014-03-21T08:49:29.993+0000:I just merged the patch into camel-2.13.x and camel-2.12.x branches."
0,CAMEL-7230,Bug,Major,2.12.2,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Christian Posta,Christian Posta,0,1,2014-02-20 16:45:45+00:00,2014-02-24 17:59:52+00:00,"Reproduced here:


https://github.com/christian-posta/camel-sandbox/blob/master/camel-2.12.2-issues/src/test/java/posta/SjmsTestFromMailingList.java","ceposta:1392900698:2014-02-20T20:51:38.112+0000:1392900698:2014-02-20T20:51:38.112+0000:Fixed with this commit: 
https://git-wip-us.apache.org/repos/asf/camel.git/?p=camel.git;a=commitdiff;h=5d1eebccce0e88e053be100c401a97ecb10e8908"
0,CAMEL-7229,Bug,Minor,2.12.1,"2.11.5, 2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.11.5, 2.12.4, 2.13.0",Willem Jiang,Alexey Markevich,0,3,2014-02-20 14:44:52+00:00,2014-03-03 10:06:28+00:00,"Bean configuration:
org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean cf_cCXFRS_1 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();
cf_cCXFRS_1.setBus(customBus);


Route:
.to(""cxfrs://bean://cCXFRS_1"")


But at
org.apache.camel.component.cxf.jaxrs.CxfRsProducer.invokeHttpClient(Exchange)
cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());","sergey_beryozkin:1393384316:2014-02-26T11:11:56.463+0000:1393384653:2014-02-26T11:17:33.859+0000:Hi Willem, can we just remove this call where the custom producer bus is lost ?

If this may be done for a reason to take care of some scenarios (where using the thread default bus is not OK), can we, in CxfRsProducer do something like:

{code:java}

private static class ProducerJAXRSClientFactoryBean extends JAXRSClientFactoryBean {

   public isBusSet() {
       return super.bus != null;
   }
}
{code}

and use ProducerJAXRSClientFactoryBean instead of JAXRSClientFactoryBean within the producer code and then

{code:java}

if (!cfb.isBusSet()) {
    cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());
}

{code}

Introducing the custom bean may be the safest bet...

What do you think ?
Sergey
sergey_beryozkin:1393387130:2014-02-26T11:58:50.829+0000:1393387130:2014-02-26T11:58:50.829+0000:If the custom bean is introduced then it can be dropped once CXF-5579 is resolved, we'd check ""if (cxf.getBus(false) == null)""
njiang:1393462216:2014-02-27T08:50:16.479+0000:1393462216:2014-02-27T08:50:16.479+0000:Hi Sergey,

The below code of CxfRsProducer just make sure the bus setting on the cxfrs endpoint can take effect.
{code}
 cfb.setBus(((CxfRsEndpoint)getEndpoint()).getBus());
{code}
Current work around of setting custom bus is using option of ""bus=#MyBus"" for the cxfrs enpdoint the URI. 
If we check the ""if (cxf.getBus(false) == null)"", we may lost the control of setting the custom bus from the URI.

I think the better solution is we set the cfb bus when the cxfrs enpdoint is not using the default bus.
Any thought?

Willem

sergey_beryozkin:1393471712:2014-02-27T11:28:32.380+0000:1393471729:2014-02-27T11:28:49.012+0000:Hi Willem 

May be ""If cxfrs endpoint is not using the default bus and if the client bean has either null or the default bus"" ?

This way if we have a case where someone sets a custom, non-default bus on the client bean then it will not be overridden, but if it is null or it is a default bus then we can safely copy the custom cxfrs endpoint bus ?

Cheers, Sergey


amarkevich:1393473336:2014-02-27T11:55:36.209+0000:1393473553:2014-02-27T11:59:13.199+0000:Same time Consumer works as expected (I used preconfigured beans)
njiang:1393527624:2014-02-28T03:00:24.204+0000:1393527624:2014-02-28T03:00:24.204+0000:Hi Sergey, 

In camel-cxf we prefer the rule that the URI option can override the spring or blueprint configuration.
As the client bean's getBus can provides the default bus by default, we don't need to do anything on the client bean if the cxfrs endpoint is not set with a customer bus.

Regards,

Willem


njiang:1393527739:2014-02-28T03:02:19.750+0000:1393527739:2014-02-28T03:02:19.750+0000:Hi Alexey,

I just checked the code and found we don't override the bus setting of the server bean. I will clean up the code once we come to an agreement on the CxfRsProducer.

Regards,

Willem
sergey_beryozkin:1393553464:2014-02-28T10:11:04.323+0000:1393553464:2014-02-28T10:11:04.323+0000:Hi Willem

Sure, the idea in your original comment above [1] sounds OK. So,

1. If the route sets a custom bus on the client bean then it will still be protected/kept in place as long as the the endpoint uses a default bus or the same custom bus.
(this will work after your proposed fix)

2. If we have the client bean using the default bus and we have the endpoint using a custom bus as in ""bus=#MyBus"" then the custom bus will be set on the client bean, as per the camel-cxf rules, this is fine too.
(this works now and will work after your proposed fix)

There's only one case I'm concerned about:
3. The client and the server have both custom but different buses. 

That is why I thought that the rule "" (a)Set the client bus only if the cxfrs endpoint is not using the default bus and (b) the client bean has the default bus"" will ensure 1. and 2. cases are still supported as expected today, but we the client does set its own unique bus then this bus is protected. It will probably make sense for WS producers too...
Note (a) - is what you propose, which is good, and (b) is what I propose to add...

Do you think it makes sense to keep the non-default custom buses on the client bean ? We have it working right now by extending the client bean and blocking the overriding of the bus, so if 3, is not implemented then it won't be an issue for us, but I wonder, does it makes sense to preserve the custom client buses or not

Thanks, Sergey





sergey_beryozkin:1393553785:2014-02-28T10:16:25.917+0000:1393553785:2014-02-28T10:16:25.917+0000:Yes, we've confirmed we a client and a server using their own, different custom bus instances, this is why it can be handy to have the client custom bus preserved; should be useful for the WS producer too IMHO.

Thanks, Sergey
njiang:1393811008:2014-03-03T09:43:28.257+0000:1393811008:2014-03-03T09:43:28.257+0000:Hi Sergey,

Thanks for you comments, I just remove the default bus creation in the CxfRsEndpoint, so we don't need to setup the default bus to the JAXRSClientFactoryBean or JAXRSServerFactoryBean any more.
In this way, the bus setting of JAXRSClientFactoryBean and JAXRSServerFactoryBean won't be override if we don't set up customer bus on the CxfRsEndpoint.

Regards,

Willem
njiang:1393812388:2014-03-03T10:06:28.410+0000:1393812388:2014-03-03T10:06:28.410+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7198,Bug,Major,2.12.2,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Willem Jiang,Alexey Markevich,0,2,2014-02-12 12:57:19+00:00,2014-02-14 08:17:07+00:00,"Route: from(""cxfrs://.."").setBody().simple("".."");


If .to(""log:any"") added then response is 200",njiang:1392336973:2014-02-14T08:16:13.175+0000:1392336973:2014-02-14T08:16:13.175+0000:This issue has been fixed by CAMEL-7061.
0,CAMEL-7197,Bug,Major,2.12.2,,"
None
",Resolved,Not A Problem,None,Unassigned,Alexey Markevich,0,4,2014-02-12 11:49:51+00:00,2014-02-13 06:50:27+00:00,"route: from(cxfrs consumer).setBody(payload).to(cxf producer)
cxfrs set 'operationName' and cxf producer used it","njiang:1392244382:2014-02-13T06:33:02.076+0000:1392244382:2014-02-13T06:33:02.076+0000:As the header is useful for the camel route, and camel supports to use message header to override the setting of the CXF endpoint,  we cannot just remove the header simply in the cxf producer.
You can use removeHeader() to remove the operationName header before routing the message to cxf endpoint.

davsclaus:1392245411:2014-02-13T06:50:11.766+0000:1392245411:2014-02-13T06:50:11.766+0000:Yes this is working as designed

See for example this FAQ
http://camel.apache.org/how-to-remove-the-http-protocol-headers-in-the-camel-message.html"
0,CAMEL-7196,Bug,Major,2.12.2,,"
None
",Resolved,Cannot Reproduce,None,Raúl Kripalani,Alexey Markevich,0,3,2014-02-12 11:14:22+00:00,2014-02-27 13:39:25+00:00,No Desc,"amarkevich:1392174888:2014-02-12T11:14:48.042+0000:1392174888:2014-02-12T11:14:48.042+0000:testGetCustomerWithQuery() added
raulvk:1392175733:2014-02-12T11:28:53.368+0000:1392175733:2014-02-12T11:28:53.368+0000:[~amarkevich] - did you try using the Simple Consumer binding style of Camel CXFRS? See http://camel.apache.org/cxfrs.html#CXFRS-ConsumingaRESTRequest-SimpleBindingStyle.
amarkevich:1392176381:2014-02-12T11:39:41.208+0000:1392176381:2014-02-12T11:39:41.208+0000:if @QueryParam method argument notation used then the first argument value goes to message body;
when more than one arguments specified - only first accessible (as described above)
raulvk:1392177043:2014-02-12T11:50:43.693+0000:1392177043:2014-02-12T11:50:43.693+0000:[~amarkevich] - can you post your test code using the Simple Consumer binding style, please? The one you attached doesn't use it. Thanks.
amarkevich:1392179035:2014-02-12T12:23:55.785+0000:1392179035:2014-02-12T12:23:55.785+0000:Attached sample project 
raulvk:1392285167:2014-02-13T17:52:47.442+0000:1392285167:2014-02-13T17:52:47.442+0000:[~amarkevich] – as I said above, use the Simple Consumer Binding Style (link to documentation above).
If you add this option to the consumer URL: {{bindingStyle=SimpleConsumer}}, your query parameters get mapped as Camel headers.

With this consumer URL:
{code}
from(""cxfrs://http://127.0.0.1:8088?resourceClasses=org.apache.camel.bug.Service&bindingStyle=SimpleConsumer"")
{code}

I get the following log statement.:

{code}
[0694806-15] bug                            INFO  Exchange[ExchangePattern: InOut, BodyType: org.apache.cxf.message.MessageContentsList, Body: value1]
{..., param2=value2, ..., CamelHttpQuery=param1=value1&param2=value2, ..., param1=value1, ...}
{code}

As you can see, the headers are there.

Regards,
Raúl.
amarkevich:1392340760:2014-02-14T09:19:20.864+0000:1392340760:2014-02-14T09:19:20.864+0000:Hi Raúl,
I want to have consumer quite generic and use expression like .simple(""${header.param}"")
sergey_beryozkin:1393467250:2014-02-27T10:14:10.898+0000:1393467250:2014-02-27T10:14:10.898+0000:Hi Raul, 

Is there any reason why this can not work without SimpleBinding ?

Thanks, Sergey
raulvk:1393475577:2014-02-27T12:32:57.690+0000:1393475577:2014-02-27T12:32:57.690+0000:[~sergeyb] - AFAIK all the default binding does is chuck the MessageContentsList into the body and set a number of additional headers, none of which are the JAX-RS \@...Params from the JAX-RS method signature.

Take a look at DefaultCxfRsBinding#populateExchangeFromCxfRsRequest.

[~amarkevich] - please use the users@camel mailing list for questions.
sergey_beryozkin:1393479565:2014-02-27T13:39:25.586+0000:1393479565:2014-02-27T13:39:25.586+0000:Hi Raul, yea, sure, I see it now.

Alexey, FYI, with the default binding, all the parameters are available in MessageContentsList, but as opposed to the SimpleBinding, one needs to be aware of the ordering of the parameters in the signature. 

thanks 

"
0,CAMEL-7195,Improvement,Major,2.10.3,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Grzegorz Grzybek,Joe Luo,0,5,2014-02-12 10:53:55+00:00,2019-12-19 17:29:56+00:00,"Camel-cache component has a default ehcache.xml file embedded and it is used for configuring ehcache. It configures a cacheManagerPeerProviderFactory to use a built-in RMI-based distribution system by default which unfortunately relies on multicast:



<cacheManagerPeerProviderFactory         class=""net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory""
            properties=""peerDiscovery=automatic,
                        multicastGroupAddress=230.0.0.1,
                        multicastGroupPort=4446, timeToLive=1""
            propertySeparator="",""
            />




It sometimes causes a problem when deploying a camel cache route due to multicast/network configuration on it's host. 


We should not rely on multicast in default ehcache configuration that is enforced by ehcache.xml from camel-cache component jar. We should either remove it from the jar to allow fallback to ehcache-failsafe.xml file from ehcache library or modify the embedded ehcache.xml to avoid relying on multicast.","njiang:1392182672:2014-02-12T13:24:32.815+0000:1392182672:2014-02-12T13:24:32.815+0000:Hi Joe,

You should be able to override the default configuration by apply a new configuration like this.
{code}
    CacheComponent cache = context.getComponent(""cache"", CacheComponent.class);
    cache.setConfigurationFile(""classpath:test-ehcache.xml"");
{code}

If you want to do the configuration per endpoint you can let cache endpoint lookup the cache manager factory like this 
{code}
       String CACHE_ENDPOINT_URI =
            ""cache://myname1?cacheManagerFactory=#testCacheManagerFactory"";
       CacheManagerFactory testingCacheManagerFactory = new FileCacheManagerFactory(""src/test/resources/test-ehcache.xml"");
       jndi.bind(""testCacheManagerFactory"", testingCacheManagerFactory);
{code}

You can find more examples of those configuration from the unit tests of camel-cache.

githubbot:1392190758:2014-02-12T15:39:18.034+0000:1392190758:2014-02-12T15:39:18.034+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/96

    CAMEL-7195 Removing default ehcache.xml configuration

    camel-cache component will not contain any default Ehcache
    configuration, falling back to /ehcache-failsafe.xml.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-7195

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/96.patch

----
commit 80402cbf343fea2c0e7bcba0caebcb4639f05b7d
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-02-12T15:37:02Z

    CAMEL-7195 Removing default ehcache.xml configuration
    
    camel-cache component will not contain any default Ehcache
    configuration, falling back to /ehcache-failsafe.xml.

----

davsclaus:1392248774:2014-02-13T07:46:14.499+0000:1576747796:2019-12-19T17:29:56.824+0000:Thanks to [~ggrzybek] for the patch.
ggrzybek:1392250076:2014-02-13T08:07:56.741+0000:1392250076:2014-02-13T08:07:56.741+0000:I've added a little bit of logging:

defaults (no camel-cache component {{configurationFile}} set):
{noformat}
2014-02-13 08:59:34,885 [main           ] INFO  DefaultCacheManagerFactory     - Creating CacheManager using Ehcache defaults
2014-02-13 08:59:34,885 [main           ] WARN  ConfigurationFactory           - No configuration found. Configuring ehcache from ehcache-failsafe.xml  found in the classpath: jar:file:/home/ggrzybek/.m2/repository/net/sf/ehcache/ehcache/2.8.0/ehcache-2.8.0.jar!/ehcache-failsafe.xml
{noformat}

{{configurationFile}} set:
{noformat}
2014-02-13 09:00:52,774 [main           ] INFO  DefaultCacheManagerFactory     - Creating CacheManager using camel-cache configuration: classpath:test-ehcache.xml
{noformat}

githubbot:1392252217:2014-02-13T08:43:37.540+0000:1392252217:2014-02-13T08:43:37.540+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/96
"
0,CAMEL-7194,Bug,Major,2.12.2,,"
None
",Resolved,Fixed,None,Willem Jiang,Alexey Markevich,0,3,2014-02-12 10:31:03+00:00,2014-03-05 03:07:43+00:00,"CxfRsEndpoint doesn't support custom feture support like
org.apache.camel.component.cxf.CxfEndpoint.setFeatures(List<AbstractFeature>)
org.apache.camel.component.cxf.jaxrs.CxfRsEndpoint.createJAXRSClientFactoryBean() can't be used for additional configuration because org.apache.camel.component.cxf.jaxrs.CxfRsProducer.ClientFactoryBeanCache used
in case bus was initialized with required features they aren't initialized for WebClient","amarkevich:1392172331:2014-02-12T10:32:11.475+0000:1392172331:2014-02-12T10:32:11.475+0000:testProducerWithFeature added
amarkevich:1392172600:2014-02-12T10:36:40.987+0000:1392172616:2014-02-12T10:36:56.512+0000:BTW there are typos for methods testGetCostumerWithClientProxyAPI(), testGetCostumersWithClientProxyAPI() and testGetCostumerWithHttpCentralClientAPI()
njiang:1392177697:2014-02-12T12:01:37.046+0000:1392177697:2014-02-12T12:01:37.046+0000:Hi Alexey,

I hit this kind issue last year, it was mentioned in CXF-4953.
You cannot take the consideration that the feature which is set to the bus can work on the JAXRSClientFactoryBean out of box.

Regards,

Willem
amarkevich:1392179284:2014-02-12T12:28:04.161+0000:1392179284:2014-02-12T12:28:04.161+0000:Hi Willem,
I tried to add custom feature somehow - bus initialization was like workaround. CxfRsEndpoint.setFeatures will be enought.
njiang:1392183579:2014-02-12T13:39:39.323+0000:1392183579:2014-02-12T13:39:39.323+0000:You can setup the feature by using cxfrs:client or cxfrs:server elements in the spring or blueprint file.
I can add an option features in CxfRsEndpoint to help you set customer feature through the URI.
amarkevich:1392270426:2014-02-13T13:47:06.233+0000:1392270426:2014-02-13T13:47:06.233+0000:Finally I've set the features using beans. Thanks!
njiang:1392334134:2014-02-14T07:28:54.440+0000:1392334134:2014-02-14T07:28:54.440+0000:Hi Alexey,

I just commit quick fix to camel master and camel-2.12.x, you should be able to set the features option just like you do on camel-cxf.


sergey_beryozkin:1392372429:2014-02-14T18:07:09.454+0000:1392372429:2014-02-14T18:07:09.454+0000:Hi Willem, thanks for fixing it, I've been trying frantically to create a patch for 7179 but have been happy to find out the issue has been fixed :-)

Btw, I have some extra code for setting properties & in/out interceptors, but I guess it is a bit late to squeeze the extra code now, I was not really sure how to to test it, see it from your commit; I can try to do a patch next week or so

Cheers, Sergey 
njiang:1392573762:2014-02-17T02:02:42.308+0000:1392573762:2014-02-17T02:02:42.308+0000:@Sergey,

Maybe you can share you patch here and we can figure out how to test it in the community. That's the beauty of OpenSource :)
sergey_beryozkin:1392613928:2014-02-17T13:12:08.792+0000:1392613928:2014-02-17T13:12:08.792+0000:Hi Willem, sure, I've added a patch to
https://issues.apache.org/jira/browse/CAMEL-7207, to complement your changes to get interceptors & properties also supported at CxfRsEndpoint level.

Now, I don't understand how to test that the properties enabled in Spring contexts are visible to CxfRsEndpoint; see the attached patch to CAMEL-7207, I updated two different tests with no luck; can you please help with getting the tests passing or give a hint on what needs to be done ? I can add tests validating the interceptors and features setup from the context are also visible

Thanks, Sergey "
0,CAMEL-7193,Improvement,Minor,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Anders Rabo Thorbeck,0,2,2014-02-11 14:53:57+00:00,2015-08-13 08:04:32+00:00,"org.apache.camel.component.mock.MockEndpoint.expectedMessagesMatches(Predicate...) is implemented in such a way that, if the test at hand is run with an assert period, then an assertion will be run once before the assert period, but will then be run twice more (when it only needs to run once more) after the assertion period is up. 


This is because the run() method of the org.apache.camel.component.mock.AssertionClause created in expectedMessagesMatches(Predicate...) calls AssertionClause.addPredicate(Predicate), which has not been implemented as an idempotent function.
Therefore, when the assertion is run before the assert period, the Predicate is added to the AssertionClause once, and when the assertion is run again after the assert period, the same Predicate is added again to the same AssertionClause, and so it is executed one more time than necessary.


This can be fixed by making the method AssertionClause.addPredicate(Predicate) idempotent. Suggestions for doing so are:



to change the type of org.apache.camel.component.mock.AssertionClause.predicates from List<Predicate> to Set<Predicate> (java.util.LinkedHashSet will preserve insertion order), or
to add a containment check in AssertionClause.addPredicate(Predicate), before adding the Predicate to the list.



I am not sure whether this will work with equality checking of anonymous Predicate classes with themselves.",davsclaus:1436493048:2015-07-10T09:50:48.502+0000:1436493048:2015-07-10T09:50:48.502+0000:Thanks for the suggestion
0,CAMEL-7192,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Franz Forsthofer,0,2,2014-02-11 12:06:30+00:00,2014-02-13 09:43:59+00:00,"A PGP key ring with version 4 keys typically consists of a primary key which has sub-keys. There is a use-case where the primary key has only the usage flag (KeyFlag) ""certify"" and one sub-key is makred with the usage flag ""signing"" and the other sub-key is marked with usage flag""encryption"".  In this case the PGPDataFormat does not use the correct sub-key for signing and encryption.


In the patch I enabled the usage of sub-keys for the signing process and I introduced the usage flag (KeyFlag) for finding the correct keys for signing and encryption.","njiang:1392146951:2014-02-12T03:29:11.676+0000:1392146951:2014-02-12T03:29:11.676+0000:Applied the patch into master and camel-2.12.x branches with thanks to Franz.
@Franz,  
Do you mind update the wiki page for the new feature?
forsthofer:1392158845:2014-02-12T06:47:25.833+0000:1392158845:2014-02-12T06:47:25.833+0000:I will do that.
forsthofer:1392161442:2014-02-12T07:30:42.927+0000:1392161442:2014-02-12T07:30:42.927+0000:I updated the wiki.
njiang:1392170357:2014-02-12T09:59:17.288+0000:1392170357:2014-02-12T09:59:17.288+0000:Thanks Franz, now I can close the issue."
0,CAMEL-7191,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,3,2014-02-11 08:00:52+00:00,2014-02-22 12:53:10+00:00,"See nabble


http://camel.465427.n5.nabble.com/DISCUSS-Turn-off-JMX-load-statistics-by-default-tp5747018.html","preben:1392518957:2014-02-16T10:49:17.616+0000:1392518957:2014-02-16T10:49:17.616+0000:I will take a look at this one.
githubbot:1392526795:2014-02-16T12:59:55.399+0000:1392526795:2014-02-16T12:59:55.399+0000:GitHub user pax95 opened a pull request:

    https://github.com/apache/camel/pull/97

    CAMEL-7191 Disable JMX load performance statistics

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/97.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #97
    
----
commit 9dfc16aed5a387b45566980122629695f1ecc15c
Author: Preben Asmussen <preben.asmussen@gmail.com>
Date:   2014-02-16T12:55:48Z

    CAMEL-7191 Disable JMX load performance statistics

----

preben:1392529531:2014-02-16T13:45:31.544+0000:1392529531:2014-02-16T13:45:31.544+0000:There is still something about the TimerListenerManager instance in the DefaultManagementLifecycleStrategy that I'm not totally sure about. My guess is that we could avoid creation of that instance and only create it if loadstatistics is enabled in the TimerListenerManagerStartupListener.onCamelContextStarted.
But the TimerListnerManager instance is also checket in manageObject and unManageObject methods to be not null.
  
davsclaus:1392850501:2014-02-20T06:55:01.697+0000:1392850501:2014-02-20T06:55:01.697+0000:We need to do this change before the 2.13.0 release, as its a change of default.
davsclaus:1392856729:2014-02-20T08:38:49.282+0000:1392856729:2014-02-20T08:38:49.282+0000:Thanks for the patch.

I added some javadoc to the timerlister to explain that the load perf must be enabled for it to be in-use. So the code is fine as is.

I also made the JMX attributes return an empty string instead of NaN.
githubbot:1393044790:2014-02-22T12:53:10.731+0000:1393044790:2014-02-22T12:53:10.731+0000:Github user pax95 closed the pull request at:

    https://github.com/apache/camel/pull/97
"
0,CAMEL-7190,Improvement,Trivial,None,,"

documentation
newbie

",Resolved,Fixed,None,Willem Jiang,Guido Schreuder,0,2,2014-02-11 04:56:03+00:00,2014-02-11 07:54:03+00:00,"The site camel.apache.org does not display properly on recent Firefox versions due to mixed http and https content.


See https://blog.mozilla.org/tanvi/2013/04/10/mixed-content-blocking-enabled-in-firefox-23/


Resolution would be to link all relevant content without protocol;
//camel.apache.org/styles/site.css
instead of
http://camel.apache.org/styles/site.css


I would be glad to do it but don't have the rights to do so.","njiang:1392075125:2014-02-11T07:32:05.446+0000:1392075125:2014-02-11T07:32:05.446+0000:Thanks for reporting this, I just updated the camel site template, now the site works for the https connection. 
guido.schreuder@gmail.com:1392076443:2014-02-11T07:54:03.447+0000:1392076443:2014-02-11T07:54:03.447+0000:My pleasure,

The Camel site looks good again, only issue now is with the Google
search-box for which the script is still loaded from 
http://www.google.com/coop/cse/brand?form=cse-search-box&lang=en
resulting in a warning when searching.

Otherwise; good job!"
0,CAMEL-7189,Bug,Major,2.12.2,"2.12.4, 2.13.2, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.2, 2.14.0",Claus Ibsen,Matt Nathan,1,3,2014-02-10 15:20:59+00:00,2014-06-19 08:53:28+00:00,"Test case: https://gist.github.com/mattnathan/7706ebdce8aa51ebc3c6


When you have a uri that has a placeholder in it and that placeholder is of the form {{prefix}}something{{suffix}} then you get an IllegalArgumentException of the form:



org.apache.camel.FailedToCreateRouteException: Failed to create route route1 at: >>> To[{{value}}] <<< in route: Route(route1)[[From[direct:test]] -> [To[{{value}}]]] because of Expecting }} but found end of string from text: scheme}}:{{path
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:912)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:177)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:770)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1914)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1670)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1544)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1512)
	at org.apache.camel.test.junit4.CamelTestSupport.startCamelContext(CamelTestSupport.java:477)
	at org.apache.camel.test.junit4.CamelTestSupport.doSetUp(CamelTestSupport.java:311)
	at org.apache.camel.test.junit4.CamelTestSupport.setUp(CamelTestSupport.java:217)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)
	at org.junit.rules.RunRules.evaluate(RunRules.java:20)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:160)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:65)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
Caused by: java.lang.IllegalArgumentException: Expecting }} but found end of string from text: scheme}}:{{path
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:90)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:38)
	at org.apache.camel.component.properties.DefaultPropertiesParser.createPlaceholderPart(DefaultPropertiesParser.java:189)
	at org.apache.camel.component.properties.DefaultPropertiesParser.doParseUri(DefaultPropertiesParser.java:105)
	at org.apache.camel.component.properties.DefaultPropertiesParser.parseUri(DefaultPropertiesParser.java:51)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:160)
	at org.apache.camel.component.properties.PropertiesComponent.parseUri(PropertiesComponent.java:119)
	at org.apache.camel.impl.DefaultCamelContext.resolvePropertyPlaceholders(DefaultCamelContext.java:1128)
	at org.apache.camel.model.ProcessorDefinition.resolvePropertyPlaceholders(ProcessorDefinition.java:572)
	at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:475)
	at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:213)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:909)
	... 40 more","davsclaus:1392354248:2014-02-14T13:04:08.517+0000:1392354248:2014-02-14T13:04:08.517+0000:Yeah the bug is that you have 2 nested and that they both start and end the string. So you hit a bug that assume this was only 1 nested.

Working on a fix.
antoine.dessaigne:1403138470:2014-06-19T08:41:10.432+0000:1403138470:2014-06-19T08:41:10.432+0000:Now that CAMEL-7429 is fixed, I've executed the provided test and it passes
davsclaus:1403139208:2014-06-19T08:53:28.170+0000:1403139208:2014-06-19T08:53:28.170+0000:Thanks its fixed by another ticket"
0,CAMEL-7188,Improvement,Minor,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-10 13:34:01+00:00,2014-02-12 16:08:56+00:00,"Running the twitter example we have 3 components in use, as you can see. But the findComponentNames returns an empty list in JMX.
It should find these 3 names.


See screenshot",
0,CAMEL-7187,Improvement,Major,2.12.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-10 12:24:51+00:00,2014-02-12 16:10:49+00:00,"The apt processor should generate the html docs in component package and not in org.apache.camel.component. As the latter causes osgi split packages, and also each component bundle plugin does not include that package, and therefore the documentation is missing in the JARs.


Having the docs in the component package where the .class code is resolves this problem.


Another alternative is to write to META-INF/services/org/apache/camel/component like component.properties does.


Though then resource loading from runtime is a little more tricky.","davsclaus:1392192649:2014-02-12T16:10:49.388+0000:1392192649:2014-02-12T16:10:49.388+0000:Writing to META-INF is tricky as the felix-bundle-plugin does not include .html files in its include resources, and its a bitch to configure.

So lets keep the doc in the package of the component. "
0,CAMEL-7186,Improvement,Minor,2.12.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-10 10:40:31+00:00,2014-02-10 12:05:37+00:00,"Some components is missing having
http://camel.apache.org/endpoint-annotations.html",
0,CAMEL-7185,Bug,Major,2.12.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-10 10:39:15+00:00,2014-02-10 12:05:28+00:00,"For example generation of the file component does not check the super class which has all the options, and therefore we only detect a few options.



<html>
<header>
<title></title>
</header>
<body>
<h1>file endpoint</h1>
<p>File endpoint.</p>
<table class='table'>
  <tr>
    <th>Name</th>
    <th>Type</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>copyAndDeleteOnRenameFail</td>
    <td>boolean</td>
    <td></td>
  </tr>
  <tr>
    <td>forceWrites</td>
    <td>boolean</td>
    <td></td>
  </tr>
</table>
<h2>file consumer</h2>
<p>File consumer.</p>
</body>
</html>",
0,CAMEL-7184,Wish,Major,2.10.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Grzegorz Grzybek,Grzegorz Grzybek,0,3,2014-02-10 09:11:24+00:00,2022-01-28 14:55:00+00:00,"By default camel-quickfix component creates quickfix endpoint once the camelcontext loads and starts quickfix engine. This behavior is not desirable in some scenarios and it would be good to have some sort of control over the component or improve the component to lazy creates its engine on-demand. 


Ref: https://issues.jboss.org/browse/MR-814","davsclaus:1392088428:2014-02-11T11:13:48.834+0000:1392088428:2014-02-11T11:13:48.834+0000:Thanks for the PR. Its applied to master.
githubbot:1392104665:2014-02-11T15:44:25.009+0000:1392104665:2014-02-11T15:44:25.009+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/95

    CAMEL-7184 Ensure that QFJ consumers have their engines initialized

    A case for QFJ consumers - they should have their engines initialized and started when starting consumers

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/apache/camel CAMEL-7184-consumers

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/95.patch

----
commit e291b482b8a4033bf5f951995183d40ced2a1b8c
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-02-11T15:41:17Z

    CAMEL-7184 Ensure that QFJ consumers have their engines initialized

----

githubbot:1392108363:2014-02-11T16:46:03.698+0000:1392108363:2014-02-11T16:46:03.698+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/95

ggrzybek:1392695667:2014-02-18T11:54:27.149+0000:1392695667:2014-02-18T11:54:27.149+0000:Documentation https://cwiki.apache.org/confluence/display/CAMEL/Quickfix updated "
0,CAMEL-7183,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.12.3, 2.13.0",Christian Müller,Christian Müller,0,1,2014-02-09 20:28:34+00:00,2014-02-21 14:40:40+00:00,"christians-mbp:karaf cmueller$ mvn clean install -Pvalidate
[INFO] Scanning for projects...
...
[INFO]     OK: imports resolved for camel-flatpack
[WARNING] Failed to validate feature camel-fop
[WARNING] No export found to match org.apache.bcel.classfile;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
[WARNING] No export found to match org.apache.bcel.util;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)
[WARNING] No export found to match org.apache.bcel.generic;version=""[5.1,6)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.xalan/2.7.1_7)",
0,CAMEL-7182,Bug,Major,2.12.0,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-08 08:03:33+00:00,2014-02-08 08:32:02+00:00,"See nabble
http://camel.465427.n5.nabble.com/GuiceCamelContext-checked-exception-issue-with-Glassfish4-tp5746869.html",
0,CAMEL-7181,Improvement,Minor,None,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,1,2014-02-08 01:55:00+00:00,2014-02-08 02:48:16+00:00,"The DefaultCxfBinding doesn't propagate the attachments information when the CXF endpoint is POJO, but if the MTOM is not enabled, it could be harder for user to access the attachment.","njiang:1391798896:2014-02-08T02:48:16.152+0000:1391798896:2014-02-08T02:48:16.152+0000:Applied the patch into master and camel-2.12.x, camel-2.11.x branches."
0,CAMEL-7180,New Feature,Major,2.12.2,,"
None
",Resolved,Won't Fix,None,Raúl Kripalani,Raúl Kripalani,0,2,2014-02-07 17:18:11+00:00,2016-04-26 07:07:20+00:00,"Will allow for something like:



.onCompletion().onCompleteOnly()
    .onWhen(xpath(""/result = 'ok'""))
        .log(""All good!"")
    .onWhen(xpath(""/result = 'warn'""))
        .log(LoggingLevel.WARN, ""Something didn't go quite as right!"")
    .onOtherwise()
        .log(LoggingLevel.ERROR, ""Something went awfully wrong!"")
.end()




This will specifically benefit route-level onComplete blocks, as only 1 is supported per route. Currently, if you want to take decisions, you have to create a nested choice() which feels clumsy, given that the onComplete DSL already supports some degree of decision-making.","davsclaus:1391819826:2014-02-08T08:37:06.883+0000:1391819826:2014-02-08T08:37:06.883+0000:-1
Its really 2 different things
And you should use the building blocks already. 

The onWhen on onCompletion is for only triggering the on completion when the predicate is true, eg for a single predicate.
The Content Based Router is for doing if ... elseif ... elseif ... else constructs.

You use case should be:
{code}
.onCompletion().onCompleteOnly()
    .choice()
      .onWhen(xpath(""/result = 'ok'""))
          .log(""All good!"")
      .onWhen(xpath(""/result = 'warn'""))
          .log(LoggingLevel.WARN, ""Something didn't go quite as right!"")
      .otherwise()
          .log(LoggingLevel.ERROR, ""Something went awfully wrong!"")
     .end()
.end()
{code}
raulvk:1443512486:2015-09-29T15:41:26.198+0000:1443512486:2015-09-29T15:41:26.198+0000:You're right. I was going for syntactic sugar, but there has been no further demand on this ticket so I think the community doesn't need it.

However, I do see this being useful not in the context of a choice where only 1 path would be taken, but in a ""condition guards"" use-case, e.g.:

{code}
.onCompletion().onCompleteOnly()
    .onWhen(xpath(""/result = 'ok'""))
        .log(""All good!"")
    .onWhen(xpath(""/result/code = 'abc-0001'""))
        .log(""Code abc-0001"")
.end()
{code}

Each condition would be satisfied by itself, without interrupting the block if one matches.

Currently, one doesn't have an easy way of implementing this routing logic if not using multicast + filters, right?

In this case, we'd obviously drop the {{onOtherwise}} DSL."
0,CAMEL-7179,Bug,Major,None,,"
None
",Resolved,Duplicate,None,Unassigned,Sergey Beryozkin,0,1,2014-02-07 16:47:11+00:00,2014-02-14 18:04:17+00:00,No Desc,
0,CAMEL-7178,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Sergey Beryozkin,0,2,2014-02-07 16:44:58+00:00,2014-02-26 10:07:14+00:00,The provider will be initialized with a reference to Camel Data Format component; will let people avoid duplicating the provider declarations when the data format has already been declared,"sergey_beryozkin:1393225274:2014-02-24T15:01:14.334+0000:1393225274:2014-02-24T15:01:14.334+0000:Simple DataFormatProvider is attached. It can be handy when people have already have custom DataFormat implementations declared directly in their roots, so when needed they would just add DataFormatProvider to CXFRS and configure with the reference(s) to the existing formats.

This can be pushed/simplified further if DataFormat becomes more 'format-safe' (CAMEL-7234). In meantime the provider can minimize the configuration effort in some cases.

Finally, it is not strictly CXFRS specific. In due time in can be easily pushed out to say a new camel-jaxrs component with the provider located in CXFRS simply extending the new provider code but I guess this is a longer term goal
njiang:1393354118:2014-02-26T02:48:38.946+0000:1393354118:2014-02-26T02:48:38.946+0000:Applied these two file into camel master branch with thanks to Sergey, I also reformated the code.
sergey_beryozkin:1393380434:2014-02-26T10:07:14.750+0000:1393380434:2014-02-26T10:07:14.750+0000:I guess I forgot to reformat and get rid of the tabs. Thanks for taking care of it"
0,CAMEL-7177,Improvement,Major,2.12.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-07 16:18:23+00:00,2014-02-08 08:37:26+00:00,"We should default vertx in non clustered embedded mode.


And then only if end user configure the component with a host port, then its clustered using that.",davsclaus:1391761502:2014-02-07T16:25:02.004+0000:1391761502:2014-02-07T16:25:02.004+0000:The default mode is non clustered now. You can configure host / port to setup clustered vertx as its VertxFactory API denotes.
0,CAMEL-7176,Improvement,Major,2.12.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-07 15:28:42+00:00,2014-02-07 16:08:50+00:00,"See nabble
http://camel.465427.n5.nabble.com/Camel-Vert-x-problems-tp5746917.html",
0,CAMEL-7175,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,1,2014-02-05 21:46:41+00:00,2014-02-05 21:49:30+00:00,"Currently FnAggregationStrategy is defined as (Exchange,Exchange) => Exchange. It will be nice to support (Exchange,Exchange) => Any as well. In the latter case we would need to wrap a value into new exchange instance.",hekonsek:1391608170:2014-02-05T21:49:30.702+0000:1391608170:2014-02-05T21:49:30.702+0000:Resolved in 66e6b1f45e1536f69a4fd2235f8c90e0871be1a1.
0,CAMEL-7174,Bug,Minor,2.8.5,2.18.0,"
None
",Resolved,Cannot Reproduce,2.18.0,Claus Ibsen,metatech,0,2,2014-02-05 15:07:42+00:00,2016-04-10 14:31:46+00:00,"When multiple bundles contain routes with a ""cache:"" endpoint, if one bundle is stopped, the cache from the other bundle stops working as well.


Solution : in method doStop of class org.apache.camel.component.cache.CacheManagerFactory, remove the call to cacheManager.shutdown().


If really useful, a more elaborate reference counting mechanism could be used to stop the CacheManager when the last endpoint is being stopped



Caused by: java.lang.IllegalStateException: The CacheManager has been shut down. It can no longer be used.
	at net.sf.ehcache.CacheManager.checkStatus(CacheManager.java:1158)
	at net.sf.ehcache.CacheManager.cacheExists(CacheManager.java:1048)
	at org.apache.camel.component.cache.CacheEndpoint.initializeCache(CacheEndpoint.java:104)
	at org.apache.camel.component.cache.CacheProducer.process(CacheProducer.java:56)","davsclaus:1391650537:2014-02-06T09:35:37.911+0000:1391650537:2014-02-06T09:35:37.911+0000:Don't we have a ticket about this already? 
davsclaus:1391650563:2014-02-06T09:36:03.372+0000:1391650563:2014-02-06T09:36:03.372+0000:This is only a problem for OSGi users in Karaf/SMX
metatech:1440479682:2015-08-25T13:14:42.967+0000:1440479682:2015-08-25T13:14:42.967+0000:Here is a patch which shutdowns the CacheManager only when the last cache was removed.  Tested under Servicemix 5.4.1.
metatech:1440479827:2015-08-25T13:17:07.176+0000:1440479827:2015-08-25T13:17:07.176+0000:BTW, shouldn't there be a ""synchronized"" in the ""doStop()"" method, which also modifies the ""cacheManager"" variable ?
metatech:1440563435:2015-08-26T12:30:35.585+0000:1440563435:2015-08-26T12:30:35.585+0000:New attachment ""camel_multiple_cache_v2.diff"" : better version with ""synchronized""
metatech:1458965788:2016-03-26T12:16:28.376+0000:1458965788:2016-03-26T12:16:28.376+0000:FYI : V2 implementation (26/08/2015) has been used in prod for 6 months in ServiceMix without issues so far.
davsclaus:1460240145:2016-04-10T06:15:45.718+0000:1460240145:2016-04-10T06:15:45.718+0000:The latest code is similar to your patch
metatech:1460242428:2016-04-10T06:53:48.552+0000:1460261136:2016-04-10T12:05:36.031+0000:Hi Claus, sorry the for the mistake in the patch.  Here is a new V3 which is correct (V3 was the version running in PROD on our site).
davsclaus:1460269271:2016-04-10T14:21:11.981+0000:1460269271:2016-04-10T14:21:11.981+0000:Thanks I have applied the v3 so its part of Camel 2.18.
metatech:1460269906:2016-04-10T14:31:46.648+0000:1460269906:2016-04-10T14:31:46.648+0000:Thanks !"
0,CAMEL-7173,Bug,Minor,2.12.2,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Preben Asmussen,0,2,2014-02-05 09:55:03+00:00,2014-02-05 10:46:14+00:00,"The defalult value is set to true. Should have been false


see http://camel.465427.n5.nabble.com/disabeling-loadStatistics-td5746709.html","davsclaus:1391566454:2014-02-05T10:14:14.587+0000:1391566454:2014-02-05T10:14:14.587+0000:Its a flag change which could break stuff for people in patch upgrades, so doing this on 2.13 onwards only.
davsclaus:1391568374:2014-02-05T10:46:14.094+0000:1391568374:2014-02-05T10:46:14.094+0000:Ah well the docs so its optional, and thus indicates its false by default. So lets consider this as a bug, despite the default value is in the XSD."
0,CAMEL-7172,Bug,Minor,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-05 09:11:39+00:00,2014-02-05 10:09:31+00:00,"For example passphrase does not support passphrase=#myPassword, to lookup a bean with that id that produces the password to use.


There is a few others as well.",
0,CAMEL-7171,Task,Critical,2.13.0,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Christian Müller,0,2,2014-02-04 20:46:18+00:00,2014-02-17 06:56:50+00:00,"At present, camel-jclouds cannot be used with Java 1.7.0_51.
See JCLOUDS-427 for details.",njiang:1392591410:2014-02-17T06:56:50.119+0000:1392591410:2014-02-17T06:56:50.119+0000:Applied the patch into camel master.
0,CAMEL-7170,Task,Major,"2.11.3, 2.12.2","2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Christian Müller,Christian Müller,0,2,2014-02-04 16:58:38+00:00,2014-02-09 22:42:04+00:00,No Desc,"davsclaus:1391655255:2014-02-06T10:54:15.044+0000:1391655255:2014-02-06T10:54:15.044+0000:CXF vote pending with a -1, maybe they need a recut and takes time. So we can push this for a later release if wanting to get Camel out the door sooner."
0,CAMEL-7169,Improvement,Minor,"2.12.0, 2.12.1, 2.12.2",,"

file
local
rename

",Closed,Invalid,None,Claus Ibsen,Damir Isanbirdin,0,3,2014-02-04 16:25:35+00:00,2014-02-06 09:17:37+00:00,Generic File Process Strategy: Camel tries to rename already renamed (moved) local file.,"damir_is:1391502531:2014-02-04T16:28:51.122+0000:1391502531:2014-02-04T16:28:51.122+0000:Exception Log
davsclaus:1391503166:2014-02-04T16:39:26.000+0000:1391503166:2014-02-04T16:39:26.000+0000:Why are you setting that header. You should not do that.

damir_is:1391505624:2014-02-04T17:20:24.500+0000:1391505624:2014-02-04T17:20:24.500+0000:Aim: just move (rename) the files. Not copy. 


davsclaus:1391510540:2014-02-04T18:42:20.563+0000:1391510540:2014-02-04T18:42:20.563+0000:You are misusing this. 

The local work option is for the ftp consumer.
damir_is:1391524362:2014-02-04T22:32:42.335+0000:1391524362:2014-02-04T22:32:42.335+0000:I think, the file component is not correctly implemented. I do not want to use FTP or FTP2 components. This is only local file system with file components will be used :  need to move some files from one folder to another. 

just like:

           <from uri=""file:/1?include=.*.(gz|zip)$""/>
            <to uri=""file:/2""/>


In the source code, you create a new file with the same content like ""xyz.camel"" and and make copy of them. You call twice a ""commit"" -method from GenericFileProcessStrategy / GenericFileRenameProcessStrategy. This is ok if copy. But if we need to move the file, another ""commit"" is to much. 

s.  GenericFileProcessStrategySupport # renameFile(..) ,FileOperations # renameFile(..), FileUtil # renameFile(..)



davsclaus:1391559866:2014-02-05T08:24:26.634+0000:1391559866:2014-02-05T08:24:26.634+0000:Use the move options on the file consumer endpoint. And then do a from -> log. Then the file is moved and not copied.
davsclaus:1391568634:2014-02-05T10:50:34.200+0000:1391568634:2014-02-05T10:50:34.200+0000:Use the mailing list / user forum for getting help with Camel as we say
http://camel.apache.org/support
damir_is:1391594522:2014-02-05T18:02:02.695+0000:1391594522:2014-02-05T18:02:02.695+0000:Hi Claus,

yes, it works with move option.

<from uri=""file:/1?include=.*.(gz|zip)$ &move=/2""/>
<to uri=""mock:result""/>

But the semantic of ""from -> to"" here is not clear, not well designed as well. 
I think this can be re-factored in the future versions for more readable like this one:

<from uri=""file:/1?include=.*.(gz|zip)$ & justMove=""true""/>
<to uri=""file:/2""/>
"
0,CAMEL-7168,Bug,Major,None,None,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,1,2014-02-04 13:57:01+00:00,2014-02-04 15:09:42+00:00,Default Hibernate's ValidationProviderResolver doesn't work well in the OSGi environment. It will be nice to ship OSGi-friendly provider together with the camel-bean-validation jar.,hekonsek:1391497782:2014-02-04T15:09:42.226+0000:1391497782:2014-02-04T15:09:42.226+0000:Fixed in 058d22e83a9f9d343ebb7299ca8cf371c69135de.
0,CAMEL-7167,Bug,Minor,2.12.1,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Yves De Moor,0,2,2014-02-04 13:10:00+00:00,2014-02-05 11:57:02+00:00,"Using a class that extends AbstractListAggregationStrategy to rebuild a List after the completion of the split cause the body not to be replaced by the agregated list at the end of the split.


In other words (AbstractListAggregationStrategy.onCompletion(Exchange exchange) is never called.


Here is what I do :


from(HANDLE_A_LIST)//
            .split(body(), new ListAggregationStrategy())// body is an arrayList of String
            .to(""log:foo"")//
            .end()// end split
            // the body is a string instead of a List
            .end()// end route


class ListAggregationStrategy extends AbstractListAggregationStrategy<String>
    {


        @Override
        public String getValue(Exchange exchange)

        {
            return exchange.getIn().getBody();
        }

    }


As workaround, I use .setBody(property(Exchange.GROUPED_EXCHANGE)) after the end of the split.",davsclaus:1391569907:2014-02-05T11:11:47.328+0000:1391569907:2014-02-05T11:11:47.328+0000:Thanks for reporting. Yeah the onCompletion was currently only in use with the aggregate eip. Should do the same for split and the others as well.
0,CAMEL-7166,Task,Major,None,2.13.0,"
None
",Resolved,Invalid,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2014-02-04 10:43:26+00:00,2014-02-06 09:52:31+00:00,3.2.7 bundles is in the works by the SMX team. When they are released we should use those in Karaf/Camel so people can use latest 3.2.x releases of Spring. Currently we would be stuck on 3.2.4 which is the last Spring OSGi bundle release from the spring team.,davsclaus:1391651551:2014-02-06T09:52:31.297+0000:1391651551:2014-02-06T09:52:31.297+0000:This is happening on the Karaf side. Nothing to change at Camel
0,CAMEL-7165,Task,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2014-02-04 09:57:06+00:00,2014-02-07 08:37:21+00:00,"We should drop spring 3.1 support in Camel 2.13 onwards.


See also talk on dev
http://camel.465427.n5.nabble.com/DISCUSS-Drop-Spring-3-1-support-in-Camel-2-13-onwards-tp5746724.html",
0,CAMEL-7164,Improvement,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-04 07:51:08+00:00,2014-02-04 09:33:19+00:00,"The type converter registry mbean has a little details today. But we should also include information on number of type converters in the registry, and allow end users to query if a converter exists, and as well browse the converters etc.",davsclaus:1391476462:2014-02-04T09:14:22.409+0000:1391476462:2014-02-04T09:14:22.409+0000:Screenshot of the new tabular data allowing to browse all the registered type converters.
0,CAMEL-7163,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-03 19:11:38+00:00,2014-02-03 19:15:09+00:00,"When using the backlog debugger then updating the body/headers would currently force those to become string type.


We should preserve existing type, and allow end users to specify a new type. And also make it possible to remove body/headers as well.",
0,CAMEL-7162,Improvement,Major,None,None,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,1,2014-02-03 12:34:26+00:00,2014-02-03 13:13:43+00:00,Currently it is impossible to provide non-default ValidationProviderResolver when creating Bean Validator endpoint. Component should lookup for the ValidationProviderResolver the same way it looks up for the MessageInterpolator or TraversableResolver.,hekonsek:1391404423:2014-02-03T13:13:43.918+0000:1391404423:2014-02-03T13:13:43.918+0000:Fixed in 4c2150884f24e5d70d89066797465d690804b1c5.
0,CAMEL-7161,Bug,Major,2.12.2,None,"
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-02-03 09:37:44+00:00,2014-02-03 09:39:35+00:00,"When using spring with dozer, and we call init in the ctr, then spring can cause a dead lock when it does its getBean stuff.



   java.lang.Thread.State: BLOCKED (on object monitor)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:182)
	- waiting to lock <0x00000007d7c4ca38> (a java.util.concurrent.ConcurrentHashMap)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:468)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:356)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:334)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:434)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:428)
	at org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1182)
	at org.springframework.beans.factory.BeanFactoryUtils.beansOfTypeIncludingAncestors(BeanFactoryUtils.java:228)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.findByTypeWithName(ApplicationContextRegistry.java:85)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.findByTypeWithName(PropertyPlaceholderDelegateRegistry.java:70)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.lookupDozerBeanMapperConfigurations(DozerTypeConverterLoader.java:228)
	at org.apache.camel.converter.dozer.DozerTypeConverterLoader.init(DozerTypeConverterLoader.java:155)




We should defer init to a bit later, and turn the loader into a service so init is done like the others with start|stop methods.",
0,CAMEL-7160,Bug,Major,2.12.2,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Claus Ibsen,Michael Pisula,0,2,2014-02-03 09:25:38+00:00,2014-02-03 13:55:28+00:00,"When using the throttler with the header expression for controlling the rate, changing the rate does not work reliably. 


Some more information can be found in the following mail thread:


http://camel.465427.n5.nabble.com/Problems-with-dynamic-throttling-td5746613.html","michael.pisula:1391390839:2014-02-03T09:27:19.168+0000:1391390839:2014-02-03T09:27:19.168+0000:New test and fix for dynamic rate change problem
michael.pisula:1391392383:2014-02-03T09:53:03.530+0000:1391392383:2014-02-03T09:53:03.530+0000:Added fix for changing rate from high to low, the patch before worked just accidentally because messageCount in the test was 9.
davsclaus:1391406928:2014-02-03T13:55:28.120+0000:1391406928:2014-02-03T13:55:28.120+0000:Thanks for reporting and the patch."
0,CAMEL-7159,Bug,Major,2.12.2,None,"
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Jonathan Anstey,Jonathan Anstey,0,1,2014-01-31 16:00:58+00:00,2014-02-03 14:12:17+00:00,"It works fine (like in the tests) when you provide bindy with a Map<String, Object> of model objects corresponding to the @Linked-ed classes. We should do better though and try to figure this out for users.",
0,CAMEL-7158,Wish,Major,2.12.2,,"

failover
jms

",Resolved,Duplicate,None,Unassigned,Gary Tully,1,2,2014-01-31 14:02:35+00:00,2016-05-29 06:48:48+00:00,"For cases where a jms provider does not provide failover, it would be nice if sjms could provide a way to failover across connections or connectionfactories in the event of a comms failure.


ie: given a broker cluster, being able to choose a cluster member and being able to reconnect to another cluster member in the event of a disconnect would be perfect. 


Not sure where best to expose this, having a list of connectionFactories or using some variation of a connection resource manager[1].
In any event, the intent is that the component would hide the fact that the other end (broker) has died if it is configured with alternatives and a reconnect strategy.
Removing the reconnect/failover burden from the application.


[1] http://camel.apache.org/sjms.html#SJMS-connectionresource",
0,CAMEL-7157,Bug,Major,2.12.2,,"
None
",Resolved,Invalid,None,Unassigned,Mikhail Pryakhin,0,2,2014-01-31 12:00:17+00:00,2014-02-06 09:55:22+00:00,"Hello guys!
I faced an issue while trying to marshal a list of annotated POJOs to an OutPutStream using org.apache.camel.dataformat.bindy.fixed.BindyFixedLengthDataFormat .


The cause of the issue is that if the processing body is of type java.util.List, then 
the BindyFixedLengthDataFormat expects the elements of the list to be of type Map<String, Object> but 
they are really not and as a result java.lang.ClassCastException exception is thrown.


Please see attached junit tests.","m.pryahin:1391140899:2014-01-31T12:01:39.099+0000:1391140899:2014-01-31T12:01:39.099+0000:junit test with the issue
davsclaus:1391651706:2014-02-06T09:55:06.603+0000:1391651706:2014-02-06T09:55:06.603+0000:You should use the mailing list / user forums to get help with your Camel projects.

Read all of this page
http://camel.apache.org/support"
0,CAMEL-7156,Improvement,Major,2.12.2,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Claus Ibsen,John Mark,0,4,2014-01-30 20:37:22+00:00,2014-02-28 15:37:42+00:00,"The CamelContext does not shutdown properly when running inside a Spring ApplicationContext.  Upon shutdown I get a lot of the following errors:



org.apache.camel.RuntimeCamelException: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'someBean': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.apache.camel.util.ObjectHelper.wrapRuntimeCamelException(ObjectHelper.java:1196)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:51)
	at org.apache.camel.component.bean.RegistryBean.lookupBean(RegistryBean.java:136)
	at org.apache.camel.component.bean.RegistryBean.getBean(RegistryBean.java:62)
	at org.apache.camel.component.bean.BeanProcessor.process(BeanProcessor.java:83)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.ChoiceProcessor.process(ChoiceProcessor.java:85)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.DelayProcessorSupport.process(DelayProcessorSupport.java:105)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.TraceInterceptor.process(TraceInterceptor.java:91)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.RedeliveryErrorHandler.processErrorHandler(RedeliveryErrorHandler.java:322)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:213)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.interceptor.DefaultChannel.process(DefaultChannel.java:303)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:117)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.RouteContextProcessor.processNext(RouteContextProcessor.java:45)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.processor.UnitOfWorkProcessor.processAsync(UnitOfWorkProcessor.java:150)
	at org.apache.camel.processor.UnitOfWorkProcessor.process(UnitOfWorkProcessor.java:117)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.processor.DelegateAsyncProcessor.processNext(DelegateAsyncProcessor.java:99)
	at org.apache.camel.processor.DelegateAsyncProcessor.process(DelegateAsyncProcessor.java:90)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:71)
	at org.apache.camel.util.AsyncProcessorHelper.process(AsyncProcessorHelper.java:73)
	at org.apache.camel.component.jms.EndpointMessageListener.onMessage(EndpointMessageListener.java:114)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:560)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:498)
	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:467)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:325)
	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:263)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1058)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1050)
	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:947)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:636)
Caused by: org.springframework.beans.factory.BeanCreationNotAllowedException: Error creating bean with name 'someBean': Singleton bean creation not allowed while the singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:209)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:290)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:192)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1075)
	at org.apache.camel.spring.spi.ApplicationContextRegistry.lookup(ApplicationContextRegistry.java:66)
	at org.apache.camel.impl.PropertyPlaceholderDelegateRegistry.lookup(PropertyPlaceholderDelegateRegistry.java:49)
	... 78 more




I can use depends-on for every bean that my context uses, but I shouldn't have to do that.  It can also be hard to manage that type of pattern.


I think SpringCamelContext should implement the SmartLifecycle interface from Spring (see http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).
int getPhase(); should return a high value (probably Integer.MAX_VALUE) and void stop(Runnable callback); should only call callback.run() once the camel context has completed shutting down.  
I think this would enable camel to shutdown cleanly in spring without users having to specify that every bean that is used depends-on the camel context.  The only issue I can see is the disconnect between camel's default shutdown time and spring's default shutdown timeout.  The camel context has a default shutdown timeout of 300 seconds (http://camel.apache.org/graceful-shutdown.html) while spring's per-phase timeout is 30 seconds (http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/beans.html#beans-factory-lifecycle).  It would be nice if those two were in sync.","jmark:1391092779:2014-01-30T22:39:39.750+0000:1391424369:2014-02-03T18:46:09.622+0000:Another way to do this would be to have an abstract SpringRouteBuilder that implements SmartLifecycle.  Users of Spring would then need to extend that class.

This might be a little strange since the RouteBuilder would then need to call stop() on its context.
davsclaus:1391407047:2014-02-03T13:57:27.723+0000:1391407047:2014-02-03T13:57:27.723+0000:Would require us to drop spring 3.1 support and spring 3.2 as minimum version. I guess that would be acceptable from Camel 2.13 onwards.
davsclaus:1391407480:2014-02-03T14:04:40.408+0000:1391407480:2014-02-03T14:04:40.408+0000:Started discussion about dropping spring 3.1 support
http://camel.465427.n5.nabble.com/DISCUSS-Drop-Spring-3-1-support-in-Camel-2-13-onwards-tp5746724.html
jmark:1391424442:2014-02-03T18:47:22.427+0000:1391424442:2014-02-03T18:47:22.427+0000:Why would you need to drop support for Spring 3.1?  SmartLifecycle has been around since 3.0 (at least according to its javadocs).
davsclaus:1393547540:2014-02-28T08:32:20.361+0000:1393547540:2014-02-28T08:32:20.361+0000:There is a clash, org.springframework.context.SmartLifecycle has isAutoStartup which is a method already in CamelContext.
davsclaus:1393548698:2014-02-28T08:51:38.606+0000:1393548698:2014-02-28T08:51:38.606+0000:Do anyone have any sample code that demonstrates this? Would be handy to verify any fixes going into the code.
davsclaus:1393550601:2014-02-28T09:23:21.989+0000:1393550601:2014-02-28T09:23:21.989+0000:Okay I can reproduce this when I declare my spring <bean> below the <camelContext> so Spring stops those beans before Camel.
davsclaus:1393558324:2014-02-28T11:32:04.484+0000:1393558324:2014-02-28T11:32:04.484+0000:Have a solution to trigger shutdown of CamelContext before any other beans.

Then we shutdown Camel first, and wont have issues when Camel shutdown later and refers to beans that has already been shutdown.
davsclaus:1393573057:2014-02-28T15:37:37.022+0000:1393573057:2014-02-28T15:37:37.022+0000:There is a new shutdownEager option on <camelContext>. In Camel 2.13 onwards this is true. And in 2.12.x this is false to keep the same behavior as before.

So users on 2.12.4 can turn this option to true to have Camel shutdown eager(sooner) which should avoid these situations from the reported stacktrace."
0,CAMEL-7155,Bug,Minor,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Tomas Rohovsky,0,3,2014-01-28 15:04:49+00:00,2014-02-21 14:43:56+00:00,"From the semantic point of view the method hasStartToken() should return false in case of an expression without language specified, i.e. starting with ""${"". 


However, it is correct to return true in current usage of hasStartToken() in camel-core, i.e. checking if an expression is in simple language, since if the expression does not contain the language token, then it is a simple expression.


The method calls for checking of simple language should be replaced with a newly created method isSimpleLanguage(String expression) that would check if the language is a simple expression, i.e. hasStartToken(expression, ""simple"") || expression.indexOf(""${"") >= 0.","davsclaus:1391408279:2014-02-03T14:17:59.787+0000:1391408279:2014-02-03T14:17:59.787+0000:Thomas, are you working on a patch?
njiang:1392595722:2014-02-17T08:08:42.390+0000:1392595722:2014-02-17T08:08:42.390+0000:Applied the patch into camel-2.12.x and master branches."
0,CAMEL-7154,Improvement,Minor,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-01-28 11:11:01+00:00,2014-01-28 11:38:10+00:00,"When end users of Camel may need to do a bit of custom logic and instead of having to duplicate the source code of InterceptSendToMockEndpointStrategy, we should have a onXXX method where they can add their custom logic.",
0,CAMEL-7153,Improvement,Minor,2.12.0,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,2,2014-01-27 07:57:49+00:00,2015-07-10 12:01:21+00:00,"We should make it easier to reconfigure timer routes so people can change at runtime when a timer task triggers next time.


See SO
http://stackoverflow.com/questions/21309081/camel-runtime-timer-change",
0,CAMEL-7152,New Feature,Minor,2.12.2,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Yannick Menager,0,3,2014-01-25 20:43:49+00:00,2015-07-19 08:35:38+00:00,"HTTPProducer is currently copying all the older headers from IN onto the OUT.


This means that after doing an HTTP call, there is no way to know which headers where returned by destination server, and which were there originally.


In my case this is disastrous because I need to do an HMAC which include all headers 


Please add an HttpEndpoint Options which allows to disable that behaviour and not copy any old headers from IN. (and yes in that case the original headers would get lost, but then the developer can just preserve whatever he needs by storing the data in the exchange properties)","davsclaus:1390810722:2014-01-27T16:18:42.904+0000:1390810722:2014-01-27T16:18:42.904+0000:Use the content enricher eip and merge/keep/override what you want
http://camel.apache.org/content-enricher.html
davsclaus:1436500856:2015-07-10T12:00:56.541+0000:1436500856:2015-07-10T12:00:56.541+0000:Contributions is welcome, we could have an option preserveHeaders=true as default, and then the user can turn this off as suggested.
githubbot:1437187199:2015-07-18T10:39:59.522+0000:1437187199:2015-07-18T10:39:59.522+0000:GitHub user rbudzko opened a pull request:

    https://github.com/apache/camel/pull/566

    CAMEL-7152

    HttpProducer loses response data (specifically which hea…ders where returned):
    
    1) Added copyHeaders to http and http4 components
    2) Fixed some ""online"" tests which were outdated

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/rbudzko/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/566.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #566
    
----
commit 6ca2e6f1825fc99a0149b09d986d95d24d1302d4
Author: Robert Budźko <robert.krzysztof.budzko@gmail.com>
Date:   2015-07-18T10:35:47Z

    CAMEL-7152 - HttpProducer loses response data (specifically which headers where returned):
    
    1) Added copyHeaders to http and http4 components
    2) Fixed some ""online"" tests which were outdated

----

davsclaus:1437264957:2015-07-19T08:15:57.675+0000:1437264957:2015-07-19T08:15:57.675+0000:Thanks for reporting and the PR
githubbot:1437266138:2015-07-19T08:35:38.103+0000:1437266138:2015-07-19T08:35:38.103+0000:Github user rbudzko closed the pull request at:

    https://github.com/apache/camel/pull/566
"
0,CAMEL-7151,Bug,Major,2.13.0,None,"
None
",Closed,Invalid,None,Scott England-Sullivan,Marios Trivyzas,0,2,2014-01-24 11:03:20+00:00,2014-02-04 10:58:40+00:00,"The following exception is thrown when adding new route programmatically with Sjms as producer:


java.lang.NullPointerException
	at java.util.concurrent.ArrayBlockingQueue.checkNotNull(ArrayBlockingQueue.java:145)
	at java.util.concurrent.ArrayBlockingQueue.offer(ArrayBlockingQueue.java:296)
	at java.util.AbstractQueue.add(AbstractQueue.java:95)
	at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:283)
	at org.apache.camel.component.sjms.jms.ObjectPool.fillPool(ObjectPool.java:55)
	at org.apache.camel.component.sjms.SjmsProducer.doStart(SjmsProducer.java:139)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.ProducerCache.doGetProducer(ProducerCache.java:407)
	at org.apache.camel.impl.ProducerCache.acquireProducer(ProducerCache.java:123)
	at org.apache.camel.processor.SendProcessor.doStart(SendProcessor.java:191)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:155)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:984)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.FilterProcessor.doStart(FilterProcessor.java:80)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.ChoiceProcessor.doStart(ChoiceProcessor.java:171)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:155)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:61)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.MulticastProcessor.doStart(MulticastProcessor.java:984)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.processor.FilterProcessor.doStart(FilterProcessor.java:80)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.RedeliveryErrorHandler.doStart(RedeliveryErrorHandler.java:1154)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:41)
	at org.apache.camel.support.ChildServiceSupport.start(ChildServiceSupport.java:28)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.interceptor.DefaultChannel.doStart(DefaultChannel.java:155)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:59)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:103)
	at org.apache.camel.util.ServiceHelper.startServices(ServiceHelper.java:89)
	at org.apache.camel.processor.DelegateAsyncProcessor.doStart(DelegateAsyncProcessor.java:79)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.util.ServiceHelper.startService(ServiceHelper.java:74)
	at org.apache.camel.impl.RouteService.startChildService(RouteService.java:329)
	at org.apache.camel.impl.RouteService.warmUp(RouteService.java:158)
	at org.apache.camel.impl.DefaultCamelContext.doWarmUpRoutes(DefaultCamelContext.java:2109)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2039)
	at org.apache.camel.impl.DefaultCamelContext.safelyStartRouteServices(DefaultCamelContext.java:2061)
	at org.apache.camel.impl.DefaultCamelContext.startRouteService(DefaultCamelContext.java:1938)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:772)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1914)
	at org.apache.camel.impl.DefaultCamelContext.addRouteDefinitions(DefaultCamelContext.java:707)
	at org.apache.camel.builder.RouteBuilder.populateRoutes(RouteBuilder.java:337)
	at org.apache.camel.builder.RouteBuilder.addRoutesToCamelContext(RouteBuilder.java:264)
	at org.apache.camel.impl.DefaultCamelContext.addRoutes(DefaultCamelContext.java:669)
	at de.groupon.jms.DynamicRoutesManager.addRoute(DynamicRoutesManager.java:178)


Here is my code:



public static RouteBuilder buildRoute(final DynamicRoute route, final CamelContext camelContext, final boolean autoStartup) throws Exception {
		InitialContext ic = getInitialContext(route.getSourceEndpoint().getHost(), route.getSourceEndpoint().getJndiPort());
		ConnectionFactory srcConnectionFactory = (ConnectionFactory)ic.lookup(""/connectionFactory/local/"" + route.getSourceEndpoint().getJndiConnectionFactoryName());
		((HornetQJMSConnectionFactory)srcConnectionFactory).setReconnectAttempts(-1);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setRetryInterval(1000);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setConnectionTTL(120000);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setClientFailureCheckPeriod(2000);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setCallTimeout(60000);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setConsumerWindowSize(4194304);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setInitialConnectAttempts(-1);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setUseGlobalPools(false);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setScheduledThreadPoolMaxSize(5);
		((HornetQJMSConnectionFactory)srcConnectionFactory).setThreadPoolMaxSize(5);
		camelContext.addComponent(route.getSourceEndpoint().getName(), JmsComponent.jmsComponentAutoAcknowledge(srcConnectionFactory));
		ic.close();

		RouteBuilder newRouteBuilder;
		JmsEndpoint dstEndpoint = (JmsEndpoint) route.getDestinationEndpoint();
		ic = getInitialContext(dstEndpoint.getHost(), dstEndpoint.getJndiPort());
		ConnectionFactory dstConnectionFactory = (ConnectionFactory)ic.lookup(""/connectionFactory/local/"" + dstEndpoint.getJndiConnectionFactoryName());
		((HornetQJMSConnectionFactory)dstConnectionFactory).setReconnectAttempts(-1);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setRetryInterval(1000);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setConnectionTTL(120000);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setClientFailureCheckPeriod(2000);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setCallTimeout(60000);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setConsumerWindowSize(4194304);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setInitialConnectAttempts(-1);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setUseGlobalPools(false);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setScheduledThreadPoolMaxSize(5);
		((HornetQJMSConnectionFactory)dstConnectionFactory).setThreadPoolMaxSize(5);
		SjmsComponent sjms = new SjmsComponent();
		sjms.setConnectionFactory(dstConnectionFactory);
		camelContext.addComponent(dstEndpoint.getName(), sjms);
		ic.close();

		newRouteBuilder = new RouteBuilder() {
			@Override
			public void configure() {
				errorHandler(deadLetterChannel(""log:de.groupon.jms.route.deadletter."" + route.getName() + ""?level=ERROR&showBody=true&showHeaders=true&showExchangePattern=false&showBodyType=false"").maximumRedeliveries(3).redeliveryDelay(500)
						.retryAttemptedLogLevel(LoggingLevel.WARN).retriesExhaustedLogLevel(LoggingLevel.ERROR)
						.log(""de.groupon.jms.route.error."" + route.getName()));
				from(route.getSourceEndpoint().getCamelUri()).routeId(route.getName()).autoStartup(autoStartup)
					.filter().method(route.getFilterChain(), ""filterMessage"")
					.process(route.getTransformer())
					.choice().when(body().isNotNull())
						.to(ExchangePattern.InOnly, route.getDestinationEndpoint().getCamelUri())
						.to(""log:de.groupon.jms.route."" + route.getName() + ""?level=INFO&showBody=true&showHeaders=true&showExchangePattern=false&showBodyType=false"")
						.stop()
					.otherwise()
						.stop();
			}
		};
	}
	return newRouteBuilder;
}","matriv:1390532696:2014-01-24T11:04:56.239+0000:1390532696:2014-01-24T11:04:56.239+0000:Working on a patch...
sully6768:1390549318:2014-01-24T15:41:58.454+0000:1390549318:2014-01-24T15:41:58.454+0000:Thanks Marios for the bug write up and the execution code.

Best Regards,
Scott ES
matriv:1391482621:2014-02-04T10:57:01.816+0000:1391482655:2014-02-04T10:57:35.914+0000:The issue is not valid as In my code I'm missing the call to start the SjmsComponent. Since the CamelContext is already started it doesn't start the SjmsComponent automatically and that is the root cause of the error. So the problem is fixed by adding the call to start() method on SjmsComponent:
{code}
SjmsComponent sjms = new SjmsComponent();
sjms.setConnectionFactory(dstConnectionFactory);
camelContext.addComponent(dstEndpoint.getName(), sjms);
sjms.start(); // missing call
{code}"
0,CAMEL-7150,Improvement,Major,None,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,1,1,2014-01-24 09:08:44+00:00,2014-02-08 06:31:52+00:00,We should provides the setting of WebSocketServlet in the camel-websocket uri.,"njiang:1391812312:2014-02-08T06:31:52.479+0000:1391812312:2014-02-08T06:31:52.479+0000:Applied the patch into camel master, camel-2.12.x and camel-2.11.x branches. I also updated the wiki page for the new added options."
0,CAMEL-7149,Bug,Major,2.12.2,,"
None
",Resolved,Invalid,None,Claus Ibsen,Hassan Faouaz,0,2,2014-01-23 16:32:51+00:00,2014-01-27 16:19:39+00:00,"Few our routes hung after a successful connection to a ftp server.  After performing a thread dump, we realized that most our routes that are hung are spinning their wheels while listing the files on the FTP server.  We are suspecting around the fact that the FTPClient socket timeout is not propagating to the camel level that is causing it to stay running.


Below is the stack strace:


java.lang.Thread.State: RUNNABLE
	at java.net.SocketInputStream.socketRead0(Native Method)
	at java.net.SocketInputStream.read(SocketInputStream.java:150)
	at java.net.SocketInputStream.read(SocketInputStream.java:121)
	at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:283)
	at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:325)
	at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:177)



locked <3b761536> (a java.io.InputStreamReader)
	at java.io.InputStreamReader.read(InputStreamReader.java:184)
	at java.io.BufferedReader.fill(BufferedReader.java:154)
	at java.io.BufferedReader.read(BufferedReader.java:175)
locked <3b761536> (a java.io.InputStreamReader)
	at org.apache.commons.net.io.CRLFLineReader.readLine(CRLFLineReader.java:58)
locked <3b761536> (a java.io.InputStreamReader)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:314)
	at org.apache.commons.net.ftp.FTP.__getReply(FTP.java:294)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:483)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:608)
	at org.apache.commons.net.ftp.FTP.sendCommand(FTP.java:582)
	at org.apache.commons.net.ftp.FTP.pwd(FTP.java:1454)
	at org.apache.commons.net.ftp.FTPClient.printWorkingDirectory(FTPClient.java:2658)
	at org.apache.camel.component.file.remote.FtpOperations.getCurrentDirectory(FtpOperations.java:697)
	at org.apache.camel.component.file.remote.FtpConsumer.pollDirectory(FtpConsumer.java:47)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:117)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)",davsclaus:1390810779:2014-01-27T16:19:39.749+0000:1390810779:2014-01-27T16:19:39.749+0000:Use the mailing list / user forum to get help.
0,CAMEL-7118,New Feature,Minor,None,2.14.0,"

features

",Resolved,Fixed,2.14.0,Willem Jiang,Alexander Lomov,0,4,2014-01-09 11:49:36+00:00,2015-07-14 18:43:41+00:00,"This patch introduces HazelcastAggregationRepository class that implements RecoverableAggregationRepository and OptimisticLockingAggregationRepository. This class uses a Hazelcast distributed maps as a backing store for operational and persisted exchanges.
This repository is aimed to support aggregation in an environment where multiple hosts run identical Camel routes which participate an aggregation process.","alexlomov:1389239787:2014-01-09T11:56:27.041+0000:1389239787:2014-01-09T11:56:27.041+0000:Pull request created: https://github.com/apache/camel/pull/84
githubbot:1397454016:2014-04-14T13:40:16.987+0000:1397454016:2014-04-14T13:40:16.987+0000:Github user alexlomov closed the pull request at:

    https://github.com/apache/camel/pull/84

alexlomov:1397480971:2014-04-14T21:09:31.291+0000:1397480971:2014-04-14T21:09:31.291+0000:Updated pull request with a fix: https://github.com/apache/camel/pull/134
njiang:1397603735:2014-04-16T07:15:35.028+0000:1397603735:2014-04-16T07:15:35.028+0000:Hi Alexander,
I just run the unit test after apply the PR 134, I got some test error. 
Can you take a look at these error?
{code}
Failed tests: 
  HazelcastAggregationRepositoryOperationsTest.checkOptimisticPersistentRemove:152->Assert.assertNotNull:621->Assert.assertTrue:41->Assert.fail:88 getBackEx should not be null.
  HazelcastAggregationRepositoryRoutesTest.checkAggregationFromTwoRoutes:92 mock://gotcha Received message count. Expected: <1> but was: <0>

Tests in error: 
  HazelcastAggregationRepositoryOperationsTest.checkThreadSafeGet:127 NullPointer
  HazelcastAggregationRepositoryOperationsTest.checkOptimisticAddOfNewExchange:51 » OptimisticLocking
  HazelcastAggregationRepositoryOperationsTest.checkOptimisticGet:103 NullPointer
  HazelcastAggregationRepositoryOperationsTest.checkThreadSafeAddOfNewExchange:80 NullPointer
{code}
njiang:1397604899:2014-04-16T07:34:59.078+0000:1397604899:2014-04-16T07:34:59.078+0000:OK, I managed to fixed the test error by changing the hazelcast-default.xml file in src/test/resources.
If I enabled tcp-ip address the two hazelcast instance can talk to each other now.

njiang:1397607427:2014-04-16T08:17:07.748+0000:1397607427:2014-04-16T08:17:07.748+0000:Applied the patch with camel master branch thanks to Alexander.
njiang:1397772744:2014-04-18T06:12:24.366+0000:1397772744:2014-04-18T06:12:24.366+0000:Hi Alexander，

Do you mind update the wiki page for the [hazelcast-component|http://camel.apache.org/hazelcast-component.html]?

Regards,

Willem
alexlomov:1397773456:2014-04-18T06:24:16.371+0000:1397773456:2014-04-18T06:24:16.371+0000:Hi Willem!
With a pleasure. 
What should I do?


njiang:1397774438:2014-04-18T06:40:38.482+0000:1397774438:2014-04-18T06:40:38.482+0000:Hi Alexander,  

You can edit the page [here|https://cwiki.apache.org/confluence/pages/editpage.action?pageId=25202845], if you already have a wiki account.

If you don't have the account, you may need to spend some time on [this page | http://camel.apache.org/how-do-i-edit-the-website.html] to get one.

Regards,

Willem
alexlomov:1397813296:2014-04-18T17:28:16.323+0000:1397813296:2014-04-18T17:28:16.323+0000:Hi Willem,
I guess I should start from the very beginning :) I'll check it out this weekend. 
Kind regards,
Alexander


davsclaus:1417649254:2014-12-04T07:27:34.296+0000:1417649254:2014-12-04T07:27:34.296+0000:[~alexlomov] did you update the documentation?"
0,CAMEL-7117,Improvement,Minor,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Mateusz Nowakowski,0,2,2014-01-09 11:39:07+00:00,2014-01-10 09:24:58+00:00,"When custom JettyClient is created for JettyHttpProducer (line 79 invoking JettyClientComponent:708)
only min/max threads can be provided, and all threads are created with non-daemon flag.


Personally I would make jetty client thread pool daemon only, but if it cannot be done, there should be additional flag on JettyEndpoint level to make it configurable.",davsclaus:1389317098:2014-01-10T09:24:58.306+0000:1389317098:2014-01-10T09:24:58.306+0000:We are now using daemon threads
0,CAMEL-7116,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Mateusz Nowakowski,0,2,2014-01-09 11:31:28+00:00,2014-01-10 09:04:57+00:00,"Case:


CamelContext with one route :


from(""direct:a"")
 .routingSlip(generateHttpUrl())


Where generateHttpUrl() returns  for example:


""jetty:http://someurl.com:666/some?httpClientMinThreads=128&""


When CamelContext is closing, JettyHttpProducer.doStop is not called.


Result:



When JettyHttpProducer.client is closing, its thread pool is not closed and the threads are non-deamon threads (subject to another JIRA),  so application cannot be shutdown.",davsclaus:1389315897:2014-01-10T09:04:57.043+0000:1389315897:2014-01-10T09:04:57.043+0000:Thanks for reporting. We now stop the thread pool.
0,CAMEL-7115,Sub-task,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Henryk Konsek,0,2,2014-01-09 08:12:52+00:00,2014-09-07 06:38:54+00:00,Jakub Korab mentioned on twitter that Spring DM distributed with the current version of ServiceMix doesn't work with Spring 4. We should investigate this.,"davsclaus:1410043134:2014-09-07T06:38:54.619+0000:1410043134:2014-09-07T06:38:54.619+0000:Its SMX/Karaf projects that have to support Spring 4.x on their container, if they desire to offer that. 

Maybe try to fork and fix the code in spring-dm 1.2.1 to get it working with spring 4.

Or try to get Gemini Blueprint working also - though not sure if that support spring 4.x also, as its a blueprint implementation."
0,CAMEL-7114,Sub-task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Henryk Konsek,0,3,2014-01-09 08:10:32+00:00,2014-08-29 06:11:54+00:00,Build invoked with the command `mvn install -Pspring4` should pass successfully.,"hekonsek:1389227679:2014-01-09T08:34:39.851+0000:1389227679:2014-01-09T08:34:39.851+0000:According to the Jenkins (1) we got three tests issues related to Spring API upgrade:

{code}
org.apache.camel.component.cxf.jms.CxfEndpointJMSConsumerTest.testInvocation
org.apache.camel.example.cxf.httptojms.CxfHttpJmsClientServerTest.testClientInvocation
org.apache.camel.testng.patterns.DebugSpringTest.setUp 
{code}

The CXF errors are cause by CXF using deprecated Spring 3 API for JMS. Maybe someone from CXF community could tell us more about perspectives for switching from deprecated {{org.springframework.jms.connection.SingleConnectionFactory102}} to recommended {{org.springframework.jms.connection.SingleConnectionFactory}}? 

(1) https://builds.apache.org/view/A-D/view/Camel/job/Camel.trunk.fulltest.spring4/1/
njiang:1408477313:2014-08-20T03:41:53.228+0000:1408477313:2014-08-20T03:41:53.228+0000:We already upgraded the CXF version to 3.0.x. 

davsclaus:1408657430:2014-08-22T05:43:50.707+0000:1408657430:2014-08-22T05:43:50.707+0000:Willem is all this working now?
njiang:1409263900:2014-08-29T06:11:40.384+0000:1409263900:2014-08-29T06:11:40.384+0000:Yeah, the spring4 profile build is working now."
0,CAMEL-7113,Improvement,Minor,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-01-08 12:27:07+00:00,2014-01-08 12:42:00+00:00,"See AMQ-4958


We should do similar in our uuid generator based on amq code",
0,CAMEL-7112,Bug,Major,2.12.2,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Claus Ibsen,John Yin,0,2,2014-01-07 16:47:14+00:00,2014-02-06 16:42:25+00:00,"When using consumer template's receiveBody on a SEDA queue that has multiple exchanges, a single call of receiveBody consumed more than one messages from the queue.  This happens for both receiveBody and receiveBodyNoWait.


I will attach a test project that can produce this issue.","bocamel:1389084863:2014-01-07T16:54:23.343+0000:1389084863:2014-01-07T16:54:23.343+0000:SInce it seems that I cannot attach files to this issue, here are the code to reproduce this issue:

public class TestProc implements Processor {
	
	public void process(Exchange exchange) throws Exception {
		SedaEndpoint queueEp = (SedaEndpoint) exchange.getContext().getEndpoint(""seda:test"");
		ConsumerTemplate cTemplate = (ConsumerTemplate) exchange.getContext().getRegistry().lookupByName(""cTemplate"");
		System.out.println(""seda queue size before receive: "" + queueEp.getExchanges().size());
		String msgBody = cTemplate.receiveBody(queueEp, 10, String.class);
		System.out.println(""seda queue size after receive: "" + queueEp.getExchanges().size());
	}

}

will produce the following output:

seda queue size before receive: 5 
seda queue size after receive: 0 

That is, after a single receive, the queue became empty.  The routes used are:

  <bean id=""testProc"" class=""com.pci.TestSeda.TestProc"" />
  <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">

        <camel:consumerTemplate id=""cTemplate"" />

    <camel:route>
      <camel:from uri=""file:src/data?noop=true""/>
      <camel:to uri=""seda:test"" />
    </camel:route>
    
    <camel:route>
    <camel:from uri=""timer://foo?period=500000"" />
    <camel:process ref=""testProc""/>
    </camel:route>
  </camel:camelContext>

Thank you!

davsclaus:1391669516:2014-02-06T14:51:56.742+0000:1391669516:2014-02-06T14:51:56.742+0000:Thanks for reporting. Yeah we should use a real polling consumer implementation instead of the event driven, then we can better control taking exchanges from the queue."
0,CAMEL-7111,Bug,Major,2.12.2,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-01-07 08:42:40+00:00,2014-01-07 09:17:59+00:00,"See nabble
http://camel.465427.n5.nabble.com/multicast-aggregation-tp5745571.html",
0,CAMEL-7110,Task,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Willem Jiang,0,1,2014-01-07 02:32:17+00:00,2014-01-07 04:23:47+00:00,No Desc,njiang:1389039827:2014-01-07T04:23:47.659+0000:1389039827:2014-01-07T04:23:47.659+0000:Applied the patch into master branch.
0,CAMEL-7109,Improvement,Minor,"2.11.1, 2.12.0, 2.12.2","2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Ronald Dehuysser,0,3,2014-01-06 21:30:03+00:00,2014-06-02 13:28:27+00:00,"Hi all, 


for a project I'm working on where mail attachments are retrieved from a gmail account, the order of the attachments is very important. 


In Camel, I use a SplitAttachmentsExpression to split all the attachments and process them sequentially. 


However, I saw that the method createAttachments in DefaultMessage is using a plain old HashMap, thus resulting in a random order of the attachments. If this would be a LinkedHashMap, the order of the messages would be assured when processing in Camel.","rdehuyss:1389015150:2014-01-06T21:32:30.979+0000:1389015150:2014-01-06T21:32:30.979+0000:Patch to make sure that attachments are sorted correctly.
davsclaus:1389058008:2014-01-07T09:26:48.756+0000:1389058008:2014-01-07T09:26:48.756+0000:Thanks for the patch.
iweiss:1401686898:2014-06-02T13:28:18.274+0000:1401686907:2014-06-02T13:28:27.029+0000:Hello,

Can this patch be applied to Camel 2.10 as well?

Thanks"
0,CAMEL-7108,Wish,Major,2.12.2,Future,"
None
",Resolved,Not A Problem,Future,Christian Posta,Christian Posta,1,2,2014-01-06 18:43:30+00:00,2014-01-13 19:55:32+00:00,"The dataformat for avro requires code generation. However, using the schema only, avro allows marshal/unmarshal without code generation. Would be nice to support this in Camel.","davsclaus:1389317503:2014-01-10T09:31:43.623+0000:1389317503:2014-01-10T09:31:43.623+0000:Anyone working on this?
ceposta:1389614132:2014-01-13T19:55:32.068+0000:1389614132:2014-01-13T19:55:32.068+0000:This does work.. as shown in the tests I added..

https://git-wip-us.apache.org/repos/asf?p=camel.git;a=commitdiff;h=9dc34bc3941ddffe317c84f5f0d33a89c2a30f7d"
0,CAMEL-7107,Bug,Major,2.13.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Marios Trivyzas,0,3,2014-01-06 13:14:17+00:00,2014-01-10 10:55:56+00:00,When connection to a broker (HornetQ) is destroyed due to networking issues or broker internal issues or restarts the getProducers().borrowObject() returns null which is not handled properly.,"davsclaus:1389317455:2014-01-10T09:30:55.688+0000:1389317455:2014-01-10T09:30:55.688+0000:Willem, have you fixed this?
njiang:1389322556:2014-01-10T10:55:56.184+0000:1389322556:2014-01-10T10:55:56.184+0000:Applied the patch into master and camel-2.12.x fixed branches."
0,CAMEL-7106,Bug,Major,2.12.2,2.13.0,"

patch

",Resolved,Fixed,2.13.0,Willem Jiang,Mark Riordan,0,2,2014-01-05 01:48:23+00:00,2014-01-06 03:31:06+00:00,"Camel Crypto fails to decrypt PGP files encrypted by GnuPG and other programs, when the secret key used to encrypt the symmetric key is not the first on the keyring (using Bouncy Castle's definition of a keyring). The error message is ""Provided input is encrypted with unknown pair of keys.""  Since the encryption key in files from other PGP programs normally is a subkey and is not the first one in the keyring (which is typically the master key), this means that decryption fails in many cases.


The fix is a one-liner to PGPDataFormatUtil.findPrivateKeyWithKeyId(), to use a BC method that searches for the secret key rather than assume it's the first one on the secret keyring.  I will attach a patch.","njiang:1388950266:2014-01-06T03:31:06.940+0000:1388950266:2014-01-06T03:31:06.940+0000:This issue is resolved in CAMEL-7052 few days ago, please try to use the latest camel-2.13-SNAPSHOT to verify the fix."
0,CAMEL-7105,New Feature,Major,2.13.0,"2.12.3, 2.13.0","

SES
SQS
aws

",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,adrian jagnanan,0,3,2014-01-03 23:03:39+00:00,2014-01-10 11:15:39+00:00,"Hello,


I am putting a ticket in for 2 features we found missing in the aws component. I have these in a pull request already, located here https://github.com/apache/camel/pull/60. Thanks.","davsclaus:1389317578:2014-01-10T09:32:58.390+0000:1389317578:2014-01-10T09:32:58.390+0000:Is the documentation updated as well?
njiang:1389323739:2014-01-10T11:15:39.885+0000:1389323739:2014-01-10T11:15:39.885+0000:Applied patch into camel-2.12.x and master branch with thanks to Adrian."
0,CAMEL-7104,Improvement,Minor,None,None,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Colm O hEigeartaigh,0,2,2014-01-03 16:46:31+00:00,2014-01-07 09:27:04+00:00,"Currently, the ShiroSecurityPolicy takes a List of Shiro Permission objects for authorization. Authorization succeeds if ""any"" of the permissions match that of the current user. However, it's not possible to support requiring ""all"" of the permissions, expect via the permission wildcard syntax, which may not be convenient for every circumstance.","coheigea:1388738844:2014-01-03T16:47:24.787+0000:1388738844:2014-01-03T16:47:24.787+0000:
A patch for this issue.

Colm.
davsclaus:1388798801:2014-01-04T09:26:41.834+0000:1388798801:2014-01-04T09:26:41.834+0000:Thanks for the patch.

Do you mind updating the doc page at with the new option?
http://camel.apache.org/shiro-security.html
coheigea:1388997334:2014-01-06T16:35:34.009+0000:1388997334:2014-01-06T16:35:34.009+0000:
Done!

Colm."
0,CAMEL-7103,Improvement,Major,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2014-01-03 12:19:15+00:00,2014-01-03 12:50:03+00:00,"At runtime quartz scheduler does not have any information about the triggers which is easily available to know if its a simple or cron trigger, and how they are configured.


Having those details in the job map allows end users to access this information in the Camel routes.",
0,CAMEL-7102,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Gregor Zurowski,0,2,2014-01-02 02:02:28+00:00,2014-01-03 04:43:33+00:00,"The following JUnit tests that are supposed to test authentication with the camel-jcr component are currently broken and disabled (annotated @Ignore):



AuthTokenLoginFailureTest
JcrAuthTokenWithLoginTest



Testing authentication in camel-jcr (i.e. connection URI parsing) is essential and should be fixed.","gzurowski:1388600205:2014-01-02T02:16:45.719+0000:1388600205:2014-01-02T02:16:45.719+0000:The attached patch fixes the authentication test cases for the camel-jcr component. Also submitted pull request https://github.com/apache/camel/pull/82.
gzurowski:1388600860:2014-01-02T02:27:40.885+0000:1388600860:2014-01-02T02:27:40.885+0000:Regarding pull request https://github.com/apache/camel/pull/82: Please note that the JUnit classes were renamed in a second commit (https://github.com/gzurowski/camel/commit/71ad30423ef5d61e60e746d1d6465fc58367355c) to reflect what is actually tested. The previous class names were misleading as they tested the opposite of what the name suggested.
njiang:1388695413:2014-01-03T04:43:33.827+0000:1388695413:2014-01-03T04:43:33.827+0000:Applied patch into master and camel-2.12.x branches with thanks to Gregor."
0,CAMEL-7101,New Feature,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Pontus Ullgren,0,2,2013-12-29 21:32:37+00:00,2013-12-30 02:59:16+00:00,"An aggregation strategy that aggregate multiple message into a zip file.


Component is set to camel-core since I could not find camel-zipfile in the component list.","pontus.ullgren:1388324201:2013-12-29T21:36:41.327+0000:1388324201:2013-12-29T21:36:41.327+0000:Patch with unit test.
njiang:1388343556:2013-12-30T02:59:16.714+0000:1388343556:2013-12-30T02:59:16.714+0000:Applied the patch into master and camel-2.12.x branches with thanks to Pontus. I also fix a small issue of OSGi meta-info."
0,CAMEL-7100,Bug,Major,"2.9.4, 2.9.5, 2.10.2, 2.10.3, 2.11.0, 2.12.2","2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Wayne Bagguley,0,2,2013-12-27 14:14:33+00:00,2014-01-03 07:25:59+00:00,See http://camel.465427.n5.nabble.com/Trouble-with-split-tokenize-on-linux-td5721677.html for details,"waynebagguley:1388126957:2013-12-27T14:49:17.788+0000:1388126957:2013-12-27T14:49:17.788+0000:This is still a problem.

In Java 7 the Scanner class now implements Closeable so the fix for 5767 does not work as the Splitter code handling the IOException never gets executed.

Furthermore there is an additional problem when using tokenize with grouping e.g.: from(""file:inbox"").split().tokenize(""\n"", 1000).streaming().to(""activemq:queue:order"");

In this case the Scanner object is wrapped in a GroupIterator and the code in the Splitter to handle the case of when the Scanner exited with an exception does not get executed because GroupIterator implements Closeable (and is not an instance of Scanner either). I.e. in both cases only the first case of the IF statement on line 149 of the Splitter class will be executed and this leads to no exception being thrown and incorrect behaviour whereby the incorrect number of split messages gets processed and the route exits with no errors.
njiang:1388705159:2014-01-03T07:25:59.629+0000:1388705159:2014-01-03T07:25:59.629+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x."
0,CAMEL-7099,Improvement,Minor,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-12-27 08:40:52+00:00,2013-12-27 08:53:51+00:00,Specially in the context of CAMEL-7080 (e.g. when dealing with very big CSV files) this could bring performance benefit as then using buffering there will be less effective I/O being performed.,
0,CAMEL-7098,Task,Minor,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-12-26 21:18:31+00:00,2013-12-27 07:36:03+00:00,"After CAMEL-7080 the unmarshalling logic and it's code seems to become too complicated (at least to me ).


We could improve the logic a bit for the sake of better code-readability.","bvahdat:1388100963:2013-12-27T07:36:03.727+0000:1388100963:2013-12-27T07:36:03.727+0000:Also added one more test to {{CsvUnmarshalSkipFirstLineTest}}, polished {{CsvUnmarshalStreamSpringTest}} and added more asserts to it."
0,CAMEL-7097,Task,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Babak Vahdat,Babak Vahdat,0,1,2013-12-26 18:13:16+00:00,2013-12-26 18:18:14+00:00,No Desc,"bvahdat:1388053022:2013-12-26T18:17:02.448+0000:1388053022:2013-12-26T18:17:02.448+0000:Nice to see that now Jclouds makes use of Guava 15.0 :)

http://central.maven.org/maven2/org/apache/jclouds/karaf/jclouds-karaf/1.7.0/jclouds-karaf-1.7.0-features.xml"
0,CAMEL-7096,Bug,Minor,2.12.2,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-12-26 14:56:59+00:00,2013-12-26 15:08:48+00:00,"According to the java.util.Iterator#next() contract the implementation should throw NoSuchElementException if the iteration has no more elements. However this is currently not the case by the different anonymous class implemetations of this interface through ObjectHelper#createIterator().


The side effect of this is that currently this could end up with IndexOutOfBoundsException and what not if one would iterate over the Node(s) of a DOM NodeList. Another example is that calling next() on the Iterator returned for an empty String repeatedly doesn't throw  any NoSuchElementException although it's hasNext() method returns false!


We should better provide guards for the condition when there's no more elements available in which case a NoSuchElementException should be thrown.",
0,CAMEL-7095,Wish,Minor,"2.11.2, 2.12.2, 2.13.0",None,"
None
",Resolved,Won't Fix,None,Willem Jiang,Leonid Marushevskiy,0,2,2013-12-26 12:51:06+00:00,2013-12-27 03:31:57+00:00,"https://github.com/apache/camel/pull/80


During Veracode scan of our application we discover several warnings in Camel. Please review our fix and apply it if it make sense.


Quote from Veracode report below:
Insufficient Entropy (CWE ID 331)(7 flaws)
Description
Standard random number generators do not provide a sufficient amount of entropy when used for security purposes.
Attackers can brute force the output of pseudorandom number generators such as rand().
Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.
Recommendations
If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead. These can be found on the Windows platform in the
CryptoAPI or in an open source library such as OpenSSL.","njiang:1388086307:2013-12-27T03:31:47.052+0000:1388086307:2013-12-27T03:31:47.052+0000:Hi Leonid

Thanks for the reporting. I just checked the usage of the Random code, they are not for security usage. 
So I think we don't need to change it.

Regards,

Willem"
0,CAMEL-7094,Bug,Minor,2.12.2,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Kirill Vergun,0,2,2013-12-24 15:28:03+00:00,2015-02-05 14:56:05+00:00,"It defines <property /> as following:



<xs:element name=""property"" nillable=""true"" type=""xs:anyType""/>




via



<xs:complexType name=""propertiesDefinition"">
  <xs:sequence>
    <xs:element ref=""tns:property"" minOccurs=""0"" maxOccurs=""unbounded""/>
  </xs:sequence>
</xs:complexType>




but I believe that it should be a link to the existing



<xs:complexType name=""propertyDefinition"">
  <xs:sequence/>
  <xs:attribute name=""key"" type=""xs:string"" use=""required""/>
  <xs:attribute name=""value"" type=""xs:string"" use=""required""/>
</xs:complexType>","davsclaus:1388796908:2014-01-04T08:55:08.771+0000:1388796908:2014-01-04T08:55:08.771+0000:The schema is auto generated and JAXB has a problem when there is multiple classes with the same type name (eg ""property""). So we will look into this in Camel 3.0 where the schema can be adjusted.

The <properties> still work fine, for end users, if they set the tags as documented.
davsclaus:1406076642:2014-07-23T08:50:42.792+0000:1406076642:2014-07-23T08:50:42.792+0000:Yeah I think we need to slight adjust the xsd so setting properties for CamelContext should use a different name so there is no clash.
davsclaus:1423097654:2015-02-05T08:54:14.566+0000:1423097654:2015-02-05T08:54:14.566+0000:We have a chance to get this fixed now"
0,CAMEL-7093,Task,Minor,"2.10.7, 2.11.2, 2.12.2","2.12.3, 2.13.0","

Security
Veracode

",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Leonid Marushevskiy,0,2,2013-12-23 09:26:06+00:00,2013-12-24 15:28:36+00:00,"Pull request https://github.com/apache/camel/pull/77


During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.
Quote from Veracode report below:


Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)
Description
The application fails to release (or incorrectly releases) a system resource before it is made available for re-use. This
condition often occurs with resources such as database connections or file handles. Most unreleased resource issues
result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be
possible to launch a denial of service attack by depleting the resource pool.
Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.
Recommendations
When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as
accounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.
Instances found via Static Scan
.../QuartzComponent.java line 436",davsclaus:1387870116:2013-12-24T15:28:36.632+0000:1387870116:2013-12-24T15:28:36.632+0000:Thanks I am using IOHelper to close the stream. And there was 2 places in the component to close it.
0,CAMEL-7092,New Feature,Major,2.13.0,None,"
None
",Resolved,Fixed,2.13.0,Hadrian Zbarcea,Hadrian Zbarcea,1,7,2013-12-23 03:44:21+00:00,2014-03-12 08:24:55+00:00,"See thread request pull from github fork:
http://camel.465427.n5.nabble.com/camel-pull-request-Added-Apache-Kafka-component-td5745174.html","hadrian:1387741928:2013-12-23T03:52:08.502+0000:1387741928:2013-12-23T03:52:08.502+0000:For due diligence, I am tracking the origins of the code. More comments may be available with the [pull request|https://github.com/apache/camel/pull/76]. I'll do my best to copy relevant parts here.
samspade79:1389508189:2014-01-12T14:29:49.363+0000:1389508189:2014-01-12T14:29:49.363+0000:Are you still interested in merging this? I added a comment onto the original PR.
hadrian:1389518992:2014-01-12T17:29:52.281+0000:1389518992:2014-01-12T17:29:52.281+0000:Yes Stephen, I did see it, but only last week. I do have cycles this week do get it done. Thanks for your patience.

PKUKILLA:1389904148:2014-01-17T04:29:08.306+0000:1389904148:2014-01-17T04:29:08.306+0000:Hadrian, So will it be available as part of https://github.com/apache/camel/tree/master/components by end of this week?. 
samspade79:1391436658:2014-02-03T22:10:58.399+0000:1391436658:2014-02-03T22:10:58.399+0000:Is there still interest in this awesome contribution :)
hadrian:1391437433:2014-02-03T22:23:53.324+0000:1391437433:2014-02-03T22:23:53.324+0000:(hadrian ducks)

Of course there is. 
@Premchandra: near the top of my list. Need to put a couple of fires out first. Keep your fingers crossed.
hadrian:1391783504:2014-02-07T22:31:44.955+0000:1391783504:2014-02-07T22:31:44.955+0000:Committed in e5f44a11a1750bc2bd151bd56ffac6c714190641 (misspelled camel in comment). I had to add a dependency on mockito to get the builds going. There are a bunch of checkstyle issues I will fix in my next commit (didn't do it in the first commit to keep it close to the original contribution).

Thanks Stephen for the contribution, I hope you could help with the documentation in the wiki. Let's keep this issue open until then
PKUKILLA:1391784979:2014-02-07T22:56:19.676+0000:1391784979:2014-02-07T22:56:19.676+0000:<dependency>
            <groupId>org.mockito</groupId>
             <artifactId>mockito-all</artifactId>
             <version>1.9.5</version>
            <scope>test</scope>
        </dependency>




davsclaus:1391819568:2014-02-08T08:32:48.295+0000:1391914708:2014-02-09T10:58:28.560+0000:We would need a camel-kafka feature for OSGi users. Not sure if Kafka is OSGi bundle out of the box.
njiang:1392833065:2014-02-20T02:04:25.118+0000:1392833065:2014-02-20T02:04:25.118+0000:It could take a while to provide the Kafka OSGi bundle, so I just created CAMEL-7227 for it so we can address the feature issue in next release.
davsclaus:1394583895:2014-03-12T08:24:55.371+0000:1394583895:2014-03-12T08:24:55.371+0000:[~samspade79] do you have any documentation for this new camel-kafka component?

I logged a ticket about that https://issues.apache.org/jira/browse/CAMEL-7288
"
0,CAMEL-7091,Improvement,Major,2.10.0,Future,"

blueprint
events

",Resolved,Abandoned,Future,Willem Jiang,Henrique Viecili,0,4,2013-12-22 22:59:03+00:00,2016-11-22 19:20:02+00:00,"I'm facing a similar issue to what is describer at CAMEL-5299, this time the same behaviour happen when using the EventNotifier from another bundle's exported service.


Bundle 1 (exposes an EventNotifier):
Export-Service =
        com.event.logger.CommonLogEventNotifier


blueprint.xml:
	<service id=""commonLogEventNotifier"" interface=""com.event.logger.CommonLogEventNotifier"">
		<bean class=""com.event.logger.CommonLogEventNotifierImpl"">
		</bean>
	</service>


Bundle 2 (uses the EventNotifier)
Import-Service =
        com.event.logger.CommonLogEventNotifier;multiple:=false


blueprint.xml:
	<reference id=""commonLogEventNotifier"" interface=""com.event.logger.CommonLogEventNotifier"" />


The EventNotifier class definition is:
public class CommonLogEventNotifierImpl extends EventNotifierSupport implements EventNotifier, com.event.logger.CommonLogEventNotifier","njiang:1387993232:2013-12-26T01:40:32.128+0000:1387993232:2013-12-26T01:40:32.128+0000:Can you show us the code of CommonLogEventNotifierImpl and blueprint of bundle2?
It could be helpful for us digging the issue.
viecili:1388028004:2013-12-26T11:20:04.693+0000:1388028004:2013-12-26T11:20:04.693+0000:Unfortunately I won't be able to share the code because it belongs to the company I used to work for (left 2 days ago). 

From what I remember, it's a simple EventNotifier that accepts AbstractExchangeEvent's and logs the exchange details once the events are fired.

The blueprint in bundle2 is quite simple as well. It imports the EventNotifier (1st line after <blueprint ...> ) and also imports a JMS ConnectionFactory used to create a Camel JmsComponent used in the camel routes. The CamelContext itself has a global onException declaration and a couple of 'queue-forwarding' routes (from Q.A -> log -> to Q.B )


It works if I change:
<reference id=""commonLogEventNotifier"" interface=""com.event.logger.CommonLogEventNotifier"" />
to
<bean id=""commonLogEventNotifier"" class=""com.event.logger.CommonLogEventNotifierImpl"" />
(but then, it doesn't fit the goal we wanted to achieve)


davsclaus:1479813602:2016-11-22T19:20:02.364+0000:1479813602:2016-11-22T19:20:02.364+0000:Try again with latest code as so many years has passed and the reported cannot provide a test case reproducing the issue"
0,CAMEL-7090,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,2,2013-12-22 13:47:52+00:00,2014-01-08 20:55:26+00:00,"The latest version of JGroups has been migrated to the Apache 2.0 license. There is no reason then to host this component under Camel Extra umbrella. 


We should migrate (1) JGroups component to ASF Camel.


(1) https://camel-extra.atlassian.net/browse/CAMEX-5","bvahdat:1388057507:2013-12-26T19:31:47.150+0000:1388057507:2013-12-26T19:31:47.150+0000:We've got already a karaf feature for this new component now (Willem) and the corresponding test for it ({{camel-itest-karaf}}) to verify the feature installation (me).
hekonsek:1388060827:2013-12-26T20:27:07.220+0000:1388060827:2013-12-26T20:27:07.220+0000:Guys, you work with the speed of light :) I wanted to move feature and itest from Camel Extra today, but you were faster. Many thanks for this :) .

I'll update documentation and close the issue after this.

Cheers."
0,CAMEL-7089,Bug,Minor,2.12.2,,"
None
",Resolved,Won't Fix,None,Willem Jiang,John Yin,0,2,2013-12-21 22:03:28+00:00,2013-12-26 01:59:03+00:00,"When using the ""context"" attribute in a language://groovy.resource.classpath: endpoint, I received the error below.  But since the ""request"" attribute is still available, there is an easy workaround to access the CamelContext via Message and Exchange.


groovy.lang.MissingPropertyException: No such property: context for class: script1387662776758798628846
	at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:50)
	at org.codehaus.groovy.runtime.callsite.PogoGetPropertySite.getProperty(PogoGetPropertySite.java:49)
	at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callGroovyObjectGetProperty(AbstractCallSite.java:231)
	at script1387662776758798628846.run(script1387662776758798628846.groovy:93)
	at org.apache.camel.language.groovy.GroovyExpression.evaluate(GroovyExpression.java:52)
	at org.apache.camel.component.language.LanguageProducer.process(LanguageProducer.java:82)
	at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
	at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:110)
	at org.apache.camel.management.InstrumentationProcessor.process(InstrumentationProcessor.java:72)
	at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
	at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
	at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
	at org.apache.camel.component.file.GenericFileConsumer.processExchange(GenericFileConsumer.java:401)
	at org.apache.camel.component.file.GenericFileConsumer.processBatch(GenericFileConsumer.java:201)
	at org.apache.camel.component.file.GenericFileConsumer.poll(GenericFileConsumer.java:165)
	at org.apache.camel.impl.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:187)
	at org.apache.camel.impl.ScheduledPollConsumer.run(ScheduledPollConsumer.java:114)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRunAndReset(FutureTask.java:351)
	at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:178)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)","njiang:1387939980:2013-12-25T10:53:00.088+0000:1387939980:2013-12-25T10:53:00.088+0000:I checked the code of ScriptBuilder, it looks like the context is support out box.
{code}
        int scope = ScriptContext.ENGINE_SCOPE;
        context.setAttribute(""context"", exchange.getContext(), scope);
        context.setAttribute(""camelContext"", exchange.getContext(), scope);
        context.setAttribute(""exchange"", exchange, scope);
        Message in = exchange.getIn();
        context.setAttribute(""request"", in, scope);
        context.setAttribute(""headers"", in.getHeaders(), scope);
        context.setAttribute(""body"", in.getBody(), scope);
{code}
Can you try to use camelContext instead of context in your groovy script?

bocamel:1387992650:2013-12-26T01:30:50.871+0000:1387992650:2013-12-26T01:30:50.871+0000:When ""camelContext"" is used in the groovy script, it works.


njiang:1387994267:2013-12-26T01:57:47.013+0000:1387994267:2013-12-26T01:57:47.013+0000:It looks like groovy is using context for the other use case, I already update the wiki page for it.

njiang:1387994343:2013-12-26T01:59:03.494+0000:1387994343:2013-12-26T01:59:03.494+0000:Provided a workaround for it, and updated the wiki for it."
0,CAMEL-7088,Improvement,Minor,"2.11.3, 2.12.3, 2.13.0","2.11.3, 2.12.3, 2.13.0","

Security
Veracode

",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Leonid Marushevskiy,0,2,2013-12-20 15:45:22+00:00,2013-12-23 09:32:00+00:00,"Pull request https://github.com/apache/camel/pull/74


During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.


Pull request https://github.com/apache/camel/pull/74
During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions.
Quote from Veracode report below:
Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)
Description
The application fails to release (or incorrectly releases) a system resource before it is made available for re-use. This
condition often occurs with resources such as database connections or file handles. Most unreleased resource issues
result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be
possible to launch a denial of service attack by depleting the resource pool.
Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.
Recommendations
When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as
accounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.
Instances found via Static Scan
.../FileLockExclusiveReadLockStrategy.java line 68","davsclaus:1387532492:2013-12-20T17:41:32.557+0000:1387532492:2013-12-20T17:41:32.557+0000:I am using IOHelper.close to close them like the others.

Thanks for reporting and the patch."
0,CAMEL-7087,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Stephan Siano,0,3,2013-12-20 12:16:45+00:00,2013-12-20 17:28:20+00:00,"The StreamCache does not reset at the end of the pipeline.


The following routes will not work as expected:
   from(""direct:c"").noStreamCaching().to(""direct:d"").to(""mock:c"");
   from(""direct:d"").streamCaching().process(new TestProcessor());


(the test processor is a processor that reads the InputMessage)


If another processor is added after the TestProcessor that does nothing, the routes will work as expected.


This case is a bit synthetic, but in real life a route that starts with a InOut CXF endpoint, has an endpoint that generates a Stream and then writes the message content to an in only endpoint (file, FTP, log, etc.) will also fail, even if stream caching is enabled.","siano:1387513632:2013-12-20T12:27:12.686+0000:1387513632:2013-12-20T12:27:12.686+0000:The root cause is currently the StreamCache is reset only before the executin of the processor, not afterwards. If the consumer gets the exchange back, a StreamCache in the in-message will remain as it is and does not close.

My patch also resets the stream cache after each processor. This means normally the reset() will be executed twice on the stream cache (after the previous processor and before the next), but a reset() on a StreamCache that was reset before, will only do a null comparison, so it doesn't cost much. I also considered to remove the reset before the processors, but I am not sure whether this doesn't break wiretaps or the like.
davsclaus:1387531700:2013-12-20T17:28:20.332+0000:1387531700:2013-12-20T17:28:20.332+0000:Thanks for reporting and the patch."
0,CAMEL-7086,Improvement,Minor,None,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-12-20 11:29:00+00:00,2013-12-22 02:56:08+00:00,"Klaus sent us a pull request in the github for it.
https://github.com/apache.camel/pull/72","njiang:1387652013:2013-12-22T02:53:33.714+0000:1387652167:2013-12-22T02:56:07.995+0000:Applied patch into master, camel-2.12.x and camel-2.11.x branches. Thank to Klaus for the patch."
0,CAMEL-7085,Bug,Minor,None,,"
None
",Resolved,Fixed,None,Willem Jiang,Willem Jiang,0,1,2013-12-20 05:41:30+00:00,2013-12-22 02:55:53+00:00,"We got a pull request in the github for it.
https://github.com/apache/camel/pull/72","njiang:1387652153:2013-12-22T02:55:53.944+0000:1387652153:2013-12-22T02:55:53.944+0000:Applied the patch with some enhancement into master, camel-2.12.x and camel-2.11.x branches. Thank to Klaus for the patch."
0,CAMEL-7084,Bug,Major,2.11.0,,"
None
",Resolved,Invalid,None,Claus Ibsen,kartik kudada,0,3,2013-12-19 16:46:02+00:00,2015-02-15 16:02:10+00:00,"Hi,


I am very new in Camel, i am trying to create a polling mechanism where application look for file at every 1 hour, if file is found it transfer to destination. I have used spring DSL with quartz.
For the polling every hour i am using pollEnrich . It is working fine and it picks up file every hour and transfer it.


But when i use throwExceptionOnConnectFailed and move options with pollEnrich, it simply ignores it, because when i try with wrong username and password, it does not throw any Exception and does not move processed file to Done folder. 
Below is the code snipped :-


<route id=""ABC"">
            <from uri=""quartz://scheder/mytimer?cron=0+0+*+?""/>
            <pollEnrich uri=""sftp://username:*******@host/myfolder/?include=.*.dat&throwExceptionOnConnectFailed=true&move=../Done/&moveFailed=../Exception/&stepwise=false&disconnect=true&delay=5000&idempotent=true&delete=true"" timeout=""10000""/>
        	 <to uri=""destination-folder""/>
        </route>


Any inputs are highly appreciable.","kartik.kudada:1388465266:2013-12-31T12:47:46.854+0000:1388465266:2013-12-31T12:47:46.854+0000:Hi,

Please help me on above issue.
I am still struggling with same issue. 
rene avontuur:1388650964:2014-01-02T16:22:44.374+0000:1388650964:2014-01-02T16:22:44.374+0000:I checked if I could write some missing unit test, but the use of throwExceptionOnConnectFailed is already well covered by FtpConsumerThrowExceptionOnLoginFailedTest.
The documentation on the use of throwExceptionOnConnectFailed  is also complete, but a bit minimalistic: 'This allows a custom pollStrategy to deal with the exception, for example to stop the consumer or the likes.' 
The name 'throwExceptionOnConnectFailed' might be misleading. An alternative name could be rollbackOnConnectFailed?

If no own pollstrategy is supplied, then DefaultPollingConsumerPollStrategy is used. The rollback method only returns a false.
The exception will be caught anyway, and handled by the LoggingExceptionHandler, which logs the exception as a warning.
In the log one should find something like:

2014-01-02 16:14:29,104 [:21000/badlogin] WARN  FtpConsumer                    - Consumer FtpConsumer[ftp://dummy@localhost:21000/badlogin?password=xxxxxx&throwExceptionOnConnectFailed=true] failed polling endpoint: Endpoint[ftp://dummy@localhost:21000/badlogin?password=xxxxxx&throwExceptionOnConnectFailed=true]. Will try again at next poll. Caused by: [org.apache.camel.component.file.GenericFileOperationFailedException - File operation failed: 530 Authentication failed.
. Code: 530]
org.apache.camel.component.file.GenericFileOperationFailedException: File operation failed: 530 Authentication failed.
. Code: 530
	at org.apache.camel.component.file.remote.FtpOperations.connect(FtpOperations.java:166)


kartik.kudada:1388654593:2014-01-02T17:23:13.914+0000:1388654764:2014-01-02T17:26:04.383+0000:Hi,
Thanks for reply.
I checked the logs and found the same as you have mentioned above.
I am sorry , i have not provided exception handling part which was there in my code.
So here is the full snipped with exception handling. As per the snipped, mail should be gone as soon as Exception is caught but it does not. 
Same code is working fine if SFTP server is used as destination, but when i use SFTP server as source it does not throw exception as desired.  
Please let me know if i am mistaking anything. 

<route id=""ABC"">
<from uri=""quartz://scheder/mytimer?cron=0+0+*+?""/>
<pollEnrich uri=""sftp://username:*******@host/myfolder/?include=.*.dat&throwExceptionOnConnectFailed=true&move=../Done/&moveFailed=../Exception/&stepwise=false&disconnect=true&delay=5000&idempotent=true&delete=true"" timeout=""10000""/>
<to uri=""destination-folder""/>
<onException>
                <exception>java.lang.Exception</exception>
                <transform>
                    <simple>Exception while transferring file: ${exception.message}\n\n${exception.stacktrace}
                    </simple>
                </transform>
                <to uri=""smtp://{{{{mail.host}}}}?from={{{{mail.from}}}}&amp;to={{{{mail.to}}}}&amp;subject={{{{mail.subject.environment}}}}  File Transferring File ""/>
            </onException>
</route>
 
rene avontuur:1388682550:2014-01-03T01:09:10.202+0000:1388682550:2014-01-03T01:09:10.202+0000:I added a unit test which shows the behaviour when the ftp-endpoint is a producer and a failed login occurs.
For an ftp-producer the following is true:
1- The option 'throwExceptionOnConnectFailed' has no effect 
2- A producer ALWAYS throws an exception that can be handled by an exception clause.
For an ftp-consumer the following is true:
1- The option 'throwExceptionOnConnectFailed' has effect 
2- A consumer NEVER throws an exception that can be handled by an exception clause.
My conclusion: The name of the option 'throwExceptionOnConnectFailed' is misleading. This option applies also only to consumers. 

Kartik can probably solve his problem by writing an own implementation of PollingConsumerPollStrategy


davsclaus:1423987191:2015-02-15T15:59:51.924+0000:1423987208:2015-02-15T16:00:08.458+0000:Maybe related to CAMEL-7565
davsclaus:1423987314:2015-02-15T16:01:54.899+0000:1423987314:2015-02-15T16:01:54.899+0000:It can of course not move any files if the username and password is invalid. That operation only happends if the connection to the FTP server is valid, and the file was download and processed."
0,CAMEL-7083,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Colm O hEigeartaigh,0,2,2013-12-19 15:25:28+00:00,2013-12-22 03:08:18+00:00,"Two Camel components use default keys for encryption: camel-xmlsecurity and camel-shiro. This task is to log a warning when this happens, as using a default secret key is more or less meaningless.","coheigea:1387437968:2013-12-19T15:26:08.844+0000:1387437968:2013-12-19T15:26:08.844+0000:
A patch for this issue.

Colm.
njiang:1387652898:2013-12-22T03:08:18.054+0000:1387652898:2013-12-22T03:08:18.054+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Colm."
0,CAMEL-7082,Improvement,Minor,None,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-12-19 01:41:18+00:00,2013-12-19 09:53:24+00:00,"We need to provide the setting of maxQueued parameter in camel-restlet component to help resolve the restlet connector overload issue.


http://stackoverflow.com/questions/20632706/apache-restlet-connector-overload","njiang:1387418004:2013-12-19T09:53:24.812+0000:1387418004:2013-12-19T09:53:24.812+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7081,Improvement,Minor,None,,"

documentation
html

",Resolved,Fixed,None,Willem Jiang,Per Jørgen Walstrøm,0,3,2013-12-18 22:09:51+00:00,2014-03-28 08:50:56+00:00,"e.g. http://camel.apache.org/wire-tap.html
where the code content is not displayed","njiang:1387389614:2013-12-19T02:00:14.223+0000:1387389614:2013-12-19T02:00:14.223+0000:I just checked the wiki page, it can display the code.
https://cwiki.apache.org/confluence/display/CAMEL/Wire+Tap
pjwalstrom:1387422423:2013-12-19T11:07:03.189+0000:1387422423:2013-12-19T11:07:03.189+0000:same problem with these pages
http://camel.apache.org/content-based-router.html
http://camel.apache.org/how-can-i-stop-a-route-from-a-route.html
http://camel.apache.org/publish-subscribe-channel.html
pjwalstrom:1387428054:2013-12-19T12:40:54.013+0000:1387428054:2013-12-19T12:40:54.013+0000:and third-last code-block of
http://camel.apache.org/seda.html
dkulp:1387434884:2013-12-19T14:34:44.783+0000:1387434884:2013-12-19T14:34:44.783+0000:Complete list of potential problem pages:

{code}

WARNING: Page ""Index"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Banner"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Navigation"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SiteIndex"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Download"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Routes"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Message Filter"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Content Based Router"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Predicate"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Recipient List"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Wire Tap"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Splitter"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Message Router"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Selective Consumer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Error Handler"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Dead Letter Channel"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring XML Extensions"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Type Converter"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Direct"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Idempotent Consumer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Mock"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XMPP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MINA"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JPA"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Publish Subscribe Channel"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Timer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JMS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Message Translator"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Pipes and Filters"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CXF"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Content Filter"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Normalizer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Content Enricher"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Transactional Client"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""RMI"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Polling Consumer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Mail"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Walk through an Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""How do I configure endpoints"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XPath"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""How do I add a component"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Contributing"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XQuery"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""ActiveMQ"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Bean"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""HTTP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Resequencer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Quartz"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.0.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Component Appendix"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Pattern Appendix"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Introduction"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Architecture"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Enterprise Integration Patterns"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Getting Started"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""IRC"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Throttler"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SEDA"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Delayer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""BAM"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Aggregator"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Bean Binding"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Jing"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Remoting"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MSV"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Validation"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Log"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.1.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""BAM Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Exception Clause"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Table of Contents"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""PDF Documentation Guide"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JDBC"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Velocity"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Jetty"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""StringTemplate"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Data Format"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CXF Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.2.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XStream"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""iBATIS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XSLT"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JAXB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring XQuery Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Esper"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JCR"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Simple"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Test"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""DataSet"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel Transport for CXF"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Testing"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JXPath"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Routing Slip"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CSV"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Stream"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Multicast"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.3.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Load Balancer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Scala DSL - Getting Started"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Scala DSL - EIP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Scala DSL - Supported languages"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SQL Component"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Tutorial-JmsRemoting"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Debugger"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Atom"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SpringIntegration"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Ref"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.4.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel JMX"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JavaSpace"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""How do I retrieve the thrown Exception during processing an Exchange"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Hibernate"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Flatpack"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Tracer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JT400"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.5.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Header"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""HL7"" (CAMEL) has unmigrated wiki content.
HL7: Did not find an include name {atlassian-macro-output-type=BLOCK}
HL7: Did not find an include name {atlassian-macro-output-type=BLOCK}
WARNING: Page ""LDAP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""File Language"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Scripting Languages Context"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Loop"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Dynamic Router"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Languages Appendix"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Tutorials"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book cookbook"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.6.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Cometd"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JSON"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""RSS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.0.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Testing"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel Test"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Front Cover"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Request Reply"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Java Config"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book Quickstart"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Restlet"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Tracer Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""POJO Messaging Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""FreeMarker"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Claim Check"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Property"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Scatter-Gather"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Composed Message Processor"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Detour"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Sort"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.0-M1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""FTP2"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Java Config Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""File2"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Try Catch Finally"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""TransactionErrorHandler"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Intercept"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""OnCompletion"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.6.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Async"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Advanced configuration of CamelContext using Spring"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CXFRS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.0-M2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SERVLET"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.0-M3 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.1.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Printer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SNMP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""NMR"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Cache"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Using CamelProxy"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Why is my processor not showing up in JConsole"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""GAE"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Route Throttling Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.6.2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Sampling"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Quickfix"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Graceful Shutdown"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.2.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Lucene"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SMPP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""HDFS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Nagios"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Cafe Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AdviceWith"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Properties"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.3.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Using PropertyPlaceholder"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Aggregate Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Aggregator2"" (CAMEL) has unmigrated wiki content.
Aggregator2: Did not find an include name {}
WARNING: Page ""HawtDB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Netty"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Security Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Bean Validation"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Security"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Exec"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Crypto (Digital Signatures)"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Crypto"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""LoadBalancing Mina Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""EventNotifier to log details about all sent Exchanges"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""How do I import routes from other XML files"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.4.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""ProcessorFactory"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Class"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""EJB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.6.3 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.5.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Shiro Security"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Language"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CXF Bean Component"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Jasypt"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Sip"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CXF Proxy Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Db4o"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""How can I stop a route from a route"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Book DataFormat Appendix"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CXF Tomcat Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JMX"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Web Services"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.6.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 1.6.4 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""EventAdmin"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel x.y.z Release (template)"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Loading routes from XML files"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Simple Jira Bot"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Pax-Logging"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Routebox"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Running Camel standalone and have it keep running"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-SQS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-SNS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Kestrel"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.7.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MDC logging"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""RedeliveryPolicy"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MyBatis"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""HTTP4"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Servlet Tomcat Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""DNS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-S3"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.7.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AHC"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.7.2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Custom DataFormat"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.7.3 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.7.4 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Zookeeper"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""jclouds"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Krati"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-SDB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""StAX"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Blueprint Testing"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-SES"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SSH"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Twitter"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.7.5 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.4 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.3 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-DDB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Jsch"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""BeanIO"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Console Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MongoDB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.5 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Websocket"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Direct-VM"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XmlJson"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MQTT"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""avro"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.8.6 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""hbase"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CMIS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""How do I retry processing a message from a certain point back or an entire route"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""CouchDB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.3 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""ActiveMQ Camel Tomcat"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SJMS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""ZeroMQ"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.4 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""ControlBus Component"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XmlRpc"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.5 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""AWS-CW"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""UrlRewrite"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.3 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""ServletListener Component"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Servlet Tomcat No Spring Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SQL Example"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Tutorial-Example-ReportIncident-Part6"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.11.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring LDAP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""BacklogTracer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.4 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.6 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Redis"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Spring Neo4j"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.7 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""SAP NetWeaver"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MVEL Component"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Geocoder"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Weather"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""BacklogDebugger"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Mustache"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.5 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Netty HTTP"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.6 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.12.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""LevelDB"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""MINA2"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.11.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Stomp"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""RabbitMQ"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Salesforce"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""JCIFS"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Yammer"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Quartz2"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.10.7 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.13.0 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.9.8 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""VirtualBox"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.12.1 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.11.2 release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Splunk"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""Camel 2.12.2 Release"" (CAMEL) has unmigrated wiki content.
WARNING: Page ""XML Security component"" (CAMEL) has unmigrated wiki content.
{code}
njiang:1387473709:2013-12-20T01:21:49.458+0000:1387473709:2013-12-20T01:21:49.458+0000:Hi Dan,

Is there any log to say which part of the content is unmigrated.

Some pages which are in the list can display the code, I'm not sure if it related to site exporting part.

dkulp:1387476886:2013-12-20T02:14:46.144+0000:1387476886:2013-12-20T02:14:46.144+0000:Willem,

If you ""Edit"" any of the pages and scroll down, you'll likely find a block labeled ""Wiki Markup"".  Those are the blocks that need addressing at some point.

A majority of those are using the snippet macro.   Those definitely should be changed to regular code blocks and put the snippet directly on the page.  Since we're not using SVN anymore, those snippets really don't need to be externalized anyway, and it just causes all kinds of resource usage and slower rendering and such (and errors if SVN is down like it was this morning).

That said, it's not critical anymore.  I updated the page exporter to automatically add the XML and Java brushes if it encounters the unmigrated wiki content.  Basically, it makes the assumption that it's a snippet that will need it.  Not ideal as that could mean the brushes are loaded on pages where they aren't actually needed (slowing rendering), but it's not huge.
njiang:1395967856:2014-03-28T08:50:56.285+0000:1395967856:2014-03-28T08:50:56.285+0000:It has been fixed when Dan updated the export code."
0,CAMEL-7080,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Daneel S. Yaitskov,0,4,2013-12-18 19:28:23+00:00,2014-06-08 12:59:41+00:00,"CsvDataFormat uses greedy loading from a stream. This is not applicable for huge files i.e. all rows cannot fit into available memory.


I added an option to create a row iterator instead list.
Csv format is not line oriented so split(""\n"") workaround doesn't work always. This patch adds ability to Camel to process infinite csv files with multiline rows. 


Pull request: 
https://github.com/yaitskov/camel/commits/csv-iterator


P.S. 
1) I found that Bindy does similar work related with parsing csv file into list of why. And I don't see any clue why it doesn't delegate this job to csv file format. Roughly speaking there is code duplication.


2) I didn't find camel-csv component on the ticket form.","njiang:1387488688:2013-12-20T05:31:28.530+0000:1387488688:2013-12-20T05:31:28.530+0000:Hi Daneel,

Can you send a pull request to apache/camel from your forked repo?
We could have a tracker in the github :)
yaitskov:1387507418:2013-12-20T10:43:38.028+0000:1387507418:2013-12-20T10:43:38.028+0000:I did it.
njiang:1387656391:2013-12-22T04:06:31.941+0000:1387656391:2013-12-22T04:06:31.941+0000:Applied the patch with thanks to Daneel. I also polished the code and fixed some CS errors.
githubbot:1402203581:2014-06-08T12:59:41.179+0000:1402203581:2014-06-08T12:59:41.179+0000:Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/73
"
0,CAMEL-7079,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Colm O hEigeartaigh,0,2,2013-12-18 13:59:44+00:00,2013-12-20 17:48:25+00:00,"I am attaching two different patches for some improvements to the ShiroSecurityProcessor in Camel's camel-shiro component. I'd like some feedback on which patch should apply.


The scenario is that a ShiroSecurityToken object is retrieved in the ShiroSecurityProcessor. Currently, this object is first encrypted, and then decrypted, before authentication/authorization checking applies. 


a) Patch ""1"" makes no change to the current functionality of the processor, but provides a performance improvement to avoid encrypting + decrypting a ShiroSecurityToken object. We only need to decrypt a ""String"" or ""ByteSource"" header, not a ShiroSecurityToken object.


b) Patch ""2"" follows the old pattern of encrypting + decrypting the ShiroSecurityToken object, but replaces the unencrypted token in the exchange, with the subsequent encrypted token. This may help avoid unintentional propagation of plaintext values in subsequent communications.


The tests all pass with both approaches.","davsclaus:1387532905:2013-12-20T17:48:25.713+0000:1387532905:2013-12-20T17:48:25.713+0000:Thanks for the patch. 

#2 is good as we store the token as encrypted bytes."
0,CAMEL-7078,Improvement,Major,None,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Willem Jiang,Sergey Beryozkin,0,2,2013-12-18 11:59:34+00:00,2013-12-18 15:06:58+00:00,"Camel CXF Transport does not propagate a security context available from the current HTTP Servlet Request - which may be wrapped by Spring security, etc. 
Camel users may still work directly with Camel Exchange properties, but CXF endpoints won't be able to avoid losing the transport-independent approach for checking the security contexts.","sergey_beryozkin:1387339411:2013-12-18T12:03:31.945+0000:1387339411:2013-12-18T12:03:31.945+0000:This patch uses the reflection to invoke on an object representing HttpServletRequest due to the component having no compile servlet API dependencies.

The alternative patch is to follow
sergey_beryozkin:1387340713:2013-12-18T12:25:13.686+0000:1387340713:2013-12-18T12:25:13.686+0000:The second option is more optimized, if we have Camel Exchange Servlet Request property  set then it is safe to delegate to a typed handler.

Though either patch works for me :-)
sergey_beryozkin:1387341038:2013-12-18T12:30:38.221+0000:1387341038:2013-12-18T12:30:38.221+0000:Forgot to include the pom update
njiang:1387341796:2013-12-18T12:43:16.337+0000:1387341796:2013-12-18T12:43:16.337+0000:Hi Sergey,

Thanks for the patch, I'd like the first one which doesn't introduce the dependency of servlet API and new class (CxfServletRequestMapper).
What do you think?


sergey_beryozkin:1387342396:2013-12-18T12:53:16.311+0000:1387342396:2013-12-18T12:53:16.311+0000:Hi Willem, 
you mean that we push the reflective code into CxfServletRequestMapper ? Sure, that will work too. The minimum extra cost of this reflective approach is checking two Methods, the actual Method calls may not be even done, so it should be OK. 
The optional dependency approach should be safe too, but I'm fine with not going that way. 

I guess the only thing that is missing in the 'reflection' patch is the update to the Import-Package, we still likely need an *optional* servlet api import there, we will be able to avoid the explicit HttpServletRequest import in the code but I suspect the optional OSGI import needs to be there even for the reflection calls to work

Cheers, Sergey
sergey_beryozkin:1387342694:2013-12-18T12:58:14.808+0000:1387342694:2013-12-18T12:58:14.808+0000:I guess we need to add to:
{code:xml}
<camel.osgi.import>
      javax.servlet*;resolution=""optional"";version=""[0,4)"",
      <!-- other imports -->
    </camel.osgi.import>
{code}

njiang:1387348059:2013-12-18T14:27:39.778+0000:1387348059:2013-12-18T14:27:39.778+0000:Hi Sergey,

I just found your patch is based on the code of svn repository and hit some issue when applying the patch to current master codebase.
BTW, We moved to use git for about a year. The git repo address is https://git-wip-us.apache.org/repos/asf/camel.git.

njiang:1387349041:2013-12-18T14:44:01.309+0000:1387349041:2013-12-18T14:44:01.309+0000:Applied the first patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Sergey.
sergey_beryozkin:1387349049:2013-12-18T14:44:09.460+0000:1387349049:2013-12-18T14:44:09.460+0000:Ouch, I see I created a patch against a SVN based 2.12-SNAPSHOT.
So SVN patched are not accepted any more ? I can do a git-based one, should it be a pull request or a diff will do ?
Or may be you can try to adapt this time ?  the test changes should be OK, indeed there could be some mismatch on the default CXF mapper level 

If you'd like me do another GIT patch, what form it should take, the reflection code moved to the helper class ?

Cheers, Sergey
njiang:1387349832:2013-12-18T14:57:12.402+0000:1387349832:2013-12-18T14:57:12.402+0000:Don't worry, I already fix that.
You just need to check the git one next time :)
sergey_beryozkin:1387350418:2013-12-18T15:06:58.807+0000:1387350418:2013-12-18T15:06:58.807+0000:Cool, thanks :-). Yeah, will work with the GIT repo next time
"
0,CAMEL-7077,Bug,Major,None,None,"
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,2,2013-12-18 07:14:54+00:00,2013-12-18 17:45:29+00:00,"Current createRemoteFileOperations just remove the parameter map directly when it configure the ftp client. It could cause some troubles when the createRemoteFileOperations is called again.


Here is the mail thread which talks about it.
http://camel.465427.n5.nabble.com/Camel-FTP-consumer-socketFactory-not-work-correctly-tp5744716.html","njiang:1387324906:2013-12-18T08:01:46.312+0000:1387324906:2013-12-18T08:01:46.312+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches.
alexey-s:1387359929:2013-12-18T17:45:29.679+0000:1387359929:2013-12-18T17:45:29.679+0000:Thanks for the correction of an error.
Exactly the same error there FtpsEndpoint."
0,CAMEL-7076,Improvement,Minor,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-12-17 12:17:08+00:00,2013-12-17 16:04:59+00:00,Its annoying that spring-event:default is enlisted always when you use camel-spring. We should only enlist endpoints that are active used by the end user.,
0,CAMEL-7075,Improvement,Minor,2.12.2,None,"

Security
Veracode

",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Leonid Marushevskiy,0,2,2013-12-17 10:23:19+00:00,2013-12-18 06:33:43+00:00,"Pull request https://github.com/apache/camel/pull/71


During Veracode scan of our application we discover issue in Camel. Please review our fix and apply it in future versions.


Quote from Veracode report below:
Improper Resource Shutdown or Release (CWE ID 404)(1 flaw)
Description
The application fails to release (or incorrectly releases) a system resource before it is made available for re-use. This
condition often occurs with resources such as database connections or file handles. Most unreleased resource issues
result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, it may be
possible to launch a denial of service attack by depleting the resource pool.
Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.
Recommendations
When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as
accounting for all potential paths of expiration or invalidation. Ensure that all code paths properly release resources.


.../FileInputStreamCache.java line 86","njiang:1387319623:2013-12-18T06:33:43.212+0000:1387319623:2013-12-18T06:33:43.212+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Leonid."
0,CAMEL-7074,Task,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,David J. M. Karlsen,17,16,2013-12-17 07:09:08+00:00,2014-09-07 06:34:34+00:00,"Upgrade to spring4.
There is a non-backwards compatible change in spring 4.x which will cause:



java.lang.IncompatibleClassChangeError: Found interface org.springframework.test.context.TestContext, but class was expected
        at org.apache.camel.test.spring.CamelSpringTestContextLoaderTestExecutionListener.prepareTestInstance(CamelSpringTestContextLoaderTestExecutionListener.java:35)
        at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:326)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:212)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:289)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:291)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:232)
        at org.apache.camel.test.junit4.CamelSpringJUnit4ClassRunner.runChild(CamelSpringJUnit4ClassRunner.java:37)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)
        at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)
        at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
        at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:175)
        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:




due to https://jira.springsource.org/browse/SPR-7692","njiang:1387239098:2013-12-17T08:11:38.434+0000:1387239098:2013-12-17T08:11:38.434+0000:It looks you need to recompile the camel-spring with Spring 4.x to fix this issue. 
It is [a common issue|http://stackoverflow.com/questions/591411/java-error-found-interface-but-class-was-expected]

I just ran the tests after upgrade the spring version to 4.x, I don't hit the issue as you meet.

davidkarlsen@gmail.com:1387241046:2013-12-17T08:44:06.933+0000:1387241046:2013-12-17T08:44:06.933+0000:[~njiang]: exactly - and that's why I created the issue, wondering what version of camel this would be done for.
monti:1392614197:2014-02-17T13:16:37.241+0000:1392614197:2014-02-17T13:16:37.241+0000:Is there any ETA on this issue?
njiang:1392659162:2014-02-18T01:46:02.460+0000:1392659352:2014-02-18T01:49:12.113+0000:It's not an easy job to do the upgrading if there are lots of other projects (products) are based on camel, as they are some gap between spring 3.x and spring 4.x, it could take some time.

In the camel master branch we have spring4 profile can be used if you want to play with camel and spring 4.x yourself.
davidkarlsen@gmail.com:1392682861:2014-02-18T08:21:01.022+0000:1392682861:2014-02-18T08:21:01.022+0000:You can also monitor this job: https://builds.apache.org/job/Camel.trunk.fulltest.spring4/ . Guess cxf 3 is the last major step to get it to pass.
monti:1392683417:2014-02-18T08:30:17.590+0000:1392683417:2014-02-18T08:30:17.590+0000:Thanks!
camomileann:1395037051:2014-03-17T14:17:31.497+0000:1395037051:2014-03-17T14:17:31.497+0000:It would be great if it is fixed in the nearest future. For our project it is a stopper for migrating to spring 4  
mbknor:1396564359:2014-04-04T06:32:39.614+0000:1396564359:2014-04-04T06:32:39.614+0000:Our reason for wanting Spring 4 support is to make Camel work with Java 8, as Spring 3.2.x is not compatible with it.

This can also be fixed if Spring adds java 8 byte-code compatibility in 3.2.9 as described in this issue:
https://jira.spring.io/browse/SPR-11656 (With pull-request)

monti:1398125525:2014-04-22T08:12:05.252+0000:1398125525:2014-04-22T08:12:05.252+0000:Morten: That pull request has been merged into the 3.2.x branch and will be present in 3.2.9: https://github.com/spring-projects/spring-framework/commit/9ac46a965f3314f09ec5a75eded97589ab13fbdb
davidkarlsen@gmail.com:1398724582:2014-04-29T06:36:22.988+0000:1398724582:2014-04-29T06:36:22.988+0000:cxf 3.0 shouldn't be far away now: http://cxf.547215.n5.nabble.com/When-Will-3-0-Officially-Release-td5743388.html
njiang:1398730445:2014-04-29T08:14:05.696+0000:1398730445:2014-04-29T08:14:05.696+0000:We could move the camel trunk to use CXF 3.0-SNAPSHOT to verify the upgrade before CXF is released.
mraible:1403614446:2014-06-24T20:54:06.672+0000:1403614446:2014-06-24T20:54:06.672+0000:Any movement on this? It looks like CXF 3.0 was released over a month ago.

http://cxf.547215.n5.nabble.com/ANNOUNCE-Apache-CXF-3-0-0-released-td5744242.html
njiang:1403631255:2014-06-25T01:34:15.541+0000:1403631255:2014-06-25T01:34:15.541+0000:Hi Matt,

I already upgraded the CXF version to 3.0 in camel master, now there are two other sub task: ibats spring4 support and spring DM verification.


mraible:1403677497:2014-06-25T14:24:57.522+0000:1403677497:2014-06-25T14:24:57.522+0000:Thanks for the update Willem. In my particular project, I'm not using iBATIS or Spring DM. Are there snapshot versions available for the following dependencies?

$ mvn dependency:tree | grep camel
[INFO] +- org.apache.camel:camel-csv:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-core:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-spring:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-spring-javaconfig:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-cxf:jar:2.13.1:compile
[INFO] |  +- org.apache.camel:camel-cxf-transport:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-freemarker:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-mail:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-sql:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-stream:jar:2.13.1:compile
[INFO] +- org.apache.camel:camel-test:jar:2.13.1:test
[INFO] +- org.apache.camel:camel-test-spring:jar:2.13.1:compile
njiang:1403677801:2014-06-25T14:30:01.755+0000:1403677801:2014-06-25T14:30:01.755+0000:Can you try to use camel 2.14-SNAPSHOT?  Camel 2.14.0 is targeted to support Spring 4.x.
davsclaus:1403677961:2014-06-25T14:32:41.049+0000:1403677961:2014-06-25T14:32:41.049+0000:We used to have links to the snapshot repo from: http://camel.apache.org/download
But an infra guy complained.

So you gotta find the apache snapshot repo yourself. 

A good place to look is the pom.xml of Camel
https://github.com/apache/camel/blob/master/pom.xml#L93

And you can also build from source yourself
http://camel.apache.org/building.html

And btw Camel 2.13.x is likely supporting spring 4.x already. Just try use it with spring 4.
Its only really OSGi that is the big problem as spring-dm does not work with spring 4.
mraible:1403682987:2014-06-25T15:56:27.273+0000:1403682987:2014-06-25T15:56:27.273+0000:If I try to upgrade to Spring 4.0.5 (while using Camel 2.13.1 and CXF 2.7.11), I get the following error:

{code}
java.lang.IncompatibleClassChangeError: Found interface org.springframework.test.context.TestContext, but class was expected
	at org.apache.camel.test.spring.CamelSpringTestContextLoaderTestExecutionListener.prepareTestInstance(CamelSpringTestContextLoaderTestExecutionListener.java:34)
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:331)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:213)
	at org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:290)
{code}

I can fix this by changing to camel 2.14-snapshot, then checking out camel-test-spring and changing all ""spring.version"" placeholders to ""spring4-version"". Then installing it so it's used instead of the one in https://repository.apache.org/content/repositories/snapshots/. After that, I'm able to upgrade to CXF 3.0.0 if I change some package names.

So it seems like camel-test-spring is not Spring 4 compatible, yet.

njiang:1403723349:2014-06-26T03:09:09.917+0000:1403723349:2014-06-26T03:09:09.917+0000:Hi Matt,
The issue is caused there are some API uncompatible  changes between Spring 3.3.x and Spring 4.0.x.  As we can only choice one spring version (Spring 3.3.x) to build the snapshot, if you are using Spring 4.0.x, you hit the compatible issue.
I'm not sure if we can set the default build to use Spring 4.0.x in Camel 2.14.0,  as lots of people still use Spring 3.3.x.

mraible:1403768469:2014-06-26T15:41:09.393+0000:1403768469:2014-06-26T15:41:09.393+0000:I agree it's probably best not to require Spring 4 in a point release. For Camel 3.0, it might be doable. In the meantime, I don't think it's a good idea to prevent folks from using Spring 4. I think the easiest way forward is to create two modules: camel-test-spring and camel-test-spring3. The former compiles against Spring 4 and the latter against Spring 3. You could switch it so camel-test-spring defaults to Spring 3, but camel-test-spring4 doesn't seem to be forward-looking, as you hopefully won't need a camel-test-spring5. 

I've made this change in a fork and it works in my project. I can upgrade to Camel 2.14-SNAPSHOT and CXF 3.0 with Spring 3.2.8 (by using camel-test-spring3). I can also upgrade to Spring 4 if I use the upgraded camel-test-spring.

Here's a pull request that has this change: https://github.com/apache/camel/pull/199
davsclaus:1404258261:2014-07-02T07:44:21.201+0000:1404258261:2014-07-02T07:44:21.201+0000:Thanks Matt

Yeah we have done something similar in the past. So maybe its a good idea to have camel-test-spring3 for Spring 3.x users. And camel-test-spring is for Spring 4.x.
njiang:1404778529:2014-07-08T08:15:29.901+0000:1404778529:2014-07-08T08:15:29.901+0000:I just added camel-test-spring3 which is built with spring 3.2.x, now camel-test-spring is built with spring 4.x.
davsclaus:1410042874:2014-09-07T06:34:34.872+0000:1410042874:2014-09-07T06:34:34.872+0000:Spring 4.x is now supported. 

Camel 2.15 will switch to use spring 4.x as default out of the box.
Camel 2.14 uses Spring 3.2.x as default, but supports Spring 4.x."
0,CAMEL-7073,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,David Keen,0,2,2013-12-16 15:42:35+00:00,2013-12-17 02:59:16+00:00,"The fix applied in CAMEL-6879 causes the request headers to be sent back in the response.


DefaultRestletBinding copies the request headers in 'org.restlet.http.headers' header to the response headers in 'org.restlet.http.headers'.


This causes problems for things like Content-Type header which is a valid request and response header and so the response is sent with the request content-type. Eg, POST requests that should receive JSON in response and send using content-type application/x-www-form-urlencoded will be sent back a response with the same content-type which doesn't make sense.","davidkeen:1387180478:2013-12-16T15:54:38.687+0000:1387180492:2013-12-16T15:54:52.617+0000:I have opened a pull request with a fix for this issue including a unit test: https://github.com/apache/camel/pull/69.

I can create and attach a patch if you prefer.
njiang:1387220356:2013-12-17T02:59:16.058+0000:1387220356:2013-12-17T02:59:16.058+0000:Applied patch into master and camel-2.12.x branches with thanks to David."
0,CAMEL-7072,Improvement,Minor,2.12.2,None,"

Security
Veracode

",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Leonid Marushevskiy,0,3,2013-12-16 15:36:28+00:00,2013-12-18 06:34:50+00:00,"Pull request https://github.com/apache/camel/pull/68


During Veracode scan of our application we discover issue with security in Camel. Please review our fix and apply it in future versions. 


Quote from Veracode report below:
Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection') (CWE ID470)(1 flaw)
Description
A call uses reflection in an unsafe manner. An attacker can specify the class name to be instantiated, which may
create unexpected control flow paths through the application. Depending on how reflection is being used, the attack
vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected
manner. Even if the object does not implement the specified interface and a ClassCastException is thrown, the
constructor of the user-supplied class name will have already executed.
Effort to Fix: 2 - Implementation error. Fix is approx. 6-50 lines of code. 1 day to fix.
Recommendations
Validate the class name against a combination of white and black lists to ensure that only expected behavior is
produced.
Instances found via Static Scan
Module # Class # Module Location Fix By Flaw Id
.../AnnotationTypeConverterLoader.java - line 168","njiang:1387243941:2013-12-17T09:32:21.289+0000:1387243941:2013-12-17T09:32:21.289+0000:I don't think the patch fix the really issue, it just work around the warning of Veracode report.
BTW, there are few places in the camel that use the class loader to load the class that way. I'm not sure why the code scanner just found this place.
leonart:1387247388:2013-12-17T10:29:48.108+0000:1387247388:2013-12-17T10:29:48.108+0000:Hi, Willem. Thank you for comment. 
I agree that this improvement is not critical for Camel. But Camel is a base of integration layer in our application and Veracode compliance is critical for us. 
If you feel it necessary and this change not broke anything, you can apply a similar approach in other places in the camel but I did not dare to change throughout all code. I fix only those classes which were in Veracode report.

I have several other small fixes according Veracode which I will report to you in near feature. 
dkulp:1387254577:2013-12-17T12:29:37.055+0000:1387254577:2013-12-17T12:29:37.055+0000:I kind of agree with Willem.   This code pushes the call into ObjectHelper (which I'm OK with), but my expectation is that Object Helper would be flagged for the same reason.

In addition, your patch throws a ClassNotFoundException which is then immediately caught and ignored in the try/catch.   That seems silly.   Plus, ObjectHelper already checks the name passed in to see if it's empty.

leonart:1387258128:2013-12-17T13:28:48.306+0000:1387258444:2013-12-17T13:34:04.149+0000:Hi, Daniel. I update pull request in accordance with your remark about exception throwing. It's my fault. I try a lot of different hacks in order to eliminate Veracode issue.
Only using Object Helper for class loading fixes Veracode issue for me. Frankly speaking it's also strange for me why Object Helper works may be due additional checks which it contains. 
njiang:1387319690:2013-12-18T06:34:50.360+0000:1387319690:2013-12-18T06:34:50.360+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Leonid."
0,CAMEL-7071,Bug,Major,2.12.2,None,"
None
",Resolved,Won't Fix,None,Willem Jiang,Mariusz Lotko,0,2,2013-12-16 14:03:19+00:00,2013-12-18 12:35:13+00:00,"If I catch SQLException and wrap it in new MyCoolBuisinessException, then Exchange.getException() returns MyCoolBusinessException, but Exchange.getException(Exception.class) returns SQLException.


This impacts ExchangeException annotation which calls Exchange.getException(Exception.class).


Reason for that is in constructor of ObjectUtils.ExceptionIterator which for some reason calls Collections.reverse(tree).","njiang:1387220532:2013-12-17T03:02:12.169+0000:1387220675:2013-12-17T03:04:35.329+0000:Collections.reverse(tree) is used to make sure we can get the first cause of exception in the catch() DSL and ErrorHandler.
Here are the Javadoc of the Exchange.getException(Class<T> type)
{code}
/**
     * Returns the exception associated with this exchange.
     * <p/>
     * Is used to get the caused exception that typically have been wrapped in some sort
     * of Camel wrapper exception
     * <p/>
     * The strategy is to look in the exception hierarchy to find the first given cause that matches the type.
     * Will start from the bottom (the real cause) and walk upwards.
     *
     * @param type the exception type
     * @return the exception (or <tt>null</tt> if no caused exception matched)
     */
    <T> T getException(Class<T> type);
{code}
mlotko:1387245812:2013-12-17T10:03:32.651+0000:1387245812:2013-12-17T10:03:32.651+0000:This is strange way to solve that. Should not we (application developers) use exception wrapping? 
Please note this method is used By ExchangeExceptionannotation. 
njiang:1387319791:2013-12-18T06:36:31.199+0000:1387319791:2013-12-18T06:36:31.199+0000:As an application developer, you can just use Exchange.getException() to access the exception.
mlotko:1387341313:2013-12-18T12:35:13.447+0000:1387341313:2013-12-18T12:35:13.447+0000:As I mentioned in the initial description, call to getException(Exception.class) is used in interpreter of \@ExchangeException annotation.
I guess this annotation should be equivalent of Exchange.getException()."
0,CAMEL-7070,Bug,Major,None,None,"
None
",Closed,Fixed,None,Willem Jiang,Sebb,0,3,2013-12-16 00:17:46+00:00,2014-01-14 17:35:54+00:00,"Nightly builds / snapshots which are not formal releases should not be linked from the main download page.


Such builds have not been voted on and should only be used by developers who should be made aware that the code is without any guarantees,


Nightly builds are not formal ASF releases, and must not be promoted to the general public.


See [1] second para. The second sentence states:


""Do not include any links on the project website that might encourage non-developers to download and use nightly builds, snapshots, release candidates, or any other similar package.""


[1] http://www.apache.org/dev/release.html#what","njiang:1387131605:2013-12-16T02:20:05.208+0000:1387131605:2013-12-16T02:20:05.208+0000:I think we can move the snapshot information to the developer section.
But now I just cannot update the wiki page as I keep hitting Non Clustered Confluence error.
sebb:1387131963:2013-12-16T02:26:03.108+0000:1387131963:2013-12-16T02:26:03.108+0000:Are you sure the download page is a Confluence page?
njiang:1387132255:2013-12-16T02:30:55.966+0000:1387132255:2013-12-16T02:30:55.966+0000:We edit the Confluence page and it will be exported to the svn site.
njiang:1387153287:2013-12-16T08:21:27.611+0000:1387153287:2013-12-16T08:21:27.611+0000:I just moved the snapshot information of download page to the developer section.
sebb:1387174241:2013-12-16T14:10:41.933+0000:1387174241:2013-12-16T14:10:41.933+0000:When I look at the download page, it still contains references to snapshot builds.
dkulp:1387174663:2013-12-16T14:17:43.908+0000:1387174663:2013-12-16T14:17:43.908+0000:
The confluence ""upgrade"" has caused a delay in the publish stuff.   I'm not sure when confluence will get back to a fully usable state.  :-(   Right now, we're getting all kinds of timeouts, etc... while trying to do anything with it.   Not sure if the indexes or something is still being rebuilt or what's completely going on with it.
sebb:1387175395:2013-12-16T14:29:55.074+0000:1387175395:2013-12-16T14:29:55.074+0000:I see.

Please leave the issue open until this is resolved.

Thanks.
dkulp:1387195637:2013-12-16T20:07:17.088+0000:1387195637:2013-12-16T20:07:17.088+0000:
Confluence is starting to be usable so was able to get an export out of it."
0,CAMEL-7069,Bug,Major,2.12.2,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Akitoshi Yoshida,Akitoshi Yoshida,1,1,2013-12-13 19:08:59+00:00,2014-01-29 11:38:48+00:00,"In some cases, CXFPayload is instantiated with a null body and this is causing an NPE later in the processing.


Caused by: java.lang.NullPointerException
	at org.apache.camel.component.cxf.CxfPayload$1.size(CxfPayload.java:105)
	at org.apache.camel.component.cxf.converter.NodeListWrapper.getLength(NodeListWrapper.java:33)
	at org.apache.camel.converter.jaxp.DomConverter.toString(DomConverter.java:69)
	at org.apache.camel.converter.jaxp.DomConverter.toByteArray(DomConverter.java:142)
	at org.apache.camel.converter.jaxp.DomConverter.toInputStream(DomConverter.java:137)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)


What is not sure is how we should fix it.
CXFPayload is not checking whether the body is null when it is instantiated. In that case, some methods will lead to NPE but some are not (like getBodySources() or getHeaders()). And there are some test cases passing a null body.


So I think, we should either 
1. change CXFPayload to automatically creates an empty body (i.e., an empty List<Source>) when the body passed to the constructor is null, or
2. add this null->empty handling in DefaultCXFBinding.getPayloadBodyElements when extracting the body and pass an empty list to the CXFPayload constructor in this case, or
3. just throws a specific exception instead of NPE in this particular case.


In any case, we need to clarify what is the correct usage of CXFPayload.","ay:1390902584:2014-01-28T17:49:44.022+0000:1390902584:2014-01-28T17:49:44.022+0000:After some pause (forgot about this ticket), I thought about those options again.
Since some of the CXF payload conversion methods and NodeList conversion methods assume the body (of the CxfPayload) to be not null, option 3 will require many changes in those converters to avoid NPE. Option 1 would introduce a redundant way of creating an empty cxf payload (either passing null or an empty list). So, I think we can opt for option 2 and change the getPayloadBodyElements method so that normal scenarios resulting a null camel body will not result in NPE at cxf payload instantiation.


"
0,CAMEL-7038,Improvement,Minor,2.12.2,2.13.0,"
None
",Resolved,Fixed,2.13.0,Babak Vahdat,Babak Vahdat,0,1,2013-12-04 12:13:32+00:00,2013-12-04 13:24:30+00:00,"Currently there's a shortcoming with the Guice Maven Plugin if people would like to pass over an optional argument for the JNDI properties file.


As an example see this example which makes use of exec-maven-plugin.


Alternatively it would be nice to provide the same using our own Guice Maven Plugin. That is instead of:



mvn exec:java




Do the same using:



mvn guice:run




or:



mvn guice:embedded",bvahdat:1386132367:2013-12-04T12:46:07.598+0000:1386134670:2013-12-04T13:24:30.080+0000:Looking at {{org.apache.camel.guice.Main}} there was also a tiny bug I spotted about not closing an InputStream properly which I [fixed|https://github.com/apache/camel/commit/4ca362155eaced0453c1220affb86d896037ebb1] as well.
0,CAMEL-7037,Bug,Minor,2.12.2,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-12-04 11:31:53+00:00,2013-12-04 11:39:30+00:00,Exactly the same as CAMEL-7028.,
0,CAMEL-7036,Bug,Major,"2.11.2, 2.12.2","2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,2,2013-12-04 04:43:48+00:00,2013-12-07 14:48:13+00:00,Here is the user complain of it,"njiang:1386398893:2013-12-07T14:48:13.806+0000:1386398893:2013-12-07T14:48:13.806+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7035,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Ioannis Canellos,Ioannis Canellos,0,1,2013-12-03 16:39:59+00:00,2013-12-03 17:14:56+00:00,"CamelContext service is registered once per bundle symbolic name.


If multiple bundles share symbolic names (and use different versions) the CamelContext will only registered for the first bundle.",
0,CAMEL-7034,Improvement,Minor,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-12-03 10:52:04+00:00,2014-03-06 13:42:49+00:00,"To ensure scheduler instance names in unique in the JVM. As the default name is just QuartzScheduler.


We already do this in one case when setting up quartz component but not in another case.",
0,CAMEL-7033,Bug,Major,None,"2.12.4, 2.13.1, 2.14.0","
None
",Resolved,Fixed,"2.12.4, 2.13.1, 2.14.0",Willem Jiang,Arne M. Størksen,0,2,2013-12-03 10:06:34+00:00,2014-04-03 12:06:39+00:00,"The reason seems to be that onConsumerStop() is called when camel is shut down. This method does not take clustering into account and pauses the trigger in the quartz database, leaving it in a state that is unrecoverable from camel. I was able to prevent this by removing pauseTrigger() from onConsumerStop(), but I'm not sure what the correct procedure should be. It seems to me like onConsumerStop() and doStop() has some overlap.","klodrik:1386115424:2013-12-04T08:03:44.589+0000:1386115424:2013-12-04T08:03:44.589+0000:Patch that handles clustering in pauseTrigger().
njiang:1396497820:2014-04-03T12:03:40.795+0000:1396497820:2014-04-03T12:03:40.795+0000:Applied the patch into camel master, camel-2.13.x and camel-2.12.x with thanks to Arne.
I also remove the jobAdded.set(false); which makes other unit test failed.
"
0,CAMEL-7032,Task,Minor,None,None,"
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-12-03 07:15:40+00:00,2013-12-03 07:45:31+00:00,camel-zookeeper has the old version dependency of netty which could cause some issue if the user is using camel-zookeeper and camel-netty together.,"njiang:1386027931:2013-12-03T07:45:31.641+0000:1386027931:2013-12-03T07:45:31.641+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7031,Bug,Major,2.12.2,2.12.3,"
None
",Resolved,Fixed,2.12.3,Willem Jiang,Jason Foster,0,4,2013-12-02 21:53:07+00:00,2015-06-10 17:37:28+00:00,"In RabbitMQ, the default exchange is a direct exchange with no name (empty string) and is pre-declared by the broker. It has one special property that makes it very useful for simple applications: every queue that is created is automatically bound to it with a routing key which is the same as the queue name.  This is especially useful in RPC style messaging when the producer specifies a REPLY_TO queue name that was created ""exclusive""  Since RabbitMQ binds that queue onto the default exchange, it makes RPC much simpler.


However, the camel rabbitmq producer throws an IllegalArgumentException if the exchange name is empty, which prevents this simple RPC exchange.  The fix for this is simple, just don't throw that IllegalArgumentException if the exchange name was set to empty string.


The same problem may exists with the Consumer as well.


This python script will send an rpc request (from RabbitMQ in Action)



import time, json, pika

creds_broker = pika.PlainCredentials(""guest"", ""guest"")
conn_params = pika.ConnectionParameters(""localhost"",
                                         virtual_host = ""/"",
                                         credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()

msg = json.dumps({""client_name"": ""RPC Client 1.0"",
                  ""time"" : time.time()})
result = channel.queue_declare(exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to = result.method.queue
msg_props.content_type = ""application/json""
msg_props.correlation_id = ""1""
msg_props.delivery_mode = 2

channel.basic_publish(body=msg,
                      exchange=""rpc"",
                      properties=msg_props,
                      routing_key=""ping"")

print ""Sent 'Ping' RPC call.  Waiting for reply...""

def reply_callback(channel, method, header, body):
     """"""Receives RPC server replies.""""""
     print ""RPC Reply --- "" + body
     channel.stop_consuming()

channel.basic_consume(reply_callback,
                      queue=result.method.queue,
                      consumer_tag=result.method.queue)

channel.start_consuming()




This route would be what I would want to do when consuming from Rabbit the rpc call and sending back a response:



        from(""rabbitmq://192.168.213.130/rpc?queue=ping&routingKey=ping&durable=True&autoDelete=False&autoAck=False&username=guest&password=guest"")
            .log(""Incoming Headers: ${headers}"")
            .setHeader(""rabbitmq.ROUTING_KEY"", header(""rabbitmq.REPLY_TO""))
            .removeHeader(""rabbitmq.REPLY_TO"")
            .removeHeader(""rabbitmq.EXCHANGE_NAME"")
            .setBody(simple(""Pong!""))
            .to(""rabbitmq://192.168.213.130/?username=guest&password=guest"");





If I remove the illegalargumentexception, the code works as expected.","njiang:1386011261:2013-12-03T03:07:41.597+0000:1386011261:2013-12-03T03:07:41.597+0000:Apply the patch into master and camel-2.12.x branch
splazit:1433929048:2015-06-10T17:37:28.617+0000:1433929048:2015-06-10T17:37:28.617+0000:I'm camel-rabbitmq component as as rabbitmq consumer. The consumer is consuming message from a default exchange """" with a routing key. When I started up the app, I got the exception ""Caused by: java.lang.IllegalArgumentException: No URI path as the exchangeName for the RabbitMQEndpoint"". 
The camel version I'm using is 2.15.2.

Regards,"
0,CAMEL-7030,Improvement,Major,None,2.13.0,"

jmx

",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2013-12-02 21:10:33+00:00,2013-12-03 09:47:11+00:00,"If using camel quartz component, you may just configure it without the big .properties file of quartz.


Though its harder to enable the scheduler to be enlist in JMX, so you at runtime can see the state of the scheduler and manage it etc.


We should enlist the scheduler in JMX out of the box, unless explicit disabled.","davsclaus:1385991462:2013-12-02T21:37:42.112+0000:1385991462:2013-12-02T21:37:42.112+0000:The route policy was in fact not working with quartz itself, and if end users enabled JMX they can see exceptions like
{code}
2013-12-02 22:35:51,516 [main           ] ERROR QuartzScheduler                - Error while notifying SchedulerListener of scheduled job.  Triger=triggerGroup-testRoute.trigger-STOP-testRoute
java.lang.RuntimeException: javax.management.openmbean.OpenDataException: Argument value of wrong type for item nextFireTime: value Mon Dec 02 22:35:53 CET 2013, type javax.management.openmbean.SimpleType(name=java.util.Date)
	at org.quartz.core.jmx.TriggerSupport.toCompositeData(TriggerSupport.java:76)
	at org.quartz.core.QuartzSchedulerMBeanImpl.jobScheduled(QuartzSchedulerMBeanImpl.java:352)
	at org.quartz.core.QuartzScheduler.notifySchedulerListenersSchduled(QuartzScheduler.java:2034)
	at org.quartz.core.QuartzScheduler.scheduleJob(QuartzScheduler.java:825)
	at org.quartz.impl.StdScheduler.scheduleJob(StdScheduler.java:243)
	at org.apache.camel.routepolicy.quartz.ScheduledRoutePolicy.scheduleRoute(ScheduledRoutePolicy.java:102)
	at org.apache.camel.routepolicy.quartz.SimpleScheduledRoutePolicy.doOnInit(SimpleScheduledRoutePolicy.java:75)
	at org.apache.camel.routepolicy.quartz.SimpleScheduledRoutePolicy.onInit(SimpleScheduledRoutePolicy.java:44)
	at org.apache.camel.impl.DefaultRouteContext.commit(DefaultRouteContext.java:202)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:914)
	at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:175)
	at org.apache.camel.impl.DefaultCamelContext.startRoute(DefaultCamelContext.java:776)
	at org.apache.camel.impl.DefaultCamelContext.startRouteDefinitions(DefaultCamelContext.java:1928)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1684)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1558)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1526)
{code}"
0,CAMEL-7029,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-12-02 20:07:07+00:00,2013-12-02 20:42:00+00:00,"If you use the simple trigger then it only triggers once out of the box. You must set repeatCount=-1 to keep firing. Or set it to the exact number of times you want.


The default value of 0 makes it only fire once.",
0,CAMEL-7028,Bug,Minor,2.12.2,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-12-02 11:27:51+00:00,2013-12-04 13:43:20+00:00,"~/dev/workspace/camel/examples/camel-example-spring>mvn -e camel:embedded
[INFO] Error stacktraces are turned on.
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Example :: Spring 2.13-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-example-spring ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-example-spring ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-example-spring ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-example-spring ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/bvahdat/dev/workspace/camel/examples/camel-example-spring/src/test/resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-example-spring ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] <<< camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring <<<
[INFO] 
[INFO] --- camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) @ camel-example-spring ---
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 2.420s
[INFO] Finished at: Mon Dec 02 12:19:20 CET 2013
[INFO] Final Memory: 23M/982M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.camel:camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) on project camel-example-spring: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException -> [Help 1]
org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.apache.camel:camel-maven-plugin:2.13-SNAPSHOT:embedded (default-cli) on project camel-example-spring: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:217)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:84)
	at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:59)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.singleThreadedBuild(LifecycleStarter.java:183)
	at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:161)
	at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:320)
	at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:156)
	at org.apache.maven.cli.MavenCli.execute(MavenCli.java:537)
	at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:196)
	at org.apache.maven.cli.MavenCli.main(MavenCli.java:141)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:290)
	at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:230)
	at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:409)
	at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:352)
Caused by: org.apache.maven.plugin.MojoExecutionException: Failed: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.camel.maven.EmbeddedMojo.execute(EmbeddedMojo.java:117)
	at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:101)
	at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:209)
	... 19 more
Caused by: org.apache.maven.plugin.MojoExecutionException: Failed: java.lang.NullPointerException
	at org.apache.camel.maven.EmbeddedMojo.runCamel(EmbeddedMojo.java:226)
	at org.apache.camel.maven.EmbeddedMojo.executeWithoutWrapping(EmbeddedMojo.java:127)
	at org.apache.camel.maven.EmbeddedMojo.execute(EmbeddedMojo.java:115)
	... 21 more
Caused by: java.lang.NullPointerException
	at org.apache.camel.main.MainSupport$5.doProcess(MainSupport.java:122)
	at org.apache.camel.main.MainSupport$ParameterOption.doProcess(MainSupport.java:532)
	at org.apache.camel.main.MainSupport$Option.processOption(MainSupport.java:492)
	at org.apache.camel.main.MainSupport.parseArguments(MainSupport.java:227)
	at org.apache.camel.main.MainSupport.run(MainSupport.java:351)
	at org.apache.camel.spring.Main.main(Main.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.camel.maven.EmbeddedMojo.runCamel(EmbeddedMojo.java:223)
	... 23 more
[ERROR] 
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException
2013-12-02 12:19:20,786 [Thread-1       ] INFO  MainSupport$HangupInterceptor  - Received hang up - stopping the main instance.
2013-12-02 12:19:20,788 [Thread-1       ] INFO  MainSupport                    - Apache Camel 2.13-SNAPSHOT stopping
~/dev/workspace/camel/examples/camel-example-spring>","bvahdat:1385955601:2013-12-02T11:40:01.012+0000:1386135800:2013-12-04T13:43:20.029+0000:The current workaround for the users is to make use of the {{run}} goal, that's:

{code}
mvn camel:run
{code}
"
0,CAMEL-7027,Improvement,Major,None,None,"
None
",Resolved,Not A Problem,2.13.0,Willem Jiang,Willem Jiang,0,2,2013-12-02 08:12:39+00:00,2013-12-02 08:33:05+00:00,"We should support to set the expression instance on the Splitter just like this.



<bean id=""zipSplitter"" class=""org.apache.camel.dataformat.zipfile.ZipSplitter"" />

...

<split streaming=""true"" parallelProcessing=""true"" expressionRef=""zipSplitter"">
    
    <convertBodyTo type=""java.lang.String"" />
    <to uri=""file:foo"" />
</split>","davsclaus:1385943531:2013-12-02T08:18:51.110+0000:1385943531:2013-12-02T08:18:51.110+0000:You should do it like this
http://camel.apache.org/ref-language.html

<split>
  <ref> zipSplitter</ref>

</split>
njiang:1385944331:2013-12-02T08:32:11.899+0000:1385944331:2013-12-02T08:32:11.899+0000:Hi Claus, 

Thanks for the hit, I found the same thing when I try to work on the patch.
I'd be happy to close the issue with no fixing.
njiang:1385944385:2013-12-02T08:33:05.486+0000:1385944385:2013-12-02T08:33:05.486+0000:Camel already provide a ref tag for reference the instance of expression."
0,CAMEL-7026,Improvement,Major,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-29 12:28:50+00:00,2013-11-29 13:37:44+00:00,"If you do request/reply over JMS then all messages uses the endpoint configured requestTimeout (default 20 sec).


Though sometimes you want individual timeouts per message. So we should have a header to define what timeout to use.


We have other headers today for destination, time to live etc. So its not something new.",davsclaus:1385703464:2013-11-29T13:37:44.200+0000:1385703464:2013-11-29T13:37:44.200+0000:Update JMS docs as well.
0,CAMEL-7025,Bug,Major,2.12.2,"2.11.3, 2.12.3, 2.13.0","
None
",Closed,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Sebastian Bösl,1,4,2013-11-29 11:16:19+00:00,2013-12-09 13:35:21+00:00,"This issue only happens when running in weblogic:


After updating to Camel 2.12.2 the method createXMLStreamReader(InputStream in, Exchange exchange) in staxConverter throws an NPE because of the missing charsetName.
Comparing the class with the previous version I saw camel no longer falls back to the default charset.


As a workaround I set the property Exchange.CHARSET_NAME on  explicitly -> still the same error.


Debugging the code I noticed that in org.apache.camel.impl.converter.BaseTypeConverterRegistry#convertTo line 98 the exchange is not passed to the converter so I  can neither use an explicit nor an implicit charset.


Any workaround/fix would be greatly appreciated!


StackTrace:
java.lang.NullPointerException: charsetName
        at java.io.InputStreamReader.<init>(InputStreamReader.java:82)
        at weblogic.xml.stax.XMLStreamInputFactory.createXMLStreamReader(XMLStreamInputFactory.java:66)
        at org.apache.camel.converter.jaxp.StaxConverter.createXMLStreamReader(StaxConverter.java:170)
        at sun.reflect.GeneratedMethodAccessor85614.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.camel.util.ObjectHelper.invokeMethod(ObjectHelper.java:990)
        at org.apache.camel.impl.converter.InstanceMethodTypeConverter.convertTo(InstanceMethodTypeConverter.java:78)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.doConvertTo(BaseTypeConverterRegistry.java:275)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:113)
        at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)
        at org.apache.camel.converter.jaxb.JaxbDataFormat.unmarshal(JaxbDataFormat.java:173)","njiang:1385942951:2013-12-02T08:09:11.083+0000:1385942951:2013-12-02T08:09:11.083+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-7024,Bug,Major,2.10.3,2.13.0,"
None
",Resolved,Not A Problem,2.13.0,Claus Ibsen,Joe Luo,0,2,2013-11-28 19:36:31+00:00,2013-11-29 09:41:22+00:00,"I have a camel route that receives Camel Exchanges through JMS and based on its content it builds on the fly the endpoint URI as a string. The URI comprises a request queue and a response queue, and looks something similar to:



jms-test:queue:test.request?replyTo=test.response&replyToType=Exclusive&requestTimeout=20000&concurrentConsumers=1




This URI is then used on a ReceipientList which sends the JMS message.
Camel caches the above URI as one of its available endpoints, and registers a listener (a DefaultMessageListenerContainer) against the response queue.


Client determines some of the parameters, for instance the timeout to be used. If a new exchange for instance uses a different timeout, Camel would cache a second endpoint with similar URI except for the timeout, and would create a second JMS listener (DMLC) on the same response queue.


The above would create a conflict between the first listener and the second as they would both compete for JMS response messages. For this reason I need to remove the first endpoint using following Camel API:



Collection<Endpoint> removeEndpoints(String pattern) throws Exception;




For instance:



camelContext.removeEndpoints(""jms-test*"");




which successfully deletes it, but does not unsubscribe the JMS listener.


The reason is that when Camel removes the endpoint, it does not invoke stop() on associated JmsProducer object which in turn calls unInitReplyManager() to stop and destroy the DMLC that is created by ReplyManager for the response queue.","joeluo:1385638668:2013-11-28T19:37:48.391+0000:1385638668:2013-11-28T19:37:48.391+0000:Simply using following code snippet to reproduce it:
{code}
public static void main(String args[]) throws Exception {
        CamelContext context = new DefaultCamelContext();
        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(""tcp://localhost:61616"");
        context.addComponent(""jms-test"", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));
        context.addRoutes(new RouteBuilder() {
            public void configure() {
                from(""direct:in"").log(LoggingLevel.INFO, ""endpointUri header: ${header.endpointUri}"").recipientList(header(""endpointUri""));
            }
        });
        ProducerTemplate template = context.createProducerTemplate();
        context.start();

        String endpointUri = ""jms-test:queue:test.request?replyTo=test.response&replyToType=Exclusive&concurrentConsumers=1&requestTimeout=2000"";
        for (int i = 0; i < 10; i++) {
            Object ret = template.requestBodyAndHeader(""direct:in"", ""Test Message: "" + i, ""endpointUri"", endpointUri + i);
            System.out.println(""returning: "" + ret.toString());
            Thread.sleep(1000);
            System.out.println(""removing endpoint"");
            context.removeEndpoints(""jms-test*"");
        }
       
        // wait a bit and then stop
        Thread.sleep(10000);
        context.stop();
    }
{code}

You also need a server to consume message from the test.request queue and send a reply to test.response queue.
davsclaus:1385679795:2013-11-29T07:03:15.682+0000:1385679795:2013-11-29T07:03:15.682+0000:You need to stop the template. Remove endpoints does not stop any running/cached consumers/producers - that is the job of the producer template you created.

And you are also doing it wrong, as if you use Exclusive then its exclusive. If you want to use a shared reply queue, then use shared type instead.
davsclaus:1385689282:2013-11-29T09:41:22.435+0000:1385689282:2013-11-29T09:41:22.435+0000:The route is using that endpoint, and the route is still running, so you would need to stop the route also

context.stopRoute(""route1""); 

"
0,CAMEL-7023,New Feature,Major,None,"2.12.3, 2.13.0","
None
",Resolved,Won't Fix,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,1,5,2013-11-28 12:43:38+00:00,2013-12-03 18:19:48+00:00,"This allows end users to start Camel applications and examples as they would do with mvn camel:run, but using mvn camel:hawtio instead, it also bootup the hawtio web console.


This allows end users to use the console to see what happens, visualize the Camel routes, debug the routes, profile the routes, and whatnot.","hifly81:1385684989:2013-11-29T08:29:49.366+0000:1385684989:2013-11-29T08:29:49.366+0000:Will it just bootup the webconsole (homepage) or will it go directly to the detail of the camel context?
davsclaus:1385685336:2013-11-29T08:35:36.444+0000:1385685336:2013-11-29T08:35:36.444+0000:It shows the Camel plugin, which lists the Camel Tree.

For example from the camel-example-spring I see what you can see in the camel-tree.png screenshot attached.
But maybe we could infer that the JVM has only 1 CamelContext in the JVM and we should auto select the routes list instead (see camel-routes.png). Then people has immediately an overview of the routes.


hifly81:1385685578:2013-11-29T08:39:38.912+0000:1385685599:2013-11-29T08:39:59.747+0000:Yes my idea was to have a drill down directly to the camel context --> camel-routes.png
davsclaus:1385685738:2013-11-29T08:42:18.239+0000:1385685738:2013-11-29T08:42:18.239+0000:Yeah good idea. I have logged a ticket about this: https://github.com/hawtio/hawtio/issues/791
bvahdat:1385778435:2013-11-30T10:27:15.561+0000:1385778435:2013-11-30T10:27:15.561+0000:The option ""--join"" has been introduced *after* hawtio 1.2:
https://github.com/hawtio/hawtio/issues/785

So while trying this with {{camel-example-spring}} I end up with:
{code}
[INFO] Starting hawtio ...
Error: Unknown option: --join

hawtio takes the following options

  -h or --help = Displays the help screen
  -w or --war = War file or directory of the hawtio web application
  -l or --warLocation = Director to search for .war files
  -c or --contextPath = Context path
  -p or --port = Port number
  -ecp or --extraClassPath = Extra classpath
{code}

So I think this should be fixed in {{HawtioMojo}}. Indeed I removed that join option call and built again. Now when running {{mvn camel:hawtio}} then one can see from the console output the following log:

{code}
Joining the Jetty server thread
{code}

As apparently the default behaviour by hawtio 1.2 seems to be to join the Jetty server thread which seems to be not a good default, as because if you then point your browser to http://localhost:8080/hawtio ... there's not much displayed (see the attachment).

A new hawtio 1.2.1 release or a hawtio-1.3-M1 release cut could probably fix this.

davsclaus:1385779149:2013-11-30T10:39:09.783+0000:1385779149:2013-11-30T10:39:09.783+0000:Yes you would need to use 1.3-SNAPSHOT currently until there is a hawtio 1.2.1 release.
bvahdat:1385780841:2013-11-30T11:07:21.999+0000:1385780841:2013-11-30T11:07:21.999+0000:Claus, what do you mean with _You_?  I'm talking about something not working properly on the master branch.

Maybe we can then at least depend on the current hawtio SNAPSHOT version. I know, depending on a SNAPSHOT version is really odd & nasty but that would be the best option we could currently have. We have also done this in the past as well, e.g. before Karaf 2.3.3 went live we used to depended on 2.3.3-SNAPSHOT etc.

bvahdat:1385870099:2013-12-01T11:54:59.602+0000:1385870099:2013-12-01T11:54:59.602+0000:Still another 3 concerns I have about [the newly introduced Mojo|https://github.com/apache/camel/blob/master/tooling/maven/camel-maven-plugin/src/main/java/org/apache/camel/maven/HawtioMojo.java] for this goal:

1) The *static* main method of {{io.hawt.app.App}} is and should be {{public}} as otherwise people using it standalone would not be able to invoke it anyway. So there is *no* need for the logic below to make it ""accessible"" (even if {{hawtioMain.isAccessible()}} returns {{false}}, note that the method is *static*), that is we could completely get rid of the following obsolete logic:

{code}
if (!hawtioMain.isAccessible()) {
    getLog().debug(""Setting accessibility to true in order to invoke main()."");
    hawtioMain.setAccessible(true);
}
{code}

2) The {{java.lang.Class#getMethod()}} API has the following signature (note the varargs signature for any *potential* parameter(s)):

{code}
public Method getMethod(String name, Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException
{code}

SO that instead of:

{code}
.getMethod(""main"", new Class[] {String[].class});
{code}

We can simply do:

{code}
.getMethod(""main"", String[].class);
{code}

As under the cover the compiler already creates an object array for free.

3) Last but not least instead of the following:

{code}
hawtioMain.invoke(hawtioMain, new Object[]{args});
{code}

We should better do:

{code}
hawtioMain.invoke(null, new Object[]{args});
{code}

As the method is *static*!

Please note that my intention is *NOT* to criticize or what not but I only believe in the passion of all of us to maintain a clean, precise and easy to read code while riding Camel! :)

davsclaus:1385940498:2013-12-02T07:28:18.946+0000:1385940498:2013-12-02T07:28:18.946+0000:Thanks Babak for spotting this. The new code was similar to the existing code, so these issues here would also apply to the other goals such as run, embed etc.

I assume its from the very early days of Camel 5-6 years ago when James created the plugin that the coding style back then wasn't as used to varargs etc.
davsclaus:1386065108:2013-12-03T18:05:08.508+0000:1386065108:2013-12-03T18:05:08.508+0000:Dan Kulp, Hadrian, Jeff Genender, Johan Edstrom and James Carmon is opposed. 

See their comments and responses at
http://camel.465427.n5.nabble.com/Re-git-commit-CAMEL-7023-Added-hawtio-goal-to-camel-maven-plugin-td5744029.html


Though Camel end users who wants to enjoy hawtio can do so by using the Maven plugins hawtio offers out of the box in the 1.2.1 onwards
http://hawt.io/maven/
jwcarman:1386065988:2013-12-03T18:19:48.447+0000:1386065988:2013-12-03T18:19:48.447+0000:That's ""James Carman"", btw. :)
"
0,CAMEL-7022,New Feature,Major,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-28 09:05:53+00:00,2013-12-10 11:06:40+00:00,"In case you need to do special handling in UoW we would need to allow end users to easily plugin custom implementation. Today we have hardcoded that.


So introduce a UnitOfWorkFactory they can implement and plugin in Camel to use.",
0,CAMEL-7021,Bug,Major,2.12.2,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Claus Ibsen,Dhiraj Sureshkumar Bokde,0,2,2013-11-27 18:16:22+00:00,2013-11-28 08:37:40+00:00,"The Salesforce component clears the field 'Name' when upserting SObjects assuming its a common external ID. But Salesforce allows creating SObjects with custom external IDs, and the user may need to insert/update the 'Name' field. The method clearBaseFields in AbstractSObjectBase should not clear this field to support this use case. 
This was originally submitted as a github pull request https://github.com/apache/camel/pull/57 by mdarcemont.","dhirajsb:1385551513:2013-11-27T19:25:13.904+0000:1385551513:2013-11-27T19:25:13.904+0000:Attaching patch to disable clearing 'Name' field for update/upsert
davsclaus:1385599060:2013-11-28T08:37:40.311+0000:1385599060:2013-11-28T08:37:40.311+0000:Thanks for the patch"
0,CAMEL-7020,Improvement,Major,2.12.2,"2.11.4, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Akitoshi Yoshida,Akitoshi Yoshida,0,1,2013-11-27 13:01:46+00:00,2013-11-27 14:17:26+00:00,"Currently, those camel components that depend on javax.servlet do not explicitly specify the version range in their corresponding pom. As a result, the import range is automatically generated in the manifest with ""[2.6,3)"" which excludes version 3.0.


This patch will add the version range in those relevant pom files so that version 3.0 is also accepted.


Reference
http://camel.465427.n5.nabble.com/import-version-range-for-javax-servlet-in-camel-servlet-et-al-td5743849.html","ay:1385533046:2013-11-27T14:17:26.417+0000:1385533046:2013-11-27T14:17:26.417+0000:The generated range is now set to ""[2.5,4)""
"
0,CAMEL-7019,Improvement,Minor,2.12.2,2.14.3,"
None
",Closed,Fixed,2.14.3,Unassigned,Thomas Walzer,0,3,2013-11-27 12:30:10+00:00,2015-03-22 15:20:46+00:00,"Currently hl7-dataformat only supports the ""validating""-option.
However there are numerous more in the parser configuration (eg allowUnknownVersions, prettyPrintWhenEncodingXml, etc).


Especially ""allowUnknowVersions"" would be extremely helpful.
I don´t know if this could be achieved using a custom parser, however a direct option would be much simpler to implement.","davsclaus:1388801721:2014-01-04T10:15:21.526+0000:1388801721:2014-01-04T10:15:21.526+0000:Patches is welcome
acosentino:1399901836:2014-05-12T21:37:16.584+0000:1399901883:2014-05-12T21:38:03.723+0000:Since HapiContext has been introduced, is it still useful to add these options? Can I work on this improvement?
davsclaus:1400105441:2014-05-15T06:10:41.535+0000:1400105441:2014-05-15T06:10:41.535+0000:Yeah we love contributions, so Andrea please work on this.
http://camel.apache.org/contributing
twalzer:1400277828:2014-05-17T06:03:48.232+0000:1400277828:2014-05-17T06:03:48.232+0000:If we could come up with an example doing it with HapiContext that would also be great.
acosentino:1400304485:2014-05-17T13:28:05.753+0000:1400304485:2014-05-17T13:28:05.753+0000:I'll do my best even if I haven't so much time.
davsclaus:1426909119:2015-03-21T11:38:39.895+0000:1426909119:2015-03-21T11:38:39.895+0000:Any update on this?
twalzer:1427008752:2015-03-22T15:19:12.120+0000:1427008752:2015-03-22T15:19:12.120+0000:This works in 2.14, there is also a decent example in the docs, now. So I will close this.
twalzer:1427008846:2015-03-22T15:20:46.065+0000:1427008846:2015-03-22T15:20:46.065+0000:Documentation now has an example. Works in 2.15. Should also work beginning with 2.14."
0,CAMEL-7018,Bug,Major,None,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,2,2013-11-27 11:47:42+00:00,2014-12-10 16:21:56+00:00,"If you have a custom bean with @ManagedResource and your own attr/ops then Camel adds its default attrs/ops which it should not as they are not available.


See screenshot","Matteo Mortari:1418199716:2014-12-10T16:21:56.215+0000:1418199716:2014-12-10T16:21:56.215+0000:Hi, this solves for the use case in description 'custom bean'.
However if I define a +custom Processor+, possibly I annotate with @ManagedResource to expose my own attr/ops, but shouldn't this case _indeed_ expose also the Camel's default attrs/ops for a ManagedProcessor?

The problem I believe is this line, modified in the changelog of this bug:
https://github.com/apache/camel/blob/camel-2.13.x/camel-core/src/main/java/org/apache/camel/management/DefaultManagementMBeanAssembler.java#L63
would actually make expose for a custom Processor _only_ my own annotated attr/ops. But being my custom Processor a ManagedProcessor at runtime, I would have expected it to expose on JMX both the custom and Camel's default attr/ops.

It seems to me same problem described here:
http://camel.465427.n5.nabble.com/exposing-custom-jmx-properties-td5713375.html
And same I experienced today.

I would like to know if this is intended, and how to mitigate for a custom processor, please?
I think this could be a sort of unexpected behavior to some users, and from the faq http://camel.apache.org/why-is-my-processor-not-showing-up-in-jconsole.html to me at least is not clear how to mitigate for a custom processor.
Thanks"
0,CAMEL-7017,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,3,2013-11-27 10:53:24+00:00,2013-11-28 09:35:49+00:00,"See
https://github.com/apache/camel/pull/62","ge0ffrey:1385521638:2013-11-27T11:07:18.898+0000:1385521638:2013-11-27T11:07:18.898+0000:Charles asked about the dependency tree of optaplanner-core:

{code}
[INFO] --- maven-dependency-plugin:2.5:tree (default-cli) @ optaplanner-core ---
[INFO] org.optaplanner:optaplanner-core:bundle:6.0.0.Final
[INFO] +- org.kie:kie-api:jar:6.0.0.Final:compile
[INFO] +- org.kie:kie-internal:jar:6.0.0.Final:compile
[INFO] +- org.drools:drools-core:jar:6.0.0.Final:compile
[INFO] |  \- org.mvel:mvel2:jar:2.1.8.Final:compile (version managed from 2.1.8.Final)
[INFO] +- org.drools:drools-compiler:jar:6.0.0.Final:compile
[INFO] |  +- org.antlr:antlr-runtime:jar:3.5:compile (version managed from 3.5)
[INFO] |  +- org.eclipse.jdt.core.compiler:ecj:jar:3.7.2:compile (version managed from 3.7.2)
[INFO] |  \- com.google.protobuf:protobuf-java:jar:2.5.0:compile (version managed from 2.5.0)
[INFO] +- commons-lang:commons-lang:jar:2.6:compile
[INFO] +- commons-io:commons-io:jar:2.1:compile
[INFO] +- commons-collections:commons-collections:jar:3.2.1:compile
[INFO] +- org.slf4j:slf4j-api:jar:1.7.2:compile
[INFO] +- com.thoughtworks.xstream:xstream:jar:1.4.3:compile
[INFO] |  +- xmlpull:xmlpull:jar:1.1.3.1:compile
[INFO] |  \- xpp3:xpp3_min:jar:1.1.4c:compile
// test dependencies stripped as they don't leak into camel-optaplanner
{code}
davsclaus:1385523516:2013-11-27T11:38:36.274+0000:1385523516:2013-11-27T11:38:36.274+0000:Okay we got OSGi hell
   [WARNING] No export found to match com.sun.tools.xjc (imported by mvn:org.drools/drools-core/6.0.0.Final)

So the Karaf feature doesnt work (yet).
ge0ffrey:1385526385:2013-11-27T12:26:25.036+0000:1385526385:2013-11-27T12:26:25.036+0000:Attached the wiki txt as requested on the PR.
ge0ffrey:1385526775:2013-11-27T12:32:55.011+0000:1385530735:2013-11-27T13:38:55.970+0000:Small fix to wiki-camel-optaplanner:

In the section Termination, I forgot to add in the actual code:
{code}
<solver>
  ...
  <termination>
    <!-- Terminate after 10 seconds, unless it's not feasible by then yet -->
    <terminationCompositionStyle>AND</terminationCompositionStyle>
    <maximumSecondsSpend>10</maximumSecondsSpend>
    <scoreAttained>-1hard/0soft</scoreAttained>
  </termination>
  ...
<solver>
{code}

Now it's finished. The old wiki txt got removed.
davsclaus:1385532673:2013-11-27T14:11:13.480+0000:1385532673:2013-11-27T14:11:13.480+0000:Thanks for the docs, its here now
https://cwiki.apache.org/confluence/display/CAMEL/OptaPlanner
ge0ffrey:1385535576:2013-11-27T14:59:36.209+0000:1385535576:2013-11-27T14:59:36.209+0000:About this error
{code}
[WARNING] No export found to match com.sun.tools.xjc (imported by mvn:org.drools/drools-core/6.0.0.Final)
{code}

I've created an issue in Drools for that, so hopefully they fix that:
  https://issues.jboss.org/browse/DROOLS-355
It looks like they use it get around a problem in JAXB ?!?
bvahdat:1385544550:2013-11-27T17:29:10.402+0000:1385544550:2013-11-27T17:29:10.402+0000:The attached patch resolves the Karaf feature validation failure reported by Claus.

Intentionally I did *not* push this fix into our codebase to see if https://issues.jboss.org/browse/DROOLS-355 can be fixed properly. If not or if we want to release 2.13.0 before that ticket gets fixed then the attached patch could be applied into our codebase.
ge0ffrey:1385553802:2013-11-27T20:03:22.970+0000:1385553802:2013-11-27T20:03:22.970+0000:[~bvahdat] Nice work
On IRC freenode #droolsdev, I 've heard that DROOLS-355 isn't being prioritized, they hope to fix it in 2014.
davsclaus:1385598012:2013-11-28T08:20:12.878+0000:1385598012:2013-11-28T08:20:12.878+0000:Thanks Babak, we got a little step further.

Next problem is 

karaf@root> features:install camel-optaplanner
Error executing command: Manifest not present in the first entry of the zip mvn:org.eclipse.jdt.core.compiler/ecj/4.2.2

We have seen this before on Felix/Karaf.
davsclaus:1385598362:2013-11-28T08:26:02.337+0000:1385598362:2013-11-28T08:26:02.337+0000:If you install the bundle manually it works :) - just that if its in a features them we get that error above

karaf@root> install -s mvn:org.eclipse.jdt.core.compiler/ecj/4.2.2
Bundle ID: 82

bvahdat:1385602549:2013-11-28T09:35:49.684+0000:1385602549:2013-11-28T09:35:49.684+0000:I fixed that as well so it works out of the box :) see the comment inside our features.xml for the reason why this happens and how the solution looks like.
BTW the more I dive into the OSGi universe the more I love it :(
"
0,CAMEL-7016,Bug,Minor,None,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-27 08:45:29+00:00,2013-11-27 08:50:43+00:00,"If you do not have id of the route in the XML then Camel thinks its a new route to be added. We should ensure we handle that, and only update current route as that is the intend of this operation.


If you want to add new routes use mbean operation on camelcontext instead.",
0,CAMEL-7015,New Feature,Major,None,,"
None
",Resolved,Later,None,Willem Jiang,ChrisS,0,3,2013-11-26 22:24:15+00:00,2014-09-05 07:48:10+00:00,"It would be nice to have a possibility of a timeout starting from the first Exchange for messages having the same correlationExpression when using Aggregation.


This scenario is currently not supported because ""Its a bit tougher to implement as it would require an improvement to TimeoutMap to support that as well.""


The full scenario is described in this thread: http://camel.465427.n5.nabble.com/A-simple-Aggregator-use-case-td5743633.html#a5743634","antoine.dessaigne:1403485240:2014-06-23T09:00:40.815+0000:1403485240:2014-06-23T09:00:40.815+0000:I've added a pull request for this : https://github.com/apache/camel/pull/192

But my commit messages have a wrong jira number... Sorry about that.
davsclaus:1403560154:2014-06-24T05:49:14.435+0000:1403560154:2014-06-24T05:49:14.435+0000:What is the idea with the maxCompletionTimeout? Will it not confuse end users that there is 2 timeouts now?
davsclaus:1403560219:2014-06-24T05:50:19.624+0000:1403560219:2014-06-24T05:50:19.624+0000:Willem hold on any merges, as at first glance I think its confusing with that max timeout option.
antoine.dessaigne:1403562670:2014-06-24T06:31:10.043+0000:1403562670:2014-06-24T06:31:10.043+0000:At first I though of adding an option telling whether or not the timeout is for the first message received in this correlation group or for the last message.

But then I though, why not provide both timeouts ? You might want to 5 seconds after the last exchange received but not more than 60 seconds after the first message. That way, if you have an exchange every 4 seconds, you'll aggregate after one minute an not any longer.

Thus I named this parameter {{maxCompletionTimeout}} because I didn't wanted to rename the {{completionTimeout}} parameter.

I'm not saying that it's the right way, or maybe it's not properly named. Don't hesitate to ask if you want more insights about this patch.
githubbot:1409873498:2014-09-05T07:31:38.109+0000:1409873498:2014-09-05T07:31:38.109+0000:Github user adessaigne closed the pull request at:

    https://github.com/apache/camel/pull/192
"
0,CAMEL-7014,Improvement,Minor,2.10.4,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Benjamin Graf,0,3,2013-11-26 19:33:36+00:00,2014-01-06 19:17:02+00:00,I recognized an issue with restlet client if service is terminating while beeing called. Since timeout is set to default default (0 => waits infinite) no response is send and route is blocked (not stoppable at all),"davsclaus:1388801640:2014-01-04T10:14:00.877+0000:1388801640:2014-01-04T10:14:00.877+0000:A patch is welcome to set a default timeout value, maybe 30 seconds etc.
graben:1388907707:2014-01-05T15:41:47.421+0000:1388907707:2014-01-05T15:41:47.421+0000:Patch pull request submitted on GitHub (https://github.com/apache/camel/pull/85)
njiang:1388965982:2014-01-06T07:53:02.494+0000:1388965982:2014-01-06T07:53:02.494+0000:Applied the patch into master and camel-2.12.x branches with thanks to Benjamin.
I also added connectionTimeout option for the camel-restlet producer at the same time.
graben:1389007022:2014-01-06T19:17:02.935+0000:1389007022:2014-01-06T19:17:02.935+0000:I'm not sure if this is really resolved yet since returning null if timeout fired is in my opinion not a good final solution. After some small investigation I found an error in restlet itself (https://github.com/restlet/restlet-framework-java/issues/814) which actually avoids a better solution."
0,CAMEL-7013,Task,Major,None,None,"
None
",Closed,Fixed,2.12.2,Hadrian Zbarcea,Sebb,0,2,2013-11-26 18:00:46+00:00,2013-11-28 00:41:27+00:00,"To reduce the load on the ASF mirrors, projects are required to delete old releases [1]


Please can you remove all non-current releases?


Thanks!


[Note that older releases are always available from the ASF archive server]


[1] http://www.apache.org/dev/release.html#when-to-archive","hadrian:1385467358:2013-11-26T20:02:38.007+0000:1385467358:2013-11-26T20:02:38.007+0000:Sebb, nothing escapes your sharp eye. We were aware of that. Thanks for the reminder. I'll take care of it promptly.
hadrian:1385499652:2013-11-27T05:00:52.414+0000:1385499652:2013-11-27T05:00:52.414+0000:Done. Thanks again Sebb. Yes, there was quite a bit of cleanup to do.
sebb:1385526011:2013-11-27T12:20:11.445+0000:1385526011:2013-11-27T12:20:11.445+0000:The download page [1] says:

""Support for Camel 2.10.x and previous releases is discontinued.""

So I would expect 2.10.x to be removed from the mirrors.

Also, remove the following from the download page:

""The latest release for Camel 2.10.x is Camel 2.10.7 Release.""
""The latest release for Camel 2.9.x is Camel 2.9.8 Release.""

[1] http://camel.apache.org/download.html
hadrian:1385568991:2013-11-28T00:16:31.735+0000:1385568991:2013-11-28T00:16:31.735+0000:Done and done. Thanks again.

sebb:1385570487:2013-11-28T00:41:27.522+0000:1385570487:2013-11-28T00:41:27.522+0000:Thanks!"
0,CAMEL-7012,Bug,Major,2.11.0,2.13.0,"
None
",Resolved,Invalid,2.13.0,Claus Ibsen,Vinod,0,2,2013-11-26 12:39:42+00:00,2013-11-27 08:22:57+00:00,"Please find the below configuration, that I tested. As per the below configuration retry will happen after 90 seconds. But actually retry is happening after 210 seconds. That means 2 minute/120 second added without configuring/ without my knowledge.


<route id=""1111"" errorHandler=""myDeadLetterChannel"">
......
<route>


	<bean id=""myDeadLetterChannel"" class=""org.apache.camel.builder.DeadLetterChannelBuilder"">
		<property  name=""deadLetterUri""  value=""activemq:queue:deadLetterChannel?exchangePattern=InOut&replyTo=outgoing""/>
		<property  name=""redeliveryPolicy"" ref=""myRedeliveryPolicy""/>
	</bean>
	<bean id=""myRedeliveryPolicy"" class=""org.apache.camel.processor.RedeliveryPolicy"">
    		<property name=""maximumRedeliveries"" value=""3""/>
    		<property name=""redeliveryDelay"" value=""90000""/>
	</bean>


attached the logs


[Nov 26 17:19:05:509] INFO  (CacheUriBuilder.java:18) - Start of CacheUriBuilder
[Nov 26 17:19:05:545] INFO  (CacheUriBuilder.java:21) - Exchange body is : <clm-is-interface>
        <interface>
                <api>xxxxx</api>
                <contextId>TXN141</contextId>
        </interface>
</clm-is-interface>
[Nov 26 17:19:05:550] INFO  (CacheUriBuilder.java:27) - Cache context ID is : TXN141
[Nov 26 17:19:05:550] INFO  (CamelUtils.java:45) - Start of setExchangeHeadersTypeGet() method.
[Nov 26 17:22:35:913] INFO  (CacheUriBuilder.java:18) - Start of CacheUriBuilder
[Nov 26 17:22:35:914] INFO  (CacheUriBuilder.java:21) - Exchange body is : <clm-is-interface>
        <interface>
                <api>xxxxx</api>
                <contextId>TXN141</contextId>
        </interface>
</clm-is-interface>
[Nov 26 17:22:35:949] INFO  (CacheUriBuilder.java:27) - Cache context ID is : TXN141
[Nov 26 17:22:35:950] INFO  (CamelUtils.java:61) - End of setExchangeHeadersTypeGet() method.
[Nov 26 17:22:35:951] INFO  (CacheUriBuilder.java:57) - End of CacheUriBuilder
[Nov 26 17:26:06:342] INFO  (CacheUriBuilder.java:18) - Start of CacheUriBuilder
[Nov 26 17:26:06:343] INFO  (CacheUriBuilder.java:21) - Exchange body is : <clm-is-interface>
        <interface>
                <api>xxxxx</api>
                <contextId>TXN141</contextId>
        </interface>
</clm-is-interface>


Please suggest any work around/ fix?","davsclaus:1385511777:2013-11-27T08:22:57.675+0000:1385511777:2013-11-27T08:22:57.675+0000:Please use the mailing list / user forum to get help

You can read here about how to get help/support and what you can/should do:
http://camel.apache.org/support"
0,CAMEL-7011,Bug,Minor,None,None,"
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-11-26 05:54:10+00:00,2013-11-26 07:35:19+00:00,"CXF 2.7.8 is released, we should consider to upgrade the version.",njiang:1385422519:2013-11-26T07:35:19.444+0000:1385422519:2013-11-26T07:35:19.444+0000:Applied the patch into master and camel-2.12.x branches.
0,CAMEL-7010,Task,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Willem Jiang,Willem Jiang,1,2,2013-11-26 04:55:14+00:00,2014-01-03 04:45:54+00:00,"HttpClient 4.3 deprecates the old HttpClient configuration API, we need to move to the New API for it.","njiang:1388695554:2014-01-03T04:45:54.061+0000:1388695554:2014-01-03T04:45:54.061+0000:Applied patch into master branch, I also update the camel-2.13.0 release note for the API change."
0,CAMEL-7009,Bug,Major,2.12.1,2.12.2,"
None
",Resolved,Fixed,2.12.2,Willem Jiang,Jason Foster,0,2,2013-11-26 03:35:27+00:00,2013-12-03 00:38:09+00:00,"When using RPC in RabbitMQ, the producer sets up an exclusive queue and specifies that queue as the reply_to on outgoing messages.  When the consumer in camel-rabbitmq receives the messages, the reply_to isn't available on the exchange, so no RPC calls can be completed.


The following Python script (from RabbitMQ In Action) produces the message with a reply_to property:


import time, json, pika


creds_broker = pika.PlainCredentials(""guest"", ""guest"")
conn_params = pika.ConnectionParameters(""localhost"",
                                         virtual_host = ""/"",
                                         credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
channel = conn_broker.channel()


msg = json.dumps(

{""client_name"": ""RPC Client 1.0"",
                  ""time"" : time.time()}

)
result = channel.queue_declare(exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to = result.method.queue


channel.basic_publish(body=msg,
                      exchange=""talentsprout.rpc"",
                      properties=msg_props,
                      routing_key=""ping"")


print ""Sent 'Ping' RPC call.  Waiting for reply...""


def reply_callback(channel, method, header, body):
     """"""Receives RPC server replies.""""""
     print ""RPC Reply — "" + body
     channel.stop_consuming()


channel.basic_consume(reply_callback,
                      queue=result.method.queue,
                      consumer_tag=result.method.queue)


channel.start_consuming()


The following route in Camel would consume messages from this queue:


		from(""rabbitmq://192.168.213.130/talentsprout.rpc?queue=ping&routingKey=ping&durable=False&autoDelete=False&autoAck=False&username=guest&password=guest"")
		.log(""Headers: ${headers}"");


The log statement from that route shows that no reply_to header is added.


Without this feature, RPC from external producers cannot work.","njiang:1385422361:2013-11-26T07:32:41.709+0000:1385422361:2013-11-26T07:32:41.709+0000:I just checked the code of RabbitMQConsumer, it just put the REPLY_TO into the message header.
Can you double check if the message properties is set rightly?
{code}
        if (properties.getReplyTo() != null) {
                exchange.getIn().setHeader(RabbitMQConstants.REPLY_TO, properties.getReplyTo());
            }
{code}
njiang:1385425357:2013-11-26T08:22:37.602+0000:1385425357:2013-11-26T08:22:37.602+0000:I just ran a simple tests and verified the REPLY_TO message header is set rightly.
{code}
rabbitmq.REPLY_TO=myReply
{code}

jrfoster67:1385456079:2013-11-26T16:54:39.994+0000:1385456869:2013-11-26T17:07:49.148+0000:I downloaded the source from here http://www.interior-dsgn.com/apache/camel/apache-camel/2.12.1/apache-camel-2.12.1-src.zip and looked in apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQConsumer.java and don't see the code you posted in the comment.  I also did a full search through the entire camel 2.12.1 source tree for that constant (using ultra-edit), and only found the following two references:

----------------------------------------
Find 'RabbitMQConstants.REPLY_TO' in 'C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQProducer.java' (11/26/2013 10:01:38 AM; 9/18/2013 9:35:08 PM):
C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\main\java\org\apache\camel\component\rabbitmq\RabbitMQProducer.java(90):         final Object replyTo = exchange.getIn().getHeader(RabbitMQConstants.REPLY_TO);
Found 'RabbitMQConstants.REPLY_TO' 1 time(s).
----------------------------------------
Find 'RabbitMQConstants.REPLY_TO' in 'C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\test\java\org\apache\camel\component\rabbitmq\RabbitMQProducerTest.java' (11/26/2013 10:01:38 AM; 9/18/2013 9:35:08 PM):
C:\DevJava\Workspaces\apache-camel-2.12.1\components\camel-rabbitmq\src\test\java\org\apache\camel\component\rabbitmq\RabbitMQProducerTest.java(101):         message.setHeader(RabbitMQConstants.REPLY_TO, ""bbbbdfgdfg"");
Found 'RabbitMQConstants.REPLY_TO' 1 time(s).
Search complete, found 'RabbitMQConstants.REPLY_TO' 2 time(s). (2 file(s)).

Not sure if the trunk has been updated and not released, or if we're not talking about the same code.

However, if I run the above route in camel, and run the above python script, these are the headers I see:

[) thread #2 - RabbitMQConsumer] route1                         INFO  Headers: {rabbitmq.EXCHANGE_NAME=talentsprout.rpc, breadcrumbId=ID-DENORALT852-61351-1385483624264-0-1, rabbitmq.ROUTING_KEY=ping, rabbitmq.DELIVERY_TAG=1}


jrfoster67:1385989210:2013-12-02T21:00:10.309+0000:1385989210:2013-12-02T21:00:10.309+0000:I looked at  and re-tested with 2.12.2 I can now see that the REPLY_TO header (and others) do get correctly set on the consumer, so must have been code in the trunk you were looking at.
njiang:1386002289:2013-12-03T00:38:09.023+0000:1386002289:2013-12-03T00:38:09.023+0000:It is already fixed in camel-2.12.2."
0,CAMEL-7008,Bug,Major,2.12.1,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Xilai Dai,0,3,2013-11-26 02:49:33+00:00,2013-12-09 06:35:16+00:00,"In normal JaxWsClientFactoryBean in cxf, INTERFACE_CREATED can be triggered in JaxWsServiceFactoryBean(ReflectionServiceFactoryBean).initializeWSDLOperations().
But in camel, created WSDLServiceFactoryBean to create the client instead of JaxWsServiceFactoryBean,
which has override initializeWSDLOperations() to empty.


Similar to the bug https://issues.apache.org/jira/browse/CAMEL-6570","njiang:1385419757:2013-11-26T06:49:17.462+0000:1385419757:2013-11-26T06:49:17.462+0000:I just checked the code, if you don't specify the SEI class, camel-cxf uses WSDLServiceFactoryBean to load the service model.
As the WSDLServiceFactoryBean doesn't has the SEI class to fire with INTERFACE_CREATED event, you cannot get the one you want.

I don't think it is bug of camel-cxf.
"
0,CAMEL-7007,Improvement,Major,None,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Claus Ibsen,0,1,2013-11-25 08:24:18+00:00,2014-08-22 12:44:31+00:00,"Like we did for OSGi, we should improve the auto assigned mbean naming to avoid creating camel-1, camel-1-1, camel-1-2, camel-1-3 names for <camelContext> which has not been explicit named by the end user.


See screenshot for jconsole with 2 WARs in Tomcat.",davsclaus:1408682671:2014-08-22T12:44:31.126+0000:1408682671:2014-08-22T12:44:31.126+0000:Should be fixed now
0,CAMEL-7006,Wish,Minor,"2.11.2, 2.12.0","2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Stéphane Deraco,0,1,2013-11-24 14:04:10+00:00,2014-09-16 11:59:03+00:00,"In camel-test-blueprint, Camel version 2.11.2 and 2.12.0 added the possibilty to add OSGi services at startup using the protected method addServicesOnStartup of CamelBlueprintTestSupport class.


In the Javadoc and in the wiki it says that we can use the method asService to register a service with a single property.


However, this method has no modifier. It is not protected, so we can not use it in our test classes (unless they belongs to the same package of CamelBlueprintTestSupport.","stephane_deraco:1385354018:2013-11-25T12:33:38.559+0000:1385354044:2013-11-25T12:34:04.505+0000:Hi,

I created a pull-request : https://github.com/apache/camel/pull/61

Stéphane"
0,CAMEL-7005,Bug,Minor,2.12.2,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-24 11:21:54+00:00,2013-11-24 11:34:27+00:00,"There is a little regression in 2.12.2 about the camel-stream component, requiring x2 ENTER to read



Enter something: hello

HELLO",
0,CAMEL-7004,Improvement,Minor,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-24 10:24:11+00:00,2013-11-24 10:27:30+00:00,"This allows from JMX to see information about how many route a camel context has, of which X is started. Just like we log at INFO level when starting Camel.",
0,CAMEL-7003,Bug,Major,2.12.1,,"
None
",Resolved,Won't Fix,None,Willem Jiang,Jason Foster,0,3,2013-11-23 19:34:00+00:00,2015-01-23 12:28:00+00:00,"There doesn't seem to be a way to have the producer declare an exchange or a queue.  The following route demonstrates this problem:


		from(""stream:in?promptMessage=Enter message payload: "")
		.to(""rabbitmq://<server>:<port>/direct?queue=defect&username=guest&password=guest"");


There also is no way for the producer to use the default exchange, (which has no name).  You cannot set an exchange name as a header with an empty string, and specifying 'direct' on the exchange uri also doesn't work.  However, the consumer appears to work and will declare at least queues, even on the default exchange.


The producer appears to only work with previously declared exchanges and queues, which isn't practical, especially in recovery situations, since you cannot guarantee the order things will start (producer vs. consumer) and the producer doesn't attempt any type of re-delivery in the case that the exchange/queue doesn't exist, nor does it indicate via logging or exceptions that there is a problem with delivery.


In Rabbit, creating exchanges and queues are both idempotent operations, so it wouldn't hurt to call the methods to declare the exchange and queue, regardless of whether they previously existed.  If you set up an endpoint to a non-existent queue and want to use the default direct exchange, you can't do that with this component.  


If an exchange and queue are created outside the component, (say by a consumer or using rabbitmq management console) then the producer works correctly.","njiang:1386535072:2013-12-09T04:37:52.366+0000:1386535072:2013-12-09T04:37:52.366+0000:RabbitMQ Producer should not be in charge of declaring the Exchange and Queue, as there are lots of to declare the exchange and declare queue and bind the queue. 
BTW you can avoid to start the producer earlier by using using [starting order|http://camel.apache.org/configuring-route-startup-ordering-and-autostartup.html#Configuringroutestartuporderingandautostartup-Configuringstartingorderforroutes]
jrfoster67:1386623384:2013-12-10T05:09:44.245+0000:1386623384:2013-12-10T05:09:44.245+0000:The consumer class already has this capability...

        channel.exchangeDeclare(endpoint.getExchangeName(),
                endpoint.getExchangeType(),
                endpoint.isDurable(),
                endpoint.isAutoDelete(),
                new HashMap<String, Object>());

        // need to make sure the queueDeclare is same with the exchange declare
        channel.queueDeclare(endpoint.getQueue(), endpoint.isDurable(), false,
                endpoint.isAutoDelete(), null);
        channel.queueBind(
                endpoint.getQueue(),
                endpoint.getExchangeName(),
                endpoint.getRoutingKey() == null ? """" : endpoint
                        .getRoutingKey());

which doesn't seem like a lot of code to add... If anything, the producer side is more sensitive to exchanges and queues not being there, since if a producer sends a message to an exchange without a queue being there, it gets black holed by RabbitMQ (which means messages get lost).

You cannot control the order of startup of components OUTSIDE of camel, so consumers that don't run in camel but still want to read messages from producers inside camel, might start after camel in some cases.

Can this please be revisited?
njiang:1387221161:2013-12-17T03:12:41.717+0000:1387221176:2013-12-17T03:12:56.083+0000:I  just spent some to go though the AMQP specification. The producer (Publisher application) know nothing about the Message Queue, it just need to specify the Exchange or the RoutingKey and AMQP broker take care of the it. 
From this point I don't think let Producer to declare the queue or exchange is a good idea.
jrfoster67:1387222031:2013-12-17T03:27:11.967+0000:1387222031:2013-12-17T03:27:11.967+0000:Can you help me understand what from the amp spec leads you to belief it is not a good idea?  And why is it good for the consumer to do this and not the producer? If anything I would think it would be the other way around...

It's also not just amqp... This is a rabbit component not an amqp component (only) so I would think how rabbit behaves would be equally important... Eg black holing messages and no indication from this component that anything is amiss... 



Sent from my iPhone



ceefour:1421987029:2015-01-23T12:23:49.859+0000:1421987212:2015-01-23T12:26:52.440+0000:This ticket conflates exchange/queue creation with the issue of not being able to send to default exchange.

I've created a ticket which is specifically about the default exchange """": CAMEL-8270, which should have been fixed by CAMEL-7031 (2.12.3) but still happens in 2.14.1 (probably regression)"
0,CAMEL-7002,Improvement,Major,None,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Hadrian Zbarcea,Franz Forsthofer,0,4,2013-11-23 13:43:19+00:00,2014-02-08 09:31:14+00:00,"The contribution consists of two parts.


The first part is about the verifier.
During the signature verification with PGPDataFormat currently all public keys contained in the public keyring are taken into account. So the current semantic is: Verify the signature against all public keys in the keyring. IF you have a keyring with lot of public keys you will not want that every identity represented by the public keys can sent to you a signature. Normally you want to know from which identity the signature comes. Therefore I have introduced the possibility to restrict the verifying publikc keys; I have introduced the parameter signatureKeyUserids where you specify the Userids the publc keys must have in order to be allowed to verify a signature.


The second contribution is about the encryptor. Currently the encrypted part can contain one signature from one private key. I added now the possibility that several several signatures can be added from different private keys. The used private keys are defined by the values of the new paramter signatureKeyUserids. This new functionality is especially useful to ease the key renewal. For a certain time period you can sent messages containing the signature from the old key and the new key to the receiver.","forsthofer:1385333241:2013-11-25T06:47:21.740+0000:1385333241:2013-11-25T06:47:21.740+0000:I improved the java doc of the method setSignatureUserids. Please use patch 
0001-PGPDataFormat-signatureUserIds-added.patch from today and ignore the old patch.

I can do the wiki update.
Regards Franz


hadrian:1385366234:2013-11-25T15:57:14.633+0000:1385366234:2013-11-25T15:57:14.633+0000:Thanks Franz for another nice contribution. Best is to remove the old patch to avoid confusion (I could do it it, but it's not proper etiquette, unless you want me to).
forsthofer:1385599206:2013-11-28T08:40:06.312+0000:1385599206:2013-11-28T08:40:06.312+0000:I deleted the old attachement to avoid confusion.
ay:1385964450:2013-12-02T14:07:30.184+0000:1385964450:2013-12-02T14:07:30.184+0000:Hi Franz,
not sure if this filtering/checking needs to be directly included there because the verification itself runs using the keyId found in the message. Isn't it simpler to set the user header or something similar header with the userId info after verification so that anyone can do the filtering later if they want, no?

regards, aki

forsthofer:1386053253:2013-12-03T14:47:33.451+0000:1386053253:2013-12-03T14:47:33.451+0000:Hi Aki,

I will explain why it is better to do the filtering in the PGPDataFormat. First, I explain the verification process as given in the patch:
Let us assume we receive a camel message which contains several PGP Signatures. Now we loop over the Signatures and check whether we can find a public key in the keystore which has the same KeyId as contained in the current signature. If there is such a public key then we check if the public key has a user ID which contains one of the strings provided by the new parameter  signatureKeyUserids. Only if this is the case  we stop the looping and we execute a verification of the actual signature. Even if the verification fails we do not continue the loop over the signature. 

So the semantic is find the first signature whose key is in the keystore and which has one user ID which contains one value out of the signatureKeyUserIds and execute a verification for this signature.

A later check as proposed by you has considerable performance drawbacks. In your case, we have to execute the verification over *all* signatures  then we have to collect the verification information and the user ID information in some map (signature to verification result and user ID list) so that we later can evaluate this map. The execution of the verification of all signatures is in my opinion a performance overhead because we want only to verify that the message comes from someone who is specified in the list given by the signatureKeyUserids.

Regards Franz


forsthofer:1386120541:2013-12-04T09:29:01.753+0000:1386120541:2013-12-04T09:29:01.753+0000:I enhanced the contribution with the possibility of adding several signatues in one PGP encryption object.
ay:1386128237:2013-12-04T11:37:17.470+0000:1386128237:2013-12-04T11:37:17.470+0000:Hi Franz,
thanks for explaining the background.

I thought a typical use case of PGP-verification is that you get a signed data, possibly associated with more than one signatures, and if you find the matching key in your keyring that is trusted and the signature is verified, you can accept the data as verified and give this key info to the user. That means, we quit after the first successful verification and in that case, there is no performance overhead, right?

One could also offer an option of using the trust-level to choose among multiple keys (but not sure if that info is accessible in BC-lib) if some classification among keys is necessary. 

In any case, I still think there is no need for adding this filtering directly in the PGP verification step. But if people think this option solves their use cases, I am okay with it.

regards, aki
forsthofer:1386140405:2013-12-04T15:00:05.383+0000:1386193207:2013-12-05T05:40:07.762+0000:Hello Aki,

Suppose you have two signatures SigA and SigB in the encrypted data and let's suppose that we have the correspondig two keys keyA and keyB also in the keyring. But we only want to allow that the keyB is used for the verification. The verifier however detects first keyA and verifies SigA and you return the information of keyA. Now in a next step we find out that keyA was used for verification and we abourt the processing although there is a SigB which would not have led to the abortion.

Regards Franz
forsthofer:1386193600:2013-12-05T05:46:40.959+0000:1386193600:2013-12-05T05:46:40.959+0000:Hi Aki,

we could offer both possibilities. If you do not specify a signature User Id for the verification the verification shall be executed against all public keys in the keyring (actually this is the current situation). To support your use case, we only have to set headers after the verification. I propose that we are setting two headers:
* the header ""UserIdOfVerificationKey"" shall contain the user ID of the key used for the verification
* the header ""KeyIdOfVerificationKey"" shall contain the key ID of the key used for the verification
And as a second possibility you can restrict the verification keys by specifying User IDs as I proposed.

But in both cases we shall write the additional two headers.

What do you think about that?

Regards Franz
ay:1386214772:2013-12-05T11:39:32.961+0000:1386214772:2013-12-05T11:39:32.961+0000:Hi Franz,
okay. You are right that the post-filtering doesn't work for your use case of having multiple signatures and wishing to not honor one of the valid signatures. 
Regarding setting the verification info in the header, you can drop it or postpone it in that case because you probably want to think about the name and what is set. For the name, it should indicate its reference to PGP to avoid collisions, as the information is specific to PGP (so, I think something containing a fragment ""crypto.pgp"" is more preferable than a generic userIdsomething).
regards, aki


forsthofer:1386570844:2013-12-09T14:34:04.875+0000:1386570844:2013-12-09T14:34:04.875+0000:I uploaded a new version of the patch which contains a further small correction.
forsthofer:1386628257:2013-12-10T06:30:57.460+0000:1386628257:2013-12-10T06:30:57.460+0000:Minor correction done.
forsthofer:1389928264:2014-01-17T11:11:04.512+0000:1389928264:2014-01-17T11:11:04.512+0000:I updated the patch by rebasing it to the latest changes done in the master and made a minor correction. 

Please submit to master.
davsclaus:1391654514:2014-02-06T10:41:54.442+0000:1391654514:2014-02-06T10:41:54.442+0000:Is there any outstanding work on this ticket?
forsthofer:1391721868:2014-02-07T05:24:28.092+0000:1391721868:2014-02-07T05:24:28.092+0000:Hi Claus,
I checked and found out that the above  patch has not yet been applied. It would be great to get the patch into 2.12.3.
Regards Franz
hadrian:1391756228:2014-02-07T14:57:08.166+0000:1391756228:2014-02-07T14:57:08.166+0000:Correct. I am applying it today if no other work is planned for this issue.
hadrian:1391775041:2014-02-07T20:10:41.357+0000:1391775041:2014-02-07T20:10:41.357+0000:Patch applied with thanks to Franz.
forsthofer:1391823074:2014-02-08T09:31:14.939+0000:1391823074:2014-02-08T09:31:14.939+0000:I updated the wiki page. I think this issue can be closed."
0,CAMEL-7001,Improvement,Major,2.12.1,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-23 12:12:33+00:00,2013-11-23 12:38:42+00:00,"See nabble
http://camel.465427.n5.nabble.com/OSGI-camel-avro-2-12-1-AvroDataFormat-loadDefaultSchema-tp5743694.html",
0,CAMEL-7000,Improvement,Minor,None,"2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-23 11:25:28+00:00,2013-11-23 12:10:44+00:00,Its better to initialize in doStart|doStop as opposed to at runtime where there can be concurrent messaging etc.,
0,CAMEL-6999,New Feature,Minor,2.12.1,None,"

camel
dropbox

",Resolved,Fixed,2.14.0,Henryk Konsek,Giovanni Marigi,6,4,2013-11-22 18:12:01+00:00,2014-08-22 15:28:58+00:00,Create a camel component (producers and consumers ) for dropbox integration,"hifly81:1385115243:2013-11-22T18:14:03.311+0000:1385118947:2013-11-22T19:15:47.977+0000:I'm working on a camel dropbox starting from a customer request
https://github.com/hifly81/camel-dropbox

hifly81:1385253831:2013-11-24T08:43:51.697+0000:1385253831:2013-11-24T08:43:51.697+0000:github pull request:
https://github.com/apache/camel/pull/58
hekonsek:1394163265:2014-03-07T11:34:25.977+0000:1394163293:2014-03-07T11:34:53.577+0000:Hi Giovanni,

Apparently DropBox SDK is distributed on some MIT-like [1] DropBox license. Due to that reason we cannot ship it with the Apache Camel. However we could include it as a part of the Camel Extra (2) project.

Would you like to donate your code to the Camel Extra project?

Cheers.

(1) http://search.maven.org/remotecontent?filepath=com/dropbox/core/dropbox-core-sdk/1.7.6/dropbox-core-sdk-1.7.6.pom
(2) https://code.google.com/a/apache-extras.org/p/camel-extra
hekonsek:1394163611:2014-03-07T11:40:11.234+0000:1394163611:2014-03-07T11:40:11.234+0000:Giovanni was so kind to donate (1) the component to the Camel Extra. We can proceed with the merge then. I'll try to handle this later today.

(1) https://github.com/apache/camel/pull/58#issuecomment-37016615
bibryam:1397429691:2014-04-14T06:54:51.420+0000:1397429691:2014-04-14T06:54:51.420+0000:Assigning to Henryk as he already took good care of this issue.
Component page is remaining still.
hekonsek:1397473065:2014-04-14T18:57:45.777+0000:1397473065:2014-04-14T18:57:45.777+0000:Thanks Bilgin. I'll handle it.
hekonsek:1397473308:2014-04-14T19:01:48.515+0000:1397473308:2014-04-14T19:01:48.515+0000:Giovanni, can you print, sign and fax the ICLA to the Apache? The procedure is described here (1). If you got any questions or problems, please let me know.

(1) https://camel.apache.org/how-do-i-edit-the-website.html
githubbot:1402203567:2014-06-08T12:59:27.825+0000:1402203567:2014-06-08T12:59:27.825+0000:Github user jfarrell closed the pull request at:

    https://github.com/apache/camel/pull/58
"
0,CAMEL-6998,Test,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Babak Vahdat,Babak Vahdat,0,1,2013-11-22 12:50:18+00:00,2013-11-27 18:18:24+00:00,"-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.itest.cdi.IntegrationTest
Tests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 2.148 sec <<< FAILURE! - in org.apache.camel.itest.cdi.IntegrationTest
org.apache.camel.itest.cdi.IntegrationTest  Time elapsed: 2.147 sec  <<< ERROR!
org.jboss.weld.exceptions.DeploymentException: Exception List with 1 exceptions:
Exception 0 :
java.lang.IllegalStateException: CamelContext 'contextA' has not been injected into the CamelContextMap
	at org.apache.camel.cdi.internal.CamelExtension.startConsumeBeans(CamelExtension.java:229)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.weld.util.reflection.SecureReflections$13.work(SecureReflections.java:264)
	at org.jboss.weld.util.reflection.SecureReflectionAccess.run(SecureReflectionAccess.java:52)
	at org.jboss.weld.util.reflection.SecureReflectionAccess.runAsInvocation(SecureReflectionAccess.java:137)
	at org.jboss.weld.util.reflection.SecureReflections.invoke(SecureReflections.java:260)
	at org.jboss.weld.introspector.jlr.WeldMethodImpl.invokeOnInstance(WeldMethodImpl.java:170)
	at org.jboss.weld.introspector.ForwardingWeldMethod.invokeOnInstance(ForwardingWeldMethod.java:51)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:154)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:241)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:229)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:207)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvent.java:75)
	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:46)
	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:31)
	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:369)
	at org.jboss.arquillian.container.weld.ee.embedded_1_1.mock.TestContainer.startContainer(TestContainer.java:257)
	at org.jboss.arquillian.container.weld.ee.embedded_1_1.WeldEEMockContainer.deploy(WeldEEMockContainer.java:98)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$3.call(ContainerDeployController.java:156)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$3.call(ContainerDeployController.java:123)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.executeOperation(ContainerDeployController.java:266)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.deploy(ContainerDeployController.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81)
	at org.jboss.arquillian.container.impl.client.container.DeploymentExceptionHandler.verifyExpectedExceptionDuringDeploy(DeploymentExceptionHandler.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.container.impl.client.ContainerDeploymentContextHandler.createDeploymentContext(ContainerDeploymentContextHandler.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.container.impl.client.ContainerDeploymentContextHandler.createContainerContext(ContainerDeploymentContextHandler.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:134)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$1.perform(ContainerDeployController.java:90)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$1.perform(ContainerDeployController.java:79)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.forEachDeployment(ContainerDeployController.java:258)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.forEachManagedDeployment(ContainerDeployController.java:234)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.deployManaged(ContainerDeployController.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:134)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
	at org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(ContainerEventController.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81)
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:134)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeClass(EventTestRunnerAdaptor.java:80)
	at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:182)
	at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:314)
	at org.jboss.arquillian.junit.Arquillian.access$100(Arquillian.java:46)
	at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:199)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:147)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)
	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:48)
	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:31)
	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:369)
	at org.jboss.arquillian.container.weld.ee.embedded_1_1.mock.TestContainer.startContainer(TestContainer.java:257)
	at org.jboss.arquillian.container.weld.ee.embedded_1_1.WeldEEMockContainer.deploy(WeldEEMockContainer.java:98)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$3.call(ContainerDeployController.java:156)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$3.call(ContainerDeployController.java:123)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.executeOperation(ContainerDeployController.java:266)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.deploy(ContainerDeployController.java:122)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81)
	at org.jboss.arquillian.container.impl.client.container.DeploymentExceptionHandler.verifyExpectedExceptionDuringDeploy(DeploymentExceptionHandler.java:50)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.container.impl.client.ContainerDeploymentContextHandler.createDeploymentContext(ContainerDeploymentContextHandler.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.container.impl.client.ContainerDeploymentContextHandler.createContainerContext(ContainerDeploymentContextHandler.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:134)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$1.perform(ContainerDeployController.java:90)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController$1.perform(ContainerDeployController.java:79)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.forEachDeployment(ContainerDeployController.java:258)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.forEachManagedDeployment(ContainerDeployController.java:234)
	at org.jboss.arquillian.container.impl.client.container.ContainerDeployController.deployManaged(ContainerDeployController.java:78)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:134)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
	at org.jboss.arquillian.container.test.impl.client.ContainerEventController.execute(ContainerEventController.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:99)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:81)
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:90)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:88)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:134)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.beforeClass(EventTestRunnerAdaptor.java:80)
	at org.jboss.arquillian.junit.Arquillian$2.evaluate(Arquillian.java:182)
	at org.jboss.arquillian.junit.Arquillian.multiExecute(Arquillian.java:314)
	at org.jboss.arquillian.junit.Arquillian.access$100(Arquillian.java:46)
	at org.jboss.arquillian.junit.Arquillian$3.evaluate(Arquillian.java:199)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)
	at org.jboss.arquillian.junit.Arquillian.run(Arquillian.java:147)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:264)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:124)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)

Running org.apache.camel.itest.cdi.properties.PropertiesConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.279 sec - in org.apache.camel.itest.cdi.properties.PropertiesConfigurationTest

Results :

Tests in error: 
  IntegrationTest.org.apache.camel.itest.cdi.IntegrationTest » Deployment Except...

Tests run: 2, Failures: 0, Errors: 1, Skipped: 0","bvahdat:1385096954:2013-11-22T13:09:14.023+0000:1385096954:2013-11-22T13:09:14.023+0000:Reverting back [this commit|https://github.com/apache/camel/commit/c97601f546323279931ea9a0f1ff8df72b3d1b7e] on my local workspace makes this test pass again:

{code}
~/dev/workspace/camel/tests/camel-itest-cdi>git reset --hard 71758b5b1cdf546f90d7528496c4227aefb10ce9
HEAD is now at 71758b5 CAMEL-6935 : Add instructions to support Require-Capability and Provide-Capability introduced by OSGI v4.3
~/dev/workspace/camel/tests/camel-itest-cdi>cd ../../components/camel-cdi/
~/dev/workspace/camel/components/camel-cdi>mvn clean install -Dtest=false
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: CDI 2.13-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-cdi ---
[INFO] Deleting /Users/bvahdat/dev/workspace/camel/components/camel-cdi/target
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-cdi ---
[INFO] 
[INFO] >>> camel-package-maven-plugin:2.13-SNAPSHOT:generate-components-list (default) @ camel-cdi >>>
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-cdi ---
[INFO] 
[INFO] <<< camel-package-maven-plugin:2.13-SNAPSHOT:generate-components-list (default) @ camel-cdi <<<
[INFO] 
[INFO] --- camel-package-maven-plugin:2.13-SNAPSHOT:generate-components-list (default) @ camel-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-cdi ---
[INFO] Compiling 17 source files to /Users/bvahdat/dev/workspace/camel/components/camel-cdi/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-cdi ---
[INFO] Compiling 32 source files to /Users/bvahdat/dev/workspace/camel/components/camel-cdi/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.15:test (default-test) @ camel-cdi ---
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:bundle (default-bundle) @ camel-cdi ---
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for !org.apache.camel.cdi.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for com.thoughtworks.xstream.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for freemarker.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for javax.persistence.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for net.sf.flatpack.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for net.sf.saxon.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.antlr.stringtemplate.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.abdera.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.commons.httpclient.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.commons.logging.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.cxf.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.qpid.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.velocity.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.apache.xmlbeans.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.ccil.cowan.tagsoup.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.eclipse.jetty.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.jivesoftware.smack.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.mortbay.cometd.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.osgi.framework*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.springframework.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.springframework.ws.*
[WARNING] Bundle org.apache.camel:camel-cdi:bundle:2.13-SNAPSHOT : Did not find matching referal for org.springframework.xml.*
[INFO] 
[INFO] --- maven-site-plugin:3.2:attach-descriptor (attach-descriptor) @ camel-cdi ---
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-cdi ---
[INFO] Checking legal files in: camel-cdi-2.13-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ camel-cdi ---
[INFO] Installing /Users/bvahdat/dev/workspace/camel/components/camel-cdi/target/camel-cdi-2.13-SNAPSHOT.jar to /Users/bvahdat/.m2/repository/org/apache/camel/camel-cdi/2.13-SNAPSHOT/camel-cdi-2.13-SNAPSHOT.jar
[INFO] Installing /Users/bvahdat/dev/workspace/camel/components/camel-cdi/pom.xml to /Users/bvahdat/.m2/repository/org/apache/camel/camel-cdi/2.13-SNAPSHOT/camel-cdi-2.13-SNAPSHOT.pom
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:install (default-install) @ camel-cdi ---
[INFO] Installing org/apache/camel/camel-cdi/2.13-SNAPSHOT/camel-cdi-2.13-SNAPSHOT.jar
[INFO] Writing OBR metadata
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.197s
[INFO] Finished at: Fri Nov 22 13:56:41 CET 2013
[INFO] Final Memory: 25M/989M
[INFO] ------------------------------------------------------------------------
~/dev/workspace/camel/components/camel-cdi>cd ../../tests/camel-itest-cdi/
~/dev/workspace/camel/tests/camel-itest-cdi>mvn clean install
[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Camel :: Integration Tests :: CDI 2.13-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ camel-itest-cdi ---
[INFO] Deleting /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/target
[INFO] 
[INFO] --- maven-bundle-plugin:2.3.7:cleanVersions (versions) @ camel-itest-cdi ---
[INFO] 
[INFO] --- maven-remote-resources-plugin:1.4:process (default) @ camel-itest-cdi ---
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ camel-itest-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 5 resources
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ camel-itest-cdi ---
[INFO] Compiling 7 source files to /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/target/classes
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ camel-itest-cdi ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] Copying 3 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ camel-itest-cdi ---
[INFO] Compiling 2 source files to /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/target/test-classes
[INFO] 
[INFO] --- maven-surefire-plugin:2.15:test (default-test) @ camel-itest-cdi ---
[INFO] Surefire report directory: /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.itest.cdi.IntegrationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.702 sec - in org.apache.camel.itest.cdi.IntegrationTest
Running org.apache.camel.itest.cdi.properties.PropertiesConfigurationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.236 sec - in org.apache.camel.itest.cdi.properties.PropertiesConfigurationTest

Results :

Tests run: 2, Failures: 0, Errors: 0, Skipped: 0

[INFO] 
[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ camel-itest-cdi ---
[INFO] Building jar: /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/target/camel-itest-cdi-2.13-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-site-plugin:3.2:attach-descriptor (attach-descriptor) @ camel-itest-cdi ---
[INFO] 
[INFO] --- ianal-maven-plugin:1.0-alpha-1:verify-legal-files (default) @ camel-itest-cdi ---
[INFO] Checking legal files in: camel-itest-cdi-2.13-SNAPSHOT.jar
[INFO] 
[INFO] --- maven-install-plugin:2.4:install (default-install) @ camel-itest-cdi ---
[INFO] Installing /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/target/camel-itest-cdi-2.13-SNAPSHOT.jar to /Users/bvahdat/.m2/repository/org/apache/camel/camel-itest-cdi/2.13-SNAPSHOT/camel-itest-cdi-2.13-SNAPSHOT.jar
[INFO] Installing /Users/bvahdat/dev/workspace/camel/tests/camel-itest-cdi/pom.xml to /Users/bvahdat/.m2/repository/org/apache/camel/camel-itest-cdi/2.13-SNAPSHOT/camel-itest-cdi-2.13-SNAPSHOT.pom
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 13.649s
[INFO] Finished at: Fri Nov 22 13:54:54 CET 2013
[INFO] Final Memory: 23M/989M
[INFO] ------------------------------------------------------------------------
~/dev/workspace/camel/tests/camel-itest-cdi>
{code}

[~cmoulliard] do you maybe have an idea about this?

bvahdat:1385546973:2013-11-27T18:09:33.862+0000:1385547141:2013-11-27T18:12:21.042+0000:[~cmoulliard] I reverted back your commit as it causes this itest to fail by every full build of the master branch on the CI-Server. Also looking at the [applied commit of yours|https://github.com/apache/camel/commit/c97601f546323279931ea9a0f1ff8df72b3d1b7e] I spotted an issue:

{code}
@Override public String getId() {
  return uniqueId.toString();
}
{code}

For a given {{CamelContextBean}} object this implementation does *not* provide a *unique* Id as the newly introduced {{uniqueId}} field of your commit is declared to be a static member variable!
"
0,CAMEL-6997,Task,Major,2.12.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Babak Vahdat,0,1,2013-11-22 12:43:46+00:00,2015-07-11 06:22:35+00:00,"See:
https://github.com/apache/camel/blob/master/examples/camel-example-cdi/README.txt


According that README.txt we need a documentation for this example @
http://camel.apache.org/cdi-example.html",
0,CAMEL-6996,Bug,Minor,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Natasha,0,2,2013-11-21 18:06:19+00:00,2013-11-21 19:57:08+00:00,"Hi everybody,


please have a look into file ""CdiCamelContext.java"":
In the methods ""start"" and ""stop"" ""throw"" statements are missing (see below).
This error suppresses proper error handling and error information in case that the cdi camel context cannot be started (for example due to invalid endpoint uris).


Thanks a lot in advance for the quick fix.


Bye
Natasha


    @PostConstruct
    @Override
    public void start() {
        try 

{
            super.start();
        }

 catch (Exception e) 

{
            ObjectHelper.wrapRuntimeCamelException(e); // <= Missing throw statement
        }


    }





    @PreDestroy


    @Override


    public void stop() {


        try {
            super.stop();
        } catch (Exception e) {            ObjectHelper.wrapRuntimeCamelException(e); // <= Missing throw statement        }

    }",davsclaus:1385035028:2013-11-21T19:57:08.213+0000:1385035028:2013-11-21T19:57:08.213+0000:Thanks for reporting and with the patch.
0,CAMEL-6995,Improvement,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-21 16:27:35+00:00,2013-11-21 17:02:24+00:00,"See nabble
http://camel.465427.n5.nabble.com/Transform-Camel-and-null-message-bodies-tp5743617.html


We should not reuse the script out of the box, as it can leave data from previous message to the next etc. Instead we should add option where people can turn it off if they really need it, such as scripts that are idempotent etc.",
0,CAMEL-6994,Bug,Minor,2.8.5,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,metatech,0,2,2013-11-21 15:44:36+00:00,2013-11-21 20:31:19+00:00,"When a route containing a load balancer is restarted, after the restart, the route does not contain any processors within the load balancer.
This is because the processors are removed in ""doStop"", rather than in ""doShutdown"" in LoadBalancerSupport.
Here is a patch that fixes the problem.",davsclaus:1385037079:2013-11-21T20:31:19.408+0000:1385037079:2013-11-21T20:31:19.408+0000:Thanks for reporting and the patch.
0,CAMEL-6993,New Feature,Minor,2.12.1,"2.11.3, 2.12.3, 2.13.0","
None
",Closed,Fixed,"2.11.3, 2.12.3, 2.13.0",Hadrian Zbarcea,Jan Materne,0,2,2013-11-21 12:53:35+00:00,2014-01-08 08:18:22+00:00,"When combining multiple expectations in Tests on MockEndpoints you may use the PredicateBuilder.and() method.


These methods exists with two signatures:



using two Predicates [1]
using a List of Predicates [2]



Combining three Predicates results in constructs like



and(one, and(two, three))
and(Arrays.asList(one, two, three))



It would be easier to provide a vararg method like in [3].


That said the or-method is only available with a signature containing two predicates [4].


[1] org.apache.camel.builder.PredicateBuilder.and(Predicate, Predicate)
[2] org.apache.camel.builder.PredicateBuilder.and(List<Predicate>)
[3] org.apache.camel.builder.PredicateBuilder.in(Predicate...)
[4] org.apache.camel.builder.PredicateBuilder.or(Predicate, Predicate)","jhm:1385215085:2013-11-23T21:58:05.899+0000:1385215085:2013-11-23T21:58:05.899+0000:I have written test and implementation and have created a pull request from github.
It's my first PR so please have a look.
hadrian:1385233887:2013-11-24T03:11:27.917+0000:1385233887:2013-11-24T03:11:27.917+0000:Your [patch|https://github.com/janmaterne/camel/commit/22bf92a71f549bbe3299c26f96cee95dfe127084] looks good. It requires a minor change to pass checkstyle. Thanks for the contribution.
jhm:1385247901:2013-11-24T07:05:01.993+0000:1385247901:2013-11-24T07:05:01.993+0000:Thanks for pointing to checkstyle.
I have to read http://camel.apache.org/building.html carefully ;-)

mvn -Psourcecheck clean install
jhm:1385301100:2013-11-24T21:51:40.765+0000:1385301100:2013-11-24T21:51:40.765+0000:Next try ....
hadrian:1389097242:2014-01-07T20:20:42.829+0000:1389097242:2014-01-07T20:20:42.829+0000:Patches applied with thanks to Jan.
jhm:1389140302:2014-01-08T08:18:22.650+0000:1389140302:2014-01-08T08:18:22.650+0000:done with git:bfd4204d4dd4de87593a8c7682ea761dd708c83d"
0,CAMEL-6992,Bug,Major,2.12.1,,"

camel-cxf

",Resolved,Invalid,None,Unassigned,CXF Developer,0,3,2013-11-21 11:41:20+00:00,2013-11-21 18:58:19+00:00,"My case is as follows:


1) I have a web-application deployed on tomcat. In this web-application, I am consuming 2 web-services. These 2 web-services are invoked sequentially without any delay.
2) Important thing to note is that the endpoint URL of both these web-services have same host-name(IP) and same port number. Rest of the URL is different. (Both the URLs are plain HTTP. There is NO HTTPS)
3) First web-service is invoked. Camel-CXF processes and returns the response and starts a new thread for clean-up tasks. Lets call this new thread as 'Clean-up Thread'. In this clean-up thread, the socket (which was created while invoking this first web-service) is closed. However, since this clean-up thread is started after the response is returned to my web-application code, the 2nd webservice call and the 'clean-up thread(cleaning up sockets created for 1st web-service)' execute simultaneously. And by the time, the actual ""java.net.Socket.close()"" method is called in the 'cleanup thread', the 2nd web-service invocation is already started using the SAME socket object.


Now, at this point, the clean-up thread closes the socket (which was created while invoking the first web-service). And since, the second web-service invocation is using the same socket object, the invocation of 2nd web-service terminates abruptly and the following exception is thrown:
: java.net.SocketException: Unexpected end of file from server
at sun.net.www.http.HttpClient.parseHTTPHeader(HttpClient.java:777)
at sun.net.www.http.HttpClient.parseHTTP(HttpClient.java:640)
at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1195)
at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:379)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream.handleResponseInternal(HTTPConduit.java:1542)
at org.apache.cxf.transport.http.HTTPConduit$WrappedOutputStream$1.run(HTTPConduit.java:1499)
at org.apache.cxf.workqueue.AutomaticWorkQueueImpl$3.run(AutomaticWorkQueueImpl.java:395)
at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)


Please let me know if you are facing any issues while reproducing the issue. I will be more than happy to help.","davsclaus:1385005620:2013-11-21T11:47:00.056+0000:1385005620:2013-11-21T11:47:00.056+0000:Use the mailing list / user forum for this kind of question/help.

See details on this page how to get support/help
http://camel.apache.org/support"
0,CAMEL-6991,Bug,Major,2.11.2,2.12.0,"
None
",Resolved,Fixed,2.12.0,Claus Ibsen,Ulrich Kramer,0,2,2013-11-21 11:21:19+00:00,2013-11-22 08:27:55+00:00,"DefaultHttpBinding.writeResponse was modified between 2.11.0 and 2.11.2. This yields to a problem with stream caching. 


When exchange.out is not set target (DefaultHttpBinding.java:215)  is assigned to exchange.in . exchange.in may contain a body which is already removed by an onCompletion callback. In DefaultHttpBindung.java:377 this body is read. This may yield to an exception","davsclaus:1385035405:2013-11-21T20:03:25.056+0000:1385035405:2013-11-21T20:03:25.056+0000:Are you talking about using onCompletion
http://camel.apache.org/oncompletion.html

eg onCompletion in a route, or what?
davsclaus:1385035559:2013-11-21T20:05:59.866+0000:1385035559:2013-11-21T20:05:59.866+0000:And can you provide an sample route or what else to demonstrate this?
davsclaus:1385035579:2013-11-21T20:06:19.829+0000:1385035579:2013-11-21T20:06:19.829+0000:And try with latest release Camel 2.12.1
ulrich.kramer:1385072462:2013-11-22T06:21:02.453+0000:1385072462:2013-11-22T06:21:02.453+0000:With the following example you can reproduce the problem when you set two breakpoints:

# CachedOutputStream line: 209  cleanUpTempFile()	
# FileInputStreamCache line: 110  createInputStream(File)	

cleanupTempFile is called first. createInputStream creates an IOException because the file is already removed.

{code}
        CamelContext context = new DefaultCamelContext();
        context.addRoutes(new RouteBuilder() {

            @Override
            public void configure() throws Exception {
                from(""direct:input"").to(""jetty:http://localhost:55555/input"");
                from(""jetty:http://localhost:55555/input"").process(new Processor() {

                    @Override
                    public void process(final Exchange exchange) throws Exception {
                        Assert.assertFalse(exchange.hasOut());
                    }
                });
            }
        });
        context.start();
        ProducerTemplate template = context.createProducerTemplate();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < 10000; i++) {
            sb.append(""0123456789"");
        }
        template.sendBody(""direct:input"", sb.toString());
        while (true) {
            Thread.sleep(1000);
        }
{code}
davsclaus:1385080060:2013-11-22T08:27:40.487+0000:1385080060:2013-11-22T08:27:40.487+0000:Ah use Camel 2.12 onwards as Jetty ends the UoW after it has written the response. So the cleanup of the file happens afterwards now.
For earlier releases use .convertBodyTo(byte[].class) to ensure the content is in-memory, at the end of the jetty route."
0,CAMEL-6990,Improvement,Minor,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-21 11:18:59+00:00,2013-11-21 20:06:34+00:00,"You can already do this with


filter().language(""foo"", ""bla bla"")


But you cannot do it as


filter(language(""foo"", ""bla bla""))


We need to be able to do that 2nd variant as well.",
0,CAMEL-6989,Improvement,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2013-11-21 10:23:54+00:00,2013-11-21 10:25:40+00:00,"See nabble
http://camel.465427.n5.nabble.com/CamelContextLifecycle-Has-a-Glaring-Deficiency-tp5742904.html",
0,CAMEL-6958,Improvement,Minor,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-13 10:22:00+00:00,2013-11-13 10:23:18+00:00,"So you can see that information from the karaf camel commands.



Miscellaneous
	Auto Startup: true
	Starting Routes: false
	Suspended: false
	Shutdown timeout: 5 sec.
	Message History: true
	Tracing: false",
0,CAMEL-6957,Improvement,Major,None,None,"
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-11-13 07:18:51+00:00,2013-11-13 08:47:33+00:00,"Here is the mail thread which shows CxfEndpoint should throw more meaningful exception to help user to find out the key of issue.
http://camel.465427.n5.nabble.com/Camel-to-Webservice-call-SOAP-FailedToCreateRouteException-tp5743144.html","njiang:1384303653:2013-11-13T08:47:33.925+0000:1384303653:2013-11-13T08:47:33.925+0000:Applied the patch into trunk, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6956,Bug,Minor,2.12.1,,"
None
",Resolved,Fixed,None,Willem Jiang,Andrzej Gdula,0,2,2013-11-12 12:02:47+00:00,2013-11-13 02:50:53+00:00,"Documentation of Filter using org.apache.camel.component.file.GenericFileFilter refers to 


<!-- define our sorter as a plain spring bean -->
 <bean id=""myFilter"" class=""com.mycompany.MyFileSorter""/>


which should probably be changed to 


<!-- define our filter as a plain spring bean -->
 <bean id=""myFilter"" class=""com.mycompany.MyFileFilter""/>",njiang:1384282253:2013-11-13T02:50:53.521+0000:1384282253:2013-11-13T02:50:53.521+0000:I just updated the file2 wiki page with thanks to Andrzej.
0,CAMEL-6955,Improvement,Minor,None,2.15.0,"
None
",Resolved,Fixed,2.15.0,Claus Ibsen,Claus Ibsen,0,3,2013-11-12 10:49:06+00:00,2015-01-11 15:29:54+00:00,We should migrate these to use Netty,"christian.ohr:1420554186:2015-01-06T22:23:06.380+0000:1420554186:2015-01-06T22:23:06.380+0000:I'm working on a netty4 codec for mllp (hl7) - should be done soon.
CAMEL-7788 seems to have solved this for camel-syslog
christian.ohr:1420678113:2015-01-08T08:48:33.874+0000:1420678113:2015-01-08T08:48:33.874+0000:Attached some patch files adding a netty4 codec and tests
davsclaus:1420713235:2015-01-08T18:33:55.145+0000:1420713235:2015-01-08T18:33:55.145+0000:Thanks Christian you code has been merged to master.

I got started a bit on the documentation updates, maybe you want to add more details, such as how to configure and use the new netty codec
https://cwiki.apache.org/confluence/display/CAMEL/HL7

Also I wonder if this class HL7MLLPConfig should be renamed to HL7MLLPNettyCodec
christian.ohr:1420762484:2015-01-09T08:14:44.888+0000:1420762484:2015-01-09T08:14:44.888+0000:HL7MLLPConfig rename to HL7MLLPNettyCodec? You probably mean HL7MLLPNettyConfig?
No, HL7MLLPConfig is shared between the mina and netty endpoints.
I'll add some details to the wiki.
christian.ohr:1420790838:2015-01-09T16:07:18.232+0000:1420790838:2015-01-09T16:07:18.232+0000:Done editing the Wiki. Please double-check. 

What I'm kind of unsure is that for camel-netty4 you have to specify decoder and encoder (factory) separately, while for camel-mina2 you can do it with a single codec.
I noticed that there is a ByteToMessageCodec in Netty, but camel-netty4 does not expose an (URI) parameter to take advantage of this.
"
0,CAMEL-6954,Improvement,Major,"2.11.2, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-12 08:28:02+00:00,2013-11-12 08:34:22+00:00,"We need to enable the worker pool for UDP as well, otherwise we have only one thread process the message out of the box.","davsclaus:1384216249:2013-11-12T08:30:49.929+0000:1384216249:2013-11-12T08:30:49.929+0000:Only a problem with mina2, mina has worker pools already for TCP and UDP."
0,CAMEL-6953,Improvement,Minor,"2.10.5, 2.11.2, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Ralf Steppacher,0,2,2013-11-11 10:11:27+00:00,2013-11-11 11:58:06+00:00,"The exchange header CamelHttpUrl is of type StringBuffer and not String. This causes the simple expression ""${headers.CamelHttpUrl} contains 'foo'"" to always evaluate to false, because org.apache.camel.util.ObjectHelper::contains(Object,Object) does not handle StringBuffer.


Either the header should be of type String or org.apache.camel.util.ObjectHelper::contains(Object,Object) should deal with StringBuffer arguments.","rsteppac:1384136066:2013-11-11T10:14:26.008+0000:1384136066:2013-11-11T10:14:26.008+0000:Starting the attached context and browsing to ""localhost:9191/headerbug/foo"" will result in log output ""No match in URL.""
davsclaus:1384141869:2013-11-11T11:51:09.000+0000:1384141869:2013-11-11T11:51:09.000+0000:In older release you can manually invoke the toString
{code:xml}
<simple>${header.CamelHttpUrl.toString()} contains 'foo'</simple>
{code}"
0,CAMEL-6952,Improvement,Minor,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Willem Jiang,1,2,2013-11-11 03:52:32+00:00,2013-11-20 07:36:53+00:00,"We should let user set the routingKey option for the RabbitMQ producer, this option could be a default value of routingKey, and it could be override by change the message header.",
0,CAMEL-6951,Improvement,Minor,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-11-10 11:57:00+00:00,2013-11-10 17:27:28+00:00,"There're bunch of minor flaws by the ServiceHelper utility class such as:



The stopAndShutdownServices(Collection<?> services) method has got a minor bug in that it does not stop each given service object inside the try/catch block. Potentially this could cause to miss stopping/shutting down the remaining elements of the given services collection in case calling stop on one of those service objects would throw an exception!
The utility startServices(Object... services) has got code-duplication! Instead it should reuse the startServices(Collection<?> services) logic.
Lack of Javadoc by bunch of it's utility methods.
Some existing Javadoc is not really clear & precise about what the method exactly/really does.",
0,CAMEL-6950,Improvement,Major,2.12.1,3.1.0,"
None
",Resolved,Fixed,3.1.0,Unassigned,Raúl Kripalani,8,12,2013-11-09 16:33:17+00:00,2020-02-20 05:20:12+00:00,See this thread: http://camel.465427.n5.nabble.com/SJMS-failure-with-stale-reply-queue-tp5742833.html.,"hwellmann:1383988004:2013-11-09T17:06:44.562+0000:1383988004:2013-11-09T17:06:44.562+0000:We're on Java EE 6 and we were hoping to get rid of the transitive Spring dependency by replacing camel-jms with camel-sjms. Now this is currently a blocker.
hwellmann:1384161331:2013-11-11T17:15:31.587+0000:1384161331:2013-11-11T17:15:31.587+0000:As a proof of concept, I created a new component camel-sjmsee as a simplified version of camel-sjms:
https://github.com/hwellmann/camel/tree/sjmsee/components/camel-sjmsee

Given that a Java EE container provides connection pools anyway, this component does not pool any connections, producers or InOut reply consumers but creates them on the fly (closing a managed connection simply returns it to the container-managed pool). There is still a pool for ordinary consumers. Each consumer registers an exception listener on its connection which removes the consumer from the pool when an exception occurs. There is a reconnect task submitted to the consumer's executor which tries to refill the pool every 10 seconds.

I've tested this manually on JBoss AS 7.2.0 in the context of my application. I can now stop and restart the external ActiveMQ broker, and communication is restored automatically.

If this approach makes sense, I'm happy to improve it and make an official contribution. My main question is whether or not this should be a separate component or be integrated into camel-sjms somehow.
sully6768:1384361595:2013-11-14T00:53:15.509+0000:1384361595:2013-11-14T00:53:15.509+0000:Hi Harald,

The SJMS component provides a pluggable connection manager interface.  We should start there and create connection resource managers for the individual containers.  There is goodness in what you have created here and we need to see what we can migrate into SJMS while keeping it performant.

Thanks,
Scott ES
sully6768:1384501277:2013-11-15T15:41:17.541+0000:1384501277:2013-11-15T15:41:17.541+0000:Hi Harald,

Can you share the example code you were using for the JBoss integration?
hwellmann:1384514392:2013-11-15T19:19:52.637+0000:1384514392:2013-11-15T19:19:52.637+0000:Hi Scott,
here is my example code: https://github.com/hwellmann/camel-sjms-demo. See the README for more details.

I just pushed the stuff as-is, without any polishing, hope it makes sense... 
sully6768:1384521372:2013-11-15T21:16:12.485+0000:1384521372:2013-11-15T21:16:12.485+0000:Thanks Harald!  Much appreciated.

Best Regards,
Scott ES
bebarnes:1431500244:2015-05-13T14:57:24.259+0000:1431500244:2015-05-13T14:57:24.259+0000:Hello there Scott, hope all is well with you

Just wondering what the current state of SJMS is with reconnect logic.  I am using 2.15.2 and having the same issue - wondering if there is a best practice to handle this, or if any more information has come to light.  Appreciate your help.  
sgalla:1539068709:2018-10-09T15:05:09.697+0000:1539068709:2018-10-09T15:05:09.697+0000:Is there any new information that has come from this issue? I am using 2.19.4 and continue to struggle with the lack of reconnect logic in camel-sjms. Thank you!"
0,CAMEL-6949,Task,Minor,"2.11.2, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-09 15:02:31+00:00,2013-11-10 09:43:47+00:00,"Apache Jackrabbit pulls in rome 0.9 which is not a valid Maven artifact


[WARNING] The POM for rome:rome:jar:0.9 is invalid, transitive
dependencies (if any) will not be available, enable debug logging for
more details


We should use 1.0 which should work better.",davsclaus:1384047827:2013-11-10T09:43:47.443+0000:1384047827:2013-11-10T09:43:47.443+0000:camel-solr had the same problem
0,CAMEL-6948,Bug,Minor,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-11-08 20:33:51+00:00,2013-11-09 15:18:47+00:00,"Currently because of this bug the doShutdown hook of the following non-singleton Producers doesn't kick in at all:



JpaProducer
Mina2Producer



Which could cause resources leaking.",bvahdat:1383980024:2013-11-09T14:53:44.799+0000:1383980271:2013-11-09T14:57:51.492+0000:Ah there're bunch of other places of {{ProducerCache}} where this should be fixed as well so why reopening the ticket.
0,CAMEL-6947,Improvement,Major,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-08 14:39:22+00:00,2013-11-08 14:41:11+00:00,When the producer is stopped it should close cleanly. Also the thread pool should be shutdown which does not happen currently.,
0,CAMEL-6946,Improvement,Minor,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-08 10:18:07+00:00,2013-11-08 10:32:32+00:00,"See nabble
http://camel.465427.n5.nabble.com/camel-exception-netty-tp5742647p5742823.html",
0,CAMEL-6945,Bug,Major,"2.12.0, 2.12.1","2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,2,2013-11-08 05:33:33+00:00,2013-11-11 03:18:36+00:00,camel-netty-http producer should close the connection when the request connection header is close otherwise it will get ClosedChannelException when the producer try to reuse the connection.,"njiang:1383872208:2013-11-08T08:56:48.442+0000:1383872208:2013-11-08T08:56:48.442+0000:Applied the patch into master and camel-2.12.x branches.
davsclaus:1383885501:2013-11-08T12:38:21.676+0000:1383885608:2013-11-08T12:40:08.292+0000:I think we have a catch-22 situation here.

Yeah this ticket about the netty http producer should close the connection if ""Connection: close"" is in the HTTP header, then that is correct. The missing piece was that the check was already there, but the binding code didn't set the Exhcange.CLOSE header. Though this code sets it as a property on the exchange. Should really be header instead to be consistent.

Okay the catch-22 is when you bridge using netty-http, eg

{code}
1..n clients
-->
from netty-http 
   to netty-http 
-->
  backend server
{code}

Then you have N+ clients on the outside that may have ""Connection: close"" in their http headers. So on the Camel server we have the catch-22 situation, because

1. We want the netty http consumer to close the connection when the request is done (current code does that)
2. We most likely do not want to close connections between Camel and the backend server (to keep these connections alive and fast as possible)

So we should have a better way of doing #2 to tell Camel it should disregard the ""Connection: close"" header but keep it alive between Camel and backend server. eg some way of configuring this better.

Today we have the disconnect option people could use to force this
{code}
from netty-http 
   to netty-http?disconnect=false 
{code}

But I am not sure if setting that disconnect option would have the http header override it, so if there is a http header with ""Connection: close"" it may take precedence and still close the connection on the netty http producer side.

njiang:1384111116:2013-11-11T03:18:36.418+0000:1384111116:2013-11-11T03:18:36.418+0000:If we want to proxy the request and keep using the connection, we need to change the header ""Connection: close"" to be ""Connection: keepalive"", the proxy can be like this
{code}
from(""netty-http:xxx"").setHeader(""connection"", ""keep-alive"").to(""netty-http:yyy"")
{code}"
0,CAMEL-6944,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Jean-Baptiste Onofré,0,3,2013-11-07 12:51:12+00:00,2015-08-13 08:04:32+00:00,"In order for the users to easily trace the exchange, it would be great that the toString() method of the DefaultExchange displays the exchangeId.","davsclaus:1383891710:2013-11-08T14:21:50.307+0000:1383891710:2013-11-08T14:21:50.307+0000:You can use mdc logging and have exchange id and other informations
http://camel.apache.org/mdc-logging.html


bvahdat:1384061170:2013-11-10T13:26:10.345+0000:1384061170:2013-11-10T13:26:10.345+0000:[~jbonofre] maybe an update on this? Could we close this as ""Won't Fix""? Also IMHO the ""Priority"" of this ticket, if at all, should be considered as ""Trivial"" and not ""Major""."
0,CAMEL-6943,Improvement,Minor,None,3.x,"
None
",Resolved,Implemented,3.x,Unassigned,Willem Jiang,0,2,2013-11-07 01:34:31+00:00,2022-09-02 08:49:07+00:00,"Some of camel components uses the System properties to do configuration, it could be useful for the users to know about them if we can log these setting when starting the camel context.",davsclaus:1662079741:2022-09-02T08:49:01.805+0000:1662079741:2022-09-02T08:49:01.805+0000:via camel-main we have common code to configure camel on startup that camel-main is logging
0,CAMEL-6942,Test,Minor,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Claus Ibsen,0,2,2013-11-06 13:50:25+00:00,2013-11-06 21:32:13+00:00,"Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 310.62 sec - in org.apache.camel.itest.jms.JmsMediumQueuePerformanceTest


A potential issue here with a test that shouldn't take 300 sec. normally","davsclaus:1383717171:2013-11-06T13:52:51.965+0000:1383717221:2013-11-06T13:53:41.263+0000:And this one also take a bit of a long time

Running org.apache.camel.itest.jms.JmsPerformanceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 147.187 sec - in org.apache.camel.itest.jms.JmsPerformanceTest
bvahdat:1383742585:2013-11-06T20:56:25.571+0000:1383742585:2013-11-06T20:56:25.571+0000:The root cause of the problem is that there's no usage of JMS connection pooling as we produce the JMS messages up front through {{template}}. In case of {{JmsPerformanceTest}} there are 100 messages being produced and in case of it's subclass {{JmsMediumQueuePerformanceTest}} it is 1000!
bvahdat:1383743416:2013-11-06T21:10:16.073+0000:1383743416:2013-11-06T21:10:16.073+0000:After a *complete* rework and refactoring of both tests they both take around 6 seconds on my box:

{code}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.itest.jms.JmsPerformanceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.673 sec - in org.apache.camel.itest.jms.JmsPerformanceTest
{code}


{code}
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.apache.camel.itest.jms.JmsMediumQueuePerformanceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 6.358 sec - in org.apache.camel.itest.jms.JmsMediumQueuePerformanceTest
{code}

Please note that 3 seconds of each test execution is consumed by a hard-coded sleep of each test:

{code}
...
// should wait a bit to make sure all messages have been received by the MyBean#onMessage() method
// as this happens asynchronously, that's not inside the 'main' thread
Thread.sleep(3000);
...
{code}

bvahdat:1383744733:2013-11-06T21:32:13.787+0000:1383744733:2013-11-06T21:32:13.787+0000:Bad James ;)"
0,CAMEL-6941,Bug,Minor,2.11.0,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Robin Kåveland,0,1,2013-11-06 09:43:29+00:00,2013-11-08 14:51:58+00:00,"Observed the following stacktrace while shutting down camel:



   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 4.017 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 6.027 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 8.037 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 10.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
g   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#301: Forcing shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda due first await termination elapsed.
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 2.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 4.018 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 6.028 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 8.039 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
   org.apache.camel.impl.DefaultExecutorServiceManager.awaitTermination()#401: Waited 10.008 seconds for ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda to terminate...
g   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#305: Cannot completely force shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda due second await termination elapsed.
   org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown()#318: Shutdown of ExecutorService: java.util.concurrent.ThreadPoolExecutor@33c4bcda is shutdown: true and terminated: false took: 20.018 seconds.
g   org.apache.camel.impl.DefaultCamelContext.shutdownServices()#1771: Error occurred while shutting down service: org.apache.camel.impl.DefaultExecutorServiceManager@37285252. This exception will be ignored.
g   Caused by java.util.ConcurrentModificationException - null
g      at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)
g      at java.util.AbstractList$Itr.next(AbstractList.java:343)
g      at org.apache.camel.impl.DefaultExecutorServiceManager.doShutdown(DefaultExecutorServiceManager.java:442)
g      at org.apache.camel.support.ServiceSupport.shutdown(ServiceSupport.java:158)
g      at org.apache.camel.util.ServiceHelper.stopAndShutdownService(ServiceHelper.java:166)
g      at org.apache.camel.impl.DefaultCamelContext.shutdownServices(DefaultCamelContext.java:1766)
g      at org.apache.camel.impl.DefaultCamelContext.doStop(DefaultCamelContext.java:1681)
g      at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:92)
g      at org.apache.camel.core.xml.AbstractCamelContextFactoryBean.destroy(AbstractCamelContextFactoryBean.java:432)
g      at org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:211)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:500)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:476)
g      at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:445)
g      at org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1090)
g      at org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1064)
g      at org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1010)
g      at org.apache.camel.spring.Main.doStop(Main.java:152)
g      at org.apache.camel.support.ServiceSupport.stop(ServiceSupport.java:92)
g      at org.apache.camel.main.MainSupport$HangupInterceptor.run(MainSupport.java:82)
   org.apache.camel.impl.DefaultCamelContext.doStop()#1695: Uptime 35 days 23 hours
   org.apache.camel.impl.DefaultCamelContext.doStop()#1696: Apache Camel 2.11.0 (CamelContext: camel-activemq) is shutdown in 51.196 seconds




I haven't seen this before but it seems to me that there must be more than one thread doing something to DefaultExecutorServiceManager.executorServices (ArrayList) at the same time.",
0,CAMEL-6940,Bug,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Akitoshi Yoshida,Cecilio Alvarez,0,3,2013-11-06 08:44:15+00:00,2014-01-03 03:32:39+00:00,"When trying to split a xml containing this:
<tag name=name/>
I encountered the following exception : org.xml.sax.SAXParseException; XML documents structures must start and end within the same entity. 


Extract from my route:
the input is:


<BOOKS>
            <LIBRARY name=Library1/>
                      <BOOK name=Book1/>  <-----this kind of tag doesn't work.
                      <BOOK name=Book2/>
            </LIBRARY>
            <LIBRARY name=Library2/>
                      <BOOK name=Book1></BOOK>   <---this works.
                      <BOOK name=Book2></BOOK>
            </LIBRARY>
</BOOKS>


The splitting route:
<route>
<from uri=""activemq:queue.TEST""/>
<choice> 
        <when> 
                <xpath>/BOOKS</xpath> 
                <split streaming=""true"">
                        <tokenize token=""LIBRARY"" xml=""true""/>
                        <to uri=""activemq:example.LIBRARY""/>
                </split>
        </when> 
        <otherwise> 
                <log message=""Not a Books xml.""/> 
        </otherwise>       
</choice>
</route>


This issue is not part of camel 2.11.0.","ay:1383894907:2013-11-08T15:15:07.452+0000:1383894907:2013-11-08T15:15:07.452+0000:hi,
i can look into this.
but could you attach the input file to this jira ticket?
your pasted xml is missing the quotation marks and it does't look like the input you are actually using.
and where are you getting the parsing exception?

thanks.
aki
Cecilio Alvarez:1383896558:2013-11-08T15:42:38.533+0000:1383896558:2013-11-08T15:42:38.533+0000:Hi,

the quotation marks is <?xml version=""1.0"" encoding=""utf-8""?>
the parsing exception is throws each time a ""library"" contains a ""book"" tag without the closing </BOOK> tag, this wasn't a problem in camel 2.11.0.
I have to ask if I can put the original XML. But it's the same but with different tags names.

Thanks.
Cecilio Alvarez.
ay:1384219268:2013-11-12T09:21:08.215+0000:1384219268:2013-11-12T09:21:08.215+0000:hi Cecilio,
initially i thought you were just using a broken xml (as your input xml pasted on this ticket had the attributes not quoted and the LIBRARY elements prematurely terminated), but there seems to be a real issue in the tokenizer when a tokenized block itself contains at least one self-terminated child. So we need to fix this issue.
thanks.
regards, aki
ay:1384226755:2013-11-12T11:25:55.481+0000:1384226755:2013-11-12T11:25:55.481+0000:Hi Cecilio,
I just committed the fix for this issue into trunk, 2.12.x, and 2.11.x.
I included a test case that resembles your example, so I hope this fix will resolve your issue.
If you can test it with your example, that would be great.
thanks.
regards, aki"
0,CAMEL-6939,Test,Major,None,"2.14.0, Future","
None
",Resolved,Fixed,"2.14.0, Future",Grzegorz Grzybek,Claus Ibsen,0,4,2013-11-06 07:55:12+00:00,2015-01-14 18:21:56+00:00,"Runing all tests in tests/camel-itest-osgi has some errors 



Tests in error:
  BeanValidatorTest.validateShouldSuccessWithExpliciteDefaultGroup:47 » Validation
  BeanValidatorTest.testBeanValidatorRoute:36 » Validation Unable to create a Co...
  CamelBlueprint4Test.testRouteWithXSLT:42->AbstractIntegrationTest.getOsgiService:87 » Runtime
  CamelBlueprint7Test.testErrorHandler:41->AbstractIntegrationTest.getOsgiService:87 » Runtime
  XsltBlueprintRouteTest>CamelTestSupport.setUp:218->doPostSetup:68->AbstractIntegrationTest.getOsgiService:87 » Runtime
  DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  DisruptorTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  DisruptorVmTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » ResolveEndpointFailed
  GroovyTest.testGroovyLanguage:38 » ClassNotFound groovy.lang.Script
  HdfsBlueprintRouteTest.testWriteAndReadString:50->AbstractIntegrationTest.getOsgiService:87 » Runtime
  JaxbDataFormatTest>CamelTestSupport.setUp:217->CamelTestSupport.doSetUp:311->CamelTestSupport.startCamelContext:477 » JAXB
  GroovyScriptOsgiTest.testLanguage:47 » ClassNotFound groovy.lang.Script

Tests run: 178, Failures: 0, Errors: 12, Skipped: 24","githubbot:1399611810:2014-05-09T13:03:30.328+0000:1399611810:2014-05-09T13:03:30.328+0000:GitHub user kevinearls opened a pull request:

    https://github.com/apache/camel/pull/146

    A couple of test fixes for CAMEL-6939

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/kevinearls/camel master

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/146.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #146
    
----
commit 8d0075c6b3c291b0378289c4c4e2bdb2cc54d310
Author: Kevin Earls <kevin@kevinearls.com>
Date:   2014-05-09T13:01:49Z

    A couple of test fixes for CAMEL-6939

----

ggrzybek:1403823469:2014-06-27T06:57:49.703+0000:1403823469:2014-06-27T06:57:49.703+0000:After narrowing spring version in OSGi to not include version 4, {{BeanValidatorTest}} started working again. Checking other tests...
githubbot:1403832648:2014-06-27T09:30:48.081+0000:1403832648:2014-06-27T09:30:48.081+0000:GitHub user grgrzybek opened a pull request:

    https://github.com/apache/camel/pull/200

    [CAMEL-6939] Fixing failing tests

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/grgrzybek/camel CAMEL-6939

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/200.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #200
    
----
commit 0054dc479bf6301e74327a61911232c64c6bfd9c
Author: Grzegorz Grzybek <gr.grzybek@gmail.com>
Date:   2014-06-27T09:30:11Z

    [CAMEL-6939] Fixing failing tests

----

ggrzybek:1403930276:2014-06-28T12:37:56.227+0000:1403930276:2014-06-28T12:37:56.227+0000:BeanValidatorTest, HdfsBlueprintRouteTest - resolved by narrowing spring version range for OSGi (we can't include version 4)

CamelBlueprint4Test - resolved by adding {{DynamicImport-Package: *}}
  XsltBlueprintRouteTest - resolved by adding {{DynamicImport-Package: *}}

DisruptorTest, DisruptorVmTest - resolved by exposing {{sun.misc}} from system bundle

GroovyTest - resolved by setting correct ApplicationClassLoader in Camel context
githubbot:1409872255:2014-09-05T07:10:55.059+0000:1409872255:2014-09-05T07:10:55.059+0000:Github user grgrzybek closed the pull request at:

    https://github.com/apache/camel/pull/200

githubbot:1421230916:2015-01-14T18:21:56.024+0000:1421230916:2015-01-14T18:21:56.024+0000:Github user kevinearls closed the pull request at:

    https://github.com/apache/camel/pull/146
"
0,CAMEL-6938,Improvement,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2013-11-05 16:34:19+00:00,2013-11-06 09:40:39+00:00,"We have hostname in the mbean names by default which causes much more pain than gain.


We have this on roadmap for 3.0 to take out. But for users on 2.x we should have them the choice to turn that off or on. 


So from 2.13 onwards the hostname is not included by default. But there is an option to turn on the old ""slightly silly"" behavior, either from a option on the jmxAgent or using a JVM system property.",
0,CAMEL-6937,Improvement,Minor,None,2.17.0,"
None
",Resolved,Fixed,2.17.0,Antonin Stefanutti,Moulliard Charles,0,2,2013-11-05 16:27:17+00:00,2016-01-26 08:51:05+00:00,"When Camel CDI is deployed in Karaf using Pax CDI 0.6.0-SNAPSHOT, Weld 2.0 & CDI 1.1 Spec then the camel cdi extension raises this exception as the BeanManager cannot retrieved


Code must be refactorised :



Caused by: org.jboss.weld.exceptions.DeploymentException: Exception List with 1 exceptions:
Exception 0 :
java.lang.IllegalStateException: No org.apache.deltaspike.core.api.provider.BeanManagerProvider in place! Please ensure that you configured the CDI implementation of your choice properly. If your setup is correct, please clear all caches and compiled artifacts.
	at org.apache.deltaspike.core.api.provider.BeanManagerProvider.getInstance(BeanManagerProvider.java:133)
	at org.apache.deltaspike.core.api.provider.BeanProvider.getBeanManager(BeanProvider.java:473)
	at org.apache.deltaspike.core.api.provider.BeanProvider.getContextualReference(BeanProvider.java:117)
	at org.apache.deltaspike.core.api.provider.BeanProvider.getContextualReference(BeanProvider.java:100)
	at org.apache.camel.cdi.internal.CamelExtension.getCamelContext(CamelExtension.java:331)
	at org.apache.camel.cdi.internal.CamelExtension.startConsumeBeans(CamelExtension.java:226)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Meat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:601)
	at org.jboss.weld.injection.MethodInjectionPoint.invokeOnInstanceWithSpecialValue(MethodInjectionPoint.java:93)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:266)
	at org.jboss.weld.event.ExtensionObserverMethodImpl.sendEvent(ExtensionObserverMethodImpl.java:119)
	at org.jboss.weld.event.ObserverMethodImpl.sendEvent(ObserverMethodImpl.java:253)
	at org.jboss.weld.event.ObserverMethodImpl.notify(ObserverMethodImpl.java:232)
	at org.jboss.weld.event.ObserverNotifier.notifyObserver(ObserverNotifier.java:169)
	at org.jboss.weld.event.ObserverNotifier.notifyObservers(ObserverNotifier.java:128)
	at org.jboss.weld.event.ObserverNotifier.fireEvent(ObserverNotifier.java:102)
	at org.jboss.weld.bootstrap.events.AbstractContainerEvent.fire(AbstractContainerEvva:63)
	at org.jboss.weld.bootstrap.events.AbstractDeploymentContainerEvent.fire(AbstractDeploymentContainerEvent.java:35)
	at org.jboss.weld.bootstrap.events.AfterDeploymentValidationImpl.fire(AfterDeploymentValidationImpl.java:28)
	at org.jboss.weld.bootstrap.WeldStartup.validateBeans(WeldStartup.java:429)
	at org.jboss.weld.bootstrap.WeldBootstrap.validateBeans(WeldBootstrap.java:81)
	at org.ops4j.pax.cdi.weld.impl.WeldCdiContainer.createBeanManager(WeldCdiContainer.java:114)
	at org.ops4j.pax.cdi.weld.impl.WeldCdiContainer.access$000(WeldCdiContainer.java:55)
	at org.ops4j.pax.cdi.weld.impl.WeldCdiContainer$1.call(WeldCdiContainer.java:93)
	at org.ops4j.pax.cdi.weld.impl.WeldCdiContainer$1.call(WeldCdiContainer.java:89)
	at org.ops4j.pax.swissbox.core.ContextClassLoaderUtils.doWithClassLoader(ContextClassLoaderUtils.java:60)
	at org.ops4j.pax.cdi.weld.impl.WeldCdiContainer.doStart(WeldCdiContainer.java:89)
	at org.ops4j.pax.cdi.spi.AbstractCdiContainer.start(AbstractCdiContainer.java:88)
	at org.ops4j.pax.cdi.extender.impl.CdiExtender.createContainer(CdiExtender.java:128)
	at org.ops4j.pax.cdi.extender.impl.CdiExtender.addingBundle(CdiExtender.java:86)
	at org.ops4j.pax.cdi.extender.impl.CdiExtender.addingBundle(CdiExtender.java:44)
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:467)
	at org.osgi.util.tracker.BundleTracker$Tracked.customizerAdding(BundleTracker.java:414)
	at org.osgi.util.tracker.AbstractTracked.trackAdding(AbstractTracked.java:256)
	at org.osgi.util.tracker.AbstractTracked.track(AbstractTracked.java:229)
	at org.osgi.util.tracker.BundleTracker$Tracked.bundleChanged(BundleTracker.java:443)
	at org.apache.felix.framework.util.EventDispatcher.invokeBundleListenerCallback(EventDispatcher.java:868)
	at org.apache.felix.framework.util.EventDispatcher.fireEventImmediately(EventDispatcher.java:789)
	at org.apache.felix.framework.util.EventDispatcher.fireBundleEvent(EventDispatcher.java:514)
	at org.apache.felix.framework.Felix.fireBundleEvent(Felix.java:4403)
	at org.apache.felix.framework.Felix.startBundle(Felix.java:2092)
	at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:1291)
	at org.apache.felix.framework.FrameworkStartLevelImpl.run(FrameworkStartLevelImpl.java:304)
	at java.lang.Thread.run(Thread.java:722)","cmoulliard:1383791646:2013-11-07T10:34:06.753+0000:1383791646:2013-11-07T10:34:06.753+0000:DeltaSpike is not able to retrieve a BeanManager/Container when project is deployed on OSGI platform using Pax CDI

Solution is to inject BeanManager using @Observes annotation and use CDI classes/methods. As Deltaspike BeanProvider is a wrapper class around CDI classes, this code (+ dependency) is not required and can also work for Java SE
davsclaus:1410048279:2014-09-07T08:04:39.776+0000:1410048279:2014-09-07T08:04:39.776+0000:Can you try with Camel 2.14 as we merged some code changes in camel-cdi that may fix / improve this
davsclaus:1436483042:2015-07-10T07:04:02.621+0000:1436483042:2015-07-10T07:04:02.621+0000:We should try to get camel-cdi working in OSGi - it may already do."
0,CAMEL-6936,Bug,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Seth Kelly,0,2,2013-11-05 14:47:46+00:00,2013-11-11 11:30:59+00:00,"Per my forum post:
http://camel.465427.n5.nabble.com/inProgressRepository-Not-clearing-for-items-in-idempotentRepository-td5742613.html


I'm attempting to consume messages from an FTP server using an idempotent repository to ensure that I do not re-download a file unless it has been modified. 


Here is my (quite simple) camel configuration: 



        <beans:bean id=""downloadRepo"" class=""org.apache.camel.processor.idempotent.FileIdempotentRepository"" >
                <beans:property name=""fileStore"" value=""/tmp/.repo.txt""/>
                <beans:property name=""cacheSize"" value=""25000""/>
                <beans:property name=""maxFileStoreSize"" value=""1000000""/>
        </beans:bean>

        <camelContext trace=""true"" xmlns=""http://camel.apache.org/schema/spring"">
                <endpoint id=""myFtpEndpoint"" uri=""ftp://me@localhost?password=****&binary=true&recursive=true&consumer.delay=15000&readLock=changed&passiveMode=true&noop=true&idempotentRepository=#downloadRepo&idempotentKey=$simple{file:name}-$simple{file:modified}"" />
                <endpoint id=""myFileEndpoint"" uri=""file:///tmp/files""/>

        <route>
            <from uri=""ref:myFtpEndpoint"" />
            <to uri=""ref:myFileEndpoint"" />
        </route>




When I start my application for the first time, all files are correctly downloaded from the FTP server and stored in the target directory, as well as recorded in the idempotent repo. 


When I restart my application, all files are correctly detected as being in the idempotent repo already on the first poll of the FTP server, and are not re-downloaded: 


13-11-04 16:52:10,811 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: FtpFile[name=test1.txt, dir=false, file=true] 
2013-11-04 16:52:10,811 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: This consumer is idempotent and the file has been consumed before. Will skip this file: RemoteFile[test1.txt] 


However, on all subsequent polls to the FTP server the idempotent check is short-circuited because the file is ""in progress"": 


2013-11-04 16:53:10,886 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: FtpFile[name=test1.txt, dir=false, file=true]
2013-11-04 16:53:10,886 TRACE [Camel (camel-1) thread #0 - ftp://me@localhost] org.apache.camel.component.file.remote.FtpConsumer: Skipping as file is already in progress: test1.txt 


I am using camel-ftp:2.11.1 (also observing same behavior with 2.12.1)  When I inspect the source code I notice two interesting things. 
First, the GenericFileConsumer check that determines whether a file is already inProgress which is called from isValidFile() always adds the file to the inProgressRepository: 



    protected boolean isInProgress(GenericFile<T> file) { 
        String key = file.getAbsoluteFilePath(); 
        return !endpoint.getInProgressRepository().add(key); 
    } 




Second, if a file is determined to match an entry already present in the idempotent repository it is discarded (GenericFileConsumer.isValidFile() returns false).  This means it is never published to an exchange, and thus never reaches the code which would remove it from the inProgressRepository. 


Since the inProgress check happens before the Idempotent Check, we will always short circuit after we get into the inprogress state, and the file will never actually be checked again.","skelly:1383657833:2013-11-05T21:23:53.256+0000:1383657833:2013-11-05T21:23:53.256+0000:In order to solve this, might I suggest removing the idempotent options entirely, and instead implementing an Idempotent GenericFileFilter which can then be injected into the ftp component. This is the approach I used to get around the bug in my implementation and it is working well for me.
davsclaus:1384135796:2013-11-11T10:09:56.557+0000:1384135796:2013-11-11T10:09:56.557+0000:Thanks for the detailed report. This bug is also in the regular file component."
0,CAMEL-6935,New Feature,Major,None,None,"
None
",Resolved,Fixed,2.13.0,Moulliard Charles,Moulliard Charles,0,1,2013-11-05 14:38:06+00:00,2013-11-05 15:26:24+00:00,"OSGI v4.3 & 5 introduced Require-Capability and Provide-Capability metadata (http://wiki.osgi.org/wiki/Require-Capability). 


Camel project should include such instructions/properties as the Camel-CDI component to run on Karaf with Pax CDI need them.",
0,CAMEL-6934,Improvement,Minor,2.12.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Claus Ibsen,Rob Shield,0,2,2013-11-05 10:29:51+00:00,2014-09-05 08:14:11+00:00,"We've had a case where the component to which the Mina2Producer is communicating changes IP address.  This change isn't picked up by our camel route, which uses Mina2.  Therefore the communication fails. If the address was looked up each time openConnection is called (for protocols other than VM) this would overcome this problem. 
This 'non-caching' of the IP address  is configurable.  Default is not to have it (ie current behavour). Configuration can be updated with a cachedAddress flag to turn this feature on. 
I've made changes to a fork of https://github.com/apache/camel so I'll issue a pull request.","githubbot:1409876039:2014-09-05T08:13:59.726+0000:1409876039:2014-09-05T08:13:59.726+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/63
"
0,CAMEL-6933,New Feature,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-11-05 07:35:37+00:00,2013-11-15 08:20:38+00:00,We need to support to configure the feature of Xerces from out side of camel route such as system property to disable some feature.,"njiang:1383699952:2013-11-06T09:05:52.360+0000:1383699952:2013-11-06T09:05:52.360+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches.
njiang:1384474838:2013-11-15T08:20:38.035+0000:1384474838:2013-11-15T08:20:38.035+0000:Now you can set the Xerces feature by setting System properties like this
System.setProperty(""org.apache.camel.xmlconverter.documentBuilderFactory.feature"" + "":"" 
            + ""http://xml.org/sax/features/external-general-entities"", ""false"");"
0,CAMEL-6932,Bug,Minor,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Dai Kuroda,0,3,2013-11-04 13:22:15+00:00,2013-11-06 14:00:43+00:00,"The ""dns.server"" is not optional.
http://camel.465427.n5.nabble.com/bug-dns-component-td5740962.html


The following code does not work.



Map<String, Object> headers = exchange.getIn().getHeaders(); 
headers.put(""dns.name"", ""www.example.com""); 
headers.put(""dns.type"", ""TXT""); 
ProducerTemplate template = context.createProducerTemplate(); 
Exchange respExchange = template.send(""dns://dig"", exchange);","njiang:1383609491:2013-11-05T07:58:11.884+0000:1383609491:2013-11-05T07:58:11.884+0000:Hi Dai,

Can you submit the patch file to this JIRA?
We can have some legal issue if we just merge the patch from github pull request.

BTW, the patch looks good.

Willem
njiang:1383717643:2013-11-06T14:00:43.042+0000:1383717643:2013-11-06T14:00:43.042+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6931,Improvement,Major,None,Future,"
None
",Resolved,Won't Fix,Future,Unassigned,Claus Ibsen,0,3,2013-11-04 11:31:55+00:00,2016-03-23 09:07:38+00:00,"The current throttler will burst messages until the upper limit is hit, and then delay any further messages until the gate is open again, and then burst the messages, ... and so forth.


We should add a new option to use a ""even spread"" approimation. So the throttler tries to distribute the load evenly accross the time slot. 


See nabble
http://servicemix.396122.n5.nabble.com/Camel-Throttle-linear-regulation-tp5718280.html;cid=1383564775669-117",antoine.dessaigne:1401942352:2014-06-05T12:25:52.830+0000:1401942352:2014-06-05T12:25:52.830+0000:Considering a throttler that accepts 4 exchanges per second. When you want an even spread why not configure it to only accept one exchange every 250ms ?
0,CAMEL-6930,Improvement,Major,None,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Claus Ibsen,0,1,2013-11-03 16:30:00+00:00,2015-08-07 15:53:34+00:00,"The failover LB is useful, but today it operates only by selecting



always from top, and then down
round robin



We need an algorith that sticks to last known good, and just use that until it fails, and then move on to the next (round robin).



last good



See nabble
http://camel.465427.n5.nabble.com/Migrate-Apache-Camel-Endpoints-tp5741899.html",davsclaus:1438934014:2015-08-07T15:53:34.671+0000:1438934014:2015-08-07T15:53:34.671+0000:There is a sticky option as the last good
0,CAMEL-6929,Improvement,Major,2.12.1,None,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,1,2013-11-03 13:11:51+00:00,2013-11-03 13:18:15+00:00,"Values passed to the ExcludeRoutes annotation should implement RoutesBuilder interface, as we want to exclude route builders. Now I can exclude let's say java.lang.String (with @ExcludeRoutes(String.class) what doesn't make any sense.


I propose to narrow possible values as demonstrated below:



Class<? extends RoutesBuilder>[] value() default {};",hekonsek:1383455895:2013-11-03T13:18:15.307+0000:1383455895:2013-11-03T13:18:15.307+0000:Applied in revision 41ce3c6fdbe65dc669bbe9b5b51952285a659e9c.
0,CAMEL-6928,Improvement,Major,"2.10.0, 2.12.1",2.13.0,"
None
",Resolved,Not A Problem,2.13.0,Claus Ibsen,Veniamin Goldin,0,2,2013-11-01 20:19:48+00:00,2013-11-10 10:11:41+00:00,"The onException is not working for the route added to the CamelContext as RouteDefinition, programatically as described in http://camel.apache.org/loading-routes-from-xml-files.html


The exception is being propagated to the error handler.  The same applies for doTry on the route level and onException on the CamelContext level.


Update: doTry does not work if there is an ""onException"" defined in the route.


See test project attached.","vgoldin@gmail.com:1383530955:2013-11-04T10:09:15.717+0000:1383530955:2013-11-04T10:09:15.717+0000:Test project trowing exception from the route, which should be handled in onException clause, however, it is being propagated back to the invoker. 
davsclaus:1384049057:2013-11-10T10:04:17.840+0000:1384049057:2013-11-10T10:04:17.840+0000:Adding routes using that approach is isolated routes and cannot reuse existing onException / interceptors / etc.

Camel 3.0 will be reworked to allow this.
davsclaus:1384049488:2013-11-10T10:11:28.376+0000:1384049488:2013-11-10T10:11:28.376+0000:And btw you are doing this a bit wrong if you want exceptions from the 2nd route to be reacted by the onException in the 1st route.

If so you need to set the 2nd route to not use any error handler, by setting the errorHandlerRef attribute
{code:xml}
    <route errorHandlerRef=""noError"">
        <from uri=""seda:decoupledEndpoint""/>
        <throwException ref=""ex""/>
    </route>
{code}

And then define that no error handler in the camel context
{code:xml}
    <camel:camelContext xmlns=""http://camel.apache.org/schema/spring"">

      <camel:errorHandler id=""noError"" type=""NoErrorHandler""/>

    </camel:camelContext>
{code}

This is the same also if you are not using the <routes>, but just had the routes directly inside the <camelContext>"
0,CAMEL-6927,Bug,Blocker,"2.9.3, 2.9.4, 2.9.5, 2.10.0, 2.10.1, 2.10.2, 2.10.3, 2.10.4, 2.10.5, 2.10.6, 2.10.7, 2.11.2",,"

features

",Closed,Not A Problem,None,James Carman,Sree Panchajanyam D,0,2,2013-11-01 18:47:55+00:00,2013-11-06 17:46:26+00:00,"Same piece of camel.xml and POJO working in  camel 2.9.2.
Issue encountered in camel 2.9.3 and all above versions.


When trying to start apache camel embedded inside activemq (or camel starting as standalone on Jetty container), I encountered the following exception : 
Caused by: org.apache.camel.TypeConversionException: Error during type conversion from type: com.messagetransformers.StringAppenderBean to the required type: org.apache.camel.Processor with value com.messagetransformers.StringAppenderBean@77b407 due argument type mismatch
       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:126)
       at org.apache.camel.impl.converter.BaseTypeConverterRegistry.convertTo(BaseTypeConverterRegistry.java:98)
       at org.apache.camel.util.CamelContextHelper.convertTo(CamelContextHelper.java:72)


Extract from my camel.xml


<bean id=""beanTransformer"" class=""com.messagetransformers.StringAppenderBean""/>
 <camelContext xmlns=""http://camel.apache.org/schema/spring"">
	<route id=""beanTransformRoute"" autoStartup=""true"">
            <description>Transformer Route</description>
            <from uri=""activemqRoute1:MY.QUEUE.1""/>
			<bean ref=""beanTransformer"" method=""process""/>
            <to uri=""activemqRoute1:MY.QUEUE.2""/>
        </route>
</camelContext>


Code snippet from that is causing this issue org.apache.camel.impl.converter.BaseTypeConverterRegistry.java(doConvertTo method) 


 Object rc;
            if (tryConvert) 

{
                rc = tc.tryConvertTo(type, exchange, value);
            }

 else 

{
                rc = tc.convertTo(type, exchange, value);
            }

The else part is not there in Camel 2.9.2 and is introduced from Camel 2.9.3.
This code seems to force a  normal bean to register as a FallbackTypeConverter which is causing the issue.
Removing the else condition from camel 2.10.3 solved the issue. 


My question is, is it expected that normal bean definitions should fail from upwards of camel 2.9.3? Documentation seems to say nothing about it.   Please help","jwcarman:1383309940:2013-11-01T20:45:40.244+0000:1383309940:2013-11-01T20:45:40.244+0000:It looks like the code in question was introduced when fixing this issue.
sreepanchajanyam:1383310686:2013-11-01T20:58:06.200+0000:1383310686:2013-11-01T20:58:06.200+0000:package com.messagetransformers;	

import org.apache.camel.Exchange;
public class StringAppenderBean{
	
	public StringAppenderBean(){
		System.out.println(""Constructing StringAppenderBean object"");
	}
	
	public String appendTimestampToMessage(String message) {
		
		String stringPayload;
		System.out.println(""In StringAppenderAppender.class -"" + "" Received Payload is : "" + message);
		stringPayload = message + "" - Payload is Transformed in StringAppenderAppender.class at "" + System.currentTimeMillis();
		return stringPayload;
	}
	

	public String process(Exchange exchange) {
		
		String message = exchange.getIn().toString(); 
		String stringPayload;
		System.out.println(""In StringAppenderAppender.class -"" + "" Received Payload is : "" + message);
		stringPayload = message + "" - Payload is Transformed in StringAppenderAppender.class at "" + System.currentTimeMillis();
		return stringPayload;
	}

}
sreepanchajanyam:1383362743:2013-11-02T11:25:43.100+0000:1383363525:2013-11-02T11:38:45.024+0000:I have figured out that  fallback converter which I coded up is causing this issue in all versions starting from 2.9.3. This is of course working perfectly good in camel 2.9.2.

When I put this converter along with POJO declared as a bean to do some conversion, camel is trying to convert this  POJO into org.apache.camel.Processor.

Attaching the stack trace and FallBackConverterCode. It is really weird that one piece of code breaks something totally unrelated from user standpoint.
sreepanchajanyam:1383363061:2013-11-02T11:31:01.099+0000:1383363061:2013-11-02T11:31:01.099+0000:FallBackConverter
jwcarman:1383375571:2013-11-02T14:59:31.359+0000:1383375571:2013-11-02T14:59:31.359+0000:Sree, take a look at this example:

https://github.com/jwcarman/camel-sandbox/blob/master/src/test/java/com/carmanconsulting/sandbox/camel/BeanTransformTest.java

Can you get this example to illustrate the issue you're seeing?
sreepanchajanyam:1383381413:2013-11-02T16:36:53.338+0000:1383381413:2013-11-02T16:36:53.338+0000:I nailed the issue! After carefully wrapping my head around the Camel Source I realized that this issue is to do with the method signature of FallBackConverter I have coded :

public static <T> T extractPayload(Class<T> type, Exchange exchange, Event event, TypeConverterRegistry registry)  ----> This worked only in 2.9.2 and failed on all above versions

public static <T> T extractPayload(Class<T> type, Exchange exchange, Object obj, TypeConverterRegistry registry)    ---------> This works for all the Camel versions.

The issue was at the reflection call StaticMethodFallbackTypeConverter.convertTo from version 2.9.3. There is a new abstract class that is introduced from 2.9.3 org.apache.camel.support.TypeConverterSupport. 
Till 2.9.2 StaticMethodFallbackTypeConverter implements TypeConverter interface and from 2.9.3 StaticMethodFallbackTypeConverter extends TypeConverterSupport

Trying to figure out what exactly broke the contract.
jwcarman:1383547493:2013-11-04T14:44:53.511+0000:1383547957:2013-11-04T14:52:37.597+0000:Event is your class, right?

According to the documentation here:

http://camel.apache.org/type-converter.html

The method signature should be:

{code}
public static <T> T convertTo(Class<T> type, Exchange exchange, Object value, TypeConverterRegistry registry);
{code}

So, using Event as the parameter type wasn't supposed to work (would have to dig to find out why it did), necessarily in the first place.  You'll probably need to do an instanceof or isAssignableFrom check on the parameter in order to implement your @FallbackConverter method.  Hope that helps.
sreepanchajanyam:1383730321:2013-11-06T17:32:01.610+0000:1383730393:2013-11-06T17:33:13.676+0000:Yeah Event is my class. And, I did fix this issue with an instanceof.

Thanks James for your attention to this issue. If you do find the root cause why it worked in the first place, please let me know.
jwcarman:1383730529:2013-11-06T17:35:29.834+0000:1383730529:2013-11-06T17:35:29.834+0000:Looks like the user was unknowingly capitalizing on a bug in the oder code.  The user has fixed the issue on their end.
jwcarman:1383731186:2013-11-06T17:46:26.964+0000:1383731186:2013-11-06T17:46:26.964+0000:Thanks for closing, Sree.  I haven't had time to dig in to see why this works, yet.  If I get a chance, I'll put a comment on here."
0,CAMEL-6926,Bug,Minor,2.11.2,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Amit Patel,0,2,2013-11-01 13:35:31+00:00,2013-11-06 13:59:55+00:00,"I found the issue in camel-http4 component. The HttpProducer.createRequestEntity method has been changed to parse the  contentType. The ContentType.parse method returns ""multipart/form-data"" 
instead of ""multipart/form-data;boundary=---------------------------j2radvtrk"". If you  change HttpProducer.createRequestEntity to use ContentType.create method it works fine. 


http://camel.465427.n5.nabble.com/Camel-HTTP4-2-11-2-ContentType-does-not-returns-quot-multipart-form-data-boundary-j2radvtrk-quot-tc5742407.html","njiang:1383717540:2013-11-06T13:59:00.184+0000:1383717595:2013-11-06T13:59:55.157+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches with thanks to Amit.
I also added an unit test to verify the patch."
0,CAMEL-6925,New Feature,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Joe Luo,0,2,2013-11-01 13:04:52+00:00,2014-01-27 08:23:18+00:00,"There is an use case where we might want to inject a jaxrs provider and override provider properties in Java code just like what below Spring bean does:



<jaxrs:providers>
            <bean class=""org.apache.cxf.jaxrs.provider.json.JSONProvider"">
                <property name=""dropRootElement"" value=""true"" />
                <property name=""supportUnwrapped"" value=""true"" />
            </bean>
</jaxrs:providers>




However, it requires to build a JAXRSServerFactory to inject the CXFRSEndpoint. But it is no way to inject JAXRSServerFactory myself. So we might need to provide an option on camel-jaxrs endpoint to allow injection of a JAXRSServerFactory instance.","njiang:1390782198:2014-01-27T08:23:18.264+0000:1390782198:2014-01-27T08:23:18.264+0000:It is more straightforward by setProviders in CXFRsEndpoint to let the user override the default setting of JAXRSServerFactory or JAXRSClientFactory CAMEL-6971.
"
0,CAMEL-6924,Improvement,Minor,None,Future,"
None
",Resolved,Abandoned,Future,Unassigned,Claus Ibsen,3,6,2013-11-01 09:18:57+00:00,2022-09-02 08:48:12+00:00,"We should consider using Apache Curator as the facade client for zookeeper. The zookeeper api is low level and not very friendly. Curator is build with the purpose of making ZK easier. So we should use that, which also makes it easier to improve on this component in the future.","tensae.code@gmail.com:1451374306:2015-12-29T15:31:46.994+0000:1451374306:2015-12-29T15:31:46.994+0000:Is there any development going on for this?
davsclaus:1451439903:2015-12-30T09:45:03.084+0000:1451439903:2015-12-30T09:45:03.084+0000:No, but we love contributions
http://camel.apache.org/contributing
davsclaus:1451462969:2015-12-30T16:09:29.426+0000:1451462969:2015-12-30T16:09:29.426+0000:This would help with the zookeeper route policy where the master selection logic can be easier with the code from curator that makes this easier.

We did this in fabric8 v1.
tensae.code@gmail.com:1451547673:2015-12-31T15:41:13.725+0000:1451547673:2015-12-31T15:41:13.725+0000:We are using camel with curator/zookeeper for master selection. But we are calling curator through bean, that is why I start looking if there is a camel curator/zookeeper component. I would like to contribute, right now I cloned the camel project and trying to compile it.
tensae.code@gmail.com:1452535174:2016-01-12T01:59:34.686+0000:1452535174:2016-01-12T01:59:34.686+0000:Hi Claus,
Will this be rewriting the existing camel zookeeper component using curator or just replacing some part of it. Any suggestion where to start? I like to start from a low hanging fruit.
davsclaus:1452560337:2016-01-12T08:58:57.952+0000:1452560337:2016-01-12T08:58:57.952+0000:The idea is to use curator for the zk communication, which can do this in fewer lines of code and at a higher abstraction level.

Its probably not as easy if you haven't done a bit work with zk before."
0,CAMEL-6923,Task,Minor,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-11-01 09:11:55+00:00,2013-11-01 09:17:08+00:00,"The documentation should be updated, and some options on the config is wrong/not possible to use. We should cleanup this.",
0,CAMEL-6922,Bug,Minor,2.11.2,"2.11.4, 2.12.3, 2.13.0","

converter
dom
xml

",Resolved,Fixed,"2.11.4, 2.12.3, 2.13.0",Claus Ibsen,Arseniy Tashoyan,1,6,2013-11-01 07:57:38+00:00,2014-01-29 05:07:46+00:00,"XmlConvertor cannot convert from org.apache.xerces.dom.ElementNSImpl to org.w3c.dom.Document. Class ElementNSImpl implements both interfaces org.w3c.dom.Node and org.w3c.dom.NodeList. While type converter lookup iterates from ElementNSImpl through it's superclasses and implemented interfaces, it reaches NodeList first. Therefore the

Node toDOMNodeFromSingleNodeList(NodeList)


method is selected for conversion. However this method returns null for any NodeList with more than one node. This leads to null in a message's body.
This issue is not detected on Linux, because on Oracle JDK lookup reaches Node before NodeList and the

Document toDOMDocument(Node)


method is selected for conversion.","davsclaus:1384049999:2013-11-10T10:19:59.074+0000:1384049999:2013-11-10T10:19:59.074+0000:What JDK are you using?

The Oracle JDK on osx, the ElementNSImpl class only implements Node (does NOT implement NodeList)
davsclaus:1384050051:2013-11-10T10:20:51.914+0000:1384050051:2013-11-10T10:20:51.914+0000:And do you have a sample unit test or something to use?
rene avontuur:1387376595:2013-12-18T22:23:15.904+0000:1387376595:2013-12-18T22:23:15.904+0000:I wrote a unit test for this issue, which is attached as NodeListToDoumentTest.java.
It shows that ElementNSImpl implements the NodeList interface, the responsible superclass is NodeImpl.
This unit test passes on my machine, running an Oracle JDK.

The same unit test fails, after making the following change in
class BaseTypeConverterRegistry:

            // try the interfaces (in reverse order)
            for (int i=fromType.getInterfaces().length-1;i>=0;i--) {
                Class<?> type = fromType.getInterfaces()[i];

instead of:
            // try the interfaces
            for (Class<?> type : fromType.getInterfaces()) 

This may explain why a different JDK may have an issue with this conversion.
rene avontuur:1387463550:2013-12-19T22:32:30.130+0000:1387463550:2013-12-19T22:32:30.130+0000:I added a patch file (patchfile.txt), which will most likely solve this issue.
After this patch, if toDOMDocumentFromSingleNodeList(Nodelist) is selected for conversion, then a second try using toDOMDocument(Node) will occur if applicable.
The attached unit test is not really fit for inclusion in the camel-core project, but helpful for debugging purposes.
davsclaus:1390897650:2014-01-28T16:27:30.316+0000:1390897650:2014-01-28T16:27:30.316+0000:Thanks for reporting and the patch.
arseniy:1390943266:2014-01-29T05:07:46.825+0000:1390943266:2014-01-29T05:07:46.825+0000:Did you have a chance to test the fix on HP-UX Java? On Oracle Java the issue does not occur."
0,CAMEL-6921,Bug,Major,"2.10.7, 2.11.2, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-31 18:51:01+00:00,2013-10-31 18:58:38+00:00,"This can lead to a NPE in message received in ClientChannelHandler



2013-10-31 13:03:18,046 | DEBUG | w I/O  worker #1 | NettyProducer                    | ?                                   ? | 234 - org.apache.camel.camel-netty - 2.10.6 | Closing channel as an exception was thrown from Netty
java.lang.NullPointerException
	at org.apache.camel.util.ExchangeHelper.isOutCapable(ExchangeHelper.java:370)
	at org.apache.camel.component.netty.handlers.ClientChannelHandler.messageReceived(ClientChannelHandler.java:145)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:458)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:439)
	at org.jboss.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268)
	at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255)
	at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:84)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.processSelectedKeys(AbstractNioWorker.java:471)
	at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:332)
	at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:35)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)[:1.7.0_45]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)[:1.7.0_45]
	at java.lang.Thread.run(Thread.java:744)[:1.7.0_45]",
0,CAMEL-6920,Bug,Major,2.10.7,2.11.0,"
None
",Resolved,Fixed,2.11.0,Claus Ibsen,Zach Calvert,0,2,2013-10-31 15:53:16+00:00,2013-11-10 10:28:57+00:00,"Making use of the cxfbean camel component triggers a race condition in ServiceMix startup.


Logs received:



Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://failureProof due to: No component found with scheme: cxfbean
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:495)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:461)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)[101:org.apache.camel.camel-core:2.10.7]
        ... 20 more




Will attach example code to trigger error and steps to reproduce in Apache ServiceMix 4.5.3.","zilatica:1383206337:2013-10-31T15:58:57.281+0000:1383207214:2013-10-31T16:13:34.694+0000:Steps to reproduce:

# Install Apache ServiceMix 4.5.3 ""Full assembly"" (http://servicemix.apache.org/downloads.html)
# Unzip to Linux machine
# Modify <smx untar root>/etc/org.apache.karaf.features.cfg
to be 
{code}
featuresBoot=karaf-framework,config,activemq-broker,activemq-spring,saaj,cxf-specs,camel,activemq-camel,camel-cxf,camel-blueprint,war,jetty,camel-jetty
{code}
Not the addition of jetty and camel-jetty
# Build attached source as part of the examples folder under <smx root>/examples/cxf
# Deliver cxf-cxfbean-broken jar into <smx root>/deploy
# Start ServiceMix (<smx root>/bin/start)
# Watch logs at <sxm root>/data/log/servicemix.log

Expected behavior:
Port 8585 will open up and listen for requests.

Actual behavior:
No start, error in logs
{code}
Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: cxfbean://failureProof due to: No component found with scheme: cxfbean
        at org.apache.camel.impl.DefaultCamelContext.getEndpoint(DefaultCamelContext.java:495)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.util.CamelContextHelper.getMandatoryEndpoint(CamelContextHelper.java:50)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.resolveEndpoint(RouteDefinition.java:187)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:108)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.impl.DefaultRouteContext.resolveEndpoint(DefaultRouteContext.java:114)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.resolveEndpoint(SendDefinition.java:61)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.SendDefinition.createProcessor(SendDefinition.java:55)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.makeProcessor(ProcessorDefinition.java:461)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.ProcessorDefinition.addRoutes(ProcessorDefinition.java:179)[101:org.apache.camel.camel-core:2.10.7]
        at org.apache.camel.model.RouteDefinition.addRoutes(RouteDefinition.java:876)[101:org.apache.camel.camel-core:2.10.7]
        ... 20 more
{code}

Issue can be resolved by waiting around 3 minutes after actual startup and refresh (forcing a reload) the jar via
{code}
touch ./deploy/cxf-cxfbean-broken-4.5.3.jar
{code}

8585 will start listening after forcing the reload via touch and you may then run http://localhost:8585/test or http://<server host>:8585/test
You will receive a plain/text response of ""Hello world"" once the issue is resolved.

zilatica:1383206475:2013-10-31T16:01:15.866+0000:1383206475:2013-10-31T16:01:15.866+0000:Build this code running ""mvn clean install"" as part of the Apache ServiceMix 4.5.3 examples under 
<smx unzip root>/examples/cxf

You may build it directly or add a module under the cxf pom.xml file to include this example
zilatica:1383206709:2013-10-31T16:05:09.214+0000:1383206709:2013-10-31T16:05:09.214+0000:Side notes:
I have tried ferociously to work around this issue without having to create a bug report as I'm well aware this is an old component that may not be fully maintained.  However, nothing is working.

I have enforced in the pom.xml:
{code}
 <Require-Bundle>org.apache.camel.camel-cxf</Require-Bundle>
{code}
which guarantees the camel-cxf bundle is up and running.  This does not fix the issue.

In addition, I reviewed the code and figured out that components are actually camel services with properties defining the component name.  To try to guarantee that the component is actually up and running before using it, I have included this in the camel-context.xml which ensure the service is truly up and running:
{code}
    <!-- this forces our delay to start after cxfbean starts -->
    <osgi:reference id=""cxfbeanReference"" cardinality=""1..1"" interface=""org.apache.camel.spi.ComponentResolver"" filter=""(component=cxfbean)"" />
{code}

I even went through the hassle of creating an OSGI Lifecycle listener and made sure I was actually receiving the component service.  While the service is up and running, it would seem camel is concurrently preparing to enable the ""cxfbean"" component while it is bringing up camel routes that require the component and subsequently failing.  This is a race condition that is solved only by waiting a given amount of time and then forcing a bundle update.  

zilatica:1383207133:2013-10-31T16:12:13.132+0000:1383207133:2013-10-31T16:12:13.132+0000:Also, documentation does not indicate this component is deprecated.  See http://camel.apache.org/cxf-bean-component.html
If this component is no longer being maintained/tested, I'd like to know so that I can work with my team to migrate all of our code away from it.  I'm still hoping the component is maintained and simply missing some blocking lock mechanism that is required for component startup.
davsclaus:1384050245:2013-11-10T10:24:05.279+0000:1384050245:2013-11-10T10:24:05.279+0000:This is more of a Karaf/SMX issue, than Camel issue!. 

> step 5 - > Deliver cxf-cxfbean-broken jar into <smx root>/deploy
Also I never recommend people to deploy using the deploy directory - you do not have any control when the container starts the bundle from this dir. 

Install using the shell instead and you can use start level to have your bundles started after the container and framework bundles

davsclaus:1384050471:2013-11-10T10:27:51.800+0000:1384050471:2013-11-10T10:27:51.800+0000:And from Camel 2.11 onwards the Camel components enlist in their MANIFEST.MF entries the components as services this bundle exports

Export-Service: org.apache.aries.blueprint.NamespaceHandler;osgi.service
 .blueprint.namespace=""http://camel.apache.org/schema/blueprint/cxf"",org
 .apache.camel.spi.ComponentResolver;component=cxfrs,org.apache.camel.sp
 i.ComponentResolver;component=cxf,org.apache.camel.spi.ComponentResolve
 r;component=cxfbean

This should also help with this Karaf/SMX to resolve this better.

SMX 4.6 is being upgraded to use Camel 2.12 and thus have this out of the box.
davsclaus:1384050537:2013-11-10T10:28:57.592+0000:1384050537:2013-11-10T10:28:57.592+0000:Use SMX 4.6 or Camel 2.11 onwards. And dont deploy using the deploy dir."
0,CAMEL-6919,Improvement,Minor,2.12.1,2.13.0,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Andrzej Gdula,0,2,2013-10-31 14:46:30+00:00,2013-10-31 20:35:48+00:00,"currently FileIdempotentRepository fails with when the fileStore is located in a directory that does not exist. 
would be nice to have an option to force the component to create the whole directory structure.


Below is the stacktrace



[UnitOfWorkHelper.java:110] Exception occurred during onCompletion. This exception will be ignored.
org.apache.camel.RuntimeCamelException: java.io.IOException: The system cannot find the path specified
...
Caused by: java.io.IOException: The system cannot find the path specified
	at java.io.WinNTFileSystem.createFileExclusively(Native Method) ~[na:1.7.0_40]
	at java.io.File.createNewFile(File.java:1006) ~[na:1.7.0_40]
	at org.apache.camel.util.FileUtil.createNewFile(FileUtil.java:512) ~[camel-core-2.12.1.jar:2.12.1]
	at org.apache.camel.processor.idempotent.FileIdempotentRepository.appendToStore(FileIdempotentRepository.java:235) ~[camel-core-2.12.1.jar:2.12.1]
	... 27 common frames omitted","hekonsek:1383222563:2013-10-31T20:29:23.702+0000:1383222563:2013-10-31T20:29:23.702+0000:Hi Andrzej,

Indeed, {{FileIdempotentRepository}} attempts to create repository file if the latter doesn't exist, but it isn't smart enough to create also parent directory if necessary. We should try to address this behavior.

Thank you for the reporting, I'll create appropriate patch.
hekonsek:1383222903:2013-10-31T20:35:03.180+0000:1383222903:2013-10-31T20:35:03.180+0000:Issue resolved in revision 8d263fd38b419c11a0a8465db4b2514aae35bd53."
0,CAMEL-6918,Bug,Major,2.12.1,"2.12.4, 2.13.0","
None
",Resolved,Fixed,"2.12.4, 2.13.0",Christian Posta,Christian Posta,1,5,2013-10-31 14:20:09+00:00,2014-04-09 14:36:12+00:00,Exceptions thrown by seda producer bypass exception handling and bubble up to original caller.,"ceposta:1383200462:2013-10-31T14:21:02.660+0000:1383200462:2013-10-31T14:21:02.660+0000:The SendProcessor doesn't catch exceptions and set them on the exchange (which is what the Redelivery bits look for). 

I'm working on a patch.
8forty@gmail.com:1383201935:2013-10-31T14:45:35.558+0000:1383201935:2013-10-31T14:45:35.558+0000:FYI in my test cast the exception doesn't ""bubble up to the original caller"" unless tracing is turned on.  See CAMEL-6912.
ceposta:1383202423:2013-10-31T14:53:43.306+0000:1383202474:2013-10-31T14:54:34.603+0000:Yes, that's because the trace processor adds the exception handling as mentioned above. It really should be in the SendProcessor too.
ceposta:1383575258:2013-11-04T22:27:38.733+0000:1383575258:2013-11-04T22:27:38.733+0000:Fix is now on master. 
Please check a nightly snapshot from here in a day or so:

https://repository.apache.org/content/repositories/snapshots/org/apache/camel/apache-camel/2.13-SNAPSHOT/
bvahdat:1383607923:2013-11-05T07:32:03.195+0000:1383607923:2013-11-05T07:32:03.195+0000:I wonder if we could better remove the try/catch block of {{SedaErrorTest}} for this fix as the test is a positive and not a negative one. See also CAMEL-5983.
ceposta:1383635213:2013-11-05T15:06:53.641+0000:1383635213:2013-11-05T15:06:53.641+0000:I agree. The test migrated in different iterations, and I no longer need the try/catch. Change has been committed. Thanks for the code review.
fchaillou:1396950264:2014-04-08T17:44:24.814+0000:1396950264:2014-04-08T17:44:24.814+0000:Hello,
The issue is marked resolved in 2.12.2 but we have the same issue in 2.12.3.
When looking at the commit, it seems the fix was not pushed on the 2.12 branch. Could you confirm ?
Thank you !
Fabien
njiang:1396983324:2014-04-09T02:55:24.323+0000:1396983324:2014-04-09T02:55:24.323+0000:I just merged the patches into camel-2.12.x branch and updated the fix version.
fchaillou:1397025372:2014-04-09T14:36:12.992+0000:1397025372:2014-04-09T14:36:12.992+0000:Thank you Willem, do you know when the 2.12.4 is expected to be released ?
Have a good day.
Fabien"
0,CAMEL-6917,Task,Major,2.12.1,None,"
None
",Resolved,Fixed,2.13.0,Henryk Konsek,Henryk Konsek,0,1,2013-10-31 13:20:10+00:00,2013-11-02 21:29:12+00:00,"I propose to deprecate JavaConfigContextLoader on behalf of the CamelSpringDelegatingTestContextLoader. The latter implements SmartContextLoader and properly handles new features of Spring such as configuration classes and @ActiveProfiles annotation.


I would like to mark JavaConfigContextLoader as deprecated and suggest users to migrate to CamelSpringDelegatingTestContextLoader. I would also like to update the documentation page to indicate more explicitly that using CamelSpringDelegatingTestContextLoader instead of JavaConfigContextLoader is the proper way to deal with the JavaConfig test integration.


[1] http://camel.apache.org/spring-java-config.html","hekonsek:1383197360:2013-10-31T13:29:20.183+0000:1383197360:2013-10-31T13:29:20.183+0000:Added @deprecation information in revision cbd6a21ce344b0e9b40ac80677f5afadcfc1ac06.
hekonsek:1383398867:2013-11-02T21:27:47.628+0000:1383398867:2013-11-02T21:27:47.628+0000:I've updated the documentation (1) to stress that {{CamelSpringDelegatingTestContextLoader}} should be preferred over {{JavaConfigContextLoader}}.

(1) https://cwiki.apache.org/confluence/display/CAMEL/Spring+Java+Config"
0,CAMEL-6916,Improvement,Minor,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Sébastien Brousse,0,2,2013-10-31 12:25:39+00:00,2013-11-10 11:49:17+00:00,"When you add a location based on system variable in a propertyPlaceholder, the ignoreMissingLocation protect you from a missing file but not from a missing system variable (or env as well).


Ex : 



<propertyPlaceholder ignoreMissingLocation=""true"" location=""classpath:camel-property.properties, file:///${camel-property.config}"" />




This configuration failed to load context during unit tests, because camel-property.config system variable is not set. Spring handle this with the ignore-resource-not-found attribute, which is according to me the equivalent of ignoreMissingLocation.","seb_brousse:1383193672:2013-10-31T12:27:52.398+0000:1383193672:2013-10-31T12:27:52.398+0000:Sample use case with unit test
davsclaus:1383200884:2013-10-31T14:28:04.449+0000:1383200884:2013-10-31T14:28:04.449+0000:No the current logic is correct. What would be an improvement is to add a new option to ignore unresolveable properties, like the ignoreUnresolvablePlaceholders which Spring has.
davsclaus:1383200953:2013-10-31T14:29:13.959+0000:1383200953:2013-10-31T14:29:13.959+0000:Then you can do

<propertyPlaceholder ignoreMissingLocation=""true"" ignoreUnresolvablePlaceholders=""true"" location=""classpath:camel-property.properties, file:///${camel-property.config}"" />

Or just

<propertyPlaceholder ignoreUnresolvablePlaceholders=""true"" location=""classpath:camel-property.properties, file:///${camel-property.config}"" />

Which mean that both locations is expected to be there, but resolving property keys which doesnt exist should be ignored.
seb_brousse:1383201647:2013-10-31T14:40:47.938+0000:1383203092:2013-10-31T15:04:52.125+0000:I may have not explained very well.
I have a slighly different use case, I don't want my test to fail even if I don't have the system variable set, which mean the location of file:///${camel-property.config} is missing or unresolvable.

The ignoreUnresovablePlaceholders means, according to me, that unresolved property keys inside file should be ignored, which is not what I am looking for.

This a just a matters of saying if it is a unresolved system key problem or an unresolved location problem.
davsclaus:1384055357:2013-11-10T11:49:17.000+0000:1384055357:2013-11-10T11:49:17.000+0000:We now ignore non existing jvm/env variables if you have ignore missing location enabled."
0,CAMEL-6915,Bug,Minor,"2.11.2, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-31 10:13:29+00:00,2013-10-31 10:14:55+00:00,"A colon is missing so the getUrl can return



http//localhost:23000/test




Which should be



http://localhost:23000/test",
0,CAMEL-6914,Bug,Critical,2.11.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Ladislav Lengyel,0,2,2013-10-30 17:45:15+00:00,2014-01-03 04:40:35+00:00,"Dear Camel team,
we are just verifying our migrated application to Apache Camel. Today we found an issue that is not described on the web, in the faq  nor among the existing issues.
We are creating endpoints via String literals and when we started the IPv6 tests we failed on this issue.
The Camel transforms the orginal address 



http://[2a00:8a00:6000:40::1413]:30300



to this format



http://%5B2a00:8a00:6000:40::1413%5D:30300



which causes this exception



instance1 2013-10-30 13:25:23,914 org.apache.camel.processor.DefaultErrorHandler DEBUG (MarkerIgnoringBase.java:debug:72) [Camel (camel-1) thread #74 - JmsConsumer[XXX-RR-TEST]]
| Failed delivery for (MessageId: ID:mch30-pgd02-b-45068-1383134137465-8:5:1:1:3 on ExchangeId: ID-mch30-pgd02-b-35624-1383134141407-0-176). On delivery attempt: 0 caught: org.apache.commons.httpclient.URIException: IPv6reference



The suggested solution is to remove the square brackets 



[ ]



 from the 



unsafeCharacters



 in the 



org.apache.camel.util.UnsafeUriCharactersEncoder



since the square brackets are valid IPv6 characters.
Thanks!
Best regards,
Laci",njiang:1388695235:2014-01-03T04:40:35.212+0000:1388695235:2014-01-03T04:40:35.212+0000:Applied the patch into master and camel-2.12.x branches.
0,CAMEL-6913,Improvement,Minor,2.12.1,2.17.0,"
None
",Resolved,Fixed,2.17.0,Luca Burgazzoli,Strelok,0,3,2013-10-30 05:12:03+00:00,2016-01-27 18:11:30+00:00,"Currently a single instance of a JibxDataFormat supports unmarshalling a single class only as defined by the ""unmarshallClass"" attribute. If the application needs to be able to unmarshall to many classes an instance of a data format has to be created for every class which makes configuration tedious and verbose.


Should be trivial to make the data format support dynamically choosing which unmarshall class to use via a header (CamelJibxUnmarshallClass for example).


Creating this issue as a placeholder. I will try to submit a patch soon.","davsclaus:1436567017:2015-07-11T06:23:37.688+0000:1436567017:2015-07-11T06:23:37.688+0000:Did you ever get started on a patch?
githubbot:1453865154:2016-01-27T11:25:54.700+0000:1453865154:2016-01-27T11:25:54.700+0000:GitHub user lburgazzoli opened a pull request:

    https://github.com/apache/camel/pull/810

    CAMEL-6913 - Add dynamic unmarshalling capability to JiBX data format

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/lburgazzoli/apache-camel CAMEL-6913

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/810.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #810
    
----
commit d32e31fb34dc168368f469232a785eeed7a8e0f6
Author: lburgazzoli <lburgazzoli@gmail.com>
Date:   2016-01-27T11:24:37Z

    CAMEL-6913 - Add dynamic unmarshalling capability to JiBX data format

----

githubbot:1453880523:2016-01-27T15:42:03.018+0000:1453880523:2016-01-27T15:42:03.018+0000:Github user lburgazzoli closed the pull request at:

    https://github.com/apache/camel/pull/810
"
0,CAMEL-6912,Bug,Major,2.12.1,None,"
None
",Resolved,Duplicate,None,Willem Jiang,Keith Freeman,0,2,2013-10-29 18:39:47+00:00,2013-10-31 14:26:41+00:00,"I'm building my route like this:


//context.setTracing(true);
errorHandler(loggingErrorHandler(""whatever"").level(LoggingLevel.ERROR));
from(""direct:start"").log(""start:
${body}"").to(""seda:seda1?size=2&blockWhenFull=false"").log(""after: ${body}"");


When I run it and send it 3 messages the first 2 log ok (both ""start"" and
""after""), but the 3rd message (which fills the seda queue and throws a
""Queue full"" exception) only shows up in a ""start"" log message, no
exception is shown or delivered to my test code, and the route just shuts
down with no ERROR log.


However if I uncomment ""context.setTracing(true)"", then the 3rd message
triggers my error handler and its ""whatever"" log message, along with a
stack trace, etc.


My understanding is that the ""errorHandler(...)"" call sets the error
handler for the entire context.  So why doesn't it get triggered unless I
turn on tracing?


I've attached the entire junit-4 test.


package xp;


import static org.junit.Assert.*;


import org.apache.camel.CamelContext;
import org.apache.camel.LoggingLevel;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.ExchangeBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;


public class ErrHandlingCamel
{
    private CamelContext context;
    private ProducerTemplate template;


    @Before
    public void setUp() throws Exception
    {
        context = new DefaultCamelContext();
        template = context.createProducerTemplate();


        context.addRoutes(new RouteBuilder()
        {
            public void configure() throws Exception
            {
                // seda test, queue is full after 2 messages,
                {
                    //context.setTracing(true);
                    errorHandler(loggingErrorHandler(""whatever"").level(LoggingLevel.ERROR));


                    from(""direct:start"").log(""start: ${body}"").to(""seda:seda1?size=2&blockWhenFull=false"").log(""after: ${body}"");
                }


            }
        });
        context.start();
    }


    @After
    public void tearDown() throws Exception

    {
        template.stop();
        context.stop();
    }


    @Test
    public void testErrHandling() throws Exception
    {
        try

        {
            for (int i = 0; i < 3; i++)
                template.send(""direct:start"", ExchangeBuilder.anExchange(context).withBody(""msg"" + i).build());
        }

        catch (Exception ex)

        {
            System.err.println(""test failed! caught exception:"" + ex);
            ex.printStackTrace(System.err);
            fail();
        }

    }
}",davsclaus:1383200773:2013-10-31T14:26:13.815+0000:1383200773:2013-10-31T14:26:13.815+0000:Duplicate of CAMEL-6918
0,CAMEL-6911,Improvement,Major,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Hadrian Zbarcea,Franz Forsthofer,0,2,2013-10-29 05:50:58+00:00,2013-11-24 03:15:39+00:00,"PGPDataFormat: I added the possibility to encrypt a message by several public keys (new parameter keyUserids) and I added the possibility to parameterize the compression algorithm (new parameter compressionAlgorithm).


The encryption via several public keys is useful if the message is sent to several receivers or for the key life cycle.


I can update the wiki-page.","hadrian:1385132948:2013-11-22T23:09:08.897+0000:1385132948:2013-11-22T23:09:08.897+0000:Patch applied with thanks to Franz.

master: 12312e9cf8a2d6a5477c9dc12f84d71000f01aaa
camel-2.12.x: commit 5dd309b7a97f15bbf83a5814d7dc66b152e975da

Franz, please feel free to update the wiki. I will not close the jira just yet, until the wiki is updated.
forsthofer:1385169730:2013-11-23T09:22:10.583+0000:1385169730:2013-11-23T09:22:10.583+0000:I will update the wiki and report back  when I am done.
forsthofer:1385172511:2013-11-23T10:08:31.839+0000:1385172511:2013-11-23T10:08:31.839+0000:I updated the wiki. I think we can close this item.
hadrian:1385234139:2013-11-24T03:15:39.219+0000:1385234139:2013-11-24T03:15:39.219+0000:Franz, thanks again for your contribution."
0,CAMEL-6910,Bug,Minor,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-28 14:21:25+00:00,2013-10-28 14:28:14+00:00,"See ticket
https://github.com/hawtio/hawtio/issues/682


And screenshot attached this ticket",
0,CAMEL-6909,Improvement,Major,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Dmitry Buzdin,1,2,2013-10-28 13:34:07+00:00,2014-02-17 07:31:05+00:00,"camel-rabbitmq had hardcoded exchange type set as ""direct"".
There are other exchange types such as ""topic"".
This patch makes it configurable.",davsclaus:1383892892:2013-11-08T14:41:32.150+0000:1383892892:2013-11-08T14:41:32.150+0000:Thanks for the patch.
0,CAMEL-6878,Bug,Minor,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Hadrian Zbarcea,Sergey Beryozkin,0,2,2013-10-20 21:25:37+00:00,2013-11-19 18:46:06+00:00,"See http://camel.465427.n5.nabble.com/CFX-Bean-headers-access-Issue-tt5741312.html#a5741691


Content-Type is HTTP header like all other headers are, CXF typically has it in the headers map and also as a dedicated message property.


At the moment Camel CXF sets Content-Type only as a message property and not adds it to the list of the headers. This is not consistent with the default CXF HTTP processing.","hadrian:1384857966:2013-11-19T18:46:06.770+0000:1384857966:2013-11-19T18:46:06.770+0000:Fixed. Thanks Sergey for patch.

Branch: refs/heads/master
Commit: 4f06ebaecf85a748eb6812afb4d231b80aba5318
Branch: refs/heads/camel-2.12.x
Commit: cffe20373b6de0038c5d9dcf1902b424e6407b29
Branch: refs/heads/camel-2.11.x
Commit: 1fbee5b6d19e8472a0b238bbac6c03393faa6167"
0,CAMEL-6877,Task,Major,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-10-20 20:54:29+00:00,2014-11-06 18:34:27+00:00,"As we do no more provide a header value of the name CamelJpaTemplate the CustomerTransformer#findCustomerByName method ends up with a NPE.


See also http://camel.apache.org/jpa#JPA-MessageHeaders",bvahdat:1382329396:2013-10-21T12:23:16.731+0000:1382329396:2013-10-21T12:23:16.731+0000:Also polished the Wiki documentation of this example.
0,CAMEL-6876,Improvement,Minor,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-10-19 14:57:54+00:00,2013-10-19 15:25:03+00:00,No Desc,bvahdat:1382167503:2013-10-19T15:25:03.194+0000:1382167503:2013-10-19T15:25:03.194+0000:Updated the Wiki as well. Also added a note about the {{CamelJpaTemplate}}  header not being supported anymore.
0,CAMEL-6875,Improvement,Major,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Franz Forsthofer,0,2,2013-10-19 11:48:43+00:00,2013-10-29 02:56:29+00:00,"I made several improvements.



marschal
	
signature private key is looked up by user ID --> secrete keyring can now contain several secret keys
improvment in lookup of encryption public key: take into account that a key can have several user IDs






unmarshal
	
take into account that symmetric key can be encrypte by several public receiver keys --> search for the relevant encryption package for which a public key in the keyring exists (part of the code did already exist but not consistently)
take into account that you do not know in advance which of the private keys  in the keyring you must use to verify the signature --> determine the private key from the key Id given in the signature package
		
a consequence of this is that you do not know which passphrase you must provide for the private key. Therefore a passphrase accessor was introduced.







I also updated the test resources pubring.gpg and secring.gpg;
I attached them also in case they cannot be imported via the patch.


I can do the update of the wiki page.","njiang:1382408024:2013-10-22T10:13:44.519+0000:1382408024:2013-10-22T10:13:44.519+0000:Applied the patch into master and camel-2.12.x branches with thanks to Franz.
njiang:1382408105:2013-10-22T10:15:05.076+0000:1382408105:2013-10-22T10:15:05.076+0000:Hi Franz,

Do you mind update the wiki page with the new added PGPPassphraseAccessor?

Regards,

Willem
forsthofer:1382478702:2013-10-23T05:51:42.424+0000:1382478702:2013-10-23T05:51:42.424+0000:Hi Willem,
I will do the documentation.
Regards Franz
forsthofer:1382491851:2013-10-23T09:30:51.767+0000:1382491851:2013-10-23T09:30:51.767+0000:Wiki-page is updated.
njiang:1382986589:2013-10-29T02:56:29.089+0000:1382986589:2013-10-29T02:56:29.089+0000:Applied the patch into trunk and camel-2.12.x branches."
0,CAMEL-6874,Bug,Major,2.12.0,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Babak Vahdat,0,1,2013-10-18 21:37:59+00:00,2013-10-19 00:15:35+00:00,"See http://camel.465427.n5.nabble.com/Build-failures-td5741273.html


The JPA 2.0 Spec, section 7.2:



An entity manager must not be shared among multiple concurrently executing threads, as the entity manager and persistence context are not required to be threadsafe. Entity managers must only be accessed in a single-threaded manner.


The test org.apache.camel.processor.jpa.JpaProducerConcurrentTest is relevant in this context.",
0,CAMEL-6873,Bug,Major,2.12.0,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Fergus Nelson,0,2,2013-10-18 12:23:59+00:00,2013-10-21 04:39:32+00:00,"When marshalling and unmarshalling using the gson component it does not respect the Excahnge.CHARSET_NAME property on the exchange. When constructing the Streams the charset should be passed. My changes are highlighted below. Git pull request to follow.


    @Override
    public void marshal(final Exchange exchange, final Object graph, final OutputStream stream) throws Exception {
        BufferedWriter writer = IOHelper.buffered(new OutputStreamWriter(stream, IOHelper.getCharsetName(exchange)));
        gson.toJson(graph, writer);
        writer.close();
    }


    @Override
    public Object unmarshal(final Exchange exchange, final InputStream stream) throws Exception {
        BufferedReader reader = IOHelper.buffered(new InputStreamReader(stream, IOHelper.getCharsetName(exchange)));
        Object result = gson.fromJson(reader, this.unmarshalType);
        reader.close();
        return result;
    }","njiang:1382301572:2013-10-21T04:39:32.294+0000:1382301572:2013-10-21T04:39:32.294+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x with thanks to  Fergus."
0,CAMEL-6872,Bug,Minor,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-17 18:00:24+00:00,2013-10-17 18:36:47+00:00,"For example with SOAP 1.2 HTTP messages there may be an optional action parameter on a Content-Type header.
http://www.w3.org/TR/2002/CR-soap12-part2-20021219/#ietf-action


So we should cater for that when we extract the charset from content-type",davsclaus:1382006207:2013-10-17T18:36:47.220+0000:1382006207:2013-10-17T18:36:47.220+0000:Also polished camel-jetty
0,CAMEL-6871,Bug,Minor,2.10.6,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Savva Mikhalevski,0,3,2013-10-17 14:03:05+00:00,2013-10-21 14:02:36+00:00,"Steps



Send exchange with input body equal to ""1"" + LS + ""2"" + LS + ""3"", where LS is a system dependent line separator.
Log exchange input body with Camel log component:

<to uri=""log:logger_name?level=INFO"" />




Expected
Exchange input body is logged with LS charcters preserved:



1
2
3



Observed
Exchange is logged without LS characters:



123



Workaround
Use log EIP instead:



<log loggingLevel=""INFO"" logName=""logger_name"" message=""${body}"" />","davsclaus:1382333527:2013-10-21T13:32:07.273+0000:1382333527:2013-10-21T13:32:07.273+0000:Adding option {{skipBodyLineSeparator}} so people can configure if they want to skip the LS or not. This preserves current behavior as default.

For example if your message body is a large XML message with LS you may not want this to log over 50+ lines etc."
0,CAMEL-6870,Bug,Major,"2.11.2, 2.12.1","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-17 10:12:16+00:00,2013-10-17 10:39:37+00:00,"See
http://camel.465427.n5.nabble.com/Camel-Javascript-Leak-tp5741468.html",davsclaus:1381976143:2013-10-17T10:15:43.055+0000:1381976143:2013-10-17T10:15:43.055+0000:The problem is CAMEL-6559
0,CAMEL-6869,New Feature,Major,2.12.0,2.14.0,"
None
",Resolved,Fixed,2.14.0,Willem Jiang,Marcus Nilsson,1,5,2013-10-17 06:55:55+00:00,2014-06-13 02:55:25+00:00,"Currently, the if you stop the RabbitMQ broker, no reconnects happen.","githubbot:1399269493:2014-05-05T13:58:13.633+0000:1399269493:2014-05-05T13:58:13.633+0000:GitHub user gquintana opened a pull request:

    https://github.com/apache/camel/pull/144

    CAMEL-6869  Support reconnection when broker goes down

    - Add Spring DSL test
    - Try to fix CAMEL-6869: https://issues.apache.org/jira/browse/CAMEL-6869
    
    When the broker is not available, and Camel starts:
       - If Producer starts, the connection will be lazily opened on message sending
       - If Consumer starts, a background task is started, waiting to register the message listener as soon as the broker is available
    
    When Camel is started and the broker is stopped, or becomes unavaible:
       - Tuning the requestedHeartbeat, networkRecoveryInterval, automaticRecoveryEnabled on connectionfactory should be enough
    
    Comment if you think the fix is not satisfactory or if you see a better way to handle broker unavailability.

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/gquintana/camel camel-6869-support-reconnection

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/144.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #144
    
----
commit 0762be7e581fce84e761442b8eb3abfe23be2af1
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2014-05-05T13:43:20Z

    RabbitMQ - Spring DSL intégration test

commit 1191e19fc194b545931530011511a55a8d6d6431
Author: Gerald Quintana <gerald.quintana@zenika.com>
Date:   2014-05-05T13:47:01Z

    Reconnect RabbitMQ Producer/Consumer after broker was unavailable

----

gquintana:1401840174:2014-06-04T08:02:54.971+0000:1401840174:2014-06-04T08:02:54.971+0000:Is there any problem with my PR? I am open to criticism.
njiang:1401925550:2014-06-05T07:45:50.560+0000:1401925550:2014-06-05T07:45:50.560+0000:It sounds good, I will take care of the PR this week.
githubbot:1402002204:2014-06-06T05:03:24.089+0000:1402002204:2014-06-06T05:03:24.089+0000:Github user asfgit closed the pull request at:

    https://github.com/apache/camel/pull/144

njiang:1402599325:2014-06-13T02:55:25.097+0000:1402599325:2014-06-13T02:55:25.097+0000:Applied the patch into camel master branch."
0,CAMEL-6868,New Feature,Major,2.12.0,"2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Marcus Nilsson,1,3,2013-10-17 06:54:05+00:00,2013-12-16 08:16:37+00:00,"Currently, only one MQ host is supported, since factory.newConnection(executor) is called from RabbitMQEndpoint. Multiple brokers could be easily supported by using:


public Connection newConnection(ExecutorService executor, Address[] addrs)",njiang:1387152997:2013-12-16T08:16:37.649+0000:1387152997:2013-12-16T08:16:37.649+0000:Applied the patch into trunk and camel-2.12.x branches.
0,CAMEL-6867,Bug,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Benjamin P. O'Day,Benjamin P. O'Day,0,2,2013-10-16 18:38:14+00:00,2013-10-21 03:47:10+00:00,"The HdfsProducer uses an instance variable (long splitNum) that is incremented to create unique output filenames in a given directory (seg0, seg1, etc).  


If the Producer instance is recreated (producer cache limit exceeded, server restart, etc), the splitNum variable is reset to 0.  This results in files being overwritten when using overwrite=true mode or throwing ""The file already exists"" errors when using overwrite=false mode.


We should switch to using a timestamp or some other unique generator to prevent filename collisions regardless of the Producer instance lifecycle for the same hdfs directory URL...","boday:1381934244:2013-10-16T22:37:24.097+0000:1381934244:2013-10-16T22:37:24.097+0000:any objection to using System.nanoTime() for the file name unique Id instead of the the long splitNum++?
davsclaus:1381961779:2013-10-17T06:16:19.696+0000:1381961779:2013-10-17T06:16:19.696+0000:Maybe use messageId from Message which is what the Camel File/FTP components does if no explicit file name has been given?
boday:1382015757:2013-10-17T21:15:57.773+0000:1382015757:2013-10-17T21:15:57.773+0000:the issue with using the messageId is that the connectOnStartup mode creates the initial file stream on startup (no messageId to use in this case).  how about if we use the UUID generator from the CamelContext like this: getEndpoint().getCamelContext().getUuidGenerator().generateUuid()?

also, any reason to continue to prepend the DEFAULT_SEGMENT_PREFIX with this new approach...the prefix ""seg"" seems pretty arbitrary and should probably be configurable if we need to keep it...

davsclaus:1382059161:2013-10-18T09:19:21.147+0000:1382059161:2013-10-18T09:19:21.147+0000:Yeah good point of using the uuid generator from Camel.

And yeah fell free to change that prefix or make it configurable etc, as you think its the best.
boday:1382108290:2013-10-18T22:58:10.771+0000:1382108290:2013-10-18T22:58:10.771+0000:per discussion, changed the split filename logic to use the UUID generator and removed the ""seg"" prefix from the filenames

thanks to Sergey Kozlovich ([~skozlovich]) for helping find/fix/test this issue

boday:1382109851:2013-10-18T23:24:11.320+0000:1382109851:2013-10-18T23:24:11.320+0000:anyone see an issue with backporting this fix to the 2.10.x, 2.11.x, 2.12.x branches?
davsclaus:1382137808:2013-10-19T07:10:08.927+0000:1382137808:2013-10-19T07:10:08.927+0000:2.10 is no longer supported, so 2.11 onwards is fine.
boday:1382297613:2013-10-21T03:33:33.461+0000:1382297613:2013-10-21T03:33:33.461+0000:merging fixes into 2.11.x, 2.12.x branches"
0,CAMEL-6866,Bug,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Babak Vahdat,Antonin Stefanutti,0,3,2013-10-16 14:16:45+00:00,2013-10-21 16:55:54+00:00,"Caused by: java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$EntryIterator.next(HashMap.java:834)
	at java.util.HashMap$EntryIterator.next(HashMap.java:832)
	at org.apache.camel.component.quickfixj.QuickfixjComponent.onCamelContextStarted(QuickfixjComponent.java:163)
	at org.apache.camel.impl.DefaultCamelContext.doStartOrResumeRoutes(DefaultCamelContext.java:1833)
	at org.apache.camel.impl.DefaultCamelContext.doStartCamel(DefaultCamelContext.java:1699)
	at org.apache.camel.impl.DefaultCamelContext.doStart(DefaultCamelContext.java:1544)
	at org.apache.camel.support.ServiceSupport.start(ServiceSupport.java:61)
	at org.apache.camel.impl.DefaultCamelContext.start(DefaultCamelContext.java:1512)




Since CAMEL-6443.","davsclaus:1381971128:2013-10-17T08:52:08.701+0000:1381971128:2013-10-17T08:52:08.701+0000:Are you using any container such as Apache Karaf or something?
antonin.stefanutti:1382340245:2013-10-21T15:24:05.619+0000:1382340245:2013-10-21T15:24:05.619+0000:I'm using Weld SE {{2.1.0.CR1}}.

It's reproducible with an Arquillian test (I'm using the {{arquillian-weld-se-embedded-1.1}} plugin) that uses two different _session settings_ configuration files for the {{quickfix}} endpoint.
bvahdat:1382344901:2013-10-21T16:41:41.765+0000:1382345754:2013-10-21T16:55:54.523+0000:Yeah this is indeed a side effect of CAMEL-6443 and I could reproduce this by one of this component's test.
bvahdat:1382345604:2013-10-21T16:53:24.056+0000:1382345604:2013-10-21T16:53:24.056+0000:Thanks for reporting."
0,CAMEL-6865,Improvement,Minor,2.12.1,,"
None
",Resolved,Not A Problem,None,Unassigned,Sergey Beryozkin,0,3,2013-10-16 09:42:50+00:00,2014-03-31 08:28:26+00:00,"According to the user reports, CXF RS component can make the incoming HTTP headers visible to the components which follow it, IMHO by default such headers should only be visible to CXF endpoint. 


Check if it is realistic to do it.","njiang:1382319703:2013-10-21T09:41:43.608+0000:1382319703:2013-10-21T09:41:43.608+0000:Hi Sergey, 

Most of HTTP headers are mapped to Camel message which could be use by other camel http components.
I'm not sure why you don't want to expose them to the other camel component.

Regards,

Willem

sergey_beryozkin:1382331373:2013-10-21T12:56:13.074+0000:1382331530:2013-10-21T12:58:50.565+0000:Hi Willem

My understanding is that it is possible to control it with the header filter strategies, right ?
So, see this email where a user is unexpectedly 'surprised' that the headers are visible further down the route:

http://camel.465427.n5.nabble.com/CXF-rest-service-route-copies-all-request-headers-to-response-tp5741613.html

The question is, what is a typical use case where CXF RS (and indeed CXF WS) is used. Do users want to combine it with other Camel HTTP components ? So far I think users either use it or not, i.e, I haven't seen users trying CXFRS & Camel HTTP or Jetty.

Which brings me to the idea of supporting the principle of the least surprise. 
Of course, the users can apply a filter to ensure that the headers are not visible to the next components which follow CXF RS, but if the mainstream use of CXF RS does not involve combining it with other Camel HTTP components then blocking the headers by default means it is less work for the users; those users who do need such headers visible later can configure CXF RS appropriately.

It is not a major issue as far as I'm concerned, but IMHO changing the current default behavior can positively affect the experience of camel-cxf users

Cheers, Sergey 


sergey_beryozkin:1391760898:2014-02-07T16:14:58.815+0000:1391760898:2014-02-07T16:14:58.815+0000:Unlikely we can get a consensus as the default behavior may be acceptable in some cases (chaining of calls, etc) and it is configurable so lets settle on this issue being not a problem
dantheperson:1396198688:2014-03-31T00:58:08.835+0000:1396198688:2014-03-31T00:58:08.835+0000:It's quite a surprise on outgoing requests that all our internal routing headers get passed to 3rd parties as HTTP Headers.

We have all sorts of logic that is internal to the application setting headers that have absolutely nothing to do with HTTP.

While we can filter this out with a custom header filter on .\*, i would suggest the default should be not to expose all the headers over HTTP.  How do other components handle this?  Do JMS messages by default have the camel headers set as jms headers?  I know with cxf for instance it *doesn't* pass message headers as Soap Headers.

dantheperson:1396198893:2014-03-31T01:01:33.839+0000:1396198893:2014-03-31T01:01:33.839+0000:Also if we keep the default of passing all exchange headers on HTTP, this should be *very* clearly documented, as the consequences could be severe.  In our case it was exposing sensitive data over HTTP to 3rd parties.
njiang:1396201352:2014-03-31T01:42:32.655+0000:1396203453:2014-03-31T02:17:33.388+0000:Hi Daniel,

I think the question that you mentioned is not directly related to this JIRA. 

I think copy the HTTP header into camel message header is OK, but copy all the camel message headers to HTTP is not good option. 

CXF drops a line between the protocol headers and logical context headers,  I think we can use it as a reference in camel-cxfrs producer side to avoid copying camel headers which don't relate to the HTTP protocol to HTTP.

If you don't want to camel-cxf producer route the message out, you can set the message header  with the key which is start with Camel. In this way , camel can treat it as a internal logical context header and it cannot be put into HTTP header by default.

dantheperson:1396225706:2014-03-31T08:28:26.202+0000:1396225706:2014-03-31T08:28:26.202+0000:Hi,

Yes prefixing our own headers with ""Camel"" is another option, but i think it is not so good an option, as i would expect Camel prefixed headers to be internal to Camel and driving behaviour of camels various built-in pattern implementation.  It would be confusing to other developers if our own business headers are mixed into the Camel namespace. Also it would require reworking all our current code to add this prefix.  

Thanks,
Dan."
0,CAMEL-6864,Bug,Minor,"2.10.4, 2.11.0",Future,"
None
",Closed,Not A Problem,Future,Benjamin P. O'Day,Benjamin P. O'Day,0,2,2013-10-16 06:15:09+00:00,2013-11-07 14:26:04+00:00,"per the discussion/changes in CAMEL-5971...


currently, if only the BYTES or MESSAGES split criteria is specified, then the output stream is closed with every message and creates a new file for subsequent messages regardless of BYTES/MESSAGES written to the file...


that said, if used along with the IDLE config or by setting the header HdfsConstants.HDFS_CLOSE=false...it does work fine


so, we should either update the wiki to reflect this (if 'as designed') or update the HdfsProducer to not close the stream in the absence of the IDLE config (rely only on the split logic, HdfsConstants.HDFS_CLOSE=true header or route stop to close the stream)","boday:1383733550:2013-11-06T18:25:50.829+0000:1383733550:2013-11-06T18:25:50.829+0000:any comments on this...otherwise, I'll just update the wiki to make this bug/feature clear and close this out
njiang:1383757553:2013-11-07T01:05:53.900+0000:1383757553:2013-11-07T01:05:53.900+0000:Hi Ben,

I think we need to make sure the Stream is closed in most of time. So Updating the wiki should be enough.
boday:1383805552:2013-11-07T14:25:52.906+0000:1383805552:2013-11-07T14:25:52.906+0000:alright, will just update the wiki until I get further input on this..."
0,CAMEL-6863,Bug,Major,2.13.0,,"
None
",Resolved,Won't Fix,None,Scott England-Sullivan,Flo,0,2,2013-10-14 15:52:24+00:00,2014-08-23 07:01:29+00:00,"SJMS Consumer does not support a route with the Aggregation Pattern. 


When an exchange comes into an aggregate, a copy of this exchange is done and the original exchange continues its processing. When the processing of the original exchange is finished, its completion will be executed.
So with the SJMS component, the completion of the last exchange of the batch might occurs before the aggregated message finishes its processing. So even if the aggregated exchange fails, the JMS session is already committed and messages are lost.


Another issue is with the timeout which triggers a commit no matter an exchange is still inflight or not.


In general, the commit of the transaction triggered by the timeout should know if an exchange is still inflight and only commit (or rollback in case the exchange is failed) the transaction when the exchange is completed.


More info here:
http://camel.465427.n5.nabble.com/SJMS-implementation-Batch-Consumer-td5741291.html",davsclaus:1408748489:2014-08-23T07:01:29.144+0000:1408748489:2014-08-23T07:01:29.144+0000:This is working as designed when you use the aggregate eip. 
0,CAMEL-6862,Improvement,Minor,"2.11.0, 2.12.0","2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-14 13:04:24+00:00,2013-10-14 13:32:05+00:00,"DefaultTimeoutMap schedules the task in constructor, we should do that in start instead. And in stop we should cancel the task.


Otherwise it can lead to situations where stopping the timeout cannot happen cleanly



2013-10-14 13:53:25,287 | INFO  | sample.response] | DefaultExecutorServiceManager    | ?                                   ? | 134 - org.apache.camel.camel-core - 2.12.0.redhat-610054 | Waited 2.001 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@b370e4f[JmsReplyManagerTimeoutChecker[queue.sample.response]] to terminate...
2013-10-14 13:53:27,289 | INFO  | sample.response] | DefaultExecutorServiceManager    | ?                                   ? | 134 - org.apache.camel.camel-core - 2.12.0.redhat-610054 | Waited 4.003 seconds for ExecutorService: org.apache.camel.util.concurrent.SizedScheduledExecutorService@b370e4f[JmsReplyManagerTimeoutChecker[queue.sample.response]] to terminate...",
0,CAMEL-6861,Bug,Major,"2.12.0, 2.12.1","2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,2,2013-10-14 07:49:50+00:00,2013-10-15 08:04:14+00:00,"If I use camel-netty-http to build a http proxy, the proxy just send a empty response back if the back end server is using chunk encoding.","njiang:1381718435:2013-10-14T10:40:35.314+0000:1381718435:2013-10-14T10:40:35.314+0000:Applied the patch into master and Camel-2.12.x branches.
davsclaus:1381728589:2013-10-14T13:29:49.211+0000:1381728589:2013-10-14T13:29:49.211+0000:I think it broke the unit tests in camel-itest

Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.535 sec <<< FAILURE! - in org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest
testNettyHttpRouteClientChunked(org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest)  Time elapsed: 1.147 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[Bye Camel in chunks.]> but was:<[]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest.invokeService(NettyHttpClientChunkedResponseTest.java:51)
	at org.apache.camel.itest.nettyhttp.NettyHttpClientChunkedResponseTest.testNettyHttpRouteClientChunked(NettyHttpClientChunkedResponseTest.java:38)
njiang:1381773669:2013-10-15T02:01:09.407+0000:1381773669:2013-10-15T02:01:09.407+0000:Hi Claus,

I ran the test in my box without any issue, and I found the test were passed in the CI[1].
Could you double check it ?
[1]https://builds.apache.org/job/Camel.trunk.fulltest/org.apache.camel$camel-itest/1573/testReport/org.apache.camel.itest.nettyhttp/NettyHttpClientChunkedResponseTest/
davsclaus:1381795454:2013-10-15T08:04:14.007+0000:1381795454:2013-10-15T08:04:14.007+0000:Yeah re-ran a couple of test runs today and it passed."
0,CAMEL-6860,Improvement,Major,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Franz Forsthofer,0,2,2013-10-13 10:35:59+00:00,2013-10-18 09:20:58+00:00,"The PGP Data Formater currently restricts the encryption algorithm to CAST5 and the signature hash algorithm to SHA1 in the marshaller.


The attached imrpvement introduces parameters for the encryption algorithm and the signature hash algorithm so that you can use encryption algorithms like AES, DES, TripleDES, and signature hash algorithms like SHA256, SHA512. 


I can update the docu-wiki after the improvment has been accepted.","forsthofer:1381785118:2013-10-15T05:11:58.553+0000:1381785118:2013-10-15T05:11:58.553+0000:I updated the wiki-page.
davsclaus:1382059258:2013-10-18T09:20:58.882+0000:1382059258:2013-10-18T09:20:58.882+0000:Thanks for the continued contributions"
0,CAMEL-6859,Improvement,Minor,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-13 09:12:30+00:00,2013-10-13 09:14:55+00:00,If people are using ports 61615 they should be able to use that with avail port finder.,
0,CAMEL-6858,Improvement,Minor,2.12.1,2.16.0,"
None
",Resolved,Fixed,2.16.0,Claus Ibsen,Christian Posta,0,1,2013-10-11 13:23:07+00:00,2015-07-11 06:29:50+00:00,"continuation of work done here:


https://issues.apache.org/jira/browse/CAMEL-6670",
0,CAMEL-6857,Bug,Major,"2.12.0, 2.12.1","2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Babak Vahdat,Christian Müller,0,3,2013-10-11 12:30:43+00:00,2013-10-21 15:06:27+00:00,"Today, it looks much better [1]. We are trying to fix the unit tests which are failing from time to time on slower boxes. But this isn't so easy for all of them...


I had a look at org.apache.camel.processor.jpa.JpaProducerConcurrentTest.testConcurrentProducers. A few times I get the following exception which results in missing exchanges in the mock:result endpoint:



2013-10-11 14:01:10,623 [pool-2-thread-2] ERROR DefaultErrorHandler            - Failed delivery for (MessageId: ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-4 on ExchangeId: ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-9). Exhausted after delivery attempt: 1 caught: org.springframework.dao.InvalidDataAccessApiUsageException: This operation cannot be performed while a Transaction is active.; nested exception is <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.

Message History
---------------------------------------------------------------------------------------------------------------------------------------
RouteId              ProcessorId          Processor                                                                        Elapsed (ms)
[route1            ] [route1            ] [direct://start                                                                ] [        68]
[route1            ] [to1               ] [jpa://org.apache.camel.examples.SendEmail                                     ] [        67]

Exchange
---------------------------------------------------------------------------------------------------------------------------------------
Exchange[
    Id                  ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-9
    ExchangePattern     InOnly
    Headers             {breadcrumbId=ID-christians-macbook-pro-fritz-box-54975-1381492869188-0-4, CamelEntityManager=org.apache.openjpa.persistence.EntityManagerImpl@6e453dd5, CamelRedelivered=false, CamelRedeliveryCounter=0}
    BodyType            org.apache.camel.examples.SendEmail
    Body                SendEmail[id: 102 address: null]
]

Stacktrace
---------------------------------------------------------------------------------------------------------------------------------------
org.springframework.dao.InvalidDataAccessApiUsageException: This operation cannot be performed while a Transaction is active.; nested exception is <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.
    at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:293)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerSynchronization.convertException(ExtendedEntityManagerCreator.java:501)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerSynchronization.afterCommit(ExtendedEntityManagerCreator.java:482)
    at org.springframework.transaction.support.TransactionSynchronizationUtils.invokeAfterCommit(TransactionSynchronizationUtils.java:133)
    at org.springframework.transaction.support.TransactionSynchronizationUtils.triggerAfterCommit(TransactionSynchronizationUtils.java:121)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.triggerAfterCommit(AbstractPlatformTransactionManager.java:951)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:797)
    at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:724)
    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:148)
    at org.apache.camel.component.jpa.JpaProducer.process(JpaProducer.java:53)
    at org.apache.camel.util.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:61)
    at org.apache.camel.processor.SendProcessor$2.doInAsyncProducer(SendProcessor.java:132)
    at org.apache.camel.impl.ProducerCache.doInAsyncProducer(ProducerCache.java:307)
    at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:127)
    at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:398)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:118)
    at org.apache.camel.processor.Pipeline.process(Pipeline.java:80)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.component.direct.DirectProducer.process(DirectProducer.java:56)
    at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:191)
    at org.apache.camel.processor.UnitOfWorkProducer.process(UnitOfWorkProducer.java:73)
    at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:378)
    at org.apache.camel.impl.ProducerCache$2.doInProducer(ProducerCache.java:1)
    at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:242)
    at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:346)
    at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:184)
    at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:124)
    at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:137)
    at org.apache.camel.impl.DefaultProducerTemplate.sendBody(DefaultProducerTemplate.java:144)
    at org.apache.camel.processor.jpa.JpaProducerConcurrentTest$1.call(JpaProducerConcurrentTest.java:58)
    at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)
    at java.util.concurrent.FutureTask.run(FutureTask.java:138)
    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895)
    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918)
    at java.lang.Thread.run(Thread.java:680)
Caused by: <openjpa-2.2.2-r422266:1468616 nonfatal user error> org.apache.openjpa.persistence.InvalidStateException: This operation cannot be performed while a Transaction is active.
    at org.apache.openjpa.kernel.BrokerImpl.begin(BrokerImpl.java:1369)
    at org.apache.openjpa.kernel.DelegatingBroker.begin(DelegatingBroker.java:925)
    at org.apache.openjpa.persistence.EntityManagerImpl.begin(EntityManagerImpl.java:565)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.enlistInCurrentTransaction(ExtendedEntityManagerCreator.java:422)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.doJoinTransaction(ExtendedEntityManagerCreator.java:399)
    at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:351)
    at com.sun.proxy.$Proxy18.joinTransaction(Unknown Source)
    at org.apache.camel.component.jpa.JpaProducer$1.doInTransaction(JpaProducer.java:55)
    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:131)
    ... 27 more




which is throwing from the line 55 in org.apache.camel.component.jpa.JpaProducer
entityManager.joinTransaction();


I think this is a concurrency issue we have to investigate (not sure whether the issue is in Camel, Spring, OpenJPA, ...).","davsclaus:1382333847:2013-10-21T13:37:27.852+0000:1382333847:2013-10-21T13:37:27.852+0000:Babak, you got this fixed. Is it also merged to 2.11 and 2.12 branches? If so many you can resolve this ticket?
bvahdat:1382339139:2013-10-21T15:05:39.716+0000:1382339139:2013-10-21T15:05:39.716+0000:Yeah this issue is now resolved through CAMEL-6874 and has *only* been backported to the 2.12 branch where the problem started *after* the fix of CAMEL-5932."
0,CAMEL-6856,Bug,Critical,"2.10.7, 2.11.2",2.11.3,"
None
",Resolved,Fixed,2.11.3,Claus Ibsen,Claus Ibsen,0,1,2013-10-11 10:00:34+00:00,2013-10-11 10:05:43+00:00,We only release the TCP resources on netty. We should do the same when UDP as in use.,"davsclaus:1381457105:2013-10-11T10:05:05.754+0000:1381457105:2013-10-11T10:05:05.754+0000:Backported to 2.10 and 2.9 branches as well.
davsclaus:1381457143:2013-10-11T10:05:43.239+0000:1381457143:2013-10-11T10:05:43.239+0000:If using UDP and you hot deploy a new application when using netty UDP consumer, you may have depending on netty version in use, some threads still alive that can take up CPU time."
0,CAMEL-6855,Bug,Major,2.12.1,None,"

bug

",Closed,Invalid,None,Claus Ibsen,jun ma,0,2,2013-10-11 09:30:48+00:00,2013-10-11 09:35:43+00:00,"package cn.sgi;


import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Predicate;
import org.apache.camel.Processor;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.impl.DefaultCamelContext;


public class Test {


	/**



@param args
@throws Exception
	 */
	public static void main(String[] args) throws Exception {
		CamelContext context=new DefaultCamelContext();
		context.addRoutes(new RouteBuilder() {



			@Override
			public void configure() throws Exception 

{
				from(""file:data/inbox?noop=false"").to(""file:data/outbox/txt"");
				
				
			}

		});


		context.start();
		Thread.currentThread().join();
		context.stop();


	}


}


hi,i 'm a beginnger,i found a bug, see my code, that I put 9 txt files into  inbox ,some files exists in outbox ,not in outbox/txt . help me ,thank you","davsclaus:1381455334:2013-10-11T09:35:34.005+0000:1381455334:2013-10-11T09:35:34.005+0000:You should use the mailing list / user forum for this kind of help / questions about Apache Camel.

See more details here
http://camel.apache.org/mailing-lists.html
http://camel.apache.org/discussion-forums.html"
0,CAMEL-6854,Bug,Major,"2.10.7, 2.11.2, 2.12.1","2.11.3, 2.12.3, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.3, 2.13.0",Willem Jiang,Stephan Siano,0,3,2013-10-11 05:53:15+00:00,2013-12-10 07:54:52+00:00,"The type conversion between DomSource and InputStream will destroy non-ascii characters if the default charset is not UTF-8.


Therefore the following test will work on Linux (and in my Eclipse on Windows) where the default charset is UTF-8, but it will not work if invoked from the command line (maven) when the default charset is not UTF-8.


I will also get similar issues if the type converter are implicitly called by endpoints (the real use case was to read the output of a camel-cxf endpoint as an InputStream).


import java.io.InputStream;


import javax.xml.transform.dom.DOMSource;


import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.junit4.CamelTestSupport;
import org.junit.Test;


public class XMLTypeConverterTest extends CamelTestSupport {


    @Test
    public void testBase64Marshal() throws InterruptedException 

{
        MockEndpoint mock = getMockEndpoint(""mock:result"");
        mock.expectedMessageCount(1);
        template.sendBody(""direct:source"", ""<colors><color>grün</color></colors>"");
        assertMockEndpointsSatisfied();
        String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class);
        assertStringContains(body, ""<colors><color>grün</color></colors>"");
    }


    @Override
    protected RouteBuilder createRouteBuilder() throws Exception {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception 

{
                from(""direct:source"").convertBodyTo(DOMSource.class).convertBodyTo(InputStream.class).convertBodyTo(DOMSource.class)
                        .convertBodyTo(String.class).to(""mock:result"");
            }

        };
    }
}","siano:1381443234:2013-10-11T06:13:54.709+0000:1381443234:2013-10-11T06:13:54.709+0000:I think the issue is in org.apache.camel.converter.jaxp.XmlConverter

...
    @Converter
    public InputStream toInputStream(DOMSource source, Exchange exchange) throws TransformerException, IOException {
        String s = toString(source, exchange);
        return new ByteArrayInputStream(s.getBytes());
    }

Converts the data to a String first, then we get a ByteArrayInputStream. The content of the InputStream has to be UTF-8 unless the preamble (which we don't have) or the BOM (which we also don't have) indicate otherwise.

I am pretty sure that other XML data types (like Document) have the same issue.

I am not entirely sure how to fix this, but it might be possible that the either the default charset needs to be UTF-8 for these XML type conversions or that a XML preamble (with charset) needs to be written in all cases.
siano:1381463193:2013-10-11T11:46:33.714+0000:1381463193:2013-10-11T11:46:33.714+0000:Wouldn't changing lines 834 and 848 of XMLConverter class to
        return new ByteArrayInputStream(s.getBytes(""UTF-8""));

fix this issue? (hardcoded UTF-8 no matter what the default encoding is)

Or would this have side effects?
siano:1381701784:2013-10-14T06:03:04.225+0000:1381701784:2013-10-14T06:03:04.225+0000:I have attached a patch that will fix this specific issue (even though there might be encoding issues elswhere in the code)
ay:1386569038:2013-12-09T14:03:58.804+0000:1386569038:2013-12-09T14:03:58.804+0000:Hi Willem,
I was wondering if the reason for this change not being committed is the test using non-ascii characters that are violating the code check? If that is the case, I am attaching a modified test that does not directly include those non-ascii characters in the code but includes them using their corresponding escaped unicode characters. I even added a few characters to make it more interesting.

regards, aki
ay:1386569158:2013-12-09T14:05:58.501+0000:1386569158:2013-12-09T14:05:58.501+0000:a modified test file with test cases that use escaped unicode characters.

njiang:1386611292:2013-12-10T01:48:12.587+0000:1386611292:2013-12-10T01:48:12.587+0000:This issue was out of my radar for a while, I will review patch and apply it to the master branch today.
njiang:1386633292:2013-12-10T07:54:52.448+0000:1386633292:2013-12-10T07:54:52.448+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6853,Bug,Major,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Thomas Konstantinides,0,2,2013-10-10 17:11:18+00:00,2013-10-11 11:45:41+00:00,"The class org.apache.camel.util.UnsafeUriCharactersEncoder in camel-core has a char[] HEX_DIGITS which includes hex digits that can be used in encoded urls following the % sign. However the char[] only contains the uppercase hexadecimal digits 'A' through 'F' which (following RFC 3986, chapter 2.1) are equivalent to the lowercase digits 'a' through 'f' in percent-encoding used in URIs. 


So the char[] should also contain the lowercase digits 'a' through 'f', because otherwise the class does not work correctly in cases where URLs with already encoded characters having lowercase hex digits are encoded (e.g. URL with %3c). For these URLs the % sign is encoded once again (making it %253c in the example).


The provided patch adds the lowercase hex digits to the HEX_DIGITS char[].


Regards,
Thomas",davsclaus:1381463141:2013-10-11T11:45:41.697+0000:1381463141:2013-10-11T11:45:41.697+0000:Thanks for reporting and the patch.
0,CAMEL-6852,Task,Minor,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Claus Ibsen,Claus Ibsen,0,1,2013-10-10 09:28:24+00:00,2013-10-10 09:33:02+00:00,"The current shipped version of java-apns does not support sending apple push notifications via a http proxy. 


We should upgrade to 0.2.x which does that.",
0,CAMEL-6851,Bug,Minor,2.10.0,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Thomas Cunningham,0,2,2013-10-10 04:53:58+00:00,2013-10-12 10:05:20+00:00,"I think a fix went in for CAMEL-4769 that fixed up group names with underscores, but it seems to only have fixed group names if there is a trigger specified, and not group names with underscores if a cron expression is specified in the URI.        


I'm attaching a small app that reproduces this issue and a patch.","tcunning:1381352116:2013-10-10T04:55:16.810+0000:1381352116:2013-10-10T04:55:16.810+0000:Patch with fix
tcunning:1381352373:2013-10-10T04:59:33.399+0000:1381352373:2013-10-10T04:59:33.399+0000:Reproducible test case
tcunning:1381352403:2013-10-10T05:00:03.344+0000:1381352403:2013-10-10T05:00:03.344+0000:To run the test: 

mvn clean install
mvn exec:java
davsclaus:1381543520:2013-10-12T10:05:20.083+0000:1381543520:2013-10-12T10:05:20.083+0000:Thanks for reporting and the patch."
0,CAMEL-6850,Improvement,Major,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Christian Posta,Christian Posta,0,2,2013-10-09 21:19:29+00:00,2013-10-11 13:25:12+00:00,"Since SQS doesn't allow selectors it could be nice to use camel's filtering and ignore messages that don't fit through that filter. Right now DeleteMessage is sent back onCompletion. Proposed is to set a header of some other facility to let the onCompletion know that even though there wasn't a failure, still don't send back the ack/delete message. I'll work on a patch.","ceposta:1381376586:2013-10-10T11:43:06.899+0000:1381376586:2013-10-10T11:43:06.899+0000:Patch + Tests attached.

Note we should also update wiki to document the added config option:

deleteIfFiltered (default: true) so if a message goes through a camel filter, and does not make it through, should we still tell SQS to delete the message? default is TRUE to keep existing behavior. But can be switched to false. For example, if a filter is set up in the route, and the exchange fails to go through (CamelFilterMatched == false) then we won't delete the message from SQS)
davsclaus:1381379924:2013-10-10T12:38:44.516+0000:1381379924:2013-10-10T12:38:44.516+0000:Thanks for the patch.

One note thought. As you introduce a scheduled thread pool with a single thread
{code}
+    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();
{code}

We should have a way of controlling its lifecycle so the thread pool is terminated when you stop etc.

We have API from CamelContext where we encourage component developers to use, as it allows thread naming and helps with lifecycle of thread pools.

See getExecutorServiceManager on camel context.


ceposta:1381401946:2013-10-10T18:45:46.746+0000:1381401946:2013-10-10T18:45:46.746+0000:Yah good comment. It's for a test mock client, but never-the-less can make use of camel's executors for lifecycle management. updating patch...
ceposta:1381402001:2013-10-10T18:46:41.441+0000:1381402001:2013-10-10T18:46:41.441+0000:patch updated...
davsclaus:1381458689:2013-10-11T10:31:29.937+0000:1381458689:2013-10-11T10:31:29.937+0000:Ah didnt spot it was in an unit test. But still nice to cleanup nicely.

I am applying the patch. Can you do the documentation update?
davsclaus:1381458810:2013-10-11T10:33:30.964+0000:1381458810:2013-10-11T10:33:30.964+0000:Code on master and 2.12 branch. Pending doc update before we can resolve this ticket.
ceposta:1381468762:2013-10-11T13:19:22.330+0000:1381468762:2013-10-11T13:19:22.330+0000:Docs updated: https://cwiki.apache.org/confluence/display/CAMEL/AWS-SQS

Thanks Claus!"
0,CAMEL-6849,Task,Major,None,None,"
None
",Resolved,Fixed,"2.12.2, 2.13.0",Jonathan Anstey,Jonathan Anstey,0,2,2013-10-09 19:15:33+00:00,2013-10-10 13:28:06+00:00,No Desc,"davsclaus:1381368566:2013-10-10T09:29:26.030+0000:1381368566:2013-10-10T09:29:26.030+0000:This possible breaks features. Doing a validate causes

{code}
[WARNING] Failed to validate feature camel-script-jruby
[WARNING] No export found to match org.jruby.javasupport (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.runtime (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.internal.runtime (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.exceptions (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.runtime.load (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.util (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.util.io (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.runtime.builtin (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
[WARNING] No export found to match org.jruby.ast (imported by mvn:http://scriptengines.googlecode.com/svn/m2-repo/!com.google.code.scriptengines/scriptengines-jruby/1.1)
{code}
janstey:1381382869:2013-10-10T13:27:49.979+0000:1381382869:2013-10-10T13:27:49.979+0000:Yeah, there was a problem alright. JRuby is now split into 2 OSGi bundles: jruby-core and jruby-stdlib. The old jruby artifact can still be used for Maven builds since it now just has transitive dependencies to core and stdlib."
0,CAMEL-6848,Improvement,Minor,2.11.1,,"

Simple
beaninvocation
vararg

",Resolved,Won't Fix,None,Claus Ibsen,Roman Vottner,0,3,2013-10-09 18:12:11+00:00,2015-10-20 13:42:17+00:00,"Having a simple bean method that accepts multiple String parameters declared as varargs, I'm having issues sending values from .bean(MyBean.class, ""${ foo('a','b') }"") or .bean(MyBean.class, ""${ foo(new String[] 

{'a', 'b'}

) }"") to my bean directly. The error states that it can't convert from String to String[] - but even with declaring a String[] (like the second bean invocation) it is not able to execute the bean.


The bean class simply looks like this:
public MyBean
{
    public void foo(String ... param)

    {
        // do some stuff ...
    }

}


I'd need to specify multiple parameters and to avoid creating multiple classes or methods which are simply copy&paste classes with small adaptions (inheritance is in place) I'd love to have a more generic approach in place. If resource intensive calculations are done in the back running the method multiple times with changed parameters may not be the best solution imho.","jhm:1385356140:2013-11-25T13:09:00.109+0000:1385356140:2013-11-25T13:09:00.109+0000:I dont know what you want to achieve.
E.g.: from(""direct:in"").bean(myBean, ""method"");

This method gets the complete exchange. According to the method signature is converted to the desired type.
E.g. the in-body into a String.

Could you provide a unit test showing want you want?

RovoMe:1385360601:2013-11-25T14:23:21.697+0000:1385360601:2013-11-25T14:23:21.697+0000:If you have a predefined class changing the internals will be hard to achieve unless you employ a byte-manipulation framework like f.e javassist. An other solution would be to create a new class which has access to the exchange and invokes the preexisting class from within the specified method - but this is just more boilerplate code.

As far as I have understood the concept, the .bean(class) or .bean(class, String) methods are intended to make use of already existing POJOs so modifying the internals of that class to inject @Headers Map<String, Object> headers or Exchange exchange is just a misuse of the bean concept - processors are there therefore IMHO.

If, f.e. I'd like to store received REST path and/or query parameters into a DB, your suggestion would be to use a bean that injects the exchange and extracts the received parameters from the header - but what if not all but only a specified selection of parameters are really of interest? Extend the class for every defined route and adept it to your needs when all there would be necessary IMHO is to have one single bean that could receive a vararg via SIMPLE language (f.e. .bean(ParamExtractor.class, ""${ queryParams(new String[] {'param1', 'param3', 'param5'})}""). Of course you could write the method to only accept one parameter and invoke the bean for every parameter of interest - but this would also create a SELECT and/or UPDATE statement per invocation when actually there might only be one necessary.

If I'm not seeing the forest due to all the trees around please point me to a source where I can see how to specify a single bean invocation that achieves the above task. The example presented might not be the best case, but as I mentioned in the OP, when dealing with resource-intensive operations (like DB f.e) a single bean invocation would be superior to multiple invocations. And I prefer a generic approach to a lot of boilerplate code.
jhm:1385425556:2013-11-26T08:25:56.785+0000:1385425556:2013-11-26T08:25:56.785+0000:I did some experiments and calling a vararg-method is possible. But you have to pass an array instead of several single arguments.
When you are able to do most of the calls with plain Camel calling varargs is more complicated. (I think you are mentioning that).
In the meanwhile implementing a thin CallingBean for these kinds of methods should be the best strategy ...
davsclaus:1439355889:2015-08-12T13:04:49.076+0000:1439355889:2015-08-12T13:04:49.076+0000:Yeah no planned support for var args. It would complicate matters more than the little gain."
0,CAMEL-6847,Bug,Major,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Dhiraj Sureshkumar Bokde,0,3,2013-10-09 17:37:02+00:00,2013-10-25 12:39:28+00:00,The FacebookConsumer class takes the string output of Reading class and tries to retrieve the since field value. It should use java.net.Decoder to correctly decode the URL encoded value.,"dhirajsb:1381311842:2013-10-09T17:44:02.785+0000:1381311842:2013-10-09T17:44:02.785+0000:Attached patch for CAMEL-6847
njiang:1381364351:2013-10-10T08:19:11.029+0000:1381364351:2013-10-10T08:19:11.029+0000:Applied the patch into master and camel-2.12.x branches.
dhirajsb:1381489007:2013-10-11T18:56:47.455+0000:1381489007:2013-10-11T18:56:47.455+0000:The reading since and until fields should be able to use all the arbitrary formats supported by the PHP strtotime function, instead of making the Facebook component standardize on ISO8601 format. 
Also, the since date parse is still broken when its the only reading property specified in the endpoint. 
dhirajsb:1381489454:2013-10-11T19:04:14.786+0000:1381489454:2013-10-11T19:04:14.786+0000:Patch fixes the 'since' parse bug for the situation when it occurs as the last reading field in the endpoint url. 
Also removes the restriction on the since and until date formats to be ISO8601. The since and until values are passed as is to Facebook REST calls, which will convert and validate on server side at call time. 
This could result in a facebook4j.FacebookException being raised for an invalid date format, which will be propagated to the Camel error handler. 
davsclaus:1382333788:2013-10-21T13:36:28.338+0000:1382333788:2013-10-21T13:36:28.338+0000:Willem, did you get the latest patch committed? If so can this ticket be resolved?
njiang:1382675968:2013-10-25T12:39:28.847+0000:1382675968:2013-10-25T12:39:28.847+0000:Applied the second patch into master and camel-2.12.x branches with thanks to Dhiraj."
0,CAMEL-6846,Improvement,Major,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,David Keen,1,2,2013-10-09 14:19:07+00:00,2013-11-11 11:56:04+00:00,"In the documentation for camel-rabbitmq it says for option autoDelete: ""If it is true, the message will be deleted when it is consumed"".


I don't think this is correct. I believe this sets the autoDelete property on the (rabbitmq) exchange which according to the Channel javadoc: ""if the server should delete the exchange when it is no longer in use""","alex.sherwin@gmail.com:1383996911:2013-11-09T19:35:11.546+0000:1383996911:2013-11-09T19:35:11.546+0000:This was also the impression I got from the RabbitMQ documentation, having read it and checking the RabbitMQ management console after some confusing tests (where I was initially going by the camel-rabbitmq documentation).

It seems that autoDelete is an option on RabbitMQ Exchanges and Queues (useful for anonymous/random queues) and is not relevant to the messages themselves"
0,CAMEL-6845,Bug,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Claus Ibsen,0,1,2013-10-09 13:47:42+00:00,2013-10-10 08:28:21+00:00,"This route



                errorHandler(deadLetterChannel(""mock:dead""));

                from(""direct:start"")
                    .recipientList().constant(""direct:foo"")
                    .to(""mock:result"");

                from(""direct:foo"")
                    .errorHandler(noErrorHandler())
                    .to(""mock:foo"")
                    .process(new Processor() {
                        @Override
                        public void process(Exchange exchange) throws Exception {
                            throw new IllegalArgumentException(""Forced"");
                        }
                    });




So in the 2nd route we disabled error handling by using the no error handler. Instead we would like the error handler from the caller route (the 1st) which will fallback and use the context scoped dead letter channel to handle the exception.",
0,CAMEL-6844,Improvement,Major,None,,"
None
",Resolved,Won't Fix,None,Unassigned,Dmytro Puzhay,0,1,2013-10-09 12:20:01+00:00,2016-05-05 17:05:12+00:00,"I try to use my custom PollingConsumerPollStrategy for AMQPComponent endpoint, but my enpoint can't be created. Answer from Claus Ibsen on the forum was ""That option is not supported on amqpcomponent"" (http://camel.465427.n5.nabble.com/PollingConsumerPollStrategy-for-AMQPComponent-endpoint-td5740198.html)


= Exception =


Caused by: org.apache.camel.ResolveEndpointFailedException: Failed to resolve endpoint: amqp:queue:broadcast.MY_QUEUE?pollStrategy=%23MyPollingConsumerPollStrategy due to: There are 1 parameters that couldn't be set on the endpoint. Check the uri if the parameters are spelt correctly and that they are properties of the endpoint. Unknown parameters=[

{pollStrategy=#MyPollingConsumerPollStrategy}

]
        at org.apache.camel.impl.DefaultComponent.validateParameters(DefaultComponent.java:148)
        at org.apache.camel.impl.DefaultComponent.createEndpoint(DefaultComponent.java:105)


= In my RouteBuilder =


JndiRegistry registry = (JndiRegistry) ((PropertyPlaceholderDelegateRegistry) getContext().getRegistry()).getRegistry();


registry.bind(LoaderPollingConsumerPollStrategy.class.getSimpleName(), new MyPollingConsumerPollStrategy());


(AMQPComponent) AMQPComponent.amqpComponent(""My AMQP broker URI"");


Endpoint amqpEndpoint = this.amqpComponent.createEndpoint(""amqp:queue:broadcast.MY_QUEUE?pollStrategy=#MyPollingConsumerPollStrategy""); // ResolveEndpointFailedException here","magner58:1382585426:2013-10-24T11:30:26.952+0000:1382585426:2013-10-24T11:30:26.952+0000:Hey, I don't believe the bug is minor, it effectively prevents from using polling consumer for AMQPComponent, as it is impossible to do error handling without PollingConsumerPollStrategy.
magner58:1395113762:2014-03-18T11:36:02.044+0000:1395113762:2014-03-18T11:36:02.044+0000:Hey, any news regarding the issue?"
0,CAMEL-6843,Bug,Major,None,,"
None
",Resolved,Fixed,None,James Carman,James Carman,0,2,2013-10-09 04:29:07+00:00,2013-10-10 13:42:00+00:00,"The event type is ""evicted"" not ""envicted.""  Our code has a constant called HazelcastConstants.ENVICTED which has the value ""envicted.""  We need to fix this, but it will cause a compatibility break.  We could introduce the correct values and support both, with the incorrect ones being deprecated.  Would that work?","muellerc:1381376838:2013-10-10T11:47:18.759+0000:1381376838:2013-10-10T11:47:18.759+0000:I propose to @deprecate the existing one and update it to use the correct spelling. And of course add a new one with the correct spelling.

{noformat}
@deprecate
HazelcastConstants.ENVICTED = ""evicted""
HazelcastConstants.EVICTED = ""evicted""
{noformat}

And add a remark to the section ""Changes that may affect end users"" in [the release notes|http://camel.apache.org/camel-2130-release.html]
jwcarman:1381383720:2013-10-10T13:42:00.735+0000:1381383720:2013-10-10T13:42:00.735+0000:Now using new constant EVICTED."
0,CAMEL-6842,Improvement,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-10-09 03:46:59+00:00,2013-10-12 10:13:12+00:00,It could be handy for the user who wants to change the configuration or type factory of the XmlRpcDataFormat.,"njiang:1381543992:2013-10-12T10:13:12.851+0000:1381543992:2013-10-12T10:13:12.851+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6841,Improvement,Minor,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-10-09 03:37:26+00:00,2013-10-11 13:10:05+00:00,"We should support this DSL in the RouteBuilder



.setHeader(""FOO"", xpath(""/foo/bar/@value"", String.class))",
0,CAMEL-6840,New Feature,Major,None,2.23.0,"
None
",Resolved,Implemented,2.23.0,Onder Sezgin,Christian Posta,2,4,2013-10-08 23:31:26+00:00,2018-09-14 13:46:42+00:00,"Basic idea is to allow throttler to have a predicate to determine whether or not to apply throttling to that exchange. 


From this Mailing List discussion:
http://camel.465427.n5.nabble.com/Throttling-by-client-ID-td5741032.html","davsclaus:1436567537:2015-07-11T06:32:17.747+0000:1436567537:2015-07-11T06:32:17.747+0000:I think we have another ticket about this, to allow throttler to have a correlation group like aggregator, so we can also group them and have different per group. And then a predicate like this to determine to throttle or not.
githubbot:1528434004:2018-06-08T13:00:04.487+0000:1528434004:2018-06-08T13:00:04.487+0000:onderson opened a new pull request #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366
 
 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528434005:2018-06-08T13:00:05.731+0000:1528434005:2018-06-08T13:00:05.731+0000:GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2366

    CAMEL-6840 make it possible grouped throttling

    

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onderson/camel CAMEL-6840

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2366.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2366
    
----
commit 57e87d738d681495db6e18044bb515c65ec4f127
Author: Sezgin <onder.sezgin@...>
Date:   2018-06-05T13:02:19Z

    CAMEL-6840 make it possible grouped throttling

----

githubbot:1528508641:2018-06-09T09:44:01.805+0000:1528508641:2018-06-09T09:44:01.805+0000:oscerd commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-395955680
 
 
   LGTM @onderson, you can wait for @davsclaus or merge directly :-)

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528514712:2018-06-09T11:25:12.624+0000:1528514712:2018-06-09T11:25:12.624+0000:onderson commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-395961660
 
 
   Thanks @oscerd . I'll wait for @davsclaus too.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528516873:2018-06-09T12:01:13.067+0000:1528516873:2018-06-09T12:01:13.067+0000:davsclaus commented on a change in pull request #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#discussion_r194224756
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
 ##########
 @@ -2284,6 +2284,48 @@ public ThrottleDefinition throttle(Expression maximumRequestCount) {
         addOutput(answer);
         return answer;
     }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @param correlationExpressionKey  is a correlation key that can throttle by the given key instead of overall throttling
 
 Review comment:
   The javadoc param should be in the same order as in the method signature

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528516873:2018-06-09T12:01:13.111+0000:1528516873:2018-06-09T12:01:13.111+0000:davsclaus commented on a change in pull request #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#discussion_r194224813
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
 ##########
 @@ -55,14 +56,28 @@
     private Boolean callerRunsWhenRejected;
     @XmlAttribute
     private Boolean rejectExecution;
-    
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
 
 Review comment:
   I would move this up as the correlation expression before the XmlAttribute's

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528516873:2018-06-09T12:01:13.135+0000:1528516873:2018-06-09T12:01:13.135+0000:davsclaus commented on a change in pull request #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#discussion_r194224758
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
 ##########
 @@ -2284,6 +2284,48 @@ public ThrottleDefinition throttle(Expression maximumRequestCount) {
         addOutput(answer);
         return answer;
     }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @param correlationExpressionKey  is a correlation key that can throttle by the given key instead of overall throttling
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(long correlationExpressionKey, Expression maximumRequestCount) {
+        ThrottleDefinition answer = new ThrottleDefinition(ExpressionBuilder.constantExpression(correlationExpressionKey), maximumRequestCount);
+        addOutput(answer);
+        return answer;
+    }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @param correlationExpressionKey  is a correlation key as an expression that can throttle by the given key instead of overall throttling
 
 Review comment:
   The javadoc param should be in the same order as in the method signature

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528555174:2018-06-09T22:39:34.105+0000:1528555174:2018-06-09T22:39:34.105+0000:onderson commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396003745
 
 
   for spring dsl, i ll raise another PR. thanks for the reviews

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528592648:2018-06-10T09:04:08.240+0000:1528592648:2018-06-10T09:04:08.240+0000:onderson closed pull request #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/docs/eips/throttle-eip.adoc b/camel-core/src/main/docs/eips/throttle-eip.adoc
index 71da9599589..aa0582b297e 100644
--- a/camel-core/src/main/docs/eips/throttle-eip.adoc
+++ b/camel-core/src/main/docs/eips/throttle-eip.adoc
@@ -6,11 +6,12 @@ The Throttler Pattern allows you to ensure that a specific endpoint does not get
 === Options
 
 // eip options: START
-The Throttle EIP supports 5 options which are listed below:
+The Throttle EIP supports 6 options which are listed below:
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
 | Name | Description | Default | Type
+| *correlationExpression* | The expression used to calculate the correlation key to use for throttle grouping. The Exchange which has the same correlation key is throttled together. |  | NamespaceAware Expression
 | *executorServiceRef* | To use a custom thread pool (ScheduledExecutorService) by the throttler. |  | String
 | *timePeriodMillis* | Sets the time period during which the maximum request count is valid for | 1000 | Long
 | *asyncDelayed* | Enables asynchronous delay which means the thread will not block while delaying. | false | Boolean
diff --git a/camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java b/camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java
index 2e60ec370de..1aa34c4c409 100644
--- a/camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/AggregateDefinition.java
@@ -142,7 +142,7 @@ public AggregateDefinition(Expression expression) {
         this(ExpressionNodeHelper.toExpressionDefinition(expression));
     }
 
-    public AggregateDefinition(ExpressionDefinition correlationExpression) {
+    private AggregateDefinition(ExpressionDefinition correlationExpression) {
         setExpression(correlationExpression);
 
         ExpressionSubElementDefinition cor = new ExpressionSubElementDefinition();
diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
index 005270e313b..8a5fbf11338 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
@@ -2284,6 +2284,48 @@ public ThrottleDefinition throttle(Expression maximumRequestCount) {
         addOutput(answer);
         return answer;
     }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param correlationExpressionKey  is a correlation key that can throttle by the given key instead of overall throttling
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(long correlationExpressionKey, Expression maximumRequestCount) {
+        ThrottleDefinition answer = new ThrottleDefinition(ExpressionBuilder.constantExpression(correlationExpressionKey), maximumRequestCount);
+        addOutput(answer);
+        return answer;
+    }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param correlationExpressionKey  is a correlation key as an expression that can throttle by the given key instead of overall throttling
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(Expression correlationExpressionKey, Expression maximumRequestCount) {
+        ThrottleDefinition answer = new ThrottleDefinition(correlationExpressionKey, maximumRequestCount);
+        addOutput(answer);
+        return answer;
+    }
     
     /**
      * <a href=""http://camel.apache.org/loop.html"">Loop EIP:</a>
diff --git a/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
index 613d2b351c5..06ac79ca658 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
@@ -21,6 +21,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 
@@ -43,6 +44,8 @@
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
     @XmlTransient
     private ExecutorService executorService;
     @XmlAttribute
@@ -55,7 +58,7 @@
     private Boolean callerRunsWhenRejected;
     @XmlAttribute
     private Boolean rejectExecution;
-    
+
     public ThrottleDefinition() {
     }
 
@@ -63,6 +66,18 @@ public ThrottleDefinition(Expression maximumRequestsPerPeriod) {
         super(maximumRequestsPerPeriod);
     }
 
+    public ThrottleDefinition(Expression maximumRequestsPerPeriod, Expression correlationExpression) {
+        this(ExpressionNodeHelper.toExpressionDefinition(maximumRequestsPerPeriod), correlationExpression);
+    }
+
+    private ThrottleDefinition(ExpressionDefinition maximumRequestsPerPeriod, Expression correlationExpression) {
+        super(maximumRequestsPerPeriod);
+
+        ExpressionSubElementDefinition cor = new ExpressionSubElementDefinition();
+        cor.setExpressionType(ExpressionNodeHelper.toExpressionDefinition(correlationExpression));
+        setCorrelationExpression(cor);
+    }
+
     @Override
     public String toString() {
         return ""Throttle["" + description() + "" -> "" + getOutputs() + ""]"";
@@ -93,9 +108,14 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {
         if (maxRequestsExpression == null) {
             throw new IllegalArgumentException(""MaxRequestsPerPeriod expression must be provided on "" + this);
         }
+        
+        Expression correlation = null;
+        if (correlationExpression != null) {
+            correlation = correlationExpression.createExpression(routeContext);
+        }
 
         boolean reject = getRejectExecution() != null && getRejectExecution();
-        Throttler answer = new Throttler(routeContext.getCamelContext(), childProcessor, maxRequestsExpression, period, threadPool, shutdownThreadPool, reject);
+        Throttler answer = new Throttler(routeContext.getCamelContext(), childProcessor, maxRequestsExpression, period, threadPool, shutdownThreadPool, reject, correlation);
 
         answer.setAsyncDelayed(async);
         if (getCallerRunsWhenRejected() == null) {
@@ -104,6 +124,7 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {
         } else {
             answer.setCallerRunsWhenRejected(getCallerRunsWhenRejected());
         }
+
         return answer;
     }
 
@@ -256,4 +277,16 @@ public Boolean getRejectExecution() {
     public void setRejectExecution(Boolean rejectExecution) {
         this.rejectExecution = rejectExecution;
     }
+
+    /**
+     * The expression used to calculate the correlation key to use for throttle grouping.
+     * The Exchange which has the same correlation key is throttled together.
+     */
+    public void setCorrelationExpression(ExpressionSubElementDefinition correlationExpression) {
+        this.correlationExpression = correlationExpression;
+    }
+
+    public ExpressionSubElementDefinition getCorrelationExpression() {
+        return correlationExpression;
+    }
 }
diff --git a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
index 543ec9a9cb0..73d53f09b4a 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
@@ -16,8 +16,11 @@
  */
 package org.apache.camel.processor;
 
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.DelayQueue;
 import java.util.concurrent.Delayed;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -31,7 +34,11 @@
 import org.apache.camel.Traceable;
 import org.apache.camel.spi.IdAware;
 import org.apache.camel.util.AsyncProcessorHelper;
+import org.apache.camel.util.CamelContextHelper;
+import org.apache.camel.util.LRUCache;
+import org.apache.camel.util.LRUCacheFactory;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.ServiceHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,12 +68,14 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
     private enum State { SYNC, ASYNC, ASYNC_REJECTED }
 
     private final Logger log = LoggerFactory.getLogger(Throttler.class);
     private final CamelContext camelContext;
-    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
     private final ExecutorService asyncExecutor;
     private final boolean shutdownAsyncExecutor;
 
@@ -77,9 +86,14 @@
     private boolean rejectExecution;
     private boolean asyncDelayed;
     private boolean callerRunsWhenRejected = true;
+    private Expression correlationExpression;
+    // below 2 fields added for (throttling grouping)
+    private Map<Integer, DelayQueue<ThrottlePermit>> delayQueueCache;
+    private ExecutorService delayQueueCacheExecutorService;
+    
 
     public Throttler(final CamelContext camelContext, final Processor processor, final Expression maxRequestsPerPeriodExpression, final long timePeriodMillis,
-                     final ExecutorService asyncExecutor, final boolean shutdownAsyncExecutor, final boolean rejectExecution) {
+                     final ExecutorService asyncExecutor, final boolean shutdownAsyncExecutor, final boolean rejectExecution, Expression correlation) {
         super(processor);
         this.camelContext = camelContext;
         this.rejectExecution = rejectExecution;
@@ -93,6 +107,7 @@ public Throttler(final CamelContext camelContext, final Processor processor, fin
         }
         this.timePeriodMillis = timePeriodMillis;
         this.asyncExecutor = asyncExecutor;
+        this.correlationExpression = correlation;
     }
 
     @Override
@@ -111,7 +126,8 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                 throw new RejectedExecutionException(""Run is not allowed"");
             }
 
-            calculateAndSetMaxRequestsPerPeriod(exchange);
+            calculateAndSetMaxRequestsPerPeriod(exchange, doneSync);
+            DelayQueue<ThrottlePermit> delayQueue = locateDelayQueue(exchange, doneSync);
             ThrottlePermit permit = delayQueue.poll();
 
             if (permit == null) {
@@ -135,7 +151,7 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     if (log.isTraceEnabled()) {
                         elapsed = System.currentTimeMillis() - start;
                     }
-                    enqueuePermit(permit, exchange);
+                    enqueuePermit(permit, exchange, doneSync);
 
                     if (state == State.ASYNC) {
                         if (log.isTraceEnabled()) {
@@ -147,7 +163,7 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     }
                 }
             } else {
-                enqueuePermit(permit, exchange);
+                enqueuePermit(permit, exchange, doneSync);
 
                 if (state == State.ASYNC) {
                     if (log.isTraceEnabled()) {
@@ -192,6 +208,34 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Exchange exchange, final boolean doneSync) throws InterruptedException, ExecutionException {
+        Integer key;
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+        
+        if (correlationExpression != null) {
+            key = correlationExpression.evaluate(exchange, Integer.class);
+        } else {
+            key = NO_CORRELATION_QUEUE_ID;
+        }
+        
+        if (!doneSync) {
+            delayQueueCacheExecutorService.submit(() -> {
+                futureDelayQueue.complete(findDelayQueue(key));
+            });
+        }
+            
+        return (!doneSync) ? futureDelayQueue.get() : findDelayQueue(key);
+    }
+
+    private DelayQueue<ThrottlePermit> findDelayQueue(Integer key) {
+        DelayQueue<ThrottlePermit> currentDelayQueue = delayQueueCache.get(key);
+        if (currentDelayQueue == null) {
+            currentDelayQueue = new DelayQueue<>();
+            delayQueueCache.put(key, currentDelayQueue);
+        }
+        return currentDelayQueue;
+    }
+
     /**
      * Delegate blocking on the DelayQueue to an asyncExecutor. Except if the executor rejects the submission
      * and isCallerRunsWhenRejected() is enabled, then this method will delegate back to process(), but not
@@ -222,10 +266,12 @@ public void run() {
 
     /**
      * Returns a permit to the DelayQueue, first resetting it's delay to be relative to now.
+     * @throws ExecutionException 
+     * @throws InterruptedException 
      */
-    protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange) {
+    protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange, final boolean doneSync) throws InterruptedException, ExecutionException {
         permit.setDelayMs(getTimePeriodMillis());
-        delayQueue.put(permit);
+        locateDelayQueue(exchange, doneSync).put(permit);
         // try and incur the least amount of overhead while releasing permits back to the queue
         if (log.isTraceEnabled()) {
             log.trace(""Permit released, for exchangeId: {}"", exchange.getExchangeId());
@@ -235,7 +281,7 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange, final boolean doneSync) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
@@ -249,6 +295,8 @@ protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) thro
 
             if (newThrottle != null) {
                 if (newThrottle != throttleRate) {
+                    // get the queue from the cache
+                    DelayQueue<ThrottlePermit> delayQueue = locateDelayQueue(exchange, doneSync);
                     // decrease
                     if (throttleRate > newThrottle) {
                         int delta = throttleRate - newThrottle;
@@ -279,19 +327,62 @@ protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) thro
         }
     }
 
+    @SuppressWarnings(""unchecked"")
     @Override
     protected void doStart() throws Exception {
         if (isAsyncDelayed()) {
             ObjectHelper.notNull(asyncExecutor, ""executorService"", this);
         }
+        if (camelContext != null) {
+            int maxSize = CamelContextHelper.getMaximumSimpleCacheSize(camelContext);
+            if (maxSize > 0) {
+                delayQueueCache = LRUCacheFactory.newLRUCache(16, maxSize, false);
+                log.debug(""DelayQueues cache size: {}"", maxSize);
+            } else {
+                delayQueueCache = LRUCacheFactory.newLRUCache(100);
+                log.debug(""Defaulting DelayQueues cache size: {}"", 100);
+            }
+        }
+        if (delayQueueCache != null) {
+            ServiceHelper.startService(delayQueueCache);
+        }
+        if (delayQueueCacheExecutorService == null) {
+            String name = getClass().getSimpleName() + ""-DelayQueueLocatorTask"";
+            delayQueueCacheExecutorService = createDelayQueueCacheExecutorService(name);
+        }
         super.doStart();
     }
+    
+    /**
+     * Strategy to create the thread pool for locating right DelayQueue from the case as a background task
+     *
+     * @param name  the suggested name for the background thread
+     * @return the thread pool
+     */
+    protected synchronized ExecutorService createDelayQueueCacheExecutorService(String name) {
+        // use a cached thread pool so we each on-the-fly task has a dedicated thread to process completions as they come in
+        return camelContext.getExecutorServiceManager().newCachedThreadPool(this, name);
+    }
 
+    @SuppressWarnings(""rawtypes"")
     @Override
     protected void doShutdown() throws Exception {
         if (shutdownAsyncExecutor && asyncExecutor != null) {
             camelContext.getExecutorServiceManager().shutdownNow(asyncExecutor);
         }
+        if (delayQueueCacheExecutorService != null) {
+            camelContext.getExecutorServiceManager().shutdownNow(delayQueueCacheExecutorService);
+        }
+        if (delayQueueCache != null) {
+            ServiceHelper.stopService(delayQueueCache);
+            if (log.isDebugEnabled()) {
+                if (delayQueueCache instanceof LRUCache) {
+                    log.debug(""Clearing deleay queues cache[size={}, hits={}, misses={}, evicted={}]"",
+                            delayQueueCache.size(), ((LRUCache) delayQueueCache).getHits(), ((LRUCache) delayQueueCache).getMisses(), ((LRUCache) delayQueueCache).getEvicted());
+                }
+            }
+            delayQueueCache.clear();
+        }
         super.doShutdown();
     }
 
diff --git a/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java b/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java
new file mode 100644
index 00000000000..01cd378cfe8
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java
@@ -0,0 +1,76 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+
+/**
+ * @version 
+ */
+public class ThrottlingGroupingTest extends ContextTestSupport {
+
+    public void testGroupingWithSingleConstant() throws Exception {
+        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"", ""Bye World"");
+        getMockEndpoint(""mock:dead"").expectedBodiesReceived(""Kaboom"");
+
+        template.sendBodyAndHeader(""seda:a"", ""Kaboom"", ""max"", null);
+        template.sendBodyAndHeader(""seda:a"", ""Hello World"", ""max"", 2);
+        template.sendBodyAndHeader(""seda:a"", ""Bye World"", ""max"", 2);
+
+        assertMockEndpointsSatisfied();
+    }
+    
+    public void testGroupingWithDynamicHeaderExpression() throws Exception {
+        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"", ""Bye World"");
+        getMockEndpoint(""mock:dead"").expectedBodiesReceived(""Kaboom"");
+        getMockEndpoint(""mock:resultdynamic"").expectedBodiesReceived(""Hello Dynamic World"", ""Bye Dynamic World"");
+        
+        Map<String, Object> headers = new HashMap<String, Object>();
+        headers.put(""max"", null);
+
+        template.sendBodyAndHeaders(""seda:a"", ""Kaboom"", headers);
+        
+        headers.put(""max"", ""2"");
+        template.sendBodyAndHeaders(""seda:a"", ""Hello World"", headers);
+        template.sendBodyAndHeaders(""seda:b"", ""Bye World"", headers);
+
+        headers.put(""key"", ""1"");
+        template.sendBodyAndHeaders(""seda:c"", ""Hello Dynamic World"", headers);
+        headers.put(""key"", ""2"");
+        template.sendBodyAndHeaders(""seda:c"", ""Bye Dynamic World"", headers);
+        
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                errorHandler(deadLetterChannel(""mock:dead""));
+
+                from(""seda:a"").throttle(1, header(""max"")).to(""mock:result"");
+                from(""seda:b"").throttle(2, header(""max"")).to(""mock:result"");
+                from(""seda:c"").throttle(header(""key""), header(""max"")).to(""mock:resultdynamic"");
+            }
+        };
+    }
+}


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528592648:2018-06-10T09:04:08.704+0000:1528592648:2018-06-10T09:04:08.704+0000:Github user onderson closed the pull request at:

    https://github.com/apache/camel/pull/2366

davsclaus:1528593331:2018-06-10T09:15:31.877+0000:1528593331:2018-06-10T09:15:31.877+0000:We should add a note on the release notes that we have this functionality now in this EIP

http://camel.apache.org/camel-2220-release.html
githubbot:1528675520:2018-06-11T08:05:20.228+0000:1528675520:2018-06-11T08:05:20.228+0000:onderson commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396157370
 
 
   just a quick question? i could build camel-spring successfully and i can see regarding changes in target/schema/camel-spring.xsd but still i came across such error running unit tests in camel-spring.
   
   any idea?
   
   `Caused by: org.xml.sax.SAXParseException; lineNumber: 34; columnNumber: 32; cvc-complex-type.2.4.a: Invalid content was found starting with element 'correlationExpression'. One of '{""http://camel.apache.org/schema/spring"":description, ""http://camel.apache.org/schema/spring"":expressionDefinition, ""http://camel.apache.org/schema/spring"":constant, ""http://camel.apache.org/schema/spring"":el, ""http://camel.apache.org/schema/spring"":exchangeProperty, ""http://camel.apache.org/schema/spring"":groovy, ""http://camel.apache.org/schema/spring"":header, ""http://camel.apache.org/schema/spring"":jxpath, ""http://camel.apache.org/schema/spring"":javaScript, ""http://camel.apache.org/schema/spring"":jsonpath, ""http://camel.apache.org/schema/spring"":language, ""http://camel.apache.org/schema/spring"":method, ""http://camel.apache.org/schema/spring"":mvel, ""http://camel.apache.org/schema/spring"":ognl, ""http://camel.apache.org/schema/spring"":php, ""http://camel.apache.org/schema/spring"":python, ""http://camel.apache.org/schema/spring"":ref, ""http://camel.apache.org/schema/spring"":ruby, ""http://camel.apache.org/schema/spring"":simple, ""http://camel.apache.org/schema/spring"":spel, ""http://camel.apache.org/schema/spring"":sql, ""http://camel.apache.org/schema/spring"":terser, ""http://camel.apache.org/schema/spring"":tokenize, ""http://camel.apache.org/schema/spring"":xtokenize, ""http://camel.apache.org/schema/spring"":xpath, ""http://camel.apache.org/schema/spring"":xquery}' is expected.`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528679151:2018-06-11T09:05:51.383+0000:1528679151:2018-06-11T09:05:51.383+0000:davsclaus commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396174234
 
 
   Yeah the XML DSL can be a bit tricky and hence why its good to have unit tests there too. I am in the middle of something and have not updated to latest source. But will try to take a look later - but I am traveling as well this week

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528683127:2018-06-11T10:12:07.744+0000:1528683127:2018-06-11T10:12:07.744+0000:onderson commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396193135
 
 
   added similar test case to existing ones. here if you might want to have a look at your convenience.
   
   https://github.com/onderson/camel/tree/CAMEL-6840_spring
   
   as @oscerd suggested, i am trying full build too.. I'll let you know if you don't before me : -)
   
   thank you both.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528701962:2018-06-11T15:26:02.370+0000:1528701962:2018-06-11T15:26:02.370+0000:onderson commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396283522
 
 
   btw, let me tell you here too, that full build did not work for me.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528747077:2018-06-12T03:57:57.718+0000:1528747077:2018-06-12T03:57:57.718+0000:WillemJiang commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396458291
 
 
   I just have a quick look at the code, the schema is updated, but there are something wrong with the xml file.
   As the ThrottleDefinition is extends from ExpressionNode, but the first element of ExpressionNode is a reference of expression element, not the correlationExpression that you want.
   So you keep getting the complain message.
   
   Once I put the correlationExpression as the last element of throttle, I don't get the error message anymore. (but the test is freeze ). 
   
   ```
   <route errorHandlerRef=""dlc"">
     <from uri=""seda:b""/>
     <throttle timePeriodMillis=""1000"">
       <header>max</header>
       <to uri=""log:result""/>
       <to uri=""mock:result""/>
       <correlationExpression>
         <constant>2</constant>
       </correlationExpression>
     </throttle>
   </route>
   ```
   
   We need to address the element order first to fix this issue.
   
   BTW, I also find an issue in the ThrottleDefinition, to support to old XML which has no correlationExpression, we need to specify the element as an optional one.
   Just like this :
   
   ```
   @XmlElements({
       @XmlElement(name = ""correlationExpression"", type = ExpressionSubElementDefinition.class)}
   )
   private ExpressionSubElementDefinition correlationExpression;
   
   ```

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528871879:2018-06-13T14:37:59.529+0000:1528871879:2018-06-13T14:37:59.529+0000:onderson commented on issue #2366: CAMEL-6840 make it possible grouped throttling
URL: https://github.com/apache/camel/pull/2366#issuecomment-396961128
 
 
   Just reverted the changes in this PR. Implementation is not correct. It is a bit harder than i initially thought of. I will take a look at this again.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528947254:2018-06-14T11:34:14.133+0000:1528947254:2018-06-14T11:34:14.133+0000:onderson opened a new pull request #2375: CAMEL-6840- New PR for grouped throttling - Java DSL, XML DSL is WIP.
URL: https://github.com/apache/camel/pull/2375
 
 
   For now unit test in camel-spring is ignored.
   I think i need help with it.
   fyi. @davsclaus , @WillemJiang , @oscerd and @aldettinger 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528947254:2018-06-14T11:34:14.620+0000:1528947254:2018-06-14T11:34:14.620+0000:GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2375

    CAMEL-6840- New PR for grouped throttling - Java DSL, XML DSL is WIP.

    For now unit test in camel-spring is ignored.
    I think i need help with it.
    fyi. @davsclaus , @WillemJiang , @oscerd and @aldettinger 

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onderson/camel CAMEL-6840_javadsl

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2375.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2375
    
----
commit e76026194766f344796e67b3db1372b6822aed30
Author: onders86 <ondersezgin+github@...>
Date:   2018-06-09T22:31:45Z

    CAMEL-6840- New PR for grouped throttling - Java DSL, XML DSL is WIP

commit 9af7aa167972b54e6bae3cee36d15e640b048749
Author: Sezgin <onder.sezgin@...>
Date:   2018-06-14T11:30:13Z

    CAMEL-6840 ignore xml dsl test WIP

----

githubbot:1528947375:2018-06-14T11:36:15.141+0000:1528947375:2018-06-14T11:36:15.141+0000:onderson commented on issue #2375: CAMEL-6840- New PR for grouped throttling - Java DSL, XML DSL is WIP.
URL: https://github.com/apache/camel/pull/2375#issuecomment-397263895
 
 
   Btw, not sure github shows conflicts as there should be no conflict because i reverted earlier changes.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528950087:2018-06-14T12:21:27.032+0000:1528950087:2018-06-14T12:21:27.032+0000:onderson commented on issue #2375: CAMEL-6840- New PR for grouped throttling - Java DSL, XML DSL is WIP.
URL: https://github.com/apache/camel/pull/2375#issuecomment-397274427
 
 
   this has become mass. i ll rebase manually and open a new one.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528950087:2018-06-14T12:21:27.855+0000:1528950087:2018-06-14T12:21:27.855+0000:onderson closed pull request #2375: CAMEL-6840- New PR for grouped throttling - Java DSL, XML DSL is WIP.
URL: https://github.com/apache/camel/pull/2375
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java b/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java
index 673c13e88fe..6e993b0633f 100644
--- a/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java
+++ b/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java
@@ -20,10 +20,10 @@
 
 public interface ManagedThrottlerMBean extends ManagedProcessorMBean {
 
-    @ManagedAttribute(description = ""Maximum requires per period"")
+    @ManagedAttribute(description = ""Maximum requests per period"")
     long getMaximumRequestsPerPeriod();
 
-    @ManagedAttribute(description = ""Maximum requires per period"")
+    @ManagedAttribute(description = ""Maximum requests per period"")
     void setMaximumRequestsPerPeriod(long maximumRequestsPerPeriod);
 
     @ManagedAttribute(description = ""Time period in millis"")
diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
index 005270e313b..0fdd5b6325a 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
@@ -2284,6 +2284,48 @@ public ThrottleDefinition throttle(Expression maximumRequestCount) {
         addOutput(answer);
         return answer;
     }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param correlationExpressionKey  is a correlation key that can throttle by the given key instead of overall throttling
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(long correlationExpressionKey, Expression maximumRequestCount) {
+        ThrottleDefinition answer = new ThrottleDefinition(ExpressionBuilder.constantExpression(correlationExpressionKey), maximumRequestCount);
+        addOutput(answer);
+        return answer;
+    }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param correlationExpressionKey  is a correlation key as an expression that can throttle by the given key instead of overall throttling
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(Expression correlationExpressionKey, Expression maximumRequestCount) {
+        ThrottleDefinition answer = new ThrottleDefinition(correlationExpressionKey, maximumRequestCount);
+        addOutput(answer);
+        return answer;
+    }
     
     /**
      * <a href=""http://camel.apache.org/loop.html"">Loop EIP:</a>
@@ -4247,4 +4289,4 @@ public void setOtherAttributes(Map<QName, Object> otherAttributes) {
     public String getLabel() {
         return """";
     }
-}
+}
\ No newline at end of file
diff --git a/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
index 613d2b351c5..3986de90f6b 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
@@ -21,6 +21,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
 
@@ -43,6 +44,8 @@
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
     @XmlTransient
     private ExecutorService executorService;
     @XmlAttribute
@@ -55,7 +58,7 @@
     private Boolean callerRunsWhenRejected;
     @XmlAttribute
     private Boolean rejectExecution;
-    
+
     public ThrottleDefinition() {
     }
 
@@ -63,6 +66,18 @@ public ThrottleDefinition(Expression maximumRequestsPerPeriod) {
         super(maximumRequestsPerPeriod);
     }
 
+    public ThrottleDefinition(Expression correlationExpression, Expression maximumRequestsPerPeriod) {
+        this(ExpressionNodeHelper.toExpressionDefinition(maximumRequestsPerPeriod), correlationExpression);
+    }
+
+    private ThrottleDefinition(ExpressionDefinition maximumRequestsPerPeriod, Expression correlationExpression) {
+        super(maximumRequestsPerPeriod);
+
+        ExpressionSubElementDefinition cor = new ExpressionSubElementDefinition();
+        cor.setExpressionType(ExpressionNodeHelper.toExpressionDefinition(correlationExpression));
+        setCorrelationExpression(cor);
+    }
+
     @Override
     public String toString() {
         return ""Throttle["" + description() + "" -> "" + getOutputs() + ""]"";
@@ -93,9 +108,14 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {
         if (maxRequestsExpression == null) {
             throw new IllegalArgumentException(""MaxRequestsPerPeriod expression must be provided on "" + this);
         }
+        
+        Expression correlation = null;
+        if (correlationExpression != null) {
+            correlation = correlationExpression.createExpression(routeContext);
+        }
 
         boolean reject = getRejectExecution() != null && getRejectExecution();
-        Throttler answer = new Throttler(routeContext.getCamelContext(), childProcessor, maxRequestsExpression, period, threadPool, shutdownThreadPool, reject);
+        Throttler answer = new Throttler(routeContext.getCamelContext(), childProcessor, maxRequestsExpression, period, threadPool, shutdownThreadPool, reject, correlation);
 
         answer.setAsyncDelayed(async);
         if (getCallerRunsWhenRejected() == null) {
@@ -104,6 +124,7 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {
         } else {
             answer.setCallerRunsWhenRejected(getCallerRunsWhenRejected());
         }
+
         return answer;
     }
 
@@ -256,4 +277,16 @@ public Boolean getRejectExecution() {
     public void setRejectExecution(Boolean rejectExecution) {
         this.rejectExecution = rejectExecution;
     }
-}
+
+    /**
+     * The expression used to calculate the correlation key to use for throttle grouping.
+     * The Exchange which has the same correlation key is throttled together.
+     */
+    public void setCorrelationExpression(ExpressionSubElementDefinition correlationExpression) {
+        this.correlationExpression = correlationExpression;
+    }
+
+    public ExpressionSubElementDefinition getCorrelationExpression() {
+        return correlationExpression;
+    }
+}
\ No newline at end of file
diff --git a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
index 543ec9a9cb0..473c3d09697 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
@@ -16,8 +16,13 @@
  */
 package org.apache.camel.processor;
 
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.DelayQueue;
 import java.util.concurrent.Delayed;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -31,7 +36,11 @@
 import org.apache.camel.Traceable;
 import org.apache.camel.spi.IdAware;
 import org.apache.camel.util.AsyncProcessorHelper;
+import org.apache.camel.util.CamelContextHelper;
+import org.apache.camel.util.LRUCache;
+import org.apache.camel.util.LRUCacheFactory;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.ServiceHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
     private enum State { SYNC, ASYNC, ASYNC_REJECTED }
 
     private final Logger log = LoggerFactory.getLogger(Throttler.class);
     private final CamelContext camelContext;
-    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
     private final ExecutorService asyncExecutor;
     private final boolean shutdownAsyncExecutor;
 
     private volatile long timePeriodMillis;
-    private volatile int throttleRate;
     private String id;
     private Expression maxRequestsPerPeriodExpression;
     private boolean rejectExecution;
     private boolean asyncDelayed;
     private boolean callerRunsWhenRejected = true;
+    private Expression correlationExpression;
+    // below 2 fields added for (throttling grouping)
+    private Map<Integer, DelayQueue<ThrottlePermit>> delayQueueCache;
+    private Map<Integer, Integer> throttleRatesMap = new HashMap<>();
+    private ExecutorService delayQueueCacheExecutorService;
+    
 
     public Throttler(final CamelContext camelContext, final Processor processor, final Expression maxRequestsPerPeriodExpression, final long timePeriodMillis,
-                     final ExecutorService asyncExecutor, final boolean shutdownAsyncExecutor, final boolean rejectExecution) {
+                     final ExecutorService asyncExecutor, final boolean shutdownAsyncExecutor, final boolean rejectExecution, Expression correlation) {
         super(processor);
         this.camelContext = camelContext;
         this.rejectExecution = rejectExecution;
@@ -93,6 +109,7 @@ public Throttler(final CamelContext camelContext, final Processor processor, fin
         }
         this.timePeriodMillis = timePeriodMillis;
         this.asyncExecutor = asyncExecutor;
+        this.correlationExpression = correlation;
     }
 
     @Override
@@ -111,13 +128,21 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                 throw new RejectedExecutionException(""Run is not allowed"");
             }
 
-            calculateAndSetMaxRequestsPerPeriod(exchange);
+            Integer key;
+            if (correlationExpression != null) {
+                key = correlationExpression.evaluate(exchange, Integer.class);
+            } else {
+                key = NO_CORRELATION_QUEUE_ID;
+            }
+            
+            DelayQueue<ThrottlePermit> delayQueue = locateDelayQueue(key);
+            calculateAndSetMaxRequestsPerPeriod(delayQueue, exchange, key);
             ThrottlePermit permit = delayQueue.poll();
 
             if (permit == null) {
                 if (isRejectExecution()) {
                     throw new ThrottlerRejectedExecutionException(""Exceeded the max throttle rate of ""
-                            + throttleRate + "" within "" + timePeriodMillis + ""ms"");
+                            + throttleRatesMap.get(key) + "" within "" + timePeriodMillis + ""ms"");
                 } else {
                     // delegate to async pool
                     if (isAsyncDelayed() && !exchange.isTransacted() && state == State.SYNC) {
@@ -135,7 +160,7 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     if (log.isTraceEnabled()) {
                         elapsed = System.currentTimeMillis() - start;
                     }
-                    enqueuePermit(permit, exchange);
+                    enqueuePermit(permit, exchange, delayQueue);
 
                     if (state == State.ASYNC) {
                         if (log.isTraceEnabled()) {
@@ -147,7 +172,7 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     }
                 }
             } else {
-                enqueuePermit(permit, exchange);
+                enqueuePermit(permit, exchange, delayQueue);
 
                 if (state == State.ASYNC) {
                     if (log.isTraceEnabled()) {
@@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+
+        delayQueueCacheExecutorService.submit(() -> {
+            futureDelayQueue.complete(findDelayQueue(key));
+        });
+        DelayQueue<ThrottlePermit> currentQueue = futureDelayQueue.get();   
+        return currentQueue;
+    }
+
+    private DelayQueue<ThrottlePermit> findDelayQueue(Integer key) {
+        DelayQueue<ThrottlePermit> currentDelayQueue = delayQueueCache.get(key);
+        if (currentDelayQueue == null) {
+            currentDelayQueue = new DelayQueue<>();
+            throttleRatesMap.put(key, 0);
+            delayQueueCache.put(key, currentDelayQueue);
+        }
+        return currentDelayQueue;
+    }
+
     /**
      * Delegate blocking on the DelayQueue to an asyncExecutor. Except if the executor rejects the submission
      * and isCallerRunsWhenRejected() is enabled, then this method will delegate back to process(), but not
@@ -222,8 +267,10 @@ public void run() {
 
     /**
      * Returns a permit to the DelayQueue, first resetting it's delay to be relative to now.
+     * @throws ExecutionException 
+     * @throws InterruptedException 
      */
-    protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange) {
+    protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange, DelayQueue<ThrottlePermit> delayQueue) throws InterruptedException, ExecutionException {
         permit.setDelayMs(getTimePeriodMillis());
         delayQueue.put(permit);
         // try and incur the least amount of overhead while releasing permits back to the queue
@@ -235,7 +282,7 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
@@ -243,12 +290,14 @@ protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) thro
         }
 
         synchronized (this) {
+            Integer throttleRate = throttleRatesMap.get(key);
             if (newThrottle == null && throttleRate == 0) {
                 throw new RuntimeExchangeException(""The maxRequestsPerPeriodExpression was evaluated as null: "" + maxRequestsPerPeriodExpression, exchange);
             }
 
             if (newThrottle != null) {
                 if (newThrottle != throttleRate) {
+                    // get the queue from the cache
                     // decrease
                     if (throttleRate > newThrottle) {
                         int delta = throttleRate - newThrottle;
@@ -273,25 +322,68 @@ protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) thro
                             log.debug(""Throttle rate increase from {} to {}, triggered by ExchangeId: {}"", throttleRate, newThrottle, exchange.getExchangeId());
                         }
                     }
-                    throttleRate = newThrottle;
+                    throttleRatesMap.put(key, newThrottle);
                 }
             }
         }
     }
 
+    @SuppressWarnings(""unchecked"")
     @Override
     protected void doStart() throws Exception {
         if (isAsyncDelayed()) {
             ObjectHelper.notNull(asyncExecutor, ""executorService"", this);
         }
+        if (camelContext != null) {
+            int maxSize = CamelContextHelper.getMaximumSimpleCacheSize(camelContext);
+            if (maxSize > 0) {
+                delayQueueCache = LRUCacheFactory.newLRUCache(16, maxSize, false);
+                log.debug(""DelayQueues cache size: {}"", maxSize);
+            } else {
+                delayQueueCache = LRUCacheFactory.newLRUCache(100);
+                log.debug(""Defaulting DelayQueues cache size: {}"", 100);
+            }
+        }
+        if (delayQueueCache != null) {
+            ServiceHelper.startService(delayQueueCache);
+        }
+        if (delayQueueCacheExecutorService == null) {
+            String name = getClass().getSimpleName() + ""-DelayQueueLocatorTask"";
+            delayQueueCacheExecutorService = createDelayQueueCacheExecutorService(name);
+        }
         super.doStart();
     }
+    
+    /**
+     * Strategy to create the thread pool for locating right DelayQueue from the case as a background task
+     *
+     * @param name  the suggested name for the background thread
+     * @return the thread pool
+     */
+    protected synchronized ExecutorService createDelayQueueCacheExecutorService(String name) {
+        // use a cached thread pool so we each on-the-fly task has a dedicated thread to process completions as they come in
+        return camelContext.getExecutorServiceManager().newCachedThreadPool(this, name);
+    }
 
+    @SuppressWarnings(""rawtypes"")
     @Override
     protected void doShutdown() throws Exception {
         if (shutdownAsyncExecutor && asyncExecutor != null) {
             camelContext.getExecutorServiceManager().shutdownNow(asyncExecutor);
         }
+        if (delayQueueCacheExecutorService != null) {
+            camelContext.getExecutorServiceManager().shutdownNow(delayQueueCacheExecutorService);
+        }
+        if (delayQueueCache != null) {
+            ServiceHelper.stopService(delayQueueCache);
+            if (log.isDebugEnabled()) {
+                if (delayQueueCache instanceof LRUCache) {
+                    log.debug(""Clearing deleay queues cache[size={}, hits={}, misses={}, evicted={}]"",
+                            delayQueueCache.size(), ((LRUCache) delayQueueCache).getHits(), ((LRUCache) delayQueueCache).getMisses(), ((LRUCache) delayQueueCache).getEvicted());
+                }
+            }
+            delayQueueCache.clear();
+        }
         super.doShutdown();
     }
 
@@ -365,9 +457,11 @@ public Expression getMaximumRequestsPerPeriodExpression() {
 
     /**
      * Gets the current maximum request per period value.
+     * If it is grouped throttling applied with correlationExpression 
+     * than the max per period within the group will return
      */
     public int getCurrentMaximumRequestsPerPeriod() {
-        return throttleRate;
+        return Collections.max(throttleRatesMap.entrySet(), (entry1, entry2) -> entry1.getValue() - entry2.getValue()).getValue();
     }
 
     /**
@@ -390,4 +484,4 @@ public String toString() {
         return ""Throttler[requests: "" + maxRequestsPerPeriodExpression + "" per: "" + timePeriodMillis + "" (ms) to: ""
                 + getProcessor() + ""]"";
     }
-}
+}
\ No newline at end of file
diff --git a/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java b/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java
new file mode 100644
index 00000000000..1886a8ebf20
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java
@@ -0,0 +1,77 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+
+/**
+ * @version 
+ */
+public class ThrottlingGroupingTest extends ContextTestSupport {
+
+    public void testGroupingWithSingleConstant() throws Exception {
+        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"", ""Bye World"");
+        getMockEndpoint(""mock:dead"").expectedBodiesReceived(""Kaboom"");
+
+        template.sendBodyAndHeader(""seda:a"", ""Kaboom"", ""max"", null);
+        template.sendBodyAndHeader(""seda:a"", ""Hello World"", ""max"", 2);
+        template.sendBodyAndHeader(""seda:a"", ""Bye World"", ""max"", 2);
+
+        assertMockEndpointsSatisfied();
+    }
+    
+    public void testGroupingWithDynamicHeaderExpression() throws Exception {
+        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"");
+        getMockEndpoint(""mock:result2"").expectedBodiesReceived(""Bye World"");
+        getMockEndpoint(""mock:dead"").expectedBodiesReceived(""Kaboom"", ""Saloon"");
+        getMockEndpoint(""mock:resultdynamic"").expectedBodiesReceived(""Hello Dynamic World"", ""Bye Dynamic World"");
+        
+        Map<String, Object> headers = new HashMap<String, Object>();
+
+        template.sendBodyAndHeaders(""seda:a"", ""Kaboom"", headers);
+        template.sendBodyAndHeaders(""seda:a"", ""Saloon"", headers);
+        
+        headers.put(""max"", ""2"");
+        template.sendBodyAndHeaders(""seda:a"", ""Hello World"", headers);
+        template.sendBodyAndHeaders(""seda:b"", ""Bye World"", headers);
+        headers.put(""max"", ""2"");
+        headers.put(""key"", ""1"");
+        template.sendBodyAndHeaders(""seda:c"", ""Hello Dynamic World"", headers);
+        headers.put(""key"", ""2"");
+        template.sendBodyAndHeaders(""seda:c"", ""Bye Dynamic World"", headers);
+        
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                errorHandler(deadLetterChannel(""mock:dead""));
+
+                from(""seda:a"").throttle(1, header(""max"")).to(""mock:result"");
+                from(""seda:b"").throttle(2, header(""max"")).to(""mock:result2"");
+                from(""seda:c"").throttle(header(""key""), header(""max"")).timePeriodMillis(2000).to(""mock:resultdynamic"");
+            }
+        };
+    }
+}
\ No newline at end of file
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
index 3ba12bf138a..95705c7a83d 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/CxfConsumer.java
@@ -191,7 +191,7 @@ public void done(boolean doneSync) {
                         }
                     });
 
-                } else if (continuation.isResumed()) {
+                } else if (!continuation.isTimeout() && continuation.isResumed()) {
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     try {
                         setResponseBack(cxfExchange, camelExchange);
@@ -199,7 +199,8 @@ public void done(boolean doneSync) {
                         CxfConsumer.this.doneUoW(camelExchange);
                         throw ex;
                     }
-                } else if (!continuation.isResumed() && !continuation.isPending()) {
+
+                } else if (continuation.isTimeout() || (!continuation.isResumed() && !continuation.isPending())) {
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     try {
                         if (!continuation.isPending()) {
diff --git a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
index 29d9fa3eb90..fef3818f43a 100644
--- a/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
+++ b/components/camel-cxf/src/main/java/org/apache/camel/component/cxf/jaxrs/CxfRsInvoker.java
@@ -104,7 +104,7 @@ public void done(boolean doneSync) {
                 });
                 return null;
             }
-            if (continuation.isResumed()) {
+            if (!continuation.isTimeout() && continuation.isResumed()) {
                 cxfExchange.put(SUSPENED, Boolean.FALSE);
                 org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                 try {
@@ -114,7 +114,7 @@ public void done(boolean doneSync) {
                     throw ex;
                 }
             } else {
-                if (!continuation.isPending()) {
+                if (continuation.isTimeout() || !continuation.isPending()) {
                     cxfExchange.put(SUSPENED, Boolean.FALSE);
                     org.apache.camel.Exchange camelExchange = (org.apache.camel.Exchange)continuation.getObject();
                     camelExchange.setException(new ExchangeTimedOutException(camelExchange, endpoint.getContinuationTimeout()));
diff --git a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
index cfe31bde6e5..d628501ddb3 100644
--- a/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
+++ b/components/camel-cxf/src/test/java/org/apache/camel/component/cxf/CxfConsumerContinuationTimeoutTest.java
@@ -25,7 +25,6 @@
 import org.apache.camel.builder.RouteBuilder;
 import org.apache.camel.test.junit4.CamelTestSupport;
 import org.apache.camel.util.AsyncProcessorHelper;
-import org.junit.Ignore;
 import org.junit.Test;
 
 public class CxfConsumerContinuationTimeoutTest extends CamelTestSupport {
@@ -114,7 +113,6 @@ public void testNoTimeout() throws Exception {
     }
 
     @Test
-    @Ignore(""CAMEL-12104"")
     public void testTimeout() throws Exception {
         String out = template.requestBodyAndHeader(""direct:start"", ""Bye World"", ""priority"", ""slow"", String.class);
         assertTrue(out.contains(""The OUT message was not received within: 5000 millis.""));
diff --git a/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringThrottlerGroupingTest.java b/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringThrottlerGroupingTest.java
new file mode 100644
index 00000000000..a0a7a445110
--- /dev/null
+++ b/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringThrottlerGroupingTest.java
@@ -0,0 +1,32 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.spring.processor;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.processor.ThrottlingGroupingTest;
+import org.junit.Ignore;
+
+import static org.apache.camel.spring.processor.SpringTestHelper.createSpringCamelContext;
+
+@Ignore
+public class SpringThrottlerGroupingTest extends ThrottlingGroupingTest {
+
+    protected CamelContext createCamelContext() throws Exception {
+        return createSpringCamelContext(this,
+                ""org/apache/camel/spring/processor/ThrottlerGroupingTest.xml"");
+    }
+}
diff --git a/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml b/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
new file mode 100644
index 00000000000..ab74a3d9820
--- /dev/null
+++ b/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
@@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>1</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:b""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>2</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <header>key</header>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:resultdynamic""/>
+      </throttle>
+    </route>
+
+  </camelContext>
+
+</beans>
diff --git a/parent/pom.xml b/parent/pom.xml
index 08ecae38360..d9e6c0e6a2d 100644
--- a/parent/pom.xml
+++ b/parent/pom.xml
@@ -542,7 +542,7 @@
     <openhft-affinity-version>3.1.7</openhft-affinity-version>
     <openhft-compiler-version>2.3.0</openhft-compiler-version>
     <openhft-lang-version>6.8.2</openhft-lang-version>
-    <openjpa-version>2.4.2</openjpa-version>
+    <openjpa-version>2.4.3</openjpa-version>
     <openshift-java-client-version>2.7.0.Final</openshift-java-client-version>
     <openstack4j-version>3.0.2</openstack4j-version>
     <openstack4j-guava-version>17.0</openstack4j-guava-version>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528950088:2018-06-14T12:21:28.105+0000:1528950088:2018-06-14T12:21:28.105+0000:Github user onderson closed the pull request at:

    https://github.com/apache/camel/pull/2375

githubbot:1528968660:2018-06-14T17:31:00.498+0000:1528968660:2018-06-14T17:31:00.498+0000:onderson opened a new pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376
 
 
   …roperly so it is WIP for and now checking it in as Ignored test case
   
   For now unit test in camel-spring is ignored.
   I think i need help with it.
   fyi. @davsclaus , @WillemJiang , @oscerd and @aldettinger

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1528968661:2018-06-14T17:31:01.320+0000:1528968661:2018-06-14T17:31:01.320+0000:GitHub user onderson opened a pull request:

    https://github.com/apache/camel/pull/2376

    CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…

    …roperly so it is WIP for and now checking it in as Ignored test case
    
    For now unit test in camel-spring is ignored.
    I think i need help with it.
    fyi. @davsclaus , @WillemJiang , @oscerd and @aldettinger

You can merge this pull request into a Git repository by running:

    $ git pull https://github.com/onderson/camel CAMEL-6840_jdsl

Alternatively you can review and apply these changes as the patch at:

    https://github.com/apache/camel/pull/2376.patch

To close this pull request, make a commit to your master/trunk branch
with (at least) the following in the commit message:

    This closes #2376
    
----
commit 31ecb1702d24d182c45e56ee72a4cfd2ba29b07c
Author: Sezgin <onder.sezgin@...>
Date:   2018-06-14T17:26:59Z

    CAMEL-6840 - add grouped throttling feature, XML DSL is not working properly so it is WIP for and now checking it in as Ignored test case

----

githubbot:1529071067:2018-06-15T21:57:47.139+0000:1529071067:2018-06-15T21:57:47.139+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195866180
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
 
 Review comment:
   No sure it is used/useful

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.636+0000:1529071067:2018-06-15T21:57:47.636+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195866835
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
 
 Review comment:
   As found by Willem, the current version of the camel-spring schema requires to put the correlationExpression after the last `to` of this route.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.641+0000:1529071067:2018-06-15T21:57:47.641+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195871002
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
 
 Review comment:
   Could you please elaborate on why you are using a CompletableFuture here ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.704+0000:1529071067:2018-06-15T21:57:47.704+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195868172
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
 Review comment:
   Does it mean that we mix the default group when a correlationExpression evaluates to 1 ?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.723+0000:1529071067:2018-06-15T21:57:47.723+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195866104
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
 
 Review comment:
   Globally, you have 2 issues. It is not valid against the xml schema, and the test is not the exact translation of the java DSL `ThrottlingGroupingTest` tests. Examples below.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.778+0000:1529071067:2018-06-15T21:57:47.778+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195866379
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>1</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:b""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>2</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
 
 Review comment:
   The java DSL test states `mock:result2` here

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.797+0000:1529071067:2018-06-15T21:57:47.797+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195866315
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>1</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:b""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>2</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
 
 Review comment:
   The java DSL test states `seda:c` here

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529071067:2018-06-15T21:57:47.816+0000:1529071067:2018-06-15T21:57:47.816+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195866456
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>1</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:b""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>2</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
 
 Review comment:
   The java DSL test states 2000ms here

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529079502:2018-06-16T00:18:22.284+0000:1529079502:2018-06-16T00:18:22.284+0000:WillemJiang commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195887107
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
 ##########
 @@ -43,6 +44,8 @@
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
 
 Review comment:
   This correlationExpression must be put after to element, you had to find a way to setup the right order for it.  I don't think you can do it by just extends the ExpressionNode.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529079632:2018-06-16T00:20:32.390+0000:1529079632:2018-06-16T00:20:32.390+0000:WillemJiang commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195887215
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
     private enum State { SYNC, ASYNC, ASYNC_REJECTED }
 
     private final Logger log = LoggerFactory.getLogger(Throttler.class);
     private final CamelContext camelContext;
-    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
     private final ExecutorService asyncExecutor;
     private final boolean shutdownAsyncExecutor;
 
     private volatile long timePeriodMillis;
-    private volatile int throttleRate;
     private String id;
     private Expression maxRequestsPerPeriodExpression;
     private boolean rejectExecution;
     private boolean asyncDelayed;
     private boolean callerRunsWhenRejected = true;
+    private Expression correlationExpression;
+    // below 2 fields added for (throttling grouping)
+    private Map<Integer, DelayQueue<ThrottlePermit>> delayQueueCache;
 
 Review comment:
   We may introduce memory leak issue, if we keep adding items to the map without clean them.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529080242:2018-06-16T00:30:42.360+0000:1529080242:2018-06-16T00:30:42.360+0000:WillemJiang commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195887527
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+
+        delayQueueCacheExecutorService.submit(() -> {
+            futureDelayQueue.complete(findDelayQueue(key));
+        });
+        DelayQueue<ThrottlePermit> currentQueue = futureDelayQueue.get();   
 
 Review comment:
   futrueDelayQueue.get() is wait for the future method to complete, it doesn't save us time.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529080242:2018-06-16T00:30:42.377+0000:1529080242:2018-06-16T00:30:42.377+0000:WillemJiang commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195887629
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,20 +282,22 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
         synchronized (this) {
 
 Review comment:
   As we separate throttleRate by the correlation id, we could use throttleRate as a lock instead of using this throttle object.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529102874:2018-06-16T06:47:54.760+0000:1529102874:2018-06-16T06:47:54.760+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195896133
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
     private enum State { SYNC, ASYNC, ASYNC_REJECTED }
 
     private final Logger log = LoggerFactory.getLogger(Throttler.class);
     private final CamelContext camelContext;
-    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
     private final ExecutorService asyncExecutor;
     private final boolean shutdownAsyncExecutor;
 
     private volatile long timePeriodMillis;
-    private volatile int throttleRate;
     private String id;
     private Expression maxRequestsPerPeriodExpression;
     private boolean rejectExecution;
     private boolean asyncDelayed;
     private boolean callerRunsWhenRejected = true;
+    private Expression correlationExpression;
+    // below 2 fields added for (throttling grouping)
+    private Map<Integer, DelayQueue<ThrottlePermit>> delayQueueCache;
 
 Review comment:
   It is actually cleared in shutdown. And i dont expect extreme numbers of grouping. It is possible but not so likely

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529102883:2018-06-16T06:48:03.137+0000:1529102883:2018-06-16T06:48:03.137+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195896137
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
 
 Review comment:
   I could call complete manually, to get the result. That was it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529102893:2018-06-16T06:48:13.226+0000:1529102893:2018-06-16T06:48:13.226+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195896140
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,20 +282,22 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
         synchronized (this) {
 
 Review comment:
   CorrelationExpression may be even better?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529102909:2018-06-16T06:48:29.857+0000:1529102909:2018-06-16T06:48:29.857+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195896149
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
 
 Review comment:
   Yes. True

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529102914:2018-06-16T06:48:34.668+0000:1529102914:2018-06-16T06:48:34.668+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195896151
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>1</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:b""/>
+      <throttle timePeriodMillis=""1000"">
+        <correlationExpression>
+          <constant>2</constant>
+        </correlationExpression>
+        <header>max</header>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
 
 Review comment:
   As xml dsl does not work properly, i did not bother making them the same yet. You are right they should be the same at the end.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529103114:2018-06-16T06:51:54.732+0000:1529103114:2018-06-16T06:51:54.732+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195896210
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
 ##########
 @@ -43,6 +44,8 @@
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
 
 Review comment:
   Not sure if it is a must. We can impose order with xmlorder tag. I did try. It did not help.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529108048:2018-06-16T08:14:08.692+0000:1529108048:2018-06-16T08:14:08.692+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195897626
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,20 +282,22 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
         synchronized (this) {
 
 Review comment:
   My understanding is that `correlationExpression` is always the same. Would the finer grained lock be the result of the evaluation then, so namely `key`?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529110117:2018-06-16T08:48:37.001+0000:1529110117:2018-06-16T08:48:37.001+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195898275
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,20 +282,22 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
         synchronized (this) {
 
 Review comment:
   Yes i meant the evaluated correlationExpression. I agree

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529110393:2018-06-16T08:53:13.869+0000:1529110393:2018-06-16T08:53:13.869+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195898378
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
 Review comment:
   Yes, this is correct. Not sure if that would happen very easily. Could not come up with something brighter. Open to hear ideas.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529110463:2018-06-16T08:54:23.938+0000:1529110463:2018-06-16T08:54:23.938+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#discussion_r195898396
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+
+        delayQueueCacheExecutorService.submit(() -> {
+            futureDelayQueue.complete(findDelayQueue(key));
+        });
+        DelayQueue<ThrottlePermit> currentQueue = futureDelayQueue.get();   
 
 Review comment:
   My intention was not save time, was to fill up the throttle group async

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529121696:2018-06-16T12:01:36.013+0000:1529121696:2018-06-16T12:01:36.013+0000:onderson commented on issue #2376: CAMEL-6840 - add grouped throttling feature, XML DSL is not working p…
URL: https://github.com/apache/camel/pull/2376#issuecomment-397807696
 
 
   Addressed review comments and now XML Dsl is working.
   Please review again.
   thanks for any feedback

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529124310:2018-06-16T12:45:10.035+0000:1529124310:2018-06-16T12:45:10.035+0000:onderson commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-397809979
 
 
   I remember i forgot to address comments for synchronised block. As i will wait for @oscerd and @davsclaus , i will try to handle comments all together.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529134526:2018-06-16T15:35:26.892+0000:1529134526:2018-06-16T15:35:26.892+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195905491
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
 Review comment:
   Maybe keep throttleRate/delayQueue for default group and throttleRatesMap/defaultQueueCache for other groups.
   Perhaps, put that in a dedicated class named `ThrottleRates` ?
   Another idea could be to use a less common value, e.g. `NO_CORRELATION_QUEUE_ID = new Integer(Integer.MAX_VALUE)`.
   Note that having a `correlationExpression` that could evaluate to the default group key would allow dynamic inclusion in the default group.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529134931:2018-06-16T15:42:11.714+0000:1529134931:2018-06-16T15:42:11.714+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195905663
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -111,13 +128,21 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                 throw new RejectedExecutionException(""Run is not allowed"");
             }
 
-            calculateAndSetMaxRequestsPerPeriod(exchange);
+            Integer key;
+            if (correlationExpression != null) {
+                key = correlationExpression.evaluate(exchange, Integer.class);
 
 Review comment:
   If we use `key` as a finer grain lock, I would make a defensive copy because I'm not sure that the reference returned by evaluate could be used as a lock by another thread for another purpose.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529135000:2018-06-16T15:43:20.184+0000:1529135000:2018-06-16T15:43:20.184+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195905689
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+
+        delayQueueCacheExecutorService.submit(() -> {
+            futureDelayQueue.complete(findDelayQueue(key));
+        });
+        DelayQueue<ThrottlePermit> currentQueue = futureDelayQueue.get();   
 
 Review comment:
   I agree with Willem, I don't see yet the value of doing this async.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529152507:2018-06-16T20:35:07.086+0000:1529152507:2018-06-16T20:35:07.086+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195911559
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
 Review comment:
   nice comments, addressed some of them.
   considering the ones(till others) left undone

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529152543:2018-06-16T20:35:43.904+0000:1529152543:2018-06-16T20:35:43.904+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195911564
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -111,13 +128,21 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                 throw new RejectedExecutionException(""Run is not allowed"");
             }
 
-            calculateAndSetMaxRequestsPerPeriod(exchange);
+            Integer key;
+            if (correlationExpression != null) {
+                key = correlationExpression.evaluate(exchange, Integer.class);
 
 Review comment:
   good point

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529152628:2018-06-16T20:37:08.044+0000:1529152628:2018-06-16T20:37:08.044+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195911582
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -192,6 +217,26 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key) throws InterruptedException, ExecutionException {        
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+
+        delayQueueCacheExecutorService.submit(() -> {
+            futureDelayQueue.complete(findDelayQueue(key));
+        });
+        DelayQueue<ThrottlePermit> currentQueue = futureDelayQueue.get();   
 
 Review comment:
   maybe not very big plus. and 
   i disagree. In case of async routing, could be useful.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529227134:2018-06-17T17:18:54.414+0000:1529227134:2018-06-17T17:18:54.414+0000:davsclaus commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195935653
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
 ##########
 @@ -55,14 +60,26 @@
     private Boolean callerRunsWhenRejected;
     @XmlAttribute
     private Boolean rejectExecution;
-    
+
     public ThrottleDefinition() {
     }
 
     public ThrottleDefinition(Expression maximumRequestsPerPeriod) {
         super(maximumRequestsPerPeriod);
     }
 
+    public ThrottleDefinition(Expression correlationExpression, Expression maximumRequestsPerPeriod) {
 
 Review comment:
   These 2 constructors are using different order of the parameters, eg it would be good to keep it consistent. As correlation expression is a new parameter, I would add it as 2nd.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529227134:2018-06-17T17:18:54.415+0000:1529227134:2018-06-17T17:18:54.415+0000:davsclaus commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195935662
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
 ##########
 @@ -43,6 +44,8 @@
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
 
 Review comment:
   Yeah I would also put correlationExpression as 2nd, eg its a new option, and it makes more sense, as its optional.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529227134:2018-06-17T17:18:54.530+0000:1529227134:2018-06-17T17:18:54.530+0000:davsclaus commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r195935728
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -61,25 +70,32 @@
 
     private static final String PROPERTY_EXCHANGE_QUEUED_TIMESTAMP = ""CamelThrottlerExchangeQueuedTimestamp"";
     private static final String PROPERTY_EXCHANGE_STATE = ""CamelThrottlerExchangeState"";
+    // (throttling grouping) defaulted as 1 because there will be only one queue which is similar to implementation
+    // when there is no grouping for throttling
+    private static final Integer NO_CORRELATION_QUEUE_ID = new Integer(1);
 
     private enum State { SYNC, ASYNC, ASYNC_REJECTED }
 
     private final Logger log = LoggerFactory.getLogger(Throttler.class);
     private final CamelContext camelContext;
-    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
     private final ExecutorService asyncExecutor;
     private final boolean shutdownAsyncExecutor;
 
     private volatile long timePeriodMillis;
-    private volatile int throttleRate;
     private String id;
     private Expression maxRequestsPerPeriodExpression;
     private boolean rejectExecution;
     private boolean asyncDelayed;
     private boolean callerRunsWhenRejected = true;
+    private Expression correlationExpression;
+    // below 2 fields added for (throttling grouping)
+    private Map<Integer, DelayQueue<ThrottlePermit>> delayQueueCache;
 
 Review comment:
   Wont the delay queue empty itself when the time period has elapsed, and then release the exchanges. So even if you have many correlation keys then they would eventually be released. And yeah clean in shutdown is good practice (although Camel ought to do graceful shutdown and wait for those throttled exchanges to complete first).

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529320664:2018-06-18T19:17:44.870+0000:1529320664:2018-06-18T19:17:44.870+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196194115
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
 
 Review comment:
   this is addressed

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529320734:2018-06-18T19:18:54.315+0000:1529320734:2018-06-18T19:18:54.315+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196194415
 
 

 ##########
 File path: components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
 ##########
 @@ -0,0 +1,69 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+
+  <bean id=""myBean"" class=""org.apache.camel.spring.processor.SpringThrottlerMethodCallTest""/>
+
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
 
 Review comment:
   this is addressed with xmltype annotation and propOrder attribute of it.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529320749:2018-06-18T19:19:09.294+0000:1529320749:2018-06-18T19:19:09.294+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196194481
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
 ##########
 @@ -43,6 +44,8 @@
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
 
 Review comment:
   this is addressed

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529321335:2018-06-18T19:28:55.265+0000:1529321335:2018-06-18T19:28:55.265+0000:onderson commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-398168228
 
 
   rebased and addressed code review comments. Could you guys take a look one again?
   Thanks again for the reviews. Yes it is a great involvement. Happy to get feedback..

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529351103:2018-06-19T03:45:03.286+0000:1529351103:2018-06-19T03:45:03.286+0000:WillemJiang commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196287422
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   Can we use the throttleRate as the lock here? I don't think create a new Integer can do the job.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529357157:2018-06-19T05:25:57.836+0000:1529357157:2018-06-19T05:25:57.836+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196297373
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   This is for. Not needed, considered for just in case.
   https://github.com/apache/camel/pull/2376#discussion_r195905663

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529410000:2018-06-19T20:06:40.681+0000:1529410000:2018-06-19T20:06:40.681+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196560334
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   Indeed, creating a new Integer each time can't do the job.
   Let's use throttleRate as the lock.
   My understanding is that all groups will share the same lock, but optimization could come later on.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529419895:2018-06-19T22:51:35.028+0000:1529419895:2018-06-19T22:51:35.028+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196602939
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   @WillemJiang and @aldettinger , guys can you please be more explicit about this subject? I am afraid i did not get what you mean.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529431153:2018-06-20T01:59:13.857+0000:1529431153:2018-06-20T01:59:13.857+0000:WillemJiang commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196629146
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   Our suggestion is using the currentThrottleRate as the lock, and if you create a new Integer with the currentThrottleRate intValue, you always get a new Integer instance for the lockOnSync variable. It doesn't  block the thread which try to access same ThrottleRate at the same time. 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529443668:2018-06-20T05:27:48.923+0000:1529443668:2018-06-20T05:27:48.923+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196652156
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   I got that but that was the point of @aldettinger's first suggestion to make a defensive copy due to not being sure of the reference returned by evaluate could be used as a lock by another thread for another purpose or not. I think that led me to think like that. I think the correct way of managing synchronised block will be like this
       1- If no grouping applied, throttler itself should be used as lock because all threads will be accessing volatile throttleRate and modify it.
       2- If grouping applied, not the value from throttleRates map should be used as lock but the key would be a better choice.
   
   that was what i already mentioned but reflected in an unintended way to implementation.
   https://github.com/apache/camel/pull/2376#discussion_r195896140
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529500323:2018-06-20T21:12:03.511+0000:1529500323:2018-06-20T21:12:03.511+0000:aldettinger commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r196944201
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   @onderson
   Sorry for confusion. I think it will be clearer expressing my preferences below:
   1) Make a defensive copy of the key only once, and lock on that same object for the whole group life
   2) Lock on the value, currentThrottleRate
   3) Lock on throttleRate (group would have been mixed)
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529530504:2018-06-21T05:35:04.730+0000:1529530504:2018-06-21T05:35:04.730+0000:onderson commented on a change in pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#discussion_r197015600
 
 

 ##########
 File path: camel-core/src/main/java/org/apache/camel/processor/Throttler.java
 ##########
 @@ -235,63 +283,122 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = null;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = new Integer(currentThrottleRate.intValue());
 
 Review comment:
   That's all right. It was a good catch.
   I disagree about defensive copy of the key because those keys (key of throttleRatesMap) are already private and non-accessible variables, and there is no other place those keys used by any other threading mechanism. 
   option 2 and 3 and are not good choices already IMHO whereas we can use evaluated value of correlationExpression as the lock for synchronization.
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529651099:2018-06-22T15:04:59.629+0000:1529651099:2018-06-22T15:04:59.629+0000:onderson commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-399473716
 
 
   @WillemJiang , @aldettinger ,  @oscerd , @davsclaus , are you ok with PR?

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529886030:2018-06-25T08:20:30.883+0000:1529886030:2018-06-25T08:20:30.883+0000:oscerd commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-399871110
 
 
   Approved for me.

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529889371:2018-06-25T09:16:11.946+0000:1529889371:2018-06-25T09:16:11.946+0000:davsclaus commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-399886312
 
 
   This PR is a bit hard to grok - especially that code that does that completion future task. For me it looks like you use a thread pool to do some work to find a delay queue, and then do a future get to block and wait for that thread to finish. What is the reason for that? 
   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529894565:2018-06-25T10:42:45.886+0000:1529894565:2018-06-25T10:42:45.886+0000:onderson commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-399909272
 
 
   I thought like this;
   In case of async routing there may be cases where we create new group whose correlationExpression might first hit after long series of exchanges which the same key hit and are to be on hold in their delayQueue. so we need to find delay queue to add new ones while we create a new empty delay queue for the new group hit for the first time. that's why i thought locating delay queues for those frequently hitting exchanges for the group during async routing would be better be async with another executorservice. that was my only reasoning. this may not bring much value if that would not happen and exchanges are evenly distributed to be throttled.   

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529977735:2018-06-26T09:48:55.390+0000:1529977735:2018-06-26T09:48:55.390+0000:davsclaus commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-400249104
 
 
   Okay thanks for the details. I think we need to add some code comment about this, or as javadoc to the class etc about implementation details.
   
   Also I would prefer if the thread pool is only created when you use correlationExpression. As then its not needed and just takes up resources. Also we should allow to configure a shared thread pool like some of the other EIPs does. For example splitter, wire-tap etc, with the `ExecutorServiceAwareDefinition`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1529977748:2018-06-26T09:49:08.840+0000:1529977748:2018-06-26T09:49:08.840+0000:davsclaus removed a comment on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-400249104
 
 
   Okay thanks for the details. I think we need to add some code comment about this, or as javadoc to the class etc about implementation details.
   
   Also I would prefer if the thread pool is only created when you use correlationExpression. As then its not needed and just takes up resources. Also we should allow to configure a shared thread pool like some of the other EIPs does. For example splitter, wire-tap etc, with the `ExecutorServiceAwareDefinition`

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1530660301:2018-07-04T07:25:01.830+0000:1530660301:2018-07-04T07:25:01.830+0000:onderson closed pull request #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376
 
 
   

This is a PR merged from a forked repository.
As GitHub hides the original diff on merge, it is displayed below for
the sake of provenance:

As this is a foreign pull request (from a fork), the diff is supplied
below (as it won't show otherwise due to GitHub magic):

diff --git a/camel-core/src/main/docs/eips/throttle-eip.adoc b/camel-core/src/main/docs/eips/throttle-eip.adoc
index 71da9599589..aa0582b297e 100644
--- a/camel-core/src/main/docs/eips/throttle-eip.adoc
+++ b/camel-core/src/main/docs/eips/throttle-eip.adoc
@@ -6,11 +6,12 @@ The Throttler Pattern allows you to ensure that a specific endpoint does not get
 === Options
 
 // eip options: START
-The Throttle EIP supports 5 options which are listed below:
+The Throttle EIP supports 6 options which are listed below:
 
 [width=""100%"",cols=""2,5,^1,2"",options=""header""]
 |===
 | Name | Description | Default | Type
+| *correlationExpression* | The expression used to calculate the correlation key to use for throttle grouping. The Exchange which has the same correlation key is throttled together. |  | NamespaceAware Expression
 | *executorServiceRef* | To use a custom thread pool (ScheduledExecutorService) by the throttler. |  | String
 | *timePeriodMillis* | Sets the time period during which the maximum request count is valid for | 1000 | Long
 | *asyncDelayed* | Enables asynchronous delay which means the thread will not block while delaying. | false | Boolean
diff --git a/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java b/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java
index 673c13e88fe..6e993b0633f 100644
--- a/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java
+++ b/camel-core/src/main/java/org/apache/camel/api/management/mbean/ManagedThrottlerMBean.java
@@ -20,10 +20,10 @@
 
 public interface ManagedThrottlerMBean extends ManagedProcessorMBean {
 
-    @ManagedAttribute(description = ""Maximum requires per period"")
+    @ManagedAttribute(description = ""Maximum requests per period"")
     long getMaximumRequestsPerPeriod();
 
-    @ManagedAttribute(description = ""Maximum requires per period"")
+    @ManagedAttribute(description = ""Maximum requests per period"")
     void setMaximumRequestsPerPeriod(long maximumRequestsPerPeriod);
 
     @ManagedAttribute(description = ""Time period in millis"")
diff --git a/camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java b/camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java
index d2ac38ec8d7..5a1d7b1d125 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ExpressionNode.java
@@ -21,6 +21,7 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlElementRef;
+import javax.xml.bind.annotation.XmlTransient;
 
 import org.apache.camel.Expression;
 import org.apache.camel.Predicate;
@@ -36,6 +37,7 @@
  * @version
  */
 @XmlAccessorType(XmlAccessType.FIELD)
+@XmlTransient
 public abstract class ExpressionNode extends ProcessorDefinition<ExpressionNode> {
     @XmlElementRef
     private ExpressionDefinition expression;
diff --git a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
index 005270e313b..9108d78371f 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ProcessorDefinition.java
@@ -2284,6 +2284,48 @@ public ThrottleDefinition throttle(Expression maximumRequestCount) {
         addOutput(answer);
         return answer;
     }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @param correlationExpressionKey  is a correlation key that can throttle by the given key instead of overall throttling
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(Expression maximumRequestCount, long correlationExpressionKey) {
+        ThrottleDefinition answer = new ThrottleDefinition(maximumRequestCount, ExpressionBuilder.constantExpression(correlationExpressionKey));
+        addOutput(answer);
+        return answer;
+    }
+
+    /**
+     * <a href=""http://camel.apache.org/throttler.html"">Throttler EIP:</a>
+     * Creates a throttler allowing you to ensure that a specific endpoint does not get overloaded,
+     * or that we don't exceed an agreed SLA with some external service.
+     * Here another parameter correlationExpressionKey is introduced for the functionality which
+     * will throttle based on the key expression to group exchanges. This will make key-based throttling
+     * instead of overall throttling.
+     * <p/>
+     * Will default use a time period of 1 second, so setting the maximumRequestCount to eg 10
+     * will default ensure at most 10 messages per second.
+     *
+     * @param maximumRequestCount  an expression to calculate the maximum request count
+     * @param correlationExpressionKey  is a correlation key as an expression that can throttle by the given key instead of overall throttling
+     * @return the builder
+     */
+    public ThrottleDefinition throttle(Expression maximumRequestCount, Expression correlationExpressionKey) {
+        ThrottleDefinition answer = new ThrottleDefinition(maximumRequestCount, correlationExpressionKey);
+        addOutput(answer);
+        return answer;
+    }
     
     /**
      * <a href=""http://camel.apache.org/loop.html"">Loop EIP:</a>
diff --git a/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java b/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
index 613d2b351c5..eeb1645f615 100644
--- a/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
+++ b/camel-core/src/main/java/org/apache/camel/model/ThrottleDefinition.java
@@ -21,8 +21,10 @@
 import javax.xml.bind.annotation.XmlAccessType;
 import javax.xml.bind.annotation.XmlAccessorType;
 import javax.xml.bind.annotation.XmlAttribute;
+import javax.xml.bind.annotation.XmlElement;
 import javax.xml.bind.annotation.XmlRootElement;
 import javax.xml.bind.annotation.XmlTransient;
+import javax.xml.bind.annotation.XmlType;
 
 import org.apache.camel.Expression;
 import org.apache.camel.Processor;
@@ -40,9 +42,12 @@
 @Metadata(label = ""eip,routing"")
 @XmlRootElement(name = ""throttle"")
 @XmlAccessorType(XmlAccessType.FIELD)
+@XmlType(propOrder = {""expression"", ""correlationExpression"", ""outputs""})
 public class ThrottleDefinition extends ExpressionNode implements ExecutorServiceAwareDefinition<ThrottleDefinition> {
     // TODO: Camel 3.0 Should not support outputs
 
+    @XmlElement(name = ""correlationExpression"")
+    private ExpressionSubElementDefinition correlationExpression;
     @XmlTransient
     private ExecutorService executorService;
     @XmlAttribute
@@ -55,7 +60,7 @@
     private Boolean callerRunsWhenRejected;
     @XmlAttribute
     private Boolean rejectExecution;
-    
+
     public ThrottleDefinition() {
     }
 
@@ -63,6 +68,18 @@ public ThrottleDefinition(Expression maximumRequestsPerPeriod) {
         super(maximumRequestsPerPeriod);
     }
 
+    public ThrottleDefinition(Expression maximumRequestsPerPeriod, Expression correlationExpression) {
+        this(ExpressionNodeHelper.toExpressionDefinition(maximumRequestsPerPeriod), correlationExpression);
+    }
+
+    private ThrottleDefinition(ExpressionDefinition maximumRequestsPerPeriod, Expression correlationExpression) {
+        super(maximumRequestsPerPeriod);
+
+        ExpressionSubElementDefinition cor = new ExpressionSubElementDefinition();
+        cor.setExpressionType(ExpressionNodeHelper.toExpressionDefinition(correlationExpression));
+        setCorrelationExpression(cor);
+    }
+
     @Override
     public String toString() {
         return ""Throttle["" + description() + "" -> "" + getOutputs() + ""]"";
@@ -93,9 +110,14 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {
         if (maxRequestsExpression == null) {
             throw new IllegalArgumentException(""MaxRequestsPerPeriod expression must be provided on "" + this);
         }
+        
+        Expression correlation = null;
+        if (correlationExpression != null) {
+            correlation = correlationExpression.createExpression(routeContext);
+        }
 
         boolean reject = getRejectExecution() != null && getRejectExecution();
-        Throttler answer = new Throttler(routeContext.getCamelContext(), childProcessor, maxRequestsExpression, period, threadPool, shutdownThreadPool, reject);
+        Throttler answer = new Throttler(routeContext.getCamelContext(), childProcessor, maxRequestsExpression, period, threadPool, shutdownThreadPool, reject, correlation);
 
         answer.setAsyncDelayed(async);
         if (getCallerRunsWhenRejected() == null) {
@@ -104,6 +126,7 @@ public Processor createProcessor(RouteContext routeContext) throws Exception {
         } else {
             answer.setCallerRunsWhenRejected(getCallerRunsWhenRejected());
         }
+
         return answer;
     }
 
@@ -256,4 +279,16 @@ public Boolean getRejectExecution() {
     public void setRejectExecution(Boolean rejectExecution) {
         this.rejectExecution = rejectExecution;
     }
+
+    /**
+     * The expression used to calculate the correlation key to use for throttle grouping.
+     * The Exchange which has the same correlation key is throttled together.
+     */
+    public void setCorrelationExpression(ExpressionSubElementDefinition correlationExpression) {
+        this.correlationExpression = correlationExpression;
+    }
+
+    public ExpressionSubElementDefinition getCorrelationExpression() {
+        return correlationExpression;
+    }
 }
diff --git a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
index 543ec9a9cb0..a1b10c859b8 100644
--- a/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
+++ b/camel-core/src/main/java/org/apache/camel/processor/Throttler.java
@@ -16,8 +16,13 @@
  */
 package org.apache.camel.processor;
 
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.DelayQueue;
 import java.util.concurrent.Delayed;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.RejectedExecutionException;
 import java.util.concurrent.TimeUnit;
@@ -31,7 +36,11 @@
 import org.apache.camel.Traceable;
 import org.apache.camel.spi.IdAware;
 import org.apache.camel.util.AsyncProcessorHelper;
+import org.apache.camel.util.CamelContextHelper;
+import org.apache.camel.util.LRUCache;
+import org.apache.camel.util.LRUCacheFactory;
 import org.apache.camel.util.ObjectHelper;
+import org.apache.camel.util.ServiceHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -66,20 +75,24 @@
 
     private final Logger log = LoggerFactory.getLogger(Throttler.class);
     private final CamelContext camelContext;
-    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
     private final ExecutorService asyncExecutor;
     private final boolean shutdownAsyncExecutor;
 
     private volatile long timePeriodMillis;
-    private volatile int throttleRate;
     private String id;
+    private volatile Integer throttleRate = new Integer(0);
     private Expression maxRequestsPerPeriodExpression;
     private boolean rejectExecution;
     private boolean asyncDelayed;
     private boolean callerRunsWhenRejected = true;
+    private final DelayQueue<ThrottlePermit> delayQueue = new DelayQueue<>();
+    // below 3 fields added for (throttling grouping)
+    private Expression correlationExpression;
+    private Map<Integer, DelayQueue<ThrottlePermit>> delayQueueCache;
+    private Map<Integer, Integer> throttleRatesMap = new HashMap<>();    
 
     public Throttler(final CamelContext camelContext, final Processor processor, final Expression maxRequestsPerPeriodExpression, final long timePeriodMillis,
-                     final ExecutorService asyncExecutor, final boolean shutdownAsyncExecutor, final boolean rejectExecution) {
+                     final ExecutorService asyncExecutor, final boolean shutdownAsyncExecutor, final boolean rejectExecution, Expression correlation) {
         super(processor);
         this.camelContext = camelContext;
         this.rejectExecution = rejectExecution;
@@ -93,6 +106,7 @@ public Throttler(final CamelContext camelContext, final Processor processor, fin
         }
         this.timePeriodMillis = timePeriodMillis;
         this.asyncExecutor = asyncExecutor;
+        this.correlationExpression = correlation;
     }
 
     @Override
@@ -111,13 +125,22 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                 throw new RejectedExecutionException(""Run is not allowed"");
             }
 
-            calculateAndSetMaxRequestsPerPeriod(exchange);
-            ThrottlePermit permit = delayQueue.poll();
+            DelayQueue<ThrottlePermit> delayQ = null;
+            Integer key = null;
+            if (correlationExpression != null) {
+                key = correlationExpression.evaluate(exchange, Integer.class);
+                delayQ = locateDelayQueue(key, doneSync);
+            } else {
+                delayQ = delayQueue;
+            }
+            
+            calculateAndSetMaxRequestsPerPeriod(delayQ, exchange, key);
+            ThrottlePermit permit = delayQ.poll();
 
             if (permit == null) {
                 if (isRejectExecution()) {
                     throw new ThrottlerRejectedExecutionException(""Exceeded the max throttle rate of ""
-                            + throttleRate + "" within "" + timePeriodMillis + ""ms"");
+                            + ((correlationExpression != null) ? throttleRatesMap.get(key) : throttleRate) + "" within "" + timePeriodMillis + ""ms"");
                 } else {
                     // delegate to async pool
                     if (isAsyncDelayed() && !exchange.isTransacted() && state == State.SYNC) {
@@ -131,11 +154,11 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     if (log.isTraceEnabled()) {
                         start = System.currentTimeMillis();
                     }
-                    permit = delayQueue.take();
+                    permit = delayQ.take();
                     if (log.isTraceEnabled()) {
                         elapsed = System.currentTimeMillis() - start;
                     }
-                    enqueuePermit(permit, exchange);
+                    enqueuePermit(permit, exchange, delayQ);
 
                     if (state == State.ASYNC) {
                         if (log.isTraceEnabled()) {
@@ -147,7 +170,7 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
                     }
                 }
             } else {
-                enqueuePermit(permit, exchange);
+                enqueuePermit(permit, exchange, delayQ);
 
                 if (state == State.ASYNC) {
                     if (log.isTraceEnabled()) {
@@ -192,6 +215,41 @@ public boolean process(final Exchange exchange, final AsyncCallback callback) {
         }
     }
 
+    /**
+     * 
+     * Finds the right Delay Queue to put a permit into with the exchanges time arrival timestamp +  timePeriodInMillis 
+     * In case of asynchronous routing there may be cases where we create new group whose correlationExpression 
+     * might first hit after long series of exchanges with a different correlationExpression and are to be on hold in 
+     * their delayQueue so we need to find delay queue to add new ones while we create a new empty delay
+     * queue for the new group hit for the first time. that's why locating delay queues for those frequently
+     * hitting exchanges for the group during asynchronous routing would be better be asynchronous with asyncExecutor 
+     * 
+     * @param key is evaluated value of correlationExpression
+     * @param doneSync is a flag indicating if the exchange is routed asynchronously or not
+     * @return DelayQueue in which the exchange with permit expiry to be put into
+     */
+    private DelayQueue<ThrottlePermit> locateDelayQueue(final Integer key, final boolean doneSync) throws InterruptedException, ExecutionException {        
+        CompletableFuture<DelayQueue<ThrottlePermit>> futureDelayQueue = new CompletableFuture<>();
+
+        if (!doneSync) {
+            asyncExecutor.submit(() -> {
+                futureDelayQueue.complete(findDelayQueue(key));
+            });
+        }
+        DelayQueue<ThrottlePermit> currentQueue = (!doneSync) ? futureDelayQueue.get() : findDelayQueue(key);   
+        return currentQueue;
+    }
+
+    private DelayQueue<ThrottlePermit> findDelayQueue(Integer key) {
+        DelayQueue<ThrottlePermit> currentDelayQueue = delayQueueCache.get(key);
+        if (currentDelayQueue == null) {
+            currentDelayQueue = new DelayQueue<>();
+            throttleRatesMap.put(key, 0);
+            delayQueueCache.put(key, currentDelayQueue);
+        }
+        return currentDelayQueue;
+    }
+
     /**
      * Delegate blocking on the DelayQueue to an asyncExecutor. Except if the executor rejects the submission
      * and isCallerRunsWhenRejected() is enabled, then this method will delegate back to process(), but not
@@ -222,8 +280,10 @@ public void run() {
 
     /**
      * Returns a permit to the DelayQueue, first resetting it's delay to be relative to now.
+     * @throws ExecutionException 
+     * @throws InterruptedException 
      */
-    protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange) {
+    protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchange, DelayQueue<ThrottlePermit> delayQueue) throws InterruptedException, ExecutionException {
         permit.setDelayMs(getTimePeriodMillis());
         delayQueue.put(permit);
         // try and incur the least amount of overhead while releasing permits back to the queue
@@ -235,23 +295,31 @@ protected void enqueuePermit(final ThrottlePermit permit, final Exchange exchang
     /**
      * Evaluates the maxRequestsPerPeriodExpression and adjusts the throttle rate up or down.
      */
-    protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) throws Exception {
+    protected void calculateAndSetMaxRequestsPerPeriod(DelayQueue<ThrottlePermit> delayQueue, final Exchange exchange, final Integer key) throws Exception {
         Integer newThrottle = maxRequestsPerPeriodExpression.evaluate(exchange, Integer.class);
 
         if (newThrottle != null && newThrottle < 0) {
             throw new IllegalStateException(""The maximumRequestsPerPeriod must be a positive number, was: "" + newThrottle);
         }
 
-        synchronized (this) {
-            if (newThrottle == null && throttleRate == 0) {
+        Object lockOnSync = this;
+        Integer currentThrottleRate = throttleRate;
+        if (correlationExpression != null) {
+            currentThrottleRate = throttleRatesMap.get(key);
+            lockOnSync = key;
+        }
+
+        synchronized (lockOnSync) {
+            if (newThrottle == null && currentThrottleRate == 0) {
                 throw new RuntimeExchangeException(""The maxRequestsPerPeriodExpression was evaluated as null: "" + maxRequestsPerPeriodExpression, exchange);
             }
 
             if (newThrottle != null) {
-                if (newThrottle != throttleRate) {
+                if (newThrottle != currentThrottleRate) {
+                    // get the queue from the cache
                     // decrease
-                    if (throttleRate > newThrottle) {
-                        int delta = throttleRate - newThrottle;
+                    if (currentThrottleRate > newThrottle) {
+                        int delta = currentThrottleRate - newThrottle;
 
                         // discard any permits that are needed to decrease throttling
                         while (delta > 0) {
@@ -259,39 +327,75 @@ protected void calculateAndSetMaxRequestsPerPeriod(final Exchange exchange) thro
                             delta--;
                             log.trace(""Permit discarded due to throttling rate decrease, triggered by ExchangeId: {}"", exchange.getExchangeId());
                         }
-                        log.debug(""Throttle rate decreased from {} to {}, triggered by ExchangeId: {}"", throttleRate, newThrottle, exchange.getExchangeId());
+                        log.debug(""Throttle rate decreased from {} to {}, triggered by ExchangeId: {}"", currentThrottleRate, newThrottle, exchange.getExchangeId());
 
                     // increase
-                    } else if (newThrottle > throttleRate) {
-                        int delta = newThrottle - throttleRate;
+                    } else if (newThrottle > currentThrottleRate) {
+                        int delta = newThrottle - currentThrottleRate;
                         for (int i = 0; i < delta; i++) {
                             delayQueue.put(new ThrottlePermit(-1));
                         }
-                        if (throttleRate == 0) {
+                        if (currentThrottleRate == 0) {
                             log.debug(""Initial throttle rate set to {}, triggered by ExchangeId: {}"", newThrottle, exchange.getExchangeId());
                         } else {
-                            log.debug(""Throttle rate increase from {} to {}, triggered by ExchangeId: {}"", throttleRate, newThrottle, exchange.getExchangeId());
+                            log.debug(""Throttle rate increase from {} to {}, triggered by ExchangeId: {}"", currentThrottleRate, newThrottle, exchange.getExchangeId());
                         }
                     }
-                    throttleRate = newThrottle;
+                    if (correlationExpression != null) {
+                        throttleRatesMap.put(key, newThrottle);
+                    } else {
+                        throttleRate = newThrottle;
+                    }
                 }
             }
         }
     }
 
+    @SuppressWarnings(""unchecked"")
     @Override
     protected void doStart() throws Exception {
         if (isAsyncDelayed()) {
             ObjectHelper.notNull(asyncExecutor, ""executorService"", this);
         }
+        if (correlationExpression != null) {
+            if (camelContext != null) {
+                int maxSize = CamelContextHelper.getMaximumSimpleCacheSize(camelContext);
+                if (maxSize > 0) {
+                    delayQueueCache = LRUCacheFactory.newLRUCache(16, maxSize, false);
+                    log.debug(""DelayQueues cache size: {}"", maxSize);
+                } else {
+                    delayQueueCache = LRUCacheFactory.newLRUCache(100);
+                    log.debug(""Defaulting DelayQueues cache size: {}"", 100);
+                }
+            }
+            if (delayQueueCache != null) {
+                ServiceHelper.startService(delayQueueCache);
+            }
+        }
         super.doStart();
     }
 
+    @SuppressWarnings(""rawtypes"")
     @Override
     protected void doShutdown() throws Exception {
         if (shutdownAsyncExecutor && asyncExecutor != null) {
             camelContext.getExecutorServiceManager().shutdownNow(asyncExecutor);
         }
+        if (correlationExpression != null) {
+            if (delayQueueCache != null) {
+                ServiceHelper.stopService(delayQueueCache);
+                if (log.isDebugEnabled()) {
+                    if (delayQueueCache instanceof LRUCache) {
+                        log.debug(""Clearing deleay queues cache[size={}, hits={}, misses={}, evicted={}]"",
+                                delayQueueCache.size(), ((LRUCache) delayQueueCache).getHits(), ((LRUCache) delayQueueCache).getMisses(), ((LRUCache) delayQueueCache).getEvicted());
+                    }
+                }
+                delayQueueCache.clear();
+            }
+            if (throttleRatesMap != null && throttleRatesMap.size() > 0) {
+                throttleRatesMap.clear();
+            }
+        }
         super.doShutdown();
     }
 
@@ -365,9 +469,14 @@ public Expression getMaximumRequestsPerPeriodExpression() {
 
     /**
      * Gets the current maximum request per period value.
+     * If it is grouped throttling applied with correlationExpression 
+     * than the max per period within the group will return
      */
     public int getCurrentMaximumRequestsPerPeriod() {
-        return throttleRate;
+        if (correlationExpression == null) {
+            return throttleRate;
+        }
+        return Collections.max(throttleRatesMap.entrySet(), (entry1, entry2) -> entry1.getValue() - entry2.getValue()).getValue();
     }
 
     /**
diff --git a/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java b/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java
new file mode 100644
index 00000000000..09f1160148e
--- /dev/null
+++ b/camel-core/src/test/java/org/apache/camel/processor/ThrottlingGroupingTest.java
@@ -0,0 +1,77 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.processor;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.camel.ContextTestSupport;
+import org.apache.camel.builder.RouteBuilder;
+
+/**
+ * @version 
+ */
+public class ThrottlingGroupingTest extends ContextTestSupport {
+
+    public void testGroupingWithSingleConstant() throws Exception {
+        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"", ""Bye World"");
+        getMockEndpoint(""mock:dead"").expectedBodiesReceived(""Kaboom"");
+
+        template.sendBodyAndHeader(""seda:a"", ""Kaboom"", ""max"", null);
+        template.sendBodyAndHeader(""seda:a"", ""Hello World"", ""max"", 2);
+        template.sendBodyAndHeader(""seda:a"", ""Bye World"", ""max"", 2);
+
+        assertMockEndpointsSatisfied();
+    }
+    
+    public void testGroupingWithDynamicHeaderExpression() throws Exception {
+        getMockEndpoint(""mock:result"").expectedBodiesReceived(""Hello World"");
+        getMockEndpoint(""mock:result2"").expectedBodiesReceived(""Bye World"");
+        getMockEndpoint(""mock:dead"").expectedBodiesReceived(""Kaboom"", ""Saloon"");
+        getMockEndpoint(""mock:resultdynamic"").expectedBodiesReceived(""Hello Dynamic World"", ""Bye Dynamic World"");
+        
+        Map<String, Object> headers = new HashMap<String, Object>();
+
+        template.sendBodyAndHeaders(""seda:a"", ""Kaboom"", headers);
+        template.sendBodyAndHeaders(""seda:a"", ""Saloon"", headers);
+        
+        headers.put(""max"", ""2"");
+        template.sendBodyAndHeaders(""seda:a"", ""Hello World"", headers);
+        template.sendBodyAndHeaders(""seda:b"", ""Bye World"", headers);
+        headers.put(""max"", ""2"");
+        headers.put(""key"", ""1"");
+        template.sendBodyAndHeaders(""seda:c"", ""Hello Dynamic World"", headers);
+        headers.put(""key"", ""2"");
+        template.sendBodyAndHeaders(""seda:c"", ""Bye Dynamic World"", headers);
+        
+        assertMockEndpointsSatisfied();
+    }
+
+    @Override
+    protected RouteBuilder createRouteBuilder() throws Exception {
+        return new RouteBuilder() {
+            @Override
+            public void configure() throws Exception {
+                errorHandler(deadLetterChannel(""mock:dead""));
+
+                from(""seda:a"").throttle(header(""max""), 1).to(""mock:result"");
+                from(""seda:b"").throttle(header(""max""), 2).to(""mock:result2"");
+                from(""seda:c"").throttle(header(""max""), header(""key"")).to(""mock:resultdynamic"");
+            }
+        };
+    }
+}
diff --git a/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringThrottlerGroupingTest.java b/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringThrottlerGroupingTest.java
new file mode 100644
index 00000000000..e321838cdb3
--- /dev/null
+++ b/components/camel-spring/src/test/java/org/apache/camel/spring/processor/SpringThrottlerGroupingTest.java
@@ -0,0 +1,31 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the ""License""); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.camel.spring.processor;
+
+import org.apache.camel.CamelContext;
+import org.apache.camel.processor.ThrottlingGroupingTest;
+import org.junit.Ignore;
+
+import static org.apache.camel.spring.processor.SpringTestHelper.createSpringCamelContext;
+
+public class SpringThrottlerGroupingTest extends ThrottlingGroupingTest {
+
+    protected CamelContext createCamelContext() throws Exception {
+        return createSpringCamelContext(this,
+                ""org/apache/camel/spring/processor/ThrottlerGroupingTest.xml"");
+    }
+}
diff --git a/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml b/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
new file mode 100644
index 00000000000..c3019cda3a9
--- /dev/null
+++ b/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/ThrottlerGroupingTest.xml
@@ -0,0 +1,66 @@
+<?xml version=""1.0"" encoding=""UTF-8""?>
+<!--
+
+    Licensed to the Apache Software Foundation (ASF) under one or more
+    contributor license agreements.  See the NOTICE file distributed with
+    this work for additional information regarding copyright ownership.
+    The ASF licenses this file to You under the Apache License, Version 2.0
+    (the ""License""); you may not use this file except in compliance with
+    the License.  You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+    Unless required by applicable law or agreed to in writing, software
+    distributed under the License is distributed on an ""AS IS"" BASIS,
+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+    See the License for the specific language governing permissions and
+    limitations under the License.
+
+-->
+<beans xmlns=""http://www.springframework.org/schema/beans""
+       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
+       xsi:schemaLocation=""
+       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
+       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
+    "">
+  <camelContext xmlns=""http://camel.apache.org/schema/spring"">
+    <errorHandler id=""dlc"" deadLetterUri=""mock:dead"" type=""DeadLetterChannel""/>
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:a""/>
+      <throttle timePeriodMillis=""1000"">
+        <header>max</header>
+        <correlationExpression>
+          <constant>1</constant>
+        </correlationExpression>
+        <to uri=""log:result""/>
+        <to uri=""mock:result""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:b""/>
+      <throttle timePeriodMillis=""1000"">
+        <header>max</header>
+        <correlationExpression>
+          <constant>2</constant>
+        </correlationExpression>        
+        <to uri=""log:result""/>
+        <to uri=""mock:result2""/>
+      </throttle>
+    </route>
+    
+    <route errorHandlerRef=""dlc"">
+      <from uri=""seda:c""/>
+      <throttle timePeriodMillis=""1000"">
+        <header>max</header>
+        <correlationExpression>
+          <header>key</header>
+        </correlationExpression>
+        <to uri=""log:result""/>
+        <to uri=""mock:resultdynamic""/>
+      </throttle>
+    </route>
+
+  </camelContext>
+
+</beans>


 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

githubbot:1530660302:2018-07-04T07:25:02.121+0000:1530660302:2018-07-04T07:25:02.121+0000:Github user onderson closed the pull request at:

    https://github.com/apache/camel/pull/2376

githubbot:1530660402:2018-07-04T07:26:42.944+0000:1530660402:2018-07-04T07:26:42.944+0000:onderson commented on issue #2376: CAMEL-6840 - add grouped throttling feature, both XML and Java DSL should be fine now.
URL: https://github.com/apache/camel/pull/2376#issuecomment-402388863
 
 
   Thanks everybody for making all your comments. @davsclaus , @WillemJiang , @aldettinger @oscerd 

----------------------------------------------------------------
This is an automated message from the Apache Git Service.
To respond to the message, please log on GitHub and use the
URL above to go to the specific comment.
 
For queries about this service, please contact Infrastructure at:
users@infra.apache.org

davsclaus:1530775585:2018-07-05T15:26:25.273+0000:1530775585:2018-07-05T15:26:25.273+0000:I suspect this implementation may have caused the spring test to fail in camel-spring: SpringThrottlerTest

 

[ERROR] Failures:
[ERROR] org.apache.camel.spring.processor.SpringThrottlerTest.testConfigurationWithChangingHeaderExpression(org.apache.camel.spring.processor.SpringThrottlerTest)
[ERROR] Run 1: SpringThrottlerTest>TestSupport.runBare:58->ThrottlerTest.testConfigurationWithChangingHeaderExpression:119->ThrottlerTest.sendMessagesWithHeaderExpression:191->ThrottlerTest.assertThrottlerTiming:145 Should take at least 450ms, was: 1
[ERROR] Run 2: SpringThrottlerTest>TestSupport.runBare:58->ThrottlerTest.testConfigurationWithChangingHeaderExpression:119->ThrottlerTest.sendMessagesWithHeaderExpression:191->ThrottlerTest.assertThrottlerTiming:145 Should take at least 450ms, was: 1
[ERROR] Run 3: SpringThrottlerTest>TestSupport.runBare:58->ThrottlerTest.testConfigurationWithChangingHeaderExpression:119->ThrottlerTest.sendMessagesWithHeaderExpression:191->ThrottlerTest.assertThrottlerTiming:145 Should take at least 450ms, was: 1
davsclaus:1530775629:2018-07-05T15:27:09.646+0000:1530775629:2018-07-05T15:27:09.646+0000:Mind that sometimes we extend unit tests from camel-core in camel-spring, so if you change something in camel-core you may need to change also in camel-spring
onders:1530783008:2018-07-05T17:30:08.579+0000:1530783008:2018-07-05T17:30:08.579+0000:i dont have the same issue in both windows and centos vm boxes. can not reproduce :/ not sure how to carry on at this point. i ll try to reproduce
davsclaus:1530784645:2018-07-05T17:57:25.637+0000:1530784645:2018-07-05T17:57:25.637+0000:Ah yeah such timing/threading tests can sometimes be hard to reproduce. The CI server also had a failure in a build

[https://builds.apache.org/job/Camel/job/master/446/testReport/junit/org.apache.camel.spring.processor/SpringThrottlerTest/testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough/]

 
davsclaus:1530784738:2018-07-05T17:58:58.703+0000:1530784738:2018-07-05T17:58:58.703+0000:I notice these interrupts exception as well
{code:java}

[INFO] -------------------------------------------------------
[INFO] T E S T S
[INFO] -------------------------------------------------------
[INFO] Running org.apache.camel.spring.processor.SpringThrottlerTest
Exception in thread ""pool-19-thread-1"" Exception in thread ""pool-19-thread-4"" Exception in thread ""pool-19-thread-2"" Exception in thread ""pool-19-thread-5"" Exception in thread ""pool-19-thread-3"" org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-davsclaus-pro-local-1530813464035-6-40]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1846)
at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:715)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:189)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:183)
at org.apache.camel.processor.ThrottlerTest$2.run(ThrottlerTest.java:183)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2048)
at java.util.concurrent.DelayQueue.take(DelayQueue.java:211)
at org.apache.camel.processor.Throttler.process(Throttler.java:157)
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:187)
... 5 more
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-davsclaus-pro-local-1530813464035-6-48]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1846)
at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:715)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:189)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:183)
at org.apache.camel.processor.ThrottlerTest$2.run(ThrottlerTest.java:183)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2048)
at java.util.concurrent.DelayQueue.take(DelayQueue.java:211)
at org.apache.camel.processor.Throttler.process(Throttler.java:157)
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:187)
... 5 more
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-davsclaus-pro-local-1530813464035-6-46]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1846)
at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:715)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:189)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:183)
at org.apache.camel.processor.ThrottlerTest$2.run(ThrottlerTest.java:183)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2048)
at java.util.concurrent.DelayQueue.take(DelayQueue.java:211)
at org.apache.camel.processor.Throttler.process(Throttler.java:157)
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:187)
... 5 more
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-davsclaus-pro-local-1530813464035-6-49]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1846)
at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:715)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:189)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:183)
at org.apache.camel.processor.ThrottlerTest$2.run(ThrottlerTest.java:183)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2048)
at java.util.concurrent.DelayQueue.take(DelayQueue.java:211)
at org.apache.camel.processor.Throttler.process(Throttler.java:157)
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:187)
... 5 more
org.apache.camel.CamelExecutionException: Exception occurred during execution on the exchange: Exchange[ID-davsclaus-pro-local-1530813464035-6-47]
at org.apache.camel.util.ObjectHelper.wrapCamelExecutionException(ObjectHelper.java:1846)
at org.apache.camel.util.ExchangeHelper.extractResultBody(ExchangeHelper.java:715)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:515)
at org.apache.camel.impl.DefaultProducerTemplate.extractResultBody(DefaultProducerTemplate.java:511)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:189)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:183)
at org.apache.camel.processor.ThrottlerTest$2.run(ThrottlerTest.java:183)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.InterruptedException
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.reportInterruptAfterWait(AbstractQueuedSynchronizer.java:2014)
at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2048)
at java.util.concurrent.DelayQueue.take(DelayQueue.java:211)
at org.apache.camel.processor.Throttler.process(Throttler.java:157)
at org.apache.camel.processor.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:548)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.processor.CamelInternalProcessor.process(CamelInternalProcessor.java:201)
at org.apache.camel.component.direct.DirectBlockingProducer.process(DirectBlockingProducer.java:53)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:186)
at org.apache.camel.processor.SharedCamelInternalProcessor.process(SharedCamelInternalProcessor.java:86)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:541)
at org.apache.camel.impl.ProducerCache$1.doInProducer(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.doInProducer(ProducerCache.java:369)
at org.apache.camel.impl.ProducerCache.sendExchange(ProducerCache.java:506)
at org.apache.camel.impl.ProducerCache.send(ProducerCache.java:229)
at org.apache.camel.impl.DefaultProducerTemplate.send(DefaultProducerTemplate.java:144)
at org.apache.camel.impl.DefaultProducerTemplate.sendBodyAndHeader(DefaultProducerTemplate.java:187)
... 5 more
[ERROR] Tests run: 12, Failures: 7, Errors: 0, Skipped: 0, Time elapsed: 22.308 s <<< FAILURE! - in org.apache.camel.spring.processor.SpringThrottlerTest
[ERROR] testConfigurationWithChangingHeaderExpression(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 1.524 s <<< FAILURE!
junit.framework.AssertionFailedError: Should take at least 450ms, was: 21

[ERROR] testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 0.52 s <<< FAILURE!
junit.framework.AssertionFailedError: Should take at least 450ms, was: 2

[ERROR] testConfigurationWithConstantExpression(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 0.378 s <<< FAILURE!
junit.framework.AssertionFailedError: Should take at least 450ms, was: 1

[ERROR] testConfigurationWithChangingHeaderExpression(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 12.009 s <<< FAILURE!
java.lang.AssertionError: mock://result Received message count. Expected: <9> but was: <4>

[ERROR] testSendLotsOfMessagesSimultaneouslyButOnly3GetThrough(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 0.385 s <<< FAILURE!
junit.framework.AssertionFailedError: Should take at least 450ms, was: 3

[ERROR] testConfigurationWithConstantExpression(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 0.354 s <<< FAILURE!
junit.framework.AssertionFailedError: Should take at least 450ms, was: 1

[ERROR] testConfigurationWithChangingHeaderExpression(org.apache.camel.spring.processor.SpringThrottlerTest) Time elapsed: 0.385 s <<< FAILURE!
junit.framework.AssertionFailedError: Should take at least 450ms, was: 2{code}
onders:1530793485:2018-07-05T20:24:45.686+0000:1530793485:2018-07-05T20:24:45.686+0000:yes, happening on mac more often. maybe i can revert again :/ and work on mac too before merging..
onders:1530801579:2018-07-05T22:39:39.382+0000:1530801579:2018-07-05T22:39:39.382+0000:all tests pass now. more regression unit tests to be added in the following days."
0,CAMEL-6839,Bug,Major,2.12.1,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Willem Jiang,Dhiraj Sureshkumar Bokde,0,2,2013-10-08 17:06:15+00:00,2013-10-10 08:20:32+00:00,Class FacebookEndpoint needs to look at the candidate method list size to determine whether it found get* only or get* and search* candidate methods.,"dhirajsb:1381223281:2013-10-08T17:08:01.892+0000:1381223281:2013-10-08T17:08:01.892+0000:Patch attached for CAMEL-6839
njiang:1381364432:2013-10-10T08:20:32.194+0000:1381364432:2013-10-10T08:20:32.194+0000:Applied the patch into master and camel-2.12.x with thanks to Dhiraj."
0,CAMEL-6838,Improvement,Minor,2.12.1,None,"
None
",Resolved,Fixed,"2.12.3, 2.13.0",Willem Jiang,Raúl Kripalani,0,2,2013-10-08 16:33:43+00:00,2014-02-21 14:41:02+00:00,This leads to absolutely no JMX Notifications being recorded when the Tracer's traceOutExchanges option is enabled.,njiang:1392680919:2014-02-18T07:48:39.301+0000:1392680919:2014-02-18T07:48:39.301+0000:Applied the patch into camel master and camel-2.12.x branches.
0,CAMEL-6837,Improvement,Minor,None,"2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.12.2, 2.13.0",Claus Ibsen,Franz Forsthofer,0,2,2013-10-08 09:15:12+00:00,2013-10-11 13:24:24+00:00,"PGP Data Format is currently using the Bouncy Castle JCE provider. The attached patch opens the PGP Data Format for other JCE providers. 


I made tests with the IAIK JCE Provider and it was working fine. Unfortunately, the SunJCE provider cannot be used because it does not contain the message digest algorithms (the message digest algorithm are contained in the other provider with name 'SUN') and the PGP bouncy caslte API only allows specifying one provider.","davsclaus:1381469064:2013-10-11T13:24:24.649+0000:1381469064:2013-10-11T13:24:24.649+0000:Thanks for the patch.

The init of the provider should not be done from marshal/unmarshal as you can have concurrency issues or whatnot.

So I extended ServiceSupport and added the init logic to doStart/doStop which is the correct way.

Also added the provider option to the model in camel-core so people can configure it in xml / dsl"
0,CAMEL-6836,Task,Trivial,None,,"

docuentation

",Closed,Fixed,None,Claus Ibsen,Geert Schuring,0,2,2013-10-08 08:05:20+00:00,2014-01-22 08:59:38+00:00,The link to kotlin on the DSL page is dead. Should probably be: https://github.com/koolio/kool/tree/master/kool-camel,"ceposta:1381249682:2013-10-09T00:28:02.132+0000:1381249682:2013-10-09T00:28:02.132+0000:Seems Claus updated this. 
Can you confirm?
cathodion:1390352348:2014-01-22T08:59:08.635+0000:1390352348:2014-01-22T08:59:08.635+0000:Yep, works correctly now."
0,CAMEL-6835,Improvement,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,2,2013-10-08 05:13:25+00:00,2013-10-30 03:11:08+00:00,"If the user already has the test bundle, CamelBlueprintTestSupport should support not to create a test bundle which has the same blueprint configuration files.","njiang:1381187485:2013-10-08T07:11:25.578+0000:1381187485:2013-10-08T07:11:25.578+0000:Applied the patch into master, camel-2.12.x and camel-2.11.x branches.
apiwoni:1383073150:2013-10-30T02:59:10.293+0000:1383073150:2013-10-30T02:59:10.293+0000:When I stepped through debugger and set includeTestBundle to false I've got the following error:

java.lang.RuntimeException: Gave up waiting for service (&(objectClass=org.osgi.service.blueprint.container.BlueprintContainer)(osgi.blueprint.container.symbolicname=<b>MyTestBundle</b>))
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:203)
	at org.apache.camel.test.blueprint.CamelBlueprintHelper.getOsgiService(CamelBlueprintHelper.java:169)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.getOsgiService(CamelBlueprintTestSupport.java:237)
	at org.apache.camel.test.blueprint.CamelBlueprintTestSupport.setUp(CamelBlueprintTestSupport.java:126)
	at com.obsglobal.partners.portland.routes.BaseRouteTester.setUp(BaseRouteTester.java:77)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:27)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)
	at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)

It seems that committed change allows to set this flag to false so I'm wondering if it is going to fix the problem?
Andre
njiang:1383073868:2013-10-30T03:11:08.878+0000:1383073868:2013-10-30T03:11:08.878+0000:Hi Andre,

Can you submit a small test case for it?
I will run some debug to see what is wrong.

Regards,

Willem"
0,CAMEL-6834,Improvement,Major,None,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Willem Jiang,Willem Jiang,0,1,2013-10-08 03:01:48+00:00,2013-10-08 07:10:43+00:00,"It could be handy if the user want to send Representation object back through the camel-restlet consumer.


Here is a mail thread about it.","njiang:1381187443:2013-10-08T07:10:43.569+0000:1381187443:2013-10-08T07:10:43.569+0000:Applied the patch to master, camel-2.12.x and camel-2.11.x branches."
0,CAMEL-6833,Bug,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,James Carman,James Carman,0,1,2013-10-08 01:21:08+00:00,2013-10-10 13:20:51+00:00,"When redesigning the tests to use mock objects, I noticed that the atomic number producer actually uses the incorrect atomic number name.  If you try to update an atomic number named ""foo"", it actually updates one named ""ue:foo"".  This is because it uses the wrong constant (the one for instances) when it picks apart the URI.",
0,CAMEL-6832,Bug,Major,"2.10.4, 2.11.0, 2.11.2","2.11.3, 2.12.2, 2.13.0","

quartz
scheduler

",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Claus Ibsen,Nurali,0,3,2013-10-07 02:58:47+00:00,2013-10-12 10:19:10+00:00,"Hello,


I have observed a memory leak for Quartz worker thread in case an exception is thrown during
the scheduling phase when schedule is set to past time.
I have observed this issue with camel-quart 2.10.4, 2.11.0, 2.11.2 versions.


For ex, assuming today is 4-Oct; If a schedule is provided for yesterday (i.e 3-Oct) then
below sequence happen:


1. Quartz create worker thread for new schedule [generally TEN Threads with name 'DefaultQuartzScheduler']
2. Camel-quartz increment jobCounter for scheduler context [using QuartzComponent.incrementJobCounter()]
3. Camel-quartz tries to create new schedule [using Scheduler.scheduleJob()]
4. scheduleJob() throws SchedulerException with the message - 'Based on configured schedule,
the given trigger will never fire'
5. Camel-quartz does NOT decrement the job counter and jobCounter value remains '1'
6. Later Camel-Quartz stops the route and call QuartzComponent.doStop()
7. In doStop(), Scheduler.shutdown() supposed to be called so that those TEN threads are
removed but to call shutdown() the pre-condition is that the jobCounter should be '0'.  In
this case jobCounter is '1' and Scheduler.shutdown() will NOT be called and those TEN threads
are NOT removed.  This is memory leak.


Please find the stack trace in attachment 'memory_leak_scheduler_stack_trace.log' [with Camel-Quartz 2.11.2 and org.apache.servicemix.bundles.quartz-1.8.6_1
which wrapped Quartz Scheduler as OSGi bundle] when SchedulerException is thrown at step
4 in above sequence.


Thanks,
Nurali",davsclaus:1381544339:2013-10-12T10:18:59.088+0000:1381544339:2013-10-12T10:18:59.088+0000:Thanks for reporting and providing the stacktrace.
0,CAMEL-6831,Task,Major,None,2.13.0,"
None
",Resolved,Fixed,2.13.0,Raúl Kripalani,Raúl Kripalani,0,2,2013-10-06 21:38:07+00:00,2013-10-07 23:54:59+00:00,No Desc,"muellerc:1381153690:2013-10-07T21:48:10.079+0000:1381153690:2013-10-07T21:48:10.079+0000:Because of this update the camel-aws feature validation failed:
{noformat}
cmueller$ mvn clean install -Pvalidate
...
[INFO]     OK: imports resolved for camel-avro
[WARNING] Failed to validate feature camel-aws
[WARNING] No export found to match org.apache.http.impl.client;version=""[4,5)"" (imported by mvn:org.apache.servicemix.bundles/org.apache.servicemix.bundles.aws-java-sdk/1.5.1_1)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
{noformat}

See [CAMEL-6806|https://issues.apache.org/jira/browse/CAMEL-6806] for details.
raulvk:1381155975:2013-10-07T22:26:15.229+0000:1381155975:2013-10-07T22:26:15.229+0000:Hey Christian,

Thanks for the report. Looking into it!

Regards,
Raúl.
raulvk:1381161299:2013-10-07T23:54:59.922+0000:1381161299:2013-10-07T23:54:59.922+0000:Fixed in commit 3e2dedf by upgrading to Apache HTTP Client 4.3.1 which was just released today, including the fixes for HTTPCLIENT-1398 and HTTPCLIENT-1400."
0,CAMEL-6830,New Feature,Minor,2.12.1,"2.11.3, 2.12.2, 2.13.0","
None
",Resolved,Fixed,"2.11.3, 2.12.2, 2.13.0",Christian Müller,Christian Müller,0,1,2013-10-06 20:27:34+00:00,2013-10-06 20:45:46+00:00,No Desc,
0,CAMEL-6829,Improvement,Minor,2.12.1,,"
None
",Resolved,Won't Fix,None,Unassigned,Mateusz Nowakowski,0,2,2013-10-04 15:25:25+00:00,2019-07-31 04:26:17+00:00,"Currently JettyHttpProducer  has some limitations which currently can be solved by introducing yet another options on endpoint or on message level.


For example JettyHttpProducer  
produces non-chunked HTTP request only when:



context type is application/x-java-serialized-object
or the body is actually a String only","davsclaus:1436567608:2015-07-11T06:33:28.360+0000:1436567608:2015-07-11T06:33:28.360+0000:And how would you do that. You can implemenet / extend the binding and use your custom.
davsclaus:1564518377:2019-07-31T04:26:17.800+0000:1564518377:2019-07-31T04:26:17.800+0000:jetty producer has been deprecated in 2.x and removed in 3"
